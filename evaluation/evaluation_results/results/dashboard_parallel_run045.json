{
  "prompt_id": "dashboard",
  "prompt_name": "Analytics Dashboard",
  "mode": "parallel",
  "run_number": 45,
  "timestamp": "2025-10-13T21:09:21.239335",
  "response_time": 74.33581471443176,
  "total_tokens": null,
  "response_content": "import { useState, useCallback } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Moon, Sun, RefreshCw } from 'lucide-react';\nimport { ArrowUpDown, ArrowUp, ArrowDown } from 'lucide-react';\nimport { Badge } from '@/components/ui/badge';\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from '@/components/ui/table';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, Legend } from 'recharts';\nimport { BarChart3 } from 'lucide-react';\nimport { motion } from 'framer-motion';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';\nimport { PieChart, Pie, Cell, Legend } from 'recharts';\nimport { TrendingUp, TrendingDown } from 'lucide-react';\nimport { TrendingUp, TrendingDown, DollarSign, Users, ShoppingCart, Target } from 'lucide-react';\nimport { Clock, UserPlus, ShoppingBag, AlertCircle, CheckCircle, XCircle } from 'lucide-react';\nimport { motion } from 'framer-motion';\n\ninterface MetricData {\n  id: string;\n  label: string;\n  value: number;\n  change: number;\n  trend: 'up' | 'down';\n}\n\ninterface ChartDataPoint {\n  date: string;\n  revenue: number;\n  users: number;\n  orders: number;\n}\n\ninterface TableRow {\n  id: string;\n  product: string;\n  sales: number;\n  revenue: number;\n  status: 'active' | 'pending' | 'inactive';\n}\ninterface FunnelStage {\n  stage: string;\n  value: number;\n  color: string;\n}\n\nconst mockMetrics: MetricData[] = [\n  { id: '1', label: 'Total Revenue', value: 45231, change: 12.5, trend: 'up' },\n  { id: '2', label: 'Active Users', value: 2350, change: 8.2, trend: 'up' },\n  { id: '3', label: 'Total Orders', value: 1543, change: -3.1, trend: 'down' },\n  { id: '4', label: 'Conversion Rate', value: 3.24, change: 5.7, trend: 'up' }\n];\n\nconst mockChartData: ChartDataPoint[] = [\n  { date: '2024-01-01', revenue: 12000, users: 450, orders: 230 },\n  { date: '2024-01-02', revenue: 15000, users: 520, orders: 280 },\n  { date: '2024-01-03', revenue: 13500, users: 490, orders: 250 },\n  { date: '2024-01-04', revenue: 18000, users: 610, orders: 320 },\n  { date: '2024-01-05', revenue: 16500, users: 580, orders: 295 },\n  { date: '2024-01-06', revenue: 20000, users: 680, orders: 360 },\n  { date: '2024-01-07', revenue: 22000, users: 720, orders: 390 }\n];\n\nconst mockTableData: TableRow[] = [\n  { id: '1', product: 'Premium Plan', sales: 234, revenue: 23400, status: 'active' },\n  { id: '2', product: 'Basic Plan', sales: 567, revenue: 11340, status: 'active' },\n  { id: '3', product: 'Enterprise Plan', sales: 89, revenue: 17800, status: 'active' },\n  { id: '4', product: 'Starter Plan', sales: 432, revenue: 4320, status: 'pending' },\n  { id: '5', product: 'Pro Plan', sales: 156, revenue: 15600, status: 'inactive' }\n];\ninterface ActivityEvent {\n  id: string;\n  type: 'user' | 'order' | 'success' | 'warning' | 'error';\n  message: string;\n  timestamp: string;\n}\n\nconst mockActivityData: ActivityEvent[] = [\n  { id: '1', type: 'user', message: 'New user registered: john.doe@example.com', timestamp: '2 minutes ago' },\n  { id: '2', type: 'order', message: 'Order #1234 completed - $450.00', timestamp: '5 minutes ago' },\n  { id: '3', type: 'success', message: 'Payment processed successfully', timestamp: '8 minutes ago' },\n  { id: '4', type: 'user', message: 'User profile updated: jane.smith@example.com', timestamp: '12 minutes ago' },\n  { id: '5', type: 'warning', message: 'Low stock alert: Premium Plan', timestamp: '15 minutes ago' },\n  { id: '6', type: 'order', message: 'Order #1233 placed - $280.00', timestamp: '18 minutes ago' },\n  { id: '7', type: 'success', message: 'Database backup completed', timestamp: '25 minutes ago' },\n  { id: '8', type: 'error', message: 'Failed login attempt detected', timestamp: '30 minutes ago' },\n  { id: '9', type: 'user', message: 'New user registered: alice.wonder@example.com', timestamp: '35 minutes ago' },\n  { id: '10', type: 'order', message: 'Order #1232 shipped', timestamp: '42 minutes ago' }\n];\nconst mockFunnelData: FunnelStage[] = [\n  { stage: 'Visitors', value: 10000, color: '#3b82f6' },\n  { stage: 'Sign Ups', value: 6500, color: '#8b5cf6' },\n  { stage: 'Active Users', value: 4200, color: '#ec4899' },\n  { stage: 'Paying Customers', value: 2350, color: '#f59e0b' },\n  { stage: 'Retained', value: 1890, color: '#10b981' }\n];\nconst mockTrafficData = [\n  { name: 'Organic Search', value: 4200, color: '#3b82f6' },\n  { name: 'Direct', value: 2800, color: '#10b981' },\n  { name: 'Social Media', value: 1900, color: '#f59e0b' },\n  { name: 'Referral', value: 1200, color: '#8b5cf6' },\n  { name: 'Email', value: 850, color: '#ec4899' }\n];\n\nexport default function AnalyticsDashboard() {\n  type SortField = 'product' | 'sales' | 'revenue' | 'status';\n  type SortDirection = 'asc' | 'desc' | null;\n  const [sortField, setSortField] = useState<SortField | null>(null);\n  const [sortDirection, setSortDirection] = useState<SortDirection>(null);\n  const [isDarkMode, setIsDarkMode] = useState(false);\n  const [metrics, setMetrics] = useState<MetricData[]>(mockMetrics);\n  const [chartData, setChartData] = useState<ChartDataPoint[]>(mockChartData);\n  const [tableData, setTableData] = useState<TableRow[]>(mockTableData);\n  const [isRefreshing, setIsRefreshing] = useState(false);\n\n  const toggleDarkMode = useCallback(() => {\n    setIsDarkMode(prev => !prev);\n  }, []);\n\n  const handleSort = useCallback((field: SortField) => {\n    if (sortField === field) {\n      if (sortDirection === 'asc') {\n        setSortDirection('desc');\n      } else if (sortDirection === 'desc') {\n        setSortField(null);\n        setSortDirection(null);\n      }\n    } else {\n      setSortField(field);\n      setSortDirection('asc');\n    }\n  }, [sortField, sortDirection]);\n\n  const sortedTableData = useCallback(() => {\n    if (!sortField || !sortDirection) return tableData;\n\n    return [...tableData].sort((a, b) => {\n      let aValue = a[sortField];\n      let bValue = b[sortField];\n\n      if (typeof aValue === 'string') {\n        aValue = aValue.toLowerCase();\n        bValue = (bValue as string).toLowerCase();\n      }\n\n      if (aValue < bValue) return sortDirection === 'asc' ? -1 : 1;\n      if (aValue > bValue) return sortDirection === 'asc' ? 1 : -1;\n      return 0;\n    });\n  }, [tableData, sortField, sortDirection]);\n\n  const formatCurrency = (value: number) => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0,\n    }).format(value);\n  };\n\n  const formatNumber = (value: number) => {\n    return new Intl.NumberFormat('en-US').format(value);\n  };\n\n  const getStatusBadgeVariant = (status: TableRow['status']) => {\n    switch (status) {\n      case 'active':\n        return 'default';\n      case 'pending':\n        return 'secondary';\n      case 'inactive':\n        return 'outline';\n      default:\n        return 'default';\n    }\n  };\n\n  const getSortIcon = (field: SortField) => {\n    if (sortField !== field) {\n      return <ArrowUpDown className=\"ml-2 h-4 w-4\" />;\n    }\n    if (sortDirection === 'asc') {\n      return <ArrowUp className=\"ml-2 h-4 w-4\" />;\n    }\n    return <ArrowDown className=\"ml-2 h-4 w-4\" />;\n  };\n  const [hoveredUserPoint, setHoveredUserPoint] = useState<number | null>(null);\n\n  const getMaxOrders = useCallback(() => {\n    return Math.max(...chartData.map(d => d.orders));\n  }, [chartData]);\n  const handleRefresh = useCallback(() => {\n    setIsRefreshing(true);\n    \n    setTimeout(() => {\n      // Generate updated metrics with random variations\n      const updatedMetrics = mockMetrics.map(metric => ({\n        ...metric,\n        value: metric.value + Math.floor(Math.random() * 200 - 100),\n        change: parseFloat((Math.random() * 20 - 5).toFixed(1)),\n        trend: Math.random() > 0.5 ? 'up' as const : 'down' as const\n      }));\n      \n      // Generate updated chart data with random variations\n      const updatedChartData = mockChartData.map(point => ({\n        ...point,\n        revenue: point.revenue + Math.floor(Math.random() * 4000 - 2000),\n        users: point.users + Math.floor(Math.random() * 100 - 50),\n        orders: point.orders + Math.floor(Math.random() * 50 - 25)\n      }));\n      \n      // Generate updated table data with random variations\n      const updatedTableData = mockTableData.map(row => ({\n        ...row,\n        sales: row.sales + Math.floor(Math.random() * 40 - 20),\n        revenue: row.revenue + Math.floor(Math.random() * 2000 - 1000)\n      }));\n      \n      setMetrics(updatedMetrics);\n      setChartData(updatedChartData);\n      setTableData(updatedTableData);\n      setIsRefreshing(false);\n    }, 1500);\n  }, []);\n\n  return (\n    <div className={`min-h-screen transition-colors duration-300 ${isDarkMode ? 'dark bg-gray-900' : 'bg-gray-50'}`}>\n      <div className=\"container mx-auto p-4 md:p-6 lg:p-8\">\n        <div className=\"flex flex-col md:flex-row md:items-center md:justify-between mb-8 gap-4\">\n          <div>\n            <h1 className={`text-3xl md:text-4xl font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n              Analytics Dashboard\n            </h1>\n            <p className={`mt-2 ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n              Real-time insights and performance metrics\n            </p>\n          </div>\n          \n          <div className=\"flex items-center gap-3\">\n            <Button\n              variant=\"outline\"\n              size=\"icon\"\n              onClick={toggleDarkMode}\n              className={isDarkMode ? 'border-gray-700 hover:bg-gray-800' : ''}\n            >\n              {isDarkMode ? <Sun className=\"h-5 w-5\" /> : <Moon className=\"h-5 w-5\" />}\n            </Button>\n            \n            <Button\n              variant=\"outline\"\n              onClick={handleRefresh}\n              disabled={isRefreshing}\n              className={isDarkMode ? 'border-gray-700 hover:bg-gray-800' : ''}\n            >\n              <RefreshCw className={`h-4 w-4 mr-2 ${isRefreshing ? 'animate-spin' : ''}`} />\n              Refresh\n            </Button>\n          </div>\n        </div>\n\n        <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 md:gap-6 mb-8\">\n          {metrics.map((metric, index) => {\n            const Icon = metric.label.includes('Revenue') ? DollarSign :\n                        metric.label.includes('Users') ? Users :\n                        metric.label.includes('Orders') ? ShoppingCart :\n                        Target;\n            \n            const TrendIcon = metric.trend === 'up' ? TrendingUp : TrendingDown;\n            const trendColor = metric.trend === 'up' ? 'text-green-500' : 'text-red-500';\n            const trendBgColor = metric.trend === 'up' \n              ? (isDarkMode ? 'bg-green-500/10' : 'bg-green-50')\n              : (isDarkMode ? 'bg-red-500/10' : 'bg-red-50');\n\n            return (\n              <motion.div\n                key={metric.id}\n                initial={{ opacity: 0, y: 20 }}\n                animate={{ opacity: 1, y: 0 }}\n                transition={{ duration: 0.4, delay: index * 0.1 }}\n              >\n                <Card className={`${isDarkMode ? 'bg-gray-800 border-gray-700' : 'bg-white'} hover:shadow-lg transition-shadow duration-300`}>\n                  <CardHeader className=\"flex flex-row items-center justify-between pb-2\">\n                    <CardTitle className={`text-sm font-medium ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                      {metric.label}\n                    </CardTitle>\n                    <div className={`p-2 rounded-lg ${isDarkMode ? 'bg-gray-700' : 'bg-gray-100'}`}>\n                      <Icon className={`h-4 w-4 ${isDarkMode ? 'text-gray-300' : 'text-gray-600'}`} />\n                    </div>\n                  </CardHeader>\n                  <CardContent>\n                    <div className={`text-2xl font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                      {metric.label.includes('Revenue') ? `$${metric.value.toLocaleString()}` : \n                       metric.label.includes('Rate') ? `${metric.value}%` :\n                       metric.value.toLocaleString()}\n                    </div>\n                    <div className=\"flex items-center mt-2\">\n                      <div className={`flex items-center gap-1 px-2 py-1 rounded-full ${trendBgColor}`}>\n                        <TrendIcon className={`h-3 w-3 ${trendColor}`} />\n                        <span className={`text-xs font-medium ${trendColor}`}>\n                          {Math.abs(metric.change)}%\n                        </span>\n                      </div>\n                      <span className={`text-xs ml-2 ${isDarkMode ? 'text-gray-500' : 'text-gray-500'}`}>\n                        vs last period\n                      </span>\n                    </div>\n                  </CardContent>\n                </Card>\n              </motion.div>\n            );\n          })}\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6 mb-8\">\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Revenue Overview</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Daily revenue trends for the past week\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"w-full h-[300px] md:h-[350px]\">\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <LineChart\n                    data={chartData}\n                    margin={{ top: 5, right: 10, left: -20, bottom: 5 }}\n                  >\n                    <CartesianGrid \n                      strokeDasharray=\"3 3\" \n                      stroke={isDarkMode ? '#374151' : '#e5e7eb'}\n                    />\n                    <XAxis \n                      dataKey=\"date\" \n                      stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                      fontSize={12}\n                      tickFormatter={(value) => new Date(value).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n                    />\n                    <YAxis \n                      stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                      fontSize={12}\n                      tickFormatter={(value) => `$${(value / 1000).toFixed(0)}k`}\n                    />\n                    <Tooltip \n                      contentStyle={{\n                        backgroundColor: isDarkMode ? '#1f2937' : '#ffffff',\n                        border: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\n                        borderRadius: '8px',\n                        color: isDarkMode ? '#ffffff' : '#000000'\n                      }}\n                      labelFormatter={(value) => new Date(value).toLocaleDateString('en-US', { month: 'long', day: 'numeric', year: 'numeric' })}\n                      formatter={(value: number) => [`$${value.toLocaleString()}`, 'Revenue']}\n                    />\n                    <Line \n                      type=\"monotone\" \n                      dataKey=\"revenue\" \n                      stroke=\"#3b82f6\" \n                      strokeWidth={2}\n                      dot={{ fill: '#3b82f6', r: 4 }}\n                      activeDot={{ r: 6, fill: '#2563eb' }}\n                    />\n                  </LineChart>\n                </ResponsiveContainer>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>User Activity</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Active users and engagement metrics\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"relative h-64 w-full\">\n                <svg className=\"w-full h-full\" viewBox=\"0 0 700 256\" preserveAspectRatio=\"none\">\n                  <defs>\n                    <linearGradient id=\"userGradient\" x1=\"0\" x2=\"0\" y1=\"0\" y2=\"1\">\n                      <stop offset=\"0%\" stopColor={isDarkMode ? \"#3b82f6\" : \"#60a5fa\"} stopOpacity=\"0.5\" />\n                      <stop offset=\"100%\" stopColor={isDarkMode ? \"#3b82f6\" : \"#60a5fa\"} stopOpacity=\"0.05\" />\n                    </linearGradient>\n                  </defs>\n                  \n                  {/* Area path */}\n                  <motion.path\n                    d={`M 0,${256 - (chartData[0].users / 800) * 256} \n                        L ${100},${256 - (chartData[1].users / 800) * 256}\n                        L ${200},${256 - (chartData[2].users / 800) * 256}\n                        L ${300},${256 - (chartData[3].users / 800) * 256}\n                        L ${400},${256 - (chartData[4].users / 800) * 256}\n                        L ${500},${256 - (chartData[5].users / 800) * 256}\n                        L ${600},${256 - (chartData[6].users / 800) * 256}\n                        L 600,256 L 0,256 Z`}\n                    fill=\"url(#userGradient)\"\n                    initial={{ opacity: 0 }}\n                    animate={{ opacity: 1 }}\n                    transition={{ duration: 0.8 }}\n                  />\n                  \n                  {/* Line path */}\n                  <motion.path\n                    d={`M 0,${256 - (chartData[0].users / 800) * 256} \n                        L ${100},${256 - (chartData[1].users / 800) * 256}\n                        L ${200},${256 - (chartData[2].users / 800) * 256}\n                        L ${300},${256 - (chartData[3].users / 800) * 256}\n                        L ${400},${256 - (chartData[4].users / 800) * 256}\n                        L ${500},${256 - (chartData[5].users / 800) * 256}\n                        L ${600},${256 - (chartData[6].users / 800) * 256}`}\n                    fill=\"none\"\n                    stroke={isDarkMode ? \"#3b82f6\" : \"#2563eb\"}\n                    strokeWidth=\"3\"\n                    initial={{ pathLength: 0 }}\n                    animate={{ pathLength: 1 }}\n                    transition={{ duration: 1.2, ease: \"easeInOut\" }}\n                  />\n                  \n                  {/* Data points */}\n                  {chartData.map((point, index) => (\n                    <g key={index}>\n                      <motion.circle\n                        cx={index * 100}\n                        cy={256 - (point.users / 800) * 256}\n                        r={hoveredUserPoint === index ? 6 : 4}\n                        fill={isDarkMode ? \"#3b82f6\" : \"#2563eb\"}\n                        stroke={isDarkMode ? \"#1e293b\" : \"#ffffff\"}\n                        strokeWidth=\"2\"\n                        initial={{ scale: 0 }}\n                        animate={{ scale: 1 }}\n                        transition={{ delay: index * 0.1, duration: 0.3 }}\n                        onMouseEnter={() => setHoveredUserPoint(index)}\n                        onMouseLeave={() => setHoveredUserPoint(null)}\n                        className=\"cursor-pointer transition-all duration-200\"\n                        style={{ pointerEvents: 'all' }}\n                      />\n                      \n                      {/* Tooltip */}\n                      {hoveredUserPoint === index && (\n                        <g>\n                          <motion.rect\n                            x={index * 100 - 40}\n                            y={256 - (point.users / 800) * 256 - 50}\n                            width=\"80\"\n                            height=\"40\"\n                            rx=\"6\"\n                            fill={isDarkMode ? \"#1e293b\" : \"#ffffff\"}\n                            stroke={isDarkMode ? \"#3b82f6\" : \"#2563eb\"}\n                            strokeWidth=\"2\"\n                            initial={{ opacity: 0, y: 10 }}\n                            animate={{ opacity: 1, y: 0 }}\n                            transition={{ duration: 0.2 }}\n                          />\n                          <motion.text\n                            x={index * 100}\n                            y={256 - (point.users / 800) * 256 - 35}\n                            textAnchor=\"middle\"\n                            fill={isDarkMode ? \"#ffffff\" : \"#1e293b\"}\n                            fontSize=\"12\"\n                            fontWeight=\"600\"\n                            initial={{ opacity: 0 }}\n                            animate={{ opacity: 1 }}\n                            transition={{ delay: 0.1, duration: 0.2 }}\n                          >\n                            {point.users} users\n                          </motion.text>\n                          <motion.text\n                            x={index * 100}\n                            y={256 - (point.users / 800) * 256 - 20}\n                            textAnchor=\"middle\"\n                            fill={isDarkMode ? \"#9ca3af\" : \"#6b7280\"}\n                            fontSize=\"10\"\n                            initial={{ opacity: 0 }}\n                            animate={{ opacity: 1 }}\n                            transition={{ delay: 0.1, duration: 0.2 }}\n                          >\n                            {new Date(point.date).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n                          </motion.text>\n                        </g>\n                      )}\n                    </g>\n                  ))}\n                </svg>\n                \n                {/* X-axis labels */}\n                <div className=\"flex justify-between mt-2 px-2\">\n                  {chartData.map((point, index) => (\n                    <span\n                      key={index}\n                      className={`text-xs ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}\n                    >\n                      {new Date(point.date).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n                    </span>\n                  ))}\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6 mb-8\">\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Orders Distribution</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Order volume by category\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {chartData.map((dataPoint, index) => {\n                  const maxOrders = getMaxOrders();\n                  const percentage = (dataPoint.orders / maxOrders) * 100;\n                  const barColor = percentage > 75 ? 'bg-green-500' : percentage > 50 ? 'bg-blue-500' : percentage > 25 ? 'bg-yellow-500' : 'bg-red-500';\n                  \n                  return (\n                    <div key={index} className=\"space-y-2\">\n                      <div className=\"flex items-center justify-between text-sm\">\n                        <span className={isDarkMode ? 'text-gray-300' : 'text-gray-700'}>\n                          {new Date(dataPoint.date).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n                        </span>\n                        <span className={`font-semibold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                          {dataPoint.orders}\n                        </span>\n                      </div>\n                      <div className={`w-full h-8 rounded-full overflow-hidden ${isDarkMode ? 'bg-gray-700' : 'bg-gray-200'}`}>\n                        <div\n                          className={`h-full ${barColor} transition-all duration-500 ease-out flex items-center justify-end pr-3`}\n                          style={{ width: `${percentage}%` }}\n                        >\n                          {percentage > 20 && (\n                            <BarChart3 className=\"h-4 w-4 text-white\" />\n                          )}\n                        </div>\n                      </div>\n                    </div>\n                  );\n                })}\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className={`lg:col-span-2 ${isDarkMode ? 'bg-gray-800 border-gray-700' : ''}`}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Performance Comparison</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Multi-metric comparison over time\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <ResponsiveContainer width=\"100%\" height={300}>\n                <LineChart data={chartData}>\n                  <CartesianGrid strokeDasharray=\"3 3\" stroke={isDarkMode ? '#374151' : '#e5e7eb'} />\n                  <XAxis \n                    dataKey=\"date\" \n                    stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                    tick={{ fill: isDarkMode ? '#9ca3af' : '#6b7280' }}\n                  />\n                  <YAxis \n                    stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                    tick={{ fill: isDarkMode ? '#9ca3af' : '#6b7280' }}\n                  />\n                  <Tooltip \n                    contentStyle={{\n                      backgroundColor: isDarkMode ? '#1f2937' : '#ffffff',\n                      border: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\n                      borderRadius: '8px',\n                      color: isDarkMode ? '#ffffff' : '#000000'\n                    }}\n                  />\n                  <Legend \n                    wrapperStyle={{\n                      color: isDarkMode ? '#9ca3af' : '#6b7280'\n                    }}\n                  />\n                  <Line \n                    type=\"monotone\" \n                    dataKey=\"revenue\" \n                    stroke=\"#3b82f6\" \n                    strokeWidth={2}\n                    dot={{ fill: '#3b82f6', r: 4 }}\n                    activeDot={{ r: 6 }}\n                    name=\"Revenue ($)\"\n                  />\n                  <Line \n                    type=\"monotone\" \n                    dataKey=\"users\" \n                    stroke=\"#10b981\" \n                    strokeWidth={2}\n                    dot={{ fill: '#10b981', r: 4 }}\n                    activeDot={{ r: 6 }}\n                    name=\"Users\"\n                  />\n                  <Line \n                    type=\"monotone\" \n                    dataKey=\"orders\" \n                    stroke=\"#f59e0b\" \n                    strokeWidth={2}\n                    dot={{ fill: '#f59e0b', r: 4 }}\n                    activeDot={{ r: 6 }}\n                    name=\"Orders\"\n                  />\n                </LineChart>\n              </ResponsiveContainer>\n            </CardContent>\n          </Card>\n        </div>\n\n        <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n          <CardHeader>\n            <CardTitle className={isDarkMode ? 'text-white' : ''}>Top Products</CardTitle>\n            <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n              Best performing products by sales and revenue\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"overflow-x-auto\">\n              <Table>\n                <TableHeader>\n                  <TableRow className={isDarkMode ? 'border-gray-700 hover:bg-gray-750' : ''}>\n                    <TableHead className={isDarkMode ? 'text-gray-300' : ''}>\n                      <Button\n                        variant=\"ghost\"\n                        onClick={() => handleSort('product')}\n                        className={`-ml-4 h-auto p-2 font-semibold ${isDarkMode ? 'hover:bg-gray-700 text-gray-300' : ''}`}\n                      >\n                        Product\n                        {getSortIcon('product')}\n                      </Button>\n                    </TableHead>\n                    <TableHead className={`text-right ${isDarkMode ? 'text-gray-300' : ''}`}>\n                      <Button\n                        variant=\"ghost\"\n                        onClick={() => handleSort('sales')}\n                        className={`-mr-4 ml-auto h-auto p-2 font-semibold ${isDarkMode ? 'hover:bg-gray-700 text-gray-300' : ''}`}\n                      >\n                        Sales\n                        {getSortIcon('sales')}\n                      </Button>\n                    </TableHead>\n                    <TableHead className={`text-right ${isDarkMode ? 'text-gray-300' : ''}`}>\n                      <Button\n                        variant=\"ghost\"\n                        onClick={() => handleSort('revenue')}\n                        className={`-mr-4 ml-auto h-auto p-2 font-semibold ${isDarkMode ? 'hover:bg-gray-700 text-gray-300' : ''}`}\n                      >\n                        Revenue\n                        {getSortIcon('revenue')}\n                      </Button>\n                    </TableHead>\n                    <TableHead className={`text-right ${isDarkMode ? 'text-gray-300' : ''}`}>\n                      <Button\n                        variant=\"ghost\"\n                        onClick={() => handleSort('status')}\n                        className={`-mr-4 ml-auto h-auto p-2 font-semibold ${isDarkMode ? 'hover:bg-gray-700 text-gray-300' : ''}`}\n                      >\n                        Status\n                        {getSortIcon('status')}\n                      </Button>\n                    </TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {sortedTableData().map((row) => (\n                    <TableRow\n                      key={row.id}\n                      className={isDarkMode ? 'border-gray-700 hover:bg-gray-750' : ''}\n                    >\n                      <TableCell className={`font-medium ${isDarkMode ? 'text-gray-200' : ''}`}>\n                        {row.product}\n                      </TableCell>\n                      <TableCell className={`text-right ${isDarkMode ? 'text-gray-300' : ''}`}>\n                        {formatNumber(row.sales)}\n                      </TableCell>\n                      <TableCell className={`text-right font-semibold ${isDarkMode ? 'text-gray-200' : ''}`}>\n                        {formatCurrency(row.revenue)}\n                      </TableCell>\n                      <TableCell className=\"text-right\">\n                        <Badge\n                          variant={getStatusBadgeVariant(row.status)}\n                          className={`capitalize ${\n                            row.status === 'active'\n                              ? isDarkMode\n                                ? 'bg-green-900 text-green-200 border-green-700'\n                                : 'bg-green-100 text-green-800 border-green-300'\n                              : row.status === 'pending'\n                              ? isDarkMode\n                                ? 'bg-yellow-900 text-yellow-200 border-yellow-700'\n                                : 'bg-yellow-100 text-yellow-800 border-yellow-300'\n                              : isDarkMode\n                              ? 'bg-gray-700 text-gray-300 border-gray-600'\n                              : 'bg-gray-100 text-gray-600 border-gray-300'\n                          }`}\n                        >\n                          {row.status}\n                        </Badge>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </div>\n          </CardContent>\n        </Card>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mt-8\">\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Conversion Funnel</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                User journey and drop-off rates\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {mockFunnelData.map((stage, index) => {\n                  const percentage = index === 0 \n                    ? 100 \n                    : ((stage.value / mockFunnelData[0].value) * 100).toFixed(1);\n                  const dropOffRate = index > 0 \n                    ? (((mockFunnelData[index - 1].value - stage.value) / mockFunnelData[index - 1].value) * 100).toFixed(1)\n                    : null;\n                  const widthPercentage = (stage.value / mockFunnelData[0].value) * 100;\n\n                  return (\n                    <div key={stage.stage} className=\"space-y-2\">\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"flex items-center gap-2\">\n                          <span className={`text-sm font-medium ${isDarkMode ? 'text-gray-200' : 'text-gray-700'}`}>\n                            {stage.stage}\n                          </span>\n                          {dropOffRate && (\n                            <span className={`text-xs ${isDarkMode ? 'text-gray-400' : 'text-gray-500'}`}>\n                              (-{dropOffRate}%)\n                            </span>\n                          )}\n                        </div>\n                        <div className=\"flex items-center gap-3\">\n                          <span className={`text-sm font-semibold ${isDarkMode ? 'text-gray-300' : 'text-gray-600'}`}>\n                            {stage.value.toLocaleString()}\n                          </span>\n                          <span className={`text-xs font-medium ${isDarkMode ? 'text-gray-400' : 'text-gray-500'}`}>\n                            {percentage}%\n                          </span>\n                        </div>\n                      </div>\n                      <div className={`h-12 rounded-lg transition-all duration-300 hover:opacity-80 ${isDarkMode ? 'bg-gray-700' : 'bg-gray-200'}`}>\n                        <div\n                          className=\"h-full rounded-lg flex items-center justify-center text-white text-sm font-medium transition-all duration-500\"\n                          style={{\n                            width: `${widthPercentage}%`,\n                            backgroundColor: stage.color,\n                            boxShadow: `0 4px 6px -1px ${stage.color}40`\n                          }}\n                        >\n                          {widthPercentage > 30 && (\n                            <span className=\"px-2\">{percentage}%</span>\n                          )}\n                        </div>\n                      </div>\n                    </div>\n                  );\n                })}\n                \n                <div className={`mt-6 pt-4 border-t ${isDarkMode ? 'border-gray-700' : 'border-gray-200'}`}>\n                  <div className=\"flex items-center justify-between\">\n                    <span className={`text-sm font-medium ${isDarkMode ? 'text-gray-300' : 'text-gray-600'}`}>\n                      Overall Conversion Rate\n                    </span>\n                    <div className=\"flex items-center gap-2\">\n                      <span className={`text-lg font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                        {((mockFunnelData[mockFunnelData.length - 1].value / mockFunnelData[0].value) * 100).toFixed(1)}%\n                      </span>\n                      <TrendingUp className=\"h-4 w-4 text-green-500\" />\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Traffic Sources</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Visitor sources breakdown\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <ResponsiveContainer width=\"100%\" height={300}>\n                <PieChart>\n                  <Pie\n                    data={mockTrafficData}\n                    cx=\"50%\"\n                    cy=\"50%\"\n                    innerRadius={60}\n                    outerRadius={90}\n                    paddingAngle={2}\n                    dataKey=\"value\"\n                  >\n                    {mockTrafficData.map((entry, index) => (\n                      <Cell key={`cell-${index}`} fill={entry.color} />\n                    ))}\n                  </Pie>\n                  <Tooltip\n                    contentStyle={{\n                      backgroundColor: isDarkMode ? '#1f2937' : '#ffffff',\n                      border: isDarkMode ? '1px solid #374151' : '1px solid #e5e7eb',\n                      borderRadius: '6px',\n                      color: isDarkMode ? '#ffffff' : '#000000'\n                    }}\n                  />\n                  <Legend\n                    verticalAlign=\"bottom\"\n                    height={36}\n                    formatter={(value) => (\n                      <span className={isDarkMode ? 'text-gray-300' : 'text-gray-700'}>\n                        {value}\n                      </span>\n                    )}\n                  />\n                </PieChart>\n              </ResponsiveContainer>\n              <div className=\"mt-4 space-y-2\">\n                {mockTrafficData.map((source) => {\n                  const total = mockTrafficData.reduce((sum, item) => sum + item.value, 0);\n                  const percentage = ((source.value / total) * 100).toFixed(1);\n                  return (\n                    <div key={source.name} className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center gap-2\">\n                        <div\n                          className=\"w-3 h-3 rounded-full\"\n                          style={{ backgroundColor: source.color }}\n                        />\n                        <span className={`text-sm ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>\n                          {source.name}\n                        </span>\n                      </div>\n                      <div className=\"flex items-center gap-3\">\n                        <span className={`text-sm font-medium ${isDarkMode ? 'text-gray-400' : 'text-gray-500'}`}>\n                          {percentage}%\n                        </span>\n                        <span className={`text-sm font-semibold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                          {source.value.toLocaleString()}\n                        </span>\n                      </div>\n                    </div>\n                  );\n                })}\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Recent Activity</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Latest system events\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"max-h-[400px] overflow-y-auto space-y-3 pr-2\">\n                {mockActivityData.map((event, index) => {\n                  const getEventIcon = () => {\n                    switch (event.type) {\n                      case 'user':\n                        return <UserPlus className=\"h-4 w-4 text-blue-500\" />;\n                      case 'order':\n                        return <ShoppingBag className=\"h-4 w-4 text-green-500\" />;\n                      case 'success':\n                        return <CheckCircle className=\"h-4 w-4 text-green-500\" />;\n                      case 'warning':\n                        return <AlertCircle className=\"h-4 w-4 text-yellow-500\" />;\n                      case 'error':\n                        return <XCircle className=\"h-4 w-4 text-red-500\" />;\n                      default:\n                        return <Clock className=\"h-4 w-4 text-gray-500\" />;\n                    }\n                  };\n\n                  const getEventBgColor = () => {\n                    if (isDarkMode) {\n                      return 'bg-gray-700/50 hover:bg-gray-700';\n                    }\n                    return 'bg-gray-50 hover:bg-gray-100';\n                  };\n\n                  return (\n                    <motion.div\n                      key={event.id}\n                      initial={{ opacity: 0, x: -20 }}\n                      animate={{ opacity: 1, x: 0 }}\n                      transition={{ delay: index * 0.05, duration: 0.3 }}\n                      className={`flex items-start gap-3 p-3 rounded-lg transition-colors ${getEventBgColor()}`}\n                    >\n                      <div className=\"flex-shrink-0 mt-0.5\">\n                        {getEventIcon()}\n                      </div>\n                      <div className=\"flex-1 min-w-0\">\n                        <p className={`text-sm ${isDarkMode ? 'text-gray-200' : 'text-gray-900'}`}>\n                          {event.message}\n                        </p>\n                        <div className=\"flex items-center gap-1.5 mt-1\">\n                          <Clock className={`h-3 w-3 ${isDarkMode ? 'text-gray-500' : 'text-gray-400'}`} />\n                          <span className={`text-xs ${isDarkMode ? 'text-gray-500' : 'text-gray-500'}`}>\n                            {event.timestamp}\n                          </span>\n                        </div>\n                      </div>\n                    </motion.div>\n                  );\n                })}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}",
  "error": null,
  "overall_score": 53,
  "code_quality_score": 14,
  "architecture_score": 12,
  "performance_score": 11,
  "accessibility_score": 16,
  "metadata": {
    "document_id": "eval_room_29916518d5be",
    "prompt_category": "intermediate",
    "prompt_complexity": 6.0
  },
  "raw_response": {
    "document_id": "eval_room_29916518d5be",
    "mode": "parallel",
    "prompt": "Generate an analytics dashboard page with charts, data tables, real-time updates, dark mode, and responsive design",
    "content": "import { useState, useCallback } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Moon, Sun, RefreshCw } from 'lucide-react';\nimport { ArrowUpDown, ArrowUp, ArrowDown } from 'lucide-react';\nimport { Badge } from '@/components/ui/badge';\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from '@/components/ui/table';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, Legend } from 'recharts';\nimport { BarChart3 } from 'lucide-react';\nimport { motion } from 'framer-motion';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';\nimport { PieChart, Pie, Cell, Legend } from 'recharts';\nimport { TrendingUp, TrendingDown } from 'lucide-react';\nimport { TrendingUp, TrendingDown, DollarSign, Users, ShoppingCart, Target } from 'lucide-react';\nimport { Clock, UserPlus, ShoppingBag, AlertCircle, CheckCircle, XCircle } from 'lucide-react';\nimport { motion } from 'framer-motion';\n\ninterface MetricData {\n  id: string;\n  label: string;\n  value: number;\n  change: number;\n  trend: 'up' | 'down';\n}\n\ninterface ChartDataPoint {\n  date: string;\n  revenue: number;\n  users: number;\n  orders: number;\n}\n\ninterface TableRow {\n  id: string;\n  product: string;\n  sales: number;\n  revenue: number;\n  status: 'active' | 'pending' | 'inactive';\n}\ninterface FunnelStage {\n  stage: string;\n  value: number;\n  color: string;\n}\n\nconst mockMetrics: MetricData[] = [\n  { id: '1', label: 'Total Revenue', value: 45231, change: 12.5, trend: 'up' },\n  { id: '2', label: 'Active Users', value: 2350, change: 8.2, trend: 'up' },\n  { id: '3', label: 'Total Orders', value: 1543, change: -3.1, trend: 'down' },\n  { id: '4', label: 'Conversion Rate', value: 3.24, change: 5.7, trend: 'up' }\n];\n\nconst mockChartData: ChartDataPoint[] = [\n  { date: '2024-01-01', revenue: 12000, users: 450, orders: 230 },\n  { date: '2024-01-02', revenue: 15000, users: 520, orders: 280 },\n  { date: '2024-01-03', revenue: 13500, users: 490, orders: 250 },\n  { date: '2024-01-04', revenue: 18000, users: 610, orders: 320 },\n  { date: '2024-01-05', revenue: 16500, users: 580, orders: 295 },\n  { date: '2024-01-06', revenue: 20000, users: 680, orders: 360 },\n  { date: '2024-01-07', revenue: 22000, users: 720, orders: 390 }\n];\n\nconst mockTableData: TableRow[] = [\n  { id: '1', product: 'Premium Plan', sales: 234, revenue: 23400, status: 'active' },\n  { id: '2', product: 'Basic Plan', sales: 567, revenue: 11340, status: 'active' },\n  { id: '3', product: 'Enterprise Plan', sales: 89, revenue: 17800, status: 'active' },\n  { id: '4', product: 'Starter Plan', sales: 432, revenue: 4320, status: 'pending' },\n  { id: '5', product: 'Pro Plan', sales: 156, revenue: 15600, status: 'inactive' }\n];\ninterface ActivityEvent {\n  id: string;\n  type: 'user' | 'order' | 'success' | 'warning' | 'error';\n  message: string;\n  timestamp: string;\n}\n\nconst mockActivityData: ActivityEvent[] = [\n  { id: '1', type: 'user', message: 'New user registered: john.doe@example.com', timestamp: '2 minutes ago' },\n  { id: '2', type: 'order', message: 'Order #1234 completed - $450.00', timestamp: '5 minutes ago' },\n  { id: '3', type: 'success', message: 'Payment processed successfully', timestamp: '8 minutes ago' },\n  { id: '4', type: 'user', message: 'User profile updated: jane.smith@example.com', timestamp: '12 minutes ago' },\n  { id: '5', type: 'warning', message: 'Low stock alert: Premium Plan', timestamp: '15 minutes ago' },\n  { id: '6', type: 'order', message: 'Order #1233 placed - $280.00', timestamp: '18 minutes ago' },\n  { id: '7', type: 'success', message: 'Database backup completed', timestamp: '25 minutes ago' },\n  { id: '8', type: 'error', message: 'Failed login attempt detected', timestamp: '30 minutes ago' },\n  { id: '9', type: 'user', message: 'New user registered: alice.wonder@example.com', timestamp: '35 minutes ago' },\n  { id: '10', type: 'order', message: 'Order #1232 shipped', timestamp: '42 minutes ago' }\n];\nconst mockFunnelData: FunnelStage[] = [\n  { stage: 'Visitors', value: 10000, color: '#3b82f6' },\n  { stage: 'Sign Ups', value: 6500, color: '#8b5cf6' },\n  { stage: 'Active Users', value: 4200, color: '#ec4899' },\n  { stage: 'Paying Customers', value: 2350, color: '#f59e0b' },\n  { stage: 'Retained', value: 1890, color: '#10b981' }\n];\nconst mockTrafficData = [\n  { name: 'Organic Search', value: 4200, color: '#3b82f6' },\n  { name: 'Direct', value: 2800, color: '#10b981' },\n  { name: 'Social Media', value: 1900, color: '#f59e0b' },\n  { name: 'Referral', value: 1200, color: '#8b5cf6' },\n  { name: 'Email', value: 850, color: '#ec4899' }\n];\n\nexport default function AnalyticsDashboard() {\n  type SortField = 'product' | 'sales' | 'revenue' | 'status';\n  type SortDirection = 'asc' | 'desc' | null;\n  const [sortField, setSortField] = useState<SortField | null>(null);\n  const [sortDirection, setSortDirection] = useState<SortDirection>(null);\n  const [isDarkMode, setIsDarkMode] = useState(false);\n  const [metrics, setMetrics] = useState<MetricData[]>(mockMetrics);\n  const [chartData, setChartData] = useState<ChartDataPoint[]>(mockChartData);\n  const [tableData, setTableData] = useState<TableRow[]>(mockTableData);\n  const [isRefreshing, setIsRefreshing] = useState(false);\n\n  const toggleDarkMode = useCallback(() => {\n    setIsDarkMode(prev => !prev);\n  }, []);\n\n  const handleSort = useCallback((field: SortField) => {\n    if (sortField === field) {\n      if (sortDirection === 'asc') {\n        setSortDirection('desc');\n      } else if (sortDirection === 'desc') {\n        setSortField(null);\n        setSortDirection(null);\n      }\n    } else {\n      setSortField(field);\n      setSortDirection('asc');\n    }\n  }, [sortField, sortDirection]);\n\n  const sortedTableData = useCallback(() => {\n    if (!sortField || !sortDirection) return tableData;\n\n    return [...tableData].sort((a, b) => {\n      let aValue = a[sortField];\n      let bValue = b[sortField];\n\n      if (typeof aValue === 'string') {\n        aValue = aValue.toLowerCase();\n        bValue = (bValue as string).toLowerCase();\n      }\n\n      if (aValue < bValue) return sortDirection === 'asc' ? -1 : 1;\n      if (aValue > bValue) return sortDirection === 'asc' ? 1 : -1;\n      return 0;\n    });\n  }, [tableData, sortField, sortDirection]);\n\n  const formatCurrency = (value: number) => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0,\n    }).format(value);\n  };\n\n  const formatNumber = (value: number) => {\n    return new Intl.NumberFormat('en-US').format(value);\n  };\n\n  const getStatusBadgeVariant = (status: TableRow['status']) => {\n    switch (status) {\n      case 'active':\n        return 'default';\n      case 'pending':\n        return 'secondary';\n      case 'inactive':\n        return 'outline';\n      default:\n        return 'default';\n    }\n  };\n\n  const getSortIcon = (field: SortField) => {\n    if (sortField !== field) {\n      return <ArrowUpDown className=\"ml-2 h-4 w-4\" />;\n    }\n    if (sortDirection === 'asc') {\n      return <ArrowUp className=\"ml-2 h-4 w-4\" />;\n    }\n    return <ArrowDown className=\"ml-2 h-4 w-4\" />;\n  };\n  const [hoveredUserPoint, setHoveredUserPoint] = useState<number | null>(null);\n\n  const getMaxOrders = useCallback(() => {\n    return Math.max(...chartData.map(d => d.orders));\n  }, [chartData]);\n  const handleRefresh = useCallback(() => {\n    setIsRefreshing(true);\n    \n    setTimeout(() => {\n      // Generate updated metrics with random variations\n      const updatedMetrics = mockMetrics.map(metric => ({\n        ...metric,\n        value: metric.value + Math.floor(Math.random() * 200 - 100),\n        change: parseFloat((Math.random() * 20 - 5).toFixed(1)),\n        trend: Math.random() > 0.5 ? 'up' as const : 'down' as const\n      }));\n      \n      // Generate updated chart data with random variations\n      const updatedChartData = mockChartData.map(point => ({\n        ...point,\n        revenue: point.revenue + Math.floor(Math.random() * 4000 - 2000),\n        users: point.users + Math.floor(Math.random() * 100 - 50),\n        orders: point.orders + Math.floor(Math.random() * 50 - 25)\n      }));\n      \n      // Generate updated table data with random variations\n      const updatedTableData = mockTableData.map(row => ({\n        ...row,\n        sales: row.sales + Math.floor(Math.random() * 40 - 20),\n        revenue: row.revenue + Math.floor(Math.random() * 2000 - 1000)\n      }));\n      \n      setMetrics(updatedMetrics);\n      setChartData(updatedChartData);\n      setTableData(updatedTableData);\n      setIsRefreshing(false);\n    }, 1500);\n  }, []);\n\n  return (\n    <div className={`min-h-screen transition-colors duration-300 ${isDarkMode ? 'dark bg-gray-900' : 'bg-gray-50'}`}>\n      <div className=\"container mx-auto p-4 md:p-6 lg:p-8\">\n        <div className=\"flex flex-col md:flex-row md:items-center md:justify-between mb-8 gap-4\">\n          <div>\n            <h1 className={`text-3xl md:text-4xl font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n              Analytics Dashboard\n            </h1>\n            <p className={`mt-2 ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n              Real-time insights and performance metrics\n            </p>\n          </div>\n          \n          <div className=\"flex items-center gap-3\">\n            <Button\n              variant=\"outline\"\n              size=\"icon\"\n              onClick={toggleDarkMode}\n              className={isDarkMode ? 'border-gray-700 hover:bg-gray-800' : ''}\n            >\n              {isDarkMode ? <Sun className=\"h-5 w-5\" /> : <Moon className=\"h-5 w-5\" />}\n            </Button>\n            \n            <Button\n              variant=\"outline\"\n              onClick={handleRefresh}\n              disabled={isRefreshing}\n              className={isDarkMode ? 'border-gray-700 hover:bg-gray-800' : ''}\n            >\n              <RefreshCw className={`h-4 w-4 mr-2 ${isRefreshing ? 'animate-spin' : ''}`} />\n              Refresh\n            </Button>\n          </div>\n        </div>\n\n        <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 md:gap-6 mb-8\">\n          {metrics.map((metric, index) => {\n            const Icon = metric.label.includes('Revenue') ? DollarSign :\n                        metric.label.includes('Users') ? Users :\n                        metric.label.includes('Orders') ? ShoppingCart :\n                        Target;\n            \n            const TrendIcon = metric.trend === 'up' ? TrendingUp : TrendingDown;\n            const trendColor = metric.trend === 'up' ? 'text-green-500' : 'text-red-500';\n            const trendBgColor = metric.trend === 'up' \n              ? (isDarkMode ? 'bg-green-500/10' : 'bg-green-50')\n              : (isDarkMode ? 'bg-red-500/10' : 'bg-red-50');\n\n            return (\n              <motion.div\n                key={metric.id}\n                initial={{ opacity: 0, y: 20 }}\n                animate={{ opacity: 1, y: 0 }}\n                transition={{ duration: 0.4, delay: index * 0.1 }}\n              >\n                <Card className={`${isDarkMode ? 'bg-gray-800 border-gray-700' : 'bg-white'} hover:shadow-lg transition-shadow duration-300`}>\n                  <CardHeader className=\"flex flex-row items-center justify-between pb-2\">\n                    <CardTitle className={`text-sm font-medium ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                      {metric.label}\n                    </CardTitle>\n                    <div className={`p-2 rounded-lg ${isDarkMode ? 'bg-gray-700' : 'bg-gray-100'}`}>\n                      <Icon className={`h-4 w-4 ${isDarkMode ? 'text-gray-300' : 'text-gray-600'}`} />\n                    </div>\n                  </CardHeader>\n                  <CardContent>\n                    <div className={`text-2xl font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                      {metric.label.includes('Revenue') ? `$${metric.value.toLocaleString()}` : \n                       metric.label.includes('Rate') ? `${metric.value}%` :\n                       metric.value.toLocaleString()}\n                    </div>\n                    <div className=\"flex items-center mt-2\">\n                      <div className={`flex items-center gap-1 px-2 py-1 rounded-full ${trendBgColor}`}>\n                        <TrendIcon className={`h-3 w-3 ${trendColor}`} />\n                        <span className={`text-xs font-medium ${trendColor}`}>\n                          {Math.abs(metric.change)}%\n                        </span>\n                      </div>\n                      <span className={`text-xs ml-2 ${isDarkMode ? 'text-gray-500' : 'text-gray-500'}`}>\n                        vs last period\n                      </span>\n                    </div>\n                  </CardContent>\n                </Card>\n              </motion.div>\n            );\n          })}\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6 mb-8\">\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Revenue Overview</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Daily revenue trends for the past week\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"w-full h-[300px] md:h-[350px]\">\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <LineChart\n                    data={chartData}\n                    margin={{ top: 5, right: 10, left: -20, bottom: 5 }}\n                  >\n                    <CartesianGrid \n                      strokeDasharray=\"3 3\" \n                      stroke={isDarkMode ? '#374151' : '#e5e7eb'}\n                    />\n                    <XAxis \n                      dataKey=\"date\" \n                      stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                      fontSize={12}\n                      tickFormatter={(value) => new Date(value).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n                    />\n                    <YAxis \n                      stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                      fontSize={12}\n                      tickFormatter={(value) => `$${(value / 1000).toFixed(0)}k`}\n                    />\n                    <Tooltip \n                      contentStyle={{\n                        backgroundColor: isDarkMode ? '#1f2937' : '#ffffff',\n                        border: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\n                        borderRadius: '8px',\n                        color: isDarkMode ? '#ffffff' : '#000000'\n                      }}\n                      labelFormatter={(value) => new Date(value).toLocaleDateString('en-US', { month: 'long', day: 'numeric', year: 'numeric' })}\n                      formatter={(value: number) => [`$${value.toLocaleString()}`, 'Revenue']}\n                    />\n                    <Line \n                      type=\"monotone\" \n                      dataKey=\"revenue\" \n                      stroke=\"#3b82f6\" \n                      strokeWidth={2}\n                      dot={{ fill: '#3b82f6', r: 4 }}\n                      activeDot={{ r: 6, fill: '#2563eb' }}\n                    />\n                  </LineChart>\n                </ResponsiveContainer>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>User Activity</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Active users and engagement metrics\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"relative h-64 w-full\">\n                <svg className=\"w-full h-full\" viewBox=\"0 0 700 256\" preserveAspectRatio=\"none\">\n                  <defs>\n                    <linearGradient id=\"userGradient\" x1=\"0\" x2=\"0\" y1=\"0\" y2=\"1\">\n                      <stop offset=\"0%\" stopColor={isDarkMode ? \"#3b82f6\" : \"#60a5fa\"} stopOpacity=\"0.5\" />\n                      <stop offset=\"100%\" stopColor={isDarkMode ? \"#3b82f6\" : \"#60a5fa\"} stopOpacity=\"0.05\" />\n                    </linearGradient>\n                  </defs>\n                  \n                  {/* Area path */}\n                  <motion.path\n                    d={`M 0,${256 - (chartData[0].users / 800) * 256} \n                        L ${100},${256 - (chartData[1].users / 800) * 256}\n                        L ${200},${256 - (chartData[2].users / 800) * 256}\n                        L ${300},${256 - (chartData[3].users / 800) * 256}\n                        L ${400},${256 - (chartData[4].users / 800) * 256}\n                        L ${500},${256 - (chartData[5].users / 800) * 256}\n                        L ${600},${256 - (chartData[6].users / 800) * 256}\n                        L 600,256 L 0,256 Z`}\n                    fill=\"url(#userGradient)\"\n                    initial={{ opacity: 0 }}\n                    animate={{ opacity: 1 }}\n                    transition={{ duration: 0.8 }}\n                  />\n                  \n                  {/* Line path */}\n                  <motion.path\n                    d={`M 0,${256 - (chartData[0].users / 800) * 256} \n                        L ${100},${256 - (chartData[1].users / 800) * 256}\n                        L ${200},${256 - (chartData[2].users / 800) * 256}\n                        L ${300},${256 - (chartData[3].users / 800) * 256}\n                        L ${400},${256 - (chartData[4].users / 800) * 256}\n                        L ${500},${256 - (chartData[5].users / 800) * 256}\n                        L ${600},${256 - (chartData[6].users / 800) * 256}`}\n                    fill=\"none\"\n                    stroke={isDarkMode ? \"#3b82f6\" : \"#2563eb\"}\n                    strokeWidth=\"3\"\n                    initial={{ pathLength: 0 }}\n                    animate={{ pathLength: 1 }}\n                    transition={{ duration: 1.2, ease: \"easeInOut\" }}\n                  />\n                  \n                  {/* Data points */}\n                  {chartData.map((point, index) => (\n                    <g key={index}>\n                      <motion.circle\n                        cx={index * 100}\n                        cy={256 - (point.users / 800) * 256}\n                        r={hoveredUserPoint === index ? 6 : 4}\n                        fill={isDarkMode ? \"#3b82f6\" : \"#2563eb\"}\n                        stroke={isDarkMode ? \"#1e293b\" : \"#ffffff\"}\n                        strokeWidth=\"2\"\n                        initial={{ scale: 0 }}\n                        animate={{ scale: 1 }}\n                        transition={{ delay: index * 0.1, duration: 0.3 }}\n                        onMouseEnter={() => setHoveredUserPoint(index)}\n                        onMouseLeave={() => setHoveredUserPoint(null)}\n                        className=\"cursor-pointer transition-all duration-200\"\n                        style={{ pointerEvents: 'all' }}\n                      />\n                      \n                      {/* Tooltip */}\n                      {hoveredUserPoint === index && (\n                        <g>\n                          <motion.rect\n                            x={index * 100 - 40}\n                            y={256 - (point.users / 800) * 256 - 50}\n                            width=\"80\"\n                            height=\"40\"\n                            rx=\"6\"\n                            fill={isDarkMode ? \"#1e293b\" : \"#ffffff\"}\n                            stroke={isDarkMode ? \"#3b82f6\" : \"#2563eb\"}\n                            strokeWidth=\"2\"\n                            initial={{ opacity: 0, y: 10 }}\n                            animate={{ opacity: 1, y: 0 }}\n                            transition={{ duration: 0.2 }}\n                          />\n                          <motion.text\n                            x={index * 100}\n                            y={256 - (point.users / 800) * 256 - 35}\n                            textAnchor=\"middle\"\n                            fill={isDarkMode ? \"#ffffff\" : \"#1e293b\"}\n                            fontSize=\"12\"\n                            fontWeight=\"600\"\n                            initial={{ opacity: 0 }}\n                            animate={{ opacity: 1 }}\n                            transition={{ delay: 0.1, duration: 0.2 }}\n                          >\n                            {point.users} users\n                          </motion.text>\n                          <motion.text\n                            x={index * 100}\n                            y={256 - (point.users / 800) * 256 - 20}\n                            textAnchor=\"middle\"\n                            fill={isDarkMode ? \"#9ca3af\" : \"#6b7280\"}\n                            fontSize=\"10\"\n                            initial={{ opacity: 0 }}\n                            animate={{ opacity: 1 }}\n                            transition={{ delay: 0.1, duration: 0.2 }}\n                          >\n                            {new Date(point.date).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n                          </motion.text>\n                        </g>\n                      )}\n                    </g>\n                  ))}\n                </svg>\n                \n                {/* X-axis labels */}\n                <div className=\"flex justify-between mt-2 px-2\">\n                  {chartData.map((point, index) => (\n                    <span\n                      key={index}\n                      className={`text-xs ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}\n                    >\n                      {new Date(point.date).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n                    </span>\n                  ))}\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6 mb-8\">\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Orders Distribution</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Order volume by category\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {chartData.map((dataPoint, index) => {\n                  const maxOrders = getMaxOrders();\n                  const percentage = (dataPoint.orders / maxOrders) * 100;\n                  const barColor = percentage > 75 ? 'bg-green-500' : percentage > 50 ? 'bg-blue-500' : percentage > 25 ? 'bg-yellow-500' : 'bg-red-500';\n                  \n                  return (\n                    <div key={index} className=\"space-y-2\">\n                      <div className=\"flex items-center justify-between text-sm\">\n                        <span className={isDarkMode ? 'text-gray-300' : 'text-gray-700'}>\n                          {new Date(dataPoint.date).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n                        </span>\n                        <span className={`font-semibold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                          {dataPoint.orders}\n                        </span>\n                      </div>\n                      <div className={`w-full h-8 rounded-full overflow-hidden ${isDarkMode ? 'bg-gray-700' : 'bg-gray-200'}`}>\n                        <div\n                          className={`h-full ${barColor} transition-all duration-500 ease-out flex items-center justify-end pr-3`}\n                          style={{ width: `${percentage}%` }}\n                        >\n                          {percentage > 20 && (\n                            <BarChart3 className=\"h-4 w-4 text-white\" />\n                          )}\n                        </div>\n                      </div>\n                    </div>\n                  );\n                })}\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className={`lg:col-span-2 ${isDarkMode ? 'bg-gray-800 border-gray-700' : ''}`}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Performance Comparison</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Multi-metric comparison over time\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <ResponsiveContainer width=\"100%\" height={300}>\n                <LineChart data={chartData}>\n                  <CartesianGrid strokeDasharray=\"3 3\" stroke={isDarkMode ? '#374151' : '#e5e7eb'} />\n                  <XAxis \n                    dataKey=\"date\" \n                    stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                    tick={{ fill: isDarkMode ? '#9ca3af' : '#6b7280' }}\n                  />\n                  <YAxis \n                    stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                    tick={{ fill: isDarkMode ? '#9ca3af' : '#6b7280' }}\n                  />\n                  <Tooltip \n                    contentStyle={{\n                      backgroundColor: isDarkMode ? '#1f2937' : '#ffffff',\n                      border: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\n                      borderRadius: '8px',\n                      color: isDarkMode ? '#ffffff' : '#000000'\n                    }}\n                  />\n                  <Legend \n                    wrapperStyle={{\n                      color: isDarkMode ? '#9ca3af' : '#6b7280'\n                    }}\n                  />\n                  <Line \n                    type=\"monotone\" \n                    dataKey=\"revenue\" \n                    stroke=\"#3b82f6\" \n                    strokeWidth={2}\n                    dot={{ fill: '#3b82f6', r: 4 }}\n                    activeDot={{ r: 6 }}\n                    name=\"Revenue ($)\"\n                  />\n                  <Line \n                    type=\"monotone\" \n                    dataKey=\"users\" \n                    stroke=\"#10b981\" \n                    strokeWidth={2}\n                    dot={{ fill: '#10b981', r: 4 }}\n                    activeDot={{ r: 6 }}\n                    name=\"Users\"\n                  />\n                  <Line \n                    type=\"monotone\" \n                    dataKey=\"orders\" \n                    stroke=\"#f59e0b\" \n                    strokeWidth={2}\n                    dot={{ fill: '#f59e0b', r: 4 }}\n                    activeDot={{ r: 6 }}\n                    name=\"Orders\"\n                  />\n                </LineChart>\n              </ResponsiveContainer>\n            </CardContent>\n          </Card>\n        </div>\n\n        <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n          <CardHeader>\n            <CardTitle className={isDarkMode ? 'text-white' : ''}>Top Products</CardTitle>\n            <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n              Best performing products by sales and revenue\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"overflow-x-auto\">\n              <Table>\n                <TableHeader>\n                  <TableRow className={isDarkMode ? 'border-gray-700 hover:bg-gray-750' : ''}>\n                    <TableHead className={isDarkMode ? 'text-gray-300' : ''}>\n                      <Button\n                        variant=\"ghost\"\n                        onClick={() => handleSort('product')}\n                        className={`-ml-4 h-auto p-2 font-semibold ${isDarkMode ? 'hover:bg-gray-700 text-gray-300' : ''}`}\n                      >\n                        Product\n                        {getSortIcon('product')}\n                      </Button>\n                    </TableHead>\n                    <TableHead className={`text-right ${isDarkMode ? 'text-gray-300' : ''}`}>\n                      <Button\n                        variant=\"ghost\"\n                        onClick={() => handleSort('sales')}\n                        className={`-mr-4 ml-auto h-auto p-2 font-semibold ${isDarkMode ? 'hover:bg-gray-700 text-gray-300' : ''}`}\n                      >\n                        Sales\n                        {getSortIcon('sales')}\n                      </Button>\n                    </TableHead>\n                    <TableHead className={`text-right ${isDarkMode ? 'text-gray-300' : ''}`}>\n                      <Button\n                        variant=\"ghost\"\n                        onClick={() => handleSort('revenue')}\n                        className={`-mr-4 ml-auto h-auto p-2 font-semibold ${isDarkMode ? 'hover:bg-gray-700 text-gray-300' : ''}`}\n                      >\n                        Revenue\n                        {getSortIcon('revenue')}\n                      </Button>\n                    </TableHead>\n                    <TableHead className={`text-right ${isDarkMode ? 'text-gray-300' : ''}`}>\n                      <Button\n                        variant=\"ghost\"\n                        onClick={() => handleSort('status')}\n                        className={`-mr-4 ml-auto h-auto p-2 font-semibold ${isDarkMode ? 'hover:bg-gray-700 text-gray-300' : ''}`}\n                      >\n                        Status\n                        {getSortIcon('status')}\n                      </Button>\n                    </TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {sortedTableData().map((row) => (\n                    <TableRow\n                      key={row.id}\n                      className={isDarkMode ? 'border-gray-700 hover:bg-gray-750' : ''}\n                    >\n                      <TableCell className={`font-medium ${isDarkMode ? 'text-gray-200' : ''}`}>\n                        {row.product}\n                      </TableCell>\n                      <TableCell className={`text-right ${isDarkMode ? 'text-gray-300' : ''}`}>\n                        {formatNumber(row.sales)}\n                      </TableCell>\n                      <TableCell className={`text-right font-semibold ${isDarkMode ? 'text-gray-200' : ''}`}>\n                        {formatCurrency(row.revenue)}\n                      </TableCell>\n                      <TableCell className=\"text-right\">\n                        <Badge\n                          variant={getStatusBadgeVariant(row.status)}\n                          className={`capitalize ${\n                            row.status === 'active'\n                              ? isDarkMode\n                                ? 'bg-green-900 text-green-200 border-green-700'\n                                : 'bg-green-100 text-green-800 border-green-300'\n                              : row.status === 'pending'\n                              ? isDarkMode\n                                ? 'bg-yellow-900 text-yellow-200 border-yellow-700'\n                                : 'bg-yellow-100 text-yellow-800 border-yellow-300'\n                              : isDarkMode\n                              ? 'bg-gray-700 text-gray-300 border-gray-600'\n                              : 'bg-gray-100 text-gray-600 border-gray-300'\n                          }`}\n                        >\n                          {row.status}\n                        </Badge>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </div>\n          </CardContent>\n        </Card>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mt-8\">\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Conversion Funnel</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                User journey and drop-off rates\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {mockFunnelData.map((stage, index) => {\n                  const percentage = index === 0 \n                    ? 100 \n                    : ((stage.value / mockFunnelData[0].value) * 100).toFixed(1);\n                  const dropOffRate = index > 0 \n                    ? (((mockFunnelData[index - 1].value - stage.value) / mockFunnelData[index - 1].value) * 100).toFixed(1)\n                    : null;\n                  const widthPercentage = (stage.value / mockFunnelData[0].value) * 100;\n\n                  return (\n                    <div key={stage.stage} className=\"space-y-2\">\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"flex items-center gap-2\">\n                          <span className={`text-sm font-medium ${isDarkMode ? 'text-gray-200' : 'text-gray-700'}`}>\n                            {stage.stage}\n                          </span>\n                          {dropOffRate && (\n                            <span className={`text-xs ${isDarkMode ? 'text-gray-400' : 'text-gray-500'}`}>\n                              (-{dropOffRate}%)\n                            </span>\n                          )}\n                        </div>\n                        <div className=\"flex items-center gap-3\">\n                          <span className={`text-sm font-semibold ${isDarkMode ? 'text-gray-300' : 'text-gray-600'}`}>\n                            {stage.value.toLocaleString()}\n                          </span>\n                          <span className={`text-xs font-medium ${isDarkMode ? 'text-gray-400' : 'text-gray-500'}`}>\n                            {percentage}%\n                          </span>\n                        </div>\n                      </div>\n                      <div className={`h-12 rounded-lg transition-all duration-300 hover:opacity-80 ${isDarkMode ? 'bg-gray-700' : 'bg-gray-200'}`}>\n                        <div\n                          className=\"h-full rounded-lg flex items-center justify-center text-white text-sm font-medium transition-all duration-500\"\n                          style={{\n                            width: `${widthPercentage}%`,\n                            backgroundColor: stage.color,\n                            boxShadow: `0 4px 6px -1px ${stage.color}40`\n                          }}\n                        >\n                          {widthPercentage > 30 && (\n                            <span className=\"px-2\">{percentage}%</span>\n                          )}\n                        </div>\n                      </div>\n                    </div>\n                  );\n                })}\n                \n                <div className={`mt-6 pt-4 border-t ${isDarkMode ? 'border-gray-700' : 'border-gray-200'}`}>\n                  <div className=\"flex items-center justify-between\">\n                    <span className={`text-sm font-medium ${isDarkMode ? 'text-gray-300' : 'text-gray-600'}`}>\n                      Overall Conversion Rate\n                    </span>\n                    <div className=\"flex items-center gap-2\">\n                      <span className={`text-lg font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                        {((mockFunnelData[mockFunnelData.length - 1].value / mockFunnelData[0].value) * 100).toFixed(1)}%\n                      </span>\n                      <TrendingUp className=\"h-4 w-4 text-green-500\" />\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Traffic Sources</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Visitor sources breakdown\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <ResponsiveContainer width=\"100%\" height={300}>\n                <PieChart>\n                  <Pie\n                    data={mockTrafficData}\n                    cx=\"50%\"\n                    cy=\"50%\"\n                    innerRadius={60}\n                    outerRadius={90}\n                    paddingAngle={2}\n                    dataKey=\"value\"\n                  >\n                    {mockTrafficData.map((entry, index) => (\n                      <Cell key={`cell-${index}`} fill={entry.color} />\n                    ))}\n                  </Pie>\n                  <Tooltip\n                    contentStyle={{\n                      backgroundColor: isDarkMode ? '#1f2937' : '#ffffff',\n                      border: isDarkMode ? '1px solid #374151' : '1px solid #e5e7eb',\n                      borderRadius: '6px',\n                      color: isDarkMode ? '#ffffff' : '#000000'\n                    }}\n                  />\n                  <Legend\n                    verticalAlign=\"bottom\"\n                    height={36}\n                    formatter={(value) => (\n                      <span className={isDarkMode ? 'text-gray-300' : 'text-gray-700'}>\n                        {value}\n                      </span>\n                    )}\n                  />\n                </PieChart>\n              </ResponsiveContainer>\n              <div className=\"mt-4 space-y-2\">\n                {mockTrafficData.map((source) => {\n                  const total = mockTrafficData.reduce((sum, item) => sum + item.value, 0);\n                  const percentage = ((source.value / total) * 100).toFixed(1);\n                  return (\n                    <div key={source.name} className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center gap-2\">\n                        <div\n                          className=\"w-3 h-3 rounded-full\"\n                          style={{ backgroundColor: source.color }}\n                        />\n                        <span className={`text-sm ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>\n                          {source.name}\n                        </span>\n                      </div>\n                      <div className=\"flex items-center gap-3\">\n                        <span className={`text-sm font-medium ${isDarkMode ? 'text-gray-400' : 'text-gray-500'}`}>\n                          {percentage}%\n                        </span>\n                        <span className={`text-sm font-semibold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                          {source.value.toLocaleString()}\n                        </span>\n                      </div>\n                    </div>\n                  );\n                })}\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Recent Activity</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Latest system events\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"max-h-[400px] overflow-y-auto space-y-3 pr-2\">\n                {mockActivityData.map((event, index) => {\n                  const getEventIcon = () => {\n                    switch (event.type) {\n                      case 'user':\n                        return <UserPlus className=\"h-4 w-4 text-blue-500\" />;\n                      case 'order':\n                        return <ShoppingBag className=\"h-4 w-4 text-green-500\" />;\n                      case 'success':\n                        return <CheckCircle className=\"h-4 w-4 text-green-500\" />;\n                      case 'warning':\n                        return <AlertCircle className=\"h-4 w-4 text-yellow-500\" />;\n                      case 'error':\n                        return <XCircle className=\"h-4 w-4 text-red-500\" />;\n                      default:\n                        return <Clock className=\"h-4 w-4 text-gray-500\" />;\n                    }\n                  };\n\n                  const getEventBgColor = () => {\n                    if (isDarkMode) {\n                      return 'bg-gray-700/50 hover:bg-gray-700';\n                    }\n                    return 'bg-gray-50 hover:bg-gray-100';\n                  };\n\n                  return (\n                    <motion.div\n                      key={event.id}\n                      initial={{ opacity: 0, x: -20 }}\n                      animate={{ opacity: 1, x: 0 }}\n                      transition={{ delay: index * 0.05, duration: 0.3 }}\n                      className={`flex items-start gap-3 p-3 rounded-lg transition-colors ${getEventBgColor()}`}\n                    >\n                      <div className=\"flex-shrink-0 mt-0.5\">\n                        {getEventIcon()}\n                      </div>\n                      <div className=\"flex-1 min-w-0\">\n                        <p className={`text-sm ${isDarkMode ? 'text-gray-200' : 'text-gray-900'}`}>\n                          {event.message}\n                        </p>\n                        <div className=\"flex items-center gap-1.5 mt-1\">\n                          <Clock className={`h-3 w-3 ${isDarkMode ? 'text-gray-500' : 'text-gray-400'}`} />\n                          <span className={`text-xs ${isDarkMode ? 'text-gray-500' : 'text-gray-500'}`}>\n                            {event.timestamp}\n                          </span>\n                        </div>\n                      </div>\n                    </motion.div>\n                  );\n                })}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}",
    "error": null,
    "elapsed_time": 74.33581471443176,
    "success": true
  }
}