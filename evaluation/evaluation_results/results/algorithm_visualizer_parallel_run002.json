{
  "prompt_id": "algorithm_visualizer",
  "prompt_name": "Algorithm Visualizer",
  "mode": "parallel",
  "run_number": 2,
  "timestamp": "2025-10-14T04:24:54.235152",
  "response_time": 99.39150643348694,
  "total_tokens": null,
  "response_content": "import { useState, useCallback } from 'react';import React from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Slider } from '@/components/ui/slider';\nimport { Play, Pause, RotateCcw, Zap, BarChart3 } from 'lucide-react';\nimport { motion } from 'framer-motion';\n\ninterface ArrayElement {\n  value: number;\n  id: string;\n  isComparing?: boolean;\n  isSwapping?: boolean;\n  isSorted?: boolean;\n}\n\ninterface AlgorithmStep {\n  array: ArrayElement[];\n  comparingIndices: number[];\n  swappingIndices: number[];\n  sortedIndices: number[];\n}\n\ntype AlgorithmType = 'bubble' | 'quick' | 'merge' | 'insertion';\n\nconst NEON_COLORS = [\n  '#00ffff',\n  '#ff00ff', \n  '#00ff00',\n  '#ffff00',\n  '#ff0066',\n  '#00ffaa'\n];\n\nconst mockAlgorithms = [\n  { id: 'bubble', name: 'Bubble Sort', complexity: 'O(n\u00b2)' },\n  { id: 'quick', name: 'Quick Sort', complexity: 'O(n log n)' },\n  { id: 'merge', name: 'Merge Sort', complexity: 'O(n log n)' },\n  { id: 'insertion', name: 'Insertion Sort', complexity: 'O(n\u00b2)' }\n];\n\nexport default function AlgorithmVisualizer() {\n  const [array, setArray] = useState<ArrayElement[]>([]);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [speed, setSpeed] = useState([50]);\n  const [arraySize, setArraySize] = useState([20]);\n  const [selectedAlgorithm, setSelectedAlgorithm] = useState<AlgorithmType>('bubble');\n  const [currentStep, setCurrentStep] = useState(0);\n  const [steps, setSteps] = useState<AlgorithmStep[]>([]);\n  const [comparisons, setComparisons] = useState(0);\n  const [swaps, setSwaps] = useState(0);\n\n  const generateRandomArray = useCallback(() => {\n    const newArray: ArrayElement[] = Array.from({ length: arraySize[0] }, (_, i) => ({\n      value: Math.floor(Math.random() * 100) + 5,\n      id: `element-${i}-${Date.now()}`,\n      isComparing: false,\n      isSwapping: false,\n      isSorted: false\n    }));\n    setArray(newArray);\n    setSteps([]);\n    setCurrentStep(0);\n    setIsPlaying(false);\n  }, [arraySize]);\n\n  const resetVisualization = useCallback(() => {\n\n    setIsPlaying(false);\n    setCurrentStep(0);\n    setSteps([]);\n    generateRandomArray();\n  }, [generateRandomArray]);\n\n  // Animation effect for step-by-step visualization\n  const animateSteps = useCallback(() => {\n    if (currentStep < steps.length && isPlaying) {\n      const timer = setTimeout(() => {\n        setCurrentStep(prev => prev + 1);\n      }, 1000 - speed[0] * 9.5); // Convert speed slider (0-100) to delay (1000ms-50ms)\n      \n      return () => clearTimeout(timer);\n    } else if (currentStep >= steps.length && isPlaying) {\n      setIsPlaying(false);\n    }\n  }, [currentStep, steps.length, isPlaying, speed]);\n\n  // Run animation effect\n  React.useEffect(() => {\n    const cleanup = animateSteps();\n    return cleanup;\n  }, [animateSteps]);\n  const startVisualization = useCallback(() => {\n    if (steps.length === 0) return;\n    setIsPlaying(true);\n    if (currentStep >= steps.length) {\n      setCurrentStep(0);\n    }\n  }, [steps, speed, currentStep]);\n\n  const pauseVisualization = useCallback(() => {\n    setIsPlaying(false);\n  \n  }, []);\n\n  const generateSortingSteps = useCallback((algorithm: AlgorithmType) => {\n    const newSteps: AlgorithmStep[] = [];\n    const arr = [...array];\n\n    const addStep = (\n      comparingIndices: number[] = [],\n      swappingIndices: number[] = [],\n      sortedIndices: number[] = []\n    ) => {\n      newSteps.push({\n        array: arr.map((el, idx) => ({\n          ...el,\n          isComparing: comparingIndices.includes(idx),\n          isSwapping: swappingIndices.includes(idx),\n          isSorted: sortedIndices.includes(idx)\n        })),\n        comparingIndices,\n        swappingIndices,\n        sortedIndices\n      });\n    };\n\n    const swap = (i: number, j: number) => {\n      [arr[i], arr[j]] = [arr[j], arr[i]];\n    };\n\n    switch (algorithm) {\n      case 'bubble': {\n        const sorted: number[] = [];\n        for (let i = 0; i < arr.length; i++) {\n          for (let j = 0; j < arr.length - i - 1; j++) {\n            addStep([j, j + 1], [], sorted);\n            if (arr[j].value > arr[j + 1].value) {\n              addStep([j, j + 1], [j, j + 1], sorted);\n              swap(j, j + 1);\n              addStep([], [], sorted);\n            }\n          }\n          sorted.push(arr.length - i - 1);\n          addStep([], [], sorted);\n        }\n        break;\n      }\n\n      case 'insertion': {\n        const sorted: number[] = [0];\n        addStep([], [], sorted);\n        for (let i = 1; i < arr.length; i++) {\n          let j = i;\n          addStep([j], [], sorted);\n          while (j > 0 && arr[j - 1].value > arr[j].value) {\n            addStep([j - 1, j], [j - 1, j], sorted);\n            swap(j - 1, j);\n            j--;\n            addStep([j], [], sorted);\n          }\n          sorted.push(i);\n          addStep([], [], sorted);\n        }\n        break;\n      }\n\n      case 'quick': {\n        const sorted: number[] = [];\n        const quickSort = (low: number, high: number) => {\n          if (low < high) {\n            const pivotIdx = partition(low, high);\n            sorted.push(pivotIdx);\n            addStep([], [], sorted);\n            quickSort(low, pivotIdx - 1);\n            quickSort(pivotIdx + 1, high);\n          } else if (low === high) {\n            sorted.push(low);\n            addStep([], [], sorted);\n          }\n        };\n\n        const partition = (low: number, high: number): number => {\n          const pivot = arr[high].value;\n          addStep([high], [], sorted);\n          let i = low - 1;\n\n          for (let j = low; j < high; j++) {\n            addStep([j, high], [], sorted);\n            if (arr[j].value < pivot) {\n              i++;\n              if (i !== j) {\n                addStep([i, j], [i, j], sorted);\n                swap(i, j);\n              }\n            }\n          }\n          addStep([i + 1, high], [i + 1, high], sorted);\n          swap(i + 1, high);\n          return i + 1;\n        };\n\n        quickSort(0, arr.length - 1);\n        break;\n      }\n\n      case 'merge': {\n        const sorted: number[] = [];\n        const mergeSort = (left: number, right: number) => {\n          if (left < right) {\n            const mid = Math.floor((left + right) / 2);\n            mergeSort(left, mid);\n            mergeSort(mid + 1, right);\n            merge(left, mid, right);\n          }\n        };\n\n        const merge = (left: number, mid: number, right: number) => {\n          const leftArr = arr.slice(left, mid + 1);\n          const rightArr = arr.slice(mid + 1, right + 1);\n          let i = 0, j = 0, k = left;\n\n          while (i < leftArr.length && j < rightArr.length) {\n            addStep([left + i, mid + 1 + j], [], sorted);\n            if (leftArr[i].value <= rightArr[j].value) {\n              arr[k] = leftArr[i];\n              i++;\n            } else {\n              arr[k] = rightArr[j];\n              j++;\n            }\n            addStep([], [k], sorted);\n            k++;\n          }\n\n          while (i < leftArr.length) {\n            arr[k] = leftArr[i];\n            addStep([], [k], sorted);\n            i++;\n            k++;\n          }\n\n          while (j < rightArr.length) {\n            arr[k] = rightArr[j];\n            addStep([], [k], sorted);\n            j++;\n            k++;\n          }\n\n          for (let idx = left; idx <= right; idx++) {\n            if (!sorted.includes(idx)) sorted.push(idx);\n          }\n          addStep([], [], sorted);\n        };\n\n        mergeSort(0, arr.length - 1);\n        break;\n      }\n    }\n\n    setSteps(newSteps);\n    setCurrentStep(0);\n  }, [array]);\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-gray-900 via-purple-900 to-gray-900 p-8\">\n      <div className=\"max-w-7xl mx-auto space-y-8\">\n        <motion.div\n          initial={{ opacity: 0, y: -20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.8 }}\n          className=\"text-center space-y-4\"\n        >\n          <motion.h1\n            className=\"text-6xl font-bold bg-gradient-to-r from-cyan-400 via-purple-400 to-pink-400 bg-clip-text text-transparent\"\n            animate={{\n              textShadow: [\n                '0 0 20px rgba(0, 255, 255, 0.5)',\n                '0 0 40px rgba(255, 0, 255, 0.5)',\n                '0 0 20px rgba(0, 255, 255, 0.5)'\n              ]\n            }}\n            transition={{ duration: 2, repeat: Infinity }}\n          >\n            Algorithm Visualizer\n          </motion.h1>\n          \n          <div className=\"flex items-center justify-center gap-4\">\n            <motion.div\n              initial={{ scale: 0 }}\n              animate={{ scale: 1 }}\n              transition={{ delay: 0.3, type: 'spring' }}\n              className=\"flex items-center gap-2 px-6 py-3 bg-gray-800/50 backdrop-blur-sm rounded-full border border-cyan-500/30\"\n            >\n              <Zap className=\"w-5 h-5 text-cyan-400\" />\n              <span className=\"text-xl font-semibold text-cyan-300\">\n                {mockAlgorithms.find(a => a.id === selectedAlgorithm)?.name}\n              </span>\n            </motion.div>\n            \n            <motion.div\n              initial={{ scale: 0 }}\n              animate={{ scale: 1 }}\n              transition={{ delay: 0.5, type: 'spring' }}\n              className=\"px-4 py-2 bg-purple-500/20 backdrop-blur-sm rounded-full border border-purple-400/50\"\n            >\n              <div className=\"flex items-center gap-2\">\n                <BarChart3 className=\"w-4 h-4 text-purple-300\" />\n                <span className=\"text-sm font-mono text-purple-200\">\n                  {mockAlgorithms.find(a => a.id === selectedAlgorithm)?.complexity}\n                </span>\n              </div>\n            </motion.div>\n          </div>\n        </motion.div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-6\">\n          <div className=\"lg:col-span-1 space-y-6\">\n            <motion.div\n              initial={{ opacity: 0, x: -50 }}\n              animate={{ opacity: 1, x: 0 }}\n              className=\"bg-gray-800/50 backdrop-blur-lg rounded-2xl p-6 border border-cyan-500/30 shadow-[0_0_30px_rgba(0,255,255,0.3)]\"\n            >\n              <div className=\"space-y-6\">\n                {/* Algorithm Selection */}\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center gap-2 text-cyan-400\">\n                    <Zap className=\"w-5 h-5\" />\n                    <h3 className=\"font-semibold text-lg\">Algorithm</h3>\n                  </div>\n                  <div className=\"space-y-2\">\n                    {mockAlgorithms.map((algo) => (\n                      <button\n                        key={algo.id}\n                        onClick={() => {\n                          setSelectedAlgorithm(algo.id as AlgorithmType);\n                          generateSortingSteps(algo.id as AlgorithmType);\n                        }}\n                        disabled={isPlaying}\n                        className={`w-full p-3 rounded-lg text-left transition-all duration-300 ${\n                          selectedAlgorithm === algo.id\n                            ? 'bg-cyan-500/20 border border-cyan-400 shadow-[0_0_20px_rgba(0,255,255,0.4)] text-cyan-300'\n                            : 'bg-gray-700/50 border border-gray-600 hover:border-cyan-500/50 text-gray-300 hover:text-cyan-400'\n                        } disabled:opacity-50 disabled:cursor-not-allowed`}\n                      >\n                        <div className=\"font-medium\">{algo.name}</div>\n                        <div className=\"text-xs opacity-70\">{algo.complexity}</div>\n                      </button>\n                    ))}\n                  </div>\n                </div>\n\n                {/* Array Size Control */}\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center gap-2 text-purple-400\">\n                    <BarChart3 className=\"w-5 h-5\" />\n                    <h3 className=\"font-semibold\">Array Size</h3>\n                  </div>\n                  <div className=\"space-y-2\">\n                    <div className=\"flex justify-between text-sm text-gray-400\">\n                      <span>Size</span>\n                      <span className=\"text-purple-400 font-mono\">{arraySize[0]}</span>\n                    </div>\n                    <Slider\n                      value={arraySize}\n                      onValueChange={(value) => {\n                        setArraySize(value);\n                        if (!isPlaying) generateRandomArray();\n                      }}\n                      min={5}\n                      max={50}\n                      step={1}\n                      disabled={isPlaying}\n                      className=\"cursor-pointer\"\n                    />\n                  </div>\n                </div>\n\n                {/* Speed Control */}\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center gap-2 text-pink-400\">\n                    <Zap className=\"w-5 h-5\" />\n                    <h3 className=\"font-semibold\">Speed</h3>\n                  </div>\n                  <div className=\"space-y-2\">\n                    <div className=\"flex justify-between text-sm text-gray-400\">\n                      <span>Delay</span>\n                      <span className=\"text-pink-400 font-mono\">{speed[0]}ms</span>\n                    </div>\n                    <Slider\n                      value={speed}\n                      onValueChange={setSpeed}\n                      min={10}\n                      max={200}\n                      step={10}\n                      className=\"cursor-pointer\"\n                    />\n                  </div>\n                </div>\n\n                {/* Control Buttons */}\n                <div className=\"space-y-3 pt-4 border-t border-gray-700\">\n                  <Button\n                    onClick={isPlaying ? pauseVisualization : startVisualization}\n                    disabled={steps.length === 0 || (currentStep >= steps.length && !isPlaying)}\n                    className=\"w-full bg-gradient-to-r from-cyan-500 to-blue-500 hover:from-cyan-600 hover:to-blue-600 text-white shadow-[0_0_20px_rgba(0,255,255,0.5)] transition-all duration-300\"\n                  >\n                    {isPlaying ? (\n                      <>\n                        <Pause className=\"w-4 h-4 mr-2\" />\n                        Pause\n                      </>\n                    ) : (\n                      <>\n                        <Play className=\"w-4 h-4 mr-2\" />\n                        {currentStep >= steps.length ? 'Start' : 'Resume'}\n                      </>\n                    )}\n                  </Button>\n\n                  <Button\n                    onClick={resetVisualization}\n                    disabled={isPlaying}\n                    variant=\"outline\"\n                    className=\"w-full border-pink-500/50 text-pink-400 hover:bg-pink-500/20 hover:border-pink-400 shadow-[0_0_15px_rgba(255,0,102,0.3)] transition-all duration-300\"\n                  >\n                    <RotateCcw className=\"w-4 h-4 mr-2\" />\n                    Reset\n                  </Button>\n                </div>\n\n                {/* Stats Display */}\n                <div className=\"pt-4 border-t border-gray-700 space-y-2\">\n                  <div className=\"flex justify-between text-sm\">\n                    <span className=\"text-gray-400\">Progress</span>\n                    <span className=\"text-cyan-400 font-mono\">\n                      {steps.length > 0 ? Math.min(currentStep, steps.length) : 0} / {steps.length}\n                    </span>\n                  </div>\n                  <div className=\"w-full bg-gray-700 rounded-full h-2 overflow-hidden\">\n                    <motion.div\n                      className=\"h-full bg-gradient-to-r from-cyan-500 to-purple-500 shadow-[0_0_10px_rgba(0,255,255,0.8)]\"\n                      initial={{ width: 0 }}\n                      animate={{\n                        width: steps.length > 0 ? `${(Math.min(currentStep, steps.length) / steps.length) * 100}%` : '0%'\n                      }}\n                      transition={{ duration: 0.3 }}\n                    />\n                  </div>\n                </div>\n              </div>\n            </motion.div>\n            \n            <div className=\"bg-gray-800/50 backdrop-blur-lg rounded-2xl p-6 border border-cyan-500/30 shadow-lg shadow-cyan-500/20\">\n              <div className=\"space-y-6\">\n                <div>\n                  <h3 className=\"text-cyan-400 font-semibold mb-4 flex items-center gap-2\">\n                    <Zap className=\"w-5 h-5\" />\n                    Algorithm\n                  </h3>\n                  <div className=\"grid grid-cols-2 gap-2\">\n                    {mockAlgorithms.map((algo) => (\n                      <motion.button\n                        key={algo.id}\n                        onClick={() => setSelectedAlgorithm(algo.id as AlgorithmType)}\n                        className={`p-3 rounded-lg font-medium text-sm transition-all ${\n                          selectedAlgorithm === algo.id\n                            ? 'bg-cyan-500/30 text-cyan-300 border-2 border-cyan-400 shadow-lg shadow-cyan-500/50'\n                            : 'bg-gray-700/50 text-gray-300 border border-gray-600 hover:border-cyan-500/50 hover:shadow-md hover:shadow-cyan-500/30'\n                        }`}\n                        whileHover={{ scale: 1.05 }}\n                        whileTap={{ scale: 0.95 }}\n                      >\n                        <div className=\"font-semibold\">{algo.name.split(' ')[0]}</div>\n                        <div className=\"text-xs opacity-70\">{algo.complexity}</div>\n                      </motion.button>\n                    ))}\n                  </div></parameter>\n                </div>\n\n                <div>\n                  <h3 className=\"text-cyan-400 font-semibold mb-4\">Speed</h3>\n                  <div className=\"space-y-2\">\n                    <Slider\n                      value={speed}\n                      onValueChange={setSpeed}\n                      min={1}\n                      max={100}\n                      step={1}\n                      className=\"cursor-pointer [&_[role=slider]]:bg-cyan-400 [&_[role=slider]]:border-cyan-300 [&_[role=slider]]:shadow-lg [&_[role=slider]]:shadow-cyan-400/50 [&_[role=slider]]:transition-all [&_[role=slider]]:hover:shadow-cyan-400/80 [&_[role=slider]]:hover:scale-110 [&_.relative]:bg-gray-700 [&_.relative]:overflow-visible [&_.bg-primary]:bg-gradient-to-r [&_.bg-primary]:from-cyan-500 [&_.bg-primary]:to-purple-500 [&_.bg-primary]:shadow-lg [&_.bg-primary]:shadow-cyan-500/30\"\n                    />\n                    <div className=\"flex justify-between text-xs text-gray-400\">\n                      <span>Slow</span>\n                      <span className=\"text-cyan-400 font-semibold\">{speed[0]}%</span>\n                      <span>Fast</span>\n                    </div>\n                  </div>\n                </div>\n\n                <div>\n                  <h3 className=\"text-cyan-400 font-semibold mb-4\">Array Size</h3>\n                  <div className=\"space-y-3\">\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"text-sm text-gray-400\">Elements</span>\n                      <motion.span \n                        key={arraySize[0]}\n                        initial={{ scale: 1.3, color: '#00ffff' }}\n                        animate={{ scale: 1, color: '#9ca3af' }}\n                        className=\"text-sm font-mono font-bold\"\n                      >\n                        {arraySize[0]}\n                      </motion.span>\n                    </div>\n                    <Slider\n                      value={arraySize}\n                      onValueChange={setArraySize}\n                      min={5}\n                      max={50}\n                      step={1}\n                      disabled={isPlaying}\n                      className=\"[&_[role=slider]]:bg-gradient-to-r [&_[role=slider]]:from-cyan-400 [&_[role=slider]]:to-purple-500 [&_[role=slider]]:border-2 [&_[role=slider]]:border-white [&_[role=slider]]:shadow-lg [&_[role=slider]]:shadow-cyan-400/50 [&_[role=slider]]:transition-shadow hover:[&_[role=slider]]:shadow-cyan-400/80 [&_[role=slider]]:h-4 [&_[role=slider]]:w-4\"\n                    />\n                    <div className=\"flex justify-between text-xs text-gray-500\">\n                      <span>5</span>\n                      <span>50</span>\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"space-y-3 pt-4 border-t border-cyan-500/20\">\n                  <Button\n                    onClick={isPlaying ? pauseVisualization : startVisualization}\n                    disabled={array.length === 0 || (steps.length === 0 && !isPlaying)}\n                    className=\"w-full bg-gradient-to-r from-cyan-500 to-blue-500 hover:from-cyan-400 hover:to-blue-400 text-white font-semibold py-6 rounded-xl shadow-lg shadow-cyan-500/50 hover:shadow-cyan-500/70 transition-all duration-300 disabled:opacity-50 disabled:cursor-not-allowed disabled:shadow-none\"\n                  >\n                    <motion.div\n                      className=\"flex items-center justify-center gap-2\"\n                      whileHover={{ scale: 1.05 }}\n                      whileTap={{ scale: 0.95 }}\n                    >\n                      {isPlaying ? (\n                        <>\n                          <motion.div\n                            initial={{ rotate: 0 }}\n                            animate={{ rotate: 360 }}\n                            transition={{ duration: 2, repeat: Infinity, ease: \"linear\" }}\n                          >\n                            <Pause className=\"w-5 h-5\" />\n                          </motion.div>\n                          Pause\n                        </>\n                      ) : (\n                        <>\n                          <motion.div\n                            animate={{ x: [0, 3, 0] }}\n                            transition={{ duration: 1.5, repeat: Infinity }}\n                          >\n                            <Play className=\"w-5 h-5\" />\n                          </motion.div>\n                          {currentStep > 0 && currentStep < steps.length ? 'Resume' : 'Start'}\n                        </>\n                      )}\n                    </motion.div>\n                  </Button>\n\n                  <Button\n                    onClick={resetVisualization}\n                    variant=\"outline\"\n                    className=\"w-full border-2 border-purple-500/50 bg-purple-500/10 hover:bg-purple-500/20 text-purple-300 hover:text-purple-200 font-semibold py-6 rounded-xl shadow-lg shadow-purple-500/30 hover:shadow-purple-500/50 transition-all duration-300\"\n                  >\n                    <motion.div\n                      className=\"flex items-center justify-center gap-2\"\n                      whileHover={{ scale: 1.05 }}\n                      whileTap={{ scale: 0.95 }}\n                    >\n                      <motion.div\n                        whileHover={{ rotate: -180 }}\n                        transition={{ duration: 0.5 }}\n                      >\n                        <RotateCcw className=\"w-5 h-5\" />\n                      </motion.div>\n                      Reset\n                    </motion.div>\n                  </Button>\n\n                  <Button\n                    onClick={generateRandomArray}\n                    variant=\"outline\"\n                    className=\"w-full border-2 border-pink-500/50 bg-pink-500/10 hover:bg-pink-500/20 text-pink-300 hover:text-pink-200 font-semibold py-6 rounded-xl shadow-lg shadow-pink-500/30 hover:shadow-pink-500/50 transition-all duration-300\"\n                  >\n                    <motion.div\n                      className=\"flex items-center justify-center gap-2\"\n                      whileHover={{ scale: 1.05 }}\n                      whileTap={{ scale: 0.95 }}\n                    >\n                      <motion.div\n                        whileHover={{ rotate: 180, scale: 1.2 }}\n                        transition={{ duration: 0.4 }}\n                      >\n                        <BarChart3 className=\"w-5 h-5\" />\n                      </motion.div>\n                      New Array\n                    </motion.div>\n                  </Button></parameter>\n                </div>\n              </div>\n            </div>\n\n            \n<motion.div\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ delay: 0.2 }}\n              className=\"bg-gray-800/50 backdrop-blur-lg rounded-2xl p-6 border border-purple-500/30 shadow-lg shadow-purple-500/20\"\n            >\n              <div className=\"flex items-center gap-2 mb-4\">\n                <BarChart3 className=\"w-5 h-5 text-purple-400\" />\n                <h3 className=\"text-purple-400 font-semibold\">Statistics</h3>\n              </div>\n              \n              <div className=\"space-y-4\">\n                <div className=\"bg-gray-900/50 rounded-xl p-4 border border-cyan-500/20\">\n                  <div className=\"text-gray-400 text-sm mb-1\">Comparisons</div>\n                  <motion.div\n                    key={comparisons}\n                    initial={{ scale: 1.2, color: '#00ffff' }}\n                    animate={{ scale: 1, color: '#ffffff' }}\n                    className=\"text-3xl font-bold text-white\"\n                  >\n                    {comparisons}\n                  </motion.div>\n                </div>\n\n                <div className=\"bg-gray-900/50 rounded-xl p-4 border border-pink-500/20\">\n                  <div className=\"text-gray-400 text-sm mb-1\">Swaps</div>\n                  <motion.div\n                    key={swaps}\n                    initial={{ scale: 1.2, color: '#ff00ff' }}\n                    animate={{ scale: 1, color: '#ffffff' }}\n                    className=\"text-3xl font-bold text-white\"\n                  >\n                    {swaps}\n                  </motion.div>\n                </div>\n\n                <div className=\"bg-gray-900/50 rounded-xl p-4 border border-green-500/20\">\n                  <div className=\"text-gray-400 text-sm mb-1\">Progress</div>\n                  <motion.div\n                    className=\"text-3xl font-bold text-white mb-2\"\n                  >\n                    {steps.length > 0 ? Math.round((currentStep / steps.length) * 100) : 0}%\n                  </motion.div>\n                  <div className=\"w-full bg-gray-700 rounded-full h-2 overflow-hidden\">\n                    <motion.div\n                      className=\"h-full bg-gradient-to-r from-green-500 to-cyan-500 shadow-[0_0_10px_rgba(0,255,0,0.5)]\"\n                      initial={{ width: 0 }}\n                      animate={{ \n                        width: steps.length > 0 ? `${(currentStep / steps.length) * 100}%` : '0%'\n                      }}\n                      transition={{ duration: 0.3 }}\n                    />\n                  </div>\n                </div>\n\n                <div className=\"bg-gray-900/50 rounded-xl p-4 border border-yellow-500/20\">\n                  <div className=\"text-gray-400 text-sm mb-1\">Complexity</div>\n                  <div className=\"text-xl font-mono text-yellow-400\">\n                    {mockAlgorithms.find(a => a.id === selectedAlgorithm)?.complexity || 'N/A'}\n                  </div>\n                </div>\n\n                <div className=\"bg-gray-900/50 rounded-xl p-4 border border-purple-500/20\">\n                  <div className=\"text-gray-400 text-sm mb-1\">Array Size</div>\n                  <div className=\"text-2xl font-bold text-white\">\n                    {array.length}\n                  </div>\n                </div>\n              </div>\n            </motion.div>\n          </div>\n\n          <div className=\"lg:col-span-3\">\n            <div className=\"bg-gray-800/50 backdrop-blur-lg rounded-2xl p-8 border border-purple-500/30 shadow-lg shadow-purple-500/20 min-h-[600px]\">\n                            {array.length === 0 ? (\n                <motion.div\n                  initial={{ opacity: 0, scale: 0.8 }}\n                  animate={{ opacity: 1, scale: 1 }}\n                  className=\"flex flex-col items-center justify-center h-full space-y-6\"\n                >\n                  <motion.div\n                    animate={{\n                      rotate: [0, 360],\n                      scale: [1, 1.2, 1]\n                    }}\n                    transition={{\n                      duration: 3,\n                      repeat: Infinity,\n                      ease: \"easeInOut\"\n                    }}\n                  >\n                    <BarChart3 className=\"w-24 h-24 text-cyan-400 opacity-50\" />\n                  </motion.div>\n                  <div className=\"text-center space-y-2\">\n                    <h3 className=\"text-2xl font-semibold text-gray-400\">\n                      No Array Generated\n                    </h3>\n                    <p className=\"text-gray-500\">\n                      Click \"Generate Array\" to start visualizing\n                    </p>\n                  </div>\n                  <Button\n                    onClick={generateRandomArray}\n                    className=\"bg-gradient-to-r from-cyan-500 to-purple-500 hover:from-cyan-400 hover:to-purple-400 text-white font-semibold px-8 py-6 text-lg rounded-xl shadow-lg shadow-cyan-500/50 hover:shadow-cyan-500/80 transition-all\"\n                  >\n                    <Zap className=\"w-5 h-5 mr-2\" />\n                    Generate Array\n                  </Button>\n                </motion.div>\n              ) : (\n                <div className=\"h-full w-full flex flex-col\">\n                  <div className=\"flex-1 flex items-end justify-center gap-1 px-4\">\n                    {(currentStep > 0 && currentStep <= steps.length\n                      ? steps[currentStep - 1].array\n                      : array\n                    ).map((element, index) => {\n                      const maxValue = Math.max(...array.map(el => el.value));\n                      const heightPercentage = (element.value / maxValue) * 100;\n                      \n                      let barColor = NEON_COLORS[index % NEON_COLORS.length];\n                      let glowIntensity = 0.3;\n                      let scale = 1;\n                      \n                      if (element.isComparing) {\n                        barColor = '#ffff00'; // Yellow for comparing\n                        glowIntensity = 0.8;\n                        scale = 1.05;\n                      } else if (element.isSwapping) {\n                        barColor = '#ff0066'; // Pink for swapping\n                        glowIntensity = 1;\n                        scale = 1.1;\n                      } else if (element.isSorted) {\n                        barColor = '#00ff00'; // Green for sorted\n                        glowIntensity = 0.5;\n                      }\n                      \n                      return (\n                        <motion.div\n                          key={element.id}\n                          className=\"relative flex-1 min-w-[4px] max-w-[60px] rounded-t-lg\"\n                          initial={{ height: 0, opacity: 0 }}\n                          animate={{\n                            height: `${heightPercentage}%`,\n                            opacity: 1,\n                            scale: scale,\n                            boxShadow: [\n                              `0 0 ${10 * glowIntensity}px ${barColor}`,\n                              `0 0 ${20 * glowIntensity}px ${barColor}`,\n                              `0 0 ${10 * glowIntensity}px ${barColor}`\n                            ]\n                          }}\n                          transition={{\n                            height: { duration: 0.5, ease: \"easeOut\" },\n                            scale: { duration: 0.3 },\n                            boxShadow: { duration: 0.6, repeat: element.isSwapping ? Infinity : 0 },\n                            opacity: { duration: 0.3 }\n                          }}\n                          style={{\n                            background: `linear-gradient(to top, ${barColor}, ${barColor}dd)`,\n                            border: `1px solid ${barColor}`,\n                          }}\n                        >\n                          {/* Glow effect overlay */}\n                          <motion.div\n                            className=\"absolute inset-0 rounded-t-lg\"\n                            animate={{\n                              opacity: element.isSwapping ? [0.3, 0.7, 0.3] : element.isComparing ? [0.2, 0.5, 0.2] : 0.2\n                            }}\n                            transition={{\n                              duration: 0.8,\n                              repeat: (element.isSwapping || element.isComparing) ? Infinity : 0\n                            }}\n                            style={{\n                              background: `radial-gradient(circle at 50% 0%, ${barColor}88, transparent)`,\n                            }}\n                          />\n                          \n                          {/* Trail effect for swapping */}\n                          {element.isSwapping && (\n                            <motion.div\n                              className=\"absolute inset-0 rounded-t-lg\"\n                              initial={{ opacity: 0, y: -20 }}\n                              animate={{\n                                opacity: [0, 0.6, 0],\n                                y: [-20, 0, 20]\n                              }}\n                              transition={{\n                                duration: 0.6,\n                                repeat: Infinity\n                              }}\n                              style={{\n                                background: `linear-gradient(to bottom, ${barColor}, transparent)`,\n                                filter: 'blur(8px)'\n                              }}\n                            />\n                          )}\n                          \n                          {/* Value label */}\n                          {array.length <= 30 && (\n                            <motion.div\n                              className=\"absolute -top-8 left-1/2 transform -translate-x-1/2 text-xs font-mono font-bold whitespace-nowrap\"\n                              initial={{ opacity: 0 }}\n                              animate={{\n                                opacity: element.isComparing || element.isSwapping ? 1 : 0.6,\n                                scale: element.isComparing || element.isSwapping ? 1.2 : 1,\n                                color: barColor\n                              }}\n                              transition={{ duration: 0.3 }}\n                            >\n                              {element.value}\n                            </motion.div>\n                          )}\n                          \n                          {/* Particle effect for sorted elements */}\n                          {element.isSorted && (\n                            <>\n                              {[...Array(3)].map((_, i) => (\n                                <motion.div\n                                  key={i}\n                                  className=\"absolute w-1 h-1 rounded-full\"\n                                  initial={{\n                                    top: '0%',\n                                    left: '50%',\n                                    opacity: 1,\n                                    backgroundColor: barColor\n                                  }}\n                                  animate={{\n                                    top: '-50%',\n                                    left: `${50 + (i - 1) * 30}%`,\n                                    opacity: 0,\n                                    scale: [1, 1.5, 0]\n                                  }}\n                                  transition={{\n                                    duration: 1,\n                                    delay: i * 0.1,\n                                    repeat: Infinity,\n                                    repeatDelay: 0.5\n                                  }}\n                                />\n                              ))}\n                            </>\n                          )}\n                        </motion.div>\n                      );\n                    })}\n                  </div>\n                  \n                  {/* Progress indicator */}\n                  {steps.length > 0 && (\n                    <motion.div\n                      initial={{ opacity: 0, y: 20 }}\n                      animate={{ opacity: 1, y: 0 }}\n                      className=\"mt-6 px-4\"\n                    >\n                      <div className=\"flex items-center justify-between mb-2\">\n                        <span className=\"text-sm text-gray-400\">Progress</span>\n                        <span className=\"text-sm font-mono text-cyan-400\">\n                          {currentStep} / {steps.length} steps\n                        </span>\n                      </div>\n                      <div className=\"relative h-2 bg-gray-700 rounded-full overflow-hidden\">\n                        <motion.div\n                          className=\"absolute inset-y-0 left-0 bg-gradient-to-r from-cyan-500 to-purple-500 rounded-full\"\n                          initial={{ width: 0 }}\n                          animate={{\n                            width: `${(currentStep / steps.length) * 100}%`\n                          }}\n                          transition={{ duration: 0.3 }}\n                          style={{\n                            boxShadow: '0 0 10px rgba(0, 255, 255, 0.5)'\n                          }}\n                        />\n                      </div>\n                    </motion.div>\n                  )}\n                </div>\n              )}\n              \n              <div className=\"h-full flex items-end justify-center gap-1\">\n                {(currentStep > 0 && currentStep <= steps.length ? steps[currentStep - 1].array : array).map((element, index) => {\n                  const isComparing = element.isComparing;\n                  const isSwapping = element.isSwapping;\n                  const isSorted = element.isSorted;\n                  const maxValue = 105;\n                  const heightPercentage = (element.value / maxValue) * 100;\n                  \n                  // Assign neon color based on index\n                  const neonColor = NEON_COLORS[index % NEON_COLORS.length];\n                  \n                  return (\n                    <motion.div\n                      key={element.id}\n                      className=\"relative flex-1 min-w-[8px] max-w-[60px] group\"\n                      initial={{ opacity: 0, y: 50 }}\n                      animate={{ \n                        opacity: 1, \n                        y: 0,\n                        scale: isSwapping ? [1, 1.1, 1] : 1\n                      }}\n                      transition={{ \n                        duration: 0.3,\n                        scale: { duration: 0.4, repeat: isSwapping ? 2 : 0 }\n                      }}\n                    >\n                      {/* Trail effect for swapping */}\n                      {isSwapping && (\n                        <>\n                          <motion.div\n                            className=\"absolute inset-0 rounded-t-lg\"\n                            style={{\n                              height: `${heightPercentage}%`,\n                              background: neonColor,\n                              filter: 'blur(20px)',\n                              opacity: 0.6\n                            }}\n                            animate={{\n                              opacity: [0.6, 0.3, 0.6],\n                              scale: [1, 1.2, 1]\n                            }}\n                            transition={{\n                              duration: 0.5,\n                              repeat: Infinity\n                            }}\n                          />\n                          <motion.div\n                            className=\"absolute -top-2 left-1/2 -translate-x-1/2\"\n                            initial={{ opacity: 0, y: 0 }}\n                            animate={{ \n                              opacity: [0, 1, 0],\n                              y: [-20, -40, -60]\n                            }}\n                            transition={{\n                              duration: 0.8,\n                              repeat: Infinity\n                            }}\n                          >\n                            <div \n                              className=\"w-2 h-2 rounded-full\"\n                              style={{\n                                background: neonColor,\n                                boxShadow: `0 0 10px ${neonColor}, 0 0 20px ${neonColor}`\n                              }}\n                            />\n                          </motion.div>\n                        </>\n                      )}\n                      \n                      {/* Main bar */}\n                      <motion.div\n                        className=\"relative w-full rounded-t-lg transition-all duration-300\"\n                        style={{\n                          height: `${heightPercentage}%`,\n                          background: isSorted \n                            ? `linear-gradient(to top, #10b981, #34d399)`\n                            : isComparing\n                            ? `linear-gradient(to top, #ef4444, #f87171)`\n                            : isSwapping\n                            ? `linear-gradient(to top, #f59e0b, #fbbf24)`\n                            : `linear-gradient(to top, ${neonColor}, ${neonColor}dd)`,\n                          boxShadow: isSorted\n                            ? '0 0 20px rgba(16, 185, 129, 0.8), 0 0 40px rgba(16, 185, 129, 0.4), inset 0 0 20px rgba(255, 255, 255, 0.2)'\n                            : isComparing\n                            ? '0 0 30px rgba(239, 68, 68, 0.9), 0 0 60px rgba(239, 68, 68, 0.5), inset 0 0 20px rgba(255, 255, 255, 0.3)'\n                            : isSwapping\n                            ? '0 0 30px rgba(245, 158, 11, 0.9), 0 0 60px rgba(245, 158, 11, 0.5), inset 0 0 20px rgba(255, 255, 255, 0.3)'\n                            : `0 0 15px ${neonColor}aa, 0 0 30px ${neonColor}66, inset 0 0 15px rgba(255, 255, 255, 0.1)`,\n                          border: isSorted || isComparing || isSwapping ? '2px solid rgba(255, 255, 255, 0.5)' : '1px solid rgba(255, 255, 255, 0.2)'\n                        }}\n                        animate={{\n                          height: `${heightPercentage}%`,\n                          boxShadow: isComparing\n                            ? [\n                                '0 0 30px rgba(239, 68, 68, 0.9), 0 0 60px rgba(239, 68, 68, 0.5)',\n                                '0 0 40px rgba(239, 68, 68, 1), 0 0 80px rgba(239, 68, 68, 0.7)',\n                                '0 0 30px rgba(239, 68, 68, 0.9), 0 0 60px rgba(239, 68, 68, 0.5)'\n                              ]\n                            : isSwapping\n                            ? [\n                                '0 0 30px rgba(245, 158, 11, 0.9), 0 0 60px rgba(245, 158, 11, 0.5)',\n                                '0 0 40px rgba(245, 158, 11, 1), 0 0 80px rgba(245, 158, 11, 0.7)',\n                                '0 0 30px rgba(245, 158, 11, 0.9), 0 0 60px rgba(245, 158, 11, 0.5)'\n                              ]\n                            : undefined\n                        }}\n                        transition={{\n                          height: { duration: 0.5, ease: 'easeInOut' },\n                          boxShadow: { duration: 0.6, repeat: (isComparing || isSwapping) ? Infinity : 0 }\n                        }}\n                      >\n                        {/* Inner glow effect */}\n                        <motion.div\n                          className=\"absolute inset-0 rounded-t-lg\"\n                          style={{\n                            background: `linear-gradient(to top, transparent, rgba(255, 255, 255, 0.3))`,\n                            opacity: 0.5\n                          }}\n                          animate={{\n                            opacity: isComparing || isSwapping ? [0.5, 0.8, 0.5] : 0.5\n                          }}\n                          transition={{\n                            duration: 0.8,\n                            repeat: (isComparing || isSwapping) ? Infinity : 0\n                          }}\n                        />\n                        \n                        {/* Shimmer effect */}\n                        <motion.div\n                          className=\"absolute inset-0 rounded-t-lg overflow-hidden\"\n                          initial={{ opacity: 0 }}\n                          animate={{ opacity: 1 }}\n                        >\n                          <motion.div\n                            className=\"absolute inset-0 bg-gradient-to-r from-transparent via-white to-transparent opacity-20\"\n                            animate={{\n                              x: ['-100%', '200%']\n                            }}\n                            transition={{\n                              duration: 2,\n                              repeat: Infinity,\n                              repeatDelay: 1,\n                              ease: 'easeInOut'\n                            }}\n                          />\n                        </motion.div>\n                      </motion.div>\n                      \n                      {/* Value label */}\n                      <motion.div\n                        className=\"absolute -bottom-6 left-1/2 -translate-x-1/2 text-xs font-mono font-bold whitespace-nowrap\"\n                        style={{\n                          color: isSorted ? '#10b981' : isComparing ? '#ef4444' : isSwapping ? '#f59e0b' : neonColor,\n                          textShadow: `0 0 10px ${isSorted ? '#10b981' : isComparing ? '#ef4444' : isSwapping ? '#f59e0b' : neonColor}`,\n                          opacity: array.length > 30 ? 0 : 1\n                        }}\n                        animate={{\n                          scale: isComparing || isSwapping ? [1, 1.2, 1] : 1,\n                          y: isSwapping ? [0, -5, 0] : 0\n                        }}\n                        transition={{\n                          duration: 0.4,\n                          repeat: (isComparing || isSwapping) ? Infinity : 0\n                        }}\n                      >\n                        {element.value}\n                      </motion.div>\n                      \n                      {/* Hover tooltip for larger arrays */}\n                      {array.length > 30 && (\n                        <div className=\"absolute -top-8 left-1/2 -translate-x-1/2 opacity-0 group-hover:opacity-100 transition-opacity duration-200 pointer-events-none\">\n                          <div \n                            className=\"px-2 py-1 rounded text-xs font-mono font-bold whitespace-nowrap\"\n                            style={{\n                              background: 'rgba(0, 0, 0, 0.8)',\n                              color: neonColor,\n                              border: `1px solid ${neonColor}`,\n                              boxShadow: `0 0 10px ${neonColor}66`\n                            }}\n                          >\n                            {element.value}\n                          </div>\n                        </div>\n                      )}\n                      \n                      {/* Particle effects for swapping */}\n                      {isSwapping && (\n                        <div className=\"absolute inset-0 pointer-events-none\">\n                          {[...Array(3)].map((_, i) => (\n                            <motion.div\n                              key={i}\n                              className=\"absolute w-1 h-1 rounded-full\"\n                              style={{\n                                background: neonColor,\n                                boxShadow: `0 0 5px ${neonColor}`,\n                                left: '50%',\n                                top: '0%'\n                              }}\n                              animate={{\n                                x: [0, (Math.random() - 0.5) * 40],\n                                y: [0, -30 - Math.random() * 20],\n                                opacity: [1, 0],\n                                scale: [1, 0]\n                              }}\n                              transition={{\n                                duration: 0.8,\n                                delay: i * 0.1,\n                                repeat: Infinity,\n                                repeatDelay: 0.5\n                              }}\n                            />\n                          ))}\n                        </div>\n                      )}\n                    </motion.div>\n                  );\n                })}\n              </div>\n            </div>\n\n                        <motion.div\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ delay: 0.4, duration: 0.6 }}\n              className=\"mt-6 bg-gray-800/50 backdrop-blur-lg rounded-xl p-6 border border-purple-500/30 shadow-lg shadow-purple-500/10\"\n            >\n              <h3 className=\"text-purple-400 font-semibold mb-4 flex items-center gap-2\">\n                <BarChart3 className=\"w-5 h-5\" />\n                Legend\n              </h3>\n              <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n                <motion.div\n                  className=\"flex items-center gap-3 p-3 bg-gray-700/30 rounded-lg border border-gray-600/50\"\n                  whileHover={{ scale: 1.05, borderColor: 'rgba(0, 255, 255, 0.5)' }}\n                >\n                  <motion.div\n                    className=\"w-4 h-12 bg-gradient-to-t from-cyan-400 to-cyan-300 rounded\"\n                    animate={{\n                      boxShadow: [\n                        '0 0 10px rgba(0, 255, 255, 0.5)',\n                        '0 0 20px rgba(0, 255, 255, 0.8)',\n                        '0 0 10px rgba(0, 255, 255, 0.5)'\n                      ]\n                    }}\n                    transition={{ duration: 1.5, repeat: Infinity }}\n                  />\n                  <div>\n                    <div className=\"text-sm font-medium text-cyan-300\">Default</div>\n                    <div className=\"text-xs text-gray-400\">Unsorted</div>\n                  </div>\n                </motion.div>\n\n                <motion.div\n                  className=\"flex items-center gap-3 p-3 bg-gray-700/30 rounded-lg border border-gray-600/50\"\n                  whileHover={{ scale: 1.05, borderColor: 'rgba(255, 255, 0, 0.5)' }}\n                >\n                  <motion.div\n                    className=\"w-4 h-12 bg-gradient-to-t from-yellow-400 to-yellow-300 rounded\"\n                    animate={{\n                      boxShadow: [\n                        '0 0 15px rgba(255, 255, 0, 0.6)',\n                        '0 0 25px rgba(255, 255, 0, 0.9)',\n                        '0 0 15px rgba(255, 255, 0, 0.6)'\n                      ],\n                      scale: [1, 1.1, 1]\n                    }}\n                    transition={{ duration: 1, repeat: Infinity }}\n                  />\n                  <div>\n                    <div className=\"text-sm font-medium text-yellow-300\">Comparing</div>\n                    <div className=\"text-xs text-gray-400\">Active</div>\n                  </div>\n                </motion.div>\n\n                <motion.div\n                  className=\"flex items-center gap-3 p-3 bg-gray-700/30 rounded-lg border border-gray-600/50\"\n                  whileHover={{ scale: 1.05, borderColor: 'rgba(255, 0, 255, 0.5)' }}\n                >\n                  <motion.div\n                    className=\"w-4 h-12 bg-gradient-to-t from-pink-500 to-pink-400 rounded\"\n                    animate={{\n                      boxShadow: [\n                        '0 0 20px rgba(255, 0, 255, 0.7)',\n                        '0 0 30px rgba(255, 0, 255, 1)',\n                        '0 0 20px rgba(255, 0, 255, 0.7)'\n                      ],\n                      x: [-2, 2, -2]\n                    }}\n                    transition={{ duration: 0.8, repeat: Infinity }}\n                  />\n                  <div>\n                    <div className=\"text-sm font-medium text-pink-300\">Swapping</div>\n                    <div className=\"text-xs text-gray-400\">Moving</div>\n                  </div>\n                </motion.div>\n\n                <motion.div\n                  className=\"flex items-center gap-3 p-3 bg-gray-700/30 rounded-lg border border-gray-600/50\"\n                  whileHover={{ scale: 1.05, borderColor: 'rgba(0, 255, 0, 0.5)' }}\n                >\n                  <motion.div\n                    className=\"w-4 h-12 bg-gradient-to-t from-green-400 to-green-300 rounded\"\n                    animate={{\n                      boxShadow: [\n                        '0 0 15px rgba(0, 255, 0, 0.6)',\n                        '0 0 25px rgba(0, 255, 0, 0.9)',\n                        '0 0 15px rgba(0, 255, 0, 0.6)'\n                      ]\n                    }}\n                    transition={{ duration: 2, repeat: Infinity }}\n                  />\n                  <div>\n                    <div className=\"text-sm font-medium text-green-300\">Sorted</div>\n                    <div className=\"text-xs text-gray-400\">Complete</div>\n                  </div>\n                </motion.div>\n              </div>\n            </motion.div>\n          </div>\n        </div>\n\n        \n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ delay: 0.4, duration: 0.6 }}\n          className=\"bg-gray-800/50 backdrop-blur-lg rounded-2xl p-6 border border-cyan-500/30 shadow-lg shadow-cyan-500/20\"\n        >\n          <div className=\"space-y-4\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center gap-3\">\n                <motion.div\n                  animate={{\n                    rotate: isPlaying ? 360 : 0,\n                    scale: isPlaying ? [1, 1.2, 1] : 1\n                  }}\n                  transition={{\n                    rotate: { duration: 2, repeat: Infinity, ease: \"linear\" },\n                    scale: { duration: 0.5, repeat: Infinity }\n                  }}\n                >\n                  <Zap className=\"w-5 h-5 text-cyan-400\" />\n                </motion.div>\n                <h3 className=\"text-cyan-400 font-semibold text-lg\">Timeline Control</h3>\n              </div>\n              <div className=\"flex items-center gap-2 px-4 py-2 bg-purple-500/20 rounded-full border border-purple-400/50\">\n                <span className=\"text-sm text-purple-300 font-mono\">\n                  Step {currentStep} / {steps.length}\n                </span>\n              </div>\n            </div>\n\n            {/* Progress Bar */}\n            <div className=\"relative\">\n              <div className=\"h-3 bg-gray-700/50 rounded-full overflow-hidden border border-gray-600\">\n                <motion.div\n                  className=\"h-full bg-gradient-to-r from-cyan-500 via-purple-500 to-pink-500 relative\"\n                  initial={{ width: 0 }}\n                  animate={{\n                    width: steps.length > 0 ? `${(currentStep / steps.length) * 100}%` : '0%'\n                  }}\n                  transition={{ duration: 0.3, ease: \"easeOut\" }}\n                >\n                  <motion.div\n                    className=\"absolute inset-0 bg-gradient-to-r from-transparent via-white/30 to-transparent\"\n                    animate={{\n                      x: ['-100%', '200%']\n                    }}\n                    transition={{\n                      duration: 1.5,\n                      repeat: Infinity,\n                      ease: \"linear\"\n                    }}\n                  />\n                </motion.div>\n              </div>\n              \n              {/* Progress Indicator Dot */}\n              {steps.length > 0 && (\n                <motion.div\n                  className=\"absolute top-1/2 -translate-y-1/2 w-6 h-6 bg-cyan-400 rounded-full border-4 border-gray-900 shadow-lg shadow-cyan-400/50\"\n                  animate={{\n                    left: `${(currentStep / steps.length) * 100}%`,\n                    boxShadow: [\n                      '0 0 20px rgba(0, 255, 255, 0.5)',\n                      '0 0 40px rgba(0, 255, 255, 0.8)',\n                      '0 0 20px rgba(0, 255, 255, 0.5)'\n                    ]\n                  }}\n                  transition={{\n                    left: { duration: 0.3, ease: \"easeOut\" },\n                    boxShadow: { duration: 1, repeat: Infinity }\n                  }}\n                  style={{ marginLeft: '-12px' }}\n                />\n              )}\n            </div>\n\n            {/* Timeline Scrubber */}\n            <div className=\"relative pt-2\">\n              <input\n                type=\"range\"\n                min={0}\n                max={steps.length}\n                value={currentStep}\n                onChange={(e) => {\n                  const newStep = parseInt(e.target.value);\n                  setCurrentStep(newStep);\n                  setIsPlaying(false);\n                }}\n                disabled={steps.length === 0}\n                className=\"w-full h-2 bg-transparent appearance-none cursor-pointer disabled:cursor-not-allowed disabled:opacity-50\n                  [&::-webkit-slider-track]:h-2 [&::-webkit-slider-track]:bg-gray-700/50 [&::-webkit-slider-track]:rounded-full [&::-webkit-slider-track]:border [&::-webkit-slider-track]:border-gray-600\n                  [&::-webkit-slider-thumb]:appearance-none [&::-webkit-slider-thumb]:w-5 [&::-webkit-slider-thumb]:h-5 [&::-webkit-slider-thumb]:bg-gradient-to-br [&::-webkit-slider-thumb]:from-cyan-400 [&::-webkit-slider-thumb]:to-purple-500 [&::-webkit-slider-thumb]:rounded-full [&::-webkit-slider-thumb]:border-2 [&::-webkit-slider-thumb]:border-white [&::-webkit-slider-thumb]:shadow-lg [&::-webkit-slider-thumb]:shadow-cyan-400/50 [&::-webkit-slider-thumb]:cursor-grab [&::-webkit-slider-thumb]:active:cursor-grabbing [&::-webkit-slider-thumb]:hover:scale-110 [&::-webkit-slider-thumb]:transition-transform\n                  [&::-moz-range-track]:h-2 [&::-moz-range-track]:bg-gray-700/50 [&::-moz-range-track]:rounded-full [&::-moz-range-track]:border [&::-moz-range-track]:border-gray-600\n                  [&::-moz-range-thumb]:w-5 [&::-moz-range-thumb]:h-5 [&::-moz-range-thumb]:bg-gradient-to-br [&::-moz-range-thumb]:from-cyan-400 [&::-moz-range-thumb]:to-purple-500 [&::-moz-range-thumb]:rounded-full [&::-moz-range-thumb]:border-2 [&::-moz-range-thumb]:border-white [&::-moz-range-thumb]:shadow-lg [&::-moz-range-thumb]:cursor-grab [&::-moz-range-thumb]:active:cursor-grabbing\"\n              />\n              \n              {/* Step Markers */}\n              <div className=\"absolute top-0 left-0 right-0 flex justify-between pointer-events-none\">\n                {steps.length > 0 && Array.from({ length: Math.min(steps.length + 1, 21) }).map((_, i) => {\n                  const stepIndex = Math.floor((i / 20) * steps.length);\n                  const isActive = currentStep >= stepIndex;\n                  return (\n                    <motion.div\n                      key={i}\n                      className={`w-1 h-4 rounded-full transition-colors duration-300 ${\n                        isActive ? 'bg-cyan-400 shadow-lg shadow-cyan-400/50' : 'bg-gray-600'\n                      }`}\n                      animate={isActive ? {\n                        boxShadow: [\n                          '0 0 5px rgba(0, 255, 255, 0.3)',\n                          '0 0 10px rgba(0, 255, 255, 0.6)',\n                          '0 0 5px rgba(0, 255, 255, 0.3)'\n                        ]\n                      } : {}}\n                      transition={{ duration: 1, repeat: Infinity }}\n                    />\n                  );\n                })}\n              </div>\n            </div>\n\n            {/* Control Buttons */}\n            <div className=\"flex items-center justify-center gap-3 pt-2\">\n              <motion.div whileHover={{ scale: 1.05 }} whileTap={{ scale: 0.95 }}>\n                <Button\n                  onClick={() => {\n                    if (currentStep > 0) {\n                      setCurrentStep(prev => prev - 1);\n                      setIsPlaying(false);\n                    }\n                  }}\n                  disabled={currentStep === 0 || steps.length === 0}\n                  variant=\"outline\"\n                  size=\"sm\"\n                  className=\"bg-gray-700/50 border-cyan-500/50 text-cyan-400 hover:bg-cyan-500/20 hover:border-cyan-400 hover:shadow-lg hover:shadow-cyan-500/30 disabled:opacity-30 disabled:cursor-not-allowed transition-all\"\n                >\n                  <RotateCcw className=\"w-4 h-4 mr-2\" />\n                  Previous\n                </Button>\n              </motion.div>\n\n              <motion.div whileHover={{ scale: 1.05 }} whileTap={{ scale: 0.95 }}>\n                <Button\n                  onClick={isPlaying ? pauseVisualization : startVisualization}\n                  disabled={steps.length === 0}\n                  size=\"lg\"\n                  className=\"bg-gradient-to-r from-cyan-500 to-purple-500 hover:from-cyan-400 hover:to-purple-400 text-white font-semibold shadow-lg shadow-cyan-500/50 hover:shadow-cyan-500/70 disabled:opacity-30 disabled:cursor-not-allowed transition-all px-8\"\n                >\n                  {isPlaying ? (\n                    <>\n                      <Pause className=\"w-5 h-5 mr-2\" />\n                      Pause\n                    </>\n                  ) : (\n                    <>\n                      <Play className=\"w-5 h-5 mr-2\" />\n                      {currentStep >= steps.length ? 'Replay' : 'Play'}\n                    </>\n                  )}\n                </Button>\n              </motion.div>\n\n              <motion.div whileHover={{ scale: 1.05 }} whileTap={{ scale: 0.95 }}>\n                <Button\n                  onClick={() => {\n                    if (currentStep < steps.length) {\n                      setCurrentStep(prev => prev + 1);\n                      setIsPlaying(false);\n                    }\n                  }}\n                  disabled={currentStep >= steps.length || steps.length === 0}\n                  variant=\"outline\"\n                  size=\"sm\"\n                  className=\"bg-gray-700/50 border-purple-500/50 text-purple-400 hover:bg-purple-500/20 hover:border-purple-400 hover:shadow-lg hover:shadow-purple-500/30 disabled:opacity-30 disabled:cursor-not-allowed transition-all\"\n                >\n                  Next\n                  <Play className=\"w-4 h-4 ml-2 rotate-0\" />\n                </Button>\n              </motion.div>\n            </div>\n\n            {/* Quick Actions */}\n            <div className=\"flex items-center justify-between pt-2 border-t border-gray-700\">\n              <motion.button\n                onClick={() => {\n                  setCurrentStep(0);\n                  setIsPlaying(false);\n                }}\n                disabled={steps.length === 0}\n                whileHover={{ scale: 1.05 }}\n                whileTap={{ scale: 0.95 }}\n                className=\"text-sm text-gray-400 hover:text-cyan-400 disabled:opacity-30 disabled:cursor-not-allowed transition-colors flex items-center gap-2\"\n              >\n                <RotateCcw className=\"w-4 h-4\" />\n                Reset to Start\n              </motion.button>\n\n              <motion.button\n                onClick={resetVisualization}\n                whileHover={{ scale: 1.05 }}\n                whileTap={{ scale: 0.95 }}\n                className=\"text-sm text-gray-400 hover:text-pink-400 transition-colors flex items-center gap-2\"\n              >\n                <Zap className=\"w-4 h-4\" />\n                New Array\n              </motion.button>\n            </div>\n          </div>\n        </motion.div>\n      </div>\n    </div>\n  );\n}\n",
  "error": null,
  "overall_score": 47,
  "code_quality_score": 12,
  "architecture_score": 10,
  "performance_score": 14,
  "accessibility_score": 11,
  "metadata": {
    "document_id": "eval_room_4fe19377bb1b",
    "prompt_category": "creative",
    "prompt_complexity": 9.0
  },
  "raw_response": {
    "document_id": "eval_room_4fe19377bb1b",
    "mode": "parallel",
    "prompt": "Build a captivating algorithm visualizer with neon colored bars, smooth height transitions, glowing comparison indicators, trail effects during swaps, and a futuristic dashboard design with animated controls",
    "content": "import { useState, useCallback } from 'react';import React from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Slider } from '@/components/ui/slider';\nimport { Play, Pause, RotateCcw, Zap, BarChart3 } from 'lucide-react';\nimport { motion } from 'framer-motion';\n\ninterface ArrayElement {\n  value: number;\n  id: string;\n  isComparing?: boolean;\n  isSwapping?: boolean;\n  isSorted?: boolean;\n}\n\ninterface AlgorithmStep {\n  array: ArrayElement[];\n  comparingIndices: number[];\n  swappingIndices: number[];\n  sortedIndices: number[];\n}\n\ntype AlgorithmType = 'bubble' | 'quick' | 'merge' | 'insertion';\n\nconst NEON_COLORS = [\n  '#00ffff',\n  '#ff00ff', \n  '#00ff00',\n  '#ffff00',\n  '#ff0066',\n  '#00ffaa'\n];\n\nconst mockAlgorithms = [\n  { id: 'bubble', name: 'Bubble Sort', complexity: 'O(n\u00b2)' },\n  { id: 'quick', name: 'Quick Sort', complexity: 'O(n log n)' },\n  { id: 'merge', name: 'Merge Sort', complexity: 'O(n log n)' },\n  { id: 'insertion', name: 'Insertion Sort', complexity: 'O(n\u00b2)' }\n];\n\nexport default function AlgorithmVisualizer() {\n  const [array, setArray] = useState<ArrayElement[]>([]);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [speed, setSpeed] = useState([50]);\n  const [arraySize, setArraySize] = useState([20]);\n  const [selectedAlgorithm, setSelectedAlgorithm] = useState<AlgorithmType>('bubble');\n  const [currentStep, setCurrentStep] = useState(0);\n  const [steps, setSteps] = useState<AlgorithmStep[]>([]);\n  const [comparisons, setComparisons] = useState(0);\n  const [swaps, setSwaps] = useState(0);\n\n  const generateRandomArray = useCallback(() => {\n    const newArray: ArrayElement[] = Array.from({ length: arraySize[0] }, (_, i) => ({\n      value: Math.floor(Math.random() * 100) + 5,\n      id: `element-${i}-${Date.now()}`,\n      isComparing: false,\n      isSwapping: false,\n      isSorted: false\n    }));\n    setArray(newArray);\n    setSteps([]);\n    setCurrentStep(0);\n    setIsPlaying(false);\n  }, [arraySize]);\n\n  const resetVisualization = useCallback(() => {\n\n    setIsPlaying(false);\n    setCurrentStep(0);\n    setSteps([]);\n    generateRandomArray();\n  }, [generateRandomArray]);\n\n  // Animation effect for step-by-step visualization\n  const animateSteps = useCallback(() => {\n    if (currentStep < steps.length && isPlaying) {\n      const timer = setTimeout(() => {\n        setCurrentStep(prev => prev + 1);\n      }, 1000 - speed[0] * 9.5); // Convert speed slider (0-100) to delay (1000ms-50ms)\n      \n      return () => clearTimeout(timer);\n    } else if (currentStep >= steps.length && isPlaying) {\n      setIsPlaying(false);\n    }\n  }, [currentStep, steps.length, isPlaying, speed]);\n\n  // Run animation effect\n  React.useEffect(() => {\n    const cleanup = animateSteps();\n    return cleanup;\n  }, [animateSteps]);\n  const startVisualization = useCallback(() => {\n    if (steps.length === 0) return;\n    setIsPlaying(true);\n    if (currentStep >= steps.length) {\n      setCurrentStep(0);\n    }\n  }, [steps, speed, currentStep]);\n\n  const pauseVisualization = useCallback(() => {\n    setIsPlaying(false);\n  \n  }, []);\n\n  const generateSortingSteps = useCallback((algorithm: AlgorithmType) => {\n    const newSteps: AlgorithmStep[] = [];\n    const arr = [...array];\n\n    const addStep = (\n      comparingIndices: number[] = [],\n      swappingIndices: number[] = [],\n      sortedIndices: number[] = []\n    ) => {\n      newSteps.push({\n        array: arr.map((el, idx) => ({\n          ...el,\n          isComparing: comparingIndices.includes(idx),\n          isSwapping: swappingIndices.includes(idx),\n          isSorted: sortedIndices.includes(idx)\n        })),\n        comparingIndices,\n        swappingIndices,\n        sortedIndices\n      });\n    };\n\n    const swap = (i: number, j: number) => {\n      [arr[i], arr[j]] = [arr[j], arr[i]];\n    };\n\n    switch (algorithm) {\n      case 'bubble': {\n        const sorted: number[] = [];\n        for (let i = 0; i < arr.length; i++) {\n          for (let j = 0; j < arr.length - i - 1; j++) {\n            addStep([j, j + 1], [], sorted);\n            if (arr[j].value > arr[j + 1].value) {\n              addStep([j, j + 1], [j, j + 1], sorted);\n              swap(j, j + 1);\n              addStep([], [], sorted);\n            }\n          }\n          sorted.push(arr.length - i - 1);\n          addStep([], [], sorted);\n        }\n        break;\n      }\n\n      case 'insertion': {\n        const sorted: number[] = [0];\n        addStep([], [], sorted);\n        for (let i = 1; i < arr.length; i++) {\n          let j = i;\n          addStep([j], [], sorted);\n          while (j > 0 && arr[j - 1].value > arr[j].value) {\n            addStep([j - 1, j], [j - 1, j], sorted);\n            swap(j - 1, j);\n            j--;\n            addStep([j], [], sorted);\n          }\n          sorted.push(i);\n          addStep([], [], sorted);\n        }\n        break;\n      }\n\n      case 'quick': {\n        const sorted: number[] = [];\n        const quickSort = (low: number, high: number) => {\n          if (low < high) {\n            const pivotIdx = partition(low, high);\n            sorted.push(pivotIdx);\n            addStep([], [], sorted);\n            quickSort(low, pivotIdx - 1);\n            quickSort(pivotIdx + 1, high);\n          } else if (low === high) {\n            sorted.push(low);\n            addStep([], [], sorted);\n          }\n        };\n\n        const partition = (low: number, high: number): number => {\n          const pivot = arr[high].value;\n          addStep([high], [], sorted);\n          let i = low - 1;\n\n          for (let j = low; j < high; j++) {\n            addStep([j, high], [], sorted);\n            if (arr[j].value < pivot) {\n              i++;\n              if (i !== j) {\n                addStep([i, j], [i, j], sorted);\n                swap(i, j);\n              }\n            }\n          }\n          addStep([i + 1, high], [i + 1, high], sorted);\n          swap(i + 1, high);\n          return i + 1;\n        };\n\n        quickSort(0, arr.length - 1);\n        break;\n      }\n\n      case 'merge': {\n        const sorted: number[] = [];\n        const mergeSort = (left: number, right: number) => {\n          if (left < right) {\n            const mid = Math.floor((left + right) / 2);\n            mergeSort(left, mid);\n            mergeSort(mid + 1, right);\n            merge(left, mid, right);\n          }\n        };\n\n        const merge = (left: number, mid: number, right: number) => {\n          const leftArr = arr.slice(left, mid + 1);\n          const rightArr = arr.slice(mid + 1, right + 1);\n          let i = 0, j = 0, k = left;\n\n          while (i < leftArr.length && j < rightArr.length) {\n            addStep([left + i, mid + 1 + j], [], sorted);\n            if (leftArr[i].value <= rightArr[j].value) {\n              arr[k] = leftArr[i];\n              i++;\n            } else {\n              arr[k] = rightArr[j];\n              j++;\n            }\n            addStep([], [k], sorted);\n            k++;\n          }\n\n          while (i < leftArr.length) {\n            arr[k] = leftArr[i];\n            addStep([], [k], sorted);\n            i++;\n            k++;\n          }\n\n          while (j < rightArr.length) {\n            arr[k] = rightArr[j];\n            addStep([], [k], sorted);\n            j++;\n            k++;\n          }\n\n          for (let idx = left; idx <= right; idx++) {\n            if (!sorted.includes(idx)) sorted.push(idx);\n          }\n          addStep([], [], sorted);\n        };\n\n        mergeSort(0, arr.length - 1);\n        break;\n      }\n    }\n\n    setSteps(newSteps);\n    setCurrentStep(0);\n  }, [array]);\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-gray-900 via-purple-900 to-gray-900 p-8\">\n      <div className=\"max-w-7xl mx-auto space-y-8\">\n        <motion.div\n          initial={{ opacity: 0, y: -20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.8 }}\n          className=\"text-center space-y-4\"\n        >\n          <motion.h1\n            className=\"text-6xl font-bold bg-gradient-to-r from-cyan-400 via-purple-400 to-pink-400 bg-clip-text text-transparent\"\n            animate={{\n              textShadow: [\n                '0 0 20px rgba(0, 255, 255, 0.5)',\n                '0 0 40px rgba(255, 0, 255, 0.5)',\n                '0 0 20px rgba(0, 255, 255, 0.5)'\n              ]\n            }}\n            transition={{ duration: 2, repeat: Infinity }}\n          >\n            Algorithm Visualizer\n          </motion.h1>\n          \n          <div className=\"flex items-center justify-center gap-4\">\n            <motion.div\n              initial={{ scale: 0 }}\n              animate={{ scale: 1 }}\n              transition={{ delay: 0.3, type: 'spring' }}\n              className=\"flex items-center gap-2 px-6 py-3 bg-gray-800/50 backdrop-blur-sm rounded-full border border-cyan-500/30\"\n            >\n              <Zap className=\"w-5 h-5 text-cyan-400\" />\n              <span className=\"text-xl font-semibold text-cyan-300\">\n                {mockAlgorithms.find(a => a.id === selectedAlgorithm)?.name}\n              </span>\n            </motion.div>\n            \n            <motion.div\n              initial={{ scale: 0 }}\n              animate={{ scale: 1 }}\n              transition={{ delay: 0.5, type: 'spring' }}\n              className=\"px-4 py-2 bg-purple-500/20 backdrop-blur-sm rounded-full border border-purple-400/50\"\n            >\n              <div className=\"flex items-center gap-2\">\n                <BarChart3 className=\"w-4 h-4 text-purple-300\" />\n                <span className=\"text-sm font-mono text-purple-200\">\n                  {mockAlgorithms.find(a => a.id === selectedAlgorithm)?.complexity}\n                </span>\n              </div>\n            </motion.div>\n          </div>\n        </motion.div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-6\">\n          <div className=\"lg:col-span-1 space-y-6\">\n            <motion.div\n              initial={{ opacity: 0, x: -50 }}\n              animate={{ opacity: 1, x: 0 }}\n              className=\"bg-gray-800/50 backdrop-blur-lg rounded-2xl p-6 border border-cyan-500/30 shadow-[0_0_30px_rgba(0,255,255,0.3)]\"\n            >\n              <div className=\"space-y-6\">\n                {/* Algorithm Selection */}\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center gap-2 text-cyan-400\">\n                    <Zap className=\"w-5 h-5\" />\n                    <h3 className=\"font-semibold text-lg\">Algorithm</h3>\n                  </div>\n                  <div className=\"space-y-2\">\n                    {mockAlgorithms.map((algo) => (\n                      <button\n                        key={algo.id}\n                        onClick={() => {\n                          setSelectedAlgorithm(algo.id as AlgorithmType);\n                          generateSortingSteps(algo.id as AlgorithmType);\n                        }}\n                        disabled={isPlaying}\n                        className={`w-full p-3 rounded-lg text-left transition-all duration-300 ${\n                          selectedAlgorithm === algo.id\n                            ? 'bg-cyan-500/20 border border-cyan-400 shadow-[0_0_20px_rgba(0,255,255,0.4)] text-cyan-300'\n                            : 'bg-gray-700/50 border border-gray-600 hover:border-cyan-500/50 text-gray-300 hover:text-cyan-400'\n                        } disabled:opacity-50 disabled:cursor-not-allowed`}\n                      >\n                        <div className=\"font-medium\">{algo.name}</div>\n                        <div className=\"text-xs opacity-70\">{algo.complexity}</div>\n                      </button>\n                    ))}\n                  </div>\n                </div>\n\n                {/* Array Size Control */}\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center gap-2 text-purple-400\">\n                    <BarChart3 className=\"w-5 h-5\" />\n                    <h3 className=\"font-semibold\">Array Size</h3>\n                  </div>\n                  <div className=\"space-y-2\">\n                    <div className=\"flex justify-between text-sm text-gray-400\">\n                      <span>Size</span>\n                      <span className=\"text-purple-400 font-mono\">{arraySize[0]}</span>\n                    </div>\n                    <Slider\n                      value={arraySize}\n                      onValueChange={(value) => {\n                        setArraySize(value);\n                        if (!isPlaying) generateRandomArray();\n                      }}\n                      min={5}\n                      max={50}\n                      step={1}\n                      disabled={isPlaying}\n                      className=\"cursor-pointer\"\n                    />\n                  </div>\n                </div>\n\n                {/* Speed Control */}\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center gap-2 text-pink-400\">\n                    <Zap className=\"w-5 h-5\" />\n                    <h3 className=\"font-semibold\">Speed</h3>\n                  </div>\n                  <div className=\"space-y-2\">\n                    <div className=\"flex justify-between text-sm text-gray-400\">\n                      <span>Delay</span>\n                      <span className=\"text-pink-400 font-mono\">{speed[0]}ms</span>\n                    </div>\n                    <Slider\n                      value={speed}\n                      onValueChange={setSpeed}\n                      min={10}\n                      max={200}\n                      step={10}\n                      className=\"cursor-pointer\"\n                    />\n                  </div>\n                </div>\n\n                {/* Control Buttons */}\n                <div className=\"space-y-3 pt-4 border-t border-gray-700\">\n                  <Button\n                    onClick={isPlaying ? pauseVisualization : startVisualization}\n                    disabled={steps.length === 0 || (currentStep >= steps.length && !isPlaying)}\n                    className=\"w-full bg-gradient-to-r from-cyan-500 to-blue-500 hover:from-cyan-600 hover:to-blue-600 text-white shadow-[0_0_20px_rgba(0,255,255,0.5)] transition-all duration-300\"\n                  >\n                    {isPlaying ? (\n                      <>\n                        <Pause className=\"w-4 h-4 mr-2\" />\n                        Pause\n                      </>\n                    ) : (\n                      <>\n                        <Play className=\"w-4 h-4 mr-2\" />\n                        {currentStep >= steps.length ? 'Start' : 'Resume'}\n                      </>\n                    )}\n                  </Button>\n\n                  <Button\n                    onClick={resetVisualization}\n                    disabled={isPlaying}\n                    variant=\"outline\"\n                    className=\"w-full border-pink-500/50 text-pink-400 hover:bg-pink-500/20 hover:border-pink-400 shadow-[0_0_15px_rgba(255,0,102,0.3)] transition-all duration-300\"\n                  >\n                    <RotateCcw className=\"w-4 h-4 mr-2\" />\n                    Reset\n                  </Button>\n                </div>\n\n                {/* Stats Display */}\n                <div className=\"pt-4 border-t border-gray-700 space-y-2\">\n                  <div className=\"flex justify-between text-sm\">\n                    <span className=\"text-gray-400\">Progress</span>\n                    <span className=\"text-cyan-400 font-mono\">\n                      {steps.length > 0 ? Math.min(currentStep, steps.length) : 0} / {steps.length}\n                    </span>\n                  </div>\n                  <div className=\"w-full bg-gray-700 rounded-full h-2 overflow-hidden\">\n                    <motion.div\n                      className=\"h-full bg-gradient-to-r from-cyan-500 to-purple-500 shadow-[0_0_10px_rgba(0,255,255,0.8)]\"\n                      initial={{ width: 0 }}\n                      animate={{\n                        width: steps.length > 0 ? `${(Math.min(currentStep, steps.length) / steps.length) * 100}%` : '0%'\n                      }}\n                      transition={{ duration: 0.3 }}\n                    />\n                  </div>\n                </div>\n              </div>\n            </motion.div>\n            \n            <div className=\"bg-gray-800/50 backdrop-blur-lg rounded-2xl p-6 border border-cyan-500/30 shadow-lg shadow-cyan-500/20\">\n              <div className=\"space-y-6\">\n                <div>\n                  <h3 className=\"text-cyan-400 font-semibold mb-4 flex items-center gap-2\">\n                    <Zap className=\"w-5 h-5\" />\n                    Algorithm\n                  </h3>\n                  <div className=\"grid grid-cols-2 gap-2\">\n                    {mockAlgorithms.map((algo) => (\n                      <motion.button\n                        key={algo.id}\n                        onClick={() => setSelectedAlgorithm(algo.id as AlgorithmType)}\n                        className={`p-3 rounded-lg font-medium text-sm transition-all ${\n                          selectedAlgorithm === algo.id\n                            ? 'bg-cyan-500/30 text-cyan-300 border-2 border-cyan-400 shadow-lg shadow-cyan-500/50'\n                            : 'bg-gray-700/50 text-gray-300 border border-gray-600 hover:border-cyan-500/50 hover:shadow-md hover:shadow-cyan-500/30'\n                        }`}\n                        whileHover={{ scale: 1.05 }}\n                        whileTap={{ scale: 0.95 }}\n                      >\n                        <div className=\"font-semibold\">{algo.name.split(' ')[0]}</div>\n                        <div className=\"text-xs opacity-70\">{algo.complexity}</div>\n                      </motion.button>\n                    ))}\n                  </div></parameter>\n                </div>\n\n                <div>\n                  <h3 className=\"text-cyan-400 font-semibold mb-4\">Speed</h3>\n                  <div className=\"space-y-2\">\n                    <Slider\n                      value={speed}\n                      onValueChange={setSpeed}\n                      min={1}\n                      max={100}\n                      step={1}\n                      className=\"cursor-pointer [&_[role=slider]]:bg-cyan-400 [&_[role=slider]]:border-cyan-300 [&_[role=slider]]:shadow-lg [&_[role=slider]]:shadow-cyan-400/50 [&_[role=slider]]:transition-all [&_[role=slider]]:hover:shadow-cyan-400/80 [&_[role=slider]]:hover:scale-110 [&_.relative]:bg-gray-700 [&_.relative]:overflow-visible [&_.bg-primary]:bg-gradient-to-r [&_.bg-primary]:from-cyan-500 [&_.bg-primary]:to-purple-500 [&_.bg-primary]:shadow-lg [&_.bg-primary]:shadow-cyan-500/30\"\n                    />\n                    <div className=\"flex justify-between text-xs text-gray-400\">\n                      <span>Slow</span>\n                      <span className=\"text-cyan-400 font-semibold\">{speed[0]}%</span>\n                      <span>Fast</span>\n                    </div>\n                  </div>\n                </div>\n\n                <div>\n                  <h3 className=\"text-cyan-400 font-semibold mb-4\">Array Size</h3>\n                  <div className=\"space-y-3\">\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"text-sm text-gray-400\">Elements</span>\n                      <motion.span \n                        key={arraySize[0]}\n                        initial={{ scale: 1.3, color: '#00ffff' }}\n                        animate={{ scale: 1, color: '#9ca3af' }}\n                        className=\"text-sm font-mono font-bold\"\n                      >\n                        {arraySize[0]}\n                      </motion.span>\n                    </div>\n                    <Slider\n                      value={arraySize}\n                      onValueChange={setArraySize}\n                      min={5}\n                      max={50}\n                      step={1}\n                      disabled={isPlaying}\n                      className=\"[&_[role=slider]]:bg-gradient-to-r [&_[role=slider]]:from-cyan-400 [&_[role=slider]]:to-purple-500 [&_[role=slider]]:border-2 [&_[role=slider]]:border-white [&_[role=slider]]:shadow-lg [&_[role=slider]]:shadow-cyan-400/50 [&_[role=slider]]:transition-shadow hover:[&_[role=slider]]:shadow-cyan-400/80 [&_[role=slider]]:h-4 [&_[role=slider]]:w-4\"\n                    />\n                    <div className=\"flex justify-between text-xs text-gray-500\">\n                      <span>5</span>\n                      <span>50</span>\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"space-y-3 pt-4 border-t border-cyan-500/20\">\n                  <Button\n                    onClick={isPlaying ? pauseVisualization : startVisualization}\n                    disabled={array.length === 0 || (steps.length === 0 && !isPlaying)}\n                    className=\"w-full bg-gradient-to-r from-cyan-500 to-blue-500 hover:from-cyan-400 hover:to-blue-400 text-white font-semibold py-6 rounded-xl shadow-lg shadow-cyan-500/50 hover:shadow-cyan-500/70 transition-all duration-300 disabled:opacity-50 disabled:cursor-not-allowed disabled:shadow-none\"\n                  >\n                    <motion.div\n                      className=\"flex items-center justify-center gap-2\"\n                      whileHover={{ scale: 1.05 }}\n                      whileTap={{ scale: 0.95 }}\n                    >\n                      {isPlaying ? (\n                        <>\n                          <motion.div\n                            initial={{ rotate: 0 }}\n                            animate={{ rotate: 360 }}\n                            transition={{ duration: 2, repeat: Infinity, ease: \"linear\" }}\n                          >\n                            <Pause className=\"w-5 h-5\" />\n                          </motion.div>\n                          Pause\n                        </>\n                      ) : (\n                        <>\n                          <motion.div\n                            animate={{ x: [0, 3, 0] }}\n                            transition={{ duration: 1.5, repeat: Infinity }}\n                          >\n                            <Play className=\"w-5 h-5\" />\n                          </motion.div>\n                          {currentStep > 0 && currentStep < steps.length ? 'Resume' : 'Start'}\n                        </>\n                      )}\n                    </motion.div>\n                  </Button>\n\n                  <Button\n                    onClick={resetVisualization}\n                    variant=\"outline\"\n                    className=\"w-full border-2 border-purple-500/50 bg-purple-500/10 hover:bg-purple-500/20 text-purple-300 hover:text-purple-200 font-semibold py-6 rounded-xl shadow-lg shadow-purple-500/30 hover:shadow-purple-500/50 transition-all duration-300\"\n                  >\n                    <motion.div\n                      className=\"flex items-center justify-center gap-2\"\n                      whileHover={{ scale: 1.05 }}\n                      whileTap={{ scale: 0.95 }}\n                    >\n                      <motion.div\n                        whileHover={{ rotate: -180 }}\n                        transition={{ duration: 0.5 }}\n                      >\n                        <RotateCcw className=\"w-5 h-5\" />\n                      </motion.div>\n                      Reset\n                    </motion.div>\n                  </Button>\n\n                  <Button\n                    onClick={generateRandomArray}\n                    variant=\"outline\"\n                    className=\"w-full border-2 border-pink-500/50 bg-pink-500/10 hover:bg-pink-500/20 text-pink-300 hover:text-pink-200 font-semibold py-6 rounded-xl shadow-lg shadow-pink-500/30 hover:shadow-pink-500/50 transition-all duration-300\"\n                  >\n                    <motion.div\n                      className=\"flex items-center justify-center gap-2\"\n                      whileHover={{ scale: 1.05 }}\n                      whileTap={{ scale: 0.95 }}\n                    >\n                      <motion.div\n                        whileHover={{ rotate: 180, scale: 1.2 }}\n                        transition={{ duration: 0.4 }}\n                      >\n                        <BarChart3 className=\"w-5 h-5\" />\n                      </motion.div>\n                      New Array\n                    </motion.div>\n                  </Button></parameter>\n                </div>\n              </div>\n            </div>\n\n            \n<motion.div\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ delay: 0.2 }}\n              className=\"bg-gray-800/50 backdrop-blur-lg rounded-2xl p-6 border border-purple-500/30 shadow-lg shadow-purple-500/20\"\n            >\n              <div className=\"flex items-center gap-2 mb-4\">\n                <BarChart3 className=\"w-5 h-5 text-purple-400\" />\n                <h3 className=\"text-purple-400 font-semibold\">Statistics</h3>\n              </div>\n              \n              <div className=\"space-y-4\">\n                <div className=\"bg-gray-900/50 rounded-xl p-4 border border-cyan-500/20\">\n                  <div className=\"text-gray-400 text-sm mb-1\">Comparisons</div>\n                  <motion.div\n                    key={comparisons}\n                    initial={{ scale: 1.2, color: '#00ffff' }}\n                    animate={{ scale: 1, color: '#ffffff' }}\n                    className=\"text-3xl font-bold text-white\"\n                  >\n                    {comparisons}\n                  </motion.div>\n                </div>\n\n                <div className=\"bg-gray-900/50 rounded-xl p-4 border border-pink-500/20\">\n                  <div className=\"text-gray-400 text-sm mb-1\">Swaps</div>\n                  <motion.div\n                    key={swaps}\n                    initial={{ scale: 1.2, color: '#ff00ff' }}\n                    animate={{ scale: 1, color: '#ffffff' }}\n                    className=\"text-3xl font-bold text-white\"\n                  >\n                    {swaps}\n                  </motion.div>\n                </div>\n\n                <div className=\"bg-gray-900/50 rounded-xl p-4 border border-green-500/20\">\n                  <div className=\"text-gray-400 text-sm mb-1\">Progress</div>\n                  <motion.div\n                    className=\"text-3xl font-bold text-white mb-2\"\n                  >\n                    {steps.length > 0 ? Math.round((currentStep / steps.length) * 100) : 0}%\n                  </motion.div>\n                  <div className=\"w-full bg-gray-700 rounded-full h-2 overflow-hidden\">\n                    <motion.div\n                      className=\"h-full bg-gradient-to-r from-green-500 to-cyan-500 shadow-[0_0_10px_rgba(0,255,0,0.5)]\"\n                      initial={{ width: 0 }}\n                      animate={{ \n                        width: steps.length > 0 ? `${(currentStep / steps.length) * 100}%` : '0%'\n                      }}\n                      transition={{ duration: 0.3 }}\n                    />\n                  </div>\n                </div>\n\n                <div className=\"bg-gray-900/50 rounded-xl p-4 border border-yellow-500/20\">\n                  <div className=\"text-gray-400 text-sm mb-1\">Complexity</div>\n                  <div className=\"text-xl font-mono text-yellow-400\">\n                    {mockAlgorithms.find(a => a.id === selectedAlgorithm)?.complexity || 'N/A'}\n                  </div>\n                </div>\n\n                <div className=\"bg-gray-900/50 rounded-xl p-4 border border-purple-500/20\">\n                  <div className=\"text-gray-400 text-sm mb-1\">Array Size</div>\n                  <div className=\"text-2xl font-bold text-white\">\n                    {array.length}\n                  </div>\n                </div>\n              </div>\n            </motion.div>\n          </div>\n\n          <div className=\"lg:col-span-3\">\n            <div className=\"bg-gray-800/50 backdrop-blur-lg rounded-2xl p-8 border border-purple-500/30 shadow-lg shadow-purple-500/20 min-h-[600px]\">\n                            {array.length === 0 ? (\n                <motion.div\n                  initial={{ opacity: 0, scale: 0.8 }}\n                  animate={{ opacity: 1, scale: 1 }}\n                  className=\"flex flex-col items-center justify-center h-full space-y-6\"\n                >\n                  <motion.div\n                    animate={{\n                      rotate: [0, 360],\n                      scale: [1, 1.2, 1]\n                    }}\n                    transition={{\n                      duration: 3,\n                      repeat: Infinity,\n                      ease: \"easeInOut\"\n                    }}\n                  >\n                    <BarChart3 className=\"w-24 h-24 text-cyan-400 opacity-50\" />\n                  </motion.div>\n                  <div className=\"text-center space-y-2\">\n                    <h3 className=\"text-2xl font-semibold text-gray-400\">\n                      No Array Generated\n                    </h3>\n                    <p className=\"text-gray-500\">\n                      Click \"Generate Array\" to start visualizing\n                    </p>\n                  </div>\n                  <Button\n                    onClick={generateRandomArray}\n                    className=\"bg-gradient-to-r from-cyan-500 to-purple-500 hover:from-cyan-400 hover:to-purple-400 text-white font-semibold px-8 py-6 text-lg rounded-xl shadow-lg shadow-cyan-500/50 hover:shadow-cyan-500/80 transition-all\"\n                  >\n                    <Zap className=\"w-5 h-5 mr-2\" />\n                    Generate Array\n                  </Button>\n                </motion.div>\n              ) : (\n                <div className=\"h-full w-full flex flex-col\">\n                  <div className=\"flex-1 flex items-end justify-center gap-1 px-4\">\n                    {(currentStep > 0 && currentStep <= steps.length\n                      ? steps[currentStep - 1].array\n                      : array\n                    ).map((element, index) => {\n                      const maxValue = Math.max(...array.map(el => el.value));\n                      const heightPercentage = (element.value / maxValue) * 100;\n                      \n                      let barColor = NEON_COLORS[index % NEON_COLORS.length];\n                      let glowIntensity = 0.3;\n                      let scale = 1;\n                      \n                      if (element.isComparing) {\n                        barColor = '#ffff00'; // Yellow for comparing\n                        glowIntensity = 0.8;\n                        scale = 1.05;\n                      } else if (element.isSwapping) {\n                        barColor = '#ff0066'; // Pink for swapping\n                        glowIntensity = 1;\n                        scale = 1.1;\n                      } else if (element.isSorted) {\n                        barColor = '#00ff00'; // Green for sorted\n                        glowIntensity = 0.5;\n                      }\n                      \n                      return (\n                        <motion.div\n                          key={element.id}\n                          className=\"relative flex-1 min-w-[4px] max-w-[60px] rounded-t-lg\"\n                          initial={{ height: 0, opacity: 0 }}\n                          animate={{\n                            height: `${heightPercentage}%`,\n                            opacity: 1,\n                            scale: scale,\n                            boxShadow: [\n                              `0 0 ${10 * glowIntensity}px ${barColor}`,\n                              `0 0 ${20 * glowIntensity}px ${barColor}`,\n                              `0 0 ${10 * glowIntensity}px ${barColor}`\n                            ]\n                          }}\n                          transition={{\n                            height: { duration: 0.5, ease: \"easeOut\" },\n                            scale: { duration: 0.3 },\n                            boxShadow: { duration: 0.6, repeat: element.isSwapping ? Infinity : 0 },\n                            opacity: { duration: 0.3 }\n                          }}\n                          style={{\n                            background: `linear-gradient(to top, ${barColor}, ${barColor}dd)`,\n                            border: `1px solid ${barColor}`,\n                          }}\n                        >\n                          {/* Glow effect overlay */}\n                          <motion.div\n                            className=\"absolute inset-0 rounded-t-lg\"\n                            animate={{\n                              opacity: element.isSwapping ? [0.3, 0.7, 0.3] : element.isComparing ? [0.2, 0.5, 0.2] : 0.2\n                            }}\n                            transition={{\n                              duration: 0.8,\n                              repeat: (element.isSwapping || element.isComparing) ? Infinity : 0\n                            }}\n                            style={{\n                              background: `radial-gradient(circle at 50% 0%, ${barColor}88, transparent)`,\n                            }}\n                          />\n                          \n                          {/* Trail effect for swapping */}\n                          {element.isSwapping && (\n                            <motion.div\n                              className=\"absolute inset-0 rounded-t-lg\"\n                              initial={{ opacity: 0, y: -20 }}\n                              animate={{\n                                opacity: [0, 0.6, 0],\n                                y: [-20, 0, 20]\n                              }}\n                              transition={{\n                                duration: 0.6,\n                                repeat: Infinity\n                              }}\n                              style={{\n                                background: `linear-gradient(to bottom, ${barColor}, transparent)`,\n                                filter: 'blur(8px)'\n                              }}\n                            />\n                          )}\n                          \n                          {/* Value label */}\n                          {array.length <= 30 && (\n                            <motion.div\n                              className=\"absolute -top-8 left-1/2 transform -translate-x-1/2 text-xs font-mono font-bold whitespace-nowrap\"\n                              initial={{ opacity: 0 }}\n                              animate={{\n                                opacity: element.isComparing || element.isSwapping ? 1 : 0.6,\n                                scale: element.isComparing || element.isSwapping ? 1.2 : 1,\n                                color: barColor\n                              }}\n                              transition={{ duration: 0.3 }}\n                            >\n                              {element.value}\n                            </motion.div>\n                          )}\n                          \n                          {/* Particle effect for sorted elements */}\n                          {element.isSorted && (\n                            <>\n                              {[...Array(3)].map((_, i) => (\n                                <motion.div\n                                  key={i}\n                                  className=\"absolute w-1 h-1 rounded-full\"\n                                  initial={{\n                                    top: '0%',\n                                    left: '50%',\n                                    opacity: 1,\n                                    backgroundColor: barColor\n                                  }}\n                                  animate={{\n                                    top: '-50%',\n                                    left: `${50 + (i - 1) * 30}%`,\n                                    opacity: 0,\n                                    scale: [1, 1.5, 0]\n                                  }}\n                                  transition={{\n                                    duration: 1,\n                                    delay: i * 0.1,\n                                    repeat: Infinity,\n                                    repeatDelay: 0.5\n                                  }}\n                                />\n                              ))}\n                            </>\n                          )}\n                        </motion.div>\n                      );\n                    })}\n                  </div>\n                  \n                  {/* Progress indicator */}\n                  {steps.length > 0 && (\n                    <motion.div\n                      initial={{ opacity: 0, y: 20 }}\n                      animate={{ opacity: 1, y: 0 }}\n                      className=\"mt-6 px-4\"\n                    >\n                      <div className=\"flex items-center justify-between mb-2\">\n                        <span className=\"text-sm text-gray-400\">Progress</span>\n                        <span className=\"text-sm font-mono text-cyan-400\">\n                          {currentStep} / {steps.length} steps\n                        </span>\n                      </div>\n                      <div className=\"relative h-2 bg-gray-700 rounded-full overflow-hidden\">\n                        <motion.div\n                          className=\"absolute inset-y-0 left-0 bg-gradient-to-r from-cyan-500 to-purple-500 rounded-full\"\n                          initial={{ width: 0 }}\n                          animate={{\n                            width: `${(currentStep / steps.length) * 100}%`\n                          }}\n                          transition={{ duration: 0.3 }}\n                          style={{\n                            boxShadow: '0 0 10px rgba(0, 255, 255, 0.5)'\n                          }}\n                        />\n                      </div>\n                    </motion.div>\n                  )}\n                </div>\n              )}\n              \n              <div className=\"h-full flex items-end justify-center gap-1\">\n                {(currentStep > 0 && currentStep <= steps.length ? steps[currentStep - 1].array : array).map((element, index) => {\n                  const isComparing = element.isComparing;\n                  const isSwapping = element.isSwapping;\n                  const isSorted = element.isSorted;\n                  const maxValue = 105;\n                  const heightPercentage = (element.value / maxValue) * 100;\n                  \n                  // Assign neon color based on index\n                  const neonColor = NEON_COLORS[index % NEON_COLORS.length];\n                  \n                  return (\n                    <motion.div\n                      key={element.id}\n                      className=\"relative flex-1 min-w-[8px] max-w-[60px] group\"\n                      initial={{ opacity: 0, y: 50 }}\n                      animate={{ \n                        opacity: 1, \n                        y: 0,\n                        scale: isSwapping ? [1, 1.1, 1] : 1\n                      }}\n                      transition={{ \n                        duration: 0.3,\n                        scale: { duration: 0.4, repeat: isSwapping ? 2 : 0 }\n                      }}\n                    >\n                      {/* Trail effect for swapping */}\n                      {isSwapping && (\n                        <>\n                          <motion.div\n                            className=\"absolute inset-0 rounded-t-lg\"\n                            style={{\n                              height: `${heightPercentage}%`,\n                              background: neonColor,\n                              filter: 'blur(20px)',\n                              opacity: 0.6\n                            }}\n                            animate={{\n                              opacity: [0.6, 0.3, 0.6],\n                              scale: [1, 1.2, 1]\n                            }}\n                            transition={{\n                              duration: 0.5,\n                              repeat: Infinity\n                            }}\n                          />\n                          <motion.div\n                            className=\"absolute -top-2 left-1/2 -translate-x-1/2\"\n                            initial={{ opacity: 0, y: 0 }}\n                            animate={{ \n                              opacity: [0, 1, 0],\n                              y: [-20, -40, -60]\n                            }}\n                            transition={{\n                              duration: 0.8,\n                              repeat: Infinity\n                            }}\n                          >\n                            <div \n                              className=\"w-2 h-2 rounded-full\"\n                              style={{\n                                background: neonColor,\n                                boxShadow: `0 0 10px ${neonColor}, 0 0 20px ${neonColor}`\n                              }}\n                            />\n                          </motion.div>\n                        </>\n                      )}\n                      \n                      {/* Main bar */}\n                      <motion.div\n                        className=\"relative w-full rounded-t-lg transition-all duration-300\"\n                        style={{\n                          height: `${heightPercentage}%`,\n                          background: isSorted \n                            ? `linear-gradient(to top, #10b981, #34d399)`\n                            : isComparing\n                            ? `linear-gradient(to top, #ef4444, #f87171)`\n                            : isSwapping\n                            ? `linear-gradient(to top, #f59e0b, #fbbf24)`\n                            : `linear-gradient(to top, ${neonColor}, ${neonColor}dd)`,\n                          boxShadow: isSorted\n                            ? '0 0 20px rgba(16, 185, 129, 0.8), 0 0 40px rgba(16, 185, 129, 0.4), inset 0 0 20px rgba(255, 255, 255, 0.2)'\n                            : isComparing\n                            ? '0 0 30px rgba(239, 68, 68, 0.9), 0 0 60px rgba(239, 68, 68, 0.5), inset 0 0 20px rgba(255, 255, 255, 0.3)'\n                            : isSwapping\n                            ? '0 0 30px rgba(245, 158, 11, 0.9), 0 0 60px rgba(245, 158, 11, 0.5), inset 0 0 20px rgba(255, 255, 255, 0.3)'\n                            : `0 0 15px ${neonColor}aa, 0 0 30px ${neonColor}66, inset 0 0 15px rgba(255, 255, 255, 0.1)`,\n                          border: isSorted || isComparing || isSwapping ? '2px solid rgba(255, 255, 255, 0.5)' : '1px solid rgba(255, 255, 255, 0.2)'\n                        }}\n                        animate={{\n                          height: `${heightPercentage}%`,\n                          boxShadow: isComparing\n                            ? [\n                                '0 0 30px rgba(239, 68, 68, 0.9), 0 0 60px rgba(239, 68, 68, 0.5)',\n                                '0 0 40px rgba(239, 68, 68, 1), 0 0 80px rgba(239, 68, 68, 0.7)',\n                                '0 0 30px rgba(239, 68, 68, 0.9), 0 0 60px rgba(239, 68, 68, 0.5)'\n                              ]\n                            : isSwapping\n                            ? [\n                                '0 0 30px rgba(245, 158, 11, 0.9), 0 0 60px rgba(245, 158, 11, 0.5)',\n                                '0 0 40px rgba(245, 158, 11, 1), 0 0 80px rgba(245, 158, 11, 0.7)',\n                                '0 0 30px rgba(245, 158, 11, 0.9), 0 0 60px rgba(245, 158, 11, 0.5)'\n                              ]\n                            : undefined\n                        }}\n                        transition={{\n                          height: { duration: 0.5, ease: 'easeInOut' },\n                          boxShadow: { duration: 0.6, repeat: (isComparing || isSwapping) ? Infinity : 0 }\n                        }}\n                      >\n                        {/* Inner glow effect */}\n                        <motion.div\n                          className=\"absolute inset-0 rounded-t-lg\"\n                          style={{\n                            background: `linear-gradient(to top, transparent, rgba(255, 255, 255, 0.3))`,\n                            opacity: 0.5\n                          }}\n                          animate={{\n                            opacity: isComparing || isSwapping ? [0.5, 0.8, 0.5] : 0.5\n                          }}\n                          transition={{\n                            duration: 0.8,\n                            repeat: (isComparing || isSwapping) ? Infinity : 0\n                          }}\n                        />\n                        \n                        {/* Shimmer effect */}\n                        <motion.div\n                          className=\"absolute inset-0 rounded-t-lg overflow-hidden\"\n                          initial={{ opacity: 0 }}\n                          animate={{ opacity: 1 }}\n                        >\n                          <motion.div\n                            className=\"absolute inset-0 bg-gradient-to-r from-transparent via-white to-transparent opacity-20\"\n                            animate={{\n                              x: ['-100%', '200%']\n                            }}\n                            transition={{\n                              duration: 2,\n                              repeat: Infinity,\n                              repeatDelay: 1,\n                              ease: 'easeInOut'\n                            }}\n                          />\n                        </motion.div>\n                      </motion.div>\n                      \n                      {/* Value label */}\n                      <motion.div\n                        className=\"absolute -bottom-6 left-1/2 -translate-x-1/2 text-xs font-mono font-bold whitespace-nowrap\"\n                        style={{\n                          color: isSorted ? '#10b981' : isComparing ? '#ef4444' : isSwapping ? '#f59e0b' : neonColor,\n                          textShadow: `0 0 10px ${isSorted ? '#10b981' : isComparing ? '#ef4444' : isSwapping ? '#f59e0b' : neonColor}`,\n                          opacity: array.length > 30 ? 0 : 1\n                        }}\n                        animate={{\n                          scale: isComparing || isSwapping ? [1, 1.2, 1] : 1,\n                          y: isSwapping ? [0, -5, 0] : 0\n                        }}\n                        transition={{\n                          duration: 0.4,\n                          repeat: (isComparing || isSwapping) ? Infinity : 0\n                        }}\n                      >\n                        {element.value}\n                      </motion.div>\n                      \n                      {/* Hover tooltip for larger arrays */}\n                      {array.length > 30 && (\n                        <div className=\"absolute -top-8 left-1/2 -translate-x-1/2 opacity-0 group-hover:opacity-100 transition-opacity duration-200 pointer-events-none\">\n                          <div \n                            className=\"px-2 py-1 rounded text-xs font-mono font-bold whitespace-nowrap\"\n                            style={{\n                              background: 'rgba(0, 0, 0, 0.8)',\n                              color: neonColor,\n                              border: `1px solid ${neonColor}`,\n                              boxShadow: `0 0 10px ${neonColor}66`\n                            }}\n                          >\n                            {element.value}\n                          </div>\n                        </div>\n                      )}\n                      \n                      {/* Particle effects for swapping */}\n                      {isSwapping && (\n                        <div className=\"absolute inset-0 pointer-events-none\">\n                          {[...Array(3)].map((_, i) => (\n                            <motion.div\n                              key={i}\n                              className=\"absolute w-1 h-1 rounded-full\"\n                              style={{\n                                background: neonColor,\n                                boxShadow: `0 0 5px ${neonColor}`,\n                                left: '50%',\n                                top: '0%'\n                              }}\n                              animate={{\n                                x: [0, (Math.random() - 0.5) * 40],\n                                y: [0, -30 - Math.random() * 20],\n                                opacity: [1, 0],\n                                scale: [1, 0]\n                              }}\n                              transition={{\n                                duration: 0.8,\n                                delay: i * 0.1,\n                                repeat: Infinity,\n                                repeatDelay: 0.5\n                              }}\n                            />\n                          ))}\n                        </div>\n                      )}\n                    </motion.div>\n                  );\n                })}\n              </div>\n            </div>\n\n                        <motion.div\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ delay: 0.4, duration: 0.6 }}\n              className=\"mt-6 bg-gray-800/50 backdrop-blur-lg rounded-xl p-6 border border-purple-500/30 shadow-lg shadow-purple-500/10\"\n            >\n              <h3 className=\"text-purple-400 font-semibold mb-4 flex items-center gap-2\">\n                <BarChart3 className=\"w-5 h-5\" />\n                Legend\n              </h3>\n              <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n                <motion.div\n                  className=\"flex items-center gap-3 p-3 bg-gray-700/30 rounded-lg border border-gray-600/50\"\n                  whileHover={{ scale: 1.05, borderColor: 'rgba(0, 255, 255, 0.5)' }}\n                >\n                  <motion.div\n                    className=\"w-4 h-12 bg-gradient-to-t from-cyan-400 to-cyan-300 rounded\"\n                    animate={{\n                      boxShadow: [\n                        '0 0 10px rgba(0, 255, 255, 0.5)',\n                        '0 0 20px rgba(0, 255, 255, 0.8)',\n                        '0 0 10px rgba(0, 255, 255, 0.5)'\n                      ]\n                    }}\n                    transition={{ duration: 1.5, repeat: Infinity }}\n                  />\n                  <div>\n                    <div className=\"text-sm font-medium text-cyan-300\">Default</div>\n                    <div className=\"text-xs text-gray-400\">Unsorted</div>\n                  </div>\n                </motion.div>\n\n                <motion.div\n                  className=\"flex items-center gap-3 p-3 bg-gray-700/30 rounded-lg border border-gray-600/50\"\n                  whileHover={{ scale: 1.05, borderColor: 'rgba(255, 255, 0, 0.5)' }}\n                >\n                  <motion.div\n                    className=\"w-4 h-12 bg-gradient-to-t from-yellow-400 to-yellow-300 rounded\"\n                    animate={{\n                      boxShadow: [\n                        '0 0 15px rgba(255, 255, 0, 0.6)',\n                        '0 0 25px rgba(255, 255, 0, 0.9)',\n                        '0 0 15px rgba(255, 255, 0, 0.6)'\n                      ],\n                      scale: [1, 1.1, 1]\n                    }}\n                    transition={{ duration: 1, repeat: Infinity }}\n                  />\n                  <div>\n                    <div className=\"text-sm font-medium text-yellow-300\">Comparing</div>\n                    <div className=\"text-xs text-gray-400\">Active</div>\n                  </div>\n                </motion.div>\n\n                <motion.div\n                  className=\"flex items-center gap-3 p-3 bg-gray-700/30 rounded-lg border border-gray-600/50\"\n                  whileHover={{ scale: 1.05, borderColor: 'rgba(255, 0, 255, 0.5)' }}\n                >\n                  <motion.div\n                    className=\"w-4 h-12 bg-gradient-to-t from-pink-500 to-pink-400 rounded\"\n                    animate={{\n                      boxShadow: [\n                        '0 0 20px rgba(255, 0, 255, 0.7)',\n                        '0 0 30px rgba(255, 0, 255, 1)',\n                        '0 0 20px rgba(255, 0, 255, 0.7)'\n                      ],\n                      x: [-2, 2, -2]\n                    }}\n                    transition={{ duration: 0.8, repeat: Infinity }}\n                  />\n                  <div>\n                    <div className=\"text-sm font-medium text-pink-300\">Swapping</div>\n                    <div className=\"text-xs text-gray-400\">Moving</div>\n                  </div>\n                </motion.div>\n\n                <motion.div\n                  className=\"flex items-center gap-3 p-3 bg-gray-700/30 rounded-lg border border-gray-600/50\"\n                  whileHover={{ scale: 1.05, borderColor: 'rgba(0, 255, 0, 0.5)' }}\n                >\n                  <motion.div\n                    className=\"w-4 h-12 bg-gradient-to-t from-green-400 to-green-300 rounded\"\n                    animate={{\n                      boxShadow: [\n                        '0 0 15px rgba(0, 255, 0, 0.6)',\n                        '0 0 25px rgba(0, 255, 0, 0.9)',\n                        '0 0 15px rgba(0, 255, 0, 0.6)'\n                      ]\n                    }}\n                    transition={{ duration: 2, repeat: Infinity }}\n                  />\n                  <div>\n                    <div className=\"text-sm font-medium text-green-300\">Sorted</div>\n                    <div className=\"text-xs text-gray-400\">Complete</div>\n                  </div>\n                </motion.div>\n              </div>\n            </motion.div>\n          </div>\n        </div>\n\n        \n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ delay: 0.4, duration: 0.6 }}\n          className=\"bg-gray-800/50 backdrop-blur-lg rounded-2xl p-6 border border-cyan-500/30 shadow-lg shadow-cyan-500/20\"\n        >\n          <div className=\"space-y-4\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center gap-3\">\n                <motion.div\n                  animate={{\n                    rotate: isPlaying ? 360 : 0,\n                    scale: isPlaying ? [1, 1.2, 1] : 1\n                  }}\n                  transition={{\n                    rotate: { duration: 2, repeat: Infinity, ease: \"linear\" },\n                    scale: { duration: 0.5, repeat: Infinity }\n                  }}\n                >\n                  <Zap className=\"w-5 h-5 text-cyan-400\" />\n                </motion.div>\n                <h3 className=\"text-cyan-400 font-semibold text-lg\">Timeline Control</h3>\n              </div>\n              <div className=\"flex items-center gap-2 px-4 py-2 bg-purple-500/20 rounded-full border border-purple-400/50\">\n                <span className=\"text-sm text-purple-300 font-mono\">\n                  Step {currentStep} / {steps.length}\n                </span>\n              </div>\n            </div>\n\n            {/* Progress Bar */}\n            <div className=\"relative\">\n              <div className=\"h-3 bg-gray-700/50 rounded-full overflow-hidden border border-gray-600\">\n                <motion.div\n                  className=\"h-full bg-gradient-to-r from-cyan-500 via-purple-500 to-pink-500 relative\"\n                  initial={{ width: 0 }}\n                  animate={{\n                    width: steps.length > 0 ? `${(currentStep / steps.length) * 100}%` : '0%'\n                  }}\n                  transition={{ duration: 0.3, ease: \"easeOut\" }}\n                >\n                  <motion.div\n                    className=\"absolute inset-0 bg-gradient-to-r from-transparent via-white/30 to-transparent\"\n                    animate={{\n                      x: ['-100%', '200%']\n                    }}\n                    transition={{\n                      duration: 1.5,\n                      repeat: Infinity,\n                      ease: \"linear\"\n                    }}\n                  />\n                </motion.div>\n              </div>\n              \n              {/* Progress Indicator Dot */}\n              {steps.length > 0 && (\n                <motion.div\n                  className=\"absolute top-1/2 -translate-y-1/2 w-6 h-6 bg-cyan-400 rounded-full border-4 border-gray-900 shadow-lg shadow-cyan-400/50\"\n                  animate={{\n                    left: `${(currentStep / steps.length) * 100}%`,\n                    boxShadow: [\n                      '0 0 20px rgba(0, 255, 255, 0.5)',\n                      '0 0 40px rgba(0, 255, 255, 0.8)',\n                      '0 0 20px rgba(0, 255, 255, 0.5)'\n                    ]\n                  }}\n                  transition={{\n                    left: { duration: 0.3, ease: \"easeOut\" },\n                    boxShadow: { duration: 1, repeat: Infinity }\n                  }}\n                  style={{ marginLeft: '-12px' }}\n                />\n              )}\n            </div>\n\n            {/* Timeline Scrubber */}\n            <div className=\"relative pt-2\">\n              <input\n                type=\"range\"\n                min={0}\n                max={steps.length}\n                value={currentStep}\n                onChange={(e) => {\n                  const newStep = parseInt(e.target.value);\n                  setCurrentStep(newStep);\n                  setIsPlaying(false);\n                }}\n                disabled={steps.length === 0}\n                className=\"w-full h-2 bg-transparent appearance-none cursor-pointer disabled:cursor-not-allowed disabled:opacity-50\n                  [&::-webkit-slider-track]:h-2 [&::-webkit-slider-track]:bg-gray-700/50 [&::-webkit-slider-track]:rounded-full [&::-webkit-slider-track]:border [&::-webkit-slider-track]:border-gray-600\n                  [&::-webkit-slider-thumb]:appearance-none [&::-webkit-slider-thumb]:w-5 [&::-webkit-slider-thumb]:h-5 [&::-webkit-slider-thumb]:bg-gradient-to-br [&::-webkit-slider-thumb]:from-cyan-400 [&::-webkit-slider-thumb]:to-purple-500 [&::-webkit-slider-thumb]:rounded-full [&::-webkit-slider-thumb]:border-2 [&::-webkit-slider-thumb]:border-white [&::-webkit-slider-thumb]:shadow-lg [&::-webkit-slider-thumb]:shadow-cyan-400/50 [&::-webkit-slider-thumb]:cursor-grab [&::-webkit-slider-thumb]:active:cursor-grabbing [&::-webkit-slider-thumb]:hover:scale-110 [&::-webkit-slider-thumb]:transition-transform\n                  [&::-moz-range-track]:h-2 [&::-moz-range-track]:bg-gray-700/50 [&::-moz-range-track]:rounded-full [&::-moz-range-track]:border [&::-moz-range-track]:border-gray-600\n                  [&::-moz-range-thumb]:w-5 [&::-moz-range-thumb]:h-5 [&::-moz-range-thumb]:bg-gradient-to-br [&::-moz-range-thumb]:from-cyan-400 [&::-moz-range-thumb]:to-purple-500 [&::-moz-range-thumb]:rounded-full [&::-moz-range-thumb]:border-2 [&::-moz-range-thumb]:border-white [&::-moz-range-thumb]:shadow-lg [&::-moz-range-thumb]:cursor-grab [&::-moz-range-thumb]:active:cursor-grabbing\"\n              />\n              \n              {/* Step Markers */}\n              <div className=\"absolute top-0 left-0 right-0 flex justify-between pointer-events-none\">\n                {steps.length > 0 && Array.from({ length: Math.min(steps.length + 1, 21) }).map((_, i) => {\n                  const stepIndex = Math.floor((i / 20) * steps.length);\n                  const isActive = currentStep >= stepIndex;\n                  return (\n                    <motion.div\n                      key={i}\n                      className={`w-1 h-4 rounded-full transition-colors duration-300 ${\n                        isActive ? 'bg-cyan-400 shadow-lg shadow-cyan-400/50' : 'bg-gray-600'\n                      }`}\n                      animate={isActive ? {\n                        boxShadow: [\n                          '0 0 5px rgba(0, 255, 255, 0.3)',\n                          '0 0 10px rgba(0, 255, 255, 0.6)',\n                          '0 0 5px rgba(0, 255, 255, 0.3)'\n                        ]\n                      } : {}}\n                      transition={{ duration: 1, repeat: Infinity }}\n                    />\n                  );\n                })}\n              </div>\n            </div>\n\n            {/* Control Buttons */}\n            <div className=\"flex items-center justify-center gap-3 pt-2\">\n              <motion.div whileHover={{ scale: 1.05 }} whileTap={{ scale: 0.95 }}>\n                <Button\n                  onClick={() => {\n                    if (currentStep > 0) {\n                      setCurrentStep(prev => prev - 1);\n                      setIsPlaying(false);\n                    }\n                  }}\n                  disabled={currentStep === 0 || steps.length === 0}\n                  variant=\"outline\"\n                  size=\"sm\"\n                  className=\"bg-gray-700/50 border-cyan-500/50 text-cyan-400 hover:bg-cyan-500/20 hover:border-cyan-400 hover:shadow-lg hover:shadow-cyan-500/30 disabled:opacity-30 disabled:cursor-not-allowed transition-all\"\n                >\n                  <RotateCcw className=\"w-4 h-4 mr-2\" />\n                  Previous\n                </Button>\n              </motion.div>\n\n              <motion.div whileHover={{ scale: 1.05 }} whileTap={{ scale: 0.95 }}>\n                <Button\n                  onClick={isPlaying ? pauseVisualization : startVisualization}\n                  disabled={steps.length === 0}\n                  size=\"lg\"\n                  className=\"bg-gradient-to-r from-cyan-500 to-purple-500 hover:from-cyan-400 hover:to-purple-400 text-white font-semibold shadow-lg shadow-cyan-500/50 hover:shadow-cyan-500/70 disabled:opacity-30 disabled:cursor-not-allowed transition-all px-8\"\n                >\n                  {isPlaying ? (\n                    <>\n                      <Pause className=\"w-5 h-5 mr-2\" />\n                      Pause\n                    </>\n                  ) : (\n                    <>\n                      <Play className=\"w-5 h-5 mr-2\" />\n                      {currentStep >= steps.length ? 'Replay' : 'Play'}\n                    </>\n                  )}\n                </Button>\n              </motion.div>\n\n              <motion.div whileHover={{ scale: 1.05 }} whileTap={{ scale: 0.95 }}>\n                <Button\n                  onClick={() => {\n                    if (currentStep < steps.length) {\n                      setCurrentStep(prev => prev + 1);\n                      setIsPlaying(false);\n                    }\n                  }}\n                  disabled={currentStep >= steps.length || steps.length === 0}\n                  variant=\"outline\"\n                  size=\"sm\"\n                  className=\"bg-gray-700/50 border-purple-500/50 text-purple-400 hover:bg-purple-500/20 hover:border-purple-400 hover:shadow-lg hover:shadow-purple-500/30 disabled:opacity-30 disabled:cursor-not-allowed transition-all\"\n                >\n                  Next\n                  <Play className=\"w-4 h-4 ml-2 rotate-0\" />\n                </Button>\n              </motion.div>\n            </div>\n\n            {/* Quick Actions */}\n            <div className=\"flex items-center justify-between pt-2 border-t border-gray-700\">\n              <motion.button\n                onClick={() => {\n                  setCurrentStep(0);\n                  setIsPlaying(false);\n                }}\n                disabled={steps.length === 0}\n                whileHover={{ scale: 1.05 }}\n                whileTap={{ scale: 0.95 }}\n                className=\"text-sm text-gray-400 hover:text-cyan-400 disabled:opacity-30 disabled:cursor-not-allowed transition-colors flex items-center gap-2\"\n              >\n                <RotateCcw className=\"w-4 h-4\" />\n                Reset to Start\n              </motion.button>\n\n              <motion.button\n                onClick={resetVisualization}\n                whileHover={{ scale: 1.05 }}\n                whileTap={{ scale: 0.95 }}\n                className=\"text-sm text-gray-400 hover:text-pink-400 transition-colors flex items-center gap-2\"\n              >\n                <Zap className=\"w-4 h-4\" />\n                New Array\n              </motion.button>\n            </div>\n          </div>\n        </motion.div>\n      </div>\n    </div>\n  );\n}\n",
    "error": null,
    "elapsed_time": 99.39150643348694,
    "success": true
  }
}