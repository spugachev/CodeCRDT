{
  "prompt_id": "algorithm_visualizer",
  "prompt_name": "Algorithm Visualizer",
  "mode": "parallel",
  "run_number": 31,
  "timestamp": "2025-10-14T00:01:04.549157",
  "response_time": 104.39135813713074,
  "total_tokens": null,
  "response_content": "import { useState, useCallback } from 'react';import { useEffect, useRef } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Slider } from '@/components/ui/slider';\nimport { Play, Pause, RotateCcw, Zap, BarChart3 } from 'lucide-react';\nimport { TrendingUp, Repeat, Activity } from 'lucide-react';\nimport { motion } from 'framer-motion';\n\ninterface ArrayElement {\n  value: number;\n  id: string;\n  isComparing?: boolean;\n  isSwapping?: boolean;\n  isSorted?: boolean;\n}\n\ninterface AlgorithmStep {\n  array: ArrayElement[];\n  comparingIndices: number[];\n  swappingIndices: number[];\n  sortedIndices: number[];\n}\n\ntype AlgorithmType = 'bubble' | 'quick' | 'merge' | 'insertion';\n\nconst NEON_COLORS = [\n  '#00ffff',\n  '#ff00ff', \n  '#00ff00',\n  '#ffff00',\n  '#ff0066',\n  '#00ffaa'\n];\n\nconst mockAlgorithms = [\n  { id: 'bubble', name: 'Bubble Sort', complexity: 'O(n\u00b2)' },\n  { id: 'quick', name: 'Quick Sort', complexity: 'O(n log n)' },\n  { id: 'merge', name: 'Merge Sort', complexity: 'O(n log n)' },\n  { id: 'insertion', name: 'Insertion Sort', complexity: 'O(n\u00b2)' }\n];\n\nexport default function AlgorithmVisualizer() {\n  const [array, setArray] = useState<ArrayElement[]>([]);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [speed, setSpeed] = useState([50]);\n  const [arraySize, setArraySize] = useState([20]);\n  const [selectedAlgorithm, setSelectedAlgorithm] = useState<AlgorithmType>('bubble');\n  const [currentStep, setCurrentStep] = useState(0);\n  const [steps, setSteps] = useState<AlgorithmStep[]>([]);\n  const [comparisons, setComparisons] = useState(0);\n  const [swaps, setSwaps] = useState(0);\n\n  const generateRandomArray = useCallback(() => {\n    const newArray: ArrayElement[] = Array.from({ length: arraySize[0] }, (_, index) => ({\n      value: Math.floor(Math.random() * 100) + 1,\n      id: `element-${Date.now()}-${index}`,\n      isComparing: false,\n      isSwapping: false,\n      isSorted: false\n    }));\n    setArray(newArray);\n    setSteps([]);\n    setCurrentStep(0);\n    setIsPlaying(false);\n  }, [arraySize]);\n\n  const resetVisualization = useCallback(() => {\n\n    setIsPlaying(false);\n    setCurrentStep(0);\n    setSteps([]);\n    generateRandomArray();  }, [generateRandomArray]);\n\n  // Animation control using useEffect\n  const animationRef = useRef<NodeJS.Timeout | null>(null);\n\n  useEffect(() => {\n    if (isPlaying && currentStep < steps.length) {\n      const delay = 1000 - (speed[0] * 9.5); // Convert speed slider to delay (50ms to 525ms)\n      animationRef.current = setTimeout(() => {\n        setCurrentStep(prev => prev + 1);\n      }, delay);\n    } else if (currentStep >= steps.length && steps.length > 0) {\n      setIsPlaying(false);\n    }\n\n    return () => {\n      if (animationRef.current) {\n        clearTimeout(animationRef.current);\n      }\n    };\n  }, [isPlaying, currentStep, steps.length, speed]);\n\n  // Update array display based on current step\n  useEffect(() => {\n    if (steps.length > 0 && currentStep < steps.length) {\n      setArray(steps[currentStep].array);\n    }\n  }, [currentStep, steps]);\n\n  const startVisualization = useCallback(() => {\n    if (steps.length === 0) return;\n    setIsPlaying(true);\n  }, [steps, speed, currentStep]);\n\n  const pauseVisualization = useCallback(() => {\n\n    setIsPlaying(false);\n  \n  }, []);\n\n  const generateSortingSteps = useCallback((algorithm: AlgorithmType) => {\n    if (array.length === 0) return;\n\n    const newSteps: AlgorithmStep[] = [];\n    const arr = [...array];\n\n    const addStep = (\n      comparingIndices: number[] = [],\n      swappingIndices: number[] = [],\n      sortedIndices: number[] = []\n    ) => {\n      newSteps.push({\n        array: arr.map((el, idx) => ({\n          ...el,\n          isComparing: comparingIndices.includes(idx),\n          isSwapping: swappingIndices.includes(idx),\n          isSorted: sortedIndices.includes(idx)\n        })),\n        comparingIndices,\n        swappingIndices,\n        sortedIndices\n      });\n    };\n\n    const swap = (i: number, j: number) => {\n      [arr[i], arr[j]] = [arr[j], arr[i]];\n    };\n\n    switch (algorithm) {\n      case 'bubble': {\n        const sorted: number[] = [];\n        for (let i = 0; i < arr.length - 1; i++) {\n          for (let j = 0; j < arr.length - i - 1; j++) {\n            addStep([j, j + 1], [], sorted);\n            if (arr[j].value > arr[j + 1].value) {\n              addStep([j, j + 1], [j, j + 1], sorted);\n              swap(j, j + 1);\n              addStep([], [], sorted);\n            }\n          }\n          sorted.push(arr.length - i - 1);\n          addStep([], [], sorted);\n        }\n        sorted.push(0);\n        addStep([], [], sorted);\n        break;\n      }\n\n      case 'insertion': {\n        const sorted: number[] = [0];\n        addStep([], [], sorted);\n        for (let i = 1; i < arr.length; i++) {\n          let j = i;\n          addStep([j, j - 1], [], sorted);\n          while (j > 0 && arr[j].value < arr[j - 1].value) {\n            addStep([j, j - 1], [j, j - 1], sorted);\n            swap(j, j - 1);\n            j--;\n            addStep([j, j + 1], [], sorted);\n          }\n          sorted.push(i);\n          addStep([], [], sorted);\n        }\n        break;\n      }\n\n      case 'quick': {\n        const sorted: number[] = [];\n        const quickSort = (low: number, high: number) => {\n          if (low < high) {\n            const pivotIdx = partition(low, high);\n            sorted.push(pivotIdx);\n            addStep([], [], sorted);\n            quickSort(low, pivotIdx - 1);\n            quickSort(pivotIdx + 1, high);\n          } else if (low === high) {\n            sorted.push(low);\n            addStep([], [], sorted);\n          }\n        };\n\n        const partition = (low: number, high: number): number => {\n          const pivot = arr[high].value;\n          let i = low - 1;\n          \n          for (let j = low; j < high; j++) {\n            addStep([j, high], [], sorted);\n            if (arr[j].value < pivot) {\n              i++;\n              if (i !== j) {\n                addStep([j, high], [i, j], sorted);\n                swap(i, j);\n              }\n            }\n          }\n          addStep([high], [i + 1, high], sorted);\n          swap(i + 1, high);\n          return i + 1;\n        };\n\n        quickSort(0, arr.length - 1);\n        break;\n      }\n\n      case 'merge': {\n        const sorted: number[] = [];\n        const mergeSort = (left: number, right: number) => {\n          if (left >= right) {\n            return;\n          }\n          \n          const mid = Math.floor((left + right) / 2);\n          mergeSort(left, mid);\n          mergeSort(mid + 1, right);\n          merge(left, mid, right);\n        };\n\n        const merge = (left: number, mid: number, right: number) => {\n          const leftArr = arr.slice(left, mid + 1);\n          const rightArr = arr.slice(mid + 1, right + 1);\n          \n          let i = 0, j = 0, k = left;\n          \n          while (i < leftArr.length && j < rightArr.length) {\n            addStep([left + i, mid + 1 + j], [], sorted);\n            if (leftArr[i].value <= rightArr[j].value) {\n              arr[k] = leftArr[i];\n              i++;\n            } else {\n              arr[k] = rightArr[j];\n              j++;\n            }\n            addStep([], [k], sorted);\n            k++;\n          }\n          \n          while (i < leftArr.length) {\n            arr[k] = leftArr[i];\n            addStep([], [k], sorted);\n            i++;\n            k++;\n          }\n          \n          while (j < rightArr.length) {\n            arr[k] = rightArr[j];\n            addStep([], [k], sorted);\n            j++;\n            k++;\n          }\n\n          for (let idx = left; idx <= right; idx++) {\n            if (!sorted.includes(idx)) {\n              sorted.push(idx);\n            }\n          }\n          addStep([], [], sorted);\n        };\n\n        mergeSort(0, arr.length - 1);\n        break;\n      }\n    }\n\n    setSteps(newSteps);\n    setCurrentStep(0);\n  }, [array]);\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-gray-900 via-purple-900 to-gray-900 p-8\">\n      <div className=\"max-w-7xl mx-auto space-y-8\">\n        <motion.div\n          initial={{ opacity: 0, y: -20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.8 }}\n          className=\"text-center space-y-4\"\n        >\n          <motion.h1\n            className=\"text-6xl font-bold bg-gradient-to-r from-cyan-400 via-purple-400 to-pink-400 bg-clip-text text-transparent\"\n            animate={{\n              textShadow: [\n                '0 0 20px rgba(0, 255, 255, 0.5)',\n                '0 0 40px rgba(255, 0, 255, 0.5)',\n                '0 0 20px rgba(0, 255, 255, 0.5)'\n              ]\n            }}\n            transition={{ duration: 2, repeat: Infinity }}\n          >\n            Algorithm Visualizer\n          </motion.h1>\n          \n          <div className=\"flex items-center justify-center gap-4\">\n            <motion.div\n              initial={{ scale: 0 }}\n              animate={{ scale: 1 }}\n              transition={{ delay: 0.3, type: 'spring' }}\n              className=\"px-6 py-2 bg-purple-500/20 border border-purple-400/50 rounded-full backdrop-blur-sm\"\n            >\n              <span className=\"text-2xl font-semibold text-purple-300\">\n                {mockAlgorithms.find(a => a.id === selectedAlgorithm)?.name}\n              </span>\n            </motion.div>\n            \n            <motion.div\n              initial={{ scale: 0 }}\n              animate={{ scale: 1 }}\n              transition={{ delay: 0.5, type: 'spring' }}\n              className=\"px-4 py-2 bg-cyan-500/20 border border-cyan-400/50 rounded-full backdrop-blur-sm relative overflow-hidden\"\n            >\n              <motion.div\n                className=\"absolute inset-0 bg-gradient-to-r from-transparent via-cyan-400/20 to-transparent\"\n                animate={{ x: ['-100%', '100%'] }}\n                transition={{ duration: 2, repeat: Infinity, ease: 'linear' }}\n              />\n              <div className=\"relative flex items-center gap-2\">\n                <Zap className=\"w-4 h-4 text-cyan-400\" />\n                <span className=\"text-lg font-mono text-cyan-300\">\n                  {mockAlgorithms.find(a => a.id === selectedAlgorithm)?.complexity}\n                </span>\n              </div>\n            </motion.div>\n          </div>\n        </motion.div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-6\">\n          <div className=\"lg:col-span-1 space-y-6\">\n            <motion.div\n              initial={{ opacity: 0, x: -50 }}\n              animate={{ opacity: 1, x: 0 }}\n              className=\"bg-gray-900/50 backdrop-blur-lg border border-cyan-500/30 rounded-xl p-6 shadow-2xl shadow-cyan-500/20\"\n            >\n              <div className=\"space-y-6\">\n                {/* Algorithm Selection */}\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center gap-2 text-cyan-400 mb-4\">\n                    <Zap className=\"w-5 h-5\" />\n                    <h3 className=\"font-bold text-lg\">Algorithm</h3>\n                  </div>\n                  <div className=\"grid grid-cols-1 gap-2\">\n                    {mockAlgorithms.map((algo) => (\n                      <motion.button\n                        key={algo.id}\n                        whileHover={{ scale: 1.02 }}\n                        whileTap={{ scale: 0.98 }}\n                        onClick={() => setSelectedAlgorithm(algo.id as AlgorithmType)}\n                        className={`p-3 rounded-lg border transition-all duration-300 text-left ${\n                          selectedAlgorithm === algo.id\n                            ? 'bg-cyan-500/20 border-cyan-400 shadow-lg shadow-cyan-500/50'\n                            : 'bg-gray-800/50 border-gray-700 hover:border-cyan-500/50'\n                        }`}\n                      >\n                        <div className=\"font-semibold text-white\">{algo.name}</div>\n                        <div className=\"text-xs text-gray-400 mt-1\">{algo.complexity}</div>\n                      </motion.button>\n                    ))}\n                  </div>\n                </div>\n\n                {/* Array Size Control */}\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center gap-2 text-purple-400\">\n                      <BarChart3 className=\"w-5 h-5\" />\n                      <span className=\"font-semibold\">Array Size</span>\n                    </div>\n                    <span className=\"text-white font-bold bg-purple-500/20 px-3 py-1 rounded-full border border-purple-400/30\">\n                      {arraySize[0]}\n                    </span>\n                  </div>\n                  <Slider\n                    value={arraySize}\n                    onValueChange={setArraySize}\n                    min={5}\n                    max={50}\n                    step={1}\n                    className=\"cursor-pointer\"\n                    disabled={isPlaying}\n                  />\n                </div>\n\n                {/* Speed Control */}\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center gap-2 text-pink-400\">\n                      <Zap className=\"w-5 h-5\" />\n                      <span className=\"font-semibold\">Speed</span>\n                    </div>\n                    <span className=\"text-white font-bold bg-pink-500/20 px-3 py-1 rounded-full border border-pink-400/30\">\n                      {speed[0]}%\n                    </span>\n                  </div>\n                  <Slider\n                    value={speed}\n                    onValueChange={setSpeed}\n                    min={10}\n                    max={100}\n                    step={10}\n                    className=\"cursor-pointer\"\n                  />\n                </div>\n\n                {/* Control Buttons */}\n                <div className=\"space-y-3 pt-4 border-t border-gray-700/50\">\n                  <Button\n                    onClick={isPlaying ? pauseVisualization : startVisualization}\n                    disabled={steps.length === 0 || currentStep >= steps.length}\n                    className=\"w-full bg-gradient-to-r from-cyan-500 to-blue-500 hover:from-cyan-600 hover:to-blue-600 text-white font-bold py-6 rounded-lg shadow-lg shadow-cyan-500/50 transition-all duration-300\"\n                  >\n                    {isPlaying ? (\n                      <>\n                        <Pause className=\"w-5 h-5 mr-2\" />\n                        Pause\n                      </>\n                    ) : (\n                      <>\n                        <Play className=\"w-5 h-5 mr-2\" />\n                        {currentStep === 0 ? 'Start' : 'Resume'}\n                      </>\n                    )}\n                  </Button>\n\n                  <Button\n                    onClick={resetVisualization}\n                    variant=\"outline\"\n                    className=\"w-full border-2 border-purple-500/50 bg-purple-500/10 hover:bg-purple-500/20 text-purple-300 font-bold py-6 rounded-lg shadow-lg shadow-purple-500/30 transition-all duration-300\"\n                  >\n                    <RotateCcw className=\"w-5 h-5 mr-2\" />\n                    Reset\n                  </Button>\n\n                  <Button\n                    onClick={() => generateSortingSteps(selectedAlgorithm)}\n                    disabled={isPlaying || array.length === 0}\n                    className=\"w-full bg-gradient-to-r from-pink-500 to-purple-500 hover:from-pink-600 hover:to-purple-600 text-white font-bold py-6 rounded-lg shadow-lg shadow-pink-500/50 transition-all duration-300\"\n                  >\n                    <Zap className=\"w-5 h-5 mr-2\" />\n                    Generate Steps\n                  </Button>\n                </div>\n\n                {/* Stats Display */}\n                <div className=\"pt-4 border-t border-gray-700/50 space-y-2\">\n                  <div className=\"flex justify-between text-sm\">\n                    <span className=\"text-gray-400\">Current Step:</span>\n                    <span className=\"text-cyan-400 font-bold\">{currentStep} / {steps.length}</span>\n                  </div>\n                  <div className=\"flex justify-between text-sm\">\n                    <span className=\"text-gray-400\">Status:</span>\n                    <span className={`font-bold ${isPlaying ? 'text-green-400' : 'text-gray-400'}`}>\n                      {isPlaying ? 'Running' : 'Idle'}\n                    </span>\n                  </div>\n                </div>\n              </div>\n            </motion.div>\n            \n            <div className=\"bg-gray-900/50 backdrop-blur-lg border border-cyan-500/30 rounded-xl p-6 shadow-2xl shadow-cyan-500/20\">\n              <div className=\"space-y-6\">\n                <div>\n                  <h3 className=\"text-sm font-semibold text-cyan-400 mb-3 flex items-center gap-2\">\n                    <Zap className=\"w-4 h-4\" />\n                    Algorithm\n                  </h3>\n                  <div className=\"grid grid-cols-1 gap-2\">\n                    {mockAlgorithms.map((algo) => (\n                      <motion.button\n                        key={algo.id}\n                        onClick={() => setSelectedAlgorithm(algo.id as AlgorithmType)}\n                        className={`relative p-3 rounded-lg text-left transition-all duration-300 ${\n                          selectedAlgorithm === algo.id\n                            ? 'bg-cyan-500/20 border-2 border-cyan-400 shadow-lg shadow-cyan-500/50'\n                            : 'bg-gray-800/50 border border-gray-700 hover:border-cyan-500/50 hover:shadow-md hover:shadow-cyan-500/30'\n                        }`}\n                        whileHover={{ scale: 1.02 }}\n                        whileTap={{ scale: 0.98 }}\n                      >\n                        <div className=\"flex flex-col gap-1\">\n                          <span className={`text-sm font-medium ${\n                            selectedAlgorithm === algo.id ? 'text-cyan-300' : 'text-gray-300'\n                          }`}>\n                            {algo.name}\n                          </span>\n                          <span className={`text-xs ${\n                            selectedAlgorithm === algo.id ? 'text-cyan-400/80' : 'text-gray-500'\n                          }`}>\n                            {algo.complexity}\n                          </span>\n                        </div>\n                        {selectedAlgorithm === algo.id && (\n                          <motion.div\n                            className=\"absolute inset-0 rounded-lg bg-cyan-400/10\"\n                            layoutId=\"algorithmSelector\"\n                            transition={{ type: \"spring\", bounce: 0.2, duration: 0.6 }}\n                          />\n                        )}\n                      </motion.button>\n                    ))}\n                  </div>\n                </div>\n\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <label className=\"text-cyan-400 text-sm font-medium flex items-center gap-2\">\n                      <Zap className=\"w-4 h-4\" />\n                      Speed\n                    </label>\n                    <span className=\"text-cyan-300 text-xs\">{speed[0]}ms</span>\n                  </div>\n                  <Slider\n                    value={speed}\n                    onValueChange={setSpeed}\n                    min={10}\n                    max={200}\n                    step={10}\n                    className=\"[&_[role=slider]]:h-4 [&_[role=slider]]:w-4 [&_[role=slider]]:bg-cyan-400 [&_[role=slider]]:border-2 [&_[role=slider]]:border-cyan-300 [&_[role=slider]]:shadow-[0_0_15px_rgba(34,211,238,0.8)] [&_[role=slider]]:transition-all [&_[role=slider]]:hover:shadow-[0_0_25px_rgba(34,211,238,1)] [&_.relative]:h-2 [&_.relative]:bg-gray-800 [&_.relative]:rounded-full [&_.relative]:border [&_.relative]:border-cyan-500/30 [&_.relative_.bg-primary]:bg-gradient-to-r [&_.relative_.bg-primary]:from-cyan-500 [&_.relative_.bg-primary]:to-purple-500 [&_.relative_.bg-primary]:shadow-[0_0_10px_rgba(34,211,238,0.5)]\"\n                  /></parameter>\n                </div>\n\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <label className=\"text-cyan-400 text-sm font-medium flex items-center gap-2\">\n                      <BarChart3 className=\"w-4 h-4\" />\n                      Array Size\n                    </label>\n                    <span className=\"text-cyan-300 text-xs\">{arraySize[0]}</span>\n                  </div>\n                  <Slider\n                    value={arraySize}\n                    onValueChange={setArraySize}\n                    min={5}\n                    max={50}\n                    step={1}\n                    disabled={isPlaying}\n                    className=\"[&_[role=slider]]:bg-cyan-400 [&_[role=slider]]:border-cyan-300 [&_[role=slider]]:shadow-lg [&_[role=slider]]:shadow-cyan-400/50 [&_[role=slider]]:h-4 [&_[role=slider]]:w-4 [&>span]:bg-cyan-500/30 [&>span>span]:bg-gradient-to-r [&>span>span]:from-cyan-500 [&>span>span]:to-purple-500\"\n                  />\n                </div>\n\n                <div className=\"flex gap-3 pt-4\">\n                  <motion.div className=\"relative flex-1\">\n                    <Button\n                      onClick={isPlaying ? pauseVisualization : startVisualization}\n                      disabled={array.length === 0 || (steps.length === 0 && !isPlaying)}\n                      className=\"w-full relative overflow-hidden bg-gradient-to-r from-cyan-500 to-purple-500 hover:from-cyan-400 hover:to-purple-400 text-white font-bold py-6 rounded-lg transition-all duration-300 disabled:opacity-50 disabled:cursor-not-allowed group\"\n                      whileHover={{ scale: 1.05 }}\n                      whileTap={{ scale: 0.95 }}\n                    >\n                      <motion.div\n                        className=\"absolute inset-0 bg-gradient-to-r from-cyan-400 to-purple-400 opacity-0 group-hover:opacity-100 blur-xl transition-opacity duration-300\"\n                        animate={{\n                          opacity: isPlaying ? [0.5, 0.8, 0.5] : 0\n                        }}\n                        transition={{\n                          duration: 2,\n                          repeat: Infinity,\n                          ease: \"easeInOut\"\n                        }}\n                      />\n                      \n                      <motion.div\n                        className=\"relative flex items-center justify-center gap-2\"\n                        initial={false}\n                        animate={{\n                          scale: isPlaying ? [1, 1.1, 1] : 1\n                        }}\n                        transition={{\n                          duration: 1,\n                          repeat: isPlaying ? Infinity : 0\n                        }}\n                      >\n                        <motion.div\n                          initial={false}\n                          animate={{\n                            rotate: isPlaying ? 0 : 0,\n                            scale: isPlaying ? 1 : 1\n                          }}\n                          transition={{ duration: 0.3 }}\n                        >\n                          {isPlaying ? (\n                            <motion.div\n                              key=\"pause\"\n                              initial={{ scale: 0, rotate: -180 }}\n                              animate={{ scale: 1, rotate: 0 }}\n                              exit={{ scale: 0, rotate: 180 }}\n                              transition={{ duration: 0.3 }}\n                            >\n                              <Pause className=\"w-5 h-5\" />\n                            </motion.div>\n                          ) : (\n                            <motion.div\n                              key=\"play\"\n                              initial={{ scale: 0, rotate: 180 }}\n                              animate={{ scale: 1, rotate: 0 }}\n                              exit={{ scale: 0, rotate: -180 }}\n                              transition={{ duration: 0.3 }}\n                            >\n                              <Play className=\"w-5 h-5\" />\n                            </motion.div>\n                          )}\n                        </motion.div>\n                        \n                        <span className=\"text-sm font-bold tracking-wider\">\n                          {isPlaying ? 'PAUSE' : 'PLAY'}\n                        </span>\n                      </motion.div>\n\n                      <motion.div\n                        className=\"absolute inset-0 rounded-lg\"\n                        style={{\n                          boxShadow: isPlaying \n                            ? '0 0 20px rgba(0, 255, 255, 0.6), 0 0 40px rgba(168, 85, 247, 0.4)'\n                            : '0 0 10px rgba(0, 255, 255, 0.3)'\n                        }}\n                        animate={{\n                          boxShadow: isPlaying\n                            ? [\n                                '0 0 20px rgba(0, 255, 255, 0.6), 0 0 40px rgba(168, 85, 247, 0.4)',\n                                '0 0 30px rgba(168, 85, 247, 0.6), 0 0 50px rgba(0, 255, 255, 0.4)',\n                                '0 0 20px rgba(0, 255, 255, 0.6), 0 0 40px rgba(168, 85, 247, 0.4)'\n                              ]\n                            : '0 0 10px rgba(0, 255, 255, 0.3)'\n                        }}\n                        transition={{\n                          duration: 2,\n                          repeat: Infinity,\n                          ease: \"easeInOut\"\n                        }}\n                      />\n                    </Button>\n                  </motion.div></parameter>\n                  <motion.button\n                    onClick={isPlaying ? pauseVisualization : startVisualization}\n                    whileHover={{ scale: 1.05 }}\n                    whileTap={{ scale: 0.95 }}\n                    className=\"flex-1 relative overflow-hidden bg-gradient-to-r from-cyan-500 to-purple-500 text-white font-bold py-3 px-6 rounded-lg shadow-lg shadow-cyan-500/50 hover:shadow-cyan-500/80 transition-all duration-300\"\n                  >\n                    <motion.div\n                      className=\"absolute inset-0 bg-gradient-to-r from-transparent via-white/30 to-transparent\"\n                      animate={{ x: ['-100%', '100%'] }}\n                      transition={{ duration: 1.5, repeat: Infinity, ease: 'linear' }}\n                    />\n                    <div className=\"relative flex items-center justify-center gap-2\">\n                      {isPlaying ? <Pause className=\"w-5 h-5\" /> : <Play className=\"w-5 h-5\" />}\n                      <span className=\"text-sm font-bold tracking-wider\">\n                        {isPlaying ? 'PAUSE' : 'START'}\n                      </span>\n                    </div>\n                  </motion.button>\n\n                  <motion.button\n                    onClick={resetVisualization}\n                    whileHover={{ scale: 1.05, rotate: 180 }}\n                    whileTap={{ scale: 0.95 }}\n                    transition={{ type: 'spring', stiffness: 300 }}\n                    className=\"relative overflow-hidden bg-gradient-to-r from-pink-500 to-orange-500 text-white font-bold py-3 px-6 rounded-lg shadow-lg shadow-pink-500/50 hover:shadow-pink-500/80\"\n                  >\n                    <motion.div\n                      className=\"absolute inset-0\"\n                      animate={{\n                        boxShadow: [\n                          '0 0 20px rgba(236, 72, 153, 0.5)',\n                          '0 0 40px rgba(236, 72, 153, 0.8)',\n                          '0 0 20px rgba(236, 72, 153, 0.5)'\n                        ]\n                      }}\n                      transition={{ duration: 2, repeat: Infinity }}\n                    />\n                    <div className=\"relative flex items-center justify-center gap-2\">\n                      <RotateCcw className=\"w-5 h-5\" />\n                      <span className=\"text-sm font-bold tracking-wider\">RESET</span>\n                    </div>\n                  </motion.button>\n                </div>\n              </div>\n            </div>\n\n            <motion.div\n              initial={{ opacity: 0, x: -50 }}\n              animate={{ opacity: 1, x: 0 }}\n              transition={{ delay: 0.2 }}\n              className=\"bg-gray-900/50 backdrop-blur-lg border border-purple-500/30 rounded-xl p-6 shadow-2xl shadow-purple-500/20\"\n            >\n              <div className=\"space-y-4\">\n                <div className=\"flex items-center gap-2 text-purple-400 mb-4\">\n                  <Activity className=\"w-5 h-5\" />\n                  <h3 className=\"font-bold text-lg\">Statistics</h3>\n                </div>\n\n                {/* Progress Bar */}\n                <div className=\"space-y-2\">\n                  <div className=\"flex items-center justify-between text-sm\">\n                    <span className=\"text-gray-400\">Progress</span>\n                    <span className=\"text-white font-mono\">\n                      {steps.length > 0 ? Math.round((currentStep / steps.length) * 100) : 0}%\n                    </span>\n                  </div>\n                  <div className=\"relative h-3 bg-gray-800 rounded-full border border-purple-500/30 overflow-hidden\">\n                    <motion.div\n                      className=\"absolute inset-y-0 left-0 bg-gradient-to-r from-purple-500 via-pink-500 to-cyan-500 rounded-full\"\n                      initial={{ width: 0 }}\n                      animate={{ \n                        width: steps.length > 0 ? `${(currentStep / steps.length) * 100}%` : '0%'\n                      }}\n                      transition={{ duration: 0.3 }}\n                    />\n                    <motion.div\n                      className=\"absolute inset-0 bg-gradient-to-r from-transparent via-white/30 to-transparent\"\n                      animate={{ x: ['-100%', '100%'] }}\n                      transition={{ duration: 1.5, repeat: Infinity, ease: 'linear' }}\n                    />\n                  </div>\n                  <div className=\"flex items-center justify-between text-xs text-gray-500\">\n                    <span>Step {currentStep}</span>\n                    <span>of {steps.length}</span>\n                  </div>\n                </div>\n\n                {/* Comparisons Counter */}\n                <motion.div\n                  className=\"relative p-4 bg-gradient-to-br from-cyan-500/10 to-cyan-500/5 border border-cyan-500/30 rounded-lg overflow-hidden group hover:shadow-lg hover:shadow-cyan-500/20 transition-all duration-300\"\n                  whileHover={{ scale: 1.02 }}\n                >\n                  <motion.div\n                    className=\"absolute inset-0 bg-gradient-to-r from-transparent via-cyan-400/10 to-transparent\"\n                    animate={{ x: ['-100%', '100%'] }}\n                    transition={{ duration: 3, repeat: Infinity, ease: 'linear' }}\n                  />\n                  <div className=\"relative flex items-center justify-between\">\n                    <div className=\"flex items-center gap-3\">\n                      <div className=\"p-2 bg-cyan-500/20 rounded-lg border border-cyan-400/30\">\n                        <TrendingUp className=\"w-5 h-5 text-cyan-400\" />\n                      </div>\n                      <div>\n                        <div className=\"text-xs text-gray-400 uppercase tracking-wide\">Comparisons</div>\n                        <motion.div\n                          key={comparisons}\n                          initial={{ scale: 1.5, color: '#22d3ee' }}\n                          animate={{ scale: 1, color: '#ffffff' }}\n                          className=\"text-2xl font-bold font-mono\"\n                        >\n                          {comparisons}\n                        </motion.div>\n                      </div>\n                    </div>\n                    <motion.div\n                      className=\"text-cyan-400 text-xs font-semibold px-3 py-1 bg-cyan-500/20 rounded-full border border-cyan-400/30\"\n                      animate={{ opacity: [0.5, 1, 0.5] }}\n                      transition={{ duration: 2, repeat: Infinity }}\n                    >\n                      ACTIVE\n                    </motion.div>\n                  </div>\n                </motion.div>\n\n                {/* Swaps Counter */}\n                <motion.div\n                  className=\"relative p-4 bg-gradient-to-br from-pink-500/10 to-pink-500/5 border border-pink-500/30 rounded-lg overflow-hidden group hover:shadow-lg hover:shadow-pink-500/20 transition-all duration-300\"\n                  whileHover={{ scale: 1.02 }}\n                >\n                  <motion.div\n                    className=\"absolute inset-0 bg-gradient-to-r from-transparent via-pink-400/10 to-transparent\"\n                    animate={{ x: ['-100%', '100%'] }}\n                    transition={{ duration: 3, repeat: Infinity, ease: 'linear', delay: 1.5 }}\n                  />\n                  <div className=\"relative flex items-center justify-between\">\n                    <div className=\"flex items-center gap-3\">\n                      <div className=\"p-2 bg-pink-500/20 rounded-lg border border-pink-400/30\">\n                        <Repeat className=\"w-5 h-5 text-pink-400\" />\n                      </div>\n                      <div>\n                        <div className=\"text-xs text-gray-400 uppercase tracking-wide\">Swaps</div>\n                        <motion.div\n                          key={swaps}\n                          initial={{ scale: 1.5, color: '#ec4899' }}\n                          animate={{ scale: 1, color: '#ffffff' }}\n                          className=\"text-2xl font-bold font-mono\"\n                        >\n                          {swaps}\n                        </motion.div>\n                      </div>\n                    </div>\n                    <motion.div\n                      className=\"text-pink-400 text-xs font-semibold px-3 py-1 bg-pink-500/20 rounded-full border border-pink-400/30\"\n                      animate={{ opacity: [0.5, 1, 0.5] }}\n                      transition={{ duration: 2, repeat: Infinity, delay: 1 }}\n                    >\n                      TRACK\n                    </motion.div>\n                  </div>\n                </motion.div>\n\n                {/* Array Info */}\n                <div className=\"grid grid-cols-2 gap-3 pt-2\">\n                  <div className=\"p-3 bg-gray-800/50 border border-gray-700 rounded-lg\">\n                    <div className=\"text-xs text-gray-500 mb-1\">Elements</div>\n                    <div className=\"text-lg font-bold text-white font-mono\">{array.length}</div>\n                  </div>\n                  <div className=\"p-3 bg-gray-800/50 border border-gray-700 rounded-lg\">\n                    <div className=\"text-xs text-gray-500 mb-1\">Status</div>\n                    <div className=\"text-lg font-bold\">\n                      {isPlaying ? (\n                        <span className=\"text-green-400\">Running</span>\n                      ) : steps.length > 0 && currentStep === steps.length ? (\n                        <span className=\"text-purple-400\">Done</span>\n                      ) : (\n                        <span className=\"text-gray-400\">Ready</span>\n                      )}\n                    </div>\n                  </div>\n                </div>\n\n                {/* Time Complexity Reminder */}\n                <motion.div\n                  className=\"p-3 bg-gradient-to-r from-purple-500/10 to-cyan-500/10 border border-purple-400/30 rounded-lg\"\n                  animate={{\n                    boxShadow: [\n                      '0 0 10px rgba(168, 85, 247, 0.2)',\n                      '0 0 20px rgba(168, 85, 247, 0.4)',\n                      '0 0 10px rgba(168, 85, 247, 0.2)'\n                    ]\n                  }}\n                  transition={{ duration: 2, repeat: Infinity }}\n                >\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-xs text-gray-400\">Time Complexity</span>\n                    <span className=\"text-sm font-mono font-bold text-purple-300\">\n                      {mockAlgorithms.find(a => a.id === selectedAlgorithm)?.complexity}\n                    </span>\n                  </div>\n                </motion.div>\n              </div>\n            </motion.div>\n          </div>\n\n          <div className=\"lg:col-span-3\">\n            <div className=\"bg-gray-900/50 backdrop-blur-lg border border-purple-500/30 rounded-xl p-8 shadow-2xl shadow-purple-500/20 min-h-[600px]\">\n              {array.length === 0 ? (\n                <motion.div\n                  initial={{ opacity: 0, scale: 0.8 }}\n                  animate={{ opacity: 1, scale: 1 }}\n                  transition={{ duration: 0.5 }}\n                  className=\"absolute inset-0 flex flex-col items-center justify-center gap-6\"\n                >\n                  <motion.div\n                    animate={{\n                      rotate: [0, 360],\n                      scale: [1, 1.1, 1]\n                    }}\n                    transition={{\n                      rotate: { duration: 3, repeat: Infinity, ease: \"linear\" },\n                      scale: { duration: 2, repeat: Infinity, ease: \"easeInOut\" }\n                    }}\n                    className=\"relative\"\n                  >\n                    <BarChart3 className=\"w-24 h-24 text-purple-400/50\" />\n                    <motion.div\n                      className=\"absolute inset-0 rounded-full bg-purple-500/20 blur-xl\"\n                      animate={{\n                        scale: [1, 1.5, 1],\n                        opacity: [0.3, 0.6, 0.3]\n                      }}\n                      transition={{ duration: 2, repeat: Infinity }}\n                    />\n                  </motion.div>\n                  <div className=\"text-center space-y-2\">\n                    <p className=\"text-2xl font-semibold text-purple-300\">\n                      Generate an array to begin\n                    </p>\n                    <p className=\"text-sm text-gray-400\">\n                      Click the \"Generate Array\" button to start visualizing\n                    </p>\n                  </div>\n                </motion.div>\n              ) : (\n                <div className=\"relative w-full h-full flex items-end justify-center gap-1 px-4\">\n                  {currentStep < steps.length && steps[currentStep] ? (\n                    steps[currentStep].array.map((element, index) => {\n                      const maxValue = Math.max(...steps[currentStep].array.map(el => el.value));\n                      const heightPercentage = (element.value / maxValue) * 100;\n                      const barColor = element.isSorted\n                        ? '#00ff00'\n                        : element.isSwapping\n                        ? '#ff0066'\n                        : element.isComparing\n                        ? '#ffff00'\n                        : NEON_COLORS[index % NEON_COLORS.length];\n\n                      return (\n                        <motion.div\n                          key={element.id}\n                          layout\n                          initial={{ height: 0, opacity: 0 }}\n                          animate={{\n                            height: `${heightPercentage}%`,\n                            opacity: 1,\n                            scale: element.isSwapping ? 1.1 : element.isComparing ? 1.05 : 1,\n                            y: element.isSwapping ? -10 : 0\n                          }}\n                          transition={{\n                            height: { duration: 0.3, ease: \"easeOut\" },\n                            scale: { duration: 0.2 },\n                            y: { duration: 0.3, type: \"spring\" },\n                            layout: { duration: 0.4, type: \"spring\", bounce: 0.3 }\n                          }}\n                          className=\"relative flex-1 min-w-[4px] max-w-[60px] rounded-t-lg\"\n                          style={{\n                            backgroundColor: barColor,\n                            boxShadow: `0 0 ${element.isSwapping ? '30px' : element.isComparing ? '20px' : '10px'} ${barColor}80, 0 0 ${element.isSwapping ? '60px' : element.isComparing ? '40px' : '20px'} ${barColor}40`,\n                            border: `1px solid ${barColor}`,\n                          }}\n                        >\n                          {/* Value label */}\n                          <motion.div\n                            initial={{ opacity: 0 }}\n                            animate={{ opacity: arraySize[0] <= 30 ? 1 : 0 }}\n                            className=\"absolute -top-8 left-1/2 -translate-x-1/2 text-xs font-bold text-white whitespace-nowrap\"\n                            style={{\n                              textShadow: `0 0 10px ${barColor}, 0 0 20px ${barColor}80`\n                            }}\n                          >\n                            {element.value}\n                          </motion.div>\n\n                          {/* Glow effect overlay */}\n                          {(element.isComparing || element.isSwapping) && (\n                            <motion.div\n                              className=\"absolute inset-0 rounded-t-lg\"\n                              animate={{\n                                opacity: [0.3, 0.7, 0.3],\n                              }}\n                              transition={{\n                                duration: 0.8,\n                                repeat: Infinity,\n                                ease: \"easeInOut\"\n                              }}\n                              style={{\n                                background: `linear-gradient(to top, transparent, ${barColor}60)`,\n                                boxShadow: `inset 0 0 20px ${barColor}80`\n                              }}\n                            />\n                          )}\n\n                          {/* Sorted checkmark */}\n                          {element.isSorted && (\n                            <motion.div\n                              initial={{ scale: 0, rotate: -180 }}\n                              animate={{ scale: 1, rotate: 0 }}\n                              transition={{ type: \"spring\", bounce: 0.5 }}\n                              className=\"absolute -top-6 left-1/2 -translate-x-1/2 w-5 h-5 bg-green-500 rounded-full flex items-center justify-center\"\n                              style={{\n                                boxShadow: '0 0 15px #00ff00, 0 0 30px #00ff0080'\n                              }}\n                            >\n                              <svg\n                                className=\"w-3 h-3 text-gray-900\"\n                                fill=\"none\"\n                                strokeLinecap=\"round\"\n                                strokeLinejoin=\"round\"\n                                strokeWidth=\"3\"\n                                viewBox=\"0 0 24 24\"\n                                stroke=\"currentColor\"\n                              >\n                                <path d=\"M5 13l4 4L19 7\" />\n                              </svg>\n                            </motion.div>\n                          )}\n\n                          {/* Swap trail effect */}\n                          {element.isSwapping && (\n                            <>\n                              <motion.div\n                                className=\"absolute inset-0 rounded-t-lg\"\n                                initial={{ opacity: 0, scale: 1 }}\n                                animate={{\n                                  opacity: [0, 0.6, 0],\n                                  scale: [1, 1.3, 1.5]\n                                }}\n                                transition={{\n                                  duration: 0.6,\n                                  repeat: Infinity,\n                                  ease: \"easeOut\"\n                                }}\n                                style={{\n                                  backgroundColor: barColor,\n                                  filter: 'blur(8px)'\n                                }}\n                              />\n                              <motion.div\n                                className=\"absolute -inset-2 rounded-t-lg\"\n                                animate={{\n                                  rotate: [0, 360]\n                                }}\n                                transition={{\n                                  duration: 1,\n                                  repeat: Infinity,\n                                  ease: \"linear\"\n                                }}\n                                style={{\n                                  background: `conic-gradient(from 0deg, transparent, ${barColor}60, transparent)`,\n                                  filter: 'blur(4px)'\n                                }}\n                              />\n                            </>\n                          )}\n                        </motion.div>\n                      );\n                    })\n                  ) : array.length > 0 ? (\n                    array.map((element, index) => {\n                      const maxValue = Math.max(...array.map(el => el.value));\n                      const heightPercentage = (element.value / maxValue) * 100;\n                      const barColor = NEON_COLORS[index % NEON_COLORS.length];\n\n                      return (\n                        <motion.div\n                          key={element.id}\n                          initial={{ height: 0, opacity: 0, scale: 0.8 }}\n                          animate={{\n                            height: `${heightPercentage}%`,\n                            opacity: 1,\n                            scale: 1\n                          }}\n                          transition={{\n                            height: { duration: 0.5, ease: \"easeOut\", delay: index * 0.02 },\n                            opacity: { duration: 0.3, delay: index * 0.02 },\n                            scale: { duration: 0.3, delay: index * 0.02, type: \"spring\" }\n                          }}\n                          className=\"relative flex-1 min-w-[4px] max-w-[60px] rounded-t-lg\"\n                          style={{\n                            backgroundColor: barColor,\n                            boxShadow: `0 0 10px ${barColor}80, 0 0 20px ${barColor}40`,\n                            border: `1px solid ${barColor}`,\n                          }}\n                        >\n                          <motion.div\n                            initial={{ opacity: 0 }}\n                            animate={{ opacity: arraySize[0] <= 30 ? 1 : 0 }}\n                            transition={{ delay: index * 0.02 + 0.3 }}\n                            className=\"absolute -top-8 left-1/2 -translate-x-1/2 text-xs font-bold text-white whitespace-nowrap\"\n                            style={{\n                              textShadow: `0 0 10px ${barColor}, 0 0 20px ${barColor}80`\n                            }}\n                          >\n                            {element.value}\n                          </motion.div>\n                        </motion.div>\n                      );\n                    })\n                  ) : null}\n\n                  {/* Comparison indicators */}\n                  {currentStep < steps.length && steps[currentStep] && steps[currentStep].comparingIndices.length > 0 && (\n                    <motion.div\n                      initial={{ opacity: 0 }}\n                      animate={{ opacity: 1 }}\n                      className=\"absolute top-0 left-0 right-0 flex items-center justify-center pointer-events-none\"\n                    >\n                      <motion.div\n                        animate={{\n                          y: [0, -10, 0],\n                          opacity: [0.6, 1, 0.6]\n                        }}\n                        transition={{\n                          duration: 1,\n                          repeat: Infinity,\n                          ease: \"easeInOut\"\n                        }}\n                        className=\"px-4 py-2 bg-yellow-500/20 border border-yellow-400 rounded-full backdrop-blur-sm\"\n                        style={{\n                          boxShadow: '0 0 20px #ffff0080, 0 0 40px #ffff0040'\n                        }}\n                      >\n                        <span className=\"text-yellow-300 text-sm font-semibold\">\n                          Comparing...\n                        </span>\n                      </motion.div>\n                    </motion.div>\n                  )}\n\n                  {/* Swap indicators */}\n                  {currentStep < steps.length && steps[currentStep] && steps[currentStep].swappingIndices.length > 0 && (\n                    <motion.div\n                      initial={{ opacity: 0, scale: 0.8 }}\n                      animate={{ opacity: 1, scale: 1 }}\n                      exit={{ opacity: 0, scale: 0.8 }}\n                      className=\"absolute top-12 left-0 right-0 flex items-center justify-center pointer-events-none\"\n                    >\n                      <motion.div\n                        animate={{\n                          rotate: [0, 180, 360],\n                          scale: [1, 1.1, 1]\n                        }}\n                        transition={{\n                          duration: 0.8,\n                          repeat: Infinity,\n                          ease: \"linear\"\n                        }}\n                        className=\"px-4 py-2 bg-pink-500/20 border border-pink-400 rounded-full backdrop-blur-sm flex items-center gap-2\"\n                        style={{\n                          boxShadow: '0 0 20px #ff006680, 0 0 40px #ff006640'\n                        }}\n                      >\n                        <Zap className=\"w-4 h-4 text-pink-300\" />\n                        <span className=\"text-pink-300 text-sm font-semibold\">\n                          Swapping\n                        </span>\n                      </motion.div>\n                    </motion.div>\n                  )}\n                </div>\n              )}\n              \n              <div className=\"relative h-full flex items-end justify-center gap-1\">\n                {/* TODO:AnimatedBars Render array elements as animated bars with height transitions, neon colors, and glow effects */}\n              </div>\n\n                            {steps.length > 0 && currentStep < steps.length && steps[currentStep].comparingIndices.length > 0 && (\n                <div className=\"absolute inset-0 pointer-events-none\">\n                  {steps[currentStep].comparingIndices.map((index, i) => {\n                    const maxValue = Math.max(...array.map(el => el.value));\n                    const barWidth = 100 / array.length;\n                    const leftPosition = (index * barWidth) + (barWidth / 2);\n                    const heightPercent = (array[index]?.value / maxValue) * 100;\n                    \n                    return (\n                      <motion.div\n                        key={`comparison-${index}-${i}`}\n                        initial={{ opacity: 0, y: -20, scale: 0 }}\n                        animate={{ \n                          opacity: [0.8, 1, 0.8],\n                          y: [0, -10, 0],\n                          scale: [1, 1.2, 1]\n                        }}\n                        exit={{ opacity: 0, scale: 0 }}\n                        transition={{\n                          duration: 0.6,\n                          repeat: Infinity,\n                          ease: \"easeInOut\"\n                        }}\n                        className=\"absolute\"\n                        style={{\n                          left: `${leftPosition}%`,\n                          bottom: `${heightPercent + 5}%`,\n                          transform: 'translateX(-50%)'\n                        }}\n                      >\n                        <motion.div\n                          className=\"relative\"\n                          animate={{\n                            rotate: [0, 360],\n                          }}\n                          transition={{\n                            duration: 2,\n                            repeat: Infinity,\n                            ease: \"linear\"\n                          }}\n                        >\n                          <div className=\"w-8 h-8 rounded-full bg-gradient-to-br from-cyan-400 to-blue-500 flex items-center justify-center shadow-lg shadow-cyan-500/50 border-2 border-cyan-300\">\n                            <Zap className=\"w-4 h-4 text-white\" />\n                          </div>\n                          <motion.div\n                            className=\"absolute inset-0 rounded-full bg-cyan-400/30\"\n                            animate={{\n                              scale: [1, 1.8, 1],\n                              opacity: [0.6, 0, 0.6]\n                            }}\n                            transition={{\n                              duration: 1.5,\n                              repeat: Infinity,\n                              ease: \"easeOut\"\n                            }}\n                          />\n                        </motion.div>\n                        \n                        <motion.div\n                          className=\"absolute top-full mt-2 left-1/2 -translate-x-1/2 whitespace-nowrap\"\n                          animate={{\n                            opacity: [0.7, 1, 0.7]\n                          }}\n                          transition={{\n                            duration: 1,\n                            repeat: Infinity\n                          }}\n                        >\n                          <div className=\"bg-cyan-500/90 backdrop-blur-sm px-3 py-1 rounded-full border border-cyan-300 shadow-lg shadow-cyan-500/50\">\n                            <span className=\"text-xs font-bold text-white\">\n                              Comparing\n                            </span>\n                          </div>\n                        </motion.div>\n\n                        <motion.div\n                          className=\"absolute w-0.5 bg-gradient-to-b from-cyan-400 to-transparent\"\n                          style={{\n                            height: `${heightPercent}%`,\n                            top: '100%',\n                            left: '50%',\n                            transform: 'translateX(-50%)'\n                          }}\n                          animate={{\n                            opacity: [0.3, 0.8, 0.3],\n                            scaleY: [0.8, 1, 0.8]\n                          }}\n                          transition={{\n                            duration: 0.8,\n                            repeat: Infinity,\n                            ease: \"easeInOut\"\n                          }}\n                        />\n                      </motion.div>\n                    );\n                  })}\n                  \n                  {steps[currentStep].comparingIndices.length === 2 && (\n                    <motion.div\n                      initial={{ opacity: 0 }}\n                      animate={{ opacity: [0.2, 0.5, 0.2] }}\n                      transition={{\n                        duration: 1,\n                        repeat: Infinity,\n                        ease: \"easeInOut\"\n                      }}\n                      className=\"absolute\"\n                      style={{\n                        left: `${((steps[currentStep].comparingIndices[0] * (100 / array.length)) + ((100 / array.length) / 2))}%`,\n                        right: `${100 - ((steps[currentStep].comparingIndices[1] * (100 / array.length)) + ((100 / array.length) / 2))}%`,\n                        top: '20%',\n                        height: '2px',\n                        background: 'linear-gradient(90deg, transparent, #22d3ee, #06b6d4, #22d3ee, transparent)',\n                        boxShadow: '0 0 10px rgba(34, 211, 238, 0.8)'\n                      }}\n                    />\n                  )}\n                </div>\n              )}\n              \n                            {steps.length > 0 && currentStep < steps.length && steps[currentStep].swappingIndices.length === 2 && (\n                <>\n                  {steps[currentStep].swappingIndices.map((idx, trailIdx) => {\n                    const maxValue = Math.max(...array.map(el => el.value));\n                    const barHeight = (array[idx].value / maxValue) * 400;\n                    const barWidth = Math.max(20, 800 / array.length - 4);\n                    const xPosition = idx * (800 / array.length) + (800 / array.length) / 2;\n                    \n                    return (\n                      <motion.div\n                        key={`trail-${idx}-${trailIdx}-${currentStep}`}\n                        className=\"absolute bottom-0 rounded-t-lg pointer-events-none\"\n                        style={{\n                          left: `${xPosition}px`,\n                          width: `${barWidth}px`,\n                          height: `${barHeight}px`,\n                          background: `linear-gradient(to top, ${NEON_COLORS[idx % NEON_COLORS.length]}40, ${NEON_COLORS[idx % NEON_COLORS.length]}10)`,\n                          boxShadow: `0 0 30px ${NEON_COLORS[idx % NEON_COLORS.length]}80, inset 0 0 20px ${NEON_COLORS[idx % NEON_COLORS.length]}40`,\n                          filter: 'blur(8px)',\n                          transformOrigin: 'bottom center'\n                        }}\n                        initial={{ \n                          opacity: 0,\n                          scale: 1,\n                          x: 0\n                        }}\n                        animate={{ \n                          opacity: [0, 0.8, 0.6, 0],\n                          scale: [1, 1.2, 1.3, 1.4],\n                          x: trailIdx === 0 \n                            ? [(steps[currentStep].swappingIndices[1] - idx) * (800 / array.length) * 0.3,\n                               (steps[currentStep].swappingIndices[1] - idx) * (800 / array.length) * 0.6,\n                               (steps[currentStep].swappingIndices[1] - idx) * (800 / array.length)]\n                            : [(steps[currentStep].swappingIndices[0] - idx) * (800 / array.length) * 0.3,\n                               (steps[currentStep].swappingIndices[0] - idx) * (800 / array.length) * 0.6,\n                               (steps[currentStep].swappingIndices[0] - idx) * (800 / array.length)]\n                        }}\n                        transition={{ \n                          duration: 0.6,\n                          ease: \"easeOut\",\n                          times: [0, 0.3, 0.6, 1]\n                        }}\n                      />\n                    );\n                  })}\n                  \n                  {/* Particle burst effect at swap points */}\n                  {steps[currentStep].swappingIndices.map((idx) => {\n                    const maxValue = Math.max(...array.map(el => el.value));\n                    const barHeight = (array[idx].value / maxValue) * 400;\n                    const xPosition = idx * (800 / array.length) + (800 / array.length) / 2;\n                    \n                    return (\n                      <div key={`particles-${idx}-${currentStep}`}>\n                        {[...Array(6)].map((_, particleIdx) => (\n                          <motion.div\n                            key={`particle-${idx}-${particleIdx}-${currentStep}`}\n                            className=\"absolute rounded-full pointer-events-none\"\n                            style={{\n                              left: `${xPosition}px`,\n                              bottom: `${barHeight / 2}px`,\n                              width: '8px',\n                              height: '8px',\n                              background: NEON_COLORS[idx % NEON_COLORS.length],\n                              boxShadow: `0 0 15px ${NEON_COLORS[idx % NEON_COLORS.length]}, 0 0 30px ${NEON_COLORS[idx % NEON_COLORS.length]}80`\n                            }}\n                            initial={{ \n                              opacity: 1,\n                              scale: 0,\n                              x: 0,\n                              y: 0\n                            }}\n                            animate={{ \n                              opacity: [1, 0.8, 0],\n                              scale: [0, 1, 0.5],\n                              x: Math.cos((particleIdx * Math.PI * 2) / 6) * 40,\n                              y: Math.sin((particleIdx * Math.PI * 2) / 6) * 40\n                            }}\n                            transition={{ \n                              duration: 0.8,\n                              ease: \"easeOut\"\n                            }}\n                          />\n                        ))}\n                      </div>\n                    );\n                  })}\n                  \n                  {/* Motion blur streaks */}\n                  {steps[currentStep].swappingIndices.map((idx, streakIdx) => {\n                    const maxValue = Math.max(...array.map(el => el.value));\n                    const barHeight = (array[idx].value / maxValue) * 400;\n                    const xPosition = idx * (800 / array.length) + (800 / array.length) / 2;\n                    const targetIdx = steps[currentStep].swappingIndices[streakIdx === 0 ? 1 : 0];\n                    const direction = targetIdx > idx ? 1 : -1;\n                    \n                    return (\n                      <motion.div\n                        key={`streak-${idx}-${streakIdx}-${currentStep}`}\n                        className=\"absolute bottom-0 pointer-events-none\"\n                        style={{\n                          left: `${xPosition}px`,\n                          height: `${barHeight}px`,\n                          width: '3px',\n                          background: `linear-gradient(${direction > 0 ? '90deg' : '270deg'}, transparent, ${NEON_COLORS[idx % NEON_COLORS.length]}, transparent)`,\n                          filter: 'blur(2px)',\n                          transformOrigin: 'center center'\n                        }}\n                        initial={{ \n                          opacity: 0,\n                          scaleX: 1,\n                          x: 0\n                        }}\n                        animate={{ \n                          opacity: [0, 1, 0.8, 0],\n                          scaleX: [1, 15, 20, 1],\n                          x: direction * 20\n                        }}\n                        transition={{ \n                          duration: 0.5,\n                          ease: \"easeInOut\"\n                        }}\n                      />\n                    );\n                  })}\n                </>\n              )}\n            </div>\n          </div>\n        </div>\n\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.8, delay: 0.4 }}\n          className=\"bg-gray-900/50 backdrop-blur-lg border border-pink-500/30 rounded-xl p-6 shadow-2xl shadow-pink-500/20\"\n        >\n          <div className=\"flex items-center gap-2 text-pink-400 mb-6\">\n            <BarChart3 className=\"w-5 h-5\" />\n            <h3 className=\"font-bold text-lg\">Legend</h3>\n          </div>\n          \n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n            {/* Default State */}\n            <motion.div\n              initial={{ opacity: 0, scale: 0.8 }}\n              animate={{ opacity: 1, scale: 1 }}\n              transition={{ delay: 0.5, type: 'spring' }}\n              className=\"flex items-center gap-3 p-3 bg-gray-800/50 rounded-lg border border-gray-700/50 hover:border-cyan-500/50 transition-all duration-300\"\n            >\n              <motion.div\n                className=\"w-6 h-12 rounded bg-gradient-to-t from-cyan-500 to-cyan-300\"\n                animate={{\n                  boxShadow: [\n                    '0 0 10px rgba(0, 255, 255, 0.5)',\n                    '0 0 20px rgba(0, 255, 255, 0.8)',\n                    '0 0 10px rgba(0, 255, 255, 0.5)'\n                  ]\n                }}\n                transition={{ duration: 2, repeat: Infinity }}\n              />\n              <div>\n                <div className=\"text-sm font-semibold text-white\">Default</div>\n                <div className=\"text-xs text-gray-400\">Unsorted</div>\n              </div>\n            </motion.div>\n\n            {/* Comparing State */}\n            <motion.div\n              initial={{ opacity: 0, scale: 0.8 }}\n              animate={{ opacity: 1, scale: 1 }}\n              transition={{ delay: 0.6, type: 'spring' }}\n              className=\"flex items-center gap-3 p-3 bg-gray-800/50 rounded-lg border border-gray-700/50 hover:border-yellow-500/50 transition-all duration-300\"\n            >\n              <motion.div\n                className=\"w-6 h-12 rounded bg-gradient-to-t from-yellow-500 to-yellow-300\"\n                animate={{\n                  boxShadow: [\n                    '0 0 15px rgba(255, 255, 0, 0.6)',\n                    '0 0 30px rgba(255, 255, 0, 1)',\n                    '0 0 15px rgba(255, 255, 0, 0.6)'\n                  ],\n                  scale: [1, 1.1, 1]\n                }}\n                transition={{ duration: 1, repeat: Infinity }}\n              />\n              <div>\n                <div className=\"text-sm font-semibold text-white\">Comparing</div>\n                <div className=\"text-xs text-gray-400\">Active</div>\n              </div>\n            </motion.div>\n\n            {/* Swapping State */}\n            <motion.div\n              initial={{ opacity: 0, scale: 0.8 }}\n              animate={{ opacity: 1, scale: 1 }}\n              transition={{ delay: 0.7, type: 'spring' }}\n              className=\"flex items-center gap-3 p-3 bg-gray-800/50 rounded-lg border border-gray-700/50 hover:border-red-500/50 transition-all duration-300\"\n            >\n              <motion.div\n                className=\"w-6 h-12 rounded bg-gradient-to-t from-red-500 to-red-300\"\n                animate={{\n                  boxShadow: [\n                    '0 0 15px rgba(255, 0, 102, 0.6)',\n                    '0 0 30px rgba(255, 0, 102, 1)',\n                    '0 0 15px rgba(255, 0, 102, 0.6)'\n                  ],\n                  x: [-2, 2, -2]\n                }}\n                transition={{ duration: 0.8, repeat: Infinity }}\n              />\n              <div>\n                <div className=\"text-sm font-semibold text-white\">Swapping</div>\n                <div className=\"text-xs text-gray-400\">Moving</div>\n              </div>\n            </motion.div>\n\n            {/* Sorted State */}\n            <motion.div\n              initial={{ opacity: 0, scale: 0.8 }}\n              animate={{ opacity: 1, scale: 1 }}\n              transition={{ delay: 0.8, type: 'spring' }}\n              className=\"flex items-center gap-3 p-3 bg-gray-800/50 rounded-lg border border-gray-700/50 hover:border-green-500/50 transition-all duration-300\"\n            >\n              <motion.div\n                className=\"w-6 h-12 rounded bg-gradient-to-t from-green-500 to-green-300\"\n                animate={{\n                  boxShadow: [\n                    '0 0 10px rgba(0, 255, 170, 0.5)',\n                    '0 0 20px rgba(0, 255, 170, 0.8)',\n                    '0 0 10px rgba(0, 255, 170, 0.5)'\n                  ]\n                }}\n                transition={{ duration: 2, repeat: Infinity }}\n              />\n              <div>\n                <div className=\"text-sm font-semibold text-white\">Sorted</div>\n                <div className=\"text-xs text-gray-400\">Complete</div>\n              </div>\n            </motion.div>\n          </div>\n\n          {/* Additional Info */}\n          <motion.div\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            transition={{ delay: 1 }}\n            className=\"mt-6 pt-6 border-t border-gray-700/50\"\n          >\n            <div className=\"flex items-center justify-center gap-6 text-xs text-gray-400\">\n              <motion.div\n                className=\"flex items-center gap-2\"\n                whileHover={{ scale: 1.05 }}\n              >\n                <motion.div\n                  animate={{ rotate: 360 }}\n                  transition={{ duration: 3, repeat: Infinity, ease: 'linear' }}\n                >\n                  <Zap className=\"w-4 h-4 text-cyan-400\" />\n                </motion.div>\n                <span>Real-time Animation</span>\n              </motion.div>\n              <motion.div\n                className=\"flex items-center gap-2\"\n                whileHover={{ scale: 1.05 }}\n              >\n                <motion.div\n                  animate={{ scale: [1, 1.2, 1] }}\n                  transition={{ duration: 2, repeat: Infinity }}\n                >\n                  <BarChart3 className=\"w-4 h-4 text-purple-400\" />\n                </motion.div>\n                <span>Interactive Controls</span>\n              </motion.div>\n            </div>\n          </motion.div>\n        </motion.div>\n      </div>\n    </div>\n  );\n}",
  "error": null,
  "overall_score": 41,
  "code_quality_score": 12,
  "architecture_score": 10,
  "performance_score": 8,
  "accessibility_score": 11,
  "metadata": {
    "document_id": "eval_room_7106ee6542d5",
    "prompt_category": "creative",
    "prompt_complexity": 9.0
  },
  "raw_response": {
    "document_id": "eval_room_7106ee6542d5",
    "mode": "parallel",
    "prompt": "Build a captivating algorithm visualizer with neon colored bars, smooth height transitions, glowing comparison indicators, trail effects during swaps, and a futuristic dashboard design with animated controls",
    "content": "import { useState, useCallback } from 'react';import { useEffect, useRef } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Slider } from '@/components/ui/slider';\nimport { Play, Pause, RotateCcw, Zap, BarChart3 } from 'lucide-react';\nimport { TrendingUp, Repeat, Activity } from 'lucide-react';\nimport { motion } from 'framer-motion';\n\ninterface ArrayElement {\n  value: number;\n  id: string;\n  isComparing?: boolean;\n  isSwapping?: boolean;\n  isSorted?: boolean;\n}\n\ninterface AlgorithmStep {\n  array: ArrayElement[];\n  comparingIndices: number[];\n  swappingIndices: number[];\n  sortedIndices: number[];\n}\n\ntype AlgorithmType = 'bubble' | 'quick' | 'merge' | 'insertion';\n\nconst NEON_COLORS = [\n  '#00ffff',\n  '#ff00ff', \n  '#00ff00',\n  '#ffff00',\n  '#ff0066',\n  '#00ffaa'\n];\n\nconst mockAlgorithms = [\n  { id: 'bubble', name: 'Bubble Sort', complexity: 'O(n\u00b2)' },\n  { id: 'quick', name: 'Quick Sort', complexity: 'O(n log n)' },\n  { id: 'merge', name: 'Merge Sort', complexity: 'O(n log n)' },\n  { id: 'insertion', name: 'Insertion Sort', complexity: 'O(n\u00b2)' }\n];\n\nexport default function AlgorithmVisualizer() {\n  const [array, setArray] = useState<ArrayElement[]>([]);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [speed, setSpeed] = useState([50]);\n  const [arraySize, setArraySize] = useState([20]);\n  const [selectedAlgorithm, setSelectedAlgorithm] = useState<AlgorithmType>('bubble');\n  const [currentStep, setCurrentStep] = useState(0);\n  const [steps, setSteps] = useState<AlgorithmStep[]>([]);\n  const [comparisons, setComparisons] = useState(0);\n  const [swaps, setSwaps] = useState(0);\n\n  const generateRandomArray = useCallback(() => {\n    const newArray: ArrayElement[] = Array.from({ length: arraySize[0] }, (_, index) => ({\n      value: Math.floor(Math.random() * 100) + 1,\n      id: `element-${Date.now()}-${index}`,\n      isComparing: false,\n      isSwapping: false,\n      isSorted: false\n    }));\n    setArray(newArray);\n    setSteps([]);\n    setCurrentStep(0);\n    setIsPlaying(false);\n  }, [arraySize]);\n\n  const resetVisualization = useCallback(() => {\n\n    setIsPlaying(false);\n    setCurrentStep(0);\n    setSteps([]);\n    generateRandomArray();  }, [generateRandomArray]);\n\n  // Animation control using useEffect\n  const animationRef = useRef<NodeJS.Timeout | null>(null);\n\n  useEffect(() => {\n    if (isPlaying && currentStep < steps.length) {\n      const delay = 1000 - (speed[0] * 9.5); // Convert speed slider to delay (50ms to 525ms)\n      animationRef.current = setTimeout(() => {\n        setCurrentStep(prev => prev + 1);\n      }, delay);\n    } else if (currentStep >= steps.length && steps.length > 0) {\n      setIsPlaying(false);\n    }\n\n    return () => {\n      if (animationRef.current) {\n        clearTimeout(animationRef.current);\n      }\n    };\n  }, [isPlaying, currentStep, steps.length, speed]);\n\n  // Update array display based on current step\n  useEffect(() => {\n    if (steps.length > 0 && currentStep < steps.length) {\n      setArray(steps[currentStep].array);\n    }\n  }, [currentStep, steps]);\n\n  const startVisualization = useCallback(() => {\n    if (steps.length === 0) return;\n    setIsPlaying(true);\n  }, [steps, speed, currentStep]);\n\n  const pauseVisualization = useCallback(() => {\n\n    setIsPlaying(false);\n  \n  }, []);\n\n  const generateSortingSteps = useCallback((algorithm: AlgorithmType) => {\n    if (array.length === 0) return;\n\n    const newSteps: AlgorithmStep[] = [];\n    const arr = [...array];\n\n    const addStep = (\n      comparingIndices: number[] = [],\n      swappingIndices: number[] = [],\n      sortedIndices: number[] = []\n    ) => {\n      newSteps.push({\n        array: arr.map((el, idx) => ({\n          ...el,\n          isComparing: comparingIndices.includes(idx),\n          isSwapping: swappingIndices.includes(idx),\n          isSorted: sortedIndices.includes(idx)\n        })),\n        comparingIndices,\n        swappingIndices,\n        sortedIndices\n      });\n    };\n\n    const swap = (i: number, j: number) => {\n      [arr[i], arr[j]] = [arr[j], arr[i]];\n    };\n\n    switch (algorithm) {\n      case 'bubble': {\n        const sorted: number[] = [];\n        for (let i = 0; i < arr.length - 1; i++) {\n          for (let j = 0; j < arr.length - i - 1; j++) {\n            addStep([j, j + 1], [], sorted);\n            if (arr[j].value > arr[j + 1].value) {\n              addStep([j, j + 1], [j, j + 1], sorted);\n              swap(j, j + 1);\n              addStep([], [], sorted);\n            }\n          }\n          sorted.push(arr.length - i - 1);\n          addStep([], [], sorted);\n        }\n        sorted.push(0);\n        addStep([], [], sorted);\n        break;\n      }\n\n      case 'insertion': {\n        const sorted: number[] = [0];\n        addStep([], [], sorted);\n        for (let i = 1; i < arr.length; i++) {\n          let j = i;\n          addStep([j, j - 1], [], sorted);\n          while (j > 0 && arr[j].value < arr[j - 1].value) {\n            addStep([j, j - 1], [j, j - 1], sorted);\n            swap(j, j - 1);\n            j--;\n            addStep([j, j + 1], [], sorted);\n          }\n          sorted.push(i);\n          addStep([], [], sorted);\n        }\n        break;\n      }\n\n      case 'quick': {\n        const sorted: number[] = [];\n        const quickSort = (low: number, high: number) => {\n          if (low < high) {\n            const pivotIdx = partition(low, high);\n            sorted.push(pivotIdx);\n            addStep([], [], sorted);\n            quickSort(low, pivotIdx - 1);\n            quickSort(pivotIdx + 1, high);\n          } else if (low === high) {\n            sorted.push(low);\n            addStep([], [], sorted);\n          }\n        };\n\n        const partition = (low: number, high: number): number => {\n          const pivot = arr[high].value;\n          let i = low - 1;\n          \n          for (let j = low; j < high; j++) {\n            addStep([j, high], [], sorted);\n            if (arr[j].value < pivot) {\n              i++;\n              if (i !== j) {\n                addStep([j, high], [i, j], sorted);\n                swap(i, j);\n              }\n            }\n          }\n          addStep([high], [i + 1, high], sorted);\n          swap(i + 1, high);\n          return i + 1;\n        };\n\n        quickSort(0, arr.length - 1);\n        break;\n      }\n\n      case 'merge': {\n        const sorted: number[] = [];\n        const mergeSort = (left: number, right: number) => {\n          if (left >= right) {\n            return;\n          }\n          \n          const mid = Math.floor((left + right) / 2);\n          mergeSort(left, mid);\n          mergeSort(mid + 1, right);\n          merge(left, mid, right);\n        };\n\n        const merge = (left: number, mid: number, right: number) => {\n          const leftArr = arr.slice(left, mid + 1);\n          const rightArr = arr.slice(mid + 1, right + 1);\n          \n          let i = 0, j = 0, k = left;\n          \n          while (i < leftArr.length && j < rightArr.length) {\n            addStep([left + i, mid + 1 + j], [], sorted);\n            if (leftArr[i].value <= rightArr[j].value) {\n              arr[k] = leftArr[i];\n              i++;\n            } else {\n              arr[k] = rightArr[j];\n              j++;\n            }\n            addStep([], [k], sorted);\n            k++;\n          }\n          \n          while (i < leftArr.length) {\n            arr[k] = leftArr[i];\n            addStep([], [k], sorted);\n            i++;\n            k++;\n          }\n          \n          while (j < rightArr.length) {\n            arr[k] = rightArr[j];\n            addStep([], [k], sorted);\n            j++;\n            k++;\n          }\n\n          for (let idx = left; idx <= right; idx++) {\n            if (!sorted.includes(idx)) {\n              sorted.push(idx);\n            }\n          }\n          addStep([], [], sorted);\n        };\n\n        mergeSort(0, arr.length - 1);\n        break;\n      }\n    }\n\n    setSteps(newSteps);\n    setCurrentStep(0);\n  }, [array]);\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-gray-900 via-purple-900 to-gray-900 p-8\">\n      <div className=\"max-w-7xl mx-auto space-y-8\">\n        <motion.div\n          initial={{ opacity: 0, y: -20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.8 }}\n          className=\"text-center space-y-4\"\n        >\n          <motion.h1\n            className=\"text-6xl font-bold bg-gradient-to-r from-cyan-400 via-purple-400 to-pink-400 bg-clip-text text-transparent\"\n            animate={{\n              textShadow: [\n                '0 0 20px rgba(0, 255, 255, 0.5)',\n                '0 0 40px rgba(255, 0, 255, 0.5)',\n                '0 0 20px rgba(0, 255, 255, 0.5)'\n              ]\n            }}\n            transition={{ duration: 2, repeat: Infinity }}\n          >\n            Algorithm Visualizer\n          </motion.h1>\n          \n          <div className=\"flex items-center justify-center gap-4\">\n            <motion.div\n              initial={{ scale: 0 }}\n              animate={{ scale: 1 }}\n              transition={{ delay: 0.3, type: 'spring' }}\n              className=\"px-6 py-2 bg-purple-500/20 border border-purple-400/50 rounded-full backdrop-blur-sm\"\n            >\n              <span className=\"text-2xl font-semibold text-purple-300\">\n                {mockAlgorithms.find(a => a.id === selectedAlgorithm)?.name}\n              </span>\n            </motion.div>\n            \n            <motion.div\n              initial={{ scale: 0 }}\n              animate={{ scale: 1 }}\n              transition={{ delay: 0.5, type: 'spring' }}\n              className=\"px-4 py-2 bg-cyan-500/20 border border-cyan-400/50 rounded-full backdrop-blur-sm relative overflow-hidden\"\n            >\n              <motion.div\n                className=\"absolute inset-0 bg-gradient-to-r from-transparent via-cyan-400/20 to-transparent\"\n                animate={{ x: ['-100%', '100%'] }}\n                transition={{ duration: 2, repeat: Infinity, ease: 'linear' }}\n              />\n              <div className=\"relative flex items-center gap-2\">\n                <Zap className=\"w-4 h-4 text-cyan-400\" />\n                <span className=\"text-lg font-mono text-cyan-300\">\n                  {mockAlgorithms.find(a => a.id === selectedAlgorithm)?.complexity}\n                </span>\n              </div>\n            </motion.div>\n          </div>\n        </motion.div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-6\">\n          <div className=\"lg:col-span-1 space-y-6\">\n            <motion.div\n              initial={{ opacity: 0, x: -50 }}\n              animate={{ opacity: 1, x: 0 }}\n              className=\"bg-gray-900/50 backdrop-blur-lg border border-cyan-500/30 rounded-xl p-6 shadow-2xl shadow-cyan-500/20\"\n            >\n              <div className=\"space-y-6\">\n                {/* Algorithm Selection */}\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center gap-2 text-cyan-400 mb-4\">\n                    <Zap className=\"w-5 h-5\" />\n                    <h3 className=\"font-bold text-lg\">Algorithm</h3>\n                  </div>\n                  <div className=\"grid grid-cols-1 gap-2\">\n                    {mockAlgorithms.map((algo) => (\n                      <motion.button\n                        key={algo.id}\n                        whileHover={{ scale: 1.02 }}\n                        whileTap={{ scale: 0.98 }}\n                        onClick={() => setSelectedAlgorithm(algo.id as AlgorithmType)}\n                        className={`p-3 rounded-lg border transition-all duration-300 text-left ${\n                          selectedAlgorithm === algo.id\n                            ? 'bg-cyan-500/20 border-cyan-400 shadow-lg shadow-cyan-500/50'\n                            : 'bg-gray-800/50 border-gray-700 hover:border-cyan-500/50'\n                        }`}\n                      >\n                        <div className=\"font-semibold text-white\">{algo.name}</div>\n                        <div className=\"text-xs text-gray-400 mt-1\">{algo.complexity}</div>\n                      </motion.button>\n                    ))}\n                  </div>\n                </div>\n\n                {/* Array Size Control */}\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center gap-2 text-purple-400\">\n                      <BarChart3 className=\"w-5 h-5\" />\n                      <span className=\"font-semibold\">Array Size</span>\n                    </div>\n                    <span className=\"text-white font-bold bg-purple-500/20 px-3 py-1 rounded-full border border-purple-400/30\">\n                      {arraySize[0]}\n                    </span>\n                  </div>\n                  <Slider\n                    value={arraySize}\n                    onValueChange={setArraySize}\n                    min={5}\n                    max={50}\n                    step={1}\n                    className=\"cursor-pointer\"\n                    disabled={isPlaying}\n                  />\n                </div>\n\n                {/* Speed Control */}\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center gap-2 text-pink-400\">\n                      <Zap className=\"w-5 h-5\" />\n                      <span className=\"font-semibold\">Speed</span>\n                    </div>\n                    <span className=\"text-white font-bold bg-pink-500/20 px-3 py-1 rounded-full border border-pink-400/30\">\n                      {speed[0]}%\n                    </span>\n                  </div>\n                  <Slider\n                    value={speed}\n                    onValueChange={setSpeed}\n                    min={10}\n                    max={100}\n                    step={10}\n                    className=\"cursor-pointer\"\n                  />\n                </div>\n\n                {/* Control Buttons */}\n                <div className=\"space-y-3 pt-4 border-t border-gray-700/50\">\n                  <Button\n                    onClick={isPlaying ? pauseVisualization : startVisualization}\n                    disabled={steps.length === 0 || currentStep >= steps.length}\n                    className=\"w-full bg-gradient-to-r from-cyan-500 to-blue-500 hover:from-cyan-600 hover:to-blue-600 text-white font-bold py-6 rounded-lg shadow-lg shadow-cyan-500/50 transition-all duration-300\"\n                  >\n                    {isPlaying ? (\n                      <>\n                        <Pause className=\"w-5 h-5 mr-2\" />\n                        Pause\n                      </>\n                    ) : (\n                      <>\n                        <Play className=\"w-5 h-5 mr-2\" />\n                        {currentStep === 0 ? 'Start' : 'Resume'}\n                      </>\n                    )}\n                  </Button>\n\n                  <Button\n                    onClick={resetVisualization}\n                    variant=\"outline\"\n                    className=\"w-full border-2 border-purple-500/50 bg-purple-500/10 hover:bg-purple-500/20 text-purple-300 font-bold py-6 rounded-lg shadow-lg shadow-purple-500/30 transition-all duration-300\"\n                  >\n                    <RotateCcw className=\"w-5 h-5 mr-2\" />\n                    Reset\n                  </Button>\n\n                  <Button\n                    onClick={() => generateSortingSteps(selectedAlgorithm)}\n                    disabled={isPlaying || array.length === 0}\n                    className=\"w-full bg-gradient-to-r from-pink-500 to-purple-500 hover:from-pink-600 hover:to-purple-600 text-white font-bold py-6 rounded-lg shadow-lg shadow-pink-500/50 transition-all duration-300\"\n                  >\n                    <Zap className=\"w-5 h-5 mr-2\" />\n                    Generate Steps\n                  </Button>\n                </div>\n\n                {/* Stats Display */}\n                <div className=\"pt-4 border-t border-gray-700/50 space-y-2\">\n                  <div className=\"flex justify-between text-sm\">\n                    <span className=\"text-gray-400\">Current Step:</span>\n                    <span className=\"text-cyan-400 font-bold\">{currentStep} / {steps.length}</span>\n                  </div>\n                  <div className=\"flex justify-between text-sm\">\n                    <span className=\"text-gray-400\">Status:</span>\n                    <span className={`font-bold ${isPlaying ? 'text-green-400' : 'text-gray-400'}`}>\n                      {isPlaying ? 'Running' : 'Idle'}\n                    </span>\n                  </div>\n                </div>\n              </div>\n            </motion.div>\n            \n            <div className=\"bg-gray-900/50 backdrop-blur-lg border border-cyan-500/30 rounded-xl p-6 shadow-2xl shadow-cyan-500/20\">\n              <div className=\"space-y-6\">\n                <div>\n                  <h3 className=\"text-sm font-semibold text-cyan-400 mb-3 flex items-center gap-2\">\n                    <Zap className=\"w-4 h-4\" />\n                    Algorithm\n                  </h3>\n                  <div className=\"grid grid-cols-1 gap-2\">\n                    {mockAlgorithms.map((algo) => (\n                      <motion.button\n                        key={algo.id}\n                        onClick={() => setSelectedAlgorithm(algo.id as AlgorithmType)}\n                        className={`relative p-3 rounded-lg text-left transition-all duration-300 ${\n                          selectedAlgorithm === algo.id\n                            ? 'bg-cyan-500/20 border-2 border-cyan-400 shadow-lg shadow-cyan-500/50'\n                            : 'bg-gray-800/50 border border-gray-700 hover:border-cyan-500/50 hover:shadow-md hover:shadow-cyan-500/30'\n                        }`}\n                        whileHover={{ scale: 1.02 }}\n                        whileTap={{ scale: 0.98 }}\n                      >\n                        <div className=\"flex flex-col gap-1\">\n                          <span className={`text-sm font-medium ${\n                            selectedAlgorithm === algo.id ? 'text-cyan-300' : 'text-gray-300'\n                          }`}>\n                            {algo.name}\n                          </span>\n                          <span className={`text-xs ${\n                            selectedAlgorithm === algo.id ? 'text-cyan-400/80' : 'text-gray-500'\n                          }`}>\n                            {algo.complexity}\n                          </span>\n                        </div>\n                        {selectedAlgorithm === algo.id && (\n                          <motion.div\n                            className=\"absolute inset-0 rounded-lg bg-cyan-400/10\"\n                            layoutId=\"algorithmSelector\"\n                            transition={{ type: \"spring\", bounce: 0.2, duration: 0.6 }}\n                          />\n                        )}\n                      </motion.button>\n                    ))}\n                  </div>\n                </div>\n\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <label className=\"text-cyan-400 text-sm font-medium flex items-center gap-2\">\n                      <Zap className=\"w-4 h-4\" />\n                      Speed\n                    </label>\n                    <span className=\"text-cyan-300 text-xs\">{speed[0]}ms</span>\n                  </div>\n                  <Slider\n                    value={speed}\n                    onValueChange={setSpeed}\n                    min={10}\n                    max={200}\n                    step={10}\n                    className=\"[&_[role=slider]]:h-4 [&_[role=slider]]:w-4 [&_[role=slider]]:bg-cyan-400 [&_[role=slider]]:border-2 [&_[role=slider]]:border-cyan-300 [&_[role=slider]]:shadow-[0_0_15px_rgba(34,211,238,0.8)] [&_[role=slider]]:transition-all [&_[role=slider]]:hover:shadow-[0_0_25px_rgba(34,211,238,1)] [&_.relative]:h-2 [&_.relative]:bg-gray-800 [&_.relative]:rounded-full [&_.relative]:border [&_.relative]:border-cyan-500/30 [&_.relative_.bg-primary]:bg-gradient-to-r [&_.relative_.bg-primary]:from-cyan-500 [&_.relative_.bg-primary]:to-purple-500 [&_.relative_.bg-primary]:shadow-[0_0_10px_rgba(34,211,238,0.5)]\"\n                  /></parameter>\n                </div>\n\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <label className=\"text-cyan-400 text-sm font-medium flex items-center gap-2\">\n                      <BarChart3 className=\"w-4 h-4\" />\n                      Array Size\n                    </label>\n                    <span className=\"text-cyan-300 text-xs\">{arraySize[0]}</span>\n                  </div>\n                  <Slider\n                    value={arraySize}\n                    onValueChange={setArraySize}\n                    min={5}\n                    max={50}\n                    step={1}\n                    disabled={isPlaying}\n                    className=\"[&_[role=slider]]:bg-cyan-400 [&_[role=slider]]:border-cyan-300 [&_[role=slider]]:shadow-lg [&_[role=slider]]:shadow-cyan-400/50 [&_[role=slider]]:h-4 [&_[role=slider]]:w-4 [&>span]:bg-cyan-500/30 [&>span>span]:bg-gradient-to-r [&>span>span]:from-cyan-500 [&>span>span]:to-purple-500\"\n                  />\n                </div>\n\n                <div className=\"flex gap-3 pt-4\">\n                  <motion.div className=\"relative flex-1\">\n                    <Button\n                      onClick={isPlaying ? pauseVisualization : startVisualization}\n                      disabled={array.length === 0 || (steps.length === 0 && !isPlaying)}\n                      className=\"w-full relative overflow-hidden bg-gradient-to-r from-cyan-500 to-purple-500 hover:from-cyan-400 hover:to-purple-400 text-white font-bold py-6 rounded-lg transition-all duration-300 disabled:opacity-50 disabled:cursor-not-allowed group\"\n                      whileHover={{ scale: 1.05 }}\n                      whileTap={{ scale: 0.95 }}\n                    >\n                      <motion.div\n                        className=\"absolute inset-0 bg-gradient-to-r from-cyan-400 to-purple-400 opacity-0 group-hover:opacity-100 blur-xl transition-opacity duration-300\"\n                        animate={{\n                          opacity: isPlaying ? [0.5, 0.8, 0.5] : 0\n                        }}\n                        transition={{\n                          duration: 2,\n                          repeat: Infinity,\n                          ease: \"easeInOut\"\n                        }}\n                      />\n                      \n                      <motion.div\n                        className=\"relative flex items-center justify-center gap-2\"\n                        initial={false}\n                        animate={{\n                          scale: isPlaying ? [1, 1.1, 1] : 1\n                        }}\n                        transition={{\n                          duration: 1,\n                          repeat: isPlaying ? Infinity : 0\n                        }}\n                      >\n                        <motion.div\n                          initial={false}\n                          animate={{\n                            rotate: isPlaying ? 0 : 0,\n                            scale: isPlaying ? 1 : 1\n                          }}\n                          transition={{ duration: 0.3 }}\n                        >\n                          {isPlaying ? (\n                            <motion.div\n                              key=\"pause\"\n                              initial={{ scale: 0, rotate: -180 }}\n                              animate={{ scale: 1, rotate: 0 }}\n                              exit={{ scale: 0, rotate: 180 }}\n                              transition={{ duration: 0.3 }}\n                            >\n                              <Pause className=\"w-5 h-5\" />\n                            </motion.div>\n                          ) : (\n                            <motion.div\n                              key=\"play\"\n                              initial={{ scale: 0, rotate: 180 }}\n                              animate={{ scale: 1, rotate: 0 }}\n                              exit={{ scale: 0, rotate: -180 }}\n                              transition={{ duration: 0.3 }}\n                            >\n                              <Play className=\"w-5 h-5\" />\n                            </motion.div>\n                          )}\n                        </motion.div>\n                        \n                        <span className=\"text-sm font-bold tracking-wider\">\n                          {isPlaying ? 'PAUSE' : 'PLAY'}\n                        </span>\n                      </motion.div>\n\n                      <motion.div\n                        className=\"absolute inset-0 rounded-lg\"\n                        style={{\n                          boxShadow: isPlaying \n                            ? '0 0 20px rgba(0, 255, 255, 0.6), 0 0 40px rgba(168, 85, 247, 0.4)'\n                            : '0 0 10px rgba(0, 255, 255, 0.3)'\n                        }}\n                        animate={{\n                          boxShadow: isPlaying\n                            ? [\n                                '0 0 20px rgba(0, 255, 255, 0.6), 0 0 40px rgba(168, 85, 247, 0.4)',\n                                '0 0 30px rgba(168, 85, 247, 0.6), 0 0 50px rgba(0, 255, 255, 0.4)',\n                                '0 0 20px rgba(0, 255, 255, 0.6), 0 0 40px rgba(168, 85, 247, 0.4)'\n                              ]\n                            : '0 0 10px rgba(0, 255, 255, 0.3)'\n                        }}\n                        transition={{\n                          duration: 2,\n                          repeat: Infinity,\n                          ease: \"easeInOut\"\n                        }}\n                      />\n                    </Button>\n                  </motion.div></parameter>\n                  <motion.button\n                    onClick={isPlaying ? pauseVisualization : startVisualization}\n                    whileHover={{ scale: 1.05 }}\n                    whileTap={{ scale: 0.95 }}\n                    className=\"flex-1 relative overflow-hidden bg-gradient-to-r from-cyan-500 to-purple-500 text-white font-bold py-3 px-6 rounded-lg shadow-lg shadow-cyan-500/50 hover:shadow-cyan-500/80 transition-all duration-300\"\n                  >\n                    <motion.div\n                      className=\"absolute inset-0 bg-gradient-to-r from-transparent via-white/30 to-transparent\"\n                      animate={{ x: ['-100%', '100%'] }}\n                      transition={{ duration: 1.5, repeat: Infinity, ease: 'linear' }}\n                    />\n                    <div className=\"relative flex items-center justify-center gap-2\">\n                      {isPlaying ? <Pause className=\"w-5 h-5\" /> : <Play className=\"w-5 h-5\" />}\n                      <span className=\"text-sm font-bold tracking-wider\">\n                        {isPlaying ? 'PAUSE' : 'START'}\n                      </span>\n                    </div>\n                  </motion.button>\n\n                  <motion.button\n                    onClick={resetVisualization}\n                    whileHover={{ scale: 1.05, rotate: 180 }}\n                    whileTap={{ scale: 0.95 }}\n                    transition={{ type: 'spring', stiffness: 300 }}\n                    className=\"relative overflow-hidden bg-gradient-to-r from-pink-500 to-orange-500 text-white font-bold py-3 px-6 rounded-lg shadow-lg shadow-pink-500/50 hover:shadow-pink-500/80\"\n                  >\n                    <motion.div\n                      className=\"absolute inset-0\"\n                      animate={{\n                        boxShadow: [\n                          '0 0 20px rgba(236, 72, 153, 0.5)',\n                          '0 0 40px rgba(236, 72, 153, 0.8)',\n                          '0 0 20px rgba(236, 72, 153, 0.5)'\n                        ]\n                      }}\n                      transition={{ duration: 2, repeat: Infinity }}\n                    />\n                    <div className=\"relative flex items-center justify-center gap-2\">\n                      <RotateCcw className=\"w-5 h-5\" />\n                      <span className=\"text-sm font-bold tracking-wider\">RESET</span>\n                    </div>\n                  </motion.button>\n                </div>\n              </div>\n            </div>\n\n            <motion.div\n              initial={{ opacity: 0, x: -50 }}\n              animate={{ opacity: 1, x: 0 }}\n              transition={{ delay: 0.2 }}\n              className=\"bg-gray-900/50 backdrop-blur-lg border border-purple-500/30 rounded-xl p-6 shadow-2xl shadow-purple-500/20\"\n            >\n              <div className=\"space-y-4\">\n                <div className=\"flex items-center gap-2 text-purple-400 mb-4\">\n                  <Activity className=\"w-5 h-5\" />\n                  <h3 className=\"font-bold text-lg\">Statistics</h3>\n                </div>\n\n                {/* Progress Bar */}\n                <div className=\"space-y-2\">\n                  <div className=\"flex items-center justify-between text-sm\">\n                    <span className=\"text-gray-400\">Progress</span>\n                    <span className=\"text-white font-mono\">\n                      {steps.length > 0 ? Math.round((currentStep / steps.length) * 100) : 0}%\n                    </span>\n                  </div>\n                  <div className=\"relative h-3 bg-gray-800 rounded-full border border-purple-500/30 overflow-hidden\">\n                    <motion.div\n                      className=\"absolute inset-y-0 left-0 bg-gradient-to-r from-purple-500 via-pink-500 to-cyan-500 rounded-full\"\n                      initial={{ width: 0 }}\n                      animate={{ \n                        width: steps.length > 0 ? `${(currentStep / steps.length) * 100}%` : '0%'\n                      }}\n                      transition={{ duration: 0.3 }}\n                    />\n                    <motion.div\n                      className=\"absolute inset-0 bg-gradient-to-r from-transparent via-white/30 to-transparent\"\n                      animate={{ x: ['-100%', '100%'] }}\n                      transition={{ duration: 1.5, repeat: Infinity, ease: 'linear' }}\n                    />\n                  </div>\n                  <div className=\"flex items-center justify-between text-xs text-gray-500\">\n                    <span>Step {currentStep}</span>\n                    <span>of {steps.length}</span>\n                  </div>\n                </div>\n\n                {/* Comparisons Counter */}\n                <motion.div\n                  className=\"relative p-4 bg-gradient-to-br from-cyan-500/10 to-cyan-500/5 border border-cyan-500/30 rounded-lg overflow-hidden group hover:shadow-lg hover:shadow-cyan-500/20 transition-all duration-300\"\n                  whileHover={{ scale: 1.02 }}\n                >\n                  <motion.div\n                    className=\"absolute inset-0 bg-gradient-to-r from-transparent via-cyan-400/10 to-transparent\"\n                    animate={{ x: ['-100%', '100%'] }}\n                    transition={{ duration: 3, repeat: Infinity, ease: 'linear' }}\n                  />\n                  <div className=\"relative flex items-center justify-between\">\n                    <div className=\"flex items-center gap-3\">\n                      <div className=\"p-2 bg-cyan-500/20 rounded-lg border border-cyan-400/30\">\n                        <TrendingUp className=\"w-5 h-5 text-cyan-400\" />\n                      </div>\n                      <div>\n                        <div className=\"text-xs text-gray-400 uppercase tracking-wide\">Comparisons</div>\n                        <motion.div\n                          key={comparisons}\n                          initial={{ scale: 1.5, color: '#22d3ee' }}\n                          animate={{ scale: 1, color: '#ffffff' }}\n                          className=\"text-2xl font-bold font-mono\"\n                        >\n                          {comparisons}\n                        </motion.div>\n                      </div>\n                    </div>\n                    <motion.div\n                      className=\"text-cyan-400 text-xs font-semibold px-3 py-1 bg-cyan-500/20 rounded-full border border-cyan-400/30\"\n                      animate={{ opacity: [0.5, 1, 0.5] }}\n                      transition={{ duration: 2, repeat: Infinity }}\n                    >\n                      ACTIVE\n                    </motion.div>\n                  </div>\n                </motion.div>\n\n                {/* Swaps Counter */}\n                <motion.div\n                  className=\"relative p-4 bg-gradient-to-br from-pink-500/10 to-pink-500/5 border border-pink-500/30 rounded-lg overflow-hidden group hover:shadow-lg hover:shadow-pink-500/20 transition-all duration-300\"\n                  whileHover={{ scale: 1.02 }}\n                >\n                  <motion.div\n                    className=\"absolute inset-0 bg-gradient-to-r from-transparent via-pink-400/10 to-transparent\"\n                    animate={{ x: ['-100%', '100%'] }}\n                    transition={{ duration: 3, repeat: Infinity, ease: 'linear', delay: 1.5 }}\n                  />\n                  <div className=\"relative flex items-center justify-between\">\n                    <div className=\"flex items-center gap-3\">\n                      <div className=\"p-2 bg-pink-500/20 rounded-lg border border-pink-400/30\">\n                        <Repeat className=\"w-5 h-5 text-pink-400\" />\n                      </div>\n                      <div>\n                        <div className=\"text-xs text-gray-400 uppercase tracking-wide\">Swaps</div>\n                        <motion.div\n                          key={swaps}\n                          initial={{ scale: 1.5, color: '#ec4899' }}\n                          animate={{ scale: 1, color: '#ffffff' }}\n                          className=\"text-2xl font-bold font-mono\"\n                        >\n                          {swaps}\n                        </motion.div>\n                      </div>\n                    </div>\n                    <motion.div\n                      className=\"text-pink-400 text-xs font-semibold px-3 py-1 bg-pink-500/20 rounded-full border border-pink-400/30\"\n                      animate={{ opacity: [0.5, 1, 0.5] }}\n                      transition={{ duration: 2, repeat: Infinity, delay: 1 }}\n                    >\n                      TRACK\n                    </motion.div>\n                  </div>\n                </motion.div>\n\n                {/* Array Info */}\n                <div className=\"grid grid-cols-2 gap-3 pt-2\">\n                  <div className=\"p-3 bg-gray-800/50 border border-gray-700 rounded-lg\">\n                    <div className=\"text-xs text-gray-500 mb-1\">Elements</div>\n                    <div className=\"text-lg font-bold text-white font-mono\">{array.length}</div>\n                  </div>\n                  <div className=\"p-3 bg-gray-800/50 border border-gray-700 rounded-lg\">\n                    <div className=\"text-xs text-gray-500 mb-1\">Status</div>\n                    <div className=\"text-lg font-bold\">\n                      {isPlaying ? (\n                        <span className=\"text-green-400\">Running</span>\n                      ) : steps.length > 0 && currentStep === steps.length ? (\n                        <span className=\"text-purple-400\">Done</span>\n                      ) : (\n                        <span className=\"text-gray-400\">Ready</span>\n                      )}\n                    </div>\n                  </div>\n                </div>\n\n                {/* Time Complexity Reminder */}\n                <motion.div\n                  className=\"p-3 bg-gradient-to-r from-purple-500/10 to-cyan-500/10 border border-purple-400/30 rounded-lg\"\n                  animate={{\n                    boxShadow: [\n                      '0 0 10px rgba(168, 85, 247, 0.2)',\n                      '0 0 20px rgba(168, 85, 247, 0.4)',\n                      '0 0 10px rgba(168, 85, 247, 0.2)'\n                    ]\n                  }}\n                  transition={{ duration: 2, repeat: Infinity }}\n                >\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-xs text-gray-400\">Time Complexity</span>\n                    <span className=\"text-sm font-mono font-bold text-purple-300\">\n                      {mockAlgorithms.find(a => a.id === selectedAlgorithm)?.complexity}\n                    </span>\n                  </div>\n                </motion.div>\n              </div>\n            </motion.div>\n          </div>\n\n          <div className=\"lg:col-span-3\">\n            <div className=\"bg-gray-900/50 backdrop-blur-lg border border-purple-500/30 rounded-xl p-8 shadow-2xl shadow-purple-500/20 min-h-[600px]\">\n              {array.length === 0 ? (\n                <motion.div\n                  initial={{ opacity: 0, scale: 0.8 }}\n                  animate={{ opacity: 1, scale: 1 }}\n                  transition={{ duration: 0.5 }}\n                  className=\"absolute inset-0 flex flex-col items-center justify-center gap-6\"\n                >\n                  <motion.div\n                    animate={{\n                      rotate: [0, 360],\n                      scale: [1, 1.1, 1]\n                    }}\n                    transition={{\n                      rotate: { duration: 3, repeat: Infinity, ease: \"linear\" },\n                      scale: { duration: 2, repeat: Infinity, ease: \"easeInOut\" }\n                    }}\n                    className=\"relative\"\n                  >\n                    <BarChart3 className=\"w-24 h-24 text-purple-400/50\" />\n                    <motion.div\n                      className=\"absolute inset-0 rounded-full bg-purple-500/20 blur-xl\"\n                      animate={{\n                        scale: [1, 1.5, 1],\n                        opacity: [0.3, 0.6, 0.3]\n                      }}\n                      transition={{ duration: 2, repeat: Infinity }}\n                    />\n                  </motion.div>\n                  <div className=\"text-center space-y-2\">\n                    <p className=\"text-2xl font-semibold text-purple-300\">\n                      Generate an array to begin\n                    </p>\n                    <p className=\"text-sm text-gray-400\">\n                      Click the \"Generate Array\" button to start visualizing\n                    </p>\n                  </div>\n                </motion.div>\n              ) : (\n                <div className=\"relative w-full h-full flex items-end justify-center gap-1 px-4\">\n                  {currentStep < steps.length && steps[currentStep] ? (\n                    steps[currentStep].array.map((element, index) => {\n                      const maxValue = Math.max(...steps[currentStep].array.map(el => el.value));\n                      const heightPercentage = (element.value / maxValue) * 100;\n                      const barColor = element.isSorted\n                        ? '#00ff00'\n                        : element.isSwapping\n                        ? '#ff0066'\n                        : element.isComparing\n                        ? '#ffff00'\n                        : NEON_COLORS[index % NEON_COLORS.length];\n\n                      return (\n                        <motion.div\n                          key={element.id}\n                          layout\n                          initial={{ height: 0, opacity: 0 }}\n                          animate={{\n                            height: `${heightPercentage}%`,\n                            opacity: 1,\n                            scale: element.isSwapping ? 1.1 : element.isComparing ? 1.05 : 1,\n                            y: element.isSwapping ? -10 : 0\n                          }}\n                          transition={{\n                            height: { duration: 0.3, ease: \"easeOut\" },\n                            scale: { duration: 0.2 },\n                            y: { duration: 0.3, type: \"spring\" },\n                            layout: { duration: 0.4, type: \"spring\", bounce: 0.3 }\n                          }}\n                          className=\"relative flex-1 min-w-[4px] max-w-[60px] rounded-t-lg\"\n                          style={{\n                            backgroundColor: barColor,\n                            boxShadow: `0 0 ${element.isSwapping ? '30px' : element.isComparing ? '20px' : '10px'} ${barColor}80, 0 0 ${element.isSwapping ? '60px' : element.isComparing ? '40px' : '20px'} ${barColor}40`,\n                            border: `1px solid ${barColor}`,\n                          }}\n                        >\n                          {/* Value label */}\n                          <motion.div\n                            initial={{ opacity: 0 }}\n                            animate={{ opacity: arraySize[0] <= 30 ? 1 : 0 }}\n                            className=\"absolute -top-8 left-1/2 -translate-x-1/2 text-xs font-bold text-white whitespace-nowrap\"\n                            style={{\n                              textShadow: `0 0 10px ${barColor}, 0 0 20px ${barColor}80`\n                            }}\n                          >\n                            {element.value}\n                          </motion.div>\n\n                          {/* Glow effect overlay */}\n                          {(element.isComparing || element.isSwapping) && (\n                            <motion.div\n                              className=\"absolute inset-0 rounded-t-lg\"\n                              animate={{\n                                opacity: [0.3, 0.7, 0.3],\n                              }}\n                              transition={{\n                                duration: 0.8,\n                                repeat: Infinity,\n                                ease: \"easeInOut\"\n                              }}\n                              style={{\n                                background: `linear-gradient(to top, transparent, ${barColor}60)`,\n                                boxShadow: `inset 0 0 20px ${barColor}80`\n                              }}\n                            />\n                          )}\n\n                          {/* Sorted checkmark */}\n                          {element.isSorted && (\n                            <motion.div\n                              initial={{ scale: 0, rotate: -180 }}\n                              animate={{ scale: 1, rotate: 0 }}\n                              transition={{ type: \"spring\", bounce: 0.5 }}\n                              className=\"absolute -top-6 left-1/2 -translate-x-1/2 w-5 h-5 bg-green-500 rounded-full flex items-center justify-center\"\n                              style={{\n                                boxShadow: '0 0 15px #00ff00, 0 0 30px #00ff0080'\n                              }}\n                            >\n                              <svg\n                                className=\"w-3 h-3 text-gray-900\"\n                                fill=\"none\"\n                                strokeLinecap=\"round\"\n                                strokeLinejoin=\"round\"\n                                strokeWidth=\"3\"\n                                viewBox=\"0 0 24 24\"\n                                stroke=\"currentColor\"\n                              >\n                                <path d=\"M5 13l4 4L19 7\" />\n                              </svg>\n                            </motion.div>\n                          )}\n\n                          {/* Swap trail effect */}\n                          {element.isSwapping && (\n                            <>\n                              <motion.div\n                                className=\"absolute inset-0 rounded-t-lg\"\n                                initial={{ opacity: 0, scale: 1 }}\n                                animate={{\n                                  opacity: [0, 0.6, 0],\n                                  scale: [1, 1.3, 1.5]\n                                }}\n                                transition={{\n                                  duration: 0.6,\n                                  repeat: Infinity,\n                                  ease: \"easeOut\"\n                                }}\n                                style={{\n                                  backgroundColor: barColor,\n                                  filter: 'blur(8px)'\n                                }}\n                              />\n                              <motion.div\n                                className=\"absolute -inset-2 rounded-t-lg\"\n                                animate={{\n                                  rotate: [0, 360]\n                                }}\n                                transition={{\n                                  duration: 1,\n                                  repeat: Infinity,\n                                  ease: \"linear\"\n                                }}\n                                style={{\n                                  background: `conic-gradient(from 0deg, transparent, ${barColor}60, transparent)`,\n                                  filter: 'blur(4px)'\n                                }}\n                              />\n                            </>\n                          )}\n                        </motion.div>\n                      );\n                    })\n                  ) : array.length > 0 ? (\n                    array.map((element, index) => {\n                      const maxValue = Math.max(...array.map(el => el.value));\n                      const heightPercentage = (element.value / maxValue) * 100;\n                      const barColor = NEON_COLORS[index % NEON_COLORS.length];\n\n                      return (\n                        <motion.div\n                          key={element.id}\n                          initial={{ height: 0, opacity: 0, scale: 0.8 }}\n                          animate={{\n                            height: `${heightPercentage}%`,\n                            opacity: 1,\n                            scale: 1\n                          }}\n                          transition={{\n                            height: { duration: 0.5, ease: \"easeOut\", delay: index * 0.02 },\n                            opacity: { duration: 0.3, delay: index * 0.02 },\n                            scale: { duration: 0.3, delay: index * 0.02, type: \"spring\" }\n                          }}\n                          className=\"relative flex-1 min-w-[4px] max-w-[60px] rounded-t-lg\"\n                          style={{\n                            backgroundColor: barColor,\n                            boxShadow: `0 0 10px ${barColor}80, 0 0 20px ${barColor}40`,\n                            border: `1px solid ${barColor}`,\n                          }}\n                        >\n                          <motion.div\n                            initial={{ opacity: 0 }}\n                            animate={{ opacity: arraySize[0] <= 30 ? 1 : 0 }}\n                            transition={{ delay: index * 0.02 + 0.3 }}\n                            className=\"absolute -top-8 left-1/2 -translate-x-1/2 text-xs font-bold text-white whitespace-nowrap\"\n                            style={{\n                              textShadow: `0 0 10px ${barColor}, 0 0 20px ${barColor}80`\n                            }}\n                          >\n                            {element.value}\n                          </motion.div>\n                        </motion.div>\n                      );\n                    })\n                  ) : null}\n\n                  {/* Comparison indicators */}\n                  {currentStep < steps.length && steps[currentStep] && steps[currentStep].comparingIndices.length > 0 && (\n                    <motion.div\n                      initial={{ opacity: 0 }}\n                      animate={{ opacity: 1 }}\n                      className=\"absolute top-0 left-0 right-0 flex items-center justify-center pointer-events-none\"\n                    >\n                      <motion.div\n                        animate={{\n                          y: [0, -10, 0],\n                          opacity: [0.6, 1, 0.6]\n                        }}\n                        transition={{\n                          duration: 1,\n                          repeat: Infinity,\n                          ease: \"easeInOut\"\n                        }}\n                        className=\"px-4 py-2 bg-yellow-500/20 border border-yellow-400 rounded-full backdrop-blur-sm\"\n                        style={{\n                          boxShadow: '0 0 20px #ffff0080, 0 0 40px #ffff0040'\n                        }}\n                      >\n                        <span className=\"text-yellow-300 text-sm font-semibold\">\n                          Comparing...\n                        </span>\n                      </motion.div>\n                    </motion.div>\n                  )}\n\n                  {/* Swap indicators */}\n                  {currentStep < steps.length && steps[currentStep] && steps[currentStep].swappingIndices.length > 0 && (\n                    <motion.div\n                      initial={{ opacity: 0, scale: 0.8 }}\n                      animate={{ opacity: 1, scale: 1 }}\n                      exit={{ opacity: 0, scale: 0.8 }}\n                      className=\"absolute top-12 left-0 right-0 flex items-center justify-center pointer-events-none\"\n                    >\n                      <motion.div\n                        animate={{\n                          rotate: [0, 180, 360],\n                          scale: [1, 1.1, 1]\n                        }}\n                        transition={{\n                          duration: 0.8,\n                          repeat: Infinity,\n                          ease: \"linear\"\n                        }}\n                        className=\"px-4 py-2 bg-pink-500/20 border border-pink-400 rounded-full backdrop-blur-sm flex items-center gap-2\"\n                        style={{\n                          boxShadow: '0 0 20px #ff006680, 0 0 40px #ff006640'\n                        }}\n                      >\n                        <Zap className=\"w-4 h-4 text-pink-300\" />\n                        <span className=\"text-pink-300 text-sm font-semibold\">\n                          Swapping\n                        </span>\n                      </motion.div>\n                    </motion.div>\n                  )}\n                </div>\n              )}\n              \n              <div className=\"relative h-full flex items-end justify-center gap-1\">\n                {/* TODO:AnimatedBars Render array elements as animated bars with height transitions, neon colors, and glow effects */}\n              </div>\n\n                            {steps.length > 0 && currentStep < steps.length && steps[currentStep].comparingIndices.length > 0 && (\n                <div className=\"absolute inset-0 pointer-events-none\">\n                  {steps[currentStep].comparingIndices.map((index, i) => {\n                    const maxValue = Math.max(...array.map(el => el.value));\n                    const barWidth = 100 / array.length;\n                    const leftPosition = (index * barWidth) + (barWidth / 2);\n                    const heightPercent = (array[index]?.value / maxValue) * 100;\n                    \n                    return (\n                      <motion.div\n                        key={`comparison-${index}-${i}`}\n                        initial={{ opacity: 0, y: -20, scale: 0 }}\n                        animate={{ \n                          opacity: [0.8, 1, 0.8],\n                          y: [0, -10, 0],\n                          scale: [1, 1.2, 1]\n                        }}\n                        exit={{ opacity: 0, scale: 0 }}\n                        transition={{\n                          duration: 0.6,\n                          repeat: Infinity,\n                          ease: \"easeInOut\"\n                        }}\n                        className=\"absolute\"\n                        style={{\n                          left: `${leftPosition}%`,\n                          bottom: `${heightPercent + 5}%`,\n                          transform: 'translateX(-50%)'\n                        }}\n                      >\n                        <motion.div\n                          className=\"relative\"\n                          animate={{\n                            rotate: [0, 360],\n                          }}\n                          transition={{\n                            duration: 2,\n                            repeat: Infinity,\n                            ease: \"linear\"\n                          }}\n                        >\n                          <div className=\"w-8 h-8 rounded-full bg-gradient-to-br from-cyan-400 to-blue-500 flex items-center justify-center shadow-lg shadow-cyan-500/50 border-2 border-cyan-300\">\n                            <Zap className=\"w-4 h-4 text-white\" />\n                          </div>\n                          <motion.div\n                            className=\"absolute inset-0 rounded-full bg-cyan-400/30\"\n                            animate={{\n                              scale: [1, 1.8, 1],\n                              opacity: [0.6, 0, 0.6]\n                            }}\n                            transition={{\n                              duration: 1.5,\n                              repeat: Infinity,\n                              ease: \"easeOut\"\n                            }}\n                          />\n                        </motion.div>\n                        \n                        <motion.div\n                          className=\"absolute top-full mt-2 left-1/2 -translate-x-1/2 whitespace-nowrap\"\n                          animate={{\n                            opacity: [0.7, 1, 0.7]\n                          }}\n                          transition={{\n                            duration: 1,\n                            repeat: Infinity\n                          }}\n                        >\n                          <div className=\"bg-cyan-500/90 backdrop-blur-sm px-3 py-1 rounded-full border border-cyan-300 shadow-lg shadow-cyan-500/50\">\n                            <span className=\"text-xs font-bold text-white\">\n                              Comparing\n                            </span>\n                          </div>\n                        </motion.div>\n\n                        <motion.div\n                          className=\"absolute w-0.5 bg-gradient-to-b from-cyan-400 to-transparent\"\n                          style={{\n                            height: `${heightPercent}%`,\n                            top: '100%',\n                            left: '50%',\n                            transform: 'translateX(-50%)'\n                          }}\n                          animate={{\n                            opacity: [0.3, 0.8, 0.3],\n                            scaleY: [0.8, 1, 0.8]\n                          }}\n                          transition={{\n                            duration: 0.8,\n                            repeat: Infinity,\n                            ease: \"easeInOut\"\n                          }}\n                        />\n                      </motion.div>\n                    );\n                  })}\n                  \n                  {steps[currentStep].comparingIndices.length === 2 && (\n                    <motion.div\n                      initial={{ opacity: 0 }}\n                      animate={{ opacity: [0.2, 0.5, 0.2] }}\n                      transition={{\n                        duration: 1,\n                        repeat: Infinity,\n                        ease: \"easeInOut\"\n                      }}\n                      className=\"absolute\"\n                      style={{\n                        left: `${((steps[currentStep].comparingIndices[0] * (100 / array.length)) + ((100 / array.length) / 2))}%`,\n                        right: `${100 - ((steps[currentStep].comparingIndices[1] * (100 / array.length)) + ((100 / array.length) / 2))}%`,\n                        top: '20%',\n                        height: '2px',\n                        background: 'linear-gradient(90deg, transparent, #22d3ee, #06b6d4, #22d3ee, transparent)',\n                        boxShadow: '0 0 10px rgba(34, 211, 238, 0.8)'\n                      }}\n                    />\n                  )}\n                </div>\n              )}\n              \n                            {steps.length > 0 && currentStep < steps.length && steps[currentStep].swappingIndices.length === 2 && (\n                <>\n                  {steps[currentStep].swappingIndices.map((idx, trailIdx) => {\n                    const maxValue = Math.max(...array.map(el => el.value));\n                    const barHeight = (array[idx].value / maxValue) * 400;\n                    const barWidth = Math.max(20, 800 / array.length - 4);\n                    const xPosition = idx * (800 / array.length) + (800 / array.length) / 2;\n                    \n                    return (\n                      <motion.div\n                        key={`trail-${idx}-${trailIdx}-${currentStep}`}\n                        className=\"absolute bottom-0 rounded-t-lg pointer-events-none\"\n                        style={{\n                          left: `${xPosition}px`,\n                          width: `${barWidth}px`,\n                          height: `${barHeight}px`,\n                          background: `linear-gradient(to top, ${NEON_COLORS[idx % NEON_COLORS.length]}40, ${NEON_COLORS[idx % NEON_COLORS.length]}10)`,\n                          boxShadow: `0 0 30px ${NEON_COLORS[idx % NEON_COLORS.length]}80, inset 0 0 20px ${NEON_COLORS[idx % NEON_COLORS.length]}40`,\n                          filter: 'blur(8px)',\n                          transformOrigin: 'bottom center'\n                        }}\n                        initial={{ \n                          opacity: 0,\n                          scale: 1,\n                          x: 0\n                        }}\n                        animate={{ \n                          opacity: [0, 0.8, 0.6, 0],\n                          scale: [1, 1.2, 1.3, 1.4],\n                          x: trailIdx === 0 \n                            ? [(steps[currentStep].swappingIndices[1] - idx) * (800 / array.length) * 0.3,\n                               (steps[currentStep].swappingIndices[1] - idx) * (800 / array.length) * 0.6,\n                               (steps[currentStep].swappingIndices[1] - idx) * (800 / array.length)]\n                            : [(steps[currentStep].swappingIndices[0] - idx) * (800 / array.length) * 0.3,\n                               (steps[currentStep].swappingIndices[0] - idx) * (800 / array.length) * 0.6,\n                               (steps[currentStep].swappingIndices[0] - idx) * (800 / array.length)]\n                        }}\n                        transition={{ \n                          duration: 0.6,\n                          ease: \"easeOut\",\n                          times: [0, 0.3, 0.6, 1]\n                        }}\n                      />\n                    );\n                  })}\n                  \n                  {/* Particle burst effect at swap points */}\n                  {steps[currentStep].swappingIndices.map((idx) => {\n                    const maxValue = Math.max(...array.map(el => el.value));\n                    const barHeight = (array[idx].value / maxValue) * 400;\n                    const xPosition = idx * (800 / array.length) + (800 / array.length) / 2;\n                    \n                    return (\n                      <div key={`particles-${idx}-${currentStep}`}>\n                        {[...Array(6)].map((_, particleIdx) => (\n                          <motion.div\n                            key={`particle-${idx}-${particleIdx}-${currentStep}`}\n                            className=\"absolute rounded-full pointer-events-none\"\n                            style={{\n                              left: `${xPosition}px`,\n                              bottom: `${barHeight / 2}px`,\n                              width: '8px',\n                              height: '8px',\n                              background: NEON_COLORS[idx % NEON_COLORS.length],\n                              boxShadow: `0 0 15px ${NEON_COLORS[idx % NEON_COLORS.length]}, 0 0 30px ${NEON_COLORS[idx % NEON_COLORS.length]}80`\n                            }}\n                            initial={{ \n                              opacity: 1,\n                              scale: 0,\n                              x: 0,\n                              y: 0\n                            }}\n                            animate={{ \n                              opacity: [1, 0.8, 0],\n                              scale: [0, 1, 0.5],\n                              x: Math.cos((particleIdx * Math.PI * 2) / 6) * 40,\n                              y: Math.sin((particleIdx * Math.PI * 2) / 6) * 40\n                            }}\n                            transition={{ \n                              duration: 0.8,\n                              ease: \"easeOut\"\n                            }}\n                          />\n                        ))}\n                      </div>\n                    );\n                  })}\n                  \n                  {/* Motion blur streaks */}\n                  {steps[currentStep].swappingIndices.map((idx, streakIdx) => {\n                    const maxValue = Math.max(...array.map(el => el.value));\n                    const barHeight = (array[idx].value / maxValue) * 400;\n                    const xPosition = idx * (800 / array.length) + (800 / array.length) / 2;\n                    const targetIdx = steps[currentStep].swappingIndices[streakIdx === 0 ? 1 : 0];\n                    const direction = targetIdx > idx ? 1 : -1;\n                    \n                    return (\n                      <motion.div\n                        key={`streak-${idx}-${streakIdx}-${currentStep}`}\n                        className=\"absolute bottom-0 pointer-events-none\"\n                        style={{\n                          left: `${xPosition}px`,\n                          height: `${barHeight}px`,\n                          width: '3px',\n                          background: `linear-gradient(${direction > 0 ? '90deg' : '270deg'}, transparent, ${NEON_COLORS[idx % NEON_COLORS.length]}, transparent)`,\n                          filter: 'blur(2px)',\n                          transformOrigin: 'center center'\n                        }}\n                        initial={{ \n                          opacity: 0,\n                          scaleX: 1,\n                          x: 0\n                        }}\n                        animate={{ \n                          opacity: [0, 1, 0.8, 0],\n                          scaleX: [1, 15, 20, 1],\n                          x: direction * 20\n                        }}\n                        transition={{ \n                          duration: 0.5,\n                          ease: \"easeInOut\"\n                        }}\n                      />\n                    );\n                  })}\n                </>\n              )}\n            </div>\n          </div>\n        </div>\n\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.8, delay: 0.4 }}\n          className=\"bg-gray-900/50 backdrop-blur-lg border border-pink-500/30 rounded-xl p-6 shadow-2xl shadow-pink-500/20\"\n        >\n          <div className=\"flex items-center gap-2 text-pink-400 mb-6\">\n            <BarChart3 className=\"w-5 h-5\" />\n            <h3 className=\"font-bold text-lg\">Legend</h3>\n          </div>\n          \n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n            {/* Default State */}\n            <motion.div\n              initial={{ opacity: 0, scale: 0.8 }}\n              animate={{ opacity: 1, scale: 1 }}\n              transition={{ delay: 0.5, type: 'spring' }}\n              className=\"flex items-center gap-3 p-3 bg-gray-800/50 rounded-lg border border-gray-700/50 hover:border-cyan-500/50 transition-all duration-300\"\n            >\n              <motion.div\n                className=\"w-6 h-12 rounded bg-gradient-to-t from-cyan-500 to-cyan-300\"\n                animate={{\n                  boxShadow: [\n                    '0 0 10px rgba(0, 255, 255, 0.5)',\n                    '0 0 20px rgba(0, 255, 255, 0.8)',\n                    '0 0 10px rgba(0, 255, 255, 0.5)'\n                  ]\n                }}\n                transition={{ duration: 2, repeat: Infinity }}\n              />\n              <div>\n                <div className=\"text-sm font-semibold text-white\">Default</div>\n                <div className=\"text-xs text-gray-400\">Unsorted</div>\n              </div>\n            </motion.div>\n\n            {/* Comparing State */}\n            <motion.div\n              initial={{ opacity: 0, scale: 0.8 }}\n              animate={{ opacity: 1, scale: 1 }}\n              transition={{ delay: 0.6, type: 'spring' }}\n              className=\"flex items-center gap-3 p-3 bg-gray-800/50 rounded-lg border border-gray-700/50 hover:border-yellow-500/50 transition-all duration-300\"\n            >\n              <motion.div\n                className=\"w-6 h-12 rounded bg-gradient-to-t from-yellow-500 to-yellow-300\"\n                animate={{\n                  boxShadow: [\n                    '0 0 15px rgba(255, 255, 0, 0.6)',\n                    '0 0 30px rgba(255, 255, 0, 1)',\n                    '0 0 15px rgba(255, 255, 0, 0.6)'\n                  ],\n                  scale: [1, 1.1, 1]\n                }}\n                transition={{ duration: 1, repeat: Infinity }}\n              />\n              <div>\n                <div className=\"text-sm font-semibold text-white\">Comparing</div>\n                <div className=\"text-xs text-gray-400\">Active</div>\n              </div>\n            </motion.div>\n\n            {/* Swapping State */}\n            <motion.div\n              initial={{ opacity: 0, scale: 0.8 }}\n              animate={{ opacity: 1, scale: 1 }}\n              transition={{ delay: 0.7, type: 'spring' }}\n              className=\"flex items-center gap-3 p-3 bg-gray-800/50 rounded-lg border border-gray-700/50 hover:border-red-500/50 transition-all duration-300\"\n            >\n              <motion.div\n                className=\"w-6 h-12 rounded bg-gradient-to-t from-red-500 to-red-300\"\n                animate={{\n                  boxShadow: [\n                    '0 0 15px rgba(255, 0, 102, 0.6)',\n                    '0 0 30px rgba(255, 0, 102, 1)',\n                    '0 0 15px rgba(255, 0, 102, 0.6)'\n                  ],\n                  x: [-2, 2, -2]\n                }}\n                transition={{ duration: 0.8, repeat: Infinity }}\n              />\n              <div>\n                <div className=\"text-sm font-semibold text-white\">Swapping</div>\n                <div className=\"text-xs text-gray-400\">Moving</div>\n              </div>\n            </motion.div>\n\n            {/* Sorted State */}\n            <motion.div\n              initial={{ opacity: 0, scale: 0.8 }}\n              animate={{ opacity: 1, scale: 1 }}\n              transition={{ delay: 0.8, type: 'spring' }}\n              className=\"flex items-center gap-3 p-3 bg-gray-800/50 rounded-lg border border-gray-700/50 hover:border-green-500/50 transition-all duration-300\"\n            >\n              <motion.div\n                className=\"w-6 h-12 rounded bg-gradient-to-t from-green-500 to-green-300\"\n                animate={{\n                  boxShadow: [\n                    '0 0 10px rgba(0, 255, 170, 0.5)',\n                    '0 0 20px rgba(0, 255, 170, 0.8)',\n                    '0 0 10px rgba(0, 255, 170, 0.5)'\n                  ]\n                }}\n                transition={{ duration: 2, repeat: Infinity }}\n              />\n              <div>\n                <div className=\"text-sm font-semibold text-white\">Sorted</div>\n                <div className=\"text-xs text-gray-400\">Complete</div>\n              </div>\n            </motion.div>\n          </div>\n\n          {/* Additional Info */}\n          <motion.div\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            transition={{ delay: 1 }}\n            className=\"mt-6 pt-6 border-t border-gray-700/50\"\n          >\n            <div className=\"flex items-center justify-center gap-6 text-xs text-gray-400\">\n              <motion.div\n                className=\"flex items-center gap-2\"\n                whileHover={{ scale: 1.05 }}\n              >\n                <motion.div\n                  animate={{ rotate: 360 }}\n                  transition={{ duration: 3, repeat: Infinity, ease: 'linear' }}\n                >\n                  <Zap className=\"w-4 h-4 text-cyan-400\" />\n                </motion.div>\n                <span>Real-time Animation</span>\n              </motion.div>\n              <motion.div\n                className=\"flex items-center gap-2\"\n                whileHover={{ scale: 1.05 }}\n              >\n                <motion.div\n                  animate={{ scale: [1, 1.2, 1] }}\n                  transition={{ duration: 2, repeat: Infinity }}\n                >\n                  <BarChart3 className=\"w-4 h-4 text-purple-400\" />\n                </motion.div>\n                <span>Interactive Controls</span>\n              </motion.div>\n            </div>\n          </motion.div>\n        </motion.div>\n      </div>\n    </div>\n  );\n}",
    "error": null,
    "elapsed_time": 104.39135813713074,
    "success": true
  }
}