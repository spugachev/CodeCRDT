{
  "prompt_id": "algorithm_visualizer",
  "prompt_name": "Algorithm Visualizer",
  "mode": "parallel",
  "run_number": 25,
  "timestamp": "2025-10-14T12:48:06.713606",
  "response_time": 129.44839930534363,
  "total_tokens": null,
  "response_content": "import { useState, useCallback } from 'react';\nimport { useEffect } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Slider } from '@/components/ui/slider';\nimport { Play, Pause, RotateCcw, Zap, BarChart3 } from 'lucide-react';\nimport { motion } from 'framer-motion';\n\ninterface ArrayElement {\n  value: number;\n  id: string;\n  isComparing?: boolean;\n  isSwapping?: boolean;\n  isSorted?: boolean;\n}\n\ninterface AlgorithmStep {\n  array: ArrayElement[];\n  comparingIndices: number[];\n  swappingIndices: number[];\n  sortedIndices: number[];\n}\n\ntype AlgorithmType = 'bubble' | 'quick' | 'merge' | 'insertion';\n\nconst NEON_COLORS = [\n  '#00ffff',\n  '#ff00ff', \n  '#00ff00',\n  '#ffff00',\n  '#ff0066',\n  '#00ffaa'\n];\n\nconst mockAlgorithms = [\n  { id: 'bubble', name: 'Bubble Sort', complexity: 'O(n\u00b2)' },\n  { id: 'quick', name: 'Quick Sort', complexity: 'O(n log n)' },\n  { id: 'merge', name: 'Merge Sort', complexity: 'O(n log n)' },\n  { id: 'insertion', name: 'Insertion Sort', complexity: 'O(n\u00b2)' }\n];\n\nexport default function AlgorithmVisualizer() {\n\n  useEffect(() => {\n    generateRandomArray();\n  }, [generateRandomArray]);\n\n  useEffect(() => {\n    if (isPlaying && currentStep < steps.length) {\n      const delay = 1000 - speed[0] * 10;\n      const timer = setTimeout(() => {\n        setArray(steps[currentStep].array);\n        setCurrentStep((prev) => {\n          const nextStep = prev + 1;\n          if (nextStep >= steps.length) {\n            setIsPlaying(false);\n            return prev;\n          }\n          return nextStep;\n        });\n      }, delay);\n      return () => clearTimeout(timer);\n    }\n  }, [isPlaying, currentStep, steps, speed]);\n  useEffect(() => {\n    if (isPlaying && currentStep < steps.length) {\n      const delay = 1000 - speed[0] * 10;\n      const timer = setTimeout(() => {\n        setCurrentStep((prev) => {\n          const nextStep = prev + 1;\n          if (nextStep >= steps.length) {\n            setIsPlaying(false);\n            return prev;\n          }\n          return nextStep;\n        });\n      }, delay);\n      \n      return () => clearTimeout(timer);\n    }\n  }, [isPlaying, currentStep, steps.length, speed]);\n  const [array, setArray] = useState<ArrayElement[]>([]);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [speed, setSpeed] = useState([50]);\n  const [arraySize, setArraySize] = useState([20]);\n  const [selectedAlgorithm, setSelectedAlgorithm] = useState<AlgorithmType>('bubble');\n  const [currentStep, setCurrentStep] = useState(0);\n  const [steps, setSteps] = useState<AlgorithmStep[]>([]);\n\n\n  const generateRandomArray = useCallback(() => {\n    const newArray: ArrayElement[] = Array.from({ length: arraySize[0] }, (_, index) => ({\n      value: Math.floor(Math.random() * 100) + 5,\n      id: `element-${index}-${Date.now()}`,\n      isComparing: false,\n      isSwapping: false,\n      isSorted: false\n    }));\n    setArray(newArray);\n    setSteps([]);\n    setCurrentStep(0);\n    setIsPlaying(false);\n  }, [arraySize]);\n\n  const resetVisualization = useCallback(() => {\n\n\n    setIsPlaying(false);\n    setCurrentStep(0);\n    setSteps([]);\n    generateRandomArray();\n  }, [generateRandomArray]);\n\n  const startVisualization = useCallback(() => {\n    if (steps.length === 0 || currentStep >= steps.length) return;\n    \n    setIsPlaying(true);\n    \n    const animate = () => {\n      setCurrentStep((prev) => {\n        const nextStep = prev + 1;\n        if (nextStep >= steps.length) {\n          setIsPlaying(false);\n          return prev;\n        }\n        return nextStep;\n      });\n    };\n    \n    const delay = 1000 - speed[0] * 10;\n    const timer = setTimeout(animate, delay);\n    \n    return () => clearTimeout(timer);\n    \n  }, [steps, speed, currentStep]);\n\n  const pauseVisualization = useCallback(() => {\n    setIsPlaying(false);\n\n  }, []);\n\n  const generateSortingSteps = useCallback((algorithm: AlgorithmType) => {\n        if (array.length === 0) return;\n\n    const steps: AlgorithmStep[] = [];\n    const arr = array.map(el => ({ ...el }));\n\n    const addStep = (\n      currentArray: ArrayElement[],\n      comparing: number[] = [],\n      swapping: number[] = [],\n      sorted: number[] = []\n    ) => {\n      steps.push({\n        array: currentArray.map(el => ({ ...el })),\n        comparingIndices: [...comparing],\n        swappingIndices: [...swapping],\n        sortedIndices: [...sorted]\n      });\n    };\n\n    switch (algorithm) {\n      case 'bubble': {\n        const sortedIndices: number[] = [];\n        for (let i = 0; i < arr.length - 1; i++) {\n          for (let j = 0; j < arr.length - i - 1; j++) {\n            addStep(arr, [j, j + 1], [], sortedIndices);\n            \n            if (arr[j].value > arr[j + 1].value) {\n              addStep(arr, [], [j, j + 1], sortedIndices);\n              [arr[j], arr[j + 1]] = [arr[j + 1], arr[j]];\n              addStep(arr, [], [], sortedIndices);\n            }\n          }\n          sortedIndices.push(arr.length - i - 1);\n          addStep(arr, [], [], sortedIndices);\n        }\n        sortedIndices.push(0);\n        addStep(arr, [], [], sortedIndices);\n        break;\n      }\n\n      case 'insertion': {\n        const sortedIndices: number[] = [0];\n        addStep(arr, [], [], sortedIndices);\n        \n        for (let i = 1; i < arr.length; i++) {\n          const key = arr[i];\n          let j = i - 1;\n          \n          addStep(arr, [i], [], sortedIndices);\n          \n          while (j >= 0 && arr[j].value > key.value) {\n            addStep(arr, [j, j + 1], [], sortedIndices);\n            addStep(arr, [], [j, j + 1], sortedIndices);\n            arr[j + 1] = arr[j];\n            addStep(arr, [], [], sortedIndices);\n            j--;\n          }\n          \n          arr[j + 1] = key;\n          sortedIndices.push(i);\n          addStep(arr, [], [], sortedIndices);\n        }\n        break;\n      }\n\n      case 'quick': {\n        const sortedIndices: number[] = [];\n        \n        const partition = (low: number, high: number): number => {\n          const pivot = arr[high].value;\n          let i = low - 1;\n          \n          addStep(arr, [high], [], sortedIndices);\n          \n          for (let j = low; j < high; j++) {\n            addStep(arr, [j, high], [], sortedIndices);\n            \n            if (arr[j].value < pivot) {\n              i++;\n              addStep(arr, [], [i, j], sortedIndices);\n              [arr[i], arr[j]] = [arr[j], arr[i]];\n              addStep(arr, [], [], sortedIndices);\n            }\n          }\n          \n          addStep(arr, [], [i + 1, high], sortedIndices);\n          [arr[i + 1], arr[high]] = [arr[high], arr[i + 1]];\n          sortedIndices.push(i + 1);\n          addStep(arr, [], [], sortedIndices);\n          \n          return i + 1;\n        };\n        \n        const quickSort = (low: number, high: number) => {\n          if (low < high) {\n            const pi = partition(low, high);\n            quickSort(low, pi - 1);\n            quickSort(pi + 1, high);\n          } else if (low === high) {\n            sortedIndices.push(low);\n            addStep(arr, [], [], sortedIndices);\n          }\n        };\n        \n        quickSort(0, arr.length - 1);\n        break;\n      }\n\n      case 'merge': {\n        const sortedIndices: number[] = [];\n        \n        const merge = (left: number, mid: number, right: number) => {\n          const leftArr = arr.slice(left, mid + 1);\n          const rightArr = arr.slice(mid + 1, right + 1);\n          \n          let i = 0, j = 0, k = left;\n          \n          while (i < leftArr.length && j < rightArr.length) {\n            addStep(arr, [left + i, mid + 1 + j], [], sortedIndices);\n            \n            if (leftArr[i].value <= rightArr[j].value) {\n              addStep(arr, [], [k], sortedIndices);\n              arr[k] = leftArr[i];\n              i++;\n            } else {\n              addStep(arr, [], [k], sortedIndices);\n              arr[k] = rightArr[j];\n              j++;\n            }\n            k++;\n            addStep(arr, [], [], sortedIndices);\n          }\n          \n          while (i < leftArr.length) {\n            addStep(arr, [], [k], sortedIndices);\n            arr[k] = leftArr[i];\n            i++;\n            k++;\n            addStep(arr, [], [], sortedIndices);\n          }\n          \n          while (j < rightArr.length) {\n            addStep(arr, [], [k], sortedIndices);\n            arr[k] = rightArr[j];\n            j++;\n            k++;\n            addStep(arr, [], [], sortedIndices);\n          }\n          \n          if (right - left + 1 === arr.length) {\n            for (let idx = 0; idx < arr.length; idx++) {\n              sortedIndices.push(idx);\n            }\n          }\n          addStep(arr, [], [], sortedIndices);\n        };\n        \n        const mergeSort = (left: number, right: number) => {\n          if (left < right) {\n            const mid = Math.floor((left + right) / 2);\n            mergeSort(left, mid);\n            mergeSort(mid + 1, right);\n            merge(left, mid, right);\n          }\n        };\n        \n        mergeSort(0, arr.length - 1);\n        break;\n      }\n    }\n\n    setSteps(steps);\n    setCurrentStep(0);\n  }, [array]);\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-gray-900 via-purple-900 to-gray-900 p-8\">\n      <div className=\"max-w-7xl mx-auto space-y-8\">\n        <motion.div\n          initial={{ opacity: 0, y: -20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.8 }}\n          className=\"text-center space-y-4\"\n        >\n          <motion.h1\n            className=\"text-6xl font-bold bg-gradient-to-r from-cyan-400 via-purple-400 to-pink-400 bg-clip-text text-transparent\"\n            animate={{\n              textShadow: [\n                '0 0 20px rgba(0, 255, 255, 0.5)',\n                '0 0 40px rgba(255, 0, 255, 0.5)',\n                '0 0 20px rgba(0, 255, 255, 0.5)'\n              ]\n            }}\n            transition={{ duration: 2, repeat: Infinity }}\n          >\n            Algorithm Visualizer\n          </motion.h1>\n          \n          <div className=\"flex items-center justify-center gap-4\">\n            <motion.div\n              initial={{ scale: 0 }}\n              animate={{ scale: 1 }}\n              transition={{ delay: 0.3, type: \"spring\" }}\n              className=\"px-6 py-2 bg-purple-500/20 border border-purple-400/50 rounded-full backdrop-blur-sm\"\n            >\n              <span className=\"text-2xl font-semibold text-purple-300\">\n                {mockAlgorithms.find(a => a.id === selectedAlgorithm)?.name || 'Bubble Sort'}\n              </span>\n            </motion.div>\n            \n            <motion.div\n              initial={{ scale: 0 }}\n              animate={{ scale: 1 }}\n              transition={{ delay: 0.5, type: \"spring\" }}\n              className=\"px-4 py-2 bg-cyan-500/20 border border-cyan-400/50 rounded-full backdrop-blur-sm relative overflow-hidden\"\n            >\n              <motion.div\n                className=\"absolute inset-0 bg-gradient-to-r from-transparent via-cyan-400/20 to-transparent\"\n                animate={{ x: ['-100%', '200%'] }}\n                transition={{ duration: 2, repeat: Infinity, ease: \"linear\" }}\n              />\n              <div className=\"relative flex items-center gap-2\">\n                <BarChart3 className=\"w-4 h-4 text-cyan-400\" />\n                <span className=\"text-sm font-mono text-cyan-300\">\n                  {mockAlgorithms.find(a => a.id === selectedAlgorithm)?.complexity || 'O(n\u00b2)'}\n                </span>\n              </div>\n            </motion.div>\n          </div>\n        </motion.div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-6\">\n          <div className=\"lg:col-span-1 space-y-6\">\n            <motion.div\n              initial={{ opacity: 0, x: -50 }}\n              animate={{ opacity: 1, x: 0 }}\n              className=\"bg-gray-900/50 backdrop-blur-lg border border-cyan-500/30 rounded-xl p-6 shadow-[0_0_30px_rgba(0,255,255,0.3)] hover:shadow-[0_0_50px_rgba(0,255,255,0.5)] transition-shadow duration-300\"\n            >\n              <div className=\"space-y-6\">\n                {/* Algorithm Selection */}\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center gap-2 text-cyan-400 font-semibold\">\n                    <Zap className=\"w-5 h-5\" />\n                    <span className=\"text-sm uppercase tracking-wider\">Algorithm</span>\n                  </div>\n                  <div className=\"grid grid-cols-1 gap-2\">\n                    {mockAlgorithms.map((algo) => (\n                      <motion.button\n                        key={algo.id}\n                        whileHover={{ scale: 1.02 }}\n                        whileTap={{ scale: 0.98 }}\n                        onClick={() => {\n                          setSelectedAlgorithm(algo.id as AlgorithmType);\n                          generateSortingSteps(algo.id as AlgorithmType);\n                        }}\n                        disabled={isPlaying}\n                        className={`p-3 rounded-lg border transition-all duration-300 text-left ${\n                          selectedAlgorithm === algo.id\n                            ? 'bg-cyan-500/20 border-cyan-400 shadow-[0_0_20px_rgba(0,255,255,0.4)]'\n                            : 'bg-gray-800/50 border-gray-700 hover:border-cyan-500/50 hover:bg-gray-800'\n                        } disabled:opacity-50 disabled:cursor-not-allowed`}\n                      >\n                        <div className=\"font-medium text-white\">{algo.name}</div>\n                        <div className=\"text-xs text-gray-400 mt-1\">{algo.complexity}</div>\n                      </motion.button>\n                    ))}\n                  </div>\n                </div>\n\n                {/* Speed Control */}\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center gap-2 text-purple-400 font-semibold\">\n                      <Zap className=\"w-5 h-5\" />\n                      <span className=\"text-sm uppercase tracking-wider\">Speed</span>\n                    </div>\n                    <span className=\"text-white font-mono text-sm bg-purple-500/20 px-2 py-1 rounded border border-purple-500/30\">\n                      {speed[0]}%\n                    </span>\n                  </div>\n                  <Slider\n                    value={speed}\n                    onValueChange={setSpeed}\n                    min={10}\n                    max={100}\n                    step={10}\n                    disabled={isPlaying}\n                    className=\"cursor-pointer\"\n                  />\n                </div>\n\n                {/* Array Size Control */}\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center gap-2 text-pink-400 font-semibold\">\n                      <BarChart3 className=\"w-5 h-5\" />\n                      <span className=\"text-sm uppercase tracking-wider\">Array Size</span>\n                    </div>\n                    <span className=\"text-white font-mono text-sm bg-pink-500/20 px-2 py-1 rounded border border-pink-500/30\">\n                      {arraySize[0]}\n                    </span>\n                  </div>\n                  <Slider\n                    value={arraySize}\n                    onValueChange={setArraySize}\n                    min={5}\n                    max={50}\n                    step={5}\n                    disabled={isPlaying}\n                    className=\"cursor-pointer\"\n                  />\n                </div>\n\n                {/* Control Buttons */}\n                <div className=\"space-y-2 pt-4 border-t border-gray-700\">\n                  <Button\n                    onClick={isPlaying ? pauseVisualization : startVisualization}\n                    disabled={steps.length === 0 || (currentStep >= steps.length && !isPlaying)}\n                    className=\"w-full bg-gradient-to-r from-cyan-500 to-blue-500 hover:from-cyan-600 hover:to-blue-600 text-white font-semibold shadow-[0_0_20px_rgba(0,255,255,0.5)] hover:shadow-[0_0_30px_rgba(0,255,255,0.7)] transition-all duration-300\"\n                  >\n                    {isPlaying ? (\n                      <>\n                        <Pause className=\"w-4 h-4 mr-2\" />\n                        Pause\n                      </>\n                    ) : (\n                      <>\n                        <Play className=\"w-4 h-4 mr-2\" />\n                        {currentStep >= steps.length ? 'Start' : 'Resume'}\n                      </>\n                    )}\n                  </Button>\n\n                  <Button\n                    onClick={resetVisualization}\n                    disabled={isPlaying}\n                    variant=\"outline\"\n                    className=\"w-full border-2 border-purple-500/50 bg-purple-500/10 hover:bg-purple-500/20 text-purple-300 hover:text-purple-200 shadow-[0_0_15px_rgba(168,85,247,0.3)] hover:shadow-[0_0_25px_rgba(168,85,247,0.5)] transition-all duration-300\"\n                  >\n                    <RotateCcw className=\"w-4 h-4 mr-2\" />\n                    Reset\n                  </Button>\n\n                  <Button\n                    onClick={generateRandomArray}\n                    disabled={isPlaying}\n                    variant=\"outline\"\n                    className=\"w-full border-2 border-pink-500/50 bg-pink-500/10 hover:bg-pink-500/20 text-pink-300 hover:text-pink-200 shadow-[0_0_15px_rgba(236,72,153,0.3)] hover:shadow-[0_0_25px_rgba(236,72,153,0.5)] transition-all duration-300\"\n                  >\n                    <Zap className=\"w-4 h-4 mr-2\" />\n                    New Array\n                  </Button>\n                </div>\n\n                {/* Stats Display */}\n                <div className=\"pt-4 border-t border-gray-700 space-y-2\">\n                  <div className=\"flex justify-between items-center text-sm\">\n                    <span className=\"text-gray-400\">Current Step:</span>\n                    <span className=\"text-cyan-400 font-mono font-semibold\">\n                      {currentStep} / {steps.length}\n                    </span>\n                  </div>\n                  <div className=\"flex justify-between items-center text-sm\">\n                    <span className=\"text-gray-400\">Status:</span>\n                    <span className={`font-semibold ${isPlaying ? 'text-green-400' : 'text-gray-400'}`}>\n                      {isPlaying ? 'Running' : 'Idle'}\n                    </span>\n                  </div>\n                </div>\n              </div>\n            </motion.div></parameter>\n            \n            <div className=\"bg-gray-900/50 backdrop-blur-lg border border-cyan-500/30 rounded-xl p-6 shadow-2xl shadow-cyan-500/20\">\n              <div className=\"space-y-6\">\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center gap-2 text-cyan-400\">\n                    <Zap className=\"w-4 h-4\" />\n                    <span className=\"text-sm font-semibold tracking-wider\">ALGORITHM</span>\n                  </div>\n                  <div className=\"grid grid-cols-1 gap-3\">\n                    {mockAlgorithms.map((algo) => (\n                      <motion.button\n                        key={algo.id}\n                        onClick={() => setSelectedAlgorithm(algo.id as AlgorithmType)}\n                        className={`relative p-4 rounded-lg border-2 transition-all duration-300 text-left ${\n                          selectedAlgorithm === algo.id\n                            ? 'border-cyan-400 bg-cyan-500/20 shadow-lg shadow-cyan-500/50'\n                            : 'border-gray-700 bg-gray-800/50 hover:border-cyan-500/50 hover:bg-cyan-500/10'\n                        }`}\n                        whileHover={{ scale: 1.02 }}\n                        whileTap={{ scale: 0.98 }}\n                      >\n                        <div className=\"space-y-1\">\n                          <div className=\"font-semibold text-white\">{algo.name}</div>\n                          <div className={`text-xs ${\n                            selectedAlgorithm === algo.id ? 'text-cyan-300' : 'text-gray-400'\n                          }`}>\n                            {algo.complexity}\n                          </div>\n                        </div>\n                        {selectedAlgorithm === algo.id && (\n                          <motion.div\n                            className=\"absolute inset-0 rounded-lg border-2 border-cyan-400\"\n                            initial={{ opacity: 0 }}\n                            animate={{ opacity: [0.5, 1, 0.5] }}\n                            transition={{ duration: 2, repeat: Infinity }}\n                          />\n                        )}\n                      </motion.button>\n                    ))}\n                  </div>\n                </div></parameter>\n\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <label className=\"text-cyan-400 text-sm font-medium flex items-center gap-2\">\n                      <Zap className=\"w-4 h-4\" />\n                      Speed\n                    </label>\n                    <span className=\"text-cyan-300 text-xs\">{speed[0]}ms</span>\n                  </div>\n                  <Slider\n                    value={speed}\n                    onValueChange={setSpeed}\n                    min={10}\n                    max={200}\n                    step={10}\n                    className=\"[&_[role=slider]]:h-4 [&_[role=slider]]:w-4 [&_[role=slider]]:bg-cyan-400 [&_[role=slider]]:border-2 [&_[role=slider]]:border-cyan-300 [&_[role=slider]]:shadow-[0_0_15px_rgba(34,211,238,0.8)] [&_[role=slider]]:transition-shadow [&_[role=slider]]:hover:shadow-[0_0_25px_rgba(34,211,238,1)] [&_.relative]:h-2 [&_.relative]:bg-gray-800 [&_.relative]:rounded-full [&_.relative]:border [&_.relative]:border-cyan-500/30 [&_[role=slider]]:focus-visible:ring-0 [&_[role=slider]]:focus-visible:ring-offset-0 [&_[role=slider]]:focus-visible:shadow-[0_0_30px_rgba(34,211,238,1)]\"\n                  /></parameter>\n                </div>\n\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <label className=\"text-cyan-400 text-sm font-medium flex items-center gap-2\">\n                      <BarChart3 className=\"w-4 h-4\" />\n                      Array Size\n                    </label>\n                    <span className=\"text-cyan-300 text-xs\">{arraySize[0]}</span>\n                  </div>\n                  <Slider\n                    value={arraySize}\n                    onValueChange={setArraySize}\n                    min={5}\n                    max={50}\n                    step={1}\n                    className=\"[&_[role=slider]]:bg-gradient-to-r [&_[role=slider]]:from-purple-500 [&_[role=slider]]:to-pink-500 [&_[role=slider]]:border-2 [&_[role=slider]]:border-purple-400 [&_[role=slider]]:shadow-lg [&_[role=slider]]:shadow-purple-500/50 [&_[role=slider]]:transition-all [&_[role=slider]]:hover:shadow-purple-500/80 [&_[role=slider]]:hover:scale-110 [&>span]:bg-gradient-to-r [&>span]:from-purple-500/30 [&>span]:to-pink-500/30 [&>span]:h-2 [&>span]:rounded-full\"\n                    disabled={isPlaying}\n                  />\n                </div>\n\n                <div className=\"flex gap-3 pt-4\">\n                  <motion.div\n                    whileHover={{ scale: 1.05 }}\n                    whileTap={{ scale: 0.95 }}\n                  >\n                    <Button\n                      onClick={isPlaying ? pauseVisualization : startVisualization}\n                      disabled={array.length === 0 || (steps.length === 0 && !isPlaying)}\n                      className=\"relative bg-gradient-to-r from-cyan-500 to-purple-500 hover:from-cyan-400 hover:to-purple-400 text-white font-semibold px-6 py-6 rounded-lg shadow-lg overflow-hidden group disabled:opacity-50 disabled:cursor-not-allowed\"\n                    >\n                      <motion.div\n                        className=\"absolute inset-0 bg-gradient-to-r from-cyan-400 to-purple-400 opacity-0 group-hover:opacity-100 blur-xl\"\n                        animate={{\n                          opacity: isPlaying ? [0.5, 0.8, 0.5] : 0\n                        }}\n                        transition={{ duration: 1.5, repeat: Infinity }}\n                      />\n                      <motion.div\n                        className=\"relative flex items-center gap-2\"\n                        initial={false}\n                        animate={{ rotate: isPlaying ? 0 : 0 }}\n                      >\n                        <motion.div\n                          initial={false}\n                          animate={{\n                            scale: isPlaying ? [1, 1.2, 1] : 1,\n                            rotate: isPlaying ? 0 : 0\n                          }}\n                          transition={{ duration: 0.3 }}\n                        >\n                          {isPlaying ? (\n                            <Pause className=\"w-5 h-5\" />\n                          ) : (\n                            <Play className=\"w-5 h-5\" />\n                          )}\n                        </motion.div>\n                        <span>{isPlaying ? 'Pause' : 'Play'}</span>\n                      </motion.div>\n                      <motion.div\n                        className=\"absolute inset-0 rounded-lg\"\n                        animate={{\n                          boxShadow: isPlaying\n                            ? [\n                                '0 0 20px rgba(0, 255, 255, 0.5)',\n                                '0 0 40px rgba(168, 85, 247, 0.5)',\n                                '0 0 20px rgba(0, 255, 255, 0.5)'\n                              ]\n                            : '0 0 10px rgba(0, 255, 255, 0.3)'\n                        }}\n                        transition={{ duration: 2, repeat: Infinity }}\n                      />\n                    </Button>\n                  </motion.div>\n                                    <motion.div\n                    whileHover={{ scale: 1.05 }}\n                    whileTap={{ scale: 0.95, rotate: 360 }}\n                    transition={{ type: \"spring\", stiffness: 300 }}\n                  >\n                    <Button\n                      onClick={isPlaying ? pauseVisualization : startVisualization}\n                      disabled={steps.length === 0}\n                      className=\"relative w-full bg-gradient-to-r from-cyan-500 to-blue-500 hover:from-cyan-400 hover:to-blue-400 text-white font-semibold py-6 rounded-lg border-2 border-cyan-400 shadow-[0_0_30px_rgba(0,255,255,0.6)] hover:shadow-[0_0_50px_rgba(0,255,255,0.9)] transition-all duration-300 disabled:opacity-50 disabled:cursor-not-allowed overflow-hidden group\"\n                    >\n                      <motion.div\n                        className=\"absolute inset-0 bg-gradient-to-r from-transparent via-white/30 to-transparent\"\n                        animate={{ x: ['-200%', '200%'] }}\n                        transition={{ duration: 2, repeat: Infinity, ease: \"linear\" }}\n                      />\n                      <div className=\"relative flex items-center justify-center gap-2\">\n                        {isPlaying ? (\n                          <>\n                            <Pause className=\"w-5 h-5\" />\n                            <span>Pause</span>\n                          </>\n                        ) : (\n                          <>\n                            <Play className=\"w-5 h-5\" />\n                            <span>Start</span>\n                          </>\n                        )}\n                      </div>\n                    </Button>\n                  </motion.div>\n\n                  <motion.div\n                    whileHover={{ scale: 1.05 }}\n                    whileTap={{ scale: 0.95, rotate: -360 }}\n                    transition={{ type: \"spring\", stiffness: 300, duration: 0.6 }}\n                  >\n                    <Button\n                      onClick={resetVisualization}\n                      className=\"relative w-full bg-gradient-to-r from-purple-500 to-pink-500 hover:from-purple-400 hover:to-pink-400 text-white font-semibold py-6 rounded-lg border-2 border-purple-400 shadow-[0_0_30px_rgba(168,85,247,0.6)] hover:shadow-[0_0_50px_rgba(168,85,247,0.9)] transition-all duration-300 overflow-hidden group\"\n                    >\n                      <motion.div\n                        className=\"absolute inset-0 bg-gradient-to-r from-transparent via-white/30 to-transparent\"\n                        animate={{ x: ['-200%', '200%'] }}\n                        transition={{ duration: 2, repeat: Infinity, ease: \"linear\", delay: 0.5 }}\n                      />\n                      <motion.div\n                        className=\"absolute inset-0 rounded-lg\"\n                        animate={{\n                          boxShadow: [\n                            '0 0 20px rgba(168,85,247,0.4)',\n                            '0 0 40px rgba(236,72,153,0.6)',\n                            '0 0 20px rgba(168,85,247,0.4)'\n                          ]\n                        }}\n                        transition={{ duration: 2, repeat: Infinity }}\n                      />\n                      <div className=\"relative flex items-center justify-center gap-2\">\n                        <motion.div\n                          animate={{ rotate: [0, 360] }}\n                          transition={{ duration: 3, repeat: Infinity, ease: \"linear\" }}\n                        >\n                          <RotateCcw className=\"w-5 h-5\" />\n                        </motion.div>\n                        <span>Reset</span>\n                      </div>\n                    </Button>\n                  </motion.div>\n\n                  <motion.div\n                    whileHover={{ scale: 1.05 }}\n                    whileTap={{ scale: 0.95 }}\n                  >\n                    <Button\n                      onClick={generateRandomArray}\n                      disabled={isPlaying}\n                      className=\"relative w-full bg-gradient-to-r from-green-500 to-emerald-500 hover:from-green-400 hover:to-emerald-400 text-white font-semibold py-6 rounded-lg border-2 border-green-400 shadow-[0_0_30px_rgba(34,197,94,0.6)] hover:shadow-[0_0_50px_rgba(34,197,94,0.9)] transition-all duration-300 disabled:opacity-50 disabled:cursor-not-allowed overflow-hidden group\"\n                    >\n                      <motion.div\n                        className=\"absolute inset-0 bg-gradient-to-r from-transparent via-white/30 to-transparent\"\n                        animate={{ x: ['-200%', '200%'] }}\n                        transition={{ duration: 2, repeat: Infinity, ease: \"linear\", delay: 1 }}\n                      />\n                      <motion.div\n                        className=\"absolute inset-0\"\n                        animate={{\n                          background: [\n                            'radial-gradient(circle at 50% 50%, rgba(34,197,94,0.3) 0%, transparent 50%)',\n                            'radial-gradient(circle at 50% 50%, rgba(16,185,129,0.3) 0%, transparent 50%)',\n                            'radial-gradient(circle at 50% 50%, rgba(34,197,94,0.3) 0%, transparent 50%)'\n                          ]\n                        }}\n                        transition={{ duration: 2, repeat: Infinity }}\n                      />\n                      <div className=\"relative flex items-center justify-center gap-2\">\n                        <Zap className=\"w-5 h-5\" />\n                        <span>Generate</span>\n                      </div>\n                    </Button>\n                  </motion.div>\n                </div>\n              </div>\n            </div>\n\n            {/* TODO:StatsPanel Real-time statistics panel showing comparisons, swaps, and progress */}\n          </div>\n\n          <div className=\"lg:col-span-3\">\n            <div className=\"bg-gray-900/50 backdrop-blur-lg border border-purple-500/30 rounded-xl p-8 shadow-2xl shadow-purple-500/20 min-h-[600px]\">\n              {array.length === 0 ? (\n                <div className=\"flex items-center justify-center h-full\">\n                  <motion.div\n                    initial={{ opacity: 0, scale: 0.8 }}\n                    animate={{ opacity: 1, scale: 1 }}\n                    className=\"text-center space-y-4\"\n                  >\n                    <motion.div\n                      animate={{\n                        rotate: [0, 360],\n                      }}\n                      transition={{ duration: 3, repeat: Infinity, ease: \"linear\" }}\n                      className=\"w-16 h-16 mx-auto border-4 border-cyan-400 border-t-transparent rounded-full\"\n                    />\n                    <p className=\"text-cyan-400 text-lg font-semibold\">\n                      Click \"Generate Array\" to start\n                    </p>\n                  </motion.div>\n                </div>\n              ) : (\n                <div className=\"relative h-full flex items-end justify-center gap-1 px-4\">\n                  {array.map((element, index) => {\n                    const maxValue = Math.max(...array.map(e => e.value));\n                    const heightPercentage = (element.value / maxValue) * 100;\n                    const colorIndex = index % NEON_COLORS.length;\n                    const baseColor = NEON_COLORS[colorIndex];\n                    \n                    let barColor = baseColor;\n                    let glowIntensity = 0.3;\n                    let scaleEffect = 1;\n                    \n                    if (element.isComparing) {\n                      barColor = '#ffff00';\n                      glowIntensity = 0.8;\n                      scaleEffect = 1.05;\n                    } else if (element.isSwapping) {\n                      barColor = '#ff00ff';\n                      glowIntensity = 1;\n                      scaleEffect = 1.1;\n                    } else if (element.isSorted) {\n                      barColor = '#00ff00';\n                      glowIntensity = 0.6;\n                    }\n                    \n                    return (\n                      <motion.div\n                        key={element.id}\n                        className=\"relative flex-1 min-w-[4px] max-w-[60px] rounded-t-lg\"\n                        style={{\n                          height: `${heightPercentage}%`,\n                          backgroundColor: barColor,\n                          boxShadow: `\n                            0 0 ${10 * glowIntensity}px ${barColor},\n                            0 0 ${20 * glowIntensity}px ${barColor},\n                            0 0 ${30 * glowIntensity}px ${barColor},\n                            inset 0 0 ${10 * glowIntensity}px rgba(255, 255, 255, 0.5)\n                          `,\n                        }}\n                        initial={{ height: 0, opacity: 0 }}\n                        animate={{\n                          height: `${heightPercentage}%`,\n                          opacity: 1,\n                          scale: scaleEffect,\n                          y: element.isSwapping ? [-10, 0] : 0,\n                        }}\n                        transition={{\n                          height: { duration: 0.5, ease: \"easeOut\" },\n                          opacity: { duration: 0.3 },\n                          scale: { duration: 0.2 },\n                          y: { duration: 0.3, ease: \"easeInOut\" },\n                        }}\n                      >\n                        {/* Swap trail effect */}\n                        {element.isSwapping && (\n                          <>\n                            <motion.div\n                              className=\"absolute inset-0 rounded-t-lg\"\n                              style={{\n                                backgroundColor: barColor,\n                                filter: 'blur(8px)',\n                              }}\n                              initial={{ opacity: 0 }}\n                              animate={{ opacity: [0, 0.6, 0] }}\n                              transition={{ duration: 0.6, repeat: Infinity }}\n                            />\n                            <motion.div\n                              className=\"absolute -top-8 left-1/2 transform -translate-x-1/2\"\n                              initial={{ opacity: 0, y: 10 }}\n                              animate={{ opacity: [0, 1, 0], y: [-10, -20, -30] }}\n                              transition={{ duration: 0.8, repeat: Infinity }}\n                            >\n                              <div\n                                className=\"w-2 h-2 rounded-full\"\n                                style={{\n                                  backgroundColor: barColor,\n                                  boxShadow: `0 0 10px ${barColor}`,\n                                }}\n                              />\n                            </motion.div>\n                          </>\n                        )}\n                        \n                        {/* Comparison indicator */}\n                        {element.isComparing && (\n                          <motion.div\n                            className=\"absolute -top-12 left-1/2 transform -translate-x-1/2\"\n                            initial={{ opacity: 0, scale: 0 }}\n                            animate={{ opacity: 1, scale: [1, 1.2, 1] }}\n                            transition={{ duration: 0.5, repeat: Infinity }}\n                          >\n                            <div className=\"relative\">\n                              <div\n                                className=\"w-6 h-6 rounded-full border-2 flex items-center justify-center\"\n                                style={{\n                                  borderColor: barColor,\n                                  backgroundColor: `${barColor}20`,\n                                  boxShadow: `0 0 15px ${barColor}`,\n                                }}\n                              >\n                                <div\n                                  className=\"w-2 h-2 rounded-full\"\n                                  style={{ backgroundColor: barColor }}\n                                />\n                              </div>\n                              <motion.div\n                                className=\"absolute inset-0 rounded-full border-2\"\n                                style={{ borderColor: barColor }}\n                                animate={{ scale: [1, 1.5], opacity: [1, 0] }}\n                                transition={{ duration: 1, repeat: Infinity }}\n                              />\n                            </div>\n                          </motion.div>\n                        )}\n                        \n                        {/* Sorted checkmark */}\n                        {element.isSorted && (\n                          <motion.div\n                            className=\"absolute -top-8 left-1/2 transform -translate-x-1/2\"\n                            initial={{ opacity: 0, scale: 0, rotate: -180 }}\n                            animate={{ opacity: 1, scale: 1, rotate: 0 }}\n                            transition={{ type: \"spring\", stiffness: 200, damping: 10 }}\n                          >\n                            <div\n                              className=\"w-5 h-5 rounded-full flex items-center justify-center text-xs font-bold\"\n                              style={{\n                                backgroundColor: barColor,\n                                boxShadow: `0 0 15px ${barColor}`,\n                                color: '#000',\n                              }}\n                            >\n                              \u2713\n                            </div>\n                          </motion.div>\n                        )}\n                        \n                        {/* Value label */}\n                        {arraySize[0] <= 30 && (\n                          <motion.div\n                            className=\"absolute bottom-2 left-1/2 transform -translate-x-1/2 text-xs font-bold\"\n                            style={{\n                              color: element.isSorted || element.isComparing || element.isSwapping ? '#000' : '#fff',\n                              textShadow: `0 0 5px ${barColor}`,\n                            }}\n                            initial={{ opacity: 0 }}\n                            animate={{ opacity: 1 }}\n                            transition={{ delay: 0.2 }}\n                          >\n                            {element.value}\n                          </motion.div>\n                        )}\n                        \n                        {/* Pulsing glow effect */}\n                        <motion.div\n                          className=\"absolute inset-0 rounded-t-lg pointer-events-none\"\n                          style={{\n                            background: `linear-gradient(to top, transparent, ${barColor}40)`,\n                          }}\n                          animate={{\n                            opacity: [0.3, 0.6, 0.3],\n                          }}\n                          transition={{\n                            duration: 2,\n                            repeat: Infinity,\n                            ease: \"easeInOut\",\n                          }}\n                        />\n                      </motion.div>\n                    );\n                  })}\n                </div>\n              )}</parameter><xcrdt_code_output crdtPosition=\"ANfVqugP9gRB\">\n\n              \n              <div className=\"relative h-full flex items-end justify-center gap-1\">\n                {array.map((element, index) => {\n                  const maxHeight = 500;\n                  const barHeight = (element.value / 100) * maxHeight;\n                  const colorIndex = index % NEON_COLORS.length;\n                  const neonColor = NEON_COLORS[colorIndex];\n                  \n                  const isComparing = currentStep < steps.length && steps[currentStep]?.comparingIndices.includes(index);\n                  const isSwapping = currentStep < steps.length && steps[currentStep]?.swappingIndices.includes(index);\n                  const isSorted = currentStep < steps.length && steps[currentStep]?.sortedIndices.includes(index);\n                  \n                  return (\n                    <motion.div\n                      key={element.id}\n                      className=\"relative flex-1 min-w-[8px] max-w-[60px] group\"\n                      initial={{ height: 0, opacity: 0 }}\n                      animate={{ \n                        height: barHeight,\n                        opacity: 1,\n                        scale: isSwapping ? 1.1 : 1,\n                        y: isSwapping ? -20 : 0\n                      }}\n                      transition={{\n                        height: { duration: 0.5, ease: \"easeOut\" },\n                        opacity: { duration: 0.3 },\n                        scale: { duration: 0.3, type: \"spring\", stiffness: 300 },\n                        y: { duration: 0.3, type: \"spring\", stiffness: 300 }\n                      }}\n                    >\n                      <motion.div\n                        className=\"absolute inset-0 rounded-t-lg\"\n                        style={{\n                          backgroundColor: isSorted ? '#00ff00' : isComparing ? '#ffff00' : isSwapping ? '#ff00ff' : neonColor,\n                          boxShadow: isSorted \n                            ? `0 0 30px rgba(0, 255, 0, 0.8), 0 0 60px rgba(0, 255, 0, 0.5), inset 0 0 20px rgba(0, 255, 0, 0.3)`\n                            : isComparing\n                            ? `0 0 40px rgba(255, 255, 0, 0.9), 0 0 80px rgba(255, 255, 0, 0.6), inset 0 0 25px rgba(255, 255, 0, 0.4)`\n                            : isSwapping\n                            ? `0 0 50px rgba(255, 0, 255, 1), 0 0 100px rgba(255, 0, 255, 0.7), inset 0 0 30px rgba(255, 0, 255, 0.5)`\n                            : `0 0 20px ${neonColor}80, 0 0 40px ${neonColor}40, inset 0 0 15px ${neonColor}30`\n                        }}\n                        animate={{\n                          boxShadow: isSorted\n                            ? [\n                                `0 0 30px rgba(0, 255, 0, 0.8), 0 0 60px rgba(0, 255, 0, 0.5), inset 0 0 20px rgba(0, 255, 0, 0.3)`,\n                                `0 0 40px rgba(0, 255, 0, 1), 0 0 80px rgba(0, 255, 0, 0.7), inset 0 0 30px rgba(0, 255, 0, 0.5)`,\n                                `0 0 30px rgba(0, 255, 0, 0.8), 0 0 60px rgba(0, 255, 0, 0.5), inset 0 0 20px rgba(0, 255, 0, 0.3)`\n                              ]\n                            : isComparing\n                            ? [\n                                `0 0 40px rgba(255, 255, 0, 0.9), 0 0 80px rgba(255, 255, 0, 0.6), inset 0 0 25px rgba(255, 255, 0, 0.4)`,\n                                `0 0 50px rgba(255, 255, 0, 1), 0 0 100px rgba(255, 255, 0, 0.8), inset 0 0 35px rgba(255, 255, 0, 0.6)`,\n                                `0 0 40px rgba(255, 255, 0, 0.9), 0 0 80px rgba(255, 255, 0, 0.6), inset 0 0 25px rgba(255, 255, 0, 0.4)`\n                              ]\n                            : isSwapping\n                            ? [\n                                `0 0 50px rgba(255, 0, 255, 1), 0 0 100px rgba(255, 0, 255, 0.7), inset 0 0 30px rgba(255, 0, 255, 0.5)`,\n                                `0 0 60px rgba(255, 0, 255, 1), 0 0 120px rgba(255, 0, 255, 0.9), inset 0 0 40px rgba(255, 0, 255, 0.7)`,\n                                `0 0 50px rgba(255, 0, 255, 1), 0 0 100px rgba(255, 0, 255, 0.7), inset 0 0 30px rgba(255, 0, 255, 0.5)`\n                              ]\n                            : undefined\n                        }}\n                        transition={{\n                          boxShadow: { duration: 0.8, repeat: (isSorted || isComparing || isSwapping) ? Infinity : 0 }\n                        }}\n                      >\n                        {/* Gradient overlay for depth */}\n                        <div \n                          className=\"absolute inset-0 rounded-t-lg\"\n                          style={{\n                            background: `linear-gradient(to top, rgba(0,0,0,0.3) 0%, transparent 50%, rgba(255,255,255,0.2) 100%)`\n                          }}\n                        />\n                        \n                        {/* Swap trail effect */}\n                        {isSwapping && (\n                          <motion.div\n                            className=\"absolute inset-0 rounded-t-lg\"\n                            style={{\n                              background: `linear-gradient(to top, rgba(255, 0, 255, 0.5), rgba(255, 0, 255, 0))`\n                            }}\n                            initial={{ opacity: 0 }}\n                            animate={{ opacity: [0, 1, 0] }}\n                            transition={{ duration: 0.6, repeat: Infinity }}\n                          />\n                        )}\n                        \n                        {/* Comparison pulse effect */}\n                        {isComparing && (\n                          <motion.div\n                            className=\"absolute -inset-1 rounded-t-lg border-2 border-yellow-400\"\n                            initial={{ opacity: 0, scale: 0.8 }}\n                            animate={{ opacity: [0, 1, 0], scale: [0.8, 1.2, 0.8] }}\n                            transition={{ duration: 0.8, repeat: Infinity }}\n                          />\n                        )}\n                      </motion.div>\n                      \n                      {/* Value label */}\n                      <motion.div\n                        className=\"absolute -bottom-6 left-1/2 transform -translate-x-1/2 text-xs font-mono font-bold whitespace-nowrap\"\n                        style={{\n                          color: isSorted ? '#00ff00' : isComparing ? '#ffff00' : isSwapping ? '#ff00ff' : neonColor,\n                          textShadow: `0 0 10px ${isSorted ? '#00ff00' : isComparing ? '#ffff00' : isSwapping ? '#ff00ff' : neonColor}`\n                        }}\n                        initial={{ opacity: 0 }}\n                        animate={{ opacity: 1 }}\n                        transition={{ delay: 0.2 }}\n                      >\n                        {element.value}\n                      </motion.div>\n                      \n                      {/* Hover glow enhancement */}\n                      <motion.div\n                        className=\"absolute inset-0 rounded-t-lg opacity-0 group-hover:opacity-100 transition-opacity duration-300 pointer-events-none\"\n                        style={{\n                          boxShadow: `0 0 40px ${neonColor}, 0 0 80px ${neonColor}80`\n                        }}\n                      />\n                    </motion.div>\n                  );\n                })}\n              </div>\n            </div>\n\n                        <motion.div\n              initial={{ opacity: 0, y: 10 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ delay: 0.3 }}\n              className=\"mt-6\"\n            >\n              <div className=\"space-y-2\">\n                <div className=\"flex items-center justify-between text-sm\">\n                  <span className=\"text-purple-400 font-semibold\">Progress</span>\n                  <span className=\"text-purple-300 font-mono\">\n                    {steps.length > 0 ? Math.round((currentStep / steps.length) * 100) : 0}%\n                  </span>\n                </div>\n                <div className=\"relative h-3 bg-gray-800/80 rounded-full border border-purple-500/30 overflow-hidden\">\n                  <motion.div\n                    className=\"absolute inset-y-0 left-0 bg-gradient-to-r from-cyan-500 via-purple-500 to-pink-500 rounded-full\"\n                    initial={{ width: '0%' }}\n                    animate={{ \n                      width: steps.length > 0 ? `${(currentStep / steps.length) * 100}%` : '0%'\n                    }}\n                    transition={{ duration: 0.3, ease: \"easeOut\" }}\n                  />\n                  <motion.div\n                    className=\"absolute inset-0 bg-gradient-to-r from-transparent via-white/30 to-transparent\"\n                    animate={{ x: ['-100%', '200%'] }}\n                    transition={{ duration: 1.5, repeat: Infinity, ease: \"linear\" }}\n                  />\n                  <motion.div\n                    className=\"absolute inset-0 rounded-full\"\n                    animate={{\n                      boxShadow: [\n                        '0 0 10px rgba(168, 85, 247, 0.4)',\n                        '0 0 20px rgba(168, 85, 247, 0.6)',\n                        '0 0 10px rgba(168, 85, 247, 0.4)'\n                      ]\n                    }}\n                    transition={{ duration: 2, repeat: Infinity }}\n                  />\n                </div>\n                <div className=\"flex items-center justify-between text-xs text-gray-500\">\n                  <span>Step {currentStep} of {steps.length}</span>\n                  {currentStep === steps.length && steps.length > 0 && (\n                    <motion.span\n                      initial={{ opacity: 0, scale: 0.8 }}\n                      animate={{ opacity: 1, scale: 1 }}\n                      className=\"text-green-400 font-semibold\"\n                    >\n                      \u2713 Complete\n                    </motion.span>\n                  )}\n                </div>\n              </div>\n            </motion.div>\n          </div>\n        </div>\n\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ delay: 0.6, duration: 0.8 }}\n          className=\"bg-gray-900/50 backdrop-blur-lg border border-cyan-500/30 rounded-xl p-6 shadow-[0_0_30px_rgba(0,255,255,0.2)]\"\n        >\n          <div className=\"flex items-center gap-2 mb-4\">\n            <BarChart3 className=\"w-5 h-5 text-cyan-400\" />\n            <h3 className=\"text-lg font-semibold text-cyan-400 uppercase tracking-wider\">\n              Legend\n            </h3>\n          </div>\n          \n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n            {/* Default State */}\n            <motion.div\n              whileHover={{ scale: 1.05 }}\n              className=\"flex items-center gap-3 p-3 bg-gray-800/50 rounded-lg border border-gray-700 hover:border-gray-600 transition-all duration-300\"\n            >\n              <motion.div\n                className=\"w-6 h-6 rounded border-2 border-gray-500 bg-gradient-to-t from-gray-600 to-gray-400\"\n                animate={{\n                  boxShadow: [\n                    '0 0 10px rgba(156, 163, 175, 0.3)',\n                    '0 0 15px rgba(156, 163, 175, 0.5)',\n                    '0 0 10px rgba(156, 163, 175, 0.3)'\n                  ]\n                }}\n                transition={{ duration: 2, repeat: Infinity }}\n              />\n              <div>\n                <div className=\"text-sm font-semibold text-white\">Default</div>\n                <div className=\"text-xs text-gray-400\">Unsorted</div>\n              </div>\n            </motion.div>\n\n            {/* Comparing State */}\n            <motion.div\n              whileHover={{ scale: 1.05 }}\n              className=\"flex items-center gap-3 p-3 bg-yellow-500/10 rounded-lg border border-yellow-500/30 hover:border-yellow-500/50 transition-all duration-300\"\n            >\n              <motion.div\n                className=\"w-6 h-6 rounded border-2 border-yellow-400 bg-gradient-to-t from-yellow-600 to-yellow-400\"\n                animate={{\n                  boxShadow: [\n                    '0 0 15px rgba(250, 204, 21, 0.5)',\n                    '0 0 25px rgba(250, 204, 21, 0.8)',\n                    '0 0 15px rgba(250, 204, 21, 0.5)'\n                  ]\n                }}\n                transition={{ duration: 1.5, repeat: Infinity }}\n              />\n              <div>\n                <div className=\"text-sm font-semibold text-yellow-300\">Comparing</div>\n                <div className=\"text-xs text-yellow-400/70\">Active check</div>\n              </div>\n            </motion.div>\n\n            {/* Swapping State */}\n            <motion.div\n              whileHover={{ scale: 1.05 }}\n              className=\"flex items-center gap-3 p-3 bg-red-500/10 rounded-lg border border-red-500/30 hover:border-red-500/50 transition-all duration-300\"\n            >\n              <motion.div\n                className=\"w-6 h-6 rounded border-2 border-red-400 bg-gradient-to-t from-red-600 to-red-400\"\n                animate={{\n                  boxShadow: [\n                    '0 0 15px rgba(239, 68, 68, 0.5)',\n                    '0 0 30px rgba(239, 68, 68, 0.9)',\n                    '0 0 15px rgba(239, 68, 68, 0.5)'\n                  ],\n                  scale: [1, 1.1, 1]\n                }}\n                transition={{ duration: 1, repeat: Infinity }}\n              />\n              <div>\n                <div className=\"text-sm font-semibold text-red-300\">Swapping</div>\n                <div className=\"text-xs text-red-400/70\">Exchanging</div>\n              </div>\n            </motion.div>\n\n            {/* Sorted State */}\n            <motion.div\n              whileHover={{ scale: 1.05 }}\n              className=\"flex items-center gap-3 p-3 bg-green-500/10 rounded-lg border border-green-500/30 hover:border-green-500/50 transition-all duration-300\"\n            >\n              <motion.div\n                className=\"w-6 h-6 rounded border-2 border-green-400 bg-gradient-to-t from-green-600 to-green-400\"\n                animate={{\n                  boxShadow: [\n                    '0 0 15px rgba(34, 197, 94, 0.5)',\n                    '0 0 25px rgba(34, 197, 94, 0.8)',\n                    '0 0 15px rgba(34, 197, 94, 0.5)'\n                  ]\n                }}\n                transition={{ duration: 2, repeat: Infinity }}\n              />\n              <div>\n                <div className=\"text-sm font-semibold text-green-300\">Sorted</div>\n                <div className=\"text-xs text-green-400/70\">Complete</div>\n              </div>\n            </motion.div>\n          </div>\n\n          {/* Additional Info */}\n          <motion.div\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            transition={{ delay: 1 }}\n            className=\"mt-4 pt-4 border-t border-gray-700\"\n          >\n            <div className=\"flex items-center justify-center gap-6 text-xs text-gray-400\">\n              <div className=\"flex items-center gap-2\">\n                <motion.div\n                  className=\"w-2 h-2 rounded-full bg-cyan-400\"\n                  animate={{\n                    boxShadow: [\n                      '0 0 5px rgba(34, 211, 238, 0.5)',\n                      '0 0 10px rgba(34, 211, 238, 1)',\n                      '0 0 5px rgba(34, 211, 238, 0.5)'\n                    ]\n                  }}\n                  transition={{ duration: 1.5, repeat: Infinity }}\n                />\n                <span>Neon glow indicates active state</span>\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <motion.div\n                  className=\"w-2 h-2 rounded-full bg-purple-400\"\n                  animate={{\n                    scale: [1, 1.3, 1]\n                  }}\n                  transition={{ duration: 1, repeat: Infinity }}\n                />\n                <span>Pulse effect shows transitions</span>\n              </div>\n            </div>\n          </motion.div>\n        </motion.div>\n      </div>\n    </div>\n  );\n}",
  "error": null,
  "overall_score": 41,
  "code_quality_score": 12,
  "architecture_score": 10,
  "performance_score": 8,
  "accessibility_score": 11,
  "metadata": {
    "document_id": "eval_room_8a1bc66ecc64",
    "prompt_category": "creative",
    "prompt_complexity": 9.0
  },
  "raw_response": {
    "document_id": "eval_room_8a1bc66ecc64",
    "mode": "parallel",
    "prompt": "Build a captivating algorithm visualizer with neon colored bars, smooth height transitions, glowing comparison indicators, trail effects during swaps, and a futuristic dashboard design with animated controls",
    "content": "import { useState, useCallback } from 'react';\nimport { useEffect } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Slider } from '@/components/ui/slider';\nimport { Play, Pause, RotateCcw, Zap, BarChart3 } from 'lucide-react';\nimport { motion } from 'framer-motion';\n\ninterface ArrayElement {\n  value: number;\n  id: string;\n  isComparing?: boolean;\n  isSwapping?: boolean;\n  isSorted?: boolean;\n}\n\ninterface AlgorithmStep {\n  array: ArrayElement[];\n  comparingIndices: number[];\n  swappingIndices: number[];\n  sortedIndices: number[];\n}\n\ntype AlgorithmType = 'bubble' | 'quick' | 'merge' | 'insertion';\n\nconst NEON_COLORS = [\n  '#00ffff',\n  '#ff00ff', \n  '#00ff00',\n  '#ffff00',\n  '#ff0066',\n  '#00ffaa'\n];\n\nconst mockAlgorithms = [\n  { id: 'bubble', name: 'Bubble Sort', complexity: 'O(n\u00b2)' },\n  { id: 'quick', name: 'Quick Sort', complexity: 'O(n log n)' },\n  { id: 'merge', name: 'Merge Sort', complexity: 'O(n log n)' },\n  { id: 'insertion', name: 'Insertion Sort', complexity: 'O(n\u00b2)' }\n];\n\nexport default function AlgorithmVisualizer() {\n\n  useEffect(() => {\n    generateRandomArray();\n  }, [generateRandomArray]);\n\n  useEffect(() => {\n    if (isPlaying && currentStep < steps.length) {\n      const delay = 1000 - speed[0] * 10;\n      const timer = setTimeout(() => {\n        setArray(steps[currentStep].array);\n        setCurrentStep((prev) => {\n          const nextStep = prev + 1;\n          if (nextStep >= steps.length) {\n            setIsPlaying(false);\n            return prev;\n          }\n          return nextStep;\n        });\n      }, delay);\n      return () => clearTimeout(timer);\n    }\n  }, [isPlaying, currentStep, steps, speed]);\n  useEffect(() => {\n    if (isPlaying && currentStep < steps.length) {\n      const delay = 1000 - speed[0] * 10;\n      const timer = setTimeout(() => {\n        setCurrentStep((prev) => {\n          const nextStep = prev + 1;\n          if (nextStep >= steps.length) {\n            setIsPlaying(false);\n            return prev;\n          }\n          return nextStep;\n        });\n      }, delay);\n      \n      return () => clearTimeout(timer);\n    }\n  }, [isPlaying, currentStep, steps.length, speed]);\n  const [array, setArray] = useState<ArrayElement[]>([]);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [speed, setSpeed] = useState([50]);\n  const [arraySize, setArraySize] = useState([20]);\n  const [selectedAlgorithm, setSelectedAlgorithm] = useState<AlgorithmType>('bubble');\n  const [currentStep, setCurrentStep] = useState(0);\n  const [steps, setSteps] = useState<AlgorithmStep[]>([]);\n\n\n  const generateRandomArray = useCallback(() => {\n    const newArray: ArrayElement[] = Array.from({ length: arraySize[0] }, (_, index) => ({\n      value: Math.floor(Math.random() * 100) + 5,\n      id: `element-${index}-${Date.now()}`,\n      isComparing: false,\n      isSwapping: false,\n      isSorted: false\n    }));\n    setArray(newArray);\n    setSteps([]);\n    setCurrentStep(0);\n    setIsPlaying(false);\n  }, [arraySize]);\n\n  const resetVisualization = useCallback(() => {\n\n\n    setIsPlaying(false);\n    setCurrentStep(0);\n    setSteps([]);\n    generateRandomArray();\n  }, [generateRandomArray]);\n\n  const startVisualization = useCallback(() => {\n    if (steps.length === 0 || currentStep >= steps.length) return;\n    \n    setIsPlaying(true);\n    \n    const animate = () => {\n      setCurrentStep((prev) => {\n        const nextStep = prev + 1;\n        if (nextStep >= steps.length) {\n          setIsPlaying(false);\n          return prev;\n        }\n        return nextStep;\n      });\n    };\n    \n    const delay = 1000 - speed[0] * 10;\n    const timer = setTimeout(animate, delay);\n    \n    return () => clearTimeout(timer);\n    \n  }, [steps, speed, currentStep]);\n\n  const pauseVisualization = useCallback(() => {\n    setIsPlaying(false);\n\n  }, []);\n\n  const generateSortingSteps = useCallback((algorithm: AlgorithmType) => {\n        if (array.length === 0) return;\n\n    const steps: AlgorithmStep[] = [];\n    const arr = array.map(el => ({ ...el }));\n\n    const addStep = (\n      currentArray: ArrayElement[],\n      comparing: number[] = [],\n      swapping: number[] = [],\n      sorted: number[] = []\n    ) => {\n      steps.push({\n        array: currentArray.map(el => ({ ...el })),\n        comparingIndices: [...comparing],\n        swappingIndices: [...swapping],\n        sortedIndices: [...sorted]\n      });\n    };\n\n    switch (algorithm) {\n      case 'bubble': {\n        const sortedIndices: number[] = [];\n        for (let i = 0; i < arr.length - 1; i++) {\n          for (let j = 0; j < arr.length - i - 1; j++) {\n            addStep(arr, [j, j + 1], [], sortedIndices);\n            \n            if (arr[j].value > arr[j + 1].value) {\n              addStep(arr, [], [j, j + 1], sortedIndices);\n              [arr[j], arr[j + 1]] = [arr[j + 1], arr[j]];\n              addStep(arr, [], [], sortedIndices);\n            }\n          }\n          sortedIndices.push(arr.length - i - 1);\n          addStep(arr, [], [], sortedIndices);\n        }\n        sortedIndices.push(0);\n        addStep(arr, [], [], sortedIndices);\n        break;\n      }\n\n      case 'insertion': {\n        const sortedIndices: number[] = [0];\n        addStep(arr, [], [], sortedIndices);\n        \n        for (let i = 1; i < arr.length; i++) {\n          const key = arr[i];\n          let j = i - 1;\n          \n          addStep(arr, [i], [], sortedIndices);\n          \n          while (j >= 0 && arr[j].value > key.value) {\n            addStep(arr, [j, j + 1], [], sortedIndices);\n            addStep(arr, [], [j, j + 1], sortedIndices);\n            arr[j + 1] = arr[j];\n            addStep(arr, [], [], sortedIndices);\n            j--;\n          }\n          \n          arr[j + 1] = key;\n          sortedIndices.push(i);\n          addStep(arr, [], [], sortedIndices);\n        }\n        break;\n      }\n\n      case 'quick': {\n        const sortedIndices: number[] = [];\n        \n        const partition = (low: number, high: number): number => {\n          const pivot = arr[high].value;\n          let i = low - 1;\n          \n          addStep(arr, [high], [], sortedIndices);\n          \n          for (let j = low; j < high; j++) {\n            addStep(arr, [j, high], [], sortedIndices);\n            \n            if (arr[j].value < pivot) {\n              i++;\n              addStep(arr, [], [i, j], sortedIndices);\n              [arr[i], arr[j]] = [arr[j], arr[i]];\n              addStep(arr, [], [], sortedIndices);\n            }\n          }\n          \n          addStep(arr, [], [i + 1, high], sortedIndices);\n          [arr[i + 1], arr[high]] = [arr[high], arr[i + 1]];\n          sortedIndices.push(i + 1);\n          addStep(arr, [], [], sortedIndices);\n          \n          return i + 1;\n        };\n        \n        const quickSort = (low: number, high: number) => {\n          if (low < high) {\n            const pi = partition(low, high);\n            quickSort(low, pi - 1);\n            quickSort(pi + 1, high);\n          } else if (low === high) {\n            sortedIndices.push(low);\n            addStep(arr, [], [], sortedIndices);\n          }\n        };\n        \n        quickSort(0, arr.length - 1);\n        break;\n      }\n\n      case 'merge': {\n        const sortedIndices: number[] = [];\n        \n        const merge = (left: number, mid: number, right: number) => {\n          const leftArr = arr.slice(left, mid + 1);\n          const rightArr = arr.slice(mid + 1, right + 1);\n          \n          let i = 0, j = 0, k = left;\n          \n          while (i < leftArr.length && j < rightArr.length) {\n            addStep(arr, [left + i, mid + 1 + j], [], sortedIndices);\n            \n            if (leftArr[i].value <= rightArr[j].value) {\n              addStep(arr, [], [k], sortedIndices);\n              arr[k] = leftArr[i];\n              i++;\n            } else {\n              addStep(arr, [], [k], sortedIndices);\n              arr[k] = rightArr[j];\n              j++;\n            }\n            k++;\n            addStep(arr, [], [], sortedIndices);\n          }\n          \n          while (i < leftArr.length) {\n            addStep(arr, [], [k], sortedIndices);\n            arr[k] = leftArr[i];\n            i++;\n            k++;\n            addStep(arr, [], [], sortedIndices);\n          }\n          \n          while (j < rightArr.length) {\n            addStep(arr, [], [k], sortedIndices);\n            arr[k] = rightArr[j];\n            j++;\n            k++;\n            addStep(arr, [], [], sortedIndices);\n          }\n          \n          if (right - left + 1 === arr.length) {\n            for (let idx = 0; idx < arr.length; idx++) {\n              sortedIndices.push(idx);\n            }\n          }\n          addStep(arr, [], [], sortedIndices);\n        };\n        \n        const mergeSort = (left: number, right: number) => {\n          if (left < right) {\n            const mid = Math.floor((left + right) / 2);\n            mergeSort(left, mid);\n            mergeSort(mid + 1, right);\n            merge(left, mid, right);\n          }\n        };\n        \n        mergeSort(0, arr.length - 1);\n        break;\n      }\n    }\n\n    setSteps(steps);\n    setCurrentStep(0);\n  }, [array]);\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-gray-900 via-purple-900 to-gray-900 p-8\">\n      <div className=\"max-w-7xl mx-auto space-y-8\">\n        <motion.div\n          initial={{ opacity: 0, y: -20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.8 }}\n          className=\"text-center space-y-4\"\n        >\n          <motion.h1\n            className=\"text-6xl font-bold bg-gradient-to-r from-cyan-400 via-purple-400 to-pink-400 bg-clip-text text-transparent\"\n            animate={{\n              textShadow: [\n                '0 0 20px rgba(0, 255, 255, 0.5)',\n                '0 0 40px rgba(255, 0, 255, 0.5)',\n                '0 0 20px rgba(0, 255, 255, 0.5)'\n              ]\n            }}\n            transition={{ duration: 2, repeat: Infinity }}\n          >\n            Algorithm Visualizer\n          </motion.h1>\n          \n          <div className=\"flex items-center justify-center gap-4\">\n            <motion.div\n              initial={{ scale: 0 }}\n              animate={{ scale: 1 }}\n              transition={{ delay: 0.3, type: \"spring\" }}\n              className=\"px-6 py-2 bg-purple-500/20 border border-purple-400/50 rounded-full backdrop-blur-sm\"\n            >\n              <span className=\"text-2xl font-semibold text-purple-300\">\n                {mockAlgorithms.find(a => a.id === selectedAlgorithm)?.name || 'Bubble Sort'}\n              </span>\n            </motion.div>\n            \n            <motion.div\n              initial={{ scale: 0 }}\n              animate={{ scale: 1 }}\n              transition={{ delay: 0.5, type: \"spring\" }}\n              className=\"px-4 py-2 bg-cyan-500/20 border border-cyan-400/50 rounded-full backdrop-blur-sm relative overflow-hidden\"\n            >\n              <motion.div\n                className=\"absolute inset-0 bg-gradient-to-r from-transparent via-cyan-400/20 to-transparent\"\n                animate={{ x: ['-100%', '200%'] }}\n                transition={{ duration: 2, repeat: Infinity, ease: \"linear\" }}\n              />\n              <div className=\"relative flex items-center gap-2\">\n                <BarChart3 className=\"w-4 h-4 text-cyan-400\" />\n                <span className=\"text-sm font-mono text-cyan-300\">\n                  {mockAlgorithms.find(a => a.id === selectedAlgorithm)?.complexity || 'O(n\u00b2)'}\n                </span>\n              </div>\n            </motion.div>\n          </div>\n        </motion.div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-6\">\n          <div className=\"lg:col-span-1 space-y-6\">\n            <motion.div\n              initial={{ opacity: 0, x: -50 }}\n              animate={{ opacity: 1, x: 0 }}\n              className=\"bg-gray-900/50 backdrop-blur-lg border border-cyan-500/30 rounded-xl p-6 shadow-[0_0_30px_rgba(0,255,255,0.3)] hover:shadow-[0_0_50px_rgba(0,255,255,0.5)] transition-shadow duration-300\"\n            >\n              <div className=\"space-y-6\">\n                {/* Algorithm Selection */}\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center gap-2 text-cyan-400 font-semibold\">\n                    <Zap className=\"w-5 h-5\" />\n                    <span className=\"text-sm uppercase tracking-wider\">Algorithm</span>\n                  </div>\n                  <div className=\"grid grid-cols-1 gap-2\">\n                    {mockAlgorithms.map((algo) => (\n                      <motion.button\n                        key={algo.id}\n                        whileHover={{ scale: 1.02 }}\n                        whileTap={{ scale: 0.98 }}\n                        onClick={() => {\n                          setSelectedAlgorithm(algo.id as AlgorithmType);\n                          generateSortingSteps(algo.id as AlgorithmType);\n                        }}\n                        disabled={isPlaying}\n                        className={`p-3 rounded-lg border transition-all duration-300 text-left ${\n                          selectedAlgorithm === algo.id\n                            ? 'bg-cyan-500/20 border-cyan-400 shadow-[0_0_20px_rgba(0,255,255,0.4)]'\n                            : 'bg-gray-800/50 border-gray-700 hover:border-cyan-500/50 hover:bg-gray-800'\n                        } disabled:opacity-50 disabled:cursor-not-allowed`}\n                      >\n                        <div className=\"font-medium text-white\">{algo.name}</div>\n                        <div className=\"text-xs text-gray-400 mt-1\">{algo.complexity}</div>\n                      </motion.button>\n                    ))}\n                  </div>\n                </div>\n\n                {/* Speed Control */}\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center gap-2 text-purple-400 font-semibold\">\n                      <Zap className=\"w-5 h-5\" />\n                      <span className=\"text-sm uppercase tracking-wider\">Speed</span>\n                    </div>\n                    <span className=\"text-white font-mono text-sm bg-purple-500/20 px-2 py-1 rounded border border-purple-500/30\">\n                      {speed[0]}%\n                    </span>\n                  </div>\n                  <Slider\n                    value={speed}\n                    onValueChange={setSpeed}\n                    min={10}\n                    max={100}\n                    step={10}\n                    disabled={isPlaying}\n                    className=\"cursor-pointer\"\n                  />\n                </div>\n\n                {/* Array Size Control */}\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center gap-2 text-pink-400 font-semibold\">\n                      <BarChart3 className=\"w-5 h-5\" />\n                      <span className=\"text-sm uppercase tracking-wider\">Array Size</span>\n                    </div>\n                    <span className=\"text-white font-mono text-sm bg-pink-500/20 px-2 py-1 rounded border border-pink-500/30\">\n                      {arraySize[0]}\n                    </span>\n                  </div>\n                  <Slider\n                    value={arraySize}\n                    onValueChange={setArraySize}\n                    min={5}\n                    max={50}\n                    step={5}\n                    disabled={isPlaying}\n                    className=\"cursor-pointer\"\n                  />\n                </div>\n\n                {/* Control Buttons */}\n                <div className=\"space-y-2 pt-4 border-t border-gray-700\">\n                  <Button\n                    onClick={isPlaying ? pauseVisualization : startVisualization}\n                    disabled={steps.length === 0 || (currentStep >= steps.length && !isPlaying)}\n                    className=\"w-full bg-gradient-to-r from-cyan-500 to-blue-500 hover:from-cyan-600 hover:to-blue-600 text-white font-semibold shadow-[0_0_20px_rgba(0,255,255,0.5)] hover:shadow-[0_0_30px_rgba(0,255,255,0.7)] transition-all duration-300\"\n                  >\n                    {isPlaying ? (\n                      <>\n                        <Pause className=\"w-4 h-4 mr-2\" />\n                        Pause\n                      </>\n                    ) : (\n                      <>\n                        <Play className=\"w-4 h-4 mr-2\" />\n                        {currentStep >= steps.length ? 'Start' : 'Resume'}\n                      </>\n                    )}\n                  </Button>\n\n                  <Button\n                    onClick={resetVisualization}\n                    disabled={isPlaying}\n                    variant=\"outline\"\n                    className=\"w-full border-2 border-purple-500/50 bg-purple-500/10 hover:bg-purple-500/20 text-purple-300 hover:text-purple-200 shadow-[0_0_15px_rgba(168,85,247,0.3)] hover:shadow-[0_0_25px_rgba(168,85,247,0.5)] transition-all duration-300\"\n                  >\n                    <RotateCcw className=\"w-4 h-4 mr-2\" />\n                    Reset\n                  </Button>\n\n                  <Button\n                    onClick={generateRandomArray}\n                    disabled={isPlaying}\n                    variant=\"outline\"\n                    className=\"w-full border-2 border-pink-500/50 bg-pink-500/10 hover:bg-pink-500/20 text-pink-300 hover:text-pink-200 shadow-[0_0_15px_rgba(236,72,153,0.3)] hover:shadow-[0_0_25px_rgba(236,72,153,0.5)] transition-all duration-300\"\n                  >\n                    <Zap className=\"w-4 h-4 mr-2\" />\n                    New Array\n                  </Button>\n                </div>\n\n                {/* Stats Display */}\n                <div className=\"pt-4 border-t border-gray-700 space-y-2\">\n                  <div className=\"flex justify-between items-center text-sm\">\n                    <span className=\"text-gray-400\">Current Step:</span>\n                    <span className=\"text-cyan-400 font-mono font-semibold\">\n                      {currentStep} / {steps.length}\n                    </span>\n                  </div>\n                  <div className=\"flex justify-between items-center text-sm\">\n                    <span className=\"text-gray-400\">Status:</span>\n                    <span className={`font-semibold ${isPlaying ? 'text-green-400' : 'text-gray-400'}`}>\n                      {isPlaying ? 'Running' : 'Idle'}\n                    </span>\n                  </div>\n                </div>\n              </div>\n            </motion.div></parameter>\n            \n            <div className=\"bg-gray-900/50 backdrop-blur-lg border border-cyan-500/30 rounded-xl p-6 shadow-2xl shadow-cyan-500/20\">\n              <div className=\"space-y-6\">\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center gap-2 text-cyan-400\">\n                    <Zap className=\"w-4 h-4\" />\n                    <span className=\"text-sm font-semibold tracking-wider\">ALGORITHM</span>\n                  </div>\n                  <div className=\"grid grid-cols-1 gap-3\">\n                    {mockAlgorithms.map((algo) => (\n                      <motion.button\n                        key={algo.id}\n                        onClick={() => setSelectedAlgorithm(algo.id as AlgorithmType)}\n                        className={`relative p-4 rounded-lg border-2 transition-all duration-300 text-left ${\n                          selectedAlgorithm === algo.id\n                            ? 'border-cyan-400 bg-cyan-500/20 shadow-lg shadow-cyan-500/50'\n                            : 'border-gray-700 bg-gray-800/50 hover:border-cyan-500/50 hover:bg-cyan-500/10'\n                        }`}\n                        whileHover={{ scale: 1.02 }}\n                        whileTap={{ scale: 0.98 }}\n                      >\n                        <div className=\"space-y-1\">\n                          <div className=\"font-semibold text-white\">{algo.name}</div>\n                          <div className={`text-xs ${\n                            selectedAlgorithm === algo.id ? 'text-cyan-300' : 'text-gray-400'\n                          }`}>\n                            {algo.complexity}\n                          </div>\n                        </div>\n                        {selectedAlgorithm === algo.id && (\n                          <motion.div\n                            className=\"absolute inset-0 rounded-lg border-2 border-cyan-400\"\n                            initial={{ opacity: 0 }}\n                            animate={{ opacity: [0.5, 1, 0.5] }}\n                            transition={{ duration: 2, repeat: Infinity }}\n                          />\n                        )}\n                      </motion.button>\n                    ))}\n                  </div>\n                </div></parameter>\n\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <label className=\"text-cyan-400 text-sm font-medium flex items-center gap-2\">\n                      <Zap className=\"w-4 h-4\" />\n                      Speed\n                    </label>\n                    <span className=\"text-cyan-300 text-xs\">{speed[0]}ms</span>\n                  </div>\n                  <Slider\n                    value={speed}\n                    onValueChange={setSpeed}\n                    min={10}\n                    max={200}\n                    step={10}\n                    className=\"[&_[role=slider]]:h-4 [&_[role=slider]]:w-4 [&_[role=slider]]:bg-cyan-400 [&_[role=slider]]:border-2 [&_[role=slider]]:border-cyan-300 [&_[role=slider]]:shadow-[0_0_15px_rgba(34,211,238,0.8)] [&_[role=slider]]:transition-shadow [&_[role=slider]]:hover:shadow-[0_0_25px_rgba(34,211,238,1)] [&_.relative]:h-2 [&_.relative]:bg-gray-800 [&_.relative]:rounded-full [&_.relative]:border [&_.relative]:border-cyan-500/30 [&_[role=slider]]:focus-visible:ring-0 [&_[role=slider]]:focus-visible:ring-offset-0 [&_[role=slider]]:focus-visible:shadow-[0_0_30px_rgba(34,211,238,1)]\"\n                  /></parameter>\n                </div>\n\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <label className=\"text-cyan-400 text-sm font-medium flex items-center gap-2\">\n                      <BarChart3 className=\"w-4 h-4\" />\n                      Array Size\n                    </label>\n                    <span className=\"text-cyan-300 text-xs\">{arraySize[0]}</span>\n                  </div>\n                  <Slider\n                    value={arraySize}\n                    onValueChange={setArraySize}\n                    min={5}\n                    max={50}\n                    step={1}\n                    className=\"[&_[role=slider]]:bg-gradient-to-r [&_[role=slider]]:from-purple-500 [&_[role=slider]]:to-pink-500 [&_[role=slider]]:border-2 [&_[role=slider]]:border-purple-400 [&_[role=slider]]:shadow-lg [&_[role=slider]]:shadow-purple-500/50 [&_[role=slider]]:transition-all [&_[role=slider]]:hover:shadow-purple-500/80 [&_[role=slider]]:hover:scale-110 [&>span]:bg-gradient-to-r [&>span]:from-purple-500/30 [&>span]:to-pink-500/30 [&>span]:h-2 [&>span]:rounded-full\"\n                    disabled={isPlaying}\n                  />\n                </div>\n\n                <div className=\"flex gap-3 pt-4\">\n                  <motion.div\n                    whileHover={{ scale: 1.05 }}\n                    whileTap={{ scale: 0.95 }}\n                  >\n                    <Button\n                      onClick={isPlaying ? pauseVisualization : startVisualization}\n                      disabled={array.length === 0 || (steps.length === 0 && !isPlaying)}\n                      className=\"relative bg-gradient-to-r from-cyan-500 to-purple-500 hover:from-cyan-400 hover:to-purple-400 text-white font-semibold px-6 py-6 rounded-lg shadow-lg overflow-hidden group disabled:opacity-50 disabled:cursor-not-allowed\"\n                    >\n                      <motion.div\n                        className=\"absolute inset-0 bg-gradient-to-r from-cyan-400 to-purple-400 opacity-0 group-hover:opacity-100 blur-xl\"\n                        animate={{\n                          opacity: isPlaying ? [0.5, 0.8, 0.5] : 0\n                        }}\n                        transition={{ duration: 1.5, repeat: Infinity }}\n                      />\n                      <motion.div\n                        className=\"relative flex items-center gap-2\"\n                        initial={false}\n                        animate={{ rotate: isPlaying ? 0 : 0 }}\n                      >\n                        <motion.div\n                          initial={false}\n                          animate={{\n                            scale: isPlaying ? [1, 1.2, 1] : 1,\n                            rotate: isPlaying ? 0 : 0\n                          }}\n                          transition={{ duration: 0.3 }}\n                        >\n                          {isPlaying ? (\n                            <Pause className=\"w-5 h-5\" />\n                          ) : (\n                            <Play className=\"w-5 h-5\" />\n                          )}\n                        </motion.div>\n                        <span>{isPlaying ? 'Pause' : 'Play'}</span>\n                      </motion.div>\n                      <motion.div\n                        className=\"absolute inset-0 rounded-lg\"\n                        animate={{\n                          boxShadow: isPlaying\n                            ? [\n                                '0 0 20px rgba(0, 255, 255, 0.5)',\n                                '0 0 40px rgba(168, 85, 247, 0.5)',\n                                '0 0 20px rgba(0, 255, 255, 0.5)'\n                              ]\n                            : '0 0 10px rgba(0, 255, 255, 0.3)'\n                        }}\n                        transition={{ duration: 2, repeat: Infinity }}\n                      />\n                    </Button>\n                  </motion.div>\n                                    <motion.div\n                    whileHover={{ scale: 1.05 }}\n                    whileTap={{ scale: 0.95, rotate: 360 }}\n                    transition={{ type: \"spring\", stiffness: 300 }}\n                  >\n                    <Button\n                      onClick={isPlaying ? pauseVisualization : startVisualization}\n                      disabled={steps.length === 0}\n                      className=\"relative w-full bg-gradient-to-r from-cyan-500 to-blue-500 hover:from-cyan-400 hover:to-blue-400 text-white font-semibold py-6 rounded-lg border-2 border-cyan-400 shadow-[0_0_30px_rgba(0,255,255,0.6)] hover:shadow-[0_0_50px_rgba(0,255,255,0.9)] transition-all duration-300 disabled:opacity-50 disabled:cursor-not-allowed overflow-hidden group\"\n                    >\n                      <motion.div\n                        className=\"absolute inset-0 bg-gradient-to-r from-transparent via-white/30 to-transparent\"\n                        animate={{ x: ['-200%', '200%'] }}\n                        transition={{ duration: 2, repeat: Infinity, ease: \"linear\" }}\n                      />\n                      <div className=\"relative flex items-center justify-center gap-2\">\n                        {isPlaying ? (\n                          <>\n                            <Pause className=\"w-5 h-5\" />\n                            <span>Pause</span>\n                          </>\n                        ) : (\n                          <>\n                            <Play className=\"w-5 h-5\" />\n                            <span>Start</span>\n                          </>\n                        )}\n                      </div>\n                    </Button>\n                  </motion.div>\n\n                  <motion.div\n                    whileHover={{ scale: 1.05 }}\n                    whileTap={{ scale: 0.95, rotate: -360 }}\n                    transition={{ type: \"spring\", stiffness: 300, duration: 0.6 }}\n                  >\n                    <Button\n                      onClick={resetVisualization}\n                      className=\"relative w-full bg-gradient-to-r from-purple-500 to-pink-500 hover:from-purple-400 hover:to-pink-400 text-white font-semibold py-6 rounded-lg border-2 border-purple-400 shadow-[0_0_30px_rgba(168,85,247,0.6)] hover:shadow-[0_0_50px_rgba(168,85,247,0.9)] transition-all duration-300 overflow-hidden group\"\n                    >\n                      <motion.div\n                        className=\"absolute inset-0 bg-gradient-to-r from-transparent via-white/30 to-transparent\"\n                        animate={{ x: ['-200%', '200%'] }}\n                        transition={{ duration: 2, repeat: Infinity, ease: \"linear\", delay: 0.5 }}\n                      />\n                      <motion.div\n                        className=\"absolute inset-0 rounded-lg\"\n                        animate={{\n                          boxShadow: [\n                            '0 0 20px rgba(168,85,247,0.4)',\n                            '0 0 40px rgba(236,72,153,0.6)',\n                            '0 0 20px rgba(168,85,247,0.4)'\n                          ]\n                        }}\n                        transition={{ duration: 2, repeat: Infinity }}\n                      />\n                      <div className=\"relative flex items-center justify-center gap-2\">\n                        <motion.div\n                          animate={{ rotate: [0, 360] }}\n                          transition={{ duration: 3, repeat: Infinity, ease: \"linear\" }}\n                        >\n                          <RotateCcw className=\"w-5 h-5\" />\n                        </motion.div>\n                        <span>Reset</span>\n                      </div>\n                    </Button>\n                  </motion.div>\n\n                  <motion.div\n                    whileHover={{ scale: 1.05 }}\n                    whileTap={{ scale: 0.95 }}\n                  >\n                    <Button\n                      onClick={generateRandomArray}\n                      disabled={isPlaying}\n                      className=\"relative w-full bg-gradient-to-r from-green-500 to-emerald-500 hover:from-green-400 hover:to-emerald-400 text-white font-semibold py-6 rounded-lg border-2 border-green-400 shadow-[0_0_30px_rgba(34,197,94,0.6)] hover:shadow-[0_0_50px_rgba(34,197,94,0.9)] transition-all duration-300 disabled:opacity-50 disabled:cursor-not-allowed overflow-hidden group\"\n                    >\n                      <motion.div\n                        className=\"absolute inset-0 bg-gradient-to-r from-transparent via-white/30 to-transparent\"\n                        animate={{ x: ['-200%', '200%'] }}\n                        transition={{ duration: 2, repeat: Infinity, ease: \"linear\", delay: 1 }}\n                      />\n                      <motion.div\n                        className=\"absolute inset-0\"\n                        animate={{\n                          background: [\n                            'radial-gradient(circle at 50% 50%, rgba(34,197,94,0.3) 0%, transparent 50%)',\n                            'radial-gradient(circle at 50% 50%, rgba(16,185,129,0.3) 0%, transparent 50%)',\n                            'radial-gradient(circle at 50% 50%, rgba(34,197,94,0.3) 0%, transparent 50%)'\n                          ]\n                        }}\n                        transition={{ duration: 2, repeat: Infinity }}\n                      />\n                      <div className=\"relative flex items-center justify-center gap-2\">\n                        <Zap className=\"w-5 h-5\" />\n                        <span>Generate</span>\n                      </div>\n                    </Button>\n                  </motion.div>\n                </div>\n              </div>\n            </div>\n\n            {/* TODO:StatsPanel Real-time statistics panel showing comparisons, swaps, and progress */}\n          </div>\n\n          <div className=\"lg:col-span-3\">\n            <div className=\"bg-gray-900/50 backdrop-blur-lg border border-purple-500/30 rounded-xl p-8 shadow-2xl shadow-purple-500/20 min-h-[600px]\">\n              {array.length === 0 ? (\n                <div className=\"flex items-center justify-center h-full\">\n                  <motion.div\n                    initial={{ opacity: 0, scale: 0.8 }}\n                    animate={{ opacity: 1, scale: 1 }}\n                    className=\"text-center space-y-4\"\n                  >\n                    <motion.div\n                      animate={{\n                        rotate: [0, 360],\n                      }}\n                      transition={{ duration: 3, repeat: Infinity, ease: \"linear\" }}\n                      className=\"w-16 h-16 mx-auto border-4 border-cyan-400 border-t-transparent rounded-full\"\n                    />\n                    <p className=\"text-cyan-400 text-lg font-semibold\">\n                      Click \"Generate Array\" to start\n                    </p>\n                  </motion.div>\n                </div>\n              ) : (\n                <div className=\"relative h-full flex items-end justify-center gap-1 px-4\">\n                  {array.map((element, index) => {\n                    const maxValue = Math.max(...array.map(e => e.value));\n                    const heightPercentage = (element.value / maxValue) * 100;\n                    const colorIndex = index % NEON_COLORS.length;\n                    const baseColor = NEON_COLORS[colorIndex];\n                    \n                    let barColor = baseColor;\n                    let glowIntensity = 0.3;\n                    let scaleEffect = 1;\n                    \n                    if (element.isComparing) {\n                      barColor = '#ffff00';\n                      glowIntensity = 0.8;\n                      scaleEffect = 1.05;\n                    } else if (element.isSwapping) {\n                      barColor = '#ff00ff';\n                      glowIntensity = 1;\n                      scaleEffect = 1.1;\n                    } else if (element.isSorted) {\n                      barColor = '#00ff00';\n                      glowIntensity = 0.6;\n                    }\n                    \n                    return (\n                      <motion.div\n                        key={element.id}\n                        className=\"relative flex-1 min-w-[4px] max-w-[60px] rounded-t-lg\"\n                        style={{\n                          height: `${heightPercentage}%`,\n                          backgroundColor: barColor,\n                          boxShadow: `\n                            0 0 ${10 * glowIntensity}px ${barColor},\n                            0 0 ${20 * glowIntensity}px ${barColor},\n                            0 0 ${30 * glowIntensity}px ${barColor},\n                            inset 0 0 ${10 * glowIntensity}px rgba(255, 255, 255, 0.5)\n                          `,\n                        }}\n                        initial={{ height: 0, opacity: 0 }}\n                        animate={{\n                          height: `${heightPercentage}%`,\n                          opacity: 1,\n                          scale: scaleEffect,\n                          y: element.isSwapping ? [-10, 0] : 0,\n                        }}\n                        transition={{\n                          height: { duration: 0.5, ease: \"easeOut\" },\n                          opacity: { duration: 0.3 },\n                          scale: { duration: 0.2 },\n                          y: { duration: 0.3, ease: \"easeInOut\" },\n                        }}\n                      >\n                        {/* Swap trail effect */}\n                        {element.isSwapping && (\n                          <>\n                            <motion.div\n                              className=\"absolute inset-0 rounded-t-lg\"\n                              style={{\n                                backgroundColor: barColor,\n                                filter: 'blur(8px)',\n                              }}\n                              initial={{ opacity: 0 }}\n                              animate={{ opacity: [0, 0.6, 0] }}\n                              transition={{ duration: 0.6, repeat: Infinity }}\n                            />\n                            <motion.div\n                              className=\"absolute -top-8 left-1/2 transform -translate-x-1/2\"\n                              initial={{ opacity: 0, y: 10 }}\n                              animate={{ opacity: [0, 1, 0], y: [-10, -20, -30] }}\n                              transition={{ duration: 0.8, repeat: Infinity }}\n                            >\n                              <div\n                                className=\"w-2 h-2 rounded-full\"\n                                style={{\n                                  backgroundColor: barColor,\n                                  boxShadow: `0 0 10px ${barColor}`,\n                                }}\n                              />\n                            </motion.div>\n                          </>\n                        )}\n                        \n                        {/* Comparison indicator */}\n                        {element.isComparing && (\n                          <motion.div\n                            className=\"absolute -top-12 left-1/2 transform -translate-x-1/2\"\n                            initial={{ opacity: 0, scale: 0 }}\n                            animate={{ opacity: 1, scale: [1, 1.2, 1] }}\n                            transition={{ duration: 0.5, repeat: Infinity }}\n                          >\n                            <div className=\"relative\">\n                              <div\n                                className=\"w-6 h-6 rounded-full border-2 flex items-center justify-center\"\n                                style={{\n                                  borderColor: barColor,\n                                  backgroundColor: `${barColor}20`,\n                                  boxShadow: `0 0 15px ${barColor}`,\n                                }}\n                              >\n                                <div\n                                  className=\"w-2 h-2 rounded-full\"\n                                  style={{ backgroundColor: barColor }}\n                                />\n                              </div>\n                              <motion.div\n                                className=\"absolute inset-0 rounded-full border-2\"\n                                style={{ borderColor: barColor }}\n                                animate={{ scale: [1, 1.5], opacity: [1, 0] }}\n                                transition={{ duration: 1, repeat: Infinity }}\n                              />\n                            </div>\n                          </motion.div>\n                        )}\n                        \n                        {/* Sorted checkmark */}\n                        {element.isSorted && (\n                          <motion.div\n                            className=\"absolute -top-8 left-1/2 transform -translate-x-1/2\"\n                            initial={{ opacity: 0, scale: 0, rotate: -180 }}\n                            animate={{ opacity: 1, scale: 1, rotate: 0 }}\n                            transition={{ type: \"spring\", stiffness: 200, damping: 10 }}\n                          >\n                            <div\n                              className=\"w-5 h-5 rounded-full flex items-center justify-center text-xs font-bold\"\n                              style={{\n                                backgroundColor: barColor,\n                                boxShadow: `0 0 15px ${barColor}`,\n                                color: '#000',\n                              }}\n                            >\n                              \u2713\n                            </div>\n                          </motion.div>\n                        )}\n                        \n                        {/* Value label */}\n                        {arraySize[0] <= 30 && (\n                          <motion.div\n                            className=\"absolute bottom-2 left-1/2 transform -translate-x-1/2 text-xs font-bold\"\n                            style={{\n                              color: element.isSorted || element.isComparing || element.isSwapping ? '#000' : '#fff',\n                              textShadow: `0 0 5px ${barColor}`,\n                            }}\n                            initial={{ opacity: 0 }}\n                            animate={{ opacity: 1 }}\n                            transition={{ delay: 0.2 }}\n                          >\n                            {element.value}\n                          </motion.div>\n                        )}\n                        \n                        {/* Pulsing glow effect */}\n                        <motion.div\n                          className=\"absolute inset-0 rounded-t-lg pointer-events-none\"\n                          style={{\n                            background: `linear-gradient(to top, transparent, ${barColor}40)`,\n                          }}\n                          animate={{\n                            opacity: [0.3, 0.6, 0.3],\n                          }}\n                          transition={{\n                            duration: 2,\n                            repeat: Infinity,\n                            ease: \"easeInOut\",\n                          }}\n                        />\n                      </motion.div>\n                    );\n                  })}\n                </div>\n              )}</parameter><xcrdt_code_output crdtPosition=\"ANfVqugP9gRB\">\n\n              \n              <div className=\"relative h-full flex items-end justify-center gap-1\">\n                {array.map((element, index) => {\n                  const maxHeight = 500;\n                  const barHeight = (element.value / 100) * maxHeight;\n                  const colorIndex = index % NEON_COLORS.length;\n                  const neonColor = NEON_COLORS[colorIndex];\n                  \n                  const isComparing = currentStep < steps.length && steps[currentStep]?.comparingIndices.includes(index);\n                  const isSwapping = currentStep < steps.length && steps[currentStep]?.swappingIndices.includes(index);\n                  const isSorted = currentStep < steps.length && steps[currentStep]?.sortedIndices.includes(index);\n                  \n                  return (\n                    <motion.div\n                      key={element.id}\n                      className=\"relative flex-1 min-w-[8px] max-w-[60px] group\"\n                      initial={{ height: 0, opacity: 0 }}\n                      animate={{ \n                        height: barHeight,\n                        opacity: 1,\n                        scale: isSwapping ? 1.1 : 1,\n                        y: isSwapping ? -20 : 0\n                      }}\n                      transition={{\n                        height: { duration: 0.5, ease: \"easeOut\" },\n                        opacity: { duration: 0.3 },\n                        scale: { duration: 0.3, type: \"spring\", stiffness: 300 },\n                        y: { duration: 0.3, type: \"spring\", stiffness: 300 }\n                      }}\n                    >\n                      <motion.div\n                        className=\"absolute inset-0 rounded-t-lg\"\n                        style={{\n                          backgroundColor: isSorted ? '#00ff00' : isComparing ? '#ffff00' : isSwapping ? '#ff00ff' : neonColor,\n                          boxShadow: isSorted \n                            ? `0 0 30px rgba(0, 255, 0, 0.8), 0 0 60px rgba(0, 255, 0, 0.5), inset 0 0 20px rgba(0, 255, 0, 0.3)`\n                            : isComparing\n                            ? `0 0 40px rgba(255, 255, 0, 0.9), 0 0 80px rgba(255, 255, 0, 0.6), inset 0 0 25px rgba(255, 255, 0, 0.4)`\n                            : isSwapping\n                            ? `0 0 50px rgba(255, 0, 255, 1), 0 0 100px rgba(255, 0, 255, 0.7), inset 0 0 30px rgba(255, 0, 255, 0.5)`\n                            : `0 0 20px ${neonColor}80, 0 0 40px ${neonColor}40, inset 0 0 15px ${neonColor}30`\n                        }}\n                        animate={{\n                          boxShadow: isSorted\n                            ? [\n                                `0 0 30px rgba(0, 255, 0, 0.8), 0 0 60px rgba(0, 255, 0, 0.5), inset 0 0 20px rgba(0, 255, 0, 0.3)`,\n                                `0 0 40px rgba(0, 255, 0, 1), 0 0 80px rgba(0, 255, 0, 0.7), inset 0 0 30px rgba(0, 255, 0, 0.5)`,\n                                `0 0 30px rgba(0, 255, 0, 0.8), 0 0 60px rgba(0, 255, 0, 0.5), inset 0 0 20px rgba(0, 255, 0, 0.3)`\n                              ]\n                            : isComparing\n                            ? [\n                                `0 0 40px rgba(255, 255, 0, 0.9), 0 0 80px rgba(255, 255, 0, 0.6), inset 0 0 25px rgba(255, 255, 0, 0.4)`,\n                                `0 0 50px rgba(255, 255, 0, 1), 0 0 100px rgba(255, 255, 0, 0.8), inset 0 0 35px rgba(255, 255, 0, 0.6)`,\n                                `0 0 40px rgba(255, 255, 0, 0.9), 0 0 80px rgba(255, 255, 0, 0.6), inset 0 0 25px rgba(255, 255, 0, 0.4)`\n                              ]\n                            : isSwapping\n                            ? [\n                                `0 0 50px rgba(255, 0, 255, 1), 0 0 100px rgba(255, 0, 255, 0.7), inset 0 0 30px rgba(255, 0, 255, 0.5)`,\n                                `0 0 60px rgba(255, 0, 255, 1), 0 0 120px rgba(255, 0, 255, 0.9), inset 0 0 40px rgba(255, 0, 255, 0.7)`,\n                                `0 0 50px rgba(255, 0, 255, 1), 0 0 100px rgba(255, 0, 255, 0.7), inset 0 0 30px rgba(255, 0, 255, 0.5)`\n                              ]\n                            : undefined\n                        }}\n                        transition={{\n                          boxShadow: { duration: 0.8, repeat: (isSorted || isComparing || isSwapping) ? Infinity : 0 }\n                        }}\n                      >\n                        {/* Gradient overlay for depth */}\n                        <div \n                          className=\"absolute inset-0 rounded-t-lg\"\n                          style={{\n                            background: `linear-gradient(to top, rgba(0,0,0,0.3) 0%, transparent 50%, rgba(255,255,255,0.2) 100%)`\n                          }}\n                        />\n                        \n                        {/* Swap trail effect */}\n                        {isSwapping && (\n                          <motion.div\n                            className=\"absolute inset-0 rounded-t-lg\"\n                            style={{\n                              background: `linear-gradient(to top, rgba(255, 0, 255, 0.5), rgba(255, 0, 255, 0))`\n                            }}\n                            initial={{ opacity: 0 }}\n                            animate={{ opacity: [0, 1, 0] }}\n                            transition={{ duration: 0.6, repeat: Infinity }}\n                          />\n                        )}\n                        \n                        {/* Comparison pulse effect */}\n                        {isComparing && (\n                          <motion.div\n                            className=\"absolute -inset-1 rounded-t-lg border-2 border-yellow-400\"\n                            initial={{ opacity: 0, scale: 0.8 }}\n                            animate={{ opacity: [0, 1, 0], scale: [0.8, 1.2, 0.8] }}\n                            transition={{ duration: 0.8, repeat: Infinity }}\n                          />\n                        )}\n                      </motion.div>\n                      \n                      {/* Value label */}\n                      <motion.div\n                        className=\"absolute -bottom-6 left-1/2 transform -translate-x-1/2 text-xs font-mono font-bold whitespace-nowrap\"\n                        style={{\n                          color: isSorted ? '#00ff00' : isComparing ? '#ffff00' : isSwapping ? '#ff00ff' : neonColor,\n                          textShadow: `0 0 10px ${isSorted ? '#00ff00' : isComparing ? '#ffff00' : isSwapping ? '#ff00ff' : neonColor}`\n                        }}\n                        initial={{ opacity: 0 }}\n                        animate={{ opacity: 1 }}\n                        transition={{ delay: 0.2 }}\n                      >\n                        {element.value}\n                      </motion.div>\n                      \n                      {/* Hover glow enhancement */}\n                      <motion.div\n                        className=\"absolute inset-0 rounded-t-lg opacity-0 group-hover:opacity-100 transition-opacity duration-300 pointer-events-none\"\n                        style={{\n                          boxShadow: `0 0 40px ${neonColor}, 0 0 80px ${neonColor}80`\n                        }}\n                      />\n                    </motion.div>\n                  );\n                })}\n              </div>\n            </div>\n\n                        <motion.div\n              initial={{ opacity: 0, y: 10 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ delay: 0.3 }}\n              className=\"mt-6\"\n            >\n              <div className=\"space-y-2\">\n                <div className=\"flex items-center justify-between text-sm\">\n                  <span className=\"text-purple-400 font-semibold\">Progress</span>\n                  <span className=\"text-purple-300 font-mono\">\n                    {steps.length > 0 ? Math.round((currentStep / steps.length) * 100) : 0}%\n                  </span>\n                </div>\n                <div className=\"relative h-3 bg-gray-800/80 rounded-full border border-purple-500/30 overflow-hidden\">\n                  <motion.div\n                    className=\"absolute inset-y-0 left-0 bg-gradient-to-r from-cyan-500 via-purple-500 to-pink-500 rounded-full\"\n                    initial={{ width: '0%' }}\n                    animate={{ \n                      width: steps.length > 0 ? `${(currentStep / steps.length) * 100}%` : '0%'\n                    }}\n                    transition={{ duration: 0.3, ease: \"easeOut\" }}\n                  />\n                  <motion.div\n                    className=\"absolute inset-0 bg-gradient-to-r from-transparent via-white/30 to-transparent\"\n                    animate={{ x: ['-100%', '200%'] }}\n                    transition={{ duration: 1.5, repeat: Infinity, ease: \"linear\" }}\n                  />\n                  <motion.div\n                    className=\"absolute inset-0 rounded-full\"\n                    animate={{\n                      boxShadow: [\n                        '0 0 10px rgba(168, 85, 247, 0.4)',\n                        '0 0 20px rgba(168, 85, 247, 0.6)',\n                        '0 0 10px rgba(168, 85, 247, 0.4)'\n                      ]\n                    }}\n                    transition={{ duration: 2, repeat: Infinity }}\n                  />\n                </div>\n                <div className=\"flex items-center justify-between text-xs text-gray-500\">\n                  <span>Step {currentStep} of {steps.length}</span>\n                  {currentStep === steps.length && steps.length > 0 && (\n                    <motion.span\n                      initial={{ opacity: 0, scale: 0.8 }}\n                      animate={{ opacity: 1, scale: 1 }}\n                      className=\"text-green-400 font-semibold\"\n                    >\n                      \u2713 Complete\n                    </motion.span>\n                  )}\n                </div>\n              </div>\n            </motion.div>\n          </div>\n        </div>\n\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ delay: 0.6, duration: 0.8 }}\n          className=\"bg-gray-900/50 backdrop-blur-lg border border-cyan-500/30 rounded-xl p-6 shadow-[0_0_30px_rgba(0,255,255,0.2)]\"\n        >\n          <div className=\"flex items-center gap-2 mb-4\">\n            <BarChart3 className=\"w-5 h-5 text-cyan-400\" />\n            <h3 className=\"text-lg font-semibold text-cyan-400 uppercase tracking-wider\">\n              Legend\n            </h3>\n          </div>\n          \n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n            {/* Default State */}\n            <motion.div\n              whileHover={{ scale: 1.05 }}\n              className=\"flex items-center gap-3 p-3 bg-gray-800/50 rounded-lg border border-gray-700 hover:border-gray-600 transition-all duration-300\"\n            >\n              <motion.div\n                className=\"w-6 h-6 rounded border-2 border-gray-500 bg-gradient-to-t from-gray-600 to-gray-400\"\n                animate={{\n                  boxShadow: [\n                    '0 0 10px rgba(156, 163, 175, 0.3)',\n                    '0 0 15px rgba(156, 163, 175, 0.5)',\n                    '0 0 10px rgba(156, 163, 175, 0.3)'\n                  ]\n                }}\n                transition={{ duration: 2, repeat: Infinity }}\n              />\n              <div>\n                <div className=\"text-sm font-semibold text-white\">Default</div>\n                <div className=\"text-xs text-gray-400\">Unsorted</div>\n              </div>\n            </motion.div>\n\n            {/* Comparing State */}\n            <motion.div\n              whileHover={{ scale: 1.05 }}\n              className=\"flex items-center gap-3 p-3 bg-yellow-500/10 rounded-lg border border-yellow-500/30 hover:border-yellow-500/50 transition-all duration-300\"\n            >\n              <motion.div\n                className=\"w-6 h-6 rounded border-2 border-yellow-400 bg-gradient-to-t from-yellow-600 to-yellow-400\"\n                animate={{\n                  boxShadow: [\n                    '0 0 15px rgba(250, 204, 21, 0.5)',\n                    '0 0 25px rgba(250, 204, 21, 0.8)',\n                    '0 0 15px rgba(250, 204, 21, 0.5)'\n                  ]\n                }}\n                transition={{ duration: 1.5, repeat: Infinity }}\n              />\n              <div>\n                <div className=\"text-sm font-semibold text-yellow-300\">Comparing</div>\n                <div className=\"text-xs text-yellow-400/70\">Active check</div>\n              </div>\n            </motion.div>\n\n            {/* Swapping State */}\n            <motion.div\n              whileHover={{ scale: 1.05 }}\n              className=\"flex items-center gap-3 p-3 bg-red-500/10 rounded-lg border border-red-500/30 hover:border-red-500/50 transition-all duration-300\"\n            >\n              <motion.div\n                className=\"w-6 h-6 rounded border-2 border-red-400 bg-gradient-to-t from-red-600 to-red-400\"\n                animate={{\n                  boxShadow: [\n                    '0 0 15px rgba(239, 68, 68, 0.5)',\n                    '0 0 30px rgba(239, 68, 68, 0.9)',\n                    '0 0 15px rgba(239, 68, 68, 0.5)'\n                  ],\n                  scale: [1, 1.1, 1]\n                }}\n                transition={{ duration: 1, repeat: Infinity }}\n              />\n              <div>\n                <div className=\"text-sm font-semibold text-red-300\">Swapping</div>\n                <div className=\"text-xs text-red-400/70\">Exchanging</div>\n              </div>\n            </motion.div>\n\n            {/* Sorted State */}\n            <motion.div\n              whileHover={{ scale: 1.05 }}\n              className=\"flex items-center gap-3 p-3 bg-green-500/10 rounded-lg border border-green-500/30 hover:border-green-500/50 transition-all duration-300\"\n            >\n              <motion.div\n                className=\"w-6 h-6 rounded border-2 border-green-400 bg-gradient-to-t from-green-600 to-green-400\"\n                animate={{\n                  boxShadow: [\n                    '0 0 15px rgba(34, 197, 94, 0.5)',\n                    '0 0 25px rgba(34, 197, 94, 0.8)',\n                    '0 0 15px rgba(34, 197, 94, 0.5)'\n                  ]\n                }}\n                transition={{ duration: 2, repeat: Infinity }}\n              />\n              <div>\n                <div className=\"text-sm font-semibold text-green-300\">Sorted</div>\n                <div className=\"text-xs text-green-400/70\">Complete</div>\n              </div>\n            </motion.div>\n          </div>\n\n          {/* Additional Info */}\n          <motion.div\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            transition={{ delay: 1 }}\n            className=\"mt-4 pt-4 border-t border-gray-700\"\n          >\n            <div className=\"flex items-center justify-center gap-6 text-xs text-gray-400\">\n              <div className=\"flex items-center gap-2\">\n                <motion.div\n                  className=\"w-2 h-2 rounded-full bg-cyan-400\"\n                  animate={{\n                    boxShadow: [\n                      '0 0 5px rgba(34, 211, 238, 0.5)',\n                      '0 0 10px rgba(34, 211, 238, 1)',\n                      '0 0 5px rgba(34, 211, 238, 0.5)'\n                    ]\n                  }}\n                  transition={{ duration: 1.5, repeat: Infinity }}\n                />\n                <span>Neon glow indicates active state</span>\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <motion.div\n                  className=\"w-2 h-2 rounded-full bg-purple-400\"\n                  animate={{\n                    scale: [1, 1.3, 1]\n                  }}\n                  transition={{ duration: 1, repeat: Infinity }}\n                />\n                <span>Pulse effect shows transitions</span>\n              </div>\n            </div>\n          </motion.div>\n        </motion.div>\n      </div>\n    </div>\n  );\n}",
    "error": null,
    "elapsed_time": 129.44839930534363,
    "success": true
  }
}