{
  "prompt_id": "dashboard",
  "prompt_name": "Analytics Dashboard",
  "mode": "parallel",
  "run_number": 20,
  "timestamp": "2025-10-13T22:12:05.875465",
  "response_time": 74.34672808647156,
  "total_tokens": null,
  "response_content": "import { useState, useCallback } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Moon, Sun, RefreshCw } from 'lucide-react';\nimport { ArrowUpDown, ChevronLeft, ChevronRight } from 'lucide-react';\nimport { Badge } from '@/components/ui/badge';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\n\n\nimport { PieChart, Pie, Cell, ResponsiveContainer, Legend, Tooltip } from 'recharts';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\nimport { motion } from 'framer-motion';\nimport { TrendingUp, Users } from 'lucide-react';\nimport { TrendingUp, TrendingDown, DollarSign, Users, ShoppingCart, Target } from 'lucide-react';\nimport { motion } from 'framer-motion';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';\nimport { BarChart, Bar } from 'recharts';\n\n\ninterface MetricData {\n  id: string;\n  label: string;\n  value: number;\n  change: number;\n  trend: 'up' | 'down';\n}\n\ninterface ChartDataPoint {\n  date: string;\n  revenue: number;\n  users: number;\n  orders: number;\n}\n\ninterface TableRow {\n  id: string;\n  product: string;\n  sales: number;\n  revenue: number;\n  status: 'active' | 'pending' | 'inactive';\n}\n\nconst mockMetrics: MetricData[] = [\n  { id: '1', label: 'Total Revenue', value: 45231, change: 12.5, trend: 'up' },\n  { id: '2', label: 'Active Users', value: 2350, change: 8.2, trend: 'up' },\n  { id: '3', label: 'Total Orders', value: 1543, change: -3.1, trend: 'down' },\n  { id: '4', label: 'Conversion Rate', value: 3.24, change: 5.7, trend: 'up' }\n];\n\nconst mockChartData: ChartDataPoint[] = [\n  { date: '2024-01-01', revenue: 12000, users: 450, orders: 230 },\n  { date: '2024-01-02', revenue: 15000, users: 520, orders: 280 },\n  { date: '2024-01-03', revenue: 13500, users: 490, orders: 250 },\n  { date: '2024-01-04', revenue: 18000, users: 610, orders: 320 },\n  { date: '2024-01-05', revenue: 16500, users: 580, orders: 295 },\n  { date: '2024-01-06', revenue: 20000, users: 680, orders: 350 },\n  { date: '2024-01-07', revenue: 22000, users: 720, orders: 380 }\n];\n\nconst mockTableData: TableRow[] = [\n  { id: '1', product: 'Premium Plan', sales: 234, revenue: 23400, status: 'active' },\n  { id: '2', product: 'Basic Plan', sales: 567, revenue: 11340, status: 'active' },\n  { id: '3', product: 'Enterprise Plan', sales: 89, revenue: 17800, status: 'active' },\n  { id: '4', product: 'Starter Plan', sales: 432, revenue: 4320, status: 'pending' },\n  { id: '5', product: 'Pro Plan', sales: 156, revenue: 15600, status: 'active' }\n];\n\nconst mockQuickStats = [\n  { name: 'Mon', value: 4200 },\n  { name: 'Tue', value: 5100 },\n  { name: 'Wed', value: 3800 },\n  { name: 'Thu', value: 6200 },\n  { name: 'Fri', value: 5500 },\n  { name: 'Sat', value: 4800 },\n  { name: 'Sun', value: 3900 }\n];\n\nconst getMetricIcon = (label: string) => {\n  switch (label) {\n    case 'Total Revenue':\n      return DollarSign;\n    case 'Active Users':\n      return Users;\n    case 'Total Orders':\n      return ShoppingCart;\n    case 'Conversion Rate':\n      return Target;\n    default:\n      return DollarSign;\n  }\n};\n\nconst formatMetricValue = (label: string, value: number) => {\n  if (label === 'Total Revenue') {\n    return `$${value.toLocaleString()}`;\n  } else if (label === 'Conversion Rate') {\n    return `${value}%`;\n  }\n  return value.toLocaleString();\n};\n\nconst COLORS = ['#3b82f6', '#8b5cf6', '#ec4899', '#f59e0b', '#10b981'];\n\nconst CustomPieTooltip = ({ active, payload, isDark }: any) => {\n  if (active && payload && payload.length) {\n    return (\n      <div className={`rounded-lg border p-3 shadow-lg ${isDark ? 'bg-gray-800 border-gray-700' : 'bg-white border-gray-200'}`}>\n        <p className={`font-semibold ${isDark ? 'text-white' : 'text-gray-900'}`}>\n          {payload[0].name}\n        </p>\n        <p className={`text-sm ${isDark ? 'text-gray-400' : 'text-gray-600'}`}>\n          Sales: {payload[0].value}\n        </p>\n        <p className={`text-sm font-medium ${isDark ? 'text-blue-400' : 'text-blue-600'}`}>\n          {payload[0].payload.percentage}%\n        </p>\n      </div>\n    );\n  }\n  return null;\n};\n\n</parameter>\n</invoke>\ntype SortField = 'product' | 'sales' | 'revenue' | 'status';\ntype SortDirection = 'asc' | 'desc';\n\nexport default function AnalyticsDashboard() {\n  const [isDarkMode, setIsDarkMode] = useState(false);\n  const [metrics, setMetrics] = useState<MetricData[]>(mockMetrics);\n  const [chartData, setChartData] = useState<ChartDataPoint[]>(mockChartData);\n  const [tableData, setTableData] = useState<TableRow[]>(mockTableData);\n  const [isRefreshing, setIsRefreshing] = useState(false);\n  const [sortField, setSortField] = useState<SortField>('revenue');\n  const [sortDirection, setSortDirection] = useState<SortDirection>('desc');\n  const [currentPage, setCurrentPage] = useState(1);\n  const itemsPerPage = 5;\n\n  const toggleDarkMode = useCallback(() => {\n    setIsDarkMode(prev => !prev);\n  }, []);\n\n  const UserChartTooltip = ({ active, payload }: any) => {\n    if (active && payload && payload.length) {\n      return (\n        <div className={`rounded-lg border p-3 shadow-lg ${\n          isDarkMode ? 'bg-gray-800 border-gray-700' : 'bg-white border-gray-200'\n        }`}>\n          <p className={`text-sm font-medium mb-1 ${isDarkMode ? 'text-gray-300' : 'text-gray-600'}`}>\n            {payload[0].payload.date}\n          </p>\n          <p className={`text-lg font-bold ${isDarkMode ? 'text-blue-400' : 'text-blue-600'}`}>\n            <Users className=\"inline h-4 w-4 mr-1\" />\n            {payload[0].value.toLocaleString()} users\n          </p>\n        </div>\n      );\n    }\n    return null;\n  };\n\n  const CustomTooltip = ({ active, payload }: any) => {\n    if (active && payload && payload.length) {\n      return (\n        <div className={`p-3 rounded-lg shadow-lg border ${isDarkMode ? 'bg-gray-800 border-gray-700' : 'bg-white border-gray-200'}`}>\n          <p className={`text-sm font-medium mb-2 ${isDarkMode ? 'text-gray-300' : 'text-gray-600'}`}>\n            {payload[0].payload.date}\n          </p>\n          <p className={`text-sm font-semibold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n            Revenue: ${payload[0].value.toLocaleString()}\n          </p>\n        </div>\n      );\n    }\n    return null;\n  };\n\n  const handleRefresh = useCallback(() => {\n    setIsRefreshing(true);\n    \n    setTimeout(() => {\n      // Generate updated mock metrics with random variations\n      const updatedMetrics = mockMetrics.map(metric => ({\n        ...metric,\n        value: metric.value + Math.floor(Math.random() * 200 - 100),\n        change: parseFloat((Math.random() * 20 - 5).toFixed(1)),\n        trend: Math.random() > 0.5 ? 'up' as const : 'down' as const\n      }));\n\n      // Generate updated chart data with random variations\n      const updatedChartData = mockChartData.map(point => ({\n        ...point,\n        revenue: point.revenue + Math.floor(Math.random() * 4000 - 2000),\n        users: point.users + Math.floor(Math.random() * 100 - 50),\n        orders: point.orders + Math.floor(Math.random() * 60 - 30)\n      }));\n\n      // Generate updated table data with random variations\n      const updatedTableData = mockTableData.map(row => ({\n        ...row,\n        sales: row.sales + Math.floor(Math.random() * 40 - 20),\n        revenue: row.revenue + Math.floor(Math.random() * 2000 - 1000)\n      }));\n\n      setMetrics(updatedMetrics);\n      setChartData(updatedChartData);\n      setTableData(updatedTableData);\n      setIsRefreshing(false);\n    }, 1500);\n  }, []);\n\n  const handleSort = useCallback((field: SortField) => {\n    if (sortField === field) {\n      setSortDirection(prev => prev === 'asc' ? 'desc' : 'asc');\n    } else {\n      setSortField(field);\n      setSortDirection('desc');\n    }\n    setCurrentPage(1);\n  }, [sortField]);\n\n  const sortedTableData = useCallback(() => {\n    const sorted = [...tableData].sort((a, b) => {\n      let aValue = a[sortField];\n      let bValue = b[sortField];\n\n      if (typeof aValue === 'string') {\n        aValue = aValue.toLowerCase();\n        bValue = (bValue as string).toLowerCase();\n      }\n\n      if (aValue < bValue) return sortDirection === 'asc' ? -1 : 1;\n      if (aValue > bValue) return sortDirection === 'asc' ? 1 : -1;\n      return 0;\n    });\n\n    return sorted;\n  }, [tableData, sortField, sortDirection]);\n\n  const paginatedData = useCallback(() => {\n    const sorted = sortedTableData();\n    const startIndex = (currentPage - 1) * itemsPerPage;\n    const endIndex = startIndex + itemsPerPage;\n    return sorted.slice(startIndex, endIndex);\n  }, [sortedTableData, currentPage]);\n\n  const totalPages = Math.ceil(tableData.length / itemsPerPage);\n\n  const getStatusBadgeVariant = (status: TableRow['status']) => {\n    switch (status) {\n      case 'active':\n        return 'default';\n      case 'pending':\n        return 'secondary';\n      case 'inactive':\n        return 'outline';\n      default:\n        return 'default';\n    }\n  };\n\n  const formatCurrency = (value: number) => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n      minimumFractionDigits: 0\n    }).format(value);</parameter>\n</invoke>.map(point => ({\n        ...point,\n        revenue: point.revenue + Math.floor(Math.random() * 4000 - 2000),\n        users: point.users + Math.floor(Math.random() * 100 - 50),\n        orders: point.orders + Math.floor(Math.random() * 50 - 25)\n      }));\n\n      // Generate updated table data with random variations\n      const updatedTableData = mockTableData.map(row => ({\n        ...row,\n        sales: row.sales + Math.floor(Math.random() * 40 - 20),\n        revenue: row.revenue + Math.floor(Math.random() * 2000 - 1000)\n      }));\n\n      setMetrics(updatedMetrics);\n      setChartData(updatedChartData);\n      setTableData(updatedTableData);\n      setIsRefreshing(false);\n    }, 1500);</parameter>\n\n  }, []);\n\n  return (\n    <div className={`min-h-screen transition-colors duration-300 ${isDarkMode ? 'dark bg-gray-900' : 'bg-gray-50'}`}>\n      <div className=\"container mx-auto p-4 md:p-6 lg:p-8\">\n        <div className=\"flex flex-col md:flex-row justify-between items-start md:items-center gap-4 mb-8\">\n          <div>\n            <h1 className={`text-3xl md:text-4xl font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n              Analytics Dashboard\n            </h1>\n            <p className={`mt-2 ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n              Real-time insights and performance metrics\n            </p>\n          </div>\n\n          <div className=\"flex gap-2\">\n            <Button\n              variant=\"outline\"\n              size=\"icon\"\n              onClick={toggleDarkMode}\n              className={isDarkMode ? 'border-gray-700' : ''}\n            >\n              {isDarkMode ? <Sun className=\"h-5 w-5\" /> : <Moon className=\"h-5 w-5\" />}\n            </Button>\n            <Button\n              variant=\"outline\"\n              onClick={handleRefresh}\n              disabled={isRefreshing}\n              className={isDarkMode ? 'border-gray-700' : ''}\n            >\n              <RefreshCw className={`h-4 w-4 mr-2 ${isRefreshing ? 'animate-spin' : ''}`} />\n              Refresh\n            </Button>\n          </div>\n        </div>\n\n        <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 md:gap-6 mb-8\">\n          {metrics.map((metric, index) => {\n            const Icon = getMetricIcon(metric.label);\n            const isPositive = metric.trend === 'up';\n            const TrendIcon = isPositive ? TrendingUp : TrendingDown;\n\n            return (\n              <motion.div\n                key={metric.id}\n                initial={{ opacity: 0, y: 20 }}\n                animate={{ opacity: 1, y: 0 }}\n                transition={{ duration: 0.4, delay: index * 0.1 }}\n              >\n                <Card className={`${isDarkMode ? 'bg-gray-800 border-gray-700' : 'bg-white'} hover:shadow-lg transition-shadow duration-300`}>\n                  <CardHeader className=\"flex flex-row items-center justify-between pb-2\">\n                    <CardTitle className={`text-sm font-medium ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                      {metric.label}\n                    </CardTitle>\n                    <div className={`p-2 rounded-lg ${isDarkMode ? 'bg-gray-700' : 'bg-gray-100'}`}>\n                      <Icon className={`h-4 w-4 ${isDarkMode ? 'text-gray-300' : 'text-gray-600'}`} />\n                    </div>\n                  </CardHeader>\n                  <CardContent>\n                    <div className={`text-2xl md:text-3xl font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                      {formatMetricValue(metric.label, metric.value)}\n                    </div>\n                    <div className=\"flex items-center mt-2\">\n                      <TrendIcon \n                        className={`h-4 w-4 mr-1 ${isPositive ? 'text-green-500' : 'text-red-500'}`} \n                      />\n                      <span className={`text-sm font-medium ${isPositive ? 'text-green-500' : 'text-red-500'}`}>\n                        {Math.abs(metric.change)}%\n                      </span>\n                      <span className={`text-sm ml-1 ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                        vs last period\n                      </span>\n                    </div>\n                  </CardContent>\n                </Card>\n              </motion.div>\n            );\n          })}</parameter>\n</invoke>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-4 md:gap-6 mb-8\">\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Revenue Overview</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Daily revenue trends\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"w-full h-[300px] md:h-[350px]\">\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <LineChart\n                    data={chartData}\n                    margin={{ top: 5, right: 10, left: 0, bottom: 5 }}\n                  >\n                    <CartesianGrid \n                      strokeDasharray=\"3 3\" \n                      stroke={isDarkMode ? '#374151' : '#e5e7eb'}\n                    />\n                    <XAxis \n                      dataKey=\"date\" \n                      stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                      tick={{ fill: isDarkMode ? '#9ca3af' : '#6b7280', fontSize: 12 }}\n                      tickFormatter={(value) => new Date(value).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n                    />\n                    <YAxis \n                      stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                      tick={{ fill: isDarkMode ? '#9ca3af' : '#6b7280', fontSize: 12 }}\n                      tickFormatter={(value) => `$${(value / 1000).toFixed(0)}k`}\n                    />\n                    <Tooltip content={<CustomTooltip />} />\n                    <Line \n                      type=\"monotone\" \n                      dataKey=\"revenue\" \n                      stroke=\"#3b82f6\" \n                      strokeWidth={2}\n                      dot={{ fill: '#3b82f6', r: 4 }}\n                      activeDot={{ r: 6, fill: '#2563eb' }}\n                    />\n                  </LineChart>\n                </ResponsiveContainer>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>User Growth</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Active users over time\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"h-[300px] w-full\">\n                <svg width=\"100%\" height=\"100%\" viewBox=\"0 0 700 300\" preserveAspectRatio=\"none\">\n                  <defs>\n                    <linearGradient id=\"userGradient\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                      <stop offset=\"0%\" stopColor={isDarkMode ? '#3b82f6' : '#60a5fa'} stopOpacity=\"0.8\" />\n                      <stop offset=\"100%\" stopColor={isDarkMode ? '#3b82f6' : '#60a5fa'} stopOpacity=\"0.1\" />\n                    </linearGradient>\n                  </defs>\n                  \n                  {/* Grid lines */}\n                  {[0, 1, 2, 3, 4].map((i) => (\n                    <line\n                      key={i}\n                      x1=\"0\"\n                      y1={i * 75}\n                      x2=\"700\"\n                      y2={i * 75}\n                      stroke={isDarkMode ? '#374151' : '#e5e7eb'}\n                      strokeWidth=\"1\"\n                    />\n                  ))}\n                  \n                  {/* Area chart */}\n                  <motion.path\n                    initial={{ opacity: 0, pathLength: 0 }}\n                    animate={{ opacity: 1, pathLength: 1 }}\n                    transition={{ duration: 1.5, ease: \"easeInOut\" }}\n                    d={(() => {\n                      const maxUsers = Math.max(...chartData.map(d => d.users));\n                      const points = chartData.map((d, i) => {\n                        const x = (i / (chartData.length - 1)) * 700;\n                        const y = 300 - (d.users / maxUsers) * 250;\n                        return `${x},${y}`;\n                      });\n                      return `M 0,300 L ${points.join(' L ')} L 700,300 Z`;\n                    })()}\n                    fill=\"url(#userGradient)\"\n                  />\n                  \n                  {/* Line */}\n                  <motion.path\n                    initial={{ pathLength: 0 }}\n                    animate={{ pathLength: 1 }}\n                    transition={{ duration: 1.5, ease: \"easeInOut\" }}\n                    d={(() => {\n                      const maxUsers = Math.max(...chartData.map(d => d.users));\n                      const points = chartData.map((d, i) => {\n                        const x = (i / (chartData.length - 1)) * 700;\n                        const y = 300 - (d.users / maxUsers) * 250;\n                        return `${x},${y}`;\n                      });\n                      return `M ${points.join(' L ')}`;\n                    })()}\n                    fill=\"none\"\n                    stroke={isDarkMode ? '#3b82f6' : '#2563eb'}\n                    strokeWidth=\"3\"\n                    strokeLinecap=\"round\"\n                    strokeLinejoin=\"round\"\n                  />\n                  \n                  {/* Data points */}\n                  {chartData.map((d, i) => {\n                    const maxUsers = Math.max(...chartData.map(d => d.users));\n                    const x = (i / (chartData.length - 1)) * 700;\n                    const y = 300 - (d.users / maxUsers) * 250;\n                    return (\n                      <g key={i}>\n                        <motion.circle\n                          initial={{ scale: 0, opacity: 0 }}\n                          animate={{ scale: 1, opacity: 1 }}\n                          transition={{ delay: 0.1 * i, duration: 0.3 }}\n                          cx={x}\n                          cy={y}\n                          r=\"6\"\n                          fill={isDarkMode ? '#1e293b' : '#ffffff'}\n                          stroke={isDarkMode ? '#3b82f6' : '#2563eb'}\n                          strokeWidth=\"3\"\n                          className=\"cursor-pointer hover:r-8 transition-all\"\n                        />\n                        <title>{`${d.date}: ${d.users} users`}</title>\n                      </g>\n                    );\n                  })}\n                </svg>\n                \n                {/* X-axis labels */}\n                <div className=\"flex justify-between mt-2 px-2\">\n                  {chartData.map((d, i) => (\n                    i % 2 === 0 && (\n                      <span key={i} className={`text-xs ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                        {new Date(d.date).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n                      </span>\n                    )\n                  ))}\n                </div>\n                \n                {/* Stats summary */}\n                <div className=\"flex items-center justify-between mt-4 pt-4 border-t border-gray-200 dark:border-gray-700\">\n                  <div className=\"flex items-center gap-2\">\n                    <TrendingUp className={`h-5 w-5 ${isDarkMode ? 'text-blue-400' : 'text-blue-600'}`} />\n                    <span className={`text-sm font-medium ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>\n                      Peak: {Math.max(...chartData.map(d => d.users)).toLocaleString()} users\n                    </span>\n                  </div>\n                  <span className={`text-sm ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                    Avg: {Math.round(chartData.reduce((sum, d) => sum + d.users, 0) / chartData.length).toLocaleString()}\n                  </span>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-4 md:gap-6 mb-8\">\n          <Card className={`lg:col-span-2 ${isDarkMode ? 'bg-gray-800 border-gray-700' : ''}`}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Performance Metrics</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Combined view of key metrics\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"h-[300px] w-full\">\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <LineChart\n                    data={chartData}\n                    margin={{ top: 5, right: 30, left: 20, bottom: 5 }}\n                  >\n                    <CartesianGrid \n                      strokeDasharray=\"3 3\" \n                      stroke={isDarkMode ? '#374151' : '#e5e7eb'}\n                    />\n                    <XAxis \n                      dataKey=\"date\" \n                      stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                      tick={{ fill: isDarkMode ? '#9ca3af' : '#6b7280' }}\n                      tickFormatter={(value) => new Date(value).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n                    />\n                    <YAxis \n                      stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                      tick={{ fill: isDarkMode ? '#9ca3af' : '#6b7280' }}\n                    />\n                    <Tooltip \n                      contentStyle={{\n                        backgroundColor: isDarkMode ? '#1f2937' : '#ffffff',\n                        border: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\n                        borderRadius: '6px',\n                        color: isDarkMode ? '#f3f4f6' : '#111827'\n                      }}\n                      labelFormatter={(value) => new Date(value).toLocaleDateString('en-US', { month: 'long', day: 'numeric', year: 'numeric' })}\n                    />\n                    <Legend \n                      wrapperStyle={{\n                        color: isDarkMode ? '#f3f4f6' : '#111827'\n                      }}\n                    />\n                    <Line \n                      type=\"monotone\" \n                      dataKey=\"revenue\" \n                      stroke=\"#3b82f6\" \n                      strokeWidth={2}\n                      dot={{ fill: '#3b82f6', r: 4 }}\n                      activeDot={{ r: 6 }}\n                      name=\"Revenue ($)\"\n                    />\n                    <Line \n                      type=\"monotone\" \n                      dataKey=\"users\" \n                      stroke=\"#10b981\" \n                      strokeWidth={2}\n                      dot={{ fill: '#10b981', r: 4 }}\n                      activeDot={{ r: 6 }}\n                      name=\"Users\"\n                    />\n                    <Line \n                      type=\"monotone\" \n                      dataKey=\"orders\" \n                      stroke=\"#f59e0b\" \n                      strokeWidth={2}\n                      dot={{ fill: '#f59e0b', r: 4 }}\n                      activeDot={{ r: 6 }}\n                      name=\"Orders\"\n                    />\n                  </LineChart>\n                </ResponsiveContainer>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Distribution</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Sales by category\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              {/* TODO:PieChart Render pie chart with product distribution and percentages */}\n            </CardContent>\n          </Card>\n        </div>\n\n        <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n          <CardHeader>\n            <CardTitle className={isDarkMode ? 'text-white' : ''}>Top Products</CardTitle>\n            <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n              Best performing products by revenue\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            {/* TODO:DataTable Render sortable table with product data, status badges, and pagination */}\n          </CardContent>\n        </Card>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 md:gap-6 mt-8\">\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Recent Activity</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4 max-h-[400px] overflow-y-auto pr-2\">\n                {[\n                  { id: '1', action: 'New order placed', user: 'John Doe', time: '2 min ago', icon: ShoppingCart, color: 'text-blue-500' },\n                  { id: '2', action: 'User registered', user: 'Jane Smith', time: '15 min ago', icon: Users, color: 'text-green-500' },\n                  { id: '3', action: 'Revenue milestone', user: 'System', time: '1 hour ago', icon: DollarSign, color: 'text-yellow-500' },\n                  { id: '4', action: 'Goal achieved', user: 'Marketing Team', time: '2 hours ago', icon: Target, color: 'text-purple-500' },\n                  { id: '5', action: 'New order placed', user: 'Bob Wilson', time: '3 hours ago', icon: ShoppingCart, color: 'text-blue-500' },\n                  { id: '6', action: 'User registered', user: 'Alice Brown', time: '4 hours ago', icon: Users, color: 'text-green-500' },\n                  { id: '7', action: 'Revenue milestone', user: 'System', time: '5 hours ago', icon: DollarSign, color: 'text-yellow-500' }\n                ].map((activity, index) => (\n                  <motion.div\n                    key={activity.id}\n                    initial={{ opacity: 0, x: -20 }}\n                    animate={{ opacity: 1, x: 0 }}\n                    transition={{ delay: index * 0.1 }}\n                    className={`flex items-start gap-3 p-3 rounded-lg ${\n                      isDarkMode ? 'bg-gray-700/50 hover:bg-gray-700' : 'bg-gray-50 hover:bg-gray-100'\n                    } transition-colors`}\n                  >\n                    <div className={`p-2 rounded-full ${isDarkMode ? 'bg-gray-600' : 'bg-white'}`}>\n                      <activity.icon className={`h-4 w-4 ${activity.color}`} />\n                    </div>\n                    <div className=\"flex-1 min-w-0\">\n                      <p className={`text-sm font-medium ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                        {activity.action}\n                      </p>\n                      <p className={`text-xs ${isDarkMode ? 'text-gray-400' : 'text-gray-500'}`}>\n                        {activity.user}\n                      </p>\n                    </div>\n                    <span className={`text-xs ${isDarkMode ? 'text-gray-500' : 'text-gray-400'} whitespace-nowrap`}>\n                      {activity.time}\n                    </span>\n                  </motion.div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Quick Stats</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                <ResponsiveContainer width=\"100%\" height={200}>\n                  <BarChart data={mockQuickStats}>\n                    <CartesianGrid \n                      strokeDasharray=\"3 3\" \n                      stroke={isDarkMode ? '#374151' : '#e5e7eb'}\n                    />\n                    <XAxis \n                      dataKey=\"name\" \n                      stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                      style={{ fontSize: '12px' }}\n                    />\n                    <YAxis \n                      stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                      style={{ fontSize: '12px' }}\n                    />\n                    <Tooltip \n                      contentStyle={{\n                        backgroundColor: isDarkMode ? '#1f2937' : '#ffffff',\n                        border: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\n                        borderRadius: '6px',\n                        color: isDarkMode ? '#ffffff' : '#000000'\n                      }}\n                    />\n                    <Bar \n                      dataKey=\"value\" \n                      fill={isDarkMode ? '#3b82f6' : '#2563eb'}\n                      radius={[4, 4, 0, 0]}\n                    />\n                  </BarChart>\n                </ResponsiveContainer>\n                \n                <div className=\"grid grid-cols-2 gap-4 pt-2\">\n                  <div className={`p-3 rounded-lg ${isDarkMode ? 'bg-gray-700' : 'bg-gray-100'}`}>\n                    <p className={`text-xs ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                      Avg Daily\n                    </p>\n                    <p className={`text-lg font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                      $4,786\n                    </p>\n                  </div>\n                  <div className={`p-3 rounded-lg ${isDarkMode ? 'bg-gray-700' : 'bg-gray-100'}`}>\n                    <p className={`text-xs ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                      Peak Day\n                    </p>\n                    <p className={`text-lg font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                      Thursday\n                    </p>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Goals Progress</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {[\n                  { label: 'Revenue Goal', current: 45231, target: 50000, color: 'bg-blue-500' },\n                  { label: 'User Acquisition', current: 2350, target: 3000, color: 'bg-green-500' },\n                  { label: 'Order Target', current: 1543, target: 2000, color: 'bg-purple-500' },\n                  { label: 'Conversion Rate', current: 3.24, target: 5.0, color: 'bg-orange-500' }\n                ].map((goal, index) => {\n                  const percentage = Math.min((goal.current / goal.target) * 100, 100);\n                  return (\n                    <motion.div\n                      key={goal.label}\n                      initial={{ opacity: 0, x: -20 }}\n                      animate={{ opacity: 1, x: 0 }}\n                      transition={{ delay: index * 0.1 }}\n                      className=\"space-y-2\"\n                    >\n                      <div className=\"flex justify-between items-center\">\n                        <span className={`text-sm font-medium ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>\n                          {goal.label}\n                        </span>\n                        <span className={`text-sm ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                          {percentage.toFixed(1)}%\n                        </span>\n                      </div>\n                      <div className={`h-2 rounded-full overflow-hidden ${isDarkMode ? 'bg-gray-700' : 'bg-gray-200'}`}>\n                        <motion.div\n                          initial={{ width: 0 }}\n                          animate={{ width: `${percentage}%` }}\n                          transition={{ duration: 1, delay: index * 0.1 }}\n                          className={`h-full ${goal.color} rounded-full`}\n                        />\n                      </div>\n                      <div className=\"flex justify-between items-center\">\n                        <span className={`text-xs ${isDarkMode ? 'text-gray-500' : 'text-gray-500'}`}>\n                          {goal.current.toLocaleString()}\n                        </span>\n                        <span className={`text-xs ${isDarkMode ? 'text-gray-500' : 'text-gray-500'}`}>\n                          {goal.target.toLocaleString()}\n                        </span>\n                      </div>\n                    </motion.div>\n                  );\n                })}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}",
  "error": null,
  "overall_score": 53,
  "code_quality_score": 14,
  "architecture_score": 12,
  "performance_score": 11,
  "accessibility_score": 16,
  "metadata": {
    "document_id": "eval_room_d256ae3a946c",
    "prompt_category": "intermediate",
    "prompt_complexity": 6.0
  },
  "raw_response": {
    "document_id": "eval_room_d256ae3a946c",
    "mode": "parallel",
    "prompt": "Generate an analytics dashboard page with charts, data tables, real-time updates, dark mode, and responsive design",
    "content": "import { useState, useCallback } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Moon, Sun, RefreshCw } from 'lucide-react';\nimport { ArrowUpDown, ChevronLeft, ChevronRight } from 'lucide-react';\nimport { Badge } from '@/components/ui/badge';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\n\n\nimport { PieChart, Pie, Cell, ResponsiveContainer, Legend, Tooltip } from 'recharts';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\nimport { motion } from 'framer-motion';\nimport { TrendingUp, Users } from 'lucide-react';\nimport { TrendingUp, TrendingDown, DollarSign, Users, ShoppingCart, Target } from 'lucide-react';\nimport { motion } from 'framer-motion';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';\nimport { BarChart, Bar } from 'recharts';\n\n\ninterface MetricData {\n  id: string;\n  label: string;\n  value: number;\n  change: number;\n  trend: 'up' | 'down';\n}\n\ninterface ChartDataPoint {\n  date: string;\n  revenue: number;\n  users: number;\n  orders: number;\n}\n\ninterface TableRow {\n  id: string;\n  product: string;\n  sales: number;\n  revenue: number;\n  status: 'active' | 'pending' | 'inactive';\n}\n\nconst mockMetrics: MetricData[] = [\n  { id: '1', label: 'Total Revenue', value: 45231, change: 12.5, trend: 'up' },\n  { id: '2', label: 'Active Users', value: 2350, change: 8.2, trend: 'up' },\n  { id: '3', label: 'Total Orders', value: 1543, change: -3.1, trend: 'down' },\n  { id: '4', label: 'Conversion Rate', value: 3.24, change: 5.7, trend: 'up' }\n];\n\nconst mockChartData: ChartDataPoint[] = [\n  { date: '2024-01-01', revenue: 12000, users: 450, orders: 230 },\n  { date: '2024-01-02', revenue: 15000, users: 520, orders: 280 },\n  { date: '2024-01-03', revenue: 13500, users: 490, orders: 250 },\n  { date: '2024-01-04', revenue: 18000, users: 610, orders: 320 },\n  { date: '2024-01-05', revenue: 16500, users: 580, orders: 295 },\n  { date: '2024-01-06', revenue: 20000, users: 680, orders: 350 },\n  { date: '2024-01-07', revenue: 22000, users: 720, orders: 380 }\n];\n\nconst mockTableData: TableRow[] = [\n  { id: '1', product: 'Premium Plan', sales: 234, revenue: 23400, status: 'active' },\n  { id: '2', product: 'Basic Plan', sales: 567, revenue: 11340, status: 'active' },\n  { id: '3', product: 'Enterprise Plan', sales: 89, revenue: 17800, status: 'active' },\n  { id: '4', product: 'Starter Plan', sales: 432, revenue: 4320, status: 'pending' },\n  { id: '5', product: 'Pro Plan', sales: 156, revenue: 15600, status: 'active' }\n];\n\nconst mockQuickStats = [\n  { name: 'Mon', value: 4200 },\n  { name: 'Tue', value: 5100 },\n  { name: 'Wed', value: 3800 },\n  { name: 'Thu', value: 6200 },\n  { name: 'Fri', value: 5500 },\n  { name: 'Sat', value: 4800 },\n  { name: 'Sun', value: 3900 }\n];\n\nconst getMetricIcon = (label: string) => {\n  switch (label) {\n    case 'Total Revenue':\n      return DollarSign;\n    case 'Active Users':\n      return Users;\n    case 'Total Orders':\n      return ShoppingCart;\n    case 'Conversion Rate':\n      return Target;\n    default:\n      return DollarSign;\n  }\n};\n\nconst formatMetricValue = (label: string, value: number) => {\n  if (label === 'Total Revenue') {\n    return `$${value.toLocaleString()}`;\n  } else if (label === 'Conversion Rate') {\n    return `${value}%`;\n  }\n  return value.toLocaleString();\n};\n\nconst COLORS = ['#3b82f6', '#8b5cf6', '#ec4899', '#f59e0b', '#10b981'];\n\nconst CustomPieTooltip = ({ active, payload, isDark }: any) => {\n  if (active && payload && payload.length) {\n    return (\n      <div className={`rounded-lg border p-3 shadow-lg ${isDark ? 'bg-gray-800 border-gray-700' : 'bg-white border-gray-200'}`}>\n        <p className={`font-semibold ${isDark ? 'text-white' : 'text-gray-900'}`}>\n          {payload[0].name}\n        </p>\n        <p className={`text-sm ${isDark ? 'text-gray-400' : 'text-gray-600'}`}>\n          Sales: {payload[0].value}\n        </p>\n        <p className={`text-sm font-medium ${isDark ? 'text-blue-400' : 'text-blue-600'}`}>\n          {payload[0].payload.percentage}%\n        </p>\n      </div>\n    );\n  }\n  return null;\n};\n\n</parameter>\n</invoke>\ntype SortField = 'product' | 'sales' | 'revenue' | 'status';\ntype SortDirection = 'asc' | 'desc';\n\nexport default function AnalyticsDashboard() {\n  const [isDarkMode, setIsDarkMode] = useState(false);\n  const [metrics, setMetrics] = useState<MetricData[]>(mockMetrics);\n  const [chartData, setChartData] = useState<ChartDataPoint[]>(mockChartData);\n  const [tableData, setTableData] = useState<TableRow[]>(mockTableData);\n  const [isRefreshing, setIsRefreshing] = useState(false);\n  const [sortField, setSortField] = useState<SortField>('revenue');\n  const [sortDirection, setSortDirection] = useState<SortDirection>('desc');\n  const [currentPage, setCurrentPage] = useState(1);\n  const itemsPerPage = 5;\n\n  const toggleDarkMode = useCallback(() => {\n    setIsDarkMode(prev => !prev);\n  }, []);\n\n  const UserChartTooltip = ({ active, payload }: any) => {\n    if (active && payload && payload.length) {\n      return (\n        <div className={`rounded-lg border p-3 shadow-lg ${\n          isDarkMode ? 'bg-gray-800 border-gray-700' : 'bg-white border-gray-200'\n        }`}>\n          <p className={`text-sm font-medium mb-1 ${isDarkMode ? 'text-gray-300' : 'text-gray-600'}`}>\n            {payload[0].payload.date}\n          </p>\n          <p className={`text-lg font-bold ${isDarkMode ? 'text-blue-400' : 'text-blue-600'}`}>\n            <Users className=\"inline h-4 w-4 mr-1\" />\n            {payload[0].value.toLocaleString()} users\n          </p>\n        </div>\n      );\n    }\n    return null;\n  };\n\n  const CustomTooltip = ({ active, payload }: any) => {\n    if (active && payload && payload.length) {\n      return (\n        <div className={`p-3 rounded-lg shadow-lg border ${isDarkMode ? 'bg-gray-800 border-gray-700' : 'bg-white border-gray-200'}`}>\n          <p className={`text-sm font-medium mb-2 ${isDarkMode ? 'text-gray-300' : 'text-gray-600'}`}>\n            {payload[0].payload.date}\n          </p>\n          <p className={`text-sm font-semibold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n            Revenue: ${payload[0].value.toLocaleString()}\n          </p>\n        </div>\n      );\n    }\n    return null;\n  };\n\n  const handleRefresh = useCallback(() => {\n    setIsRefreshing(true);\n    \n    setTimeout(() => {\n      // Generate updated mock metrics with random variations\n      const updatedMetrics = mockMetrics.map(metric => ({\n        ...metric,\n        value: metric.value + Math.floor(Math.random() * 200 - 100),\n        change: parseFloat((Math.random() * 20 - 5).toFixed(1)),\n        trend: Math.random() > 0.5 ? 'up' as const : 'down' as const\n      }));\n\n      // Generate updated chart data with random variations\n      const updatedChartData = mockChartData.map(point => ({\n        ...point,\n        revenue: point.revenue + Math.floor(Math.random() * 4000 - 2000),\n        users: point.users + Math.floor(Math.random() * 100 - 50),\n        orders: point.orders + Math.floor(Math.random() * 60 - 30)\n      }));\n\n      // Generate updated table data with random variations\n      const updatedTableData = mockTableData.map(row => ({\n        ...row,\n        sales: row.sales + Math.floor(Math.random() * 40 - 20),\n        revenue: row.revenue + Math.floor(Math.random() * 2000 - 1000)\n      }));\n\n      setMetrics(updatedMetrics);\n      setChartData(updatedChartData);\n      setTableData(updatedTableData);\n      setIsRefreshing(false);\n    }, 1500);\n  }, []);\n\n  const handleSort = useCallback((field: SortField) => {\n    if (sortField === field) {\n      setSortDirection(prev => prev === 'asc' ? 'desc' : 'asc');\n    } else {\n      setSortField(field);\n      setSortDirection('desc');\n    }\n    setCurrentPage(1);\n  }, [sortField]);\n\n  const sortedTableData = useCallback(() => {\n    const sorted = [...tableData].sort((a, b) => {\n      let aValue = a[sortField];\n      let bValue = b[sortField];\n\n      if (typeof aValue === 'string') {\n        aValue = aValue.toLowerCase();\n        bValue = (bValue as string).toLowerCase();\n      }\n\n      if (aValue < bValue) return sortDirection === 'asc' ? -1 : 1;\n      if (aValue > bValue) return sortDirection === 'asc' ? 1 : -1;\n      return 0;\n    });\n\n    return sorted;\n  }, [tableData, sortField, sortDirection]);\n\n  const paginatedData = useCallback(() => {\n    const sorted = sortedTableData();\n    const startIndex = (currentPage - 1) * itemsPerPage;\n    const endIndex = startIndex + itemsPerPage;\n    return sorted.slice(startIndex, endIndex);\n  }, [sortedTableData, currentPage]);\n\n  const totalPages = Math.ceil(tableData.length / itemsPerPage);\n\n  const getStatusBadgeVariant = (status: TableRow['status']) => {\n    switch (status) {\n      case 'active':\n        return 'default';\n      case 'pending':\n        return 'secondary';\n      case 'inactive':\n        return 'outline';\n      default:\n        return 'default';\n    }\n  };\n\n  const formatCurrency = (value: number) => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n      minimumFractionDigits: 0\n    }).format(value);</parameter>\n</invoke>.map(point => ({\n        ...point,\n        revenue: point.revenue + Math.floor(Math.random() * 4000 - 2000),\n        users: point.users + Math.floor(Math.random() * 100 - 50),\n        orders: point.orders + Math.floor(Math.random() * 50 - 25)\n      }));\n\n      // Generate updated table data with random variations\n      const updatedTableData = mockTableData.map(row => ({\n        ...row,\n        sales: row.sales + Math.floor(Math.random() * 40 - 20),\n        revenue: row.revenue + Math.floor(Math.random() * 2000 - 1000)\n      }));\n\n      setMetrics(updatedMetrics);\n      setChartData(updatedChartData);\n      setTableData(updatedTableData);\n      setIsRefreshing(false);\n    }, 1500);</parameter>\n\n  }, []);\n\n  return (\n    <div className={`min-h-screen transition-colors duration-300 ${isDarkMode ? 'dark bg-gray-900' : 'bg-gray-50'}`}>\n      <div className=\"container mx-auto p-4 md:p-6 lg:p-8\">\n        <div className=\"flex flex-col md:flex-row justify-between items-start md:items-center gap-4 mb-8\">\n          <div>\n            <h1 className={`text-3xl md:text-4xl font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n              Analytics Dashboard\n            </h1>\n            <p className={`mt-2 ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n              Real-time insights and performance metrics\n            </p>\n          </div>\n\n          <div className=\"flex gap-2\">\n            <Button\n              variant=\"outline\"\n              size=\"icon\"\n              onClick={toggleDarkMode}\n              className={isDarkMode ? 'border-gray-700' : ''}\n            >\n              {isDarkMode ? <Sun className=\"h-5 w-5\" /> : <Moon className=\"h-5 w-5\" />}\n            </Button>\n            <Button\n              variant=\"outline\"\n              onClick={handleRefresh}\n              disabled={isRefreshing}\n              className={isDarkMode ? 'border-gray-700' : ''}\n            >\n              <RefreshCw className={`h-4 w-4 mr-2 ${isRefreshing ? 'animate-spin' : ''}`} />\n              Refresh\n            </Button>\n          </div>\n        </div>\n\n        <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 md:gap-6 mb-8\">\n          {metrics.map((metric, index) => {\n            const Icon = getMetricIcon(metric.label);\n            const isPositive = metric.trend === 'up';\n            const TrendIcon = isPositive ? TrendingUp : TrendingDown;\n\n            return (\n              <motion.div\n                key={metric.id}\n                initial={{ opacity: 0, y: 20 }}\n                animate={{ opacity: 1, y: 0 }}\n                transition={{ duration: 0.4, delay: index * 0.1 }}\n              >\n                <Card className={`${isDarkMode ? 'bg-gray-800 border-gray-700' : 'bg-white'} hover:shadow-lg transition-shadow duration-300`}>\n                  <CardHeader className=\"flex flex-row items-center justify-between pb-2\">\n                    <CardTitle className={`text-sm font-medium ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                      {metric.label}\n                    </CardTitle>\n                    <div className={`p-2 rounded-lg ${isDarkMode ? 'bg-gray-700' : 'bg-gray-100'}`}>\n                      <Icon className={`h-4 w-4 ${isDarkMode ? 'text-gray-300' : 'text-gray-600'}`} />\n                    </div>\n                  </CardHeader>\n                  <CardContent>\n                    <div className={`text-2xl md:text-3xl font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                      {formatMetricValue(metric.label, metric.value)}\n                    </div>\n                    <div className=\"flex items-center mt-2\">\n                      <TrendIcon \n                        className={`h-4 w-4 mr-1 ${isPositive ? 'text-green-500' : 'text-red-500'}`} \n                      />\n                      <span className={`text-sm font-medium ${isPositive ? 'text-green-500' : 'text-red-500'}`}>\n                        {Math.abs(metric.change)}%\n                      </span>\n                      <span className={`text-sm ml-1 ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                        vs last period\n                      </span>\n                    </div>\n                  </CardContent>\n                </Card>\n              </motion.div>\n            );\n          })}</parameter>\n</invoke>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-4 md:gap-6 mb-8\">\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Revenue Overview</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Daily revenue trends\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"w-full h-[300px] md:h-[350px]\">\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <LineChart\n                    data={chartData}\n                    margin={{ top: 5, right: 10, left: 0, bottom: 5 }}\n                  >\n                    <CartesianGrid \n                      strokeDasharray=\"3 3\" \n                      stroke={isDarkMode ? '#374151' : '#e5e7eb'}\n                    />\n                    <XAxis \n                      dataKey=\"date\" \n                      stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                      tick={{ fill: isDarkMode ? '#9ca3af' : '#6b7280', fontSize: 12 }}\n                      tickFormatter={(value) => new Date(value).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n                    />\n                    <YAxis \n                      stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                      tick={{ fill: isDarkMode ? '#9ca3af' : '#6b7280', fontSize: 12 }}\n                      tickFormatter={(value) => `$${(value / 1000).toFixed(0)}k`}\n                    />\n                    <Tooltip content={<CustomTooltip />} />\n                    <Line \n                      type=\"monotone\" \n                      dataKey=\"revenue\" \n                      stroke=\"#3b82f6\" \n                      strokeWidth={2}\n                      dot={{ fill: '#3b82f6', r: 4 }}\n                      activeDot={{ r: 6, fill: '#2563eb' }}\n                    />\n                  </LineChart>\n                </ResponsiveContainer>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>User Growth</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Active users over time\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"h-[300px] w-full\">\n                <svg width=\"100%\" height=\"100%\" viewBox=\"0 0 700 300\" preserveAspectRatio=\"none\">\n                  <defs>\n                    <linearGradient id=\"userGradient\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                      <stop offset=\"0%\" stopColor={isDarkMode ? '#3b82f6' : '#60a5fa'} stopOpacity=\"0.8\" />\n                      <stop offset=\"100%\" stopColor={isDarkMode ? '#3b82f6' : '#60a5fa'} stopOpacity=\"0.1\" />\n                    </linearGradient>\n                  </defs>\n                  \n                  {/* Grid lines */}\n                  {[0, 1, 2, 3, 4].map((i) => (\n                    <line\n                      key={i}\n                      x1=\"0\"\n                      y1={i * 75}\n                      x2=\"700\"\n                      y2={i * 75}\n                      stroke={isDarkMode ? '#374151' : '#e5e7eb'}\n                      strokeWidth=\"1\"\n                    />\n                  ))}\n                  \n                  {/* Area chart */}\n                  <motion.path\n                    initial={{ opacity: 0, pathLength: 0 }}\n                    animate={{ opacity: 1, pathLength: 1 }}\n                    transition={{ duration: 1.5, ease: \"easeInOut\" }}\n                    d={(() => {\n                      const maxUsers = Math.max(...chartData.map(d => d.users));\n                      const points = chartData.map((d, i) => {\n                        const x = (i / (chartData.length - 1)) * 700;\n                        const y = 300 - (d.users / maxUsers) * 250;\n                        return `${x},${y}`;\n                      });\n                      return `M 0,300 L ${points.join(' L ')} L 700,300 Z`;\n                    })()}\n                    fill=\"url(#userGradient)\"\n                  />\n                  \n                  {/* Line */}\n                  <motion.path\n                    initial={{ pathLength: 0 }}\n                    animate={{ pathLength: 1 }}\n                    transition={{ duration: 1.5, ease: \"easeInOut\" }}\n                    d={(() => {\n                      const maxUsers = Math.max(...chartData.map(d => d.users));\n                      const points = chartData.map((d, i) => {\n                        const x = (i / (chartData.length - 1)) * 700;\n                        const y = 300 - (d.users / maxUsers) * 250;\n                        return `${x},${y}`;\n                      });\n                      return `M ${points.join(' L ')}`;\n                    })()}\n                    fill=\"none\"\n                    stroke={isDarkMode ? '#3b82f6' : '#2563eb'}\n                    strokeWidth=\"3\"\n                    strokeLinecap=\"round\"\n                    strokeLinejoin=\"round\"\n                  />\n                  \n                  {/* Data points */}\n                  {chartData.map((d, i) => {\n                    const maxUsers = Math.max(...chartData.map(d => d.users));\n                    const x = (i / (chartData.length - 1)) * 700;\n                    const y = 300 - (d.users / maxUsers) * 250;\n                    return (\n                      <g key={i}>\n                        <motion.circle\n                          initial={{ scale: 0, opacity: 0 }}\n                          animate={{ scale: 1, opacity: 1 }}\n                          transition={{ delay: 0.1 * i, duration: 0.3 }}\n                          cx={x}\n                          cy={y}\n                          r=\"6\"\n                          fill={isDarkMode ? '#1e293b' : '#ffffff'}\n                          stroke={isDarkMode ? '#3b82f6' : '#2563eb'}\n                          strokeWidth=\"3\"\n                          className=\"cursor-pointer hover:r-8 transition-all\"\n                        />\n                        <title>{`${d.date}: ${d.users} users`}</title>\n                      </g>\n                    );\n                  })}\n                </svg>\n                \n                {/* X-axis labels */}\n                <div className=\"flex justify-between mt-2 px-2\">\n                  {chartData.map((d, i) => (\n                    i % 2 === 0 && (\n                      <span key={i} className={`text-xs ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                        {new Date(d.date).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n                      </span>\n                    )\n                  ))}\n                </div>\n                \n                {/* Stats summary */}\n                <div className=\"flex items-center justify-between mt-4 pt-4 border-t border-gray-200 dark:border-gray-700\">\n                  <div className=\"flex items-center gap-2\">\n                    <TrendingUp className={`h-5 w-5 ${isDarkMode ? 'text-blue-400' : 'text-blue-600'}`} />\n                    <span className={`text-sm font-medium ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>\n                      Peak: {Math.max(...chartData.map(d => d.users)).toLocaleString()} users\n                    </span>\n                  </div>\n                  <span className={`text-sm ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                    Avg: {Math.round(chartData.reduce((sum, d) => sum + d.users, 0) / chartData.length).toLocaleString()}\n                  </span>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-4 md:gap-6 mb-8\">\n          <Card className={`lg:col-span-2 ${isDarkMode ? 'bg-gray-800 border-gray-700' : ''}`}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Performance Metrics</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Combined view of key metrics\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"h-[300px] w-full\">\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <LineChart\n                    data={chartData}\n                    margin={{ top: 5, right: 30, left: 20, bottom: 5 }}\n                  >\n                    <CartesianGrid \n                      strokeDasharray=\"3 3\" \n                      stroke={isDarkMode ? '#374151' : '#e5e7eb'}\n                    />\n                    <XAxis \n                      dataKey=\"date\" \n                      stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                      tick={{ fill: isDarkMode ? '#9ca3af' : '#6b7280' }}\n                      tickFormatter={(value) => new Date(value).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n                    />\n                    <YAxis \n                      stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                      tick={{ fill: isDarkMode ? '#9ca3af' : '#6b7280' }}\n                    />\n                    <Tooltip \n                      contentStyle={{\n                        backgroundColor: isDarkMode ? '#1f2937' : '#ffffff',\n                        border: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\n                        borderRadius: '6px',\n                        color: isDarkMode ? '#f3f4f6' : '#111827'\n                      }}\n                      labelFormatter={(value) => new Date(value).toLocaleDateString('en-US', { month: 'long', day: 'numeric', year: 'numeric' })}\n                    />\n                    <Legend \n                      wrapperStyle={{\n                        color: isDarkMode ? '#f3f4f6' : '#111827'\n                      }}\n                    />\n                    <Line \n                      type=\"monotone\" \n                      dataKey=\"revenue\" \n                      stroke=\"#3b82f6\" \n                      strokeWidth={2}\n                      dot={{ fill: '#3b82f6', r: 4 }}\n                      activeDot={{ r: 6 }}\n                      name=\"Revenue ($)\"\n                    />\n                    <Line \n                      type=\"monotone\" \n                      dataKey=\"users\" \n                      stroke=\"#10b981\" \n                      strokeWidth={2}\n                      dot={{ fill: '#10b981', r: 4 }}\n                      activeDot={{ r: 6 }}\n                      name=\"Users\"\n                    />\n                    <Line \n                      type=\"monotone\" \n                      dataKey=\"orders\" \n                      stroke=\"#f59e0b\" \n                      strokeWidth={2}\n                      dot={{ fill: '#f59e0b', r: 4 }}\n                      activeDot={{ r: 6 }}\n                      name=\"Orders\"\n                    />\n                  </LineChart>\n                </ResponsiveContainer>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Distribution</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Sales by category\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              {/* TODO:PieChart Render pie chart with product distribution and percentages */}\n            </CardContent>\n          </Card>\n        </div>\n\n        <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n          <CardHeader>\n            <CardTitle className={isDarkMode ? 'text-white' : ''}>Top Products</CardTitle>\n            <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n              Best performing products by revenue\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            {/* TODO:DataTable Render sortable table with product data, status badges, and pagination */}\n          </CardContent>\n        </Card>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 md:gap-6 mt-8\">\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Recent Activity</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4 max-h-[400px] overflow-y-auto pr-2\">\n                {[\n                  { id: '1', action: 'New order placed', user: 'John Doe', time: '2 min ago', icon: ShoppingCart, color: 'text-blue-500' },\n                  { id: '2', action: 'User registered', user: 'Jane Smith', time: '15 min ago', icon: Users, color: 'text-green-500' },\n                  { id: '3', action: 'Revenue milestone', user: 'System', time: '1 hour ago', icon: DollarSign, color: 'text-yellow-500' },\n                  { id: '4', action: 'Goal achieved', user: 'Marketing Team', time: '2 hours ago', icon: Target, color: 'text-purple-500' },\n                  { id: '5', action: 'New order placed', user: 'Bob Wilson', time: '3 hours ago', icon: ShoppingCart, color: 'text-blue-500' },\n                  { id: '6', action: 'User registered', user: 'Alice Brown', time: '4 hours ago', icon: Users, color: 'text-green-500' },\n                  { id: '7', action: 'Revenue milestone', user: 'System', time: '5 hours ago', icon: DollarSign, color: 'text-yellow-500' }\n                ].map((activity, index) => (\n                  <motion.div\n                    key={activity.id}\n                    initial={{ opacity: 0, x: -20 }}\n                    animate={{ opacity: 1, x: 0 }}\n                    transition={{ delay: index * 0.1 }}\n                    className={`flex items-start gap-3 p-3 rounded-lg ${\n                      isDarkMode ? 'bg-gray-700/50 hover:bg-gray-700' : 'bg-gray-50 hover:bg-gray-100'\n                    } transition-colors`}\n                  >\n                    <div className={`p-2 rounded-full ${isDarkMode ? 'bg-gray-600' : 'bg-white'}`}>\n                      <activity.icon className={`h-4 w-4 ${activity.color}`} />\n                    </div>\n                    <div className=\"flex-1 min-w-0\">\n                      <p className={`text-sm font-medium ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                        {activity.action}\n                      </p>\n                      <p className={`text-xs ${isDarkMode ? 'text-gray-400' : 'text-gray-500'}`}>\n                        {activity.user}\n                      </p>\n                    </div>\n                    <span className={`text-xs ${isDarkMode ? 'text-gray-500' : 'text-gray-400'} whitespace-nowrap`}>\n                      {activity.time}\n                    </span>\n                  </motion.div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Quick Stats</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                <ResponsiveContainer width=\"100%\" height={200}>\n                  <BarChart data={mockQuickStats}>\n                    <CartesianGrid \n                      strokeDasharray=\"3 3\" \n                      stroke={isDarkMode ? '#374151' : '#e5e7eb'}\n                    />\n                    <XAxis \n                      dataKey=\"name\" \n                      stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                      style={{ fontSize: '12px' }}\n                    />\n                    <YAxis \n                      stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                      style={{ fontSize: '12px' }}\n                    />\n                    <Tooltip \n                      contentStyle={{\n                        backgroundColor: isDarkMode ? '#1f2937' : '#ffffff',\n                        border: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\n                        borderRadius: '6px',\n                        color: isDarkMode ? '#ffffff' : '#000000'\n                      }}\n                    />\n                    <Bar \n                      dataKey=\"value\" \n                      fill={isDarkMode ? '#3b82f6' : '#2563eb'}\n                      radius={[4, 4, 0, 0]}\n                    />\n                  </BarChart>\n                </ResponsiveContainer>\n                \n                <div className=\"grid grid-cols-2 gap-4 pt-2\">\n                  <div className={`p-3 rounded-lg ${isDarkMode ? 'bg-gray-700' : 'bg-gray-100'}`}>\n                    <p className={`text-xs ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                      Avg Daily\n                    </p>\n                    <p className={`text-lg font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                      $4,786\n                    </p>\n                  </div>\n                  <div className={`p-3 rounded-lg ${isDarkMode ? 'bg-gray-700' : 'bg-gray-100'}`}>\n                    <p className={`text-xs ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                      Peak Day\n                    </p>\n                    <p className={`text-lg font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                      Thursday\n                    </p>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Goals Progress</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {[\n                  { label: 'Revenue Goal', current: 45231, target: 50000, color: 'bg-blue-500' },\n                  { label: 'User Acquisition', current: 2350, target: 3000, color: 'bg-green-500' },\n                  { label: 'Order Target', current: 1543, target: 2000, color: 'bg-purple-500' },\n                  { label: 'Conversion Rate', current: 3.24, target: 5.0, color: 'bg-orange-500' }\n                ].map((goal, index) => {\n                  const percentage = Math.min((goal.current / goal.target) * 100, 100);\n                  return (\n                    <motion.div\n                      key={goal.label}\n                      initial={{ opacity: 0, x: -20 }}\n                      animate={{ opacity: 1, x: 0 }}\n                      transition={{ delay: index * 0.1 }}\n                      className=\"space-y-2\"\n                    >\n                      <div className=\"flex justify-between items-center\">\n                        <span className={`text-sm font-medium ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>\n                          {goal.label}\n                        </span>\n                        <span className={`text-sm ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                          {percentage.toFixed(1)}%\n                        </span>\n                      </div>\n                      <div className={`h-2 rounded-full overflow-hidden ${isDarkMode ? 'bg-gray-700' : 'bg-gray-200'}`}>\n                        <motion.div\n                          initial={{ width: 0 }}\n                          animate={{ width: `${percentage}%` }}\n                          transition={{ duration: 1, delay: index * 0.1 }}\n                          className={`h-full ${goal.color} rounded-full`}\n                        />\n                      </div>\n                      <div className=\"flex justify-between items-center\">\n                        <span className={`text-xs ${isDarkMode ? 'text-gray-500' : 'text-gray-500'}`}>\n                          {goal.current.toLocaleString()}\n                        </span>\n                        <span className={`text-xs ${isDarkMode ? 'text-gray-500' : 'text-gray-500'}`}>\n                          {goal.target.toLocaleString()}\n                        </span>\n                      </div>\n                    </motion.div>\n                  );\n                })}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}",
    "error": null,
    "elapsed_time": 74.34672808647156,
    "success": true
  }
}