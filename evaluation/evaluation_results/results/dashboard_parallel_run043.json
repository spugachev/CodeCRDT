{
  "prompt_id": "dashboard",
  "prompt_name": "Analytics Dashboard",
  "mode": "parallel",
  "run_number": 43,
  "timestamp": "2025-10-14T05:16:07.256528",
  "response_time": 74.34766364097595,
  "total_tokens": null,
  "response_content": "import { useState, useCallback } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\nimport { Badge } from '@/components/ui/badge';\nimport { Button } from '@/components/ui/button';\nimport { Moon, Sun, RefreshCw } from 'lucide-react';\nimport { ArrowUpDown, ChevronLeft, ChevronRight } from 'lucide-react';\nimport { TrendingUp, TrendingDown, DollarSign, Users, ShoppingCart, Target, CheckCircle, AlertCircle, UserPlus, Package } from 'lucide-react';\n\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, Legend } from 'recharts';\nimport { PieChart, Pie, Cell, ResponsiveContainer, Legend, Tooltip } from 'recharts';\nimport { motion } from 'framer-motion';\nimport { TrendingUp, Users } from 'lucide-react';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';\n\nimport { Progress } from '@/components/ui/progress';\nimport { TrendingUp, TrendingDown, DollarSign, Users, ShoppingCart, Target } from 'lucide-react';interface CategoryData {\n  name: string;\n  value: number;\n  color: string;\n}\n\n\ninterface MetricData {\n  id: string;\n  label: string;\n  value: number;\n  change: number;\n  trend: 'up' | 'down';\n}\n\ninterface ChartDataPoint {\n  date: string;\n  revenue: number;\n  users: number;\n  orders: number;\n}\n\ninterface TableRow {\n  id: string;\n  product: string;\n  sales: number;\n  revenue: number;\n  status: 'active' | 'pending' | 'inactive';\n}\n\nconst mockCategoryData: CategoryData[] = [\n  { name: 'Premium', value: 23400, color: '#3b82f6' },\n  { name: 'Basic', value: 11340, color: '#10b981' },\n  { name: 'Enterprise', value: 17800, color: '#8b5cf6' },\n  { name: 'Starter', value: 4320, color: '#f59e0b' },\n  { name: 'Pro', value: 15600, color: '#ec4899' }\n];\n\nconst mockMetrics: MetricData[] = [\n  { id: '1', label: 'Total Revenue', value: 45231, change: 12.5, trend: 'up' },\n  { id: '2', label: 'Active Users', value: 2350, change: 8.2, trend: 'up' },\n  { id: '3', label: 'Total Orders', value: 1543, change: -3.1, trend: 'down' },\n  { id: '4', label: 'Conversion Rate', value: 3.24, change: 5.7, trend: 'up' }\n];\n\nconst mockChartData: ChartDataPoint[] = [\n  { date: '2024-01-01', revenue: 12000, users: 450, orders: 230 },\n  { date: '2024-01-02', revenue: 15000, users: 520, orders: 280 },\n  { date: '2024-01-03', revenue: 13500, users: 490, orders: 250 },\n  { date: '2024-01-04', revenue: 18000, users: 610, orders: 320 },\n  { date: '2024-01-05', revenue: 16500, users: 580, orders: 295 },\n  { date: '2024-01-06', revenue: 20000, users: 680, orders: 350 },\n  { date: '2024-01-07', revenue: 22000, users: 720, orders: 380 }\n];\n\nconst mockTableData: TableRow[] = [\n  { id: '1', product: 'Premium Plan', sales: 234, revenue: 23400, status: 'active' },\n  { id: '2', product: 'Basic Plan', sales: 567, revenue: 11340, status: 'active' },\n  { id: '3', product: 'Enterprise Plan', sales: 89, revenue: 17800, status: 'active' },\n  { id: '4', product: 'Starter Plan', sales: 432, revenue: 4320, status: 'pending' },\n  { id: '5', product: 'Pro Plan', sales: 156, revenue: 15600, status: 'active' }\n];\ninterface ActivityItem {\n  id: string;\n  type: 'success' | 'warning' | 'info' | 'error';\n  message: string;\n  timestamp: string;\n  icon: 'check' | 'alert' | 'user' | 'package';\n}\n\nconst mockActivityData: ActivityItem[] = [\n  { id: '1', type: 'success', message: 'New order #1234 completed', timestamp: '2 minutes ago', icon: 'check' },\n  { id: '2', type: 'info', message: 'User John Doe registered', timestamp: '15 minutes ago', icon: 'user' },\n  { id: '3', type: 'success', message: 'Payment received $450', timestamp: '32 minutes ago', icon: 'check' },\n  { id: '4', type: 'warning', message: 'Low stock alert for Product A', timestamp: '1 hour ago', icon: 'alert' },\n  { id: '5', type: 'info', message: 'New shipment dispatched', timestamp: '2 hours ago', icon: 'package' },\n  { id: '6', type: 'success', message: 'Order #1230 delivered', timestamp: '3 hours ago', icon: 'check' },\n  { id: '7', type: 'info', message: 'User Jane Smith registered', timestamp: '4 hours ago', icon: 'user' },\n  { id: '8', type: 'success', message: 'Payment received $890', timestamp: '5 hours ago', icon: 'check' }\n];\n\nconst UserAreaChart = ({ data, isDarkMode }: { data: ChartDataPoint[], isDarkMode: boolean }) => {\n  const maxUsers = Math.max(...data.map(d => d.users));\n  const minUsers = Math.min(...data.map(d => d.users));\n  const range = maxUsers - minUsers;\n  \n  const points = data.map((point, index) => {\n    const x = (index / (data.length - 1)) * 100;\n    const y = 100 - ((point.users - minUsers) / range) * 100;\n    return `${x},${y}`;\n  }).join(' ');\n  \n  const areaPath = `0,100 ${points} 100,100`;\n  const linePath = points;\n  \n  return (\n    <div className=\"relative w-full h-64\">\n      <svg viewBox=\"0 0 100 100\" className=\"w-full h-full\" preserveAspectRatio=\"none\">\n        <defs>\n          <linearGradient id=\"userGradient\" x1=\"0%\" y1=\"0%\" x2=\"0%\" y2=\"100%\">\n            <stop offset=\"0%\" stopColor=\"#3b82f6\" stopOpacity=\"0.4\" />\n            <stop offset=\"100%\" stopColor=\"#3b82f6\" stopOpacity=\"0.05\" />\n          </linearGradient>\n        </defs>\n        \n        <motion.polygon\n          points={areaPath}\n          fill=\"url(#userGradient)\"\n          initial={{ opacity: 0 }}\n          animate={{ opacity: 1 }}\n          transition={{ duration: 0.8 }}\n        />\n        \n        <motion.polyline\n          points={linePath}\n          fill=\"none\"\n          stroke=\"#3b82f6\"\n          strokeWidth=\"0.5\"\n          initial={{ pathLength: 0 }}\n          animate={{ pathLength: 1 }}\n          transition={{ duration: 1.5, ease: \"easeInOut\" }}\n        />\n        \n        {data.map((point, index) => {\n          const x = (index / (data.length - 1)) * 100;\n          const y = 100 - ((point.users - minUsers) / range) * 100;\n          return (\n            <motion.circle\n              key={index}\n              cx={x}\n              cy={y}\n              r=\"1\"\n              fill=\"#3b82f6\"\n              initial={{ scale: 0 }}\n              animate={{ scale: 1 }}\n              transition={{ duration: 0.3, delay: index * 0.1 }}\n              className=\"cursor-pointer hover:r-2\"\n            />\n          );\n        })}\n      </svg>\n      \n      <div className=\"absolute bottom-0 left-0 right-0 flex justify-between px-2 text-xs\">\n        {data.map((point, index) => (\n          index % 2 === 0 && (\n            <span key={index} className={isDarkMode ? 'text-gray-400' : 'text-gray-600'}>\n              {new Date(point.date).getDate()}/{new Date(point.date).getMonth() + 1}\n            </span>\n          )\n        ))}\n      </div>\n      \n      <div className=\"absolute top-0 left-0 right-0 flex justify-between items-start mt-2 px-2\">\n        <div className={`text-xs ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n          Max: {maxUsers}\n        </div>\n        <div className={`text-xs ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n          Min: {minUsers}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default function AnalyticsDashboard() {\n  const [isDarkMode, setIsDarkMode] = useState(false);\n  const [metrics, setMetrics] = useState<MetricData[]>(mockMetrics);\n  const [chartData, setChartData] = useState<ChartDataPoint[]>(mockChartData);\n  const [tableData, setTableData] = useState<TableRow[]>(mockTableData);\n  const [isRefreshing, setIsRefreshing] = useState(false);\n\n  const toggleDarkMode = useCallback(() => {\n    setIsDarkMode(prev => !prev);\n  }, []);\n\ninterface DataTableProps {\n  data: TableRow[];\n  isDarkMode: boolean;\n}\n\ntype SortField = 'product' | 'sales' | 'revenue' | 'status';\ntype SortDirection = 'asc' | 'desc';\n\nfunction DataTable({ data, isDarkMode }: DataTableProps) {\n  const [sortField, setSortField] = useState<SortField>('revenue');\n  const [sortDirection, setSortDirection] = useState<SortDirection>('desc');\n  const [currentPage, setCurrentPage] = useState(1);\n  const itemsPerPage = 5;\n\n  const handleSort = (field: SortField) => {\n    if (sortField === field) {\n      setSortDirection(sortDirection === 'asc' ? 'desc' : 'asc');\n    } else {\n      setSortField(field);\n      setSortDirection('desc');\n    }\n  };\n\n  const sortedData = [...data].sort((a, b) => {\n    let aValue = a[sortField];\n    let bValue = b[sortField];\n\n    if (typeof aValue === 'string') {\n      aValue = aValue.toLowerCase();\n      bValue = (bValue as string).toLowerCase();\n    }\n\n    if (aValue < bValue) return sortDirection === 'asc' ? -1 : 1;\n    if (aValue > bValue) return sortDirection === 'asc' ? 1 : -1;\n    return 0;\n  });\n\n  const totalPages = Math.ceil(sortedData.length / itemsPerPage);\n  const startIndex = (currentPage - 1) * itemsPerPage;\n  const paginatedData = sortedData.slice(startIndex, startIndex + itemsPerPage);\n\n  const getStatusBadgeVariant = (status: string) => {\n    switch (status) {\n      case 'active':\n        return 'default';\n      case 'pending':\n        return 'secondary';\n      case 'inactive':\n        return 'outline';\n      default:\n        return 'default';\n    }\n  };\n\n  return (\n    <div className=\"space-y-4\">\n      <div className=\"rounded-md border\" style={{ borderColor: isDarkMode ? '#374151' : undefined }}>\n        <Table>\n          <TableHeader>\n            <TableRow className={isDarkMode ? 'border-gray-700 hover:bg-gray-700/50' : ''}>\n              <TableHead className={isDarkMode ? 'text-gray-300' : ''}>\n                <Button\n                  variant=\"ghost\"\n                  onClick={() => handleSort('product')}\n                  className={`flex items-center gap-1 ${isDarkMode ? 'hover:bg-gray-700' : ''}`}\n                >\n                  Product\n                  <ArrowUpDown className=\"h-4 w-4\" />\n                </Button>\n              </TableHead>\n              <TableHead className={isDarkMode ? 'text-gray-300' : ''}>\n                <Button\n                  variant=\"ghost\"\n                  onClick={() => handleSort('sales')}\n                  className={`flex items-center gap-1 ${isDarkMode ? 'hover:bg-gray-700' : ''}`}\n                >\n                  Sales\n                  <ArrowUpDown className=\"h-4 w-4\" />\n                </Button>\n              </TableHead>\n              <TableHead className={isDarkMode ? 'text-gray-300' : ''}>\n                <Button\n                  variant=\"ghost\"\n                  onClick={() => handleSort('revenue')}\n                  className={`flex items-center gap-1 ${isDarkMode ? 'hover:bg-gray-700' : ''}`}\n                >\n                  Revenue\n                  <ArrowUpDown className=\"h-4 w-4\" />\n                </Button>\n              </TableHead>\n              <TableHead className={isDarkMode ? 'text-gray-300' : ''}>\n                <Button\n                  variant=\"ghost\"\n                  onClick={() => handleSort('status')}\n                  className={`flex items-center gap-1 ${isDarkMode ? 'hover:bg-gray-700' : ''}`}\n                >\n                  Status\n                  <ArrowUpDown className=\"h-4 w-4\" />\n                </Button>\n              </TableHead>\n            </TableRow>\n          </TableHeader>\n          <TableBody>\n            {paginatedData.map((row) => (\n              <TableRow \n                key={row.id}\n                className={isDarkMode ? 'border-gray-700 hover:bg-gray-700/50' : ''}\n              >\n                <TableCell className={`font-medium ${isDarkMode ? 'text-gray-200' : ''}`}>\n                  {row.product}\n                </TableCell>\n                <TableCell className={isDarkMode ? 'text-gray-300' : ''}>\n                  {row.sales.toLocaleString()}\n                </TableCell>\n                <TableCell className={isDarkMode ? 'text-gray-300' : ''}>\n                  ${row.revenue.toLocaleString()}\n                </TableCell>\n                <TableCell>\n                  <Badge \n                    variant={getStatusBadgeVariant(row.status)}\n                    className={\n                      row.status === 'active' \n                        ? 'bg-green-500 hover:bg-green-600' \n                        : row.status === 'pending'\n                        ? isDarkMode ? 'bg-yellow-600 hover:bg-yellow-700' : 'bg-yellow-500 hover:bg-yellow-600'\n                        : ''\n                    }\n                  >\n                    {row.status.charAt(0).toUpperCase() + row.status.slice(1)}\n                  </Badge>\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </div>\n\n      <div className=\"flex items-center justify-between\">\n        <p className={`text-sm ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n          Showing {startIndex + 1} to {Math.min(startIndex + itemsPerPage, sortedData.length)} of {sortedData.length} products\n        </p>\n        \n        <div className=\"flex items-center gap-2\">\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={() => setCurrentPage(prev => Math.max(1, prev - 1))}\n            disabled={currentPage === 1}\n            className={isDarkMode ? 'border-gray-700' : ''}\n          >\n            <ChevronLeft className=\"h-4 w-4\" />\n            Previous\n          </Button>\n          \n          <div className={`flex items-center gap-1 ${isDarkMode ? 'text-gray-300' : ''}`}>\n            <span className=\"text-sm\">\n              Page {currentPage} of {totalPages}\n            </span>\n          </div>\n          \n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={() => setCurrentPage(prev => Math.min(totalPages, prev + 1))}\n            disabled={currentPage === totalPages}\n            className={isDarkMode ? 'border-gray-700' : ''}\n          >\n            Next\n            <ChevronRight className=\"h-4 w-4\" />\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\n  const CustomTooltip = ({ active, payload, label }: any) => {\n    if (active && payload && payload.length) {\n      return (\n        <div className={`p-3 rounded-lg shadow-lg border ${isDarkMode ? 'bg-gray-800 border-gray-700' : 'bg-white border-gray-200'}`}>\n          <p className={`font-semibold mb-2 ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n            {new Date(label).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n          </p>\n          {payload.map((entry: any, index: number) => (\n            <p key={index} className={`text-sm ${isDarkMode ? 'text-gray-300' : 'text-gray-600'}`}>\n              <span style={{ color: entry.color }}>\u25cf</span> Revenue: ${entry.value.toLocaleString()}\n            </p>\n          ))}\n        </div>\n      );\n    }\n    return null;\n  };\n\n  const handleRefresh = useCallback(() => {\n    setIsRefreshing(true);\n    \n    setTimeout(() => {\n      // Generate updated metrics with random variations\n      const updatedMetrics = mockMetrics.map(metric => ({\n        ...metric,\n        value: metric.value + Math.floor(Math.random() * 200 - 100),\n        change: parseFloat((Math.random() * 20 - 5).toFixed(1)),\n        trend: Math.random() > 0.5 ? 'up' as const : 'down' as const\n      }));\n      \n      // Generate updated chart data with random variations\n      const updatedChartData = mockChartData.map(point => ({\n        ...point,\n        revenue: point.revenue + Math.floor(Math.random() * 4000 - 2000),\n        users: point.users + Math.floor(Math.random() * 100 - 50),\n        orders: point.orders + Math.floor(Math.random() * 50 - 25)\n      }));\n      \n      // Generate updated table data with random variations\n      const updatedTableData = mockTableData.map(row => ({\n        ...row,\n        sales: row.sales + Math.floor(Math.random() * 40 - 20),\n        revenue: row.revenue + Math.floor(Math.random() * 2000 - 1000)\n      }));\n      \n      setMetrics(updatedMetrics);\n      setChartData(updatedChartData);\n      setTableData(updatedTableData);\n      setIsRefreshing(false);\n    }, 1500);\n  }, []);\n\n  return (\n    <div className={`min-h-screen transition-colors duration-300 ${isDarkMode ? 'dark bg-gray-900' : 'bg-gray-50'}`}>\n      <div className=\"container mx-auto p-4 md:p-6 lg:p-8\">\n        <div className=\"flex flex-col md:flex-row justify-between items-start md:items-center gap-4 mb-8\">\n          <div>\n            <h1 className={`text-3xl md:text-4xl font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n              Analytics Dashboard\n            </h1>\n            <p className={`mt-2 ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n              Real-time insights and performance metrics\n            </p>\n          </div>\n          \n          <div className=\"flex gap-2\">\n            <Button\n              variant=\"outline\"\n              size=\"icon\"\n              onClick={toggleDarkMode}\n              className={isDarkMode ? 'border-gray-700' : ''}\n            >\n              {isDarkMode ? <Sun className=\"h-5 w-5\" /> : <Moon className=\"h-5 w-5\" />}\n            </Button>\n            \n            <Button\n              variant=\"outline\"\n              onClick={handleRefresh}\n              disabled={isRefreshing}\n              className={isDarkMode ? 'border-gray-700' : ''}\n            >\n              <RefreshCw className={`h-4 w-4 mr-2 ${isRefreshing ? 'animate-spin' : ''}`} />\n              Refresh\n            </Button>\n          </div>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 md:gap-6 mb-8\">\n          {metrics.map((metric) => {\n            const Icon = metric.label.includes('Revenue') ? DollarSign :\n                        metric.label.includes('Users') ? Users :\n                        metric.label.includes('Orders') ? ShoppingCart :\n                        Target;\n            \n            const TrendIcon = metric.trend === 'up' ? TrendingUp : TrendingDown;\n            const trendColor = metric.trend === 'up' ? 'text-green-500' : 'text-red-500';\n            const trendBgColor = metric.trend === 'up' ? 'bg-green-50 dark:bg-green-900/20' : 'bg-red-50 dark:bg-red-900/20';\n\n            return (\n              <Card \n                key={metric.id} \n                className={`transition-all duration-300 hover:shadow-lg hover:-translate-y-1 ${\n                  isDarkMode ? 'bg-gray-800 border-gray-700' : 'bg-white'\n                }`}\n              >\n                <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                  <CardTitle className={`text-sm font-medium ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                    {metric.label}\n                  </CardTitle>\n                  <div className={`p-2 rounded-lg ${isDarkMode ? 'bg-gray-700' : 'bg-gray-100'}`}>\n                    <Icon className={`h-4 w-4 ${isDarkMode ? 'text-gray-300' : 'text-gray-600'}`} />\n                  </div>\n                </CardHeader>\n                <CardContent>\n                  <div className={`text-2xl font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                    {metric.label.includes('Rate') ? `${metric.value}%` : \n                     metric.label.includes('Revenue') ? `$${metric.value.toLocaleString()}` :\n                     metric.value.toLocaleString()}\n                  </div>\n                  <div className=\"flex items-center mt-2\">\n                    <div className={`flex items-center gap-1 px-2 py-1 rounded-full ${trendBgColor}`}>\n                      <TrendIcon className={`h-3 w-3 ${trendColor}`} />\n                      <span className={`text-xs font-medium ${trendColor}`}>\n                        {Math.abs(metric.change)}%\n                      </span>\n                    </div>\n                    <span className={`text-xs ml-2 ${isDarkMode ? 'text-gray-400' : 'text-gray-500'}`}>\n                      vs last period\n                    </span>\n                  </div>\n                </CardContent>\n              </Card>\n            );\n          })}\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-4 md:gap-6 mb-8\">\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Revenue Overview</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Daily revenue trends\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"h-[300px] w-full\">\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <LineChart\n                    data={chartData}\n                    margin={{ top: 5, right: 10, left: 0, bottom: 5 }}\n                  >\n                    <CartesianGrid \n                      strokeDasharray=\"3 3\" \n                      stroke={isDarkMode ? '#374151' : '#e5e7eb'}\n                    />\n                    <XAxis \n                      dataKey=\"date\" \n                      stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                      tick={{ fill: isDarkMode ? '#9ca3af' : '#6b7280', fontSize: 12 }}\n                      tickFormatter={(value) => new Date(value).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n                    />\n                    <YAxis \n                      stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                      tick={{ fill: isDarkMode ? '#9ca3af' : '#6b7280', fontSize: 12 }}\n                      tickFormatter={(value) => `$${(value / 1000).toFixed(0)}k`}\n                    />\n                    <Tooltip content={<CustomTooltip />} />\n                    <Line \n                      type=\"monotone\" \n                      dataKey=\"revenue\" \n                      stroke=\"#3b82f6\" \n                      strokeWidth={2}\n                      dot={{ fill: '#3b82f6', r: 4 }}\n                      activeDot={{ r: 6, fill: '#3b82f6' }}\n                    />\n                  </LineChart>\n                </ResponsiveContainer>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>User Activity</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Active users over time\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <UserAreaChart data={chartData} isDarkMode={isDarkMode} />\n            </CardContent>\n          </Card>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-4 md:gap-6 mb-8\">\n          <Card className={`lg:col-span-2 ${isDarkMode ? 'bg-gray-800 border-gray-700' : ''}`}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Performance Metrics</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Combined view of key metrics\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <ResponsiveContainer width=\"100%\" height={300}>\n                <LineChart data={chartData}>\n                  <CartesianGrid \n                    strokeDasharray=\"3 3\" \n                    stroke={isDarkMode ? '#374151' : '#e5e7eb'} \n                  />\n                  <XAxis \n                    dataKey=\"date\" \n                    stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                    tick={{ fill: isDarkMode ? '#9ca3af' : '#6b7280' }}\n                    tickFormatter={(value) => new Date(value).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n                  />\n                  <YAxis \n                    stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                    tick={{ fill: isDarkMode ? '#9ca3af' : '#6b7280' }}\n                  />\n                  <Tooltip \n                    contentStyle={{\n                      backgroundColor: isDarkMode ? '#1f2937' : '#ffffff',\n                      border: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\n                      borderRadius: '6px',\n                      color: isDarkMode ? '#ffffff' : '#000000'\n                    }}\n                    labelFormatter={(value) => new Date(value).toLocaleDateString('en-US', { month: 'long', day: 'numeric', year: 'numeric' })}\n                  />\n                  <Legend \n                    wrapperStyle={{\n                      color: isDarkMode ? '#9ca3af' : '#6b7280'\n                    }}\n                  />\n                  <Line \n                    type=\"monotone\" \n                    dataKey=\"revenue\" \n                    stroke=\"#3b82f6\" \n                    strokeWidth={2}\n                    dot={{ fill: '#3b82f6', r: 4 }}\n                    activeDot={{ r: 6 }}\n                    name=\"Revenue ($)\"\n                  />\n                  <Line \n                    type=\"monotone\" \n                    dataKey=\"users\" \n                    stroke=\"#10b981\" \n                    strokeWidth={2}\n                    dot={{ fill: '#10b981', r: 4 }}\n                    activeDot={{ r: 6 }}\n                    name=\"Users\"\n                  />\n                  <Line \n                    type=\"monotone\" \n                    dataKey=\"orders\" \n                    stroke=\"#f59e0b\" \n                    strokeWidth={2}\n                    dot={{ fill: '#f59e0b', r: 4 }}\n                    activeDot={{ r: 6 }}\n                    name=\"Orders\"\n                  />\n                </LineChart>\n              </ResponsiveContainer>\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Distribution</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Sales by category\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <ResponsiveContainer width=\"100%\" height={300}>\n                <PieChart>\n                  <Pie\n                    data={mockCategoryData}\n                    cx=\"50%\"\n                    cy=\"50%\"\n                    innerRadius={60}\n                    outerRadius={90}\n                    paddingAngle={2}\n                    dataKey=\"value\"\n                    label={({ name, percent }) => `${name} ${(percent * 100).toFixed(0)}%`}\n                    labelLine={false}\n                  >\n                    {mockCategoryData.map((entry, index) => (\n                      <Cell key={`cell-${index}`} fill={entry.color} />\n                    ))}\n                  </Pie>\n                  <Tooltip\n                    formatter={(value: number) => `$${value.toLocaleString()}`}\n                    contentStyle={{\n                      backgroundColor: isDarkMode ? '#1f2937' : '#ffffff',\n                      border: isDarkMode ? '1px solid #374151' : '1px solid #e5e7eb',\n                      borderRadius: '8px',\n                      color: isDarkMode ? '#ffffff' : '#000000'\n                    }}\n                  />\n                  <Legend\n                    verticalAlign=\"bottom\"\n                    height={36}\n                    formatter={(value) => (\n                      <span className={isDarkMode ? 'text-gray-300' : 'text-gray-700'}>\n                        {value}\n                      </span>\n                    )}\n                  />\n                </PieChart>\n              </ResponsiveContainer>\n            </CardContent>\n          </Card>\n        </div>\n\n        <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n          <CardHeader>\n            <CardTitle className={isDarkMode ? 'text-white' : ''}>Top Products</CardTitle>\n            <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n              Best performing products by revenue\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <DataTable \n              data={tableData} \n              isDarkMode={isDarkMode}\n            />\n          </CardContent>\n        </Card>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 md:gap-6 mt-8\">\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Recent Activity</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Latest system events\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4 max-h-[400px] overflow-y-auto pr-2\">\n                {mockActivityData.map((activity) => {\n                  const iconMap = {\n                    check: CheckCircle,\n                    alert: AlertCircle,\n                    user: UserPlus,\n                    package: Package\n                  };\n                  \n                  const colorMap = {\n                    success: isDarkMode ? 'text-green-400' : 'text-green-600',\n                    warning: isDarkMode ? 'text-yellow-400' : 'text-yellow-600',\n                    info: isDarkMode ? 'text-blue-400' : 'text-blue-600',\n                    error: isDarkMode ? 'text-red-400' : 'text-red-600'\n                  };\n                  \n                  const bgMap = {\n                    success: isDarkMode ? 'bg-green-900/20' : 'bg-green-50',\n                    warning: isDarkMode ? 'bg-yellow-900/20' : 'bg-yellow-50',\n                    info: isDarkMode ? 'bg-blue-900/20' : 'bg-blue-50',\n                    error: isDarkMode ? 'bg-red-900/20' : 'bg-red-50'\n                  };\n                  \n                  const Icon = iconMap[activity.icon];\n                  \n                  return (\n                    <div\n                      key={activity.id}\n                      className={`flex items-start gap-3 p-3 rounded-lg transition-colors ${bgMap[activity.type]}`}\n                    >\n                      <div className={`mt-0.5 ${colorMap[activity.type]}`}>\n                        <Icon className=\"h-5 w-5\" />\n                      </div>\n                      <div className=\"flex-1 min-w-0\">\n                        <p className={`text-sm font-medium ${isDarkMode ? 'text-gray-200' : 'text-gray-900'}`}>\n                          {activity.message}\n                        </p>\n                        <p className={`text-xs mt-1 ${isDarkMode ? 'text-gray-500' : 'text-gray-500'}`}>\n                          {activity.timestamp}\n                        </p>\n                      </div>\n                    </div>\n                  );\n                })}\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Quick Stats</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Summary statistics\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4\">\n                <div className={`p-4 rounded-lg border ${isDarkMode ? 'bg-gray-700 border-gray-600' : 'bg-white border-gray-200'}`}>\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <span className={`text-sm font-medium ${isDarkMode ? 'text-gray-300' : 'text-gray-600'}`}>\n                      Goal Completion\n                    </span>\n                    <Target className={`h-4 w-4 ${isDarkMode ? 'text-blue-400' : 'text-blue-600'}`} />\n                  </div>\n                  <div className={`text-2xl font-bold mb-2 ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                    78%\n                  </div>\n                  <Progress value={78} className=\"h-2\" />\n                </div>\n\n                <div className={`p-4 rounded-lg border ${isDarkMode ? 'bg-gray-700 border-gray-600' : 'bg-white border-gray-200'}`}>\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <span className={`text-sm font-medium ${isDarkMode ? 'text-gray-300' : 'text-gray-600'}`}>\n                      Customer Satisfaction\n                    </span>\n                    <Users className={`h-4 w-4 ${isDarkMode ? 'text-green-400' : 'text-green-600'}`} />\n                  </div>\n                  <div className={`text-2xl font-bold mb-2 ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                    92%\n                  </div>\n                  <Progress value={92} className=\"h-2\" />\n                </div>\n\n                <div className={`p-4 rounded-lg border ${isDarkMode ? 'bg-gray-700 border-gray-600' : 'bg-white border-gray-200'}`}>\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <span className={`text-sm font-medium ${isDarkMode ? 'text-gray-300' : 'text-gray-600'}`}>\n                      Order Fulfillment\n                    </span>\n                    <ShoppingCart className={`h-4 w-4 ${isDarkMode ? 'text-purple-400' : 'text-purple-600'}`} />\n                  </div>\n                  <div className={`text-2xl font-bold mb-2 ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                    85%\n                  </div>\n                  <Progress value={85} className=\"h-2\" />\n                </div>\n\n                <div className={`p-4 rounded-lg border ${isDarkMode ? 'bg-gray-700 border-gray-600' : 'bg-white border-gray-200'}`}>\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <span className={`text-sm font-medium ${isDarkMode ? 'text-gray-300' : 'text-gray-600'}`}>\n                      Revenue Target\n                    </span>\n                    <DollarSign className={`h-4 w-4 ${isDarkMode ? 'text-yellow-400' : 'text-yellow-600'}`} />\n                  </div>\n                  <div className={`text-2xl font-bold mb-2 ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                    67%\n                  </div>\n                  <Progress value={67} className=\"h-2\" />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}",
  "error": null,
  "overall_score": 49,
  "code_quality_score": 14,
  "architecture_score": 11,
  "performance_score": 8,
  "accessibility_score": 16,
  "metadata": {
    "document_id": "eval_room_b2da12eb57cd",
    "prompt_category": "intermediate",
    "prompt_complexity": 6.0
  },
  "raw_response": {
    "document_id": "eval_room_b2da12eb57cd",
    "mode": "parallel",
    "prompt": "Generate an analytics dashboard page with charts, data tables, real-time updates, dark mode, and responsive design",
    "content": "import { useState, useCallback } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\nimport { Badge } from '@/components/ui/badge';\nimport { Button } from '@/components/ui/button';\nimport { Moon, Sun, RefreshCw } from 'lucide-react';\nimport { ArrowUpDown, ChevronLeft, ChevronRight } from 'lucide-react';\nimport { TrendingUp, TrendingDown, DollarSign, Users, ShoppingCart, Target, CheckCircle, AlertCircle, UserPlus, Package } from 'lucide-react';\n\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, Legend } from 'recharts';\nimport { PieChart, Pie, Cell, ResponsiveContainer, Legend, Tooltip } from 'recharts';\nimport { motion } from 'framer-motion';\nimport { TrendingUp, Users } from 'lucide-react';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';\n\nimport { Progress } from '@/components/ui/progress';\nimport { TrendingUp, TrendingDown, DollarSign, Users, ShoppingCart, Target } from 'lucide-react';interface CategoryData {\n  name: string;\n  value: number;\n  color: string;\n}\n\n\ninterface MetricData {\n  id: string;\n  label: string;\n  value: number;\n  change: number;\n  trend: 'up' | 'down';\n}\n\ninterface ChartDataPoint {\n  date: string;\n  revenue: number;\n  users: number;\n  orders: number;\n}\n\ninterface TableRow {\n  id: string;\n  product: string;\n  sales: number;\n  revenue: number;\n  status: 'active' | 'pending' | 'inactive';\n}\n\nconst mockCategoryData: CategoryData[] = [\n  { name: 'Premium', value: 23400, color: '#3b82f6' },\n  { name: 'Basic', value: 11340, color: '#10b981' },\n  { name: 'Enterprise', value: 17800, color: '#8b5cf6' },\n  { name: 'Starter', value: 4320, color: '#f59e0b' },\n  { name: 'Pro', value: 15600, color: '#ec4899' }\n];\n\nconst mockMetrics: MetricData[] = [\n  { id: '1', label: 'Total Revenue', value: 45231, change: 12.5, trend: 'up' },\n  { id: '2', label: 'Active Users', value: 2350, change: 8.2, trend: 'up' },\n  { id: '3', label: 'Total Orders', value: 1543, change: -3.1, trend: 'down' },\n  { id: '4', label: 'Conversion Rate', value: 3.24, change: 5.7, trend: 'up' }\n];\n\nconst mockChartData: ChartDataPoint[] = [\n  { date: '2024-01-01', revenue: 12000, users: 450, orders: 230 },\n  { date: '2024-01-02', revenue: 15000, users: 520, orders: 280 },\n  { date: '2024-01-03', revenue: 13500, users: 490, orders: 250 },\n  { date: '2024-01-04', revenue: 18000, users: 610, orders: 320 },\n  { date: '2024-01-05', revenue: 16500, users: 580, orders: 295 },\n  { date: '2024-01-06', revenue: 20000, users: 680, orders: 350 },\n  { date: '2024-01-07', revenue: 22000, users: 720, orders: 380 }\n];\n\nconst mockTableData: TableRow[] = [\n  { id: '1', product: 'Premium Plan', sales: 234, revenue: 23400, status: 'active' },\n  { id: '2', product: 'Basic Plan', sales: 567, revenue: 11340, status: 'active' },\n  { id: '3', product: 'Enterprise Plan', sales: 89, revenue: 17800, status: 'active' },\n  { id: '4', product: 'Starter Plan', sales: 432, revenue: 4320, status: 'pending' },\n  { id: '5', product: 'Pro Plan', sales: 156, revenue: 15600, status: 'active' }\n];\ninterface ActivityItem {\n  id: string;\n  type: 'success' | 'warning' | 'info' | 'error';\n  message: string;\n  timestamp: string;\n  icon: 'check' | 'alert' | 'user' | 'package';\n}\n\nconst mockActivityData: ActivityItem[] = [\n  { id: '1', type: 'success', message: 'New order #1234 completed', timestamp: '2 minutes ago', icon: 'check' },\n  { id: '2', type: 'info', message: 'User John Doe registered', timestamp: '15 minutes ago', icon: 'user' },\n  { id: '3', type: 'success', message: 'Payment received $450', timestamp: '32 minutes ago', icon: 'check' },\n  { id: '4', type: 'warning', message: 'Low stock alert for Product A', timestamp: '1 hour ago', icon: 'alert' },\n  { id: '5', type: 'info', message: 'New shipment dispatched', timestamp: '2 hours ago', icon: 'package' },\n  { id: '6', type: 'success', message: 'Order #1230 delivered', timestamp: '3 hours ago', icon: 'check' },\n  { id: '7', type: 'info', message: 'User Jane Smith registered', timestamp: '4 hours ago', icon: 'user' },\n  { id: '8', type: 'success', message: 'Payment received $890', timestamp: '5 hours ago', icon: 'check' }\n];\n\nconst UserAreaChart = ({ data, isDarkMode }: { data: ChartDataPoint[], isDarkMode: boolean }) => {\n  const maxUsers = Math.max(...data.map(d => d.users));\n  const minUsers = Math.min(...data.map(d => d.users));\n  const range = maxUsers - minUsers;\n  \n  const points = data.map((point, index) => {\n    const x = (index / (data.length - 1)) * 100;\n    const y = 100 - ((point.users - minUsers) / range) * 100;\n    return `${x},${y}`;\n  }).join(' ');\n  \n  const areaPath = `0,100 ${points} 100,100`;\n  const linePath = points;\n  \n  return (\n    <div className=\"relative w-full h-64\">\n      <svg viewBox=\"0 0 100 100\" className=\"w-full h-full\" preserveAspectRatio=\"none\">\n        <defs>\n          <linearGradient id=\"userGradient\" x1=\"0%\" y1=\"0%\" x2=\"0%\" y2=\"100%\">\n            <stop offset=\"0%\" stopColor=\"#3b82f6\" stopOpacity=\"0.4\" />\n            <stop offset=\"100%\" stopColor=\"#3b82f6\" stopOpacity=\"0.05\" />\n          </linearGradient>\n        </defs>\n        \n        <motion.polygon\n          points={areaPath}\n          fill=\"url(#userGradient)\"\n          initial={{ opacity: 0 }}\n          animate={{ opacity: 1 }}\n          transition={{ duration: 0.8 }}\n        />\n        \n        <motion.polyline\n          points={linePath}\n          fill=\"none\"\n          stroke=\"#3b82f6\"\n          strokeWidth=\"0.5\"\n          initial={{ pathLength: 0 }}\n          animate={{ pathLength: 1 }}\n          transition={{ duration: 1.5, ease: \"easeInOut\" }}\n        />\n        \n        {data.map((point, index) => {\n          const x = (index / (data.length - 1)) * 100;\n          const y = 100 - ((point.users - minUsers) / range) * 100;\n          return (\n            <motion.circle\n              key={index}\n              cx={x}\n              cy={y}\n              r=\"1\"\n              fill=\"#3b82f6\"\n              initial={{ scale: 0 }}\n              animate={{ scale: 1 }}\n              transition={{ duration: 0.3, delay: index * 0.1 }}\n              className=\"cursor-pointer hover:r-2\"\n            />\n          );\n        })}\n      </svg>\n      \n      <div className=\"absolute bottom-0 left-0 right-0 flex justify-between px-2 text-xs\">\n        {data.map((point, index) => (\n          index % 2 === 0 && (\n            <span key={index} className={isDarkMode ? 'text-gray-400' : 'text-gray-600'}>\n              {new Date(point.date).getDate()}/{new Date(point.date).getMonth() + 1}\n            </span>\n          )\n        ))}\n      </div>\n      \n      <div className=\"absolute top-0 left-0 right-0 flex justify-between items-start mt-2 px-2\">\n        <div className={`text-xs ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n          Max: {maxUsers}\n        </div>\n        <div className={`text-xs ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n          Min: {minUsers}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default function AnalyticsDashboard() {\n  const [isDarkMode, setIsDarkMode] = useState(false);\n  const [metrics, setMetrics] = useState<MetricData[]>(mockMetrics);\n  const [chartData, setChartData] = useState<ChartDataPoint[]>(mockChartData);\n  const [tableData, setTableData] = useState<TableRow[]>(mockTableData);\n  const [isRefreshing, setIsRefreshing] = useState(false);\n\n  const toggleDarkMode = useCallback(() => {\n    setIsDarkMode(prev => !prev);\n  }, []);\n\ninterface DataTableProps {\n  data: TableRow[];\n  isDarkMode: boolean;\n}\n\ntype SortField = 'product' | 'sales' | 'revenue' | 'status';\ntype SortDirection = 'asc' | 'desc';\n\nfunction DataTable({ data, isDarkMode }: DataTableProps) {\n  const [sortField, setSortField] = useState<SortField>('revenue');\n  const [sortDirection, setSortDirection] = useState<SortDirection>('desc');\n  const [currentPage, setCurrentPage] = useState(1);\n  const itemsPerPage = 5;\n\n  const handleSort = (field: SortField) => {\n    if (sortField === field) {\n      setSortDirection(sortDirection === 'asc' ? 'desc' : 'asc');\n    } else {\n      setSortField(field);\n      setSortDirection('desc');\n    }\n  };\n\n  const sortedData = [...data].sort((a, b) => {\n    let aValue = a[sortField];\n    let bValue = b[sortField];\n\n    if (typeof aValue === 'string') {\n      aValue = aValue.toLowerCase();\n      bValue = (bValue as string).toLowerCase();\n    }\n\n    if (aValue < bValue) return sortDirection === 'asc' ? -1 : 1;\n    if (aValue > bValue) return sortDirection === 'asc' ? 1 : -1;\n    return 0;\n  });\n\n  const totalPages = Math.ceil(sortedData.length / itemsPerPage);\n  const startIndex = (currentPage - 1) * itemsPerPage;\n  const paginatedData = sortedData.slice(startIndex, startIndex + itemsPerPage);\n\n  const getStatusBadgeVariant = (status: string) => {\n    switch (status) {\n      case 'active':\n        return 'default';\n      case 'pending':\n        return 'secondary';\n      case 'inactive':\n        return 'outline';\n      default:\n        return 'default';\n    }\n  };\n\n  return (\n    <div className=\"space-y-4\">\n      <div className=\"rounded-md border\" style={{ borderColor: isDarkMode ? '#374151' : undefined }}>\n        <Table>\n          <TableHeader>\n            <TableRow className={isDarkMode ? 'border-gray-700 hover:bg-gray-700/50' : ''}>\n              <TableHead className={isDarkMode ? 'text-gray-300' : ''}>\n                <Button\n                  variant=\"ghost\"\n                  onClick={() => handleSort('product')}\n                  className={`flex items-center gap-1 ${isDarkMode ? 'hover:bg-gray-700' : ''}`}\n                >\n                  Product\n                  <ArrowUpDown className=\"h-4 w-4\" />\n                </Button>\n              </TableHead>\n              <TableHead className={isDarkMode ? 'text-gray-300' : ''}>\n                <Button\n                  variant=\"ghost\"\n                  onClick={() => handleSort('sales')}\n                  className={`flex items-center gap-1 ${isDarkMode ? 'hover:bg-gray-700' : ''}`}\n                >\n                  Sales\n                  <ArrowUpDown className=\"h-4 w-4\" />\n                </Button>\n              </TableHead>\n              <TableHead className={isDarkMode ? 'text-gray-300' : ''}>\n                <Button\n                  variant=\"ghost\"\n                  onClick={() => handleSort('revenue')}\n                  className={`flex items-center gap-1 ${isDarkMode ? 'hover:bg-gray-700' : ''}`}\n                >\n                  Revenue\n                  <ArrowUpDown className=\"h-4 w-4\" />\n                </Button>\n              </TableHead>\n              <TableHead className={isDarkMode ? 'text-gray-300' : ''}>\n                <Button\n                  variant=\"ghost\"\n                  onClick={() => handleSort('status')}\n                  className={`flex items-center gap-1 ${isDarkMode ? 'hover:bg-gray-700' : ''}`}\n                >\n                  Status\n                  <ArrowUpDown className=\"h-4 w-4\" />\n                </Button>\n              </TableHead>\n            </TableRow>\n          </TableHeader>\n          <TableBody>\n            {paginatedData.map((row) => (\n              <TableRow \n                key={row.id}\n                className={isDarkMode ? 'border-gray-700 hover:bg-gray-700/50' : ''}\n              >\n                <TableCell className={`font-medium ${isDarkMode ? 'text-gray-200' : ''}`}>\n                  {row.product}\n                </TableCell>\n                <TableCell className={isDarkMode ? 'text-gray-300' : ''}>\n                  {row.sales.toLocaleString()}\n                </TableCell>\n                <TableCell className={isDarkMode ? 'text-gray-300' : ''}>\n                  ${row.revenue.toLocaleString()}\n                </TableCell>\n                <TableCell>\n                  <Badge \n                    variant={getStatusBadgeVariant(row.status)}\n                    className={\n                      row.status === 'active' \n                        ? 'bg-green-500 hover:bg-green-600' \n                        : row.status === 'pending'\n                        ? isDarkMode ? 'bg-yellow-600 hover:bg-yellow-700' : 'bg-yellow-500 hover:bg-yellow-600'\n                        : ''\n                    }\n                  >\n                    {row.status.charAt(0).toUpperCase() + row.status.slice(1)}\n                  </Badge>\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </div>\n\n      <div className=\"flex items-center justify-between\">\n        <p className={`text-sm ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n          Showing {startIndex + 1} to {Math.min(startIndex + itemsPerPage, sortedData.length)} of {sortedData.length} products\n        </p>\n        \n        <div className=\"flex items-center gap-2\">\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={() => setCurrentPage(prev => Math.max(1, prev - 1))}\n            disabled={currentPage === 1}\n            className={isDarkMode ? 'border-gray-700' : ''}\n          >\n            <ChevronLeft className=\"h-4 w-4\" />\n            Previous\n          </Button>\n          \n          <div className={`flex items-center gap-1 ${isDarkMode ? 'text-gray-300' : ''}`}>\n            <span className=\"text-sm\">\n              Page {currentPage} of {totalPages}\n            </span>\n          </div>\n          \n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={() => setCurrentPage(prev => Math.min(totalPages, prev + 1))}\n            disabled={currentPage === totalPages}\n            className={isDarkMode ? 'border-gray-700' : ''}\n          >\n            Next\n            <ChevronRight className=\"h-4 w-4\" />\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\n  const CustomTooltip = ({ active, payload, label }: any) => {\n    if (active && payload && payload.length) {\n      return (\n        <div className={`p-3 rounded-lg shadow-lg border ${isDarkMode ? 'bg-gray-800 border-gray-700' : 'bg-white border-gray-200'}`}>\n          <p className={`font-semibold mb-2 ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n            {new Date(label).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n          </p>\n          {payload.map((entry: any, index: number) => (\n            <p key={index} className={`text-sm ${isDarkMode ? 'text-gray-300' : 'text-gray-600'}`}>\n              <span style={{ color: entry.color }}>\u25cf</span> Revenue: ${entry.value.toLocaleString()}\n            </p>\n          ))}\n        </div>\n      );\n    }\n    return null;\n  };\n\n  const handleRefresh = useCallback(() => {\n    setIsRefreshing(true);\n    \n    setTimeout(() => {\n      // Generate updated metrics with random variations\n      const updatedMetrics = mockMetrics.map(metric => ({\n        ...metric,\n        value: metric.value + Math.floor(Math.random() * 200 - 100),\n        change: parseFloat((Math.random() * 20 - 5).toFixed(1)),\n        trend: Math.random() > 0.5 ? 'up' as const : 'down' as const\n      }));\n      \n      // Generate updated chart data with random variations\n      const updatedChartData = mockChartData.map(point => ({\n        ...point,\n        revenue: point.revenue + Math.floor(Math.random() * 4000 - 2000),\n        users: point.users + Math.floor(Math.random() * 100 - 50),\n        orders: point.orders + Math.floor(Math.random() * 50 - 25)\n      }));\n      \n      // Generate updated table data with random variations\n      const updatedTableData = mockTableData.map(row => ({\n        ...row,\n        sales: row.sales + Math.floor(Math.random() * 40 - 20),\n        revenue: row.revenue + Math.floor(Math.random() * 2000 - 1000)\n      }));\n      \n      setMetrics(updatedMetrics);\n      setChartData(updatedChartData);\n      setTableData(updatedTableData);\n      setIsRefreshing(false);\n    }, 1500);\n  }, []);\n\n  return (\n    <div className={`min-h-screen transition-colors duration-300 ${isDarkMode ? 'dark bg-gray-900' : 'bg-gray-50'}`}>\n      <div className=\"container mx-auto p-4 md:p-6 lg:p-8\">\n        <div className=\"flex flex-col md:flex-row justify-between items-start md:items-center gap-4 mb-8\">\n          <div>\n            <h1 className={`text-3xl md:text-4xl font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n              Analytics Dashboard\n            </h1>\n            <p className={`mt-2 ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n              Real-time insights and performance metrics\n            </p>\n          </div>\n          \n          <div className=\"flex gap-2\">\n            <Button\n              variant=\"outline\"\n              size=\"icon\"\n              onClick={toggleDarkMode}\n              className={isDarkMode ? 'border-gray-700' : ''}\n            >\n              {isDarkMode ? <Sun className=\"h-5 w-5\" /> : <Moon className=\"h-5 w-5\" />}\n            </Button>\n            \n            <Button\n              variant=\"outline\"\n              onClick={handleRefresh}\n              disabled={isRefreshing}\n              className={isDarkMode ? 'border-gray-700' : ''}\n            >\n              <RefreshCw className={`h-4 w-4 mr-2 ${isRefreshing ? 'animate-spin' : ''}`} />\n              Refresh\n            </Button>\n          </div>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 md:gap-6 mb-8\">\n          {metrics.map((metric) => {\n            const Icon = metric.label.includes('Revenue') ? DollarSign :\n                        metric.label.includes('Users') ? Users :\n                        metric.label.includes('Orders') ? ShoppingCart :\n                        Target;\n            \n            const TrendIcon = metric.trend === 'up' ? TrendingUp : TrendingDown;\n            const trendColor = metric.trend === 'up' ? 'text-green-500' : 'text-red-500';\n            const trendBgColor = metric.trend === 'up' ? 'bg-green-50 dark:bg-green-900/20' : 'bg-red-50 dark:bg-red-900/20';\n\n            return (\n              <Card \n                key={metric.id} \n                className={`transition-all duration-300 hover:shadow-lg hover:-translate-y-1 ${\n                  isDarkMode ? 'bg-gray-800 border-gray-700' : 'bg-white'\n                }`}\n              >\n                <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                  <CardTitle className={`text-sm font-medium ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                    {metric.label}\n                  </CardTitle>\n                  <div className={`p-2 rounded-lg ${isDarkMode ? 'bg-gray-700' : 'bg-gray-100'}`}>\n                    <Icon className={`h-4 w-4 ${isDarkMode ? 'text-gray-300' : 'text-gray-600'}`} />\n                  </div>\n                </CardHeader>\n                <CardContent>\n                  <div className={`text-2xl font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                    {metric.label.includes('Rate') ? `${metric.value}%` : \n                     metric.label.includes('Revenue') ? `$${metric.value.toLocaleString()}` :\n                     metric.value.toLocaleString()}\n                  </div>\n                  <div className=\"flex items-center mt-2\">\n                    <div className={`flex items-center gap-1 px-2 py-1 rounded-full ${trendBgColor}`}>\n                      <TrendIcon className={`h-3 w-3 ${trendColor}`} />\n                      <span className={`text-xs font-medium ${trendColor}`}>\n                        {Math.abs(metric.change)}%\n                      </span>\n                    </div>\n                    <span className={`text-xs ml-2 ${isDarkMode ? 'text-gray-400' : 'text-gray-500'}`}>\n                      vs last period\n                    </span>\n                  </div>\n                </CardContent>\n              </Card>\n            );\n          })}\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-4 md:gap-6 mb-8\">\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Revenue Overview</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Daily revenue trends\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"h-[300px] w-full\">\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <LineChart\n                    data={chartData}\n                    margin={{ top: 5, right: 10, left: 0, bottom: 5 }}\n                  >\n                    <CartesianGrid \n                      strokeDasharray=\"3 3\" \n                      stroke={isDarkMode ? '#374151' : '#e5e7eb'}\n                    />\n                    <XAxis \n                      dataKey=\"date\" \n                      stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                      tick={{ fill: isDarkMode ? '#9ca3af' : '#6b7280', fontSize: 12 }}\n                      tickFormatter={(value) => new Date(value).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n                    />\n                    <YAxis \n                      stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                      tick={{ fill: isDarkMode ? '#9ca3af' : '#6b7280', fontSize: 12 }}\n                      tickFormatter={(value) => `$${(value / 1000).toFixed(0)}k`}\n                    />\n                    <Tooltip content={<CustomTooltip />} />\n                    <Line \n                      type=\"monotone\" \n                      dataKey=\"revenue\" \n                      stroke=\"#3b82f6\" \n                      strokeWidth={2}\n                      dot={{ fill: '#3b82f6', r: 4 }}\n                      activeDot={{ r: 6, fill: '#3b82f6' }}\n                    />\n                  </LineChart>\n                </ResponsiveContainer>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>User Activity</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Active users over time\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <UserAreaChart data={chartData} isDarkMode={isDarkMode} />\n            </CardContent>\n          </Card>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-4 md:gap-6 mb-8\">\n          <Card className={`lg:col-span-2 ${isDarkMode ? 'bg-gray-800 border-gray-700' : ''}`}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Performance Metrics</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Combined view of key metrics\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <ResponsiveContainer width=\"100%\" height={300}>\n                <LineChart data={chartData}>\n                  <CartesianGrid \n                    strokeDasharray=\"3 3\" \n                    stroke={isDarkMode ? '#374151' : '#e5e7eb'} \n                  />\n                  <XAxis \n                    dataKey=\"date\" \n                    stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                    tick={{ fill: isDarkMode ? '#9ca3af' : '#6b7280' }}\n                    tickFormatter={(value) => new Date(value).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n                  />\n                  <YAxis \n                    stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                    tick={{ fill: isDarkMode ? '#9ca3af' : '#6b7280' }}\n                  />\n                  <Tooltip \n                    contentStyle={{\n                      backgroundColor: isDarkMode ? '#1f2937' : '#ffffff',\n                      border: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\n                      borderRadius: '6px',\n                      color: isDarkMode ? '#ffffff' : '#000000'\n                    }}\n                    labelFormatter={(value) => new Date(value).toLocaleDateString('en-US', { month: 'long', day: 'numeric', year: 'numeric' })}\n                  />\n                  <Legend \n                    wrapperStyle={{\n                      color: isDarkMode ? '#9ca3af' : '#6b7280'\n                    }}\n                  />\n                  <Line \n                    type=\"monotone\" \n                    dataKey=\"revenue\" \n                    stroke=\"#3b82f6\" \n                    strokeWidth={2}\n                    dot={{ fill: '#3b82f6', r: 4 }}\n                    activeDot={{ r: 6 }}\n                    name=\"Revenue ($)\"\n                  />\n                  <Line \n                    type=\"monotone\" \n                    dataKey=\"users\" \n                    stroke=\"#10b981\" \n                    strokeWidth={2}\n                    dot={{ fill: '#10b981', r: 4 }}\n                    activeDot={{ r: 6 }}\n                    name=\"Users\"\n                  />\n                  <Line \n                    type=\"monotone\" \n                    dataKey=\"orders\" \n                    stroke=\"#f59e0b\" \n                    strokeWidth={2}\n                    dot={{ fill: '#f59e0b', r: 4 }}\n                    activeDot={{ r: 6 }}\n                    name=\"Orders\"\n                  />\n                </LineChart>\n              </ResponsiveContainer>\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Distribution</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Sales by category\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <ResponsiveContainer width=\"100%\" height={300}>\n                <PieChart>\n                  <Pie\n                    data={mockCategoryData}\n                    cx=\"50%\"\n                    cy=\"50%\"\n                    innerRadius={60}\n                    outerRadius={90}\n                    paddingAngle={2}\n                    dataKey=\"value\"\n                    label={({ name, percent }) => `${name} ${(percent * 100).toFixed(0)}%`}\n                    labelLine={false}\n                  >\n                    {mockCategoryData.map((entry, index) => (\n                      <Cell key={`cell-${index}`} fill={entry.color} />\n                    ))}\n                  </Pie>\n                  <Tooltip\n                    formatter={(value: number) => `$${value.toLocaleString()}`}\n                    contentStyle={{\n                      backgroundColor: isDarkMode ? '#1f2937' : '#ffffff',\n                      border: isDarkMode ? '1px solid #374151' : '1px solid #e5e7eb',\n                      borderRadius: '8px',\n                      color: isDarkMode ? '#ffffff' : '#000000'\n                    }}\n                  />\n                  <Legend\n                    verticalAlign=\"bottom\"\n                    height={36}\n                    formatter={(value) => (\n                      <span className={isDarkMode ? 'text-gray-300' : 'text-gray-700'}>\n                        {value}\n                      </span>\n                    )}\n                  />\n                </PieChart>\n              </ResponsiveContainer>\n            </CardContent>\n          </Card>\n        </div>\n\n        <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n          <CardHeader>\n            <CardTitle className={isDarkMode ? 'text-white' : ''}>Top Products</CardTitle>\n            <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n              Best performing products by revenue\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <DataTable \n              data={tableData} \n              isDarkMode={isDarkMode}\n            />\n          </CardContent>\n        </Card>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 md:gap-6 mt-8\">\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Recent Activity</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Latest system events\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4 max-h-[400px] overflow-y-auto pr-2\">\n                {mockActivityData.map((activity) => {\n                  const iconMap = {\n                    check: CheckCircle,\n                    alert: AlertCircle,\n                    user: UserPlus,\n                    package: Package\n                  };\n                  \n                  const colorMap = {\n                    success: isDarkMode ? 'text-green-400' : 'text-green-600',\n                    warning: isDarkMode ? 'text-yellow-400' : 'text-yellow-600',\n                    info: isDarkMode ? 'text-blue-400' : 'text-blue-600',\n                    error: isDarkMode ? 'text-red-400' : 'text-red-600'\n                  };\n                  \n                  const bgMap = {\n                    success: isDarkMode ? 'bg-green-900/20' : 'bg-green-50',\n                    warning: isDarkMode ? 'bg-yellow-900/20' : 'bg-yellow-50',\n                    info: isDarkMode ? 'bg-blue-900/20' : 'bg-blue-50',\n                    error: isDarkMode ? 'bg-red-900/20' : 'bg-red-50'\n                  };\n                  \n                  const Icon = iconMap[activity.icon];\n                  \n                  return (\n                    <div\n                      key={activity.id}\n                      className={`flex items-start gap-3 p-3 rounded-lg transition-colors ${bgMap[activity.type]}`}\n                    >\n                      <div className={`mt-0.5 ${colorMap[activity.type]}`}>\n                        <Icon className=\"h-5 w-5\" />\n                      </div>\n                      <div className=\"flex-1 min-w-0\">\n                        <p className={`text-sm font-medium ${isDarkMode ? 'text-gray-200' : 'text-gray-900'}`}>\n                          {activity.message}\n                        </p>\n                        <p className={`text-xs mt-1 ${isDarkMode ? 'text-gray-500' : 'text-gray-500'}`}>\n                          {activity.timestamp}\n                        </p>\n                      </div>\n                    </div>\n                  );\n                })}\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Quick Stats</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Summary statistics\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4\">\n                <div className={`p-4 rounded-lg border ${isDarkMode ? 'bg-gray-700 border-gray-600' : 'bg-white border-gray-200'}`}>\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <span className={`text-sm font-medium ${isDarkMode ? 'text-gray-300' : 'text-gray-600'}`}>\n                      Goal Completion\n                    </span>\n                    <Target className={`h-4 w-4 ${isDarkMode ? 'text-blue-400' : 'text-blue-600'}`} />\n                  </div>\n                  <div className={`text-2xl font-bold mb-2 ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                    78%\n                  </div>\n                  <Progress value={78} className=\"h-2\" />\n                </div>\n\n                <div className={`p-4 rounded-lg border ${isDarkMode ? 'bg-gray-700 border-gray-600' : 'bg-white border-gray-200'}`}>\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <span className={`text-sm font-medium ${isDarkMode ? 'text-gray-300' : 'text-gray-600'}`}>\n                      Customer Satisfaction\n                    </span>\n                    <Users className={`h-4 w-4 ${isDarkMode ? 'text-green-400' : 'text-green-600'}`} />\n                  </div>\n                  <div className={`text-2xl font-bold mb-2 ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                    92%\n                  </div>\n                  <Progress value={92} className=\"h-2\" />\n                </div>\n\n                <div className={`p-4 rounded-lg border ${isDarkMode ? 'bg-gray-700 border-gray-600' : 'bg-white border-gray-200'}`}>\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <span className={`text-sm font-medium ${isDarkMode ? 'text-gray-300' : 'text-gray-600'}`}>\n                      Order Fulfillment\n                    </span>\n                    <ShoppingCart className={`h-4 w-4 ${isDarkMode ? 'text-purple-400' : 'text-purple-600'}`} />\n                  </div>\n                  <div className={`text-2xl font-bold mb-2 ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                    85%\n                  </div>\n                  <Progress value={85} className=\"h-2\" />\n                </div>\n\n                <div className={`p-4 rounded-lg border ${isDarkMode ? 'bg-gray-700 border-gray-600' : 'bg-white border-gray-200'}`}>\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <span className={`text-sm font-medium ${isDarkMode ? 'text-gray-300' : 'text-gray-600'}`}>\n                      Revenue Target\n                    </span>\n                    <DollarSign className={`h-4 w-4 ${isDarkMode ? 'text-yellow-400' : 'text-yellow-600'}`} />\n                  </div>\n                  <div className={`text-2xl font-bold mb-2 ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                    67%\n                  </div>\n                  <Progress value={67} className=\"h-2\" />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}",
    "error": null,
    "elapsed_time": 74.34766364097595,
    "success": true
  }
}