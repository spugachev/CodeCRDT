{
  "prompt_id": "dashboard",
  "prompt_name": "Analytics Dashboard",
  "mode": "parallel",
  "run_number": 18,
  "timestamp": "2025-10-14T02:36:19.688041",
  "response_time": 69.33697652816772,
  "total_tokens": null,
  "response_content": "import { useState, useCallback } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Moon, Sun, RefreshCw } from 'lucide-react';\n\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\nimport { PieChart, Pie, Cell, ResponsiveContainer, Legend, Tooltip } from 'recharts';\nimport { motion } from 'framer-motion';\nimport { AreaChart, Area, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';\nimport { TrendingUp } from 'lucide-react';\nimport { TrendingUp, TrendingDown, DollarSign, Users, ShoppingCart, Target } from 'lucide-react';\nimport { Badge } from '@/components/ui/badge';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\nimport { ArrowUpDown, ChevronLeft, ChevronRight } from 'lucide-react';\n\ninterface MetricData {\n  id: string;\n  label: string;\n  value: number;\n  change: number;\n  trend: 'up' | 'down';\n}\n\ninterface ChartDataPoint {\n  date: string;\n  revenue: number;\n  users: number;\n  orders: number;\n}\n\ninterface TableRow {\n  id: string;\n  product: string;\n  sales: number;\n  revenue: number;\n  status: 'active' | 'pending' | 'inactive';\n}\n\nconst mockMetrics: MetricData[] = [\n  { id: '1', label: 'Total Revenue', value: 45231, change: 12.5, trend: 'up' },\n  { id: '2', label: 'Active Users', value: 2350, change: 8.2, trend: 'up' },\n  { id: '3', label: 'Total Orders', value: 1543, change: -3.1, trend: 'down' },\n  { id: '4', label: 'Conversion Rate', value: 3.24, change: 5.7, trend: 'up' }\n];\n\nconst mockChartData: ChartDataPoint[] = [\n  { date: '2024-01-01', revenue: 12000, users: 450, orders: 230 },\n  { date: '2024-01-02', revenue: 15000, users: 520, orders: 280 },\n  { date: '2024-01-03', revenue: 13500, users: 490, orders: 250 },\n  { date: '2024-01-04', revenue: 18000, users: 610, orders: 320 },\n  { date: '2024-01-05', revenue: 16500, users: 580, orders: 295 },\n  { date: '2024-01-06', revenue: 20000, users: 680, orders: 350 },\n  { date: '2024-01-07', revenue: 22000, users: 720, orders: 380 }\n];\n\nconst mockTableData: TableRow[] = [\n  { id: '1', product: 'Premium Plan', sales: 234, revenue: 23400, status: 'active' },\n  { id: '2', product: 'Basic Plan', sales: 567, revenue: 11340, status: 'active' },\n  { id: '3', product: 'Enterprise Plan', sales: 89, revenue: 17800, status: 'active' },\n  { id: '4', product: 'Starter Plan', sales: 432, revenue: 4320, status: 'pending' },\n  { id: '5', product: 'Pro Plan', sales: 156, revenue: 15600, status: 'active' }\n];\n\nconst RevenueChart = ({ data, isDarkMode }: { data: ChartDataPoint[], isDarkMode: boolean }) => {\n  const [hoveredPoint, setHoveredPoint] = useState<number | null>(null);\n  \n  const maxRevenue = Math.max(...data.map(d => d.revenue));\n  const minRevenue = Math.min(...data.map(d => d.revenue));\n  const revenueRange = maxRevenue - minRevenue;\n  \n  const chartHeight = 250;\n  const chartWidth = 100; // percentage\n  const padding = { top: 20, right: 20, bottom: 40, left: 60 };\n  \n  const getX = (index: number) => {\n    return (index / (data.length - 1)) * 100;\n  };\n  \n  const getY = (value: number) => {\n    const normalizedValue = ((value - minRevenue) / revenueRange) * 100;\n    return 100 - normalizedValue;\n  };\n  \n  const pathData = data.map((point, index) => {\n    const x = getX(index);\n    const y = getY(point.revenue);\n    return `${index === 0 ? 'M' : 'L'} ${x} ${y}`;\n  }).join(' ');\n  \n  const formatCurrency = (value: number) => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0\n    }).format(value);\n  };\n  \n  const formatDate = (dateString: string) => {\n    const date = new Date(dateString);\n    return date.toLocaleDateString('en-US', { month: 'short', day: 'numeric' });\n  };\n  \n  return (\n    <div className=\"relative w-full\" style={{ height: `${chartHeight}px` }}>\n      <svg\n        viewBox=\"0 0 100 100\"\n        preserveAspectRatio=\"none\"\n        className=\"w-full h-full\"\n      >\n        {/* Grid lines */}\n        {[0, 25, 50, 75, 100].map((y) => (\n          <line\n            key={y}\n            x1=\"0\"\n            y1={y}\n            x2=\"100\"\n            y2={y}\n            stroke={isDarkMode ? '#374151' : '#e5e7eb'}\n            strokeWidth=\"0.2\"\n            vectorEffect=\"non-scaling-stroke\"\n          />\n        ))}\n        \n        {/* Area fill */}\n        <path\n          d={`${pathData} L 100 100 L 0 100 Z`}\n          fill={isDarkMode ? 'rgba(59, 130, 246, 0.1)' : 'rgba(59, 130, 246, 0.1)'}\n        />\n        \n        {/* Line */}\n        <path\n          d={pathData}\n          fill=\"none\"\n          stroke={isDarkMode ? '#3b82f6' : '#2563eb'}\n          strokeWidth=\"0.5\"\n          vectorEffect=\"non-scaling-stroke\"\n          strokeLinecap=\"round\"\n          strokeLinejoin=\"round\"\n        />\n        \n        {/* Data points */}\n        {data.map((point, index) => {\n          const x = getX(index);\n          const y = getY(point.revenue);\n          const isHovered = hoveredPoint === index;\n          \n          return (\n            <g key={index}>\n              <circle\n                cx={x}\n                cy={y}\n                r={isHovered ? '1.5' : '0.8'}\n                fill={isDarkMode ? '#3b82f6' : '#2563eb'}\n                vectorEffect=\"non-scaling-stroke\"\n                className=\"transition-all duration-200 cursor-pointer\"\n                onMouseEnter={() => setHoveredPoint(index)}\n                onMouseLeave={() => setHoveredPoint(null)}\n              />\n              {isHovered && (\n                <circle\n                  cx={x}\n                  cy={y}\n                  r=\"2.5\"\n                  fill=\"none\"\n                  stroke={isDarkMode ? '#3b82f6' : '#2563eb'}\n                  strokeWidth=\"0.3\"\n                  vectorEffect=\"non-scaling-stroke\"\n                  opacity=\"0.5\"\n                />\n              )}\n            </g>\n          );\n        })}\n      </svg>\n      \n      {/* X-axis labels */}\n      <div className=\"absolute bottom-0 left-0 right-0 flex justify-between px-2\">\n        {data.map((point, index) => (\n          <span\n            key={index}\n            className={`text-xs ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}\n            style={{ fontSize: '0.7rem' }}\n          >\n            {index % 2 === 0 ? formatDate(point.date) : ''}\n          </span>\n        ))}\n      </div>\n      \n      {/* Y-axis labels */}\n      <div className=\"absolute left-0 top-0 bottom-10 flex flex-col justify-between\">\n        {[maxRevenue, maxRevenue * 0.75, maxRevenue * 0.5, maxRevenue * 0.25, minRevenue].map((value, index) => (\n          <span\n            key={index}\n            className={`text-xs ${isDarkMode ? 'text-gray-400' : 'text-gray-600'} -ml-12`}\n            style={{ fontSize: '0.7rem' }}\n          >\n            {formatCurrency(value)}\n          </span>\n        ))}\n      </div>\n      \n      {/* Tooltip */}\n      {hoveredPoint !== null && (\n        <div\n          className={`absolute z-10 px-3 py-2 rounded-lg shadow-lg ${\n            isDarkMode ? 'bg-gray-700 border border-gray-600' : 'bg-white border border-gray-200'\n          }`}\n          style={{\n            left: `${getX(hoveredPoint)}%`,\n            top: `${(getY(data[hoveredPoint].revenue) / 100) * chartHeight - 60}px`,\n            transform: 'translateX(-50%)',\n            pointerEvents: 'none'\n          }}\n        >\n          <div className={`text-xs font-semibold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n            {formatDate(data[hoveredPoint].date)}\n          </div>\n          <div className={`text-sm font-bold ${isDarkMode ? 'text-blue-400' : 'text-blue-600'} mt-1`}>\n            {formatCurrency(data[hoveredPoint].revenue)}\n          </div>\n          <div className={`text-xs ${isDarkMode ? 'text-gray-400' : 'text-gray-600'} mt-1`}>\n            {data[hoveredPoint].users} users \u2022 {data[hoveredPoint].orders} orders\n          </div>\n        </div>\n      )}\n      \n      {/* Summary stats */}\n      <div className=\"absolute top-0 right-0 flex items-center gap-2\">\n        <TrendingUp className={`h-4 w-4 ${isDarkMode ? 'text-green-400' : 'text-green-600'}`} />\n        <span className={`text-sm font-semibold ${isDarkMode ? 'text-green-400' : 'text-green-600'}`}>\n          +{(((data[data.length - 1].revenue - data[0].revenue) / data[0].revenue) * 100).toFixed(1)}%\n        </span>\n      </div>\n    </div>\n  );\n};\n\nconst styles = `\n  @keyframes fadeInUp {\n    from {\n      opacity: 0;\n      transform: translateY(20px);\n    }\n    to {\n      opacity: 1;\n      transform: translateY(0);\n    }\n  }\n`;\nexport default function AnalyticsDashboard() {\n  const [isDarkMode, setIsDarkMode] = useState(false);\n  const [metrics, setMetrics] = useState<MetricData[]>(mockMetrics);\n  const [chartData, setChartData] = useState<ChartDataPoint[]>(mockChartData);\n  const [tableData, setTableData] = useState<TableRow[]>(mockTableData);\n  const [isRefreshing, setIsRefreshing] = useState(false);\n  const [sortField, setSortField] = useState<keyof TableRow>('revenue');\n  const [sortDirection, setSortDirection] = useState<'asc' | 'desc'>('desc');\n  const [currentPage, setCurrentPage] = useState(1);\n  const itemsPerPage = 3;\n\n  const toggleDarkMode = useCallback(() => {\n    setIsDarkMode(prev => !prev);\n  }, []);\n\n  const handleSort = useCallback((field: keyof TableRow) => {\n    if (sortField === field) {\n      setSortDirection(prev => prev === 'asc' ? 'desc' : 'asc');\n    } else {\n      setSortField(field);\n      setSortDirection('desc');\n    }\n    setCurrentPage(1);\n  }, [sortField]);\n\n  const sortedData = useCallback(() => {\n    return [...tableData].sort((a, b) => {\n      const aValue = a[sortField];\n      const bValue = b[sortField];\n      \n      if (typeof aValue === 'number' && typeof bValue === 'number') {\n        return sortDirection === 'asc' ? aValue - bValue : bValue - aValue;\n      }\n      \n      if (typeof aValue === 'string' && typeof bValue === 'string') {\n        return sortDirection === 'asc' \n          ? aValue.localeCompare(bValue)\n          : bValue.localeCompare(aValue);\n      }\n      \n      return 0;\n    });\n  }, [tableData, sortField, sortDirection]);\n\n  const paginatedData = useCallback(() => {\n    const sorted = sortedData();\n    const startIndex = (currentPage - 1) * itemsPerPage;\n    const endIndex = startIndex + itemsPerPage;\n    return sorted.slice(startIndex, endIndex);\n  }, [sortedData, currentPage]);\n\n  const totalPages = Math.ceil(tableData.length / itemsPerPage);\n\n  const getStatusColor = (status: TableRow['status']) => {\n    switch (status) {\n      case 'active':\n        return isDarkMode ? 'bg-green-900 text-green-300' : 'bg-green-100 text-green-800';\n      case 'pending':\n        return isDarkMode ? 'bg-yellow-900 text-yellow-300' : 'bg-yellow-100 text-yellow-800';\n      case 'inactive':\n        return isDarkMode ? 'bg-gray-700 text-gray-300' : 'bg-gray-100 text-gray-800';\n      default:\n        return '';\n    }\n  };\n\n  const handleRefresh = useCallback(() => {\n    setIsRefreshing(true);\n    \n    setTimeout(() => {\n      // Generate updated mock metrics with random variations\n      const updatedMetrics = mockMetrics.map(metric => ({\n        ...metric,\n        value: metric.value + Math.floor(Math.random() * 200 - 100),\n        change: parseFloat((Math.random() * 20 - 5).toFixed(1)),\n        trend: Math.random() > 0.5 ? 'up' : 'down' as 'up' | 'down'\n      }));\n\n      // Generate updated chart data with random variations\n      const updatedChartData = mockChartData.map(point => ({\n        ...point,\n        revenue: point.revenue + Math.floor(Math.random() * 4000 - 2000),\n        users: point.users + Math.floor(Math.random() * 100 - 50),\n        orders: point.orders + Math.floor(Math.random() * 50 - 25)\n      }));\n\n      // Generate updated table data with random variations\n      const updatedTableData = mockTableData.map(row => ({\n        ...row,\n        sales: row.sales + Math.floor(Math.random() * 40 - 20),\n        revenue: row.revenue + Math.floor(Math.random() * 2000 - 1000)\n      }));\n\n      setMetrics(updatedMetrics);\n      setChartData(updatedChartData);\n      setTableData(updatedTableData);\n      setIsRefreshing(false);\n    }, 1500);\n  }, []);\n\n  return (\n    <div className={`min-h-screen ${isDarkMode ? 'dark bg-gray-900' : 'bg-gray-50'}`}>\n      <style>{styles}</style>\n      <div className=\"container mx-auto p-4 md:p-6 lg:p-8\">\n        <div className=\"flex flex-col md:flex-row justify-between items-start md:items-center gap-4 mb-8\">\n          <div>\n            <h1 className={`text-3xl md:text-4xl font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n              Analytics Dashboard\n            </h1>\n            <p className={`mt-2 ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n              Real-time insights and performance metrics\n            </p>\n          </div>\n          \n          <div className=\"flex gap-2\">\n            <Button\n              variant=\"outline\"\n              size=\"icon\"\n              onClick={toggleDarkMode}\n              className={isDarkMode ? 'border-gray-700' : ''}\n            >\n              {isDarkMode ? <Sun className=\"h-5 w-5\" /> : <Moon className=\"h-5 w-5\" />}\n            </Button>\n            \n            <Button\n              variant=\"outline\"\n              onClick={handleRefresh}\n              disabled={isRefreshing}\n              className={isDarkMode ? 'border-gray-700' : ''}\n            >\n              <RefreshCw className={`h-4 w-4 mr-2 ${isRefreshing ? 'animate-spin' : ''}`} />\n              Refresh\n            </Button>\n          </div>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 md:gap-6 mb-8\">\n          {metrics.map((metric, index) => {\n            const Icon = \n              metric.label === 'Total Revenue' ? DollarSign :\n              metric.label === 'Active Users' ? Users :\n              metric.label === 'Total Orders' ? ShoppingCart :\n              Target;\n            \n            return (\n              <Card \n                key={metric.id}\n                className={`transition-all duration-300 hover:shadow-lg ${\n                  isDarkMode ? 'bg-gray-800 border-gray-700' : 'bg-white'\n                } ${isRefreshing ? 'opacity-50' : 'opacity-100'}`}\n                style={{\n                  animation: `fadeInUp 0.5s ease-out ${index * 0.1}s both`\n                }}\n              >\n                <CardHeader className=\"flex flex-row items-center justify-between pb-2\">\n                  <CardTitle className={`text-sm font-medium ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                    {metric.label}\n                  </CardTitle>\n                  <div className={`p-2 rounded-lg ${\n                    isDarkMode ? 'bg-gray-700' : 'bg-gray-100'\n                  }`}>\n                    <Icon className={`h-4 w-4 ${isDarkMode ? 'text-gray-300' : 'text-gray-600'}`} />\n                  </div>\n                </CardHeader>\n                <CardContent>\n                  <div className={`text-2xl font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                    {metric.label.includes('Rate') \n                      ? `${metric.value}%` \n                      : metric.label.includes('Revenue')\n                      ? `$${metric.value.toLocaleString()}`\n                      : metric.value.toLocaleString()\n                    }\n                  </div>\n                  <div className=\"flex items-center mt-2\">\n                    {metric.trend === 'up' ? (\n                      <TrendingUp className=\"h-4 w-4 text-green-500 mr-1\" />\n                    ) : (\n                      <TrendingDown className=\"h-4 w-4 text-red-500 mr-1\" />\n                    )}\n                    <span className={`text-sm font-medium ${\n                      metric.trend === 'up' ? 'text-green-500' : 'text-red-500'\n                    }`}>\n                      {metric.change > 0 ? '+' : ''}{metric.change}%\n                    </span>\n                    <span className={`text-sm ml-2 ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                      vs last period\n                    </span>\n                  </div>\n                </CardContent>\n              </Card>\n            );\n          })}\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-4 md:gap-6 mb-8\">\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Revenue Overview</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Daily revenue trends\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <RevenueChart data={chartData} isDarkMode={isDarkMode} />\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>User Growth</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Active users over time\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <motion.div\n                initial={{ opacity: 0, y: 20 }}\n                animate={{ opacity: 1, y: 0 }}\n                transition={{ duration: 0.5, delay: 0.2 }}\n              >\n                <ResponsiveContainer width=\"100%\" height={300}>\n                  <AreaChart data={chartData}>\n                    <defs>\n                      <linearGradient id=\"userGradient\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                        <stop offset=\"5%\" stopColor=\"#8b5cf6\" stopOpacity={0.8}/>\n                        <stop offset=\"95%\" stopColor=\"#8b5cf6\" stopOpacity={0}/>\n                      </linearGradient>\n                    </defs>\n                    <CartesianGrid \n                      strokeDasharray=\"3 3\" \n                      stroke={isDarkMode ? '#374151' : '#e5e7eb'}\n                    />\n                    <XAxis \n                      dataKey=\"date\" \n                      stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                      tick={{ fill: isDarkMode ? '#9ca3af' : '#6b7280' }}\n                      tickFormatter={(value) => new Date(value).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n                    />\n                    <YAxis \n                      stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                      tick={{ fill: isDarkMode ? '#9ca3af' : '#6b7280' }}\n                    />\n                    <Tooltip \n                      contentStyle={{\n                        backgroundColor: isDarkMode ? '#1f2937' : '#ffffff',\n                        border: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\n                        borderRadius: '8px',\n                        color: isDarkMode ? '#ffffff' : '#000000'\n                      }}\n                      labelFormatter={(value) => new Date(value).toLocaleDateString('en-US', { month: 'long', day: 'numeric', year: 'numeric' })}\n                      formatter={(value: number) => [value.toLocaleString(), 'Users']}\n                    />\n                    <Area \n                      type=\"monotone\" \n                      dataKey=\"users\" \n                      stroke=\"#8b5cf6\" \n                      strokeWidth={2}\n                      fillOpacity={1} \n                      fill=\"url(#userGradient)\"\n                      animationDuration={1000}\n                      animationEasing=\"ease-in-out\"\n                    />\n                  </AreaChart>\n                </ResponsiveContainer>\n              </motion.div>\n            </CardContent>\n          </Card>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-4 md:gap-6 mb-8\">\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Orders Distribution</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                By product category\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"h-[300px] w-full\">\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <PieChart>\n                    <Pie\n                      data={chartData}\n                      cx=\"50%\"\n                      cy=\"50%\"\n                      labelLine={false}\n                      label={({ date, orders, percent }) => `${orders} (${(percent * 100).toFixed(0)}%)`}\n                      outerRadius={80}\n                      fill=\"#8884d8\"\n                      dataKey=\"orders\"\n                      animationBegin={0}\n                      animationDuration={800}\n                    >\n                      {chartData.map((entry, index) => (\n                        <Cell \n                          key={`cell-${index}`} \n                          fill={['#3b82f6', '#8b5cf6', '#ec4899', '#f59e0b', '#10b981', '#06b6d4', '#6366f1'][index % 7]} \n                        />\n                      ))}\n                    </Pie>\n                    <Tooltip \n                      contentStyle={{\n                        backgroundColor: isDarkMode ? '#1f2937' : '#ffffff',\n                        border: isDarkMode ? '1px solid #374151' : '1px solid #e5e7eb',\n                        borderRadius: '6px',\n                        color: isDarkMode ? '#f3f4f6' : '#111827'\n                      }}\n                      formatter={(value: number) => [`${value} orders`, 'Orders']}\n                    />\n                    <Legend \n                      verticalAlign=\"bottom\" \n                      height={36}\n                      formatter={(value, entry: any) => {\n                        const dataPoint = chartData.find(d => d.orders === entry.payload.orders);\n                        return dataPoint ? dataPoint.date : value;\n                      }}\n                      wrapperStyle={{\n                        color: isDarkMode ? '#d1d5db' : '#374151',\n                        fontSize: '12px'\n                      }}\n                    />\n                  </PieChart>\n                </ResponsiveContainer>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className={`lg:col-span-2 ${isDarkMode ? 'bg-gray-800 border-gray-700' : ''}`}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Performance Metrics</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Combined view of key indicators\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"h-[300px] w-full\">\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <BarChart\n                    data={chartData}\n                    margin={{ top: 20, right: 30, left: 20, bottom: 5 }}\n                  >\n                    <CartesianGrid \n                      strokeDasharray=\"3 3\" \n                      stroke={isDarkMode ? '#374151' : '#e5e7eb'}\n                    />\n                    <XAxis \n                      dataKey=\"date\" \n                      stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                      tick={{ fill: isDarkMode ? '#9ca3af' : '#6b7280' }}\n                      tickFormatter={(value) => new Date(value).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n                    />\n                    <YAxis \n                      stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                      tick={{ fill: isDarkMode ? '#9ca3af' : '#6b7280' }}\n                    />\n                    <Tooltip \n                      contentStyle={{\n                        backgroundColor: isDarkMode ? '#1f2937' : '#ffffff',\n                        border: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\n                        borderRadius: '8px',\n                        color: isDarkMode ? '#f3f4f6' : '#111827'\n                      }}\n                      labelStyle={{ color: isDarkMode ? '#f3f4f6' : '#111827' }}\n                      formatter={(value: number) => value.toLocaleString()}\n                      labelFormatter={(label) => new Date(label).toLocaleDateString('en-US', { month: 'long', day: 'numeric', year: 'numeric' })}\n                    />\n                    <Legend \n                      wrapperStyle={{ color: isDarkMode ? '#f3f4f6' : '#111827' }}\n                      iconType=\"circle\"\n                    />\n                    <Bar \n                      dataKey=\"revenue\" \n                      fill=\"#3b82f6\" \n                      radius={[8, 8, 0, 0]}\n                      name=\"Revenue ($)\"\n                    />\n                    <Bar \n                      dataKey=\"users\" \n                      fill=\"#10b981\" \n                      radius={[8, 8, 0, 0]}\n                      name=\"Users\"\n                    />\n                    <Bar \n                      dataKey=\"orders\" \n                      fill=\"#f59e0b\" \n                      radius={[8, 8, 0, 0]}\n                      name=\"Orders\"\n                    />\n                  </BarChart>\n                </ResponsiveContainer>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n          <CardHeader>\n            <CardTitle className={isDarkMode ? 'text-white' : ''}>Top Products</CardTitle>\n            <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n              Best performing products by revenue\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {/* Table */}\n              <div className=\"rounded-md border overflow-hidden\">\n                <div className=\"overflow-x-auto\">\n                  <Table>\n                    <TableHeader>\n                      <TableRow className={isDarkMode ? 'border-gray-700 hover:bg-gray-750' : ''}>\n                        <TableHead \n                          className={`cursor-pointer select-none ${isDarkMode ? 'text-gray-300' : ''}`}\n                          onClick={() => handleSort('product')}\n                        >\n                          <div className=\"flex items-center gap-1\">\n                            Product\n                            <ArrowUpDown className=\"h-4 w-4\" />\n                          </div>\n                        </TableHead>\n                        <TableHead \n                          className={`cursor-pointer select-none ${isDarkMode ? 'text-gray-300' : ''}`}\n                          onClick={() => handleSort('sales')}\n                        >\n                          <div className=\"flex items-center gap-1\">\n                            Sales\n                            <ArrowUpDown className=\"h-4 w-4\" />\n                          </div>\n                        </TableHead>\n                        <TableHead \n                          className={`cursor-pointer select-none ${isDarkMode ? 'text-gray-300' : ''}`}\n                          onClick={() => handleSort('revenue')}\n                        >\n                          <div className=\"flex items-center gap-1\">\n                            Revenue\n                            <ArrowUpDown className=\"h-4 w-4\" />\n                          </div>\n                        </TableHead>\n                        <TableHead \n                          className={`cursor-pointer select-none ${isDarkMode ? 'text-gray-300' : ''}`}\n                          onClick={() => handleSort('status')}\n                        >\n                          <div className=\"flex items-center gap-1\">\n                            Status\n                            <ArrowUpDown className=\"h-4 w-4\" />\n                          </div>\n                        </TableHead>\n                      </TableRow>\n                    </TableHeader>\n                    <TableBody>\n                      {paginatedData().map((row) => (\n                        <TableRow \n                          key={row.id}\n                          className={isDarkMode ? 'border-gray-700 hover:bg-gray-750' : ''}\n                        >\n                          <TableCell className={`font-medium ${isDarkMode ? 'text-white' : ''}`}>\n                            {row.product}\n                          </TableCell>\n                          <TableCell className={isDarkMode ? 'text-gray-300' : ''}>\n                            {row.sales.toLocaleString()}\n                          </TableCell>\n                          <TableCell className={isDarkMode ? 'text-gray-300' : ''}>\n                            ${row.revenue.toLocaleString()}\n                          </TableCell>\n                          <TableCell>\n                            <Badge \n                              variant=\"secondary\"\n                              className={getStatusColor(row.status)}\n                            >\n                              {row.status.charAt(0).toUpperCase() + row.status.slice(1)}\n                            </Badge>\n                          </TableCell>\n                        </TableRow>\n                      ))}\n                    </TableBody>\n                  </Table>\n                </div>\n              </div>\n\n              {/* Pagination */}\n              <div className=\"flex flex-col sm:flex-row items-center justify-between gap-4\">\n                <div className={`text-sm ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                  Showing {((currentPage - 1) * itemsPerPage) + 1} to {Math.min(currentPage * itemsPerPage, tableData.length)} of {tableData.length} products\n                </div>\n                \n                <div className=\"flex items-center gap-2\">\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => setCurrentPage(prev => Math.max(1, prev - 1))}\n                    disabled={currentPage === 1}\n                    className={isDarkMode ? 'border-gray-700' : ''}\n                  >\n                    <ChevronLeft className=\"h-4 w-4 mr-1\" />\n                    Previous\n                  </Button>\n                  \n                  <div className={`flex items-center gap-1 px-2 ${isDarkMode ? 'text-gray-300' : ''}`}>\n                    <span className=\"text-sm font-medium\">{currentPage}</span>\n                    <span className=\"text-sm\">of</span>\n                    <span className=\"text-sm font-medium\">{totalPages}</span>\n                  </div>\n                  \n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => setCurrentPage(prev => Math.min(totalPages, prev + 1))}\n                    disabled={currentPage === totalPages}\n                    className={isDarkMode ? 'border-gray-700' : ''}\n                  >\n                    Next\n                    <ChevronRight className=\"h-4 w-4 ml-1\" />\n                  </Button>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 md:gap-6 mt-8\">\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={`flex items-center gap-2 ${isDarkMode ? 'text-white' : ''}`}>\n                <span className=\"relative flex h-3 w-3\">\n                  <span className=\"animate-ping absolute inline-flex h-full w-full rounded-full bg-green-400 opacity-75\"></span>\n                  <span className=\"relative inline-flex rounded-full h-3 w-3 bg-green-500\"></span>\n                </span>\n                Live Status\n              </CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                System is operational\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-3\">\n                <div className=\"flex items-center justify-between\">\n                  <span className={`text-sm ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>\n                    Last updated\n                  </span>\n                  <span className={`text-sm font-medium ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                    {new Date().toLocaleTimeString()}\n                  </span>\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <span className={`text-sm ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>\n                    Data refresh rate\n                  </span>\n                  <span className={`text-sm font-medium ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                    Real-time\n                  </span>\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <span className={`text-sm ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>\n                    Active connections\n                  </span>\n                  <span className={`text-sm font-medium ${isDarkMode ? 'text-green-400' : 'text-green-600'}`}>\n                    {Math.floor(Math.random() * 50) + 150}\n                  </span>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={`flex items-center gap-2 ${isDarkMode ? 'text-white' : ''}`}>\n                <span className=\"relative flex h-3 w-3\">\n                  <span className=\"animate-ping absolute inline-flex h-full w-full rounded-full bg-blue-400 opacity-75\"></span>\n                  <span className=\"relative inline-flex rounded-full h-3 w-3 bg-blue-500\"></span>\n                </span>\n                Data Sync\n              </CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Synchronization status\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-3\">\n                <div className=\"flex items-center justify-between\">\n                  <span className={`text-sm ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>\n                    Metrics synced\n                  </span>\n                  <span className={`text-sm font-medium ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                    {new Date().toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit', second: '2-digit' })}\n                  </span>\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <span className={`text-sm ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>\n                    Charts updated\n                  </span>\n                  <span className={`text-sm font-medium ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                    {new Date().toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit', second: '2-digit' })}\n                  </span>\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <span className={`text-sm ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>\n                    Sync status\n                  </span>\n                  <span className={`text-sm font-medium ${isDarkMode ? 'text-blue-400' : 'text-blue-600'}`}>\n                    Active\n                  </span>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={`flex items-center gap-2 ${isDarkMode ? 'text-white' : ''}`}>\n                <span className=\"relative flex h-3 w-3\">\n                  <span className=\"animate-ping absolute inline-flex h-full w-full rounded-full bg-purple-400 opacity-75\"></span>\n                  <span className=\"relative inline-flex rounded-full h-3 w-3 bg-purple-500\"></span>\n                </span>\n                Activity Monitor\n              </CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Recent activity tracking\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-3\">\n                <div className=\"flex items-center justify-between\">\n                  <span className={`text-sm ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>\n                    Last activity\n                  </span>\n                  <span className={`text-sm font-medium ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                    {new Date().toLocaleTimeString()}\n                  </span>\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <span className={`text-sm ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>\n                    Events processed\n                  </span>\n                  <span className={`text-sm font-medium ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                    {Math.floor(Math.random() * 500) + 1000}\n                  </span>\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <span className={`text-sm ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>\n                    Monitor status\n                  </span>\n                  <span className={`text-sm font-medium ${isDarkMode ? 'text-purple-400' : 'text-purple-600'}`}>\n                    Running\n                  </span>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}",
  "error": null,
  "overall_score": 53,
  "code_quality_score": 16,
  "architecture_score": 14,
  "performance_score": 12,
  "accessibility_score": 11,
  "metadata": {
    "document_id": "eval_room_971e2b0fc25a",
    "prompt_category": "intermediate",
    "prompt_complexity": 6.0
  },
  "raw_response": {
    "document_id": "eval_room_971e2b0fc25a",
    "mode": "parallel",
    "prompt": "Generate an analytics dashboard page with charts, data tables, real-time updates, dark mode, and responsive design",
    "content": "import { useState, useCallback } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Moon, Sun, RefreshCw } from 'lucide-react';\n\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\nimport { PieChart, Pie, Cell, ResponsiveContainer, Legend, Tooltip } from 'recharts';\nimport { motion } from 'framer-motion';\nimport { AreaChart, Area, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';\nimport { TrendingUp } from 'lucide-react';\nimport { TrendingUp, TrendingDown, DollarSign, Users, ShoppingCart, Target } from 'lucide-react';\nimport { Badge } from '@/components/ui/badge';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\nimport { ArrowUpDown, ChevronLeft, ChevronRight } from 'lucide-react';\n\ninterface MetricData {\n  id: string;\n  label: string;\n  value: number;\n  change: number;\n  trend: 'up' | 'down';\n}\n\ninterface ChartDataPoint {\n  date: string;\n  revenue: number;\n  users: number;\n  orders: number;\n}\n\ninterface TableRow {\n  id: string;\n  product: string;\n  sales: number;\n  revenue: number;\n  status: 'active' | 'pending' | 'inactive';\n}\n\nconst mockMetrics: MetricData[] = [\n  { id: '1', label: 'Total Revenue', value: 45231, change: 12.5, trend: 'up' },\n  { id: '2', label: 'Active Users', value: 2350, change: 8.2, trend: 'up' },\n  { id: '3', label: 'Total Orders', value: 1543, change: -3.1, trend: 'down' },\n  { id: '4', label: 'Conversion Rate', value: 3.24, change: 5.7, trend: 'up' }\n];\n\nconst mockChartData: ChartDataPoint[] = [\n  { date: '2024-01-01', revenue: 12000, users: 450, orders: 230 },\n  { date: '2024-01-02', revenue: 15000, users: 520, orders: 280 },\n  { date: '2024-01-03', revenue: 13500, users: 490, orders: 250 },\n  { date: '2024-01-04', revenue: 18000, users: 610, orders: 320 },\n  { date: '2024-01-05', revenue: 16500, users: 580, orders: 295 },\n  { date: '2024-01-06', revenue: 20000, users: 680, orders: 350 },\n  { date: '2024-01-07', revenue: 22000, users: 720, orders: 380 }\n];\n\nconst mockTableData: TableRow[] = [\n  { id: '1', product: 'Premium Plan', sales: 234, revenue: 23400, status: 'active' },\n  { id: '2', product: 'Basic Plan', sales: 567, revenue: 11340, status: 'active' },\n  { id: '3', product: 'Enterprise Plan', sales: 89, revenue: 17800, status: 'active' },\n  { id: '4', product: 'Starter Plan', sales: 432, revenue: 4320, status: 'pending' },\n  { id: '5', product: 'Pro Plan', sales: 156, revenue: 15600, status: 'active' }\n];\n\nconst RevenueChart = ({ data, isDarkMode }: { data: ChartDataPoint[], isDarkMode: boolean }) => {\n  const [hoveredPoint, setHoveredPoint] = useState<number | null>(null);\n  \n  const maxRevenue = Math.max(...data.map(d => d.revenue));\n  const minRevenue = Math.min(...data.map(d => d.revenue));\n  const revenueRange = maxRevenue - minRevenue;\n  \n  const chartHeight = 250;\n  const chartWidth = 100; // percentage\n  const padding = { top: 20, right: 20, bottom: 40, left: 60 };\n  \n  const getX = (index: number) => {\n    return (index / (data.length - 1)) * 100;\n  };\n  \n  const getY = (value: number) => {\n    const normalizedValue = ((value - minRevenue) / revenueRange) * 100;\n    return 100 - normalizedValue;\n  };\n  \n  const pathData = data.map((point, index) => {\n    const x = getX(index);\n    const y = getY(point.revenue);\n    return `${index === 0 ? 'M' : 'L'} ${x} ${y}`;\n  }).join(' ');\n  \n  const formatCurrency = (value: number) => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0\n    }).format(value);\n  };\n  \n  const formatDate = (dateString: string) => {\n    const date = new Date(dateString);\n    return date.toLocaleDateString('en-US', { month: 'short', day: 'numeric' });\n  };\n  \n  return (\n    <div className=\"relative w-full\" style={{ height: `${chartHeight}px` }}>\n      <svg\n        viewBox=\"0 0 100 100\"\n        preserveAspectRatio=\"none\"\n        className=\"w-full h-full\"\n      >\n        {/* Grid lines */}\n        {[0, 25, 50, 75, 100].map((y) => (\n          <line\n            key={y}\n            x1=\"0\"\n            y1={y}\n            x2=\"100\"\n            y2={y}\n            stroke={isDarkMode ? '#374151' : '#e5e7eb'}\n            strokeWidth=\"0.2\"\n            vectorEffect=\"non-scaling-stroke\"\n          />\n        ))}\n        \n        {/* Area fill */}\n        <path\n          d={`${pathData} L 100 100 L 0 100 Z`}\n          fill={isDarkMode ? 'rgba(59, 130, 246, 0.1)' : 'rgba(59, 130, 246, 0.1)'}\n        />\n        \n        {/* Line */}\n        <path\n          d={pathData}\n          fill=\"none\"\n          stroke={isDarkMode ? '#3b82f6' : '#2563eb'}\n          strokeWidth=\"0.5\"\n          vectorEffect=\"non-scaling-stroke\"\n          strokeLinecap=\"round\"\n          strokeLinejoin=\"round\"\n        />\n        \n        {/* Data points */}\n        {data.map((point, index) => {\n          const x = getX(index);\n          const y = getY(point.revenue);\n          const isHovered = hoveredPoint === index;\n          \n          return (\n            <g key={index}>\n              <circle\n                cx={x}\n                cy={y}\n                r={isHovered ? '1.5' : '0.8'}\n                fill={isDarkMode ? '#3b82f6' : '#2563eb'}\n                vectorEffect=\"non-scaling-stroke\"\n                className=\"transition-all duration-200 cursor-pointer\"\n                onMouseEnter={() => setHoveredPoint(index)}\n                onMouseLeave={() => setHoveredPoint(null)}\n              />\n              {isHovered && (\n                <circle\n                  cx={x}\n                  cy={y}\n                  r=\"2.5\"\n                  fill=\"none\"\n                  stroke={isDarkMode ? '#3b82f6' : '#2563eb'}\n                  strokeWidth=\"0.3\"\n                  vectorEffect=\"non-scaling-stroke\"\n                  opacity=\"0.5\"\n                />\n              )}\n            </g>\n          );\n        })}\n      </svg>\n      \n      {/* X-axis labels */}\n      <div className=\"absolute bottom-0 left-0 right-0 flex justify-between px-2\">\n        {data.map((point, index) => (\n          <span\n            key={index}\n            className={`text-xs ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}\n            style={{ fontSize: '0.7rem' }}\n          >\n            {index % 2 === 0 ? formatDate(point.date) : ''}\n          </span>\n        ))}\n      </div>\n      \n      {/* Y-axis labels */}\n      <div className=\"absolute left-0 top-0 bottom-10 flex flex-col justify-between\">\n        {[maxRevenue, maxRevenue * 0.75, maxRevenue * 0.5, maxRevenue * 0.25, minRevenue].map((value, index) => (\n          <span\n            key={index}\n            className={`text-xs ${isDarkMode ? 'text-gray-400' : 'text-gray-600'} -ml-12`}\n            style={{ fontSize: '0.7rem' }}\n          >\n            {formatCurrency(value)}\n          </span>\n        ))}\n      </div>\n      \n      {/* Tooltip */}\n      {hoveredPoint !== null && (\n        <div\n          className={`absolute z-10 px-3 py-2 rounded-lg shadow-lg ${\n            isDarkMode ? 'bg-gray-700 border border-gray-600' : 'bg-white border border-gray-200'\n          }`}\n          style={{\n            left: `${getX(hoveredPoint)}%`,\n            top: `${(getY(data[hoveredPoint].revenue) / 100) * chartHeight - 60}px`,\n            transform: 'translateX(-50%)',\n            pointerEvents: 'none'\n          }}\n        >\n          <div className={`text-xs font-semibold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n            {formatDate(data[hoveredPoint].date)}\n          </div>\n          <div className={`text-sm font-bold ${isDarkMode ? 'text-blue-400' : 'text-blue-600'} mt-1`}>\n            {formatCurrency(data[hoveredPoint].revenue)}\n          </div>\n          <div className={`text-xs ${isDarkMode ? 'text-gray-400' : 'text-gray-600'} mt-1`}>\n            {data[hoveredPoint].users} users \u2022 {data[hoveredPoint].orders} orders\n          </div>\n        </div>\n      )}\n      \n      {/* Summary stats */}\n      <div className=\"absolute top-0 right-0 flex items-center gap-2\">\n        <TrendingUp className={`h-4 w-4 ${isDarkMode ? 'text-green-400' : 'text-green-600'}`} />\n        <span className={`text-sm font-semibold ${isDarkMode ? 'text-green-400' : 'text-green-600'}`}>\n          +{(((data[data.length - 1].revenue - data[0].revenue) / data[0].revenue) * 100).toFixed(1)}%\n        </span>\n      </div>\n    </div>\n  );\n};\n\nconst styles = `\n  @keyframes fadeInUp {\n    from {\n      opacity: 0;\n      transform: translateY(20px);\n    }\n    to {\n      opacity: 1;\n      transform: translateY(0);\n    }\n  }\n`;\nexport default function AnalyticsDashboard() {\n  const [isDarkMode, setIsDarkMode] = useState(false);\n  const [metrics, setMetrics] = useState<MetricData[]>(mockMetrics);\n  const [chartData, setChartData] = useState<ChartDataPoint[]>(mockChartData);\n  const [tableData, setTableData] = useState<TableRow[]>(mockTableData);\n  const [isRefreshing, setIsRefreshing] = useState(false);\n  const [sortField, setSortField] = useState<keyof TableRow>('revenue');\n  const [sortDirection, setSortDirection] = useState<'asc' | 'desc'>('desc');\n  const [currentPage, setCurrentPage] = useState(1);\n  const itemsPerPage = 3;\n\n  const toggleDarkMode = useCallback(() => {\n    setIsDarkMode(prev => !prev);\n  }, []);\n\n  const handleSort = useCallback((field: keyof TableRow) => {\n    if (sortField === field) {\n      setSortDirection(prev => prev === 'asc' ? 'desc' : 'asc');\n    } else {\n      setSortField(field);\n      setSortDirection('desc');\n    }\n    setCurrentPage(1);\n  }, [sortField]);\n\n  const sortedData = useCallback(() => {\n    return [...tableData].sort((a, b) => {\n      const aValue = a[sortField];\n      const bValue = b[sortField];\n      \n      if (typeof aValue === 'number' && typeof bValue === 'number') {\n        return sortDirection === 'asc' ? aValue - bValue : bValue - aValue;\n      }\n      \n      if (typeof aValue === 'string' && typeof bValue === 'string') {\n        return sortDirection === 'asc' \n          ? aValue.localeCompare(bValue)\n          : bValue.localeCompare(aValue);\n      }\n      \n      return 0;\n    });\n  }, [tableData, sortField, sortDirection]);\n\n  const paginatedData = useCallback(() => {\n    const sorted = sortedData();\n    const startIndex = (currentPage - 1) * itemsPerPage;\n    const endIndex = startIndex + itemsPerPage;\n    return sorted.slice(startIndex, endIndex);\n  }, [sortedData, currentPage]);\n\n  const totalPages = Math.ceil(tableData.length / itemsPerPage);\n\n  const getStatusColor = (status: TableRow['status']) => {\n    switch (status) {\n      case 'active':\n        return isDarkMode ? 'bg-green-900 text-green-300' : 'bg-green-100 text-green-800';\n      case 'pending':\n        return isDarkMode ? 'bg-yellow-900 text-yellow-300' : 'bg-yellow-100 text-yellow-800';\n      case 'inactive':\n        return isDarkMode ? 'bg-gray-700 text-gray-300' : 'bg-gray-100 text-gray-800';\n      default:\n        return '';\n    }\n  };\n\n  const handleRefresh = useCallback(() => {\n    setIsRefreshing(true);\n    \n    setTimeout(() => {\n      // Generate updated mock metrics with random variations\n      const updatedMetrics = mockMetrics.map(metric => ({\n        ...metric,\n        value: metric.value + Math.floor(Math.random() * 200 - 100),\n        change: parseFloat((Math.random() * 20 - 5).toFixed(1)),\n        trend: Math.random() > 0.5 ? 'up' : 'down' as 'up' | 'down'\n      }));\n\n      // Generate updated chart data with random variations\n      const updatedChartData = mockChartData.map(point => ({\n        ...point,\n        revenue: point.revenue + Math.floor(Math.random() * 4000 - 2000),\n        users: point.users + Math.floor(Math.random() * 100 - 50),\n        orders: point.orders + Math.floor(Math.random() * 50 - 25)\n      }));\n\n      // Generate updated table data with random variations\n      const updatedTableData = mockTableData.map(row => ({\n        ...row,\n        sales: row.sales + Math.floor(Math.random() * 40 - 20),\n        revenue: row.revenue + Math.floor(Math.random() * 2000 - 1000)\n      }));\n\n      setMetrics(updatedMetrics);\n      setChartData(updatedChartData);\n      setTableData(updatedTableData);\n      setIsRefreshing(false);\n    }, 1500);\n  }, []);\n\n  return (\n    <div className={`min-h-screen ${isDarkMode ? 'dark bg-gray-900' : 'bg-gray-50'}`}>\n      <style>{styles}</style>\n      <div className=\"container mx-auto p-4 md:p-6 lg:p-8\">\n        <div className=\"flex flex-col md:flex-row justify-between items-start md:items-center gap-4 mb-8\">\n          <div>\n            <h1 className={`text-3xl md:text-4xl font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n              Analytics Dashboard\n            </h1>\n            <p className={`mt-2 ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n              Real-time insights and performance metrics\n            </p>\n          </div>\n          \n          <div className=\"flex gap-2\">\n            <Button\n              variant=\"outline\"\n              size=\"icon\"\n              onClick={toggleDarkMode}\n              className={isDarkMode ? 'border-gray-700' : ''}\n            >\n              {isDarkMode ? <Sun className=\"h-5 w-5\" /> : <Moon className=\"h-5 w-5\" />}\n            </Button>\n            \n            <Button\n              variant=\"outline\"\n              onClick={handleRefresh}\n              disabled={isRefreshing}\n              className={isDarkMode ? 'border-gray-700' : ''}\n            >\n              <RefreshCw className={`h-4 w-4 mr-2 ${isRefreshing ? 'animate-spin' : ''}`} />\n              Refresh\n            </Button>\n          </div>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 md:gap-6 mb-8\">\n          {metrics.map((metric, index) => {\n            const Icon = \n              metric.label === 'Total Revenue' ? DollarSign :\n              metric.label === 'Active Users' ? Users :\n              metric.label === 'Total Orders' ? ShoppingCart :\n              Target;\n            \n            return (\n              <Card \n                key={metric.id}\n                className={`transition-all duration-300 hover:shadow-lg ${\n                  isDarkMode ? 'bg-gray-800 border-gray-700' : 'bg-white'\n                } ${isRefreshing ? 'opacity-50' : 'opacity-100'}`}\n                style={{\n                  animation: `fadeInUp 0.5s ease-out ${index * 0.1}s both`\n                }}\n              >\n                <CardHeader className=\"flex flex-row items-center justify-between pb-2\">\n                  <CardTitle className={`text-sm font-medium ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                    {metric.label}\n                  </CardTitle>\n                  <div className={`p-2 rounded-lg ${\n                    isDarkMode ? 'bg-gray-700' : 'bg-gray-100'\n                  }`}>\n                    <Icon className={`h-4 w-4 ${isDarkMode ? 'text-gray-300' : 'text-gray-600'}`} />\n                  </div>\n                </CardHeader>\n                <CardContent>\n                  <div className={`text-2xl font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                    {metric.label.includes('Rate') \n                      ? `${metric.value}%` \n                      : metric.label.includes('Revenue')\n                      ? `$${metric.value.toLocaleString()}`\n                      : metric.value.toLocaleString()\n                    }\n                  </div>\n                  <div className=\"flex items-center mt-2\">\n                    {metric.trend === 'up' ? (\n                      <TrendingUp className=\"h-4 w-4 text-green-500 mr-1\" />\n                    ) : (\n                      <TrendingDown className=\"h-4 w-4 text-red-500 mr-1\" />\n                    )}\n                    <span className={`text-sm font-medium ${\n                      metric.trend === 'up' ? 'text-green-500' : 'text-red-500'\n                    }`}>\n                      {metric.change > 0 ? '+' : ''}{metric.change}%\n                    </span>\n                    <span className={`text-sm ml-2 ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                      vs last period\n                    </span>\n                  </div>\n                </CardContent>\n              </Card>\n            );\n          })}\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-4 md:gap-6 mb-8\">\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Revenue Overview</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Daily revenue trends\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <RevenueChart data={chartData} isDarkMode={isDarkMode} />\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>User Growth</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Active users over time\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <motion.div\n                initial={{ opacity: 0, y: 20 }}\n                animate={{ opacity: 1, y: 0 }}\n                transition={{ duration: 0.5, delay: 0.2 }}\n              >\n                <ResponsiveContainer width=\"100%\" height={300}>\n                  <AreaChart data={chartData}>\n                    <defs>\n                      <linearGradient id=\"userGradient\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                        <stop offset=\"5%\" stopColor=\"#8b5cf6\" stopOpacity={0.8}/>\n                        <stop offset=\"95%\" stopColor=\"#8b5cf6\" stopOpacity={0}/>\n                      </linearGradient>\n                    </defs>\n                    <CartesianGrid \n                      strokeDasharray=\"3 3\" \n                      stroke={isDarkMode ? '#374151' : '#e5e7eb'}\n                    />\n                    <XAxis \n                      dataKey=\"date\" \n                      stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                      tick={{ fill: isDarkMode ? '#9ca3af' : '#6b7280' }}\n                      tickFormatter={(value) => new Date(value).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n                    />\n                    <YAxis \n                      stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                      tick={{ fill: isDarkMode ? '#9ca3af' : '#6b7280' }}\n                    />\n                    <Tooltip \n                      contentStyle={{\n                        backgroundColor: isDarkMode ? '#1f2937' : '#ffffff',\n                        border: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\n                        borderRadius: '8px',\n                        color: isDarkMode ? '#ffffff' : '#000000'\n                      }}\n                      labelFormatter={(value) => new Date(value).toLocaleDateString('en-US', { month: 'long', day: 'numeric', year: 'numeric' })}\n                      formatter={(value: number) => [value.toLocaleString(), 'Users']}\n                    />\n                    <Area \n                      type=\"monotone\" \n                      dataKey=\"users\" \n                      stroke=\"#8b5cf6\" \n                      strokeWidth={2}\n                      fillOpacity={1} \n                      fill=\"url(#userGradient)\"\n                      animationDuration={1000}\n                      animationEasing=\"ease-in-out\"\n                    />\n                  </AreaChart>\n                </ResponsiveContainer>\n              </motion.div>\n            </CardContent>\n          </Card>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-4 md:gap-6 mb-8\">\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Orders Distribution</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                By product category\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"h-[300px] w-full\">\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <PieChart>\n                    <Pie\n                      data={chartData}\n                      cx=\"50%\"\n                      cy=\"50%\"\n                      labelLine={false}\n                      label={({ date, orders, percent }) => `${orders} (${(percent * 100).toFixed(0)}%)`}\n                      outerRadius={80}\n                      fill=\"#8884d8\"\n                      dataKey=\"orders\"\n                      animationBegin={0}\n                      animationDuration={800}\n                    >\n                      {chartData.map((entry, index) => (\n                        <Cell \n                          key={`cell-${index}`} \n                          fill={['#3b82f6', '#8b5cf6', '#ec4899', '#f59e0b', '#10b981', '#06b6d4', '#6366f1'][index % 7]} \n                        />\n                      ))}\n                    </Pie>\n                    <Tooltip \n                      contentStyle={{\n                        backgroundColor: isDarkMode ? '#1f2937' : '#ffffff',\n                        border: isDarkMode ? '1px solid #374151' : '1px solid #e5e7eb',\n                        borderRadius: '6px',\n                        color: isDarkMode ? '#f3f4f6' : '#111827'\n                      }}\n                      formatter={(value: number) => [`${value} orders`, 'Orders']}\n                    />\n                    <Legend \n                      verticalAlign=\"bottom\" \n                      height={36}\n                      formatter={(value, entry: any) => {\n                        const dataPoint = chartData.find(d => d.orders === entry.payload.orders);\n                        return dataPoint ? dataPoint.date : value;\n                      }}\n                      wrapperStyle={{\n                        color: isDarkMode ? '#d1d5db' : '#374151',\n                        fontSize: '12px'\n                      }}\n                    />\n                  </PieChart>\n                </ResponsiveContainer>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className={`lg:col-span-2 ${isDarkMode ? 'bg-gray-800 border-gray-700' : ''}`}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Performance Metrics</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Combined view of key indicators\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"h-[300px] w-full\">\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <BarChart\n                    data={chartData}\n                    margin={{ top: 20, right: 30, left: 20, bottom: 5 }}\n                  >\n                    <CartesianGrid \n                      strokeDasharray=\"3 3\" \n                      stroke={isDarkMode ? '#374151' : '#e5e7eb'}\n                    />\n                    <XAxis \n                      dataKey=\"date\" \n                      stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                      tick={{ fill: isDarkMode ? '#9ca3af' : '#6b7280' }}\n                      tickFormatter={(value) => new Date(value).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n                    />\n                    <YAxis \n                      stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                      tick={{ fill: isDarkMode ? '#9ca3af' : '#6b7280' }}\n                    />\n                    <Tooltip \n                      contentStyle={{\n                        backgroundColor: isDarkMode ? '#1f2937' : '#ffffff',\n                        border: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\n                        borderRadius: '8px',\n                        color: isDarkMode ? '#f3f4f6' : '#111827'\n                      }}\n                      labelStyle={{ color: isDarkMode ? '#f3f4f6' : '#111827' }}\n                      formatter={(value: number) => value.toLocaleString()}\n                      labelFormatter={(label) => new Date(label).toLocaleDateString('en-US', { month: 'long', day: 'numeric', year: 'numeric' })}\n                    />\n                    <Legend \n                      wrapperStyle={{ color: isDarkMode ? '#f3f4f6' : '#111827' }}\n                      iconType=\"circle\"\n                    />\n                    <Bar \n                      dataKey=\"revenue\" \n                      fill=\"#3b82f6\" \n                      radius={[8, 8, 0, 0]}\n                      name=\"Revenue ($)\"\n                    />\n                    <Bar \n                      dataKey=\"users\" \n                      fill=\"#10b981\" \n                      radius={[8, 8, 0, 0]}\n                      name=\"Users\"\n                    />\n                    <Bar \n                      dataKey=\"orders\" \n                      fill=\"#f59e0b\" \n                      radius={[8, 8, 0, 0]}\n                      name=\"Orders\"\n                    />\n                  </BarChart>\n                </ResponsiveContainer>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n          <CardHeader>\n            <CardTitle className={isDarkMode ? 'text-white' : ''}>Top Products</CardTitle>\n            <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n              Best performing products by revenue\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {/* Table */}\n              <div className=\"rounded-md border overflow-hidden\">\n                <div className=\"overflow-x-auto\">\n                  <Table>\n                    <TableHeader>\n                      <TableRow className={isDarkMode ? 'border-gray-700 hover:bg-gray-750' : ''}>\n                        <TableHead \n                          className={`cursor-pointer select-none ${isDarkMode ? 'text-gray-300' : ''}`}\n                          onClick={() => handleSort('product')}\n                        >\n                          <div className=\"flex items-center gap-1\">\n                            Product\n                            <ArrowUpDown className=\"h-4 w-4\" />\n                          </div>\n                        </TableHead>\n                        <TableHead \n                          className={`cursor-pointer select-none ${isDarkMode ? 'text-gray-300' : ''}`}\n                          onClick={() => handleSort('sales')}\n                        >\n                          <div className=\"flex items-center gap-1\">\n                            Sales\n                            <ArrowUpDown className=\"h-4 w-4\" />\n                          </div>\n                        </TableHead>\n                        <TableHead \n                          className={`cursor-pointer select-none ${isDarkMode ? 'text-gray-300' : ''}`}\n                          onClick={() => handleSort('revenue')}\n                        >\n                          <div className=\"flex items-center gap-1\">\n                            Revenue\n                            <ArrowUpDown className=\"h-4 w-4\" />\n                          </div>\n                        </TableHead>\n                        <TableHead \n                          className={`cursor-pointer select-none ${isDarkMode ? 'text-gray-300' : ''}`}\n                          onClick={() => handleSort('status')}\n                        >\n                          <div className=\"flex items-center gap-1\">\n                            Status\n                            <ArrowUpDown className=\"h-4 w-4\" />\n                          </div>\n                        </TableHead>\n                      </TableRow>\n                    </TableHeader>\n                    <TableBody>\n                      {paginatedData().map((row) => (\n                        <TableRow \n                          key={row.id}\n                          className={isDarkMode ? 'border-gray-700 hover:bg-gray-750' : ''}\n                        >\n                          <TableCell className={`font-medium ${isDarkMode ? 'text-white' : ''}`}>\n                            {row.product}\n                          </TableCell>\n                          <TableCell className={isDarkMode ? 'text-gray-300' : ''}>\n                            {row.sales.toLocaleString()}\n                          </TableCell>\n                          <TableCell className={isDarkMode ? 'text-gray-300' : ''}>\n                            ${row.revenue.toLocaleString()}\n                          </TableCell>\n                          <TableCell>\n                            <Badge \n                              variant=\"secondary\"\n                              className={getStatusColor(row.status)}\n                            >\n                              {row.status.charAt(0).toUpperCase() + row.status.slice(1)}\n                            </Badge>\n                          </TableCell>\n                        </TableRow>\n                      ))}\n                    </TableBody>\n                  </Table>\n                </div>\n              </div>\n\n              {/* Pagination */}\n              <div className=\"flex flex-col sm:flex-row items-center justify-between gap-4\">\n                <div className={`text-sm ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                  Showing {((currentPage - 1) * itemsPerPage) + 1} to {Math.min(currentPage * itemsPerPage, tableData.length)} of {tableData.length} products\n                </div>\n                \n                <div className=\"flex items-center gap-2\">\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => setCurrentPage(prev => Math.max(1, prev - 1))}\n                    disabled={currentPage === 1}\n                    className={isDarkMode ? 'border-gray-700' : ''}\n                  >\n                    <ChevronLeft className=\"h-4 w-4 mr-1\" />\n                    Previous\n                  </Button>\n                  \n                  <div className={`flex items-center gap-1 px-2 ${isDarkMode ? 'text-gray-300' : ''}`}>\n                    <span className=\"text-sm font-medium\">{currentPage}</span>\n                    <span className=\"text-sm\">of</span>\n                    <span className=\"text-sm font-medium\">{totalPages}</span>\n                  </div>\n                  \n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => setCurrentPage(prev => Math.min(totalPages, prev + 1))}\n                    disabled={currentPage === totalPages}\n                    className={isDarkMode ? 'border-gray-700' : ''}\n                  >\n                    Next\n                    <ChevronRight className=\"h-4 w-4 ml-1\" />\n                  </Button>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 md:gap-6 mt-8\">\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={`flex items-center gap-2 ${isDarkMode ? 'text-white' : ''}`}>\n                <span className=\"relative flex h-3 w-3\">\n                  <span className=\"animate-ping absolute inline-flex h-full w-full rounded-full bg-green-400 opacity-75\"></span>\n                  <span className=\"relative inline-flex rounded-full h-3 w-3 bg-green-500\"></span>\n                </span>\n                Live Status\n              </CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                System is operational\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-3\">\n                <div className=\"flex items-center justify-between\">\n                  <span className={`text-sm ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>\n                    Last updated\n                  </span>\n                  <span className={`text-sm font-medium ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                    {new Date().toLocaleTimeString()}\n                  </span>\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <span className={`text-sm ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>\n                    Data refresh rate\n                  </span>\n                  <span className={`text-sm font-medium ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                    Real-time\n                  </span>\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <span className={`text-sm ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>\n                    Active connections\n                  </span>\n                  <span className={`text-sm font-medium ${isDarkMode ? 'text-green-400' : 'text-green-600'}`}>\n                    {Math.floor(Math.random() * 50) + 150}\n                  </span>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={`flex items-center gap-2 ${isDarkMode ? 'text-white' : ''}`}>\n                <span className=\"relative flex h-3 w-3\">\n                  <span className=\"animate-ping absolute inline-flex h-full w-full rounded-full bg-blue-400 opacity-75\"></span>\n                  <span className=\"relative inline-flex rounded-full h-3 w-3 bg-blue-500\"></span>\n                </span>\n                Data Sync\n              </CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Synchronization status\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-3\">\n                <div className=\"flex items-center justify-between\">\n                  <span className={`text-sm ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>\n                    Metrics synced\n                  </span>\n                  <span className={`text-sm font-medium ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                    {new Date().toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit', second: '2-digit' })}\n                  </span>\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <span className={`text-sm ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>\n                    Charts updated\n                  </span>\n                  <span className={`text-sm font-medium ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                    {new Date().toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit', second: '2-digit' })}\n                  </span>\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <span className={`text-sm ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>\n                    Sync status\n                  </span>\n                  <span className={`text-sm font-medium ${isDarkMode ? 'text-blue-400' : 'text-blue-600'}`}>\n                    Active\n                  </span>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={`flex items-center gap-2 ${isDarkMode ? 'text-white' : ''}`}>\n                <span className=\"relative flex h-3 w-3\">\n                  <span className=\"animate-ping absolute inline-flex h-full w-full rounded-full bg-purple-400 opacity-75\"></span>\n                  <span className=\"relative inline-flex rounded-full h-3 w-3 bg-purple-500\"></span>\n                </span>\n                Activity Monitor\n              </CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Recent activity tracking\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-3\">\n                <div className=\"flex items-center justify-between\">\n                  <span className={`text-sm ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>\n                    Last activity\n                  </span>\n                  <span className={`text-sm font-medium ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                    {new Date().toLocaleTimeString()}\n                  </span>\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <span className={`text-sm ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>\n                    Events processed\n                  </span>\n                  <span className={`text-sm font-medium ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                    {Math.floor(Math.random() * 500) + 1000}\n                  </span>\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <span className={`text-sm ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>\n                    Monitor status\n                  </span>\n                  <span className={`text-sm font-medium ${isDarkMode ? 'text-purple-400' : 'text-purple-600'}`}>\n                    Running\n                  </span>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}",
    "error": null,
    "elapsed_time": 69.33697652816772,
    "success": true
  }
}