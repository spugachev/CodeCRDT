{
  "prompt_id": "markdown_editor",
  "prompt_name": "Premium Markdown Editor",
  "mode": "parallel",
  "run_number": 17,
  "timestamp": "2025-10-14T02:44:06.185176",
  "response_time": 54.30396032333374,
  "total_tokens": null,
  "response_content": "import { useState, useCallback } from 'react';\nimport ReactMarkdown from 'react-markdown';\nimport { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';\nimport { vscDarkPlus } from 'react-syntax-highlighter/dist/esm/styles/prism';\nimport { useRef } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Bold, Italic, Code, List, ListOrdered, Link, Image, Eye, EyeOff } from 'lucide-react';\nimport { motion, AnimatePresence } from 'framer-motion';\ninterface MarkdownComponents {\n  code?: any;\n  h1?: any;\n  h2?: any;\n  h3?: any;\n  p?: any;\n  ul?: any;\n  ol?: any;\n  li?: any;\n  blockquote?: any;\n  a?: any;\n  img?: any;\n  hr?: any;\n  strong?: any;\n  em?: any;\n}\n\nconst markdownComponents: MarkdownComponents = {\n  code({ node, inline, className, children, ...props }: any) {\n    const match = /language-(\\w+)/.exec(className || '');\n    return !inline && match ? (\n      <SyntaxHighlighter\n        style={vscDarkPlus}\n        language={match[1]}\n        PreTag=\"div\"\n        className=\"rounded-md my-4 text-sm\"\n        customStyle={{\n          background: '#1e1e1e',\n          padding: '1rem',\n          borderRadius: '0.5rem',\n          border: '1px solid #30363d',\n        }}\n        {...props}\n      >\n        {String(children).replace(/\\n$/, '')}\n      </SyntaxHighlighter>\n    ) : (\n      <code\n        className=\"bg-[#1e1e1e] text-[#d4d4d4] px-2 py-1 rounded text-sm font-mono border border-[#30363d]\"\n        {...props}\n      >\n        {children}\n      </code>\n    );\n  },\n  h1({ children }: any) {\n    return (\n      <h1 className=\"text-4xl font-bold mb-4 mt-6 text-gray-100 border-b border-[#30363d] pb-2\">\n        {children}\n      </h1>\n    );\n  },\n  h2({ children }: any) {\n    return (\n      <h2 className=\"text-3xl font-bold mb-3 mt-5 text-gray-100 border-b border-[#30363d] pb-2\">\n        {children}\n      </h2>\n    );\n  },\n  h3({ children }: any) {\n    return (\n      <h3 className=\"text-2xl font-semibold mb-3 mt-4 text-gray-200\">\n        {children}\n      </h3>\n    );\n  },\n  p({ children }: any) {\n    return <p className=\"mb-4 text-gray-300 leading-7\">{children}</p>;\n  },\n  ul({ children }: any) {\n    return <ul className=\"list-disc list-inside mb-4 space-y-2 text-gray-300\">{children}</ul>;\n  },\n  ol({ children }: any) {\n    return <ol className=\"list-decimal list-inside mb-4 space-y-2 text-gray-300\">{children}</ol>;\n  },\n  li({ children }: any) {\n    return <li className=\"ml-4 text-gray-300\">{children}</li>;\n  },\n  blockquote({ children }: any) {\n    return (\n      <blockquote className=\"border-l-4 border-blue-500 pl-4 py-2 my-4 bg-[#161b22] text-gray-300 italic\">\n        {children}\n      </blockquote>\n    );\n  },\n  a({ href, children }: any) {\n    return (\n      <a\n        href={href}\n        className=\"text-blue-400 hover:text-blue-300 underline transition-colors\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n      >\n        {children}\n      </a>\n    );\n  },\n  img({ src, alt }: any) {\n    return (\n      <img\n        src={src}\n        alt={alt}\n        className=\"max-w-full h-auto rounded-lg border border-[#30363d] my-4\"\n      />\n    );\n  },\n  hr() {\n    return <hr className=\"my-6 border-[#30363d]\" />;\n  },\n  strong({ children }: any) {\n    return <strong className=\"font-bold text-gray-100\">{children}</strong>;\n  },\n  em({ children }: any) {\n    return <em className=\"italic text-gray-200\">{children}</em>;\n  },\n};\n\ninterface ToolbarButton {\n  id: string;\n  icon: any;\n  label: string;\n  action: string;\n}\n\nconst toolbarButtons: ToolbarButton[] = [\n  { id: 'bold', icon: Bold, label: 'Bold', action: '**text**' },\n  { id: 'italic', icon: Italic, label: 'Italic', action: '*text*' },\n  { id: 'code', icon: Code, label: 'Code', action: '`code`' },\n  { id: 'list', icon: List, label: 'Bullet List', action: '- item' },\n  { id: 'ordered', icon: ListOrdered, label: 'Numbered List', action: '1. item' },\n  { id: 'link', icon: Link, label: 'Link', action: '[text](url)' },\n  { id: 'image', icon: Image, label: 'Image', action: '![alt](url)' }\n];\n\nconst mockMarkdownContent = `# Welcome to Premium Markdown Editor\n\n## Features\n\nThis is a **bold** statement and this is *italic* text.\n\n### Code Blocks\n\n\\`\\`\\`javascript\nfunction greet(name) {\n  console.log(\\`Hello, \\${name}!\\`);\n  return true;\n}\n\\`\\`\\`\n\n\\`\\`\\`python\ndef calculate(x, y):\n    result = x + y\n    return result\n\\`\\`\\`\n\n### Lists\n\n- First item\n- Second item\n- Third item\n\n1. Numbered one\n2. Numbered two\n3. Numbered three\n\n### Inline Code\n\nUse \\`const variable = 'value'\\` for inline code.\n\n### Links and Images\n\n[Visit Example](https://example.com)\n\n> This is a blockquote with important information.\n\n---\n\n**End of document**\n`;\n\nexport default function MarkdownEditor() {\n  const [markdown, setMarkdown] = useState(mockMarkdownContent);\n  const [showPreview, setShowPreview] = useState(true);\n  const [cursorPosition, setCursorPosition] = useState(0);\n\n  const handleMarkdownChange = useCallback((e: React.ChangeEvent<HTMLTextAreaElement>) => {\n    setMarkdown(e.target.value);\n    setCursorPosition(e.target.selectionStart);\n  }, []);\n\n  const togglePreview = useCallback(() => {\n    setShowPreview(prev => !prev);\n  }, []);\n\n  // Calculate stats\n  const wordCount = markdown.trim() ? markdown.trim().split(/\\s+/).length : 0;\n  const charCount = markdown.length;\n  const readingTime = Math.ceil(wordCount / 200); // Average reading speed: 200 words per minute\n\n  const handleToolbarAction = useCallback((action: string) => {\n    const textareaRef = useRef<HTMLTextAreaElement>(null);\n    \n    if (!textareaRef.current) return;\n    \n    const textarea = textareaRef.current;\n    const start = textarea.selectionStart;\n    const end = textarea.selectionEnd;\n    const selectedText = markdown.substring(start, end);\n    \n    let newText = '';\n    let cursorOffset = 0;\n    \n    // Handle different markdown syntax insertions\n    if (action.includes('**text**')) {\n      // Bold\n      newText = selectedText ? `**${selectedText}**` : '**text**';\n      cursorOffset = selectedText ? newText.length : 2;\n    } else if (action.includes('*text*')) {\n      // Italic\n      newText = selectedText ? `*${selectedText}*` : '*text*';\n      cursorOffset = selectedText ? newText.length : 1;\n    } else if (action.includes('`code`')) {\n      // Inline code\n      newText = selectedText ? `\\`${selectedText}\\`` : '`code`';\n      cursorOffset = selectedText ? newText.length : 1;\n    } else if (action.includes('[text](url)')) {\n      // Link\n      newText = selectedText ? `[${selectedText}](url)` : '[text](url)';\n      cursorOffset = selectedText ? selectedText.length + 3 : 1;\n    } else if (action.includes('![alt](url)')) {\n      // Image\n      newText = selectedText ? `![${selectedText}](url)` : '![alt](url)';\n      cursorOffset = selectedText ? selectedText.length + 4 : 2;\n    } else if (action.includes('- item')) {\n      // Bullet list\n      const lineStart = markdown.lastIndexOf('\\n', start - 1) + 1;\n      const isNewLine = start === lineStart || start === 0;\n      newText = isNewLine ? '- ' : '\\n- ';\n      cursorOffset = newText.length;\n    } else if (action.includes('1. item')) {\n      // Numbered list\n      const lineStart = markdown.lastIndexOf('\\n', start - 1) + 1;\n      const isNewLine = start === lineStart || start === 0;\n      newText = isNewLine ? '1. ' : '\\n1. ';\n      cursorOffset = newText.length;\n    }\n    \n    // Insert the new text\n    const newMarkdown = markdown.substring(0, start) + newText + markdown.substring(end);\n    setMarkdown(newMarkdown);\n    \n    // Set cursor position after insertion\n    setTimeout(() => {\n      if (textareaRef.current) {\n        const newCursorPos = start + cursorOffset;\n        textareaRef.current.focus();\n        textareaRef.current.setSelectionRange(newCursorPos, newCursorPos);\n        setCursorPosition(newCursorPos);\n      }\n    }, 0);\n  }, [markdown, cursorPosition]);\n\n  return (\n    <div className=\"min-h-screen bg-[#0d1117] text-gray-100\">\n      <div className=\"container mx-auto px-4 py-6\">\n        {/* Header */}\n        <div className=\"mb-6 flex items-center justify-between\">\n          <h1 className=\"text-3xl font-bold bg-gradient-to-r from-blue-400 to-purple-500 bg-clip-text text-transparent\">\n            Premium Markdown Editor\n          </h1>\n          <Button\n            onClick={togglePreview}\n            variant=\"outline\"\n            className=\"bg-[#161b22] border-[#30363d] hover:bg-[#1f2937] text-gray-300\"\n          >\n            {showPreview ? <EyeOff className=\"w-4 h-4 mr-2\" /> : <Eye className=\"w-4 h-4 mr-2\" />}\n            {showPreview ? 'Hide Preview' : 'Show Preview'}\n          </Button>\n        </div>\n\n        {/* Floating Toolbar */}\n        <motion.div\n          initial={{ opacity: 0, y: -20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.5 }}\n          className=\"mb-6 bg-[#161b22] border border-[#30363d] rounded-lg p-3 shadow-xl\"\n        >\n          <div className=\"flex flex-wrap gap-2 justify-center\">\n            {toolbarButtons.map((button, index) => (\n              <motion.div\n                key={button.id}\n                initial={{ opacity: 0, scale: 0.8 }}\n                animate={{ opacity: 1, scale: 1 }}\n                transition={{ delay: index * 0.05, duration: 0.3 }}\n                whileHover={{ scale: 1.1, y: -2 }}\n                whileTap={{ scale: 0.95 }}\n              >\n                <Button\n                  onClick={() => handleToolbarAction(button.action)}\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  className=\"bg-[#0d1117] border border-[#30363d] hover:bg-gradient-to-r hover:from-blue-500/20 hover:to-purple-500/20 hover:border-blue-400/50 text-gray-300 hover:text-white transition-all duration-300 group relative\"\n                  title={button.label}\n                >\n                  <button.icon className=\"w-4 h-4 group-hover:text-blue-400 transition-colors duration-300\" />\n                  <motion.span\n                    initial={{ opacity: 0, y: 10 }}\n                    whileHover={{ opacity: 1, y: 0 }}\n                    className=\"absolute -bottom-8 left-1/2 transform -translate-x-1/2 text-xs bg-[#1f2937] px-2 py-1 rounded border border-[#30363d] whitespace-nowrap pointer-events-none opacity-0 group-hover:opacity-100 transition-opacity duration-300\"\n                  >\n                    {button.label}\n                  </motion.span>\n                </Button>\n              </motion.div>\n            ))}\n          </div>\n        </motion.div>\n\n        {/* Editor Layout */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n          {/* Editor Panel */}\n          <motion.div\n            layout\n            className=\"relative\"\n          >\n            <div className=\"bg-[#0d1117] border border-[#30363d] rounded-lg overflow-hidden shadow-2xl\">\n              <div className=\"bg-[#161b22] px-4 py-3 border-b border-[#30363d] flex items-center justify-between\">\n                <span className=\"text-sm font-medium text-gray-400\">Editor</span>\n                <div className=\"flex gap-2\">\n                  <div className=\"w-3 h-3 rounded-full bg-red-500\"></div>\n                  <div className=\"w-3 h-3 rounded-full bg-yellow-500\"></div>\n                  <div className=\"w-3 h-3 rounded-full bg-green-500\"></div>\n                </div>\n              </div>\n              <textarea\n                value={markdown}\n                onChange={handleMarkdownChange}\n                className=\"w-full h-[600px] bg-[#0d1117] text-gray-100 p-6 font-mono text-sm resize-none focus:outline-none\"\n                placeholder=\"Start writing your markdown...\"\n                spellCheck={false}\n              />\n            </div>\n          </motion.div>\n\n          {/* Preview Panel */}\n          <AnimatePresence mode=\"wait\">\n            {showPreview && (\n              <motion.div\n                initial={{ opacity: 0, x: 20 }}\n                animate={{ opacity: 1, x: 0 }}\n                exit={{ opacity: 0, x: 20 }}\n                transition={{ duration: 0.3 }}\n                className=\"relative\"\n              >\n                <div className=\"bg-[#0d1117] border border-[#30363d] rounded-lg overflow-hidden shadow-2xl\">\n                  <div className=\"bg-[#161b22] px-4 py-3 border-b border-[#30363d]\">\n                    <span className=\"text-sm font-medium text-gray-400\">Preview</span>\n                  </div>\n                  <div className=\"p-6 h-[600px] overflow-y-auto\">\n                    <ReactMarkdown components={markdownComponents}>\n                      {markdown}\n                    </ReactMarkdown>\n                  </div>\n                </div>\n              </motion.div>\n            )}\n          </AnimatePresence>\n        </div>\n\n        {/* Stats Bar */}\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ delay: 0.2, duration: 0.3 }}\n          className=\"mt-6 bg-[#161b22] border border-[#30363d] rounded-lg p-4\"\n        >\n          <div className=\"flex items-center justify-center gap-8 text-sm\">\n            <div className=\"flex items-center gap-2\">\n              <span className=\"text-gray-400\">Words:</span>\n              <span className=\"font-semibold text-blue-400\">{wordCount}</span>\n            </div>\n            <div className=\"w-px h-4 bg-[#30363d]\"></div>\n            <div className=\"flex items-center gap-2\">\n              <span className=\"text-gray-400\">Characters:</span>\n              <span className=\"font-semibold text-purple-400\">{charCount}</span>\n            </div>\n            <div className=\"w-px h-4 bg-[#30363d]\"></div>\n            <div className=\"flex items-center gap-2\">\n              <span className=\"text-gray-400\">Reading Time:</span>\n              <span className=\"font-semibold text-green-400\">{readingTime} min</span>\n            </div>\n          </div>\n        </motion.div>\n      </div>\n    </div>\n  );\n}",
  "error": null,
  "overall_score": 50,
  "code_quality_score": 14,
  "architecture_score": 12,
  "performance_score": 11,
  "accessibility_score": 13,
  "metadata": {
    "document_id": "eval_room_dc9bbdf1716b",
    "prompt_category": "productivity",
    "prompt_complexity": 8.0
  },
  "raw_response": {
    "document_id": "eval_room_dc9bbdf1716b",
    "mode": "parallel",
    "prompt": "Create a premium markdown editor with dark theme, syntax highlighting with vibrant colors, smooth live preview transitions, floating toolbar with hover effects, and code block styling like VS Code",
    "content": "import { useState, useCallback } from 'react';\nimport ReactMarkdown from 'react-markdown';\nimport { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';\nimport { vscDarkPlus } from 'react-syntax-highlighter/dist/esm/styles/prism';\nimport { useRef } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Bold, Italic, Code, List, ListOrdered, Link, Image, Eye, EyeOff } from 'lucide-react';\nimport { motion, AnimatePresence } from 'framer-motion';\ninterface MarkdownComponents {\n  code?: any;\n  h1?: any;\n  h2?: any;\n  h3?: any;\n  p?: any;\n  ul?: any;\n  ol?: any;\n  li?: any;\n  blockquote?: any;\n  a?: any;\n  img?: any;\n  hr?: any;\n  strong?: any;\n  em?: any;\n}\n\nconst markdownComponents: MarkdownComponents = {\n  code({ node, inline, className, children, ...props }: any) {\n    const match = /language-(\\w+)/.exec(className || '');\n    return !inline && match ? (\n      <SyntaxHighlighter\n        style={vscDarkPlus}\n        language={match[1]}\n        PreTag=\"div\"\n        className=\"rounded-md my-4 text-sm\"\n        customStyle={{\n          background: '#1e1e1e',\n          padding: '1rem',\n          borderRadius: '0.5rem',\n          border: '1px solid #30363d',\n        }}\n        {...props}\n      >\n        {String(children).replace(/\\n$/, '')}\n      </SyntaxHighlighter>\n    ) : (\n      <code\n        className=\"bg-[#1e1e1e] text-[#d4d4d4] px-2 py-1 rounded text-sm font-mono border border-[#30363d]\"\n        {...props}\n      >\n        {children}\n      </code>\n    );\n  },\n  h1({ children }: any) {\n    return (\n      <h1 className=\"text-4xl font-bold mb-4 mt-6 text-gray-100 border-b border-[#30363d] pb-2\">\n        {children}\n      </h1>\n    );\n  },\n  h2({ children }: any) {\n    return (\n      <h2 className=\"text-3xl font-bold mb-3 mt-5 text-gray-100 border-b border-[#30363d] pb-2\">\n        {children}\n      </h2>\n    );\n  },\n  h3({ children }: any) {\n    return (\n      <h3 className=\"text-2xl font-semibold mb-3 mt-4 text-gray-200\">\n        {children}\n      </h3>\n    );\n  },\n  p({ children }: any) {\n    return <p className=\"mb-4 text-gray-300 leading-7\">{children}</p>;\n  },\n  ul({ children }: any) {\n    return <ul className=\"list-disc list-inside mb-4 space-y-2 text-gray-300\">{children}</ul>;\n  },\n  ol({ children }: any) {\n    return <ol className=\"list-decimal list-inside mb-4 space-y-2 text-gray-300\">{children}</ol>;\n  },\n  li({ children }: any) {\n    return <li className=\"ml-4 text-gray-300\">{children}</li>;\n  },\n  blockquote({ children }: any) {\n    return (\n      <blockquote className=\"border-l-4 border-blue-500 pl-4 py-2 my-4 bg-[#161b22] text-gray-300 italic\">\n        {children}\n      </blockquote>\n    );\n  },\n  a({ href, children }: any) {\n    return (\n      <a\n        href={href}\n        className=\"text-blue-400 hover:text-blue-300 underline transition-colors\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n      >\n        {children}\n      </a>\n    );\n  },\n  img({ src, alt }: any) {\n    return (\n      <img\n        src={src}\n        alt={alt}\n        className=\"max-w-full h-auto rounded-lg border border-[#30363d] my-4\"\n      />\n    );\n  },\n  hr() {\n    return <hr className=\"my-6 border-[#30363d]\" />;\n  },\n  strong({ children }: any) {\n    return <strong className=\"font-bold text-gray-100\">{children}</strong>;\n  },\n  em({ children }: any) {\n    return <em className=\"italic text-gray-200\">{children}</em>;\n  },\n};\n\ninterface ToolbarButton {\n  id: string;\n  icon: any;\n  label: string;\n  action: string;\n}\n\nconst toolbarButtons: ToolbarButton[] = [\n  { id: 'bold', icon: Bold, label: 'Bold', action: '**text**' },\n  { id: 'italic', icon: Italic, label: 'Italic', action: '*text*' },\n  { id: 'code', icon: Code, label: 'Code', action: '`code`' },\n  { id: 'list', icon: List, label: 'Bullet List', action: '- item' },\n  { id: 'ordered', icon: ListOrdered, label: 'Numbered List', action: '1. item' },\n  { id: 'link', icon: Link, label: 'Link', action: '[text](url)' },\n  { id: 'image', icon: Image, label: 'Image', action: '![alt](url)' }\n];\n\nconst mockMarkdownContent = `# Welcome to Premium Markdown Editor\n\n## Features\n\nThis is a **bold** statement and this is *italic* text.\n\n### Code Blocks\n\n\\`\\`\\`javascript\nfunction greet(name) {\n  console.log(\\`Hello, \\${name}!\\`);\n  return true;\n}\n\\`\\`\\`\n\n\\`\\`\\`python\ndef calculate(x, y):\n    result = x + y\n    return result\n\\`\\`\\`\n\n### Lists\n\n- First item\n- Second item\n- Third item\n\n1. Numbered one\n2. Numbered two\n3. Numbered three\n\n### Inline Code\n\nUse \\`const variable = 'value'\\` for inline code.\n\n### Links and Images\n\n[Visit Example](https://example.com)\n\n> This is a blockquote with important information.\n\n---\n\n**End of document**\n`;\n\nexport default function MarkdownEditor() {\n  const [markdown, setMarkdown] = useState(mockMarkdownContent);\n  const [showPreview, setShowPreview] = useState(true);\n  const [cursorPosition, setCursorPosition] = useState(0);\n\n  const handleMarkdownChange = useCallback((e: React.ChangeEvent<HTMLTextAreaElement>) => {\n    setMarkdown(e.target.value);\n    setCursorPosition(e.target.selectionStart);\n  }, []);\n\n  const togglePreview = useCallback(() => {\n    setShowPreview(prev => !prev);\n  }, []);\n\n  // Calculate stats\n  const wordCount = markdown.trim() ? markdown.trim().split(/\\s+/).length : 0;\n  const charCount = markdown.length;\n  const readingTime = Math.ceil(wordCount / 200); // Average reading speed: 200 words per minute\n\n  const handleToolbarAction = useCallback((action: string) => {\n    const textareaRef = useRef<HTMLTextAreaElement>(null);\n    \n    if (!textareaRef.current) return;\n    \n    const textarea = textareaRef.current;\n    const start = textarea.selectionStart;\n    const end = textarea.selectionEnd;\n    const selectedText = markdown.substring(start, end);\n    \n    let newText = '';\n    let cursorOffset = 0;\n    \n    // Handle different markdown syntax insertions\n    if (action.includes('**text**')) {\n      // Bold\n      newText = selectedText ? `**${selectedText}**` : '**text**';\n      cursorOffset = selectedText ? newText.length : 2;\n    } else if (action.includes('*text*')) {\n      // Italic\n      newText = selectedText ? `*${selectedText}*` : '*text*';\n      cursorOffset = selectedText ? newText.length : 1;\n    } else if (action.includes('`code`')) {\n      // Inline code\n      newText = selectedText ? `\\`${selectedText}\\`` : '`code`';\n      cursorOffset = selectedText ? newText.length : 1;\n    } else if (action.includes('[text](url)')) {\n      // Link\n      newText = selectedText ? `[${selectedText}](url)` : '[text](url)';\n      cursorOffset = selectedText ? selectedText.length + 3 : 1;\n    } else if (action.includes('![alt](url)')) {\n      // Image\n      newText = selectedText ? `![${selectedText}](url)` : '![alt](url)';\n      cursorOffset = selectedText ? selectedText.length + 4 : 2;\n    } else if (action.includes('- item')) {\n      // Bullet list\n      const lineStart = markdown.lastIndexOf('\\n', start - 1) + 1;\n      const isNewLine = start === lineStart || start === 0;\n      newText = isNewLine ? '- ' : '\\n- ';\n      cursorOffset = newText.length;\n    } else if (action.includes('1. item')) {\n      // Numbered list\n      const lineStart = markdown.lastIndexOf('\\n', start - 1) + 1;\n      const isNewLine = start === lineStart || start === 0;\n      newText = isNewLine ? '1. ' : '\\n1. ';\n      cursorOffset = newText.length;\n    }\n    \n    // Insert the new text\n    const newMarkdown = markdown.substring(0, start) + newText + markdown.substring(end);\n    setMarkdown(newMarkdown);\n    \n    // Set cursor position after insertion\n    setTimeout(() => {\n      if (textareaRef.current) {\n        const newCursorPos = start + cursorOffset;\n        textareaRef.current.focus();\n        textareaRef.current.setSelectionRange(newCursorPos, newCursorPos);\n        setCursorPosition(newCursorPos);\n      }\n    }, 0);\n  }, [markdown, cursorPosition]);\n\n  return (\n    <div className=\"min-h-screen bg-[#0d1117] text-gray-100\">\n      <div className=\"container mx-auto px-4 py-6\">\n        {/* Header */}\n        <div className=\"mb-6 flex items-center justify-between\">\n          <h1 className=\"text-3xl font-bold bg-gradient-to-r from-blue-400 to-purple-500 bg-clip-text text-transparent\">\n            Premium Markdown Editor\n          </h1>\n          <Button\n            onClick={togglePreview}\n            variant=\"outline\"\n            className=\"bg-[#161b22] border-[#30363d] hover:bg-[#1f2937] text-gray-300\"\n          >\n            {showPreview ? <EyeOff className=\"w-4 h-4 mr-2\" /> : <Eye className=\"w-4 h-4 mr-2\" />}\n            {showPreview ? 'Hide Preview' : 'Show Preview'}\n          </Button>\n        </div>\n\n        {/* Floating Toolbar */}\n        <motion.div\n          initial={{ opacity: 0, y: -20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.5 }}\n          className=\"mb-6 bg-[#161b22] border border-[#30363d] rounded-lg p-3 shadow-xl\"\n        >\n          <div className=\"flex flex-wrap gap-2 justify-center\">\n            {toolbarButtons.map((button, index) => (\n              <motion.div\n                key={button.id}\n                initial={{ opacity: 0, scale: 0.8 }}\n                animate={{ opacity: 1, scale: 1 }}\n                transition={{ delay: index * 0.05, duration: 0.3 }}\n                whileHover={{ scale: 1.1, y: -2 }}\n                whileTap={{ scale: 0.95 }}\n              >\n                <Button\n                  onClick={() => handleToolbarAction(button.action)}\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  className=\"bg-[#0d1117] border border-[#30363d] hover:bg-gradient-to-r hover:from-blue-500/20 hover:to-purple-500/20 hover:border-blue-400/50 text-gray-300 hover:text-white transition-all duration-300 group relative\"\n                  title={button.label}\n                >\n                  <button.icon className=\"w-4 h-4 group-hover:text-blue-400 transition-colors duration-300\" />\n                  <motion.span\n                    initial={{ opacity: 0, y: 10 }}\n                    whileHover={{ opacity: 1, y: 0 }}\n                    className=\"absolute -bottom-8 left-1/2 transform -translate-x-1/2 text-xs bg-[#1f2937] px-2 py-1 rounded border border-[#30363d] whitespace-nowrap pointer-events-none opacity-0 group-hover:opacity-100 transition-opacity duration-300\"\n                  >\n                    {button.label}\n                  </motion.span>\n                </Button>\n              </motion.div>\n            ))}\n          </div>\n        </motion.div>\n\n        {/* Editor Layout */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n          {/* Editor Panel */}\n          <motion.div\n            layout\n            className=\"relative\"\n          >\n            <div className=\"bg-[#0d1117] border border-[#30363d] rounded-lg overflow-hidden shadow-2xl\">\n              <div className=\"bg-[#161b22] px-4 py-3 border-b border-[#30363d] flex items-center justify-between\">\n                <span className=\"text-sm font-medium text-gray-400\">Editor</span>\n                <div className=\"flex gap-2\">\n                  <div className=\"w-3 h-3 rounded-full bg-red-500\"></div>\n                  <div className=\"w-3 h-3 rounded-full bg-yellow-500\"></div>\n                  <div className=\"w-3 h-3 rounded-full bg-green-500\"></div>\n                </div>\n              </div>\n              <textarea\n                value={markdown}\n                onChange={handleMarkdownChange}\n                className=\"w-full h-[600px] bg-[#0d1117] text-gray-100 p-6 font-mono text-sm resize-none focus:outline-none\"\n                placeholder=\"Start writing your markdown...\"\n                spellCheck={false}\n              />\n            </div>\n          </motion.div>\n\n          {/* Preview Panel */}\n          <AnimatePresence mode=\"wait\">\n            {showPreview && (\n              <motion.div\n                initial={{ opacity: 0, x: 20 }}\n                animate={{ opacity: 1, x: 0 }}\n                exit={{ opacity: 0, x: 20 }}\n                transition={{ duration: 0.3 }}\n                className=\"relative\"\n              >\n                <div className=\"bg-[#0d1117] border border-[#30363d] rounded-lg overflow-hidden shadow-2xl\">\n                  <div className=\"bg-[#161b22] px-4 py-3 border-b border-[#30363d]\">\n                    <span className=\"text-sm font-medium text-gray-400\">Preview</span>\n                  </div>\n                  <div className=\"p-6 h-[600px] overflow-y-auto\">\n                    <ReactMarkdown components={markdownComponents}>\n                      {markdown}\n                    </ReactMarkdown>\n                  </div>\n                </div>\n              </motion.div>\n            )}\n          </AnimatePresence>\n        </div>\n\n        {/* Stats Bar */}\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ delay: 0.2, duration: 0.3 }}\n          className=\"mt-6 bg-[#161b22] border border-[#30363d] rounded-lg p-4\"\n        >\n          <div className=\"flex items-center justify-center gap-8 text-sm\">\n            <div className=\"flex items-center gap-2\">\n              <span className=\"text-gray-400\">Words:</span>\n              <span className=\"font-semibold text-blue-400\">{wordCount}</span>\n            </div>\n            <div className=\"w-px h-4 bg-[#30363d]\"></div>\n            <div className=\"flex items-center gap-2\">\n              <span className=\"text-gray-400\">Characters:</span>\n              <span className=\"font-semibold text-purple-400\">{charCount}</span>\n            </div>\n            <div className=\"w-px h-4 bg-[#30363d]\"></div>\n            <div className=\"flex items-center gap-2\">\n              <span className=\"text-gray-400\">Reading Time:</span>\n              <span className=\"font-semibold text-green-400\">{readingTime} min</span>\n            </div>\n          </div>\n        </motion.div>\n      </div>\n    </div>\n  );\n}",
    "error": null,
    "elapsed_time": 54.30396032333374,
    "success": true
  }
}