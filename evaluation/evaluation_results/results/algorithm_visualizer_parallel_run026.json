{
  "prompt_id": "algorithm_visualizer",
  "prompt_name": "Algorithm Visualizer",
  "mode": "parallel",
  "run_number": 26,
  "timestamp": "2025-10-13T23:00:26.294134",
  "response_time": 99.38443613052368,
  "total_tokens": null,
  "response_content": "import { useState, useCallback } from 'react';import React from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Slider } from '@/components/ui/slider';\nimport { Play, Pause, RotateCcw, Zap, BarChart3 } from 'lucide-react';\nimport { Activity, TrendingUp, Shuffle } from 'lucide-react';\nimport { motion } from 'framer-motion';\n\ninterface ArrayElement {\n  value: number;\n  id: string;\n  isComparing?: boolean;\n  isSwapping?: boolean;\n  isSorted?: boolean;\n}\n\ninterface AlgorithmStep {\n  array: ArrayElement[];\n  comparingIndices: number[];\n  swappingIndices: number[];\n  sortedIndices: number[];\n}\n\ntype AlgorithmType = 'bubble' | 'quick' | 'merge' | 'insertion';\n\nconst NEON_COLORS = [\n  '#00ffff',\n  '#ff00ff', \n  '#00ff00',\n  '#ffff00',\n  '#ff0066',\n  '#00ffaa'\n];\n\nconst mockAlgorithms = [\n  { id: 'bubble', name: 'Bubble Sort', complexity: 'O(n\u00b2)' },\n  { id: 'quick', name: 'Quick Sort', complexity: 'O(n log n)' },\n  { id: 'merge', name: 'Merge Sort', complexity: 'O(n log n)' },\n  { id: 'insertion', name: 'Insertion Sort', complexity: 'O(n\u00b2)' }\n];\n\nexport default function AlgorithmVisualizer() {\n  const [array, setArray] = useState<ArrayElement[]>([]);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [speed, setSpeed] = useState([50]);\n  const [arraySize, setArraySize] = useState([20]);\n  const [selectedAlgorithm, setSelectedAlgorithm] = useState<AlgorithmType>('bubble');\n  const [currentStep, setCurrentStep] = useState(0);\n  const [steps, setSteps] = useState<AlgorithmStep[]>([]);\n  const [comparisons, setComparisons] = useState(0);\n  const [swaps, setSwaps] = useState(0);\n\n  // Calculate statistics from current step\n  React.useEffect(() => {\n    if (steps.length > 0 && currentStep > 0) {\n      let compCount = 0;\n      let swapCount = 0;\n      \n      for (let i = 0; i < Math.min(currentStep, steps.length); i++) {\n        if (steps[i].comparingIndices.length > 0) {\n          compCount++;\n        }\n        if (steps[i].swappingIndices.length > 0) {\n          swapCount++;\n        }\n      }\n      \n      setComparisons(compCount);\n      setSwaps(swapCount);\n    } else if (currentStep === 0) {\n      setComparisons(0);\n      setSwaps(0);\n    }\n  }, [currentStep, steps]);\n\n  const generateRandomArray = useCallback(() => {\n    const newArray: ArrayElement[] = Array.from({ length: arraySize[0] }, (_, i) => ({\n      value: Math.floor(Math.random() * 100) + 5,\n      id: `element-${i}-${Date.now()}`,\n      isComparing: false,\n      isSwapping: false,\n      isSorted: false\n    }));\n    setArray(newArray);\n    setSteps([]);\n    setCurrentStep(0);\n    setIsPlaying(false);\n  }, [arraySize]);\n\n  const resetVisualization = useCallback(() => {\n\nsetIsPlaying(false);\n    setCurrentStep(0);\n    setSteps([]);\n    generateRandomArray();\n        \n  }, [generateRandomArray]);\n\n  // Animation effect for step-by-step visualization\n  const animateSteps = useCallback(() => {\n    if (currentStep < steps.length && isPlaying) {\n      const timer = setTimeout(() => {\n        setCurrentStep(prev => prev + 1);\n      }, 1000 - speed[0] * 9); // Convert speed slider (0-100) to delay (1000ms-100ms)\n      \n      return () => clearTimeout(timer);\n    } else if (currentStep >= steps.length && isPlaying) {\n      setIsPlaying(false);\n    }\n  }, [currentStep, steps.length, isPlaying, speed]);\n\n  // Run animation effect\n  React.useEffect(() => {\n    const cleanup = animateSteps();\n    return cleanup;\n  }, [animateSteps]);\n  const startVisualization = useCallback(() => {\n    if (steps.length === 0 || currentStep >= steps.length) {\n      return;\n    }\n    setIsPlaying(true);\n  }, [steps, speed, currentStep]);\n\n  const pauseVisualization = useCallback(() => {\n\nsetIsPlaying(false);\n  });\n\n  const generateSortingSteps = useCallback((algorithm: AlgorithmType) => {\n        if (array.length === 0) return;\n\n    const steps: AlgorithmStep[] = [];\n    const arr = array.map(el => ({ ...el }));\n\n    const addStep = (\n      currentArray: ArrayElement[],\n      comparing: number[] = [],\n      swapping: number[] = [],\n      sorted: number[] = []\n    ) => {\n      steps.push({\n        array: currentArray.map(el => ({ ...el })),\n        comparingIndices: [...comparing],\n        swappingIndices: [...swapping],\n        sortedIndices: [...sorted]\n      });\n    };\n\n    if (algorithm === 'bubble') {\n      const sortedIndices: number[] = [];\n      for (let i = 0; i < arr.length - 1; i++) {\n        for (let j = 0; j < arr.length - i - 1; j++) {\n          addStep(arr, [j, j + 1], [], sortedIndices);\n          \n          if (arr[j].value > arr[j + 1].value) {\n            addStep(arr, [], [j, j + 1], sortedIndices);\n            [arr[j], arr[j + 1]] = [arr[j + 1], arr[j]];\n            addStep(arr, [], [], sortedIndices);\n          }\n        }\n        sortedIndices.push(arr.length - i - 1);\n        addStep(arr, [], [], sortedIndices);\n      }\n      sortedIndices.push(0);\n      addStep(arr, [], [], sortedIndices);\n    } else if (algorithm === 'insertion') {\n      const sortedIndices: number[] = [0];\n      addStep(arr, [], [], sortedIndices);\n      \n      for (let i = 1; i < arr.length; i++) {\n        const key = arr[i];\n        let j = i - 1;\n        \n        addStep(arr, [i], [], sortedIndices);\n        \n        while (j >= 0 && arr[j].value > key.value) {\n          addStep(arr, [j, j + 1], [], sortedIndices);\n          addStep(arr, [], [j, j + 1], sortedIndices);\n          arr[j + 1] = arr[j];\n          addStep(arr, [], [], sortedIndices);\n          j--;\n        }\n        \n        arr[j + 1] = key;\n        sortedIndices.push(i);\n        addStep(arr, [], [], sortedIndices);\n      }\n    } else if (algorithm === 'quick') {\n      const sortedIndices: number[] = [];\n      \n      const partition = (low: number, high: number): number => {\n        const pivot = arr[high];\n        addStep(arr, [high], [], sortedIndices);\n        let i = low - 1;\n        \n        for (let j = low; j < high; j++) {\n          addStep(arr, [j, high], [], sortedIndices);\n          \n          if (arr[j].value < pivot.value) {\n            i++;\n            addStep(arr, [], [i, j], sortedIndices);\n            [arr[i], arr[j]] = [arr[j], arr[i]];\n            addStep(arr, [], [], sortedIndices);\n          }\n        }\n        \n        addStep(arr, [], [i + 1, high], sortedIndices);\n        [arr[i + 1], arr[high]] = [arr[high], arr[i + 1]];\n        sortedIndices.push(i + 1);\n        addStep(arr, [], [], sortedIndices);\n        \n        return i + 1;\n      };\n      \n      const quickSort = (low: number, high: number) => {\n        if (low < high) {\n          const pi = partition(low, high);\n          quickSort(low, pi - 1);\n          quickSort(pi + 1, high);\n        } else if (low === high) {\n          sortedIndices.push(low);\n          addStep(arr, [], [], sortedIndices);\n        }\n      };\n      \n      quickSort(0, arr.length - 1);\n    } else if (algorithm === 'merge') {\n      const sortedIndices: number[] = [];\n      \n      const merge = (left: number, mid: number, right: number) => {\n        const leftArr = arr.slice(left, mid + 1);\n        const rightArr = arr.slice(mid + 1, right + 1);\n        \n        let i = 0, j = 0, k = left;\n        \n        while (i < leftArr.length && j < rightArr.length) {\n          addStep(arr, [left + i, mid + 1 + j], [], sortedIndices);\n          \n          if (leftArr[i].value <= rightArr[j].value) {\n            addStep(arr, [], [k], sortedIndices);\n            arr[k] = leftArr[i];\n            addStep(arr, [], [], sortedIndices);\n            i++;\n          } else {\n            addStep(arr, [], [k], sortedIndices);\n            arr[k] = rightArr[j];\n            addStep(arr, [], [], sortedIndices);\n            j++;\n          }\n          k++;\n        }\n        \n        while (i < leftArr.length) {\n          addStep(arr, [], [k], sortedIndices);\n          arr[k] = leftArr[i];\n          addStep(arr, [], [], sortedIndices);\n          i++;\n          k++;\n        }\n        \n        while (j < rightArr.length) {\n          addStep(arr, [], [k], sortedIndices);\n          arr[k] = rightArr[j];\n          addStep(arr, [], [], sortedIndices);\n          j++;\n          k++;\n        }\n        \n        if (left === 0 && right === arr.length - 1) {\n          for (let idx = 0; idx < arr.length; idx++) {\n            sortedIndices.push(idx);\n          }\n          addStep(arr, [], [], sortedIndices);\n        }\n      };\n      \n      const mergeSort = (left: number, right: number) => {\n        if (left < right) {\n          const mid = Math.floor((left + right) / 2);\n          mergeSort(left, mid);\n          mergeSort(mid + 1, right);\n          merge(left, mid, right);\n        }\n      };\n      \n      mergeSort(0, arr.length - 1);\n    }\n\n    setSteps(steps);\n    setCurrentStep(0);\n  }, [array]);\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-gray-900 via-purple-900 to-gray-900 p-8\">\n      <div className=\"max-w-7xl mx-auto space-y-8\">\n        <motion.div\n          initial={{ opacity: 0, y: -20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.8 }}\n          className=\"text-center space-y-4\"\n        >\n          <motion.h1\n            className=\"text-6xl font-bold bg-gradient-to-r from-cyan-400 via-purple-400 to-pink-400 bg-clip-text text-transparent\"\n            animate={{\n              textShadow: [\n                '0 0 20px rgba(0, 255, 255, 0.5)',\n                '0 0 40px rgba(255, 0, 255, 0.5)',\n                '0 0 20px rgba(0, 255, 255, 0.5)'\n              ]\n            }}\n            transition={{ duration: 2, repeat: Infinity }}\n          >\n            Algorithm Visualizer\n          </motion.h1>\n          \n          <div className=\"flex items-center justify-center gap-4\">\n            <motion.div\n              className=\"flex items-center gap-2 px-6 py-3 bg-gray-800/50 backdrop-blur-sm rounded-lg border border-cyan-500/30\"\n              whileHover={{ scale: 1.05, borderColor: 'rgba(0, 255, 255, 0.6)' }}\n            >\n              <BarChart3 className=\"w-5 h-5 text-cyan-400\" />\n              <span className=\"text-xl font-semibold text-white\">\n                {mockAlgorithms.find(a => a.id === selectedAlgorithm)?.name}\n              </span>\n            </motion.div>\n            \n            <motion.div\n              className=\"px-4 py-2 bg-gradient-to-r from-purple-600/30 to-pink-600/30 backdrop-blur-sm rounded-full border border-purple-400/50\"\n              animate={{\n                boxShadow: [\n                  '0 0 20px rgba(168, 85, 247, 0.4)',\n                  '0 0 30px rgba(236, 72, 153, 0.4)',\n                  '0 0 20px rgba(168, 85, 247, 0.4)'\n                ]\n              }}\n              transition={{ duration: 2, repeat: Infinity }}\n            >\n              <span className=\"text-sm font-mono text-purple-200\">\n                {mockAlgorithms.find(a => a.id === selectedAlgorithm)?.complexity}\n              </span>\n            </motion.div>\n          </div>\n        </motion.div></parameter>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-6\">\n          <div className=\"lg:col-span-1 space-y-6\">\n            <motion.div\n              initial={{ opacity: 0, x: -50 }}\n              animate={{ opacity: 1, x: 0 }}\n              className=\"bg-gray-900/50 backdrop-blur-lg border border-cyan-500/30 rounded-xl p-6 shadow-[0_0_30px_rgba(0,255,255,0.3)] hover:shadow-[0_0_50px_rgba(0,255,255,0.5)] transition-shadow duration-300\"\n            >\n              <div className=\"space-y-6\">\n                {/* Algorithm Selection */}\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center gap-2 text-cyan-400 font-semibold\">\n                    <Zap className=\"w-4 h-4\" />\n                    <span className=\"text-sm uppercase tracking-wider\">Algorithm</span>\n                  </div>\n                  <div className=\"grid grid-cols-1 gap-2\">\n                    {mockAlgorithms.map((algo) => (\n                      <motion.button\n                        key={algo.id}\n                        whileHover={{ scale: 1.02 }}\n                        whileTap={{ scale: 0.98 }}\n                        onClick={() => setSelectedAlgorithm(algo.id as AlgorithmType)}\n                        className={`p-3 rounded-lg border transition-all duration-300 text-left ${\n                          selectedAlgorithm === algo.id\n                            ? 'bg-cyan-500/20 border-cyan-400 shadow-[0_0_20px_rgba(0,255,255,0.4)]'\n                            : 'bg-gray-800/50 border-gray-700 hover:border-cyan-500/50'\n                        }`}\n                      >\n                        <div className=\"font-medium text-white\">{algo.name}</div>\n                        <div className=\"text-xs text-gray-400 mt-1\">{algo.complexity}</div>\n                      </motion.button>\n                    ))}\n                  </div>\n                </div>\n\n                {/* Array Size Control */}\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center gap-2 text-purple-400 font-semibold\">\n                      <BarChart3 className=\"w-4 h-4\" />\n                      <span className=\"text-sm uppercase tracking-wider\">Array Size</span>\n                    </div>\n                    <span className=\"text-white font-mono text-lg\">{arraySize[0]}</span>\n                  </div>\n                  <Slider\n                    value={arraySize}\n                    onValueChange={setArraySize}\n                    min={5}\n                    max={50}\n                    step={1}\n                    className=\"cursor-pointer\"\n                    disabled={isPlaying}\n                  />\n                </div>\n\n                {/* Speed Control */}\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center gap-2 text-pink-400 font-semibold\">\n                      <Zap className=\"w-4 h-4\" />\n                      <span className=\"text-sm uppercase tracking-wider\">Speed</span>\n                    </div>\n                    <span className=\"text-white font-mono text-lg\">{speed[0]}%</span>\n                  </div>\n                  <Slider\n                    value={speed}\n                    onValueChange={setSpeed}\n                    min={10}\n                    max={100}\n                    step={10}\n                    className=\"cursor-pointer\"\n                  />\n                </div>\n\n                {/* Control Buttons */}\n                <div className=\"space-y-3 pt-4 border-t border-gray-700\">\n                  <Button\n                    onClick={isPlaying ? pauseVisualization : startVisualization}\n                    disabled={steps.length === 0 || currentStep >= steps.length}\n                    className=\"w-full bg-gradient-to-r from-cyan-500 to-blue-500 hover:from-cyan-400 hover:to-blue-400 text-white font-semibold shadow-[0_0_20px_rgba(0,255,255,0.5)] hover:shadow-[0_0_30px_rgba(0,255,255,0.7)] transition-all duration-300\"\n                  >\n                    {isPlaying ? (\n                      <>\n                        <Pause className=\"w-4 h-4 mr-2\" />\n                        Pause\n                      </>\n                    ) : (\n                      <>\n                        <Play className=\"w-4 h-4 mr-2\" />\n                        {currentStep >= steps.length ? 'Finished' : 'Play'}\n                      </>\n                    )}\n                  </Button>\n\n                  <Button\n                    onClick={resetVisualization}\n                    variant=\"outline\"\n                    className=\"w-full border-purple-500/50 text-purple-400 hover:bg-purple-500/20 hover:border-purple-400 hover:shadow-[0_0_20px_rgba(168,85,247,0.4)] transition-all duration-300\"\n                  >\n                    <RotateCcw className=\"w-4 h-4 mr-2\" />\n                    Reset\n                  </Button>\n\n                  <Button\n                    onClick={() => {\n                      generateSortingSteps(selectedAlgorithm);\n                      setCurrentStep(0);\n                    }}\n                    disabled={array.length === 0 || isPlaying}\n                    className=\"w-full bg-gradient-to-r from-purple-500 to-pink-500 hover:from-purple-400 hover:to-pink-400 text-white font-semibold shadow-[0_0_20px_rgba(168,85,247,0.5)] hover:shadow-[0_0_30px_rgba(168,85,247,0.7)] transition-all duration-300\"\n                  >\n                    <Zap className=\"w-4 h-4 mr-2\" />\n                    Generate Steps\n                  </Button>\n                </div>\n\n                {/* Stats Display */}\n                <div className=\"pt-4 border-t border-gray-700 space-y-2\">\n                  <div className=\"flex justify-between text-sm\">\n                    <span className=\"text-gray-400\">Current Step:</span>\n                    <span className=\"text-cyan-400 font-mono\">{currentStep} / {steps.length}</span>\n                  </div>\n                  <div className=\"flex justify-between text-sm\">\n                    <span className=\"text-gray-400\">Array Length:</span>\n                    <span className=\"text-purple-400 font-mono\">{array.length}</span>\n                  </div>\n                </div>\n              </div>\n            </motion.div>\n            \n            <div className=\"bg-gray-900/50 backdrop-blur-lg border border-cyan-500/30 rounded-xl p-6 shadow-2xl shadow-cyan-500/20\">\n              <div className=\"space-y-6\">\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center gap-2 text-cyan-400\">\n                    <Zap className=\"w-4 h-4\" />\n                    <span className=\"text-sm font-semibold tracking-wider\">ALGORITHM</span>\n                  </div>\n                  <div className=\"grid grid-cols-1 gap-3\">\n                    {mockAlgorithms.map((algo) => (\n                      <motion.button\n                        key={algo.id}\n                        onClick={() => setSelectedAlgorithm(algo.id as AlgorithmType)}\n                        className={`relative p-4 rounded-lg border-2 transition-all duration-300 text-left ${\n                          selectedAlgorithm === algo.id\n                            ? 'border-cyan-400 bg-cyan-500/20 shadow-lg shadow-cyan-500/50'\n                            : 'border-gray-700 bg-gray-800/50 hover:border-cyan-500/50 hover:bg-cyan-500/10'\n                        }`}\n                        whileHover={{ scale: 1.02 }}\n                        whileTap={{ scale: 0.98 }}\n                      >\n                        <div className=\"space-y-1\">\n                          <div className=\"font-semibold text-white\">{algo.name}</div>\n                          <div className={`text-xs ${\n                            selectedAlgorithm === algo.id ? 'text-cyan-300' : 'text-gray-400'\n                          }`}>\n                            {algo.complexity}\n                          </div>\n                        </div>\n                        {selectedAlgorithm === algo.id && (\n                          <motion.div\n                            className=\"absolute inset-0 rounded-lg border-2 border-cyan-400\"\n                            initial={{ opacity: 0 }}\n                            animate={{ opacity: [0.5, 1, 0.5] }}\n                            transition={{ duration: 2, repeat: Infinity }}\n                          />\n                        )}\n                      </motion.button>\n                    ))}\n                  </div>\n                </div></parameter>\n</invoke>\n\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <label className=\"text-cyan-400 text-sm font-medium flex items-center gap-2\">\n                      <Zap className=\"w-4 h-4\" />\n                      Speed\n                    </label>\n                    <span className=\"text-cyan-300 text-xs\">{speed[0]}ms</span>\n                  </div>\n                  <Slider\n                    value={speed}\n                    onValueChange={setSpeed}\n                    min={10}\n                    max={200}\n                    step={10}\n                    className=\"[&_[role=slider]]:bg-cyan-400 [&_[role=slider]]:border-cyan-300 [&_[role=slider]]:shadow-[0_0_15px_rgba(34,211,238,0.8)] [&_[role=slider]]:hover:shadow-[0_0_25px_rgba(34,211,238,1)] [&_[role=slider]]:transition-shadow [&_.relative]:bg-gray-700/50 [&_.relative]:border [&_.relative]:border-cyan-500/30 [&_.bg-primary]:bg-gradient-to-r [&_.bg-primary]:from-cyan-500 [&_.bg-primary]:to-purple-500 [&_.bg-primary]:shadow-[0_0_10px_rgba(34,211,238,0.5)]\"\n                  />\n                </div>\n\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <label className=\"text-cyan-400 text-sm font-medium flex items-center gap-2\">\n                      <BarChart3 className=\"w-4 h-4\" />\n                      Array Size\n                    </label>\n                    <span className=\"text-cyan-300 text-xs\">{arraySize[0]}</span>\n                  </div>\n                  <Slider\n                    value={arraySize}\n                    onValueChange={setArraySize}\n                    min={5}\n                    max={100}\n                    step={5}\n                    className=\"[&_[role=slider]]:bg-gradient-to-r [&_[role=slider]]:from-purple-500 [&_[role=slider]]:to-pink-500 [&_[role=slider]]:border-2 [&_[role=slider]]:border-purple-300 [&_[role=slider]]:shadow-lg [&_[role=slider]]:shadow-purple-500/50 [&_[role=slider]]:transition-all [&_[role=slider]]:hover:shadow-purple-400/70 [&_[role=slider]]:hover:scale-110 [&>span]:bg-gradient-to-r [&>span]:from-purple-500/30 [&>span]:to-pink-500/30 [&>span]:h-2\"\n                  />\n                </div>\n\n                <div className=\"flex gap-3 pt-4\">\n                  <motion.div\n                    className=\"flex-1\"\n                    whileHover={{ scale: 1.05 }}\n                    whileTap={{ scale: 0.95 }}\n                  >\n                    <Button\n                      onClick={isPlaying ? pauseVisualization : startVisualization}\n                      disabled={array.length === 0 || (steps.length === 0 && !isPlaying)}\n                      className=\"w-full bg-gradient-to-r from-cyan-500 to-purple-500 hover:from-cyan-400 hover:to-purple-400 text-white font-semibold py-6 rounded-lg shadow-lg transition-all duration-300 disabled:opacity-50 disabled:cursor-not-allowed relative overflow-hidden group\"\n                      style={{\n                        boxShadow: isPlaying \n                          ? '0 0 30px rgba(168, 85, 247, 0.6), 0 0 60px rgba(6, 182, 212, 0.4)' \n                          : '0 0 20px rgba(168, 85, 247, 0.4), 0 0 40px rgba(6, 182, 212, 0.2)'\n                      }}\n                    >\n                      <motion.div\n                        className=\"absolute inset-0 bg-gradient-to-r from-cyan-400 to-purple-400 opacity-0 group-hover:opacity-20 transition-opacity duration-300\"\n                      />\n                      <motion.div\n                        className=\"flex items-center justify-center gap-2 relative z-10\"\n                        animate={{\n                          scale: isPlaying ? [1, 1.1, 1] : 1\n                        }}\n                        transition={{\n                          duration: 1,\n                          repeat: isPlaying ? Infinity : 0\n                        }}\n                      >\n                        <motion.div\n                          key={isPlaying ? 'pause' : 'play'}\n                          initial={{ rotate: -180, opacity: 0 }}\n                          animate={{ rotate: 0, opacity: 1 }}\n                          exit={{ rotate: 180, opacity: 0 }}\n                          transition={{ duration: 0.3 }}\n                        >\n                          {isPlaying ? (\n                            <Pause className=\"w-5 h-5\" fill=\"currentColor\" />\n                          ) : (\n                            <Play className=\"w-5 h-5\" fill=\"currentColor\" />\n                          )}\n                        </motion.div>\n                        <span>{isPlaying ? 'Pause' : 'Play'}</span>\n                      </motion.div>\n                    </Button>\n                  </motion.div>\n                  <motion.div whileTap={{ rotate: 360 }} transition={{ duration: 0.6 }}>\n                    <Button\n                      onClick={resetVisualization}\n                      variant=\"outline\"\n                      size=\"lg\"\n                      className=\"w-full bg-gradient-to-r from-pink-600/20 to-orange-600/20 border-pink-500/50 hover:border-pink-400 text-white hover:bg-pink-500/30 transition-all duration-300 shadow-[0_0_20px_rgba(236,72,153,0.4)] hover:shadow-[0_0_35px_rgba(236,72,153,0.7)]\"\n                    >\n                      <RotateCcw className=\"w-4 h-4 mr-2\" />\n                      Reset\n                    </Button>\n                  </motion.div>\n                  \n                  <Button\n                    onClick={generateRandomArray}\n                    variant=\"outline\"\n                    size=\"lg\"\n                    className=\"w-full bg-gradient-to-r from-purple-600/20 to-blue-600/20 border-purple-500/50 hover:border-purple-400 text-white hover:bg-purple-500/30 transition-all duration-300 shadow-[0_0_20px_rgba(168,85,247,0.4)] hover:shadow-[0_0_35px_rgba(168,85,247,0.7)]\"\n                  >\n                    <Zap className=\"w-4 h-4 mr-2\" />\n                    New Array\n                  </Button>\n                </div>\n              </div>\n            </div>\n\n            \n            <motion.div\n              initial={{ opacity: 0, x: -50 }}\n              animate={{ opacity: 1, x: 0 }}\n              transition={{ delay: 0.2 }}\n              className=\"bg-gray-900/50 backdrop-blur-lg border border-purple-500/30 rounded-xl p-6 shadow-[0_0_30px_rgba(168,85,247,0.3)] hover:shadow-[0_0_50px_rgba(168,85,247,0.5)] transition-shadow duration-300\"\n            >\n              <div className=\"space-y-4\">\n                <div className=\"flex items-center gap-2 text-purple-400 font-semibold mb-4\">\n                  <Activity className=\"w-5 h-5\" />\n                  <span className=\"text-sm uppercase tracking-wider\">Statistics</span>\n                </div>\n\n                {/* Comparisons */}\n                <motion.div\n                  className=\"bg-gradient-to-r from-cyan-500/10 to-cyan-600/10 border border-cyan-500/30 rounded-lg p-4\"\n                  whileHover={{ scale: 1.02, borderColor: 'rgba(0, 255, 255, 0.5)' }}\n                  animate={{\n                    boxShadow: [\n                      '0 0 10px rgba(0, 255, 255, 0.2)',\n                      '0 0 20px rgba(0, 255, 255, 0.4)',\n                      '0 0 10px rgba(0, 255, 255, 0.2)'\n                    ]\n                  }}\n                  transition={{ duration: 2, repeat: Infinity }}\n                >\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center gap-2\">\n                      <TrendingUp className=\"w-4 h-4 text-cyan-400\" />\n                      <span className=\"text-sm text-gray-300\">Comparisons</span>\n                    </div>\n                    <motion.span\n                      key={comparisons}\n                      initial={{ scale: 1.5, color: '#00ffff' }}\n                      animate={{ scale: 1, color: '#ffffff' }}\n                      className=\"text-2xl font-bold font-mono\"\n                    >\n                      {comparisons}\n                    </motion.span>\n                  </div>\n                </motion.div>\n\n                {/* Swaps */}\n                <motion.div\n                  className=\"bg-gradient-to-r from-pink-500/10 to-pink-600/10 border border-pink-500/30 rounded-lg p-4\"\n                  whileHover={{ scale: 1.02, borderColor: 'rgba(255, 0, 102, 0.5)' }}\n                  animate={{\n                    boxShadow: [\n                      '0 0 10px rgba(255, 0, 102, 0.2)',\n                      '0 0 20px rgba(255, 0, 102, 0.4)',\n                      '0 0 10px rgba(255, 0, 102, 0.2)'\n                    ]\n                  }}\n                  transition={{ duration: 2, repeat: Infinity, delay: 0.5 }}\n                >\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center gap-2\">\n                      <Shuffle className=\"w-4 h-4 text-pink-400\" />\n                      <span className=\"text-sm text-gray-300\">Swaps</span>\n                    </div>\n                    <motion.span\n                      key={swaps}\n                      initial={{ scale: 1.5, color: '#ff0066' }}\n                      animate={{ scale: 1, color: '#ffffff' }}\n                      className=\"text-2xl font-bold font-mono\"\n                    >\n                      {swaps}\n                    </motion.span>\n                  </div>\n                </motion.div>\n\n                {/* Progress */}\n                <motion.div\n                  className=\"bg-gradient-to-r from-purple-500/10 to-purple-600/10 border border-purple-500/30 rounded-lg p-4\"\n                  whileHover={{ scale: 1.02, borderColor: 'rgba(168, 85, 247, 0.5)' }}\n                  animate={{\n                    boxShadow: [\n                      '0 0 10px rgba(168, 85, 247, 0.2)',\n                      '0 0 20px rgba(168, 85, 247, 0.4)',\n                      '0 0 10px rgba(168, 85, 247, 0.2)'\n                    ]\n                  }}\n                  transition={{ duration: 2, repeat: Infinity, delay: 1 }}\n                >\n                  <div className=\"space-y-2\">\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center gap-2\">\n                        <BarChart3 className=\"w-4 h-4 text-purple-400\" />\n                        <span className=\"text-sm text-gray-300\">Progress</span>\n                      </div>\n                      <span className=\"text-lg font-bold font-mono text-white\">\n                        {steps.length > 0 ? Math.round((currentStep / steps.length) * 100) : 0}%\n                      </span>\n                    </div>\n                    <div className=\"w-full bg-gray-800 rounded-full h-2 overflow-hidden\">\n                      <motion.div\n                        className=\"h-full bg-gradient-to-r from-purple-500 via-pink-500 to-cyan-500\"\n                        initial={{ width: 0 }}\n                        animate={{\n                          width: steps.length > 0 ? `${(currentStep / steps.length) * 100}%` : '0%'\n                        }}\n                        transition={{ duration: 0.3 }}\n                        style={{\n                          boxShadow: '0 0 10px rgba(168, 85, 247, 0.8)'\n                        }}\n                      />\n                    </div>\n                  </div>\n                </motion.div>\n\n                {/* Step Counter */}\n                <div className=\"bg-gray-800/50 border border-gray-700 rounded-lg p-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-sm text-gray-400\">Current Step</span>\n                    <span className=\"text-lg font-mono text-gray-300\">\n                      {currentStep} / {steps.length}\n                    </span>\n                  </div>\n                </div>\n              </div>\n            </motion.div>\n          </div>\n\n          <div className=\"lg:col-span-3\">\n            <div className=\"bg-gray-900/50 backdrop-blur-lg border border-purple-500/30 rounded-xl p-8 shadow-2xl shadow-purple-500/20 min-h-[600px]\">\n              {array.length === 0 ? (\n                <motion.div\n                  initial={{ opacity: 0, scale: 0.8 }}\n                  animate={{ opacity: 1, scale: 1 }}\n                  className=\"absolute inset-0 flex flex-col items-center justify-center gap-6\"\n                >\n                  <motion.div\n                    animate={{\n                      boxShadow: [\n                        '0 0 30px rgba(0, 255, 255, 0.3)',\n                        '0 0 60px rgba(255, 0, 255, 0.5)',\n                        '0 0 30px rgba(0, 255, 255, 0.3)'\n                      ]\n                    }}\n                    transition={{ duration: 2, repeat: Infinity }}\n                    className=\"p-8 rounded-full bg-gradient-to-br from-cyan-500/20 to-purple-500/20 border border-cyan-400/50\"\n                  >\n                    <BarChart3 className=\"w-16 h-16 text-cyan-400\" />\n                  </motion.div>\n                  <div className=\"text-center space-y-2\">\n                    <h3 className=\"text-2xl font-bold text-white\">Ready to Visualize</h3>\n                    <p className=\"text-gray-400\">Generate an array to begin sorting</p>\n                  </div>\n                </motion.div>\n              ) : (\n                <>\n                  {/* Current step visualization */}\n                  {currentStep > 0 && steps[currentStep - 1] ? (\n                    steps[currentStep - 1].array.map((element, index) => {\n                      const isComparing = steps[currentStep - 1].comparingIndices.includes(index);\n                      const isSwapping = steps[currentStep - 1].swappingIndices.includes(index);\n                      const isSorted = steps[currentStep - 1].sortedIndices.includes(index);\n                      \n                      const maxValue = Math.max(...array.map(el => el.value));\n                      const heightPercentage = (element.value / maxValue) * 100;\n                      \n                      let barColor = NEON_COLORS[index % NEON_COLORS.length];\n                      let glowColor = barColor;\n                      let glowIntensity = 0.3;\n                      \n                      if (isSorted) {\n                        barColor = '#00ff00';\n                        glowColor = '#00ff00';\n                        glowIntensity = 0.6;\n                      } else if (isSwapping) {\n                        barColor = '#ff0066';\n                        glowColor = '#ff0066';\n                        glowIntensity = 0.8;\n                      } else if (isComparing) {\n                        barColor = '#ffff00';\n                        glowColor = '#ffff00';\n                        glowIntensity = 0.7;\n                      }\n                      \n                      return (\n                        <motion.div\n                          key={element.id}\n                          className=\"relative flex-1 min-w-[4px] max-w-[60px] rounded-t-lg\"\n                          initial={{ height: 0, opacity: 0 }}\n                          animate={{\n                            height: `${heightPercentage}%`,\n                            opacity: 1,\n                            y: isSwapping ? [-10, 0] : 0,\n                            scale: isComparing || isSwapping ? [1, 1.1, 1] : 1\n                          }}\n                          transition={{\n                            height: { duration: 0.3, ease: \"easeOut\" },\n                            y: { duration: 0.4, ease: \"easeInOut\" },\n                            scale: { duration: 0.3, repeat: isComparing || isSwapping ? Infinity : 0 }\n                          }}\n                          style={{\n                            backgroundColor: barColor,\n                            boxShadow: `0 0 ${glowIntensity * 30}px ${glowColor}, 0 0 ${glowIntensity * 60}px ${glowColor}, inset 0 0 ${glowIntensity * 20}px rgba(255, 255, 255, 0.3)`\n                          }}\n                        >\n                          {/* Swap trail effect */}\n                          {isSwapping && (\n                            <motion.div\n                              className=\"absolute inset-0 rounded-t-lg\"\n                              initial={{ opacity: 0.8, scale: 1 }}\n                              animate={{ opacity: 0, scale: 1.5 }}\n                              transition={{ duration: 0.6, repeat: Infinity }}\n                              style={{\n                                backgroundColor: barColor,\n                                filter: 'blur(8px)'\n                              }}\n                            />\n                          )}\n                          \n                          {/* Comparison indicator */}\n                          {isComparing && (\n                            <motion.div\n                              className=\"absolute -top-8 left-1/2 transform -translate-x-1/2\"\n                              animate={{\n                                y: [0, -5, 0],\n                                opacity: [0.7, 1, 0.7]\n                              }}\n                              transition={{ duration: 0.6, repeat: Infinity }}\n                            >\n                              <div className=\"w-3 h-3 rounded-full bg-yellow-400 shadow-[0_0_15px_rgba(255,255,0,0.8)]\" />\n                            </motion.div>\n                          )}\n                          \n                          {/* Value label for larger arrays */}\n                          {arraySize[0] <= 30 && (\n                            <motion.div\n                              className=\"absolute -bottom-6 left-1/2 transform -translate-x-1/2 text-xs font-mono text-white whitespace-nowrap\"\n                              initial={{ opacity: 0 }}\n                              animate={{ opacity: isSorted ? 1 : 0.6 }}\n                            >\n                              {element.value}\n                            </motion.div>\n                          )}\n                        </motion.div>\n                      );\n                    })\n                  ) : (\n                    // Initial array state\n                    array.map((element, index) => {\n                      const maxValue = Math.max(...array.map(el => el.value));\n                      const heightPercentage = (element.value / maxValue) * 100;\n                      const barColor = NEON_COLORS[index % NEON_COLORS.length];\n                      \n                      return (\n                        <motion.div\n                          key={element.id}\n                          className=\"relative flex-1 min-w-[4px] max-w-[60px] rounded-t-lg\"\n                          initial={{ height: 0, opacity: 0 }}\n                          animate={{\n                            height: `${heightPercentage}%`,\n                            opacity: 1\n                          }}\n                          transition={{\n                            height: { duration: 0.5, ease: \"easeOut\", delay: index * 0.02 },\n                            opacity: { duration: 0.3, delay: index * 0.02 }\n                          }}\n                          style={{\n                            backgroundColor: barColor,\n                            boxShadow: `0 0 10px ${barColor}, 0 0 20px ${barColor}, inset 0 0 10px rgba(255, 255, 255, 0.2)`\n                          }}\n                        >\n                          {arraySize[0] <= 30 && (\n                            <div className=\"absolute -bottom-6 left-1/2 transform -translate-x-1/2 text-xs font-mono text-white/60 whitespace-nowrap\">\n                              {element.value}\n                            </div>\n                          )}\n                        </motion.div>\n                      );\n                    })\n                  )}\n                </>\n              )}\n              \n              <div className=\"relative h-full flex items-end justify-center gap-1\">\n                {currentStep > 0 && steps[currentStep - 1] ? (\n                  steps[currentStep - 1].array.map((element, index) => {\n                    const isComparing = steps[currentStep - 1].comparingIndices.includes(index);\n                    const isSwapping = steps[currentStep - 1].swappingIndices.includes(index);\n                    const isSorted = steps[currentStep - 1].sortedIndices.includes(index);\n                    \n                    const barColor = isSorted \n                      ? '#00ff00' \n                      : isSwapping \n                      ? '#ff0066' \n                      : isComparing \n                      ? '#ffff00' \n                      : NEON_COLORS[index % NEON_COLORS.length];\n\n                    return (\n                      <motion.div\n                        key={element.id}\n                        className=\"relative flex-1 min-w-[4px] max-w-[60px] rounded-t-lg\"\n                        initial={{ height: 0, opacity: 0 }}\n                        animate={{\n                          height: `${element.value * 4}px`,\n                          opacity: 1,\n                          backgroundColor: barColor,\n                          boxShadow: [\n                            `0 0 ${isComparing || isSwapping ? '30px' : '15px'} ${barColor}`,\n                            `0 0 ${isComparing || isSwapping ? '40px' : '20px'} ${barColor}`,\n                            `0 0 ${isComparing || isSwapping ? '30px' : '15px'} ${barColor}`\n                          ],\n                          scale: isSwapping ? [1, 1.1, 1] : isComparing ? 1.05 : 1,\n                          y: isSwapping ? [-10, 0] : 0\n                        }}\n                        transition={{\n                          height: { duration: 0.3, ease: 'easeOut' },\n                          backgroundColor: { duration: 0.2 },\n                          boxShadow: { duration: 1, repeat: Infinity },\n                          scale: { duration: 0.3 },\n                          y: { duration: 0.4, ease: 'easeInOut' }\n                        }}\n                        style={{\n                          background: `linear-gradient(to top, ${barColor}, ${barColor}dd)`,\n                          border: `1px solid ${barColor}`,\n                        }}\n                      >\n                        {/* Value label */}\n                        <motion.div\n                          className=\"absolute -top-6 left-1/2 transform -translate-x-1/2 text-xs font-mono font-bold whitespace-nowrap\"\n                          animate={{\n                            color: barColor,\n                            textShadow: `0 0 10px ${barColor}`,\n                            scale: isComparing || isSwapping ? [1, 1.2, 1] : 1\n                          }}\n                          transition={{\n                            scale: { duration: 0.3 },\n                            textShadow: { duration: 1, repeat: Infinity }\n                          }}\n                        >\n                          {element.value}\n                        </motion.div>\n\n                        {/* Swap trail effect */}\n                        {isSwapping && (\n                          <motion.div\n                            className=\"absolute inset-0 rounded-t-lg\"\n                            initial={{ opacity: 0.8, scale: 1 }}\n                            animate={{\n                              opacity: 0,\n                              scale: 1.5,\n                              boxShadow: `0 0 50px ${barColor}`\n                            }}\n                            transition={{ duration: 0.6, ease: 'easeOut' }}\n                            style={{\n                              background: `radial-gradient(circle, ${barColor}88, transparent)`,\n                            }}\n                          />\n                        )}\n\n                        {/* Comparison indicator */}\n                        {isComparing && (\n                          <motion.div\n                            className=\"absolute -top-10 left-1/2 transform -translate-x-1/2\"\n                            animate={{\n                              y: [-5, 5, -5],\n                              opacity: [0.6, 1, 0.6]\n                            }}\n                            transition={{\n                              duration: 0.8,\n                              repeat: Infinity,\n                              ease: 'easeInOut'\n                            }}\n                          >\n                            <div \n                              className=\"w-2 h-2 rounded-full\"\n                              style={{\n                                backgroundColor: '#ffff00',\n                                boxShadow: '0 0 15px #ffff00'\n                              }}\n                            />\n                          </motion.div>\n                        )}\n\n                        {/* Sorted checkmark */}\n                        {isSorted && (\n                          <motion.div\n                            className=\"absolute top-2 left-1/2 transform -translate-x-1/2\"\n                            initial={{ scale: 0, rotate: -180 }}\n                            animate={{ scale: 1, rotate: 0 }}\n                            transition={{ type: 'spring', stiffness: 200, damping: 10 }}\n                          >\n                            <div \n                              className=\"text-white font-bold text-xs\"\n                              style={{\n                                textShadow: '0 0 10px #00ff00',\n                                filter: 'drop-shadow(0 0 5px #00ff00)'\n                              }}\n                            >\n                              \u2713\n                            </div>\n                          </motion.div>\n                        )}\n                      </motion.div>\n                    );\n                  })\n                ) : array.length > 0 ? (\n                  array.map((element, index) => {\n                    const barColor = NEON_COLORS[index % NEON_COLORS.length];\n                    \n                    return (\n                      <motion.div\n                        key={element.id}\n                        className=\"relative flex-1 min-w-[4px] max-w-[60px] rounded-t-lg\"\n                        initial={{ height: 0, opacity: 0 }}\n                        animate={{\n                          height: `${element.value * 4}px`,\n                          opacity: 1,\n                          boxShadow: [\n                            `0 0 15px ${barColor}`,\n                            `0 0 20px ${barColor}`,\n                            `0 0 15px ${barColor}`\n                          ]\n                        }}\n                        transition={{\n                          height: { duration: 0.5, ease: 'easeOut' },\n                          opacity: { duration: 0.3 },\n                          boxShadow: { duration: 2, repeat: Infinity }\n                        }}\n                        style={{\n                          background: `linear-gradient(to top, ${barColor}, ${barColor}dd)`,\n                          border: `1px solid ${barColor}`,\n                        }}\n                      >\n                        <motion.div\n                          className=\"absolute -top-6 left-1/2 transform -translate-x-1/2 text-xs font-mono font-bold\"\n                          style={{\n                            color: barColor,\n                            textShadow: `0 0 10px ${barColor}`\n                          }}\n                        >\n                          {element.value}\n                        </motion.div>\n                      </motion.div>\n                    );\n                  })\n                ) : (\n                  <motion.div\n                    className=\"absolute inset-0 flex items-center justify-center\"\n                    initial={{ opacity: 0 }}\n                    animate={{ opacity: 1 }}\n                  >\n                    <div className=\"text-center space-y-4\">\n                      <motion.div\n                        animate={{\n                          textShadow: [\n                            '0 0 20px rgba(0, 255, 255, 0.5)',\n                            '0 0 30px rgba(0, 255, 255, 0.8)',\n                            '0 0 20px rgba(0, 255, 255, 0.5)'\n                          ]\n                        }}\n                        transition={{ duration: 2, repeat: Infinity }}\n                        className=\"text-cyan-400 text-xl font-semibold\"\n                      >\n                        Generate an array to begin\n                      </motion.div>\n                      <BarChart3 className=\"w-16 h-16 text-cyan-400/50 mx-auto\" />\n                    </div>\n                  </motion.div>\n                )}\n              </div>\n            </div>\n\n            <motion.div\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ delay: 0.3, duration: 0.6 }}\n              className=\"mt-6 space-y-3\"\n            >\n              <div className=\"flex items-center justify-between text-sm\">\n                <span className=\"text-purple-300 font-semibold flex items-center gap-2\">\n                  <BarChart3 className=\"w-4 h-4\" />\n                  Sorting Progress\n                </span>\n                <motion.span\n                  className=\"text-cyan-300 font-mono text-lg font-bold\"\n                  key={currentStep}\n                  initial={{ scale: 1.3, color: '#00ffff' }}\n                  animate={{ scale: 1, color: '#67e8f9' }}\n                  transition={{ duration: 0.3 }}\n                >\n                  {steps.length > 0 ? Math.min(Math.round((currentStep / steps.length) * 100), 100) : 0}%\n                </motion.span>\n              </div>\n              \n              <div className=\"relative h-4 bg-gray-800/80 rounded-full overflow-hidden border border-purple-500/30 shadow-inner\">\n                <motion.div\n                  className=\"absolute inset-0 bg-gradient-to-r from-cyan-500 via-purple-500 to-pink-500 rounded-full\"\n                  initial={{ width: '0%' }}\n                  animate={{ \n                    width: steps.length > 0 ? `${Math.min((currentStep / steps.length) * 100, 100)}%` : '0%'\n                  }}\n                  transition={{ duration: 0.5, ease: 'easeOut' }}\n                  style={{\n                    boxShadow: '0 0 20px rgba(168, 85, 247, 0.6), 0 0 40px rgba(6, 182, 212, 0.4)'\n                  }}\n                />\n                \n                <motion.div\n                  className=\"absolute inset-0 bg-gradient-to-r from-transparent via-white/30 to-transparent\"\n                  animate={{\n                    x: ['-100%', '200%']\n                  }}\n                  transition={{\n                    duration: 2,\n                    repeat: Infinity,\n                    ease: 'linear'\n                  }}\n                  style={{\n                    width: '50%'\n                  }}\n                />\n                \n                {steps.length > 0 && currentStep < steps.length && (\n                  <motion.div\n                    className=\"absolute right-0 top-0 h-full w-1\"\n                    animate={{\n                      boxShadow: [\n                        '0 0 10px 2px rgba(0, 255, 255, 0.8)',\n                        '0 0 20px 4px rgba(255, 0, 255, 0.8)',\n                        '0 0 10px 2px rgba(0, 255, 255, 0.8)'\n                      ]\n                    }}\n                    transition={{ duration: 1, repeat: Infinity }}\n                    style={{\n                      left: `${Math.min((currentStep / steps.length) * 100, 100)}%`,\n                      background: 'linear-gradient(to bottom, #00ffff, #ff00ff)'\n                    }}\n                  />\n                )}\n              </div>\n              \n              <div className=\"flex items-center justify-between text-xs text-gray-400\">\n                <span>Step {currentStep} of {steps.length}</span>\n                {currentStep >= steps.length && steps.length > 0 && (\n                  <motion.span\n                    initial={{ opacity: 0, scale: 0.8 }}\n                    animate={{ opacity: 1, scale: 1 }}\n                    className=\"text-green-400 font-semibold flex items-center gap-1\"\n                  >\n                    <motion.span\n                      animate={{\n                        textShadow: [\n                          '0 0 10px rgba(34, 197, 94, 0.8)',\n                          '0 0 20px rgba(34, 197, 94, 1)',\n                          '0 0 10px rgba(34, 197, 94, 0.8)'\n                        ]\n                      }}\n                      transition={{ duration: 1.5, repeat: Infinity }}\n                    >\n                      \u2713 Complete\n                    </motion.span>\n                  </motion.span>\n                )}\n              </div>\n            </motion.div>\n          </div>\n        </div>\n\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.8, delay: 0.3 }}\n          className=\"bg-gray-900/50 backdrop-blur-lg border border-cyan-500/30 rounded-xl p-6 shadow-[0_0_30px_rgba(0,255,255,0.2)]\"\n        >\n          <div className=\"flex items-center gap-2 mb-4\">\n            <BarChart3 className=\"w-5 h-5 text-cyan-400\" />\n            <h3 className=\"text-lg font-semibold text-white\">Legend</h3>\n          </div>\n          \n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n            <motion.div\n              className=\"flex items-center gap-3 p-3 bg-gray-800/50 rounded-lg border border-cyan-500/30\"\n              whileHover={{ scale: 1.05, borderColor: 'rgba(0, 255, 255, 0.6)' }}\n              animate={{\n                boxShadow: [\n                  '0 0 10px rgba(0, 255, 255, 0.3)',\n                  '0 0 20px rgba(0, 255, 255, 0.5)',\n                  '0 0 10px rgba(0, 255, 255, 0.3)'\n                ]\n              }}\n              transition={{ duration: 2, repeat: Infinity }}\n            >\n              <motion.div\n                className=\"w-4 h-12 bg-gradient-to-t from-cyan-500 to-cyan-300 rounded\"\n                animate={{\n                  boxShadow: [\n                    '0 0 15px rgba(0, 255, 255, 0.6)',\n                    '0 0 25px rgba(0, 255, 255, 0.8)',\n                    '0 0 15px rgba(0, 255, 255, 0.6)'\n                  ]\n                }}\n                transition={{ duration: 1.5, repeat: Infinity }}\n              />\n              <div>\n                <div className=\"text-sm font-semibold text-cyan-300\">Comparing</div>\n                <div className=\"text-xs text-gray-400\">Active comparison</div>\n              </div>\n            </motion.div>\n\n            <motion.div\n              className=\"flex items-center gap-3 p-3 bg-gray-800/50 rounded-lg border border-pink-500/30\"\n              whileHover={{ scale: 1.05, borderColor: 'rgba(236, 72, 153, 0.6)' }}\n              animate={{\n                boxShadow: [\n                  '0 0 10px rgba(236, 72, 153, 0.3)',\n                  '0 0 20px rgba(236, 72, 153, 0.5)',\n                  '0 0 10px rgba(236, 72, 153, 0.3)'\n                ]\n              }}\n              transition={{ duration: 2, repeat: Infinity, delay: 0.5 }}\n            >\n              <motion.div\n                className=\"w-4 h-12 bg-gradient-to-t from-pink-500 to-pink-300 rounded\"\n                animate={{\n                  boxShadow: [\n                    '0 0 15px rgba(236, 72, 153, 0.6)',\n                    '0 0 25px rgba(236, 72, 153, 0.8)',\n                    '0 0 15px rgba(236, 72, 153, 0.6)'\n                  ],\n                  x: [-2, 2, -2]\n                }}\n                transition={{ duration: 1.5, repeat: Infinity }}\n              />\n              <div>\n                <div className=\"text-sm font-semibold text-pink-300\">Swapping</div>\n                <div className=\"text-xs text-gray-400\">Elements moving</div>\n              </div>\n            </motion.div>\n\n            <motion.div\n              className=\"flex items-center gap-3 p-3 bg-gray-800/50 rounded-lg border border-green-500/30\"\n              whileHover={{ scale: 1.05, borderColor: 'rgba(34, 197, 94, 0.6)' }}\n              animate={{\n                boxShadow: [\n                  '0 0 10px rgba(34, 197, 94, 0.3)',\n                  '0 0 20px rgba(34, 197, 94, 0.5)',\n                  '0 0 10px rgba(34, 197, 94, 0.3)'\n                ]\n              }}\n              transition={{ duration: 2, repeat: Infinity, delay: 1 }}\n            >\n              <motion.div\n                className=\"w-4 h-12 bg-gradient-to-t from-green-500 to-green-300 rounded\"\n                animate={{\n                  boxShadow: [\n                    '0 0 15px rgba(34, 197, 94, 0.6)',\n                    '0 0 25px rgba(34, 197, 94, 0.8)',\n                    '0 0 15px rgba(34, 197, 94, 0.6)'\n                  ]\n                }}\n                transition={{ duration: 1.5, repeat: Infinity }}\n              />\n              <div>\n                <div className=\"text-sm font-semibold text-green-300\">Sorted</div>\n                <div className=\"text-xs text-gray-400\">In final position</div>\n              </div>\n            </motion.div>\n\n            <motion.div\n              className=\"flex items-center gap-3 p-3 bg-gray-800/50 rounded-lg border border-purple-500/30\"\n              whileHover={{ scale: 1.05, borderColor: 'rgba(168, 85, 247, 0.6)' }}\n            >\n              <div className=\"w-4 h-12 bg-gradient-to-t from-purple-500 to-purple-300 rounded opacity-60\" />\n              <div>\n                <div className=\"text-sm font-semibold text-purple-300\">Unsorted</div>\n                <div className=\"text-xs text-gray-400\">Waiting to sort</div>\n              </div>\n            </motion.div>\n          </div>\n        </motion.div>\n      </div>\n    </div>\n  );\n}",
  "error": null,
  "overall_score": 41,
  "code_quality_score": 12,
  "architecture_score": 10,
  "performance_score": 8,
  "accessibility_score": 11,
  "metadata": {
    "document_id": "eval_room_21105c1690f9",
    "prompt_category": "creative",
    "prompt_complexity": 9.0
  },
  "raw_response": {
    "document_id": "eval_room_21105c1690f9",
    "mode": "parallel",
    "prompt": "Build a captivating algorithm visualizer with neon colored bars, smooth height transitions, glowing comparison indicators, trail effects during swaps, and a futuristic dashboard design with animated controls",
    "content": "import { useState, useCallback } from 'react';import React from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Slider } from '@/components/ui/slider';\nimport { Play, Pause, RotateCcw, Zap, BarChart3 } from 'lucide-react';\nimport { Activity, TrendingUp, Shuffle } from 'lucide-react';\nimport { motion } from 'framer-motion';\n\ninterface ArrayElement {\n  value: number;\n  id: string;\n  isComparing?: boolean;\n  isSwapping?: boolean;\n  isSorted?: boolean;\n}\n\ninterface AlgorithmStep {\n  array: ArrayElement[];\n  comparingIndices: number[];\n  swappingIndices: number[];\n  sortedIndices: number[];\n}\n\ntype AlgorithmType = 'bubble' | 'quick' | 'merge' | 'insertion';\n\nconst NEON_COLORS = [\n  '#00ffff',\n  '#ff00ff', \n  '#00ff00',\n  '#ffff00',\n  '#ff0066',\n  '#00ffaa'\n];\n\nconst mockAlgorithms = [\n  { id: 'bubble', name: 'Bubble Sort', complexity: 'O(n\u00b2)' },\n  { id: 'quick', name: 'Quick Sort', complexity: 'O(n log n)' },\n  { id: 'merge', name: 'Merge Sort', complexity: 'O(n log n)' },\n  { id: 'insertion', name: 'Insertion Sort', complexity: 'O(n\u00b2)' }\n];\n\nexport default function AlgorithmVisualizer() {\n  const [array, setArray] = useState<ArrayElement[]>([]);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [speed, setSpeed] = useState([50]);\n  const [arraySize, setArraySize] = useState([20]);\n  const [selectedAlgorithm, setSelectedAlgorithm] = useState<AlgorithmType>('bubble');\n  const [currentStep, setCurrentStep] = useState(0);\n  const [steps, setSteps] = useState<AlgorithmStep[]>([]);\n  const [comparisons, setComparisons] = useState(0);\n  const [swaps, setSwaps] = useState(0);\n\n  // Calculate statistics from current step\n  React.useEffect(() => {\n    if (steps.length > 0 && currentStep > 0) {\n      let compCount = 0;\n      let swapCount = 0;\n      \n      for (let i = 0; i < Math.min(currentStep, steps.length); i++) {\n        if (steps[i].comparingIndices.length > 0) {\n          compCount++;\n        }\n        if (steps[i].swappingIndices.length > 0) {\n          swapCount++;\n        }\n      }\n      \n      setComparisons(compCount);\n      setSwaps(swapCount);\n    } else if (currentStep === 0) {\n      setComparisons(0);\n      setSwaps(0);\n    }\n  }, [currentStep, steps]);\n\n  const generateRandomArray = useCallback(() => {\n    const newArray: ArrayElement[] = Array.from({ length: arraySize[0] }, (_, i) => ({\n      value: Math.floor(Math.random() * 100) + 5,\n      id: `element-${i}-${Date.now()}`,\n      isComparing: false,\n      isSwapping: false,\n      isSorted: false\n    }));\n    setArray(newArray);\n    setSteps([]);\n    setCurrentStep(0);\n    setIsPlaying(false);\n  }, [arraySize]);\n\n  const resetVisualization = useCallback(() => {\n\nsetIsPlaying(false);\n    setCurrentStep(0);\n    setSteps([]);\n    generateRandomArray();\n        \n  }, [generateRandomArray]);\n\n  // Animation effect for step-by-step visualization\n  const animateSteps = useCallback(() => {\n    if (currentStep < steps.length && isPlaying) {\n      const timer = setTimeout(() => {\n        setCurrentStep(prev => prev + 1);\n      }, 1000 - speed[0] * 9); // Convert speed slider (0-100) to delay (1000ms-100ms)\n      \n      return () => clearTimeout(timer);\n    } else if (currentStep >= steps.length && isPlaying) {\n      setIsPlaying(false);\n    }\n  }, [currentStep, steps.length, isPlaying, speed]);\n\n  // Run animation effect\n  React.useEffect(() => {\n    const cleanup = animateSteps();\n    return cleanup;\n  }, [animateSteps]);\n  const startVisualization = useCallback(() => {\n    if (steps.length === 0 || currentStep >= steps.length) {\n      return;\n    }\n    setIsPlaying(true);\n  }, [steps, speed, currentStep]);\n\n  const pauseVisualization = useCallback(() => {\n\nsetIsPlaying(false);\n  });\n\n  const generateSortingSteps = useCallback((algorithm: AlgorithmType) => {\n        if (array.length === 0) return;\n\n    const steps: AlgorithmStep[] = [];\n    const arr = array.map(el => ({ ...el }));\n\n    const addStep = (\n      currentArray: ArrayElement[],\n      comparing: number[] = [],\n      swapping: number[] = [],\n      sorted: number[] = []\n    ) => {\n      steps.push({\n        array: currentArray.map(el => ({ ...el })),\n        comparingIndices: [...comparing],\n        swappingIndices: [...swapping],\n        sortedIndices: [...sorted]\n      });\n    };\n\n    if (algorithm === 'bubble') {\n      const sortedIndices: number[] = [];\n      for (let i = 0; i < arr.length - 1; i++) {\n        for (let j = 0; j < arr.length - i - 1; j++) {\n          addStep(arr, [j, j + 1], [], sortedIndices);\n          \n          if (arr[j].value > arr[j + 1].value) {\n            addStep(arr, [], [j, j + 1], sortedIndices);\n            [arr[j], arr[j + 1]] = [arr[j + 1], arr[j]];\n            addStep(arr, [], [], sortedIndices);\n          }\n        }\n        sortedIndices.push(arr.length - i - 1);\n        addStep(arr, [], [], sortedIndices);\n      }\n      sortedIndices.push(0);\n      addStep(arr, [], [], sortedIndices);\n    } else if (algorithm === 'insertion') {\n      const sortedIndices: number[] = [0];\n      addStep(arr, [], [], sortedIndices);\n      \n      for (let i = 1; i < arr.length; i++) {\n        const key = arr[i];\n        let j = i - 1;\n        \n        addStep(arr, [i], [], sortedIndices);\n        \n        while (j >= 0 && arr[j].value > key.value) {\n          addStep(arr, [j, j + 1], [], sortedIndices);\n          addStep(arr, [], [j, j + 1], sortedIndices);\n          arr[j + 1] = arr[j];\n          addStep(arr, [], [], sortedIndices);\n          j--;\n        }\n        \n        arr[j + 1] = key;\n        sortedIndices.push(i);\n        addStep(arr, [], [], sortedIndices);\n      }\n    } else if (algorithm === 'quick') {\n      const sortedIndices: number[] = [];\n      \n      const partition = (low: number, high: number): number => {\n        const pivot = arr[high];\n        addStep(arr, [high], [], sortedIndices);\n        let i = low - 1;\n        \n        for (let j = low; j < high; j++) {\n          addStep(arr, [j, high], [], sortedIndices);\n          \n          if (arr[j].value < pivot.value) {\n            i++;\n            addStep(arr, [], [i, j], sortedIndices);\n            [arr[i], arr[j]] = [arr[j], arr[i]];\n            addStep(arr, [], [], sortedIndices);\n          }\n        }\n        \n        addStep(arr, [], [i + 1, high], sortedIndices);\n        [arr[i + 1], arr[high]] = [arr[high], arr[i + 1]];\n        sortedIndices.push(i + 1);\n        addStep(arr, [], [], sortedIndices);\n        \n        return i + 1;\n      };\n      \n      const quickSort = (low: number, high: number) => {\n        if (low < high) {\n          const pi = partition(low, high);\n          quickSort(low, pi - 1);\n          quickSort(pi + 1, high);\n        } else if (low === high) {\n          sortedIndices.push(low);\n          addStep(arr, [], [], sortedIndices);\n        }\n      };\n      \n      quickSort(0, arr.length - 1);\n    } else if (algorithm === 'merge') {\n      const sortedIndices: number[] = [];\n      \n      const merge = (left: number, mid: number, right: number) => {\n        const leftArr = arr.slice(left, mid + 1);\n        const rightArr = arr.slice(mid + 1, right + 1);\n        \n        let i = 0, j = 0, k = left;\n        \n        while (i < leftArr.length && j < rightArr.length) {\n          addStep(arr, [left + i, mid + 1 + j], [], sortedIndices);\n          \n          if (leftArr[i].value <= rightArr[j].value) {\n            addStep(arr, [], [k], sortedIndices);\n            arr[k] = leftArr[i];\n            addStep(arr, [], [], sortedIndices);\n            i++;\n          } else {\n            addStep(arr, [], [k], sortedIndices);\n            arr[k] = rightArr[j];\n            addStep(arr, [], [], sortedIndices);\n            j++;\n          }\n          k++;\n        }\n        \n        while (i < leftArr.length) {\n          addStep(arr, [], [k], sortedIndices);\n          arr[k] = leftArr[i];\n          addStep(arr, [], [], sortedIndices);\n          i++;\n          k++;\n        }\n        \n        while (j < rightArr.length) {\n          addStep(arr, [], [k], sortedIndices);\n          arr[k] = rightArr[j];\n          addStep(arr, [], [], sortedIndices);\n          j++;\n          k++;\n        }\n        \n        if (left === 0 && right === arr.length - 1) {\n          for (let idx = 0; idx < arr.length; idx++) {\n            sortedIndices.push(idx);\n          }\n          addStep(arr, [], [], sortedIndices);\n        }\n      };\n      \n      const mergeSort = (left: number, right: number) => {\n        if (left < right) {\n          const mid = Math.floor((left + right) / 2);\n          mergeSort(left, mid);\n          mergeSort(mid + 1, right);\n          merge(left, mid, right);\n        }\n      };\n      \n      mergeSort(0, arr.length - 1);\n    }\n\n    setSteps(steps);\n    setCurrentStep(0);\n  }, [array]);\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-gray-900 via-purple-900 to-gray-900 p-8\">\n      <div className=\"max-w-7xl mx-auto space-y-8\">\n        <motion.div\n          initial={{ opacity: 0, y: -20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.8 }}\n          className=\"text-center space-y-4\"\n        >\n          <motion.h1\n            className=\"text-6xl font-bold bg-gradient-to-r from-cyan-400 via-purple-400 to-pink-400 bg-clip-text text-transparent\"\n            animate={{\n              textShadow: [\n                '0 0 20px rgba(0, 255, 255, 0.5)',\n                '0 0 40px rgba(255, 0, 255, 0.5)',\n                '0 0 20px rgba(0, 255, 255, 0.5)'\n              ]\n            }}\n            transition={{ duration: 2, repeat: Infinity }}\n          >\n            Algorithm Visualizer\n          </motion.h1>\n          \n          <div className=\"flex items-center justify-center gap-4\">\n            <motion.div\n              className=\"flex items-center gap-2 px-6 py-3 bg-gray-800/50 backdrop-blur-sm rounded-lg border border-cyan-500/30\"\n              whileHover={{ scale: 1.05, borderColor: 'rgba(0, 255, 255, 0.6)' }}\n            >\n              <BarChart3 className=\"w-5 h-5 text-cyan-400\" />\n              <span className=\"text-xl font-semibold text-white\">\n                {mockAlgorithms.find(a => a.id === selectedAlgorithm)?.name}\n              </span>\n            </motion.div>\n            \n            <motion.div\n              className=\"px-4 py-2 bg-gradient-to-r from-purple-600/30 to-pink-600/30 backdrop-blur-sm rounded-full border border-purple-400/50\"\n              animate={{\n                boxShadow: [\n                  '0 0 20px rgba(168, 85, 247, 0.4)',\n                  '0 0 30px rgba(236, 72, 153, 0.4)',\n                  '0 0 20px rgba(168, 85, 247, 0.4)'\n                ]\n              }}\n              transition={{ duration: 2, repeat: Infinity }}\n            >\n              <span className=\"text-sm font-mono text-purple-200\">\n                {mockAlgorithms.find(a => a.id === selectedAlgorithm)?.complexity}\n              </span>\n            </motion.div>\n          </div>\n        </motion.div></parameter>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-6\">\n          <div className=\"lg:col-span-1 space-y-6\">\n            <motion.div\n              initial={{ opacity: 0, x: -50 }}\n              animate={{ opacity: 1, x: 0 }}\n              className=\"bg-gray-900/50 backdrop-blur-lg border border-cyan-500/30 rounded-xl p-6 shadow-[0_0_30px_rgba(0,255,255,0.3)] hover:shadow-[0_0_50px_rgba(0,255,255,0.5)] transition-shadow duration-300\"\n            >\n              <div className=\"space-y-6\">\n                {/* Algorithm Selection */}\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center gap-2 text-cyan-400 font-semibold\">\n                    <Zap className=\"w-4 h-4\" />\n                    <span className=\"text-sm uppercase tracking-wider\">Algorithm</span>\n                  </div>\n                  <div className=\"grid grid-cols-1 gap-2\">\n                    {mockAlgorithms.map((algo) => (\n                      <motion.button\n                        key={algo.id}\n                        whileHover={{ scale: 1.02 }}\n                        whileTap={{ scale: 0.98 }}\n                        onClick={() => setSelectedAlgorithm(algo.id as AlgorithmType)}\n                        className={`p-3 rounded-lg border transition-all duration-300 text-left ${\n                          selectedAlgorithm === algo.id\n                            ? 'bg-cyan-500/20 border-cyan-400 shadow-[0_0_20px_rgba(0,255,255,0.4)]'\n                            : 'bg-gray-800/50 border-gray-700 hover:border-cyan-500/50'\n                        }`}\n                      >\n                        <div className=\"font-medium text-white\">{algo.name}</div>\n                        <div className=\"text-xs text-gray-400 mt-1\">{algo.complexity}</div>\n                      </motion.button>\n                    ))}\n                  </div>\n                </div>\n\n                {/* Array Size Control */}\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center gap-2 text-purple-400 font-semibold\">\n                      <BarChart3 className=\"w-4 h-4\" />\n                      <span className=\"text-sm uppercase tracking-wider\">Array Size</span>\n                    </div>\n                    <span className=\"text-white font-mono text-lg\">{arraySize[0]}</span>\n                  </div>\n                  <Slider\n                    value={arraySize}\n                    onValueChange={setArraySize}\n                    min={5}\n                    max={50}\n                    step={1}\n                    className=\"cursor-pointer\"\n                    disabled={isPlaying}\n                  />\n                </div>\n\n                {/* Speed Control */}\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center gap-2 text-pink-400 font-semibold\">\n                      <Zap className=\"w-4 h-4\" />\n                      <span className=\"text-sm uppercase tracking-wider\">Speed</span>\n                    </div>\n                    <span className=\"text-white font-mono text-lg\">{speed[0]}%</span>\n                  </div>\n                  <Slider\n                    value={speed}\n                    onValueChange={setSpeed}\n                    min={10}\n                    max={100}\n                    step={10}\n                    className=\"cursor-pointer\"\n                  />\n                </div>\n\n                {/* Control Buttons */}\n                <div className=\"space-y-3 pt-4 border-t border-gray-700\">\n                  <Button\n                    onClick={isPlaying ? pauseVisualization : startVisualization}\n                    disabled={steps.length === 0 || currentStep >= steps.length}\n                    className=\"w-full bg-gradient-to-r from-cyan-500 to-blue-500 hover:from-cyan-400 hover:to-blue-400 text-white font-semibold shadow-[0_0_20px_rgba(0,255,255,0.5)] hover:shadow-[0_0_30px_rgba(0,255,255,0.7)] transition-all duration-300\"\n                  >\n                    {isPlaying ? (\n                      <>\n                        <Pause className=\"w-4 h-4 mr-2\" />\n                        Pause\n                      </>\n                    ) : (\n                      <>\n                        <Play className=\"w-4 h-4 mr-2\" />\n                        {currentStep >= steps.length ? 'Finished' : 'Play'}\n                      </>\n                    )}\n                  </Button>\n\n                  <Button\n                    onClick={resetVisualization}\n                    variant=\"outline\"\n                    className=\"w-full border-purple-500/50 text-purple-400 hover:bg-purple-500/20 hover:border-purple-400 hover:shadow-[0_0_20px_rgba(168,85,247,0.4)] transition-all duration-300\"\n                  >\n                    <RotateCcw className=\"w-4 h-4 mr-2\" />\n                    Reset\n                  </Button>\n\n                  <Button\n                    onClick={() => {\n                      generateSortingSteps(selectedAlgorithm);\n                      setCurrentStep(0);\n                    }}\n                    disabled={array.length === 0 || isPlaying}\n                    className=\"w-full bg-gradient-to-r from-purple-500 to-pink-500 hover:from-purple-400 hover:to-pink-400 text-white font-semibold shadow-[0_0_20px_rgba(168,85,247,0.5)] hover:shadow-[0_0_30px_rgba(168,85,247,0.7)] transition-all duration-300\"\n                  >\n                    <Zap className=\"w-4 h-4 mr-2\" />\n                    Generate Steps\n                  </Button>\n                </div>\n\n                {/* Stats Display */}\n                <div className=\"pt-4 border-t border-gray-700 space-y-2\">\n                  <div className=\"flex justify-between text-sm\">\n                    <span className=\"text-gray-400\">Current Step:</span>\n                    <span className=\"text-cyan-400 font-mono\">{currentStep} / {steps.length}</span>\n                  </div>\n                  <div className=\"flex justify-between text-sm\">\n                    <span className=\"text-gray-400\">Array Length:</span>\n                    <span className=\"text-purple-400 font-mono\">{array.length}</span>\n                  </div>\n                </div>\n              </div>\n            </motion.div>\n            \n            <div className=\"bg-gray-900/50 backdrop-blur-lg border border-cyan-500/30 rounded-xl p-6 shadow-2xl shadow-cyan-500/20\">\n              <div className=\"space-y-6\">\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center gap-2 text-cyan-400\">\n                    <Zap className=\"w-4 h-4\" />\n                    <span className=\"text-sm font-semibold tracking-wider\">ALGORITHM</span>\n                  </div>\n                  <div className=\"grid grid-cols-1 gap-3\">\n                    {mockAlgorithms.map((algo) => (\n                      <motion.button\n                        key={algo.id}\n                        onClick={() => setSelectedAlgorithm(algo.id as AlgorithmType)}\n                        className={`relative p-4 rounded-lg border-2 transition-all duration-300 text-left ${\n                          selectedAlgorithm === algo.id\n                            ? 'border-cyan-400 bg-cyan-500/20 shadow-lg shadow-cyan-500/50'\n                            : 'border-gray-700 bg-gray-800/50 hover:border-cyan-500/50 hover:bg-cyan-500/10'\n                        }`}\n                        whileHover={{ scale: 1.02 }}\n                        whileTap={{ scale: 0.98 }}\n                      >\n                        <div className=\"space-y-1\">\n                          <div className=\"font-semibold text-white\">{algo.name}</div>\n                          <div className={`text-xs ${\n                            selectedAlgorithm === algo.id ? 'text-cyan-300' : 'text-gray-400'\n                          }`}>\n                            {algo.complexity}\n                          </div>\n                        </div>\n                        {selectedAlgorithm === algo.id && (\n                          <motion.div\n                            className=\"absolute inset-0 rounded-lg border-2 border-cyan-400\"\n                            initial={{ opacity: 0 }}\n                            animate={{ opacity: [0.5, 1, 0.5] }}\n                            transition={{ duration: 2, repeat: Infinity }}\n                          />\n                        )}\n                      </motion.button>\n                    ))}\n                  </div>\n                </div></parameter>\n</invoke>\n\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <label className=\"text-cyan-400 text-sm font-medium flex items-center gap-2\">\n                      <Zap className=\"w-4 h-4\" />\n                      Speed\n                    </label>\n                    <span className=\"text-cyan-300 text-xs\">{speed[0]}ms</span>\n                  </div>\n                  <Slider\n                    value={speed}\n                    onValueChange={setSpeed}\n                    min={10}\n                    max={200}\n                    step={10}\n                    className=\"[&_[role=slider]]:bg-cyan-400 [&_[role=slider]]:border-cyan-300 [&_[role=slider]]:shadow-[0_0_15px_rgba(34,211,238,0.8)] [&_[role=slider]]:hover:shadow-[0_0_25px_rgba(34,211,238,1)] [&_[role=slider]]:transition-shadow [&_.relative]:bg-gray-700/50 [&_.relative]:border [&_.relative]:border-cyan-500/30 [&_.bg-primary]:bg-gradient-to-r [&_.bg-primary]:from-cyan-500 [&_.bg-primary]:to-purple-500 [&_.bg-primary]:shadow-[0_0_10px_rgba(34,211,238,0.5)]\"\n                  />\n                </div>\n\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <label className=\"text-cyan-400 text-sm font-medium flex items-center gap-2\">\n                      <BarChart3 className=\"w-4 h-4\" />\n                      Array Size\n                    </label>\n                    <span className=\"text-cyan-300 text-xs\">{arraySize[0]}</span>\n                  </div>\n                  <Slider\n                    value={arraySize}\n                    onValueChange={setArraySize}\n                    min={5}\n                    max={100}\n                    step={5}\n                    className=\"[&_[role=slider]]:bg-gradient-to-r [&_[role=slider]]:from-purple-500 [&_[role=slider]]:to-pink-500 [&_[role=slider]]:border-2 [&_[role=slider]]:border-purple-300 [&_[role=slider]]:shadow-lg [&_[role=slider]]:shadow-purple-500/50 [&_[role=slider]]:transition-all [&_[role=slider]]:hover:shadow-purple-400/70 [&_[role=slider]]:hover:scale-110 [&>span]:bg-gradient-to-r [&>span]:from-purple-500/30 [&>span]:to-pink-500/30 [&>span]:h-2\"\n                  />\n                </div>\n\n                <div className=\"flex gap-3 pt-4\">\n                  <motion.div\n                    className=\"flex-1\"\n                    whileHover={{ scale: 1.05 }}\n                    whileTap={{ scale: 0.95 }}\n                  >\n                    <Button\n                      onClick={isPlaying ? pauseVisualization : startVisualization}\n                      disabled={array.length === 0 || (steps.length === 0 && !isPlaying)}\n                      className=\"w-full bg-gradient-to-r from-cyan-500 to-purple-500 hover:from-cyan-400 hover:to-purple-400 text-white font-semibold py-6 rounded-lg shadow-lg transition-all duration-300 disabled:opacity-50 disabled:cursor-not-allowed relative overflow-hidden group\"\n                      style={{\n                        boxShadow: isPlaying \n                          ? '0 0 30px rgba(168, 85, 247, 0.6), 0 0 60px rgba(6, 182, 212, 0.4)' \n                          : '0 0 20px rgba(168, 85, 247, 0.4), 0 0 40px rgba(6, 182, 212, 0.2)'\n                      }}\n                    >\n                      <motion.div\n                        className=\"absolute inset-0 bg-gradient-to-r from-cyan-400 to-purple-400 opacity-0 group-hover:opacity-20 transition-opacity duration-300\"\n                      />\n                      <motion.div\n                        className=\"flex items-center justify-center gap-2 relative z-10\"\n                        animate={{\n                          scale: isPlaying ? [1, 1.1, 1] : 1\n                        }}\n                        transition={{\n                          duration: 1,\n                          repeat: isPlaying ? Infinity : 0\n                        }}\n                      >\n                        <motion.div\n                          key={isPlaying ? 'pause' : 'play'}\n                          initial={{ rotate: -180, opacity: 0 }}\n                          animate={{ rotate: 0, opacity: 1 }}\n                          exit={{ rotate: 180, opacity: 0 }}\n                          transition={{ duration: 0.3 }}\n                        >\n                          {isPlaying ? (\n                            <Pause className=\"w-5 h-5\" fill=\"currentColor\" />\n                          ) : (\n                            <Play className=\"w-5 h-5\" fill=\"currentColor\" />\n                          )}\n                        </motion.div>\n                        <span>{isPlaying ? 'Pause' : 'Play'}</span>\n                      </motion.div>\n                    </Button>\n                  </motion.div>\n                  <motion.div whileTap={{ rotate: 360 }} transition={{ duration: 0.6 }}>\n                    <Button\n                      onClick={resetVisualization}\n                      variant=\"outline\"\n                      size=\"lg\"\n                      className=\"w-full bg-gradient-to-r from-pink-600/20 to-orange-600/20 border-pink-500/50 hover:border-pink-400 text-white hover:bg-pink-500/30 transition-all duration-300 shadow-[0_0_20px_rgba(236,72,153,0.4)] hover:shadow-[0_0_35px_rgba(236,72,153,0.7)]\"\n                    >\n                      <RotateCcw className=\"w-4 h-4 mr-2\" />\n                      Reset\n                    </Button>\n                  </motion.div>\n                  \n                  <Button\n                    onClick={generateRandomArray}\n                    variant=\"outline\"\n                    size=\"lg\"\n                    className=\"w-full bg-gradient-to-r from-purple-600/20 to-blue-600/20 border-purple-500/50 hover:border-purple-400 text-white hover:bg-purple-500/30 transition-all duration-300 shadow-[0_0_20px_rgba(168,85,247,0.4)] hover:shadow-[0_0_35px_rgba(168,85,247,0.7)]\"\n                  >\n                    <Zap className=\"w-4 h-4 mr-2\" />\n                    New Array\n                  </Button>\n                </div>\n              </div>\n            </div>\n\n            \n            <motion.div\n              initial={{ opacity: 0, x: -50 }}\n              animate={{ opacity: 1, x: 0 }}\n              transition={{ delay: 0.2 }}\n              className=\"bg-gray-900/50 backdrop-blur-lg border border-purple-500/30 rounded-xl p-6 shadow-[0_0_30px_rgba(168,85,247,0.3)] hover:shadow-[0_0_50px_rgba(168,85,247,0.5)] transition-shadow duration-300\"\n            >\n              <div className=\"space-y-4\">\n                <div className=\"flex items-center gap-2 text-purple-400 font-semibold mb-4\">\n                  <Activity className=\"w-5 h-5\" />\n                  <span className=\"text-sm uppercase tracking-wider\">Statistics</span>\n                </div>\n\n                {/* Comparisons */}\n                <motion.div\n                  className=\"bg-gradient-to-r from-cyan-500/10 to-cyan-600/10 border border-cyan-500/30 rounded-lg p-4\"\n                  whileHover={{ scale: 1.02, borderColor: 'rgba(0, 255, 255, 0.5)' }}\n                  animate={{\n                    boxShadow: [\n                      '0 0 10px rgba(0, 255, 255, 0.2)',\n                      '0 0 20px rgba(0, 255, 255, 0.4)',\n                      '0 0 10px rgba(0, 255, 255, 0.2)'\n                    ]\n                  }}\n                  transition={{ duration: 2, repeat: Infinity }}\n                >\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center gap-2\">\n                      <TrendingUp className=\"w-4 h-4 text-cyan-400\" />\n                      <span className=\"text-sm text-gray-300\">Comparisons</span>\n                    </div>\n                    <motion.span\n                      key={comparisons}\n                      initial={{ scale: 1.5, color: '#00ffff' }}\n                      animate={{ scale: 1, color: '#ffffff' }}\n                      className=\"text-2xl font-bold font-mono\"\n                    >\n                      {comparisons}\n                    </motion.span>\n                  </div>\n                </motion.div>\n\n                {/* Swaps */}\n                <motion.div\n                  className=\"bg-gradient-to-r from-pink-500/10 to-pink-600/10 border border-pink-500/30 rounded-lg p-4\"\n                  whileHover={{ scale: 1.02, borderColor: 'rgba(255, 0, 102, 0.5)' }}\n                  animate={{\n                    boxShadow: [\n                      '0 0 10px rgba(255, 0, 102, 0.2)',\n                      '0 0 20px rgba(255, 0, 102, 0.4)',\n                      '0 0 10px rgba(255, 0, 102, 0.2)'\n                    ]\n                  }}\n                  transition={{ duration: 2, repeat: Infinity, delay: 0.5 }}\n                >\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center gap-2\">\n                      <Shuffle className=\"w-4 h-4 text-pink-400\" />\n                      <span className=\"text-sm text-gray-300\">Swaps</span>\n                    </div>\n                    <motion.span\n                      key={swaps}\n                      initial={{ scale: 1.5, color: '#ff0066' }}\n                      animate={{ scale: 1, color: '#ffffff' }}\n                      className=\"text-2xl font-bold font-mono\"\n                    >\n                      {swaps}\n                    </motion.span>\n                  </div>\n                </motion.div>\n\n                {/* Progress */}\n                <motion.div\n                  className=\"bg-gradient-to-r from-purple-500/10 to-purple-600/10 border border-purple-500/30 rounded-lg p-4\"\n                  whileHover={{ scale: 1.02, borderColor: 'rgba(168, 85, 247, 0.5)' }}\n                  animate={{\n                    boxShadow: [\n                      '0 0 10px rgba(168, 85, 247, 0.2)',\n                      '0 0 20px rgba(168, 85, 247, 0.4)',\n                      '0 0 10px rgba(168, 85, 247, 0.2)'\n                    ]\n                  }}\n                  transition={{ duration: 2, repeat: Infinity, delay: 1 }}\n                >\n                  <div className=\"space-y-2\">\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center gap-2\">\n                        <BarChart3 className=\"w-4 h-4 text-purple-400\" />\n                        <span className=\"text-sm text-gray-300\">Progress</span>\n                      </div>\n                      <span className=\"text-lg font-bold font-mono text-white\">\n                        {steps.length > 0 ? Math.round((currentStep / steps.length) * 100) : 0}%\n                      </span>\n                    </div>\n                    <div className=\"w-full bg-gray-800 rounded-full h-2 overflow-hidden\">\n                      <motion.div\n                        className=\"h-full bg-gradient-to-r from-purple-500 via-pink-500 to-cyan-500\"\n                        initial={{ width: 0 }}\n                        animate={{\n                          width: steps.length > 0 ? `${(currentStep / steps.length) * 100}%` : '0%'\n                        }}\n                        transition={{ duration: 0.3 }}\n                        style={{\n                          boxShadow: '0 0 10px rgba(168, 85, 247, 0.8)'\n                        }}\n                      />\n                    </div>\n                  </div>\n                </motion.div>\n\n                {/* Step Counter */}\n                <div className=\"bg-gray-800/50 border border-gray-700 rounded-lg p-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-sm text-gray-400\">Current Step</span>\n                    <span className=\"text-lg font-mono text-gray-300\">\n                      {currentStep} / {steps.length}\n                    </span>\n                  </div>\n                </div>\n              </div>\n            </motion.div>\n          </div>\n\n          <div className=\"lg:col-span-3\">\n            <div className=\"bg-gray-900/50 backdrop-blur-lg border border-purple-500/30 rounded-xl p-8 shadow-2xl shadow-purple-500/20 min-h-[600px]\">\n              {array.length === 0 ? (\n                <motion.div\n                  initial={{ opacity: 0, scale: 0.8 }}\n                  animate={{ opacity: 1, scale: 1 }}\n                  className=\"absolute inset-0 flex flex-col items-center justify-center gap-6\"\n                >\n                  <motion.div\n                    animate={{\n                      boxShadow: [\n                        '0 0 30px rgba(0, 255, 255, 0.3)',\n                        '0 0 60px rgba(255, 0, 255, 0.5)',\n                        '0 0 30px rgba(0, 255, 255, 0.3)'\n                      ]\n                    }}\n                    transition={{ duration: 2, repeat: Infinity }}\n                    className=\"p-8 rounded-full bg-gradient-to-br from-cyan-500/20 to-purple-500/20 border border-cyan-400/50\"\n                  >\n                    <BarChart3 className=\"w-16 h-16 text-cyan-400\" />\n                  </motion.div>\n                  <div className=\"text-center space-y-2\">\n                    <h3 className=\"text-2xl font-bold text-white\">Ready to Visualize</h3>\n                    <p className=\"text-gray-400\">Generate an array to begin sorting</p>\n                  </div>\n                </motion.div>\n              ) : (\n                <>\n                  {/* Current step visualization */}\n                  {currentStep > 0 && steps[currentStep - 1] ? (\n                    steps[currentStep - 1].array.map((element, index) => {\n                      const isComparing = steps[currentStep - 1].comparingIndices.includes(index);\n                      const isSwapping = steps[currentStep - 1].swappingIndices.includes(index);\n                      const isSorted = steps[currentStep - 1].sortedIndices.includes(index);\n                      \n                      const maxValue = Math.max(...array.map(el => el.value));\n                      const heightPercentage = (element.value / maxValue) * 100;\n                      \n                      let barColor = NEON_COLORS[index % NEON_COLORS.length];\n                      let glowColor = barColor;\n                      let glowIntensity = 0.3;\n                      \n                      if (isSorted) {\n                        barColor = '#00ff00';\n                        glowColor = '#00ff00';\n                        glowIntensity = 0.6;\n                      } else if (isSwapping) {\n                        barColor = '#ff0066';\n                        glowColor = '#ff0066';\n                        glowIntensity = 0.8;\n                      } else if (isComparing) {\n                        barColor = '#ffff00';\n                        glowColor = '#ffff00';\n                        glowIntensity = 0.7;\n                      }\n                      \n                      return (\n                        <motion.div\n                          key={element.id}\n                          className=\"relative flex-1 min-w-[4px] max-w-[60px] rounded-t-lg\"\n                          initial={{ height: 0, opacity: 0 }}\n                          animate={{\n                            height: `${heightPercentage}%`,\n                            opacity: 1,\n                            y: isSwapping ? [-10, 0] : 0,\n                            scale: isComparing || isSwapping ? [1, 1.1, 1] : 1\n                          }}\n                          transition={{\n                            height: { duration: 0.3, ease: \"easeOut\" },\n                            y: { duration: 0.4, ease: \"easeInOut\" },\n                            scale: { duration: 0.3, repeat: isComparing || isSwapping ? Infinity : 0 }\n                          }}\n                          style={{\n                            backgroundColor: barColor,\n                            boxShadow: `0 0 ${glowIntensity * 30}px ${glowColor}, 0 0 ${glowIntensity * 60}px ${glowColor}, inset 0 0 ${glowIntensity * 20}px rgba(255, 255, 255, 0.3)`\n                          }}\n                        >\n                          {/* Swap trail effect */}\n                          {isSwapping && (\n                            <motion.div\n                              className=\"absolute inset-0 rounded-t-lg\"\n                              initial={{ opacity: 0.8, scale: 1 }}\n                              animate={{ opacity: 0, scale: 1.5 }}\n                              transition={{ duration: 0.6, repeat: Infinity }}\n                              style={{\n                                backgroundColor: barColor,\n                                filter: 'blur(8px)'\n                              }}\n                            />\n                          )}\n                          \n                          {/* Comparison indicator */}\n                          {isComparing && (\n                            <motion.div\n                              className=\"absolute -top-8 left-1/2 transform -translate-x-1/2\"\n                              animate={{\n                                y: [0, -5, 0],\n                                opacity: [0.7, 1, 0.7]\n                              }}\n                              transition={{ duration: 0.6, repeat: Infinity }}\n                            >\n                              <div className=\"w-3 h-3 rounded-full bg-yellow-400 shadow-[0_0_15px_rgba(255,255,0,0.8)]\" />\n                            </motion.div>\n                          )}\n                          \n                          {/* Value label for larger arrays */}\n                          {arraySize[0] <= 30 && (\n                            <motion.div\n                              className=\"absolute -bottom-6 left-1/2 transform -translate-x-1/2 text-xs font-mono text-white whitespace-nowrap\"\n                              initial={{ opacity: 0 }}\n                              animate={{ opacity: isSorted ? 1 : 0.6 }}\n                            >\n                              {element.value}\n                            </motion.div>\n                          )}\n                        </motion.div>\n                      );\n                    })\n                  ) : (\n                    // Initial array state\n                    array.map((element, index) => {\n                      const maxValue = Math.max(...array.map(el => el.value));\n                      const heightPercentage = (element.value / maxValue) * 100;\n                      const barColor = NEON_COLORS[index % NEON_COLORS.length];\n                      \n                      return (\n                        <motion.div\n                          key={element.id}\n                          className=\"relative flex-1 min-w-[4px] max-w-[60px] rounded-t-lg\"\n                          initial={{ height: 0, opacity: 0 }}\n                          animate={{\n                            height: `${heightPercentage}%`,\n                            opacity: 1\n                          }}\n                          transition={{\n                            height: { duration: 0.5, ease: \"easeOut\", delay: index * 0.02 },\n                            opacity: { duration: 0.3, delay: index * 0.02 }\n                          }}\n                          style={{\n                            backgroundColor: barColor,\n                            boxShadow: `0 0 10px ${barColor}, 0 0 20px ${barColor}, inset 0 0 10px rgba(255, 255, 255, 0.2)`\n                          }}\n                        >\n                          {arraySize[0] <= 30 && (\n                            <div className=\"absolute -bottom-6 left-1/2 transform -translate-x-1/2 text-xs font-mono text-white/60 whitespace-nowrap\">\n                              {element.value}\n                            </div>\n                          )}\n                        </motion.div>\n                      );\n                    })\n                  )}\n                </>\n              )}\n              \n              <div className=\"relative h-full flex items-end justify-center gap-1\">\n                {currentStep > 0 && steps[currentStep - 1] ? (\n                  steps[currentStep - 1].array.map((element, index) => {\n                    const isComparing = steps[currentStep - 1].comparingIndices.includes(index);\n                    const isSwapping = steps[currentStep - 1].swappingIndices.includes(index);\n                    const isSorted = steps[currentStep - 1].sortedIndices.includes(index);\n                    \n                    const barColor = isSorted \n                      ? '#00ff00' \n                      : isSwapping \n                      ? '#ff0066' \n                      : isComparing \n                      ? '#ffff00' \n                      : NEON_COLORS[index % NEON_COLORS.length];\n\n                    return (\n                      <motion.div\n                        key={element.id}\n                        className=\"relative flex-1 min-w-[4px] max-w-[60px] rounded-t-lg\"\n                        initial={{ height: 0, opacity: 0 }}\n                        animate={{\n                          height: `${element.value * 4}px`,\n                          opacity: 1,\n                          backgroundColor: barColor,\n                          boxShadow: [\n                            `0 0 ${isComparing || isSwapping ? '30px' : '15px'} ${barColor}`,\n                            `0 0 ${isComparing || isSwapping ? '40px' : '20px'} ${barColor}`,\n                            `0 0 ${isComparing || isSwapping ? '30px' : '15px'} ${barColor}`\n                          ],\n                          scale: isSwapping ? [1, 1.1, 1] : isComparing ? 1.05 : 1,\n                          y: isSwapping ? [-10, 0] : 0\n                        }}\n                        transition={{\n                          height: { duration: 0.3, ease: 'easeOut' },\n                          backgroundColor: { duration: 0.2 },\n                          boxShadow: { duration: 1, repeat: Infinity },\n                          scale: { duration: 0.3 },\n                          y: { duration: 0.4, ease: 'easeInOut' }\n                        }}\n                        style={{\n                          background: `linear-gradient(to top, ${barColor}, ${barColor}dd)`,\n                          border: `1px solid ${barColor}`,\n                        }}\n                      >\n                        {/* Value label */}\n                        <motion.div\n                          className=\"absolute -top-6 left-1/2 transform -translate-x-1/2 text-xs font-mono font-bold whitespace-nowrap\"\n                          animate={{\n                            color: barColor,\n                            textShadow: `0 0 10px ${barColor}`,\n                            scale: isComparing || isSwapping ? [1, 1.2, 1] : 1\n                          }}\n                          transition={{\n                            scale: { duration: 0.3 },\n                            textShadow: { duration: 1, repeat: Infinity }\n                          }}\n                        >\n                          {element.value}\n                        </motion.div>\n\n                        {/* Swap trail effect */}\n                        {isSwapping && (\n                          <motion.div\n                            className=\"absolute inset-0 rounded-t-lg\"\n                            initial={{ opacity: 0.8, scale: 1 }}\n                            animate={{\n                              opacity: 0,\n                              scale: 1.5,\n                              boxShadow: `0 0 50px ${barColor}`\n                            }}\n                            transition={{ duration: 0.6, ease: 'easeOut' }}\n                            style={{\n                              background: `radial-gradient(circle, ${barColor}88, transparent)`,\n                            }}\n                          />\n                        )}\n\n                        {/* Comparison indicator */}\n                        {isComparing && (\n                          <motion.div\n                            className=\"absolute -top-10 left-1/2 transform -translate-x-1/2\"\n                            animate={{\n                              y: [-5, 5, -5],\n                              opacity: [0.6, 1, 0.6]\n                            }}\n                            transition={{\n                              duration: 0.8,\n                              repeat: Infinity,\n                              ease: 'easeInOut'\n                            }}\n                          >\n                            <div \n                              className=\"w-2 h-2 rounded-full\"\n                              style={{\n                                backgroundColor: '#ffff00',\n                                boxShadow: '0 0 15px #ffff00'\n                              }}\n                            />\n                          </motion.div>\n                        )}\n\n                        {/* Sorted checkmark */}\n                        {isSorted && (\n                          <motion.div\n                            className=\"absolute top-2 left-1/2 transform -translate-x-1/2\"\n                            initial={{ scale: 0, rotate: -180 }}\n                            animate={{ scale: 1, rotate: 0 }}\n                            transition={{ type: 'spring', stiffness: 200, damping: 10 }}\n                          >\n                            <div \n                              className=\"text-white font-bold text-xs\"\n                              style={{\n                                textShadow: '0 0 10px #00ff00',\n                                filter: 'drop-shadow(0 0 5px #00ff00)'\n                              }}\n                            >\n                              \u2713\n                            </div>\n                          </motion.div>\n                        )}\n                      </motion.div>\n                    );\n                  })\n                ) : array.length > 0 ? (\n                  array.map((element, index) => {\n                    const barColor = NEON_COLORS[index % NEON_COLORS.length];\n                    \n                    return (\n                      <motion.div\n                        key={element.id}\n                        className=\"relative flex-1 min-w-[4px] max-w-[60px] rounded-t-lg\"\n                        initial={{ height: 0, opacity: 0 }}\n                        animate={{\n                          height: `${element.value * 4}px`,\n                          opacity: 1,\n                          boxShadow: [\n                            `0 0 15px ${barColor}`,\n                            `0 0 20px ${barColor}`,\n                            `0 0 15px ${barColor}`\n                          ]\n                        }}\n                        transition={{\n                          height: { duration: 0.5, ease: 'easeOut' },\n                          opacity: { duration: 0.3 },\n                          boxShadow: { duration: 2, repeat: Infinity }\n                        }}\n                        style={{\n                          background: `linear-gradient(to top, ${barColor}, ${barColor}dd)`,\n                          border: `1px solid ${barColor}`,\n                        }}\n                      >\n                        <motion.div\n                          className=\"absolute -top-6 left-1/2 transform -translate-x-1/2 text-xs font-mono font-bold\"\n                          style={{\n                            color: barColor,\n                            textShadow: `0 0 10px ${barColor}`\n                          }}\n                        >\n                          {element.value}\n                        </motion.div>\n                      </motion.div>\n                    );\n                  })\n                ) : (\n                  <motion.div\n                    className=\"absolute inset-0 flex items-center justify-center\"\n                    initial={{ opacity: 0 }}\n                    animate={{ opacity: 1 }}\n                  >\n                    <div className=\"text-center space-y-4\">\n                      <motion.div\n                        animate={{\n                          textShadow: [\n                            '0 0 20px rgba(0, 255, 255, 0.5)',\n                            '0 0 30px rgba(0, 255, 255, 0.8)',\n                            '0 0 20px rgba(0, 255, 255, 0.5)'\n                          ]\n                        }}\n                        transition={{ duration: 2, repeat: Infinity }}\n                        className=\"text-cyan-400 text-xl font-semibold\"\n                      >\n                        Generate an array to begin\n                      </motion.div>\n                      <BarChart3 className=\"w-16 h-16 text-cyan-400/50 mx-auto\" />\n                    </div>\n                  </motion.div>\n                )}\n              </div>\n            </div>\n\n            <motion.div\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ delay: 0.3, duration: 0.6 }}\n              className=\"mt-6 space-y-3\"\n            >\n              <div className=\"flex items-center justify-between text-sm\">\n                <span className=\"text-purple-300 font-semibold flex items-center gap-2\">\n                  <BarChart3 className=\"w-4 h-4\" />\n                  Sorting Progress\n                </span>\n                <motion.span\n                  className=\"text-cyan-300 font-mono text-lg font-bold\"\n                  key={currentStep}\n                  initial={{ scale: 1.3, color: '#00ffff' }}\n                  animate={{ scale: 1, color: '#67e8f9' }}\n                  transition={{ duration: 0.3 }}\n                >\n                  {steps.length > 0 ? Math.min(Math.round((currentStep / steps.length) * 100), 100) : 0}%\n                </motion.span>\n              </div>\n              \n              <div className=\"relative h-4 bg-gray-800/80 rounded-full overflow-hidden border border-purple-500/30 shadow-inner\">\n                <motion.div\n                  className=\"absolute inset-0 bg-gradient-to-r from-cyan-500 via-purple-500 to-pink-500 rounded-full\"\n                  initial={{ width: '0%' }}\n                  animate={{ \n                    width: steps.length > 0 ? `${Math.min((currentStep / steps.length) * 100, 100)}%` : '0%'\n                  }}\n                  transition={{ duration: 0.5, ease: 'easeOut' }}\n                  style={{\n                    boxShadow: '0 0 20px rgba(168, 85, 247, 0.6), 0 0 40px rgba(6, 182, 212, 0.4)'\n                  }}\n                />\n                \n                <motion.div\n                  className=\"absolute inset-0 bg-gradient-to-r from-transparent via-white/30 to-transparent\"\n                  animate={{\n                    x: ['-100%', '200%']\n                  }}\n                  transition={{\n                    duration: 2,\n                    repeat: Infinity,\n                    ease: 'linear'\n                  }}\n                  style={{\n                    width: '50%'\n                  }}\n                />\n                \n                {steps.length > 0 && currentStep < steps.length && (\n                  <motion.div\n                    className=\"absolute right-0 top-0 h-full w-1\"\n                    animate={{\n                      boxShadow: [\n                        '0 0 10px 2px rgba(0, 255, 255, 0.8)',\n                        '0 0 20px 4px rgba(255, 0, 255, 0.8)',\n                        '0 0 10px 2px rgba(0, 255, 255, 0.8)'\n                      ]\n                    }}\n                    transition={{ duration: 1, repeat: Infinity }}\n                    style={{\n                      left: `${Math.min((currentStep / steps.length) * 100, 100)}%`,\n                      background: 'linear-gradient(to bottom, #00ffff, #ff00ff)'\n                    }}\n                  />\n                )}\n              </div>\n              \n              <div className=\"flex items-center justify-between text-xs text-gray-400\">\n                <span>Step {currentStep} of {steps.length}</span>\n                {currentStep >= steps.length && steps.length > 0 && (\n                  <motion.span\n                    initial={{ opacity: 0, scale: 0.8 }}\n                    animate={{ opacity: 1, scale: 1 }}\n                    className=\"text-green-400 font-semibold flex items-center gap-1\"\n                  >\n                    <motion.span\n                      animate={{\n                        textShadow: [\n                          '0 0 10px rgba(34, 197, 94, 0.8)',\n                          '0 0 20px rgba(34, 197, 94, 1)',\n                          '0 0 10px rgba(34, 197, 94, 0.8)'\n                        ]\n                      }}\n                      transition={{ duration: 1.5, repeat: Infinity }}\n                    >\n                      \u2713 Complete\n                    </motion.span>\n                  </motion.span>\n                )}\n              </div>\n            </motion.div>\n          </div>\n        </div>\n\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.8, delay: 0.3 }}\n          className=\"bg-gray-900/50 backdrop-blur-lg border border-cyan-500/30 rounded-xl p-6 shadow-[0_0_30px_rgba(0,255,255,0.2)]\"\n        >\n          <div className=\"flex items-center gap-2 mb-4\">\n            <BarChart3 className=\"w-5 h-5 text-cyan-400\" />\n            <h3 className=\"text-lg font-semibold text-white\">Legend</h3>\n          </div>\n          \n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n            <motion.div\n              className=\"flex items-center gap-3 p-3 bg-gray-800/50 rounded-lg border border-cyan-500/30\"\n              whileHover={{ scale: 1.05, borderColor: 'rgba(0, 255, 255, 0.6)' }}\n              animate={{\n                boxShadow: [\n                  '0 0 10px rgba(0, 255, 255, 0.3)',\n                  '0 0 20px rgba(0, 255, 255, 0.5)',\n                  '0 0 10px rgba(0, 255, 255, 0.3)'\n                ]\n              }}\n              transition={{ duration: 2, repeat: Infinity }}\n            >\n              <motion.div\n                className=\"w-4 h-12 bg-gradient-to-t from-cyan-500 to-cyan-300 rounded\"\n                animate={{\n                  boxShadow: [\n                    '0 0 15px rgba(0, 255, 255, 0.6)',\n                    '0 0 25px rgba(0, 255, 255, 0.8)',\n                    '0 0 15px rgba(0, 255, 255, 0.6)'\n                  ]\n                }}\n                transition={{ duration: 1.5, repeat: Infinity }}\n              />\n              <div>\n                <div className=\"text-sm font-semibold text-cyan-300\">Comparing</div>\n                <div className=\"text-xs text-gray-400\">Active comparison</div>\n              </div>\n            </motion.div>\n\n            <motion.div\n              className=\"flex items-center gap-3 p-3 bg-gray-800/50 rounded-lg border border-pink-500/30\"\n              whileHover={{ scale: 1.05, borderColor: 'rgba(236, 72, 153, 0.6)' }}\n              animate={{\n                boxShadow: [\n                  '0 0 10px rgba(236, 72, 153, 0.3)',\n                  '0 0 20px rgba(236, 72, 153, 0.5)',\n                  '0 0 10px rgba(236, 72, 153, 0.3)'\n                ]\n              }}\n              transition={{ duration: 2, repeat: Infinity, delay: 0.5 }}\n            >\n              <motion.div\n                className=\"w-4 h-12 bg-gradient-to-t from-pink-500 to-pink-300 rounded\"\n                animate={{\n                  boxShadow: [\n                    '0 0 15px rgba(236, 72, 153, 0.6)',\n                    '0 0 25px rgba(236, 72, 153, 0.8)',\n                    '0 0 15px rgba(236, 72, 153, 0.6)'\n                  ],\n                  x: [-2, 2, -2]\n                }}\n                transition={{ duration: 1.5, repeat: Infinity }}\n              />\n              <div>\n                <div className=\"text-sm font-semibold text-pink-300\">Swapping</div>\n                <div className=\"text-xs text-gray-400\">Elements moving</div>\n              </div>\n            </motion.div>\n\n            <motion.div\n              className=\"flex items-center gap-3 p-3 bg-gray-800/50 rounded-lg border border-green-500/30\"\n              whileHover={{ scale: 1.05, borderColor: 'rgba(34, 197, 94, 0.6)' }}\n              animate={{\n                boxShadow: [\n                  '0 0 10px rgba(34, 197, 94, 0.3)',\n                  '0 0 20px rgba(34, 197, 94, 0.5)',\n                  '0 0 10px rgba(34, 197, 94, 0.3)'\n                ]\n              }}\n              transition={{ duration: 2, repeat: Infinity, delay: 1 }}\n            >\n              <motion.div\n                className=\"w-4 h-12 bg-gradient-to-t from-green-500 to-green-300 rounded\"\n                animate={{\n                  boxShadow: [\n                    '0 0 15px rgba(34, 197, 94, 0.6)',\n                    '0 0 25px rgba(34, 197, 94, 0.8)',\n                    '0 0 15px rgba(34, 197, 94, 0.6)'\n                  ]\n                }}\n                transition={{ duration: 1.5, repeat: Infinity }}\n              />\n              <div>\n                <div className=\"text-sm font-semibold text-green-300\">Sorted</div>\n                <div className=\"text-xs text-gray-400\">In final position</div>\n              </div>\n            </motion.div>\n\n            <motion.div\n              className=\"flex items-center gap-3 p-3 bg-gray-800/50 rounded-lg border border-purple-500/30\"\n              whileHover={{ scale: 1.05, borderColor: 'rgba(168, 85, 247, 0.6)' }}\n            >\n              <div className=\"w-4 h-12 bg-gradient-to-t from-purple-500 to-purple-300 rounded opacity-60\" />\n              <div>\n                <div className=\"text-sm font-semibold text-purple-300\">Unsorted</div>\n                <div className=\"text-xs text-gray-400\">Waiting to sort</div>\n              </div>\n            </motion.div>\n          </div>\n        </motion.div>\n      </div>\n    </div>\n  );\n}",
    "error": null,
    "elapsed_time": 99.38443613052368,
    "success": true
  }
}