{
  "prompt_id": "dashboard",
  "prompt_name": "Analytics Dashboard",
  "mode": "sequential",
  "run_number": 25,
  "timestamp": "2025-10-14T10:58:49.207454",
  "response_time": 74.34002017974854,
  "total_tokens": null,
  "response_content": "import { useState, useEffect } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Moon, Sun, TrendingUp, TrendingDown, Users, DollarSign, ShoppingCart, Activity } from 'lucide-react';\nimport { motion } from 'framer-motion';\n\ninterface MetricData {\n  label: string;\n  value: string;\n  change: number;\n  icon: any;\n}\n\ninterface ChartDataPoint {\n  label: string;\n  value: number;\n}\n\ninterface TableRow {\n  id: number;\n  product: string;\n  sales: number;\n  revenue: string;\n  status: 'success' | 'warning' | 'danger';\n}\n\nexport default function AnalyticsDashboard() {\n  const [isDarkMode, setIsDarkMode] = useState(true);\n  const [metrics, setMetrics] = useState<MetricData[]>([\n    { label: 'Total Revenue', value: '$45,231', change: 12.5, icon: DollarSign },\n    { label: 'Active Users', value: '2,345', change: 8.2, icon: Users },\n    { label: 'Total Orders', value: '1,234', change: -3.1, icon: ShoppingCart },\n    { label: 'Conversion Rate', value: '3.24%', change: 5.7, icon: Activity },\n  ]);\n\n  const [chartData, setChartData] = useState<ChartDataPoint[]>([\n    { label: 'Jan', value: 4000 },\n    { label: 'Feb', value: 3000 },\n    { label: 'Mar', value: 5000 },\n    { label: 'Apr', value: 4500 },\n    { label: 'May', value: 6000 },\n    { label: 'Jun', value: 5500 },\n    { label: 'Jul', value: 7000 },\n  ]);\n\n  const [pieData, setPieData] = useState<ChartDataPoint[]>([\n    { label: 'Desktop', value: 45 },\n    { label: 'Mobile', value: 35 },\n    { label: 'Tablet', value: 20 },\n  ]);\n\n  const [tableData, setTableData] = useState<TableRow[]>([\n    { id: 1, product: 'Premium Subscription', sales: 1234, revenue: '$12,340', status: 'success' },\n    { id: 2, product: 'Basic Plan', sales: 856, revenue: '$8,560', status: 'success' },\n    { id: 3, product: 'Enterprise License', sales: 432, revenue: '$43,200', status: 'warning' },\n    { id: 4, product: 'Add-on Features', sales: 289, revenue: '$2,890', status: 'success' },\n    { id: 5, product: 'Consulting Services', sales: 156, revenue: '$15,600', status: 'danger' },\n  ]);\n\n  useEffect(() => {\n    if (isDarkMode) {\n      document.documentElement.classList.add('dark');\n    } else {\n      document.documentElement.classList.remove('dark');\n    }\n  }, [isDarkMode]);\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setMetrics(prev => prev.map(metric => ({\n        ...metric,\n        value: metric.label === 'Total Revenue' \n          ? `$${(Math.random() * 10000 + 40000).toFixed(0)}`\n          : metric.label === 'Active Users'\n          ? `${(Math.random() * 500 + 2000).toFixed(0)}`\n          : metric.label === 'Total Orders'\n          ? `${(Math.random() * 300 + 1000).toFixed(0)}`\n          : `${(Math.random() * 2 + 2.5).toFixed(2)}%`,\n        change: (Math.random() * 20 - 5),\n      })));\n\n      setChartData(prev => prev.map(point => ({\n        ...point,\n        value: Math.floor(Math.random() * 3000 + 3000),\n      })));\n    }, 3000);\n\n    return () => clearInterval(interval);\n  }, []);\n\n  const maxChartValue = Math.max(...chartData.map(d => d.value));\n\n  const containerVariants = {\n    hidden: { opacity: 0 },\n    visible: {\n      opacity: 1,\n      transition: {\n        staggerChildren: 0.1,\n      },\n    },\n  };\n\n  const itemVariants = {\n    hidden: { opacity: 0, y: 20 },\n    visible: { opacity: 1, y: 0 },\n  };\n\n  return (\n    <div className={`min-h-screen ${isDarkMode ? 'dark bg-gray-950' : 'bg-gray-50'}`}>\n      <div className=\"container mx-auto p-4 md:p-6 lg:p-8\">\n        <motion.div\n          initial=\"hidden\"\n          animate=\"visible\"\n          variants={containerVariants}\n        >\n          <motion.div variants={itemVariants} className=\"flex flex-col md:flex-row justify-between items-start md:items-center mb-8 gap-4\">\n            <div>\n              <h1 className=\"text-3xl md:text-4xl font-bold text-gray-900 dark:text-white\">Analytics Dashboard</h1>\n              <p className=\"text-gray-600 dark:text-gray-400 mt-2\">Real-time insights and performance metrics</p>\n            </div>\n            <Button\n              variant=\"outline\"\n              size=\"icon\"\n              onClick={() => setIsDarkMode(!isDarkMode)}\n              className=\"dark:border-gray-700\"\n            >\n              {isDarkMode ? <Sun className=\"h-5 w-5\" /> : <Moon className=\"h-5 w-5\" />}\n            </Button>\n          </motion.div>\n\n          <motion.div variants={itemVariants} className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 md:gap-6 mb-8\">\n            {metrics.map((metric, index) => {\n              const Icon = metric.icon;\n              return (\n                <motion.div\n                  key={metric.label}\n                  whileHover={{ scale: 1.02 }}\n                  transition={{ type: 'spring', stiffness: 300 }}\n                >\n                  <Card className=\"dark:bg-gray-900 dark:border-gray-800\">\n                    <CardHeader className=\"flex flex-row items-center justify-between pb-2\">\n                      <CardTitle className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">\n                        {metric.label}\n                      </CardTitle>\n                      <Icon className=\"h-4 w-4 text-gray-600 dark:text-gray-400\" />\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"text-2xl font-bold text-gray-900 dark:text-white\">{metric.value}</div>\n                      <div className=\"flex items-center mt-2\">\n                        {metric.change >= 0 ? (\n                          <TrendingUp className=\"h-4 w-4 text-green-500 mr-1\" />\n                        ) : (\n                          <TrendingDown className=\"h-4 w-4 text-red-500 mr-1\" />\n                        )}\n                        <span className={`text-sm font-medium ${metric.change >= 0 ? 'text-green-500' : 'text-red-500'}`}>\n                          {metric.change >= 0 ? '+' : ''}{metric.change.toFixed(1)}%\n                        </span>\n                        <span className=\"text-sm text-gray-600 dark:text-gray-400 ml-2\">vs last month</span>\n                      </div>\n                    </CardContent>\n                  </Card>\n                </motion.div>\n              );\n            })}\n          </motion.div>\n\n          <motion.div variants={itemVariants}>\n            <Tabs defaultValue=\"overview\" className=\"space-y-4\">\n              <TabsList className=\"dark:bg-gray-900 dark:border-gray-800\">\n                <TabsTrigger value=\"overview\">Overview</TabsTrigger>\n                <TabsTrigger value=\"analytics\">Analytics</TabsTrigger>\n                <TabsTrigger value=\"reports\">Reports</TabsTrigger>\n              </TabsList>\n\n              <TabsContent value=\"overview\" className=\"space-y-4\">\n                <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-4 md:gap-6\">\n                  <Card className=\"lg:col-span-2 dark:bg-gray-900 dark:border-gray-800\">\n                    <CardHeader>\n                      <CardTitle className=\"dark:text-white\">Revenue Trend</CardTitle>\n                      <CardDescription className=\"dark:text-gray-400\">Monthly revenue over time</CardDescription>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"h-80 flex items-end justify-between gap-2 px-4\">\n                        {chartData.map((point, index) => (\n                          <motion.div\n                            key={point.label}\n                            className=\"flex-1 flex flex-col items-center\"\n                            initial={{ height: 0 }}\n                            animate={{ height: 'auto' }}\n                            transition={{ delay: index * 0.1 }}\n                          >\n                            <motion.div\n                              className=\"w-full bg-gradient-to-t from-blue-500 to-blue-400 rounded-t-lg relative group cursor-pointer\"\n                              style={{ height: `${(point.value / maxChartValue) * 100}%` }}\n                              whileHover={{ scale: 1.05 }}\n                            >\n                              <div className=\"absolute -top-8 left-1/2 transform -translate-x-1/2 bg-gray-900 dark:bg-gray-700 text-white text-xs px-2 py-1 rounded opacity-0 group-hover:opacity-100 transition-opacity whitespace-nowrap\">\n                                ${point.value.toLocaleString()}\n                              </div>\n                            </motion.div>\n                            <span className=\"text-xs text-gray-600 dark:text-gray-400 mt-2\">{point.label}</span>\n                          </motion.div>\n                        ))}\n                      </div>\n                    </CardContent>\n                  </Card>\n\n                  <Card className=\"dark:bg-gray-900 dark:border-gray-800\">\n                    <CardHeader>\n                      <CardTitle className=\"dark:text-white\">Traffic Sources</CardTitle>\n                      <CardDescription className=\"dark:text-gray-400\">User distribution by device</CardDescription>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"space-y-4\">\n                        {pieData.map((item, index) => {\n                          const colors = ['bg-blue-500', 'bg-purple-500', 'bg-pink-500'];\n                          return (\n                            <div key={item.label} className=\"space-y-2\">\n                              <div className=\"flex justify-between text-sm\">\n                                <span className=\"text-gray-600 dark:text-gray-400\">{item.label}</span>\n                                <span className=\"font-medium text-gray-900 dark:text-white\">{item.value}%</span>\n                              </div>\n                              <div className=\"h-2 bg-gray-200 dark:bg-gray-800 rounded-full overflow-hidden\">\n                                <motion.div\n                                  className={`h-full ${colors[index]}`}\n                                  initial={{ width: 0 }}\n                                  animate={{ width: `${item.value}%` }}\n                                  transition={{ duration: 1, delay: index * 0.2 }}\n                                />\n                              </div>\n                            </div>\n                          );\n                        })}\n                      </div>\n                      <div className=\"mt-6 pt-6 border-t dark:border-gray-800\">\n                        <div className=\"flex justify-center\">\n                          <div className=\"relative w-48 h-48\">\n                            {pieData.map((item, index) => {\n                              const colors = ['stroke-blue-500', 'stroke-purple-500', 'stroke-pink-500'];\n                              const total = pieData.reduce((sum, d) => sum + d.value, 0);\n                              const percentage = (item.value / total) * 100;\n                              const prevPercentage = pieData.slice(0, index).reduce((sum, d) => sum + d.value, 0) / total * 100;\n                              \n                              return (\n                                <svg key={item.label} className=\"absolute inset-0 w-full h-full -rotate-90\">\n                                  <motion.circle\n                                    cx=\"96\"\n                                    cy=\"96\"\n                                    r=\"80\"\n                                    fill=\"none\"\n                                    className={colors[index]}\n                                    strokeWidth=\"32\"\n                                    strokeDasharray={`${percentage * 5.03} ${100 * 5.03}`}\n                                    strokeDashoffset={-prevPercentage * 5.03}\n                                    initial={{ strokeDasharray: '0 503' }}\n                                    animate={{ strokeDasharray: `${percentage * 5.03} ${100 * 5.03}` }}\n                                    transition={{ duration: 1, delay: index * 0.2 }}\n                                  />\n                                </svg>\n                              );\n                            })}\n                          </div>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                </div>\n\n                <Card className=\"dark:bg-gray-900 dark:border-gray-800\">\n                  <CardHeader>\n                    <CardTitle className=\"dark:text-white\">Top Products</CardTitle>\n                    <CardDescription className=\"dark:text-gray-400\">Best performing products this month</CardDescription>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"overflow-x-auto\">\n                      <table className=\"w-full\">\n                        <thead>\n                          <tr className=\"border-b dark:border-gray-800\">\n                            <th className=\"text-left py-3 px-4 text-sm font-medium text-gray-600 dark:text-gray-400\">Product</th>\n                            <th className=\"text-left py-3 px-4 text-sm font-medium text-gray-600 dark:text-gray-400\">Sales</th>\n                            <th className=\"text-left py-3 px-4 text-sm font-medium text-gray-600 dark:text-gray-400\">Revenue</th>\n                            <th className=\"text-left py-3 px-4 text-sm font-medium text-gray-600 dark:text-gray-400\">Status</th>\n                          </tr>\n                        </thead>\n                        <tbody>\n                          {tableData.map((row, index) => (\n                            <motion.tr\n                              key={row.id}\n                              className=\"border-b dark:border-gray-800 hover:bg-gray-50 dark:hover:bg-gray-800 transition-colors\"\n                              initial={{ opacity: 0, x: -20 }}\n                              animate={{ opacity: 1, x: 0 }}\n                              transition={{ delay: index * 0.1 }}\n                            >\n                              <td className=\"py-3 px-4 text-sm text-gray-900 dark:text-white font-medium\">{row.product}</td>\n                              <td className=\"py-3 px-4 text-sm text-gray-600 dark:text-gray-400\">{row.sales.toLocaleString()}</td>\n                              <td className=\"py-3 px-4 text-sm text-gray-900 dark:text-white font-medium\">{row.revenue}</td>\n                              <td className=\"py-3 px-4\">\n                                <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${\n                                  row.status === 'success' ? 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200' :\n                                  row.status === 'warning' ? 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200' :\n                                  'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200'\n                                }`}>\n                                  {row.status === 'success' ? 'Active' : row.status === 'warning' ? 'Pending' : 'Low Stock'}\n                                </span>\n                              </td>\n                            </motion.tr>\n                          ))}\n                        </tbody>\n                      </table>\n                    </div>\n                  </CardContent>\n                </Card>\n              </TabsContent>\n\n              <TabsContent value=\"analytics\" className=\"space-y-4\">\n                <Card className=\"dark:bg-gray-900 dark:border-gray-800\">\n                  <CardHeader>\n                    <CardTitle className=\"dark:text-white\">Detailed Analytics</CardTitle>\n                    <CardDescription className=\"dark:text-gray-400\">In-depth performance metrics and insights</CardDescription>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                      <div className=\"space-y-4\">\n                        <h3 className=\"font-semibold text-gray-900 dark:text-white\">User Engagement</h3>\n                        <div className=\"space-y-3\">\n                          <div>\n                            <div className=\"flex justify-between text-sm mb-1\">\n                              <span className=\"text-gray-600 dark:text-gray-400\">Session Duration</span>\n                              <span className=\"font-medium text-gray-900 dark:text-white\">4m 32s</span>\n                            </div>\n                            <div className=\"h-2 bg-gray-200 dark:bg-gray-800 rounded-full overflow-hidden\">\n                              <motion.div\n                                className=\"h-full bg-blue-500\"\n                                initial={{ width: 0 }}\n                                animate={{ width: '75%' }}\n                                transition={{ duration: 1 }}\n                              />\n                            </div>\n                          </div>\n                          <div>\n                            <div className=\"flex justify-between text-sm mb-1\">\n                              <span className=\"text-gray-600 dark:text-gray-400\">Pages per Session</span>\n                              <span className=\"font-medium text-gray-900 dark:text-white\">5.2</span>\n                            </div>\n                            <div className=\"h-2 bg-gray-200 dark:bg-gray-800 rounded-full overflow-hidden\">\n                              <motion.div\n                                className=\"h-full bg-purple-500\"\n                                initial={{ width: 0 }}\n                                animate={{ width: '65%' }}\n                                transition={{ duration: 1, delay: 0.2 }}\n                              />\n                            </div>\n                          </div>\n                          <div>\n                            <div className=\"flex justify-between text-sm mb-1\">\n                              <span className=\"text-gray-600 dark:text-gray-400\">Bounce Rate</span>\n                              <span className=\"font-medium text-gray-900 dark:text-white\">32%</span>\n                            </div>\n                            <div className=\"h-2 bg-gray-200 dark:bg-gray-800 rounded-full overflow-hidden\">\n                              <motion.div\n                                className=\"h-full bg-pink-500\"\n                                initial={{ width: 0 }}\n                                animate={{ width: '32%' }}\n                                transition={{ duration: 1, delay: 0.4 }}\n                              />\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                      <div className=\"space-y-4\">\n                        <h3 className=\"font-semibold text-gray-900 dark:text-white\">Conversion Funnel</h3>\n                        <div className=\"space-y-2\">\n                          {[\n                            { stage: 'Visitors', value: 10000, percentage: 100 },\n                            { stage: 'Product Views', value: 7500, percentage: 75 },\n                            { stage: 'Add to Cart', value: 3000, percentage: 30 },\n                            { stage: 'Checkout', value: 1500, percentage: 15 },\n                            { stage: 'Purchase', value: 1200, percentage: 12 },\n                          ].map((stage, index) => (\n                            <motion.div\n                              key={stage.stage}\n                              className=\"flex items-center gap-3\"\n                              initial={{ opacity: 0, x: -20 }}\n                              animate={{ opacity: 1, x: 0 }}\n                              transition={{ delay: index * 0.1 }}\n                            >\n                              <div className=\"w-32 text-sm text-gray-600 dark:text-gray-400\">{stage.stage}</div>\n                              <div className=\"flex-1 h-8 bg-gray-200 dark:bg-gray-800 rounded overflow-hidden\">\n                                <motion.div\n                                  className=\"h-full bg-gradient-to-r from-blue-500 to-purple-500 flex items-center justify-end px-3\"\n                                  initial={{ width: 0 }}\n                                  animate={{ width: `${stage.percentage}%` }}\n                                  transition={{ duration: 1, delay: index * 0.1 }}\n                                >\n                                  <span className=\"text-xs font-medium text-white\">{stage.value.toLocaleString()}</span>\n                                </motion.div>\n                              </div>\n                            </motion.div>\n                          ))}\n                        </div>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              </TabsContent>\n\n              <TabsContent value=\"reports\" className=\"space-y-4\">\n                <Card className=\"dark:bg-gray-900 dark:border-gray-800\">\n                  <CardHeader>\n                    <CardTitle className=\"dark:text-white\">Generated Reports</CardTitle>\n                    <CardDescription className=\"dark:text-gray-400\">Download and view your analytics reports</CardDescription>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-3\">\n                      {[\n                        { name: 'Monthly Revenue Report', date: '2024-01-15', size: '2.4 MB' },\n                        { name: 'User Analytics Summary', date: '2024-01-10', size: '1.8 MB' },\n                        { name: 'Product Performance', date: '2024-01-05', size: '3.1 MB' },\n                        { name: 'Traffic Analysis', date: '2024-01-01', size: '1.2 MB' },\n                      ].map((report, index) => (\n                        <motion.div\n                          key={report.name}\n                          className=\"flex items-center justify-between p-4 border dark:border-gray-800 rounded-lg hover:bg-gray-50 dark:hover:bg-gray-800 transition-colors\"\n                          initial={{ opacity: 0, y: 20 }}\n                          animate={{ opacity: 1, y: 0 }}\n                          transition={{ delay: index * 0.1 }}\n                        >\n                          <div>\n                            <h4 className=\"font-medium text-gray-900 dark:text-white\">{report.name}</h4>\n                            <p className=\"text-sm text-gray-600 dark:text-gray-400\">{report.date} \u2022 {report.size}</p>\n                          </div>\n                          <Button variant=\"outline\" size=\"sm\" className=\"dark:border-gray-700\">\n                            Download\n                          </Button>\n                        </motion.div>\n                      ))}\n                    </div>\n                  </CardContent>\n                </Card>\n              </TabsContent>\n            </Tabs>\n          </motion.div>\n        </motion.div>\n      </div>\n    </div>\n  );\n}",
  "error": null,
  "overall_score": 52,
  "code_quality_score": 16,
  "architecture_score": 12,
  "performance_score": 10,
  "accessibility_score": 14,
  "metadata": {
    "document_id": "eval_room_021e7845d324",
    "prompt_category": "intermediate",
    "prompt_complexity": 6.0
  },
  "raw_response": {
    "document_id": "eval_room_021e7845d324",
    "mode": "sequential",
    "prompt": "Generate an analytics dashboard page with charts, data tables, real-time updates, dark mode, and responsive design",
    "content": "import { useState, useEffect } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Moon, Sun, TrendingUp, TrendingDown, Users, DollarSign, ShoppingCart, Activity } from 'lucide-react';\nimport { motion } from 'framer-motion';\n\ninterface MetricData {\n  label: string;\n  value: string;\n  change: number;\n  icon: any;\n}\n\ninterface ChartDataPoint {\n  label: string;\n  value: number;\n}\n\ninterface TableRow {\n  id: number;\n  product: string;\n  sales: number;\n  revenue: string;\n  status: 'success' | 'warning' | 'danger';\n}\n\nexport default function AnalyticsDashboard() {\n  const [isDarkMode, setIsDarkMode] = useState(true);\n  const [metrics, setMetrics] = useState<MetricData[]>([\n    { label: 'Total Revenue', value: '$45,231', change: 12.5, icon: DollarSign },\n    { label: 'Active Users', value: '2,345', change: 8.2, icon: Users },\n    { label: 'Total Orders', value: '1,234', change: -3.1, icon: ShoppingCart },\n    { label: 'Conversion Rate', value: '3.24%', change: 5.7, icon: Activity },\n  ]);\n\n  const [chartData, setChartData] = useState<ChartDataPoint[]>([\n    { label: 'Jan', value: 4000 },\n    { label: 'Feb', value: 3000 },\n    { label: 'Mar', value: 5000 },\n    { label: 'Apr', value: 4500 },\n    { label: 'May', value: 6000 },\n    { label: 'Jun', value: 5500 },\n    { label: 'Jul', value: 7000 },\n  ]);\n\n  const [pieData, setPieData] = useState<ChartDataPoint[]>([\n    { label: 'Desktop', value: 45 },\n    { label: 'Mobile', value: 35 },\n    { label: 'Tablet', value: 20 },\n  ]);\n\n  const [tableData, setTableData] = useState<TableRow[]>([\n    { id: 1, product: 'Premium Subscription', sales: 1234, revenue: '$12,340', status: 'success' },\n    { id: 2, product: 'Basic Plan', sales: 856, revenue: '$8,560', status: 'success' },\n    { id: 3, product: 'Enterprise License', sales: 432, revenue: '$43,200', status: 'warning' },\n    { id: 4, product: 'Add-on Features', sales: 289, revenue: '$2,890', status: 'success' },\n    { id: 5, product: 'Consulting Services', sales: 156, revenue: '$15,600', status: 'danger' },\n  ]);\n\n  useEffect(() => {\n    if (isDarkMode) {\n      document.documentElement.classList.add('dark');\n    } else {\n      document.documentElement.classList.remove('dark');\n    }\n  }, [isDarkMode]);\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setMetrics(prev => prev.map(metric => ({\n        ...metric,\n        value: metric.label === 'Total Revenue' \n          ? `$${(Math.random() * 10000 + 40000).toFixed(0)}`\n          : metric.label === 'Active Users'\n          ? `${(Math.random() * 500 + 2000).toFixed(0)}`\n          : metric.label === 'Total Orders'\n          ? `${(Math.random() * 300 + 1000).toFixed(0)}`\n          : `${(Math.random() * 2 + 2.5).toFixed(2)}%`,\n        change: (Math.random() * 20 - 5),\n      })));\n\n      setChartData(prev => prev.map(point => ({\n        ...point,\n        value: Math.floor(Math.random() * 3000 + 3000),\n      })));\n    }, 3000);\n\n    return () => clearInterval(interval);\n  }, []);\n\n  const maxChartValue = Math.max(...chartData.map(d => d.value));\n\n  const containerVariants = {\n    hidden: { opacity: 0 },\n    visible: {\n      opacity: 1,\n      transition: {\n        staggerChildren: 0.1,\n      },\n    },\n  };\n\n  const itemVariants = {\n    hidden: { opacity: 0, y: 20 },\n    visible: { opacity: 1, y: 0 },\n  };\n\n  return (\n    <div className={`min-h-screen ${isDarkMode ? 'dark bg-gray-950' : 'bg-gray-50'}`}>\n      <div className=\"container mx-auto p-4 md:p-6 lg:p-8\">\n        <motion.div\n          initial=\"hidden\"\n          animate=\"visible\"\n          variants={containerVariants}\n        >\n          <motion.div variants={itemVariants} className=\"flex flex-col md:flex-row justify-between items-start md:items-center mb-8 gap-4\">\n            <div>\n              <h1 className=\"text-3xl md:text-4xl font-bold text-gray-900 dark:text-white\">Analytics Dashboard</h1>\n              <p className=\"text-gray-600 dark:text-gray-400 mt-2\">Real-time insights and performance metrics</p>\n            </div>\n            <Button\n              variant=\"outline\"\n              size=\"icon\"\n              onClick={() => setIsDarkMode(!isDarkMode)}\n              className=\"dark:border-gray-700\"\n            >\n              {isDarkMode ? <Sun className=\"h-5 w-5\" /> : <Moon className=\"h-5 w-5\" />}\n            </Button>\n          </motion.div>\n\n          <motion.div variants={itemVariants} className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 md:gap-6 mb-8\">\n            {metrics.map((metric, index) => {\n              const Icon = metric.icon;\n              return (\n                <motion.div\n                  key={metric.label}\n                  whileHover={{ scale: 1.02 }}\n                  transition={{ type: 'spring', stiffness: 300 }}\n                >\n                  <Card className=\"dark:bg-gray-900 dark:border-gray-800\">\n                    <CardHeader className=\"flex flex-row items-center justify-between pb-2\">\n                      <CardTitle className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">\n                        {metric.label}\n                      </CardTitle>\n                      <Icon className=\"h-4 w-4 text-gray-600 dark:text-gray-400\" />\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"text-2xl font-bold text-gray-900 dark:text-white\">{metric.value}</div>\n                      <div className=\"flex items-center mt-2\">\n                        {metric.change >= 0 ? (\n                          <TrendingUp className=\"h-4 w-4 text-green-500 mr-1\" />\n                        ) : (\n                          <TrendingDown className=\"h-4 w-4 text-red-500 mr-1\" />\n                        )}\n                        <span className={`text-sm font-medium ${metric.change >= 0 ? 'text-green-500' : 'text-red-500'}`}>\n                          {metric.change >= 0 ? '+' : ''}{metric.change.toFixed(1)}%\n                        </span>\n                        <span className=\"text-sm text-gray-600 dark:text-gray-400 ml-2\">vs last month</span>\n                      </div>\n                    </CardContent>\n                  </Card>\n                </motion.div>\n              );\n            })}\n          </motion.div>\n\n          <motion.div variants={itemVariants}>\n            <Tabs defaultValue=\"overview\" className=\"space-y-4\">\n              <TabsList className=\"dark:bg-gray-900 dark:border-gray-800\">\n                <TabsTrigger value=\"overview\">Overview</TabsTrigger>\n                <TabsTrigger value=\"analytics\">Analytics</TabsTrigger>\n                <TabsTrigger value=\"reports\">Reports</TabsTrigger>\n              </TabsList>\n\n              <TabsContent value=\"overview\" className=\"space-y-4\">\n                <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-4 md:gap-6\">\n                  <Card className=\"lg:col-span-2 dark:bg-gray-900 dark:border-gray-800\">\n                    <CardHeader>\n                      <CardTitle className=\"dark:text-white\">Revenue Trend</CardTitle>\n                      <CardDescription className=\"dark:text-gray-400\">Monthly revenue over time</CardDescription>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"h-80 flex items-end justify-between gap-2 px-4\">\n                        {chartData.map((point, index) => (\n                          <motion.div\n                            key={point.label}\n                            className=\"flex-1 flex flex-col items-center\"\n                            initial={{ height: 0 }}\n                            animate={{ height: 'auto' }}\n                            transition={{ delay: index * 0.1 }}\n                          >\n                            <motion.div\n                              className=\"w-full bg-gradient-to-t from-blue-500 to-blue-400 rounded-t-lg relative group cursor-pointer\"\n                              style={{ height: `${(point.value / maxChartValue) * 100}%` }}\n                              whileHover={{ scale: 1.05 }}\n                            >\n                              <div className=\"absolute -top-8 left-1/2 transform -translate-x-1/2 bg-gray-900 dark:bg-gray-700 text-white text-xs px-2 py-1 rounded opacity-0 group-hover:opacity-100 transition-opacity whitespace-nowrap\">\n                                ${point.value.toLocaleString()}\n                              </div>\n                            </motion.div>\n                            <span className=\"text-xs text-gray-600 dark:text-gray-400 mt-2\">{point.label}</span>\n                          </motion.div>\n                        ))}\n                      </div>\n                    </CardContent>\n                  </Card>\n\n                  <Card className=\"dark:bg-gray-900 dark:border-gray-800\">\n                    <CardHeader>\n                      <CardTitle className=\"dark:text-white\">Traffic Sources</CardTitle>\n                      <CardDescription className=\"dark:text-gray-400\">User distribution by device</CardDescription>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"space-y-4\">\n                        {pieData.map((item, index) => {\n                          const colors = ['bg-blue-500', 'bg-purple-500', 'bg-pink-500'];\n                          return (\n                            <div key={item.label} className=\"space-y-2\">\n                              <div className=\"flex justify-between text-sm\">\n                                <span className=\"text-gray-600 dark:text-gray-400\">{item.label}</span>\n                                <span className=\"font-medium text-gray-900 dark:text-white\">{item.value}%</span>\n                              </div>\n                              <div className=\"h-2 bg-gray-200 dark:bg-gray-800 rounded-full overflow-hidden\">\n                                <motion.div\n                                  className={`h-full ${colors[index]}`}\n                                  initial={{ width: 0 }}\n                                  animate={{ width: `${item.value}%` }}\n                                  transition={{ duration: 1, delay: index * 0.2 }}\n                                />\n                              </div>\n                            </div>\n                          );\n                        })}\n                      </div>\n                      <div className=\"mt-6 pt-6 border-t dark:border-gray-800\">\n                        <div className=\"flex justify-center\">\n                          <div className=\"relative w-48 h-48\">\n                            {pieData.map((item, index) => {\n                              const colors = ['stroke-blue-500', 'stroke-purple-500', 'stroke-pink-500'];\n                              const total = pieData.reduce((sum, d) => sum + d.value, 0);\n                              const percentage = (item.value / total) * 100;\n                              const prevPercentage = pieData.slice(0, index).reduce((sum, d) => sum + d.value, 0) / total * 100;\n                              \n                              return (\n                                <svg key={item.label} className=\"absolute inset-0 w-full h-full -rotate-90\">\n                                  <motion.circle\n                                    cx=\"96\"\n                                    cy=\"96\"\n                                    r=\"80\"\n                                    fill=\"none\"\n                                    className={colors[index]}\n                                    strokeWidth=\"32\"\n                                    strokeDasharray={`${percentage * 5.03} ${100 * 5.03}`}\n                                    strokeDashoffset={-prevPercentage * 5.03}\n                                    initial={{ strokeDasharray: '0 503' }}\n                                    animate={{ strokeDasharray: `${percentage * 5.03} ${100 * 5.03}` }}\n                                    transition={{ duration: 1, delay: index * 0.2 }}\n                                  />\n                                </svg>\n                              );\n                            })}\n                          </div>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                </div>\n\n                <Card className=\"dark:bg-gray-900 dark:border-gray-800\">\n                  <CardHeader>\n                    <CardTitle className=\"dark:text-white\">Top Products</CardTitle>\n                    <CardDescription className=\"dark:text-gray-400\">Best performing products this month</CardDescription>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"overflow-x-auto\">\n                      <table className=\"w-full\">\n                        <thead>\n                          <tr className=\"border-b dark:border-gray-800\">\n                            <th className=\"text-left py-3 px-4 text-sm font-medium text-gray-600 dark:text-gray-400\">Product</th>\n                            <th className=\"text-left py-3 px-4 text-sm font-medium text-gray-600 dark:text-gray-400\">Sales</th>\n                            <th className=\"text-left py-3 px-4 text-sm font-medium text-gray-600 dark:text-gray-400\">Revenue</th>\n                            <th className=\"text-left py-3 px-4 text-sm font-medium text-gray-600 dark:text-gray-400\">Status</th>\n                          </tr>\n                        </thead>\n                        <tbody>\n                          {tableData.map((row, index) => (\n                            <motion.tr\n                              key={row.id}\n                              className=\"border-b dark:border-gray-800 hover:bg-gray-50 dark:hover:bg-gray-800 transition-colors\"\n                              initial={{ opacity: 0, x: -20 }}\n                              animate={{ opacity: 1, x: 0 }}\n                              transition={{ delay: index * 0.1 }}\n                            >\n                              <td className=\"py-3 px-4 text-sm text-gray-900 dark:text-white font-medium\">{row.product}</td>\n                              <td className=\"py-3 px-4 text-sm text-gray-600 dark:text-gray-400\">{row.sales.toLocaleString()}</td>\n                              <td className=\"py-3 px-4 text-sm text-gray-900 dark:text-white font-medium\">{row.revenue}</td>\n                              <td className=\"py-3 px-4\">\n                                <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${\n                                  row.status === 'success' ? 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200' :\n                                  row.status === 'warning' ? 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200' :\n                                  'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200'\n                                }`}>\n                                  {row.status === 'success' ? 'Active' : row.status === 'warning' ? 'Pending' : 'Low Stock'}\n                                </span>\n                              </td>\n                            </motion.tr>\n                          ))}\n                        </tbody>\n                      </table>\n                    </div>\n                  </CardContent>\n                </Card>\n              </TabsContent>\n\n              <TabsContent value=\"analytics\" className=\"space-y-4\">\n                <Card className=\"dark:bg-gray-900 dark:border-gray-800\">\n                  <CardHeader>\n                    <CardTitle className=\"dark:text-white\">Detailed Analytics</CardTitle>\n                    <CardDescription className=\"dark:text-gray-400\">In-depth performance metrics and insights</CardDescription>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                      <div className=\"space-y-4\">\n                        <h3 className=\"font-semibold text-gray-900 dark:text-white\">User Engagement</h3>\n                        <div className=\"space-y-3\">\n                          <div>\n                            <div className=\"flex justify-between text-sm mb-1\">\n                              <span className=\"text-gray-600 dark:text-gray-400\">Session Duration</span>\n                              <span className=\"font-medium text-gray-900 dark:text-white\">4m 32s</span>\n                            </div>\n                            <div className=\"h-2 bg-gray-200 dark:bg-gray-800 rounded-full overflow-hidden\">\n                              <motion.div\n                                className=\"h-full bg-blue-500\"\n                                initial={{ width: 0 }}\n                                animate={{ width: '75%' }}\n                                transition={{ duration: 1 }}\n                              />\n                            </div>\n                          </div>\n                          <div>\n                            <div className=\"flex justify-between text-sm mb-1\">\n                              <span className=\"text-gray-600 dark:text-gray-400\">Pages per Session</span>\n                              <span className=\"font-medium text-gray-900 dark:text-white\">5.2</span>\n                            </div>\n                            <div className=\"h-2 bg-gray-200 dark:bg-gray-800 rounded-full overflow-hidden\">\n                              <motion.div\n                                className=\"h-full bg-purple-500\"\n                                initial={{ width: 0 }}\n                                animate={{ width: '65%' }}\n                                transition={{ duration: 1, delay: 0.2 }}\n                              />\n                            </div>\n                          </div>\n                          <div>\n                            <div className=\"flex justify-between text-sm mb-1\">\n                              <span className=\"text-gray-600 dark:text-gray-400\">Bounce Rate</span>\n                              <span className=\"font-medium text-gray-900 dark:text-white\">32%</span>\n                            </div>\n                            <div className=\"h-2 bg-gray-200 dark:bg-gray-800 rounded-full overflow-hidden\">\n                              <motion.div\n                                className=\"h-full bg-pink-500\"\n                                initial={{ width: 0 }}\n                                animate={{ width: '32%' }}\n                                transition={{ duration: 1, delay: 0.4 }}\n                              />\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                      <div className=\"space-y-4\">\n                        <h3 className=\"font-semibold text-gray-900 dark:text-white\">Conversion Funnel</h3>\n                        <div className=\"space-y-2\">\n                          {[\n                            { stage: 'Visitors', value: 10000, percentage: 100 },\n                            { stage: 'Product Views', value: 7500, percentage: 75 },\n                            { stage: 'Add to Cart', value: 3000, percentage: 30 },\n                            { stage: 'Checkout', value: 1500, percentage: 15 },\n                            { stage: 'Purchase', value: 1200, percentage: 12 },\n                          ].map((stage, index) => (\n                            <motion.div\n                              key={stage.stage}\n                              className=\"flex items-center gap-3\"\n                              initial={{ opacity: 0, x: -20 }}\n                              animate={{ opacity: 1, x: 0 }}\n                              transition={{ delay: index * 0.1 }}\n                            >\n                              <div className=\"w-32 text-sm text-gray-600 dark:text-gray-400\">{stage.stage}</div>\n                              <div className=\"flex-1 h-8 bg-gray-200 dark:bg-gray-800 rounded overflow-hidden\">\n                                <motion.div\n                                  className=\"h-full bg-gradient-to-r from-blue-500 to-purple-500 flex items-center justify-end px-3\"\n                                  initial={{ width: 0 }}\n                                  animate={{ width: `${stage.percentage}%` }}\n                                  transition={{ duration: 1, delay: index * 0.1 }}\n                                >\n                                  <span className=\"text-xs font-medium text-white\">{stage.value.toLocaleString()}</span>\n                                </motion.div>\n                              </div>\n                            </motion.div>\n                          ))}\n                        </div>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              </TabsContent>\n\n              <TabsContent value=\"reports\" className=\"space-y-4\">\n                <Card className=\"dark:bg-gray-900 dark:border-gray-800\">\n                  <CardHeader>\n                    <CardTitle className=\"dark:text-white\">Generated Reports</CardTitle>\n                    <CardDescription className=\"dark:text-gray-400\">Download and view your analytics reports</CardDescription>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-3\">\n                      {[\n                        { name: 'Monthly Revenue Report', date: '2024-01-15', size: '2.4 MB' },\n                        { name: 'User Analytics Summary', date: '2024-01-10', size: '1.8 MB' },\n                        { name: 'Product Performance', date: '2024-01-05', size: '3.1 MB' },\n                        { name: 'Traffic Analysis', date: '2024-01-01', size: '1.2 MB' },\n                      ].map((report, index) => (\n                        <motion.div\n                          key={report.name}\n                          className=\"flex items-center justify-between p-4 border dark:border-gray-800 rounded-lg hover:bg-gray-50 dark:hover:bg-gray-800 transition-colors\"\n                          initial={{ opacity: 0, y: 20 }}\n                          animate={{ opacity: 1, y: 0 }}\n                          transition={{ delay: index * 0.1 }}\n                        >\n                          <div>\n                            <h4 className=\"font-medium text-gray-900 dark:text-white\">{report.name}</h4>\n                            <p className=\"text-sm text-gray-600 dark:text-gray-400\">{report.date} \u2022 {report.size}</p>\n                          </div>\n                          <Button variant=\"outline\" size=\"sm\" className=\"dark:border-gray-700\">\n                            Download\n                          </Button>\n                        </motion.div>\n                      ))}\n                    </div>\n                  </CardContent>\n                </Card>\n              </TabsContent>\n            </Tabs>\n          </motion.div>\n        </motion.div>\n      </div>\n    </div>\n  );\n}",
    "error": null,
    "elapsed_time": 74.34002017974854,
    "success": true
  }
}