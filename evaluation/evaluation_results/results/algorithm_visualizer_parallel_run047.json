{
  "prompt_id": "algorithm_visualizer",
  "prompt_name": "Algorithm Visualizer",
  "mode": "parallel",
  "run_number": 47,
  "timestamp": "2025-10-14T11:07:46.702062",
  "response_time": 94.37146973609924,
  "total_tokens": null,
  "response_content": "import { useState, useCallback } from 'react';\nimport { useEffect, useRef } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Slider } from '@/components/ui/slider';\nimport { Play, Pause, RotateCcw, Zap, BarChart3 } from 'lucide-react';\nimport { motion } from 'framer-motion';\n\ninterface ArrayElement {\n  value: number;\n  id: string;\n  isComparing?: boolean;\n  isSwapping?: boolean;\n  isSorted?: boolean;\n}\n\ninterface AlgorithmStep {\n  array: ArrayElement[];\n  comparingIndices: number[];\n  swappingIndices: number[];\n  sortedIndices: number[];\n}\n\ntype AlgorithmType = 'bubble' | 'quick' | 'merge' | 'insertion';\n\nconst NEON_COLORS = [\n  '#00ffff',\n  '#ff00ff', \n  '#00ff00',\n  '#ffff00',\n  '#ff0066',\n  '#00ffaa'\n];\n\nconst mockAlgorithms = [\n  { id: 'bubble', name: 'Bubble Sort', complexity: 'O(n\u00b2)' },\n  { id: 'quick', name: 'Quick Sort', complexity: 'O(n log n)' },\n  { id: 'merge', name: 'Merge Sort', complexity: 'O(n log n)' },\n  { id: 'insertion', name: 'Insertion Sort', complexity: 'O(n\u00b2)' }\n];\n\nexport default function AlgorithmVisualizer() {\n  // Animation interval ref\n  const animationIntervalRef = useState<NodeJS.Timeout | null>(null)[0];\n  const [array, setArray] = useState<ArrayElement[]>([]);\n  const animationIntervalRef2 = useRef<NodeJS.Timeout | null>(null);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [speed, setSpeed] = useState([50]);\n  const [arraySize, setArraySize] = useState([20]);\n  const [selectedAlgorithm, setSelectedAlgorithm] = useState<AlgorithmType>('bubble');\n  const [currentStep, setCurrentStep] = useState(0);\n  const [steps, setSteps] = useState<AlgorithmStep[]>([]);\n  const [comparisons, setComparisons] = useState(0);\n  const [swaps, setSwaps] = useState(0);\n\n  const generateRandomArray = useCallback(() => {\n    const newArray: ArrayElement[] = Array.from({ length: arraySize[0] }, (_, index) => ({\n      value: Math.floor(Math.random() * 100) + 5,\n      id: `element-${index}-${Date.now()}`,\n      isComparing: false,\n      isSwapping: false,\n      isSorted: false\n    }));\n    setArray(newArray);\n    setSteps([]);\n    setCurrentStep(0);\n    setIsPlaying(false);\n  }, [arraySize]);\n\n  const resetVisualization = useCallback(() => {\n\n    setIsPlaying(false);\n    setCurrentStep(0);\n    setSteps([]);\n    generateRandomArray();\n  }, [generateRandomArray]);\n\n  const startVisualization = useCallback(() => {\n    if (steps.length === 0 || currentStep >= steps.length) return;\n    \n    setIsPlaying(true);\n    \n    // Clear any existing interval\n    if (animationIntervalRef2.current) {\n      clearInterval(animationIntervalRef2.current);\n    }\n    \n    // Calculate delay based on speed (inverse relationship)\n    const delay = 1000 - (speed[0] * 10);\n    \n    animationIntervalRef2.current = setInterval(() => {\n      setCurrentStep((prevStep) => {\n        const nextStep = prevStep + 1;\n        \n        if (nextStep >= steps.length) {\n          // Animation complete\n          setIsPlaying(false);\n          if (animationIntervalRef2.current) {\n            clearInterval(animationIntervalRef2.current);\n            animationIntervalRef2.current = null;\n          }\n          return prevStep;\n        }\n        \n        // Update array with current step\n        const stepData = steps[nextStep];\n        setArray(stepData.array);\n        \n        return nextStep;\n      });\n    }, delay);\n\n    \n  }, [steps, speed, currentStep]);\n  // Cleanup interval on unmount\n  useEffect(() => {\n    return () => {\n      if (animationIntervalRef2.current) {\n        clearInterval(animationIntervalRef2.current);\n      }\n    };\n  }, []);\n\n  const pauseVisualization = useCallback(() => {\n    setIsPlaying(false);\n\n    \n  }, []);\n\n  const generateSortingSteps = useCallback((algorithm: AlgorithmType) => {\n        if (array.length === 0) return;\n\n    const steps: AlgorithmStep[] = [];\n    const arr = array.map(el => ({ ...el }));\n\n    const addStep = (\n      currentArray: ArrayElement[],\n      comparing: number[] = [],\n      swapping: number[] = [],\n      sorted: number[] = []\n    ) => {\n      steps.push({\n        array: currentArray.map(el => ({ ...el })),\n        comparingIndices: [...comparing],\n        swappingIndices: [...swapping],\n        sortedIndices: [...sorted]\n      });\n    };\n\n    switch (algorithm) {\n      case 'bubble': {\n        const sortedIndices: number[] = [];\n        for (let i = 0; i < arr.length - 1; i++) {\n          for (let j = 0; j < arr.length - i - 1; j++) {\n            addStep(arr, [j, j + 1], [], sortedIndices);\n            \n            if (arr[j].value > arr[j + 1].value) {\n              addStep(arr, [], [j, j + 1], sortedIndices);\n              [arr[j], arr[j + 1]] = [arr[j + 1], arr[j]];\n              addStep(arr, [], [], sortedIndices);\n            }\n          }\n          sortedIndices.push(arr.length - i - 1);\n          addStep(arr, [], [], sortedIndices);\n        }\n        sortedIndices.push(0);\n        addStep(arr, [], [], sortedIndices);\n        break;\n      }\n\n      case 'quick': {\n        const sortedIndices: number[] = [];\n        \n        const partition = (low: number, high: number): number => {\n          const pivot = arr[high].value;\n          let i = low - 1;\n\n          for (let j = low; j < high; j++) {\n            addStep(arr, [j, high], [], sortedIndices);\n            \n            if (arr[j].value < pivot) {\n              i++;\n              if (i !== j) {\n                addStep(arr, [], [i, j], sortedIndices);\n                [arr[i], arr[j]] = [arr[j], arr[i]];\n                addStep(arr, [], [], sortedIndices);\n              }\n            }\n          }\n          \n          addStep(arr, [], [i + 1, high], sortedIndices);\n          [arr[i + 1], arr[high]] = [arr[high], arr[i + 1]];\n          addStep(arr, [], [], sortedIndices);\n          \n          return i + 1;\n        };\n\n        const quickSort = (low: number, high: number) => {\n          if (low < high) {\n            const pi = partition(low, high);\n            sortedIndices.push(pi);\n            quickSort(low, pi - 1);\n            quickSort(pi + 1, high);\n          } else if (low === high) {\n            sortedIndices.push(low);\n          }\n        };\n\n        quickSort(0, arr.length - 1);\n        addStep(arr, [], [], Array.from({ length: arr.length }, (_, i) => i));\n        break;\n      }\n\n      case 'merge': {\n        const sortedIndices: number[] = [];\n        \n        const merge = (left: number, mid: number, right: number) => {\n          const leftArr = arr.slice(left, mid + 1);\n          const rightArr = arr.slice(mid + 1, right + 1);\n          \n          let i = 0, j = 0, k = left;\n          \n          while (i < leftArr.length && j < rightArr.length) {\n            addStep(arr, [left + i, mid + 1 + j], [], sortedIndices);\n            \n            if (leftArr[i].value <= rightArr[j].value) {\n              addStep(arr, [], [k], sortedIndices);\n              arr[k] = leftArr[i];\n              i++;\n            } else {\n              addStep(arr, [], [k], sortedIndices);\n              arr[k] = rightArr[j];\n              j++;\n            }\n            k++;\n            addStep(arr, [], [], sortedIndices);\n          }\n          \n          while (i < leftArr.length) {\n            addStep(arr, [], [k], sortedIndices);\n            arr[k] = leftArr[i];\n            i++;\n            k++;\n            addStep(arr, [], [], sortedIndices);\n          }\n          \n          while (j < rightArr.length) {\n            addStep(arr, [], [k], sortedIndices);\n            arr[k] = rightArr[j];\n            j++;\n            k++;\n            addStep(arr, [], [], sortedIndices);\n          }\n        };\n\n        const mergeSort = (left: number, right: number) => {\n          if (left < right) {\n            const mid = Math.floor((left + right) / 2);\n            mergeSort(left, mid);\n            mergeSort(mid + 1, right);\n            merge(left, mid, right);\n          }\n        };\n\n        mergeSort(0, arr.length - 1);\n        addStep(arr, [], [], Array.from({ length: arr.length }, (_, i) => i));\n        break;\n      }\n\n      case 'insertion': {\n        const sortedIndices: number[] = [0];\n        addStep(arr, [], [], sortedIndices);\n        \n        for (let i = 1; i < arr.length; i++) {\n          const key = arr[i];\n          let j = i - 1;\n          \n          addStep(arr, [i], [], sortedIndices);\n          \n          while (j >= 0 && arr[j].value > key.value) {\n            addStep(arr, [j, j + 1], [], sortedIndices);\n            addStep(arr, [], [j, j + 1], sortedIndices);\n            arr[j + 1] = arr[j];\n            addStep(arr, [], [], sortedIndices);\n            j--;\n          }\n          \n          arr[j + 1] = key;\n          sortedIndices.push(i);\n          addStep(arr, [], [], sortedIndices);\n        }\n        break;\n      }\n    }\n\n    setSteps(steps);\n    setCurrentStep(0);\n  }, [array]);\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-gray-900 via-purple-900 to-gray-900 p-8\">\n      <div className=\"max-w-7xl mx-auto space-y-8\">\n        <motion.div\n          initial={{ opacity: 0, y: -20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.8 }}\n          className=\"text-center space-y-4\"\n        >\n          <motion.h1\n            className=\"text-6xl font-bold bg-gradient-to-r from-cyan-400 via-purple-400 to-pink-400 bg-clip-text text-transparent\"\n            animate={{\n              textShadow: [\n                '0 0 20px rgba(0, 255, 255, 0.5)',\n                '0 0 40px rgba(255, 0, 255, 0.5)',\n                '0 0 20px rgba(0, 255, 255, 0.5)'\n              ]\n            }}\n            transition={{ duration: 2, repeat: Infinity }}\n          >\n            Algorithm Visualizer\n          </motion.h1>\n          \n          <div className=\"flex items-center justify-center gap-4\">\n            <motion.div\n              initial={{ scale: 0 }}\n              animate={{ scale: 1 }}\n              transition={{ delay: 0.3, type: 'spring' }}\n              className=\"px-6 py-2 bg-purple-500/20 border border-purple-400/50 rounded-full backdrop-blur-sm\"\n            >\n              <span className=\"text-2xl font-semibold text-purple-300\">\n                {mockAlgorithms.find(a => a.id === selectedAlgorithm)?.name || 'Bubble Sort'}\n              </span>\n            </motion.div>\n            \n            <motion.div\n              initial={{ scale: 0 }}\n              animate={{ scale: 1 }}\n              transition={{ delay: 0.5, type: 'spring' }}\n              className=\"px-4 py-2 bg-cyan-500/20 border border-cyan-400/50 rounded-full backdrop-blur-sm relative overflow-hidden\"\n            >\n              <motion.div\n                className=\"absolute inset-0 bg-gradient-to-r from-transparent via-cyan-400/20 to-transparent\"\n                animate={{ x: ['-100%', '200%'] }}\n                transition={{ duration: 2, repeat: Infinity, ease: 'linear' }}\n              />\n              <div className=\"relative flex items-center gap-2\">\n                <Zap className=\"w-4 h-4 text-cyan-400\" />\n                <span className=\"text-lg font-mono text-cyan-300\">\n                  {mockAlgorithms.find(a => a.id === selectedAlgorithm)?.complexity || 'O(n\u00b2)'}\n                </span>\n              </div>\n            </motion.div>\n          </div>\n        </motion.div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-6\">\n          <div className=\"lg:col-span-1 space-y-6\">\n            <motion.div\n              initial={{ opacity: 0, x: -50 }}\n              animate={{ opacity: 1, x: 0 }}\n              className=\"bg-gray-900/50 backdrop-blur-lg border border-cyan-500/30 rounded-xl p-6 shadow-[0_0_30px_rgba(0,255,255,0.3)] hover:shadow-[0_0_50px_rgba(0,255,255,0.5)] transition-all duration-300\"\n            >\n              <div className=\"space-y-6\">\n                {/* Algorithm Selection */}\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center gap-2 text-cyan-400\">\n                    <Zap className=\"w-4 h-4\" />\n                    <h3 className=\"text-sm font-semibold uppercase tracking-wider\">Algorithm</h3>\n                  </div>\n                  <div className=\"grid grid-cols-1 gap-2\">\n                    {mockAlgorithms.map((algo) => (\n                      <Button\n                        key={algo.id}\n                        onClick={() => {\n                          setSelectedAlgorithm(algo.id as AlgorithmType);\n                          generateSortingSteps(algo.id as AlgorithmType);\n                        }}\n                        disabled={isPlaying}\n                        variant={selectedAlgorithm === algo.id ? \"default\" : \"outline\"}\n                        className={`w-full justify-start text-left transition-all duration-300 ${\n                          selectedAlgorithm === algo.id\n                            ? 'bg-gradient-to-r from-cyan-500 to-purple-500 text-white shadow-[0_0_20px_rgba(0,255,255,0.5)] border-0'\n                            : 'bg-gray-800/50 border-cyan-500/20 text-cyan-300 hover:bg-gray-700/50 hover:border-cyan-500/50 hover:shadow-[0_0_15px_rgba(0,255,255,0.3)]'\n                        }`}\n                      >\n                        <div className=\"flex flex-col items-start\">\n                          <span className=\"font-medium\">{algo.name}</span>\n                          <span className=\"text-xs opacity-70\">{algo.complexity}</span>\n                        </div>\n                      </Button>\n                    ))}\n                  </div>\n                </div>\n\n                {/* Speed Control */}\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center gap-2 text-purple-400\">\n                      <BarChart3 className=\"w-4 h-4\" />\n                      <h3 className=\"text-sm font-semibold uppercase tracking-wider\">Speed</h3>\n                    </div>\n                    <span className=\"text-xs text-purple-300 font-mono bg-purple-500/20 px-2 py-1 rounded border border-purple-500/30\">\n                      {speed[0]}ms\n                    </span>\n                  </div>\n                  <Slider\n                    value={speed}\n                    onValueChange={setSpeed}\n                    min={10}\n                    max={200}\n                    step={10}\n                    disabled={isPlaying}\n                    className=\"cursor-pointer\"\n                  />\n                </div>\n\n                {/* Array Size Control */}\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center gap-2 text-pink-400\">\n                      <BarChart3 className=\"w-4 h-4\" />\n                      <h3 className=\"text-sm font-semibold uppercase tracking-wider\">Array Size</h3>\n                    </div>\n                    <span className=\"text-xs text-pink-300 font-mono bg-pink-500/20 px-2 py-1 rounded border border-pink-500/30\">\n                      {arraySize[0]}\n                    </span>\n                  </div>\n                  <Slider\n                    value={arraySize}\n                    onValueChange={setArraySize}\n                    min={5}\n                    max={50}\n                    step={5}\n                    disabled={isPlaying}\n                    className=\"cursor-pointer\"\n                  />\n                </div>\n\n                {/* Control Buttons */}\n                <div className=\"space-y-2 pt-4 border-t border-cyan-500/20\">\n                  <Button\n                    onClick={isPlaying ? pauseVisualization : startVisualization}\n                    disabled={steps.length === 0 || currentStep >= steps.length}\n                    className=\"w-full bg-gradient-to-r from-green-500 to-emerald-500 hover:from-green-600 hover:to-emerald-600 text-white shadow-[0_0_20px_rgba(0,255,0,0.4)] hover:shadow-[0_0_30px_rgba(0,255,0,0.6)] transition-all duration-300 border-0\"\n                  >\n                    {isPlaying ? (\n                      <>\n                        <Pause className=\"w-4 h-4 mr-2\" />\n                        Pause\n                      </>\n                    ) : (\n                      <>\n                        <Play className=\"w-4 h-4 mr-2\" />\n                        {currentStep >= steps.length ? 'Finished' : 'Start'}\n                      </>\n                    )}\n                  </Button>\n                  <Button\n                    onClick={resetVisualization}\n                    disabled={isPlaying}\n                    className=\"w-full bg-gradient-to-r from-orange-500 to-red-500 hover:from-orange-600 hover:to-red-600 text-white shadow-[0_0_20px_rgba(255,100,0,0.4)] hover:shadow-[0_0_30px_rgba(255,100,0,0.6)] transition-all duration-300 border-0\"\n                  >\n                    <RotateCcw className=\"w-4 h-4 mr-2\" />\n                    Reset\n                  </Button>\n                </div>\n              </div>\n            </motion.div>\n            \n            <div className=\"bg-gray-900/50 backdrop-blur-lg border border-cyan-500/30 rounded-xl p-6 shadow-2xl shadow-cyan-500/20\">\n              <div className=\"space-y-6\">\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center gap-2 text-cyan-400\">\n                    <Zap className=\"w-4 h-4\" />\n                    <span className=\"text-sm font-semibold tracking-wider\">ALGORITHM</span>\n                  </div>\n                  <div className=\"grid grid-cols-1 gap-3\">\n                    {mockAlgorithms.map((algo) => (\n                      <motion.button\n                        key={algo.id}\n                        onClick={() => setSelectedAlgorithm(algo.id as AlgorithmType)}\n                        className={`relative p-4 rounded-lg border-2 transition-all duration-300 text-left overflow-hidden group ${\n                          selectedAlgorithm === algo.id\n                            ? 'border-cyan-400 bg-cyan-500/20 shadow-lg shadow-cyan-500/50'\n                            : 'border-gray-700 bg-gray-800/50 hover:border-purple-500/50 hover:bg-purple-500/10'\n                        }`}\n                        whileHover={{ scale: 1.02 }}\n                        whileTap={{ scale: 0.98 }}\n                      >\n                        <div className={`absolute inset-0 bg-gradient-to-r from-cyan-500/0 via-cyan-500/20 to-cyan-500/0 opacity-0 group-hover:opacity-100 transition-opacity duration-500 ${\n                          selectedAlgorithm === algo.id ? 'opacity-100' : ''\n                        }`} />\n                        <div className=\"relative z-10\">\n                          <div className={`font-semibold mb-1 ${\n                            selectedAlgorithm === algo.id ? 'text-cyan-300' : 'text-gray-300'\n                          }`}>\n                            {algo.name}\n                          </div>\n                          <div className={`text-xs font-mono ${\n                            selectedAlgorithm === algo.id ? 'text-cyan-400' : 'text-gray-500'\n                          }`}>\n                            {algo.complexity}\n                          </div>\n                        </div>\n                        {selectedAlgorithm === algo.id && (\n                          <motion.div\n                            className=\"absolute top-2 right-2 w-2 h-2 bg-cyan-400 rounded-full shadow-lg shadow-cyan-400/80\"\n                            animate={{ scale: [1, 1.2, 1] }}\n                            transition={{ duration: 2, repeat: Infinity }}\n                          />\n                        )}\n                      </motion.button>\n                    ))}\n                  </div>\n                </div>\n\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <label className=\"text-cyan-400 text-sm font-medium flex items-center gap-2\">\n                      <Zap className=\"w-4 h-4\" />\n                      Speed\n                    </label>\n                    <span className=\"text-cyan-300 text-xs\">{speed[0]}ms</span>\n                  </div>\n                  <Slider\n                    value={speed}\n                    onValueChange={setSpeed}\n                    min={10}\n                    max={200}\n                    step={10}\n                    className=\"[&_[role=slider]]:h-4 [&_[role=slider]]:w-4 [&_[role=slider]]:bg-cyan-400 [&_[role=slider]]:border-2 [&_[role=slider]]:border-cyan-300 [&_[role=slider]]:shadow-[0_0_15px_rgba(34,211,238,0.8)] [&_[role=slider]]:transition-all [&_[role=slider]]:hover:shadow-[0_0_25px_rgba(34,211,238,1)] [&_.relative]:h-2 [&_.relative]:bg-gray-800 [&_.relative]:rounded-full [&_.relative]:border [&_.relative]:border-cyan-500/30 [&_[role=slider]]:focus:ring-4 [&_[role=slider]]:focus:ring-cyan-400/50\"\n                  /></parameter>\n                </div>\n\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <label className=\"text-cyan-400 text-sm font-medium flex items-center gap-2\">\n                      <BarChart3 className=\"w-4 h-4\" />\n                      Array Size\n                    </label>\n                    <span className=\"text-cyan-300 text-xs\">{arraySize[0]}</span>\n                  </div>\n                  <Slider\n                    value={arraySize}\n                    onValueChange={setArraySize}\n                    min={5}\n                    max={50}\n                    step={1}\n                    className=\"[&_[role=slider]]:bg-gradient-to-r [&_[role=slider]]:from-cyan-400 [&_[role=slider]]:to-purple-500 [&_[role=slider]]:border-2 [&_[role=slider]]:border-cyan-300 [&_[role=slider]]:shadow-lg [&_[role=slider]]:shadow-cyan-500/50 [&>span]:bg-gradient-to-r [&>span]:from-cyan-500/30 [&>span]:to-purple-500/30\"\n                  />\n                </div>\n\n                <div className=\"flex gap-3 pt-4\">\n                  <motion.div className=\"flex-1\">\n                    <Button\n                      onClick={isPlaying ? pauseVisualization : startVisualization}\n                      disabled={array.length === 0 || (steps.length === 0 && !isPlaying)}\n                      className=\"w-full relative overflow-hidden bg-gradient-to-r from-cyan-500 to-purple-500 hover:from-cyan-400 hover:to-purple-400 text-white font-semibold shadow-lg disabled:opacity-50 disabled:cursor-not-allowed transition-all duration-300\"\n                      style={{\n                        boxShadow: isPlaying \n                          ? '0 0 30px rgba(0, 255, 255, 0.6), 0 0 60px rgba(168, 85, 247, 0.4)' \n                          : '0 0 20px rgba(0, 255, 255, 0.4), 0 0 40px rgba(168, 85, 247, 0.2)'\n                      }}\n                    >\n                      <motion.div\n                        className=\"flex items-center justify-center gap-2\"\n                        whileHover={{ scale: 1.05 }}\n                        whileTap={{ scale: 0.95 }}\n                      >\n                        <motion.div\n                          key={isPlaying ? 'pause' : 'play'}\n                          initial={{ scale: 0, rotate: -180 }}\n                          animate={{ scale: 1, rotate: 0 }}\n                          exit={{ scale: 0, rotate: 180 }}\n                          transition={{ duration: 0.3, type: \"spring\", stiffness: 200 }}\n                        >\n                          {isPlaying ? (\n                            <Pause className=\"w-5 h-5\" fill=\"currentColor\" />\n                          ) : (\n                            <Play className=\"w-5 h-5\" fill=\"currentColor\" />\n                          )}\n                        </motion.div>\n                        <span>{isPlaying ? 'Pause' : 'Play'}</span>\n                      </motion.div>\n                      \n                      {/* Animated glow pulse effect */}\n                      <motion.div\n                        className=\"absolute inset-0 bg-gradient-to-r from-cyan-400 to-purple-400 opacity-0\"\n                        animate={{\n                          opacity: isPlaying ? [0, 0.3, 0] : 0\n                        }}\n                        transition={{\n                          duration: 2,\n                          repeat: isPlaying ? Infinity : 0,\n                          ease: \"easeInOut\"\n                        }}\n                      />\n                    </Button>\n                  </motion.div></parameter>\n                  <motion.div whileTap={{ rotate: 360 }} transition={{ duration: 0.6, ease: \"easeInOut\" }}>\n                    <Button\n                      onClick={resetVisualization}\n                      disabled={isPlaying}\n                      className=\"w-full bg-gradient-to-r from-pink-500 to-orange-500 hover:from-pink-600 hover:to-orange-600 text-white border-0 shadow-[0_0_20px_rgba(236,72,153,0.6)] hover:shadow-[0_0_30px_rgba(236,72,153,0.9)] transition-all duration-300 disabled:opacity-50 disabled:cursor-not-allowed\"\n                    >\n                      <RotateCcw className=\"w-4 h-4 mr-2\" />\n                      Reset\n                    </Button>\n                  </motion.div>\n                </div>\n              </div>\n            </div>\n\n            \n            <motion.div\n              initial={{ opacity: 0, x: -50 }}\n              animate={{ opacity: 1, x: 0 }}\n              transition={{ delay: 0.2 }}\n              className=\"bg-gray-900/50 backdrop-blur-lg border border-purple-500/30 rounded-xl p-6 shadow-[0_0_30px_rgba(168,85,247,0.3)] hover:shadow-[0_0_50px_rgba(168,85,247,0.5)] transition-all duration-300\"\n            >\n              <div className=\"space-y-4\">\n                <div className=\"flex items-center gap-2 text-purple-400 mb-4\">\n                  <BarChart3 className=\"w-5 h-5\" />\n                  <h3 className=\"text-sm font-semibold uppercase tracking-wider\">Statistics</h3>\n                </div>\n\n                {/* Comparisons Counter */}\n                <motion.div\n                  className=\"relative overflow-hidden rounded-lg bg-gradient-to-br from-cyan-500/10 to-cyan-600/10 border border-cyan-500/30 p-4\"\n                  whileHover={{ scale: 1.02 }}\n                  transition={{ type: 'spring', stiffness: 300 }}\n                >\n                  <motion.div\n                    className=\"absolute inset-0 bg-gradient-to-r from-transparent via-cyan-400/20 to-transparent\"\n                    animate={{ x: ['-100%', '200%'] }}\n                    transition={{ duration: 3, repeat: Infinity, ease: 'linear' }}\n                  />\n                  <div className=\"relative z-10\">\n                    <div className=\"text-xs text-cyan-400 uppercase tracking-wider mb-1 font-semibold\">\n                      Comparisons\n                    </div>\n                    <motion.div\n                      key={comparisons}\n                      initial={{ scale: 1.5, color: '#00ffff' }}\n                      animate={{ scale: 1, color: '#67e8f9' }}\n                      transition={{ duration: 0.3 }}\n                      className=\"text-3xl font-bold text-cyan-300 font-mono\"\n                      style={{\n                        textShadow: '0 0 20px rgba(0, 255, 255, 0.8), 0 0 40px rgba(0, 255, 255, 0.4)'\n                      }}\n                    >\n                      {comparisons.toLocaleString()}\n                    </motion.div>\n                  </div>\n                </motion.div>\n\n                {/* Swaps Counter */}\n                <motion.div\n                  className=\"relative overflow-hidden rounded-lg bg-gradient-to-br from-pink-500/10 to-pink-600/10 border border-pink-500/30 p-4\"\n                  whileHover={{ scale: 1.02 }}\n                  transition={{ type: 'spring', stiffness: 300 }}\n                >\n                  <motion.div\n                    className=\"absolute inset-0 bg-gradient-to-r from-transparent via-pink-400/20 to-transparent\"\n                    animate={{ x: ['-100%', '200%'] }}\n                    transition={{ duration: 3, repeat: Infinity, ease: 'linear', delay: 1 }}\n                  />\n                  <div className=\"relative z-10\">\n                    <div className=\"text-xs text-pink-400 uppercase tracking-wider mb-1 font-semibold\">\n                      Swaps\n                    </div>\n                    <motion.div\n                      key={swaps}\n                      initial={{ scale: 1.5, color: '#ff0066' }}\n                      animate={{ scale: 1, color: '#f9a8d4' }}\n                      transition={{ duration: 0.3 }}\n                      className=\"text-3xl font-bold text-pink-300 font-mono\"\n                      style={{\n                        textShadow: '0 0 20px rgba(255, 0, 102, 0.8), 0 0 40px rgba(255, 0, 102, 0.4)'\n                      }}\n                    >\n                      {swaps.toLocaleString()}\n                    </motion.div>\n                  </div>\n                </motion.div>\n\n                {/* Progress Indicator */}\n                <motion.div\n                  className=\"relative overflow-hidden rounded-lg bg-gradient-to-br from-purple-500/10 to-purple-600/10 border border-purple-500/30 p-4\"\n                  whileHover={{ scale: 1.02 }}\n                  transition={{ type: 'spring', stiffness: 300 }}\n                >\n                  <motion.div\n                    className=\"absolute inset-0 bg-gradient-to-r from-transparent via-purple-400/20 to-transparent\"\n                    animate={{ x: ['-100%', '200%'] }}\n                    transition={{ duration: 3, repeat: Infinity, ease: 'linear', delay: 2 }}\n                  />\n                  <div className=\"relative z-10 space-y-2\">\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"text-xs text-purple-400 uppercase tracking-wider font-semibold\">\n                        Progress\n                      </div>\n                      <motion.div\n                        key={currentStep}\n                        initial={{ scale: 1.3 }}\n                        animate={{ scale: 1 }}\n                        className=\"text-xs text-purple-300 font-mono bg-purple-500/20 px-2 py-1 rounded border border-purple-500/30\"\n                      >\n                        {steps.length > 0 ? Math.round((currentStep / steps.length) * 100) : 0}%\n                      </motion.div>\n                    </div>\n                    <div className=\"relative h-2 bg-gray-800 rounded-full border border-purple-500/30 overflow-hidden\">\n                      <motion.div\n                        className=\"absolute inset-y-0 left-0 bg-gradient-to-r from-purple-500 via-pink-500 to-cyan-500 rounded-full\"\n                        initial={{ width: 0 }}\n                        animate={{\n                          width: steps.length > 0 ? `${(currentStep / steps.length) * 100}%` : '0%'\n                        }}\n                        transition={{ duration: 0.3, ease: 'easeOut' }}\n                        style={{\n                          boxShadow: '0 0 20px rgba(168, 85, 247, 0.8)'\n                        }}\n                      />\n                      <motion.div\n                        className=\"absolute inset-0 bg-gradient-to-r from-transparent via-white/30 to-transparent\"\n                        animate={{ x: ['-100%', '200%'] }}\n                        transition={{ duration: 1.5, repeat: Infinity, ease: 'linear' }}\n                      />\n                    </div>\n                    <div className=\"flex items-center justify-between text-xs text-purple-400/70 font-mono\">\n                      <span>Step {currentStep}</span>\n                      <span>/ {steps.length}</span>\n                    </div>\n                  </div>\n                </motion.div>\n\n                {/* Status Indicator */}\n                <motion.div\n                  className=\"relative overflow-hidden rounded-lg bg-gradient-to-br from-green-500/10 to-emerald-600/10 border border-green-500/30 p-4\"\n                  animate={{\n                    borderColor: isPlaying\n                      ? ['rgba(34, 197, 94, 0.3)', 'rgba(34, 197, 94, 0.6)', 'rgba(34, 197, 94, 0.3)']\n                      : 'rgba(107, 114, 128, 0.3)'\n                  }}\n                  transition={{ duration: 2, repeat: Infinity }}\n                >\n                  <div className=\"relative z-10 flex items-center justify-between\">\n                    <div className=\"text-xs text-green-400 uppercase tracking-wider font-semibold\">\n                      Status\n                    </div>\n                    <div className=\"flex items-center gap-2\">\n                      <motion.div\n                        className={`w-2 h-2 rounded-full ${\n                          isPlaying ? 'bg-green-400' : 'bg-gray-500'\n                        }`}\n                        animate={\n                          isPlaying\n                            ? {\n                                boxShadow: [\n                                  '0 0 10px rgba(34, 197, 94, 0.8)',\n                                  '0 0 20px rgba(34, 197, 94, 1)',\n                                  '0 0 10px rgba(34, 197, 94, 0.8)'\n                                ]\n                              }\n                            : {}\n                        }\n                        transition={{ duration: 1, repeat: Infinity }}\n                      />\n                      <span\n                        className={`text-sm font-semibold ${\n                          isPlaying ? 'text-green-300' : 'text-gray-400'\n                        }`}\n                      >\n                        {isPlaying ? 'Running' : currentStep >= steps.length && steps.length > 0 ? 'Complete' : 'Idle'}\n                      </span>\n                    </div>\n                  </div>\n                </motion.div>\n              </div>\n            </motion.div>\n          </div>\n\n          <div className=\"lg:col-span-3\">\n            <div className=\"bg-gray-900/50 backdrop-blur-lg border border-purple-500/30 rounded-xl p-8 shadow-2xl shadow-purple-500/20 min-h-[600px]\">\n              {array.length === 0 ? (\n                <motion.div\n                  initial={{ opacity: 0, scale: 0.8 }}\n                  animate={{ opacity: 1, scale: 1 }}\n                  className=\"absolute inset-0 flex flex-col items-center justify-center gap-6\"\n                >\n                  <motion.div\n                    animate={{\n                      rotate: [0, 360],\n                      scale: [1, 1.1, 1]\n                    }}\n                    transition={{ duration: 3, repeat: Infinity, ease: \"linear\" }}\n                    className=\"w-24 h-24 rounded-full bg-gradient-to-r from-cyan-500 via-purple-500 to-pink-500 opacity-20 blur-xl\"\n                  />\n                  <div className=\"text-center space-y-3 relative z-10\">\n                    <BarChart3 className=\"w-16 h-16 mx-auto text-cyan-400 opacity-50\" />\n                    <p className=\"text-xl text-cyan-300/70 font-medium\">\n                      Click Reset to generate array\n                    </p>\n                  </div>\n                </motion.div>\n              ) : (\n                <div className=\"relative w-full h-full flex items-end justify-center gap-1 px-4\">\n                  {steps.length > 0 && currentStep < steps.length ? (\n                    steps[currentStep].array.map((element, index) => {\n                      const isComparing = steps[currentStep].comparingIndices.includes(index);\n                      const isSwapping = steps[currentStep].swappingIndices.includes(index);\n                      const isSorted = steps[currentStep].sortedIndices.includes(index);\n                      \n                      const maxValue = Math.max(...array.map(el => el.value));\n                      const heightPercentage = (element.value / maxValue) * 100;\n                      \n                      let barColor = NEON_COLORS[index % NEON_COLORS.length];\n                      let glowColor = barColor;\n                      let shadowIntensity = '0.3';\n                      \n                      if (isSorted) {\n                        barColor = '#00ff00';\n                        glowColor = '#00ff00';\n                        shadowIntensity = '0.8';\n                      } else if (isSwapping) {\n                        barColor = '#ff0066';\n                        glowColor = '#ff0066';\n                        shadowIntensity = '0.9';\n                      } else if (isComparing) {\n                        barColor = '#ffff00';\n                        glowColor = '#ffff00';\n                        shadowIntensity = '0.7';\n                      }\n                      \n                      return (\n                        <motion.div\n                          key={element.id}\n                          className=\"relative flex-1 min-w-[4px] max-w-[60px] group\"\n                          initial={{ height: 0, opacity: 0 }}\n                          animate={{\n                            height: `${heightPercentage}%`,\n                            opacity: 1,\n                            y: isSwapping ? [-10, 0] : 0,\n                            scale: isComparing ? [1, 1.05, 1] : 1\n                          }}\n                          transition={{\n                            height: { duration: 0.3, ease: \"easeOut\" },\n                            opacity: { duration: 0.2 },\n                            y: { duration: 0.4, ease: \"easeInOut\" },\n                            scale: { duration: 0.3, repeat: isComparing ? Infinity : 0 }\n                          }}\n                          style={{\n                            backgroundColor: barColor,\n                            boxShadow: `0 0 20px ${glowColor}${Math.floor(parseFloat(shadowIntensity) * 255).toString(16).padStart(2, '0')}, \n                                       0 0 40px ${glowColor}${Math.floor(parseFloat(shadowIntensity) * 0.5 * 255).toString(16).padStart(2, '0')},\n                                       inset 0 0 20px rgba(255, 255, 255, 0.2)`,\n                            borderRadius: '4px 4px 0 0',\n                            position: 'relative'\n                          }}\n                        >\n                          {/* Swap Trail Effect */}\n                          {isSwapping && (\n                            <>\n                              <motion.div\n                                className=\"absolute inset-0 rounded-t\"\n                                initial={{ opacity: 0 }}\n                                animate={{ \n                                  opacity: [0, 1, 0],\n                                  scale: [1, 1.3, 1.5]\n                                }}\n                                transition={{ duration: 0.6, repeat: Infinity }}\n                                style={{\n                                  background: `radial-gradient(circle, ${glowColor}80 0%, transparent 70%)`,\n                                  filter: 'blur(8px)'\n                                }}\n                              />\n                              <motion.div\n                                className=\"absolute -top-2 left-1/2 -translate-x-1/2 w-2 h-2 rounded-full\"\n                                animate={{\n                                  y: [-20, 0],\n                                  opacity: [1, 0]\n                                }}\n                                transition={{ duration: 0.5, repeat: Infinity }}\n                                style={{\n                                  backgroundColor: glowColor,\n                                  boxShadow: `0 0 10px ${glowColor}`\n                                }}\n                              />\n                            </>\n                          )}\n                          \n                          {/* Comparison Indicator */}\n                          {isComparing && (\n                            <motion.div\n                              className=\"absolute -top-8 left-1/2 -translate-x-1/2\"\n                              initial={{ opacity: 0, y: 10 }}\n                              animate={{ \n                                opacity: [0.5, 1, 0.5],\n                                y: [0, -5, 0]\n                              }}\n                              transition={{ duration: 0.8, repeat: Infinity }}\n                            >\n                              <div \n                                className=\"w-6 h-6 rounded-full flex items-center justify-center text-xs font-bold\"\n                                style={{\n                                  backgroundColor: glowColor,\n                                  boxShadow: `0 0 15px ${glowColor}`,\n                                  color: '#000'\n                                }}\n                              >\n                                ?\n                              </div>\n                            </motion.div>\n                          )}\n                          \n                          {/* Sorted Checkmark */}\n                          {isSorted && (\n                            <motion.div\n                              className=\"absolute -top-6 left-1/2 -translate-x-1/2\"\n                              initial={{ scale: 0, rotate: -180 }}\n                              animate={{ scale: 1, rotate: 0 }}\n                              transition={{ type: \"spring\", stiffness: 200, damping: 10 }}\n                            >\n                              <div \n                                className=\"w-5 h-5 rounded-full flex items-center justify-center text-xs font-bold\"\n                                style={{\n                                  backgroundColor: '#00ff00',\n                                  boxShadow: '0 0 15px #00ff00',\n                                  color: '#000'\n                                }}\n                              >\n                                \u2713\n                              </div>\n                            </motion.div>\n                          )}\n                          \n                          {/* Value Label */}\n                          <motion.div\n                            className=\"absolute bottom-full left-1/2 -translate-x-1/2 mb-1 opacity-0 group-hover:opacity-100 transition-opacity duration-200\"\n                            style={{\n                              fontSize: arraySize[0] > 30 ? '8px' : '10px'\n                            }}\n                          >\n                            <div \n                              className=\"px-2 py-1 rounded font-mono font-bold whitespace-nowrap\"\n                              style={{\n                                backgroundColor: 'rgba(0, 0, 0, 0.8)',\n                                color: barColor,\n                                border: `1px solid ${barColor}`,\n                                boxShadow: `0 0 10px ${glowColor}50`\n                              }}\n                            >\n                              {element.value}\n                            </div>\n                          </motion.div>\n                          \n                          {/* Shimmer Effect */}\n                          <motion.div\n                            className=\"absolute inset-0 rounded-t overflow-hidden\"\n                            initial={{ x: '-100%' }}\n                            animate={{ x: '200%' }}\n                            transition={{\n                              duration: 2,\n                              repeat: Infinity,\n                              ease: \"linear\",\n                              repeatDelay: 1\n                            }}\n                            style={{\n                              background: 'linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.3), transparent)',\n                              pointerEvents: 'none'\n                            }}\n                          />\n                        </motion.div>\n                      );\n                    })\n                  ) : (\n                    array.map((element, index) => {\n                      const maxValue = Math.max(...array.map(el => el.value));\n                      const heightPercentage = (element.value / maxValue) * 100;\n                      const barColor = NEON_COLORS[index % NEON_COLORS.length];\n                      \n                      return (\n                        <motion.div\n                          key={element.id}\n                          className=\"relative flex-1 min-w-[4px] max-w-[60px] group\"\n                          initial={{ height: 0, opacity: 0, scale: 0.8 }}\n                          animate={{ \n                            height: `${heightPercentage}%`,\n                            opacity: 1,\n                            scale: 1\n                          }}\n                          transition={{\n                            height: { duration: 0.5, ease: \"easeOut\", delay: index * 0.02 },\n                            opacity: { duration: 0.3, delay: index * 0.02 },\n                            scale: { duration: 0.3, delay: index * 0.02 }\n                          }}\n                          whileHover={{ scale: 1.05 }}\n                          style={{\n                            backgroundColor: barColor,\n                            boxShadow: `0 0 20px ${barColor}50, 0 0 40px ${barColor}30, inset 0 0 20px rgba(255, 255, 255, 0.1)`,\n                            borderRadius: '4px 4px 0 0'\n                          }}\n                        >\n                          <motion.div\n                            className=\"absolute bottom-full left-1/2 -translate-x-1/2 mb-1 opacity-0 group-hover:opacity-100 transition-opacity duration-200\"\n                            style={{\n                              fontSize: arraySize[0] > 30 ? '8px' : '10px'\n                            }}\n                          >\n                            <div \n                              className=\"px-2 py-1 rounded font-mono font-bold whitespace-nowrap\"\n                              style={{\n                                backgroundColor: 'rgba(0, 0, 0, 0.8)',\n                                color: barColor,\n                                border: `1px solid ${barColor}`,\n                                boxShadow: `0 0 10px ${barColor}50`\n                              }}\n                            >\n                              {element.value}\n                            </div>\n                          </motion.div>\n                          \n                          <motion.div\n                            className=\"absolute inset-0 rounded-t overflow-hidden\"\n                            initial={{ x: '-100%' }}\n                            animate={{ x: '200%' }}\n                            transition={{\n                              duration: 2,\n                              repeat: Infinity,\n                              ease: \"linear\",\n                              repeatDelay: 1\n                            }}\n                            style={{\n                              background: 'linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.3), transparent)',\n                              pointerEvents: 'none'\n                            }}\n                          />\n                        </motion.div>\n                      );\n                    })\n                  )}\n                </div>\n              )}\n              \n              <div className=\"relative h-full flex items-end justify-center gap-1\">\n                {/* TODO:AnimatedBars Render array elements as animated bars with height transitions, neon colors, and glow effects */}\n              </div>\n            </div>\n\n            {/* TODO:ProgressBar Animated progress bar showing sorting completion percentage */}\n          </div>\n        </div>\n\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.8, delay: 0.4 }}\n          className=\"bg-gray-900/50 backdrop-blur-lg border border-cyan-500/30 rounded-xl p-6 shadow-[0_0_30px_rgba(0,255,255,0.2)]\"\n        >\n          <div className=\"flex items-center gap-2 mb-4\">\n            <BarChart3 className=\"w-5 h-5 text-cyan-400\" />\n            <h3 className=\"text-lg font-semibold text-cyan-300 uppercase tracking-wider\">\n              Legend\n            </h3>\n          </div>\n          \n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n            {/* Default State */}\n            <motion.div\n              className=\"flex items-center gap-3 p-3 bg-gray-800/50 rounded-lg border border-gray-700/50 hover:border-gray-600/50 transition-all duration-300\"\n              whileHover={{ scale: 1.05 }}\n            >\n              <motion.div\n                className=\"w-4 h-12 bg-gradient-to-t from-cyan-500 to-cyan-300 rounded-sm\"\n                style={{\n                  boxShadow: '0 0 15px rgba(0, 255, 255, 0.5)'\n                }}\n                animate={{\n                  boxShadow: [\n                    '0 0 15px rgba(0, 255, 255, 0.5)',\n                    '0 0 25px rgba(0, 255, 255, 0.7)',\n                    '0 0 15px rgba(0, 255, 255, 0.5)'\n                  ]\n                }}\n                transition={{ duration: 2, repeat: Infinity }}\n              />\n              <div>\n                <div className=\"text-sm font-semibold text-gray-200\">Default</div>\n                <div className=\"text-xs text-gray-400\">Unsorted</div>\n              </div>\n            </motion.div>\n\n            {/* Comparing State */}\n            <motion.div\n              className=\"flex items-center gap-3 p-3 bg-gray-800/50 rounded-lg border border-yellow-700/50 hover:border-yellow-600/50 transition-all duration-300\"\n              whileHover={{ scale: 1.05 }}\n            >\n              <motion.div\n                className=\"w-4 h-12 bg-gradient-to-t from-yellow-500 to-yellow-300 rounded-sm\"\n                style={{\n                  boxShadow: '0 0 20px rgba(255, 255, 0, 0.6)'\n                }}\n                animate={{\n                  boxShadow: [\n                    '0 0 20px rgba(255, 255, 0, 0.6)',\n                    '0 0 35px rgba(255, 255, 0, 0.9)',\n                    '0 0 20px rgba(255, 255, 0, 0.6)'\n                  ]\n                }}\n                transition={{ duration: 1.5, repeat: Infinity }}\n              />\n              <div>\n                <div className=\"text-sm font-semibold text-yellow-300\">Comparing</div>\n                <div className=\"text-xs text-yellow-400/70\">Active</div>\n              </div>\n            </motion.div>\n\n            {/* Swapping State */}\n            <motion.div\n              className=\"flex items-center gap-3 p-3 bg-gray-800/50 rounded-lg border border-red-700/50 hover:border-red-600/50 transition-all duration-300\"\n              whileHover={{ scale: 1.05 }}\n            >\n              <motion.div\n                className=\"w-4 h-12 bg-gradient-to-t from-red-500 to-pink-400 rounded-sm\"\n                style={{\n                  boxShadow: '0 0 20px rgba(255, 0, 100, 0.6)'\n                }}\n                animate={{\n                  boxShadow: [\n                    '0 0 20px rgba(255, 0, 100, 0.6)',\n                    '0 0 35px rgba(255, 0, 100, 0.9)',\n                    '0 0 20px rgba(255, 0, 100, 0.6)'\n                  ],\n                  x: [-2, 2, -2]\n                }}\n                transition={{ duration: 1, repeat: Infinity }}\n              />\n              <div>\n                <div className=\"text-sm font-semibold text-red-300\">Swapping</div>\n                <div className=\"text-xs text-red-400/70\">Moving</div>\n              </div>\n            </motion.div>\n\n            {/* Sorted State */}\n            <motion.div\n              className=\"flex items-center gap-3 p-3 bg-gray-800/50 rounded-lg border border-green-700/50 hover:border-green-600/50 transition-all duration-300\"\n              whileHover={{ scale: 1.05 }}\n            >\n              <motion.div\n                className=\"w-4 h-12 bg-gradient-to-t from-green-500 to-emerald-300 rounded-sm\"\n                style={{\n                  boxShadow: '0 0 20px rgba(0, 255, 100, 0.6)'\n                }}\n                animate={{\n                  boxShadow: [\n                    '0 0 20px rgba(0, 255, 100, 0.6)',\n                    '0 0 30px rgba(0, 255, 100, 0.8)',\n                    '0 0 20px rgba(0, 255, 100, 0.6)'\n                  ]\n                }}\n                transition={{ duration: 2, repeat: Infinity }}\n              />\n              <div>\n                <div className=\"text-sm font-semibold text-green-300\">Sorted</div>\n                <div className=\"text-xs text-green-400/70\">Complete</div>\n              </div>\n            </motion.div>\n          </div>\n\n          {/* Additional Info */}\n          <motion.div\n            className=\"mt-4 pt-4 border-t border-cyan-500/20\"\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            transition={{ delay: 0.6 }}\n          >\n            <div className=\"flex items-center justify-center gap-6 text-xs text-gray-400\">\n              <div className=\"flex items-center gap-2\">\n                <motion.div\n                  className=\"w-2 h-2 bg-cyan-400 rounded-full\"\n                  animate={{\n                    boxShadow: [\n                      '0 0 5px rgba(0, 255, 255, 0.5)',\n                      '0 0 15px rgba(0, 255, 255, 1)',\n                      '0 0 5px rgba(0, 255, 255, 0.5)'\n                    ]\n                  }}\n                  transition={{ duration: 2, repeat: Infinity }}\n                />\n                <span>Glowing effects indicate active operations</span>\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <motion.div\n                  className=\"w-2 h-2 bg-purple-400 rounded-full\"\n                  animate={{\n                    scale: [1, 1.3, 1]\n                  }}\n                  transition={{ duration: 1.5, repeat: Infinity }}\n                />\n                <span>Bar height represents element value</span>\n              </div>\n            </div>\n          </motion.div>\n        </motion.div>\n      </div>\n    </div>\n  );\n}",
  "error": null,
  "overall_score": 41,
  "code_quality_score": 12,
  "architecture_score": 10,
  "performance_score": 8,
  "accessibility_score": 11,
  "metadata": {
    "document_id": "eval_room_03787b468d15",
    "prompt_category": "creative",
    "prompt_complexity": 9.0
  },
  "raw_response": {
    "document_id": "eval_room_03787b468d15",
    "mode": "parallel",
    "prompt": "Build a captivating algorithm visualizer with neon colored bars, smooth height transitions, glowing comparison indicators, trail effects during swaps, and a futuristic dashboard design with animated controls",
    "content": "import { useState, useCallback } from 'react';\nimport { useEffect, useRef } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Slider } from '@/components/ui/slider';\nimport { Play, Pause, RotateCcw, Zap, BarChart3 } from 'lucide-react';\nimport { motion } from 'framer-motion';\n\ninterface ArrayElement {\n  value: number;\n  id: string;\n  isComparing?: boolean;\n  isSwapping?: boolean;\n  isSorted?: boolean;\n}\n\ninterface AlgorithmStep {\n  array: ArrayElement[];\n  comparingIndices: number[];\n  swappingIndices: number[];\n  sortedIndices: number[];\n}\n\ntype AlgorithmType = 'bubble' | 'quick' | 'merge' | 'insertion';\n\nconst NEON_COLORS = [\n  '#00ffff',\n  '#ff00ff', \n  '#00ff00',\n  '#ffff00',\n  '#ff0066',\n  '#00ffaa'\n];\n\nconst mockAlgorithms = [\n  { id: 'bubble', name: 'Bubble Sort', complexity: 'O(n\u00b2)' },\n  { id: 'quick', name: 'Quick Sort', complexity: 'O(n log n)' },\n  { id: 'merge', name: 'Merge Sort', complexity: 'O(n log n)' },\n  { id: 'insertion', name: 'Insertion Sort', complexity: 'O(n\u00b2)' }\n];\n\nexport default function AlgorithmVisualizer() {\n  // Animation interval ref\n  const animationIntervalRef = useState<NodeJS.Timeout | null>(null)[0];\n  const [array, setArray] = useState<ArrayElement[]>([]);\n  const animationIntervalRef2 = useRef<NodeJS.Timeout | null>(null);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [speed, setSpeed] = useState([50]);\n  const [arraySize, setArraySize] = useState([20]);\n  const [selectedAlgorithm, setSelectedAlgorithm] = useState<AlgorithmType>('bubble');\n  const [currentStep, setCurrentStep] = useState(0);\n  const [steps, setSteps] = useState<AlgorithmStep[]>([]);\n  const [comparisons, setComparisons] = useState(0);\n  const [swaps, setSwaps] = useState(0);\n\n  const generateRandomArray = useCallback(() => {\n    const newArray: ArrayElement[] = Array.from({ length: arraySize[0] }, (_, index) => ({\n      value: Math.floor(Math.random() * 100) + 5,\n      id: `element-${index}-${Date.now()}`,\n      isComparing: false,\n      isSwapping: false,\n      isSorted: false\n    }));\n    setArray(newArray);\n    setSteps([]);\n    setCurrentStep(0);\n    setIsPlaying(false);\n  }, [arraySize]);\n\n  const resetVisualization = useCallback(() => {\n\n    setIsPlaying(false);\n    setCurrentStep(0);\n    setSteps([]);\n    generateRandomArray();\n  }, [generateRandomArray]);\n\n  const startVisualization = useCallback(() => {\n    if (steps.length === 0 || currentStep >= steps.length) return;\n    \n    setIsPlaying(true);\n    \n    // Clear any existing interval\n    if (animationIntervalRef2.current) {\n      clearInterval(animationIntervalRef2.current);\n    }\n    \n    // Calculate delay based on speed (inverse relationship)\n    const delay = 1000 - (speed[0] * 10);\n    \n    animationIntervalRef2.current = setInterval(() => {\n      setCurrentStep((prevStep) => {\n        const nextStep = prevStep + 1;\n        \n        if (nextStep >= steps.length) {\n          // Animation complete\n          setIsPlaying(false);\n          if (animationIntervalRef2.current) {\n            clearInterval(animationIntervalRef2.current);\n            animationIntervalRef2.current = null;\n          }\n          return prevStep;\n        }\n        \n        // Update array with current step\n        const stepData = steps[nextStep];\n        setArray(stepData.array);\n        \n        return nextStep;\n      });\n    }, delay);\n\n    \n  }, [steps, speed, currentStep]);\n  // Cleanup interval on unmount\n  useEffect(() => {\n    return () => {\n      if (animationIntervalRef2.current) {\n        clearInterval(animationIntervalRef2.current);\n      }\n    };\n  }, []);\n\n  const pauseVisualization = useCallback(() => {\n    setIsPlaying(false);\n\n    \n  }, []);\n\n  const generateSortingSteps = useCallback((algorithm: AlgorithmType) => {\n        if (array.length === 0) return;\n\n    const steps: AlgorithmStep[] = [];\n    const arr = array.map(el => ({ ...el }));\n\n    const addStep = (\n      currentArray: ArrayElement[],\n      comparing: number[] = [],\n      swapping: number[] = [],\n      sorted: number[] = []\n    ) => {\n      steps.push({\n        array: currentArray.map(el => ({ ...el })),\n        comparingIndices: [...comparing],\n        swappingIndices: [...swapping],\n        sortedIndices: [...sorted]\n      });\n    };\n\n    switch (algorithm) {\n      case 'bubble': {\n        const sortedIndices: number[] = [];\n        for (let i = 0; i < arr.length - 1; i++) {\n          for (let j = 0; j < arr.length - i - 1; j++) {\n            addStep(arr, [j, j + 1], [], sortedIndices);\n            \n            if (arr[j].value > arr[j + 1].value) {\n              addStep(arr, [], [j, j + 1], sortedIndices);\n              [arr[j], arr[j + 1]] = [arr[j + 1], arr[j]];\n              addStep(arr, [], [], sortedIndices);\n            }\n          }\n          sortedIndices.push(arr.length - i - 1);\n          addStep(arr, [], [], sortedIndices);\n        }\n        sortedIndices.push(0);\n        addStep(arr, [], [], sortedIndices);\n        break;\n      }\n\n      case 'quick': {\n        const sortedIndices: number[] = [];\n        \n        const partition = (low: number, high: number): number => {\n          const pivot = arr[high].value;\n          let i = low - 1;\n\n          for (let j = low; j < high; j++) {\n            addStep(arr, [j, high], [], sortedIndices);\n            \n            if (arr[j].value < pivot) {\n              i++;\n              if (i !== j) {\n                addStep(arr, [], [i, j], sortedIndices);\n                [arr[i], arr[j]] = [arr[j], arr[i]];\n                addStep(arr, [], [], sortedIndices);\n              }\n            }\n          }\n          \n          addStep(arr, [], [i + 1, high], sortedIndices);\n          [arr[i + 1], arr[high]] = [arr[high], arr[i + 1]];\n          addStep(arr, [], [], sortedIndices);\n          \n          return i + 1;\n        };\n\n        const quickSort = (low: number, high: number) => {\n          if (low < high) {\n            const pi = partition(low, high);\n            sortedIndices.push(pi);\n            quickSort(low, pi - 1);\n            quickSort(pi + 1, high);\n          } else if (low === high) {\n            sortedIndices.push(low);\n          }\n        };\n\n        quickSort(0, arr.length - 1);\n        addStep(arr, [], [], Array.from({ length: arr.length }, (_, i) => i));\n        break;\n      }\n\n      case 'merge': {\n        const sortedIndices: number[] = [];\n        \n        const merge = (left: number, mid: number, right: number) => {\n          const leftArr = arr.slice(left, mid + 1);\n          const rightArr = arr.slice(mid + 1, right + 1);\n          \n          let i = 0, j = 0, k = left;\n          \n          while (i < leftArr.length && j < rightArr.length) {\n            addStep(arr, [left + i, mid + 1 + j], [], sortedIndices);\n            \n            if (leftArr[i].value <= rightArr[j].value) {\n              addStep(arr, [], [k], sortedIndices);\n              arr[k] = leftArr[i];\n              i++;\n            } else {\n              addStep(arr, [], [k], sortedIndices);\n              arr[k] = rightArr[j];\n              j++;\n            }\n            k++;\n            addStep(arr, [], [], sortedIndices);\n          }\n          \n          while (i < leftArr.length) {\n            addStep(arr, [], [k], sortedIndices);\n            arr[k] = leftArr[i];\n            i++;\n            k++;\n            addStep(arr, [], [], sortedIndices);\n          }\n          \n          while (j < rightArr.length) {\n            addStep(arr, [], [k], sortedIndices);\n            arr[k] = rightArr[j];\n            j++;\n            k++;\n            addStep(arr, [], [], sortedIndices);\n          }\n        };\n\n        const mergeSort = (left: number, right: number) => {\n          if (left < right) {\n            const mid = Math.floor((left + right) / 2);\n            mergeSort(left, mid);\n            mergeSort(mid + 1, right);\n            merge(left, mid, right);\n          }\n        };\n\n        mergeSort(0, arr.length - 1);\n        addStep(arr, [], [], Array.from({ length: arr.length }, (_, i) => i));\n        break;\n      }\n\n      case 'insertion': {\n        const sortedIndices: number[] = [0];\n        addStep(arr, [], [], sortedIndices);\n        \n        for (let i = 1; i < arr.length; i++) {\n          const key = arr[i];\n          let j = i - 1;\n          \n          addStep(arr, [i], [], sortedIndices);\n          \n          while (j >= 0 && arr[j].value > key.value) {\n            addStep(arr, [j, j + 1], [], sortedIndices);\n            addStep(arr, [], [j, j + 1], sortedIndices);\n            arr[j + 1] = arr[j];\n            addStep(arr, [], [], sortedIndices);\n            j--;\n          }\n          \n          arr[j + 1] = key;\n          sortedIndices.push(i);\n          addStep(arr, [], [], sortedIndices);\n        }\n        break;\n      }\n    }\n\n    setSteps(steps);\n    setCurrentStep(0);\n  }, [array]);\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-gray-900 via-purple-900 to-gray-900 p-8\">\n      <div className=\"max-w-7xl mx-auto space-y-8\">\n        <motion.div\n          initial={{ opacity: 0, y: -20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.8 }}\n          className=\"text-center space-y-4\"\n        >\n          <motion.h1\n            className=\"text-6xl font-bold bg-gradient-to-r from-cyan-400 via-purple-400 to-pink-400 bg-clip-text text-transparent\"\n            animate={{\n              textShadow: [\n                '0 0 20px rgba(0, 255, 255, 0.5)',\n                '0 0 40px rgba(255, 0, 255, 0.5)',\n                '0 0 20px rgba(0, 255, 255, 0.5)'\n              ]\n            }}\n            transition={{ duration: 2, repeat: Infinity }}\n          >\n            Algorithm Visualizer\n          </motion.h1>\n          \n          <div className=\"flex items-center justify-center gap-4\">\n            <motion.div\n              initial={{ scale: 0 }}\n              animate={{ scale: 1 }}\n              transition={{ delay: 0.3, type: 'spring' }}\n              className=\"px-6 py-2 bg-purple-500/20 border border-purple-400/50 rounded-full backdrop-blur-sm\"\n            >\n              <span className=\"text-2xl font-semibold text-purple-300\">\n                {mockAlgorithms.find(a => a.id === selectedAlgorithm)?.name || 'Bubble Sort'}\n              </span>\n            </motion.div>\n            \n            <motion.div\n              initial={{ scale: 0 }}\n              animate={{ scale: 1 }}\n              transition={{ delay: 0.5, type: 'spring' }}\n              className=\"px-4 py-2 bg-cyan-500/20 border border-cyan-400/50 rounded-full backdrop-blur-sm relative overflow-hidden\"\n            >\n              <motion.div\n                className=\"absolute inset-0 bg-gradient-to-r from-transparent via-cyan-400/20 to-transparent\"\n                animate={{ x: ['-100%', '200%'] }}\n                transition={{ duration: 2, repeat: Infinity, ease: 'linear' }}\n              />\n              <div className=\"relative flex items-center gap-2\">\n                <Zap className=\"w-4 h-4 text-cyan-400\" />\n                <span className=\"text-lg font-mono text-cyan-300\">\n                  {mockAlgorithms.find(a => a.id === selectedAlgorithm)?.complexity || 'O(n\u00b2)'}\n                </span>\n              </div>\n            </motion.div>\n          </div>\n        </motion.div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-6\">\n          <div className=\"lg:col-span-1 space-y-6\">\n            <motion.div\n              initial={{ opacity: 0, x: -50 }}\n              animate={{ opacity: 1, x: 0 }}\n              className=\"bg-gray-900/50 backdrop-blur-lg border border-cyan-500/30 rounded-xl p-6 shadow-[0_0_30px_rgba(0,255,255,0.3)] hover:shadow-[0_0_50px_rgba(0,255,255,0.5)] transition-all duration-300\"\n            >\n              <div className=\"space-y-6\">\n                {/* Algorithm Selection */}\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center gap-2 text-cyan-400\">\n                    <Zap className=\"w-4 h-4\" />\n                    <h3 className=\"text-sm font-semibold uppercase tracking-wider\">Algorithm</h3>\n                  </div>\n                  <div className=\"grid grid-cols-1 gap-2\">\n                    {mockAlgorithms.map((algo) => (\n                      <Button\n                        key={algo.id}\n                        onClick={() => {\n                          setSelectedAlgorithm(algo.id as AlgorithmType);\n                          generateSortingSteps(algo.id as AlgorithmType);\n                        }}\n                        disabled={isPlaying}\n                        variant={selectedAlgorithm === algo.id ? \"default\" : \"outline\"}\n                        className={`w-full justify-start text-left transition-all duration-300 ${\n                          selectedAlgorithm === algo.id\n                            ? 'bg-gradient-to-r from-cyan-500 to-purple-500 text-white shadow-[0_0_20px_rgba(0,255,255,0.5)] border-0'\n                            : 'bg-gray-800/50 border-cyan-500/20 text-cyan-300 hover:bg-gray-700/50 hover:border-cyan-500/50 hover:shadow-[0_0_15px_rgba(0,255,255,0.3)]'\n                        }`}\n                      >\n                        <div className=\"flex flex-col items-start\">\n                          <span className=\"font-medium\">{algo.name}</span>\n                          <span className=\"text-xs opacity-70\">{algo.complexity}</span>\n                        </div>\n                      </Button>\n                    ))}\n                  </div>\n                </div>\n\n                {/* Speed Control */}\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center gap-2 text-purple-400\">\n                      <BarChart3 className=\"w-4 h-4\" />\n                      <h3 className=\"text-sm font-semibold uppercase tracking-wider\">Speed</h3>\n                    </div>\n                    <span className=\"text-xs text-purple-300 font-mono bg-purple-500/20 px-2 py-1 rounded border border-purple-500/30\">\n                      {speed[0]}ms\n                    </span>\n                  </div>\n                  <Slider\n                    value={speed}\n                    onValueChange={setSpeed}\n                    min={10}\n                    max={200}\n                    step={10}\n                    disabled={isPlaying}\n                    className=\"cursor-pointer\"\n                  />\n                </div>\n\n                {/* Array Size Control */}\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center gap-2 text-pink-400\">\n                      <BarChart3 className=\"w-4 h-4\" />\n                      <h3 className=\"text-sm font-semibold uppercase tracking-wider\">Array Size</h3>\n                    </div>\n                    <span className=\"text-xs text-pink-300 font-mono bg-pink-500/20 px-2 py-1 rounded border border-pink-500/30\">\n                      {arraySize[0]}\n                    </span>\n                  </div>\n                  <Slider\n                    value={arraySize}\n                    onValueChange={setArraySize}\n                    min={5}\n                    max={50}\n                    step={5}\n                    disabled={isPlaying}\n                    className=\"cursor-pointer\"\n                  />\n                </div>\n\n                {/* Control Buttons */}\n                <div className=\"space-y-2 pt-4 border-t border-cyan-500/20\">\n                  <Button\n                    onClick={isPlaying ? pauseVisualization : startVisualization}\n                    disabled={steps.length === 0 || currentStep >= steps.length}\n                    className=\"w-full bg-gradient-to-r from-green-500 to-emerald-500 hover:from-green-600 hover:to-emerald-600 text-white shadow-[0_0_20px_rgba(0,255,0,0.4)] hover:shadow-[0_0_30px_rgba(0,255,0,0.6)] transition-all duration-300 border-0\"\n                  >\n                    {isPlaying ? (\n                      <>\n                        <Pause className=\"w-4 h-4 mr-2\" />\n                        Pause\n                      </>\n                    ) : (\n                      <>\n                        <Play className=\"w-4 h-4 mr-2\" />\n                        {currentStep >= steps.length ? 'Finished' : 'Start'}\n                      </>\n                    )}\n                  </Button>\n                  <Button\n                    onClick={resetVisualization}\n                    disabled={isPlaying}\n                    className=\"w-full bg-gradient-to-r from-orange-500 to-red-500 hover:from-orange-600 hover:to-red-600 text-white shadow-[0_0_20px_rgba(255,100,0,0.4)] hover:shadow-[0_0_30px_rgba(255,100,0,0.6)] transition-all duration-300 border-0\"\n                  >\n                    <RotateCcw className=\"w-4 h-4 mr-2\" />\n                    Reset\n                  </Button>\n                </div>\n              </div>\n            </motion.div>\n            \n            <div className=\"bg-gray-900/50 backdrop-blur-lg border border-cyan-500/30 rounded-xl p-6 shadow-2xl shadow-cyan-500/20\">\n              <div className=\"space-y-6\">\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center gap-2 text-cyan-400\">\n                    <Zap className=\"w-4 h-4\" />\n                    <span className=\"text-sm font-semibold tracking-wider\">ALGORITHM</span>\n                  </div>\n                  <div className=\"grid grid-cols-1 gap-3\">\n                    {mockAlgorithms.map((algo) => (\n                      <motion.button\n                        key={algo.id}\n                        onClick={() => setSelectedAlgorithm(algo.id as AlgorithmType)}\n                        className={`relative p-4 rounded-lg border-2 transition-all duration-300 text-left overflow-hidden group ${\n                          selectedAlgorithm === algo.id\n                            ? 'border-cyan-400 bg-cyan-500/20 shadow-lg shadow-cyan-500/50'\n                            : 'border-gray-700 bg-gray-800/50 hover:border-purple-500/50 hover:bg-purple-500/10'\n                        }`}\n                        whileHover={{ scale: 1.02 }}\n                        whileTap={{ scale: 0.98 }}\n                      >\n                        <div className={`absolute inset-0 bg-gradient-to-r from-cyan-500/0 via-cyan-500/20 to-cyan-500/0 opacity-0 group-hover:opacity-100 transition-opacity duration-500 ${\n                          selectedAlgorithm === algo.id ? 'opacity-100' : ''\n                        }`} />\n                        <div className=\"relative z-10\">\n                          <div className={`font-semibold mb-1 ${\n                            selectedAlgorithm === algo.id ? 'text-cyan-300' : 'text-gray-300'\n                          }`}>\n                            {algo.name}\n                          </div>\n                          <div className={`text-xs font-mono ${\n                            selectedAlgorithm === algo.id ? 'text-cyan-400' : 'text-gray-500'\n                          }`}>\n                            {algo.complexity}\n                          </div>\n                        </div>\n                        {selectedAlgorithm === algo.id && (\n                          <motion.div\n                            className=\"absolute top-2 right-2 w-2 h-2 bg-cyan-400 rounded-full shadow-lg shadow-cyan-400/80\"\n                            animate={{ scale: [1, 1.2, 1] }}\n                            transition={{ duration: 2, repeat: Infinity }}\n                          />\n                        )}\n                      </motion.button>\n                    ))}\n                  </div>\n                </div>\n\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <label className=\"text-cyan-400 text-sm font-medium flex items-center gap-2\">\n                      <Zap className=\"w-4 h-4\" />\n                      Speed\n                    </label>\n                    <span className=\"text-cyan-300 text-xs\">{speed[0]}ms</span>\n                  </div>\n                  <Slider\n                    value={speed}\n                    onValueChange={setSpeed}\n                    min={10}\n                    max={200}\n                    step={10}\n                    className=\"[&_[role=slider]]:h-4 [&_[role=slider]]:w-4 [&_[role=slider]]:bg-cyan-400 [&_[role=slider]]:border-2 [&_[role=slider]]:border-cyan-300 [&_[role=slider]]:shadow-[0_0_15px_rgba(34,211,238,0.8)] [&_[role=slider]]:transition-all [&_[role=slider]]:hover:shadow-[0_0_25px_rgba(34,211,238,1)] [&_.relative]:h-2 [&_.relative]:bg-gray-800 [&_.relative]:rounded-full [&_.relative]:border [&_.relative]:border-cyan-500/30 [&_[role=slider]]:focus:ring-4 [&_[role=slider]]:focus:ring-cyan-400/50\"\n                  /></parameter>\n                </div>\n\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <label className=\"text-cyan-400 text-sm font-medium flex items-center gap-2\">\n                      <BarChart3 className=\"w-4 h-4\" />\n                      Array Size\n                    </label>\n                    <span className=\"text-cyan-300 text-xs\">{arraySize[0]}</span>\n                  </div>\n                  <Slider\n                    value={arraySize}\n                    onValueChange={setArraySize}\n                    min={5}\n                    max={50}\n                    step={1}\n                    className=\"[&_[role=slider]]:bg-gradient-to-r [&_[role=slider]]:from-cyan-400 [&_[role=slider]]:to-purple-500 [&_[role=slider]]:border-2 [&_[role=slider]]:border-cyan-300 [&_[role=slider]]:shadow-lg [&_[role=slider]]:shadow-cyan-500/50 [&>span]:bg-gradient-to-r [&>span]:from-cyan-500/30 [&>span]:to-purple-500/30\"\n                  />\n                </div>\n\n                <div className=\"flex gap-3 pt-4\">\n                  <motion.div className=\"flex-1\">\n                    <Button\n                      onClick={isPlaying ? pauseVisualization : startVisualization}\n                      disabled={array.length === 0 || (steps.length === 0 && !isPlaying)}\n                      className=\"w-full relative overflow-hidden bg-gradient-to-r from-cyan-500 to-purple-500 hover:from-cyan-400 hover:to-purple-400 text-white font-semibold shadow-lg disabled:opacity-50 disabled:cursor-not-allowed transition-all duration-300\"\n                      style={{\n                        boxShadow: isPlaying \n                          ? '0 0 30px rgba(0, 255, 255, 0.6), 0 0 60px rgba(168, 85, 247, 0.4)' \n                          : '0 0 20px rgba(0, 255, 255, 0.4), 0 0 40px rgba(168, 85, 247, 0.2)'\n                      }}\n                    >\n                      <motion.div\n                        className=\"flex items-center justify-center gap-2\"\n                        whileHover={{ scale: 1.05 }}\n                        whileTap={{ scale: 0.95 }}\n                      >\n                        <motion.div\n                          key={isPlaying ? 'pause' : 'play'}\n                          initial={{ scale: 0, rotate: -180 }}\n                          animate={{ scale: 1, rotate: 0 }}\n                          exit={{ scale: 0, rotate: 180 }}\n                          transition={{ duration: 0.3, type: \"spring\", stiffness: 200 }}\n                        >\n                          {isPlaying ? (\n                            <Pause className=\"w-5 h-5\" fill=\"currentColor\" />\n                          ) : (\n                            <Play className=\"w-5 h-5\" fill=\"currentColor\" />\n                          )}\n                        </motion.div>\n                        <span>{isPlaying ? 'Pause' : 'Play'}</span>\n                      </motion.div>\n                      \n                      {/* Animated glow pulse effect */}\n                      <motion.div\n                        className=\"absolute inset-0 bg-gradient-to-r from-cyan-400 to-purple-400 opacity-0\"\n                        animate={{\n                          opacity: isPlaying ? [0, 0.3, 0] : 0\n                        }}\n                        transition={{\n                          duration: 2,\n                          repeat: isPlaying ? Infinity : 0,\n                          ease: \"easeInOut\"\n                        }}\n                      />\n                    </Button>\n                  </motion.div></parameter>\n                  <motion.div whileTap={{ rotate: 360 }} transition={{ duration: 0.6, ease: \"easeInOut\" }}>\n                    <Button\n                      onClick={resetVisualization}\n                      disabled={isPlaying}\n                      className=\"w-full bg-gradient-to-r from-pink-500 to-orange-500 hover:from-pink-600 hover:to-orange-600 text-white border-0 shadow-[0_0_20px_rgba(236,72,153,0.6)] hover:shadow-[0_0_30px_rgba(236,72,153,0.9)] transition-all duration-300 disabled:opacity-50 disabled:cursor-not-allowed\"\n                    >\n                      <RotateCcw className=\"w-4 h-4 mr-2\" />\n                      Reset\n                    </Button>\n                  </motion.div>\n                </div>\n              </div>\n            </div>\n\n            \n            <motion.div\n              initial={{ opacity: 0, x: -50 }}\n              animate={{ opacity: 1, x: 0 }}\n              transition={{ delay: 0.2 }}\n              className=\"bg-gray-900/50 backdrop-blur-lg border border-purple-500/30 rounded-xl p-6 shadow-[0_0_30px_rgba(168,85,247,0.3)] hover:shadow-[0_0_50px_rgba(168,85,247,0.5)] transition-all duration-300\"\n            >\n              <div className=\"space-y-4\">\n                <div className=\"flex items-center gap-2 text-purple-400 mb-4\">\n                  <BarChart3 className=\"w-5 h-5\" />\n                  <h3 className=\"text-sm font-semibold uppercase tracking-wider\">Statistics</h3>\n                </div>\n\n                {/* Comparisons Counter */}\n                <motion.div\n                  className=\"relative overflow-hidden rounded-lg bg-gradient-to-br from-cyan-500/10 to-cyan-600/10 border border-cyan-500/30 p-4\"\n                  whileHover={{ scale: 1.02 }}\n                  transition={{ type: 'spring', stiffness: 300 }}\n                >\n                  <motion.div\n                    className=\"absolute inset-0 bg-gradient-to-r from-transparent via-cyan-400/20 to-transparent\"\n                    animate={{ x: ['-100%', '200%'] }}\n                    transition={{ duration: 3, repeat: Infinity, ease: 'linear' }}\n                  />\n                  <div className=\"relative z-10\">\n                    <div className=\"text-xs text-cyan-400 uppercase tracking-wider mb-1 font-semibold\">\n                      Comparisons\n                    </div>\n                    <motion.div\n                      key={comparisons}\n                      initial={{ scale: 1.5, color: '#00ffff' }}\n                      animate={{ scale: 1, color: '#67e8f9' }}\n                      transition={{ duration: 0.3 }}\n                      className=\"text-3xl font-bold text-cyan-300 font-mono\"\n                      style={{\n                        textShadow: '0 0 20px rgba(0, 255, 255, 0.8), 0 0 40px rgba(0, 255, 255, 0.4)'\n                      }}\n                    >\n                      {comparisons.toLocaleString()}\n                    </motion.div>\n                  </div>\n                </motion.div>\n\n                {/* Swaps Counter */}\n                <motion.div\n                  className=\"relative overflow-hidden rounded-lg bg-gradient-to-br from-pink-500/10 to-pink-600/10 border border-pink-500/30 p-4\"\n                  whileHover={{ scale: 1.02 }}\n                  transition={{ type: 'spring', stiffness: 300 }}\n                >\n                  <motion.div\n                    className=\"absolute inset-0 bg-gradient-to-r from-transparent via-pink-400/20 to-transparent\"\n                    animate={{ x: ['-100%', '200%'] }}\n                    transition={{ duration: 3, repeat: Infinity, ease: 'linear', delay: 1 }}\n                  />\n                  <div className=\"relative z-10\">\n                    <div className=\"text-xs text-pink-400 uppercase tracking-wider mb-1 font-semibold\">\n                      Swaps\n                    </div>\n                    <motion.div\n                      key={swaps}\n                      initial={{ scale: 1.5, color: '#ff0066' }}\n                      animate={{ scale: 1, color: '#f9a8d4' }}\n                      transition={{ duration: 0.3 }}\n                      className=\"text-3xl font-bold text-pink-300 font-mono\"\n                      style={{\n                        textShadow: '0 0 20px rgba(255, 0, 102, 0.8), 0 0 40px rgba(255, 0, 102, 0.4)'\n                      }}\n                    >\n                      {swaps.toLocaleString()}\n                    </motion.div>\n                  </div>\n                </motion.div>\n\n                {/* Progress Indicator */}\n                <motion.div\n                  className=\"relative overflow-hidden rounded-lg bg-gradient-to-br from-purple-500/10 to-purple-600/10 border border-purple-500/30 p-4\"\n                  whileHover={{ scale: 1.02 }}\n                  transition={{ type: 'spring', stiffness: 300 }}\n                >\n                  <motion.div\n                    className=\"absolute inset-0 bg-gradient-to-r from-transparent via-purple-400/20 to-transparent\"\n                    animate={{ x: ['-100%', '200%'] }}\n                    transition={{ duration: 3, repeat: Infinity, ease: 'linear', delay: 2 }}\n                  />\n                  <div className=\"relative z-10 space-y-2\">\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"text-xs text-purple-400 uppercase tracking-wider font-semibold\">\n                        Progress\n                      </div>\n                      <motion.div\n                        key={currentStep}\n                        initial={{ scale: 1.3 }}\n                        animate={{ scale: 1 }}\n                        className=\"text-xs text-purple-300 font-mono bg-purple-500/20 px-2 py-1 rounded border border-purple-500/30\"\n                      >\n                        {steps.length > 0 ? Math.round((currentStep / steps.length) * 100) : 0}%\n                      </motion.div>\n                    </div>\n                    <div className=\"relative h-2 bg-gray-800 rounded-full border border-purple-500/30 overflow-hidden\">\n                      <motion.div\n                        className=\"absolute inset-y-0 left-0 bg-gradient-to-r from-purple-500 via-pink-500 to-cyan-500 rounded-full\"\n                        initial={{ width: 0 }}\n                        animate={{\n                          width: steps.length > 0 ? `${(currentStep / steps.length) * 100}%` : '0%'\n                        }}\n                        transition={{ duration: 0.3, ease: 'easeOut' }}\n                        style={{\n                          boxShadow: '0 0 20px rgba(168, 85, 247, 0.8)'\n                        }}\n                      />\n                      <motion.div\n                        className=\"absolute inset-0 bg-gradient-to-r from-transparent via-white/30 to-transparent\"\n                        animate={{ x: ['-100%', '200%'] }}\n                        transition={{ duration: 1.5, repeat: Infinity, ease: 'linear' }}\n                      />\n                    </div>\n                    <div className=\"flex items-center justify-between text-xs text-purple-400/70 font-mono\">\n                      <span>Step {currentStep}</span>\n                      <span>/ {steps.length}</span>\n                    </div>\n                  </div>\n                </motion.div>\n\n                {/* Status Indicator */}\n                <motion.div\n                  className=\"relative overflow-hidden rounded-lg bg-gradient-to-br from-green-500/10 to-emerald-600/10 border border-green-500/30 p-4\"\n                  animate={{\n                    borderColor: isPlaying\n                      ? ['rgba(34, 197, 94, 0.3)', 'rgba(34, 197, 94, 0.6)', 'rgba(34, 197, 94, 0.3)']\n                      : 'rgba(107, 114, 128, 0.3)'\n                  }}\n                  transition={{ duration: 2, repeat: Infinity }}\n                >\n                  <div className=\"relative z-10 flex items-center justify-between\">\n                    <div className=\"text-xs text-green-400 uppercase tracking-wider font-semibold\">\n                      Status\n                    </div>\n                    <div className=\"flex items-center gap-2\">\n                      <motion.div\n                        className={`w-2 h-2 rounded-full ${\n                          isPlaying ? 'bg-green-400' : 'bg-gray-500'\n                        }`}\n                        animate={\n                          isPlaying\n                            ? {\n                                boxShadow: [\n                                  '0 0 10px rgba(34, 197, 94, 0.8)',\n                                  '0 0 20px rgba(34, 197, 94, 1)',\n                                  '0 0 10px rgba(34, 197, 94, 0.8)'\n                                ]\n                              }\n                            : {}\n                        }\n                        transition={{ duration: 1, repeat: Infinity }}\n                      />\n                      <span\n                        className={`text-sm font-semibold ${\n                          isPlaying ? 'text-green-300' : 'text-gray-400'\n                        }`}\n                      >\n                        {isPlaying ? 'Running' : currentStep >= steps.length && steps.length > 0 ? 'Complete' : 'Idle'}\n                      </span>\n                    </div>\n                  </div>\n                </motion.div>\n              </div>\n            </motion.div>\n          </div>\n\n          <div className=\"lg:col-span-3\">\n            <div className=\"bg-gray-900/50 backdrop-blur-lg border border-purple-500/30 rounded-xl p-8 shadow-2xl shadow-purple-500/20 min-h-[600px]\">\n              {array.length === 0 ? (\n                <motion.div\n                  initial={{ opacity: 0, scale: 0.8 }}\n                  animate={{ opacity: 1, scale: 1 }}\n                  className=\"absolute inset-0 flex flex-col items-center justify-center gap-6\"\n                >\n                  <motion.div\n                    animate={{\n                      rotate: [0, 360],\n                      scale: [1, 1.1, 1]\n                    }}\n                    transition={{ duration: 3, repeat: Infinity, ease: \"linear\" }}\n                    className=\"w-24 h-24 rounded-full bg-gradient-to-r from-cyan-500 via-purple-500 to-pink-500 opacity-20 blur-xl\"\n                  />\n                  <div className=\"text-center space-y-3 relative z-10\">\n                    <BarChart3 className=\"w-16 h-16 mx-auto text-cyan-400 opacity-50\" />\n                    <p className=\"text-xl text-cyan-300/70 font-medium\">\n                      Click Reset to generate array\n                    </p>\n                  </div>\n                </motion.div>\n              ) : (\n                <div className=\"relative w-full h-full flex items-end justify-center gap-1 px-4\">\n                  {steps.length > 0 && currentStep < steps.length ? (\n                    steps[currentStep].array.map((element, index) => {\n                      const isComparing = steps[currentStep].comparingIndices.includes(index);\n                      const isSwapping = steps[currentStep].swappingIndices.includes(index);\n                      const isSorted = steps[currentStep].sortedIndices.includes(index);\n                      \n                      const maxValue = Math.max(...array.map(el => el.value));\n                      const heightPercentage = (element.value / maxValue) * 100;\n                      \n                      let barColor = NEON_COLORS[index % NEON_COLORS.length];\n                      let glowColor = barColor;\n                      let shadowIntensity = '0.3';\n                      \n                      if (isSorted) {\n                        barColor = '#00ff00';\n                        glowColor = '#00ff00';\n                        shadowIntensity = '0.8';\n                      } else if (isSwapping) {\n                        barColor = '#ff0066';\n                        glowColor = '#ff0066';\n                        shadowIntensity = '0.9';\n                      } else if (isComparing) {\n                        barColor = '#ffff00';\n                        glowColor = '#ffff00';\n                        shadowIntensity = '0.7';\n                      }\n                      \n                      return (\n                        <motion.div\n                          key={element.id}\n                          className=\"relative flex-1 min-w-[4px] max-w-[60px] group\"\n                          initial={{ height: 0, opacity: 0 }}\n                          animate={{\n                            height: `${heightPercentage}%`,\n                            opacity: 1,\n                            y: isSwapping ? [-10, 0] : 0,\n                            scale: isComparing ? [1, 1.05, 1] : 1\n                          }}\n                          transition={{\n                            height: { duration: 0.3, ease: \"easeOut\" },\n                            opacity: { duration: 0.2 },\n                            y: { duration: 0.4, ease: \"easeInOut\" },\n                            scale: { duration: 0.3, repeat: isComparing ? Infinity : 0 }\n                          }}\n                          style={{\n                            backgroundColor: barColor,\n                            boxShadow: `0 0 20px ${glowColor}${Math.floor(parseFloat(shadowIntensity) * 255).toString(16).padStart(2, '0')}, \n                                       0 0 40px ${glowColor}${Math.floor(parseFloat(shadowIntensity) * 0.5 * 255).toString(16).padStart(2, '0')},\n                                       inset 0 0 20px rgba(255, 255, 255, 0.2)`,\n                            borderRadius: '4px 4px 0 0',\n                            position: 'relative'\n                          }}\n                        >\n                          {/* Swap Trail Effect */}\n                          {isSwapping && (\n                            <>\n                              <motion.div\n                                className=\"absolute inset-0 rounded-t\"\n                                initial={{ opacity: 0 }}\n                                animate={{ \n                                  opacity: [0, 1, 0],\n                                  scale: [1, 1.3, 1.5]\n                                }}\n                                transition={{ duration: 0.6, repeat: Infinity }}\n                                style={{\n                                  background: `radial-gradient(circle, ${glowColor}80 0%, transparent 70%)`,\n                                  filter: 'blur(8px)'\n                                }}\n                              />\n                              <motion.div\n                                className=\"absolute -top-2 left-1/2 -translate-x-1/2 w-2 h-2 rounded-full\"\n                                animate={{\n                                  y: [-20, 0],\n                                  opacity: [1, 0]\n                                }}\n                                transition={{ duration: 0.5, repeat: Infinity }}\n                                style={{\n                                  backgroundColor: glowColor,\n                                  boxShadow: `0 0 10px ${glowColor}`\n                                }}\n                              />\n                            </>\n                          )}\n                          \n                          {/* Comparison Indicator */}\n                          {isComparing && (\n                            <motion.div\n                              className=\"absolute -top-8 left-1/2 -translate-x-1/2\"\n                              initial={{ opacity: 0, y: 10 }}\n                              animate={{ \n                                opacity: [0.5, 1, 0.5],\n                                y: [0, -5, 0]\n                              }}\n                              transition={{ duration: 0.8, repeat: Infinity }}\n                            >\n                              <div \n                                className=\"w-6 h-6 rounded-full flex items-center justify-center text-xs font-bold\"\n                                style={{\n                                  backgroundColor: glowColor,\n                                  boxShadow: `0 0 15px ${glowColor}`,\n                                  color: '#000'\n                                }}\n                              >\n                                ?\n                              </div>\n                            </motion.div>\n                          )}\n                          \n                          {/* Sorted Checkmark */}\n                          {isSorted && (\n                            <motion.div\n                              className=\"absolute -top-6 left-1/2 -translate-x-1/2\"\n                              initial={{ scale: 0, rotate: -180 }}\n                              animate={{ scale: 1, rotate: 0 }}\n                              transition={{ type: \"spring\", stiffness: 200, damping: 10 }}\n                            >\n                              <div \n                                className=\"w-5 h-5 rounded-full flex items-center justify-center text-xs font-bold\"\n                                style={{\n                                  backgroundColor: '#00ff00',\n                                  boxShadow: '0 0 15px #00ff00',\n                                  color: '#000'\n                                }}\n                              >\n                                \u2713\n                              </div>\n                            </motion.div>\n                          )}\n                          \n                          {/* Value Label */}\n                          <motion.div\n                            className=\"absolute bottom-full left-1/2 -translate-x-1/2 mb-1 opacity-0 group-hover:opacity-100 transition-opacity duration-200\"\n                            style={{\n                              fontSize: arraySize[0] > 30 ? '8px' : '10px'\n                            }}\n                          >\n                            <div \n                              className=\"px-2 py-1 rounded font-mono font-bold whitespace-nowrap\"\n                              style={{\n                                backgroundColor: 'rgba(0, 0, 0, 0.8)',\n                                color: barColor,\n                                border: `1px solid ${barColor}`,\n                                boxShadow: `0 0 10px ${glowColor}50`\n                              }}\n                            >\n                              {element.value}\n                            </div>\n                          </motion.div>\n                          \n                          {/* Shimmer Effect */}\n                          <motion.div\n                            className=\"absolute inset-0 rounded-t overflow-hidden\"\n                            initial={{ x: '-100%' }}\n                            animate={{ x: '200%' }}\n                            transition={{\n                              duration: 2,\n                              repeat: Infinity,\n                              ease: \"linear\",\n                              repeatDelay: 1\n                            }}\n                            style={{\n                              background: 'linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.3), transparent)',\n                              pointerEvents: 'none'\n                            }}\n                          />\n                        </motion.div>\n                      );\n                    })\n                  ) : (\n                    array.map((element, index) => {\n                      const maxValue = Math.max(...array.map(el => el.value));\n                      const heightPercentage = (element.value / maxValue) * 100;\n                      const barColor = NEON_COLORS[index % NEON_COLORS.length];\n                      \n                      return (\n                        <motion.div\n                          key={element.id}\n                          className=\"relative flex-1 min-w-[4px] max-w-[60px] group\"\n                          initial={{ height: 0, opacity: 0, scale: 0.8 }}\n                          animate={{ \n                            height: `${heightPercentage}%`,\n                            opacity: 1,\n                            scale: 1\n                          }}\n                          transition={{\n                            height: { duration: 0.5, ease: \"easeOut\", delay: index * 0.02 },\n                            opacity: { duration: 0.3, delay: index * 0.02 },\n                            scale: { duration: 0.3, delay: index * 0.02 }\n                          }}\n                          whileHover={{ scale: 1.05 }}\n                          style={{\n                            backgroundColor: barColor,\n                            boxShadow: `0 0 20px ${barColor}50, 0 0 40px ${barColor}30, inset 0 0 20px rgba(255, 255, 255, 0.1)`,\n                            borderRadius: '4px 4px 0 0'\n                          }}\n                        >\n                          <motion.div\n                            className=\"absolute bottom-full left-1/2 -translate-x-1/2 mb-1 opacity-0 group-hover:opacity-100 transition-opacity duration-200\"\n                            style={{\n                              fontSize: arraySize[0] > 30 ? '8px' : '10px'\n                            }}\n                          >\n                            <div \n                              className=\"px-2 py-1 rounded font-mono font-bold whitespace-nowrap\"\n                              style={{\n                                backgroundColor: 'rgba(0, 0, 0, 0.8)',\n                                color: barColor,\n                                border: `1px solid ${barColor}`,\n                                boxShadow: `0 0 10px ${barColor}50`\n                              }}\n                            >\n                              {element.value}\n                            </div>\n                          </motion.div>\n                          \n                          <motion.div\n                            className=\"absolute inset-0 rounded-t overflow-hidden\"\n                            initial={{ x: '-100%' }}\n                            animate={{ x: '200%' }}\n                            transition={{\n                              duration: 2,\n                              repeat: Infinity,\n                              ease: \"linear\",\n                              repeatDelay: 1\n                            }}\n                            style={{\n                              background: 'linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.3), transparent)',\n                              pointerEvents: 'none'\n                            }}\n                          />\n                        </motion.div>\n                      );\n                    })\n                  )}\n                </div>\n              )}\n              \n              <div className=\"relative h-full flex items-end justify-center gap-1\">\n                {/* TODO:AnimatedBars Render array elements as animated bars with height transitions, neon colors, and glow effects */}\n              </div>\n            </div>\n\n            {/* TODO:ProgressBar Animated progress bar showing sorting completion percentage */}\n          </div>\n        </div>\n\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.8, delay: 0.4 }}\n          className=\"bg-gray-900/50 backdrop-blur-lg border border-cyan-500/30 rounded-xl p-6 shadow-[0_0_30px_rgba(0,255,255,0.2)]\"\n        >\n          <div className=\"flex items-center gap-2 mb-4\">\n            <BarChart3 className=\"w-5 h-5 text-cyan-400\" />\n            <h3 className=\"text-lg font-semibold text-cyan-300 uppercase tracking-wider\">\n              Legend\n            </h3>\n          </div>\n          \n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n            {/* Default State */}\n            <motion.div\n              className=\"flex items-center gap-3 p-3 bg-gray-800/50 rounded-lg border border-gray-700/50 hover:border-gray-600/50 transition-all duration-300\"\n              whileHover={{ scale: 1.05 }}\n            >\n              <motion.div\n                className=\"w-4 h-12 bg-gradient-to-t from-cyan-500 to-cyan-300 rounded-sm\"\n                style={{\n                  boxShadow: '0 0 15px rgba(0, 255, 255, 0.5)'\n                }}\n                animate={{\n                  boxShadow: [\n                    '0 0 15px rgba(0, 255, 255, 0.5)',\n                    '0 0 25px rgba(0, 255, 255, 0.7)',\n                    '0 0 15px rgba(0, 255, 255, 0.5)'\n                  ]\n                }}\n                transition={{ duration: 2, repeat: Infinity }}\n              />\n              <div>\n                <div className=\"text-sm font-semibold text-gray-200\">Default</div>\n                <div className=\"text-xs text-gray-400\">Unsorted</div>\n              </div>\n            </motion.div>\n\n            {/* Comparing State */}\n            <motion.div\n              className=\"flex items-center gap-3 p-3 bg-gray-800/50 rounded-lg border border-yellow-700/50 hover:border-yellow-600/50 transition-all duration-300\"\n              whileHover={{ scale: 1.05 }}\n            >\n              <motion.div\n                className=\"w-4 h-12 bg-gradient-to-t from-yellow-500 to-yellow-300 rounded-sm\"\n                style={{\n                  boxShadow: '0 0 20px rgba(255, 255, 0, 0.6)'\n                }}\n                animate={{\n                  boxShadow: [\n                    '0 0 20px rgba(255, 255, 0, 0.6)',\n                    '0 0 35px rgba(255, 255, 0, 0.9)',\n                    '0 0 20px rgba(255, 255, 0, 0.6)'\n                  ]\n                }}\n                transition={{ duration: 1.5, repeat: Infinity }}\n              />\n              <div>\n                <div className=\"text-sm font-semibold text-yellow-300\">Comparing</div>\n                <div className=\"text-xs text-yellow-400/70\">Active</div>\n              </div>\n            </motion.div>\n\n            {/* Swapping State */}\n            <motion.div\n              className=\"flex items-center gap-3 p-3 bg-gray-800/50 rounded-lg border border-red-700/50 hover:border-red-600/50 transition-all duration-300\"\n              whileHover={{ scale: 1.05 }}\n            >\n              <motion.div\n                className=\"w-4 h-12 bg-gradient-to-t from-red-500 to-pink-400 rounded-sm\"\n                style={{\n                  boxShadow: '0 0 20px rgba(255, 0, 100, 0.6)'\n                }}\n                animate={{\n                  boxShadow: [\n                    '0 0 20px rgba(255, 0, 100, 0.6)',\n                    '0 0 35px rgba(255, 0, 100, 0.9)',\n                    '0 0 20px rgba(255, 0, 100, 0.6)'\n                  ],\n                  x: [-2, 2, -2]\n                }}\n                transition={{ duration: 1, repeat: Infinity }}\n              />\n              <div>\n                <div className=\"text-sm font-semibold text-red-300\">Swapping</div>\n                <div className=\"text-xs text-red-400/70\">Moving</div>\n              </div>\n            </motion.div>\n\n            {/* Sorted State */}\n            <motion.div\n              className=\"flex items-center gap-3 p-3 bg-gray-800/50 rounded-lg border border-green-700/50 hover:border-green-600/50 transition-all duration-300\"\n              whileHover={{ scale: 1.05 }}\n            >\n              <motion.div\n                className=\"w-4 h-12 bg-gradient-to-t from-green-500 to-emerald-300 rounded-sm\"\n                style={{\n                  boxShadow: '0 0 20px rgba(0, 255, 100, 0.6)'\n                }}\n                animate={{\n                  boxShadow: [\n                    '0 0 20px rgba(0, 255, 100, 0.6)',\n                    '0 0 30px rgba(0, 255, 100, 0.8)',\n                    '0 0 20px rgba(0, 255, 100, 0.6)'\n                  ]\n                }}\n                transition={{ duration: 2, repeat: Infinity }}\n              />\n              <div>\n                <div className=\"text-sm font-semibold text-green-300\">Sorted</div>\n                <div className=\"text-xs text-green-400/70\">Complete</div>\n              </div>\n            </motion.div>\n          </div>\n\n          {/* Additional Info */}\n          <motion.div\n            className=\"mt-4 pt-4 border-t border-cyan-500/20\"\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            transition={{ delay: 0.6 }}\n          >\n            <div className=\"flex items-center justify-center gap-6 text-xs text-gray-400\">\n              <div className=\"flex items-center gap-2\">\n                <motion.div\n                  className=\"w-2 h-2 bg-cyan-400 rounded-full\"\n                  animate={{\n                    boxShadow: [\n                      '0 0 5px rgba(0, 255, 255, 0.5)',\n                      '0 0 15px rgba(0, 255, 255, 1)',\n                      '0 0 5px rgba(0, 255, 255, 0.5)'\n                    ]\n                  }}\n                  transition={{ duration: 2, repeat: Infinity }}\n                />\n                <span>Glowing effects indicate active operations</span>\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <motion.div\n                  className=\"w-2 h-2 bg-purple-400 rounded-full\"\n                  animate={{\n                    scale: [1, 1.3, 1]\n                  }}\n                  transition={{ duration: 1.5, repeat: Infinity }}\n                />\n                <span>Bar height represents element value</span>\n              </div>\n            </div>\n          </motion.div>\n        </motion.div>\n      </div>\n    </div>\n  );\n}",
    "error": null,
    "elapsed_time": 94.37146973609924,
    "success": true
  }
}