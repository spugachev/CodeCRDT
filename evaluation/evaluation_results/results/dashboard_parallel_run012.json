{
  "prompt_id": "dashboard",
  "prompt_name": "Analytics Dashboard",
  "mode": "parallel",
  "run_number": 12,
  "timestamp": "2025-10-14T01:52:17.118528",
  "response_time": 79.36140608787537,
  "total_tokens": null,
  "response_content": "import { useState, useCallback } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Moon, Sun, RefreshCw } from 'lucide-react';\nimport { Badge } from '@/components/ui/badge';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\nimport { ArrowUpDown, ChevronLeft, ChevronRight } from 'lucide-react';\nimport { PieChart, Pie, Cell, ResponsiveContainer, Legend, Tooltip as RechartsTooltip } from 'recharts';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\nimport { motion } from 'framer-motion';\nimport { CheckCircle, AlertCircle, Info, Clock } from 'lucide-react';\nimport { cn } from '@/lib/utils';\nimport { AlertCircle, AlertTriangle, Info, CheckCircle } from 'lucide-react';\n\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';\nimport { Progress } from '@/components/ui/progress';\nimport { TrendingUp, TrendingDown, DollarSign, Users, ShoppingCart, Target } from 'lucide-react';\nimport { motion } from 'framer-motion';\n\n\ninterface MetricData {\n  id: string;\n  label: string;\n  value: number;\n  change: number;\n  trend: 'up' | 'down';\n}\n\ninterface ChartDataPoint {\n  date: string;\n  revenue: number;\n  users: number;\n  orders: number;\n}\n\ninterface TableRow {\n  id: string;\n  product: string;\n  sales: number;\n  revenue: number;\n  status: 'active' | 'pending' | 'inactive';\n}\ninterface ActivityItem {\n  id: string;\n  type: 'success' | 'warning' | 'info' | 'pending';\n  message: string;\n  timestamp: string;\n}\n\nconst mockActivityData: ActivityItem[] = [\n  { id: '1', type: 'success', message: 'New order #1234 completed', timestamp: '2 min ago' },\n  { id: '2', type: 'info', message: 'User John Doe registered', timestamp: '15 min ago' },\n  { id: '3', type: 'success', message: 'Payment received $450', timestamp: '23 min ago' },\n  { id: '4', type: 'warning', message: 'Low stock alert: Premium Plan', timestamp: '1 hour ago' },\n  { id: '5', type: 'pending', message: 'Order #1235 pending review', timestamp: '2 hours ago' },\n  { id: '6', type: 'success', message: 'Refund processed $120', timestamp: '3 hours ago' },\n  { id: '7', type: 'info', message: 'System backup completed', timestamp: '5 hours ago' }\n];\n\nconst mockMetrics: MetricData[] = [\n  { id: '1', label: 'Total Revenue', value: 45231, change: 12.5, trend: 'up' },\n  { id: '2', label: 'Active Users', value: 2350, change: 8.2, trend: 'up' },\n  { id: '3', label: 'Total Orders', value: 1543, change: -3.1, trend: 'down' },\n  { id: '4', label: 'Conversion Rate', value: 3.24, change: 5.7, trend: 'up' }\n];\n\nconst mockChartData: ChartDataPoint[] = [\n  { date: '2024-01-01', revenue: 12000, users: 450, orders: 230 },\n  { date: '2024-01-02', revenue: 15000, users: 520, orders: 280 },\n  { date: '2024-01-03', revenue: 13500, users: 490, orders: 250 },\n  { date: '2024-01-04', revenue: 18000, users: 610, orders: 320 },\n  { date: '2024-01-05', revenue: 16500, users: 580, orders: 295 },\n  { date: '2024-01-06', revenue: 20000, users: 680, orders: 350 },\n  { date: '2024-01-07', revenue: 22000, users: 720, orders: 380 }\n];\n\nconst mockTableData: TableRow[] = [\n  { id: '1', product: 'Premium Plan', sales: 234, revenue: 23400, status: 'active' },\n  { id: '2', product: 'Basic Plan', sales: 567, revenue: 11340, status: 'active' },\n  { id: '3', product: 'Enterprise Plan', sales: 89, revenue: 44500, status: 'active' },\n  { id: '4', product: 'Starter Plan', sales: 432, revenue: 4320, status: 'pending' },\n  { id: '5', product: 'Pro Plan', sales: 156, revenue: 15600, status: 'inactive' }\n];\ninterface Alert {\n  id: string;\n  message: string;\n  severity: 'info' | 'warning' | 'error' | 'success';\n  timestamp: string;\n}\n\nconst mockAlerts: Alert[] = [\n  { id: '1', message: 'Server response time increased by 15%', severity: 'warning', timestamp: '2 min ago' },\n  { id: '2', message: 'New user milestone reached: 2,500 users', severity: 'success', timestamp: '15 min ago' },\n  { id: '3', message: 'Database backup completed successfully', severity: 'info', timestamp: '1 hour ago' },\n  { id: '4', message: 'Payment gateway experiencing delays', severity: 'error', timestamp: '2 hours ago' },\n  { id: '5', message: 'System update scheduled for tonight', severity: 'info', timestamp: '3 hours ago' }\n];\ninterface QuickStat {\n  id: string;\n  label: string;\n  value: number;\n  target: number;\n  percentage: number;\n  color: string;\n}\n\nconst mockQuickStats: QuickStat[] = [\n  { id: '1', label: 'Daily Goal', value: 18500, target: 25000, percentage: 74, color: 'bg-blue-500' },\n  { id: '2', label: 'Weekly Target', value: 89000, target: 100000, percentage: 89, color: 'bg-green-500' },\n  { id: '3', label: 'Monthly Quota', value: 245000, target: 350000, percentage: 70, color: 'bg-purple-500' },\n  { id: '4', label: 'Customer Satisfaction', value: 92, target: 100, percentage: 92, color: 'bg-yellow-500' }\n];\n\nconst mockPieData = [\n  { name: 'Premium Plan', value: 23400, color: '#3b82f6' },\n  { name: 'Basic Plan', value: 11340, color: '#10b981' },\n  { name: 'Enterprise Plan', value: 44500, color: '#8b5cf6' },\n  { name: 'Starter Plan', value: 4320, color: '#f59e0b' },\n  { name: 'Pro Plan', value: 15600, color: '#ef4444' }\n];\n\nconst getMetricIcon = (label: string) => {\n  switch (label) {\n    case 'Total Revenue':\n      return DollarSign;\n    case 'Active Users':\n      return Users;\n    case 'Total Orders':\n      return ShoppingCart;\n    case 'Conversion Rate':\n      return Target;\n    default:\n      return DollarSign;\n  }\n};\n\nconst formatMetricValue = (label: string, value: number) => {\n  if (label === 'Total Revenue') {\n    return `$${value.toLocaleString()}`;\n  } else if (label === 'Conversion Rate') {\n    return `${value}%`;\n  }\n  return value.toLocaleString();\n};\n\nexport default function AnalyticsDashboard() {\n  const [isDarkMode, setIsDarkMode] = useState(false);\n  const [metrics, setMetrics] = useState<MetricData[]>(mockMetrics);\n  const [chartData, setChartData] = useState<ChartDataPoint[]>(mockChartData);\n  const [tableData, setTableData] = useState<TableRow[]>(mockTableData);\n  const [isRefreshing, setIsRefreshing] = useState(false);\n  const [sortField, setSortField] = useState<keyof TableRow>('revenue');\n  const [sortDirection, setSortDirection] = useState<'asc' | 'desc'>('desc');\n  const [currentPage, setCurrentPage] = useState(1);\n  const itemsPerPage = 3;\n\n  const handleSort = useCallback((field: keyof TableRow) => {\n    if (sortField === field) {\n      setSortDirection(prev => prev === 'asc' ? 'desc' : 'asc');\n    } else {\n      setSortField(field);\n      setSortDirection('desc');\n    }\n  }, [sortField]);\n\n  const sortedTableData = [...tableData].sort((a, b) => {\n    const aValue = a[sortField];\n    const bValue = b[sortField];\n    \n    if (typeof aValue === 'number' && typeof bValue === 'number') {\n      return sortDirection === 'asc' ? aValue - bValue : bValue - aValue;\n    }\n    \n    if (typeof aValue === 'string' && typeof bValue === 'string') {\n      return sortDirection === 'asc' \n        ? aValue.localeCompare(bValue) \n        : bValue.localeCompare(aValue);\n    }\n    \n    return 0;\n  });\n\n  const totalPages = Math.ceil(sortedTableData.length / itemsPerPage);\n  const paginatedData = sortedTableData.slice(\n    (currentPage - 1) * itemsPerPage,\n    currentPage * itemsPerPage\n  );\n\n  const handlePreviousPage = useCallback(() => {\n    setCurrentPage(prev => Math.max(1, prev - 1));\n  }, []);\n\n  const handleNextPage = useCallback(() => {\n    setCurrentPage(prev => Math.min(totalPages, prev + 1));\n  }, [totalPages]);\n  const maxUsers = Math.max(...chartData.map(d => d.users));\n  const minUsers = Math.min(...chartData.map(d => d.users));\n\n  const toggleDarkMode = useCallback(() => {\n    setIsDarkMode(prev => !prev);\n  }, []);\n\n  const handleRefresh = useCallback(() => {\n    setIsRefreshing(true);\n    \n    setTimeout(() => {\n      // Generate updated mock metrics with random variations\n      const updatedMetrics = mockMetrics.map(metric => ({\n        ...metric,\n        value: metric.value + Math.floor(Math.random() * 200 - 100),\n        change: parseFloat((Math.random() * 20 - 5).toFixed(1)),\n        trend: Math.random() > 0.5 ? 'up' : 'down' as 'up' | 'down'\n      }));\n\n      // Generate updated chart data with random variations\n      const updatedChartData = mockChartData.map(point => ({\n        ...point,\n        revenue: point.revenue + Math.floor(Math.random() * 4000 - 2000),\n        users: point.users + Math.floor(Math.random() * 100 - 50),\n        orders: point.orders + Math.floor(Math.random() * 50 - 25)\n      }));\n\n      // Generate updated table data with random variations\n      const updatedTableData = mockTableData.map(row => ({\n        ...row,\n        sales: row.sales + Math.floor(Math.random() * 40 - 20),\n        revenue: row.revenue + Math.floor(Math.random() * 2000 - 1000)\n      }));\n\n      setMetrics(updatedMetrics);\n      setChartData(updatedChartData);\n      setTableData(updatedTableData);\n      setIsRefreshing(false);\n    }, 1500);\n  }, []);\n\n  return (\n    <div className={`min-h-screen ${isDarkMode ? 'dark bg-gray-900' : 'bg-gray-50'}`}>\n      <div className=\"container mx-auto p-4 md:p-6 lg:p-8\">\n        <div className=\"flex flex-col md:flex-row justify-between items-start md:items-center gap-4 mb-8\">\n          <div>\n            <h1 className={`text-3xl md:text-4xl font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n              Analytics Dashboard\n            </h1>\n            <p className={`mt-2 ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n              Real-time insights and performance metrics\n            </p>\n          </div>\n          \n          <div className=\"flex gap-2\">\n            <Button\n              variant=\"outline\"\n              size=\"icon\"\n              onClick={toggleDarkMode}\n              className={isDarkMode ? 'border-gray-700' : ''}\n            >\n              {isDarkMode ? <Sun className=\"h-5 w-5\" /> : <Moon className=\"h-5 w-5\" />}\n            </Button>\n            \n            <Button\n              variant=\"outline\"\n              onClick={handleRefresh}\n              disabled={isRefreshing}\n              className={isDarkMode ? 'border-gray-700' : ''}\n            >\n              <RefreshCw className={`h-4 w-4 mr-2 ${isRefreshing ? 'animate-spin' : ''}`} />\n              Refresh\n            </Button>\n          </div>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 md:gap-6 mb-8\">\n          {metrics.map((metric, index) => {\n            const IconComponent = getMetricIcon(metric.label);\n            const TrendIcon = metric.trend === 'up' ? TrendingUp : TrendingDown;\n            \n            return (\n              <motion.div\n                key={metric.id}\n                initial={{ opacity: 0, y: 20 }}\n                animate={{ opacity: 1, y: 0 }}\n                transition={{ duration: 0.4, delay: index * 0.1 }}\n              >\n                <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n                  <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                    <CardTitle className={`text-sm font-medium ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                      {metric.label}\n                    </CardTitle>\n                    <div className={`p-2 rounded-lg ${isDarkMode ? 'bg-gray-700' : 'bg-gray-100'}`}>\n                      <IconComponent className={`h-4 w-4 ${isDarkMode ? 'text-gray-300' : 'text-gray-600'}`} />\n                    </div>\n                  </CardHeader>\n                  <CardContent>\n                    <div className={`text-2xl font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                      {formatMetricValue(metric.label, metric.value)}\n                    </div>\n                    <div className=\"flex items-center mt-2\">\n                      <TrendIcon \n                        className={`h-4 w-4 mr-1 ${\n                          metric.trend === 'up' ? 'text-green-500' : 'text-red-500'\n                        }`} \n                      />\n                      <span \n                        className={`text-sm font-medium ${\n                          metric.trend === 'up' ? 'text-green-500' : 'text-red-500'\n                        }`}\n                      >\n                        {Math.abs(metric.change)}%\n                      </span>\n                      <span className={`text-sm ml-1 ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                        vs last period\n                      </span>\n                    </div>\n                  </CardContent>\n                </Card>\n              </motion.div>\n            );\n          })}\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-4 md:gap-6 mb-8\">\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Revenue Overview</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Daily revenue trends\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <ResponsiveContainer width=\"100%\" height={300}>\n                <LineChart data={chartData}>\n                  <CartesianGrid \n                    strokeDasharray=\"3 3\" \n                    stroke={isDarkMode ? '#374151' : '#e5e7eb'} \n                  />\n                  <XAxis \n                    dataKey=\"date\" \n                    stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                    tick={{ fill: isDarkMode ? '#9ca3af' : '#6b7280' }}\n                    tickFormatter={(value) => new Date(value).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n                  />\n                  <YAxis \n                    stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                    tick={{ fill: isDarkMode ? '#9ca3af' : '#6b7280' }}\n                    tickFormatter={(value) => `$${(value / 1000).toFixed(0)}k`}\n                  />\n                  <Tooltip \n                    contentStyle={{\n                      backgroundColor: isDarkMode ? '#1f2937' : '#ffffff',\n                      border: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\n                      borderRadius: '6px',\n                      color: isDarkMode ? '#ffffff' : '#000000'\n                    }}\n                    labelStyle={{ color: isDarkMode ? '#9ca3af' : '#6b7280' }}\n                    formatter={(value: number) => [`$${value.toLocaleString()}`, 'Revenue']}\n                    labelFormatter={(label) => new Date(label).toLocaleDateString('en-US', { month: 'long', day: 'numeric', year: 'numeric' })}\n                  />\n                  <Line \n                    type=\"monotone\" \n                    dataKey=\"revenue\" \n                    stroke=\"#3b82f6\" \n                    strokeWidth={2}\n                    dot={{ fill: '#3b82f6', r: 4 }}\n                    activeDot={{ r: 6 }}\n                  />\n                </LineChart>\n              </ResponsiveContainer>\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>User Activity</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Active users over time\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"relative h-64 w-full\">\n                <svg className=\"w-full h-full\" viewBox=\"0 0 700 256\" preserveAspectRatio=\"none\">\n                  <defs>\n                    <linearGradient id=\"userGradient\" x1=\"0%\" y1=\"0%\" x2=\"0%\" y2=\"100%\">\n                      <stop offset=\"0%\" stopColor=\"#3b82f6\" stopOpacity=\"0.4\" />\n                      <stop offset=\"100%\" stopColor=\"#3b82f6\" stopOpacity=\"0.05\" />\n                    </linearGradient>\n                  </defs>\n                  \n                  {/* Area Path */}\n                  <motion.path\n                    d={(() => {\n                      const points = chartData.map((d, i) => {\n                        const x = (i / (chartData.length - 1)) * 700;\n                        const y = 256 - ((d.users - minUsers) / (maxUsers - minUsers)) * 200 - 28;\n                        return `${i === 0 ? 'M' : 'L'} ${x},${y}`;\n                      }).join(' ');\n                      return `${points} L 700,256 L 0,256 Z`;\n                    })()}\n                    fill=\"url(#userGradient)\"\n                    initial={{ opacity: 0 }}\n                    animate={{ opacity: 1 }}\n                    transition={{ duration: 0.8 }}\n                  />\n                  \n                  {/* Line Path */}\n                  <motion.path\n                    d={chartData.map((d, i) => {\n                      const x = (i / (chartData.length - 1)) * 700;\n                      const y = 256 - ((d.users - minUsers) / (maxUsers - minUsers)) * 200 - 28;\n                      return `${i === 0 ? 'M' : 'L'} ${x},${y}`;\n                    }).join(' ')}\n                    fill=\"none\"\n                    stroke=\"#3b82f6\"\n                    strokeWidth=\"3\"\n                    strokeLinecap=\"round\"\n                    strokeLinejoin=\"round\"\n                    initial={{ pathLength: 0 }}\n                    animate={{ pathLength: 1 }}\n                    transition={{ duration: 1.5, ease: \"easeInOut\" }}\n                  />\n                  \n                  {/* Data Points */}\n                  {chartData.map((d, i) => {\n                    const x = (i / (chartData.length - 1)) * 700;\n                    const y = 256 - ((d.users - minUsers) / (maxUsers - minUsers)) * 200 - 28;\n                    return (\n                      <motion.g key={i}>\n                        <motion.circle\n                          cx={x}\n                          cy={y}\n                          r=\"5\"\n                          fill=\"#3b82f6\"\n                          stroke={isDarkMode ? '#1f2937' : '#ffffff'}\n                          strokeWidth=\"2\"\n                          initial={{ scale: 0, opacity: 0 }}\n                          animate={{ scale: 1, opacity: 1 }}\n                          transition={{ delay: 0.1 * i, duration: 0.3 }}\n                          className=\"cursor-pointer hover:r-7 transition-all\"\n                        />\n                        <title>{`${d.date}: ${d.users} users`}</title>\n                      </motion.g>\n                    );\n                  })}\n                </svg>\n                \n                {/* X-axis Labels */}\n                <div className=\"flex justify-between mt-2 px-1\">\n                  {chartData.map((d, i) => (\n                    <motion.span\n                      key={i}\n                      className={`text-xs ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}\n                      initial={{ opacity: 0, y: -10 }}\n                      animate={{ opacity: 1, y: 0 }}\n                      transition={{ delay: 0.2 + 0.1 * i }}\n                    >\n                      {new Date(d.date).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n                    </motion.span>\n                  ))}\n                </div>\n                \n                {/* Y-axis Labels */}\n                <div className=\"absolute left-0 top-0 h-64 flex flex-col justify-between -ml-12\">\n                  {[maxUsers, Math.round((maxUsers + minUsers) / 2), minUsers].map((val, i) => (\n                    <motion.span\n                      key={i}\n                      className={`text-xs ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}\n                      initial={{ opacity: 0, x: -10 }}\n                      animate={{ opacity: 1, x: 0 }}\n                      transition={{ delay: 0.3 + 0.1 * i }}\n                    >\n                      {val}\n                    </motion.span>\n                  ))}\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-4 md:gap-6 mb-8\">\n          <Card className={`lg:col-span-2 ${isDarkMode ? 'bg-gray-800 border-gray-700' : ''}`}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Performance Metrics</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Combined view of key metrics\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <ResponsiveContainer width=\"100%\" height={300}>\n                <LineChart data={chartData}>\n                  <CartesianGrid \n                    strokeDasharray=\"3 3\" \n                    stroke={isDarkMode ? '#374151' : '#e5e7eb'} \n                  />\n                  <XAxis \n                    dataKey=\"date\" \n                    stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                    tick={{ fill: isDarkMode ? '#9ca3af' : '#6b7280' }}\n                    tickFormatter={(value) => new Date(value).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n                  />\n                  <YAxis \n                    stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                    tick={{ fill: isDarkMode ? '#9ca3af' : '#6b7280' }}\n                  />\n                  <Tooltip \n                    contentStyle={{\n                      backgroundColor: isDarkMode ? '#1f2937' : '#ffffff',\n                      border: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\n                      borderRadius: '6px',\n                      color: isDarkMode ? '#f3f4f6' : '#111827'\n                    }}\n                    labelFormatter={(value) => new Date(value).toLocaleDateString('en-US', { month: 'long', day: 'numeric', year: 'numeric' })}\n                  />\n                  <Legend \n                    wrapperStyle={{\n                      color: isDarkMode ? '#f3f4f6' : '#111827'\n                    }}\n                  />\n                  <Line \n                    type=\"monotone\" \n                    dataKey=\"revenue\" \n                    stroke=\"#3b82f6\" \n                    strokeWidth={2}\n                    dot={{ fill: '#3b82f6', r: 4 }}\n                    activeDot={{ r: 6 }}\n                    name=\"Revenue ($)\"\n                  />\n                  <Line \n                    type=\"monotone\" \n                    dataKey=\"users\" \n                    stroke=\"#10b981\" \n                    strokeWidth={2}\n                    dot={{ fill: '#10b981', r: 4 }}\n                    activeDot={{ r: 6 }}\n                    name=\"Users\"\n                  />\n                  <Line \n                    type=\"monotone\" \n                    dataKey=\"orders\" \n                    stroke=\"#f59e0b\" \n                    strokeWidth={2}\n                    dot={{ fill: '#f59e0b', r: 4 }}\n                    activeDot={{ r: 6 }}\n                    name=\"Orders\"\n                  />\n                </LineChart>\n              </ResponsiveContainer>\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Distribution</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Sales by category\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"h-[300px]\">\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <PieChart>\n                    <Pie\n                      data={mockPieData}\n                      cx=\"50%\"\n                      cy=\"50%\"\n                      labelLine={false}\n                      label={({ name, percent }) => `${(percent * 100).toFixed(0)}%`}\n                      outerRadius={80}\n                      fill=\"#8884d8\"\n                      dataKey=\"value\"\n                      animationBegin={0}\n                      animationDuration={800}\n                    >\n                      {mockPieData.map((entry, index) => (\n                        <Cell key={`cell-${index}`} fill={entry.color} />\n                      ))}\n                    </Pie>\n                    <RechartsTooltip\n                      contentStyle={{\n                        backgroundColor: isDarkMode ? '#1f2937' : '#ffffff',\n                        border: isDarkMode ? '1px solid #374151' : '1px solid #e5e7eb',\n                        borderRadius: '6px',\n                        color: isDarkMode ? '#ffffff' : '#000000'\n                      }}\n                      formatter={(value: number) => `$${value.toLocaleString()}`}\n                    />\n                    <Legend\n                      verticalAlign=\"bottom\"\n                      height={36}\n                      iconType=\"circle\"\n                      formatter={(value) => (\n                        <span className={isDarkMode ? 'text-gray-300' : 'text-gray-700'}>\n                          {value}\n                        </span>\n                      )}\n                    />\n                  </PieChart>\n                </ResponsiveContainer>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n          <CardHeader>\n            <CardTitle className={isDarkMode ? 'text-white' : ''}>Top Products</CardTitle>\n            <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n              Best performing products by revenue\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              <div className=\"rounded-md border\">\n                <Table>\n                  <TableHeader>\n                    <TableRow className={isDarkMode ? 'border-gray-700' : ''}>\n                      <TableHead className={isDarkMode ? 'text-gray-300' : ''}>\n                        <Button\n                          variant=\"ghost\"\n                          onClick={() => handleSort('product')}\n                          className={cn(\n                            \"h-8 px-2 lg:px-3\",\n                            isDarkMode && \"hover:bg-gray-700\"\n                          )}\n                        >\n                          Product\n                          <ArrowUpDown className=\"ml-2 h-4 w-4\" />\n                        </Button>\n                      </TableHead>\n                      <TableHead className={isDarkMode ? 'text-gray-300' : ''}>\n                        <Button\n                          variant=\"ghost\"\n                          onClick={() => handleSort('sales')}\n                          className={cn(\n                            \"h-8 px-2 lg:px-3\",\n                            isDarkMode && \"hover:bg-gray-700\"\n                          )}\n                        >\n                          Sales\n                          <ArrowUpDown className=\"ml-2 h-4 w-4\" />\n                        </Button>\n                      </TableHead>\n                      <TableHead className={isDarkMode ? 'text-gray-300' : ''}>\n                        <Button\n                          variant=\"ghost\"\n                          onClick={() => handleSort('revenue')}\n                          className={cn(\n                            \"h-8 px-2 lg:px-3\",\n                            isDarkMode && \"hover:bg-gray-700\"\n                          )}\n                        >\n                          Revenue\n                          <ArrowUpDown className=\"ml-2 h-4 w-4\" />\n                        </Button>\n                      </TableHead>\n                      <TableHead className={isDarkMode ? 'text-gray-300' : ''}>\n                        <Button\n                          variant=\"ghost\"\n                          onClick={() => handleSort('status')}\n                          className={cn(\n                            \"h-8 px-2 lg:px-3\",\n                            isDarkMode && \"hover:bg-gray-700\"\n                          )}\n                        >\n                          Status\n                          <ArrowUpDown className=\"ml-2 h-4 w-4\" />\n                        </Button>\n                      </TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {paginatedData.map((row, index) => (\n                      <motion.tr\n                        key={row.id}\n                        initial={{ opacity: 0, y: 10 }}\n                        animate={{ opacity: 1, y: 0 }}\n                        transition={{ delay: index * 0.05 }}\n                        className={cn(\n                          \"border-b transition-colors\",\n                          isDarkMode ? \"border-gray-700 hover:bg-gray-700/50\" : \"hover:bg-gray-50\"\n                        )}\n                      >\n                        <TableCell className={cn(\n                          \"font-medium\",\n                          isDarkMode ? \"text-gray-200\" : \"text-gray-900\"\n                        )}>\n                          {row.product}\n                        </TableCell>\n                        <TableCell className={isDarkMode ? \"text-gray-300\" : \"text-gray-700\"}>\n                          {row.sales.toLocaleString()}\n                        </TableCell>\n                        <TableCell className={isDarkMode ? \"text-gray-300\" : \"text-gray-700\"}>\n                          ${row.revenue.toLocaleString()}\n                        </TableCell>\n                        <TableCell>\n                          <Badge\n                            variant={\n                              row.status === 'active' \n                                ? 'default' \n                                : row.status === 'pending' \n                                ? 'secondary' \n                                : 'outline'\n                            }\n                            className={cn(\n                              row.status === 'active' && \"bg-green-500 hover:bg-green-600\",\n                              row.status === 'pending' && \"bg-yellow-500 hover:bg-yellow-600\",\n                              row.status === 'inactive' && isDarkMode && \"border-gray-600 text-gray-400\"\n                            )}\n                          >\n                            {row.status.charAt(0).toUpperCase() + row.status.slice(1)}\n                          </Badge>\n                        </TableCell>\n                      </motion.tr>\n                    ))}\n                  </TableBody>\n                </Table>\n              </div>\n\n              <div className=\"flex items-center justify-between\">\n                <p className={cn(\n                  \"text-sm\",\n                  isDarkMode ? \"text-gray-400\" : \"text-gray-600\"\n                )}>\n                  Showing {((currentPage - 1) * itemsPerPage) + 1} to {Math.min(currentPage * itemsPerPage, sortedTableData.length)} of {sortedTableData.length} products\n                </p>\n                \n                <div className=\"flex items-center gap-2\">\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={handlePreviousPage}\n                    disabled={currentPage === 1}\n                    className={cn(\n                      isDarkMode && \"border-gray-700 hover:bg-gray-700\"\n                    )}\n                  >\n                    <ChevronLeft className=\"h-4 w-4 mr-1\" />\n                    Previous\n                  </Button>\n                  \n                  <span className={cn(\n                    \"text-sm font-medium\",\n                    isDarkMode ? \"text-gray-300\" : \"text-gray-700\"\n                  )}>\n                    Page {currentPage} of {totalPages}\n                  </span>\n                  \n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={handleNextPage}\n                    disabled={currentPage === totalPages}\n                    className={cn(\n                      isDarkMode && \"border-gray-700 hover:bg-gray-700\"\n                    )}\n                  >\n                    Next\n                    <ChevronRight className=\"h-4 w-4 ml-1\" />\n                  </Button>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 md:gap-6 mt-8\">\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Recent Activity</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"max-h-[400px] overflow-y-auto space-y-4 pr-2\">\n                {mockActivityData.map((activity, index) => {\n                  const getActivityIcon = () => {\n                    switch (activity.type) {\n                      case 'success':\n                        return <CheckCircle className=\"h-5 w-5 text-green-500\" />;\n                      case 'warning':\n                        return <AlertCircle className=\"h-5 w-5 text-yellow-500\" />;\n                      case 'info':\n                        return <Info className=\"h-5 w-5 text-blue-500\" />;\n                      case 'pending':\n                        return <Clock className=\"h-5 w-5 text-gray-500\" />;\n                      default:\n                        return <Info className=\"h-5 w-5 text-gray-500\" />;\n                    }\n                  };\n\n                  return (\n                    <motion.div\n                      key={activity.id}\n                      initial={{ opacity: 0, x: -20 }}\n                      animate={{ opacity: 1, x: 0 }}\n                      transition={{ delay: index * 0.05 }}\n                      className={`flex items-start gap-3 p-3 rounded-lg ${\n                        isDarkMode ? 'bg-gray-700/50 hover:bg-gray-700' : 'bg-gray-50 hover:bg-gray-100'\n                      } transition-colors`}\n                    >\n                      <div className=\"flex-shrink-0 mt-0.5\">\n                        {getActivityIcon()}\n                      </div>\n                      <div className=\"flex-1 min-w-0\">\n                        <p className={`text-sm ${isDarkMode ? 'text-gray-200' : 'text-gray-900'}`}>\n                          {activity.message}\n                        </p>\n                        <p className={`text-xs mt-1 ${isDarkMode ? 'text-gray-500' : 'text-gray-500'}`}>\n                          {activity.timestamp}\n                        </p>\n                      </div>\n                    </motion.div>\n                  );\n                })}\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Quick Stats</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {mockQuickStats.map((stat, index) => (\n                  <motion.div\n                    key={stat.id}\n                    initial={{ opacity: 0, x: -20 }}\n                    animate={{ opacity: 1, x: 0 }}\n                    transition={{ delay: index * 0.1 }}\n                    className={`p-4 rounded-lg ${isDarkMode ? 'bg-gray-700/50' : 'bg-gray-100'}`}\n                  >\n                    <div className=\"flex justify-between items-start mb-2\">\n                      <span className={`text-sm font-medium ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>\n                        {stat.label}\n                      </span>\n                      <span className={`text-lg font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                        {stat.percentage}%\n                      </span>\n                    </div>\n                    \n                    <Progress \n                      value={stat.percentage} \n                      className={`h-2 mb-2 ${isDarkMode ? 'bg-gray-600' : 'bg-gray-200'}`}\n                    />\n                    \n                    <div className=\"flex justify-between items-center text-xs\">\n                      <span className={isDarkMode ? 'text-gray-400' : 'text-gray-500'}>\n                        {stat.label === 'Customer Satisfaction' \n                          ? `${stat.value}%` \n                          : `$${stat.value.toLocaleString()}`}\n                      </span>\n                      <span className={isDarkMode ? 'text-gray-500' : 'text-gray-400'}>\n                        {stat.label === 'Customer Satisfaction' \n                          ? `Target: ${stat.target}%` \n                          : `Target: $${stat.target.toLocaleString()}`}\n                      </span>\n                    </div>\n                  </motion.div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Alerts</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-3\">\n                {mockAlerts.map((alert, index) => {\n                  const severityConfig = {\n                    info: { icon: Info, color: 'text-blue-500', bg: 'bg-blue-50 dark:bg-blue-900/20', border: 'border-blue-200 dark:border-blue-800' },\n                    warning: { icon: AlertTriangle, color: 'text-yellow-500', bg: 'bg-yellow-50 dark:bg-yellow-900/20', border: 'border-yellow-200 dark:border-yellow-800' },\n                    error: { icon: AlertCircle, color: 'text-red-500', bg: 'bg-red-50 dark:bg-red-900/20', border: 'border-red-200 dark:border-red-800' },\n                    success: { icon: CheckCircle, color: 'text-green-500', bg: 'bg-green-50 dark:bg-green-900/20', border: 'border-green-200 dark:border-green-800' }\n                  };\n\n                  const config = severityConfig[alert.severity];\n                  const Icon = config.icon;\n\n                  return (\n                    <motion.div\n                      key={alert.id}\n                      initial={{ opacity: 0, x: -20 }}\n                      animate={{ opacity: 1, x: 0 }}\n                      transition={{ delay: index * 0.1 }}\n                      className={`flex items-start gap-3 p-3 rounded-lg border ${config.bg} ${config.border}`}\n                    >\n                      <Icon className={`h-5 w-5 ${config.color} flex-shrink-0 mt-0.5`} />\n                      <div className=\"flex-1 min-w-0\">\n                        <p className={`text-sm ${isDarkMode ? 'text-gray-200' : 'text-gray-900'}`}>\n                          {alert.message}\n                        </p>\n                        <p className={`text-xs mt-1 ${isDarkMode ? 'text-gray-500' : 'text-gray-500'}`}>\n                          {alert.timestamp}\n                        </p>\n                      </div>\n                    </motion.div>\n                  );\n                })}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}",
  "error": null,
  "overall_score": 57,
  "code_quality_score": 15,
  "architecture_score": 12,
  "performance_score": 14,
  "accessibility_score": 16,
  "metadata": {
    "document_id": "eval_room_8475a077dfca",
    "prompt_category": "intermediate",
    "prompt_complexity": 6.0
  },
  "raw_response": {
    "document_id": "eval_room_8475a077dfca",
    "mode": "parallel",
    "prompt": "Generate an analytics dashboard page with charts, data tables, real-time updates, dark mode, and responsive design",
    "content": "import { useState, useCallback } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Moon, Sun, RefreshCw } from 'lucide-react';\nimport { Badge } from '@/components/ui/badge';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\nimport { ArrowUpDown, ChevronLeft, ChevronRight } from 'lucide-react';\nimport { PieChart, Pie, Cell, ResponsiveContainer, Legend, Tooltip as RechartsTooltip } from 'recharts';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\nimport { motion } from 'framer-motion';\nimport { CheckCircle, AlertCircle, Info, Clock } from 'lucide-react';\nimport { cn } from '@/lib/utils';\nimport { AlertCircle, AlertTriangle, Info, CheckCircle } from 'lucide-react';\n\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';\nimport { Progress } from '@/components/ui/progress';\nimport { TrendingUp, TrendingDown, DollarSign, Users, ShoppingCart, Target } from 'lucide-react';\nimport { motion } from 'framer-motion';\n\n\ninterface MetricData {\n  id: string;\n  label: string;\n  value: number;\n  change: number;\n  trend: 'up' | 'down';\n}\n\ninterface ChartDataPoint {\n  date: string;\n  revenue: number;\n  users: number;\n  orders: number;\n}\n\ninterface TableRow {\n  id: string;\n  product: string;\n  sales: number;\n  revenue: number;\n  status: 'active' | 'pending' | 'inactive';\n}\ninterface ActivityItem {\n  id: string;\n  type: 'success' | 'warning' | 'info' | 'pending';\n  message: string;\n  timestamp: string;\n}\n\nconst mockActivityData: ActivityItem[] = [\n  { id: '1', type: 'success', message: 'New order #1234 completed', timestamp: '2 min ago' },\n  { id: '2', type: 'info', message: 'User John Doe registered', timestamp: '15 min ago' },\n  { id: '3', type: 'success', message: 'Payment received $450', timestamp: '23 min ago' },\n  { id: '4', type: 'warning', message: 'Low stock alert: Premium Plan', timestamp: '1 hour ago' },\n  { id: '5', type: 'pending', message: 'Order #1235 pending review', timestamp: '2 hours ago' },\n  { id: '6', type: 'success', message: 'Refund processed $120', timestamp: '3 hours ago' },\n  { id: '7', type: 'info', message: 'System backup completed', timestamp: '5 hours ago' }\n];\n\nconst mockMetrics: MetricData[] = [\n  { id: '1', label: 'Total Revenue', value: 45231, change: 12.5, trend: 'up' },\n  { id: '2', label: 'Active Users', value: 2350, change: 8.2, trend: 'up' },\n  { id: '3', label: 'Total Orders', value: 1543, change: -3.1, trend: 'down' },\n  { id: '4', label: 'Conversion Rate', value: 3.24, change: 5.7, trend: 'up' }\n];\n\nconst mockChartData: ChartDataPoint[] = [\n  { date: '2024-01-01', revenue: 12000, users: 450, orders: 230 },\n  { date: '2024-01-02', revenue: 15000, users: 520, orders: 280 },\n  { date: '2024-01-03', revenue: 13500, users: 490, orders: 250 },\n  { date: '2024-01-04', revenue: 18000, users: 610, orders: 320 },\n  { date: '2024-01-05', revenue: 16500, users: 580, orders: 295 },\n  { date: '2024-01-06', revenue: 20000, users: 680, orders: 350 },\n  { date: '2024-01-07', revenue: 22000, users: 720, orders: 380 }\n];\n\nconst mockTableData: TableRow[] = [\n  { id: '1', product: 'Premium Plan', sales: 234, revenue: 23400, status: 'active' },\n  { id: '2', product: 'Basic Plan', sales: 567, revenue: 11340, status: 'active' },\n  { id: '3', product: 'Enterprise Plan', sales: 89, revenue: 44500, status: 'active' },\n  { id: '4', product: 'Starter Plan', sales: 432, revenue: 4320, status: 'pending' },\n  { id: '5', product: 'Pro Plan', sales: 156, revenue: 15600, status: 'inactive' }\n];\ninterface Alert {\n  id: string;\n  message: string;\n  severity: 'info' | 'warning' | 'error' | 'success';\n  timestamp: string;\n}\n\nconst mockAlerts: Alert[] = [\n  { id: '1', message: 'Server response time increased by 15%', severity: 'warning', timestamp: '2 min ago' },\n  { id: '2', message: 'New user milestone reached: 2,500 users', severity: 'success', timestamp: '15 min ago' },\n  { id: '3', message: 'Database backup completed successfully', severity: 'info', timestamp: '1 hour ago' },\n  { id: '4', message: 'Payment gateway experiencing delays', severity: 'error', timestamp: '2 hours ago' },\n  { id: '5', message: 'System update scheduled for tonight', severity: 'info', timestamp: '3 hours ago' }\n];\ninterface QuickStat {\n  id: string;\n  label: string;\n  value: number;\n  target: number;\n  percentage: number;\n  color: string;\n}\n\nconst mockQuickStats: QuickStat[] = [\n  { id: '1', label: 'Daily Goal', value: 18500, target: 25000, percentage: 74, color: 'bg-blue-500' },\n  { id: '2', label: 'Weekly Target', value: 89000, target: 100000, percentage: 89, color: 'bg-green-500' },\n  { id: '3', label: 'Monthly Quota', value: 245000, target: 350000, percentage: 70, color: 'bg-purple-500' },\n  { id: '4', label: 'Customer Satisfaction', value: 92, target: 100, percentage: 92, color: 'bg-yellow-500' }\n];\n\nconst mockPieData = [\n  { name: 'Premium Plan', value: 23400, color: '#3b82f6' },\n  { name: 'Basic Plan', value: 11340, color: '#10b981' },\n  { name: 'Enterprise Plan', value: 44500, color: '#8b5cf6' },\n  { name: 'Starter Plan', value: 4320, color: '#f59e0b' },\n  { name: 'Pro Plan', value: 15600, color: '#ef4444' }\n];\n\nconst getMetricIcon = (label: string) => {\n  switch (label) {\n    case 'Total Revenue':\n      return DollarSign;\n    case 'Active Users':\n      return Users;\n    case 'Total Orders':\n      return ShoppingCart;\n    case 'Conversion Rate':\n      return Target;\n    default:\n      return DollarSign;\n  }\n};\n\nconst formatMetricValue = (label: string, value: number) => {\n  if (label === 'Total Revenue') {\n    return `$${value.toLocaleString()}`;\n  } else if (label === 'Conversion Rate') {\n    return `${value}%`;\n  }\n  return value.toLocaleString();\n};\n\nexport default function AnalyticsDashboard() {\n  const [isDarkMode, setIsDarkMode] = useState(false);\n  const [metrics, setMetrics] = useState<MetricData[]>(mockMetrics);\n  const [chartData, setChartData] = useState<ChartDataPoint[]>(mockChartData);\n  const [tableData, setTableData] = useState<TableRow[]>(mockTableData);\n  const [isRefreshing, setIsRefreshing] = useState(false);\n  const [sortField, setSortField] = useState<keyof TableRow>('revenue');\n  const [sortDirection, setSortDirection] = useState<'asc' | 'desc'>('desc');\n  const [currentPage, setCurrentPage] = useState(1);\n  const itemsPerPage = 3;\n\n  const handleSort = useCallback((field: keyof TableRow) => {\n    if (sortField === field) {\n      setSortDirection(prev => prev === 'asc' ? 'desc' : 'asc');\n    } else {\n      setSortField(field);\n      setSortDirection('desc');\n    }\n  }, [sortField]);\n\n  const sortedTableData = [...tableData].sort((a, b) => {\n    const aValue = a[sortField];\n    const bValue = b[sortField];\n    \n    if (typeof aValue === 'number' && typeof bValue === 'number') {\n      return sortDirection === 'asc' ? aValue - bValue : bValue - aValue;\n    }\n    \n    if (typeof aValue === 'string' && typeof bValue === 'string') {\n      return sortDirection === 'asc' \n        ? aValue.localeCompare(bValue) \n        : bValue.localeCompare(aValue);\n    }\n    \n    return 0;\n  });\n\n  const totalPages = Math.ceil(sortedTableData.length / itemsPerPage);\n  const paginatedData = sortedTableData.slice(\n    (currentPage - 1) * itemsPerPage,\n    currentPage * itemsPerPage\n  );\n\n  const handlePreviousPage = useCallback(() => {\n    setCurrentPage(prev => Math.max(1, prev - 1));\n  }, []);\n\n  const handleNextPage = useCallback(() => {\n    setCurrentPage(prev => Math.min(totalPages, prev + 1));\n  }, [totalPages]);\n  const maxUsers = Math.max(...chartData.map(d => d.users));\n  const minUsers = Math.min(...chartData.map(d => d.users));\n\n  const toggleDarkMode = useCallback(() => {\n    setIsDarkMode(prev => !prev);\n  }, []);\n\n  const handleRefresh = useCallback(() => {\n    setIsRefreshing(true);\n    \n    setTimeout(() => {\n      // Generate updated mock metrics with random variations\n      const updatedMetrics = mockMetrics.map(metric => ({\n        ...metric,\n        value: metric.value + Math.floor(Math.random() * 200 - 100),\n        change: parseFloat((Math.random() * 20 - 5).toFixed(1)),\n        trend: Math.random() > 0.5 ? 'up' : 'down' as 'up' | 'down'\n      }));\n\n      // Generate updated chart data with random variations\n      const updatedChartData = mockChartData.map(point => ({\n        ...point,\n        revenue: point.revenue + Math.floor(Math.random() * 4000 - 2000),\n        users: point.users + Math.floor(Math.random() * 100 - 50),\n        orders: point.orders + Math.floor(Math.random() * 50 - 25)\n      }));\n\n      // Generate updated table data with random variations\n      const updatedTableData = mockTableData.map(row => ({\n        ...row,\n        sales: row.sales + Math.floor(Math.random() * 40 - 20),\n        revenue: row.revenue + Math.floor(Math.random() * 2000 - 1000)\n      }));\n\n      setMetrics(updatedMetrics);\n      setChartData(updatedChartData);\n      setTableData(updatedTableData);\n      setIsRefreshing(false);\n    }, 1500);\n  }, []);\n\n  return (\n    <div className={`min-h-screen ${isDarkMode ? 'dark bg-gray-900' : 'bg-gray-50'}`}>\n      <div className=\"container mx-auto p-4 md:p-6 lg:p-8\">\n        <div className=\"flex flex-col md:flex-row justify-between items-start md:items-center gap-4 mb-8\">\n          <div>\n            <h1 className={`text-3xl md:text-4xl font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n              Analytics Dashboard\n            </h1>\n            <p className={`mt-2 ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n              Real-time insights and performance metrics\n            </p>\n          </div>\n          \n          <div className=\"flex gap-2\">\n            <Button\n              variant=\"outline\"\n              size=\"icon\"\n              onClick={toggleDarkMode}\n              className={isDarkMode ? 'border-gray-700' : ''}\n            >\n              {isDarkMode ? <Sun className=\"h-5 w-5\" /> : <Moon className=\"h-5 w-5\" />}\n            </Button>\n            \n            <Button\n              variant=\"outline\"\n              onClick={handleRefresh}\n              disabled={isRefreshing}\n              className={isDarkMode ? 'border-gray-700' : ''}\n            >\n              <RefreshCw className={`h-4 w-4 mr-2 ${isRefreshing ? 'animate-spin' : ''}`} />\n              Refresh\n            </Button>\n          </div>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 md:gap-6 mb-8\">\n          {metrics.map((metric, index) => {\n            const IconComponent = getMetricIcon(metric.label);\n            const TrendIcon = metric.trend === 'up' ? TrendingUp : TrendingDown;\n            \n            return (\n              <motion.div\n                key={metric.id}\n                initial={{ opacity: 0, y: 20 }}\n                animate={{ opacity: 1, y: 0 }}\n                transition={{ duration: 0.4, delay: index * 0.1 }}\n              >\n                <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n                  <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                    <CardTitle className={`text-sm font-medium ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                      {metric.label}\n                    </CardTitle>\n                    <div className={`p-2 rounded-lg ${isDarkMode ? 'bg-gray-700' : 'bg-gray-100'}`}>\n                      <IconComponent className={`h-4 w-4 ${isDarkMode ? 'text-gray-300' : 'text-gray-600'}`} />\n                    </div>\n                  </CardHeader>\n                  <CardContent>\n                    <div className={`text-2xl font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                      {formatMetricValue(metric.label, metric.value)}\n                    </div>\n                    <div className=\"flex items-center mt-2\">\n                      <TrendIcon \n                        className={`h-4 w-4 mr-1 ${\n                          metric.trend === 'up' ? 'text-green-500' : 'text-red-500'\n                        }`} \n                      />\n                      <span \n                        className={`text-sm font-medium ${\n                          metric.trend === 'up' ? 'text-green-500' : 'text-red-500'\n                        }`}\n                      >\n                        {Math.abs(metric.change)}%\n                      </span>\n                      <span className={`text-sm ml-1 ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                        vs last period\n                      </span>\n                    </div>\n                  </CardContent>\n                </Card>\n              </motion.div>\n            );\n          })}\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-4 md:gap-6 mb-8\">\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Revenue Overview</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Daily revenue trends\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <ResponsiveContainer width=\"100%\" height={300}>\n                <LineChart data={chartData}>\n                  <CartesianGrid \n                    strokeDasharray=\"3 3\" \n                    stroke={isDarkMode ? '#374151' : '#e5e7eb'} \n                  />\n                  <XAxis \n                    dataKey=\"date\" \n                    stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                    tick={{ fill: isDarkMode ? '#9ca3af' : '#6b7280' }}\n                    tickFormatter={(value) => new Date(value).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n                  />\n                  <YAxis \n                    stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                    tick={{ fill: isDarkMode ? '#9ca3af' : '#6b7280' }}\n                    tickFormatter={(value) => `$${(value / 1000).toFixed(0)}k`}\n                  />\n                  <Tooltip \n                    contentStyle={{\n                      backgroundColor: isDarkMode ? '#1f2937' : '#ffffff',\n                      border: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\n                      borderRadius: '6px',\n                      color: isDarkMode ? '#ffffff' : '#000000'\n                    }}\n                    labelStyle={{ color: isDarkMode ? '#9ca3af' : '#6b7280' }}\n                    formatter={(value: number) => [`$${value.toLocaleString()}`, 'Revenue']}\n                    labelFormatter={(label) => new Date(label).toLocaleDateString('en-US', { month: 'long', day: 'numeric', year: 'numeric' })}\n                  />\n                  <Line \n                    type=\"monotone\" \n                    dataKey=\"revenue\" \n                    stroke=\"#3b82f6\" \n                    strokeWidth={2}\n                    dot={{ fill: '#3b82f6', r: 4 }}\n                    activeDot={{ r: 6 }}\n                  />\n                </LineChart>\n              </ResponsiveContainer>\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>User Activity</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Active users over time\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"relative h-64 w-full\">\n                <svg className=\"w-full h-full\" viewBox=\"0 0 700 256\" preserveAspectRatio=\"none\">\n                  <defs>\n                    <linearGradient id=\"userGradient\" x1=\"0%\" y1=\"0%\" x2=\"0%\" y2=\"100%\">\n                      <stop offset=\"0%\" stopColor=\"#3b82f6\" stopOpacity=\"0.4\" />\n                      <stop offset=\"100%\" stopColor=\"#3b82f6\" stopOpacity=\"0.05\" />\n                    </linearGradient>\n                  </defs>\n                  \n                  {/* Area Path */}\n                  <motion.path\n                    d={(() => {\n                      const points = chartData.map((d, i) => {\n                        const x = (i / (chartData.length - 1)) * 700;\n                        const y = 256 - ((d.users - minUsers) / (maxUsers - minUsers)) * 200 - 28;\n                        return `${i === 0 ? 'M' : 'L'} ${x},${y}`;\n                      }).join(' ');\n                      return `${points} L 700,256 L 0,256 Z`;\n                    })()}\n                    fill=\"url(#userGradient)\"\n                    initial={{ opacity: 0 }}\n                    animate={{ opacity: 1 }}\n                    transition={{ duration: 0.8 }}\n                  />\n                  \n                  {/* Line Path */}\n                  <motion.path\n                    d={chartData.map((d, i) => {\n                      const x = (i / (chartData.length - 1)) * 700;\n                      const y = 256 - ((d.users - minUsers) / (maxUsers - minUsers)) * 200 - 28;\n                      return `${i === 0 ? 'M' : 'L'} ${x},${y}`;\n                    }).join(' ')}\n                    fill=\"none\"\n                    stroke=\"#3b82f6\"\n                    strokeWidth=\"3\"\n                    strokeLinecap=\"round\"\n                    strokeLinejoin=\"round\"\n                    initial={{ pathLength: 0 }}\n                    animate={{ pathLength: 1 }}\n                    transition={{ duration: 1.5, ease: \"easeInOut\" }}\n                  />\n                  \n                  {/* Data Points */}\n                  {chartData.map((d, i) => {\n                    const x = (i / (chartData.length - 1)) * 700;\n                    const y = 256 - ((d.users - minUsers) / (maxUsers - minUsers)) * 200 - 28;\n                    return (\n                      <motion.g key={i}>\n                        <motion.circle\n                          cx={x}\n                          cy={y}\n                          r=\"5\"\n                          fill=\"#3b82f6\"\n                          stroke={isDarkMode ? '#1f2937' : '#ffffff'}\n                          strokeWidth=\"2\"\n                          initial={{ scale: 0, opacity: 0 }}\n                          animate={{ scale: 1, opacity: 1 }}\n                          transition={{ delay: 0.1 * i, duration: 0.3 }}\n                          className=\"cursor-pointer hover:r-7 transition-all\"\n                        />\n                        <title>{`${d.date}: ${d.users} users`}</title>\n                      </motion.g>\n                    );\n                  })}\n                </svg>\n                \n                {/* X-axis Labels */}\n                <div className=\"flex justify-between mt-2 px-1\">\n                  {chartData.map((d, i) => (\n                    <motion.span\n                      key={i}\n                      className={`text-xs ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}\n                      initial={{ opacity: 0, y: -10 }}\n                      animate={{ opacity: 1, y: 0 }}\n                      transition={{ delay: 0.2 + 0.1 * i }}\n                    >\n                      {new Date(d.date).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n                    </motion.span>\n                  ))}\n                </div>\n                \n                {/* Y-axis Labels */}\n                <div className=\"absolute left-0 top-0 h-64 flex flex-col justify-between -ml-12\">\n                  {[maxUsers, Math.round((maxUsers + minUsers) / 2), minUsers].map((val, i) => (\n                    <motion.span\n                      key={i}\n                      className={`text-xs ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}\n                      initial={{ opacity: 0, x: -10 }}\n                      animate={{ opacity: 1, x: 0 }}\n                      transition={{ delay: 0.3 + 0.1 * i }}\n                    >\n                      {val}\n                    </motion.span>\n                  ))}\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-4 md:gap-6 mb-8\">\n          <Card className={`lg:col-span-2 ${isDarkMode ? 'bg-gray-800 border-gray-700' : ''}`}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Performance Metrics</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Combined view of key metrics\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <ResponsiveContainer width=\"100%\" height={300}>\n                <LineChart data={chartData}>\n                  <CartesianGrid \n                    strokeDasharray=\"3 3\" \n                    stroke={isDarkMode ? '#374151' : '#e5e7eb'} \n                  />\n                  <XAxis \n                    dataKey=\"date\" \n                    stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                    tick={{ fill: isDarkMode ? '#9ca3af' : '#6b7280' }}\n                    tickFormatter={(value) => new Date(value).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n                  />\n                  <YAxis \n                    stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                    tick={{ fill: isDarkMode ? '#9ca3af' : '#6b7280' }}\n                  />\n                  <Tooltip \n                    contentStyle={{\n                      backgroundColor: isDarkMode ? '#1f2937' : '#ffffff',\n                      border: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\n                      borderRadius: '6px',\n                      color: isDarkMode ? '#f3f4f6' : '#111827'\n                    }}\n                    labelFormatter={(value) => new Date(value).toLocaleDateString('en-US', { month: 'long', day: 'numeric', year: 'numeric' })}\n                  />\n                  <Legend \n                    wrapperStyle={{\n                      color: isDarkMode ? '#f3f4f6' : '#111827'\n                    }}\n                  />\n                  <Line \n                    type=\"monotone\" \n                    dataKey=\"revenue\" \n                    stroke=\"#3b82f6\" \n                    strokeWidth={2}\n                    dot={{ fill: '#3b82f6', r: 4 }}\n                    activeDot={{ r: 6 }}\n                    name=\"Revenue ($)\"\n                  />\n                  <Line \n                    type=\"monotone\" \n                    dataKey=\"users\" \n                    stroke=\"#10b981\" \n                    strokeWidth={2}\n                    dot={{ fill: '#10b981', r: 4 }}\n                    activeDot={{ r: 6 }}\n                    name=\"Users\"\n                  />\n                  <Line \n                    type=\"monotone\" \n                    dataKey=\"orders\" \n                    stroke=\"#f59e0b\" \n                    strokeWidth={2}\n                    dot={{ fill: '#f59e0b', r: 4 }}\n                    activeDot={{ r: 6 }}\n                    name=\"Orders\"\n                  />\n                </LineChart>\n              </ResponsiveContainer>\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Distribution</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Sales by category\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"h-[300px]\">\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <PieChart>\n                    <Pie\n                      data={mockPieData}\n                      cx=\"50%\"\n                      cy=\"50%\"\n                      labelLine={false}\n                      label={({ name, percent }) => `${(percent * 100).toFixed(0)}%`}\n                      outerRadius={80}\n                      fill=\"#8884d8\"\n                      dataKey=\"value\"\n                      animationBegin={0}\n                      animationDuration={800}\n                    >\n                      {mockPieData.map((entry, index) => (\n                        <Cell key={`cell-${index}`} fill={entry.color} />\n                      ))}\n                    </Pie>\n                    <RechartsTooltip\n                      contentStyle={{\n                        backgroundColor: isDarkMode ? '#1f2937' : '#ffffff',\n                        border: isDarkMode ? '1px solid #374151' : '1px solid #e5e7eb',\n                        borderRadius: '6px',\n                        color: isDarkMode ? '#ffffff' : '#000000'\n                      }}\n                      formatter={(value: number) => `$${value.toLocaleString()}`}\n                    />\n                    <Legend\n                      verticalAlign=\"bottom\"\n                      height={36}\n                      iconType=\"circle\"\n                      formatter={(value) => (\n                        <span className={isDarkMode ? 'text-gray-300' : 'text-gray-700'}>\n                          {value}\n                        </span>\n                      )}\n                    />\n                  </PieChart>\n                </ResponsiveContainer>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n          <CardHeader>\n            <CardTitle className={isDarkMode ? 'text-white' : ''}>Top Products</CardTitle>\n            <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n              Best performing products by revenue\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              <div className=\"rounded-md border\">\n                <Table>\n                  <TableHeader>\n                    <TableRow className={isDarkMode ? 'border-gray-700' : ''}>\n                      <TableHead className={isDarkMode ? 'text-gray-300' : ''}>\n                        <Button\n                          variant=\"ghost\"\n                          onClick={() => handleSort('product')}\n                          className={cn(\n                            \"h-8 px-2 lg:px-3\",\n                            isDarkMode && \"hover:bg-gray-700\"\n                          )}\n                        >\n                          Product\n                          <ArrowUpDown className=\"ml-2 h-4 w-4\" />\n                        </Button>\n                      </TableHead>\n                      <TableHead className={isDarkMode ? 'text-gray-300' : ''}>\n                        <Button\n                          variant=\"ghost\"\n                          onClick={() => handleSort('sales')}\n                          className={cn(\n                            \"h-8 px-2 lg:px-3\",\n                            isDarkMode && \"hover:bg-gray-700\"\n                          )}\n                        >\n                          Sales\n                          <ArrowUpDown className=\"ml-2 h-4 w-4\" />\n                        </Button>\n                      </TableHead>\n                      <TableHead className={isDarkMode ? 'text-gray-300' : ''}>\n                        <Button\n                          variant=\"ghost\"\n                          onClick={() => handleSort('revenue')}\n                          className={cn(\n                            \"h-8 px-2 lg:px-3\",\n                            isDarkMode && \"hover:bg-gray-700\"\n                          )}\n                        >\n                          Revenue\n                          <ArrowUpDown className=\"ml-2 h-4 w-4\" />\n                        </Button>\n                      </TableHead>\n                      <TableHead className={isDarkMode ? 'text-gray-300' : ''}>\n                        <Button\n                          variant=\"ghost\"\n                          onClick={() => handleSort('status')}\n                          className={cn(\n                            \"h-8 px-2 lg:px-3\",\n                            isDarkMode && \"hover:bg-gray-700\"\n                          )}\n                        >\n                          Status\n                          <ArrowUpDown className=\"ml-2 h-4 w-4\" />\n                        </Button>\n                      </TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {paginatedData.map((row, index) => (\n                      <motion.tr\n                        key={row.id}\n                        initial={{ opacity: 0, y: 10 }}\n                        animate={{ opacity: 1, y: 0 }}\n                        transition={{ delay: index * 0.05 }}\n                        className={cn(\n                          \"border-b transition-colors\",\n                          isDarkMode ? \"border-gray-700 hover:bg-gray-700/50\" : \"hover:bg-gray-50\"\n                        )}\n                      >\n                        <TableCell className={cn(\n                          \"font-medium\",\n                          isDarkMode ? \"text-gray-200\" : \"text-gray-900\"\n                        )}>\n                          {row.product}\n                        </TableCell>\n                        <TableCell className={isDarkMode ? \"text-gray-300\" : \"text-gray-700\"}>\n                          {row.sales.toLocaleString()}\n                        </TableCell>\n                        <TableCell className={isDarkMode ? \"text-gray-300\" : \"text-gray-700\"}>\n                          ${row.revenue.toLocaleString()}\n                        </TableCell>\n                        <TableCell>\n                          <Badge\n                            variant={\n                              row.status === 'active' \n                                ? 'default' \n                                : row.status === 'pending' \n                                ? 'secondary' \n                                : 'outline'\n                            }\n                            className={cn(\n                              row.status === 'active' && \"bg-green-500 hover:bg-green-600\",\n                              row.status === 'pending' && \"bg-yellow-500 hover:bg-yellow-600\",\n                              row.status === 'inactive' && isDarkMode && \"border-gray-600 text-gray-400\"\n                            )}\n                          >\n                            {row.status.charAt(0).toUpperCase() + row.status.slice(1)}\n                          </Badge>\n                        </TableCell>\n                      </motion.tr>\n                    ))}\n                  </TableBody>\n                </Table>\n              </div>\n\n              <div className=\"flex items-center justify-between\">\n                <p className={cn(\n                  \"text-sm\",\n                  isDarkMode ? \"text-gray-400\" : \"text-gray-600\"\n                )}>\n                  Showing {((currentPage - 1) * itemsPerPage) + 1} to {Math.min(currentPage * itemsPerPage, sortedTableData.length)} of {sortedTableData.length} products\n                </p>\n                \n                <div className=\"flex items-center gap-2\">\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={handlePreviousPage}\n                    disabled={currentPage === 1}\n                    className={cn(\n                      isDarkMode && \"border-gray-700 hover:bg-gray-700\"\n                    )}\n                  >\n                    <ChevronLeft className=\"h-4 w-4 mr-1\" />\n                    Previous\n                  </Button>\n                  \n                  <span className={cn(\n                    \"text-sm font-medium\",\n                    isDarkMode ? \"text-gray-300\" : \"text-gray-700\"\n                  )}>\n                    Page {currentPage} of {totalPages}\n                  </span>\n                  \n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={handleNextPage}\n                    disabled={currentPage === totalPages}\n                    className={cn(\n                      isDarkMode && \"border-gray-700 hover:bg-gray-700\"\n                    )}\n                  >\n                    Next\n                    <ChevronRight className=\"h-4 w-4 ml-1\" />\n                  </Button>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 md:gap-6 mt-8\">\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Recent Activity</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"max-h-[400px] overflow-y-auto space-y-4 pr-2\">\n                {mockActivityData.map((activity, index) => {\n                  const getActivityIcon = () => {\n                    switch (activity.type) {\n                      case 'success':\n                        return <CheckCircle className=\"h-5 w-5 text-green-500\" />;\n                      case 'warning':\n                        return <AlertCircle className=\"h-5 w-5 text-yellow-500\" />;\n                      case 'info':\n                        return <Info className=\"h-5 w-5 text-blue-500\" />;\n                      case 'pending':\n                        return <Clock className=\"h-5 w-5 text-gray-500\" />;\n                      default:\n                        return <Info className=\"h-5 w-5 text-gray-500\" />;\n                    }\n                  };\n\n                  return (\n                    <motion.div\n                      key={activity.id}\n                      initial={{ opacity: 0, x: -20 }}\n                      animate={{ opacity: 1, x: 0 }}\n                      transition={{ delay: index * 0.05 }}\n                      className={`flex items-start gap-3 p-3 rounded-lg ${\n                        isDarkMode ? 'bg-gray-700/50 hover:bg-gray-700' : 'bg-gray-50 hover:bg-gray-100'\n                      } transition-colors`}\n                    >\n                      <div className=\"flex-shrink-0 mt-0.5\">\n                        {getActivityIcon()}\n                      </div>\n                      <div className=\"flex-1 min-w-0\">\n                        <p className={`text-sm ${isDarkMode ? 'text-gray-200' : 'text-gray-900'}`}>\n                          {activity.message}\n                        </p>\n                        <p className={`text-xs mt-1 ${isDarkMode ? 'text-gray-500' : 'text-gray-500'}`}>\n                          {activity.timestamp}\n                        </p>\n                      </div>\n                    </motion.div>\n                  );\n                })}\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Quick Stats</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {mockQuickStats.map((stat, index) => (\n                  <motion.div\n                    key={stat.id}\n                    initial={{ opacity: 0, x: -20 }}\n                    animate={{ opacity: 1, x: 0 }}\n                    transition={{ delay: index * 0.1 }}\n                    className={`p-4 rounded-lg ${isDarkMode ? 'bg-gray-700/50' : 'bg-gray-100'}`}\n                  >\n                    <div className=\"flex justify-between items-start mb-2\">\n                      <span className={`text-sm font-medium ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>\n                        {stat.label}\n                      </span>\n                      <span className={`text-lg font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                        {stat.percentage}%\n                      </span>\n                    </div>\n                    \n                    <Progress \n                      value={stat.percentage} \n                      className={`h-2 mb-2 ${isDarkMode ? 'bg-gray-600' : 'bg-gray-200'}`}\n                    />\n                    \n                    <div className=\"flex justify-between items-center text-xs\">\n                      <span className={isDarkMode ? 'text-gray-400' : 'text-gray-500'}>\n                        {stat.label === 'Customer Satisfaction' \n                          ? `${stat.value}%` \n                          : `$${stat.value.toLocaleString()}`}\n                      </span>\n                      <span className={isDarkMode ? 'text-gray-500' : 'text-gray-400'}>\n                        {stat.label === 'Customer Satisfaction' \n                          ? `Target: ${stat.target}%` \n                          : `Target: $${stat.target.toLocaleString()}`}\n                      </span>\n                    </div>\n                  </motion.div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Alerts</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-3\">\n                {mockAlerts.map((alert, index) => {\n                  const severityConfig = {\n                    info: { icon: Info, color: 'text-blue-500', bg: 'bg-blue-50 dark:bg-blue-900/20', border: 'border-blue-200 dark:border-blue-800' },\n                    warning: { icon: AlertTriangle, color: 'text-yellow-500', bg: 'bg-yellow-50 dark:bg-yellow-900/20', border: 'border-yellow-200 dark:border-yellow-800' },\n                    error: { icon: AlertCircle, color: 'text-red-500', bg: 'bg-red-50 dark:bg-red-900/20', border: 'border-red-200 dark:border-red-800' },\n                    success: { icon: CheckCircle, color: 'text-green-500', bg: 'bg-green-50 dark:bg-green-900/20', border: 'border-green-200 dark:border-green-800' }\n                  };\n\n                  const config = severityConfig[alert.severity];\n                  const Icon = config.icon;\n\n                  return (\n                    <motion.div\n                      key={alert.id}\n                      initial={{ opacity: 0, x: -20 }}\n                      animate={{ opacity: 1, x: 0 }}\n                      transition={{ delay: index * 0.1 }}\n                      className={`flex items-start gap-3 p-3 rounded-lg border ${config.bg} ${config.border}`}\n                    >\n                      <Icon className={`h-5 w-5 ${config.color} flex-shrink-0 mt-0.5`} />\n                      <div className=\"flex-1 min-w-0\">\n                        <p className={`text-sm ${isDarkMode ? 'text-gray-200' : 'text-gray-900'}`}>\n                          {alert.message}\n                        </p>\n                        <p className={`text-xs mt-1 ${isDarkMode ? 'text-gray-500' : 'text-gray-500'}`}>\n                          {alert.timestamp}\n                        </p>\n                      </div>\n                    </motion.div>\n                  );\n                })}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}",
    "error": null,
    "elapsed_time": 79.36140608787537,
    "success": true
  }
}