{
  "prompt_id": "algorithm_visualizer",
  "prompt_name": "Algorithm Visualizer",
  "mode": "parallel",
  "run_number": 16,
  "timestamp": "2025-10-14T11:35:57.800796",
  "response_time": 84.38185930252075,
  "total_tokens": null,
  "response_content": "import { useState, useCallback } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Slider } from '@/components/ui/slider';\nimport { Play, Pause, RotateCcw, Zap, BarChart3 } from 'lucide-react';\nimport { motion } from 'framer-motion';\n\ninterface ArrayElement {\n  value: number;\n  id: string;\n  isComparing?: boolean;\n  isSwapping?: boolean;\n  isSorted?: boolean;\n}\n\ninterface AlgorithmStep {\n  array: ArrayElement[];\n  comparingIndices: number[];\n  swappingIndices: number[];\n  sortedIndices: number[];\n}\n\ntype AlgorithmType = 'bubble' | 'quick' | 'merge' | 'insertion';\n\nconst NEON_COLORS = [\n  '#00ffff',\n  '#ff00ff', \n  '#00ff00',\n  '#ffff00',\n  '#ff0066',\n  '#00ffaa'\n];\n\nconst mockAlgorithms = [\n  { id: 'bubble', name: 'Bubble Sort', complexity: 'O(n\u00b2)' },\n  { id: 'quick', name: 'Quick Sort', complexity: 'O(n log n)' },\n  { id: 'merge', name: 'Merge Sort', complexity: 'O(n log n)' },\n  { id: 'insertion', name: 'Insertion Sort', complexity: 'O(n\u00b2)' }\n];\n\nexport default function AlgorithmVisualizer() {\n  const [array, setArray] = useState<ArrayElement[]>([]);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [speed, setSpeed] = useState([50]);\n  const [arraySize, setArraySize] = useState([20]);\n  const [selectedAlgorithm, setSelectedAlgorithm] = useState<AlgorithmType>('bubble');\n  const [currentStep, setCurrentStep] = useState(0);\n  const [steps, setSteps] = useState<AlgorithmStep[]>([]);\n\n  const generateRandomArray = useCallback(() => {\n    const newArray: ArrayElement[] = Array.from({ length: arraySize[0] }, (_, index) => ({\n      value: Math.floor(Math.random() * 100) + 5,\n      id: `element-${Date.now()}-${index}`,\n      isComparing: false,\n      isSwapping: false,\n      isSorted: false\n    }));\n    setArray(newArray);\n    setSteps([]);\n    setCurrentStep(0);\n    setIsPlaying(false);\n  }, [arraySize]);\n\n  const resetVisualization = useCallback(() => {\n\nsetIsPlaying(false);\n    setCurrentStep(0);\n    setSteps([]);\n    generateRandomArray();\n    }, [generateRandomArray]);\n\n  // Animation effect for step-by-step visualization\n  const animateSteps = useCallback(() => {\n    if (currentStep < steps.length && isPlaying) {\n      const step = steps[currentStep];\n      setArray(step.array);\n      setCurrentStep(prev => prev + 1);\n    } else if (currentStep >= steps.length) {\n      setIsPlaying(false);\n    }\n  }, [currentStep, steps, isPlaying]);\n\n  // Effect to control animation timing\n  React.useEffect(() => {\n    if (isPlaying && currentStep < steps.length) {\n      const delay = 1000 - speed[0] * 9.5; // Convert speed (0-100) to delay (1000ms-50ms)\n      const timer = setTimeout(animateSteps, delay);\n      return () => clearTimeout(timer);\n    }\n  }, [isPlaying, currentStep, steps.length, speed, animateSteps]);\n  const startVisualization = useCallback(() => {\n    if (steps.length === 0 || currentStep >= steps.length) return;\n    setIsPlaying(true);\n  }, [steps, speed, currentStep]);\n\n  const pauseVisualization = useCallback(() => {    setIsPlaying(false);\n\n    setIsPlaying(false);\n  }, []);\n\n  const generateSortingSteps = useCallback((algorithm: AlgorithmType) => {\n    const arr = [...array];\n    const newSteps: AlgorithmStep[] = [];\n    \n    const addStep = (comparingIndices: number[] = [], swappingIndices: number[] = [], sortedIndices: number[] = []) => {\n      newSteps.push({\n        array: arr.map((el, idx) => ({\n          ...el,\n          isComparing: comparingIndices.includes(idx),\n          isSwapping: swappingIndices.includes(idx),\n          isSorted: sortedIndices.includes(idx)\n        })),\n        comparingIndices,\n        swappingIndices,\n        sortedIndices\n      });\n    };\n\n    if (algorithm === 'bubble') {\n      const sorted: number[] = [];\n      for (let i = 0; i < arr.length; i++) {\n        for (let j = 0; j < arr.length - i - 1; j++) {\n          addStep([j, j + 1], [], sorted);\n          if (arr[j].value > arr[j + 1].value) {\n            addStep([j, j + 1], [j, j + 1], sorted);\n            [arr[j], arr[j + 1]] = [arr[j + 1], arr[j]];\n            addStep([], [], sorted);\n          }\n        }\n        sorted.push(arr.length - i - 1);\n        addStep([], [], sorted);\n      }\n    } else if (algorithm === 'insertion') {\n      const sorted: number[] = [0];\n      addStep([], [], sorted);\n      for (let i = 1; i < arr.length; i++) {\n        let j = i;\n        addStep([j], [], sorted);\n        while (j > 0 && arr[j - 1].value > arr[j].value) {\n          addStep([j - 1, j], [], sorted);\n          addStep([j - 1, j], [j - 1, j], sorted);\n          [arr[j - 1], arr[j]] = [arr[j], arr[j - 1]];\n          j--;\n          addStep([], [], sorted);\n        }\n        sorted.push(i);\n        addStep([], [], sorted);\n      }\n    } else if (algorithm === 'quick') {\n      const sorted: number[] = [];\n      const quickSort = (low: number, high: number) => {\n        if (low < high) {\n          const pivotIdx = partition(low, high);\n          sorted.push(pivotIdx);\n          addStep([], [], sorted);\n          quickSort(low, pivotIdx - 1);\n          quickSort(pivotIdx + 1, high);\n        } else if (low === high) {\n          sorted.push(low);\n          addStep([], [], sorted);\n        }\n      };\n      \n      const partition = (low: number, high: number): number => {\n        const pivot = arr[high].value;\n        addStep([high], [], sorted);\n        let i = low - 1;\n        for (let j = low; j < high; j++) {\n          addStep([j, high], [], sorted);\n          if (arr[j].value < pivot) {\n            i++;\n            if (i !== j) {\n              addStep([i, j], [i, j], sorted);\n              [arr[i], arr[j]] = [arr[j], arr[i]];\n              addStep([], [], sorted);\n            }\n          }\n        }\n        addStep([i + 1, high], [i + 1, high], sorted);\n        [arr[i + 1], arr[high]] = [arr[high], arr[i + 1]];\n        addStep([], [], sorted);\n        return i + 1;\n      };\n      \n      quickSort(0, arr.length - 1);\n    } else if (algorithm === 'merge') {\n      const sorted: number[] = [];\n      const mergeSort = (left: number, right: number) => {\n        if (left < right) {\n          const mid = Math.floor((left + right) / 2);\n          mergeSort(left, mid);\n          mergeSort(mid + 1, right);\n          merge(left, mid, right);\n        }\n      };\n      \n      const merge = (left: number, mid: number, right: number) => {\n        const leftArr = arr.slice(left, mid + 1);\n        const rightArr = arr.slice(mid + 1, right + 1);\n        let i = 0, j = 0, k = left;\n        \n        while (i < leftArr.length && j < rightArr.length) {\n          addStep([left + i, mid + 1 + j], [], sorted);\n          if (leftArr[i].value <= rightArr[j].value) {\n            arr[k] = leftArr[i];\n            i++;\n          } else {\n            addStep([k, mid + 1 + j], [k, mid + 1 + j], sorted);\n            arr[k] = rightArr[j];\n            j++;\n          }\n          k++;\n          addStep([], [], sorted);\n        }\n        \n        while (i < leftArr.length) {\n          arr[k] = leftArr[i];\n          i++;\n          k++;\n        }\n        \n        while (j < rightArr.length) {\n          arr[k] = rightArr[j];\n          j++;\n          k++;\n        }\n        \n        for (let idx = left; idx <= right; idx++) {\n          if (!sorted.includes(idx)) sorted.push(idx);\n        }\n        addStep([], [], sorted);\n      };\n      \n      mergeSort(0, arr.length - 1);\n    }\n    \n    setSteps(newSteps);\n    setCurrentStep(0);\n  }, [array]);\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-gray-900 via-purple-900 to-gray-900 p-8\">\n      <div className=\"max-w-7xl mx-auto space-y-8\">\n        <motion.div\n          initial={{ opacity: 0, y: -20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.8 }}\n          className=\"text-center space-y-4\"\n        >\n          <motion.h1\n            className=\"text-6xl font-bold bg-gradient-to-r from-cyan-400 via-purple-400 to-pink-400 bg-clip-text text-transparent\"\n            animate={{\n              textShadow: [\n                '0 0 20px rgba(0, 255, 255, 0.5)',\n                '0 0 40px rgba(255, 0, 255, 0.5)',\n                '0 0 20px rgba(0, 255, 255, 0.5)'\n              ]\n            }}\n            transition={{ duration: 2, repeat: Infinity }}\n          >\n            Algorithm Visualizer\n          </motion.h1>\n          \n          <div className=\"flex items-center justify-center gap-4\">\n            <motion.div\n              initial={{ scale: 0 }}\n              animate={{ scale: 1 }}\n              transition={{ delay: 0.3, type: 'spring' }}\n              className=\"px-6 py-2 bg-purple-500/20 border border-purple-400/50 rounded-full backdrop-blur-sm\"\n            >\n              <span className=\"text-2xl font-semibold text-purple-300\">\n                {mockAlgorithms.find(a => a.id === selectedAlgorithm)?.name || 'Bubble Sort'}\n              </span>\n            </motion.div>\n            \n            <motion.div\n              initial={{ scale: 0 }}\n              animate={{ scale: 1 }}\n              transition={{ delay: 0.5, type: 'spring' }}\n              className=\"px-4 py-2 bg-cyan-500/20 border border-cyan-400/50 rounded-full backdrop-blur-sm relative overflow-hidden\"\n            >\n              <motion.div\n                className=\"absolute inset-0 bg-gradient-to-r from-transparent via-cyan-400/20 to-transparent\"\n                animate={{ x: ['-100%', '200%'] }}\n                transition={{ duration: 2, repeat: Infinity, ease: 'linear' }}\n              />\n              <div className=\"relative flex items-center gap-2\">\n                <BarChart3 className=\"w-4 h-4 text-cyan-400\" />\n                <span className=\"text-sm font-mono text-cyan-300\">\n                  {mockAlgorithms.find(a => a.id === selectedAlgorithm)?.complexity || 'O(n\u00b2)'}\n                </span>\n              </div>\n            </motion.div>\n          </div>\n        </motion.div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-6\">\n          <div className=\"lg:col-span-1 space-y-6\">\n            <motion.div\n              initial={{ opacity: 0, x: -50 }}\n              animate={{ opacity: 1, x: 0 }}\n              transition={{ duration: 0.6 }}\n              className=\"bg-gray-900/50 backdrop-blur-lg border border-cyan-500/30 rounded-xl p-6 shadow-[0_0_30px_rgba(0,255,255,0.3)] hover:shadow-[0_0_50px_rgba(0,255,255,0.5)] transition-all duration-300\"\n            >\n              <div className=\"space-y-6\">\n                {/* Algorithm Selection */}\n                <div className=\"space-y-3\">\n                  <h3 className=\"text-cyan-400 font-semibold text-sm uppercase tracking-wider flex items-center gap-2\">\n                    <Zap className=\"w-4 h-4\" />\n                    Algorithm\n                  </h3>\n                  <div className=\"space-y-2\">\n                    {mockAlgorithms.map((algo) => (\n                      <button\n                        key={algo.id}\n                        onClick={() => setSelectedAlgorithm(algo.id as AlgorithmType)}\n                        disabled={isPlaying}\n                        className={`w-full text-left px-4 py-3 rounded-lg border transition-all duration-300 ${\n                          selectedAlgorithm === algo.id\n                            ? 'bg-cyan-500/20 border-cyan-400 shadow-[0_0_20px_rgba(0,255,255,0.4)] text-cyan-300'\n                            : 'bg-gray-800/50 border-gray-700 hover:border-cyan-500/50 text-gray-400 hover:text-cyan-300'\n                        } disabled:opacity-50 disabled:cursor-not-allowed`}\n                      >\n                        <div className=\"font-medium\">{algo.name}</div>\n                        <div className=\"text-xs opacity-70\">{algo.complexity}</div>\n                      </button>\n                    ))}\n                  </div>\n                </div>\n\n                {/* Array Size Control */}\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <h3 className=\"text-purple-400 font-semibold text-sm uppercase tracking-wider flex items-center gap-2\">\n                      <BarChart3 className=\"w-4 h-4\" />\n                      Array Size\n                    </h3>\n                    <span className=\"text-purple-300 font-mono text-lg\">{arraySize[0]}</span>\n                  </div>\n                  <Slider\n                    value={arraySize}\n                    onValueChange={setArraySize}\n                    min={5}\n                    max={50}\n                    step={1}\n                    disabled={isPlaying}\n                    className=\"cursor-pointer\"\n                  />\n                </div>\n\n                {/* Speed Control */}\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <h3 className=\"text-pink-400 font-semibold text-sm uppercase tracking-wider flex items-center gap-2\">\n                      <Zap className=\"w-4 h-4\" />\n                      Speed\n                    </h3>\n                    <span className=\"text-pink-300 font-mono text-lg\">{speed[0]}%</span>\n                  </div>\n                  <Slider\n                    value={speed}\n                    onValueChange={setSpeed}\n                    min={10}\n                    max={100}\n                    step={10}\n                    className=\"cursor-pointer\"\n                  />\n                </div>\n\n                {/* Control Buttons */}\n                <div className=\"space-y-3 pt-4 border-t border-gray-700/50\">\n                  <Button\n                    onClick={isPlaying ? pauseVisualization : startVisualization}\n                    disabled={steps.length === 0 || (currentStep >= steps.length && !isPlaying)}\n                    className=\"w-full bg-gradient-to-r from-cyan-500 to-blue-500 hover:from-cyan-400 hover:to-blue-400 text-white font-semibold py-6 rounded-lg shadow-[0_0_20px_rgba(0,255,255,0.5)] hover:shadow-[0_0_30px_rgba(0,255,255,0.7)] transition-all duration-300 disabled:opacity-50 disabled:cursor-not-allowed\"\n                  >\n                    {isPlaying ? (\n                      <>\n                        <Pause className=\"w-5 h-5 mr-2\" />\n                        Pause\n                      </>\n                    ) : (\n                      <>\n                        <Play className=\"w-5 h-5 mr-2\" />\n                        {currentStep >= steps.length && steps.length > 0 ? 'Replay' : 'Start'}\n                      </>\n                    )}\n                  </Button>\n\n                  <Button\n                    onClick={resetVisualization}\n                    disabled={isPlaying}\n                    className=\"w-full bg-gradient-to-r from-purple-500 to-pink-500 hover:from-purple-400 hover:to-pink-400 text-white font-semibold py-6 rounded-lg shadow-[0_0_20px_rgba(255,0,255,0.5)] hover:shadow-[0_0_30px_rgba(255,0,255,0.7)] transition-all duration-300 disabled:opacity-50 disabled:cursor-not-allowed\"\n                  >\n                    <RotateCcw className=\"w-5 h-5 mr-2\" />\n                    Reset\n                  </Button>\n\n                  <Button\n                    onClick={() => generateSortingSteps(selectedAlgorithm)}\n                    disabled={isPlaying || array.length === 0}\n                    className=\"w-full bg-gradient-to-r from-green-500 to-emerald-500 hover:from-green-400 hover:to-emerald-400 text-white font-semibold py-6 rounded-lg shadow-[0_0_20px_rgba(0,255,170,0.5)] hover:shadow-[0_0_30px_rgba(0,255,170,0.7)] transition-all duration-300 disabled:opacity-50 disabled:cursor-not-allowed\"\n                  >\n                    <Zap className=\"w-5 h-5 mr-2\" />\n                    Generate Steps\n                  </Button>\n                </div>\n\n                {/* Stats Display */}\n                <div className=\"pt-4 border-t border-gray-700/50 space-y-2\">\n                  <div className=\"flex justify-between items-center text-sm\">\n                    <span className=\"text-gray-400\">Current Step:</span>\n                    <span className=\"text-cyan-300 font-mono font-semibold\">{currentStep} / {steps.length}</span>\n                  </div>\n                  <div className=\"flex justify-between items-center text-sm\">\n                    <span className=\"text-gray-400\">Array Length:</span>\n                    <span className=\"text-purple-300 font-mono font-semibold\">{array.length}</span>\n                  </div>\n                </div>\n              </div>\n            </motion.div>\n            \n            <div className=\"bg-gray-900/50 backdrop-blur-lg border border-cyan-500/30 rounded-xl p-6 shadow-2xl shadow-cyan-500/20\">\n              <div className=\"space-y-6\">\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center gap-2 text-cyan-400\">\n                    <Zap className=\"w-4 h-4\" />\n                    <span className=\"text-sm font-semibold tracking-wider\">ALGORITHM</span>\n                  </div>\n                  <div className=\"grid grid-cols-1 gap-3\">\n                    {mockAlgorithms.map((algo) => (\n                      <motion.button\n                        key={algo.id}\n                        onClick={() => setSelectedAlgorithm(algo.id as AlgorithmType)}\n                        className={`relative p-4 rounded-lg border-2 transition-all duration-300 text-left ${\n                          selectedAlgorithm === algo.id\n                            ? 'border-cyan-400 bg-cyan-500/20 shadow-lg shadow-cyan-500/50'\n                            : 'border-gray-700 bg-gray-800/50 hover:border-cyan-500/50 hover:bg-cyan-500/10'\n                        }`}\n                        whileHover={{ scale: 1.02 }}\n                        whileTap={{ scale: 0.98 }}\n                      >\n                        <div className=\"space-y-1\">\n                          <div className=\"font-semibold text-white\">{algo.name}</div>\n                          <div className={`text-xs ${\n                            selectedAlgorithm === algo.id ? 'text-cyan-300' : 'text-gray-400'\n                          }`}>\n                            {algo.complexity}\n                          </div>\n                        </div>\n                        {selectedAlgorithm === algo.id && (\n                          <motion.div\n                            className=\"absolute inset-0 rounded-lg border-2 border-cyan-400\"\n                            initial={{ opacity: 0 }}\n                            animate={{ opacity: [0.5, 1, 0.5] }}\n                            transition={{ duration: 2, repeat: Infinity }}\n                          />\n                        )}\n                      </motion.button>\n                    ))}\n                  </div>\n                </div>\n\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <label className=\"text-cyan-400 text-sm font-medium flex items-center gap-2\">\n                      <Zap className=\"w-4 h-4\" />\n                      Speed\n                    </label>\n                    <span className=\"text-cyan-300 text-xs\">{speed[0]}ms</span>\n                  </div>\n                  <Slider\n                    value={speed}\n                    onValueChange={setSpeed}\n                    min={10}\n                    max={200}\n                    step={10}\n                    className=\"[&_[role=slider]]:bg-cyan-400 [&_[role=slider]]:border-cyan-300 [&_[role=slider]]:shadow-[0_0_15px_rgba(34,211,238,0.8)] [&_[role=slider]]:hover:shadow-[0_0_25px_rgba(34,211,238,1)] [&_[role=slider]]:transition-shadow [&_.relative]:bg-gray-700/50 [&_.relative]:border [&_.relative]:border-cyan-500/30 [&_.bg-primary]:bg-gradient-to-r [&_.bg-primary]:from-cyan-500 [&_.bg-primary]:to-purple-500 [&_.bg-primary]:shadow-[0_0_10px_rgba(34,211,238,0.5)]\"\n                  /></parameter>\n                </div>\n\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <label className=\"text-cyan-400 text-sm font-medium flex items-center gap-2\">\n                      <BarChart3 className=\"w-4 h-4\" />\n                      Array Size\n                    </label>\n                    <span className=\"text-cyan-300 text-xs\">{arraySize[0]}</span>\n                  </div>\n                  <Slider\n                    value={arraySize}\n                    onValueChange={setArraySize}\n                    min={5}\n                    max={50}\n                    step={1}\n                    className=\"[&_[role=slider]]:bg-gradient-to-r [&_[role=slider]]:from-purple-500 [&_[role=slider]]:to-pink-500 [&_[role=slider]]:border-2 [&_[role=slider]]:border-purple-300 [&_[role=slider]]:shadow-lg [&_[role=slider]]:shadow-purple-500/50 [&_[role=slider]]:transition-all [&_[role=slider]]:hover:shadow-purple-500/80 [&_[role=slider]]:hover:scale-110 [&>span]:bg-gradient-to-r [&>span]:from-purple-500/30 [&>span]:to-pink-500/30 [&>span]:h-2\"\n                  />\n                </div>\n\n                <div className=\"flex gap-3 pt-4\">\n                  <motion.button\n                    onClick={isPlaying ? pauseVisualization : startVisualization}\n                    disabled={array.length === 0 || (steps.length === 0 && !isPlaying)}\n                    whileHover={{ scale: 1.05 }}\n                    whileTap={{ scale: 0.95 }}\n                    className={`flex-1 relative px-6 py-3 rounded-lg font-semibold text-white overflow-hidden transition-all duration-300 ${\n                      array.length === 0 || (steps.length === 0 && !isPlaying)\n                        ? 'bg-gray-700 border border-gray-600 cursor-not-allowed opacity-50'\n                        : isPlaying\n                        ? 'bg-gradient-to-r from-orange-500 to-red-500 border-2 border-orange-400 shadow-[0_0_30px_rgba(255,165,0,0.6)]'\n                        : 'bg-gradient-to-r from-cyan-500 to-blue-500 border-2 border-cyan-400 shadow-[0_0_30px_rgba(0,255,255,0.6)]'\n                    }`}\n                  >\n                    <motion.div\n                      className=\"absolute inset-0 bg-gradient-to-r from-transparent via-white/20 to-transparent\"\n                      animate={{\n                        x: isPlaying ? ['-100%', '200%'] : '-100%'\n                      }}\n                      transition={{\n                        duration: 1.5,\n                        repeat: isPlaying ? Infinity : 0,\n                        ease: 'linear'\n                      }}\n                    />\n                    <span className=\"relative flex items-center justify-center gap-2\">\n                      <motion.div\n                        key={isPlaying ? 'pause' : 'play'}\n                        initial={{ scale: 0, rotate: -180 }}\n                        animate={{ scale: 1, rotate: 0 }}\n                        exit={{ scale: 0, rotate: 180 }}\n                        transition={{ type: 'spring', stiffness: 200, damping: 15 }}\n                      >\n                        {isPlaying ? (\n                          <Pause className=\"w-5 h-5\" fill=\"currentColor\" />\n                        ) : (\n                          <Play className=\"w-5 h-5\" fill=\"currentColor\" />\n                        )}\n                      </motion.div>\n                      {isPlaying ? 'Pause' : 'Play'}\n                    </span>\n                  </motion.button>\n                  {/* TODO:ResetButton Glowing reset button with rotation animation on click */}\n                </div>\n              </div>\n            </div>\n\n            <motion.div\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ duration: 0.6, delay: 0.2 }}\n              className=\"bg-gray-900/50 backdrop-blur-lg border border-purple-500/30 rounded-xl p-6 shadow-[0_0_30px_rgba(168,85,247,0.3)] hover:shadow-[0_0_50px_rgba(168,85,247,0.5)] transition-all duration-300\"\n            >\n              <h3 className=\"text-purple-400 font-semibold text-sm uppercase tracking-wider flex items-center gap-2 mb-4\">\n                <BarChart3 className=\"w-4 h-4\" />\n                Statistics\n              </h3>\n              \n              <div className=\"grid grid-cols-1 gap-4\">\n                {/* Comparisons Counter */}\n                <div className=\"relative overflow-hidden bg-gradient-to-br from-cyan-500/10 to-cyan-500/5 border border-cyan-500/30 rounded-lg p-4 group hover:border-cyan-400/50 transition-all duration-300\">\n                  <motion.div\n                    className=\"absolute inset-0 bg-gradient-to-r from-transparent via-cyan-400/10 to-transparent\"\n                    animate={{ x: ['-100%', '200%'] }}\n                    transition={{ duration: 3, repeat: Infinity, ease: 'linear' }}\n                  />\n                  <div className=\"relative space-y-1\">\n                    <div className=\"text-xs text-cyan-400/70 uppercase tracking-wider font-medium\">Comparisons</div>\n                    <div className=\"flex items-baseline gap-2\">\n                      <motion.span\n                        key={currentStep}\n                        initial={{ scale: 1.2, color: '#00ffff' }}\n                        animate={{ scale: 1, color: '#67e8f9' }}\n                        className=\"text-3xl font-bold text-cyan-300 font-mono\"\n                      >\n                        {steps.slice(0, currentStep).filter(s => s.comparingIndices.length > 0).length}\n                      </motion.span>\n                      <span className=\"text-sm text-cyan-400/50\">ops</span>\n                    </div>\n                  </div>\n                  <motion.div\n                    className=\"absolute top-2 right-2 w-2 h-2 bg-cyan-400 rounded-full\"\n                    animate={{\n                      boxShadow: [\n                        '0 0 5px rgba(0, 255, 255, 0.5)',\n                        '0 0 20px rgba(0, 255, 255, 1)',\n                        '0 0 5px rgba(0, 255, 255, 0.5)'\n                      ]\n                    }}\n                    transition={{ duration: 1.5, repeat: Infinity }}\n                  />\n                </div>\n\n                {/* Swaps Counter */}\n                <div className=\"relative overflow-hidden bg-gradient-to-br from-pink-500/10 to-pink-500/5 border border-pink-500/30 rounded-lg p-4 group hover:border-pink-400/50 transition-all duration-300\">\n                  <motion.div\n                    className=\"absolute inset-0 bg-gradient-to-r from-transparent via-pink-400/10 to-transparent\"\n                    animate={{ x: ['-100%', '200%'] }}\n                    transition={{ duration: 3, repeat: Infinity, ease: 'linear', delay: 0.5 }}\n                  />\n                  <div className=\"relative space-y-1\">\n                    <div className=\"text-xs text-pink-400/70 uppercase tracking-wider font-medium\">Swaps</div>\n                    <div className=\"flex items-baseline gap-2\">\n                      <motion.span\n                        key={`swap-${currentStep}`}\n                        initial={{ scale: 1.2, color: '#ff0066' }}\n                        animate={{ scale: 1, color: '#f9a8d4' }}\n                        className=\"text-3xl font-bold text-pink-300 font-mono\"\n                      >\n                        {steps.slice(0, currentStep).filter(s => s.swappingIndices.length > 0).length}\n                      </motion.span>\n                      <span className=\"text-sm text-pink-400/50\">ops</span>\n                    </div>\n                  </div>\n                  <motion.div\n                    className=\"absolute top-2 right-2 w-2 h-2 bg-pink-400 rounded-full\"\n                    animate={{\n                      boxShadow: [\n                        '0 0 5px rgba(255, 0, 102, 0.5)',\n                        '0 0 20px rgba(255, 0, 102, 1)',\n                        '0 0 5px rgba(255, 0, 102, 0.5)'\n                      ]\n                    }}\n                    transition={{ duration: 1.5, repeat: Infinity, delay: 0.3 }}\n                  />\n                </div>\n\n                {/* Progress Indicator */}\n                <div className=\"relative overflow-hidden bg-gradient-to-br from-purple-500/10 to-purple-500/5 border border-purple-500/30 rounded-lg p-4 group hover:border-purple-400/50 transition-all duration-300\">\n                  <motion.div\n                    className=\"absolute inset-0 bg-gradient-to-r from-transparent via-purple-400/10 to-transparent\"\n                    animate={{ x: ['-100%', '200%'] }}\n                    transition={{ duration: 3, repeat: Infinity, ease: 'linear', delay: 1 }}\n                  />\n                  <div className=\"relative space-y-2\">\n                    <div className=\"text-xs text-purple-400/70 uppercase tracking-wider font-medium\">Progress</div>\n                    <div className=\"flex items-baseline gap-2\">\n                      <motion.span\n                        key={`progress-${currentStep}`}\n                        initial={{ scale: 1.2 }}\n                        animate={{ scale: 1 }}\n                        className=\"text-3xl font-bold text-purple-300 font-mono\"\n                      >\n                        {steps.length > 0 ? Math.round((currentStep / steps.length) * 100) : 0}\n                      </motion.span>\n                      <span className=\"text-sm text-purple-400/50\">%</span>\n                    </div>\n                    <div className=\"w-full bg-gray-800/50 rounded-full h-2 overflow-hidden border border-purple-500/20\">\n                      <motion.div\n                        className=\"h-full bg-gradient-to-r from-purple-500 via-pink-500 to-cyan-500 rounded-full relative\"\n                        initial={{ width: '0%' }}\n                        animate={{ \n                          width: steps.length > 0 ? `${(currentStep / steps.length) * 100}%` : '0%'\n                        }}\n                        transition={{ duration: 0.3 }}\n                      >\n                        <motion.div\n                          className=\"absolute inset-0 bg-gradient-to-r from-transparent via-white/30 to-transparent\"\n                          animate={{ x: ['-100%', '200%'] }}\n                          transition={{ duration: 1, repeat: Infinity, ease: 'linear' }}\n                        />\n                      </motion.div>\n                    </div>\n                  </div>\n                  <motion.div\n                    className=\"absolute top-2 right-2 w-2 h-2 bg-purple-400 rounded-full\"\n                    animate={{\n                      boxShadow: [\n                        '0 0 5px rgba(168, 85, 247, 0.5)',\n                        '0 0 20px rgba(168, 85, 247, 1)',\n                        '0 0 5px rgba(168, 85, 247, 0.5)'\n                      ]\n                    }}\n                    transition={{ duration: 1.5, repeat: Infinity, delay: 0.6 }}\n                  />\n                </div>\n\n                {/* Current Step */}\n                <div className=\"relative overflow-hidden bg-gradient-to-br from-green-500/10 to-green-500/5 border border-green-500/30 rounded-lg p-4 group hover:border-green-400/50 transition-all duration-300\">\n                  <div className=\"relative space-y-1\">\n                    <div className=\"text-xs text-green-400/70 uppercase tracking-wider font-medium\">Current Step</div>\n                    <div className=\"flex items-baseline gap-2\">\n                      <motion.span\n                        key={`step-${currentStep}`}\n                        initial={{ scale: 1.2, color: '#00ff00' }}\n                        animate={{ scale: 1, color: '#86efac' }}\n                        className=\"text-3xl font-bold text-green-300 font-mono\"\n                      >\n                        {currentStep}\n                      </motion.span>\n                      <span className=\"text-sm text-green-400/50\">/ {steps.length}</span>\n                    </div>\n                  </div>\n                  {isPlaying && (\n                    <motion.div\n                      className=\"absolute top-2 right-2 w-2 h-2 bg-green-400 rounded-full\"\n                      animate={{\n                        scale: [1, 1.5, 1],\n                        boxShadow: [\n                          '0 0 5px rgba(0, 255, 0, 0.5)',\n                          '0 0 20px rgba(0, 255, 0, 1)',\n                          '0 0 5px rgba(0, 255, 0, 0.5)'\n                        ]\n                      }}\n                      transition={{ duration: 1, repeat: Infinity }}\n                    />\n                  )}\n                </div>\n              </div>\n            </motion.div>\n          </div>\n\n          <div className=\"lg:col-span-3\">\n            <div className=\"bg-gray-900/50 backdrop-blur-lg border border-purple-500/30 rounded-xl p-8 shadow-2xl shadow-purple-500/20 min-h-[600px]\">\n                            {array.length === 0 ? (\n                <motion.div\n                  initial={{ opacity: 0, scale: 0.8 }}\n                  animate={{ opacity: 1, scale: 1 }}\n                  transition={{ duration: 0.6 }}\n                  className=\"absolute inset-0 flex flex-col items-center justify-center space-y-6\"\n                >\n                  <motion.div\n                    animate={{\n                      rotate: [0, 360],\n                      scale: [1, 1.2, 1]\n                    }}\n                    transition={{\n                      duration: 3,\n                      repeat: Infinity,\n                      ease: \"easeInOut\"\n                    }}\n                  >\n                    <BarChart3 className=\"w-24 h-24 text-purple-400/50\" />\n                  </motion.div>\n                  <div className=\"text-center space-y-2\">\n                    <h3 className=\"text-2xl font-bold text-purple-300\">Ready to Visualize</h3>\n                    <p className=\"text-gray-400\">Generate an array to begin</p>\n                  </div>\n                  <motion.div\n                    animate={{\n                      boxShadow: [\n                        '0 0 20px rgba(168, 85, 247, 0.4)',\n                        '0 0 40px rgba(168, 85, 247, 0.6)',\n                        '0 0 20px rgba(168, 85, 247, 0.4)'\n                      ]\n                    }}\n                    transition={{ duration: 2, repeat: Infinity }}\n                    className=\"px-6 py-3 bg-purple-500/20 border border-purple-400/50 rounded-lg\"\n                  >\n                    <span className=\"text-purple-300 font-medium\">Click \"Generate Array\" to start</span>\n                  </motion.div>\n                </motion.div>\n              ) : (\n                <div className=\"relative w-full h-full flex items-end justify-center gap-1 px-4\">\n                  {array.map((element, index) => {\n                    const maxValue = Math.max(...array.map(el => el.value));\n                    const heightPercentage = (element.value / maxValue) * 100;\n                    const barColor = element.isSorted\n                      ? '#00ff00'\n                      : element.isSwapping\n                      ? '#ff0066'\n                      : element.isComparing\n                      ? '#ffff00'\n                      : NEON_COLORS[index % NEON_COLORS.length];\n\n                    return (\n                      <motion.div\n                        key={element.id}\n                        layout\n                        initial={{ height: 0, opacity: 0 }}\n                        animate={{\n                          height: `${heightPercentage}%`,\n                          opacity: 1,\n                          scale: element.isSwapping ? 1.1 : element.isComparing ? 1.05 : 1\n                        }}\n                        transition={{\n                          height: { duration: 0.3, ease: \"easeOut\" },\n                          scale: { duration: 0.2 },\n                          layout: { duration: 0.5, ease: \"easeInOut\" }\n                        }}\n                        className=\"relative flex-1 min-w-[8px] max-w-[60px] rounded-t-lg\"\n                        style={{\n                          backgroundColor: barColor,\n                          boxShadow: `0 0 ${element.isSwapping ? '30px' : element.isComparing ? '20px' : '10px'} ${barColor}`,\n                          border: `1px solid ${barColor}`\n                        }}\n                      >\n                        {/* Glow effect overlay */}\n                        <motion.div\n                          className=\"absolute inset-0 rounded-t-lg\"\n                          animate={{\n                            opacity: element.isSwapping || element.isComparing ? [0.3, 0.7, 0.3] : 0\n                          }}\n                          transition={{ duration: 0.5, repeat: element.isSwapping || element.isComparing ? Infinity : 0 }}\n                          style={{\n                            background: `linear-gradient(to top, transparent, ${barColor})`\n                          }}\n                        />\n\n                        {/* Swap trail effect */}\n                        {element.isSwapping && (\n                          <>\n                            <motion.div\n                              className=\"absolute inset-0 rounded-t-lg\"\n                              initial={{ opacity: 0, scale: 1 }}\n                              animate={{ opacity: [0.8, 0], scale: [1, 1.5] }}\n                              transition={{ duration: 0.6, repeat: Infinity }}\n                              style={{\n                                border: `2px solid ${barColor}`,\n                                boxShadow: `0 0 20px ${barColor}`\n                              }}\n                            />\n                            <motion.div\n                              className=\"absolute -top-8 left-1/2 transform -translate-x-1/2\"\n                              animate={{\n                                y: [-10, 0, -10],\n                                opacity: [0.5, 1, 0.5]\n                              }}\n                              transition={{ duration: 0.8, repeat: Infinity }}\n                            >\n                              <div className=\"w-2 h-2 rounded-full\" style={{ backgroundColor: barColor, boxShadow: `0 0 10px ${barColor}` }} />\n                            </motion.div>\n                          </>\n                        )}\n\n                        {/* Comparison indicator */}\n                        {element.isComparing && !element.isSwapping && (\n                          <motion.div\n                            className=\"absolute -top-6 left-1/2 transform -translate-x-1/2\"\n                            initial={{ opacity: 0, y: 10 }}\n                            animate={{ opacity: 1, y: 0 }}\n                            exit={{ opacity: 0 }}\n                          >\n                            <motion.div\n                              animate={{\n                                scale: [1, 1.3, 1],\n                                rotate: [0, 180, 360]\n                              }}\n                              transition={{ duration: 1, repeat: Infinity }}\n                              className=\"w-3 h-3 border-2 rounded-full\"\n                              style={{ borderColor: barColor, boxShadow: `0 0 10px ${barColor}` }}\n                            />\n                          </motion.div>\n                        )}\n\n                        {/* Sorted checkmark */}\n                        {element.isSorted && (\n                          <motion.div\n                            className=\"absolute -top-8 left-1/2 transform -translate-x-1/2\"\n                            initial={{ scale: 0, rotate: -180 }}\n                            animate={{ scale: 1, rotate: 0 }}\n                            transition={{ type: \"spring\", stiffness: 200, damping: 10 }}\n                          >\n                            <div className=\"w-6 h-6 rounded-full bg-green-500/20 border-2 border-green-400 flex items-center justify-center\"\n                              style={{ boxShadow: '0 0 15px rgba(0, 255, 0, 0.6)' }}\n                            >\n                              <svg className=\"w-3 h-3 text-green-400\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={3} d=\"M5 13l4 4L19 7\" />\n                              </svg>\n                            </div>\n                          </motion.div>\n                        )}\n\n                        {/* Value label */}\n                        {array.length <= 30 && (\n                          <motion.div\n                            className=\"absolute bottom-2 left-1/2 transform -translate-x-1/2 text-xs font-bold text-white/90\"\n                            style={{ textShadow: `0 0 5px ${barColor}` }}\n                            animate={{\n                              scale: element.isSwapping || element.isComparing ? [1, 1.2, 1] : 1\n                            }}\n                            transition={{ duration: 0.3 }}\n                          >\n                            {element.value}\n                          </motion.div>\n                        )}\n\n                        {/* Particle effects for swapping */}\n                        {element.isSwapping && (\n                          <>\n                            {[...Array(3)].map((_, i) => (\n                              <motion.div\n                                key={i}\n                                className=\"absolute top-0 left-1/2 w-1 h-1 rounded-full\"\n                                style={{ backgroundColor: barColor }}\n                                initial={{ x: 0, y: 0, opacity: 1 }}\n                                animate={{\n                                  x: [0, (Math.random() - 0.5) * 40],\n                                  y: [0, -30 - Math.random() * 20],\n                                  opacity: [1, 0]\n                                }}\n                                transition={{\n                                  duration: 0.8,\n                                  repeat: Infinity,\n                                  delay: i * 0.2\n                                }}\n                              />\n                            ))}\n                          </>\n                        )}\n                      </motion.div>\n                    );\n                  })}\n                </div>\n              )}\n              \n              <div className=\"relative h-full flex items-end justify-center gap-1\">\n                \n              </div>\n            </div>\n\n                        <motion.div\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ duration: 0.6, delay: 0.2 }}\n              className=\"mt-6 space-y-3\"\n            >\n              <div className=\"flex items-center justify-between text-sm\">\n                <span className=\"text-purple-300 font-medium\">Sorting Progress</span>\n                <span className=\"text-cyan-300 font-mono\">\n                  {steps.length > 0 ? Math.round((currentStep / steps.length) * 100) : 0}%\n                </span>\n              </div>\n              \n              <div className=\"relative h-3 bg-gray-800/80 rounded-full overflow-hidden border border-purple-500/30 shadow-inner\">\n                <motion.div\n                  className=\"absolute inset-y-0 left-0 bg-gradient-to-r from-cyan-500 via-purple-500 to-pink-500 rounded-full shadow-[0_0_20px_rgba(168,85,247,0.8)]\"\n                  initial={{ width: '0%' }}\n                  animate={{ \n                    width: steps.length > 0 ? `${(currentStep / steps.length) * 100}%` : '0%'\n                  }}\n                  transition={{ duration: 0.3, ease: 'easeOut' }}\n                />\n                \n                <motion.div\n                  className=\"absolute inset-0 bg-gradient-to-r from-transparent via-white/30 to-transparent\"\n                  animate={{ \n                    x: ['-100%', '200%'],\n                    opacity: steps.length > 0 && currentStep < steps.length ? [0.5, 1, 0.5] : 0\n                  }}\n                  transition={{ \n                    x: { duration: 1.5, repeat: Infinity, ease: 'linear' },\n                    opacity: { duration: 1, repeat: Infinity }\n                  }}\n                  style={{ width: '50%' }}\n                />\n              </div>\n              \n              <div className=\"flex items-center justify-between text-xs text-gray-400\">\n                <span>Step {currentStep} of {steps.length}</span>\n                {currentStep >= steps.length && steps.length > 0 && (\n                  <motion.span\n                    initial={{ opacity: 0, scale: 0.8 }}\n                    animate={{ opacity: 1, scale: 1 }}\n                    className=\"text-green-400 font-semibold flex items-center gap-1\"\n                  >\n                    <motion.span\n                      animate={{ scale: [1, 1.2, 1] }}\n                      transition={{ duration: 0.5, repeat: Infinity }}\n                    >\n                      \u2713\n                    </motion.span>\n                    Complete\n                  </motion.span>\n                )}\n              </div>\n            </motion.div>\n          </div>\n        </div>\n\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.8, delay: 0.4 }}\n          className=\"bg-gray-900/50 backdrop-blur-lg border border-cyan-500/30 rounded-xl p-6 shadow-[0_0_30px_rgba(0,255,255,0.2)]\"\n        >\n          <div className=\"flex items-center gap-2 mb-6\">\n            <BarChart3 className=\"w-5 h-5 text-cyan-400\" />\n            <h3 className=\"text-cyan-400 font-semibold text-lg uppercase tracking-wider\">\n              Legend\n            </h3>\n          </div>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n            {/* Default State */}\n            <motion.div\n              whileHover={{ scale: 1.05 }}\n              className=\"flex items-center gap-3 p-4 bg-gray-800/50 rounded-lg border border-gray-700/50 hover:border-gray-600 transition-all duration-300\"\n            >\n              <motion.div\n                className=\"w-6 h-12 rounded bg-gradient-to-t from-cyan-500 to-cyan-300 shadow-[0_0_15px_rgba(0,255,255,0.6)]\"\n                animate={{\n                  boxShadow: [\n                    '0 0 15px rgba(0,255,255,0.6)',\n                    '0 0 25px rgba(0,255,255,0.8)',\n                    '0 0 15px rgba(0,255,255,0.6)'\n                  ]\n                }}\n                transition={{ duration: 2, repeat: Infinity }}\n              />\n              <div>\n                <div className=\"text-white font-semibold text-sm\">Default</div>\n                <div className=\"text-gray-400 text-xs\">Unsorted element</div>\n              </div>\n            </motion.div>\n\n            {/* Comparing State */}\n            <motion.div\n              whileHover={{ scale: 1.05 }}\n              className=\"flex items-center gap-3 p-4 bg-gray-800/50 rounded-lg border border-yellow-500/30 hover:border-yellow-500/50 transition-all duration-300\"\n            >\n              <motion.div\n                className=\"w-6 h-12 rounded bg-gradient-to-t from-yellow-500 to-yellow-300 shadow-[0_0_20px_rgba(255,255,0,0.8)]\"\n                animate={{\n                  boxShadow: [\n                    '0 0 20px rgba(255,255,0,0.8)',\n                    '0 0 35px rgba(255,255,0,1)',\n                    '0 0 20px rgba(255,255,0,0.8)'\n                  ],\n                  scale: [1, 1.1, 1]\n                }}\n                transition={{ duration: 1.5, repeat: Infinity }}\n              />\n              <div>\n                <div className=\"text-white font-semibold text-sm\">Comparing</div>\n                <div className=\"text-gray-400 text-xs\">Being compared</div>\n              </div>\n            </motion.div>\n\n            {/* Swapping State */}\n            <motion.div\n              whileHover={{ scale: 1.05 }}\n              className=\"flex items-center gap-3 p-4 bg-gray-800/50 rounded-lg border border-pink-500/30 hover:border-pink-500/50 transition-all duration-300\"\n            >\n              <motion.div\n                className=\"w-6 h-12 rounded bg-gradient-to-t from-pink-500 to-pink-300 shadow-[0_0_20px_rgba(255,0,255,0.8)]\"\n                animate={{\n                  boxShadow: [\n                    '0 0 20px rgba(255,0,255,0.8)',\n                    '0 0 40px rgba(255,0,255,1)',\n                    '0 0 20px rgba(255,0,255,0.8)'\n                  ],\n                  x: [-2, 2, -2]\n                }}\n                transition={{ duration: 1, repeat: Infinity }}\n              />\n              <div>\n                <div className=\"text-white font-semibold text-sm\">Swapping</div>\n                <div className=\"text-gray-400 text-xs\">Exchanging positions</div>\n              </div>\n            </motion.div>\n\n            {/* Sorted State */}\n            <motion.div\n              whileHover={{ scale: 1.05 }}\n              className=\"flex items-center gap-3 p-4 bg-gray-800/50 rounded-lg border border-green-500/30 hover:border-green-500/50 transition-all duration-300\"\n            >\n              <motion.div\n                className=\"w-6 h-12 rounded bg-gradient-to-t from-green-500 to-green-300 shadow-[0_0_20px_rgba(0,255,0,0.8)]\"\n                animate={{\n                  boxShadow: [\n                    '0 0 20px rgba(0,255,0,0.8)',\n                    '0 0 30px rgba(0,255,0,1)',\n                    '0 0 20px rgba(0,255,0,0.8)'\n                  ]\n                }}\n                transition={{ duration: 2, repeat: Infinity }}\n              />\n              <div>\n                <div className=\"text-white font-semibold text-sm\">Sorted</div>\n                <div className=\"text-gray-400 text-xs\">In final position</div>\n              </div>\n            </motion.div>\n          </div>\n\n          {/* Additional Info */}\n          <motion.div\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            transition={{ delay: 0.6 }}\n            className=\"mt-6 pt-6 border-t border-gray-700/50\"\n          >\n            <div className=\"flex items-start gap-3 text-sm\">\n              <Zap className=\"w-4 h-4 text-cyan-400 mt-0.5 flex-shrink-0\" />\n              <p className=\"text-gray-400 leading-relaxed\">\n                Watch the bars change colors as the algorithm compares, swaps, and sorts elements. \n                <span className=\"text-cyan-300 font-semibold\"> Glowing effects</span> indicate active operations in real-time.\n              </p>\n            </div>\n          </motion.div>\n        </motion.div>\n      </div>\n    </div>\n  );\n}",
  "error": null,
  "overall_score": 46,
  "code_quality_score": 14,
  "architecture_score": 12,
  "performance_score": 11,
  "accessibility_score": 9,
  "metadata": {
    "document_id": "eval_room_705e87f13fa7",
    "prompt_category": "creative",
    "prompt_complexity": 9.0
  },
  "raw_response": {
    "document_id": "eval_room_705e87f13fa7",
    "mode": "parallel",
    "prompt": "Build a captivating algorithm visualizer with neon colored bars, smooth height transitions, glowing comparison indicators, trail effects during swaps, and a futuristic dashboard design with animated controls",
    "content": "import { useState, useCallback } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Slider } from '@/components/ui/slider';\nimport { Play, Pause, RotateCcw, Zap, BarChart3 } from 'lucide-react';\nimport { motion } from 'framer-motion';\n\ninterface ArrayElement {\n  value: number;\n  id: string;\n  isComparing?: boolean;\n  isSwapping?: boolean;\n  isSorted?: boolean;\n}\n\ninterface AlgorithmStep {\n  array: ArrayElement[];\n  comparingIndices: number[];\n  swappingIndices: number[];\n  sortedIndices: number[];\n}\n\ntype AlgorithmType = 'bubble' | 'quick' | 'merge' | 'insertion';\n\nconst NEON_COLORS = [\n  '#00ffff',\n  '#ff00ff', \n  '#00ff00',\n  '#ffff00',\n  '#ff0066',\n  '#00ffaa'\n];\n\nconst mockAlgorithms = [\n  { id: 'bubble', name: 'Bubble Sort', complexity: 'O(n\u00b2)' },\n  { id: 'quick', name: 'Quick Sort', complexity: 'O(n log n)' },\n  { id: 'merge', name: 'Merge Sort', complexity: 'O(n log n)' },\n  { id: 'insertion', name: 'Insertion Sort', complexity: 'O(n\u00b2)' }\n];\n\nexport default function AlgorithmVisualizer() {\n  const [array, setArray] = useState<ArrayElement[]>([]);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [speed, setSpeed] = useState([50]);\n  const [arraySize, setArraySize] = useState([20]);\n  const [selectedAlgorithm, setSelectedAlgorithm] = useState<AlgorithmType>('bubble');\n  const [currentStep, setCurrentStep] = useState(0);\n  const [steps, setSteps] = useState<AlgorithmStep[]>([]);\n\n  const generateRandomArray = useCallback(() => {\n    const newArray: ArrayElement[] = Array.from({ length: arraySize[0] }, (_, index) => ({\n      value: Math.floor(Math.random() * 100) + 5,\n      id: `element-${Date.now()}-${index}`,\n      isComparing: false,\n      isSwapping: false,\n      isSorted: false\n    }));\n    setArray(newArray);\n    setSteps([]);\n    setCurrentStep(0);\n    setIsPlaying(false);\n  }, [arraySize]);\n\n  const resetVisualization = useCallback(() => {\n\nsetIsPlaying(false);\n    setCurrentStep(0);\n    setSteps([]);\n    generateRandomArray();\n    }, [generateRandomArray]);\n\n  // Animation effect for step-by-step visualization\n  const animateSteps = useCallback(() => {\n    if (currentStep < steps.length && isPlaying) {\n      const step = steps[currentStep];\n      setArray(step.array);\n      setCurrentStep(prev => prev + 1);\n    } else if (currentStep >= steps.length) {\n      setIsPlaying(false);\n    }\n  }, [currentStep, steps, isPlaying]);\n\n  // Effect to control animation timing\n  React.useEffect(() => {\n    if (isPlaying && currentStep < steps.length) {\n      const delay = 1000 - speed[0] * 9.5; // Convert speed (0-100) to delay (1000ms-50ms)\n      const timer = setTimeout(animateSteps, delay);\n      return () => clearTimeout(timer);\n    }\n  }, [isPlaying, currentStep, steps.length, speed, animateSteps]);\n  const startVisualization = useCallback(() => {\n    if (steps.length === 0 || currentStep >= steps.length) return;\n    setIsPlaying(true);\n  }, [steps, speed, currentStep]);\n\n  const pauseVisualization = useCallback(() => {    setIsPlaying(false);\n\n    setIsPlaying(false);\n  }, []);\n\n  const generateSortingSteps = useCallback((algorithm: AlgorithmType) => {\n    const arr = [...array];\n    const newSteps: AlgorithmStep[] = [];\n    \n    const addStep = (comparingIndices: number[] = [], swappingIndices: number[] = [], sortedIndices: number[] = []) => {\n      newSteps.push({\n        array: arr.map((el, idx) => ({\n          ...el,\n          isComparing: comparingIndices.includes(idx),\n          isSwapping: swappingIndices.includes(idx),\n          isSorted: sortedIndices.includes(idx)\n        })),\n        comparingIndices,\n        swappingIndices,\n        sortedIndices\n      });\n    };\n\n    if (algorithm === 'bubble') {\n      const sorted: number[] = [];\n      for (let i = 0; i < arr.length; i++) {\n        for (let j = 0; j < arr.length - i - 1; j++) {\n          addStep([j, j + 1], [], sorted);\n          if (arr[j].value > arr[j + 1].value) {\n            addStep([j, j + 1], [j, j + 1], sorted);\n            [arr[j], arr[j + 1]] = [arr[j + 1], arr[j]];\n            addStep([], [], sorted);\n          }\n        }\n        sorted.push(arr.length - i - 1);\n        addStep([], [], sorted);\n      }\n    } else if (algorithm === 'insertion') {\n      const sorted: number[] = [0];\n      addStep([], [], sorted);\n      for (let i = 1; i < arr.length; i++) {\n        let j = i;\n        addStep([j], [], sorted);\n        while (j > 0 && arr[j - 1].value > arr[j].value) {\n          addStep([j - 1, j], [], sorted);\n          addStep([j - 1, j], [j - 1, j], sorted);\n          [arr[j - 1], arr[j]] = [arr[j], arr[j - 1]];\n          j--;\n          addStep([], [], sorted);\n        }\n        sorted.push(i);\n        addStep([], [], sorted);\n      }\n    } else if (algorithm === 'quick') {\n      const sorted: number[] = [];\n      const quickSort = (low: number, high: number) => {\n        if (low < high) {\n          const pivotIdx = partition(low, high);\n          sorted.push(pivotIdx);\n          addStep([], [], sorted);\n          quickSort(low, pivotIdx - 1);\n          quickSort(pivotIdx + 1, high);\n        } else if (low === high) {\n          sorted.push(low);\n          addStep([], [], sorted);\n        }\n      };\n      \n      const partition = (low: number, high: number): number => {\n        const pivot = arr[high].value;\n        addStep([high], [], sorted);\n        let i = low - 1;\n        for (let j = low; j < high; j++) {\n          addStep([j, high], [], sorted);\n          if (arr[j].value < pivot) {\n            i++;\n            if (i !== j) {\n              addStep([i, j], [i, j], sorted);\n              [arr[i], arr[j]] = [arr[j], arr[i]];\n              addStep([], [], sorted);\n            }\n          }\n        }\n        addStep([i + 1, high], [i + 1, high], sorted);\n        [arr[i + 1], arr[high]] = [arr[high], arr[i + 1]];\n        addStep([], [], sorted);\n        return i + 1;\n      };\n      \n      quickSort(0, arr.length - 1);\n    } else if (algorithm === 'merge') {\n      const sorted: number[] = [];\n      const mergeSort = (left: number, right: number) => {\n        if (left < right) {\n          const mid = Math.floor((left + right) / 2);\n          mergeSort(left, mid);\n          mergeSort(mid + 1, right);\n          merge(left, mid, right);\n        }\n      };\n      \n      const merge = (left: number, mid: number, right: number) => {\n        const leftArr = arr.slice(left, mid + 1);\n        const rightArr = arr.slice(mid + 1, right + 1);\n        let i = 0, j = 0, k = left;\n        \n        while (i < leftArr.length && j < rightArr.length) {\n          addStep([left + i, mid + 1 + j], [], sorted);\n          if (leftArr[i].value <= rightArr[j].value) {\n            arr[k] = leftArr[i];\n            i++;\n          } else {\n            addStep([k, mid + 1 + j], [k, mid + 1 + j], sorted);\n            arr[k] = rightArr[j];\n            j++;\n          }\n          k++;\n          addStep([], [], sorted);\n        }\n        \n        while (i < leftArr.length) {\n          arr[k] = leftArr[i];\n          i++;\n          k++;\n        }\n        \n        while (j < rightArr.length) {\n          arr[k] = rightArr[j];\n          j++;\n          k++;\n        }\n        \n        for (let idx = left; idx <= right; idx++) {\n          if (!sorted.includes(idx)) sorted.push(idx);\n        }\n        addStep([], [], sorted);\n      };\n      \n      mergeSort(0, arr.length - 1);\n    }\n    \n    setSteps(newSteps);\n    setCurrentStep(0);\n  }, [array]);\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-gray-900 via-purple-900 to-gray-900 p-8\">\n      <div className=\"max-w-7xl mx-auto space-y-8\">\n        <motion.div\n          initial={{ opacity: 0, y: -20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.8 }}\n          className=\"text-center space-y-4\"\n        >\n          <motion.h1\n            className=\"text-6xl font-bold bg-gradient-to-r from-cyan-400 via-purple-400 to-pink-400 bg-clip-text text-transparent\"\n            animate={{\n              textShadow: [\n                '0 0 20px rgba(0, 255, 255, 0.5)',\n                '0 0 40px rgba(255, 0, 255, 0.5)',\n                '0 0 20px rgba(0, 255, 255, 0.5)'\n              ]\n            }}\n            transition={{ duration: 2, repeat: Infinity }}\n          >\n            Algorithm Visualizer\n          </motion.h1>\n          \n          <div className=\"flex items-center justify-center gap-4\">\n            <motion.div\n              initial={{ scale: 0 }}\n              animate={{ scale: 1 }}\n              transition={{ delay: 0.3, type: 'spring' }}\n              className=\"px-6 py-2 bg-purple-500/20 border border-purple-400/50 rounded-full backdrop-blur-sm\"\n            >\n              <span className=\"text-2xl font-semibold text-purple-300\">\n                {mockAlgorithms.find(a => a.id === selectedAlgorithm)?.name || 'Bubble Sort'}\n              </span>\n            </motion.div>\n            \n            <motion.div\n              initial={{ scale: 0 }}\n              animate={{ scale: 1 }}\n              transition={{ delay: 0.5, type: 'spring' }}\n              className=\"px-4 py-2 bg-cyan-500/20 border border-cyan-400/50 rounded-full backdrop-blur-sm relative overflow-hidden\"\n            >\n              <motion.div\n                className=\"absolute inset-0 bg-gradient-to-r from-transparent via-cyan-400/20 to-transparent\"\n                animate={{ x: ['-100%', '200%'] }}\n                transition={{ duration: 2, repeat: Infinity, ease: 'linear' }}\n              />\n              <div className=\"relative flex items-center gap-2\">\n                <BarChart3 className=\"w-4 h-4 text-cyan-400\" />\n                <span className=\"text-sm font-mono text-cyan-300\">\n                  {mockAlgorithms.find(a => a.id === selectedAlgorithm)?.complexity || 'O(n\u00b2)'}\n                </span>\n              </div>\n            </motion.div>\n          </div>\n        </motion.div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-6\">\n          <div className=\"lg:col-span-1 space-y-6\">\n            <motion.div\n              initial={{ opacity: 0, x: -50 }}\n              animate={{ opacity: 1, x: 0 }}\n              transition={{ duration: 0.6 }}\n              className=\"bg-gray-900/50 backdrop-blur-lg border border-cyan-500/30 rounded-xl p-6 shadow-[0_0_30px_rgba(0,255,255,0.3)] hover:shadow-[0_0_50px_rgba(0,255,255,0.5)] transition-all duration-300\"\n            >\n              <div className=\"space-y-6\">\n                {/* Algorithm Selection */}\n                <div className=\"space-y-3\">\n                  <h3 className=\"text-cyan-400 font-semibold text-sm uppercase tracking-wider flex items-center gap-2\">\n                    <Zap className=\"w-4 h-4\" />\n                    Algorithm\n                  </h3>\n                  <div className=\"space-y-2\">\n                    {mockAlgorithms.map((algo) => (\n                      <button\n                        key={algo.id}\n                        onClick={() => setSelectedAlgorithm(algo.id as AlgorithmType)}\n                        disabled={isPlaying}\n                        className={`w-full text-left px-4 py-3 rounded-lg border transition-all duration-300 ${\n                          selectedAlgorithm === algo.id\n                            ? 'bg-cyan-500/20 border-cyan-400 shadow-[0_0_20px_rgba(0,255,255,0.4)] text-cyan-300'\n                            : 'bg-gray-800/50 border-gray-700 hover:border-cyan-500/50 text-gray-400 hover:text-cyan-300'\n                        } disabled:opacity-50 disabled:cursor-not-allowed`}\n                      >\n                        <div className=\"font-medium\">{algo.name}</div>\n                        <div className=\"text-xs opacity-70\">{algo.complexity}</div>\n                      </button>\n                    ))}\n                  </div>\n                </div>\n\n                {/* Array Size Control */}\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <h3 className=\"text-purple-400 font-semibold text-sm uppercase tracking-wider flex items-center gap-2\">\n                      <BarChart3 className=\"w-4 h-4\" />\n                      Array Size\n                    </h3>\n                    <span className=\"text-purple-300 font-mono text-lg\">{arraySize[0]}</span>\n                  </div>\n                  <Slider\n                    value={arraySize}\n                    onValueChange={setArraySize}\n                    min={5}\n                    max={50}\n                    step={1}\n                    disabled={isPlaying}\n                    className=\"cursor-pointer\"\n                  />\n                </div>\n\n                {/* Speed Control */}\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <h3 className=\"text-pink-400 font-semibold text-sm uppercase tracking-wider flex items-center gap-2\">\n                      <Zap className=\"w-4 h-4\" />\n                      Speed\n                    </h3>\n                    <span className=\"text-pink-300 font-mono text-lg\">{speed[0]}%</span>\n                  </div>\n                  <Slider\n                    value={speed}\n                    onValueChange={setSpeed}\n                    min={10}\n                    max={100}\n                    step={10}\n                    className=\"cursor-pointer\"\n                  />\n                </div>\n\n                {/* Control Buttons */}\n                <div className=\"space-y-3 pt-4 border-t border-gray-700/50\">\n                  <Button\n                    onClick={isPlaying ? pauseVisualization : startVisualization}\n                    disabled={steps.length === 0 || (currentStep >= steps.length && !isPlaying)}\n                    className=\"w-full bg-gradient-to-r from-cyan-500 to-blue-500 hover:from-cyan-400 hover:to-blue-400 text-white font-semibold py-6 rounded-lg shadow-[0_0_20px_rgba(0,255,255,0.5)] hover:shadow-[0_0_30px_rgba(0,255,255,0.7)] transition-all duration-300 disabled:opacity-50 disabled:cursor-not-allowed\"\n                  >\n                    {isPlaying ? (\n                      <>\n                        <Pause className=\"w-5 h-5 mr-2\" />\n                        Pause\n                      </>\n                    ) : (\n                      <>\n                        <Play className=\"w-5 h-5 mr-2\" />\n                        {currentStep >= steps.length && steps.length > 0 ? 'Replay' : 'Start'}\n                      </>\n                    )}\n                  </Button>\n\n                  <Button\n                    onClick={resetVisualization}\n                    disabled={isPlaying}\n                    className=\"w-full bg-gradient-to-r from-purple-500 to-pink-500 hover:from-purple-400 hover:to-pink-400 text-white font-semibold py-6 rounded-lg shadow-[0_0_20px_rgba(255,0,255,0.5)] hover:shadow-[0_0_30px_rgba(255,0,255,0.7)] transition-all duration-300 disabled:opacity-50 disabled:cursor-not-allowed\"\n                  >\n                    <RotateCcw className=\"w-5 h-5 mr-2\" />\n                    Reset\n                  </Button>\n\n                  <Button\n                    onClick={() => generateSortingSteps(selectedAlgorithm)}\n                    disabled={isPlaying || array.length === 0}\n                    className=\"w-full bg-gradient-to-r from-green-500 to-emerald-500 hover:from-green-400 hover:to-emerald-400 text-white font-semibold py-6 rounded-lg shadow-[0_0_20px_rgba(0,255,170,0.5)] hover:shadow-[0_0_30px_rgba(0,255,170,0.7)] transition-all duration-300 disabled:opacity-50 disabled:cursor-not-allowed\"\n                  >\n                    <Zap className=\"w-5 h-5 mr-2\" />\n                    Generate Steps\n                  </Button>\n                </div>\n\n                {/* Stats Display */}\n                <div className=\"pt-4 border-t border-gray-700/50 space-y-2\">\n                  <div className=\"flex justify-between items-center text-sm\">\n                    <span className=\"text-gray-400\">Current Step:</span>\n                    <span className=\"text-cyan-300 font-mono font-semibold\">{currentStep} / {steps.length}</span>\n                  </div>\n                  <div className=\"flex justify-between items-center text-sm\">\n                    <span className=\"text-gray-400\">Array Length:</span>\n                    <span className=\"text-purple-300 font-mono font-semibold\">{array.length}</span>\n                  </div>\n                </div>\n              </div>\n            </motion.div>\n            \n            <div className=\"bg-gray-900/50 backdrop-blur-lg border border-cyan-500/30 rounded-xl p-6 shadow-2xl shadow-cyan-500/20\">\n              <div className=\"space-y-6\">\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center gap-2 text-cyan-400\">\n                    <Zap className=\"w-4 h-4\" />\n                    <span className=\"text-sm font-semibold tracking-wider\">ALGORITHM</span>\n                  </div>\n                  <div className=\"grid grid-cols-1 gap-3\">\n                    {mockAlgorithms.map((algo) => (\n                      <motion.button\n                        key={algo.id}\n                        onClick={() => setSelectedAlgorithm(algo.id as AlgorithmType)}\n                        className={`relative p-4 rounded-lg border-2 transition-all duration-300 text-left ${\n                          selectedAlgorithm === algo.id\n                            ? 'border-cyan-400 bg-cyan-500/20 shadow-lg shadow-cyan-500/50'\n                            : 'border-gray-700 bg-gray-800/50 hover:border-cyan-500/50 hover:bg-cyan-500/10'\n                        }`}\n                        whileHover={{ scale: 1.02 }}\n                        whileTap={{ scale: 0.98 }}\n                      >\n                        <div className=\"space-y-1\">\n                          <div className=\"font-semibold text-white\">{algo.name}</div>\n                          <div className={`text-xs ${\n                            selectedAlgorithm === algo.id ? 'text-cyan-300' : 'text-gray-400'\n                          }`}>\n                            {algo.complexity}\n                          </div>\n                        </div>\n                        {selectedAlgorithm === algo.id && (\n                          <motion.div\n                            className=\"absolute inset-0 rounded-lg border-2 border-cyan-400\"\n                            initial={{ opacity: 0 }}\n                            animate={{ opacity: [0.5, 1, 0.5] }}\n                            transition={{ duration: 2, repeat: Infinity }}\n                          />\n                        )}\n                      </motion.button>\n                    ))}\n                  </div>\n                </div>\n\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <label className=\"text-cyan-400 text-sm font-medium flex items-center gap-2\">\n                      <Zap className=\"w-4 h-4\" />\n                      Speed\n                    </label>\n                    <span className=\"text-cyan-300 text-xs\">{speed[0]}ms</span>\n                  </div>\n                  <Slider\n                    value={speed}\n                    onValueChange={setSpeed}\n                    min={10}\n                    max={200}\n                    step={10}\n                    className=\"[&_[role=slider]]:bg-cyan-400 [&_[role=slider]]:border-cyan-300 [&_[role=slider]]:shadow-[0_0_15px_rgba(34,211,238,0.8)] [&_[role=slider]]:hover:shadow-[0_0_25px_rgba(34,211,238,1)] [&_[role=slider]]:transition-shadow [&_.relative]:bg-gray-700/50 [&_.relative]:border [&_.relative]:border-cyan-500/30 [&_.bg-primary]:bg-gradient-to-r [&_.bg-primary]:from-cyan-500 [&_.bg-primary]:to-purple-500 [&_.bg-primary]:shadow-[0_0_10px_rgba(34,211,238,0.5)]\"\n                  /></parameter>\n                </div>\n\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <label className=\"text-cyan-400 text-sm font-medium flex items-center gap-2\">\n                      <BarChart3 className=\"w-4 h-4\" />\n                      Array Size\n                    </label>\n                    <span className=\"text-cyan-300 text-xs\">{arraySize[0]}</span>\n                  </div>\n                  <Slider\n                    value={arraySize}\n                    onValueChange={setArraySize}\n                    min={5}\n                    max={50}\n                    step={1}\n                    className=\"[&_[role=slider]]:bg-gradient-to-r [&_[role=slider]]:from-purple-500 [&_[role=slider]]:to-pink-500 [&_[role=slider]]:border-2 [&_[role=slider]]:border-purple-300 [&_[role=slider]]:shadow-lg [&_[role=slider]]:shadow-purple-500/50 [&_[role=slider]]:transition-all [&_[role=slider]]:hover:shadow-purple-500/80 [&_[role=slider]]:hover:scale-110 [&>span]:bg-gradient-to-r [&>span]:from-purple-500/30 [&>span]:to-pink-500/30 [&>span]:h-2\"\n                  />\n                </div>\n\n                <div className=\"flex gap-3 pt-4\">\n                  <motion.button\n                    onClick={isPlaying ? pauseVisualization : startVisualization}\n                    disabled={array.length === 0 || (steps.length === 0 && !isPlaying)}\n                    whileHover={{ scale: 1.05 }}\n                    whileTap={{ scale: 0.95 }}\n                    className={`flex-1 relative px-6 py-3 rounded-lg font-semibold text-white overflow-hidden transition-all duration-300 ${\n                      array.length === 0 || (steps.length === 0 && !isPlaying)\n                        ? 'bg-gray-700 border border-gray-600 cursor-not-allowed opacity-50'\n                        : isPlaying\n                        ? 'bg-gradient-to-r from-orange-500 to-red-500 border-2 border-orange-400 shadow-[0_0_30px_rgba(255,165,0,0.6)]'\n                        : 'bg-gradient-to-r from-cyan-500 to-blue-500 border-2 border-cyan-400 shadow-[0_0_30px_rgba(0,255,255,0.6)]'\n                    }`}\n                  >\n                    <motion.div\n                      className=\"absolute inset-0 bg-gradient-to-r from-transparent via-white/20 to-transparent\"\n                      animate={{\n                        x: isPlaying ? ['-100%', '200%'] : '-100%'\n                      }}\n                      transition={{\n                        duration: 1.5,\n                        repeat: isPlaying ? Infinity : 0,\n                        ease: 'linear'\n                      }}\n                    />\n                    <span className=\"relative flex items-center justify-center gap-2\">\n                      <motion.div\n                        key={isPlaying ? 'pause' : 'play'}\n                        initial={{ scale: 0, rotate: -180 }}\n                        animate={{ scale: 1, rotate: 0 }}\n                        exit={{ scale: 0, rotate: 180 }}\n                        transition={{ type: 'spring', stiffness: 200, damping: 15 }}\n                      >\n                        {isPlaying ? (\n                          <Pause className=\"w-5 h-5\" fill=\"currentColor\" />\n                        ) : (\n                          <Play className=\"w-5 h-5\" fill=\"currentColor\" />\n                        )}\n                      </motion.div>\n                      {isPlaying ? 'Pause' : 'Play'}\n                    </span>\n                  </motion.button>\n                  {/* TODO:ResetButton Glowing reset button with rotation animation on click */}\n                </div>\n              </div>\n            </div>\n\n            <motion.div\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ duration: 0.6, delay: 0.2 }}\n              className=\"bg-gray-900/50 backdrop-blur-lg border border-purple-500/30 rounded-xl p-6 shadow-[0_0_30px_rgba(168,85,247,0.3)] hover:shadow-[0_0_50px_rgba(168,85,247,0.5)] transition-all duration-300\"\n            >\n              <h3 className=\"text-purple-400 font-semibold text-sm uppercase tracking-wider flex items-center gap-2 mb-4\">\n                <BarChart3 className=\"w-4 h-4\" />\n                Statistics\n              </h3>\n              \n              <div className=\"grid grid-cols-1 gap-4\">\n                {/* Comparisons Counter */}\n                <div className=\"relative overflow-hidden bg-gradient-to-br from-cyan-500/10 to-cyan-500/5 border border-cyan-500/30 rounded-lg p-4 group hover:border-cyan-400/50 transition-all duration-300\">\n                  <motion.div\n                    className=\"absolute inset-0 bg-gradient-to-r from-transparent via-cyan-400/10 to-transparent\"\n                    animate={{ x: ['-100%', '200%'] }}\n                    transition={{ duration: 3, repeat: Infinity, ease: 'linear' }}\n                  />\n                  <div className=\"relative space-y-1\">\n                    <div className=\"text-xs text-cyan-400/70 uppercase tracking-wider font-medium\">Comparisons</div>\n                    <div className=\"flex items-baseline gap-2\">\n                      <motion.span\n                        key={currentStep}\n                        initial={{ scale: 1.2, color: '#00ffff' }}\n                        animate={{ scale: 1, color: '#67e8f9' }}\n                        className=\"text-3xl font-bold text-cyan-300 font-mono\"\n                      >\n                        {steps.slice(0, currentStep).filter(s => s.comparingIndices.length > 0).length}\n                      </motion.span>\n                      <span className=\"text-sm text-cyan-400/50\">ops</span>\n                    </div>\n                  </div>\n                  <motion.div\n                    className=\"absolute top-2 right-2 w-2 h-2 bg-cyan-400 rounded-full\"\n                    animate={{\n                      boxShadow: [\n                        '0 0 5px rgba(0, 255, 255, 0.5)',\n                        '0 0 20px rgba(0, 255, 255, 1)',\n                        '0 0 5px rgba(0, 255, 255, 0.5)'\n                      ]\n                    }}\n                    transition={{ duration: 1.5, repeat: Infinity }}\n                  />\n                </div>\n\n                {/* Swaps Counter */}\n                <div className=\"relative overflow-hidden bg-gradient-to-br from-pink-500/10 to-pink-500/5 border border-pink-500/30 rounded-lg p-4 group hover:border-pink-400/50 transition-all duration-300\">\n                  <motion.div\n                    className=\"absolute inset-0 bg-gradient-to-r from-transparent via-pink-400/10 to-transparent\"\n                    animate={{ x: ['-100%', '200%'] }}\n                    transition={{ duration: 3, repeat: Infinity, ease: 'linear', delay: 0.5 }}\n                  />\n                  <div className=\"relative space-y-1\">\n                    <div className=\"text-xs text-pink-400/70 uppercase tracking-wider font-medium\">Swaps</div>\n                    <div className=\"flex items-baseline gap-2\">\n                      <motion.span\n                        key={`swap-${currentStep}`}\n                        initial={{ scale: 1.2, color: '#ff0066' }}\n                        animate={{ scale: 1, color: '#f9a8d4' }}\n                        className=\"text-3xl font-bold text-pink-300 font-mono\"\n                      >\n                        {steps.slice(0, currentStep).filter(s => s.swappingIndices.length > 0).length}\n                      </motion.span>\n                      <span className=\"text-sm text-pink-400/50\">ops</span>\n                    </div>\n                  </div>\n                  <motion.div\n                    className=\"absolute top-2 right-2 w-2 h-2 bg-pink-400 rounded-full\"\n                    animate={{\n                      boxShadow: [\n                        '0 0 5px rgba(255, 0, 102, 0.5)',\n                        '0 0 20px rgba(255, 0, 102, 1)',\n                        '0 0 5px rgba(255, 0, 102, 0.5)'\n                      ]\n                    }}\n                    transition={{ duration: 1.5, repeat: Infinity, delay: 0.3 }}\n                  />\n                </div>\n\n                {/* Progress Indicator */}\n                <div className=\"relative overflow-hidden bg-gradient-to-br from-purple-500/10 to-purple-500/5 border border-purple-500/30 rounded-lg p-4 group hover:border-purple-400/50 transition-all duration-300\">\n                  <motion.div\n                    className=\"absolute inset-0 bg-gradient-to-r from-transparent via-purple-400/10 to-transparent\"\n                    animate={{ x: ['-100%', '200%'] }}\n                    transition={{ duration: 3, repeat: Infinity, ease: 'linear', delay: 1 }}\n                  />\n                  <div className=\"relative space-y-2\">\n                    <div className=\"text-xs text-purple-400/70 uppercase tracking-wider font-medium\">Progress</div>\n                    <div className=\"flex items-baseline gap-2\">\n                      <motion.span\n                        key={`progress-${currentStep}`}\n                        initial={{ scale: 1.2 }}\n                        animate={{ scale: 1 }}\n                        className=\"text-3xl font-bold text-purple-300 font-mono\"\n                      >\n                        {steps.length > 0 ? Math.round((currentStep / steps.length) * 100) : 0}\n                      </motion.span>\n                      <span className=\"text-sm text-purple-400/50\">%</span>\n                    </div>\n                    <div className=\"w-full bg-gray-800/50 rounded-full h-2 overflow-hidden border border-purple-500/20\">\n                      <motion.div\n                        className=\"h-full bg-gradient-to-r from-purple-500 via-pink-500 to-cyan-500 rounded-full relative\"\n                        initial={{ width: '0%' }}\n                        animate={{ \n                          width: steps.length > 0 ? `${(currentStep / steps.length) * 100}%` : '0%'\n                        }}\n                        transition={{ duration: 0.3 }}\n                      >\n                        <motion.div\n                          className=\"absolute inset-0 bg-gradient-to-r from-transparent via-white/30 to-transparent\"\n                          animate={{ x: ['-100%', '200%'] }}\n                          transition={{ duration: 1, repeat: Infinity, ease: 'linear' }}\n                        />\n                      </motion.div>\n                    </div>\n                  </div>\n                  <motion.div\n                    className=\"absolute top-2 right-2 w-2 h-2 bg-purple-400 rounded-full\"\n                    animate={{\n                      boxShadow: [\n                        '0 0 5px rgba(168, 85, 247, 0.5)',\n                        '0 0 20px rgba(168, 85, 247, 1)',\n                        '0 0 5px rgba(168, 85, 247, 0.5)'\n                      ]\n                    }}\n                    transition={{ duration: 1.5, repeat: Infinity, delay: 0.6 }}\n                  />\n                </div>\n\n                {/* Current Step */}\n                <div className=\"relative overflow-hidden bg-gradient-to-br from-green-500/10 to-green-500/5 border border-green-500/30 rounded-lg p-4 group hover:border-green-400/50 transition-all duration-300\">\n                  <div className=\"relative space-y-1\">\n                    <div className=\"text-xs text-green-400/70 uppercase tracking-wider font-medium\">Current Step</div>\n                    <div className=\"flex items-baseline gap-2\">\n                      <motion.span\n                        key={`step-${currentStep}`}\n                        initial={{ scale: 1.2, color: '#00ff00' }}\n                        animate={{ scale: 1, color: '#86efac' }}\n                        className=\"text-3xl font-bold text-green-300 font-mono\"\n                      >\n                        {currentStep}\n                      </motion.span>\n                      <span className=\"text-sm text-green-400/50\">/ {steps.length}</span>\n                    </div>\n                  </div>\n                  {isPlaying && (\n                    <motion.div\n                      className=\"absolute top-2 right-2 w-2 h-2 bg-green-400 rounded-full\"\n                      animate={{\n                        scale: [1, 1.5, 1],\n                        boxShadow: [\n                          '0 0 5px rgba(0, 255, 0, 0.5)',\n                          '0 0 20px rgba(0, 255, 0, 1)',\n                          '0 0 5px rgba(0, 255, 0, 0.5)'\n                        ]\n                      }}\n                      transition={{ duration: 1, repeat: Infinity }}\n                    />\n                  )}\n                </div>\n              </div>\n            </motion.div>\n          </div>\n\n          <div className=\"lg:col-span-3\">\n            <div className=\"bg-gray-900/50 backdrop-blur-lg border border-purple-500/30 rounded-xl p-8 shadow-2xl shadow-purple-500/20 min-h-[600px]\">\n                            {array.length === 0 ? (\n                <motion.div\n                  initial={{ opacity: 0, scale: 0.8 }}\n                  animate={{ opacity: 1, scale: 1 }}\n                  transition={{ duration: 0.6 }}\n                  className=\"absolute inset-0 flex flex-col items-center justify-center space-y-6\"\n                >\n                  <motion.div\n                    animate={{\n                      rotate: [0, 360],\n                      scale: [1, 1.2, 1]\n                    }}\n                    transition={{\n                      duration: 3,\n                      repeat: Infinity,\n                      ease: \"easeInOut\"\n                    }}\n                  >\n                    <BarChart3 className=\"w-24 h-24 text-purple-400/50\" />\n                  </motion.div>\n                  <div className=\"text-center space-y-2\">\n                    <h3 className=\"text-2xl font-bold text-purple-300\">Ready to Visualize</h3>\n                    <p className=\"text-gray-400\">Generate an array to begin</p>\n                  </div>\n                  <motion.div\n                    animate={{\n                      boxShadow: [\n                        '0 0 20px rgba(168, 85, 247, 0.4)',\n                        '0 0 40px rgba(168, 85, 247, 0.6)',\n                        '0 0 20px rgba(168, 85, 247, 0.4)'\n                      ]\n                    }}\n                    transition={{ duration: 2, repeat: Infinity }}\n                    className=\"px-6 py-3 bg-purple-500/20 border border-purple-400/50 rounded-lg\"\n                  >\n                    <span className=\"text-purple-300 font-medium\">Click \"Generate Array\" to start</span>\n                  </motion.div>\n                </motion.div>\n              ) : (\n                <div className=\"relative w-full h-full flex items-end justify-center gap-1 px-4\">\n                  {array.map((element, index) => {\n                    const maxValue = Math.max(...array.map(el => el.value));\n                    const heightPercentage = (element.value / maxValue) * 100;\n                    const barColor = element.isSorted\n                      ? '#00ff00'\n                      : element.isSwapping\n                      ? '#ff0066'\n                      : element.isComparing\n                      ? '#ffff00'\n                      : NEON_COLORS[index % NEON_COLORS.length];\n\n                    return (\n                      <motion.div\n                        key={element.id}\n                        layout\n                        initial={{ height: 0, opacity: 0 }}\n                        animate={{\n                          height: `${heightPercentage}%`,\n                          opacity: 1,\n                          scale: element.isSwapping ? 1.1 : element.isComparing ? 1.05 : 1\n                        }}\n                        transition={{\n                          height: { duration: 0.3, ease: \"easeOut\" },\n                          scale: { duration: 0.2 },\n                          layout: { duration: 0.5, ease: \"easeInOut\" }\n                        }}\n                        className=\"relative flex-1 min-w-[8px] max-w-[60px] rounded-t-lg\"\n                        style={{\n                          backgroundColor: barColor,\n                          boxShadow: `0 0 ${element.isSwapping ? '30px' : element.isComparing ? '20px' : '10px'} ${barColor}`,\n                          border: `1px solid ${barColor}`\n                        }}\n                      >\n                        {/* Glow effect overlay */}\n                        <motion.div\n                          className=\"absolute inset-0 rounded-t-lg\"\n                          animate={{\n                            opacity: element.isSwapping || element.isComparing ? [0.3, 0.7, 0.3] : 0\n                          }}\n                          transition={{ duration: 0.5, repeat: element.isSwapping || element.isComparing ? Infinity : 0 }}\n                          style={{\n                            background: `linear-gradient(to top, transparent, ${barColor})`\n                          }}\n                        />\n\n                        {/* Swap trail effect */}\n                        {element.isSwapping && (\n                          <>\n                            <motion.div\n                              className=\"absolute inset-0 rounded-t-lg\"\n                              initial={{ opacity: 0, scale: 1 }}\n                              animate={{ opacity: [0.8, 0], scale: [1, 1.5] }}\n                              transition={{ duration: 0.6, repeat: Infinity }}\n                              style={{\n                                border: `2px solid ${barColor}`,\n                                boxShadow: `0 0 20px ${barColor}`\n                              }}\n                            />\n                            <motion.div\n                              className=\"absolute -top-8 left-1/2 transform -translate-x-1/2\"\n                              animate={{\n                                y: [-10, 0, -10],\n                                opacity: [0.5, 1, 0.5]\n                              }}\n                              transition={{ duration: 0.8, repeat: Infinity }}\n                            >\n                              <div className=\"w-2 h-2 rounded-full\" style={{ backgroundColor: barColor, boxShadow: `0 0 10px ${barColor}` }} />\n                            </motion.div>\n                          </>\n                        )}\n\n                        {/* Comparison indicator */}\n                        {element.isComparing && !element.isSwapping && (\n                          <motion.div\n                            className=\"absolute -top-6 left-1/2 transform -translate-x-1/2\"\n                            initial={{ opacity: 0, y: 10 }}\n                            animate={{ opacity: 1, y: 0 }}\n                            exit={{ opacity: 0 }}\n                          >\n                            <motion.div\n                              animate={{\n                                scale: [1, 1.3, 1],\n                                rotate: [0, 180, 360]\n                              }}\n                              transition={{ duration: 1, repeat: Infinity }}\n                              className=\"w-3 h-3 border-2 rounded-full\"\n                              style={{ borderColor: barColor, boxShadow: `0 0 10px ${barColor}` }}\n                            />\n                          </motion.div>\n                        )}\n\n                        {/* Sorted checkmark */}\n                        {element.isSorted && (\n                          <motion.div\n                            className=\"absolute -top-8 left-1/2 transform -translate-x-1/2\"\n                            initial={{ scale: 0, rotate: -180 }}\n                            animate={{ scale: 1, rotate: 0 }}\n                            transition={{ type: \"spring\", stiffness: 200, damping: 10 }}\n                          >\n                            <div className=\"w-6 h-6 rounded-full bg-green-500/20 border-2 border-green-400 flex items-center justify-center\"\n                              style={{ boxShadow: '0 0 15px rgba(0, 255, 0, 0.6)' }}\n                            >\n                              <svg className=\"w-3 h-3 text-green-400\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={3} d=\"M5 13l4 4L19 7\" />\n                              </svg>\n                            </div>\n                          </motion.div>\n                        )}\n\n                        {/* Value label */}\n                        {array.length <= 30 && (\n                          <motion.div\n                            className=\"absolute bottom-2 left-1/2 transform -translate-x-1/2 text-xs font-bold text-white/90\"\n                            style={{ textShadow: `0 0 5px ${barColor}` }}\n                            animate={{\n                              scale: element.isSwapping || element.isComparing ? [1, 1.2, 1] : 1\n                            }}\n                            transition={{ duration: 0.3 }}\n                          >\n                            {element.value}\n                          </motion.div>\n                        )}\n\n                        {/* Particle effects for swapping */}\n                        {element.isSwapping && (\n                          <>\n                            {[...Array(3)].map((_, i) => (\n                              <motion.div\n                                key={i}\n                                className=\"absolute top-0 left-1/2 w-1 h-1 rounded-full\"\n                                style={{ backgroundColor: barColor }}\n                                initial={{ x: 0, y: 0, opacity: 1 }}\n                                animate={{\n                                  x: [0, (Math.random() - 0.5) * 40],\n                                  y: [0, -30 - Math.random() * 20],\n                                  opacity: [1, 0]\n                                }}\n                                transition={{\n                                  duration: 0.8,\n                                  repeat: Infinity,\n                                  delay: i * 0.2\n                                }}\n                              />\n                            ))}\n                          </>\n                        )}\n                      </motion.div>\n                    );\n                  })}\n                </div>\n              )}\n              \n              <div className=\"relative h-full flex items-end justify-center gap-1\">\n                \n              </div>\n            </div>\n\n                        <motion.div\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ duration: 0.6, delay: 0.2 }}\n              className=\"mt-6 space-y-3\"\n            >\n              <div className=\"flex items-center justify-between text-sm\">\n                <span className=\"text-purple-300 font-medium\">Sorting Progress</span>\n                <span className=\"text-cyan-300 font-mono\">\n                  {steps.length > 0 ? Math.round((currentStep / steps.length) * 100) : 0}%\n                </span>\n              </div>\n              \n              <div className=\"relative h-3 bg-gray-800/80 rounded-full overflow-hidden border border-purple-500/30 shadow-inner\">\n                <motion.div\n                  className=\"absolute inset-y-0 left-0 bg-gradient-to-r from-cyan-500 via-purple-500 to-pink-500 rounded-full shadow-[0_0_20px_rgba(168,85,247,0.8)]\"\n                  initial={{ width: '0%' }}\n                  animate={{ \n                    width: steps.length > 0 ? `${(currentStep / steps.length) * 100}%` : '0%'\n                  }}\n                  transition={{ duration: 0.3, ease: 'easeOut' }}\n                />\n                \n                <motion.div\n                  className=\"absolute inset-0 bg-gradient-to-r from-transparent via-white/30 to-transparent\"\n                  animate={{ \n                    x: ['-100%', '200%'],\n                    opacity: steps.length > 0 && currentStep < steps.length ? [0.5, 1, 0.5] : 0\n                  }}\n                  transition={{ \n                    x: { duration: 1.5, repeat: Infinity, ease: 'linear' },\n                    opacity: { duration: 1, repeat: Infinity }\n                  }}\n                  style={{ width: '50%' }}\n                />\n              </div>\n              \n              <div className=\"flex items-center justify-between text-xs text-gray-400\">\n                <span>Step {currentStep} of {steps.length}</span>\n                {currentStep >= steps.length && steps.length > 0 && (\n                  <motion.span\n                    initial={{ opacity: 0, scale: 0.8 }}\n                    animate={{ opacity: 1, scale: 1 }}\n                    className=\"text-green-400 font-semibold flex items-center gap-1\"\n                  >\n                    <motion.span\n                      animate={{ scale: [1, 1.2, 1] }}\n                      transition={{ duration: 0.5, repeat: Infinity }}\n                    >\n                      \u2713\n                    </motion.span>\n                    Complete\n                  </motion.span>\n                )}\n              </div>\n            </motion.div>\n          </div>\n        </div>\n\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.8, delay: 0.4 }}\n          className=\"bg-gray-900/50 backdrop-blur-lg border border-cyan-500/30 rounded-xl p-6 shadow-[0_0_30px_rgba(0,255,255,0.2)]\"\n        >\n          <div className=\"flex items-center gap-2 mb-6\">\n            <BarChart3 className=\"w-5 h-5 text-cyan-400\" />\n            <h3 className=\"text-cyan-400 font-semibold text-lg uppercase tracking-wider\">\n              Legend\n            </h3>\n          </div>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n            {/* Default State */}\n            <motion.div\n              whileHover={{ scale: 1.05 }}\n              className=\"flex items-center gap-3 p-4 bg-gray-800/50 rounded-lg border border-gray-700/50 hover:border-gray-600 transition-all duration-300\"\n            >\n              <motion.div\n                className=\"w-6 h-12 rounded bg-gradient-to-t from-cyan-500 to-cyan-300 shadow-[0_0_15px_rgba(0,255,255,0.6)]\"\n                animate={{\n                  boxShadow: [\n                    '0 0 15px rgba(0,255,255,0.6)',\n                    '0 0 25px rgba(0,255,255,0.8)',\n                    '0 0 15px rgba(0,255,255,0.6)'\n                  ]\n                }}\n                transition={{ duration: 2, repeat: Infinity }}\n              />\n              <div>\n                <div className=\"text-white font-semibold text-sm\">Default</div>\n                <div className=\"text-gray-400 text-xs\">Unsorted element</div>\n              </div>\n            </motion.div>\n\n            {/* Comparing State */}\n            <motion.div\n              whileHover={{ scale: 1.05 }}\n              className=\"flex items-center gap-3 p-4 bg-gray-800/50 rounded-lg border border-yellow-500/30 hover:border-yellow-500/50 transition-all duration-300\"\n            >\n              <motion.div\n                className=\"w-6 h-12 rounded bg-gradient-to-t from-yellow-500 to-yellow-300 shadow-[0_0_20px_rgba(255,255,0,0.8)]\"\n                animate={{\n                  boxShadow: [\n                    '0 0 20px rgba(255,255,0,0.8)',\n                    '0 0 35px rgba(255,255,0,1)',\n                    '0 0 20px rgba(255,255,0,0.8)'\n                  ],\n                  scale: [1, 1.1, 1]\n                }}\n                transition={{ duration: 1.5, repeat: Infinity }}\n              />\n              <div>\n                <div className=\"text-white font-semibold text-sm\">Comparing</div>\n                <div className=\"text-gray-400 text-xs\">Being compared</div>\n              </div>\n            </motion.div>\n\n            {/* Swapping State */}\n            <motion.div\n              whileHover={{ scale: 1.05 }}\n              className=\"flex items-center gap-3 p-4 bg-gray-800/50 rounded-lg border border-pink-500/30 hover:border-pink-500/50 transition-all duration-300\"\n            >\n              <motion.div\n                className=\"w-6 h-12 rounded bg-gradient-to-t from-pink-500 to-pink-300 shadow-[0_0_20px_rgba(255,0,255,0.8)]\"\n                animate={{\n                  boxShadow: [\n                    '0 0 20px rgba(255,0,255,0.8)',\n                    '0 0 40px rgba(255,0,255,1)',\n                    '0 0 20px rgba(255,0,255,0.8)'\n                  ],\n                  x: [-2, 2, -2]\n                }}\n                transition={{ duration: 1, repeat: Infinity }}\n              />\n              <div>\n                <div className=\"text-white font-semibold text-sm\">Swapping</div>\n                <div className=\"text-gray-400 text-xs\">Exchanging positions</div>\n              </div>\n            </motion.div>\n\n            {/* Sorted State */}\n            <motion.div\n              whileHover={{ scale: 1.05 }}\n              className=\"flex items-center gap-3 p-4 bg-gray-800/50 rounded-lg border border-green-500/30 hover:border-green-500/50 transition-all duration-300\"\n            >\n              <motion.div\n                className=\"w-6 h-12 rounded bg-gradient-to-t from-green-500 to-green-300 shadow-[0_0_20px_rgba(0,255,0,0.8)]\"\n                animate={{\n                  boxShadow: [\n                    '0 0 20px rgba(0,255,0,0.8)',\n                    '0 0 30px rgba(0,255,0,1)',\n                    '0 0 20px rgba(0,255,0,0.8)'\n                  ]\n                }}\n                transition={{ duration: 2, repeat: Infinity }}\n              />\n              <div>\n                <div className=\"text-white font-semibold text-sm\">Sorted</div>\n                <div className=\"text-gray-400 text-xs\">In final position</div>\n              </div>\n            </motion.div>\n          </div>\n\n          {/* Additional Info */}\n          <motion.div\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            transition={{ delay: 0.6 }}\n            className=\"mt-6 pt-6 border-t border-gray-700/50\"\n          >\n            <div className=\"flex items-start gap-3 text-sm\">\n              <Zap className=\"w-4 h-4 text-cyan-400 mt-0.5 flex-shrink-0\" />\n              <p className=\"text-gray-400 leading-relaxed\">\n                Watch the bars change colors as the algorithm compares, swaps, and sorts elements. \n                <span className=\"text-cyan-300 font-semibold\"> Glowing effects</span> indicate active operations in real-time.\n              </p>\n            </div>\n          </motion.div>\n        </motion.div>\n      </div>\n    </div>\n  );\n}",
    "error": null,
    "elapsed_time": 84.38185930252075,
    "success": true
  }
}