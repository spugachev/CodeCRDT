{
  "prompt_id": "markdown_editor",
  "prompt_name": "Premium Markdown Editor",
  "mode": "parallel",
  "run_number": 38,
  "timestamp": "2025-10-13T19:30:58.840463",
  "response_time": 64.32056093215942,
  "total_tokens": null,
  "response_content": "import { useState, useCallback } from 'react';\nimport { useRef } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Bold, Italic, Code, List, ListOrdered, Link, Image, Eye, EyeOff } from 'lucide-react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport ReactMarkdown from 'react-markdown';\nimport { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';\nimport { vscDarkPlus } from 'react-syntax-highlighter/dist/esm/styles/prism';\n\ninterface ToolbarButton {\n  id: string;\n  icon: any;\n  label: string;\n  action: string;\n}\n\nconst toolbarButtons: ToolbarButton[] = [\n  { id: 'bold', icon: Bold, label: 'Bold', action: '**text**' },\n  { id: 'italic', icon: Italic, label: 'Italic', action: '*text*' },\n  { id: 'code', icon: Code, label: 'Code', action: '`code`' },\n  { id: 'list', icon: List, label: 'Bullet List', action: '- item' },\n  { id: 'ordered', icon: ListOrdered, label: 'Numbered List', action: '1. item' },\n  { id: 'link', icon: Link, label: 'Link', action: '[text](url)' },\n  { id: 'image', icon: Image, label: 'Image', action: '![alt](url)' }\n];\n\n// Markdown Preview Component with VS Code styling\nconst MarkdownPreview = ({ content }: { content: string }) => {\n  return (\n    <ReactMarkdown\n      className=\"prose prose-invert max-w-none\"\n      components={{\n        h1: ({ node, ...props }) => (\n          <h1 className=\"text-4xl font-bold mb-4 mt-6 text-blue-400 border-b border-[#30363d] pb-2\" {...props} />\n        ),\n        h2: ({ node, ...props }) => (\n          <h2 className=\"text-3xl font-bold mb-3 mt-5 text-purple-400 border-b border-[#30363d] pb-2\" {...props} />\n        ),\n        h3: ({ node, ...props }) => (\n          <h3 className=\"text-2xl font-semibold mb-2 mt-4 text-green-400\" {...props} />\n        ),\n        h4: ({ node, ...props }) => (\n          <h4 className=\"text-xl font-semibold mb-2 mt-3 text-yellow-400\" {...props} />\n        ),\n        h5: ({ node, ...props }) => (\n          <h5 className=\"text-lg font-semibold mb-2 mt-3 text-pink-400\" {...props} />\n        ),\n        h6: ({ node, ...props }) => (\n          <h6 className=\"text-base font-semibold mb-2 mt-3 text-cyan-400\" {...props} />\n        ),\n        p: ({ node, ...props }) => (\n          <p className=\"mb-4 leading-7 text-gray-300\" {...props} />\n        ),\n        strong: ({ node, ...props }) => (\n          <strong className=\"font-bold text-orange-400\" {...props} />\n        ),\n        em: ({ node, ...props }) => (\n          <em className=\"italic text-yellow-300\" {...props} />\n        ),\n        code: ({ node, inline, className, children, ...props }: any) => {\n          const match = /language-(\\w+)/.exec(className || '');\n          const language = match ? match[1] : '';\n          \n          return !inline && language ? (\n            <div className=\"my-4 rounded-lg overflow-hidden border border-[#30363d] shadow-lg\">\n              <div className=\"bg-[#1e1e1e] px-4 py-2 border-b border-[#30363d] flex items-center justify-between\">\n                <span className=\"text-xs font-mono text-gray-400 uppercase\">{language}</span>\n                <div className=\"flex gap-1.5\">\n                  <div className=\"w-2 h-2 rounded-full bg-red-500\"></div>\n                  <div className=\"w-2 h-2 rounded-full bg-yellow-500\"></div>\n                  <div className=\"w-2 h-2 rounded-full bg-green-500\"></div>\n                </div>\n              </div>\n              <SyntaxHighlighter\n                style={vscDarkPlus}\n                language={language}\n                PreTag=\"div\"\n                className=\"!bg-[#1e1e1e] !m-0 text-sm\"\n                customStyle={{\n                  margin: 0,\n                  padding: '1rem',\n                  background: '#1e1e1e',\n                  fontSize: '0.875rem',\n                  lineHeight: '1.5'\n                }}\n                {...props}\n              >\n                {String(children).replace(/\\n$/, '')}\n              </SyntaxHighlighter>\n            </div>\n          ) : (\n            <code\n              className=\"bg-[#1e1e1e] text-pink-400 px-1.5 py-0.5 rounded text-sm font-mono border border-[#30363d]\"\n              {...props}\n            >\n              {children}\n            </code>\n          );\n        },\n        ul: ({ node, ...props }) => (\n          <ul className=\"list-disc list-inside mb-4 space-y-2 text-gray-300 ml-4\" {...props} />\n        ),\n        ol: ({ node, ...props }) => (\n          <ol className=\"list-decimal list-inside mb-4 space-y-2 text-gray-300 ml-4\" {...props} />\n        ),\n        li: ({ node, ...props }) => (\n          <li className=\"leading-7 text-gray-300\" {...props} />\n        ),\n        a: ({ node, ...props }) => (\n          <a\n            className=\"text-blue-400 hover:text-blue-300 underline decoration-blue-400/50 hover:decoration-blue-300 transition-colors\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            {...props}\n          />\n        ),\n        blockquote: ({ node, ...props }) => (\n          <blockquote\n            className=\"border-l-4 border-yellow-500 bg-[#161b22] pl-4 py-2 my-4 italic text-gray-400\"\n            {...props}\n          />\n        ),\n        hr: ({ node, ...props }) => (\n          <hr className=\"my-6 border-[#30363d]\" {...props} />\n        ),\n        img: ({ node, ...props }) => (\n          <img\n            className=\"max-w-full h-auto rounded-lg border border-[#30363d] my-4 shadow-lg\"\n            {...props}\n          />\n        ),\n        table: ({ node, ...props }) => (\n          <div className=\"overflow-x-auto my-4\">\n            <table className=\"min-w-full border border-[#30363d] rounded-lg\" {...props} />\n          </div>\n        ),\n        thead: ({ node, ...props }) => (\n          <thead className=\"bg-[#161b22]\" {...props} />\n        ),\n        th: ({ node, ...props }) => (\n          <th className=\"border border-[#30363d] px-4 py-2 text-left font-semibold text-blue-400\" {...props} />\n        ),\n        td: ({ node, ...props }) => (\n          <td className=\"border border-[#30363d] px-4 py-2 text-gray-300\" {...props} />\n        ),\n      }}\n    >\n      {content}\n    </ReactMarkdown>\n  );\n};\n\nconst mockMarkdownContent = `# Welcome to Premium Markdown Editor\n\n## Features\n\nThis is a **bold** statement and this is *italic* text.\n\n### Code Blocks\n\n\\`\\`\\`javascript\nfunction greet(name) {\n  console.log(\\`Hello, \\${name}!\\`);\n  return true;\n}\n\\`\\`\\`\n\n\\`\\`\\`python\ndef calculate(x, y):\n    result = x + y\n    return result\n\\`\\`\\`\n\n### Lists\n\n- First item\n- Second item\n- Third item\n\n1. Numbered one\n2. Numbered two\n3. Numbered three\n\n### Inline Code\n\nUse \\`const variable = 'value'\\` for inline code.\n\n### Links and Images\n\n[Visit Example](https://example.com)\n\n> This is a blockquote with important information.\n\n---\n\n**End of document**\n`;\n\nexport default function MarkdownEditor() {\n  const [markdown, setMarkdown] = useState(mockMarkdownContent);\n  const [showPreview, setShowPreview] = useState(true);\n  const [cursorPosition, setCursorPosition] = useState(0);\n  const textareaRef = useRef<HTMLTextAreaElement>(null);\n\n  const handleMarkdownChange = useCallback((e: React.ChangeEvent<HTMLTextAreaElement>) => {\n    setMarkdown(e.target.value);\n    setCursorPosition(e.target.selectionStart);\n  }, []);\n\n  const togglePreview = useCallback(() => {\n    setShowPreview(prev => !prev);\n  }, []);\n  const calculateStats = useCallback(() => {\n    const words = markdown.trim().split(/\\s+/).filter(word => word.length > 0).length;\n    const characters = markdown.length;\n    const readingTime = Math.ceil(words / 200); // Average reading speed: 200 words per minute\n    return { words, characters, readingTime };\n  }, [markdown]);\n\n  const stats = calculateStats();\n\n  const handleToolbarAction = useCallback((action: string) => {\n    const textarea = textareaRef.current;\n    if (!textarea) return;\n\n    const start = textarea.selectionStart;\n    const end = textarea.selectionEnd;\n    const selectedText = markdown.substring(start, end);\n    \n    let newText = '';\n    let cursorOffset = 0;\n\n    // Handle different markdown syntax patterns\n    if (action.includes('text')) {\n      // For bold, italic, link - wrap selected text or insert template\n      if (selectedText) {\n        newText = action.replace('text', selectedText);\n        cursorOffset = newText.length;\n      } else {\n        newText = action;\n        // Position cursor at 'text' placeholder\n        cursorOffset = action.indexOf('text');\n      }\n    } else if (action.includes('code')) {\n      // For inline code\n      if (selectedText) {\n        newText = action.replace('code', selectedText);\n        cursorOffset = newText.length;\n      } else {\n        newText = action;\n        cursorOffset = action.indexOf('code');\n      }\n    } else if (action.includes('url')) {\n      // For links and images\n      if (selectedText) {\n        newText = action.replace('text', selectedText);\n        cursorOffset = newText.indexOf('url');\n      } else {\n        newText = action;\n        cursorOffset = action.indexOf('text');\n      }\n    } else if (action.includes('alt')) {\n      // For images\n      newText = action;\n      cursorOffset = action.indexOf('alt');\n    } else {\n      // For list items\n      newText = action;\n      cursorOffset = action.length;\n    }\n\n    // Insert the new text\n    const newMarkdown = markdown.substring(0, start) + newText + markdown.substring(end);\n    setMarkdown(newMarkdown);\n\n    // Set cursor position after insertion\n    setTimeout(() => {\n      textarea.focus();\n      const newCursorPos = start + cursorOffset;\n      textarea.setSelectionRange(newCursorPos, newCursorPos);\n      setCursorPosition(newCursorPos);\n    }, 0);\n</xcrct_code_output>\n  }, [markdown, cursorPosition]);\n\n  return (\n    <div className=\"min-h-screen bg-[#0d1117] text-gray-100\">\n      <div className=\"container mx-auto px-4 py-6\">\n        {/* Header */}\n        <div className=\"mb-6 flex items-center justify-between\">\n          <h1 className=\"text-3xl font-bold bg-gradient-to-r from-blue-400 to-purple-500 bg-clip-text text-transparent\">\n            Premium Markdown Editor\n          </h1>\n          <Button\n            onClick={togglePreview}\n            variant=\"outline\"\n            className=\"bg-[#161b22] border-[#30363d] hover:bg-[#1f2937] text-gray-300\"\n          >\n            {showPreview ? <EyeOff className=\"w-4 h-4 mr-2\" /> : <Eye className=\"w-4 h-4 mr-2\" />}\n            {showPreview ? 'Hide Preview' : 'Show Preview'}\n          </Button>\n        </div>\n\n        {/* Floating Toolbar */}\n        <motion.div\n          initial={{ opacity: 0, y: -20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.5, ease: \"easeOut\" }}\n          className=\"mb-6 bg-[#161b22] border border-[#30363d] rounded-lg p-3 shadow-xl\"\n        >\n          <div className=\"flex flex-wrap gap-2 items-center justify-center\">\n            {toolbarButtons.map((button, index) => (\n              <motion.div\n                key={button.id}\n                initial={{ opacity: 0, scale: 0.8 }}\n                animate={{ opacity: 1, scale: 1 }}\n                transition={{ \n                  duration: 0.3, \n                  delay: index * 0.05,\n                  ease: \"easeOut\"\n                }}\n                whileHover={{ scale: 1.1 }}\n                whileTap={{ scale: 0.95 }}\n              >\n                <Button\n                  onClick={() => handleToolbarAction(button.action)}\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  className=\"relative group bg-[#0d1117] hover:bg-gradient-to-r hover:from-blue-500/20 hover:to-purple-500/20 border border-[#30363d] hover:border-blue-400/50 text-gray-300 hover:text-white transition-all duration-300\"\n                  title={button.label}\n                >\n                  <button.icon className=\"w-4 h-4\" />\n                  <motion.span\n                    initial={{ opacity: 0, y: 10 }}\n                    whileHover={{ opacity: 1, y: 0 }}\n                    className=\"absolute -bottom-8 left-1/2 transform -translate-x-1/2 text-xs bg-[#1f2937] px-2 py-1 rounded border border-[#30363d] whitespace-nowrap pointer-events-none opacity-0 group-hover:opacity-100 transition-opacity duration-200\"\n                  >\n                    {button.label}\n                  </motion.span>\n                </Button>\n              </motion.div>\n            ))}\n          </div>\n        </motion.div>\n\n        {/* Editor Layout */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n          {/* Editor Panel */}\n          <motion.div\n            layout\n            className=\"relative\"\n          >\n            <div className=\"bg-[#0d1117] border border-[#30363d] rounded-lg overflow-hidden shadow-2xl\">\n              <div className=\"bg-[#161b22] px-4 py-3 border-b border-[#30363d] flex items-center justify-between\">\n                <span className=\"text-sm font-medium text-gray-400\">Editor</span>\n                <div className=\"flex gap-2\">\n                  <div className=\"w-3 h-3 rounded-full bg-red-500\"></div>\n                  <div className=\"w-3 h-3 rounded-full bg-yellow-500\"></div>\n                  <div className=\"w-3 h-3 rounded-full bg-green-500\"></div>\n                </div>\n              </div>\n              <textarea\n                value={markdown}\n                onChange={handleMarkdownChange}\n                className=\"w-full h-[600px] bg-[#0d1117] text-gray-100 p-6 font-mono text-sm resize-none focus:outline-none\"\n                placeholder=\"Start writing your markdown...\"\n                spellCheck={false}\n              />\n            </div>\n          </motion.div>\n\n          {/* Preview Panel */}\n          <AnimatePresence mode=\"wait\">\n            {showPreview && (\n              <motion.div\n                initial={{ opacity: 0, x: 20 }}\n                animate={{ opacity: 1, x: 0 }}\n                exit={{ opacity: 0, x: 20 }}\n                transition={{ duration: 0.3 }}\n                className=\"relative\"\n              >\n                <div className=\"bg-[#0d1117] border border-[#30363d] rounded-lg overflow-hidden shadow-2xl\">\n                  <div className=\"bg-[#161b22] px-4 py-3 border-b border-[#30363d]\">\n                    <span className=\"text-sm font-medium text-gray-400\">Preview</span>\n                  </div>\n                  <div className=\"p-6 h-[600px] overflow-y-auto\">\n                    <MarkdownPreview content={markdown} />\n                  </div>\n                </div>\n              </motion.div>\n            )}\n          </AnimatePresence>\n        </div>\n\n        {/* Stats Bar */}\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.5, delay: 0.2 }}\n          className=\"mt-6 bg-[#161b22] border border-[#30363d] rounded-lg p-4 shadow-lg\"\n        >\n          <div className=\"flex items-center justify-center gap-8 text-sm\">\n            <div className=\"flex items-center gap-2\">\n              <span className=\"text-gray-400\">Words:</span>\n              <span className=\"font-semibold text-blue-400\">{stats.words}</span>\n            </div>\n            <div className=\"w-px h-4 bg-[#30363d]\"></div>\n            <div className=\"flex items-center gap-2\">\n              <span className=\"text-gray-400\">Characters:</span>\n              <span className=\"font-semibold text-purple-400\">{stats.characters}</span>\n            </div>\n            <div className=\"w-px h-4 bg-[#30363d]\"></div>\n            <div className=\"flex items-center gap-2\">\n              <span className=\"text-gray-400\">Reading Time:</span>\n              <span className=\"font-semibold text-green-400\">\n                {stats.readingTime} {stats.readingTime === 1 ? 'min' : 'mins'}\n              </span>\n            </div>\n          </div>\n        </motion.div>\n      </div>\n    </div>\n  );\n}",
  "error": null,
  "overall_score": 60,
  "code_quality_score": 18,
  "architecture_score": 16,
  "performance_score": 14,
  "accessibility_score": 12,
  "metadata": {
    "document_id": "eval_room_6119ee3235bd",
    "prompt_category": "productivity",
    "prompt_complexity": 8.0
  },
  "raw_response": {
    "document_id": "eval_room_6119ee3235bd",
    "mode": "parallel",
    "prompt": "Create a premium markdown editor with dark theme, syntax highlighting with vibrant colors, smooth live preview transitions, floating toolbar with hover effects, and code block styling like VS Code",
    "content": "import { useState, useCallback } from 'react';\nimport { useRef } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Bold, Italic, Code, List, ListOrdered, Link, Image, Eye, EyeOff } from 'lucide-react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport ReactMarkdown from 'react-markdown';\nimport { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';\nimport { vscDarkPlus } from 'react-syntax-highlighter/dist/esm/styles/prism';\n\ninterface ToolbarButton {\n  id: string;\n  icon: any;\n  label: string;\n  action: string;\n}\n\nconst toolbarButtons: ToolbarButton[] = [\n  { id: 'bold', icon: Bold, label: 'Bold', action: '**text**' },\n  { id: 'italic', icon: Italic, label: 'Italic', action: '*text*' },\n  { id: 'code', icon: Code, label: 'Code', action: '`code`' },\n  { id: 'list', icon: List, label: 'Bullet List', action: '- item' },\n  { id: 'ordered', icon: ListOrdered, label: 'Numbered List', action: '1. item' },\n  { id: 'link', icon: Link, label: 'Link', action: '[text](url)' },\n  { id: 'image', icon: Image, label: 'Image', action: '![alt](url)' }\n];\n\n// Markdown Preview Component with VS Code styling\nconst MarkdownPreview = ({ content }: { content: string }) => {\n  return (\n    <ReactMarkdown\n      className=\"prose prose-invert max-w-none\"\n      components={{\n        h1: ({ node, ...props }) => (\n          <h1 className=\"text-4xl font-bold mb-4 mt-6 text-blue-400 border-b border-[#30363d] pb-2\" {...props} />\n        ),\n        h2: ({ node, ...props }) => (\n          <h2 className=\"text-3xl font-bold mb-3 mt-5 text-purple-400 border-b border-[#30363d] pb-2\" {...props} />\n        ),\n        h3: ({ node, ...props }) => (\n          <h3 className=\"text-2xl font-semibold mb-2 mt-4 text-green-400\" {...props} />\n        ),\n        h4: ({ node, ...props }) => (\n          <h4 className=\"text-xl font-semibold mb-2 mt-3 text-yellow-400\" {...props} />\n        ),\n        h5: ({ node, ...props }) => (\n          <h5 className=\"text-lg font-semibold mb-2 mt-3 text-pink-400\" {...props} />\n        ),\n        h6: ({ node, ...props }) => (\n          <h6 className=\"text-base font-semibold mb-2 mt-3 text-cyan-400\" {...props} />\n        ),\n        p: ({ node, ...props }) => (\n          <p className=\"mb-4 leading-7 text-gray-300\" {...props} />\n        ),\n        strong: ({ node, ...props }) => (\n          <strong className=\"font-bold text-orange-400\" {...props} />\n        ),\n        em: ({ node, ...props }) => (\n          <em className=\"italic text-yellow-300\" {...props} />\n        ),\n        code: ({ node, inline, className, children, ...props }: any) => {\n          const match = /language-(\\w+)/.exec(className || '');\n          const language = match ? match[1] : '';\n          \n          return !inline && language ? (\n            <div className=\"my-4 rounded-lg overflow-hidden border border-[#30363d] shadow-lg\">\n              <div className=\"bg-[#1e1e1e] px-4 py-2 border-b border-[#30363d] flex items-center justify-between\">\n                <span className=\"text-xs font-mono text-gray-400 uppercase\">{language}</span>\n                <div className=\"flex gap-1.5\">\n                  <div className=\"w-2 h-2 rounded-full bg-red-500\"></div>\n                  <div className=\"w-2 h-2 rounded-full bg-yellow-500\"></div>\n                  <div className=\"w-2 h-2 rounded-full bg-green-500\"></div>\n                </div>\n              </div>\n              <SyntaxHighlighter\n                style={vscDarkPlus}\n                language={language}\n                PreTag=\"div\"\n                className=\"!bg-[#1e1e1e] !m-0 text-sm\"\n                customStyle={{\n                  margin: 0,\n                  padding: '1rem',\n                  background: '#1e1e1e',\n                  fontSize: '0.875rem',\n                  lineHeight: '1.5'\n                }}\n                {...props}\n              >\n                {String(children).replace(/\\n$/, '')}\n              </SyntaxHighlighter>\n            </div>\n          ) : (\n            <code\n              className=\"bg-[#1e1e1e] text-pink-400 px-1.5 py-0.5 rounded text-sm font-mono border border-[#30363d]\"\n              {...props}\n            >\n              {children}\n            </code>\n          );\n        },\n        ul: ({ node, ...props }) => (\n          <ul className=\"list-disc list-inside mb-4 space-y-2 text-gray-300 ml-4\" {...props} />\n        ),\n        ol: ({ node, ...props }) => (\n          <ol className=\"list-decimal list-inside mb-4 space-y-2 text-gray-300 ml-4\" {...props} />\n        ),\n        li: ({ node, ...props }) => (\n          <li className=\"leading-7 text-gray-300\" {...props} />\n        ),\n        a: ({ node, ...props }) => (\n          <a\n            className=\"text-blue-400 hover:text-blue-300 underline decoration-blue-400/50 hover:decoration-blue-300 transition-colors\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            {...props}\n          />\n        ),\n        blockquote: ({ node, ...props }) => (\n          <blockquote\n            className=\"border-l-4 border-yellow-500 bg-[#161b22] pl-4 py-2 my-4 italic text-gray-400\"\n            {...props}\n          />\n        ),\n        hr: ({ node, ...props }) => (\n          <hr className=\"my-6 border-[#30363d]\" {...props} />\n        ),\n        img: ({ node, ...props }) => (\n          <img\n            className=\"max-w-full h-auto rounded-lg border border-[#30363d] my-4 shadow-lg\"\n            {...props}\n          />\n        ),\n        table: ({ node, ...props }) => (\n          <div className=\"overflow-x-auto my-4\">\n            <table className=\"min-w-full border border-[#30363d] rounded-lg\" {...props} />\n          </div>\n        ),\n        thead: ({ node, ...props }) => (\n          <thead className=\"bg-[#161b22]\" {...props} />\n        ),\n        th: ({ node, ...props }) => (\n          <th className=\"border border-[#30363d] px-4 py-2 text-left font-semibold text-blue-400\" {...props} />\n        ),\n        td: ({ node, ...props }) => (\n          <td className=\"border border-[#30363d] px-4 py-2 text-gray-300\" {...props} />\n        ),\n      }}\n    >\n      {content}\n    </ReactMarkdown>\n  );\n};\n\nconst mockMarkdownContent = `# Welcome to Premium Markdown Editor\n\n## Features\n\nThis is a **bold** statement and this is *italic* text.\n\n### Code Blocks\n\n\\`\\`\\`javascript\nfunction greet(name) {\n  console.log(\\`Hello, \\${name}!\\`);\n  return true;\n}\n\\`\\`\\`\n\n\\`\\`\\`python\ndef calculate(x, y):\n    result = x + y\n    return result\n\\`\\`\\`\n\n### Lists\n\n- First item\n- Second item\n- Third item\n\n1. Numbered one\n2. Numbered two\n3. Numbered three\n\n### Inline Code\n\nUse \\`const variable = 'value'\\` for inline code.\n\n### Links and Images\n\n[Visit Example](https://example.com)\n\n> This is a blockquote with important information.\n\n---\n\n**End of document**\n`;\n\nexport default function MarkdownEditor() {\n  const [markdown, setMarkdown] = useState(mockMarkdownContent);\n  const [showPreview, setShowPreview] = useState(true);\n  const [cursorPosition, setCursorPosition] = useState(0);\n  const textareaRef = useRef<HTMLTextAreaElement>(null);\n\n  const handleMarkdownChange = useCallback((e: React.ChangeEvent<HTMLTextAreaElement>) => {\n    setMarkdown(e.target.value);\n    setCursorPosition(e.target.selectionStart);\n  }, []);\n\n  const togglePreview = useCallback(() => {\n    setShowPreview(prev => !prev);\n  }, []);\n  const calculateStats = useCallback(() => {\n    const words = markdown.trim().split(/\\s+/).filter(word => word.length > 0).length;\n    const characters = markdown.length;\n    const readingTime = Math.ceil(words / 200); // Average reading speed: 200 words per minute\n    return { words, characters, readingTime };\n  }, [markdown]);\n\n  const stats = calculateStats();\n\n  const handleToolbarAction = useCallback((action: string) => {\n    const textarea = textareaRef.current;\n    if (!textarea) return;\n\n    const start = textarea.selectionStart;\n    const end = textarea.selectionEnd;\n    const selectedText = markdown.substring(start, end);\n    \n    let newText = '';\n    let cursorOffset = 0;\n\n    // Handle different markdown syntax patterns\n    if (action.includes('text')) {\n      // For bold, italic, link - wrap selected text or insert template\n      if (selectedText) {\n        newText = action.replace('text', selectedText);\n        cursorOffset = newText.length;\n      } else {\n        newText = action;\n        // Position cursor at 'text' placeholder\n        cursorOffset = action.indexOf('text');\n      }\n    } else if (action.includes('code')) {\n      // For inline code\n      if (selectedText) {\n        newText = action.replace('code', selectedText);\n        cursorOffset = newText.length;\n      } else {\n        newText = action;\n        cursorOffset = action.indexOf('code');\n      }\n    } else if (action.includes('url')) {\n      // For links and images\n      if (selectedText) {\n        newText = action.replace('text', selectedText);\n        cursorOffset = newText.indexOf('url');\n      } else {\n        newText = action;\n        cursorOffset = action.indexOf('text');\n      }\n    } else if (action.includes('alt')) {\n      // For images\n      newText = action;\n      cursorOffset = action.indexOf('alt');\n    } else {\n      // For list items\n      newText = action;\n      cursorOffset = action.length;\n    }\n\n    // Insert the new text\n    const newMarkdown = markdown.substring(0, start) + newText + markdown.substring(end);\n    setMarkdown(newMarkdown);\n\n    // Set cursor position after insertion\n    setTimeout(() => {\n      textarea.focus();\n      const newCursorPos = start + cursorOffset;\n      textarea.setSelectionRange(newCursorPos, newCursorPos);\n      setCursorPosition(newCursorPos);\n    }, 0);\n</xcrct_code_output>\n  }, [markdown, cursorPosition]);\n\n  return (\n    <div className=\"min-h-screen bg-[#0d1117] text-gray-100\">\n      <div className=\"container mx-auto px-4 py-6\">\n        {/* Header */}\n        <div className=\"mb-6 flex items-center justify-between\">\n          <h1 className=\"text-3xl font-bold bg-gradient-to-r from-blue-400 to-purple-500 bg-clip-text text-transparent\">\n            Premium Markdown Editor\n          </h1>\n          <Button\n            onClick={togglePreview}\n            variant=\"outline\"\n            className=\"bg-[#161b22] border-[#30363d] hover:bg-[#1f2937] text-gray-300\"\n          >\n            {showPreview ? <EyeOff className=\"w-4 h-4 mr-2\" /> : <Eye className=\"w-4 h-4 mr-2\" />}\n            {showPreview ? 'Hide Preview' : 'Show Preview'}\n          </Button>\n        </div>\n\n        {/* Floating Toolbar */}\n        <motion.div\n          initial={{ opacity: 0, y: -20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.5, ease: \"easeOut\" }}\n          className=\"mb-6 bg-[#161b22] border border-[#30363d] rounded-lg p-3 shadow-xl\"\n        >\n          <div className=\"flex flex-wrap gap-2 items-center justify-center\">\n            {toolbarButtons.map((button, index) => (\n              <motion.div\n                key={button.id}\n                initial={{ opacity: 0, scale: 0.8 }}\n                animate={{ opacity: 1, scale: 1 }}\n                transition={{ \n                  duration: 0.3, \n                  delay: index * 0.05,\n                  ease: \"easeOut\"\n                }}\n                whileHover={{ scale: 1.1 }}\n                whileTap={{ scale: 0.95 }}\n              >\n                <Button\n                  onClick={() => handleToolbarAction(button.action)}\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  className=\"relative group bg-[#0d1117] hover:bg-gradient-to-r hover:from-blue-500/20 hover:to-purple-500/20 border border-[#30363d] hover:border-blue-400/50 text-gray-300 hover:text-white transition-all duration-300\"\n                  title={button.label}\n                >\n                  <button.icon className=\"w-4 h-4\" />\n                  <motion.span\n                    initial={{ opacity: 0, y: 10 }}\n                    whileHover={{ opacity: 1, y: 0 }}\n                    className=\"absolute -bottom-8 left-1/2 transform -translate-x-1/2 text-xs bg-[#1f2937] px-2 py-1 rounded border border-[#30363d] whitespace-nowrap pointer-events-none opacity-0 group-hover:opacity-100 transition-opacity duration-200\"\n                  >\n                    {button.label}\n                  </motion.span>\n                </Button>\n              </motion.div>\n            ))}\n          </div>\n        </motion.div>\n\n        {/* Editor Layout */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n          {/* Editor Panel */}\n          <motion.div\n            layout\n            className=\"relative\"\n          >\n            <div className=\"bg-[#0d1117] border border-[#30363d] rounded-lg overflow-hidden shadow-2xl\">\n              <div className=\"bg-[#161b22] px-4 py-3 border-b border-[#30363d] flex items-center justify-between\">\n                <span className=\"text-sm font-medium text-gray-400\">Editor</span>\n                <div className=\"flex gap-2\">\n                  <div className=\"w-3 h-3 rounded-full bg-red-500\"></div>\n                  <div className=\"w-3 h-3 rounded-full bg-yellow-500\"></div>\n                  <div className=\"w-3 h-3 rounded-full bg-green-500\"></div>\n                </div>\n              </div>\n              <textarea\n                value={markdown}\n                onChange={handleMarkdownChange}\n                className=\"w-full h-[600px] bg-[#0d1117] text-gray-100 p-6 font-mono text-sm resize-none focus:outline-none\"\n                placeholder=\"Start writing your markdown...\"\n                spellCheck={false}\n              />\n            </div>\n          </motion.div>\n\n          {/* Preview Panel */}\n          <AnimatePresence mode=\"wait\">\n            {showPreview && (\n              <motion.div\n                initial={{ opacity: 0, x: 20 }}\n                animate={{ opacity: 1, x: 0 }}\n                exit={{ opacity: 0, x: 20 }}\n                transition={{ duration: 0.3 }}\n                className=\"relative\"\n              >\n                <div className=\"bg-[#0d1117] border border-[#30363d] rounded-lg overflow-hidden shadow-2xl\">\n                  <div className=\"bg-[#161b22] px-4 py-3 border-b border-[#30363d]\">\n                    <span className=\"text-sm font-medium text-gray-400\">Preview</span>\n                  </div>\n                  <div className=\"p-6 h-[600px] overflow-y-auto\">\n                    <MarkdownPreview content={markdown} />\n                  </div>\n                </div>\n              </motion.div>\n            )}\n          </AnimatePresence>\n        </div>\n\n        {/* Stats Bar */}\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.5, delay: 0.2 }}\n          className=\"mt-6 bg-[#161b22] border border-[#30363d] rounded-lg p-4 shadow-lg\"\n        >\n          <div className=\"flex items-center justify-center gap-8 text-sm\">\n            <div className=\"flex items-center gap-2\">\n              <span className=\"text-gray-400\">Words:</span>\n              <span className=\"font-semibold text-blue-400\">{stats.words}</span>\n            </div>\n            <div className=\"w-px h-4 bg-[#30363d]\"></div>\n            <div className=\"flex items-center gap-2\">\n              <span className=\"text-gray-400\">Characters:</span>\n              <span className=\"font-semibold text-purple-400\">{stats.characters}</span>\n            </div>\n            <div className=\"w-px h-4 bg-[#30363d]\"></div>\n            <div className=\"flex items-center gap-2\">\n              <span className=\"text-gray-400\">Reading Time:</span>\n              <span className=\"font-semibold text-green-400\">\n                {stats.readingTime} {stats.readingTime === 1 ? 'min' : 'mins'}\n              </span>\n            </div>\n          </div>\n        </motion.div>\n      </div>\n    </div>\n  );\n}",
    "error": null,
    "elapsed_time": 64.32056093215942,
    "success": true
  }
}