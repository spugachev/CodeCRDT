{
  "prompt_id": "dashboard",
  "prompt_name": "Analytics Dashboard",
  "mode": "parallel",
  "run_number": 23,
  "timestamp": "2025-10-14T06:57:17.926476",
  "response_time": 94.3667664527893,
  "total_tokens": null,
  "response_content": "import { useState, useCallback } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Moon, Sun, RefreshCw } from 'lucide-react';\nimport { AlertCircle, AlertTriangle, Info, CheckCircle } from 'lucide-react';\nimport { ShoppingCart, UserPlus, DollarSign, Package, CheckCircle, AlertCircle } from 'lucide-react';\nimport { ArrowUpDown, ChevronLeft, ChevronRight } from 'lucide-react';\nimport { Badge } from '@/components/ui/badge';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\n\n\nimport { motion } from 'framer-motion';\n\nimport { motion } from 'framer-motion';\n\n\nimport { TrendingUp, TrendingDown, Target, Zap } from 'lucide-react';\n\nimport { TrendingUp, TrendingDown, DollarSign, Users, ShoppingCart, Target } from 'lucide-react';\nimport { motion } from 'framer-motion';\n\ninterface MetricData {\n  id: string;\n  label: string;\n  value: number;\n  change: number;\n  trend: 'up' | 'down';\n}\n\ninterface ChartDataPoint {\n  date: string;\n  revenue: number;\n  users: number;\n  orders: number;\n}\n\ninterface TableRow {\n  id: string;\n  product: string;\n  sales: number;\n  revenue: number;\n  status: 'active' | 'pending' | 'inactive';\n}\n\nconst mockMetrics: MetricData[] = [\n  { id: '1', label: 'Total Revenue', value: 45231, change: 12.5, trend: 'up' },\n  { id: '2', label: 'Active Users', value: 2350, change: 8.2, trend: 'up' },\n  { id: '3', label: 'Total Orders', value: 1543, change: -3.1, trend: 'down' },\n  { id: '4', label: 'Conversion Rate', value: 3.24, change: 5.7, trend: 'up' }\n];\n\nconst mockChartData: ChartDataPoint[] = [\n  { date: '2024-01-01', revenue: 12000, users: 450, orders: 230 },\n  { date: '2024-01-02', revenue: 15000, users: 520, orders: 280 },\n  { date: '2024-01-03', revenue: 13500, users: 490, orders: 250 },\n  { date: '2024-01-04', revenue: 18000, users: 610, orders: 320 },\n  { date: '2024-01-05', revenue: 16500, users: 580, orders: 295 },\n  { date: '2024-01-06', revenue: 20000, users: 680, orders: 350 },\n  { date: '2024-01-07', revenue: 22000, users: 720, orders: 380 }\n];\n\nconst mockTableData: TableRow[] = [\n  { id: '1', product: 'Premium Plan', sales: 234, revenue: 23400, status: 'active' },\n  { id: '2', product: 'Basic Plan', sales: 567, revenue: 11340, status: 'active' },\n  { id: '3', product: 'Enterprise Plan', sales: 89, revenue: 44500, status: 'active' },\n  { id: '4', product: 'Starter Plan', sales: 432, revenue: 4320, status: 'pending' },\n  { id: '5', product: 'Pro Plan', sales: 156, revenue: 15600, status: 'inactive' }\n];\ninterface ActivityItem {\n  id: string;\n  type: 'sale' | 'user' | 'order' | 'alert' | 'success';\n  message: string;\n  timestamp: string;\n  icon: 'ShoppingCart' | 'UserPlus' | 'Package' | 'AlertCircle' | 'CheckCircle';\n}\n\nconst mockActivityData: ActivityItem[] = [\n  { id: '1', type: 'sale', message: 'New sale: Premium Plan', timestamp: '2 minutes ago', icon: 'ShoppingCart' },\n  { id: '2', type: 'user', message: 'New user registered', timestamp: '5 minutes ago', icon: 'UserPlus' },\n  { id: '3', type: 'success', message: 'Payment processed successfully', timestamp: '12 minutes ago', icon: 'CheckCircle' },\n  { id: '4', type: 'order', message: 'Order #1234 shipped', timestamp: '23 minutes ago', icon: 'Package' },\n  { id: '5', type: 'sale', message: 'New sale: Enterprise Plan', timestamp: '35 minutes ago', icon: 'ShoppingCart' },\n  { id: '6', type: 'alert', message: 'Low stock alert: Starter Plan', timestamp: '1 hour ago', icon: 'AlertCircle' },\n  { id: '7', type: 'user', message: 'New user registered', timestamp: '1 hour ago', icon: 'UserPlus' },\n  { id: '8', type: 'success', message: 'Refund completed', timestamp: '2 hours ago', icon: 'CheckCircle' },\n  { id: '9', type: 'order', message: 'Order #1235 delivered', timestamp: '3 hours ago', icon: 'Package' },\n  { id: '10', type: 'sale', message: 'New sale: Pro Plan', timestamp: '4 hours ago', icon: 'ShoppingCart' }\n];\ninterface AlertData {\n  id: string;\n  message: string;\n  severity: 'info' | 'warning' | 'error' | 'success';\n  timestamp: string;\n}\n\nconst mockAlerts: AlertData[] = [\n  { id: '1', message: 'System backup completed successfully', severity: 'success', timestamp: '2 min ago' },\n  { id: '2', message: 'High server load detected', severity: 'warning', timestamp: '15 min ago' },\n  { id: '3', message: 'New user registration spike', severity: 'info', timestamp: '1 hour ago' },\n  { id: '4', message: 'Payment gateway timeout', severity: 'error', timestamp: '2 hours ago' },\n  { id: '5', message: 'Database optimization recommended', severity: 'warning', timestamp: '3 hours ago' }\n];\ninterface QuickStatData {\n  id: string;\n  label: string;\n  value: number;\n  target: number;\n  icon: any;\n  color: string;\n}\n\nconst mockQuickStats: QuickStatData[] = [\n  { id: '1', label: 'Monthly Goal', value: 75, target: 100, icon: Target, color: 'blue' },\n  { id: '2', label: 'Customer Satisfaction', value: 92, target: 100, icon: TrendingUp, color: 'green' },\n  { id: '3', label: 'Response Time', value: 68, target: 100, icon: Zap, color: 'yellow' },\n  { id: '4', label: 'Task Completion', value: 85, target: 100, icon: TrendingUp, color: 'purple' }\n];\nconst mockPieData = [\n  { category: 'Premium Plan', value: 23400, color: '#3b82f6' },\n  { category: 'Enterprise Plan', value: 44500, color: '#8b5cf6' },\n  { category: 'Pro Plan', value: 15600, color: '#10b981' },\n  { category: 'Basic Plan', value: 11340, color: '#f59e0b' },\n  { category: 'Starter Plan', value: 4320, color: '#ef4444' }\n];\n\nconst PieChart = ({ data, isDarkMode }: { data: typeof mockPieData, isDarkMode: boolean }) => {\n  const [hoveredIndex, setHoveredIndex] = useState<number | null>(null);\n  \n  const total = data.reduce((sum, item) => sum + item.value, 0);\n  \n  let currentAngle = -90;\n  const segments = data.map((item, index) => {\n    const percentage = (item.value / total) * 100;\n    const angle = (percentage / 100) * 360;\n    const startAngle = currentAngle;\n    const endAngle = currentAngle + angle;\n    currentAngle = endAngle;\n    \n    return {\n      ...item,\n      percentage,\n      startAngle,\n      endAngle\n    };\n  });\n  \n  const createArcPath = (startAngle: number, endAngle: number, radius: number, innerRadius: number = 0) => {\n    const start = polarToCartesian(100, 100, radius, endAngle);\n    const end = polarToCartesian(100, 100, radius, startAngle);\n    const largeArcFlag = endAngle - startAngle <= 180 ? '0' : '1';\n    \n    if (innerRadius > 0) {\n      const innerStart = polarToCartesian(100, 100, innerRadius, endAngle);\n      const innerEnd = polarToCartesian(100, 100, innerRadius, startAngle);\n      \n      return [\n        'M', start.x, start.y,\n        'A', radius, radius, 0, largeArcFlag, 0, end.x, end.y,\n        'L', innerEnd.x, innerEnd.y,\n        'A', innerRadius, innerRadius, 0, largeArcFlag, 1, innerStart.x, innerStart.y,\n        'Z'\n      ].join(' ');\n    }\n    \n    return [\n      'M', 100, 100,\n      'L', start.x, start.y,\n      'A', radius, radius, 0, largeArcFlag, 0, end.x, end.y,\n      'Z'\n    ].join(' ');\n  };\n  \n  const polarToCartesian = (centerX: number, centerY: number, radius: number, angleInDegrees: number) => {\n    const angleInRadians = (angleInDegrees * Math.PI) / 180;\n    return {\n      x: centerX + radius * Math.cos(angleInRadians),\n      y: centerY + radius * Math.sin(angleInRadians)\n    };\n  };\n  \n  return (\n    <div className=\"flex flex-col items-center gap-6\">\n      <div className=\"relative w-full max-w-[280px] aspect-square\">\n        <svg viewBox=\"0 0 200 200\" className=\"w-full h-full\">\n          {segments.map((segment, index) => {\n            const isHovered = hoveredIndex === index;\n            const radius = isHovered ? 85 : 80;\n            const innerRadius = 40;\n            \n            return (\n              <motion.g\n                key={segment.category}\n                initial={{ opacity: 0, scale: 0 }}\n                animate={{ opacity: 1, scale: 1 }}\n                transition={{ delay: index * 0.1, duration: 0.5 }}\n                onMouseEnter={() => setHoveredIndex(index)}\n                onMouseLeave={() => setHoveredIndex(null)}\n              >\n                <motion.path\n                  d={createArcPath(segment.startAngle, segment.endAngle, radius, innerRadius)}\n                  fill={segment.color}\n                  stroke={isDarkMode ? '#1f2937' : '#ffffff'}\n                  strokeWidth=\"2\"\n                  className=\"cursor-pointer transition-all duration-200\"\n                  animate={{\n                    d: createArcPath(segment.startAngle, segment.endAngle, radius, innerRadius)\n                  }}\n                  transition={{ duration: 0.2 }}\n                />\n                {isHovered && (\n                  <motion.text\n                    x=\"100\"\n                    y=\"95\"\n                    textAnchor=\"middle\"\n                    className={`text-xs font-semibold ${isDarkMode ? 'fill-white' : 'fill-gray-900'}`}\n                    initial={{ opacity: 0 }}\n                    animate={{ opacity: 1 }}\n                  >\n                    {segment.percentage.toFixed(1)}%\n                  </motion.text>\n                )}\n              </motion.g>\n            );\n          })}\n          <circle\n            cx=\"100\"\n            cy=\"100\"\n            r=\"38\"\n            fill={isDarkMode ? '#1f2937' : '#ffffff'}\n          />\n          <text\n            x=\"100\"\n            y=\"105\"\n            textAnchor=\"middle\"\n            className={`text-sm font-bold ${isDarkMode ? 'fill-white' : 'fill-gray-900'}`}\n          >\n            ${(total / 1000).toFixed(0)}k\n          </text>\n        </svg>\n      </div>\n      \n      <div className=\"w-full space-y-2\">\n        {segments.map((segment, index) => (\n          <motion.div\n            key={segment.category}\n            initial={{ opacity: 0, x: -20 }}\n            animate={{ opacity: 1, x: 0 }}\n            transition={{ delay: index * 0.1 + 0.3 }}\n            className={`flex items-center justify-between p-2 rounded-lg transition-colors cursor-pointer ${\n              hoveredIndex === index\n                ? isDarkMode ? 'bg-gray-700' : 'bg-gray-100'\n                : ''\n            }`}\n            onMouseEnter={() => setHoveredIndex(index)}\n            onMouseLeave={() => setHoveredIndex(null)}\n          >\n            <div className=\"flex items-center gap-2\">\n              <div\n                className=\"w-3 h-3 rounded-full\"\n                style={{ backgroundColor: segment.color }}\n              />\n              <span className={`text-sm ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>\n                {segment.category}\n              </span>\n            </div>\n            <div className=\"flex items-center gap-3\">\n              <span className={`text-sm font-semibold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                ${segment.value.toLocaleString()}\n              </span>\n              <span className={`text-xs ${isDarkMode ? 'text-gray-400' : 'text-gray-500'}`}>\n                {segment.percentage.toFixed(1)}%\n              </span>\n            </div>\n          </motion.div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nconst RevenueChart = ({ data, isDarkMode }: { data: ChartDataPoint[], isDarkMode: boolean }) => {\n  const [hoveredPoint, setHoveredPoint] = useState<number | null>(null);\n  \n  const maxRevenue = Math.max(...data.map(d => d.revenue));\n  const minRevenue = Math.min(...data.map(d => d.revenue));\n  const revenueRange = maxRevenue - minRevenue;\n  \n  const chartHeight = 250;\n  const chartWidth = 100;\n  const padding = 20;\n  \n  const getX = (index: number) => {\n    return (index / (data.length - 1)) * (chartWidth - padding * 2) + padding;\n  };\n  \n  const getY = (revenue: number) => {\n    const normalized = (revenue - minRevenue) / revenueRange;\n    return chartHeight - (normalized * (chartHeight - padding * 2) + padding);\n  };\n  \n  const pathData = data.map((point, index) => {\n    const x = getX(index);\n    const y = getY(point.revenue);\n    return `${index === 0 ? 'M' : 'L'} ${x} ${y}`;\n  }).join(' ');\n  \n  const gradientPathData = `${pathData} L ${getX(data.length - 1)} ${chartHeight} L ${getX(0)} ${chartHeight} Z`;\n  \n  return (\n    <div className=\"relative w-full h-[250px]\">\n      <svg\n        viewBox={`0 0 ${chartWidth} ${chartHeight}`}\n        className=\"w-full h-full\"\n        preserveAspectRatio=\"none\"\n      >\n        <defs>\n          <linearGradient id=\"revenueGradient\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n            <stop offset=\"0%\" stopColor=\"#3b82f6\" stopOpacity=\"0.3\" />\n            <stop offset=\"100%\" stopColor=\"#3b82f6\" stopOpacity=\"0\" />\n          </linearGradient>\n        </defs>\n        \n        <path\n          d={gradientPathData}\n          fill=\"url(#revenueGradient)\"\n        />\n        \n        <path\n          d={pathData}\n          fill=\"none\"\n          stroke=\"#3b82f6\"\n          strokeWidth=\"0.5\"\n          vectorEffect=\"non-scaling-stroke\"\n        />\n        \n        {data.map((point, index) => (\n          <g key={index}>\n            <circle\n              cx={getX(index)}\n              cy={getY(point.revenue)}\n              r={hoveredPoint === index ? \"1.5\" : \"1\"}\n              fill=\"#3b82f6\"\n              className=\"transition-all cursor-pointer\"\n              vectorEffect=\"non-scaling-stroke\"\n              onMouseEnter={() => setHoveredPoint(index)}\n              onMouseLeave={() => setHoveredPoint(null)}\n            />\n          </g>\n        ))}\n      </svg>\n      \n      {hoveredPoint !== null && (\n        <div\n          className={`absolute pointer-events-none ${isDarkMode ? 'bg-gray-700 text-white' : 'bg-white text-gray-900'} px-3 py-2 rounded-lg shadow-lg border ${isDarkMode ? 'border-gray-600' : 'border-gray-200'}`}\n          style={{\n            left: `${getX(hoveredPoint)}%`,\n            top: `${getY(data[hoveredPoint].revenue) / chartHeight * 100}%`,\n            transform: 'translate(-50%, -120%)'\n          }}\n        >\n          <div className=\"text-xs font-semibold mb-1\">\n            {new Date(data[hoveredPoint].date).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n          </div>\n          <div className=\"flex items-center gap-1\">\n            <TrendingUp className=\"h-3 w-3 text-blue-500\" />\n            <span className=\"text-sm font-bold\">\n              ${data[hoveredPoint].revenue.toLocaleString()}\n            </span>\n          </div>\n          <div className={`text-xs ${isDarkMode ? 'text-gray-400' : 'text-gray-500'}`}>\n            {data[hoveredPoint].users} users\n          </div>\n        </div>\n      )}\n      \n      <div className=\"absolute bottom-0 left-0 right-0 flex justify-between px-4 text-xs\">\n        {data.map((point, index) => {\n          if (index % Math.ceil(data.length / 4) === 0 || index === data.length - 1) {\n            return (\n              <span key={index} className={isDarkMode ? 'text-gray-400' : 'text-gray-500'}>\n                {new Date(point.date).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n              </span>\n            );\n          }\n          return null;\n        })}\n      </div>\n    </div>\n  );\n};\n\ntype SortField = 'product' | 'sales' | 'revenue' | 'status';\ntype SortDirection = 'asc' | 'desc';\n\nexport default function AnalyticsDashboard() {\n  const [isDarkMode, setIsDarkMode] = useState(false);\n  const [metrics, setMetrics] = useState<MetricData[]>(mockMetrics);\n  const [chartData, setChartData] = useState<ChartDataPoint[]>(mockChartData);\n  const [tableData, setTableData] = useState<TableRow[]>(mockTableData);\n  const [isRefreshing, setIsRefreshing] = useState(false);\n  const [sortField, setSortField] = useState<SortField>('revenue');\n  const [sortDirection, setSortDirection] = useState<SortDirection>('desc');\n  const [currentPage, setCurrentPage] = useState(1);\n  const itemsPerPage = 3;\n\n  const toggleDarkMode = useCallback(() => {\n    setIsDarkMode(prev => !prev);\n  }, []);\n  const handleSort = useCallback((field: SortField) => {\n    if (sortField === field) {\n      setSortDirection(prev => prev === 'asc' ? 'desc' : 'asc');\n    } else {\n      setSortField(field);\n      setSortDirection('desc');\n    }\n    setCurrentPage(1);\n  }, [sortField]);\n\n  const sortedData = useCallback(() => {\n    const sorted = [...tableData].sort((a, b) => {\n      let aValue = a[sortField];\n      let bValue = b[sortField];\n\n      if (typeof aValue === 'string') {\n        aValue = aValue.toLowerCase();\n        bValue = (bValue as string).toLowerCase();\n      }\n\n      if (aValue < bValue) return sortDirection === 'asc' ? -1 : 1;\n      if (aValue > bValue) return sortDirection === 'asc' ? 1 : -1;\n      return 0;\n    });\n    return sorted;\n  }, [tableData, sortField, sortDirection]);\n\n  const paginatedData = useCallback(() => {\n    const sorted = sortedData();\n    const startIndex = (currentPage - 1) * itemsPerPage;\n    const endIndex = startIndex + itemsPerPage;\n    return sorted.slice(startIndex, endIndex);\n  }, [sortedData, currentPage]);\n\n  const totalPages = Math.ceil(tableData.length / itemsPerPage);\n\n  const getStatusBadge = (status: TableRow['status']) => {\n    const variants = {\n      active: 'default',\n      pending: 'secondary',\n      inactive: 'outline'\n    } as const;\n\n    const colors = {\n      active: isDarkMode ? 'bg-green-900 text-green-300 border-green-700' : 'bg-green-100 text-green-800 border-green-300',\n      pending: isDarkMode ? 'bg-yellow-900 text-yellow-300 border-yellow-700' : 'bg-yellow-100 text-yellow-800 border-yellow-300',\n      inactive: isDarkMode ? 'bg-gray-700 text-gray-300 border-gray-600' : 'bg-gray-100 text-gray-800 border-gray-300'\n    };\n\n    return (\n      <Badge variant={variants[status]} className={colors[status]}>\n        {status.charAt(0).toUpperCase() + status.slice(1)}\n      </Badge>\n    );\n  };\n\n  const handleRefresh = useCallback(() => {\n    setIsRefreshing(true);\n    \n    setTimeout(() => {\n      // Generate updated metrics with random variations\n      const updatedMetrics = mockMetrics.map(metric => ({\n        ...metric,\n        value: metric.value + Math.floor(Math.random() * 200 - 100),\n        change: parseFloat((Math.random() * 20 - 5).toFixed(1)),\n        trend: Math.random() > 0.5 ? 'up' as const : 'down' as const\n      }));\n      \n      // Generate updated chart data with random variations\n      const updatedChartData = mockChartData.map(point => ({\n        ...point,\n        revenue: point.revenue + Math.floor(Math.random() * 4000 - 2000),\n        users: point.users + Math.floor(Math.random() * 100 - 50),\n        orders: point.orders + Math.floor(Math.random() * 50 - 25)\n      }));\n      \n      // Generate updated table data with random variations\n      const updatedTableData = mockTableData.map(row => ({\n        ...row,\n        sales: row.sales + Math.floor(Math.random() * 40 - 20),\n        revenue: row.revenue + Math.floor(Math.random() * 2000 - 1000)\n      }));\n      \n      setMetrics(updatedMetrics);\n      setChartData(updatedChartData);\n      setTableData(updatedTableData);\n      setIsRefreshing(false);\n    }, 1500);\n  }, []);\n\n  return (\n    <div className={`min-h-screen ${isDarkMode ? 'dark bg-gray-900' : 'bg-gray-50'}`}>\n      <div className=\"container mx-auto p-4 md:p-6 lg:p-8\">\n        <div className=\"flex flex-col md:flex-row justify-between items-start md:items-center gap-4 mb-8\">\n          <div>\n            <h1 className={`text-3xl md:text-4xl font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n              Analytics Dashboard\n            </h1>\n            <p className={`mt-2 ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n              Real-time insights and performance metrics\n            </p>\n          </div>\n          \n          <div className=\"flex gap-2\">\n            <Button\n              variant=\"outline\"\n              size=\"icon\"\n              onClick={toggleDarkMode}\n              className={isDarkMode ? 'border-gray-700' : ''}\n            >\n              {isDarkMode ? <Sun className=\"h-5 w-5\" /> : <Moon className=\"h-5 w-5\" />}\n            </Button>\n            \n            <Button\n              variant=\"outline\"\n              onClick={handleRefresh}\n              disabled={isRefreshing}\n              className={isDarkMode ? 'border-gray-700' : ''}\n            >\n              <RefreshCw className={`h-4 w-4 mr-2 ${isRefreshing ? 'animate-spin' : ''}`} />\n              Refresh\n            </Button>\n          </div>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 md:gap-6 mb-8\">\n          {metrics.map((metric, index) => {\n            const Icon = metric.label.includes('Revenue') ? DollarSign :\n                        metric.label.includes('Users') ? Users :\n                        metric.label.includes('Orders') ? ShoppingCart :\n                        Target;\n            \n            const TrendIcon = metric.trend === 'up' ? TrendingUp : TrendingDown;\n            const trendColor = metric.trend === 'up' ? 'text-green-500' : 'text-red-500';\n            const trendBgColor = metric.trend === 'up' ? 'bg-green-50 dark:bg-green-900/20' : 'bg-red-50 dark:bg-red-900/20';\n\n            return (\n              <motion.div\n                key={metric.id}\n                initial={{ opacity: 0, y: 20 }}\n                animate={{ opacity: 1, y: 0 }}\n                transition={{ duration: 0.4, delay: index * 0.1 }}\n              >\n                <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n                  <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                    <CardTitle className={`text-sm font-medium ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                      {metric.label}\n                    </CardTitle>\n                    <div className={`p-2 rounded-lg ${isDarkMode ? 'bg-gray-700' : 'bg-gray-100'}`}>\n                      <Icon className={`h-4 w-4 ${isDarkMode ? 'text-gray-300' : 'text-gray-600'}`} />\n                    </div>\n                  </CardHeader>\n                  <CardContent>\n                    <div className={`text-2xl font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                      {metric.label.includes('Revenue') ? `$${metric.value.toLocaleString()}` :\n                       metric.label.includes('Rate') ? `${metric.value}%` :\n                       metric.value.toLocaleString()}\n                    </div>\n                    <div className=\"flex items-center mt-2\">\n                      <div className={`flex items-center gap-1 px-2 py-1 rounded-full ${trendBgColor}`}>\n                        <TrendIcon className={`h-3 w-3 ${trendColor}`} />\n                        <span className={`text-xs font-medium ${trendColor}`}>\n                          {Math.abs(metric.change)}%\n                        </span>\n                      </div>\n                      <span className={`text-xs ml-2 ${isDarkMode ? 'text-gray-400' : 'text-gray-500'}`}>\n                        vs last period\n                      </span>\n                    </div>\n                  </CardContent>\n                </Card>\n              </motion.div>\n            );\n          })}\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-4 md:gap-6 mb-8\">\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Revenue Overview</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Daily revenue trends\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <RevenueChart data={chartData} isDarkMode={isDarkMode} />\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>User Activity</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Active users over time\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"h-[300px] w-full\">\n                <svg width=\"100%\" height=\"100%\" viewBox=\"0 0 700 300\" preserveAspectRatio=\"none\">\n                  <defs>\n                    <linearGradient id=\"userGradient\" x1=\"0\" x2=\"0\" y1=\"0\" y2=\"1\">\n                      <stop offset=\"0%\" stopColor=\"#3b82f6\" stopOpacity=\"0.4\" />\n                      <stop offset=\"100%\" stopColor=\"#3b82f6\" stopOpacity=\"0.05\" />\n                    </linearGradient>\n                  </defs>\n                  \n                  {/* Grid lines */}\n                  {[0, 1, 2, 3, 4].map((i) => (\n                    <line\n                      key={i}\n                      x1=\"0\"\n                      y1={i * 60 + 20}\n                      x2=\"700\"\n                      y2={i * 60 + 20}\n                      stroke={isDarkMode ? '#374151' : '#e5e7eb'}\n                      strokeWidth=\"1\"\n                    />\n                  ))}\n                  \n                  {/* Area path */}\n                  <motion.path\n                    d={`M 0,${280 - (chartData[0].users / 800) * 260}\n                        L 116.67,${280 - (chartData[1].users / 800) * 260}\n                        L 233.33,${280 - (chartData[2].users / 800) * 260}\n                        L 350,${280 - (chartData[3].users / 800) * 260}\n                        L 466.67,${280 - (chartData[4].users / 800) * 260}\n                        L 583.33,${280 - (chartData[5].users / 800) * 260}\n                        L 700,${280 - (chartData[6].users / 800) * 260}\n                        L 700,280 L 0,280 Z`}\n                    fill=\"url(#userGradient)\"\n                    initial={{ opacity: 0 }}\n                    animate={{ opacity: 1 }}\n                    transition={{ duration: 0.8, ease: \"easeOut\" }}\n                  />\n                  \n                  {/* Line path */}\n                  <motion.path\n                    d={`M 0,${280 - (chartData[0].users / 800) * 260}\n                        L 116.67,${280 - (chartData[1].users / 800) * 260}\n                        L 233.33,${280 - (chartData[2].users / 800) * 260}\n                        L 350,${280 - (chartData[3].users / 800) * 260}\n                        L 466.67,${280 - (chartData[4].users / 800) * 260}\n                        L 583.33,${280 - (chartData[5].users / 800) * 260}\n                        L 700,${280 - (chartData[6].users / 800) * 260}`}\n                    fill=\"none\"\n                    stroke=\"#3b82f6\"\n                    strokeWidth=\"3\"\n                    strokeLinecap=\"round\"\n                    strokeLinejoin=\"round\"\n                    initial={{ pathLength: 0 }}\n                    animate={{ pathLength: 1 }}\n                    transition={{ duration: 1.5, ease: \"easeInOut\" }}\n                  />\n                  \n                  {/* Data points */}\n                  {chartData.map((point, index) => {\n                    const x = index * 116.67;\n                    const y = 280 - (point.users / 800) * 260;\n                    return (\n                      <g key={point.date}>\n                        <motion.circle\n                          cx={x}\n                          cy={y}\n                          r=\"5\"\n                          fill=\"#3b82f6\"\n                          stroke={isDarkMode ? '#1f2937' : '#ffffff'}\n                          strokeWidth=\"2\"\n                          initial={{ scale: 0 }}\n                          animate={{ scale: 1 }}\n                          transition={{ delay: index * 0.1 + 0.5, duration: 0.3 }}\n                          className=\"cursor-pointer hover:r-7 transition-all\"\n                        />\n                        <motion.circle\n                          cx={x}\n                          cy={y}\n                          r=\"8\"\n                          fill=\"#3b82f6\"\n                          opacity=\"0\"\n                          initial={{ scale: 0 }}\n                          animate={{ scale: 1 }}\n                          transition={{ delay: index * 0.1 + 0.5, duration: 0.3 }}\n                          className=\"cursor-pointer hover:opacity-20 transition-opacity\"\n                        />\n                      </g>\n                    );\n                  })}\n                </svg>\n                \n                {/* X-axis labels */}\n                <div className=\"flex justify-between mt-2 px-1\">\n                  {chartData.map((point, index) => (\n                    <motion.span\n                      key={point.date}\n                      className={`text-xs ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}\n                      initial={{ opacity: 0, y: -10 }}\n                      animate={{ opacity: 1, y: 0 }}\n                      transition={{ delay: index * 0.1 + 0.8 }}\n                    >\n                      {new Date(point.date).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n                    </motion.span>\n                  ))}\n                </div>\n                \n                {/* Stats summary */}\n                <motion.div\n                  className=\"flex items-center justify-between mt-4 pt-4 border-t\"\n                  style={{ borderColor: isDarkMode ? '#374151' : '#e5e7eb' }}\n                  initial={{ opacity: 0 }}\n                  animate={{ opacity: 1 }}\n                  transition={{ delay: 1.2 }}\n                >\n                  <div>\n                    <p className={`text-sm ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                      Peak Users\n                    </p>\n                    <p className={`text-2xl font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                      {Math.max(...chartData.map(d => d.users))}\n                    </p>\n                  </div>\n                  <div className=\"text-right\">\n                    <p className={`text-sm ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                      Growth\n                    </p>\n                    <div className=\"flex items-center gap-1\">\n                      <TrendingUp className=\"h-4 w-4 text-green-500\" />\n                      <p className=\"text-2xl font-bold text-green-500\">\n                        {(((chartData[chartData.length - 1].users - chartData[0].users) / chartData[0].users) * 100).toFixed(1)}%\n                      </p>\n                    </div>\n                  </div>\n                </motion.div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-4 md:gap-6 mb-8\">\n          <Card className={`lg:col-span-2 ${isDarkMode ? 'bg-gray-800 border-gray-700' : ''}`}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Performance Metrics</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Combined view of key metrics\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"h-[300px] w-full\">\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <LineChart data={chartData}>\n                    <CartesianGrid \n                      strokeDasharray=\"3 3\" \n                      stroke={isDarkMode ? '#374151' : '#e5e7eb'} \n                    />\n                    <XAxis \n                      dataKey=\"date\" \n                      stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                      tick={{ fill: isDarkMode ? '#9ca3af' : '#6b7280' }}\n                      tickFormatter={(value) => new Date(value).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n                    />\n                    <YAxis \n                      stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                      tick={{ fill: isDarkMode ? '#9ca3af' : '#6b7280' }}\n                    />\n                    <Tooltip \n                      contentStyle={{\n                        backgroundColor: isDarkMode ? '#1f2937' : '#ffffff',\n                        border: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\n                        borderRadius: '8px',\n                        color: isDarkMode ? '#ffffff' : '#000000'\n                      }}\n                      labelFormatter={(value) => new Date(value).toLocaleDateString('en-US', { month: 'long', day: 'numeric', year: 'numeric' })}\n                    />\n                    <Legend \n                      wrapperStyle={{\n                        color: isDarkMode ? '#9ca3af' : '#6b7280'\n                      }}\n                    />\n                    <Line \n                      type=\"monotone\" \n                      dataKey=\"revenue\" \n                      stroke=\"#3b82f6\" \n                      strokeWidth={2}\n                      dot={{ fill: '#3b82f6', r: 4 }}\n                      activeDot={{ r: 6 }}\n                      name=\"Revenue ($)\"\n                    />\n                    <Line \n                      type=\"monotone\" \n                      dataKey=\"users\" \n                      stroke=\"#10b981\" \n                      strokeWidth={2}\n                      dot={{ fill: '#10b981', r: 4 }}\n                      activeDot={{ r: 6 }}\n                      name=\"Users\"\n                    />\n                    <Line \n                      type=\"monotone\" \n                      dataKey=\"orders\" \n                      stroke=\"#f59e0b\" \n                      strokeWidth={2}\n                      dot={{ fill: '#f59e0b', r: 4 }}\n                      activeDot={{ r: 6 }}\n                      name=\"Orders\"\n                    />\n                  </LineChart>\n                </ResponsiveContainer>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Distribution</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Sales by category\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <PieChart data={mockPieData} isDarkMode={isDarkMode} />\n            </CardContent>\n          </Card>\n        </div>\n\n        <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n          <CardHeader>\n            <CardTitle className={isDarkMode ? 'text-white' : ''}>Top Products</CardTitle>\n            <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n              Best performing products by revenue\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              <div className=\"rounded-md border\" style={{ borderColor: isDarkMode ? '#374151' : '#e5e7eb' }}>\n                <Table>\n                  <TableHeader>\n                    <TableRow className={isDarkMode ? 'border-gray-700 hover:bg-gray-750' : ''}>\n                      <TableHead className={isDarkMode ? 'text-gray-300' : ''}>\n                        <Button\n                          variant=\"ghost\"\n                          onClick={() => handleSort('product')}\n                          className={`flex items-center gap-1 ${isDarkMode ? 'hover:bg-gray-700 text-gray-300' : ''}`}\n                        >\n                          Product\n                          <ArrowUpDown className=\"h-4 w-4\" />\n                        </Button>\n                      </TableHead>\n                      <TableHead className={isDarkMode ? 'text-gray-300' : ''}>\n                        <Button\n                          variant=\"ghost\"\n                          onClick={() => handleSort('sales')}\n                          className={`flex items-center gap-1 ${isDarkMode ? 'hover:bg-gray-700 text-gray-300' : ''}`}\n                        >\n                          Sales\n                          <ArrowUpDown className=\"h-4 w-4\" />\n                        </Button>\n                      </TableHead>\n                      <TableHead className={isDarkMode ? 'text-gray-300' : ''}>\n                        <Button\n                          variant=\"ghost\"\n                          onClick={() => handleSort('revenue')}\n                          className={`flex items-center gap-1 ${isDarkMode ? 'hover:bg-gray-700 text-gray-300' : ''}`}\n                        >\n                          Revenue\n                          <ArrowUpDown className=\"h-4 w-4\" />\n                        </Button>\n                      </TableHead>\n                      <TableHead className={isDarkMode ? 'text-gray-300' : ''}>\n                        <Button\n                          variant=\"ghost\"\n                          onClick={() => handleSort('status')}\n                          className={`flex items-center gap-1 ${isDarkMode ? 'hover:bg-gray-700 text-gray-300' : ''}`}\n                        >\n                          Status\n                          <ArrowUpDown className=\"h-4 w-4\" />\n                        </Button>\n                      </TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {paginatedData().map((row) => (\n                      <TableRow \n                        key={row.id}\n                        className={isDarkMode ? 'border-gray-700 hover:bg-gray-750' : ''}\n                      >\n                        <TableCell className={`font-medium ${isDarkMode ? 'text-gray-200' : ''}`}>\n                          {row.product}\n                        </TableCell>\n                        <TableCell className={isDarkMode ? 'text-gray-300' : ''}>\n                          {row.sales.toLocaleString()}\n                        </TableCell>\n                        <TableCell className={isDarkMode ? 'text-gray-300' : ''}>\n                          ${row.revenue.toLocaleString()}\n                        </TableCell>\n                        <TableCell>\n                          {getStatusBadge(row.status)}\n                        </TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              </div>\n\n              <div className=\"flex items-center justify-between\">\n                <p className={`text-sm ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                  Showing {((currentPage - 1) * itemsPerPage) + 1} to {Math.min(currentPage * itemsPerPage, tableData.length)} of {tableData.length} products\n                </p>\n                \n                <div className=\"flex items-center gap-2\">\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => setCurrentPage(prev => Math.max(1, prev - 1))}\n                    disabled={currentPage === 1}\n                    className={isDarkMode ? 'border-gray-700 text-gray-300 hover:bg-gray-700' : ''}\n                  >\n                    <ChevronLeft className=\"h-4 w-4\" />\n                    Previous\n                  </Button>\n                  \n                  <div className=\"flex items-center gap-1\">\n                    {Array.from({ length: totalPages }, (_, i) => i + 1).map((page) => (\n                      <Button\n                        key={page}\n                        variant={currentPage === page ? 'default' : 'outline'}\n                        size=\"sm\"\n                        onClick={() => setCurrentPage(page)}\n                        className={currentPage === page \n                          ? '' \n                          : isDarkMode ? 'border-gray-700 text-gray-300 hover:bg-gray-700' : ''\n                        }\n                      >\n                        {page}\n                      </Button>\n                    ))}\n                  </div>\n                  \n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => setCurrentPage(prev => Math.min(totalPages, prev + 1))}\n                    disabled={currentPage === totalPages}\n                    className={isDarkMode ? 'border-gray-700 text-gray-300 hover:bg-gray-700' : ''}\n                  >\n                    Next\n                    <ChevronRight className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 md:gap-6 mt-8\">\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Recent Activity</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"max-h-[400px] overflow-y-auto space-y-4 pr-2\">\n                {mockActivityData.map((activity, index) => {\n                  const getIcon = () => {\n                    switch (activity.icon) {\n                      case 'ShoppingCart':\n                        return <ShoppingCart className=\"h-4 w-4\" />;\n                      case 'UserPlus':\n                        return <UserPlus className=\"h-4 w-4\" />;\n                      case 'Package':\n                        return <Package className=\"h-4 w-4\" />;\n                      case 'AlertCircle':\n                        return <AlertCircle className=\"h-4 w-4\" />;\n                      case 'CheckCircle':\n                        return <CheckCircle className=\"h-4 w-4\" />;\n                      default:\n                        return <DollarSign className=\"h-4 w-4\" />;\n                    }\n                  };\n\n                  const getIconColor = () => {\n                    switch (activity.type) {\n                      case 'sale':\n                        return 'bg-green-100 text-green-600 dark:bg-green-900/30 dark:text-green-400';\n                      case 'user':\n                        return 'bg-blue-100 text-blue-600 dark:bg-blue-900/30 dark:text-blue-400';\n                      case 'order':\n                        return 'bg-purple-100 text-purple-600 dark:bg-purple-900/30 dark:text-purple-400';\n                      case 'alert':\n                        return 'bg-orange-100 text-orange-600 dark:bg-orange-900/30 dark:text-orange-400';\n                      case 'success':\n                        return 'bg-emerald-100 text-emerald-600 dark:bg-emerald-900/30 dark:text-emerald-400';\n                      default:\n                        return 'bg-gray-100 text-gray-600 dark:bg-gray-700 dark:text-gray-400';\n                    }\n                  };\n\n                  return (\n                    <motion.div\n                      key={activity.id}\n                      initial={{ opacity: 0, x: -20 }}\n                      animate={{ opacity: 1, x: 0 }}\n                      transition={{ delay: index * 0.05 }}\n                      className={`flex items-start gap-3 p-3 rounded-lg transition-colors ${\n                        isDarkMode ? 'hover:bg-gray-700/50' : 'hover:bg-gray-50'\n                      }`}\n                    >\n                      <div className={`p-2 rounded-full ${getIconColor()}`}>\n                        {getIcon()}\n                      </div>\n                      <div className=\"flex-1 min-w-0\">\n                        <p className={`text-sm font-medium ${isDarkMode ? 'text-gray-200' : 'text-gray-900'}`}>\n                          {activity.message}\n                        </p>\n                        <p className={`text-xs mt-1 ${isDarkMode ? 'text-gray-500' : 'text-gray-500'}`}>\n                          {activity.timestamp}\n                        </p>\n                      </div>\n                    </motion.div>\n                  );\n                })}\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Quick Stats</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {mockQuickStats.map((stat) => {\n                  const Icon = stat.icon;\n                  const percentage = Math.round((stat.value / stat.target) * 100);\n                  \n                  const colorClasses = {\n                    blue: isDarkMode ? 'text-blue-400' : 'text-blue-600',\n                    green: isDarkMode ? 'text-green-400' : 'text-green-600',\n                    yellow: isDarkMode ? 'text-yellow-400' : 'text-yellow-600',\n                    purple: isDarkMode ? 'text-purple-400' : 'text-purple-600'\n                  };\n                  \n                  const bgClasses = {\n                    blue: isDarkMode ? 'bg-blue-500/20' : 'bg-blue-100',\n                    green: isDarkMode ? 'bg-green-500/20' : 'bg-green-100',\n                    yellow: isDarkMode ? 'bg-yellow-500/20' : 'bg-yellow-100',\n                    purple: isDarkMode ? 'bg-purple-500/20' : 'bg-purple-100'\n                  };\n                  \n                  const progressClasses = {\n                    blue: 'bg-blue-500',\n                    green: 'bg-green-500',\n                    yellow: 'bg-yellow-500',\n                    purple: 'bg-purple-500'\n                  };\n                  \n                  return (\n                    <div key={stat.id} className=\"space-y-2\">\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"flex items-center gap-2\">\n                          <div className={`p-2 rounded-lg ${bgClasses[stat.color as keyof typeof bgClasses]}`}>\n                            <Icon className={`h-4 w-4 ${colorClasses[stat.color as keyof typeof colorClasses]}`} />\n                          </div>\n                          <span className={`text-sm font-medium ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>\n                            {stat.label}\n                          </span>\n                        </div>\n                        <span className={`text-sm font-bold ${colorClasses[stat.color as keyof typeof colorClasses]}`}>\n                          {percentage}%\n                        </span>\n                      </div>\n                      <div className={`h-2 rounded-full overflow-hidden ${isDarkMode ? 'bg-gray-700' : 'bg-gray-200'}`}>\n                        <div\n                          className={`h-full ${progressClasses[stat.color as keyof typeof progressClasses]} transition-all duration-500 ease-out`}\n                          style={{ width: `${percentage}%` }}\n                        />\n                      </div>\n                    </div>\n                  );\n                })}\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Alerts</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-3\">\n                {mockAlerts.map((alert) => {\n                  const severityConfig = {\n                    info: {\n                      icon: Info,\n                      bgColor: isDarkMode ? 'bg-blue-900/30' : 'bg-blue-50',\n                      borderColor: isDarkMode ? 'border-blue-700' : 'border-blue-200',\n                      iconColor: isDarkMode ? 'text-blue-400' : 'text-blue-600',\n                      textColor: isDarkMode ? 'text-gray-300' : 'text-gray-700'\n                    },\n                    warning: {\n                      icon: AlertTriangle,\n                      bgColor: isDarkMode ? 'bg-yellow-900/30' : 'bg-yellow-50',\n                      borderColor: isDarkMode ? 'border-yellow-700' : 'border-yellow-200',\n                      iconColor: isDarkMode ? 'text-yellow-400' : 'text-yellow-600',\n                      textColor: isDarkMode ? 'text-gray-300' : 'text-gray-700'\n                    },\n                    error: {\n                      icon: AlertCircle,\n                      bgColor: isDarkMode ? 'bg-red-900/30' : 'bg-red-50',\n                      borderColor: isDarkMode ? 'border-red-700' : 'border-red-200',\n                      iconColor: isDarkMode ? 'text-red-400' : 'text-red-600',\n                      textColor: isDarkMode ? 'text-gray-300' : 'text-gray-700'\n                    },\n                    success: {\n                      icon: CheckCircle,\n                      bgColor: isDarkMode ? 'bg-green-900/30' : 'bg-green-50',\n                      borderColor: isDarkMode ? 'border-green-700' : 'border-green-200',\n                      iconColor: isDarkMode ? 'text-green-400' : 'text-green-600',\n                      textColor: isDarkMode ? 'text-gray-300' : 'text-gray-700'\n                    }\n                  };\n\n                  const config = severityConfig[alert.severity];\n                  const IconComponent = config.icon;\n\n                  return (\n                    <div\n                      key={alert.id}\n                      className={`flex items-start gap-3 p-3 rounded-lg border ${config.bgColor} ${config.borderColor}`}\n                    >\n                      <IconComponent className={`h-5 w-5 mt-0.5 flex-shrink-0 ${config.iconColor}`} />\n                      <div className=\"flex-1 min-w-0\">\n                        <p className={`text-sm ${config.textColor}`}>\n                          {alert.message}\n                        </p>\n                        <p className={`text-xs mt-1 ${isDarkMode ? 'text-gray-500' : 'text-gray-500'}`}>\n                          {alert.timestamp}\n                        </p>\n                      </div>\n                    </div>\n                  );\n                })}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}",
  "error": null,
  "overall_score": 53,
  "code_quality_score": 14,
  "architecture_score": 12,
  "performance_score": 16,
  "accessibility_score": 11,
  "metadata": {
    "document_id": "eval_room_cc6d8d1be6c7",
    "prompt_category": "intermediate",
    "prompt_complexity": 6.0
  },
  "raw_response": {
    "document_id": "eval_room_cc6d8d1be6c7",
    "mode": "parallel",
    "prompt": "Generate an analytics dashboard page with charts, data tables, real-time updates, dark mode, and responsive design",
    "content": "import { useState, useCallback } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Moon, Sun, RefreshCw } from 'lucide-react';\nimport { AlertCircle, AlertTriangle, Info, CheckCircle } from 'lucide-react';\nimport { ShoppingCart, UserPlus, DollarSign, Package, CheckCircle, AlertCircle } from 'lucide-react';\nimport { ArrowUpDown, ChevronLeft, ChevronRight } from 'lucide-react';\nimport { Badge } from '@/components/ui/badge';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\n\n\nimport { motion } from 'framer-motion';\n\nimport { motion } from 'framer-motion';\n\n\nimport { TrendingUp, TrendingDown, Target, Zap } from 'lucide-react';\n\nimport { TrendingUp, TrendingDown, DollarSign, Users, ShoppingCart, Target } from 'lucide-react';\nimport { motion } from 'framer-motion';\n\ninterface MetricData {\n  id: string;\n  label: string;\n  value: number;\n  change: number;\n  trend: 'up' | 'down';\n}\n\ninterface ChartDataPoint {\n  date: string;\n  revenue: number;\n  users: number;\n  orders: number;\n}\n\ninterface TableRow {\n  id: string;\n  product: string;\n  sales: number;\n  revenue: number;\n  status: 'active' | 'pending' | 'inactive';\n}\n\nconst mockMetrics: MetricData[] = [\n  { id: '1', label: 'Total Revenue', value: 45231, change: 12.5, trend: 'up' },\n  { id: '2', label: 'Active Users', value: 2350, change: 8.2, trend: 'up' },\n  { id: '3', label: 'Total Orders', value: 1543, change: -3.1, trend: 'down' },\n  { id: '4', label: 'Conversion Rate', value: 3.24, change: 5.7, trend: 'up' }\n];\n\nconst mockChartData: ChartDataPoint[] = [\n  { date: '2024-01-01', revenue: 12000, users: 450, orders: 230 },\n  { date: '2024-01-02', revenue: 15000, users: 520, orders: 280 },\n  { date: '2024-01-03', revenue: 13500, users: 490, orders: 250 },\n  { date: '2024-01-04', revenue: 18000, users: 610, orders: 320 },\n  { date: '2024-01-05', revenue: 16500, users: 580, orders: 295 },\n  { date: '2024-01-06', revenue: 20000, users: 680, orders: 350 },\n  { date: '2024-01-07', revenue: 22000, users: 720, orders: 380 }\n];\n\nconst mockTableData: TableRow[] = [\n  { id: '1', product: 'Premium Plan', sales: 234, revenue: 23400, status: 'active' },\n  { id: '2', product: 'Basic Plan', sales: 567, revenue: 11340, status: 'active' },\n  { id: '3', product: 'Enterprise Plan', sales: 89, revenue: 44500, status: 'active' },\n  { id: '4', product: 'Starter Plan', sales: 432, revenue: 4320, status: 'pending' },\n  { id: '5', product: 'Pro Plan', sales: 156, revenue: 15600, status: 'inactive' }\n];\ninterface ActivityItem {\n  id: string;\n  type: 'sale' | 'user' | 'order' | 'alert' | 'success';\n  message: string;\n  timestamp: string;\n  icon: 'ShoppingCart' | 'UserPlus' | 'Package' | 'AlertCircle' | 'CheckCircle';\n}\n\nconst mockActivityData: ActivityItem[] = [\n  { id: '1', type: 'sale', message: 'New sale: Premium Plan', timestamp: '2 minutes ago', icon: 'ShoppingCart' },\n  { id: '2', type: 'user', message: 'New user registered', timestamp: '5 minutes ago', icon: 'UserPlus' },\n  { id: '3', type: 'success', message: 'Payment processed successfully', timestamp: '12 minutes ago', icon: 'CheckCircle' },\n  { id: '4', type: 'order', message: 'Order #1234 shipped', timestamp: '23 minutes ago', icon: 'Package' },\n  { id: '5', type: 'sale', message: 'New sale: Enterprise Plan', timestamp: '35 minutes ago', icon: 'ShoppingCart' },\n  { id: '6', type: 'alert', message: 'Low stock alert: Starter Plan', timestamp: '1 hour ago', icon: 'AlertCircle' },\n  { id: '7', type: 'user', message: 'New user registered', timestamp: '1 hour ago', icon: 'UserPlus' },\n  { id: '8', type: 'success', message: 'Refund completed', timestamp: '2 hours ago', icon: 'CheckCircle' },\n  { id: '9', type: 'order', message: 'Order #1235 delivered', timestamp: '3 hours ago', icon: 'Package' },\n  { id: '10', type: 'sale', message: 'New sale: Pro Plan', timestamp: '4 hours ago', icon: 'ShoppingCart' }\n];\ninterface AlertData {\n  id: string;\n  message: string;\n  severity: 'info' | 'warning' | 'error' | 'success';\n  timestamp: string;\n}\n\nconst mockAlerts: AlertData[] = [\n  { id: '1', message: 'System backup completed successfully', severity: 'success', timestamp: '2 min ago' },\n  { id: '2', message: 'High server load detected', severity: 'warning', timestamp: '15 min ago' },\n  { id: '3', message: 'New user registration spike', severity: 'info', timestamp: '1 hour ago' },\n  { id: '4', message: 'Payment gateway timeout', severity: 'error', timestamp: '2 hours ago' },\n  { id: '5', message: 'Database optimization recommended', severity: 'warning', timestamp: '3 hours ago' }\n];\ninterface QuickStatData {\n  id: string;\n  label: string;\n  value: number;\n  target: number;\n  icon: any;\n  color: string;\n}\n\nconst mockQuickStats: QuickStatData[] = [\n  { id: '1', label: 'Monthly Goal', value: 75, target: 100, icon: Target, color: 'blue' },\n  { id: '2', label: 'Customer Satisfaction', value: 92, target: 100, icon: TrendingUp, color: 'green' },\n  { id: '3', label: 'Response Time', value: 68, target: 100, icon: Zap, color: 'yellow' },\n  { id: '4', label: 'Task Completion', value: 85, target: 100, icon: TrendingUp, color: 'purple' }\n];\nconst mockPieData = [\n  { category: 'Premium Plan', value: 23400, color: '#3b82f6' },\n  { category: 'Enterprise Plan', value: 44500, color: '#8b5cf6' },\n  { category: 'Pro Plan', value: 15600, color: '#10b981' },\n  { category: 'Basic Plan', value: 11340, color: '#f59e0b' },\n  { category: 'Starter Plan', value: 4320, color: '#ef4444' }\n];\n\nconst PieChart = ({ data, isDarkMode }: { data: typeof mockPieData, isDarkMode: boolean }) => {\n  const [hoveredIndex, setHoveredIndex] = useState<number | null>(null);\n  \n  const total = data.reduce((sum, item) => sum + item.value, 0);\n  \n  let currentAngle = -90;\n  const segments = data.map((item, index) => {\n    const percentage = (item.value / total) * 100;\n    const angle = (percentage / 100) * 360;\n    const startAngle = currentAngle;\n    const endAngle = currentAngle + angle;\n    currentAngle = endAngle;\n    \n    return {\n      ...item,\n      percentage,\n      startAngle,\n      endAngle\n    };\n  });\n  \n  const createArcPath = (startAngle: number, endAngle: number, radius: number, innerRadius: number = 0) => {\n    const start = polarToCartesian(100, 100, radius, endAngle);\n    const end = polarToCartesian(100, 100, radius, startAngle);\n    const largeArcFlag = endAngle - startAngle <= 180 ? '0' : '1';\n    \n    if (innerRadius > 0) {\n      const innerStart = polarToCartesian(100, 100, innerRadius, endAngle);\n      const innerEnd = polarToCartesian(100, 100, innerRadius, startAngle);\n      \n      return [\n        'M', start.x, start.y,\n        'A', radius, radius, 0, largeArcFlag, 0, end.x, end.y,\n        'L', innerEnd.x, innerEnd.y,\n        'A', innerRadius, innerRadius, 0, largeArcFlag, 1, innerStart.x, innerStart.y,\n        'Z'\n      ].join(' ');\n    }\n    \n    return [\n      'M', 100, 100,\n      'L', start.x, start.y,\n      'A', radius, radius, 0, largeArcFlag, 0, end.x, end.y,\n      'Z'\n    ].join(' ');\n  };\n  \n  const polarToCartesian = (centerX: number, centerY: number, radius: number, angleInDegrees: number) => {\n    const angleInRadians = (angleInDegrees * Math.PI) / 180;\n    return {\n      x: centerX + radius * Math.cos(angleInRadians),\n      y: centerY + radius * Math.sin(angleInRadians)\n    };\n  };\n  \n  return (\n    <div className=\"flex flex-col items-center gap-6\">\n      <div className=\"relative w-full max-w-[280px] aspect-square\">\n        <svg viewBox=\"0 0 200 200\" className=\"w-full h-full\">\n          {segments.map((segment, index) => {\n            const isHovered = hoveredIndex === index;\n            const radius = isHovered ? 85 : 80;\n            const innerRadius = 40;\n            \n            return (\n              <motion.g\n                key={segment.category}\n                initial={{ opacity: 0, scale: 0 }}\n                animate={{ opacity: 1, scale: 1 }}\n                transition={{ delay: index * 0.1, duration: 0.5 }}\n                onMouseEnter={() => setHoveredIndex(index)}\n                onMouseLeave={() => setHoveredIndex(null)}\n              >\n                <motion.path\n                  d={createArcPath(segment.startAngle, segment.endAngle, radius, innerRadius)}\n                  fill={segment.color}\n                  stroke={isDarkMode ? '#1f2937' : '#ffffff'}\n                  strokeWidth=\"2\"\n                  className=\"cursor-pointer transition-all duration-200\"\n                  animate={{\n                    d: createArcPath(segment.startAngle, segment.endAngle, radius, innerRadius)\n                  }}\n                  transition={{ duration: 0.2 }}\n                />\n                {isHovered && (\n                  <motion.text\n                    x=\"100\"\n                    y=\"95\"\n                    textAnchor=\"middle\"\n                    className={`text-xs font-semibold ${isDarkMode ? 'fill-white' : 'fill-gray-900'}`}\n                    initial={{ opacity: 0 }}\n                    animate={{ opacity: 1 }}\n                  >\n                    {segment.percentage.toFixed(1)}%\n                  </motion.text>\n                )}\n              </motion.g>\n            );\n          })}\n          <circle\n            cx=\"100\"\n            cy=\"100\"\n            r=\"38\"\n            fill={isDarkMode ? '#1f2937' : '#ffffff'}\n          />\n          <text\n            x=\"100\"\n            y=\"105\"\n            textAnchor=\"middle\"\n            className={`text-sm font-bold ${isDarkMode ? 'fill-white' : 'fill-gray-900'}`}\n          >\n            ${(total / 1000).toFixed(0)}k\n          </text>\n        </svg>\n      </div>\n      \n      <div className=\"w-full space-y-2\">\n        {segments.map((segment, index) => (\n          <motion.div\n            key={segment.category}\n            initial={{ opacity: 0, x: -20 }}\n            animate={{ opacity: 1, x: 0 }}\n            transition={{ delay: index * 0.1 + 0.3 }}\n            className={`flex items-center justify-between p-2 rounded-lg transition-colors cursor-pointer ${\n              hoveredIndex === index\n                ? isDarkMode ? 'bg-gray-700' : 'bg-gray-100'\n                : ''\n            }`}\n            onMouseEnter={() => setHoveredIndex(index)}\n            onMouseLeave={() => setHoveredIndex(null)}\n          >\n            <div className=\"flex items-center gap-2\">\n              <div\n                className=\"w-3 h-3 rounded-full\"\n                style={{ backgroundColor: segment.color }}\n              />\n              <span className={`text-sm ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>\n                {segment.category}\n              </span>\n            </div>\n            <div className=\"flex items-center gap-3\">\n              <span className={`text-sm font-semibold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                ${segment.value.toLocaleString()}\n              </span>\n              <span className={`text-xs ${isDarkMode ? 'text-gray-400' : 'text-gray-500'}`}>\n                {segment.percentage.toFixed(1)}%\n              </span>\n            </div>\n          </motion.div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nconst RevenueChart = ({ data, isDarkMode }: { data: ChartDataPoint[], isDarkMode: boolean }) => {\n  const [hoveredPoint, setHoveredPoint] = useState<number | null>(null);\n  \n  const maxRevenue = Math.max(...data.map(d => d.revenue));\n  const minRevenue = Math.min(...data.map(d => d.revenue));\n  const revenueRange = maxRevenue - minRevenue;\n  \n  const chartHeight = 250;\n  const chartWidth = 100;\n  const padding = 20;\n  \n  const getX = (index: number) => {\n    return (index / (data.length - 1)) * (chartWidth - padding * 2) + padding;\n  };\n  \n  const getY = (revenue: number) => {\n    const normalized = (revenue - minRevenue) / revenueRange;\n    return chartHeight - (normalized * (chartHeight - padding * 2) + padding);\n  };\n  \n  const pathData = data.map((point, index) => {\n    const x = getX(index);\n    const y = getY(point.revenue);\n    return `${index === 0 ? 'M' : 'L'} ${x} ${y}`;\n  }).join(' ');\n  \n  const gradientPathData = `${pathData} L ${getX(data.length - 1)} ${chartHeight} L ${getX(0)} ${chartHeight} Z`;\n  \n  return (\n    <div className=\"relative w-full h-[250px]\">\n      <svg\n        viewBox={`0 0 ${chartWidth} ${chartHeight}`}\n        className=\"w-full h-full\"\n        preserveAspectRatio=\"none\"\n      >\n        <defs>\n          <linearGradient id=\"revenueGradient\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n            <stop offset=\"0%\" stopColor=\"#3b82f6\" stopOpacity=\"0.3\" />\n            <stop offset=\"100%\" stopColor=\"#3b82f6\" stopOpacity=\"0\" />\n          </linearGradient>\n        </defs>\n        \n        <path\n          d={gradientPathData}\n          fill=\"url(#revenueGradient)\"\n        />\n        \n        <path\n          d={pathData}\n          fill=\"none\"\n          stroke=\"#3b82f6\"\n          strokeWidth=\"0.5\"\n          vectorEffect=\"non-scaling-stroke\"\n        />\n        \n        {data.map((point, index) => (\n          <g key={index}>\n            <circle\n              cx={getX(index)}\n              cy={getY(point.revenue)}\n              r={hoveredPoint === index ? \"1.5\" : \"1\"}\n              fill=\"#3b82f6\"\n              className=\"transition-all cursor-pointer\"\n              vectorEffect=\"non-scaling-stroke\"\n              onMouseEnter={() => setHoveredPoint(index)}\n              onMouseLeave={() => setHoveredPoint(null)}\n            />\n          </g>\n        ))}\n      </svg>\n      \n      {hoveredPoint !== null && (\n        <div\n          className={`absolute pointer-events-none ${isDarkMode ? 'bg-gray-700 text-white' : 'bg-white text-gray-900'} px-3 py-2 rounded-lg shadow-lg border ${isDarkMode ? 'border-gray-600' : 'border-gray-200'}`}\n          style={{\n            left: `${getX(hoveredPoint)}%`,\n            top: `${getY(data[hoveredPoint].revenue) / chartHeight * 100}%`,\n            transform: 'translate(-50%, -120%)'\n          }}\n        >\n          <div className=\"text-xs font-semibold mb-1\">\n            {new Date(data[hoveredPoint].date).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n          </div>\n          <div className=\"flex items-center gap-1\">\n            <TrendingUp className=\"h-3 w-3 text-blue-500\" />\n            <span className=\"text-sm font-bold\">\n              ${data[hoveredPoint].revenue.toLocaleString()}\n            </span>\n          </div>\n          <div className={`text-xs ${isDarkMode ? 'text-gray-400' : 'text-gray-500'}`}>\n            {data[hoveredPoint].users} users\n          </div>\n        </div>\n      )}\n      \n      <div className=\"absolute bottom-0 left-0 right-0 flex justify-between px-4 text-xs\">\n        {data.map((point, index) => {\n          if (index % Math.ceil(data.length / 4) === 0 || index === data.length - 1) {\n            return (\n              <span key={index} className={isDarkMode ? 'text-gray-400' : 'text-gray-500'}>\n                {new Date(point.date).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n              </span>\n            );\n          }\n          return null;\n        })}\n      </div>\n    </div>\n  );\n};\n\ntype SortField = 'product' | 'sales' | 'revenue' | 'status';\ntype SortDirection = 'asc' | 'desc';\n\nexport default function AnalyticsDashboard() {\n  const [isDarkMode, setIsDarkMode] = useState(false);\n  const [metrics, setMetrics] = useState<MetricData[]>(mockMetrics);\n  const [chartData, setChartData] = useState<ChartDataPoint[]>(mockChartData);\n  const [tableData, setTableData] = useState<TableRow[]>(mockTableData);\n  const [isRefreshing, setIsRefreshing] = useState(false);\n  const [sortField, setSortField] = useState<SortField>('revenue');\n  const [sortDirection, setSortDirection] = useState<SortDirection>('desc');\n  const [currentPage, setCurrentPage] = useState(1);\n  const itemsPerPage = 3;\n\n  const toggleDarkMode = useCallback(() => {\n    setIsDarkMode(prev => !prev);\n  }, []);\n  const handleSort = useCallback((field: SortField) => {\n    if (sortField === field) {\n      setSortDirection(prev => prev === 'asc' ? 'desc' : 'asc');\n    } else {\n      setSortField(field);\n      setSortDirection('desc');\n    }\n    setCurrentPage(1);\n  }, [sortField]);\n\n  const sortedData = useCallback(() => {\n    const sorted = [...tableData].sort((a, b) => {\n      let aValue = a[sortField];\n      let bValue = b[sortField];\n\n      if (typeof aValue === 'string') {\n        aValue = aValue.toLowerCase();\n        bValue = (bValue as string).toLowerCase();\n      }\n\n      if (aValue < bValue) return sortDirection === 'asc' ? -1 : 1;\n      if (aValue > bValue) return sortDirection === 'asc' ? 1 : -1;\n      return 0;\n    });\n    return sorted;\n  }, [tableData, sortField, sortDirection]);\n\n  const paginatedData = useCallback(() => {\n    const sorted = sortedData();\n    const startIndex = (currentPage - 1) * itemsPerPage;\n    const endIndex = startIndex + itemsPerPage;\n    return sorted.slice(startIndex, endIndex);\n  }, [sortedData, currentPage]);\n\n  const totalPages = Math.ceil(tableData.length / itemsPerPage);\n\n  const getStatusBadge = (status: TableRow['status']) => {\n    const variants = {\n      active: 'default',\n      pending: 'secondary',\n      inactive: 'outline'\n    } as const;\n\n    const colors = {\n      active: isDarkMode ? 'bg-green-900 text-green-300 border-green-700' : 'bg-green-100 text-green-800 border-green-300',\n      pending: isDarkMode ? 'bg-yellow-900 text-yellow-300 border-yellow-700' : 'bg-yellow-100 text-yellow-800 border-yellow-300',\n      inactive: isDarkMode ? 'bg-gray-700 text-gray-300 border-gray-600' : 'bg-gray-100 text-gray-800 border-gray-300'\n    };\n\n    return (\n      <Badge variant={variants[status]} className={colors[status]}>\n        {status.charAt(0).toUpperCase() + status.slice(1)}\n      </Badge>\n    );\n  };\n\n  const handleRefresh = useCallback(() => {\n    setIsRefreshing(true);\n    \n    setTimeout(() => {\n      // Generate updated metrics with random variations\n      const updatedMetrics = mockMetrics.map(metric => ({\n        ...metric,\n        value: metric.value + Math.floor(Math.random() * 200 - 100),\n        change: parseFloat((Math.random() * 20 - 5).toFixed(1)),\n        trend: Math.random() > 0.5 ? 'up' as const : 'down' as const\n      }));\n      \n      // Generate updated chart data with random variations\n      const updatedChartData = mockChartData.map(point => ({\n        ...point,\n        revenue: point.revenue + Math.floor(Math.random() * 4000 - 2000),\n        users: point.users + Math.floor(Math.random() * 100 - 50),\n        orders: point.orders + Math.floor(Math.random() * 50 - 25)\n      }));\n      \n      // Generate updated table data with random variations\n      const updatedTableData = mockTableData.map(row => ({\n        ...row,\n        sales: row.sales + Math.floor(Math.random() * 40 - 20),\n        revenue: row.revenue + Math.floor(Math.random() * 2000 - 1000)\n      }));\n      \n      setMetrics(updatedMetrics);\n      setChartData(updatedChartData);\n      setTableData(updatedTableData);\n      setIsRefreshing(false);\n    }, 1500);\n  }, []);\n\n  return (\n    <div className={`min-h-screen ${isDarkMode ? 'dark bg-gray-900' : 'bg-gray-50'}`}>\n      <div className=\"container mx-auto p-4 md:p-6 lg:p-8\">\n        <div className=\"flex flex-col md:flex-row justify-between items-start md:items-center gap-4 mb-8\">\n          <div>\n            <h1 className={`text-3xl md:text-4xl font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n              Analytics Dashboard\n            </h1>\n            <p className={`mt-2 ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n              Real-time insights and performance metrics\n            </p>\n          </div>\n          \n          <div className=\"flex gap-2\">\n            <Button\n              variant=\"outline\"\n              size=\"icon\"\n              onClick={toggleDarkMode}\n              className={isDarkMode ? 'border-gray-700' : ''}\n            >\n              {isDarkMode ? <Sun className=\"h-5 w-5\" /> : <Moon className=\"h-5 w-5\" />}\n            </Button>\n            \n            <Button\n              variant=\"outline\"\n              onClick={handleRefresh}\n              disabled={isRefreshing}\n              className={isDarkMode ? 'border-gray-700' : ''}\n            >\n              <RefreshCw className={`h-4 w-4 mr-2 ${isRefreshing ? 'animate-spin' : ''}`} />\n              Refresh\n            </Button>\n          </div>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 md:gap-6 mb-8\">\n          {metrics.map((metric, index) => {\n            const Icon = metric.label.includes('Revenue') ? DollarSign :\n                        metric.label.includes('Users') ? Users :\n                        metric.label.includes('Orders') ? ShoppingCart :\n                        Target;\n            \n            const TrendIcon = metric.trend === 'up' ? TrendingUp : TrendingDown;\n            const trendColor = metric.trend === 'up' ? 'text-green-500' : 'text-red-500';\n            const trendBgColor = metric.trend === 'up' ? 'bg-green-50 dark:bg-green-900/20' : 'bg-red-50 dark:bg-red-900/20';\n\n            return (\n              <motion.div\n                key={metric.id}\n                initial={{ opacity: 0, y: 20 }}\n                animate={{ opacity: 1, y: 0 }}\n                transition={{ duration: 0.4, delay: index * 0.1 }}\n              >\n                <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n                  <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                    <CardTitle className={`text-sm font-medium ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                      {metric.label}\n                    </CardTitle>\n                    <div className={`p-2 rounded-lg ${isDarkMode ? 'bg-gray-700' : 'bg-gray-100'}`}>\n                      <Icon className={`h-4 w-4 ${isDarkMode ? 'text-gray-300' : 'text-gray-600'}`} />\n                    </div>\n                  </CardHeader>\n                  <CardContent>\n                    <div className={`text-2xl font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                      {metric.label.includes('Revenue') ? `$${metric.value.toLocaleString()}` :\n                       metric.label.includes('Rate') ? `${metric.value}%` :\n                       metric.value.toLocaleString()}\n                    </div>\n                    <div className=\"flex items-center mt-2\">\n                      <div className={`flex items-center gap-1 px-2 py-1 rounded-full ${trendBgColor}`}>\n                        <TrendIcon className={`h-3 w-3 ${trendColor}`} />\n                        <span className={`text-xs font-medium ${trendColor}`}>\n                          {Math.abs(metric.change)}%\n                        </span>\n                      </div>\n                      <span className={`text-xs ml-2 ${isDarkMode ? 'text-gray-400' : 'text-gray-500'}`}>\n                        vs last period\n                      </span>\n                    </div>\n                  </CardContent>\n                </Card>\n              </motion.div>\n            );\n          })}\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-4 md:gap-6 mb-8\">\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Revenue Overview</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Daily revenue trends\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <RevenueChart data={chartData} isDarkMode={isDarkMode} />\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>User Activity</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Active users over time\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"h-[300px] w-full\">\n                <svg width=\"100%\" height=\"100%\" viewBox=\"0 0 700 300\" preserveAspectRatio=\"none\">\n                  <defs>\n                    <linearGradient id=\"userGradient\" x1=\"0\" x2=\"0\" y1=\"0\" y2=\"1\">\n                      <stop offset=\"0%\" stopColor=\"#3b82f6\" stopOpacity=\"0.4\" />\n                      <stop offset=\"100%\" stopColor=\"#3b82f6\" stopOpacity=\"0.05\" />\n                    </linearGradient>\n                  </defs>\n                  \n                  {/* Grid lines */}\n                  {[0, 1, 2, 3, 4].map((i) => (\n                    <line\n                      key={i}\n                      x1=\"0\"\n                      y1={i * 60 + 20}\n                      x2=\"700\"\n                      y2={i * 60 + 20}\n                      stroke={isDarkMode ? '#374151' : '#e5e7eb'}\n                      strokeWidth=\"1\"\n                    />\n                  ))}\n                  \n                  {/* Area path */}\n                  <motion.path\n                    d={`M 0,${280 - (chartData[0].users / 800) * 260}\n                        L 116.67,${280 - (chartData[1].users / 800) * 260}\n                        L 233.33,${280 - (chartData[2].users / 800) * 260}\n                        L 350,${280 - (chartData[3].users / 800) * 260}\n                        L 466.67,${280 - (chartData[4].users / 800) * 260}\n                        L 583.33,${280 - (chartData[5].users / 800) * 260}\n                        L 700,${280 - (chartData[6].users / 800) * 260}\n                        L 700,280 L 0,280 Z`}\n                    fill=\"url(#userGradient)\"\n                    initial={{ opacity: 0 }}\n                    animate={{ opacity: 1 }}\n                    transition={{ duration: 0.8, ease: \"easeOut\" }}\n                  />\n                  \n                  {/* Line path */}\n                  <motion.path\n                    d={`M 0,${280 - (chartData[0].users / 800) * 260}\n                        L 116.67,${280 - (chartData[1].users / 800) * 260}\n                        L 233.33,${280 - (chartData[2].users / 800) * 260}\n                        L 350,${280 - (chartData[3].users / 800) * 260}\n                        L 466.67,${280 - (chartData[4].users / 800) * 260}\n                        L 583.33,${280 - (chartData[5].users / 800) * 260}\n                        L 700,${280 - (chartData[6].users / 800) * 260}`}\n                    fill=\"none\"\n                    stroke=\"#3b82f6\"\n                    strokeWidth=\"3\"\n                    strokeLinecap=\"round\"\n                    strokeLinejoin=\"round\"\n                    initial={{ pathLength: 0 }}\n                    animate={{ pathLength: 1 }}\n                    transition={{ duration: 1.5, ease: \"easeInOut\" }}\n                  />\n                  \n                  {/* Data points */}\n                  {chartData.map((point, index) => {\n                    const x = index * 116.67;\n                    const y = 280 - (point.users / 800) * 260;\n                    return (\n                      <g key={point.date}>\n                        <motion.circle\n                          cx={x}\n                          cy={y}\n                          r=\"5\"\n                          fill=\"#3b82f6\"\n                          stroke={isDarkMode ? '#1f2937' : '#ffffff'}\n                          strokeWidth=\"2\"\n                          initial={{ scale: 0 }}\n                          animate={{ scale: 1 }}\n                          transition={{ delay: index * 0.1 + 0.5, duration: 0.3 }}\n                          className=\"cursor-pointer hover:r-7 transition-all\"\n                        />\n                        <motion.circle\n                          cx={x}\n                          cy={y}\n                          r=\"8\"\n                          fill=\"#3b82f6\"\n                          opacity=\"0\"\n                          initial={{ scale: 0 }}\n                          animate={{ scale: 1 }}\n                          transition={{ delay: index * 0.1 + 0.5, duration: 0.3 }}\n                          className=\"cursor-pointer hover:opacity-20 transition-opacity\"\n                        />\n                      </g>\n                    );\n                  })}\n                </svg>\n                \n                {/* X-axis labels */}\n                <div className=\"flex justify-between mt-2 px-1\">\n                  {chartData.map((point, index) => (\n                    <motion.span\n                      key={point.date}\n                      className={`text-xs ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}\n                      initial={{ opacity: 0, y: -10 }}\n                      animate={{ opacity: 1, y: 0 }}\n                      transition={{ delay: index * 0.1 + 0.8 }}\n                    >\n                      {new Date(point.date).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n                    </motion.span>\n                  ))}\n                </div>\n                \n                {/* Stats summary */}\n                <motion.div\n                  className=\"flex items-center justify-between mt-4 pt-4 border-t\"\n                  style={{ borderColor: isDarkMode ? '#374151' : '#e5e7eb' }}\n                  initial={{ opacity: 0 }}\n                  animate={{ opacity: 1 }}\n                  transition={{ delay: 1.2 }}\n                >\n                  <div>\n                    <p className={`text-sm ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                      Peak Users\n                    </p>\n                    <p className={`text-2xl font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                      {Math.max(...chartData.map(d => d.users))}\n                    </p>\n                  </div>\n                  <div className=\"text-right\">\n                    <p className={`text-sm ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                      Growth\n                    </p>\n                    <div className=\"flex items-center gap-1\">\n                      <TrendingUp className=\"h-4 w-4 text-green-500\" />\n                      <p className=\"text-2xl font-bold text-green-500\">\n                        {(((chartData[chartData.length - 1].users - chartData[0].users) / chartData[0].users) * 100).toFixed(1)}%\n                      </p>\n                    </div>\n                  </div>\n                </motion.div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-4 md:gap-6 mb-8\">\n          <Card className={`lg:col-span-2 ${isDarkMode ? 'bg-gray-800 border-gray-700' : ''}`}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Performance Metrics</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Combined view of key metrics\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"h-[300px] w-full\">\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <LineChart data={chartData}>\n                    <CartesianGrid \n                      strokeDasharray=\"3 3\" \n                      stroke={isDarkMode ? '#374151' : '#e5e7eb'} \n                    />\n                    <XAxis \n                      dataKey=\"date\" \n                      stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                      tick={{ fill: isDarkMode ? '#9ca3af' : '#6b7280' }}\n                      tickFormatter={(value) => new Date(value).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n                    />\n                    <YAxis \n                      stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                      tick={{ fill: isDarkMode ? '#9ca3af' : '#6b7280' }}\n                    />\n                    <Tooltip \n                      contentStyle={{\n                        backgroundColor: isDarkMode ? '#1f2937' : '#ffffff',\n                        border: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\n                        borderRadius: '8px',\n                        color: isDarkMode ? '#ffffff' : '#000000'\n                      }}\n                      labelFormatter={(value) => new Date(value).toLocaleDateString('en-US', { month: 'long', day: 'numeric', year: 'numeric' })}\n                    />\n                    <Legend \n                      wrapperStyle={{\n                        color: isDarkMode ? '#9ca3af' : '#6b7280'\n                      }}\n                    />\n                    <Line \n                      type=\"monotone\" \n                      dataKey=\"revenue\" \n                      stroke=\"#3b82f6\" \n                      strokeWidth={2}\n                      dot={{ fill: '#3b82f6', r: 4 }}\n                      activeDot={{ r: 6 }}\n                      name=\"Revenue ($)\"\n                    />\n                    <Line \n                      type=\"monotone\" \n                      dataKey=\"users\" \n                      stroke=\"#10b981\" \n                      strokeWidth={2}\n                      dot={{ fill: '#10b981', r: 4 }}\n                      activeDot={{ r: 6 }}\n                      name=\"Users\"\n                    />\n                    <Line \n                      type=\"monotone\" \n                      dataKey=\"orders\" \n                      stroke=\"#f59e0b\" \n                      strokeWidth={2}\n                      dot={{ fill: '#f59e0b', r: 4 }}\n                      activeDot={{ r: 6 }}\n                      name=\"Orders\"\n                    />\n                  </LineChart>\n                </ResponsiveContainer>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Distribution</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Sales by category\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <PieChart data={mockPieData} isDarkMode={isDarkMode} />\n            </CardContent>\n          </Card>\n        </div>\n\n        <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n          <CardHeader>\n            <CardTitle className={isDarkMode ? 'text-white' : ''}>Top Products</CardTitle>\n            <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n              Best performing products by revenue\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              <div className=\"rounded-md border\" style={{ borderColor: isDarkMode ? '#374151' : '#e5e7eb' }}>\n                <Table>\n                  <TableHeader>\n                    <TableRow className={isDarkMode ? 'border-gray-700 hover:bg-gray-750' : ''}>\n                      <TableHead className={isDarkMode ? 'text-gray-300' : ''}>\n                        <Button\n                          variant=\"ghost\"\n                          onClick={() => handleSort('product')}\n                          className={`flex items-center gap-1 ${isDarkMode ? 'hover:bg-gray-700 text-gray-300' : ''}`}\n                        >\n                          Product\n                          <ArrowUpDown className=\"h-4 w-4\" />\n                        </Button>\n                      </TableHead>\n                      <TableHead className={isDarkMode ? 'text-gray-300' : ''}>\n                        <Button\n                          variant=\"ghost\"\n                          onClick={() => handleSort('sales')}\n                          className={`flex items-center gap-1 ${isDarkMode ? 'hover:bg-gray-700 text-gray-300' : ''}`}\n                        >\n                          Sales\n                          <ArrowUpDown className=\"h-4 w-4\" />\n                        </Button>\n                      </TableHead>\n                      <TableHead className={isDarkMode ? 'text-gray-300' : ''}>\n                        <Button\n                          variant=\"ghost\"\n                          onClick={() => handleSort('revenue')}\n                          className={`flex items-center gap-1 ${isDarkMode ? 'hover:bg-gray-700 text-gray-300' : ''}`}\n                        >\n                          Revenue\n                          <ArrowUpDown className=\"h-4 w-4\" />\n                        </Button>\n                      </TableHead>\n                      <TableHead className={isDarkMode ? 'text-gray-300' : ''}>\n                        <Button\n                          variant=\"ghost\"\n                          onClick={() => handleSort('status')}\n                          className={`flex items-center gap-1 ${isDarkMode ? 'hover:bg-gray-700 text-gray-300' : ''}`}\n                        >\n                          Status\n                          <ArrowUpDown className=\"h-4 w-4\" />\n                        </Button>\n                      </TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {paginatedData().map((row) => (\n                      <TableRow \n                        key={row.id}\n                        className={isDarkMode ? 'border-gray-700 hover:bg-gray-750' : ''}\n                      >\n                        <TableCell className={`font-medium ${isDarkMode ? 'text-gray-200' : ''}`}>\n                          {row.product}\n                        </TableCell>\n                        <TableCell className={isDarkMode ? 'text-gray-300' : ''}>\n                          {row.sales.toLocaleString()}\n                        </TableCell>\n                        <TableCell className={isDarkMode ? 'text-gray-300' : ''}>\n                          ${row.revenue.toLocaleString()}\n                        </TableCell>\n                        <TableCell>\n                          {getStatusBadge(row.status)}\n                        </TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              </div>\n\n              <div className=\"flex items-center justify-between\">\n                <p className={`text-sm ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                  Showing {((currentPage - 1) * itemsPerPage) + 1} to {Math.min(currentPage * itemsPerPage, tableData.length)} of {tableData.length} products\n                </p>\n                \n                <div className=\"flex items-center gap-2\">\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => setCurrentPage(prev => Math.max(1, prev - 1))}\n                    disabled={currentPage === 1}\n                    className={isDarkMode ? 'border-gray-700 text-gray-300 hover:bg-gray-700' : ''}\n                  >\n                    <ChevronLeft className=\"h-4 w-4\" />\n                    Previous\n                  </Button>\n                  \n                  <div className=\"flex items-center gap-1\">\n                    {Array.from({ length: totalPages }, (_, i) => i + 1).map((page) => (\n                      <Button\n                        key={page}\n                        variant={currentPage === page ? 'default' : 'outline'}\n                        size=\"sm\"\n                        onClick={() => setCurrentPage(page)}\n                        className={currentPage === page \n                          ? '' \n                          : isDarkMode ? 'border-gray-700 text-gray-300 hover:bg-gray-700' : ''\n                        }\n                      >\n                        {page}\n                      </Button>\n                    ))}\n                  </div>\n                  \n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => setCurrentPage(prev => Math.min(totalPages, prev + 1))}\n                    disabled={currentPage === totalPages}\n                    className={isDarkMode ? 'border-gray-700 text-gray-300 hover:bg-gray-700' : ''}\n                  >\n                    Next\n                    <ChevronRight className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 md:gap-6 mt-8\">\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Recent Activity</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"max-h-[400px] overflow-y-auto space-y-4 pr-2\">\n                {mockActivityData.map((activity, index) => {\n                  const getIcon = () => {\n                    switch (activity.icon) {\n                      case 'ShoppingCart':\n                        return <ShoppingCart className=\"h-4 w-4\" />;\n                      case 'UserPlus':\n                        return <UserPlus className=\"h-4 w-4\" />;\n                      case 'Package':\n                        return <Package className=\"h-4 w-4\" />;\n                      case 'AlertCircle':\n                        return <AlertCircle className=\"h-4 w-4\" />;\n                      case 'CheckCircle':\n                        return <CheckCircle className=\"h-4 w-4\" />;\n                      default:\n                        return <DollarSign className=\"h-4 w-4\" />;\n                    }\n                  };\n\n                  const getIconColor = () => {\n                    switch (activity.type) {\n                      case 'sale':\n                        return 'bg-green-100 text-green-600 dark:bg-green-900/30 dark:text-green-400';\n                      case 'user':\n                        return 'bg-blue-100 text-blue-600 dark:bg-blue-900/30 dark:text-blue-400';\n                      case 'order':\n                        return 'bg-purple-100 text-purple-600 dark:bg-purple-900/30 dark:text-purple-400';\n                      case 'alert':\n                        return 'bg-orange-100 text-orange-600 dark:bg-orange-900/30 dark:text-orange-400';\n                      case 'success':\n                        return 'bg-emerald-100 text-emerald-600 dark:bg-emerald-900/30 dark:text-emerald-400';\n                      default:\n                        return 'bg-gray-100 text-gray-600 dark:bg-gray-700 dark:text-gray-400';\n                    }\n                  };\n\n                  return (\n                    <motion.div\n                      key={activity.id}\n                      initial={{ opacity: 0, x: -20 }}\n                      animate={{ opacity: 1, x: 0 }}\n                      transition={{ delay: index * 0.05 }}\n                      className={`flex items-start gap-3 p-3 rounded-lg transition-colors ${\n                        isDarkMode ? 'hover:bg-gray-700/50' : 'hover:bg-gray-50'\n                      }`}\n                    >\n                      <div className={`p-2 rounded-full ${getIconColor()}`}>\n                        {getIcon()}\n                      </div>\n                      <div className=\"flex-1 min-w-0\">\n                        <p className={`text-sm font-medium ${isDarkMode ? 'text-gray-200' : 'text-gray-900'}`}>\n                          {activity.message}\n                        </p>\n                        <p className={`text-xs mt-1 ${isDarkMode ? 'text-gray-500' : 'text-gray-500'}`}>\n                          {activity.timestamp}\n                        </p>\n                      </div>\n                    </motion.div>\n                  );\n                })}\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Quick Stats</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {mockQuickStats.map((stat) => {\n                  const Icon = stat.icon;\n                  const percentage = Math.round((stat.value / stat.target) * 100);\n                  \n                  const colorClasses = {\n                    blue: isDarkMode ? 'text-blue-400' : 'text-blue-600',\n                    green: isDarkMode ? 'text-green-400' : 'text-green-600',\n                    yellow: isDarkMode ? 'text-yellow-400' : 'text-yellow-600',\n                    purple: isDarkMode ? 'text-purple-400' : 'text-purple-600'\n                  };\n                  \n                  const bgClasses = {\n                    blue: isDarkMode ? 'bg-blue-500/20' : 'bg-blue-100',\n                    green: isDarkMode ? 'bg-green-500/20' : 'bg-green-100',\n                    yellow: isDarkMode ? 'bg-yellow-500/20' : 'bg-yellow-100',\n                    purple: isDarkMode ? 'bg-purple-500/20' : 'bg-purple-100'\n                  };\n                  \n                  const progressClasses = {\n                    blue: 'bg-blue-500',\n                    green: 'bg-green-500',\n                    yellow: 'bg-yellow-500',\n                    purple: 'bg-purple-500'\n                  };\n                  \n                  return (\n                    <div key={stat.id} className=\"space-y-2\">\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"flex items-center gap-2\">\n                          <div className={`p-2 rounded-lg ${bgClasses[stat.color as keyof typeof bgClasses]}`}>\n                            <Icon className={`h-4 w-4 ${colorClasses[stat.color as keyof typeof colorClasses]}`} />\n                          </div>\n                          <span className={`text-sm font-medium ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>\n                            {stat.label}\n                          </span>\n                        </div>\n                        <span className={`text-sm font-bold ${colorClasses[stat.color as keyof typeof colorClasses]}`}>\n                          {percentage}%\n                        </span>\n                      </div>\n                      <div className={`h-2 rounded-full overflow-hidden ${isDarkMode ? 'bg-gray-700' : 'bg-gray-200'}`}>\n                        <div\n                          className={`h-full ${progressClasses[stat.color as keyof typeof progressClasses]} transition-all duration-500 ease-out`}\n                          style={{ width: `${percentage}%` }}\n                        />\n                      </div>\n                    </div>\n                  );\n                })}\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Alerts</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-3\">\n                {mockAlerts.map((alert) => {\n                  const severityConfig = {\n                    info: {\n                      icon: Info,\n                      bgColor: isDarkMode ? 'bg-blue-900/30' : 'bg-blue-50',\n                      borderColor: isDarkMode ? 'border-blue-700' : 'border-blue-200',\n                      iconColor: isDarkMode ? 'text-blue-400' : 'text-blue-600',\n                      textColor: isDarkMode ? 'text-gray-300' : 'text-gray-700'\n                    },\n                    warning: {\n                      icon: AlertTriangle,\n                      bgColor: isDarkMode ? 'bg-yellow-900/30' : 'bg-yellow-50',\n                      borderColor: isDarkMode ? 'border-yellow-700' : 'border-yellow-200',\n                      iconColor: isDarkMode ? 'text-yellow-400' : 'text-yellow-600',\n                      textColor: isDarkMode ? 'text-gray-300' : 'text-gray-700'\n                    },\n                    error: {\n                      icon: AlertCircle,\n                      bgColor: isDarkMode ? 'bg-red-900/30' : 'bg-red-50',\n                      borderColor: isDarkMode ? 'border-red-700' : 'border-red-200',\n                      iconColor: isDarkMode ? 'text-red-400' : 'text-red-600',\n                      textColor: isDarkMode ? 'text-gray-300' : 'text-gray-700'\n                    },\n                    success: {\n                      icon: CheckCircle,\n                      bgColor: isDarkMode ? 'bg-green-900/30' : 'bg-green-50',\n                      borderColor: isDarkMode ? 'border-green-700' : 'border-green-200',\n                      iconColor: isDarkMode ? 'text-green-400' : 'text-green-600',\n                      textColor: isDarkMode ? 'text-gray-300' : 'text-gray-700'\n                    }\n                  };\n\n                  const config = severityConfig[alert.severity];\n                  const IconComponent = config.icon;\n\n                  return (\n                    <div\n                      key={alert.id}\n                      className={`flex items-start gap-3 p-3 rounded-lg border ${config.bgColor} ${config.borderColor}`}\n                    >\n                      <IconComponent className={`h-5 w-5 mt-0.5 flex-shrink-0 ${config.iconColor}`} />\n                      <div className=\"flex-1 min-w-0\">\n                        <p className={`text-sm ${config.textColor}`}>\n                          {alert.message}\n                        </p>\n                        <p className={`text-xs mt-1 ${isDarkMode ? 'text-gray-500' : 'text-gray-500'}`}>\n                          {alert.timestamp}\n                        </p>\n                      </div>\n                    </div>\n                  );\n                })}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}",
    "error": null,
    "elapsed_time": 94.3667664527893,
    "success": true
  }
}