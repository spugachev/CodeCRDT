{
  "prompt_id": "algorithm_visualizer",
  "prompt_name": "Algorithm Visualizer",
  "mode": "parallel",
  "run_number": 49,
  "timestamp": "2025-10-14T04:03:28.254894",
  "response_time": 89.37945342063904,
  "total_tokens": null,
  "response_content": "import { useState, useCallback } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Slider } from '@/components/ui/slider';\nimport { Play, Pause, RotateCcw, Zap, BarChart3 } from 'lucide-react';\nimport { motion } from 'framer-motion';\n\ninterface ArrayElement {\n  value: number;\n  id: string;\n  isComparing?: boolean;\n  isSwapping?: boolean;\n  isSorted?: boolean;\n}\n\ninterface AlgorithmStep {\n  array: ArrayElement[];\n  comparingIndices: number[];\n  swappingIndices: number[];\n  sortedIndices: number[];\n}\n\ntype AlgorithmType = 'bubble' | 'quick' | 'merge' | 'insertion';\n\nconst NEON_COLORS = [\n  '#00ffff',\n  '#ff00ff', \n  '#00ff00',\n  '#ffff00',\n  '#ff0066',\n  '#00ffaa'\n];\n\nconst mockAlgorithms = [\n  { id: 'bubble', name: 'Bubble Sort', complexity: 'O(n\u00b2)' },\n  { id: 'quick', name: 'Quick Sort', complexity: 'O(n log n)' },\n  { id: 'merge', name: 'Merge Sort', complexity: 'O(n log n)' },\n  { id: 'insertion', name: 'Insertion Sort', complexity: 'O(n\u00b2)' }\n];\n\nexport default function AlgorithmVisualizer() {\n  const [array, setArray] = useState<ArrayElement[]>([]);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [speed, setSpeed] = useState([50]);\n  const [arraySize, setArraySize] = useState([20]);\n  const [selectedAlgorithm, setSelectedAlgorithm] = useState<AlgorithmType>('bubble');\n  const [currentStep, setCurrentStep] = useState(0);\n  const [steps, setSteps] = useState<AlgorithmStep[]>([]);\n\n  const generateRandomArray = useCallback(() => {\n    const newArray: ArrayElement[] = Array.from({ length: arraySize[0] }, (_, i) => ({\n      value: Math.floor(Math.random() * 100) + 5,\n      id: `element-${i}-${Date.now()}`,\n      isComparing: false,\n      isSwapping: false,\n      isSorted: false\n    }));\n    setArray(newArray);\n    setSteps([]);\n    setCurrentStep(0);\n    setIsPlaying(false);\n  }, [arraySize]);\n\n  const resetVisualization = useCallback(() => {\n\n    setIsPlaying(false);\n    setCurrentStep(0);\n    setSteps([]);\n    generateRandomArray();\n  }, [generateRandomArray]);\n\n  // Animation effect for step-by-step visualization\n  const animateSteps = useCallback(() => {\n    if (currentStep < steps.length - 1) {\n      const delay = 1000 - speed[0] * 9.5; // Convert speed (0-100) to delay (1000ms-50ms)\n      setTimeout(() => {\n        setCurrentStep(prev => prev + 1);\n      }, delay);\n    } else {\n      setIsPlaying(false);\n    }\n  }, [currentStep, steps.length, speed]);\n\n  // Effect to run animation when playing\n  if (isPlaying && steps.length > 0) {\n    animateSteps();\n  }\n  const startVisualization = useCallback(() => {\n    if (steps.length === 0) {\n      // Generate steps first if not already generated\n      // For now, just set playing state\n      setIsPlaying(true);\n      return;\n    }\n    \n    if (currentStep >= steps.length - 1) {\n      // Reset to beginning if at end\n      setCurrentStep(0);\n    }\n    \n    setIsPlaying(true)</parameter>\n</invoke>\n  }, [steps, speed, currentStep]);\n\n  const pauseVisualization = useCallback(() => {\n    setIsPlaying(false);\n\n  }, []);\n\n  const generateSortingSteps = useCallback((algorithm: AlgorithmType) => {\n        if (array.length === 0) return;\n\n    const steps: AlgorithmStep[] = [];\n    const arr = [...array];\n\n    const createStep = (\n      currentArray: ArrayElement[],\n      comparing: number[] = [],\n      swapping: number[] = [],\n      sorted: number[] = []\n    ): AlgorithmStep => ({\n      array: currentArray.map((el, idx) => ({\n        ...el,\n        isComparing: comparing.includes(idx),\n        isSwapping: swapping.includes(idx),\n        isSorted: sorted.includes(idx)\n      })),\n      comparingIndices: comparing,\n      swappingIndices: swapping,\n      sortedIndices: sorted\n    });\n\n    // Initial state\n    steps.push(createStep([...arr]));\n\n    switch (algorithm) {\n      case 'bubble': {\n        const sortedIndices: number[] = [];\n        for (let i = 0; i < arr.length - 1; i++) {\n          for (let j = 0; j < arr.length - i - 1; j++) {\n            // Comparing\n            steps.push(createStep([...arr], [j, j + 1], [], sortedIndices));\n            \n            if (arr[j].value > arr[j + 1].value) {\n              // Swapping\n              steps.push(createStep([...arr], [], [j, j + 1], sortedIndices));\n              [arr[j], arr[j + 1]] = [arr[j + 1], arr[j]];\n              steps.push(createStep([...arr], [], [], sortedIndices));\n            }\n          }\n          sortedIndices.push(arr.length - i - 1);\n          steps.push(createStep([...arr], [], [], sortedIndices));\n        }\n        sortedIndices.push(0);\n        steps.push(createStep([...arr], [], [], sortedIndices));\n        break;\n      }\n\n      case 'insertion': {\n        const sortedIndices: number[] = [0];\n        steps.push(createStep([...arr], [], [], [0]));\n        \n        for (let i = 1; i < arr.length; i++) {\n          const key = arr[i];\n          let j = i - 1;\n          \n          steps.push(createStep([...arr], [i], [], sortedIndices));\n          \n          while (j >= 0 && arr[j].value > key.value) {\n            steps.push(createStep([...arr], [j, j + 1], [], sortedIndices));\n            steps.push(createStep([...arr], [], [j, j + 1], sortedIndices));\n            arr[j + 1] = arr[j];\n            steps.push(createStep([...arr], [], [], sortedIndices));\n            j--;\n          }\n          \n          arr[j + 1] = key;\n          sortedIndices.push(i);\n          steps.push(createStep([...arr], [], [], sortedIndices));\n        }\n        break;\n      }\n\n      case 'quick': {\n        const sortedIndices: number[] = [];\n        \n        const partition = (low: number, high: number): number => {\n          const pivot = arr[high];\n          steps.push(createStep([...arr], [high], [], sortedIndices));\n          let i = low - 1;\n          \n          for (let j = low; j < high; j++) {\n            steps.push(createStep([...arr], [j, high], [], sortedIndices));\n            \n            if (arr[j].value < pivot.value) {\n              i++;\n              if (i !== j) {\n                steps.push(createStep([...arr], [], [i, j], sortedIndices));\n                [arr[i], arr[j]] = [arr[j], arr[i]];\n                steps.push(createStep([...arr], [], [], sortedIndices));\n              }\n            }\n          }\n          \n          steps.push(createStep([...arr], [], [i + 1, high], sortedIndices));\n          [arr[i + 1], arr[high]] = [arr[high], arr[i + 1]];\n          sortedIndices.push(i + 1);\n          steps.push(createStep([...arr], [], [], sortedIndices));\n          \n          return i + 1;\n        };\n        \n        const quickSort = (low: number, high: number) => {\n          if (low < high) {\n            const pi = partition(low, high);\n            quickSort(low, pi - 1);\n            quickSort(pi + 1, high);\n          } else if (low === high) {\n            sortedIndices.push(low);\n            steps.push(createStep([...arr], [], [], sortedIndices));\n          }\n        };\n        \n        quickSort(0, arr.length - 1);\n        break;\n      }\n\n      case 'merge': {\n        const sortedIndices: number[] = [];\n        \n        const merge = (left: number, mid: number, right: number) => {\n          const leftArr = arr.slice(left, mid + 1);\n          const rightArr = arr.slice(mid + 1, right + 1);\n          \n          let i = 0, j = 0, k = left;\n          \n          while (i < leftArr.length && j < rightArr.length) {\n            steps.push(createStep([...arr], [left + i, mid + 1 + j], [], sortedIndices));\n            \n            if (leftArr[i].value <= rightArr[j].value) {\n              steps.push(createStep([...arr], [], [k], sortedIndices));\n              arr[k] = leftArr[i];\n              i++;\n            } else {\n              steps.push(createStep([...arr], [], [k], sortedIndices));\n              arr[k] = rightArr[j];\n              j++;\n            }\n            steps.push(createStep([...arr], [], [], sortedIndices));\n            k++;\n          }\n          \n          while (i < leftArr.length) {\n            steps.push(createStep([...arr], [], [k], sortedIndices));\n            arr[k] = leftArr[i];\n            steps.push(createStep([...arr], [], [], sortedIndices));\n            i++;\n            k++;\n          }\n          \n          while (j < rightArr.length) {\n            steps.push(createStep([...arr], [], [k], sortedIndices));\n            arr[k] = rightArr[j];\n            steps.push(createStep([...arr], [], [], sortedIndices));\n            j++;\n            k++;\n          }\n        };\n        \n        const mergeSort = (left: number, right: number) => {\n          if (left < right) {\n            const mid = Math.floor((left + right) / 2);\n            mergeSort(left, mid);\n            mergeSort(mid + 1, right);\n            merge(left, mid, right);\n          }\n        };\n        \n        mergeSort(0, arr.length - 1);\n        \n        // Mark all as sorted at the end\n        for (let i = 0; i < arr.length; i++) {\n          sortedIndices.push(i);\n        }\n        steps.push(createStep([...arr], [], [], sortedIndices));\n        break;\n      }\n    }\n\n    setSteps(steps);\n    setCurrentStep(0);\n    setIsPlaying(false);\n  }, [array]);\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-gray-900 via-purple-900 to-gray-900 p-8\">\n      <div className=\"max-w-7xl mx-auto space-y-8\">\n        <motion.div\n          initial={{ opacity: 0, y: -20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.8 }}\n          className=\"text-center space-y-4\"\n        >\n          <motion.h1\n            className=\"text-6xl font-bold bg-gradient-to-r from-cyan-400 via-purple-400 to-pink-400 bg-clip-text text-transparent\"\n            animate={{\n              textShadow: [\n                '0 0 20px rgba(0, 255, 255, 0.5)',\n                '0 0 40px rgba(255, 0, 255, 0.5)',\n                '0 0 20px rgba(0, 255, 255, 0.5)'\n              ]\n            }}\n            transition={{ duration: 2, repeat: Infinity }}\n          >\n            Algorithm Visualizer\n          </motion.h1>\n          \n          <div className=\"flex items-center justify-center gap-4\">\n            <motion.div\n              initial={{ scale: 0 }}\n              animate={{ scale: 1 }}\n              transition={{ delay: 0.3, type: 'spring' }}\n              className=\"px-6 py-2 bg-purple-500/20 border border-purple-400/50 rounded-full backdrop-blur-sm\"\n            >\n              <span className=\"text-2xl font-semibold text-purple-300\">\n                {mockAlgorithms.find(a => a.id === selectedAlgorithm)?.name || 'Bubble Sort'}\n              </span>\n            </motion.div>\n            \n            <motion.div\n              initial={{ scale: 0 }}\n              animate={{ scale: 1 }}\n              transition={{ delay: 0.5, type: 'spring' }}\n              className=\"px-4 py-2 bg-cyan-500/20 border border-cyan-400/50 rounded-full backdrop-blur-sm relative overflow-hidden\"\n            >\n              <motion.div\n                className=\"absolute inset-0 bg-gradient-to-r from-transparent via-cyan-400/20 to-transparent\"\n                animate={{ x: ['-100%', '200%'] }}\n                transition={{ duration: 2, repeat: Infinity, ease: 'linear' }}\n              />\n              <div className=\"relative flex items-center gap-2\">\n                <BarChart3 className=\"w-4 h-4 text-cyan-400\" />\n                <span className=\"text-sm font-mono text-cyan-300\">\n                  {mockAlgorithms.find(a => a.id === selectedAlgorithm)?.complexity || 'O(n\u00b2)'}\n                </span>\n              </div>\n            </motion.div>\n          </div>\n        </motion.div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-6\">\n          <div className=\"lg:col-span-1 space-y-6\">\n            <motion.div\n              initial={{ opacity: 0, x: -50 }}\n              animate={{ opacity: 1, x: 0 }}\n              className=\"bg-gray-900/50 backdrop-blur-lg border border-cyan-500/30 rounded-xl p-6 shadow-[0_0_30px_rgba(0,255,255,0.3)] hover:shadow-[0_0_50px_rgba(0,255,255,0.5)] transition-shadow duration-300\"\n            >\n              <div className=\"space-y-6\">\n                {/* Algorithm Selection */}\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center gap-2 text-cyan-400 font-semibold\">\n                    <Zap className=\"w-4 h-4\" />\n                    <span className=\"text-sm uppercase tracking-wider\">Algorithm</span>\n                  </div>\n                  <div className=\"grid grid-cols-1 gap-2\">\n                    {mockAlgorithms.map((algo) => (\n                      <motion.button\n                        key={algo.id}\n                        whileHover={{ scale: 1.02 }}\n                        whileTap={{ scale: 0.98 }}\n                        onClick={() => setSelectedAlgorithm(algo.id as AlgorithmType)}\n                        className={`p-3 rounded-lg border transition-all duration-300 text-left ${\n                          selectedAlgorithm === algo.id\n                            ? 'bg-cyan-500/20 border-cyan-400 shadow-[0_0_20px_rgba(0,255,255,0.4)]'\n                            : 'bg-gray-800/50 border-gray-700 hover:border-cyan-500/50'\n                        }`}\n                      >\n                        <div className=\"font-medium text-white\">{algo.name}</div>\n                        <div className=\"text-xs text-gray-400 mt-1\">{algo.complexity}</div>\n                      </motion.button>\n                    ))}\n                  </div>\n                </div>\n\n                {/* Array Size Control */}\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center gap-2 text-purple-400 font-semibold\">\n                      <BarChart3 className=\"w-4 h-4\" />\n                      <span className=\"text-sm uppercase tracking-wider\">Array Size</span>\n                    </div>\n                    <span className=\"text-white font-mono text-lg\">{arraySize[0]}</span>\n                  </div>\n                  <Slider\n                    value={arraySize}\n                    onValueChange={setArraySize}\n                    min={5}\n                    max={50}\n                    step={1}\n                    className=\"cursor-pointer\"\n                    disabled={isPlaying}\n                  />\n                </div>\n\n                {/* Speed Control */}\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center gap-2 text-pink-400 font-semibold\">\n                      <Zap className=\"w-4 h-4\" />\n                      <span className=\"text-sm uppercase tracking-wider\">Speed</span>\n                    </div>\n                    <span className=\"text-white font-mono text-lg\">{speed[0]}%</span>\n                  </div>\n                  <Slider\n                    value={speed}\n                    onValueChange={setSpeed}\n                    min={10}\n                    max={100}\n                    step={10}\n                    className=\"cursor-pointer\"\n                  />\n                </div>\n\n                {/* Control Buttons */}\n                <div className=\"space-y-3 pt-4 border-t border-gray-700\">\n                  <Button\n                    onClick={isPlaying ? pauseVisualization : startVisualization}\n                    disabled={steps.length === 0 || currentStep >= steps.length}\n                    className=\"w-full bg-gradient-to-r from-cyan-500 to-blue-500 hover:from-cyan-400 hover:to-blue-400 text-white font-semibold shadow-[0_0_20px_rgba(0,255,255,0.5)] hover:shadow-[0_0_30px_rgba(0,255,255,0.7)] transition-all duration-300\"\n                  >\n                    {isPlaying ? (\n                      <>\n                        <Pause className=\"w-4 h-4 mr-2\" />\n                        Pause\n                      </>\n                    ) : (\n                      <>\n                        <Play className=\"w-4 h-4 mr-2\" />\n                        {currentStep >= steps.length ? 'Finished' : 'Play'}\n                      </>\n                    )}\n                  </Button>\n\n                  <Button\n                    onClick={resetVisualization}\n                    variant=\"outline\"\n                    className=\"w-full border-purple-500/50 text-purple-400 hover:bg-purple-500/20 hover:border-purple-400 hover:text-purple-300 shadow-[0_0_15px_rgba(168,85,247,0.3)] hover:shadow-[0_0_25px_rgba(168,85,247,0.5)] transition-all duration-300\"\n                  >\n                    <RotateCcw className=\"w-4 h-4 mr-2\" />\n                    Reset\n                  </Button>\n\n                  <Button\n                    onClick={() => {\n                      generateSortingSteps(selectedAlgorithm);\n                      setCurrentStep(0);\n                    }}\n                    disabled={array.length === 0 || isPlaying}\n                    className=\"w-full bg-gradient-to-r from-pink-500 to-purple-500 hover:from-pink-400 hover:to-purple-400 text-white font-semibold shadow-[0_0_20px_rgba(236,72,153,0.5)] hover:shadow-[0_0_30px_rgba(236,72,153,0.7)] transition-all duration-300\"\n                  >\n                    <Zap className=\"w-4 h-4 mr-2\" />\n                    Generate Steps\n                  </Button>\n                </div>\n\n                {/* Stats Display */}\n                <div className=\"pt-4 border-t border-gray-700 space-y-2\">\n                  <div className=\"flex justify-between text-sm\">\n                    <span className=\"text-gray-400\">Current Step:</span>\n                    <span className=\"text-cyan-400 font-mono\">{currentStep} / {steps.length}</span>\n                  </div>\n                  <div className=\"flex justify-between text-sm\">\n                    <span className=\"text-gray-400\">Array Length:</span>\n                    <span className=\"text-purple-400 font-mono\">{array.length}</span>\n                  </div>\n                </div>\n              </div>\n            </motion.div>\n            \n            <div className=\"bg-gray-900/50 backdrop-blur-lg border border-cyan-500/30 rounded-xl p-6 shadow-2xl shadow-cyan-500/20\">\n              <div className=\"space-y-6\">\n                <div>\n                  <h3 className=\"text-sm font-semibold text-cyan-400 mb-3 flex items-center gap-2\">\n                    <Zap className=\"w-4 h-4\" />\n                    Algorithm\n                  </h3>\n                  <div className=\"grid grid-cols-1 gap-2\">\n                    {mockAlgorithms.map((algo) => (\n                      <motion.button\n                        key={algo.id}\n                        onClick={() => setSelectedAlgorithm(algo.id as AlgorithmType)}\n                        className={`relative p-3 rounded-lg border transition-all duration-300 text-left ${\n                          selectedAlgorithm === algo.id\n                            ? 'bg-cyan-500/20 border-cyan-400 shadow-lg shadow-cyan-500/50'\n                            : 'bg-gray-800/50 border-gray-700 hover:border-cyan-500/50 hover:shadow-md hover:shadow-cyan-500/30'\n                        }`}\n                        whileHover={{ scale: 1.02 }}\n                        whileTap={{ scale: 0.98 }}\n                      >\n                        <div className=\"flex flex-col gap-1\">\n                          <span className={`text-sm font-medium ${\n                            selectedAlgorithm === algo.id ? 'text-cyan-300' : 'text-gray-300'\n                          }`}>\n                            {algo.name}\n                          </span>\n                          <span className={`text-xs ${\n                            selectedAlgorithm === algo.id ? 'text-cyan-400/80' : 'text-gray-500'\n                          }`}>\n                            {algo.complexity}\n                          </span>\n                        </div>\n                        {selectedAlgorithm === algo.id && (\n                          <motion.div\n                            className=\"absolute inset-0 rounded-lg border-2 border-cyan-400\"\n                            layoutId=\"algorithmSelector\"\n                            transition={{ type: \"spring\", stiffness: 300, damping: 30 }}\n                          />\n                        )}\n                      </motion.button>\n                    ))}\n                  </div>\n                </div></parameter>\n</invoke>\n\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <label className=\"text-cyan-400 text-sm font-medium flex items-center gap-2\">\n                      <Zap className=\"w-4 h-4\" />\n                      Speed\n                    </label>\n                    <span className=\"text-cyan-300 text-xs\">{speed[0]}ms</span>\n                  </div>\n                  <Slider\n                    value={speed}\n                    onValueChange={setSpeed}\n                    min={10}\n                    max={200}\n                    step={10}\n                    className=\"[&_[role=slider]]:bg-cyan-400 [&_[role=slider]]:border-cyan-300 [&_[role=slider]]:shadow-[0_0_15px_rgba(34,211,238,0.8)] [&_[role=slider]]:hover:shadow-[0_0_25px_rgba(34,211,238,1)] [&_[role=slider]]:transition-shadow [&_.relative]:bg-gray-700/50 [&_.relative]:border [&_.relative]:border-cyan-500/30 [&_.bg-primary]:bg-gradient-to-r [&_.bg-primary]:from-cyan-500 [&_.bg-primary]:to-purple-500 [&_.bg-primary]:shadow-[0_0_10px_rgba(34,211,238,0.5)]\"\n                  />\n                </div>\n\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <label className=\"text-cyan-400 text-sm font-medium flex items-center gap-2\">\n                      <BarChart3 className=\"w-4 h-4\" />\n                      Array Size\n                    </label>\n                    <span className=\"text-cyan-300 text-xs\">{arraySize[0]}</span>\n                  </div>\n                  <Slider\n                    value={arraySize}\n                    onValueChange={setArraySize}\n                    min={5}\n                    max={50}\n                    step={1}\n                    className=\"[&_[role=slider]]:bg-gradient-to-r [&_[role=slider]]:from-cyan-400 [&_[role=slider]]:to-purple-500 [&_[role=slider]]:border-2 [&_[role=slider]]:border-cyan-300 [&_[role=slider]]:shadow-lg [&_[role=slider]]:shadow-cyan-500/50 [&>span]:bg-gradient-to-r [&>span]:from-cyan-500/30 [&>span]:to-purple-500/30\"\n                  />\n                </div>\n\n                <div className=\"flex gap-3 pt-4\">\n                  <motion.button\n                    onClick={isPlaying ? pauseVisualization : startVisualization}\n                    className=\"flex-1 relative overflow-hidden group\"\n                    whileHover={{ scale: 1.05 }}\n                    whileTap={{ scale: 0.95 }}\n                  >\n                    <motion.div\n                      className={`absolute inset-0 rounded-lg transition-all duration-300 ${\n                        isPlaying\n                          ? 'bg-gradient-to-r from-orange-500 to-red-500 shadow-[0_0_30px_rgba(249,115,22,0.6)]'\n                          : 'bg-gradient-to-r from-cyan-500 to-blue-500 shadow-[0_0_30px_rgba(6,182,212,0.6)]'\n                      }`}\n                      animate={{\n                        boxShadow: isPlaying\n                          ? [\n                              '0 0 30px rgba(249,115,22,0.6)',\n                              '0 0 50px rgba(249,115,22,0.8)',\n                              '0 0 30px rgba(249,115,22,0.6)'\n                            ]\n                          : [\n                              '0 0 30px rgba(6,182,212,0.6)',\n                              '0 0 50px rgba(6,182,212,0.8)',\n                              '0 0 30px rgba(6,182,212,0.6)'\n                            ]\n                      }}\n                      transition={{ duration: 2, repeat: Infinity }}\n                    />\n                    <div className=\"relative flex items-center justify-center gap-2 py-3 px-4\">\n                      <motion.div\n                        animate={{ rotate: isPlaying ? 0 : 0 }}\n                        transition={{ duration: 0.3 }}\n                      >\n                        {isPlaying ? (\n                          <Pause className=\"w-5 h-5 text-white\" />\n                        ) : (\n                          <Play className=\"w-5 h-5 text-white\" />\n                        )}\n                      </motion.div>\n                      <span className=\"text-white font-semibold\">\n                        {isPlaying ? 'Pause' : 'Play'}\n                      </span>\n                    </div>\n                    <motion.div\n                      className=\"absolute inset-0 bg-gradient-to-r from-transparent via-white/20 to-transparent\"\n                      animate={{ x: ['-100%', '200%'] }}\n                      transition={{ duration: 1.5, repeat: Infinity, ease: 'linear' }}\n                    />\n                  </motion.button>\n                  <motion.button\n                    onClick={resetVisualization}\n                    whileHover={{ scale: 1.05, rotate: 180 }}\n                    whileTap={{ scale: 0.95 }}\n                    transition={{ type: 'spring', stiffness: 300, damping: 20 }}\n                    className=\"flex-1 px-6 py-3 bg-gradient-to-r from-pink-500 to-purple-600 text-white rounded-lg font-semibold shadow-[0_0_20px_rgba(236,72,153,0.5)] hover:shadow-[0_0_40px_rgba(236,72,153,0.8)] transition-all duration-300 flex items-center justify-center gap-2 border border-pink-400/50 relative overflow-hidden group\"\n                  >\n                    <motion.div\n                      className=\"absolute inset-0 bg-gradient-to-r from-transparent via-white/20 to-transparent\"\n                      animate={{ x: ['-100%', '200%'] }}\n                      transition={{ duration: 2, repeat: Infinity, ease: 'linear' }}\n                    />\n                    <RotateCcw className=\"w-5 h-5 relative z-10 group-hover:rotate-180 transition-transform duration-500\" />\n                    <span className=\"relative z-10\">Reset</span>\n                  </motion.button>\n                </div>\n              </div>\n            </div>\n\n            <motion.div\n              initial={{ opacity: 0, x: -50 }}\n              animate={{ opacity: 1, x: 0 }}\n              transition={{ delay: 0.2 }}\n              className=\"bg-gray-900/50 backdrop-blur-lg border border-purple-500/30 rounded-xl p-6 shadow-[0_0_30px_rgba(168,85,247,0.3)] hover:shadow-[0_0_50px_rgba(168,85,247,0.5)] transition-shadow duration-300\"\n            >\n              <div className=\"space-y-4\">\n                <div className=\"flex items-center gap-2 text-purple-400 font-semibold mb-4\">\n                  <BarChart3 className=\"w-5 h-5\" />\n                  <span className=\"text-sm uppercase tracking-wider\">Statistics</span>\n                </div>\n\n                <div className=\"space-y-3\">\n                  {/* Comparisons Counter */}\n                  <motion.div\n                    className=\"bg-gradient-to-r from-cyan-500/10 to-cyan-500/5 border border-cyan-500/30 rounded-lg p-4 relative overflow-hidden\"\n                    whileHover={{ scale: 1.02 }}\n                  >\n                    <motion.div\n                      className=\"absolute inset-0 bg-gradient-to-r from-transparent via-cyan-400/10 to-transparent\"\n                      animate={{ x: ['-100%', '200%'] }}\n                      transition={{ duration: 3, repeat: Infinity, ease: 'linear' }}\n                    />\n                    <div className=\"relative flex items-center justify-between\">\n                      <div className=\"flex items-center gap-3\">\n                        <div className=\"w-10 h-10 rounded-full bg-cyan-500/20 flex items-center justify-center border border-cyan-400/50 shadow-[0_0_15px_rgba(0,255,255,0.4)]\">\n                          <Zap className=\"w-5 h-5 text-cyan-400\" />\n                        </div>\n                        <div>\n                          <div className=\"text-xs text-cyan-400/80 uppercase tracking-wide\">Comparisons</div>\n                          <motion.div\n                            key={steps[currentStep]?.comparingIndices.length || 0}\n                            initial={{ scale: 1.2, color: '#00ffff' }}\n                            animate={{ scale: 1, color: '#ffffff' }}\n                            className=\"text-2xl font-bold text-white\"\n                          >\n                            {steps.length > 0 ? steps.slice(0, currentStep + 1).reduce((acc, step) => acc + (step.comparingIndices.length > 0 ? 1 : 0), 0) : 0}\n                          </motion.div>\n                        </div>\n                      </div>\n                    </div>\n                  </motion.div>\n\n                  {/* Swaps Counter */}\n                  <motion.div\n                    className=\"bg-gradient-to-r from-pink-500/10 to-pink-500/5 border border-pink-500/30 rounded-lg p-4 relative overflow-hidden\"\n                    whileHover={{ scale: 1.02 }}\n                  >\n                    <motion.div\n                      className=\"absolute inset-0 bg-gradient-to-r from-transparent via-pink-400/10 to-transparent\"\n                      animate={{ x: ['-100%', '200%'] }}\n                      transition={{ duration: 3, repeat: Infinity, ease: 'linear', delay: 0.5 }}\n                    />\n                    <div className=\"relative flex items-center justify-between\">\n                      <div className=\"flex items-center gap-3\">\n                        <div className=\"w-10 h-10 rounded-full bg-pink-500/20 flex items-center justify-center border border-pink-400/50 shadow-[0_0_15px_rgba(255,0,102,0.4)]\">\n                          <RotateCcw className=\"w-5 h-5 text-pink-400\" />\n                        </div>\n                        <div>\n                          <div className=\"text-xs text-pink-400/80 uppercase tracking-wide\">Swaps</div>\n                          <motion.div\n                            key={steps[currentStep]?.swappingIndices.length || 0}\n                            initial={{ scale: 1.2, color: '#ff0066' }}\n                            animate={{ scale: 1, color: '#ffffff' }}\n                            className=\"text-2xl font-bold text-white\"\n                          >\n                            {steps.length > 0 ? steps.slice(0, currentStep + 1).reduce((acc, step) => acc + (step.swappingIndices.length > 0 ? 1 : 0), 0) : 0}\n                          </motion.div>\n                        </div>\n                      </div>\n                    </div>\n                  </motion.div>\n\n                  {/* Progress */}\n                  <motion.div\n                    className=\"bg-gradient-to-r from-purple-500/10 to-purple-500/5 border border-purple-500/30 rounded-lg p-4 relative overflow-hidden\"\n                    whileHover={{ scale: 1.02 }}\n                  >\n                    <motion.div\n                      className=\"absolute inset-0 bg-gradient-to-r from-transparent via-purple-400/10 to-transparent\"\n                      animate={{ x: ['-100%', '200%'] }}\n                      transition={{ duration: 3, repeat: Infinity, ease: 'linear', delay: 1 }}\n                    />\n                    <div className=\"relative space-y-2\">\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"flex items-center gap-3\">\n                          <div className=\"w-10 h-10 rounded-full bg-purple-500/20 flex items-center justify-center border border-purple-400/50 shadow-[0_0_15px_rgba(168,85,247,0.4)]\">\n                            <BarChart3 className=\"w-5 h-5 text-purple-400\" />\n                          </div>\n                          <div>\n                            <div className=\"text-xs text-purple-400/80 uppercase tracking-wide\">Progress</div>\n                            <motion.div\n                              key={currentStep}\n                              initial={{ scale: 1.2, color: '#a855f7' }}\n                              animate={{ scale: 1, color: '#ffffff' }}\n                              className=\"text-2xl font-bold text-white\"\n                            >\n                              {steps.length > 0 ? Math.round((currentStep / Math.max(steps.length - 1, 1)) * 100) : 0}%\n                            </motion.div>\n                          </div>\n                        </div>\n                      </div>\n                      <div className=\"w-full h-2 bg-gray-800/50 rounded-full overflow-hidden border border-purple-500/20\">\n                        <motion.div\n                          className=\"h-full bg-gradient-to-r from-purple-500 via-pink-500 to-cyan-500 shadow-[0_0_10px_rgba(168,85,247,0.8)]\"\n                          initial={{ width: 0 }}\n                          animate={{ \n                            width: steps.length > 0 ? `${(currentStep / Math.max(steps.length - 1, 1)) * 100}%` : '0%'\n                          }}\n                          transition={{ duration: 0.3 }}\n                        />\n                      </div>\n                    </div>\n                  </motion.div>\n\n                  {/* Array Size Info */}\n                  <motion.div\n                    className=\"bg-gradient-to-r from-green-500/10 to-green-500/5 border border-green-500/30 rounded-lg p-4\"\n                    whileHover={{ scale: 1.02 }}\n                  >\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"text-xs text-green-400/80 uppercase tracking-wide\">Array Size</div>\n                      <div className=\"text-xl font-bold text-white\">{array.length}</div>\n                    </div>\n                  </motion.div>\n\n                  {/* Status Indicator */}\n                  <motion.div\n                    className=\"bg-gradient-to-r from-yellow-500/10 to-yellow-500/5 border border-yellow-500/30 rounded-lg p-4\"\n                    whileHover={{ scale: 1.02 }}\n                  >\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"text-xs text-yellow-400/80 uppercase tracking-wide\">Status</div>\n                      <div className=\"flex items-center gap-2\">\n                        <motion.div\n                          className={`w-2 h-2 rounded-full ${isPlaying ? 'bg-green-400' : 'bg-gray-400'}`}\n                          animate={isPlaying ? {\n                            boxShadow: [\n                              '0 0 5px rgba(34,197,94,0.5)',\n                              '0 0 20px rgba(34,197,94,0.8)',\n                              '0 0 5px rgba(34,197,94,0.5)'\n                            ]\n                          } : {}}\n                          transition={{ duration: 1, repeat: Infinity }}\n                        />\n                        <span className=\"text-sm font-semibold text-white\">\n                          {isPlaying ? 'Running' : steps.length > 0 && currentStep >= steps.length - 1 ? 'Complete' : 'Paused'}\n                        </span>\n                      </div>\n                    </div>\n                  </motion.div>\n                </div>\n              </div>\n            </motion.div>\n          </div>\n\n          <div className=\"lg:col-span-3\">\n            <div className=\"bg-gray-900/50 backdrop-blur-lg border border-purple-500/30 rounded-xl p-8 shadow-2xl shadow-purple-500/20 min-h-[600px]\">\n              {array.length === 0 ? (\n                <motion.div\n                  initial={{ opacity: 0, scale: 0.8 }}\n                  animate={{ opacity: 1, scale: 1 }}\n                  className=\"absolute inset-0 flex flex-col items-center justify-center gap-6\"\n                >\n                  <motion.div\n                    animate={{\n                      rotate: [0, 360],\n                      scale: [1, 1.2, 1]\n                    }}\n                    transition={{\n                      duration: 3,\n                      repeat: Infinity,\n                      ease: \"easeInOut\"\n                    }}\n                  >\n                    <BarChart3 className=\"w-24 h-24 text-purple-400/50\" />\n                  </motion.div>\n                  <div className=\"text-center space-y-2\">\n                    <p className=\"text-2xl font-semibold text-purple-300\">\n                      Generate an array to begin\n                    </p>\n                    <p className=\"text-sm text-gray-400\">\n                      Click the \"Generate Array\" button to start visualizing\n                    </p>\n                  </div>\n                </motion.div>\n              ) : (\n                <div className=\"relative w-full h-[500px] flex items-end justify-center gap-1 px-4\">\n                  {/* Comparison indicator lines */}\n                  {steps.length > 0 && currentStep < steps.length && (\n                    <>\n                      {steps[currentStep].comparingIndices.map((idx, i) => (\n                        <motion.div\n                          key={`compare-line-${idx}-${i}`}\n                          initial={{ opacity: 0, scaleY: 0 }}\n                          animate={{ opacity: 1, scaleY: 1 }}\n                          exit={{ opacity: 0 }}\n                          className=\"absolute top-0 w-0.5 bg-gradient-to-b from-yellow-400 to-transparent\"\n                          style={{\n                            left: `${(idx / array.length) * 100}%`,\n                            height: '100%',\n                            boxShadow: '0 0 20px rgba(250, 204, 21, 0.8)'\n                          }}\n                        />\n                      ))}\n                      \n                      {/* Swap trail effect */}\n                      {steps[currentStep].swappingIndices.length === 2 && (\n                        <motion.div\n                          initial={{ opacity: 0, scaleX: 0 }}\n                          animate={{ opacity: [0, 1, 0], scaleX: [0, 1, 1] }}\n                          transition={{ duration: 0.5 }}\n                          className=\"absolute h-1 bg-gradient-to-r from-pink-500 via-purple-500 to-pink-500 rounded-full\"\n                          style={{\n                            top: '50%',\n                            left: `${(Math.min(...steps[currentStep].swappingIndices) / array.length) * 100}%`,\n                            width: `${(Math.abs(steps[currentStep].swappingIndices[1] - steps[currentStep].swappingIndices[0]) / array.length) * 100}%`,\n                            boxShadow: '0 0 30px rgba(236, 72, 153, 0.9)'\n                          }}\n                        />\n                      )}\n                    </>\n                  )}\n\n                  {/* Animated bars */}\n                  {(steps.length > 0 && currentStep < steps.length ? steps[currentStep].array : array).map((element, idx) => {\n                    const barHeight = (element.value / 105) * 100;\n                    const isComparing = element.isComparing;\n                    const isSwapping = element.isSwapping;\n                    const isSorted = element.isSorted;\n                    \n                    let barColor = NEON_COLORS[idx % NEON_COLORS.length];\n                    let glowColor = barColor;\n                    \n                    if (isSorted) {\n                      barColor = '#00ff00';\n                      glowColor = '#00ff00';\n                    } else if (isSwapping) {\n                      barColor = '#ff0066';\n                      glowColor = '#ff0066';\n                    } else if (isComparing) {\n                      barColor = '#ffff00';\n                      glowColor = '#ffff00';\n                    }\n\n                    return (\n                      <motion.div\n                        key={element.id}\n                        layout\n                        initial={{ height: 0, opacity: 0 }}\n                        animate={{\n                          height: `${barHeight}%`,\n                          opacity: 1,\n                          scale: isSwapping ? [1, 1.1, 1] : isComparing ? 1.05 : 1\n                        }}\n                        transition={{\n                          height: { duration: 0.3, ease: \"easeOut\" },\n                          scale: { duration: 0.2 },\n                          layout: { duration: 0.3, ease: \"easeInOut\" }\n                        }}\n                        className=\"relative rounded-t-lg\"\n                        style={{\n                          flex: 1,\n                          minWidth: '4px',\n                          maxWidth: `${100 / array.length}%`,\n                          background: `linear-gradient(to top, ${barColor}, ${barColor}dd)`,\n                          boxShadow: `\n                            0 0 ${isSwapping ? '30px' : isComparing ? '25px' : '15px'} ${glowColor}80,\n                            inset 0 0 ${isSwapping ? '20px' : '10px'} ${glowColor}40\n                          `,\n                          border: `1px solid ${barColor}`,\n                          transformOrigin: 'bottom'\n                        }}\n                      >\n                        {/* Value label for larger arrays */}\n                        {array.length <= 20 && (\n                          <motion.div\n                            initial={{ opacity: 0 }}\n                            animate={{ opacity: 1 }}\n                            className=\"absolute -top-6 left-1/2 -translate-x-1/2 text-xs font-mono font-bold whitespace-nowrap\"\n                            style={{\n                              color: barColor,\n                              textShadow: `0 0 10px ${glowColor}`\n                            }}\n                          >\n                            {element.value}\n                          </motion.div>\n                        )}\n                        \n                        {/* Swap particle effect */}\n                        {isSwapping && (\n                          <>\n                            {[...Array(5)].map((_, i) => (\n                              <motion.div\n                                key={`particle-${i}`}\n                                initial={{ \n                                  opacity: 1, \n                                  scale: 1,\n                                  x: 0,\n                                  y: 0\n                                }}\n                                animate={{\n                                  opacity: [1, 0],\n                                  scale: [1, 0],\n                                  x: [0, (Math.random() - 0.5) * 40],\n                                  y: [0, -Math.random() * 60]\n                                }}\n                                transition={{\n                                  duration: 0.6,\n                                  delay: i * 0.05,\n                                  ease: \"easeOut\"\n                                }}\n                                className=\"absolute top-0 left-1/2 w-2 h-2 rounded-full\"\n                                style={{\n                                  background: glowColor,\n                                  boxShadow: `0 0 10px ${glowColor}`\n                                }}\n                              />\n                            ))}\n                          </>\n                        )}\n                        \n                        {/* Sorted checkmark indicator */}\n                        {isSorted && (\n                          <motion.div\n                            initial={{ scale: 0, rotate: -180 }}\n                            animate={{ scale: 1, rotate: 0 }}\n                            className=\"absolute -top-8 left-1/2 -translate-x-1/2\"\n                          >\n                            <div className=\"w-6 h-6 rounded-full bg-green-500/20 border-2 border-green-400 flex items-center justify-center\"\n                              style={{\n                                boxShadow: '0 0 15px rgba(0, 255, 0, 0.6)'\n                              }}\n                            >\n                              <div className=\"w-2 h-3 border-r-2 border-b-2 border-green-400 rotate-45 -mt-1\" />\n                            </div>\n                          </motion.div>\n                        )}\n                      </motion.div>\n                    );\n                  })}\n                </div>\n              )}\n              \n              <div className=\"relative h-full flex items-end justify-center gap-1\">\n                {(steps.length > 0 && currentStep < steps.length\n                  ? steps[currentStep].array\n                  : array\n                ).map((element, index) => {\n                  const maxValue = 105;\n                  const heightPercentage = (element.value / maxValue) * 100;\n                  const colorIndex = index % NEON_COLORS.length;\n                  const baseColor = NEON_COLORS[colorIndex];\n\n                  let glowColor = baseColor;\n                  let glowIntensity = 0.5;\n                  let scale = 1;\n\n                  if (element.isSwapping) {\n                    glowColor = '#ff0066';\n                    glowIntensity = 1.5;\n                    scale = 1.1;\n                  } else if (element.isComparing) {\n                    glowColor = '#ffff00';\n                    glowIntensity = 1.2;\n                    scale = 1.05;\n                  } else if (element.isSorted) {\n                    glowColor = '#00ff00';\n                    glowIntensity = 0.8;\n                  }\n\n                  return (\n                    <motion.div\n                      key={element.id}\n                      layout\n                      initial={{ height: 0, opacity: 0 }}\n                      animate={{\n                        height: `${heightPercentage}%`,\n                        opacity: 1,\n                        scale: scale,\n                        boxShadow: [\n                          `0 0 ${10 * glowIntensity}px ${glowColor}`,\n                          `0 0 ${20 * glowIntensity}px ${glowColor}`,\n                          `0 0 ${10 * glowIntensity}px ${glowColor}`\n                        ]\n                      }}\n                      transition={{\n                        height: { duration: 0.4, ease: 'easeOut' },\n                        scale: { duration: 0.3, ease: 'easeInOut' },\n                        boxShadow: { duration: 0.6, repeat: Infinity },\n                        layout: { duration: 0.5, ease: 'easeInOut' }\n                      }}\n                      className=\"relative rounded-t-lg min-w-[8px] flex-1 max-w-[60px]\"\n                      style={{\n                        background: element.isSorted\n                          ? 'linear-gradient(to top, #00ff00, #00ff88)'\n                          : element.isSwapping\n                          ? 'linear-gradient(to top, #ff0066, #ff00ff)'\n                          : element.isComparing\n                          ? 'linear-gradient(to top, #ffff00, #ffaa00)'\n                          : `linear-gradient(to top, ${baseColor}, ${baseColor}dd)`,\n                        border: `1px solid ${glowColor}`,\n                        position: 'relative'\n                      }}\n                    >\n                      {/* Animated glow overlay */}\n                      <motion.div\n                        className=\"absolute inset-0 rounded-t-lg\"\n                        animate={{\n                          opacity: [0.3, 0.6, 0.3]\n                        }}\n                        transition={{\n                          duration: 1.5,\n                          repeat: Infinity,\n                          ease: 'easeInOut'\n                        }}\n                        style={{\n                          background: `linear-gradient(to top, transparent, ${glowColor}40)`\n                        }}\n                      />\n\n                      {/* Value label */}\n                      {arraySize[0] <= 30 && (\n                        <motion.div\n                          initial={{ opacity: 0 }}\n                          animate={{ opacity: 1 }}\n                          className=\"absolute -top-6 left-1/2 transform -translate-x-1/2 text-xs font-mono font-bold whitespace-nowrap\"\n                          style={{\n                            color: glowColor,\n                            textShadow: `0 0 10px ${glowColor}`\n                          }}\n                        >\n                          {element.value}\n                        </motion.div>\n                      )}\n\n                      {/* Swap trail effect */}\n                      {element.isSwapping && (\n                        <motion.div\n                          className=\"absolute inset-0 rounded-t-lg\"\n                          initial={{ opacity: 0 }}\n                          animate={{\n                            opacity: [0, 1, 0],\n                            scale: [1, 1.2, 1]\n                          }}\n                          transition={{\n                            duration: 0.6,\n                            repeat: Infinity\n                          }}\n                          style={{\n                            background: `radial-gradient(circle, ${glowColor}80, transparent)`,\n                            filter: 'blur(8px)'\n                          }}\n                        />\n                      )}\n                    </motion.div>\n                  );\n                })}\n              </div>\n            </div>\n\n            <motion.div\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ delay: 0.4 }}\n              className=\"mt-6\"\n            >\n              <div className=\"bg-gray-900/50 backdrop-blur-lg border border-purple-500/30 rounded-xl p-4 shadow-lg shadow-purple-500/10\">\n                <div className=\"flex items-center justify-between mb-2\">\n                  <span className=\"text-sm font-semibold text-purple-400 uppercase tracking-wider\">\n                    Sorting Progress\n                  </span>\n                  <span className=\"text-lg font-bold text-cyan-400\">\n                    {steps.length > 0 ? Math.round((currentStep / (steps.length - 1)) * 100) : 0}%\n                  </span>\n                </div>\n                \n                <div className=\"relative h-3 bg-gray-800/80 rounded-full overflow-hidden border border-purple-500/20\">\n                  <motion.div\n                    className=\"absolute inset-y-0 left-0 bg-gradient-to-r from-cyan-500 via-purple-500 to-pink-500 rounded-full\"\n                    initial={{ width: '0%' }}\n                    animate={{ \n                      width: steps.length > 0 ? `${(currentStep / (steps.length - 1)) * 100}%` : '0%'\n                    }}\n                    transition={{ duration: 0.3, ease: 'easeOut' }}\n                    style={{\n                      boxShadow: '0 0 20px rgba(168, 85, 247, 0.8), 0 0 40px rgba(34, 211, 238, 0.6)'\n                    }}\n                  />\n                  \n                  <motion.div\n                    className=\"absolute inset-0 bg-gradient-to-r from-transparent via-white/30 to-transparent\"\n                    animate={{ \n                      x: ['-100%', '200%'],\n                      opacity: steps.length > 0 && currentStep < steps.length - 1 ? [0.5, 1, 0.5] : 0\n                    }}\n                    transition={{ \n                      x: { duration: 1.5, repeat: Infinity, ease: 'linear' },\n                      opacity: { duration: 1.5, repeat: Infinity }\n                    }}\n                    style={{ width: '50%' }}\n                  />\n                </div>\n                \n                <div className=\"flex items-center justify-between mt-2 text-xs text-gray-400\">\n                  <span>Step {currentStep + 1} of {steps.length || 1}</span>\n                  <span className=\"flex items-center gap-1\">\n                    {currentStep >= steps.length - 1 && steps.length > 0 && (\n                      <motion.span\n                        initial={{ scale: 0 }}\n                        animate={{ scale: 1 }}\n                        className=\"text-green-400 font-semibold\"\n                      >\n                        \u2713 Complete\n                      </motion.span>\n                    )}\n                  </span>\n                </div>\n              </div>\n            </motion.div>\n          </div>\n        </div>\n\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ delay: 0.4, duration: 0.6 }}\n          className=\"bg-gray-900/50 backdrop-blur-lg border border-purple-500/30 rounded-xl p-6 shadow-2xl shadow-purple-500/20\"\n        >\n          <div className=\"flex items-center justify-center gap-8 flex-wrap\">\n            <div className=\"flex items-center gap-2\">\n              <motion.div\n                className=\"w-6 h-6 rounded border-2 border-cyan-400 bg-cyan-500/20\"\n                animate={{\n                  boxShadow: [\n                    '0 0 10px rgba(34, 211, 238, 0.5)',\n                    '0 0 20px rgba(34, 211, 238, 0.8)',\n                    '0 0 10px rgba(34, 211, 238, 0.5)'\n                  ]\n                }}\n                transition={{ duration: 1.5, repeat: Infinity }}\n              />\n              <span className=\"text-cyan-300 text-sm font-medium\">Comparing</span>\n            </div>\n\n            <div className=\"flex items-center gap-2\">\n              <motion.div\n                className=\"w-6 h-6 rounded border-2 border-pink-400 bg-pink-500/20\"\n                animate={{\n                  boxShadow: [\n                    '0 0 10px rgba(236, 72, 153, 0.5)',\n                    '0 0 20px rgba(236, 72, 153, 0.8)',\n                    '0 0 10px rgba(236, 72, 153, 0.5)'\n                  ]\n                }}\n                transition={{ duration: 1.5, repeat: Infinity, delay: 0.3 }}\n              />\n              <span className=\"text-pink-300 text-sm font-medium\">Swapping</span>\n            </div>\n\n            <div className=\"flex items-center gap-2\">\n              <motion.div\n                className=\"w-6 h-6 rounded border-2 border-green-400 bg-green-500/20\"\n                animate={{\n                  boxShadow: [\n                    '0 0 10px rgba(34, 197, 94, 0.5)',\n                    '0 0 20px rgba(34, 197, 94, 0.8)',\n                    '0 0 10px rgba(34, 197, 94, 0.5)'\n                  ]\n                }}\n                transition={{ duration: 1.5, repeat: Infinity, delay: 0.6 }}\n              />\n              <span className=\"text-green-300 text-sm font-medium\">Sorted</span>\n            </div>\n\n            <div className=\"flex items-center gap-2\">\n              <motion.div\n                className=\"w-6 h-6 rounded border border-purple-400/50 bg-gradient-to-br from-purple-500/30 to-cyan-500/30\"\n                animate={{\n                  boxShadow: [\n                    '0 0 8px rgba(168, 85, 247, 0.3)',\n                    '0 0 15px rgba(168, 85, 247, 0.5)',\n                    '0 0 8px rgba(168, 85, 247, 0.3)'\n                  ]\n                }}\n                transition={{ duration: 1.5, repeat: Infinity, delay: 0.9 }}\n              />\n              <span className=\"text-purple-300 text-sm font-medium\">Unsorted</span>\n            </div>\n          </div>\n        </motion.div>\n      </div>\n    </div>\n  );\n}",
  "error": null,
  "overall_score": 43,
  "code_quality_score": 14,
  "architecture_score": 11,
  "performance_score": 10,
  "accessibility_score": 8,
  "metadata": {
    "document_id": "eval_room_10fd4bbb74a5",
    "prompt_category": "creative",
    "prompt_complexity": 9.0
  },
  "raw_response": {
    "document_id": "eval_room_10fd4bbb74a5",
    "mode": "parallel",
    "prompt": "Build a captivating algorithm visualizer with neon colored bars, smooth height transitions, glowing comparison indicators, trail effects during swaps, and a futuristic dashboard design with animated controls",
    "content": "import { useState, useCallback } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Slider } from '@/components/ui/slider';\nimport { Play, Pause, RotateCcw, Zap, BarChart3 } from 'lucide-react';\nimport { motion } from 'framer-motion';\n\ninterface ArrayElement {\n  value: number;\n  id: string;\n  isComparing?: boolean;\n  isSwapping?: boolean;\n  isSorted?: boolean;\n}\n\ninterface AlgorithmStep {\n  array: ArrayElement[];\n  comparingIndices: number[];\n  swappingIndices: number[];\n  sortedIndices: number[];\n}\n\ntype AlgorithmType = 'bubble' | 'quick' | 'merge' | 'insertion';\n\nconst NEON_COLORS = [\n  '#00ffff',\n  '#ff00ff', \n  '#00ff00',\n  '#ffff00',\n  '#ff0066',\n  '#00ffaa'\n];\n\nconst mockAlgorithms = [\n  { id: 'bubble', name: 'Bubble Sort', complexity: 'O(n\u00b2)' },\n  { id: 'quick', name: 'Quick Sort', complexity: 'O(n log n)' },\n  { id: 'merge', name: 'Merge Sort', complexity: 'O(n log n)' },\n  { id: 'insertion', name: 'Insertion Sort', complexity: 'O(n\u00b2)' }\n];\n\nexport default function AlgorithmVisualizer() {\n  const [array, setArray] = useState<ArrayElement[]>([]);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [speed, setSpeed] = useState([50]);\n  const [arraySize, setArraySize] = useState([20]);\n  const [selectedAlgorithm, setSelectedAlgorithm] = useState<AlgorithmType>('bubble');\n  const [currentStep, setCurrentStep] = useState(0);\n  const [steps, setSteps] = useState<AlgorithmStep[]>([]);\n\n  const generateRandomArray = useCallback(() => {\n    const newArray: ArrayElement[] = Array.from({ length: arraySize[0] }, (_, i) => ({\n      value: Math.floor(Math.random() * 100) + 5,\n      id: `element-${i}-${Date.now()}`,\n      isComparing: false,\n      isSwapping: false,\n      isSorted: false\n    }));\n    setArray(newArray);\n    setSteps([]);\n    setCurrentStep(0);\n    setIsPlaying(false);\n  }, [arraySize]);\n\n  const resetVisualization = useCallback(() => {\n\n    setIsPlaying(false);\n    setCurrentStep(0);\n    setSteps([]);\n    generateRandomArray();\n  }, [generateRandomArray]);\n\n  // Animation effect for step-by-step visualization\n  const animateSteps = useCallback(() => {\n    if (currentStep < steps.length - 1) {\n      const delay = 1000 - speed[0] * 9.5; // Convert speed (0-100) to delay (1000ms-50ms)\n      setTimeout(() => {\n        setCurrentStep(prev => prev + 1);\n      }, delay);\n    } else {\n      setIsPlaying(false);\n    }\n  }, [currentStep, steps.length, speed]);\n\n  // Effect to run animation when playing\n  if (isPlaying && steps.length > 0) {\n    animateSteps();\n  }\n  const startVisualization = useCallback(() => {\n    if (steps.length === 0) {\n      // Generate steps first if not already generated\n      // For now, just set playing state\n      setIsPlaying(true);\n      return;\n    }\n    \n    if (currentStep >= steps.length - 1) {\n      // Reset to beginning if at end\n      setCurrentStep(0);\n    }\n    \n    setIsPlaying(true)</parameter>\n</invoke>\n  }, [steps, speed, currentStep]);\n\n  const pauseVisualization = useCallback(() => {\n    setIsPlaying(false);\n\n  }, []);\n\n  const generateSortingSteps = useCallback((algorithm: AlgorithmType) => {\n        if (array.length === 0) return;\n\n    const steps: AlgorithmStep[] = [];\n    const arr = [...array];\n\n    const createStep = (\n      currentArray: ArrayElement[],\n      comparing: number[] = [],\n      swapping: number[] = [],\n      sorted: number[] = []\n    ): AlgorithmStep => ({\n      array: currentArray.map((el, idx) => ({\n        ...el,\n        isComparing: comparing.includes(idx),\n        isSwapping: swapping.includes(idx),\n        isSorted: sorted.includes(idx)\n      })),\n      comparingIndices: comparing,\n      swappingIndices: swapping,\n      sortedIndices: sorted\n    });\n\n    // Initial state\n    steps.push(createStep([...arr]));\n\n    switch (algorithm) {\n      case 'bubble': {\n        const sortedIndices: number[] = [];\n        for (let i = 0; i < arr.length - 1; i++) {\n          for (let j = 0; j < arr.length - i - 1; j++) {\n            // Comparing\n            steps.push(createStep([...arr], [j, j + 1], [], sortedIndices));\n            \n            if (arr[j].value > arr[j + 1].value) {\n              // Swapping\n              steps.push(createStep([...arr], [], [j, j + 1], sortedIndices));\n              [arr[j], arr[j + 1]] = [arr[j + 1], arr[j]];\n              steps.push(createStep([...arr], [], [], sortedIndices));\n            }\n          }\n          sortedIndices.push(arr.length - i - 1);\n          steps.push(createStep([...arr], [], [], sortedIndices));\n        }\n        sortedIndices.push(0);\n        steps.push(createStep([...arr], [], [], sortedIndices));\n        break;\n      }\n\n      case 'insertion': {\n        const sortedIndices: number[] = [0];\n        steps.push(createStep([...arr], [], [], [0]));\n        \n        for (let i = 1; i < arr.length; i++) {\n          const key = arr[i];\n          let j = i - 1;\n          \n          steps.push(createStep([...arr], [i], [], sortedIndices));\n          \n          while (j >= 0 && arr[j].value > key.value) {\n            steps.push(createStep([...arr], [j, j + 1], [], sortedIndices));\n            steps.push(createStep([...arr], [], [j, j + 1], sortedIndices));\n            arr[j + 1] = arr[j];\n            steps.push(createStep([...arr], [], [], sortedIndices));\n            j--;\n          }\n          \n          arr[j + 1] = key;\n          sortedIndices.push(i);\n          steps.push(createStep([...arr], [], [], sortedIndices));\n        }\n        break;\n      }\n\n      case 'quick': {\n        const sortedIndices: number[] = [];\n        \n        const partition = (low: number, high: number): number => {\n          const pivot = arr[high];\n          steps.push(createStep([...arr], [high], [], sortedIndices));\n          let i = low - 1;\n          \n          for (let j = low; j < high; j++) {\n            steps.push(createStep([...arr], [j, high], [], sortedIndices));\n            \n            if (arr[j].value < pivot.value) {\n              i++;\n              if (i !== j) {\n                steps.push(createStep([...arr], [], [i, j], sortedIndices));\n                [arr[i], arr[j]] = [arr[j], arr[i]];\n                steps.push(createStep([...arr], [], [], sortedIndices));\n              }\n            }\n          }\n          \n          steps.push(createStep([...arr], [], [i + 1, high], sortedIndices));\n          [arr[i + 1], arr[high]] = [arr[high], arr[i + 1]];\n          sortedIndices.push(i + 1);\n          steps.push(createStep([...arr], [], [], sortedIndices));\n          \n          return i + 1;\n        };\n        \n        const quickSort = (low: number, high: number) => {\n          if (low < high) {\n            const pi = partition(low, high);\n            quickSort(low, pi - 1);\n            quickSort(pi + 1, high);\n          } else if (low === high) {\n            sortedIndices.push(low);\n            steps.push(createStep([...arr], [], [], sortedIndices));\n          }\n        };\n        \n        quickSort(0, arr.length - 1);\n        break;\n      }\n\n      case 'merge': {\n        const sortedIndices: number[] = [];\n        \n        const merge = (left: number, mid: number, right: number) => {\n          const leftArr = arr.slice(left, mid + 1);\n          const rightArr = arr.slice(mid + 1, right + 1);\n          \n          let i = 0, j = 0, k = left;\n          \n          while (i < leftArr.length && j < rightArr.length) {\n            steps.push(createStep([...arr], [left + i, mid + 1 + j], [], sortedIndices));\n            \n            if (leftArr[i].value <= rightArr[j].value) {\n              steps.push(createStep([...arr], [], [k], sortedIndices));\n              arr[k] = leftArr[i];\n              i++;\n            } else {\n              steps.push(createStep([...arr], [], [k], sortedIndices));\n              arr[k] = rightArr[j];\n              j++;\n            }\n            steps.push(createStep([...arr], [], [], sortedIndices));\n            k++;\n          }\n          \n          while (i < leftArr.length) {\n            steps.push(createStep([...arr], [], [k], sortedIndices));\n            arr[k] = leftArr[i];\n            steps.push(createStep([...arr], [], [], sortedIndices));\n            i++;\n            k++;\n          }\n          \n          while (j < rightArr.length) {\n            steps.push(createStep([...arr], [], [k], sortedIndices));\n            arr[k] = rightArr[j];\n            steps.push(createStep([...arr], [], [], sortedIndices));\n            j++;\n            k++;\n          }\n        };\n        \n        const mergeSort = (left: number, right: number) => {\n          if (left < right) {\n            const mid = Math.floor((left + right) / 2);\n            mergeSort(left, mid);\n            mergeSort(mid + 1, right);\n            merge(left, mid, right);\n          }\n        };\n        \n        mergeSort(0, arr.length - 1);\n        \n        // Mark all as sorted at the end\n        for (let i = 0; i < arr.length; i++) {\n          sortedIndices.push(i);\n        }\n        steps.push(createStep([...arr], [], [], sortedIndices));\n        break;\n      }\n    }\n\n    setSteps(steps);\n    setCurrentStep(0);\n    setIsPlaying(false);\n  }, [array]);\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-gray-900 via-purple-900 to-gray-900 p-8\">\n      <div className=\"max-w-7xl mx-auto space-y-8\">\n        <motion.div\n          initial={{ opacity: 0, y: -20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.8 }}\n          className=\"text-center space-y-4\"\n        >\n          <motion.h1\n            className=\"text-6xl font-bold bg-gradient-to-r from-cyan-400 via-purple-400 to-pink-400 bg-clip-text text-transparent\"\n            animate={{\n              textShadow: [\n                '0 0 20px rgba(0, 255, 255, 0.5)',\n                '0 0 40px rgba(255, 0, 255, 0.5)',\n                '0 0 20px rgba(0, 255, 255, 0.5)'\n              ]\n            }}\n            transition={{ duration: 2, repeat: Infinity }}\n          >\n            Algorithm Visualizer\n          </motion.h1>\n          \n          <div className=\"flex items-center justify-center gap-4\">\n            <motion.div\n              initial={{ scale: 0 }}\n              animate={{ scale: 1 }}\n              transition={{ delay: 0.3, type: 'spring' }}\n              className=\"px-6 py-2 bg-purple-500/20 border border-purple-400/50 rounded-full backdrop-blur-sm\"\n            >\n              <span className=\"text-2xl font-semibold text-purple-300\">\n                {mockAlgorithms.find(a => a.id === selectedAlgorithm)?.name || 'Bubble Sort'}\n              </span>\n            </motion.div>\n            \n            <motion.div\n              initial={{ scale: 0 }}\n              animate={{ scale: 1 }}\n              transition={{ delay: 0.5, type: 'spring' }}\n              className=\"px-4 py-2 bg-cyan-500/20 border border-cyan-400/50 rounded-full backdrop-blur-sm relative overflow-hidden\"\n            >\n              <motion.div\n                className=\"absolute inset-0 bg-gradient-to-r from-transparent via-cyan-400/20 to-transparent\"\n                animate={{ x: ['-100%', '200%'] }}\n                transition={{ duration: 2, repeat: Infinity, ease: 'linear' }}\n              />\n              <div className=\"relative flex items-center gap-2\">\n                <BarChart3 className=\"w-4 h-4 text-cyan-400\" />\n                <span className=\"text-sm font-mono text-cyan-300\">\n                  {mockAlgorithms.find(a => a.id === selectedAlgorithm)?.complexity || 'O(n\u00b2)'}\n                </span>\n              </div>\n            </motion.div>\n          </div>\n        </motion.div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-6\">\n          <div className=\"lg:col-span-1 space-y-6\">\n            <motion.div\n              initial={{ opacity: 0, x: -50 }}\n              animate={{ opacity: 1, x: 0 }}\n              className=\"bg-gray-900/50 backdrop-blur-lg border border-cyan-500/30 rounded-xl p-6 shadow-[0_0_30px_rgba(0,255,255,0.3)] hover:shadow-[0_0_50px_rgba(0,255,255,0.5)] transition-shadow duration-300\"\n            >\n              <div className=\"space-y-6\">\n                {/* Algorithm Selection */}\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center gap-2 text-cyan-400 font-semibold\">\n                    <Zap className=\"w-4 h-4\" />\n                    <span className=\"text-sm uppercase tracking-wider\">Algorithm</span>\n                  </div>\n                  <div className=\"grid grid-cols-1 gap-2\">\n                    {mockAlgorithms.map((algo) => (\n                      <motion.button\n                        key={algo.id}\n                        whileHover={{ scale: 1.02 }}\n                        whileTap={{ scale: 0.98 }}\n                        onClick={() => setSelectedAlgorithm(algo.id as AlgorithmType)}\n                        className={`p-3 rounded-lg border transition-all duration-300 text-left ${\n                          selectedAlgorithm === algo.id\n                            ? 'bg-cyan-500/20 border-cyan-400 shadow-[0_0_20px_rgba(0,255,255,0.4)]'\n                            : 'bg-gray-800/50 border-gray-700 hover:border-cyan-500/50'\n                        }`}\n                      >\n                        <div className=\"font-medium text-white\">{algo.name}</div>\n                        <div className=\"text-xs text-gray-400 mt-1\">{algo.complexity}</div>\n                      </motion.button>\n                    ))}\n                  </div>\n                </div>\n\n                {/* Array Size Control */}\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center gap-2 text-purple-400 font-semibold\">\n                      <BarChart3 className=\"w-4 h-4\" />\n                      <span className=\"text-sm uppercase tracking-wider\">Array Size</span>\n                    </div>\n                    <span className=\"text-white font-mono text-lg\">{arraySize[0]}</span>\n                  </div>\n                  <Slider\n                    value={arraySize}\n                    onValueChange={setArraySize}\n                    min={5}\n                    max={50}\n                    step={1}\n                    className=\"cursor-pointer\"\n                    disabled={isPlaying}\n                  />\n                </div>\n\n                {/* Speed Control */}\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center gap-2 text-pink-400 font-semibold\">\n                      <Zap className=\"w-4 h-4\" />\n                      <span className=\"text-sm uppercase tracking-wider\">Speed</span>\n                    </div>\n                    <span className=\"text-white font-mono text-lg\">{speed[0]}%</span>\n                  </div>\n                  <Slider\n                    value={speed}\n                    onValueChange={setSpeed}\n                    min={10}\n                    max={100}\n                    step={10}\n                    className=\"cursor-pointer\"\n                  />\n                </div>\n\n                {/* Control Buttons */}\n                <div className=\"space-y-3 pt-4 border-t border-gray-700\">\n                  <Button\n                    onClick={isPlaying ? pauseVisualization : startVisualization}\n                    disabled={steps.length === 0 || currentStep >= steps.length}\n                    className=\"w-full bg-gradient-to-r from-cyan-500 to-blue-500 hover:from-cyan-400 hover:to-blue-400 text-white font-semibold shadow-[0_0_20px_rgba(0,255,255,0.5)] hover:shadow-[0_0_30px_rgba(0,255,255,0.7)] transition-all duration-300\"\n                  >\n                    {isPlaying ? (\n                      <>\n                        <Pause className=\"w-4 h-4 mr-2\" />\n                        Pause\n                      </>\n                    ) : (\n                      <>\n                        <Play className=\"w-4 h-4 mr-2\" />\n                        {currentStep >= steps.length ? 'Finished' : 'Play'}\n                      </>\n                    )}\n                  </Button>\n\n                  <Button\n                    onClick={resetVisualization}\n                    variant=\"outline\"\n                    className=\"w-full border-purple-500/50 text-purple-400 hover:bg-purple-500/20 hover:border-purple-400 hover:text-purple-300 shadow-[0_0_15px_rgba(168,85,247,0.3)] hover:shadow-[0_0_25px_rgba(168,85,247,0.5)] transition-all duration-300\"\n                  >\n                    <RotateCcw className=\"w-4 h-4 mr-2\" />\n                    Reset\n                  </Button>\n\n                  <Button\n                    onClick={() => {\n                      generateSortingSteps(selectedAlgorithm);\n                      setCurrentStep(0);\n                    }}\n                    disabled={array.length === 0 || isPlaying}\n                    className=\"w-full bg-gradient-to-r from-pink-500 to-purple-500 hover:from-pink-400 hover:to-purple-400 text-white font-semibold shadow-[0_0_20px_rgba(236,72,153,0.5)] hover:shadow-[0_0_30px_rgba(236,72,153,0.7)] transition-all duration-300\"\n                  >\n                    <Zap className=\"w-4 h-4 mr-2\" />\n                    Generate Steps\n                  </Button>\n                </div>\n\n                {/* Stats Display */}\n                <div className=\"pt-4 border-t border-gray-700 space-y-2\">\n                  <div className=\"flex justify-between text-sm\">\n                    <span className=\"text-gray-400\">Current Step:</span>\n                    <span className=\"text-cyan-400 font-mono\">{currentStep} / {steps.length}</span>\n                  </div>\n                  <div className=\"flex justify-between text-sm\">\n                    <span className=\"text-gray-400\">Array Length:</span>\n                    <span className=\"text-purple-400 font-mono\">{array.length}</span>\n                  </div>\n                </div>\n              </div>\n            </motion.div>\n            \n            <div className=\"bg-gray-900/50 backdrop-blur-lg border border-cyan-500/30 rounded-xl p-6 shadow-2xl shadow-cyan-500/20\">\n              <div className=\"space-y-6\">\n                <div>\n                  <h3 className=\"text-sm font-semibold text-cyan-400 mb-3 flex items-center gap-2\">\n                    <Zap className=\"w-4 h-4\" />\n                    Algorithm\n                  </h3>\n                  <div className=\"grid grid-cols-1 gap-2\">\n                    {mockAlgorithms.map((algo) => (\n                      <motion.button\n                        key={algo.id}\n                        onClick={() => setSelectedAlgorithm(algo.id as AlgorithmType)}\n                        className={`relative p-3 rounded-lg border transition-all duration-300 text-left ${\n                          selectedAlgorithm === algo.id\n                            ? 'bg-cyan-500/20 border-cyan-400 shadow-lg shadow-cyan-500/50'\n                            : 'bg-gray-800/50 border-gray-700 hover:border-cyan-500/50 hover:shadow-md hover:shadow-cyan-500/30'\n                        }`}\n                        whileHover={{ scale: 1.02 }}\n                        whileTap={{ scale: 0.98 }}\n                      >\n                        <div className=\"flex flex-col gap-1\">\n                          <span className={`text-sm font-medium ${\n                            selectedAlgorithm === algo.id ? 'text-cyan-300' : 'text-gray-300'\n                          }`}>\n                            {algo.name}\n                          </span>\n                          <span className={`text-xs ${\n                            selectedAlgorithm === algo.id ? 'text-cyan-400/80' : 'text-gray-500'\n                          }`}>\n                            {algo.complexity}\n                          </span>\n                        </div>\n                        {selectedAlgorithm === algo.id && (\n                          <motion.div\n                            className=\"absolute inset-0 rounded-lg border-2 border-cyan-400\"\n                            layoutId=\"algorithmSelector\"\n                            transition={{ type: \"spring\", stiffness: 300, damping: 30 }}\n                          />\n                        )}\n                      </motion.button>\n                    ))}\n                  </div>\n                </div></parameter>\n</invoke>\n\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <label className=\"text-cyan-400 text-sm font-medium flex items-center gap-2\">\n                      <Zap className=\"w-4 h-4\" />\n                      Speed\n                    </label>\n                    <span className=\"text-cyan-300 text-xs\">{speed[0]}ms</span>\n                  </div>\n                  <Slider\n                    value={speed}\n                    onValueChange={setSpeed}\n                    min={10}\n                    max={200}\n                    step={10}\n                    className=\"[&_[role=slider]]:bg-cyan-400 [&_[role=slider]]:border-cyan-300 [&_[role=slider]]:shadow-[0_0_15px_rgba(34,211,238,0.8)] [&_[role=slider]]:hover:shadow-[0_0_25px_rgba(34,211,238,1)] [&_[role=slider]]:transition-shadow [&_.relative]:bg-gray-700/50 [&_.relative]:border [&_.relative]:border-cyan-500/30 [&_.bg-primary]:bg-gradient-to-r [&_.bg-primary]:from-cyan-500 [&_.bg-primary]:to-purple-500 [&_.bg-primary]:shadow-[0_0_10px_rgba(34,211,238,0.5)]\"\n                  />\n                </div>\n\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <label className=\"text-cyan-400 text-sm font-medium flex items-center gap-2\">\n                      <BarChart3 className=\"w-4 h-4\" />\n                      Array Size\n                    </label>\n                    <span className=\"text-cyan-300 text-xs\">{arraySize[0]}</span>\n                  </div>\n                  <Slider\n                    value={arraySize}\n                    onValueChange={setArraySize}\n                    min={5}\n                    max={50}\n                    step={1}\n                    className=\"[&_[role=slider]]:bg-gradient-to-r [&_[role=slider]]:from-cyan-400 [&_[role=slider]]:to-purple-500 [&_[role=slider]]:border-2 [&_[role=slider]]:border-cyan-300 [&_[role=slider]]:shadow-lg [&_[role=slider]]:shadow-cyan-500/50 [&>span]:bg-gradient-to-r [&>span]:from-cyan-500/30 [&>span]:to-purple-500/30\"\n                  />\n                </div>\n\n                <div className=\"flex gap-3 pt-4\">\n                  <motion.button\n                    onClick={isPlaying ? pauseVisualization : startVisualization}\n                    className=\"flex-1 relative overflow-hidden group\"\n                    whileHover={{ scale: 1.05 }}\n                    whileTap={{ scale: 0.95 }}\n                  >\n                    <motion.div\n                      className={`absolute inset-0 rounded-lg transition-all duration-300 ${\n                        isPlaying\n                          ? 'bg-gradient-to-r from-orange-500 to-red-500 shadow-[0_0_30px_rgba(249,115,22,0.6)]'\n                          : 'bg-gradient-to-r from-cyan-500 to-blue-500 shadow-[0_0_30px_rgba(6,182,212,0.6)]'\n                      }`}\n                      animate={{\n                        boxShadow: isPlaying\n                          ? [\n                              '0 0 30px rgba(249,115,22,0.6)',\n                              '0 0 50px rgba(249,115,22,0.8)',\n                              '0 0 30px rgba(249,115,22,0.6)'\n                            ]\n                          : [\n                              '0 0 30px rgba(6,182,212,0.6)',\n                              '0 0 50px rgba(6,182,212,0.8)',\n                              '0 0 30px rgba(6,182,212,0.6)'\n                            ]\n                      }}\n                      transition={{ duration: 2, repeat: Infinity }}\n                    />\n                    <div className=\"relative flex items-center justify-center gap-2 py-3 px-4\">\n                      <motion.div\n                        animate={{ rotate: isPlaying ? 0 : 0 }}\n                        transition={{ duration: 0.3 }}\n                      >\n                        {isPlaying ? (\n                          <Pause className=\"w-5 h-5 text-white\" />\n                        ) : (\n                          <Play className=\"w-5 h-5 text-white\" />\n                        )}\n                      </motion.div>\n                      <span className=\"text-white font-semibold\">\n                        {isPlaying ? 'Pause' : 'Play'}\n                      </span>\n                    </div>\n                    <motion.div\n                      className=\"absolute inset-0 bg-gradient-to-r from-transparent via-white/20 to-transparent\"\n                      animate={{ x: ['-100%', '200%'] }}\n                      transition={{ duration: 1.5, repeat: Infinity, ease: 'linear' }}\n                    />\n                  </motion.button>\n                  <motion.button\n                    onClick={resetVisualization}\n                    whileHover={{ scale: 1.05, rotate: 180 }}\n                    whileTap={{ scale: 0.95 }}\n                    transition={{ type: 'spring', stiffness: 300, damping: 20 }}\n                    className=\"flex-1 px-6 py-3 bg-gradient-to-r from-pink-500 to-purple-600 text-white rounded-lg font-semibold shadow-[0_0_20px_rgba(236,72,153,0.5)] hover:shadow-[0_0_40px_rgba(236,72,153,0.8)] transition-all duration-300 flex items-center justify-center gap-2 border border-pink-400/50 relative overflow-hidden group\"\n                  >\n                    <motion.div\n                      className=\"absolute inset-0 bg-gradient-to-r from-transparent via-white/20 to-transparent\"\n                      animate={{ x: ['-100%', '200%'] }}\n                      transition={{ duration: 2, repeat: Infinity, ease: 'linear' }}\n                    />\n                    <RotateCcw className=\"w-5 h-5 relative z-10 group-hover:rotate-180 transition-transform duration-500\" />\n                    <span className=\"relative z-10\">Reset</span>\n                  </motion.button>\n                </div>\n              </div>\n            </div>\n\n            <motion.div\n              initial={{ opacity: 0, x: -50 }}\n              animate={{ opacity: 1, x: 0 }}\n              transition={{ delay: 0.2 }}\n              className=\"bg-gray-900/50 backdrop-blur-lg border border-purple-500/30 rounded-xl p-6 shadow-[0_0_30px_rgba(168,85,247,0.3)] hover:shadow-[0_0_50px_rgba(168,85,247,0.5)] transition-shadow duration-300\"\n            >\n              <div className=\"space-y-4\">\n                <div className=\"flex items-center gap-2 text-purple-400 font-semibold mb-4\">\n                  <BarChart3 className=\"w-5 h-5\" />\n                  <span className=\"text-sm uppercase tracking-wider\">Statistics</span>\n                </div>\n\n                <div className=\"space-y-3\">\n                  {/* Comparisons Counter */}\n                  <motion.div\n                    className=\"bg-gradient-to-r from-cyan-500/10 to-cyan-500/5 border border-cyan-500/30 rounded-lg p-4 relative overflow-hidden\"\n                    whileHover={{ scale: 1.02 }}\n                  >\n                    <motion.div\n                      className=\"absolute inset-0 bg-gradient-to-r from-transparent via-cyan-400/10 to-transparent\"\n                      animate={{ x: ['-100%', '200%'] }}\n                      transition={{ duration: 3, repeat: Infinity, ease: 'linear' }}\n                    />\n                    <div className=\"relative flex items-center justify-between\">\n                      <div className=\"flex items-center gap-3\">\n                        <div className=\"w-10 h-10 rounded-full bg-cyan-500/20 flex items-center justify-center border border-cyan-400/50 shadow-[0_0_15px_rgba(0,255,255,0.4)]\">\n                          <Zap className=\"w-5 h-5 text-cyan-400\" />\n                        </div>\n                        <div>\n                          <div className=\"text-xs text-cyan-400/80 uppercase tracking-wide\">Comparisons</div>\n                          <motion.div\n                            key={steps[currentStep]?.comparingIndices.length || 0}\n                            initial={{ scale: 1.2, color: '#00ffff' }}\n                            animate={{ scale: 1, color: '#ffffff' }}\n                            className=\"text-2xl font-bold text-white\"\n                          >\n                            {steps.length > 0 ? steps.slice(0, currentStep + 1).reduce((acc, step) => acc + (step.comparingIndices.length > 0 ? 1 : 0), 0) : 0}\n                          </motion.div>\n                        </div>\n                      </div>\n                    </div>\n                  </motion.div>\n\n                  {/* Swaps Counter */}\n                  <motion.div\n                    className=\"bg-gradient-to-r from-pink-500/10 to-pink-500/5 border border-pink-500/30 rounded-lg p-4 relative overflow-hidden\"\n                    whileHover={{ scale: 1.02 }}\n                  >\n                    <motion.div\n                      className=\"absolute inset-0 bg-gradient-to-r from-transparent via-pink-400/10 to-transparent\"\n                      animate={{ x: ['-100%', '200%'] }}\n                      transition={{ duration: 3, repeat: Infinity, ease: 'linear', delay: 0.5 }}\n                    />\n                    <div className=\"relative flex items-center justify-between\">\n                      <div className=\"flex items-center gap-3\">\n                        <div className=\"w-10 h-10 rounded-full bg-pink-500/20 flex items-center justify-center border border-pink-400/50 shadow-[0_0_15px_rgba(255,0,102,0.4)]\">\n                          <RotateCcw className=\"w-5 h-5 text-pink-400\" />\n                        </div>\n                        <div>\n                          <div className=\"text-xs text-pink-400/80 uppercase tracking-wide\">Swaps</div>\n                          <motion.div\n                            key={steps[currentStep]?.swappingIndices.length || 0}\n                            initial={{ scale: 1.2, color: '#ff0066' }}\n                            animate={{ scale: 1, color: '#ffffff' }}\n                            className=\"text-2xl font-bold text-white\"\n                          >\n                            {steps.length > 0 ? steps.slice(0, currentStep + 1).reduce((acc, step) => acc + (step.swappingIndices.length > 0 ? 1 : 0), 0) : 0}\n                          </motion.div>\n                        </div>\n                      </div>\n                    </div>\n                  </motion.div>\n\n                  {/* Progress */}\n                  <motion.div\n                    className=\"bg-gradient-to-r from-purple-500/10 to-purple-500/5 border border-purple-500/30 rounded-lg p-4 relative overflow-hidden\"\n                    whileHover={{ scale: 1.02 }}\n                  >\n                    <motion.div\n                      className=\"absolute inset-0 bg-gradient-to-r from-transparent via-purple-400/10 to-transparent\"\n                      animate={{ x: ['-100%', '200%'] }}\n                      transition={{ duration: 3, repeat: Infinity, ease: 'linear', delay: 1 }}\n                    />\n                    <div className=\"relative space-y-2\">\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"flex items-center gap-3\">\n                          <div className=\"w-10 h-10 rounded-full bg-purple-500/20 flex items-center justify-center border border-purple-400/50 shadow-[0_0_15px_rgba(168,85,247,0.4)]\">\n                            <BarChart3 className=\"w-5 h-5 text-purple-400\" />\n                          </div>\n                          <div>\n                            <div className=\"text-xs text-purple-400/80 uppercase tracking-wide\">Progress</div>\n                            <motion.div\n                              key={currentStep}\n                              initial={{ scale: 1.2, color: '#a855f7' }}\n                              animate={{ scale: 1, color: '#ffffff' }}\n                              className=\"text-2xl font-bold text-white\"\n                            >\n                              {steps.length > 0 ? Math.round((currentStep / Math.max(steps.length - 1, 1)) * 100) : 0}%\n                            </motion.div>\n                          </div>\n                        </div>\n                      </div>\n                      <div className=\"w-full h-2 bg-gray-800/50 rounded-full overflow-hidden border border-purple-500/20\">\n                        <motion.div\n                          className=\"h-full bg-gradient-to-r from-purple-500 via-pink-500 to-cyan-500 shadow-[0_0_10px_rgba(168,85,247,0.8)]\"\n                          initial={{ width: 0 }}\n                          animate={{ \n                            width: steps.length > 0 ? `${(currentStep / Math.max(steps.length - 1, 1)) * 100}%` : '0%'\n                          }}\n                          transition={{ duration: 0.3 }}\n                        />\n                      </div>\n                    </div>\n                  </motion.div>\n\n                  {/* Array Size Info */}\n                  <motion.div\n                    className=\"bg-gradient-to-r from-green-500/10 to-green-500/5 border border-green-500/30 rounded-lg p-4\"\n                    whileHover={{ scale: 1.02 }}\n                  >\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"text-xs text-green-400/80 uppercase tracking-wide\">Array Size</div>\n                      <div className=\"text-xl font-bold text-white\">{array.length}</div>\n                    </div>\n                  </motion.div>\n\n                  {/* Status Indicator */}\n                  <motion.div\n                    className=\"bg-gradient-to-r from-yellow-500/10 to-yellow-500/5 border border-yellow-500/30 rounded-lg p-4\"\n                    whileHover={{ scale: 1.02 }}\n                  >\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"text-xs text-yellow-400/80 uppercase tracking-wide\">Status</div>\n                      <div className=\"flex items-center gap-2\">\n                        <motion.div\n                          className={`w-2 h-2 rounded-full ${isPlaying ? 'bg-green-400' : 'bg-gray-400'}`}\n                          animate={isPlaying ? {\n                            boxShadow: [\n                              '0 0 5px rgba(34,197,94,0.5)',\n                              '0 0 20px rgba(34,197,94,0.8)',\n                              '0 0 5px rgba(34,197,94,0.5)'\n                            ]\n                          } : {}}\n                          transition={{ duration: 1, repeat: Infinity }}\n                        />\n                        <span className=\"text-sm font-semibold text-white\">\n                          {isPlaying ? 'Running' : steps.length > 0 && currentStep >= steps.length - 1 ? 'Complete' : 'Paused'}\n                        </span>\n                      </div>\n                    </div>\n                  </motion.div>\n                </div>\n              </div>\n            </motion.div>\n          </div>\n\n          <div className=\"lg:col-span-3\">\n            <div className=\"bg-gray-900/50 backdrop-blur-lg border border-purple-500/30 rounded-xl p-8 shadow-2xl shadow-purple-500/20 min-h-[600px]\">\n              {array.length === 0 ? (\n                <motion.div\n                  initial={{ opacity: 0, scale: 0.8 }}\n                  animate={{ opacity: 1, scale: 1 }}\n                  className=\"absolute inset-0 flex flex-col items-center justify-center gap-6\"\n                >\n                  <motion.div\n                    animate={{\n                      rotate: [0, 360],\n                      scale: [1, 1.2, 1]\n                    }}\n                    transition={{\n                      duration: 3,\n                      repeat: Infinity,\n                      ease: \"easeInOut\"\n                    }}\n                  >\n                    <BarChart3 className=\"w-24 h-24 text-purple-400/50\" />\n                  </motion.div>\n                  <div className=\"text-center space-y-2\">\n                    <p className=\"text-2xl font-semibold text-purple-300\">\n                      Generate an array to begin\n                    </p>\n                    <p className=\"text-sm text-gray-400\">\n                      Click the \"Generate Array\" button to start visualizing\n                    </p>\n                  </div>\n                </motion.div>\n              ) : (\n                <div className=\"relative w-full h-[500px] flex items-end justify-center gap-1 px-4\">\n                  {/* Comparison indicator lines */}\n                  {steps.length > 0 && currentStep < steps.length && (\n                    <>\n                      {steps[currentStep].comparingIndices.map((idx, i) => (\n                        <motion.div\n                          key={`compare-line-${idx}-${i}`}\n                          initial={{ opacity: 0, scaleY: 0 }}\n                          animate={{ opacity: 1, scaleY: 1 }}\n                          exit={{ opacity: 0 }}\n                          className=\"absolute top-0 w-0.5 bg-gradient-to-b from-yellow-400 to-transparent\"\n                          style={{\n                            left: `${(idx / array.length) * 100}%`,\n                            height: '100%',\n                            boxShadow: '0 0 20px rgba(250, 204, 21, 0.8)'\n                          }}\n                        />\n                      ))}\n                      \n                      {/* Swap trail effect */}\n                      {steps[currentStep].swappingIndices.length === 2 && (\n                        <motion.div\n                          initial={{ opacity: 0, scaleX: 0 }}\n                          animate={{ opacity: [0, 1, 0], scaleX: [0, 1, 1] }}\n                          transition={{ duration: 0.5 }}\n                          className=\"absolute h-1 bg-gradient-to-r from-pink-500 via-purple-500 to-pink-500 rounded-full\"\n                          style={{\n                            top: '50%',\n                            left: `${(Math.min(...steps[currentStep].swappingIndices) / array.length) * 100}%`,\n                            width: `${(Math.abs(steps[currentStep].swappingIndices[1] - steps[currentStep].swappingIndices[0]) / array.length) * 100}%`,\n                            boxShadow: '0 0 30px rgba(236, 72, 153, 0.9)'\n                          }}\n                        />\n                      )}\n                    </>\n                  )}\n\n                  {/* Animated bars */}\n                  {(steps.length > 0 && currentStep < steps.length ? steps[currentStep].array : array).map((element, idx) => {\n                    const barHeight = (element.value / 105) * 100;\n                    const isComparing = element.isComparing;\n                    const isSwapping = element.isSwapping;\n                    const isSorted = element.isSorted;\n                    \n                    let barColor = NEON_COLORS[idx % NEON_COLORS.length];\n                    let glowColor = barColor;\n                    \n                    if (isSorted) {\n                      barColor = '#00ff00';\n                      glowColor = '#00ff00';\n                    } else if (isSwapping) {\n                      barColor = '#ff0066';\n                      glowColor = '#ff0066';\n                    } else if (isComparing) {\n                      barColor = '#ffff00';\n                      glowColor = '#ffff00';\n                    }\n\n                    return (\n                      <motion.div\n                        key={element.id}\n                        layout\n                        initial={{ height: 0, opacity: 0 }}\n                        animate={{\n                          height: `${barHeight}%`,\n                          opacity: 1,\n                          scale: isSwapping ? [1, 1.1, 1] : isComparing ? 1.05 : 1\n                        }}\n                        transition={{\n                          height: { duration: 0.3, ease: \"easeOut\" },\n                          scale: { duration: 0.2 },\n                          layout: { duration: 0.3, ease: \"easeInOut\" }\n                        }}\n                        className=\"relative rounded-t-lg\"\n                        style={{\n                          flex: 1,\n                          minWidth: '4px',\n                          maxWidth: `${100 / array.length}%`,\n                          background: `linear-gradient(to top, ${barColor}, ${barColor}dd)`,\n                          boxShadow: `\n                            0 0 ${isSwapping ? '30px' : isComparing ? '25px' : '15px'} ${glowColor}80,\n                            inset 0 0 ${isSwapping ? '20px' : '10px'} ${glowColor}40\n                          `,\n                          border: `1px solid ${barColor}`,\n                          transformOrigin: 'bottom'\n                        }}\n                      >\n                        {/* Value label for larger arrays */}\n                        {array.length <= 20 && (\n                          <motion.div\n                            initial={{ opacity: 0 }}\n                            animate={{ opacity: 1 }}\n                            className=\"absolute -top-6 left-1/2 -translate-x-1/2 text-xs font-mono font-bold whitespace-nowrap\"\n                            style={{\n                              color: barColor,\n                              textShadow: `0 0 10px ${glowColor}`\n                            }}\n                          >\n                            {element.value}\n                          </motion.div>\n                        )}\n                        \n                        {/* Swap particle effect */}\n                        {isSwapping && (\n                          <>\n                            {[...Array(5)].map((_, i) => (\n                              <motion.div\n                                key={`particle-${i}`}\n                                initial={{ \n                                  opacity: 1, \n                                  scale: 1,\n                                  x: 0,\n                                  y: 0\n                                }}\n                                animate={{\n                                  opacity: [1, 0],\n                                  scale: [1, 0],\n                                  x: [0, (Math.random() - 0.5) * 40],\n                                  y: [0, -Math.random() * 60]\n                                }}\n                                transition={{\n                                  duration: 0.6,\n                                  delay: i * 0.05,\n                                  ease: \"easeOut\"\n                                }}\n                                className=\"absolute top-0 left-1/2 w-2 h-2 rounded-full\"\n                                style={{\n                                  background: glowColor,\n                                  boxShadow: `0 0 10px ${glowColor}`\n                                }}\n                              />\n                            ))}\n                          </>\n                        )}\n                        \n                        {/* Sorted checkmark indicator */}\n                        {isSorted && (\n                          <motion.div\n                            initial={{ scale: 0, rotate: -180 }}\n                            animate={{ scale: 1, rotate: 0 }}\n                            className=\"absolute -top-8 left-1/2 -translate-x-1/2\"\n                          >\n                            <div className=\"w-6 h-6 rounded-full bg-green-500/20 border-2 border-green-400 flex items-center justify-center\"\n                              style={{\n                                boxShadow: '0 0 15px rgba(0, 255, 0, 0.6)'\n                              }}\n                            >\n                              <div className=\"w-2 h-3 border-r-2 border-b-2 border-green-400 rotate-45 -mt-1\" />\n                            </div>\n                          </motion.div>\n                        )}\n                      </motion.div>\n                    );\n                  })}\n                </div>\n              )}\n              \n              <div className=\"relative h-full flex items-end justify-center gap-1\">\n                {(steps.length > 0 && currentStep < steps.length\n                  ? steps[currentStep].array\n                  : array\n                ).map((element, index) => {\n                  const maxValue = 105;\n                  const heightPercentage = (element.value / maxValue) * 100;\n                  const colorIndex = index % NEON_COLORS.length;\n                  const baseColor = NEON_COLORS[colorIndex];\n\n                  let glowColor = baseColor;\n                  let glowIntensity = 0.5;\n                  let scale = 1;\n\n                  if (element.isSwapping) {\n                    glowColor = '#ff0066';\n                    glowIntensity = 1.5;\n                    scale = 1.1;\n                  } else if (element.isComparing) {\n                    glowColor = '#ffff00';\n                    glowIntensity = 1.2;\n                    scale = 1.05;\n                  } else if (element.isSorted) {\n                    glowColor = '#00ff00';\n                    glowIntensity = 0.8;\n                  }\n\n                  return (\n                    <motion.div\n                      key={element.id}\n                      layout\n                      initial={{ height: 0, opacity: 0 }}\n                      animate={{\n                        height: `${heightPercentage}%`,\n                        opacity: 1,\n                        scale: scale,\n                        boxShadow: [\n                          `0 0 ${10 * glowIntensity}px ${glowColor}`,\n                          `0 0 ${20 * glowIntensity}px ${glowColor}`,\n                          `0 0 ${10 * glowIntensity}px ${glowColor}`\n                        ]\n                      }}\n                      transition={{\n                        height: { duration: 0.4, ease: 'easeOut' },\n                        scale: { duration: 0.3, ease: 'easeInOut' },\n                        boxShadow: { duration: 0.6, repeat: Infinity },\n                        layout: { duration: 0.5, ease: 'easeInOut' }\n                      }}\n                      className=\"relative rounded-t-lg min-w-[8px] flex-1 max-w-[60px]\"\n                      style={{\n                        background: element.isSorted\n                          ? 'linear-gradient(to top, #00ff00, #00ff88)'\n                          : element.isSwapping\n                          ? 'linear-gradient(to top, #ff0066, #ff00ff)'\n                          : element.isComparing\n                          ? 'linear-gradient(to top, #ffff00, #ffaa00)'\n                          : `linear-gradient(to top, ${baseColor}, ${baseColor}dd)`,\n                        border: `1px solid ${glowColor}`,\n                        position: 'relative'\n                      }}\n                    >\n                      {/* Animated glow overlay */}\n                      <motion.div\n                        className=\"absolute inset-0 rounded-t-lg\"\n                        animate={{\n                          opacity: [0.3, 0.6, 0.3]\n                        }}\n                        transition={{\n                          duration: 1.5,\n                          repeat: Infinity,\n                          ease: 'easeInOut'\n                        }}\n                        style={{\n                          background: `linear-gradient(to top, transparent, ${glowColor}40)`\n                        }}\n                      />\n\n                      {/* Value label */}\n                      {arraySize[0] <= 30 && (\n                        <motion.div\n                          initial={{ opacity: 0 }}\n                          animate={{ opacity: 1 }}\n                          className=\"absolute -top-6 left-1/2 transform -translate-x-1/2 text-xs font-mono font-bold whitespace-nowrap\"\n                          style={{\n                            color: glowColor,\n                            textShadow: `0 0 10px ${glowColor}`\n                          }}\n                        >\n                          {element.value}\n                        </motion.div>\n                      )}\n\n                      {/* Swap trail effect */}\n                      {element.isSwapping && (\n                        <motion.div\n                          className=\"absolute inset-0 rounded-t-lg\"\n                          initial={{ opacity: 0 }}\n                          animate={{\n                            opacity: [0, 1, 0],\n                            scale: [1, 1.2, 1]\n                          }}\n                          transition={{\n                            duration: 0.6,\n                            repeat: Infinity\n                          }}\n                          style={{\n                            background: `radial-gradient(circle, ${glowColor}80, transparent)`,\n                            filter: 'blur(8px)'\n                          }}\n                        />\n                      )}\n                    </motion.div>\n                  );\n                })}\n              </div>\n            </div>\n\n            <motion.div\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ delay: 0.4 }}\n              className=\"mt-6\"\n            >\n              <div className=\"bg-gray-900/50 backdrop-blur-lg border border-purple-500/30 rounded-xl p-4 shadow-lg shadow-purple-500/10\">\n                <div className=\"flex items-center justify-between mb-2\">\n                  <span className=\"text-sm font-semibold text-purple-400 uppercase tracking-wider\">\n                    Sorting Progress\n                  </span>\n                  <span className=\"text-lg font-bold text-cyan-400\">\n                    {steps.length > 0 ? Math.round((currentStep / (steps.length - 1)) * 100) : 0}%\n                  </span>\n                </div>\n                \n                <div className=\"relative h-3 bg-gray-800/80 rounded-full overflow-hidden border border-purple-500/20\">\n                  <motion.div\n                    className=\"absolute inset-y-0 left-0 bg-gradient-to-r from-cyan-500 via-purple-500 to-pink-500 rounded-full\"\n                    initial={{ width: '0%' }}\n                    animate={{ \n                      width: steps.length > 0 ? `${(currentStep / (steps.length - 1)) * 100}%` : '0%'\n                    }}\n                    transition={{ duration: 0.3, ease: 'easeOut' }}\n                    style={{\n                      boxShadow: '0 0 20px rgba(168, 85, 247, 0.8), 0 0 40px rgba(34, 211, 238, 0.6)'\n                    }}\n                  />\n                  \n                  <motion.div\n                    className=\"absolute inset-0 bg-gradient-to-r from-transparent via-white/30 to-transparent\"\n                    animate={{ \n                      x: ['-100%', '200%'],\n                      opacity: steps.length > 0 && currentStep < steps.length - 1 ? [0.5, 1, 0.5] : 0\n                    }}\n                    transition={{ \n                      x: { duration: 1.5, repeat: Infinity, ease: 'linear' },\n                      opacity: { duration: 1.5, repeat: Infinity }\n                    }}\n                    style={{ width: '50%' }}\n                  />\n                </div>\n                \n                <div className=\"flex items-center justify-between mt-2 text-xs text-gray-400\">\n                  <span>Step {currentStep + 1} of {steps.length || 1}</span>\n                  <span className=\"flex items-center gap-1\">\n                    {currentStep >= steps.length - 1 && steps.length > 0 && (\n                      <motion.span\n                        initial={{ scale: 0 }}\n                        animate={{ scale: 1 }}\n                        className=\"text-green-400 font-semibold\"\n                      >\n                        \u2713 Complete\n                      </motion.span>\n                    )}\n                  </span>\n                </div>\n              </div>\n            </motion.div>\n          </div>\n        </div>\n\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ delay: 0.4, duration: 0.6 }}\n          className=\"bg-gray-900/50 backdrop-blur-lg border border-purple-500/30 rounded-xl p-6 shadow-2xl shadow-purple-500/20\"\n        >\n          <div className=\"flex items-center justify-center gap-8 flex-wrap\">\n            <div className=\"flex items-center gap-2\">\n              <motion.div\n                className=\"w-6 h-6 rounded border-2 border-cyan-400 bg-cyan-500/20\"\n                animate={{\n                  boxShadow: [\n                    '0 0 10px rgba(34, 211, 238, 0.5)',\n                    '0 0 20px rgba(34, 211, 238, 0.8)',\n                    '0 0 10px rgba(34, 211, 238, 0.5)'\n                  ]\n                }}\n                transition={{ duration: 1.5, repeat: Infinity }}\n              />\n              <span className=\"text-cyan-300 text-sm font-medium\">Comparing</span>\n            </div>\n\n            <div className=\"flex items-center gap-2\">\n              <motion.div\n                className=\"w-6 h-6 rounded border-2 border-pink-400 bg-pink-500/20\"\n                animate={{\n                  boxShadow: [\n                    '0 0 10px rgba(236, 72, 153, 0.5)',\n                    '0 0 20px rgba(236, 72, 153, 0.8)',\n                    '0 0 10px rgba(236, 72, 153, 0.5)'\n                  ]\n                }}\n                transition={{ duration: 1.5, repeat: Infinity, delay: 0.3 }}\n              />\n              <span className=\"text-pink-300 text-sm font-medium\">Swapping</span>\n            </div>\n\n            <div className=\"flex items-center gap-2\">\n              <motion.div\n                className=\"w-6 h-6 rounded border-2 border-green-400 bg-green-500/20\"\n                animate={{\n                  boxShadow: [\n                    '0 0 10px rgba(34, 197, 94, 0.5)',\n                    '0 0 20px rgba(34, 197, 94, 0.8)',\n                    '0 0 10px rgba(34, 197, 94, 0.5)'\n                  ]\n                }}\n                transition={{ duration: 1.5, repeat: Infinity, delay: 0.6 }}\n              />\n              <span className=\"text-green-300 text-sm font-medium\">Sorted</span>\n            </div>\n\n            <div className=\"flex items-center gap-2\">\n              <motion.div\n                className=\"w-6 h-6 rounded border border-purple-400/50 bg-gradient-to-br from-purple-500/30 to-cyan-500/30\"\n                animate={{\n                  boxShadow: [\n                    '0 0 8px rgba(168, 85, 247, 0.3)',\n                    '0 0 15px rgba(168, 85, 247, 0.5)',\n                    '0 0 8px rgba(168, 85, 247, 0.3)'\n                  ]\n                }}\n                transition={{ duration: 1.5, repeat: Infinity, delay: 0.9 }}\n              />\n              <span className=\"text-purple-300 text-sm font-medium\">Unsorted</span>\n            </div>\n          </div>\n        </motion.div>\n      </div>\n    </div>\n  );\n}",
    "error": null,
    "elapsed_time": 89.37945342063904,
    "success": true
  }
}