{
  "prompt_id": "dashboard",
  "prompt_name": "Analytics Dashboard",
  "mode": "parallel",
  "run_number": 39,
  "timestamp": "2025-10-14T03:00:51.606714",
  "response_time": 84.3402931690216,
  "total_tokens": null,
  "response_content": "s */}\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}import { useState, useCallback } from 'react';\n\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Moon, Sun, RefreshCw } from 'lucide-react';\n\nimport { TrendingUp, TrendingDown, DollarSign, Users, ShoppingCart, Target, CheckCircle, AlertCircle, Clock } from 'lucide-react';\nimport { AreaChart, Area, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, Legend } from 'recharts';\nimport { PieChart, Pie, Cell, Legend, ResponsiveContainer, Tooltip as RechartsTooltip } from 'recharts';\n\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';\nimport { AreaChart, Area, BarChart, Bar, PieChart, Pie, Cell } from 'recharts';\nimport { ShoppingCart, Target, Activity, Zap } from 'lucide-react';\nimport { motion } from 'framer-motion';\n\n\nimport { TrendingUp, TrendingDown, DollarSign, Users, hoppingCart, Target } from 'lucide-react';\nimport { motion } from 'framer-motion';\n\ninterface MetricData {\n  id: string;\n  label: string;\n  value: number;\n  change: number;\n  trend: 'up' | 'down';\n}\n\ninterface ChartDataPoint {\n  date: string;\n  revenue: number;\n  users: number;\n  orders: number;\n}\n\ninterface TableRow {\n  id: string;\n  product: string;\n  sales: number;\n  revenue: number;\n  status: 'active' | 'pending' | 'inactive';\n}\n\nconst mockMetrics: MetricData[] = [\n  { id: '1', label: 'Total Revenue', value: 45231, change: 12.5, trend: 'up' },\n  { id: '2', label: 'Active Users', value: 2350, change: 8.2, trend: 'up' },\n  { id: '3', label: 'Total Orders', value: 1543, change: -3.1, trend: 'down' },\n  { id: '4', label: 'Conversion Rate', value: 3.24, change: 5.7, trend: 'up' }\n];\n\nconst mockChartData: ChartDataPoint[] = [\n  { date: '2024-01-01', revenue: 12000, users: 450, orders: 230 },\n  { date: '2024-01-02', revenue: 15000, users: 520, orders: 280 },\n  { date: '2024-01-03', revenue: 13500, users: 490, orders: 250 },\n  { date: '2024-01-04', revenue: 18000, users: 610, orders: 320 },\n  { date: '2024-01-05', revenue: 16500, users: 580, orders: 295 },\n  { date: '2024-01-06', revenue: 20000, users: 680, orders: 350 },\n  { date: '2024-01-07', revenue: 22000, users: 720, orders: 380 }\n];\n\nconst mockTableData: TableRow[] = [\n  { id: '1', product: 'Premium Plan', sales: 234, revenue: 23400, status: 'active' },\n  { id: '2', product: 'Basic Plan', sales: 567, revenue: 11340, status: 'active' },\n  { id: '3', product: 'Enterprise Plan', sales: 89, revenue: 44500, status: 'active' },\n  { id: '4', product: 'Starter Plan', sales: 432, revenue: 4320, status: 'pending' },\n  { id: '5', product: 'Pro Plan', sales: 156, revenue: 15600, status: 'inactive' }\n];\ninterface QuickStatData {\n  id: string;\n  label: string;\n  value: string;\n  change: number;\n  sparklineData: { value: number }[];\n  icon: 'revenue' | 'users' | 'orders' | 'conversion';\n}\n\nconst mockQuickStats: QuickStatData[] = [\n  {\n    id: '1',\n    label: 'Revenue',\n    value: '$45.2K',\n    change: 12.5,\n    sparklineData: [\n      { value: 30 }, { value: 40 }, { value: 35 }, { value: 50 }, { value: 49 }, { value: 60 }, { value: 70 }\n    ],\n    icon: 'revenue'\n  },\n  {\n    id: '2',\n    label: 'Users',\n    value: '2,350',\n    change: 8.2,\n    sparklineData: [\n      { value: 20 }, { value: 35 }, { value: 30 }, { value: 45 }, { value: 50 }, { value: 55 }, { value: 65 }\n    ],\n    icon: 'users'\n  },\n  {\n    id: '3',\n    label: 'Orders',\n    value: '1,543',\n    change: -3.1,\n    sparklineData: [\n      { value: 60 }, { value: 55 }, { value: 50 }, { value: 45 }, { value: 48 }, { value: 42 }, { value: 40 }\n    ],\n    icon: 'orders'\n  },\n  {\n    id: '4',\n    label: 'Conversion',\n    value: '3.24%',\n    change: 5.7,\n    sparklineData: [\n      { value: 25 }, { value: 30 }, { value: 28 }, { value: 40 }, { value: 45 }, { value: 50 }, { value: 55 }\n    ],\n    icon: 'conversion'\n  }\n];\n\ninterface ActivityItem {\n  id: string;\n  type: 'success' | 'warning' | 'info';\n  message: string;\n  timestamp: string;\n  icon: 'check' | 'alert' | 'clock';\n}\n\nconst mockActivityData: ActivityItem[] = [\n  { id: '1', type: 'success', message: 'New order received', timestamp: '2 min ago', icon: 'check' },\n  { id: '2', type: 'info', message: 'User registration completed', timestamp: '15 min ago', icon: 'clock' },\n  { id: '3', type: 'success', message: 'Payment processed', timestamp: '1 hour ago', icon: 'check' },\n  { id: '4', type: 'warning', message: 'Low stock alert', timestamp: '2 hours ago', icon: 'alert' },\n  { id: '5', type: 'success', message: 'Report generated', timestamp: '3 hours ago', icon: 'check' }\n];\nconst pieChartData = [\n  { name: 'Premium Plan', value: 234, color: '#3b82f6' },\n  { name: 'Basic Plan', value: 567, color: '#10b981' },\n  { name: 'Enterprise Plan', value: 89, color: '#f59e0b' },\n  { name: 'Starter Plan', value: 432, color: '#8b5cf6' },\n  { name: 'Pro Plan', value: 156, color: '#ec4899' }\n];\n\nexport default function AnalyticsDashboard() {\n\n  const [isDarkMode, setIsDarkMode] = useState(false);\n  const [metrics, setMetrics] = useState<MetricData[]>(mockMetrics);\n  const [chartData, setChartData] = useState<ChartDataPoint[]>(mockChartData);\n  const [tableData, setTableData] = useState<TableRow[]>(mockTableData);\n  const [isRefreshing, setIsRefreshing] = useState(false);\n  const [quickStats, setQuickStats] = useState<QuickStatData[]>(mockQuickStats);\n\n  const getStatIcon = (iconType: string) => {\n    switch (iconType) {\n      case 'revenue':\n        return <DollarSign className=\"h-5 w-5\" />;\n      case 'users':\n        return <Users className=\"h-5 w-5\" />;\n      case 'orders':\n        return <ShoppingCart className=\"h-5 w-5\" />;\n      case 'conversion':\n        return <Target className=\"h-5 w-5\" />;\n      default:\n        return <Activity className=\"h-5 w-5\" />;\n    }\n  };\n\n  const toggleDarkMode = useCallback(() => {\n    setIsDarkMode(prev => !prev);\n  }, []);\n\n  const handleRefresh = useCallback(() => {\n    setIsRefreshing(true);\n    \n    setTimeout(() => {\n      // Generate updated mock metrics with random variations\n      const updatedMetrics = mockMetrics.map(metric => ({\n        ...metric,\n        value: metric.value + Math.floor(Math.random() * 200 - 100),\n        change: parseFloat((Math.random() * 20 - 5).toFixed(1)),\n        trend: Math.random() > 0.5 ? 'up' as const : 'down' as const\n      }));\n\n      // Generate updated chart data with random variations\n      const updatedChartData = mockChartData.map(point => ({\n        ...point,\n        revenue: point.revenue + Math.floor(Math.random() * 4000 - 2000),\n        users: point.users + Math.floor(Math.random() * 100 - 50),\n        orders: point.orders + Math.floor(Math.random() * 50 - 25)\n      }));\n\n      // Generate updated table data with random variations\n      const updatedTableData = mockTableData.map(row => ({\n        ...row,\n        sales: row.sales + Math.floor(Math.random() * 40 - 20),\n        revenue: row.revenue + Math.floor(Math.random() * 2000 - 1000)\n      }));\n\n      // Generate updated quick stats with random variations\n      const updatedQuickStats = mockQuickStats.map(stat => ({\n        ...stat,\n        change: parseFloat((Math.random() * 20 - 5).toFixed(1)),\n        sparklineData: stat.sparklineData.map(point => ({\n          value: Math.max(10, point.value + Math.floor(Math.random() * 20 - 10))\n        }))\n      }));\n\n      setMetrics(updatedMetrics);\n      setChartData(updatedChartData);\n      setTableData(updatedTableData);\n      setQuickStats(updatedQuickStats);\n      setIsRefreshing(false);\n    }, 1500);</parameter>\n\n</invoke>r(Math.random() * 2000 - 1000)\n      }));\n\n      setMetrics(updatedMetrics);\n      setChartData(updatedChartData);\n      setTableData(updatedTableData);\n      setIsRefreshing(false);\n    }, 1500);\n  }, []);\n\n  return (\n    <div className={`min-h-screen ${isDarkMode ? 'dark bg-gray-900' : 'bg-gray-50'}`}>\n      <div className=\"container mx-auto p-4 md:p-6 lg:p-8\">\n        <div className=\"flex flex-col md:flex-row justify-between items-start md:items-center gap-4 mb-8\">\n          <div>\n            <h1 className={`text-3xl md:text-4xl font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n              Analytics Dashboard\n            </h1>\n            <p className={`mt-2 ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n              Real-time insights and performance metrics\n            </p>\n          </div>\n          \n          <div className=\"flex gap-2\">\n            <Button\n              variant=\"outline\"\n              size=\"icon\"\n              onClick={toggleDarkMode}\n              className={isDarkMode ? 'border-gray-700' : ''}\n            >\n              {isDarkMode ? <Sun className=\"h-5 w-5\" /> : <Moon className=\"h-5 w-5\" />}\n            </Button>\n            \n            <Button\n              variant=\"outline\"\n              onClick={handleRefresh}\n              disabled={isRefreshing}\n              className={isDarkMode ? 'border-gray-700' : ''}\n            >\n              <RefreshCw className={`h-4 w-4 mr-2 ${isRefreshing ? 'animate-spin' : ''}`} />\n              Refresh\n            </Button>\n          </div>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 md:gap-6 mb-8\">\n          {metrics.map((metric, index) => {\n            const Icon = metric.label.includes('Revenue') ? DollarSign :\n                        metric.label.includes('Users') ? Users :\n                        metric.label.includes('Orders') ? ShoppingCart : Target;\n            \n            const TrendIcon = metric.trend === 'up' ? TrendingUp : TrendingDown;\n            \n            return (\n              <motion.div\n                key={metric.id}\n                initial={{ opacity: 0, y: 20 }}\n                animate={{ opacity: 1, y: 0 }}\n                transition={{ duration: 0.4, delay: index * 0.1 }}\n              >\n                <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n                  <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                    <CardTitle className={`text-sm font-medium ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                      {metric.label}\n                    </CardTitle>\n                    <Icon className={`h-4 w-4 ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`} />\n                  </CardHeader>\n                  <CardContent>\n                    <div className={`text-2xl font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                      {metric.label.includes('Rate') ? `${metric.value}%` : \n                       metric.label.includes('Revenue') ? `$${metric.value.toLocaleString()}` : \n                       metric.value.toLocaleString()}\n                    </div>\n                    <div className=\"flex items-center mt-2\">\n                      <TrendIcon \n                        className={`h-4 w-4 mr-1 ${\n                          metric.trend === 'up' ? 'text-green-500' : 'text-red-500'\n                        }`} \n                      />\n                      <span className={`text-sm font-medium ${\n                        metric.trend === 'up' ? 'text-green-500' : 'text-red-500'\n                      }`}>\n                        {Math.abs(metric.change)}%\n                      </span>\n                      <span className={`text-sm ml-1 ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                        vs last period\n                      </span>\n                    </div>\n                  </CardContent>\n                </Card>\n              </motion.div>\n            );\n          })}\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-4 md:gap-6 mb-8\">\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Revenue Overview</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Daily revenue trends\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <ResponsiveContainer width=\"100%\" height={300}>\n                <LineChart data={chartData}>\n                  <CartesianGrid \n                    strokeDasharray=\"3 3\" \n                    stroke={isDarkMode ? '#374151' : '#e5e7eb'} \n                  />\n                  <XAxis \n                    dataKey=\"date\" \n                    stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                    tick={{ fill: isDarkMode ? '#9ca3af' : '#6b7280' }}\n                    tickFormatter={(value) => new Date(value).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n                  />\n                  <YAxis \n                    stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                    tick={{ fill: isDarkMode ? '#9ca3af' : '#6b7280' }}\n                    tickFormatter={(value) => `$${(value / 1000).toFixed(0)}k`}\n                  />\n                  <Tooltip \n                    contentStyle={{\n                      backgroundColor: isDarkMode ? '#1f2937' : '#ffffff',\n                      border: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\n                      borderRadius: '6px',\n                      color: isDarkMode ? '#ffffff' : '#000000'\n                    }}\n                    labelStyle={{ color: isDarkMode ? '#9ca3af' : '#6b7280' }}\n                    formatter={(value: number) => [`$${value.toLocaleString()}`, 'Revenue']}\n                    labelFormatter={(label) => new Date(label).toLocaleDateString('en-US', { month: 'long', day: 'numeric', year: 'numeric' })}\n                  />\n                  <Line \n                    type=\"monotone\" \n                    dataKey=\"revenue\" \n                    stroke=\"#3b82f6\" \n                    strokeWidth={2}\n                    dot={{ fill: '#3b82f6', r: 4 }}\n                    activeDot={{ r: 6 }}\n                  />\n                </LineChart>\n              </ResponsiveContainer>\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>User Growth</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Active users over time\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"h-[300px] w-full\">\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <AreaChart\n                    data={chartData}\n                    margin={{ top: 10, right: 10, left: 0, bottom: 0 }}\n                  >\n                    <defs>\n                      <linearGradient id=\"userGradient\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                        <stop offset=\"5%\" stopColor=\"#8b5cf6\" stopOpacity={0.8} />\n                        <stop offset=\"95%\" stopColor=\"#8b5cf6\" stopOpacity={0.1} />\n                      </linearGradient>\n                    </defs>\n                    <CartesianGrid \n                      strokeDasharray=\"3 3\" \n                      stroke={isDarkMode ? '#374151' : '#e5e7eb'}\n                      opacity={0.5}\n                    />\n                    <XAxis\n                      dataKey=\"date\"\n                      tickFormatter={(value) => new Date(value).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n                      stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                      style={{ fontSize: '12px' }}\n                    />\n                    <YAxis\n                      stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                      style={{ fontSize: '12px' }}\n                    />\n                    <Tooltip\n                      contentStyle={{\n                        backgroundColor: isDarkMode ? '#1f2937' : '#ffffff',\n                        border: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\n                        borderRadius: '8px',\n                        color: isDarkMode ? '#ffffff' : '#000000'\n                      }}\n                      labelFormatter={(value) => new Date(value).toLocaleDateString('en-US', { month: 'long', day: 'numeric', year: 'numeric' })}\n                      formatter={(value: number) => [value.toLocaleString(), 'Users']}\n                    />\n                    <Area\n                      type=\"monotone\"\n                      dataKey=\"users\"\n                      stroke=\"#8b5cf6\"\n                      strokeWidth={2}\n                      fill=\"url(#userGradient)\"\n                      animationDuration={1500}\n                      animationEasing=\"ease-in-out\"\n                    />\n                  </AreaChart>\n                </ResponsiveContainer>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-4 md:gap-6 mb-8\">\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Orders Distribution</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                By product category\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <ResponsiveContainer width=\"100%\" height={300}>\n                <PieChart>\n                  <Pie\n                    data={pieChartData}\n                    cx=\"50%\"\n                    cy=\"50%\"\n                    labelLine={false}\n                    label={({ name, percent }) => `${name}: ${(percent * 100).toFixed(0)}%`}\n                    outerRadius={80}\n                    fill=\"#8884d8\"\n                    dataKey=\"value\"\n                    animationBegin={0}\n                    animationDuration={800}\n                  >\n                    {pieChartData.map((entry, index) => (\n                      <Cell key={`cell-${index}`} fill={entry.color} />\n                    ))}\n                  </Pie>\n                  <RechartsTooltip\n                    contentStyle={{\n                      backgroundColor: isDarkMode ? '#1f2937' : '#ffffff',\n                      border: isDarkMode ? '1px solid #374151' : '1px solid #e5e7eb',\n                      borderRadius: '6px',\n                      color: isDarkMode ? '#ffffff' : '#000000'\n                    }}\n                    formatter={(value: number) => [`${value} orders`, 'Orders']}\n                  />\n                  <Legend\n                    verticalAlign=\"bottom\"\n                    height={36}\n                    iconType=\"circle\"\n                    wrapperStyle={{\n                      color: isDarkMode ? '#9ca3af' : '#4b5563'\n                    }}\n                  />\n                </PieChart>\n              </ResponsiveContainer>\n            </CardContent>\n          </Card>\n\n          <Card className={`lg:col-span-2 ${isDarkMode ? 'bg-gray-800 border-gray-700' : ''}`}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Performance Metrics</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Combined view of key indicators\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <ResponsiveContainer width=\"100%\" height={300}>\n                <BarChart data={chartData}>\n                  <CartesianGrid \n                    strokeDasharray=\"3 3\" \n                    stroke={isDarkMode ? '#374151' : '#e5e7eb'}\n                  />\n                  <XAxis \n                    dataKey=\"date\" \n                    stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                    tick={{ fill: isDarkMode ? '#9ca3af' : '#6b7280' }}\n                    tickFormatter={(value) => new Date(value).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n                  />\n                  <YAxis \n                    stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                    tick={{ fill: isDarkMode ? '#9ca3af' : '#6b7280' }}\n                  />\n                  <Tooltip \n                    contentStyle={{\n                      backgroundColor: isDarkMode ? '#1f2937' : '#ffffff',\n                      border: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\n                      borderRadius: '8px',\n                      color: isDarkMode ? '#f3f4f6' : '#111827'\n                    }}\n                    labelStyle={{ color: isDarkMode ? '#f3f4f6' : '#111827' }}\n                    formatter={(value: number) => value.toLocaleString()}\n                    labelFormatter={(label) => new Date(label).toLocaleDateString('en-US', { month: 'long', day: 'numeric', year: 'numeric' })}\n                  />\n                  <Legend \n                    wrapperStyle={{ color: isDarkMode ? '#9ca3af' : '#6b7280' }}\n                  />\n                  <Bar \n                    dataKey=\"revenue\" \n                    fill=\"#3b82f6\" \n                    radius={[4, 4, 0, 0]}\n                    name=\"Revenue ($)\"\n                  />\n                  <Bar \n                    dataKey=\"users\" \n                    fill=\"#10b981\" \n                    radius={[4, 4, 0, 0]}\n                    name=\"Users\"\n                  />\n                  <Bar \n                    dataKey=\"orders\" \n                    fill=\"#f59e0b\" \n                    radius={[4, 4, 0, 0]}\n                    name=\"Orders\"\n                  />\n                </BarChart>\n              </ResponsiveContainer>\n            </CardContent>\n          </Card>\n        </div>\n\n        <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n          <CardHeader>\n            <CardTitle className={isDarkMode ? 'text-white' : ''}>Top Products</CardTitle>\n            <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n              Best performing products by revenue\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              <div className=\"overflow-x-auto\">\n                <Table>\n                  <TableHeader>\n                    <TableRow className={isDarkMode ? 'border-gray-700' : ''}>\n                      <TableHead className={isDarkMode ? 'text-gray-300' : ''}>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => handleSort('product')}\n                          className={`-ml-3 h-8 ${isDarkMode ? 'hover:bg-gray-700' : ''}`}\n                        >\n                          Product\n                          <ArrowUpDown className=\"ml-2 h-4 w-4\" />\n                        </Button>\n                      </TableHead>\n                      <TableHead className={isDarkMode ? 'text-gray-300' : ''}>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => handleSort('sales')}\n                          className={`-ml-3 h-8 ${isDarkMode ? 'hover:bg-gray-700' : ''}`}\n                        >\n                          Sales\n                          <ArrowUpDown className=\"ml-2 h-4 w-4\" />\n                        </Button>\n                      </TableHead>\n                      <TableHead className={isDarkMode ? 'text-gray-300' : ''}>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => handleSort('revenue')}\n                          className={`-ml-3 h-8 ${isDarkMode ? 'hover:bg-gray-700' : ''}`}\n                        >\n                          Revenue\n                          <ArrowUpDown className=\"ml-2 h-4 w-4\" />\n                        </Button>\n                      </TableHead>\n                      <TableHead className={isDarkMode ? 'text-gray-300' : ''}>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => handleSort('status')}\n                          className={`-ml-3 h-8 ${isDarkMode ? 'hover:bg-gray-700' : ''}`}\n                        >\n                          Status\n                          <ArrowUpDown className=\"ml-2 h-4 w-4\" />\n                        </Button>\n                      </TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {paginatedData.map((row) => (\n                      <TableRow \n                        key={row.id}\n                        className={isDarkMode ? 'border-gray-700 hover:bg-gray-700/50' : 'hover:bg-gray-50'}\n                      >\n                        <TableCell className={`font-medium ${isDarkMode ? 'text-white' : ''}`}>\n                          {row.product}\n                        </TableCell>\n                        <TableCell className={isDarkMode ? 'text-gray-300' : ''}>\n                          {row.sales.toLocaleString()}\n                        </TableCell>\n                        <TableCell className={isDarkMode ? 'text-gray-300' : ''}>\n                          ${row.revenue.toLocaleString()}\n                        </TableCell>\n                        <TableCell>\n                          <Badge \n                            variant={getStatusBadgeVariant(row.status)}\n                            className={`capitalize ${getStatusColor(row.status)} ${isDarkMode ? 'border' : ''}`}\n                          >\n                            {row.status}\n                          </Badge>\n                        </TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              </div>\n\n              <div className=\"flex flex-col sm:flex-row items-center justify-between gap-4 pt-4\">\n                <p className={`text-sm ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                  Showing {((currentPage - 1) * itemsPerPage) + 1} to {Math.min(currentPage * itemsPerPage, sortedTableData.length)} of {sortedTableData.length} products\n                </p>\n                \n                <div className=\"flex items-center gap-2\">\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => setCurrentPage(prev => Math.max(1, prev - 1))}\n                    disabled={currentPage === 1}\n                    className={isDarkMode ? 'border-gray-700' : ''}\n                  >\n                    <ChevronLeft className=\"h-4 w-4 mr-1\" />\n                    Previous\n                  </Button>\n                  \n                  <div className=\"flex items-center gap-1\">\n                    {Array.from({ length: totalPages }, (_, i) => i + 1).map((page) => (\n                      <Button\n                        key={page}\n                        variant={currentPage === page ? 'default' : 'outline'}\n                        size=\"sm\"\n                        onClick={() => setCurrentPage(page)}\n                        className={`w-8 h-8 p-0 ${isDarkMode && currentPage !== page ? 'border-gray-700' : ''}`}\n                      >\n                        {page}\n                      </Button>\n                    ))}\n                  </div>\n                  \n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => setCurrentPage(prev => Math.min(totalPages, prev + 1))}\n                    disabled={currentPage === totalPages}\n                    className={isDarkMode ? 'border-gray-700' : ''}\n                  >\n                    Next\n                    <ChevronRight className=\"h-4 w-4 ml-1\" />\n                  </Button>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 md:gap-6 mt-8\">\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Recent Activity</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {mockActivityData.map((activity, index) => {\n                  const Icon = activity.icon === 'check' ? CheckCircle : activity.icon === 'alert' ? AlertCircle : Clock;\n                  const iconColor = activity.type === 'success' ? 'text-green-500' : activity.type === 'warning' ? 'text-yellow-500' : 'text-blue-500';\n                  const bgColor = activity.type === 'success' ? 'bg-green-100 dark:bg-green-900/20' : activity.type === 'warning' ? 'bg-yellow-100 dark:bg-yellow-900/20' : 'bg-blue-100 dark:bg-blue-900/20';\n                  \n                  return (\n                    <div\n                      key={activity.id}\n                      className=\"flex items-start gap-3 animate-in fade-in slide-in-from-left-5\"\n                      style={{ animationDelay: `${index * 100}ms`, animationFillMode: 'backwards' }}\n                    >\n                      <div className={`p-2 rounded-full ${bgColor} flex-shrink-0`}>\n                        <Icon className={`h-4 w-4 ${iconColor}`} />\n                      </div>\n                      <div className=\"flex-1 min-w-0\">\n                        <p className={`text-sm font-medium ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                          {activity.message}\n                        </p>\n                        <p className={`text-xs mt-1 ${isDarkMode ? 'text-gray-400' : 'text-gray-500'}`}>\n                          {activity.timestamp}\n                        </p>\n                      </div>\n                    </div>\n                  );\n                })}\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Quick Stats</CardTitle>\n            </CardHeader>\n            <CardContent>\n              {/* TODO:QuickStats Render mini stat cards with sparklines and percentage changes */}\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Alerts</CardTitle>\n            </CardHeader>\n            <CardContent>\n              {/* TODO:AlertsList Render alert notifications with severity levels and dismiss action",
  "error": null,
  "overall_score": 44,
  "code_quality_score": 10,
  "architecture_score": 8,
  "performance_score": 12,
  "accessibility_score": 14,
  "metadata": {
    "document_id": "eval_room_ed859c82a9ab",
    "prompt_category": "intermediate",
    "prompt_complexity": 6.0
  },
  "raw_response": {
    "document_id": "eval_room_ed859c82a9ab",
    "mode": "parallel",
    "prompt": "Generate an analytics dashboard page with charts, data tables, real-time updates, dark mode, and responsive design",
    "content": "s */}\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}import { useState, useCallback } from 'react';\n\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Moon, Sun, RefreshCw } from 'lucide-react';\n\nimport { TrendingUp, TrendingDown, DollarSign, Users, ShoppingCart, Target, CheckCircle, AlertCircle, Clock } from 'lucide-react';\nimport { AreaChart, Area, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, Legend } from 'recharts';\nimport { PieChart, Pie, Cell, Legend, ResponsiveContainer, Tooltip as RechartsTooltip } from 'recharts';\n\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';\nimport { AreaChart, Area, BarChart, Bar, PieChart, Pie, Cell } from 'recharts';\nimport { ShoppingCart, Target, Activity, Zap } from 'lucide-react';\nimport { motion } from 'framer-motion';\n\n\nimport { TrendingUp, TrendingDown, DollarSign, Users, hoppingCart, Target } from 'lucide-react';\nimport { motion } from 'framer-motion';\n\ninterface MetricData {\n  id: string;\n  label: string;\n  value: number;\n  change: number;\n  trend: 'up' | 'down';\n}\n\ninterface ChartDataPoint {\n  date: string;\n  revenue: number;\n  users: number;\n  orders: number;\n}\n\ninterface TableRow {\n  id: string;\n  product: string;\n  sales: number;\n  revenue: number;\n  status: 'active' | 'pending' | 'inactive';\n}\n\nconst mockMetrics: MetricData[] = [\n  { id: '1', label: 'Total Revenue', value: 45231, change: 12.5, trend: 'up' },\n  { id: '2', label: 'Active Users', value: 2350, change: 8.2, trend: 'up' },\n  { id: '3', label: 'Total Orders', value: 1543, change: -3.1, trend: 'down' },\n  { id: '4', label: 'Conversion Rate', value: 3.24, change: 5.7, trend: 'up' }\n];\n\nconst mockChartData: ChartDataPoint[] = [\n  { date: '2024-01-01', revenue: 12000, users: 450, orders: 230 },\n  { date: '2024-01-02', revenue: 15000, users: 520, orders: 280 },\n  { date: '2024-01-03', revenue: 13500, users: 490, orders: 250 },\n  { date: '2024-01-04', revenue: 18000, users: 610, orders: 320 },\n  { date: '2024-01-05', revenue: 16500, users: 580, orders: 295 },\n  { date: '2024-01-06', revenue: 20000, users: 680, orders: 350 },\n  { date: '2024-01-07', revenue: 22000, users: 720, orders: 380 }\n];\n\nconst mockTableData: TableRow[] = [\n  { id: '1', product: 'Premium Plan', sales: 234, revenue: 23400, status: 'active' },\n  { id: '2', product: 'Basic Plan', sales: 567, revenue: 11340, status: 'active' },\n  { id: '3', product: 'Enterprise Plan', sales: 89, revenue: 44500, status: 'active' },\n  { id: '4', product: 'Starter Plan', sales: 432, revenue: 4320, status: 'pending' },\n  { id: '5', product: 'Pro Plan', sales: 156, revenue: 15600, status: 'inactive' }\n];\ninterface QuickStatData {\n  id: string;\n  label: string;\n  value: string;\n  change: number;\n  sparklineData: { value: number }[];\n  icon: 'revenue' | 'users' | 'orders' | 'conversion';\n}\n\nconst mockQuickStats: QuickStatData[] = [\n  {\n    id: '1',\n    label: 'Revenue',\n    value: '$45.2K',\n    change: 12.5,\n    sparklineData: [\n      { value: 30 }, { value: 40 }, { value: 35 }, { value: 50 }, { value: 49 }, { value: 60 }, { value: 70 }\n    ],\n    icon: 'revenue'\n  },\n  {\n    id: '2',\n    label: 'Users',\n    value: '2,350',\n    change: 8.2,\n    sparklineData: [\n      { value: 20 }, { value: 35 }, { value: 30 }, { value: 45 }, { value: 50 }, { value: 55 }, { value: 65 }\n    ],\n    icon: 'users'\n  },\n  {\n    id: '3',\n    label: 'Orders',\n    value: '1,543',\n    change: -3.1,\n    sparklineData: [\n      { value: 60 }, { value: 55 }, { value: 50 }, { value: 45 }, { value: 48 }, { value: 42 }, { value: 40 }\n    ],\n    icon: 'orders'\n  },\n  {\n    id: '4',\n    label: 'Conversion',\n    value: '3.24%',\n    change: 5.7,\n    sparklineData: [\n      { value: 25 }, { value: 30 }, { value: 28 }, { value: 40 }, { value: 45 }, { value: 50 }, { value: 55 }\n    ],\n    icon: 'conversion'\n  }\n];\n\ninterface ActivityItem {\n  id: string;\n  type: 'success' | 'warning' | 'info';\n  message: string;\n  timestamp: string;\n  icon: 'check' | 'alert' | 'clock';\n}\n\nconst mockActivityData: ActivityItem[] = [\n  { id: '1', type: 'success', message: 'New order received', timestamp: '2 min ago', icon: 'check' },\n  { id: '2', type: 'info', message: 'User registration completed', timestamp: '15 min ago', icon: 'clock' },\n  { id: '3', type: 'success', message: 'Payment processed', timestamp: '1 hour ago', icon: 'check' },\n  { id: '4', type: 'warning', message: 'Low stock alert', timestamp: '2 hours ago', icon: 'alert' },\n  { id: '5', type: 'success', message: 'Report generated', timestamp: '3 hours ago', icon: 'check' }\n];\nconst pieChartData = [\n  { name: 'Premium Plan', value: 234, color: '#3b82f6' },\n  { name: 'Basic Plan', value: 567, color: '#10b981' },\n  { name: 'Enterprise Plan', value: 89, color: '#f59e0b' },\n  { name: 'Starter Plan', value: 432, color: '#8b5cf6' },\n  { name: 'Pro Plan', value: 156, color: '#ec4899' }\n];\n\nexport default function AnalyticsDashboard() {\n\n  const [isDarkMode, setIsDarkMode] = useState(false);\n  const [metrics, setMetrics] = useState<MetricData[]>(mockMetrics);\n  const [chartData, setChartData] = useState<ChartDataPoint[]>(mockChartData);\n  const [tableData, setTableData] = useState<TableRow[]>(mockTableData);\n  const [isRefreshing, setIsRefreshing] = useState(false);\n  const [quickStats, setQuickStats] = useState<QuickStatData[]>(mockQuickStats);\n\n  const getStatIcon = (iconType: string) => {\n    switch (iconType) {\n      case 'revenue':\n        return <DollarSign className=\"h-5 w-5\" />;\n      case 'users':\n        return <Users className=\"h-5 w-5\" />;\n      case 'orders':\n        return <ShoppingCart className=\"h-5 w-5\" />;\n      case 'conversion':\n        return <Target className=\"h-5 w-5\" />;\n      default:\n        return <Activity className=\"h-5 w-5\" />;\n    }\n  };\n\n  const toggleDarkMode = useCallback(() => {\n    setIsDarkMode(prev => !prev);\n  }, []);\n\n  const handleRefresh = useCallback(() => {\n    setIsRefreshing(true);\n    \n    setTimeout(() => {\n      // Generate updated mock metrics with random variations\n      const updatedMetrics = mockMetrics.map(metric => ({\n        ...metric,\n        value: metric.value + Math.floor(Math.random() * 200 - 100),\n        change: parseFloat((Math.random() * 20 - 5).toFixed(1)),\n        trend: Math.random() > 0.5 ? 'up' as const : 'down' as const\n      }));\n\n      // Generate updated chart data with random variations\n      const updatedChartData = mockChartData.map(point => ({\n        ...point,\n        revenue: point.revenue + Math.floor(Math.random() * 4000 - 2000),\n        users: point.users + Math.floor(Math.random() * 100 - 50),\n        orders: point.orders + Math.floor(Math.random() * 50 - 25)\n      }));\n\n      // Generate updated table data with random variations\n      const updatedTableData = mockTableData.map(row => ({\n        ...row,\n        sales: row.sales + Math.floor(Math.random() * 40 - 20),\n        revenue: row.revenue + Math.floor(Math.random() * 2000 - 1000)\n      }));\n\n      // Generate updated quick stats with random variations\n      const updatedQuickStats = mockQuickStats.map(stat => ({\n        ...stat,\n        change: parseFloat((Math.random() * 20 - 5).toFixed(1)),\n        sparklineData: stat.sparklineData.map(point => ({\n          value: Math.max(10, point.value + Math.floor(Math.random() * 20 - 10))\n        }))\n      }));\n\n      setMetrics(updatedMetrics);\n      setChartData(updatedChartData);\n      setTableData(updatedTableData);\n      setQuickStats(updatedQuickStats);\n      setIsRefreshing(false);\n    }, 1500);</parameter>\n\n</invoke>r(Math.random() * 2000 - 1000)\n      }));\n\n      setMetrics(updatedMetrics);\n      setChartData(updatedChartData);\n      setTableData(updatedTableData);\n      setIsRefreshing(false);\n    }, 1500);\n  }, []);\n\n  return (\n    <div className={`min-h-screen ${isDarkMode ? 'dark bg-gray-900' : 'bg-gray-50'}`}>\n      <div className=\"container mx-auto p-4 md:p-6 lg:p-8\">\n        <div className=\"flex flex-col md:flex-row justify-between items-start md:items-center gap-4 mb-8\">\n          <div>\n            <h1 className={`text-3xl md:text-4xl font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n              Analytics Dashboard\n            </h1>\n            <p className={`mt-2 ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n              Real-time insights and performance metrics\n            </p>\n          </div>\n          \n          <div className=\"flex gap-2\">\n            <Button\n              variant=\"outline\"\n              size=\"icon\"\n              onClick={toggleDarkMode}\n              className={isDarkMode ? 'border-gray-700' : ''}\n            >\n              {isDarkMode ? <Sun className=\"h-5 w-5\" /> : <Moon className=\"h-5 w-5\" />}\n            </Button>\n            \n            <Button\n              variant=\"outline\"\n              onClick={handleRefresh}\n              disabled={isRefreshing}\n              className={isDarkMode ? 'border-gray-700' : ''}\n            >\n              <RefreshCw className={`h-4 w-4 mr-2 ${isRefreshing ? 'animate-spin' : ''}`} />\n              Refresh\n            </Button>\n          </div>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 md:gap-6 mb-8\">\n          {metrics.map((metric, index) => {\n            const Icon = metric.label.includes('Revenue') ? DollarSign :\n                        metric.label.includes('Users') ? Users :\n                        metric.label.includes('Orders') ? ShoppingCart : Target;\n            \n            const TrendIcon = metric.trend === 'up' ? TrendingUp : TrendingDown;\n            \n            return (\n              <motion.div\n                key={metric.id}\n                initial={{ opacity: 0, y: 20 }}\n                animate={{ opacity: 1, y: 0 }}\n                transition={{ duration: 0.4, delay: index * 0.1 }}\n              >\n                <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n                  <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                    <CardTitle className={`text-sm font-medium ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                      {metric.label}\n                    </CardTitle>\n                    <Icon className={`h-4 w-4 ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`} />\n                  </CardHeader>\n                  <CardContent>\n                    <div className={`text-2xl font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                      {metric.label.includes('Rate') ? `${metric.value}%` : \n                       metric.label.includes('Revenue') ? `$${metric.value.toLocaleString()}` : \n                       metric.value.toLocaleString()}\n                    </div>\n                    <div className=\"flex items-center mt-2\">\n                      <TrendIcon \n                        className={`h-4 w-4 mr-1 ${\n                          metric.trend === 'up' ? 'text-green-500' : 'text-red-500'\n                        }`} \n                      />\n                      <span className={`text-sm font-medium ${\n                        metric.trend === 'up' ? 'text-green-500' : 'text-red-500'\n                      }`}>\n                        {Math.abs(metric.change)}%\n                      </span>\n                      <span className={`text-sm ml-1 ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                        vs last period\n                      </span>\n                    </div>\n                  </CardContent>\n                </Card>\n              </motion.div>\n            );\n          })}\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-4 md:gap-6 mb-8\">\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Revenue Overview</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Daily revenue trends\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <ResponsiveContainer width=\"100%\" height={300}>\n                <LineChart data={chartData}>\n                  <CartesianGrid \n                    strokeDasharray=\"3 3\" \n                    stroke={isDarkMode ? '#374151' : '#e5e7eb'} \n                  />\n                  <XAxis \n                    dataKey=\"date\" \n                    stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                    tick={{ fill: isDarkMode ? '#9ca3af' : '#6b7280' }}\n                    tickFormatter={(value) => new Date(value).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n                  />\n                  <YAxis \n                    stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                    tick={{ fill: isDarkMode ? '#9ca3af' : '#6b7280' }}\n                    tickFormatter={(value) => `$${(value / 1000).toFixed(0)}k`}\n                  />\n                  <Tooltip \n                    contentStyle={{\n                      backgroundColor: isDarkMode ? '#1f2937' : '#ffffff',\n                      border: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\n                      borderRadius: '6px',\n                      color: isDarkMode ? '#ffffff' : '#000000'\n                    }}\n                    labelStyle={{ color: isDarkMode ? '#9ca3af' : '#6b7280' }}\n                    formatter={(value: number) => [`$${value.toLocaleString()}`, 'Revenue']}\n                    labelFormatter={(label) => new Date(label).toLocaleDateString('en-US', { month: 'long', day: 'numeric', year: 'numeric' })}\n                  />\n                  <Line \n                    type=\"monotone\" \n                    dataKey=\"revenue\" \n                    stroke=\"#3b82f6\" \n                    strokeWidth={2}\n                    dot={{ fill: '#3b82f6', r: 4 }}\n                    activeDot={{ r: 6 }}\n                  />\n                </LineChart>\n              </ResponsiveContainer>\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>User Growth</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Active users over time\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"h-[300px] w-full\">\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <AreaChart\n                    data={chartData}\n                    margin={{ top: 10, right: 10, left: 0, bottom: 0 }}\n                  >\n                    <defs>\n                      <linearGradient id=\"userGradient\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                        <stop offset=\"5%\" stopColor=\"#8b5cf6\" stopOpacity={0.8} />\n                        <stop offset=\"95%\" stopColor=\"#8b5cf6\" stopOpacity={0.1} />\n                      </linearGradient>\n                    </defs>\n                    <CartesianGrid \n                      strokeDasharray=\"3 3\" \n                      stroke={isDarkMode ? '#374151' : '#e5e7eb'}\n                      opacity={0.5}\n                    />\n                    <XAxis\n                      dataKey=\"date\"\n                      tickFormatter={(value) => new Date(value).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n                      stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                      style={{ fontSize: '12px' }}\n                    />\n                    <YAxis\n                      stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                      style={{ fontSize: '12px' }}\n                    />\n                    <Tooltip\n                      contentStyle={{\n                        backgroundColor: isDarkMode ? '#1f2937' : '#ffffff',\n                        border: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\n                        borderRadius: '8px',\n                        color: isDarkMode ? '#ffffff' : '#000000'\n                      }}\n                      labelFormatter={(value) => new Date(value).toLocaleDateString('en-US', { month: 'long', day: 'numeric', year: 'numeric' })}\n                      formatter={(value: number) => [value.toLocaleString(), 'Users']}\n                    />\n                    <Area\n                      type=\"monotone\"\n                      dataKey=\"users\"\n                      stroke=\"#8b5cf6\"\n                      strokeWidth={2}\n                      fill=\"url(#userGradient)\"\n                      animationDuration={1500}\n                      animationEasing=\"ease-in-out\"\n                    />\n                  </AreaChart>\n                </ResponsiveContainer>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-4 md:gap-6 mb-8\">\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Orders Distribution</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                By product category\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <ResponsiveContainer width=\"100%\" height={300}>\n                <PieChart>\n                  <Pie\n                    data={pieChartData}\n                    cx=\"50%\"\n                    cy=\"50%\"\n                    labelLine={false}\n                    label={({ name, percent }) => `${name}: ${(percent * 100).toFixed(0)}%`}\n                    outerRadius={80}\n                    fill=\"#8884d8\"\n                    dataKey=\"value\"\n                    animationBegin={0}\n                    animationDuration={800}\n                  >\n                    {pieChartData.map((entry, index) => (\n                      <Cell key={`cell-${index}`} fill={entry.color} />\n                    ))}\n                  </Pie>\n                  <RechartsTooltip\n                    contentStyle={{\n                      backgroundColor: isDarkMode ? '#1f2937' : '#ffffff',\n                      border: isDarkMode ? '1px solid #374151' : '1px solid #e5e7eb',\n                      borderRadius: '6px',\n                      color: isDarkMode ? '#ffffff' : '#000000'\n                    }}\n                    formatter={(value: number) => [`${value} orders`, 'Orders']}\n                  />\n                  <Legend\n                    verticalAlign=\"bottom\"\n                    height={36}\n                    iconType=\"circle\"\n                    wrapperStyle={{\n                      color: isDarkMode ? '#9ca3af' : '#4b5563'\n                    }}\n                  />\n                </PieChart>\n              </ResponsiveContainer>\n            </CardContent>\n          </Card>\n\n          <Card className={`lg:col-span-2 ${isDarkMode ? 'bg-gray-800 border-gray-700' : ''}`}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Performance Metrics</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Combined view of key indicators\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <ResponsiveContainer width=\"100%\" height={300}>\n                <BarChart data={chartData}>\n                  <CartesianGrid \n                    strokeDasharray=\"3 3\" \n                    stroke={isDarkMode ? '#374151' : '#e5e7eb'}\n                  />\n                  <XAxis \n                    dataKey=\"date\" \n                    stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                    tick={{ fill: isDarkMode ? '#9ca3af' : '#6b7280' }}\n                    tickFormatter={(value) => new Date(value).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n                  />\n                  <YAxis \n                    stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                    tick={{ fill: isDarkMode ? '#9ca3af' : '#6b7280' }}\n                  />\n                  <Tooltip \n                    contentStyle={{\n                      backgroundColor: isDarkMode ? '#1f2937' : '#ffffff',\n                      border: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\n                      borderRadius: '8px',\n                      color: isDarkMode ? '#f3f4f6' : '#111827'\n                    }}\n                    labelStyle={{ color: isDarkMode ? '#f3f4f6' : '#111827' }}\n                    formatter={(value: number) => value.toLocaleString()}\n                    labelFormatter={(label) => new Date(label).toLocaleDateString('en-US', { month: 'long', day: 'numeric', year: 'numeric' })}\n                  />\n                  <Legend \n                    wrapperStyle={{ color: isDarkMode ? '#9ca3af' : '#6b7280' }}\n                  />\n                  <Bar \n                    dataKey=\"revenue\" \n                    fill=\"#3b82f6\" \n                    radius={[4, 4, 0, 0]}\n                    name=\"Revenue ($)\"\n                  />\n                  <Bar \n                    dataKey=\"users\" \n                    fill=\"#10b981\" \n                    radius={[4, 4, 0, 0]}\n                    name=\"Users\"\n                  />\n                  <Bar \n                    dataKey=\"orders\" \n                    fill=\"#f59e0b\" \n                    radius={[4, 4, 0, 0]}\n                    name=\"Orders\"\n                  />\n                </BarChart>\n              </ResponsiveContainer>\n            </CardContent>\n          </Card>\n        </div>\n\n        <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n          <CardHeader>\n            <CardTitle className={isDarkMode ? 'text-white' : ''}>Top Products</CardTitle>\n            <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n              Best performing products by revenue\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              <div className=\"overflow-x-auto\">\n                <Table>\n                  <TableHeader>\n                    <TableRow className={isDarkMode ? 'border-gray-700' : ''}>\n                      <TableHead className={isDarkMode ? 'text-gray-300' : ''}>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => handleSort('product')}\n                          className={`-ml-3 h-8 ${isDarkMode ? 'hover:bg-gray-700' : ''}`}\n                        >\n                          Product\n                          <ArrowUpDown className=\"ml-2 h-4 w-4\" />\n                        </Button>\n                      </TableHead>\n                      <TableHead className={isDarkMode ? 'text-gray-300' : ''}>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => handleSort('sales')}\n                          className={`-ml-3 h-8 ${isDarkMode ? 'hover:bg-gray-700' : ''}`}\n                        >\n                          Sales\n                          <ArrowUpDown className=\"ml-2 h-4 w-4\" />\n                        </Button>\n                      </TableHead>\n                      <TableHead className={isDarkMode ? 'text-gray-300' : ''}>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => handleSort('revenue')}\n                          className={`-ml-3 h-8 ${isDarkMode ? 'hover:bg-gray-700' : ''}`}\n                        >\n                          Revenue\n                          <ArrowUpDown className=\"ml-2 h-4 w-4\" />\n                        </Button>\n                      </TableHead>\n                      <TableHead className={isDarkMode ? 'text-gray-300' : ''}>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => handleSort('status')}\n                          className={`-ml-3 h-8 ${isDarkMode ? 'hover:bg-gray-700' : ''}`}\n                        >\n                          Status\n                          <ArrowUpDown className=\"ml-2 h-4 w-4\" />\n                        </Button>\n                      </TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {paginatedData.map((row) => (\n                      <TableRow \n                        key={row.id}\n                        className={isDarkMode ? 'border-gray-700 hover:bg-gray-700/50' : 'hover:bg-gray-50'}\n                      >\n                        <TableCell className={`font-medium ${isDarkMode ? 'text-white' : ''}`}>\n                          {row.product}\n                        </TableCell>\n                        <TableCell className={isDarkMode ? 'text-gray-300' : ''}>\n                          {row.sales.toLocaleString()}\n                        </TableCell>\n                        <TableCell className={isDarkMode ? 'text-gray-300' : ''}>\n                          ${row.revenue.toLocaleString()}\n                        </TableCell>\n                        <TableCell>\n                          <Badge \n                            variant={getStatusBadgeVariant(row.status)}\n                            className={`capitalize ${getStatusColor(row.status)} ${isDarkMode ? 'border' : ''}`}\n                          >\n                            {row.status}\n                          </Badge>\n                        </TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              </div>\n\n              <div className=\"flex flex-col sm:flex-row items-center justify-between gap-4 pt-4\">\n                <p className={`text-sm ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                  Showing {((currentPage - 1) * itemsPerPage) + 1} to {Math.min(currentPage * itemsPerPage, sortedTableData.length)} of {sortedTableData.length} products\n                </p>\n                \n                <div className=\"flex items-center gap-2\">\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => setCurrentPage(prev => Math.max(1, prev - 1))}\n                    disabled={currentPage === 1}\n                    className={isDarkMode ? 'border-gray-700' : ''}\n                  >\n                    <ChevronLeft className=\"h-4 w-4 mr-1\" />\n                    Previous\n                  </Button>\n                  \n                  <div className=\"flex items-center gap-1\">\n                    {Array.from({ length: totalPages }, (_, i) => i + 1).map((page) => (\n                      <Button\n                        key={page}\n                        variant={currentPage === page ? 'default' : 'outline'}\n                        size=\"sm\"\n                        onClick={() => setCurrentPage(page)}\n                        className={`w-8 h-8 p-0 ${isDarkMode && currentPage !== page ? 'border-gray-700' : ''}`}\n                      >\n                        {page}\n                      </Button>\n                    ))}\n                  </div>\n                  \n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => setCurrentPage(prev => Math.min(totalPages, prev + 1))}\n                    disabled={currentPage === totalPages}\n                    className={isDarkMode ? 'border-gray-700' : ''}\n                  >\n                    Next\n                    <ChevronRight className=\"h-4 w-4 ml-1\" />\n                  </Button>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 md:gap-6 mt-8\">\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Recent Activity</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {mockActivityData.map((activity, index) => {\n                  const Icon = activity.icon === 'check' ? CheckCircle : activity.icon === 'alert' ? AlertCircle : Clock;\n                  const iconColor = activity.type === 'success' ? 'text-green-500' : activity.type === 'warning' ? 'text-yellow-500' : 'text-blue-500';\n                  const bgColor = activity.type === 'success' ? 'bg-green-100 dark:bg-green-900/20' : activity.type === 'warning' ? 'bg-yellow-100 dark:bg-yellow-900/20' : 'bg-blue-100 dark:bg-blue-900/20';\n                  \n                  return (\n                    <div\n                      key={activity.id}\n                      className=\"flex items-start gap-3 animate-in fade-in slide-in-from-left-5\"\n                      style={{ animationDelay: `${index * 100}ms`, animationFillMode: 'backwards' }}\n                    >\n                      <div className={`p-2 rounded-full ${bgColor} flex-shrink-0`}>\n                        <Icon className={`h-4 w-4 ${iconColor}`} />\n                      </div>\n                      <div className=\"flex-1 min-w-0\">\n                        <p className={`text-sm font-medium ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                          {activity.message}\n                        </p>\n                        <p className={`text-xs mt-1 ${isDarkMode ? 'text-gray-400' : 'text-gray-500'}`}>\n                          {activity.timestamp}\n                        </p>\n                      </div>\n                    </div>\n                  );\n                })}\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Quick Stats</CardTitle>\n            </CardHeader>\n            <CardContent>\n              {/* TODO:QuickStats Render mini stat cards with sparklines and percentage changes */}\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Alerts</CardTitle>\n            </CardHeader>\n            <CardContent>\n              {/* TODO:AlertsList Render alert notifications with severity levels and dismiss action",
    "error": null,
    "elapsed_time": 84.3402931690216,
    "success": true
  }
}