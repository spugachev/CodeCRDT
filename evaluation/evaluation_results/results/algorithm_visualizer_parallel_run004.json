{
  "prompt_id": "algorithm_visualizer",
  "prompt_name": "Algorithm Visualizer",
  "mode": "parallel",
  "run_number": 4,
  "timestamp": "2025-10-14T03:44:16.236148",
  "response_time": 114.41503953933716,
  "total_tokens": null,
  "response_content": "import { useState, useCallback } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Slider } from '@/components/ui/slider';\nimport { Play, Pause, RotateCcw, Zap, BarChart3 } from 'lucide-react';\nimport { motion } from 'framer-motion';\n\ninterface ArrayElement {\n  value: number;\n  id: string;\n  isComparing?: boolean;\n  isSwapping?: boolean;\n  isSorted?: boolean;\n}\n\ninterface AlgorithmStep {\n  array: ArrayElement[];\n  comparingIndices: number[];\n  swappingIndices: number[];\n  sortedIndices: number[];\n}\n\ntype AlgorithmType = 'bubble' | 'quick' | 'merge' | 'insertion';\n\nconst NEON_COLORS = [\n  '#00ffff',\n  '#ff00ff', \n  '#00ff00',\n  '#ffff00',\n  '#ff0066',\n  '#00ffaa'\n];\n\nconst mockAlgorithms = [\n  { id: 'bubble', name: 'Bubble Sort', complexity: 'O(n\u00b2)' },\n  { id: 'quick', name: 'Quick Sort', complexity: 'O(n log n)' },\n  { id: 'merge', name: 'Merge Sort', complexity: 'O(n log n)' },\n  { id: 'insertion', name: 'Insertion Sort', complexity: 'O(n\u00b2)' }\n];\n\nconst useAnimationLoop = (\n  steps: AlgorithmStep[],\n  currentStep: number,\n  speed: number[],\n  isPlaying: boolean,\n  onStepChange: (step: number) => void,\n  onComplete: () => void\n) => {\n  const [animationId, setAnimationId] = useState<NodeJS.Timeout | null>(null);\n\n  const stopAnimation = useCallback(() => {\n    if (animationId) {\n      clearTimeout(animationId);\n      setAnimationId(null);\n    }\n  }, [animationId]);\n\n  const animate = useCallback(() => {\n    if (currentStep < steps.length - 1) {\n      const delay = 1000 - speed[0] * 9.5; // Convert speed (0-100) to delay (1000ms-50ms)\n      const id = setTimeout(() => {\n        onStepChange(currentStep + 1);\n      }, delay);\n      setAnimationId(id);\n    } else {\n      onComplete();\n    }\n  }, [currentStep, steps.length, speed, onStepChange, onComplete]);\n\n  return { animate, stopAnimation };\n};\nexport default function AlgorithmVisualizer() {\n  const [array, setArray] = useState<ArrayElement[]>([]);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [speed, setSpeed] = useState([50]);\n  const [arraySize, setArraySize] = useState([20]);\n  const [selectedAlgorithm, setSelectedAlgorithm] = useState<AlgorithmType>('bubble');\n  const [currentStep, setCurrentStep] = useState(0);\n  const [steps, setSteps] = useState<AlgorithmStep[]>([]);\n\n  const generateRandomArray = useCallback(() => {\n    const newArray: ArrayElement[] = Array.from({ length: arraySize[0] }, (_, index) => ({\n      value: Math.floor(Math.random() * 100) + 1,\n      id: `element-${index}-${Date.now()}`,\n      isComparing: false,\n      isSwapping: false,\n      isSorted: false\n    }));\n    setArray(newArray);\n    setSteps([]);\n    setCurrentStep(0);\n    setIsPlaying(false);\n  }, [arraySize]);\n\n  const resetVisualization = useCallback(() => {\n\n\n    setIsPlaying(false);\n    setCurrentStep(0);\n    setSteps([]);\n    generateRandomArray();\n  }, [generateRandomArray]);\n\n  const startVisualization = useCallback(() => {\n    if (steps.length === 0) return;\n    if (currentStep >= steps.length - 1) {\n      setCurrentStep(0);\n    }\n    setIsPlaying(true);\n  \n  }, [steps, speed, currentStep]);\n\n  const pauseVisualization = useCallback(() => {\n\n    setIsPlaying(false);\n  }, []);\n\n  const generateSortingSteps = useCallback((algorithm: AlgorithmType) => {\n    const sortedArray = [...array];\n    const algorithmSteps: AlgorithmStep[] = [];\n\n    // Helper to create a step snapshot\n    const createStep = (\n      arr: ArrayElement[],\n      comparing: number[] = [],\n      swapping: number[] = [],\n      sorted: number[] = []\n    ) => {\n      algorithmSteps.push({\n        array: arr.map((el, idx) => ({\n          ...el,\n          isComparing: comparing.includes(idx),\n          isSwapping: swapping.includes(idx),\n          isSorted: sorted.includes(idx)\n        })),\n        comparingIndices: comparing,\n        swappingIndices: swapping,\n        sortedIndices: sorted\n      });\n    };\n\n    // Initial state\n    createStep(sortedArray);\n\n    switch (algorithm) {\n      case 'bubble': {\n        const n = sortedArray.length;\n        const sorted: number[] = [];\n        \n        for (let i = 0; i < n - 1; i++) {\n          for (let j = 0; j < n - i - 1; j++) {\n            // Comparing\n            createStep(sortedArray, [j, j + 1], [], sorted);\n            \n            if (sortedArray[j].value > sortedArray[j + 1].value) {\n              // Swapping\n              createStep(sortedArray, [], [j, j + 1], sorted);\n              [sortedArray[j], sortedArray[j + 1]] = [sortedArray[j + 1], sortedArray[j]];\n              createStep(sortedArray, [], [j, j + 1], sorted);\n            }\n          }\n          sorted.push(n - i - 1);\n          createStep(sortedArray, [], [], sorted);\n        }\n        sorted.push(0);\n        createStep(sortedArray, [], [], sorted);\n        break;\n      }\n\n      case 'insertion': {\n        const sorted: number[] = [0];\n        createStep(sortedArray, [], [], sorted);\n        \n        for (let i = 1; i < sortedArray.length; i++) {\n          const key = sortedArray[i];\n          let j = i - 1;\n          \n          createStep(sortedArray, [i], [], sorted);\n          \n          while (j >= 0 && sortedArray[j].value > key.value) {\n            createStep(sortedArray, [j, j + 1], [], sorted);\n            createStep(sortedArray, [], [j, j + 1], sorted);\n            sortedArray[j + 1] = sortedArray[j];\n            createStep(sortedArray, [], [j, j + 1], sorted);\n            j--;\n          }\n          \n          sortedArray[j + 1] = key;\n          sorted.push(i);\n          createStep(sortedArray, [], [], sorted);\n        }\n        break;\n      }\n\n      case 'quick': {\n        const sorted: number[] = [];\n        \n        const partition = (low: number, high: number): number => {\n          const pivot = sortedArray[high].value;\n          createStep(sortedArray, [high], [], sorted);\n          let i = low - 1;\n          \n          for (let j = low; j < high; j++) {\n            createStep(sortedArray, [j, high], [], sorted);\n            \n            if (sortedArray[j].value < pivot) {\n              i++;\n              if (i !== j) {\n                createStep(sortedArray, [], [i, j], sorted);\n                [sortedArray[i], sortedArray[j]] = [sortedArray[j], sortedArray[i]];\n                createStep(sortedArray, [], [i, j], sorted);\n              }\n            }\n          }\n          \n          createStep(sortedArray, [], [i + 1, high], sorted);\n          [sortedArray[i + 1], sortedArray[high]] = [sortedArray[high], sortedArray[i + 1]];\n          createStep(sortedArray, [], [i + 1, high], sorted);\n          sorted.push(i + 1);\n          createStep(sortedArray, [], [], sorted);\n          \n          return i + 1;\n        };\n        \n        const quickSort = (low: number, high: number) => {\n          if (low < high) {\n            const pi = partition(low, high);\n            quickSort(low, pi - 1);\n            quickSort(pi + 1, high);\n          } else if (low === high) {\n            sorted.push(low);\n            createStep(sortedArray, [], [], sorted);\n          }\n        };\n        \n        quickSort(0, sortedArray.length - 1);\n        break;\n      }\n\n      case 'merge': {\n        const sorted: number[] = [];\n        \n        const merge = (left: number, mid: number, right: number) => {\n          const leftArr = sortedArray.slice(left, mid + 1);\n          const rightArr = sortedArray.slice(mid + 1, right + 1);\n          \n          let i = 0, j = 0, k = left;\n          \n          while (i < leftArr.length && j < rightArr.length) {\n            createStep(sortedArray, [left + i, mid + 1 + j], [], sorted);\n            \n            if (leftArr[i].value <= rightArr[j].value) {\n              createStep(sortedArray, [], [k], sorted);\n              sortedArray[k] = leftArr[i];\n              createStep(sortedArray, [], [k], sorted);\n              i++;\n            } else {\n              createStep(sortedArray, [], [k], sorted);\n              sortedArray[k] = rightArr[j];\n              createStep(sortedArray, [], [k], sorted);\n              j++;\n            }\n            k++;\n          }\n          \n          while (i < leftArr.length) {\n            createStep(sortedArray, [], [k], sorted);\n            sortedArray[k] = leftArr[i];\n            createStep(sortedArray, [], [k], sorted);\n            i++;\n            k++;\n          }\n          \n          while (j < rightArr.length) {\n            createStep(sortedArray, [], [k], sorted);\n            sortedArray[k] = rightArr[j];\n            createStep(sortedArray, [], [k], sorted);\n            j++;\n            k++;\n          }\n          \n          for (let idx = left; idx <= right; idx++) {\n            if (!sorted.includes(idx)) {\n              sorted.push(idx);\n            }\n          }\n          createStep(sortedArray, [], [], sorted);\n        };\n        \n        const mergeSort = (left: number, right: number) => {\n          if (left < right) {\n            const mid = Math.floor((left + right) / 2);\n            mergeSort(left, mid);\n            mergeSort(mid + 1, right);\n            merge(left, mid, right);\n          } else if (left === right && !sorted.includes(left)) {\n            sorted.push(left);\n            createStep(sortedArray, [], [], sorted);\n          }\n        };\n        \n        mergeSort(0, sortedArray.length - 1);\n        break;\n      }\n    }\n\n    setSteps(algorithmSteps);\n    setCurrentStep(0);\n  }, [array]);\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-gray-900 via-purple-900 to-gray-900 p-8\">\n      <div className=\"max-w-7xl mx-auto space-y-8\">\n        <motion.div\n          initial={{ opacity: 0, y: -20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.8 }}\n          className=\"text-center space-y-4\"\n        >\n          <motion.h1\n            className=\"text-6xl font-bold bg-gradient-to-r from-cyan-400 via-purple-400 to-pink-400 bg-clip-text text-transparent\"\n            animate={{\n              textShadow: [\n                '0 0 20px rgba(0, 255, 255, 0.5)',\n                '0 0 40px rgba(255, 0, 255, 0.5)',\n                '0 0 20px rgba(0, 255, 255, 0.5)'\n              ]\n            }}\n            transition={{ duration: 2, repeat: Infinity }}\n          >\n            Algorithm Visualizer\n          </motion.h1>\n          \n          <div className=\"flex items-center justify-center gap-4\">\n            <motion.div\n              initial={{ scale: 0 }}\n              animate={{ scale: 1 }}\n              transition={{ delay: 0.3, type: 'spring' }}\n              className=\"px-6 py-2 bg-purple-500/20 backdrop-blur-sm border border-purple-400/50 rounded-full\"\n            >\n              <span className=\"text-2xl font-semibold text-purple-300\">\n                {mockAlgorithms.find(a => a.id === selectedAlgorithm)?.name || 'Bubble Sort'}\n              </span>\n            </motion.div>\n            \n            <motion.div\n              initial={{ scale: 0 }}\n              animate={{ scale: 1 }}\n              transition={{ delay: 0.5, type: 'spring' }}\n              className=\"px-4 py-2 bg-cyan-500/20 backdrop-blur-sm border border-cyan-400/50 rounded-full relative overflow-hidden\"\n            >\n              <motion.div\n                className=\"absolute inset-0 bg-gradient-to-r from-transparent via-cyan-400/20 to-transparent\"\n                animate={{ x: ['-100%', '100%'] }}\n                transition={{ duration: 2, repeat: Infinity }}\n              />\n              <div className=\"relative flex items-center gap-2\">\n                <BarChart3 className=\"w-4 h-4 text-cyan-400\" />\n                <span className=\"text-sm font-mono text-cyan-300\">\n                  {mockAlgorithms.find(a => a.id === selectedAlgorithm)?.complexity || 'O(n\u00b2)'}\n                </span>\n              </div>\n            </motion.div>\n          </div>\n        </motion.div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-6\">\n          <div className=\"lg:col-span-1 space-y-6\">\n            <motion.div\n              initial={{ opacity: 0, x: -50 }}\n              animate={{ opacity: 1, x: 0 }}\n              transition={{ delay: 0.2 }}\n              className=\"bg-gray-900/50 backdrop-blur-lg border border-purple-500/30 rounded-xl p-6 shadow-[0_0_30px_rgba(168,85,247,0.3)] hover:shadow-[0_0_50px_rgba(168,85,247,0.5)] transition-all duration-300\"\n            >\n              <div className=\"space-y-4\">\n                <div className=\"flex items-center gap-2 text-purple-400 font-semibold mb-4\">\n                  <BarChart3 className=\"w-5 h-5\" />\n                  <span className=\"text-sm uppercase tracking-wider\">Statistics</span>\n                </div>\n\n                <div className=\"space-y-4\">\n                  {/* Comparisons Counter */}\n                  <motion.div\n                    className=\"relative overflow-hidden rounded-lg bg-gradient-to-br from-cyan-500/10 to-cyan-600/5 border border-cyan-500/30 p-4\"\n                    whileHover={{ scale: 1.02 }}\n                    transition={{ type: 'spring', stiffness: 400 }}\n                  >\n                    <motion.div\n                      className=\"absolute inset-0 bg-gradient-to-r from-transparent via-cyan-400/10 to-transparent\"\n                      animate={{ x: ['-100%', '100%'] }}\n                      transition={{ duration: 3, repeat: Infinity, ease: 'linear' }}\n                    />\n                    <div className=\"relative space-y-2\">\n                      <div className=\"flex items-center justify-between\">\n                        <span className=\"text-xs text-cyan-300 uppercase tracking-wide\">Comparisons</span>\n                        <motion.div\n                          className=\"w-2 h-2 rounded-full bg-cyan-400\"\n                          animate={{\n                            boxShadow: [\n                              '0 0 5px rgba(0, 255, 255, 0.5)',\n                              '0 0 20px rgba(0, 255, 255, 0.8)',\n                              '0 0 5px rgba(0, 255, 255, 0.5)'\n                            ]\n                          }}\n                          transition={{ duration: 2, repeat: Infinity }}\n                        />\n                      </div>\n                      <motion.div\n                        className=\"text-3xl font-bold text-cyan-400 font-mono\"\n                        key={steps[currentStep]?.comparingIndices.length || 0}\n                        initial={{ scale: 1.2, opacity: 0 }}\n                        animate={{ scale: 1, opacity: 1 }}\n                        transition={{ type: 'spring', stiffness: 300 }}\n                      >\n                        {currentStep}\n                      </motion.div>\n                    </div>\n                  </motion.div>\n\n                  {/* Swaps Counter */}\n                  <motion.div\n                    className=\"relative overflow-hidden rounded-lg bg-gradient-to-br from-pink-500/10 to-pink-600/5 border border-pink-500/30 p-4\"\n                    whileHover={{ scale: 1.02 }}\n                    transition={{ type: 'spring', stiffness: 400 }}\n                  >\n                    <motion.div\n                      className=\"absolute inset-0 bg-gradient-to-r from-transparent via-pink-400/10 to-transparent\"\n                      animate={{ x: ['-100%', '100%'] }}\n                      transition={{ duration: 3, repeat: Infinity, ease: 'linear', delay: 1 }}\n                    />\n                    <div className=\"relative space-y-2\">\n                      <div className=\"flex items-center justify-between\">\n                        <span className=\"text-xs text-pink-300 uppercase tracking-wide\">Swaps</span>\n                        <motion.div\n                          className=\"w-2 h-2 rounded-full bg-pink-400\"\n                          animate={{\n                            boxShadow: [\n                              '0 0 5px rgba(255, 0, 255, 0.5)',\n                              '0 0 20px rgba(255, 0, 255, 0.8)',\n                              '0 0 5px rgba(255, 0, 255, 0.5)'\n                            ]\n                          }}\n                          transition={{ duration: 2, repeat: Infinity, delay: 0.5 }}\n                        />\n                      </div>\n                      <motion.div\n                        className=\"text-3xl font-bold text-pink-400 font-mono\"\n                        key={steps[currentStep]?.swappingIndices.length || 0}\n                        initial={{ scale: 1.2, opacity: 0 }}\n                        animate={{ scale: 1, opacity: 1 }}\n                        transition={{ type: 'spring', stiffness: 300 }}\n                      >\n                        {steps[currentStep]?.swappingIndices.length || 0}\n                      </motion.div>\n                    </div>\n                  </motion.div>\n\n                  {/* Progress Indicator */}\n                  <motion.div\n                    className=\"relative overflow-hidden rounded-lg bg-gradient-to-br from-purple-500/10 to-purple-600/5 border border-purple-500/30 p-4\"\n                    whileHover={{ scale: 1.02 }}\n                    transition={{ type: 'spring', stiffness: 400 }}\n                  >\n                    <motion.div\n                      className=\"absolute inset-0 bg-gradient-to-r from-transparent via-purple-400/10 to-transparent\"\n                      animate={{ x: ['-100%', '100%'] }}\n                      transition={{ duration: 3, repeat: Infinity, ease: 'linear', delay: 2 }}\n                    />\n                    <div className=\"relative space-y-3\">\n                      <div className=\"flex items-center justify-between\">\n                        <span className=\"text-xs text-purple-300 uppercase tracking-wide\">Progress</span>\n                        <motion.div\n                          className=\"w-2 h-2 rounded-full bg-purple-400\"\n                          animate={{\n                            boxShadow: [\n                              '0 0 5px rgba(168, 85, 247, 0.5)',\n                              '0 0 20px rgba(168, 85, 247, 0.8)',\n                              '0 0 5px rgba(168, 85, 247, 0.5)'\n                            ]\n                          }}\n                          transition={{ duration: 2, repeat: Infinity, delay: 1 }}\n                        />\n                      </div>\n                      <div className=\"flex items-baseline gap-2\">\n                        <motion.div\n                          className=\"text-3xl font-bold text-purple-400 font-mono\"\n                          key={steps.length > 0 ? Math.round((currentStep / (steps.length - 1)) * 100) : 0}\n                          initial={{ scale: 1.2, opacity: 0 }}\n                          animate={{ scale: 1, opacity: 1 }}\n                          transition={{ type: 'spring', stiffness: 300 }}\n                        >\n                          {steps.length > 0 ? Math.round((currentStep / (steps.length - 1)) * 100) : 0}\n                        </motion.div>\n                        <span className=\"text-lg text-purple-300\">%</span>\n                      </div>\n                      \n                      {/* Progress Bar */}\n                      <div className=\"relative h-2 bg-gray-800 rounded-full overflow-hidden\">\n                        <motion.div\n                          className=\"absolute inset-y-0 left-0 bg-gradient-to-r from-purple-500 via-pink-500 to-cyan-500 rounded-full\"\n                          initial={{ width: '0%' }}\n                          animate={{\n                            width: steps.length > 0 ? `${(currentStep / (steps.length - 1)) * 100}%` : '0%'\n                          }}\n                          transition={{ duration: 0.3, ease: 'easeOut' }}\n                        />\n                        <motion.div\n                          className=\"absolute inset-0 bg-gradient-to-r from-transparent via-white/30 to-transparent\"\n                          animate={{ x: ['-100%', '100%'] }}\n                          transition={{ duration: 1.5, repeat: Infinity, ease: 'linear' }}\n                        />\n                      </div>\n                    </div>\n                  </motion.div>\n\n                  {/* Array Elements Sorted */}\n                  <motion.div\n                    className=\"relative overflow-hidden rounded-lg bg-gradient-to-br from-green-500/10 to-green-600/5 border border-green-500/30 p-4\"\n                    whileHover={{ scale: 1.02 }}\n                    transition={{ type: 'spring', stiffness: 400 }}\n                  >\n                    <motion.div\n                      className=\"absolute inset-0 bg-gradient-to-r from-transparent via-green-400/10 to-transparent\"\n                      animate={{ x: ['-100%', '100%'] }}\n                      transition={{ duration: 3, repeat: Infinity, ease: 'linear', delay: 1.5 }}\n                    />\n                    <div className=\"relative space-y-2\">\n                      <div className=\"flex items-center justify-between\">\n                        <span className=\"text-xs text-green-300 uppercase tracking-wide\">Sorted Elements</span>\n                        <motion.div\n                          className=\"w-2 h-2 rounded-full bg-green-400\"\n                          animate={{\n                            boxShadow: [\n                              '0 0 5px rgba(0, 255, 0, 0.5)',\n                              '0 0 20px rgba(0, 255, 0, 0.8)',\n                              '0 0 5px rgba(0, 255, 0, 0.5)'\n                            ]\n                          }}\n                          transition={{ duration: 2, repeat: Infinity, delay: 1.5 }}\n                        />\n                      </div>\n                      <div className=\"flex items-baseline gap-2\">\n                        <motion.div\n                          className=\"text-3xl font-bold text-green-400 font-mono\"\n                          key={steps[currentStep]?.sortedIndices.length || 0}\n                          initial={{ scale: 1.2, opacity: 0 }}\n                          animate={{ scale: 1, opacity: 1 }}\n                          transition={{ type: 'spring', stiffness: 300 }}\n                        >\n                          {steps[currentStep]?.sortedIndices.length || 0}\n                        </motion.div>\n                        <span className=\"text-sm text-green-300/70\">/ {array.length}</span>\n                      </div>\n                    </div>\n                  </motion.div>\n                </div>\n              </div>\n            </motion.div>\n            <motion.div\n              initial={{ opacity: 0, x: -50 }}\n              animate={{ opacity: 1, x: 0 }}\n              className=\"bg-gray-900/50 backdrop-blur-lg border border-cyan-500/30 rounded-xl p-6 shadow-[0_0_30px_rgba(0,255,255,0.3)] hover:shadow-[0_0_50px_rgba(0,255,255,0.5)] transition-all duration-300\"\n            >\n              <div className=\"space-y-6\">\n                {/* Algorithm Selection */}\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center gap-2 text-cyan-400 font-semibold\">\n                    <Zap className=\"w-4 h-4\" />\n                    <span className=\"text-sm uppercase tracking-wider\">Algorithm</span>\n                  </div>\n                  <div className=\"grid grid-cols-1 gap-2\">\n                    {mockAlgorithms.map((algo) => (\n                      <motion.button\n                        key={algo.id}\n                        whileHover={{ scale: 1.02 }}\n                        whileTap={{ scale: 0.98 }}\n                        onClick={() => {\n                          setSelectedAlgorithm(algo.id as AlgorithmType);\n                          generateSortingSteps(algo.id as AlgorithmType);\n                        }}\n                        disabled={isPlaying}\n                        className={`p-3 rounded-lg border transition-all duration-300 text-left ${\n                          selectedAlgorithm === algo.id\n                            ? 'bg-cyan-500/20 border-cyan-400 shadow-[0_0_20px_rgba(0,255,255,0.4)]'\n                            : 'bg-gray-800/50 border-gray-700 hover:border-cyan-500/50 hover:bg-gray-800'\n                        } disabled:opacity-50 disabled:cursor-not-allowed`}\n                      >\n                        <div className=\"font-medium text-white text-sm\">{algo.name}</div>\n                        <div className=\"text-xs text-gray-400 mt-1\">{algo.complexity}</div>\n                      </motion.button>\n                    ))}\n                  </div>\n                </div>\n\n                {/* Array Size Control */}\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center gap-2 text-purple-400 font-semibold\">\n                      <BarChart3 className=\"w-4 h-4\" />\n                      <span className=\"text-sm uppercase tracking-wider\">Array Size</span>\n                    </div>\n                    <span className=\"text-white font-mono text-lg\">{arraySize[0]}</span>\n                  </div>\n                  <Slider\n                    value={arraySize}\n                    onValueChange={setArraySize}\n                    min={5}\n                    max={50}\n                    step={1}\n                    disabled={isPlaying}\n                    className=\"cursor-pointer\"\n                  />\n                </div>\n\n                {/* Speed Control */}\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center gap-2 text-pink-400 font-semibold\">\n                      <Zap className=\"w-4 h-4\" />\n                      <span className=\"text-sm uppercase tracking-wider\">Speed</span>\n                    </div>\n                    <span className=\"text-white font-mono text-lg\">{speed[0]}%</span>\n                  </div>\n                  <Slider\n                    value={speed}\n                    onValueChange={setSpeed}\n                    min={10}\n                    max={100}\n                    step={10}\n                    className=\"cursor-pointer\"\n                  />\n                </div>\n\n                {/* Control Buttons */}\n                <div className=\"space-y-3 pt-4 border-t border-gray-700/50\">\n                  <Button\n                    onClick={isPlaying ? pauseVisualization : startVisualization}\n                    disabled={steps.length === 0 || (currentStep >= steps.length && !isPlaying)}\n                    className=\"w-full bg-gradient-to-r from-cyan-500 to-blue-500 hover:from-cyan-400 hover:to-blue-400 text-white font-semibold shadow-[0_0_20px_rgba(0,255,255,0.5)] hover:shadow-[0_0_30px_rgba(0,255,255,0.7)] transition-all duration-300\"\n                  >\n                    {isPlaying ? (\n                      <>\n                        <Pause className=\"w-4 h-4 mr-2\" />\n                        Pause\n                      </>\n                    ) : (\n                      <>\n                        <Play className=\"w-4 h-4 mr-2\" />\n                        {currentStep >= steps.length ? 'Start' : 'Resume'}\n                      </>\n                    )}\n                  </Button>\n\n                  <Button\n                    onClick={resetVisualization}\n                    variant=\"outline\"\n                    className=\"w-full border-purple-500/50 text-purple-400 hover:bg-purple-500/20 hover:border-purple-400 hover:text-purple-300 shadow-[0_0_15px_rgba(168,85,247,0.3)] hover:shadow-[0_0_25px_rgba(168,85,247,0.5)] transition-all duration-300\"\n                  >\n                    <RotateCcw className=\"w-4 h-4 mr-2\" />\n                    Reset\n                  </Button>\n                </div>\n\n                {/* Stats Display */}\n                <div className=\"pt-4 border-t border-gray-700/50 space-y-2\">\n                  <div className=\"flex justify-between text-sm\">\n                    <span className=\"text-gray-400\">Current Step:</span>\n                    <span className=\"text-white font-mono\">{currentStep} / {steps.length}</span>\n                  </div>\n                  <div className=\"flex justify-between text-sm\">\n                    <span className=\"text-gray-400\">Array Length:</span>\n                    <span className=\"text-white font-mono\">{array.length}</span>\n                  </div>\n                </div>\n              </div>\n            </motion.div>\n            \n            <div className=\"bg-gray-900/50 backdrop-blur-lg border border-cyan-500/30 rounded-xl p-6 shadow-2xl shadow-cyan-500/20\">\n              <div className=\"space-y-6\">\n                <div>\n                  <h3 className=\"text-sm font-semibold text-cyan-400 mb-3 flex items-center gap-2\">\n                    <Zap className=\"w-4 h-4\" />\n                    Algorithm\n                  </h3>\n                  <div className=\"grid grid-cols-1 gap-2\">\n                    {mockAlgorithms.map((algo) => (\n                      <motion.button\n                        key={algo.id}\n                        onClick={() => setSelectedAlgorithm(algo.id as AlgorithmType)}\n                        className={`relative p-3 rounded-lg text-left transition-all duration-300 ${\n                          selectedAlgorithm === algo.id\n                            ? 'bg-cyan-500/20 border-2 border-cyan-400 shadow-lg shadow-cyan-500/50'\n                            : 'bg-gray-800/50 border border-gray-700 hover:border-cyan-500/50 hover:shadow-md hover:shadow-cyan-500/30'\n                        }`}\n                        whileHover={{ scale: 1.02 }}\n                        whileTap={{ scale: 0.98 }}\n                      >\n                        <div className=\"flex flex-col gap-1\">\n                          <span className={`text-sm font-medium ${\n                            selectedAlgorithm === algo.id ? 'text-cyan-300' : 'text-gray-300'\n                          }`}>\n                            {algo.name}\n                          </span>\n                          <span className={`text-xs ${\n                            selectedAlgorithm === algo.id ? 'text-cyan-400/80' : 'text-gray-500'\n                          }`}>\n                            {algo.complexity}\n                          </span>\n                        </div>\n                        {selectedAlgorithm === algo.id && (\n                          <motion.div\n                            className=\"absolute inset-0 rounded-lg bg-cyan-400/10\"\n                            layoutId=\"algorithmSelector\"\n                            transition={{ type: \"spring\", bounce: 0.2, duration: 0.6 }}\n                          />\n                        )}\n                      </motion.button>\n                    ))}\n                  </div>\n                </div></parameter>\n</invoke>\n\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <label className=\"text-cyan-400 text-sm font-medium flex items-center gap-2\">\n                      <Zap className=\"w-4 h-4\" />\n                      Speed\n                    </label>\n                    <span className=\"text-cyan-300 text-xs\">{speed[0]}ms</span>\n                  </div>\n                  <Slider\n                    value={speed}\n                    onValueChange={setSpeed}\n                    min={10}\n                    max={200}\n                    step={10}\n                    className=\"[&_[role=slider]]:bg-cyan-400 [&_[role=slider]]:border-cyan-300 [&_[role=slider]]:shadow-[0_0_15px_rgba(34,211,238,0.8)] [&_[role=slider]]:hover:shadow-[0_0_25px_rgba(34,211,238,1)] [&_[role=slider]]:transition-shadow [&_.relative]:bg-gray-700/50 [&_.relative]:border [&_.relative]:border-cyan-500/30 [&_.bg-primary]:bg-gradient-to-r [&_.bg-primary]:from-cyan-500 [&_.bg-primary]:to-purple-500 [&_.bg-primary]:shadow-[0_0_10px_rgba(34,211,238,0.5)]\"\n                  />\n                </div>\n\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <label className=\"text-cyan-400 text-sm font-medium flex items-center gap-2\">\n                      <BarChart3 className=\"w-4 h-4\" />\n                      Array Size\n                    </label>\n                    <span className=\"text-cyan-300 text-xs\">{arraySize[0]}</span>\n                  </div>\n                  <Slider\n                    value={arraySize}\n                    onValueChange={setArraySize}\n                    min={5}\n                    max={50}\n                    step={1}\n                    className=\"[&_[role=slider]]:bg-gradient-to-r [&_[role=slider]]:from-purple-500 [&_[role=slider]]:to-pink-500 [&_[role=slider]]:border-2 [&_[role=slider]]:border-purple-300 [&_[role=slider]]:shadow-lg [&_[role=slider]]:shadow-purple-500/50 [&_[role=slider]]:transition-all [&_[role=slider]]:hover:shadow-purple-500/80 [&_[role=slider]]:hover:scale-110 [&>span]:bg-gradient-to-r [&>span]:from-purple-500/30 [&>span]:to-pink-500/30 [&>span]:h-2 [&>span]:rounded-full\"\n                  />\n                </div>\n\n                <div className=\"flex gap-3 pt-4\"><motion.div\n                    whileTap={{ rotate: 360 }}\n                    transition={{ duration: 0.6, ease: \"easeInOut\" }}\n                    className=\"flex-1\"\n                  >\n                    <Button\n                      onClick={resetVisualization}\n                      className=\"w-full relative overflow-hidden bg-gradient-to-r from-pink-500 to-purple-500 hover:from-pink-400 hover:to-purple-400 text-white font-semibold py-6 rounded-lg shadow-lg shadow-pink-500/50 hover:shadow-pink-500/80 transition-all duration-300 border-2 border-pink-400 group\"\n                    >\n                      <motion.div\n                        className=\"absolute inset-0 bg-gradient-to-r from-transparent via-white/30 to-transparent\"\n                        animate={{ \n                          x: ['-100%', '100%'],\n                          opacity: [0.5, 1, 0.5]\n                        }}\n                        transition={{ \n                          duration: 1.5, \n                          repeat: Infinity, \n                          ease: 'linear' \n                        }}\n                      />\n                      <span className=\"relative flex items-center justify-center gap-2\">\n                        <motion.div\n                          animate={{ \n                            rotate: [0, 360],\n                            scale: [1, 1.1, 1]\n                          }}\n                          transition={{ \n                            duration: 3, \n                            repeat: Infinity,\n                            ease: \"linear\"\n                          }}\n                        >\n                          <RotateCcw className=\"w-5 h-5\" />\n                        </motion.div>\n                        Reset\n                      </span>\n                      <motion.div\n                        className=\"absolute inset-0 rounded-lg\"\n                        animate={{\n                          boxShadow: [\n                            '0 0 20px rgba(236, 72, 153, 0.5)',\n                            '0 0 40px rgba(236, 72, 153, 0.8)',\n                            '0 0 20px rgba(236, 72, 153, 0.5)'\n                          ]\n                        }}\n                        transition={{ duration: 2, repeat: Infinity }}\n                      />\n                    </Button>\n                  </motion.div>\n\n                  <Button\n                    onClick={generateRandomArray}\n                    className=\"flex-1 relative overflow-hidden bg-gradient-to-r from-purple-500 to-indigo-500 hover:from-purple-400 hover:to-indigo-400 text-white font-semibold py-6 rounded-lg shadow-lg shadow-purple-500/50 hover:shadow-purple-500/80 transition-all duration-300 border-2 border-purple-400\"\n                  >\n                    <motion.div\n                      className=\"absolute inset-0 bg-gradient-to-r from-transparent via-white/20 to-transparent\"\n                      animate={{ x: ['-100%', '100%'] }}\n                      transition={{ duration: 2, repeat: Infinity, ease: 'linear' }}\n                    />\n                    <span className=\"relative flex items-center justify-center gap-2\">\n                      <Zap className=\"w-5 h-5\" />\n                      New Array\n                    </span>\n                  </Button>\n\n                  <Button\n                    onClick={isPlaying ? pauseVisualization : startVisualization}\n                    disabled={array.length === 0 || (steps.length === 0 && !isPlaying)}\n                    className=\"flex-1 relative overflow-hidden group bg-gradient-to-r from-cyan-500 to-purple-500 hover:from-cyan-400 hover:to-purple-400 border-0 shadow-lg shadow-cyan-500/50 hover:shadow-cyan-500/80 transition-all duration-300\"\n                  >\n                    <motion.div\n                      className=\"absolute inset-0 bg-gradient-to-r from-cyan-400/0 via-white/20 to-cyan-400/0\"\n                      animate={{\n                        x: ['-100%', '100%']\n                      }}\n                      transition={{\n                        duration: 2,\n                        repeat: Infinity,\n                        ease: 'linear'\n                      }}\n                    />\n                    <motion.div\n                      className=\"relative flex items-center justify-center gap-2\"\n                      whileHover={{ scale: 1.05 }}\n                      whileTap={{ scale: 0.95 }}\n                    >\n                      <motion.div\n                        key={isPlaying ? 'pause' : 'play'}\n                        initial={{ scale: 0, rotate: -180 }}\n                        animate={{ scale: 1, rotate: 0 }}\n                        exit={{ scale: 0, rotate: 180 }}\n                        transition={{ duration: 0.3, type: 'spring' }}\n                      >\n                        {isPlaying ? (\n                          <Pause className=\"w-4 h-4 fill-current\" />\n                        ) : (\n                          <Play className=\"w-4 h-4 fill-current\" />\n                        )}\n                      </motion.div>\n                      <span className=\"font-semibold\">\n                        {isPlaying ? 'Pause' : 'Play'}\n                      </span>\n                    </motion.div>\n                  </Button>\n                  \n                </div>\n              </div>\n            </div>\n\n            {/* TODO:StatsPanel Real-time statistics panel showing comparisons, swaps, and progress */}\n          </div>\n\n          <div className=\"lg:col-span-3\">\n            <div className=\"bg-gray-900/50 backdrop-blur-lg border border-purple-500/30 rounded-xl p-8 shadow-2xl shadow-purple-500/20 min-h-[600px]\">\n              \n              \n              <div className=\"relative h-full flex items-end justify-center gap-1\">\n                {(steps.length > 0 && steps[currentStep]?.array || array).map((element, index) => {\n                  const maxValue = Math.max(...(steps.length > 0 && steps[currentStep]?.array || array).map(el => el.value));\n                  const heightPercentage = (element.value / maxValue) * 100;\n                  const colorIndex = index % NEON_COLORS.length;\n                  const neonColor = NEON_COLORS[colorIndex];\n\n                  return (\n                    <motion.div\n                      key={element.id}\n                      layout\n                      initial={{ height: 0, opacity: 0 }}\n                      animate={{\n                        height: `${heightPercentage}%`,\n                        opacity: 1,\n                        scale: element.isSwapping ? 1.1 : 1,\n                        y: element.isSwapping ? -10 : 0,\n                      }}\n                      transition={{\n                        height: { duration: 0.5, ease: 'easeOut' },\n                        scale: { duration: 0.3, ease: 'easeInOut' },\n                        y: { duration: 0.3, ease: 'easeInOut' },\n                        layout: { duration: 0.5, ease: 'easeInOut' }\n                      }}\n                      className=\"relative flex-1 min-w-[8px] max-w-[60px] rounded-t-lg\"\n                      style={{\n                        backgroundColor: element.isSorted \n                          ? '#00ff00'\n                          : element.isSwapping \n                          ? '#ff0066'\n                          : element.isComparing \n                          ? '#ffff00'\n                          : neonColor,\n                        boxShadow: element.isSorted\n                          ? '0 0 20px rgba(0, 255, 0, 0.8), 0 0 40px rgba(0, 255, 0, 0.5), inset 0 0 20px rgba(0, 255, 0, 0.3)'\n                          : element.isSwapping\n                          ? '0 0 30px rgba(255, 0, 102, 0.9), 0 0 60px rgba(255, 0, 102, 0.6), inset 0 0 20px rgba(255, 0, 102, 0.4)'\n                          : element.isComparing\n                          ? '0 0 25px rgba(255, 255, 0, 0.8), 0 0 50px rgba(255, 255, 0, 0.5), inset 0 0 20px rgba(255, 255, 0, 0.3)'\n                          : `0 0 15px ${neonColor}80, 0 0 30px ${neonColor}40, inset 0 0 15px ${neonColor}30`,\n                      }}\n                    >\n                      {/* Animated glow pulse effect */}\n                      {(element.isComparing || element.isSwapping) && (\n                        <motion.div\n                          className=\"absolute inset-0 rounded-t-lg\"\n                          animate={{\n                            boxShadow: [\n                              `0 0 20px ${element.isSwapping ? '#ff0066' : '#ffff00'}80`,\n                              `0 0 40px ${element.isSwapping ? '#ff0066' : '#ffff00'}ff`,\n                              `0 0 20px ${element.isSwapping ? '#ff0066' : '#ffff00'}80`,\n                            ],\n                          }}\n                          transition={{\n                            duration: 0.6,\n                            repeat: Infinity,\n                            ease: 'easeInOut',\n                          }}\n                        />\n                      )}\n\n                      {/* Shimmer effect */}\n                      <motion.div\n                        className=\"absolute inset-0 rounded-t-lg overflow-hidden\"\n                        initial={{ opacity: 0 }}\n                        animate={{ opacity: element.isSorted ? 0.6 : 0.3 }}\n                      >\n                        <motion.div\n                          className=\"absolute inset-0 bg-gradient-to-r from-transparent via-white to-transparent\"\n                          animate={{\n                            x: ['-100%', '200%'],\n                          }}\n                          transition={{\n                            duration: 2,\n                            repeat: Infinity,\n                            ease: 'linear',\n                            repeatDelay: 1,\n                          }}\n                          style={{ width: '50%' }}\n                        />\n                      </motion.div>\n\n                      {/* Value label */}\n                      <motion.div\n                        className=\"absolute -bottom-6 left-1/2 transform -translate-x-1/2 text-xs font-mono font-bold whitespace-nowrap\"\n                        initial={{ opacity: 0 }}\n                        animate={{ \n                          opacity: arraySize[0] <= 25 ? 1 : 0,\n                          color: element.isSorted \n                            ? '#00ff00'\n                            : element.isSwapping \n                            ? '#ff0066'\n                            : element.isComparing \n                            ? '#ffff00'\n                            : '#ffffff',\n                        }}\n                        style={{\n                          textShadow: element.isSorted\n                            ? '0 0 10px rgba(0, 255, 0, 0.8)'\n                            : element.isSwapping\n                            ? '0 0 10px rgba(255, 0, 102, 0.8)'\n                            : element.isComparing\n                            ? '0 0 10px rgba(255, 255, 0, 0.8)'\n                            : '0 0 5px rgba(255, 255, 255, 0.5)',\n                        }}\n                      >\n                        {element.value}\n                      </motion.div>\n\n                      {/* Swap trail effect */}\n                      {element.isSwapping && (\n                        <>\n                          <motion.div\n                            className=\"absolute inset-0 rounded-t-lg\"\n                            initial={{ opacity: 0.8, scale: 1 }}\n                            animate={{ \n                              opacity: 0, \n                              scale: 1.5,\n                            }}\n                            transition={{\n                              duration: 0.6,\n                              repeat: Infinity,\n                            }}\n                            style={{\n                              backgroundColor: '#ff0066',\n                              filter: 'blur(8px)',\n                            }}\n                          />\n                          <motion.div\n                            className=\"absolute -top-8 left-1/2 transform -translate-x-1/2\"\n                            animate={{\n                              y: [0, -10, 0],\n                              opacity: [0, 1, 0],\n                            }}\n                            transition={{\n                              duration: 0.8,\n                              repeat: Infinity,\n                            }}\n                          >\n                            <div className=\"w-2 h-2 bg-pink-400 rounded-full shadow-[0_0_10px_rgba(255,0,102,0.8)]\" />\n                          </motion.div>\n                        </>\n                      )}\n\n                      {/* Sorted checkmark indicator */}\n                      {element.isSorted && (\n                        <motion.div\n                          className=\"absolute -top-8 left-1/2 transform -translate-x-1/2\"\n                          initial={{ scale: 0, rotate: -180 }}\n                          animate={{ scale: 1, rotate: 0 }}\n                          transition={{ type: 'spring', stiffness: 200, damping: 15 }}\n                        >\n                          <div className=\"w-6 h-6 bg-green-500 rounded-full flex items-center justify-center shadow-[0_0_15px_rgba(0,255,0,0.8)]\">\n                            <svg className=\"w-4 h-4 text-gray-900\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={3} d=\"M5 13l4 4L19 7\" />\n                            </svg>\n                          </div>\n                        </motion.div>\n                      )}\n                    </motion.div>\n                  );\n                })}\n              </div>\n            </div>\n\n                        <motion.div\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ delay: 0.3 }}\n              className=\"mt-6 space-y-3\"\n            >\n              <div className=\"flex items-center justify-between text-sm\">\n                <span className=\"text-purple-400 font-semibold flex items-center gap-2\">\n                  <BarChart3 className=\"w-4 h-4\" />\n                  Sorting Progress\n                </span>\n                <span className=\"text-cyan-300 font-mono\">\n                  {steps.length > 0 ? Math.round((currentStep / (steps.length - 1)) * 100) : 0}%\n                </span>\n              </div>\n              \n              <div className=\"relative h-3 bg-gray-800/50 rounded-full overflow-hidden border border-purple-500/30 shadow-inner\">\n                <motion.div\n                  className=\"absolute inset-y-0 left-0 bg-gradient-to-r from-cyan-500 via-purple-500 to-pink-500 rounded-full shadow-[0_0_20px_rgba(0,255,255,0.6)]\"\n                  initial={{ width: '0%' }}\n                  animate={{ \n                    width: steps.length > 0 ? `${(currentStep / (steps.length - 1)) * 100}%` : '0%'\n                  }}\n                  transition={{ duration: 0.3, ease: 'easeOut' }}\n                >\n                  <motion.div\n                    className=\"absolute inset-0 bg-gradient-to-r from-transparent via-white/30 to-transparent\"\n                    animate={{ x: ['-100%', '200%'] }}\n                    transition={{ duration: 1.5, repeat: Infinity, ease: 'linear' }}\n                  />\n                </motion.div>\n                \n                {currentStep >= steps.length - 1 && steps.length > 0 && (\n                  <motion.div\n                    className=\"absolute inset-0 bg-gradient-to-r from-cyan-400/20 via-purple-400/20 to-pink-400/20\"\n                    animate={{ opacity: [0.5, 1, 0.5] }}\n                    transition={{ duration: 1, repeat: Infinity }}\n                  />\n                )}\n              </div>\n              \n              <div className=\"flex items-center justify-between text-xs text-gray-400\">\n                <span>Step {currentStep} of {steps.length > 0 ? steps.length - 1 : 0}</span>\n                {currentStep >= steps.length - 1 && steps.length > 0 && (\n                  <motion.span\n                    initial={{ opacity: 0, scale: 0.8 }}\n                    animate={{ opacity: 1, scale: 1 }}\n                    className=\"text-cyan-400 font-semibold flex items-center gap-1\"\n                  >\n                    <Zap className=\"w-3 h-3\" />\n                    Complete!\n                  </motion.span>\n                )}\n              </div>\n            </motion.div>\n          </div>\n        </div>\n\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ delay: 0.6, duration: 0.8 }}\n          className=\"bg-gray-900/50 backdrop-blur-lg border border-purple-500/30 rounded-xl p-6 shadow-[0_0_30px_rgba(168,85,247,0.3)]\"\n        >\n          <div className=\"flex items-center gap-2 mb-4\">\n            <BarChart3 className=\"w-5 h-5 text-purple-400\" />\n            <h3 className=\"text-lg font-semibold text-purple-300\">Legend</h3>\n          </div>\n          \n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n            {/* Default State */}\n            <motion.div\n              whileHover={{ scale: 1.05 }}\n              className=\"flex items-center gap-3 p-3 bg-gray-800/50 rounded-lg border border-gray-700/50 hover:border-cyan-500/50 transition-all duration-300\"\n            >\n              <motion.div\n                className=\"w-6 h-12 rounded bg-gradient-to-t from-cyan-500 to-cyan-300 shadow-[0_0_15px_rgba(0,255,255,0.6)]\"\n                animate={{\n                  boxShadow: [\n                    '0 0 15px rgba(0,255,255,0.6)',\n                    '0 0 25px rgba(0,255,255,0.8)',\n                    '0 0 15px rgba(0,255,255,0.6)'\n                  ]\n                }}\n                transition={{ duration: 2, repeat: Infinity }}\n              />\n              <div>\n                <div className=\"text-sm font-medium text-white\">Default</div>\n                <div className=\"text-xs text-gray-400\">Unsorted</div>\n              </div>\n            </motion.div>\n\n            {/* Comparing State */}\n            <motion.div\n              whileHover={{ scale: 1.05 }}\n              className=\"flex items-center gap-3 p-3 bg-gray-800/50 rounded-lg border border-gray-700/50 hover:border-yellow-500/50 transition-all duration-300\"\n            >\n              <motion.div\n                className=\"w-6 h-12 rounded bg-gradient-to-t from-yellow-500 to-yellow-300 shadow-[0_0_20px_rgba(255,255,0,0.8)]\"\n                animate={{\n                  boxShadow: [\n                    '0 0 20px rgba(255,255,0,0.8)',\n                    '0 0 35px rgba(255,255,0,1)',\n                    '0 0 20px rgba(255,255,0,0.8)'\n                  ],\n                  scale: [1, 1.1, 1]\n                }}\n                transition={{ duration: 1.5, repeat: Infinity }}\n              />\n              <div>\n                <div className=\"text-sm font-medium text-white\">Comparing</div>\n                <div className=\"text-xs text-gray-400\">Active check</div>\n              </div>\n            </motion.div>\n\n            {/* Swapping State */}\n            <motion.div\n              whileHover={{ scale: 1.05 }}\n              className=\"flex items-center gap-3 p-3 bg-gray-800/50 rounded-lg border border-gray-700/50 hover:border-pink-500/50 transition-all duration-300\"\n            >\n              <motion.div\n                className=\"w-6 h-12 rounded bg-gradient-to-t from-pink-500 to-pink-300 shadow-[0_0_20px_rgba(255,0,102,0.8)]\"\n                animate={{\n                  boxShadow: [\n                    '0 0 20px rgba(255,0,102,0.8)',\n                    '0 0 35px rgba(255,0,102,1)',\n                    '0 0 20px rgba(255,0,102,0.8)'\n                  ],\n                  x: [-2, 2, -2]\n                }}\n                transition={{ duration: 1, repeat: Infinity }}\n              />\n              <div>\n                <div className=\"text-sm font-medium text-white\">Swapping</div>\n                <div className=\"text-xs text-gray-400\">Exchanging</div>\n              </div>\n            </motion.div>\n\n            {/* Sorted State */}\n            <motion.div\n              whileHover={{ scale: 1.05 }}\n              className=\"flex items-center gap-3 p-3 bg-gray-800/50 rounded-lg border border-gray-700/50 hover:border-green-500/50 transition-all duration-300\"\n            >\n              <motion.div\n                className=\"w-6 h-12 rounded bg-gradient-to-t from-green-500 to-green-300 shadow-[0_0_20px_rgba(0,255,0,0.8)]\"\n                animate={{\n                  boxShadow: [\n                    '0 0 20px rgba(0,255,0,0.8)',\n                    '0 0 30px rgba(0,255,0,1)',\n                    '0 0 20px rgba(0,255,0,0.8)'\n                  ]\n                }}\n                transition={{ duration: 2.5, repeat: Infinity }}\n              />\n              <div>\n                <div className=\"text-sm font-medium text-white\">Sorted</div>\n                <div className=\"text-xs text-gray-400\">Complete</div>\n              </div>\n            </motion.div>\n          </div>\n\n          {/* Additional Info */}\n          <motion.div\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            transition={{ delay: 1 }}\n            className=\"mt-4 pt-4 border-t border-gray-700/50\"\n          >\n            <div className=\"flex items-center justify-center gap-2 text-xs text-gray-400\">\n              <motion.div\n                className=\"w-2 h-2 rounded-full bg-purple-400\"\n                animate={{\n                  scale: [1, 1.5, 1],\n                  opacity: [0.5, 1, 0.5]\n                }}\n                transition={{ duration: 2, repeat: Infinity }}\n              />\n              <span>Watch the bars glow as the algorithm sorts in real-time</span>\n            </div>\n          </motion.div>\n        </motion.div>\n      </div>\n    </div>\n  );\n}",
  "error": null,
  "overall_score": 46,
  "code_quality_score": 14,
  "architecture_score": 11,
  "performance_score": 12,
  "accessibility_score": 9,
  "metadata": {
    "document_id": "eval_room_426d71a836a5",
    "prompt_category": "creative",
    "prompt_complexity": 9.0
  },
  "raw_response": {
    "document_id": "eval_room_426d71a836a5",
    "mode": "parallel",
    "prompt": "Build a captivating algorithm visualizer with neon colored bars, smooth height transitions, glowing comparison indicators, trail effects during swaps, and a futuristic dashboard design with animated controls",
    "content": "import { useState, useCallback } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Slider } from '@/components/ui/slider';\nimport { Play, Pause, RotateCcw, Zap, BarChart3 } from 'lucide-react';\nimport { motion } from 'framer-motion';\n\ninterface ArrayElement {\n  value: number;\n  id: string;\n  isComparing?: boolean;\n  isSwapping?: boolean;\n  isSorted?: boolean;\n}\n\ninterface AlgorithmStep {\n  array: ArrayElement[];\n  comparingIndices: number[];\n  swappingIndices: number[];\n  sortedIndices: number[];\n}\n\ntype AlgorithmType = 'bubble' | 'quick' | 'merge' | 'insertion';\n\nconst NEON_COLORS = [\n  '#00ffff',\n  '#ff00ff', \n  '#00ff00',\n  '#ffff00',\n  '#ff0066',\n  '#00ffaa'\n];\n\nconst mockAlgorithms = [\n  { id: 'bubble', name: 'Bubble Sort', complexity: 'O(n\u00b2)' },\n  { id: 'quick', name: 'Quick Sort', complexity: 'O(n log n)' },\n  { id: 'merge', name: 'Merge Sort', complexity: 'O(n log n)' },\n  { id: 'insertion', name: 'Insertion Sort', complexity: 'O(n\u00b2)' }\n];\n\nconst useAnimationLoop = (\n  steps: AlgorithmStep[],\n  currentStep: number,\n  speed: number[],\n  isPlaying: boolean,\n  onStepChange: (step: number) => void,\n  onComplete: () => void\n) => {\n  const [animationId, setAnimationId] = useState<NodeJS.Timeout | null>(null);\n\n  const stopAnimation = useCallback(() => {\n    if (animationId) {\n      clearTimeout(animationId);\n      setAnimationId(null);\n    }\n  }, [animationId]);\n\n  const animate = useCallback(() => {\n    if (currentStep < steps.length - 1) {\n      const delay = 1000 - speed[0] * 9.5; // Convert speed (0-100) to delay (1000ms-50ms)\n      const id = setTimeout(() => {\n        onStepChange(currentStep + 1);\n      }, delay);\n      setAnimationId(id);\n    } else {\n      onComplete();\n    }\n  }, [currentStep, steps.length, speed, onStepChange, onComplete]);\n\n  return { animate, stopAnimation };\n};\nexport default function AlgorithmVisualizer() {\n  const [array, setArray] = useState<ArrayElement[]>([]);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [speed, setSpeed] = useState([50]);\n  const [arraySize, setArraySize] = useState([20]);\n  const [selectedAlgorithm, setSelectedAlgorithm] = useState<AlgorithmType>('bubble');\n  const [currentStep, setCurrentStep] = useState(0);\n  const [steps, setSteps] = useState<AlgorithmStep[]>([]);\n\n  const generateRandomArray = useCallback(() => {\n    const newArray: ArrayElement[] = Array.from({ length: arraySize[0] }, (_, index) => ({\n      value: Math.floor(Math.random() * 100) + 1,\n      id: `element-${index}-${Date.now()}`,\n      isComparing: false,\n      isSwapping: false,\n      isSorted: false\n    }));\n    setArray(newArray);\n    setSteps([]);\n    setCurrentStep(0);\n    setIsPlaying(false);\n  }, [arraySize]);\n\n  const resetVisualization = useCallback(() => {\n\n\n    setIsPlaying(false);\n    setCurrentStep(0);\n    setSteps([]);\n    generateRandomArray();\n  }, [generateRandomArray]);\n\n  const startVisualization = useCallback(() => {\n    if (steps.length === 0) return;\n    if (currentStep >= steps.length - 1) {\n      setCurrentStep(0);\n    }\n    setIsPlaying(true);\n  \n  }, [steps, speed, currentStep]);\n\n  const pauseVisualization = useCallback(() => {\n\n    setIsPlaying(false);\n  }, []);\n\n  const generateSortingSteps = useCallback((algorithm: AlgorithmType) => {\n    const sortedArray = [...array];\n    const algorithmSteps: AlgorithmStep[] = [];\n\n    // Helper to create a step snapshot\n    const createStep = (\n      arr: ArrayElement[],\n      comparing: number[] = [],\n      swapping: number[] = [],\n      sorted: number[] = []\n    ) => {\n      algorithmSteps.push({\n        array: arr.map((el, idx) => ({\n          ...el,\n          isComparing: comparing.includes(idx),\n          isSwapping: swapping.includes(idx),\n          isSorted: sorted.includes(idx)\n        })),\n        comparingIndices: comparing,\n        swappingIndices: swapping,\n        sortedIndices: sorted\n      });\n    };\n\n    // Initial state\n    createStep(sortedArray);\n\n    switch (algorithm) {\n      case 'bubble': {\n        const n = sortedArray.length;\n        const sorted: number[] = [];\n        \n        for (let i = 0; i < n - 1; i++) {\n          for (let j = 0; j < n - i - 1; j++) {\n            // Comparing\n            createStep(sortedArray, [j, j + 1], [], sorted);\n            \n            if (sortedArray[j].value > sortedArray[j + 1].value) {\n              // Swapping\n              createStep(sortedArray, [], [j, j + 1], sorted);\n              [sortedArray[j], sortedArray[j + 1]] = [sortedArray[j + 1], sortedArray[j]];\n              createStep(sortedArray, [], [j, j + 1], sorted);\n            }\n          }\n          sorted.push(n - i - 1);\n          createStep(sortedArray, [], [], sorted);\n        }\n        sorted.push(0);\n        createStep(sortedArray, [], [], sorted);\n        break;\n      }\n\n      case 'insertion': {\n        const sorted: number[] = [0];\n        createStep(sortedArray, [], [], sorted);\n        \n        for (let i = 1; i < sortedArray.length; i++) {\n          const key = sortedArray[i];\n          let j = i - 1;\n          \n          createStep(sortedArray, [i], [], sorted);\n          \n          while (j >= 0 && sortedArray[j].value > key.value) {\n            createStep(sortedArray, [j, j + 1], [], sorted);\n            createStep(sortedArray, [], [j, j + 1], sorted);\n            sortedArray[j + 1] = sortedArray[j];\n            createStep(sortedArray, [], [j, j + 1], sorted);\n            j--;\n          }\n          \n          sortedArray[j + 1] = key;\n          sorted.push(i);\n          createStep(sortedArray, [], [], sorted);\n        }\n        break;\n      }\n\n      case 'quick': {\n        const sorted: number[] = [];\n        \n        const partition = (low: number, high: number): number => {\n          const pivot = sortedArray[high].value;\n          createStep(sortedArray, [high], [], sorted);\n          let i = low - 1;\n          \n          for (let j = low; j < high; j++) {\n            createStep(sortedArray, [j, high], [], sorted);\n            \n            if (sortedArray[j].value < pivot) {\n              i++;\n              if (i !== j) {\n                createStep(sortedArray, [], [i, j], sorted);\n                [sortedArray[i], sortedArray[j]] = [sortedArray[j], sortedArray[i]];\n                createStep(sortedArray, [], [i, j], sorted);\n              }\n            }\n          }\n          \n          createStep(sortedArray, [], [i + 1, high], sorted);\n          [sortedArray[i + 1], sortedArray[high]] = [sortedArray[high], sortedArray[i + 1]];\n          createStep(sortedArray, [], [i + 1, high], sorted);\n          sorted.push(i + 1);\n          createStep(sortedArray, [], [], sorted);\n          \n          return i + 1;\n        };\n        \n        const quickSort = (low: number, high: number) => {\n          if (low < high) {\n            const pi = partition(low, high);\n            quickSort(low, pi - 1);\n            quickSort(pi + 1, high);\n          } else if (low === high) {\n            sorted.push(low);\n            createStep(sortedArray, [], [], sorted);\n          }\n        };\n        \n        quickSort(0, sortedArray.length - 1);\n        break;\n      }\n\n      case 'merge': {\n        const sorted: number[] = [];\n        \n        const merge = (left: number, mid: number, right: number) => {\n          const leftArr = sortedArray.slice(left, mid + 1);\n          const rightArr = sortedArray.slice(mid + 1, right + 1);\n          \n          let i = 0, j = 0, k = left;\n          \n          while (i < leftArr.length && j < rightArr.length) {\n            createStep(sortedArray, [left + i, mid + 1 + j], [], sorted);\n            \n            if (leftArr[i].value <= rightArr[j].value) {\n              createStep(sortedArray, [], [k], sorted);\n              sortedArray[k] = leftArr[i];\n              createStep(sortedArray, [], [k], sorted);\n              i++;\n            } else {\n              createStep(sortedArray, [], [k], sorted);\n              sortedArray[k] = rightArr[j];\n              createStep(sortedArray, [], [k], sorted);\n              j++;\n            }\n            k++;\n          }\n          \n          while (i < leftArr.length) {\n            createStep(sortedArray, [], [k], sorted);\n            sortedArray[k] = leftArr[i];\n            createStep(sortedArray, [], [k], sorted);\n            i++;\n            k++;\n          }\n          \n          while (j < rightArr.length) {\n            createStep(sortedArray, [], [k], sorted);\n            sortedArray[k] = rightArr[j];\n            createStep(sortedArray, [], [k], sorted);\n            j++;\n            k++;\n          }\n          \n          for (let idx = left; idx <= right; idx++) {\n            if (!sorted.includes(idx)) {\n              sorted.push(idx);\n            }\n          }\n          createStep(sortedArray, [], [], sorted);\n        };\n        \n        const mergeSort = (left: number, right: number) => {\n          if (left < right) {\n            const mid = Math.floor((left + right) / 2);\n            mergeSort(left, mid);\n            mergeSort(mid + 1, right);\n            merge(left, mid, right);\n          } else if (left === right && !sorted.includes(left)) {\n            sorted.push(left);\n            createStep(sortedArray, [], [], sorted);\n          }\n        };\n        \n        mergeSort(0, sortedArray.length - 1);\n        break;\n      }\n    }\n\n    setSteps(algorithmSteps);\n    setCurrentStep(0);\n  }, [array]);\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-gray-900 via-purple-900 to-gray-900 p-8\">\n      <div className=\"max-w-7xl mx-auto space-y-8\">\n        <motion.div\n          initial={{ opacity: 0, y: -20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.8 }}\n          className=\"text-center space-y-4\"\n        >\n          <motion.h1\n            className=\"text-6xl font-bold bg-gradient-to-r from-cyan-400 via-purple-400 to-pink-400 bg-clip-text text-transparent\"\n            animate={{\n              textShadow: [\n                '0 0 20px rgba(0, 255, 255, 0.5)',\n                '0 0 40px rgba(255, 0, 255, 0.5)',\n                '0 0 20px rgba(0, 255, 255, 0.5)'\n              ]\n            }}\n            transition={{ duration: 2, repeat: Infinity }}\n          >\n            Algorithm Visualizer\n          </motion.h1>\n          \n          <div className=\"flex items-center justify-center gap-4\">\n            <motion.div\n              initial={{ scale: 0 }}\n              animate={{ scale: 1 }}\n              transition={{ delay: 0.3, type: 'spring' }}\n              className=\"px-6 py-2 bg-purple-500/20 backdrop-blur-sm border border-purple-400/50 rounded-full\"\n            >\n              <span className=\"text-2xl font-semibold text-purple-300\">\n                {mockAlgorithms.find(a => a.id === selectedAlgorithm)?.name || 'Bubble Sort'}\n              </span>\n            </motion.div>\n            \n            <motion.div\n              initial={{ scale: 0 }}\n              animate={{ scale: 1 }}\n              transition={{ delay: 0.5, type: 'spring' }}\n              className=\"px-4 py-2 bg-cyan-500/20 backdrop-blur-sm border border-cyan-400/50 rounded-full relative overflow-hidden\"\n            >\n              <motion.div\n                className=\"absolute inset-0 bg-gradient-to-r from-transparent via-cyan-400/20 to-transparent\"\n                animate={{ x: ['-100%', '100%'] }}\n                transition={{ duration: 2, repeat: Infinity }}\n              />\n              <div className=\"relative flex items-center gap-2\">\n                <BarChart3 className=\"w-4 h-4 text-cyan-400\" />\n                <span className=\"text-sm font-mono text-cyan-300\">\n                  {mockAlgorithms.find(a => a.id === selectedAlgorithm)?.complexity || 'O(n\u00b2)'}\n                </span>\n              </div>\n            </motion.div>\n          </div>\n        </motion.div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-6\">\n          <div className=\"lg:col-span-1 space-y-6\">\n            <motion.div\n              initial={{ opacity: 0, x: -50 }}\n              animate={{ opacity: 1, x: 0 }}\n              transition={{ delay: 0.2 }}\n              className=\"bg-gray-900/50 backdrop-blur-lg border border-purple-500/30 rounded-xl p-6 shadow-[0_0_30px_rgba(168,85,247,0.3)] hover:shadow-[0_0_50px_rgba(168,85,247,0.5)] transition-all duration-300\"\n            >\n              <div className=\"space-y-4\">\n                <div className=\"flex items-center gap-2 text-purple-400 font-semibold mb-4\">\n                  <BarChart3 className=\"w-5 h-5\" />\n                  <span className=\"text-sm uppercase tracking-wider\">Statistics</span>\n                </div>\n\n                <div className=\"space-y-4\">\n                  {/* Comparisons Counter */}\n                  <motion.div\n                    className=\"relative overflow-hidden rounded-lg bg-gradient-to-br from-cyan-500/10 to-cyan-600/5 border border-cyan-500/30 p-4\"\n                    whileHover={{ scale: 1.02 }}\n                    transition={{ type: 'spring', stiffness: 400 }}\n                  >\n                    <motion.div\n                      className=\"absolute inset-0 bg-gradient-to-r from-transparent via-cyan-400/10 to-transparent\"\n                      animate={{ x: ['-100%', '100%'] }}\n                      transition={{ duration: 3, repeat: Infinity, ease: 'linear' }}\n                    />\n                    <div className=\"relative space-y-2\">\n                      <div className=\"flex items-center justify-between\">\n                        <span className=\"text-xs text-cyan-300 uppercase tracking-wide\">Comparisons</span>\n                        <motion.div\n                          className=\"w-2 h-2 rounded-full bg-cyan-400\"\n                          animate={{\n                            boxShadow: [\n                              '0 0 5px rgba(0, 255, 255, 0.5)',\n                              '0 0 20px rgba(0, 255, 255, 0.8)',\n                              '0 0 5px rgba(0, 255, 255, 0.5)'\n                            ]\n                          }}\n                          transition={{ duration: 2, repeat: Infinity }}\n                        />\n                      </div>\n                      <motion.div\n                        className=\"text-3xl font-bold text-cyan-400 font-mono\"\n                        key={steps[currentStep]?.comparingIndices.length || 0}\n                        initial={{ scale: 1.2, opacity: 0 }}\n                        animate={{ scale: 1, opacity: 1 }}\n                        transition={{ type: 'spring', stiffness: 300 }}\n                      >\n                        {currentStep}\n                      </motion.div>\n                    </div>\n                  </motion.div>\n\n                  {/* Swaps Counter */}\n                  <motion.div\n                    className=\"relative overflow-hidden rounded-lg bg-gradient-to-br from-pink-500/10 to-pink-600/5 border border-pink-500/30 p-4\"\n                    whileHover={{ scale: 1.02 }}\n                    transition={{ type: 'spring', stiffness: 400 }}\n                  >\n                    <motion.div\n                      className=\"absolute inset-0 bg-gradient-to-r from-transparent via-pink-400/10 to-transparent\"\n                      animate={{ x: ['-100%', '100%'] }}\n                      transition={{ duration: 3, repeat: Infinity, ease: 'linear', delay: 1 }}\n                    />\n                    <div className=\"relative space-y-2\">\n                      <div className=\"flex items-center justify-between\">\n                        <span className=\"text-xs text-pink-300 uppercase tracking-wide\">Swaps</span>\n                        <motion.div\n                          className=\"w-2 h-2 rounded-full bg-pink-400\"\n                          animate={{\n                            boxShadow: [\n                              '0 0 5px rgba(255, 0, 255, 0.5)',\n                              '0 0 20px rgba(255, 0, 255, 0.8)',\n                              '0 0 5px rgba(255, 0, 255, 0.5)'\n                            ]\n                          }}\n                          transition={{ duration: 2, repeat: Infinity, delay: 0.5 }}\n                        />\n                      </div>\n                      <motion.div\n                        className=\"text-3xl font-bold text-pink-400 font-mono\"\n                        key={steps[currentStep]?.swappingIndices.length || 0}\n                        initial={{ scale: 1.2, opacity: 0 }}\n                        animate={{ scale: 1, opacity: 1 }}\n                        transition={{ type: 'spring', stiffness: 300 }}\n                      >\n                        {steps[currentStep]?.swappingIndices.length || 0}\n                      </motion.div>\n                    </div>\n                  </motion.div>\n\n                  {/* Progress Indicator */}\n                  <motion.div\n                    className=\"relative overflow-hidden rounded-lg bg-gradient-to-br from-purple-500/10 to-purple-600/5 border border-purple-500/30 p-4\"\n                    whileHover={{ scale: 1.02 }}\n                    transition={{ type: 'spring', stiffness: 400 }}\n                  >\n                    <motion.div\n                      className=\"absolute inset-0 bg-gradient-to-r from-transparent via-purple-400/10 to-transparent\"\n                      animate={{ x: ['-100%', '100%'] }}\n                      transition={{ duration: 3, repeat: Infinity, ease: 'linear', delay: 2 }}\n                    />\n                    <div className=\"relative space-y-3\">\n                      <div className=\"flex items-center justify-between\">\n                        <span className=\"text-xs text-purple-300 uppercase tracking-wide\">Progress</span>\n                        <motion.div\n                          className=\"w-2 h-2 rounded-full bg-purple-400\"\n                          animate={{\n                            boxShadow: [\n                              '0 0 5px rgba(168, 85, 247, 0.5)',\n                              '0 0 20px rgba(168, 85, 247, 0.8)',\n                              '0 0 5px rgba(168, 85, 247, 0.5)'\n                            ]\n                          }}\n                          transition={{ duration: 2, repeat: Infinity, delay: 1 }}\n                        />\n                      </div>\n                      <div className=\"flex items-baseline gap-2\">\n                        <motion.div\n                          className=\"text-3xl font-bold text-purple-400 font-mono\"\n                          key={steps.length > 0 ? Math.round((currentStep / (steps.length - 1)) * 100) : 0}\n                          initial={{ scale: 1.2, opacity: 0 }}\n                          animate={{ scale: 1, opacity: 1 }}\n                          transition={{ type: 'spring', stiffness: 300 }}\n                        >\n                          {steps.length > 0 ? Math.round((currentStep / (steps.length - 1)) * 100) : 0}\n                        </motion.div>\n                        <span className=\"text-lg text-purple-300\">%</span>\n                      </div>\n                      \n                      {/* Progress Bar */}\n                      <div className=\"relative h-2 bg-gray-800 rounded-full overflow-hidden\">\n                        <motion.div\n                          className=\"absolute inset-y-0 left-0 bg-gradient-to-r from-purple-500 via-pink-500 to-cyan-500 rounded-full\"\n                          initial={{ width: '0%' }}\n                          animate={{\n                            width: steps.length > 0 ? `${(currentStep / (steps.length - 1)) * 100}%` : '0%'\n                          }}\n                          transition={{ duration: 0.3, ease: 'easeOut' }}\n                        />\n                        <motion.div\n                          className=\"absolute inset-0 bg-gradient-to-r from-transparent via-white/30 to-transparent\"\n                          animate={{ x: ['-100%', '100%'] }}\n                          transition={{ duration: 1.5, repeat: Infinity, ease: 'linear' }}\n                        />\n                      </div>\n                    </div>\n                  </motion.div>\n\n                  {/* Array Elements Sorted */}\n                  <motion.div\n                    className=\"relative overflow-hidden rounded-lg bg-gradient-to-br from-green-500/10 to-green-600/5 border border-green-500/30 p-4\"\n                    whileHover={{ scale: 1.02 }}\n                    transition={{ type: 'spring', stiffness: 400 }}\n                  >\n                    <motion.div\n                      className=\"absolute inset-0 bg-gradient-to-r from-transparent via-green-400/10 to-transparent\"\n                      animate={{ x: ['-100%', '100%'] }}\n                      transition={{ duration: 3, repeat: Infinity, ease: 'linear', delay: 1.5 }}\n                    />\n                    <div className=\"relative space-y-2\">\n                      <div className=\"flex items-center justify-between\">\n                        <span className=\"text-xs text-green-300 uppercase tracking-wide\">Sorted Elements</span>\n                        <motion.div\n                          className=\"w-2 h-2 rounded-full bg-green-400\"\n                          animate={{\n                            boxShadow: [\n                              '0 0 5px rgba(0, 255, 0, 0.5)',\n                              '0 0 20px rgba(0, 255, 0, 0.8)',\n                              '0 0 5px rgba(0, 255, 0, 0.5)'\n                            ]\n                          }}\n                          transition={{ duration: 2, repeat: Infinity, delay: 1.5 }}\n                        />\n                      </div>\n                      <div className=\"flex items-baseline gap-2\">\n                        <motion.div\n                          className=\"text-3xl font-bold text-green-400 font-mono\"\n                          key={steps[currentStep]?.sortedIndices.length || 0}\n                          initial={{ scale: 1.2, opacity: 0 }}\n                          animate={{ scale: 1, opacity: 1 }}\n                          transition={{ type: 'spring', stiffness: 300 }}\n                        >\n                          {steps[currentStep]?.sortedIndices.length || 0}\n                        </motion.div>\n                        <span className=\"text-sm text-green-300/70\">/ {array.length}</span>\n                      </div>\n                    </div>\n                  </motion.div>\n                </div>\n              </div>\n            </motion.div>\n            <motion.div\n              initial={{ opacity: 0, x: -50 }}\n              animate={{ opacity: 1, x: 0 }}\n              className=\"bg-gray-900/50 backdrop-blur-lg border border-cyan-500/30 rounded-xl p-6 shadow-[0_0_30px_rgba(0,255,255,0.3)] hover:shadow-[0_0_50px_rgba(0,255,255,0.5)] transition-all duration-300\"\n            >\n              <div className=\"space-y-6\">\n                {/* Algorithm Selection */}\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center gap-2 text-cyan-400 font-semibold\">\n                    <Zap className=\"w-4 h-4\" />\n                    <span className=\"text-sm uppercase tracking-wider\">Algorithm</span>\n                  </div>\n                  <div className=\"grid grid-cols-1 gap-2\">\n                    {mockAlgorithms.map((algo) => (\n                      <motion.button\n                        key={algo.id}\n                        whileHover={{ scale: 1.02 }}\n                        whileTap={{ scale: 0.98 }}\n                        onClick={() => {\n                          setSelectedAlgorithm(algo.id as AlgorithmType);\n                          generateSortingSteps(algo.id as AlgorithmType);\n                        }}\n                        disabled={isPlaying}\n                        className={`p-3 rounded-lg border transition-all duration-300 text-left ${\n                          selectedAlgorithm === algo.id\n                            ? 'bg-cyan-500/20 border-cyan-400 shadow-[0_0_20px_rgba(0,255,255,0.4)]'\n                            : 'bg-gray-800/50 border-gray-700 hover:border-cyan-500/50 hover:bg-gray-800'\n                        } disabled:opacity-50 disabled:cursor-not-allowed`}\n                      >\n                        <div className=\"font-medium text-white text-sm\">{algo.name}</div>\n                        <div className=\"text-xs text-gray-400 mt-1\">{algo.complexity}</div>\n                      </motion.button>\n                    ))}\n                  </div>\n                </div>\n\n                {/* Array Size Control */}\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center gap-2 text-purple-400 font-semibold\">\n                      <BarChart3 className=\"w-4 h-4\" />\n                      <span className=\"text-sm uppercase tracking-wider\">Array Size</span>\n                    </div>\n                    <span className=\"text-white font-mono text-lg\">{arraySize[0]}</span>\n                  </div>\n                  <Slider\n                    value={arraySize}\n                    onValueChange={setArraySize}\n                    min={5}\n                    max={50}\n                    step={1}\n                    disabled={isPlaying}\n                    className=\"cursor-pointer\"\n                  />\n                </div>\n\n                {/* Speed Control */}\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center gap-2 text-pink-400 font-semibold\">\n                      <Zap className=\"w-4 h-4\" />\n                      <span className=\"text-sm uppercase tracking-wider\">Speed</span>\n                    </div>\n                    <span className=\"text-white font-mono text-lg\">{speed[0]}%</span>\n                  </div>\n                  <Slider\n                    value={speed}\n                    onValueChange={setSpeed}\n                    min={10}\n                    max={100}\n                    step={10}\n                    className=\"cursor-pointer\"\n                  />\n                </div>\n\n                {/* Control Buttons */}\n                <div className=\"space-y-3 pt-4 border-t border-gray-700/50\">\n                  <Button\n                    onClick={isPlaying ? pauseVisualization : startVisualization}\n                    disabled={steps.length === 0 || (currentStep >= steps.length && !isPlaying)}\n                    className=\"w-full bg-gradient-to-r from-cyan-500 to-blue-500 hover:from-cyan-400 hover:to-blue-400 text-white font-semibold shadow-[0_0_20px_rgba(0,255,255,0.5)] hover:shadow-[0_0_30px_rgba(0,255,255,0.7)] transition-all duration-300\"\n                  >\n                    {isPlaying ? (\n                      <>\n                        <Pause className=\"w-4 h-4 mr-2\" />\n                        Pause\n                      </>\n                    ) : (\n                      <>\n                        <Play className=\"w-4 h-4 mr-2\" />\n                        {currentStep >= steps.length ? 'Start' : 'Resume'}\n                      </>\n                    )}\n                  </Button>\n\n                  <Button\n                    onClick={resetVisualization}\n                    variant=\"outline\"\n                    className=\"w-full border-purple-500/50 text-purple-400 hover:bg-purple-500/20 hover:border-purple-400 hover:text-purple-300 shadow-[0_0_15px_rgba(168,85,247,0.3)] hover:shadow-[0_0_25px_rgba(168,85,247,0.5)] transition-all duration-300\"\n                  >\n                    <RotateCcw className=\"w-4 h-4 mr-2\" />\n                    Reset\n                  </Button>\n                </div>\n\n                {/* Stats Display */}\n                <div className=\"pt-4 border-t border-gray-700/50 space-y-2\">\n                  <div className=\"flex justify-between text-sm\">\n                    <span className=\"text-gray-400\">Current Step:</span>\n                    <span className=\"text-white font-mono\">{currentStep} / {steps.length}</span>\n                  </div>\n                  <div className=\"flex justify-between text-sm\">\n                    <span className=\"text-gray-400\">Array Length:</span>\n                    <span className=\"text-white font-mono\">{array.length}</span>\n                  </div>\n                </div>\n              </div>\n            </motion.div>\n            \n            <div className=\"bg-gray-900/50 backdrop-blur-lg border border-cyan-500/30 rounded-xl p-6 shadow-2xl shadow-cyan-500/20\">\n              <div className=\"space-y-6\">\n                <div>\n                  <h3 className=\"text-sm font-semibold text-cyan-400 mb-3 flex items-center gap-2\">\n                    <Zap className=\"w-4 h-4\" />\n                    Algorithm\n                  </h3>\n                  <div className=\"grid grid-cols-1 gap-2\">\n                    {mockAlgorithms.map((algo) => (\n                      <motion.button\n                        key={algo.id}\n                        onClick={() => setSelectedAlgorithm(algo.id as AlgorithmType)}\n                        className={`relative p-3 rounded-lg text-left transition-all duration-300 ${\n                          selectedAlgorithm === algo.id\n                            ? 'bg-cyan-500/20 border-2 border-cyan-400 shadow-lg shadow-cyan-500/50'\n                            : 'bg-gray-800/50 border border-gray-700 hover:border-cyan-500/50 hover:shadow-md hover:shadow-cyan-500/30'\n                        }`}\n                        whileHover={{ scale: 1.02 }}\n                        whileTap={{ scale: 0.98 }}\n                      >\n                        <div className=\"flex flex-col gap-1\">\n                          <span className={`text-sm font-medium ${\n                            selectedAlgorithm === algo.id ? 'text-cyan-300' : 'text-gray-300'\n                          }`}>\n                            {algo.name}\n                          </span>\n                          <span className={`text-xs ${\n                            selectedAlgorithm === algo.id ? 'text-cyan-400/80' : 'text-gray-500'\n                          }`}>\n                            {algo.complexity}\n                          </span>\n                        </div>\n                        {selectedAlgorithm === algo.id && (\n                          <motion.div\n                            className=\"absolute inset-0 rounded-lg bg-cyan-400/10\"\n                            layoutId=\"algorithmSelector\"\n                            transition={{ type: \"spring\", bounce: 0.2, duration: 0.6 }}\n                          />\n                        )}\n                      </motion.button>\n                    ))}\n                  </div>\n                </div></parameter>\n</invoke>\n\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <label className=\"text-cyan-400 text-sm font-medium flex items-center gap-2\">\n                      <Zap className=\"w-4 h-4\" />\n                      Speed\n                    </label>\n                    <span className=\"text-cyan-300 text-xs\">{speed[0]}ms</span>\n                  </div>\n                  <Slider\n                    value={speed}\n                    onValueChange={setSpeed}\n                    min={10}\n                    max={200}\n                    step={10}\n                    className=\"[&_[role=slider]]:bg-cyan-400 [&_[role=slider]]:border-cyan-300 [&_[role=slider]]:shadow-[0_0_15px_rgba(34,211,238,0.8)] [&_[role=slider]]:hover:shadow-[0_0_25px_rgba(34,211,238,1)] [&_[role=slider]]:transition-shadow [&_.relative]:bg-gray-700/50 [&_.relative]:border [&_.relative]:border-cyan-500/30 [&_.bg-primary]:bg-gradient-to-r [&_.bg-primary]:from-cyan-500 [&_.bg-primary]:to-purple-500 [&_.bg-primary]:shadow-[0_0_10px_rgba(34,211,238,0.5)]\"\n                  />\n                </div>\n\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <label className=\"text-cyan-400 text-sm font-medium flex items-center gap-2\">\n                      <BarChart3 className=\"w-4 h-4\" />\n                      Array Size\n                    </label>\n                    <span className=\"text-cyan-300 text-xs\">{arraySize[0]}</span>\n                  </div>\n                  <Slider\n                    value={arraySize}\n                    onValueChange={setArraySize}\n                    min={5}\n                    max={50}\n                    step={1}\n                    className=\"[&_[role=slider]]:bg-gradient-to-r [&_[role=slider]]:from-purple-500 [&_[role=slider]]:to-pink-500 [&_[role=slider]]:border-2 [&_[role=slider]]:border-purple-300 [&_[role=slider]]:shadow-lg [&_[role=slider]]:shadow-purple-500/50 [&_[role=slider]]:transition-all [&_[role=slider]]:hover:shadow-purple-500/80 [&_[role=slider]]:hover:scale-110 [&>span]:bg-gradient-to-r [&>span]:from-purple-500/30 [&>span]:to-pink-500/30 [&>span]:h-2 [&>span]:rounded-full\"\n                  />\n                </div>\n\n                <div className=\"flex gap-3 pt-4\"><motion.div\n                    whileTap={{ rotate: 360 }}\n                    transition={{ duration: 0.6, ease: \"easeInOut\" }}\n                    className=\"flex-1\"\n                  >\n                    <Button\n                      onClick={resetVisualization}\n                      className=\"w-full relative overflow-hidden bg-gradient-to-r from-pink-500 to-purple-500 hover:from-pink-400 hover:to-purple-400 text-white font-semibold py-6 rounded-lg shadow-lg shadow-pink-500/50 hover:shadow-pink-500/80 transition-all duration-300 border-2 border-pink-400 group\"\n                    >\n                      <motion.div\n                        className=\"absolute inset-0 bg-gradient-to-r from-transparent via-white/30 to-transparent\"\n                        animate={{ \n                          x: ['-100%', '100%'],\n                          opacity: [0.5, 1, 0.5]\n                        }}\n                        transition={{ \n                          duration: 1.5, \n                          repeat: Infinity, \n                          ease: 'linear' \n                        }}\n                      />\n                      <span className=\"relative flex items-center justify-center gap-2\">\n                        <motion.div\n                          animate={{ \n                            rotate: [0, 360],\n                            scale: [1, 1.1, 1]\n                          }}\n                          transition={{ \n                            duration: 3, \n                            repeat: Infinity,\n                            ease: \"linear\"\n                          }}\n                        >\n                          <RotateCcw className=\"w-5 h-5\" />\n                        </motion.div>\n                        Reset\n                      </span>\n                      <motion.div\n                        className=\"absolute inset-0 rounded-lg\"\n                        animate={{\n                          boxShadow: [\n                            '0 0 20px rgba(236, 72, 153, 0.5)',\n                            '0 0 40px rgba(236, 72, 153, 0.8)',\n                            '0 0 20px rgba(236, 72, 153, 0.5)'\n                          ]\n                        }}\n                        transition={{ duration: 2, repeat: Infinity }}\n                      />\n                    </Button>\n                  </motion.div>\n\n                  <Button\n                    onClick={generateRandomArray}\n                    className=\"flex-1 relative overflow-hidden bg-gradient-to-r from-purple-500 to-indigo-500 hover:from-purple-400 hover:to-indigo-400 text-white font-semibold py-6 rounded-lg shadow-lg shadow-purple-500/50 hover:shadow-purple-500/80 transition-all duration-300 border-2 border-purple-400\"\n                  >\n                    <motion.div\n                      className=\"absolute inset-0 bg-gradient-to-r from-transparent via-white/20 to-transparent\"\n                      animate={{ x: ['-100%', '100%'] }}\n                      transition={{ duration: 2, repeat: Infinity, ease: 'linear' }}\n                    />\n                    <span className=\"relative flex items-center justify-center gap-2\">\n                      <Zap className=\"w-5 h-5\" />\n                      New Array\n                    </span>\n                  </Button>\n\n                  <Button\n                    onClick={isPlaying ? pauseVisualization : startVisualization}\n                    disabled={array.length === 0 || (steps.length === 0 && !isPlaying)}\n                    className=\"flex-1 relative overflow-hidden group bg-gradient-to-r from-cyan-500 to-purple-500 hover:from-cyan-400 hover:to-purple-400 border-0 shadow-lg shadow-cyan-500/50 hover:shadow-cyan-500/80 transition-all duration-300\"\n                  >\n                    <motion.div\n                      className=\"absolute inset-0 bg-gradient-to-r from-cyan-400/0 via-white/20 to-cyan-400/0\"\n                      animate={{\n                        x: ['-100%', '100%']\n                      }}\n                      transition={{\n                        duration: 2,\n                        repeat: Infinity,\n                        ease: 'linear'\n                      }}\n                    />\n                    <motion.div\n                      className=\"relative flex items-center justify-center gap-2\"\n                      whileHover={{ scale: 1.05 }}\n                      whileTap={{ scale: 0.95 }}\n                    >\n                      <motion.div\n                        key={isPlaying ? 'pause' : 'play'}\n                        initial={{ scale: 0, rotate: -180 }}\n                        animate={{ scale: 1, rotate: 0 }}\n                        exit={{ scale: 0, rotate: 180 }}\n                        transition={{ duration: 0.3, type: 'spring' }}\n                      >\n                        {isPlaying ? (\n                          <Pause className=\"w-4 h-4 fill-current\" />\n                        ) : (\n                          <Play className=\"w-4 h-4 fill-current\" />\n                        )}\n                      </motion.div>\n                      <span className=\"font-semibold\">\n                        {isPlaying ? 'Pause' : 'Play'}\n                      </span>\n                    </motion.div>\n                  </Button>\n                  \n                </div>\n              </div>\n            </div>\n\n            {/* TODO:StatsPanel Real-time statistics panel showing comparisons, swaps, and progress */}\n          </div>\n\n          <div className=\"lg:col-span-3\">\n            <div className=\"bg-gray-900/50 backdrop-blur-lg border border-purple-500/30 rounded-xl p-8 shadow-2xl shadow-purple-500/20 min-h-[600px]\">\n              \n              \n              <div className=\"relative h-full flex items-end justify-center gap-1\">\n                {(steps.length > 0 && steps[currentStep]?.array || array).map((element, index) => {\n                  const maxValue = Math.max(...(steps.length > 0 && steps[currentStep]?.array || array).map(el => el.value));\n                  const heightPercentage = (element.value / maxValue) * 100;\n                  const colorIndex = index % NEON_COLORS.length;\n                  const neonColor = NEON_COLORS[colorIndex];\n\n                  return (\n                    <motion.div\n                      key={element.id}\n                      layout\n                      initial={{ height: 0, opacity: 0 }}\n                      animate={{\n                        height: `${heightPercentage}%`,\n                        opacity: 1,\n                        scale: element.isSwapping ? 1.1 : 1,\n                        y: element.isSwapping ? -10 : 0,\n                      }}\n                      transition={{\n                        height: { duration: 0.5, ease: 'easeOut' },\n                        scale: { duration: 0.3, ease: 'easeInOut' },\n                        y: { duration: 0.3, ease: 'easeInOut' },\n                        layout: { duration: 0.5, ease: 'easeInOut' }\n                      }}\n                      className=\"relative flex-1 min-w-[8px] max-w-[60px] rounded-t-lg\"\n                      style={{\n                        backgroundColor: element.isSorted \n                          ? '#00ff00'\n                          : element.isSwapping \n                          ? '#ff0066'\n                          : element.isComparing \n                          ? '#ffff00'\n                          : neonColor,\n                        boxShadow: element.isSorted\n                          ? '0 0 20px rgba(0, 255, 0, 0.8), 0 0 40px rgba(0, 255, 0, 0.5), inset 0 0 20px rgba(0, 255, 0, 0.3)'\n                          : element.isSwapping\n                          ? '0 0 30px rgba(255, 0, 102, 0.9), 0 0 60px rgba(255, 0, 102, 0.6), inset 0 0 20px rgba(255, 0, 102, 0.4)'\n                          : element.isComparing\n                          ? '0 0 25px rgba(255, 255, 0, 0.8), 0 0 50px rgba(255, 255, 0, 0.5), inset 0 0 20px rgba(255, 255, 0, 0.3)'\n                          : `0 0 15px ${neonColor}80, 0 0 30px ${neonColor}40, inset 0 0 15px ${neonColor}30`,\n                      }}\n                    >\n                      {/* Animated glow pulse effect */}\n                      {(element.isComparing || element.isSwapping) && (\n                        <motion.div\n                          className=\"absolute inset-0 rounded-t-lg\"\n                          animate={{\n                            boxShadow: [\n                              `0 0 20px ${element.isSwapping ? '#ff0066' : '#ffff00'}80`,\n                              `0 0 40px ${element.isSwapping ? '#ff0066' : '#ffff00'}ff`,\n                              `0 0 20px ${element.isSwapping ? '#ff0066' : '#ffff00'}80`,\n                            ],\n                          }}\n                          transition={{\n                            duration: 0.6,\n                            repeat: Infinity,\n                            ease: 'easeInOut',\n                          }}\n                        />\n                      )}\n\n                      {/* Shimmer effect */}\n                      <motion.div\n                        className=\"absolute inset-0 rounded-t-lg overflow-hidden\"\n                        initial={{ opacity: 0 }}\n                        animate={{ opacity: element.isSorted ? 0.6 : 0.3 }}\n                      >\n                        <motion.div\n                          className=\"absolute inset-0 bg-gradient-to-r from-transparent via-white to-transparent\"\n                          animate={{\n                            x: ['-100%', '200%'],\n                          }}\n                          transition={{\n                            duration: 2,\n                            repeat: Infinity,\n                            ease: 'linear',\n                            repeatDelay: 1,\n                          }}\n                          style={{ width: '50%' }}\n                        />\n                      </motion.div>\n\n                      {/* Value label */}\n                      <motion.div\n                        className=\"absolute -bottom-6 left-1/2 transform -translate-x-1/2 text-xs font-mono font-bold whitespace-nowrap\"\n                        initial={{ opacity: 0 }}\n                        animate={{ \n                          opacity: arraySize[0] <= 25 ? 1 : 0,\n                          color: element.isSorted \n                            ? '#00ff00'\n                            : element.isSwapping \n                            ? '#ff0066'\n                            : element.isComparing \n                            ? '#ffff00'\n                            : '#ffffff',\n                        }}\n                        style={{\n                          textShadow: element.isSorted\n                            ? '0 0 10px rgba(0, 255, 0, 0.8)'\n                            : element.isSwapping\n                            ? '0 0 10px rgba(255, 0, 102, 0.8)'\n                            : element.isComparing\n                            ? '0 0 10px rgba(255, 255, 0, 0.8)'\n                            : '0 0 5px rgba(255, 255, 255, 0.5)',\n                        }}\n                      >\n                        {element.value}\n                      </motion.div>\n\n                      {/* Swap trail effect */}\n                      {element.isSwapping && (\n                        <>\n                          <motion.div\n                            className=\"absolute inset-0 rounded-t-lg\"\n                            initial={{ opacity: 0.8, scale: 1 }}\n                            animate={{ \n                              opacity: 0, \n                              scale: 1.5,\n                            }}\n                            transition={{\n                              duration: 0.6,\n                              repeat: Infinity,\n                            }}\n                            style={{\n                              backgroundColor: '#ff0066',\n                              filter: 'blur(8px)',\n                            }}\n                          />\n                          <motion.div\n                            className=\"absolute -top-8 left-1/2 transform -translate-x-1/2\"\n                            animate={{\n                              y: [0, -10, 0],\n                              opacity: [0, 1, 0],\n                            }}\n                            transition={{\n                              duration: 0.8,\n                              repeat: Infinity,\n                            }}\n                          >\n                            <div className=\"w-2 h-2 bg-pink-400 rounded-full shadow-[0_0_10px_rgba(255,0,102,0.8)]\" />\n                          </motion.div>\n                        </>\n                      )}\n\n                      {/* Sorted checkmark indicator */}\n                      {element.isSorted && (\n                        <motion.div\n                          className=\"absolute -top-8 left-1/2 transform -translate-x-1/2\"\n                          initial={{ scale: 0, rotate: -180 }}\n                          animate={{ scale: 1, rotate: 0 }}\n                          transition={{ type: 'spring', stiffness: 200, damping: 15 }}\n                        >\n                          <div className=\"w-6 h-6 bg-green-500 rounded-full flex items-center justify-center shadow-[0_0_15px_rgba(0,255,0,0.8)]\">\n                            <svg className=\"w-4 h-4 text-gray-900\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={3} d=\"M5 13l4 4L19 7\" />\n                            </svg>\n                          </div>\n                        </motion.div>\n                      )}\n                    </motion.div>\n                  );\n                })}\n              </div>\n            </div>\n\n                        <motion.div\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ delay: 0.3 }}\n              className=\"mt-6 space-y-3\"\n            >\n              <div className=\"flex items-center justify-between text-sm\">\n                <span className=\"text-purple-400 font-semibold flex items-center gap-2\">\n                  <BarChart3 className=\"w-4 h-4\" />\n                  Sorting Progress\n                </span>\n                <span className=\"text-cyan-300 font-mono\">\n                  {steps.length > 0 ? Math.round((currentStep / (steps.length - 1)) * 100) : 0}%\n                </span>\n              </div>\n              \n              <div className=\"relative h-3 bg-gray-800/50 rounded-full overflow-hidden border border-purple-500/30 shadow-inner\">\n                <motion.div\n                  className=\"absolute inset-y-0 left-0 bg-gradient-to-r from-cyan-500 via-purple-500 to-pink-500 rounded-full shadow-[0_0_20px_rgba(0,255,255,0.6)]\"\n                  initial={{ width: '0%' }}\n                  animate={{ \n                    width: steps.length > 0 ? `${(currentStep / (steps.length - 1)) * 100}%` : '0%'\n                  }}\n                  transition={{ duration: 0.3, ease: 'easeOut' }}\n                >\n                  <motion.div\n                    className=\"absolute inset-0 bg-gradient-to-r from-transparent via-white/30 to-transparent\"\n                    animate={{ x: ['-100%', '200%'] }}\n                    transition={{ duration: 1.5, repeat: Infinity, ease: 'linear' }}\n                  />\n                </motion.div>\n                \n                {currentStep >= steps.length - 1 && steps.length > 0 && (\n                  <motion.div\n                    className=\"absolute inset-0 bg-gradient-to-r from-cyan-400/20 via-purple-400/20 to-pink-400/20\"\n                    animate={{ opacity: [0.5, 1, 0.5] }}\n                    transition={{ duration: 1, repeat: Infinity }}\n                  />\n                )}\n              </div>\n              \n              <div className=\"flex items-center justify-between text-xs text-gray-400\">\n                <span>Step {currentStep} of {steps.length > 0 ? steps.length - 1 : 0}</span>\n                {currentStep >= steps.length - 1 && steps.length > 0 && (\n                  <motion.span\n                    initial={{ opacity: 0, scale: 0.8 }}\n                    animate={{ opacity: 1, scale: 1 }}\n                    className=\"text-cyan-400 font-semibold flex items-center gap-1\"\n                  >\n                    <Zap className=\"w-3 h-3\" />\n                    Complete!\n                  </motion.span>\n                )}\n              </div>\n            </motion.div>\n          </div>\n        </div>\n\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ delay: 0.6, duration: 0.8 }}\n          className=\"bg-gray-900/50 backdrop-blur-lg border border-purple-500/30 rounded-xl p-6 shadow-[0_0_30px_rgba(168,85,247,0.3)]\"\n        >\n          <div className=\"flex items-center gap-2 mb-4\">\n            <BarChart3 className=\"w-5 h-5 text-purple-400\" />\n            <h3 className=\"text-lg font-semibold text-purple-300\">Legend</h3>\n          </div>\n          \n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n            {/* Default State */}\n            <motion.div\n              whileHover={{ scale: 1.05 }}\n              className=\"flex items-center gap-3 p-3 bg-gray-800/50 rounded-lg border border-gray-700/50 hover:border-cyan-500/50 transition-all duration-300\"\n            >\n              <motion.div\n                className=\"w-6 h-12 rounded bg-gradient-to-t from-cyan-500 to-cyan-300 shadow-[0_0_15px_rgba(0,255,255,0.6)]\"\n                animate={{\n                  boxShadow: [\n                    '0 0 15px rgba(0,255,255,0.6)',\n                    '0 0 25px rgba(0,255,255,0.8)',\n                    '0 0 15px rgba(0,255,255,0.6)'\n                  ]\n                }}\n                transition={{ duration: 2, repeat: Infinity }}\n              />\n              <div>\n                <div className=\"text-sm font-medium text-white\">Default</div>\n                <div className=\"text-xs text-gray-400\">Unsorted</div>\n              </div>\n            </motion.div>\n\n            {/* Comparing State */}\n            <motion.div\n              whileHover={{ scale: 1.05 }}\n              className=\"flex items-center gap-3 p-3 bg-gray-800/50 rounded-lg border border-gray-700/50 hover:border-yellow-500/50 transition-all duration-300\"\n            >\n              <motion.div\n                className=\"w-6 h-12 rounded bg-gradient-to-t from-yellow-500 to-yellow-300 shadow-[0_0_20px_rgba(255,255,0,0.8)]\"\n                animate={{\n                  boxShadow: [\n                    '0 0 20px rgba(255,255,0,0.8)',\n                    '0 0 35px rgba(255,255,0,1)',\n                    '0 0 20px rgba(255,255,0,0.8)'\n                  ],\n                  scale: [1, 1.1, 1]\n                }}\n                transition={{ duration: 1.5, repeat: Infinity }}\n              />\n              <div>\n                <div className=\"text-sm font-medium text-white\">Comparing</div>\n                <div className=\"text-xs text-gray-400\">Active check</div>\n              </div>\n            </motion.div>\n\n            {/* Swapping State */}\n            <motion.div\n              whileHover={{ scale: 1.05 }}\n              className=\"flex items-center gap-3 p-3 bg-gray-800/50 rounded-lg border border-gray-700/50 hover:border-pink-500/50 transition-all duration-300\"\n            >\n              <motion.div\n                className=\"w-6 h-12 rounded bg-gradient-to-t from-pink-500 to-pink-300 shadow-[0_0_20px_rgba(255,0,102,0.8)]\"\n                animate={{\n                  boxShadow: [\n                    '0 0 20px rgba(255,0,102,0.8)',\n                    '0 0 35px rgba(255,0,102,1)',\n                    '0 0 20px rgba(255,0,102,0.8)'\n                  ],\n                  x: [-2, 2, -2]\n                }}\n                transition={{ duration: 1, repeat: Infinity }}\n              />\n              <div>\n                <div className=\"text-sm font-medium text-white\">Swapping</div>\n                <div className=\"text-xs text-gray-400\">Exchanging</div>\n              </div>\n            </motion.div>\n\n            {/* Sorted State */}\n            <motion.div\n              whileHover={{ scale: 1.05 }}\n              className=\"flex items-center gap-3 p-3 bg-gray-800/50 rounded-lg border border-gray-700/50 hover:border-green-500/50 transition-all duration-300\"\n            >\n              <motion.div\n                className=\"w-6 h-12 rounded bg-gradient-to-t from-green-500 to-green-300 shadow-[0_0_20px_rgba(0,255,0,0.8)]\"\n                animate={{\n                  boxShadow: [\n                    '0 0 20px rgba(0,255,0,0.8)',\n                    '0 0 30px rgba(0,255,0,1)',\n                    '0 0 20px rgba(0,255,0,0.8)'\n                  ]\n                }}\n                transition={{ duration: 2.5, repeat: Infinity }}\n              />\n              <div>\n                <div className=\"text-sm font-medium text-white\">Sorted</div>\n                <div className=\"text-xs text-gray-400\">Complete</div>\n              </div>\n            </motion.div>\n          </div>\n\n          {/* Additional Info */}\n          <motion.div\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            transition={{ delay: 1 }}\n            className=\"mt-4 pt-4 border-t border-gray-700/50\"\n          >\n            <div className=\"flex items-center justify-center gap-2 text-xs text-gray-400\">\n              <motion.div\n                className=\"w-2 h-2 rounded-full bg-purple-400\"\n                animate={{\n                  scale: [1, 1.5, 1],\n                  opacity: [0.5, 1, 0.5]\n                }}\n                transition={{ duration: 2, repeat: Infinity }}\n              />\n              <span>Watch the bars glow as the algorithm sorts in real-time</span>\n            </div>\n          </motion.div>\n        </motion.div>\n      </div>\n    </div>\n  );\n}",
    "error": null,
    "elapsed_time": 114.41503953933716,
    "success": true
  }
}