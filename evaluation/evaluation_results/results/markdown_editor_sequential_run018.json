{
  "prompt_id": "markdown_editor",
  "prompt_name": "Premium Markdown Editor",
  "mode": "sequential",
  "run_number": 18,
  "timestamp": "2025-10-13T19:58:02.776504",
  "response_time": 64.32608580589294,
  "total_tokens": null,
  "response_content": "import { useState, useEffect, useRef } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Bold, Italic, Code, List, ListOrdered, Link2, Image, Eye, EyeOff, Heading1, Heading2, Quote } from 'lucide-react';\nimport { motion, AnimatePresence } from 'framer-motion';\n\nexport default function MarkdownEditor() {\n  const [markdown, setMarkdown] = useState(`# Welcome to Premium Markdown Editor\n\n## Features\n- **Bold** and *italic* text\n- \\`Inline code\\` with syntax highlighting\n- Code blocks with VS Code styling\n- Live preview with smooth transitions\n\n### Code Example\n\n\\`\\`\\`javascript\nfunction greet(name) {\n  console.log(\\`Hello, \\${name}!\\`);\n  return true;\n}\n\nconst user = \"Developer\";\ngreet(user);\n\\`\\`\\`\n\n### More Examples\n\n\\`\\`\\`typescript\ninterface User {\n  id: number;\n  name: string;\n  email: string;\n}\n\nconst users: User[] = [\n  { id: 1, name: \"Alice\", email: \"alice@example.com\" },\n  { id: 2, name: \"Bob\", email: \"bob@example.com\" }\n];\n\\`\\`\\`\n\n> This is a blockquote with **bold** text\n\n1. First ordered item\n2. Second ordered item\n3. Third ordered item\n\n- Unordered list item\n- Another item\n- And another\n\n[Link to example](https://example.com)\n\n![Image alt text](https://via.placeholder.com/400x200)\n`);\n  const [showPreview, setShowPreview] = useState(true);\n  const [cursorPosition, setCursorPosition] = useState(0);\n  const [showToolbar, setShowToolbar] = useState(false);\n  const textareaRef = useRef<HTMLTextAreaElement>(null);\n  const editorRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    const handleScroll = () => {\n      if (textareaRef.current && textareaRef.current.scrollTop > 50) {\n        setShowToolbar(true);\n      } else {\n        setShowToolbar(false);\n      }\n    };\n\n    const textarea = textareaRef.current;\n    textarea?.addEventListener('scroll', handleScroll);\n    return () => textarea?.removeEventListener('scroll', handleScroll);\n  }, []);\n\n  const insertMarkdown = (before: string, after: string = '') => {\n    const textarea = textareaRef.current;\n    if (!textarea) return;\n\n    const start = textarea.selectionStart;\n    const end = textarea.selectionEnd;\n    const selectedText = markdown.substring(start, end);\n    const newText = markdown.substring(0, start) + before + selectedText + after + markdown.substring(end);\n    \n    setMarkdown(newText);\n    \n    setTimeout(() => {\n      textarea.focus();\n      textarea.setSelectionRange(start + before.length, start + before.length + selectedText.length);\n    }, 0);\n  };\n\n  const parseMarkdown = (text: string): string => {\n    let html = text;\n\n    // Code blocks with syntax highlighting\n    html = html.replace(/```(\\w+)?\\n([\\s\\S]*?)```/g, (match, lang, code) => {\n      const highlighted = highlightCode(code.trim(), lang || 'javascript');\n      return `<pre class=\"code-block\"><code class=\"language-${lang || 'javascript'}\">${highlighted}</code></pre>`;\n    });\n\n    // Inline code\n    html = html.replace(/`([^`]+)`/g, '<code class=\"inline-code\">$1</code>');\n\n    // Headers\n    html = html.replace(/^### (.*$)/gim, '<h3>$1</h3>');\n    html = html.replace(/^## (.*$)/gim, '<h2>$1</h2>');\n    html = html.replace(/^# (.*$)/gim, '<h1>$1</h1>');\n\n    // Bold\n    html = html.replace(/\\*\\*(.+?)\\*\\*/g, '<strong>$1</strong>');\n\n    // Italic\n    html = html.replace(/\\*(.+?)\\*/g, '<em>$1</em>');\n\n    // Blockquotes\n    html = html.replace(/^> (.*$)/gim, '<blockquote>$1</blockquote>');\n\n    // Ordered lists\n    html = html.replace(/^\\d+\\.\\s(.+)$/gim, '<li class=\"ordered\">$1</li>');\n    html = html.replace(/(<li class=\"ordered\">.*<\\/li>)/s, '<ol>$1</ol>');\n\n    // Unordered lists\n    html = html.replace(/^[-*]\\s(.+)$/gim, '<li class=\"unordered\">$1</li>');\n    html = html.replace(/(<li class=\"unordered\">.*<\\/li>)/s, '<ul>$1</ul>');\n\n    // Links\n    html = html.replace(/\\[([^\\]]+)\\]\\(([^)]+)\\)/g, '<a href=\"$2\" target=\"_blank\" rel=\"noopener noreferrer\">$1</a>');\n\n    // Images\n    html = html.replace(/!\\[([^\\]]*)\\]\\(([^)]+)\\)/g, '<img src=\"$2\" alt=\"$1\" />');\n\n    // Line breaks\n    html = html.replace(/\\n/g, '<br />');\n\n    return html;\n  };\n\n  const highlightCode = (code: string, lang: string): string => {\n    const keywords = ['function', 'const', 'let', 'var', 'return', 'if', 'else', 'for', 'while', 'class', 'interface', 'type', 'import', 'export', 'default', 'async', 'await', 'new', 'this', 'extends', 'implements'];\n    const types = ['string', 'number', 'boolean', 'void', 'any', 'unknown', 'never', 'User', 'Array'];\n    const builtins = ['console', 'log', 'document', 'window', 'Math', 'Date', 'Object', 'Array'];\n\n    let highlighted = code\n      .replace(/</g, '&lt;')\n      .replace(/>/g, '&gt;');\n\n    // Comments\n    highlighted = highlighted.replace(/(\\/\\/.*$)/gm, '<span class=\"token-comment\">$1</span>');\n    highlighted = highlighted.replace(/(\\/\\*[\\s\\S]*?\\*\\/)/g, '<span class=\"token-comment\">$1</span>');\n\n    // Strings\n    highlighted = highlighted.replace(/(\".*?\"|'.*?'|`.*?`)/g, '<span class=\"token-string\">$1</span>');\n\n    // Numbers\n    highlighted = highlighted.replace(/\\b(\\d+)\\b/g, '<span class=\"token-number\">$1</span>');\n\n    // Keywords\n    keywords.forEach(keyword => {\n      const regex = new RegExp(`\\\\b(${keyword})\\\\b`, 'g');\n      highlighted = highlighted.replace(regex, '<span class=\"token-keyword\">$1</span>');\n    });\n\n    // Types\n    types.forEach(type => {\n      const regex = new RegExp(`\\\\b(${type})\\\\b`, 'g');\n      highlighted = highlighted.replace(regex, '<span class=\"token-type\">$1</span>');\n    });\n\n    // Built-ins\n    builtins.forEach(builtin => {\n      const regex = new RegExp(`\\\\b(${builtin})\\\\b`, 'g');\n      highlighted = highlighted.replace(regex, '<span class=\"token-builtin\">$1</span>');\n    });\n\n    // Functions\n    highlighted = highlighted.replace(/\\b([a-zA-Z_]\\w*)\\s*\\(/g, '<span class=\"token-function\">$1</span>(');\n\n    return highlighted;\n  };\n\n  const toolbarButtons = [\n    { icon: Heading1, action: () => insertMarkdown('# ', ''), label: 'Heading 1' },\n    { icon: Heading2, action: () => insertMarkdown('## ', ''), label: 'Heading 2' },\n    { icon: Bold, action: () => insertMarkdown('**', '**'), label: 'Bold' },\n    { icon: Italic, action: () => insertMarkdown('*', '*'), label: 'Italic' },\n    { icon: Code, action: () => insertMarkdown('`', '`'), label: 'Inline Code' },\n    { icon: Quote, action: () => insertMarkdown('> ', ''), label: 'Quote' },\n    { icon: List, action: () => insertMarkdown('- ', ''), label: 'Bullet List' },\n    { icon: ListOrdered, action: () => insertMarkdown('1. ', ''), label: 'Numbered List' },\n    { icon: Link2, action: () => insertMarkdown('[', '](url)'), label: 'Link' },\n    { icon: Image, action: () => insertMarkdown('![alt](', ')'), label: 'Image' },\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-[#0d1117] text-gray-100\">\n      <div className=\"border-b border-gray-800 bg-[#161b22] px-6 py-4\">\n        <div className=\"max-w-7xl mx-auto flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-2xl font-bold bg-gradient-to-r from-blue-400 to-purple-500 bg-clip-text text-transparent\">\n              Premium Markdown Editor\n            </h1>\n            <p className=\"text-sm text-gray-400 mt-1\">Write beautiful documentation with live preview</p>\n          </div>\n          <Button\n            onClick={() => setShowPreview(!showPreview)}\n            className=\"bg-blue-600 hover:bg-blue-700 text-white\"\n          >\n            {showPreview ? <EyeOff className=\"w-4 h-4 mr-2\" /> : <Eye className=\"w-4 h-4 mr-2\" />}\n            {showPreview ? 'Hide Preview' : 'Show Preview'}\n          </Button>\n        </div>\n      </div>\n\n      <div className=\"max-w-7xl mx-auto p-6\">\n        <AnimatePresence mode=\"wait\">\n          {showToolbar && (\n            <motion.div\n              initial={{ opacity: 0, y: -20 }}\n              animate={{ opacity: 1, y: 0 }}\n              exit={{ opacity: 0, y: -20 }}\n              className=\"fixed top-20 left-1/2 -translate-x-1/2 z-50 bg-[#1c2128] border border-gray-700 rounded-lg shadow-2xl p-2 flex gap-1\"\n            >\n              {toolbarButtons.map((btn, idx) => (\n                <motion.button\n                  key={idx}\n                  whileHover={{ scale: 1.1, backgroundColor: '#2d333b' }}\n                  whileTap={{ scale: 0.95 }}\n                  onClick={btn.action}\n                  className=\"p-2 rounded hover:bg-gray-700 transition-colors group relative\"\n                  title={btn.label}\n                >\n                  <btn.icon className=\"w-4 h-4 text-gray-400 group-hover:text-blue-400\" />\n                  <span className=\"absolute -bottom-8 left-1/2 -translate-x-1/2 bg-gray-900 text-xs px-2 py-1 rounded opacity-0 group-hover:opacity-100 transition-opacity whitespace-nowrap pointer-events-none\">\n                    {btn.label}\n                  </span>\n                </motion.button>\n              ))}\n            </motion.div>\n          )}\n        </AnimatePresence>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n          <motion.div\n            initial={{ opacity: 0, x: -20 }}\n            animate={{ opacity: 1, x: 0 }}\n            className=\"space-y-4\"\n          >\n            <div className=\"bg-[#161b22] border border-gray-800 rounded-lg overflow-hidden\">\n              <div className=\"bg-[#1c2128] border-b border-gray-800 px-4 py-2 flex items-center justify-between\">\n                <span className=\"text-sm font-medium text-gray-300\">Editor</span>\n                <div className=\"flex gap-2\">\n                  {toolbarButtons.slice(0, 5).map((btn, idx) => (\n                    <motion.button\n                      key={idx}\n                      whileHover={{ scale: 1.1 }}\n                      whileTap={{ scale: 0.95 }}\n                      onClick={btn.action}\n                      className=\"p-1.5 rounded hover:bg-gray-700 transition-colors\"\n                      title={btn.label}\n                    >\n                      <btn.icon className=\"w-3.5 h-3.5 text-gray-400 hover:text-blue-400\" />\n                    </motion.button>\n                  ))}\n                </div>\n              </div>\n              <textarea\n                ref={textareaRef}\n                value={markdown}\n                onChange={(e) => setMarkdown(e.target.value)}\n                onSelect={(e) => setCursorPosition((e.target as HTMLTextAreaElement).selectionStart)}\n                className=\"w-full h-[calc(100vh-280px)] bg-[#0d1117] text-gray-100 p-6 font-mono text-sm resize-none focus:outline-none leading-relaxed\"\n                placeholder=\"Start writing your markdown here...\"\n                spellCheck={false}\n              />\n              <div className=\"bg-[#1c2128] border-t border-gray-800 px-4 py-2 flex items-center justify-between text-xs text-gray-500\">\n                <span>{markdown.length} characters</span>\n                <span>{markdown.split('\\n').length} lines</span>\n              </div>\n            </div>\n          </motion.div>\n\n          <AnimatePresence mode=\"wait\">\n            {showPreview && (\n              <motion.div\n                initial={{ opacity: 0, x: 20 }}\n                animate={{ opacity: 1, x: 0 }}\n                exit={{ opacity: 0, x: 20 }}\n                transition={{ duration: 0.3 }}\n                className=\"space-y-4\"\n              >\n                <div className=\"bg-[#161b22] border border-gray-800 rounded-lg overflow-hidden\">\n                  <div className=\"bg-[#1c2128] border-b border-gray-800 px-4 py-2\">\n                    <span className=\"text-sm font-medium text-gray-300\">Live Preview</span>\n                  </div>\n                  <motion.div\n                    key={markdown}\n                    initial={{ opacity: 0 }}\n                    animate={{ opacity: 1 }}\n                    transition={{ duration: 0.2 }}\n                    className=\"p-6 h-[calc(100vh-280px)] overflow-y-auto prose-custom\"\n                    dangerouslySetInnerHTML={{ __html: parseMarkdown(markdown) }}\n                  />\n                </div>\n              </motion.div>\n            )}\n          </AnimatePresence>\n        </div>\n      </div>\n\n      <style jsx global>{`\n        .prose-custom h1 {\n          font-size: 2.5rem;\n          font-weight: 700;\n          margin: 1.5rem 0 1rem;\n          background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n          -webkit-background-clip: text;\n          -webkit-text-fill-color: transparent;\n          background-clip: text;\n          line-height: 1.2;\n        }\n\n        .prose-custom h2 {\n          font-size: 2rem;\n          font-weight: 600;\n          margin: 1.25rem 0 0.75rem;\n          color: #58a6ff;\n          border-bottom: 2px solid #21262d;\n          padding-bottom: 0.5rem;\n        }\n\n        .prose-custom h3 {\n          font-size: 1.5rem;\n          font-weight: 600;\n          margin: 1rem 0 0.5rem;\n          color: #79c0ff;\n        }\n\n        .prose-custom strong {\n          color: #ffa657;\n          font-weight: 600;\n        }\n\n        .prose-custom em {\n          color: #a5d6ff;\n          font-style: italic;\n        }\n\n        .prose-custom code.inline-code {\n          background: #1c2128;\n          color: #ff7b72;\n          padding: 0.2rem 0.4rem;\n          border-radius: 0.25rem;\n          font-size: 0.875em;\n          font-family: 'Consolas', 'Monaco', 'Courier New', monospace;\n          border: 1px solid #30363d;\n        }\n\n        .prose-custom pre.code-block {\n          background: #161b22;\n          border: 1px solid #30363d;\n          border-radius: 0.5rem;\n          padding: 1.25rem;\n          margin: 1.5rem 0;\n          overflow-x: auto;\n          box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.3);\n        }\n\n        .prose-custom pre.code-block code {\n          font-family: 'Consolas', 'Monaco', 'Courier New', monospace;\n          font-size: 0.875rem;\n          line-height: 1.6;\n          color: #c9d1d9;\n          display: block;\n        }\n\n        .prose-custom .token-keyword {\n          color: #ff7b72;\n          font-weight: 600;\n        }\n\n        .prose-custom .token-string {\n          color: #a5d6ff;\n        }\n\n        .prose-custom .token-number {\n          color: #79c0ff;\n        }\n\n        .prose-custom .token-function {\n          color: #d2a8ff;\n          font-weight: 500;\n        }\n\n        .prose-custom .token-comment {\n          color: #8b949e;\n          font-style: italic;\n        }\n\n        .prose-custom .token-type {\n          color: #ffa657;\n          font-weight: 500;\n        }\n\n        .prose-custom .token-builtin {\n          color: #79c0ff;\n        }\n\n        .prose-custom blockquote {\n          border-left: 4px solid #58a6ff;\n          padding-left: 1rem;\n          margin: 1rem 0;\n          color: #8b949e;\n          font-style: italic;\n          background: #0d1117;\n          padding: 1rem;\n          border-radius: 0.25rem;\n        }\n\n        .prose-custom ul, .prose-custom ol {\n          margin: 1rem 0;\n          padding-left: 2rem;\n        }\n\n        .prose-custom li {\n          margin: 0.5rem 0;\n          color: #c9d1d9;\n          line-height: 1.6;\n        }\n\n        .prose-custom li.ordered {\n          list-style-type: decimal;\n        }\n\n        .prose-custom li.unordered {\n          list-style-type: disc;\n        }\n\n        .prose-custom a {\n          color: #58a6ff;\n          text-decoration: none;\n          border-bottom: 1px solid transparent;\n          transition: all 0.2s;\n        }\n\n        .prose-custom a:hover {\n          border-bottom-color: #58a6ff;\n          color: #79c0ff;\n        }\n\n        .prose-custom img {\n          max-width: 100%;\n          border-radius: 0.5rem;\n          margin: 1.5rem 0;\n          border: 1px solid #30363d;\n        }\n\n        .prose-custom br {\n          display: block;\n          content: \"\";\n          margin: 0.5rem 0;\n        }\n\n        ::-webkit-scrollbar {\n          width: 10px;\n          height: 10px;\n        }\n\n        ::-webkit-scrollbar-track {\n          background: #0d1117;\n        }\n\n        ::-webkit-scrollbar-thumb {\n          background: #30363d;\n          border-radius: 5px;\n        }\n\n        ::-webkit-scrollbar-thumb:hover {\n          background: #484f58;\n        }\n      `}</style>\n    </div>\n  );\n}",
  "error": null,
  "overall_score": 50,
  "code_quality_score": 16,
  "architecture_score": 12,
  "performance_score": 8,
  "accessibility_score": 14,
  "metadata": {
    "document_id": "eval_room_cc1af668de90",
    "prompt_category": "productivity",
    "prompt_complexity": 8.0
  },
  "raw_response": {
    "document_id": "eval_room_cc1af668de90",
    "mode": "sequential",
    "prompt": "Create a premium markdown editor with dark theme, syntax highlighting with vibrant colors, smooth live preview transitions, floating toolbar with hover effects, and code block styling like VS Code",
    "content": "import { useState, useEffect, useRef } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Bold, Italic, Code, List, ListOrdered, Link2, Image, Eye, EyeOff, Heading1, Heading2, Quote } from 'lucide-react';\nimport { motion, AnimatePresence } from 'framer-motion';\n\nexport default function MarkdownEditor() {\n  const [markdown, setMarkdown] = useState(`# Welcome to Premium Markdown Editor\n\n## Features\n- **Bold** and *italic* text\n- \\`Inline code\\` with syntax highlighting\n- Code blocks with VS Code styling\n- Live preview with smooth transitions\n\n### Code Example\n\n\\`\\`\\`javascript\nfunction greet(name) {\n  console.log(\\`Hello, \\${name}!\\`);\n  return true;\n}\n\nconst user = \"Developer\";\ngreet(user);\n\\`\\`\\`\n\n### More Examples\n\n\\`\\`\\`typescript\ninterface User {\n  id: number;\n  name: string;\n  email: string;\n}\n\nconst users: User[] = [\n  { id: 1, name: \"Alice\", email: \"alice@example.com\" },\n  { id: 2, name: \"Bob\", email: \"bob@example.com\" }\n];\n\\`\\`\\`\n\n> This is a blockquote with **bold** text\n\n1. First ordered item\n2. Second ordered item\n3. Third ordered item\n\n- Unordered list item\n- Another item\n- And another\n\n[Link to example](https://example.com)\n\n![Image alt text](https://via.placeholder.com/400x200)\n`);\n  const [showPreview, setShowPreview] = useState(true);\n  const [cursorPosition, setCursorPosition] = useState(0);\n  const [showToolbar, setShowToolbar] = useState(false);\n  const textareaRef = useRef<HTMLTextAreaElement>(null);\n  const editorRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    const handleScroll = () => {\n      if (textareaRef.current && textareaRef.current.scrollTop > 50) {\n        setShowToolbar(true);\n      } else {\n        setShowToolbar(false);\n      }\n    };\n\n    const textarea = textareaRef.current;\n    textarea?.addEventListener('scroll', handleScroll);\n    return () => textarea?.removeEventListener('scroll', handleScroll);\n  }, []);\n\n  const insertMarkdown = (before: string, after: string = '') => {\n    const textarea = textareaRef.current;\n    if (!textarea) return;\n\n    const start = textarea.selectionStart;\n    const end = textarea.selectionEnd;\n    const selectedText = markdown.substring(start, end);\n    const newText = markdown.substring(0, start) + before + selectedText + after + markdown.substring(end);\n    \n    setMarkdown(newText);\n    \n    setTimeout(() => {\n      textarea.focus();\n      textarea.setSelectionRange(start + before.length, start + before.length + selectedText.length);\n    }, 0);\n  };\n\n  const parseMarkdown = (text: string): string => {\n    let html = text;\n\n    // Code blocks with syntax highlighting\n    html = html.replace(/```(\\w+)?\\n([\\s\\S]*?)```/g, (match, lang, code) => {\n      const highlighted = highlightCode(code.trim(), lang || 'javascript');\n      return `<pre class=\"code-block\"><code class=\"language-${lang || 'javascript'}\">${highlighted}</code></pre>`;\n    });\n\n    // Inline code\n    html = html.replace(/`([^`]+)`/g, '<code class=\"inline-code\">$1</code>');\n\n    // Headers\n    html = html.replace(/^### (.*$)/gim, '<h3>$1</h3>');\n    html = html.replace(/^## (.*$)/gim, '<h2>$1</h2>');\n    html = html.replace(/^# (.*$)/gim, '<h1>$1</h1>');\n\n    // Bold\n    html = html.replace(/\\*\\*(.+?)\\*\\*/g, '<strong>$1</strong>');\n\n    // Italic\n    html = html.replace(/\\*(.+?)\\*/g, '<em>$1</em>');\n\n    // Blockquotes\n    html = html.replace(/^> (.*$)/gim, '<blockquote>$1</blockquote>');\n\n    // Ordered lists\n    html = html.replace(/^\\d+\\.\\s(.+)$/gim, '<li class=\"ordered\">$1</li>');\n    html = html.replace(/(<li class=\"ordered\">.*<\\/li>)/s, '<ol>$1</ol>');\n\n    // Unordered lists\n    html = html.replace(/^[-*]\\s(.+)$/gim, '<li class=\"unordered\">$1</li>');\n    html = html.replace(/(<li class=\"unordered\">.*<\\/li>)/s, '<ul>$1</ul>');\n\n    // Links\n    html = html.replace(/\\[([^\\]]+)\\]\\(([^)]+)\\)/g, '<a href=\"$2\" target=\"_blank\" rel=\"noopener noreferrer\">$1</a>');\n\n    // Images\n    html = html.replace(/!\\[([^\\]]*)\\]\\(([^)]+)\\)/g, '<img src=\"$2\" alt=\"$1\" />');\n\n    // Line breaks\n    html = html.replace(/\\n/g, '<br />');\n\n    return html;\n  };\n\n  const highlightCode = (code: string, lang: string): string => {\n    const keywords = ['function', 'const', 'let', 'var', 'return', 'if', 'else', 'for', 'while', 'class', 'interface', 'type', 'import', 'export', 'default', 'async', 'await', 'new', 'this', 'extends', 'implements'];\n    const types = ['string', 'number', 'boolean', 'void', 'any', 'unknown', 'never', 'User', 'Array'];\n    const builtins = ['console', 'log', 'document', 'window', 'Math', 'Date', 'Object', 'Array'];\n\n    let highlighted = code\n      .replace(/</g, '&lt;')\n      .replace(/>/g, '&gt;');\n\n    // Comments\n    highlighted = highlighted.replace(/(\\/\\/.*$)/gm, '<span class=\"token-comment\">$1</span>');\n    highlighted = highlighted.replace(/(\\/\\*[\\s\\S]*?\\*\\/)/g, '<span class=\"token-comment\">$1</span>');\n\n    // Strings\n    highlighted = highlighted.replace(/(\".*?\"|'.*?'|`.*?`)/g, '<span class=\"token-string\">$1</span>');\n\n    // Numbers\n    highlighted = highlighted.replace(/\\b(\\d+)\\b/g, '<span class=\"token-number\">$1</span>');\n\n    // Keywords\n    keywords.forEach(keyword => {\n      const regex = new RegExp(`\\\\b(${keyword})\\\\b`, 'g');\n      highlighted = highlighted.replace(regex, '<span class=\"token-keyword\">$1</span>');\n    });\n\n    // Types\n    types.forEach(type => {\n      const regex = new RegExp(`\\\\b(${type})\\\\b`, 'g');\n      highlighted = highlighted.replace(regex, '<span class=\"token-type\">$1</span>');\n    });\n\n    // Built-ins\n    builtins.forEach(builtin => {\n      const regex = new RegExp(`\\\\b(${builtin})\\\\b`, 'g');\n      highlighted = highlighted.replace(regex, '<span class=\"token-builtin\">$1</span>');\n    });\n\n    // Functions\n    highlighted = highlighted.replace(/\\b([a-zA-Z_]\\w*)\\s*\\(/g, '<span class=\"token-function\">$1</span>(');\n\n    return highlighted;\n  };\n\n  const toolbarButtons = [\n    { icon: Heading1, action: () => insertMarkdown('# ', ''), label: 'Heading 1' },\n    { icon: Heading2, action: () => insertMarkdown('## ', ''), label: 'Heading 2' },\n    { icon: Bold, action: () => insertMarkdown('**', '**'), label: 'Bold' },\n    { icon: Italic, action: () => insertMarkdown('*', '*'), label: 'Italic' },\n    { icon: Code, action: () => insertMarkdown('`', '`'), label: 'Inline Code' },\n    { icon: Quote, action: () => insertMarkdown('> ', ''), label: 'Quote' },\n    { icon: List, action: () => insertMarkdown('- ', ''), label: 'Bullet List' },\n    { icon: ListOrdered, action: () => insertMarkdown('1. ', ''), label: 'Numbered List' },\n    { icon: Link2, action: () => insertMarkdown('[', '](url)'), label: 'Link' },\n    { icon: Image, action: () => insertMarkdown('![alt](', ')'), label: 'Image' },\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-[#0d1117] text-gray-100\">\n      <div className=\"border-b border-gray-800 bg-[#161b22] px-6 py-4\">\n        <div className=\"max-w-7xl mx-auto flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-2xl font-bold bg-gradient-to-r from-blue-400 to-purple-500 bg-clip-text text-transparent\">\n              Premium Markdown Editor\n            </h1>\n            <p className=\"text-sm text-gray-400 mt-1\">Write beautiful documentation with live preview</p>\n          </div>\n          <Button\n            onClick={() => setShowPreview(!showPreview)}\n            className=\"bg-blue-600 hover:bg-blue-700 text-white\"\n          >\n            {showPreview ? <EyeOff className=\"w-4 h-4 mr-2\" /> : <Eye className=\"w-4 h-4 mr-2\" />}\n            {showPreview ? 'Hide Preview' : 'Show Preview'}\n          </Button>\n        </div>\n      </div>\n\n      <div className=\"max-w-7xl mx-auto p-6\">\n        <AnimatePresence mode=\"wait\">\n          {showToolbar && (\n            <motion.div\n              initial={{ opacity: 0, y: -20 }}\n              animate={{ opacity: 1, y: 0 }}\n              exit={{ opacity: 0, y: -20 }}\n              className=\"fixed top-20 left-1/2 -translate-x-1/2 z-50 bg-[#1c2128] border border-gray-700 rounded-lg shadow-2xl p-2 flex gap-1\"\n            >\n              {toolbarButtons.map((btn, idx) => (\n                <motion.button\n                  key={idx}\n                  whileHover={{ scale: 1.1, backgroundColor: '#2d333b' }}\n                  whileTap={{ scale: 0.95 }}\n                  onClick={btn.action}\n                  className=\"p-2 rounded hover:bg-gray-700 transition-colors group relative\"\n                  title={btn.label}\n                >\n                  <btn.icon className=\"w-4 h-4 text-gray-400 group-hover:text-blue-400\" />\n                  <span className=\"absolute -bottom-8 left-1/2 -translate-x-1/2 bg-gray-900 text-xs px-2 py-1 rounded opacity-0 group-hover:opacity-100 transition-opacity whitespace-nowrap pointer-events-none\">\n                    {btn.label}\n                  </span>\n                </motion.button>\n              ))}\n            </motion.div>\n          )}\n        </AnimatePresence>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n          <motion.div\n            initial={{ opacity: 0, x: -20 }}\n            animate={{ opacity: 1, x: 0 }}\n            className=\"space-y-4\"\n          >\n            <div className=\"bg-[#161b22] border border-gray-800 rounded-lg overflow-hidden\">\n              <div className=\"bg-[#1c2128] border-b border-gray-800 px-4 py-2 flex items-center justify-between\">\n                <span className=\"text-sm font-medium text-gray-300\">Editor</span>\n                <div className=\"flex gap-2\">\n                  {toolbarButtons.slice(0, 5).map((btn, idx) => (\n                    <motion.button\n                      key={idx}\n                      whileHover={{ scale: 1.1 }}\n                      whileTap={{ scale: 0.95 }}\n                      onClick={btn.action}\n                      className=\"p-1.5 rounded hover:bg-gray-700 transition-colors\"\n                      title={btn.label}\n                    >\n                      <btn.icon className=\"w-3.5 h-3.5 text-gray-400 hover:text-blue-400\" />\n                    </motion.button>\n                  ))}\n                </div>\n              </div>\n              <textarea\n                ref={textareaRef}\n                value={markdown}\n                onChange={(e) => setMarkdown(e.target.value)}\n                onSelect={(e) => setCursorPosition((e.target as HTMLTextAreaElement).selectionStart)}\n                className=\"w-full h-[calc(100vh-280px)] bg-[#0d1117] text-gray-100 p-6 font-mono text-sm resize-none focus:outline-none leading-relaxed\"\n                placeholder=\"Start writing your markdown here...\"\n                spellCheck={false}\n              />\n              <div className=\"bg-[#1c2128] border-t border-gray-800 px-4 py-2 flex items-center justify-between text-xs text-gray-500\">\n                <span>{markdown.length} characters</span>\n                <span>{markdown.split('\\n').length} lines</span>\n              </div>\n            </div>\n          </motion.div>\n\n          <AnimatePresence mode=\"wait\">\n            {showPreview && (\n              <motion.div\n                initial={{ opacity: 0, x: 20 }}\n                animate={{ opacity: 1, x: 0 }}\n                exit={{ opacity: 0, x: 20 }}\n                transition={{ duration: 0.3 }}\n                className=\"space-y-4\"\n              >\n                <div className=\"bg-[#161b22] border border-gray-800 rounded-lg overflow-hidden\">\n                  <div className=\"bg-[#1c2128] border-b border-gray-800 px-4 py-2\">\n                    <span className=\"text-sm font-medium text-gray-300\">Live Preview</span>\n                  </div>\n                  <motion.div\n                    key={markdown}\n                    initial={{ opacity: 0 }}\n                    animate={{ opacity: 1 }}\n                    transition={{ duration: 0.2 }}\n                    className=\"p-6 h-[calc(100vh-280px)] overflow-y-auto prose-custom\"\n                    dangerouslySetInnerHTML={{ __html: parseMarkdown(markdown) }}\n                  />\n                </div>\n              </motion.div>\n            )}\n          </AnimatePresence>\n        </div>\n      </div>\n\n      <style jsx global>{`\n        .prose-custom h1 {\n          font-size: 2.5rem;\n          font-weight: 700;\n          margin: 1.5rem 0 1rem;\n          background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n          -webkit-background-clip: text;\n          -webkit-text-fill-color: transparent;\n          background-clip: text;\n          line-height: 1.2;\n        }\n\n        .prose-custom h2 {\n          font-size: 2rem;\n          font-weight: 600;\n          margin: 1.25rem 0 0.75rem;\n          color: #58a6ff;\n          border-bottom: 2px solid #21262d;\n          padding-bottom: 0.5rem;\n        }\n\n        .prose-custom h3 {\n          font-size: 1.5rem;\n          font-weight: 600;\n          margin: 1rem 0 0.5rem;\n          color: #79c0ff;\n        }\n\n        .prose-custom strong {\n          color: #ffa657;\n          font-weight: 600;\n        }\n\n        .prose-custom em {\n          color: #a5d6ff;\n          font-style: italic;\n        }\n\n        .prose-custom code.inline-code {\n          background: #1c2128;\n          color: #ff7b72;\n          padding: 0.2rem 0.4rem;\n          border-radius: 0.25rem;\n          font-size: 0.875em;\n          font-family: 'Consolas', 'Monaco', 'Courier New', monospace;\n          border: 1px solid #30363d;\n        }\n\n        .prose-custom pre.code-block {\n          background: #161b22;\n          border: 1px solid #30363d;\n          border-radius: 0.5rem;\n          padding: 1.25rem;\n          margin: 1.5rem 0;\n          overflow-x: auto;\n          box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.3);\n        }\n\n        .prose-custom pre.code-block code {\n          font-family: 'Consolas', 'Monaco', 'Courier New', monospace;\n          font-size: 0.875rem;\n          line-height: 1.6;\n          color: #c9d1d9;\n          display: block;\n        }\n\n        .prose-custom .token-keyword {\n          color: #ff7b72;\n          font-weight: 600;\n        }\n\n        .prose-custom .token-string {\n          color: #a5d6ff;\n        }\n\n        .prose-custom .token-number {\n          color: #79c0ff;\n        }\n\n        .prose-custom .token-function {\n          color: #d2a8ff;\n          font-weight: 500;\n        }\n\n        .prose-custom .token-comment {\n          color: #8b949e;\n          font-style: italic;\n        }\n\n        .prose-custom .token-type {\n          color: #ffa657;\n          font-weight: 500;\n        }\n\n        .prose-custom .token-builtin {\n          color: #79c0ff;\n        }\n\n        .prose-custom blockquote {\n          border-left: 4px solid #58a6ff;\n          padding-left: 1rem;\n          margin: 1rem 0;\n          color: #8b949e;\n          font-style: italic;\n          background: #0d1117;\n          padding: 1rem;\n          border-radius: 0.25rem;\n        }\n\n        .prose-custom ul, .prose-custom ol {\n          margin: 1rem 0;\n          padding-left: 2rem;\n        }\n\n        .prose-custom li {\n          margin: 0.5rem 0;\n          color: #c9d1d9;\n          line-height: 1.6;\n        }\n\n        .prose-custom li.ordered {\n          list-style-type: decimal;\n        }\n\n        .prose-custom li.unordered {\n          list-style-type: disc;\n        }\n\n        .prose-custom a {\n          color: #58a6ff;\n          text-decoration: none;\n          border-bottom: 1px solid transparent;\n          transition: all 0.2s;\n        }\n\n        .prose-custom a:hover {\n          border-bottom-color: #58a6ff;\n          color: #79c0ff;\n        }\n\n        .prose-custom img {\n          max-width: 100%;\n          border-radius: 0.5rem;\n          margin: 1.5rem 0;\n          border: 1px solid #30363d;\n        }\n\n        .prose-custom br {\n          display: block;\n          content: \"\";\n          margin: 0.5rem 0;\n        }\n\n        ::-webkit-scrollbar {\n          width: 10px;\n          height: 10px;\n        }\n\n        ::-webkit-scrollbar-track {\n          background: #0d1117;\n        }\n\n        ::-webkit-scrollbar-thumb {\n          background: #30363d;\n          border-radius: 5px;\n        }\n\n        ::-webkit-scrollbar-thumb:hover {\n          background: #484f58;\n        }\n      `}</style>\n    </div>\n  );\n}",
    "error": null,
    "elapsed_time": 64.32608580589294,
    "success": true
  }
}