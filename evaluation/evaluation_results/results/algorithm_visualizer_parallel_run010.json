{
  "prompt_id": "algorithm_visualizer",
  "prompt_name": "Algorithm Visualizer",
  "mode": "parallel",
  "run_number": 10,
  "timestamp": "2025-10-13T22:33:58.307186",
  "response_time": 109.3822922706604,
  "total_tokens": null,
  "response_content": "import { useState, useCallback } from 'react';\nimport { useEffect } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Slider } from '@/components/ui/slider';\nimport { Play, Pause, RotateCcw, Zap, BarChart3 } from 'lucide-react';\nimport { Activity, TrendingUp, Shuffle } from 'lucide-react';\nimport { motion } from 'framer-motion';\n\ninterface ArrayElement {\n  value: number;\n  id: string;\n  isComparing?: boolean;\n  isSwapping?: boolean;\n  isSorted?: boolean;\n}\n\ninterface AlgorithmStep {\n  array: ArrayElement[];\n  comparingIndices: number[];\n  swappingIndices: number[];\n  sortedIndices: number[];\n}\n\ntype AlgorithmType = 'bubble' | 'quick' | 'merge' | 'insertion';\n\nconst NEON_COLORS = [\n  '#00ffff',\n  '#ff00ff', \n  '#00ff00',\n  '#ffff00',\n  '#ff0066',\n  '#00ffaa'\n];\n\nconst mockAlgorithms = [\n  { id: 'bubble', name: 'Bubble Sort', complexity: 'O(n\u00b2)' },\n  { id: 'quick', name: 'Quick Sort', complexity: 'O(n log n)' },\n  { id: 'merge', name: 'Merge Sort', complexity: 'O(n log n)' },\n  { id: 'insertion', name: 'Insertion Sort', complexity: 'O(n\u00b2)' }\n];\n\nexport default function AlgorithmVisualizer() {\n  const [array, setArray] = useState<ArrayElement[]>([]);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [speed, setSpeed] = useState([50]);\n  const [arraySize, setArraySize] = useState([20]);\n  const [selectedAlgorithm, setSelectedAlgorithm] = useState<AlgorithmType>('bubble');\n  const [currentStep, setCurrentStep] = useState(0);\n  const [steps, setSteps] = useState<AlgorithmStep[]>([]);\n\n  const generateRandomArray = useCallback(() => {\n    const newArray: ArrayElement[] = Array.from({ length: arraySize[0] }, (_, index) => ({\n      value: Math.floor(Math.random() * 100) + 5,\n      id: `element-${index}-${Date.now()}`,\n      isComparing: false,\n      isSwapping: false,\n      isSorted: false\n    }));\n    setArray(newArray);\n    setSteps([]);\n    setCurrentStep(0);\n    setIsPlaying(false);\n  }, [arraySize]);\n\n  const resetVisualization = useCallback(() => {\n\n    setIsPlaying(false);\n    setCurrentStep(0);\n    setSteps([]);\n    generateRandomArray();    \n  }, [generateRandomArray]);\n\n  // Generate algorithm steps for visualization\n  const generateAlgorithmSteps = (arr: ArrayElement[], algorithm: AlgorithmType): AlgorithmStep[] => {\n    const steps: AlgorithmStep[] = [];\n    const workingArray = arr.map(el => ({ ...el }));\n\n    if (algorithm === 'bubble') {\n      for (let i = 0; i < workingArray.length; i++) {\n        for (let j = 0; j < workingArray.length - i - 1; j++) {\n          // Comparing step\n          steps.push({\n            array: workingArray.map(el => ({ ...el })),\n            comparingIndices: [j, j + 1],\n            swappingIndices: [],\n            sortedIndices: Array.from({ length: i }, (_, k) => workingArray.length - 1 - k)\n          });\n\n          if (workingArray[j].value > workingArray[j + 1].value) {\n            // Swapping step\n            [workingArray[j], workingArray[j + 1]] = [workingArray[j + 1], workingArray[j]];\n            steps.push({\n              array: workingArray.map(el => ({ ...el })),\n              comparingIndices: [],\n              swappingIndices: [j, j + 1],\n              sortedIndices: Array.from({ length: i }, (_, k) => workingArray.length - 1 - k)\n            });\n          }\n        }\n      }\n    } else if (algorithm === 'insertion') {\n      for (let i = 1; i < workingArray.length; i++) {\n        const key = workingArray[i];\n        let j = i - 1;\n\n        while (j >= 0 && workingArray[j].value > key.value) {\n          steps.push({\n            array: workingArray.map(el => ({ ...el })),\n            comparingIndices: [j, j + 1],\n            swappingIndices: [],\n            sortedIndices: []\n          });\n\n          workingArray[j + 1] = workingArray[j];\n          steps.push({\n            array: workingArray.map(el => ({ ...el })),\n            comparingIndices: [],\n            swappingIndices: [j, j + 1],\n            sortedIndices: []\n          });\n          j--;\n        }\n        workingArray[j + 1] = key;\n      }\n    }\n\n    // Final sorted state\n    steps.push({\n      array: workingArray.map(el => ({ ...el })),\n      comparingIndices: [],\n      swappingIndices: [],\n      sortedIndices: Array.from({ length: workingArray.length }, (_, i) => i)\n    });\n\n    return steps;\n  };\n  // Animation effect for step-by-step visualization\n  const animateSteps = useCallback(() => {\n    if (currentStep < steps.length - 1) {\n      const delay = 1000 - (speed[0] * 9.5); // Convert speed slider to delay (50ms - 1000ms)\n      const timer = setTimeout(() => {\n        setCurrentStep(prev => prev + 1);\n      }, delay);\n      return () => clearTimeout(timer);\n    } else {\n      setIsPlaying(false);\n    }\n  }, [currentStep, steps.length, speed]);\n\n  useEffect(() => {\n    if (isPlaying && steps.length > 0) {\n      animateSteps();\n    }\n  }, [isPlaying, animateSteps]);\n  const startVisualization = useCallback(() => {\n    if (steps.length === 0) {\n      // Generate steps for the selected algorithm first\n      const algorithmSteps = generateAlgorithmSteps(array, selectedAlgorithm);\n      setSteps(algorithmSteps);\n      setCurrentStep(0);\n    }\n    setIsPlaying(true);\n  }, [steps, speed, currentStep]);\n\n  const pauseVisualization = useCallback(() => {\n\n    setIsPlaying(false);\n  }, []);\n\n  const generateSortingSteps = useCallback((algorithm: AlgorithmType) => {\n    const sortedArray = [...array];\n    const newSteps: AlgorithmStep[] = [];\n\n    const addStep = (arr: ArrayElement[], comparing: number[] = [], swapping: number[] = [], sorted: number[] = []) => {\n      newSteps.push({\n        array: arr.map(el => ({ ...el })),\n        comparingIndices: [...comparing],\n        swappingIndices: [...swapping],\n        sortedIndices: [...sorted]\n      });\n    };\n\n    // Initial state\n    addStep(sortedArray);\n\n    switch (algorithm) {\n      case 'bubble': {\n        const sortedSet = new Set<number>();\n        for (let i = 0; i < sortedArray.length - 1; i++) {\n          for (let j = 0; j < sortedArray.length - i - 1; j++) {\n            // Comparing\n            addStep(sortedArray, [j, j + 1], [], Array.from(sortedSet));\n            \n            if (sortedArray[j].value > sortedArray[j + 1].value) {\n              // Swapping\n              addStep(sortedArray, [], [j, j + 1], Array.from(sortedSet));\n              [sortedArray[j], sortedArray[j + 1]] = [sortedArray[j + 1], sortedArray[j]];\n              addStep(sortedArray, [], [], Array.from(sortedSet));\n            }\n          }\n          sortedSet.add(sortedArray.length - i - 1);\n          addStep(sortedArray, [], [], Array.from(sortedSet));\n        }\n        sortedSet.add(0);\n        addStep(sortedArray, [], [], Array.from(sortedSet));\n        break;\n      }\n\n      case 'insertion': {\n        const sortedSet = new Set<number>([0]);\n        addStep(sortedArray, [], [], [0]);\n        \n        for (let i = 1; i < sortedArray.length; i++) {\n          const key = sortedArray[i];\n          let j = i - 1;\n          \n          addStep(sortedArray, [i], [], Array.from(sortedSet));\n          \n          while (j >= 0 && sortedArray[j].value > key.value) {\n            addStep(sortedArray, [j, j + 1], [], Array.from(sortedSet));\n            addStep(sortedArray, [], [j, j + 1], Array.from(sortedSet));\n            sortedArray[j + 1] = sortedArray[j];\n            addStep(sortedArray, [], [], Array.from(sortedSet));\n            j--;\n          }\n          \n          sortedArray[j + 1] = key;\n          sortedSet.add(i);\n          addStep(sortedArray, [], [], Array.from(sortedSet));\n        }\n        break;\n      }\n\n      case 'quick': {\n        const sortedSet = new Set<number>();\n        \n        const partition = (low: number, high: number): number => {\n          const pivot = sortedArray[high];\n          addStep(sortedArray, [high], [], Array.from(sortedSet));\n          let i = low - 1;\n\n          for (let j = low; j < high; j++) {\n            addStep(sortedArray, [j, high], [], Array.from(sortedSet));\n            \n            if (sortedArray[j].value < pivot.value) {\n              i++;\n              if (i !== j) {\n                addStep(sortedArray, [], [i, j], Array.from(sortedSet));\n                [sortedArray[i], sortedArray[j]] = [sortedArray[j], sortedArray[i]];\n                addStep(sortedArray, [], [], Array.from(sortedSet));\n              }\n            }\n          }\n          \n          addStep(sortedArray, [], [i + 1, high], Array.from(sortedSet));\n          [sortedArray[i + 1], sortedArray[high]] = [sortedArray[high], sortedArray[i + 1]];\n          sortedSet.add(i + 1);\n          addStep(sortedArray, [], [], Array.from(sortedSet));\n          \n          return i + 1;\n        };\n\n        const quickSort = (low: number, high: number) => {\n          if (low < high) {\n            const pi = partition(low, high);\n            quickSort(low, pi - 1);\n            quickSort(pi + 1, high);\n          } else if (low === high) {\n            sortedSet.add(low);\n            addStep(sortedArray, [], [], Array.from(sortedSet));\n          }\n        };\n\n        quickSort(0, sortedArray.length - 1);\n        break;\n      }\n\n      case 'merge': {\n        const sortedSet = new Set<number>();\n        \n        const merge = (left: number, mid: number, right: number) => {\n          const leftArr = sortedArray.slice(left, mid + 1);\n          const rightArr = sortedArray.slice(mid + 1, right + 1);\n          \n          let i = 0, j = 0, k = left;\n          \n          while (i < leftArr.length && j < rightArr.length) {\n            addStep(sortedArray, [left + i, mid + 1 + j], [], Array.from(sortedSet));\n            \n            if (leftArr[i].value <= rightArr[j].value) {\n              sortedArray[k] = leftArr[i];\n              i++;\n            } else {\n              sortedArray[k] = rightArr[j];\n              j++;\n            }\n            addStep(sortedArray, [], [k], Array.from(sortedSet));\n            k++;\n          }\n          \n          while (i < leftArr.length) {\n            sortedArray[k] = leftArr[i];\n            addStep(sortedArray, [], [k], Array.from(sortedSet));\n            i++;\n            k++;\n          }\n          \n          while (j < rightArr.length) {\n            sortedArray[k] = rightArr[j];\n            addStep(sortedArray, [], [k], Array.from(sortedSet));\n            j++;\n            k++;\n          }\n          \n          for (let idx = left; idx <= right; idx++) {\n            sortedSet.add(idx);\n          }\n          addStep(sortedArray, [], [], Array.from(sortedSet));\n        };\n\n        const mergeSort = (left: number, right: number) => {\n          if (left < right) {\n            const mid = Math.floor((left + right) / 2);\n            mergeSort(left, mid);\n            mergeSort(mid + 1, right);\n            merge(left, mid, right);\n          } else if (left === right) {\n            sortedSet.add(left);\n            addStep(sortedArray, [], [], Array.from(sortedSet));\n          }\n        };\n\n        mergeSort(0, sortedArray.length - 1);\n        break;\n      }\n    }\n\n    setSteps(newSteps);\n    setCurrentStep(0);\n  }, [array]);\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-gray-900 via-purple-900 to-gray-900 p-8\">\n      <div className=\"max-w-7xl mx-auto space-y-8\">\n        <motion.div\n          initial={{ opacity: 0, y: -20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.8 }}\n          className=\"text-center space-y-4\"\n        >\n          <motion.h1\n            className=\"text-6xl font-bold bg-gradient-to-r from-cyan-400 via-purple-400 to-pink-400 bg-clip-text text-transparent\"\n            animate={{\n              textShadow: [\n                '0 0 20px rgba(0, 255, 255, 0.5)',\n                '0 0 40px rgba(255, 0, 255, 0.5)',\n                '0 0 20px rgba(0, 255, 255, 0.5)'\n              ]\n            }}\n            transition={{ duration: 2, repeat: Infinity }}\n          >\n            Algorithm Visualizer\n          </motion.h1>\n          \n          <div className=\"flex items-center justify-center gap-4\">\n            <motion.div\n              initial={{ scale: 0 }}\n              animate={{ scale: 1 }}\n              transition={{ delay: 0.3, type: 'spring' }}\n              className=\"flex items-center gap-2 px-6 py-3 bg-gray-800/50 backdrop-blur-sm rounded-full border border-cyan-500/30\"\n            >\n              <Zap className=\"w-5 h-5 text-cyan-400\" />\n              <span className=\"text-xl font-semibold text-cyan-300\">\n                {mockAlgorithms.find(a => a.id === selectedAlgorithm)?.name}\n              </span>\n            </motion.div>\n            \n            <motion.div\n              initial={{ scale: 0 }}\n              animate={{ scale: 1 }}\n              transition={{ delay: 0.5, type: 'spring' }}\n              className=\"px-4 py-2 bg-purple-500/20 backdrop-blur-sm rounded-full border border-purple-400/50\"\n            >\n              <div className=\"flex items-center gap-2\">\n                <BarChart3 className=\"w-4 h-4 text-purple-300\" />\n                <span className=\"text-sm font-mono text-purple-200\">\n                  {mockAlgorithms.find(a => a.id === selectedAlgorithm)?.complexity}\n                </span>\n              </div>\n            </motion.div>\n          </div>\n        </motion.div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-6\">\n          <div className=\"lg:col-span-1 space-y-6\">\n            <motion.div\n              initial={{ opacity: 0, x: -50 }}\n              animate={{ opacity: 1, x: 0 }}\n              className=\"bg-gray-900/50 backdrop-blur-lg border border-cyan-500/30 rounded-xl p-6 shadow-[0_0_30px_rgba(0,255,255,0.3)] hover:shadow-[0_0_50px_rgba(0,255,255,0.5)] transition-all duration-300\"\n            >\n              <div className=\"space-y-6\">\n                {/* Algorithm Selection */}\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center gap-2 text-cyan-400\">\n                    <Zap className=\"w-4 h-4\" />\n                    <h3 className=\"text-sm font-semibold uppercase tracking-wider\">Algorithm</h3>\n                  </div>\n                  <div className=\"grid grid-cols-1 gap-2\">\n                    {mockAlgorithms.map((algo) => (\n                      <button\n                        key={algo.id}\n                        onClick={() => setSelectedAlgorithm(algo.id as AlgorithmType)}\n                        disabled={isPlaying}\n                        className={`p-3 rounded-lg border transition-all duration-300 text-left ${\n                          selectedAlgorithm === algo.id\n                            ? 'bg-cyan-500/20 border-cyan-400 shadow-[0_0_20px_rgba(0,255,255,0.4)]'\n                            : 'bg-gray-800/50 border-gray-700 hover:border-cyan-500/50 hover:bg-gray-800'\n                        } disabled:opacity-50 disabled:cursor-not-allowed`}\n                      >\n                        <div className=\"font-medium text-white\">{algo.name}</div>\n                        <div className=\"text-xs text-gray-400 mt-1\">{algo.complexity}</div>\n                      </button>\n                    ))}\n                  </div>\n                </div>\n\n                {/* Array Size Control */}\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center gap-2 text-purple-400\">\n                      <BarChart3 className=\"w-4 h-4\" />\n                      <h3 className=\"text-sm font-semibold uppercase tracking-wider\">Array Size</h3>\n                    </div>\n                    <span className=\"text-white font-mono text-lg\">{arraySize[0]}</span>\n                  </div>\n                  <Slider\n                    value={arraySize}\n                    onValueChange={setArraySize}\n                    min={5}\n                    max={50}\n                    step={1}\n                    disabled={isPlaying}\n                    className=\"cursor-pointer\"\n                  />\n                </div>\n\n                {/* Speed Control */}\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center gap-2 text-pink-400\">\n                      <Zap className=\"w-4 h-4\" />\n                      <h3 className=\"text-sm font-semibold uppercase tracking-wider\">Speed</h3>\n                    </div>\n                    <span className=\"text-white font-mono text-lg\">{speed[0]}%</span>\n                  </div>\n                  <Slider\n                    value={speed}\n                    onValueChange={setSpeed}\n                    min={10}\n                    max={100}\n                    step={10}\n                    className=\"cursor-pointer\"\n                  />\n                </div>\n\n                {/* Control Buttons */}\n                <div className=\"space-y-3 pt-4 border-t border-gray-700\">\n                  <Button\n                    onClick={isPlaying ? pauseVisualization : startVisualization}\n                    disabled={steps.length === 0 || (currentStep >= steps.length && !isPlaying)}\n                    className=\"w-full bg-gradient-to-r from-cyan-500 to-blue-500 hover:from-cyan-400 hover:to-blue-400 text-white font-semibold shadow-[0_0_20px_rgba(0,255,255,0.5)] hover:shadow-[0_0_30px_rgba(0,255,255,0.7)] transition-all duration-300\"\n                  >\n                    {isPlaying ? (\n                      <>\n                        <Pause className=\"w-4 h-4 mr-2\" />\n                        Pause\n                      </>\n                    ) : (\n                      <>\n                        <Play className=\"w-4 h-4 mr-2\" />\n                        {currentStep >= steps.length ? 'Start' : 'Resume'}\n                      </>\n                    )}\n                  </Button>\n\n                  <Button\n                    onClick={resetVisualization}\n                    variant=\"outline\"\n                    className=\"w-full border-purple-500/50 text-purple-400 hover:bg-purple-500/20 hover:border-purple-400 hover:text-purple-300 shadow-[0_0_15px_rgba(168,85,247,0.3)] hover:shadow-[0_0_25px_rgba(168,85,247,0.5)] transition-all duration-300\"\n                  >\n                    <RotateCcw className=\"w-4 h-4 mr-2\" />\n                    Reset\n                  </Button>\n\n                  <Button\n                    onClick={() => generateSortingSteps(selectedAlgorithm)}\n                    disabled={isPlaying || array.length === 0}\n                    variant=\"outline\"\n                    className=\"w-full border-pink-500/50 text-pink-400 hover:bg-pink-500/20 hover:border-pink-400 hover:text-pink-300 shadow-[0_0_15px_rgba(236,72,153,0.3)] hover:shadow-[0_0_25px_rgba(236,72,153,0.5)] transition-all duration-300\"\n                  >\n                    <Zap className=\"w-4 h-4 mr-2\" />\n                    Generate Steps\n                  </Button>\n                </div>\n\n                {/* Stats Display */}\n                <div className=\"pt-4 border-t border-gray-700 space-y-2\">\n                  <div className=\"flex justify-between text-sm\">\n                    <span className=\"text-gray-400\">Current Step:</span>\n                    <span className=\"text-cyan-400 font-mono\">{currentStep} / {steps.length}</span>\n                  </div>\n                  <div className=\"flex justify-between text-sm\">\n                    <span className=\"text-gray-400\">Array Length:</span>\n                    <span className=\"text-purple-400 font-mono\">{array.length}</span>\n                  </div>\n                </div>\n              </div>\n            </motion.div>\n            \n            <div className=\"bg-gray-900/50 backdrop-blur-lg border border-cyan-500/30 rounded-xl p-6 shadow-2xl shadow-cyan-500/20\">\n              <div className=\"space-y-6\">\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center gap-2 text-cyan-400\">\n                    <Zap className=\"w-4 h-4\" />\n                    <span className=\"text-sm font-semibold tracking-wider\">ALGORITHM</span>\n                  </div>\n                  <div className=\"grid grid-cols-1 gap-3\">\n                    {mockAlgorithms.map((algo) => (\n                      <motion.button\n                        key={algo.id}\n                        onClick={() => setSelectedAlgorithm(algo.id as AlgorithmType)}\n                        className={`relative p-4 rounded-lg border-2 transition-all duration-300 text-left ${\n                          selectedAlgorithm === algo.id\n                            ? 'border-cyan-400 bg-cyan-500/20 shadow-lg shadow-cyan-500/50'\n                            : 'border-gray-700 bg-gray-800/50 hover:border-cyan-500/50 hover:shadow-md hover:shadow-cyan-500/30'\n                        }`}\n                        whileHover={{ scale: 1.02 }}\n                        whileTap={{ scale: 0.98 }}\n                      >\n                        <div className=\"space-y-1\">\n                          <div className={`font-semibold ${\n                            selectedAlgorithm === algo.id ? 'text-cyan-300' : 'text-gray-300'\n                          }`}>\n                            {algo.name}\n                          </div>\n                          <div className={`text-xs font-mono ${\n                            selectedAlgorithm === algo.id ? 'text-cyan-400' : 'text-gray-500'\n                          }`}>\n                            {algo.complexity}\n                          </div>\n                        </div>\n                        {selectedAlgorithm === algo.id && (\n                          <motion.div\n                            className=\"absolute inset-0 rounded-lg border-2 border-cyan-400\"\n                            initial={{ opacity: 0 }}\n                            animate={{ opacity: [0.5, 1, 0.5] }}\n                            transition={{ duration: 2, repeat: Infinity }}\n                          />\n                        )}\n                      </motion.button>\n                    ))}\n                  </div>\n                </div></parameter>\n</invoke>\n\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <label className=\"text-cyan-400 text-sm font-medium flex items-center gap-2\">\n                      <Zap className=\"w-4 h-4\" />\n                      Speed\n                    </label>\n                    <span className=\"text-cyan-300 text-xs\">{speed[0]}ms</span>\n                  </div>\n                  <Slider\n                    value={speed}\n                    onValueChange={setSpeed}\n                    min={10}\n                    max={200}\n                    step={10}\n                    className=\"[&_[role=slider]]:h-4 [&_[role=slider]]:w-4 [&_[role=slider]]:bg-cyan-400 [&_[role=slider]]:border-2 [&_[role=slider]]:border-cyan-300 [&_[role=slider]]:shadow-[0_0_15px_rgba(34,211,238,0.8)] [&_[role=slider]]:transition-all [&_[role=slider]]:hover:shadow-[0_0_25px_rgba(34,211,238,1)] [&_.relative]:h-2 [&_.relative]:bg-gray-800 [&_.relative]:rounded-full [&_.relative]:border [&_.relative]:border-cyan-500/30 [&_.relative_.bg-primary]:bg-gradient-to-r [&_.relative_.bg-primary]:from-cyan-500 [&_.relative_.bg-primary]:to-purple-500 [&_.relative_.bg-primary]:shadow-[0_0_10px_rgba(34,211,238,0.5)]\"\n                  /></parameter>\n                </div>\n\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <label className=\"text-cyan-400 text-sm font-medium flex items-center gap-2\">\n                      <BarChart3 className=\"w-4 h-4\" />\n                      Array Size\n                    </label>\n                    <span className=\"text-cyan-300 text-xs\">{arraySize[0]}</span>\n                  </div>\n                  <Slider\n                    value={arraySize}\n                    onValueChange={setArraySize}\n                    min={5}\n                    max={100}\n                    step={5}\n                    className=\"[&_[role=slider]]:bg-gradient-to-r [&_[role=slider]]:from-purple-500 [&_[role=slider]]:to-pink-500 [&_[role=slider]]:border-2 [&_[role=slider]]:border-purple-300 [&_[role=slider]]:shadow-lg [&_[role=slider]]:shadow-purple-500/50 [&_[role=slider]]:transition-all [&_[role=slider]]:hover:shadow-purple-500/80 [&_[role=slider]]:hover:scale-110 [&>span]:bg-gradient-to-r [&>span]:from-purple-500/30 [&>span]:to-pink-500/30 [&>span]:h-2 [&>span]:rounded-full\"\n                  />\n                </div>\n\n                <div className=\"flex gap-3 pt-4\">\n                  <Button\n                    onClick={isPlaying ? pauseVisualization : startVisualization}\n                    disabled={array.length === 0 || (steps.length === 0 && !isPlaying)}\n                    className=\"flex-1 relative overflow-hidden group bg-gradient-to-r from-cyan-500 to-blue-500 hover:from-cyan-400 hover:to-blue-400 border-0 shadow-lg shadow-cyan-500/50 hover:shadow-cyan-400/70 transition-all duration-300\"\n                  >\n                    <motion.div\n                      className=\"absolute inset-0 bg-gradient-to-r from-cyan-400/0 via-white/20 to-cyan-400/0\"\n                      animate={{\n                        x: ['-100%', '100%'],\n                      }}\n                      transition={{\n                        duration: 2,\n                        repeat: Infinity,\n                        ease: 'linear',\n                      }}\n                    />\n                    <motion.div\n                      className=\"relative flex items-center justify-center gap-2\"\n                      whileHover={{ scale: 1.05 }}\n                      whileTap={{ scale: 0.95 }}\n                    >\n                      <motion.div\n                        key={isPlaying ? 'pause' : 'play'}\n                        initial={{ scale: 0, rotate: -180 }}\n                        animate={{ scale: 1, rotate: 0 }}\n                        exit={{ scale: 0, rotate: 180 }}\n                        transition={{ type: 'spring', stiffness: 200, damping: 15 }}\n                      >\n                        {isPlaying ? (\n                          <Pause className=\"w-4 h-4 fill-current\" />\n                        ) : (\n                          <Play className=\"w-4 h-4 fill-current\" />\n                        )}\n                      </motion.div>\n                      <span className=\"font-semibold\">\n                        {isPlaying ? 'Pause' : 'Play'}\n                      </span>\n                    </motion.div>\n                  </Button>\n                  <Button\n                    onClick={resetVisualization}\n                    disabled={isPlaying}\n                    className=\"flex-1 bg-gradient-to-r from-pink-600 to-red-600 hover:from-pink-500 hover:to-red-500 text-white border-2 border-pink-400 shadow-[0_0_20px_rgba(236,72,153,0.6)] hover:shadow-[0_0_30px_rgba(236,72,153,0.9)] transition-all duration-300 disabled:opacity-50 disabled:cursor-not-allowed group\"\n                  >\n                    <motion.div\n                      className=\"flex items-center gap-2\"\n                      whileHover={{ scale: 1.05 }}\n                      whileTap={{ scale: 0.95, rotate: -360 }}\n                      transition={{ duration: 0.6, type: \"spring\" }}\n                    >\n                      <motion.div\n                        animate={{ rotate: 0 }}\n                        whileHover={{ rotate: 180 }}\n                        transition={{ duration: 0.6 }}\n                      >\n                        <RotateCcw className=\"w-4 h-4\" />\n                      </motion.div>\n                      <span className=\"font-semibold\">Reset</span>\n                    </motion.div>\n                  </Button>\n                </div>\n              </div>\n            </div>\n\n            <motion.div\n              initial={{ opacity: 0, x: -50 }}\n              animate={{ opacity: 1, x: 0 }}\n              transition={{ delay: 0.2 }}\n              className=\"bg-gray-900/50 backdrop-blur-lg border border-purple-500/30 rounded-xl p-6 shadow-[0_0_30px_rgba(168,85,247,0.3)] hover:shadow-[0_0_50px_rgba(168,85,247,0.5)] transition-all duration-300\"\n            >\n              <div className=\"flex items-center gap-2 text-purple-400 mb-4\">\n                <Activity className=\"w-4 h-4\" />\n                <h3 className=\"text-sm font-semibold uppercase tracking-wider\">Statistics</h3>\n              </div>\n              \n              <div className=\"space-y-4\">\n                {/* Comparisons Counter */}\n                <motion.div\n                  className=\"bg-gradient-to-r from-cyan-500/10 to-blue-500/10 border border-cyan-500/30 rounded-lg p-4\"\n                  whileHover={{ scale: 1.02 }}\n                  transition={{ type: 'spring', stiffness: 300 }}\n                >\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center gap-2\">\n                      <TrendingUp className=\"w-5 h-5 text-cyan-400\" />\n                      <span className=\"text-sm text-gray-300\">Comparisons</span>\n                    </div>\n                    <motion.span\n                      key={currentStep}\n                      initial={{ scale: 1.5, color: '#00ffff' }}\n                      animate={{ scale: 1, color: '#ffffff' }}\n                      className=\"text-2xl font-bold font-mono\"\n                    >\n                      {steps.length > 0 && currentStep < steps.length\n                        ? steps.slice(0, currentStep + 1).filter(s => s.comparingIndices.length > 0).length\n                        : 0}\n                    </motion.span>\n                  </div>\n                  <div className=\"mt-2 h-1 bg-gray-800 rounded-full overflow-hidden\">\n                    <motion.div\n                      className=\"h-full bg-gradient-to-r from-cyan-400 to-blue-400 shadow-[0_0_10px_rgba(0,255,255,0.8)]\"\n                      initial={{ width: 0 }}\n                      animate={{\n                        width: steps.length > 0\n                          ? `${(steps.slice(0, currentStep + 1).filter(s => s.comparingIndices.length > 0).length / Math.max(steps.length, 1)) * 100}%`\n                          : '0%'\n                      }}\n                      transition={{ duration: 0.3 }}\n                    />\n                  </div>\n                </motion.div>\n\n                {/* Swaps Counter */}\n                <motion.div\n                  className=\"bg-gradient-to-r from-pink-500/10 to-purple-500/10 border border-pink-500/30 rounded-lg p-4\"\n                  whileHover={{ scale: 1.02 }}\n                  transition={{ type: 'spring', stiffness: 300 }}\n                >\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center gap-2\">\n                      <Shuffle className=\"w-5 h-5 text-pink-400\" />\n                      <span className=\"text-sm text-gray-300\">Swaps</span>\n                    </div>\n                    <motion.span\n                      key={`swap-${currentStep}`}\n                      initial={{ scale: 1.5, color: '#ff00ff' }}\n                      animate={{ scale: 1, color: '#ffffff' }}\n                      className=\"text-2xl font-bold font-mono\"\n                    >\n                      {steps.length > 0 && currentStep < steps.length\n                        ? steps.slice(0, currentStep + 1).filter(s => s.swappingIndices.length > 0).length\n                        : 0}\n                    </motion.span>\n                  </div>\n                  <div className=\"mt-2 h-1 bg-gray-800 rounded-full overflow-hidden\">\n                    <motion.div\n                      className=\"h-full bg-gradient-to-r from-pink-400 to-purple-400 shadow-[0_0_10px_rgba(255,0,255,0.8)]\"\n                      initial={{ width: 0 }}\n                      animate={{\n                        width: steps.length > 0\n                          ? `${(steps.slice(0, currentStep + 1).filter(s => s.swappingIndices.length > 0).length / Math.max(steps.length, 1)) * 100}%`\n                          : '0%'\n                      }}\n                      transition={{ duration: 0.3 }}\n                    />\n                  </div>\n                </motion.div>\n\n                {/* Progress */}\n                <motion.div\n                  className=\"bg-gradient-to-r from-green-500/10 to-emerald-500/10 border border-green-500/30 rounded-lg p-4\"\n                  whileHover={{ scale: 1.02 }}\n                  transition={{ type: 'spring', stiffness: 300 }}\n                >\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center gap-2\">\n                      <BarChart3 className=\"w-5 h-5 text-green-400\" />\n                      <span className=\"text-sm text-gray-300\">Progress</span>\n                    </div>\n                    <motion.span\n                      key={`progress-${currentStep}`}\n                      initial={{ scale: 1.5, color: '#00ff00' }}\n                      animate={{ scale: 1, color: '#ffffff' }}\n                      className=\"text-2xl font-bold font-mono\"\n                    >\n                      {steps.length > 0\n                        ? `${Math.round((currentStep / Math.max(steps.length - 1, 1)) * 100)}%`\n                        : '0%'}\n                    </motion.span>\n                  </div>\n                  <div className=\"mt-2 h-1 bg-gray-800 rounded-full overflow-hidden\">\n                    <motion.div\n                      className=\"h-full bg-gradient-to-r from-green-400 to-emerald-400 shadow-[0_0_10px_rgba(0,255,0,0.8)]\"\n                      initial={{ width: 0 }}\n                      animate={{\n                        width: steps.length > 0\n                          ? `${(currentStep / Math.max(steps.length - 1, 1)) * 100}%`\n                          : '0%'\n                      }}\n                      transition={{ duration: 0.3 }}\n                    />\n                  </div>\n                </motion.div>\n\n                {/* Array Status */}\n                <div className=\"pt-2 space-y-2\">\n                  <div className=\"flex items-center justify-between text-xs\">\n                    <span className=\"text-gray-400\">Total Steps</span>\n                    <span className=\"text-white font-mono\">{steps.length}</span>\n                  </div>\n                  <div className=\"flex items-center justify-between text-xs\">\n                    <span className=\"text-gray-400\">Current Step</span>\n                    <span className=\"text-white font-mono\">{currentStep + 1}</span>\n                  </div>\n                  <div className=\"flex items-center justify-between text-xs\">\n                    <span className=\"text-gray-400\">Array Length</span>\n                    <span className=\"text-white font-mono\">{array.length}</span>\n                  </div>\n                </div>\n\n                {/* Status Indicator */}\n                <div className=\"pt-2 border-t border-gray-700\">\n                  <div className=\"flex items-center gap-2 mt-2\">\n                    <motion.div\n                      className={`w-2 h-2 rounded-full ${\n                        isPlaying\n                          ? 'bg-green-400 shadow-[0_0_10px_rgba(0,255,0,0.8)]'\n                          : steps.length > 0 && currentStep >= steps.length - 1\n                          ? 'bg-blue-400 shadow-[0_0_10px_rgba(0,150,255,0.8)]'\n                          : 'bg-gray-500'\n                      }`}\n                      animate={\n                        isPlaying\n                          ? { scale: [1, 1.5, 1], opacity: [1, 0.5, 1] }\n                          : { scale: 1, opacity: 1 }\n                      }\n                      transition={{ duration: 1, repeat: isPlaying ? Infinity : 0 }}\n                    />\n                    <span className=\"text-xs text-gray-300\">\n                      {isPlaying\n                        ? 'Sorting...'\n                        : steps.length > 0 && currentStep >= steps.length - 1\n                        ? 'Completed'\n                        : 'Ready'}\n                    </span>\n                  </div>\n                </div>\n              </div>\n            </motion.div>\n          </div>\n\n          <div className=\"lg:col-span-3\">\n            <div className=\"bg-gray-900/50 backdrop-blur-lg border border-purple-500/30 rounded-xl p-8 shadow-2xl shadow-purple-500/20 min-h-[600px]\">\n                            {array.length === 0 ? (\n                <motion.div\n                  initial={{ opacity: 0, scale: 0.8 }}\n                  animate={{ opacity: 1, scale: 1 }}\n                  className=\"absolute inset-0 flex flex-col items-center justify-center space-y-6\"\n                >\n                  <motion.div\n                    animate={{\n                      rotate: [0, 360],\n                      scale: [1, 1.2, 1]\n                    }}\n                    transition={{\n                      duration: 3,\n                      repeat: Infinity,\n                      ease: \"easeInOut\"\n                    }}\n                  >\n                    <BarChart3 className=\"w-24 h-24 text-purple-400/50\" />\n                  </motion.div>\n                  <div className=\"text-center space-y-2\">\n                    <h3 className=\"text-2xl font-semibold text-purple-300\">\n                      Generate an Array to Begin\n                    </h3>\n                    <p className=\"text-gray-400\">\n                      Click the button below to create a random array\n                    </p>\n                  </div>\n                </motion.div>\n              ) : (\n                <div className=\"relative w-full h-full flex items-end justify-center gap-1 px-4\">\n                  {(steps.length > 0 ? steps[currentStep]?.array : array).map((element, index) => {\n                    const currentStepData = steps.length > 0 ? steps[currentStep] : null;\n                    const isComparing = currentStepData?.comparingIndices.includes(index);\n                    const isSwapping = currentStepData?.swappingIndices.includes(index);\n                    const isSorted = currentStepData?.sortedIndices.includes(index);\n                    \n                    const maxValue = Math.max(...array.map(el => el.value));\n                    const heightPercentage = (element.value / maxValue) * 100;\n                    \n                    let barColor = NEON_COLORS[index % NEON_COLORS.length];\n                    let glowColor = barColor;\n                    let glowIntensity = '0.3';\n                    \n                    if (isSorted) {\n                      barColor = '#00ff00';\n                      glowColor = '#00ff00';\n                      glowIntensity = '0.8';\n                    } else if (isSwapping) {\n                      barColor = '#ff0066';\n                      glowColor = '#ff0066';\n                      glowIntensity = '1';\n                    } else if (isComparing) {\n                      barColor = '#ffff00';\n                      glowColor = '#ffff00';\n                      glowIntensity = '0.9';\n                    }\n                    \n                    return (\n                      <motion.div\n                        key={element.id}\n                        className=\"relative flex-1 min-w-[4px] max-w-[60px] group\"\n                        initial={{ height: 0, opacity: 0 }}\n                        animate={{\n                          height: `${heightPercentage}%`,\n                          opacity: 1,\n                          y: isSwapping ? [-20, 0] : 0,\n                          scale: isComparing ? [1, 1.1, 1] : 1\n                        }}\n                        transition={{\n                          height: { duration: 0.5, ease: \"easeOut\" },\n                          opacity: { duration: 0.3 },\n                          y: { duration: 0.4, ease: \"easeInOut\" },\n                          scale: { duration: 0.3, repeat: isComparing ? Infinity : 0 }\n                        }}\n                        style={{\n                          backgroundColor: barColor,\n                          boxShadow: `\n                            0 0 20px rgba(${parseInt(glowColor.slice(1, 3), 16)}, ${parseInt(glowColor.slice(3, 5), 16)}, ${parseInt(glowColor.slice(5, 7), 16)}, ${glowIntensity}),\n                            0 0 40px rgba(${parseInt(glowColor.slice(1, 3), 16)}, ${parseInt(glowColor.slice(3, 5), 16)}, ${parseInt(glowColor.slice(5, 7), 16)}, ${parseFloat(glowIntensity) * 0.6}),\n                            inset 0 0 20px rgba(255, 255, 255, 0.2)\n                          `,\n                          borderRadius: '4px 4px 0 0',\n                          position: 'relative'\n                        }}\n                      >\n                        {/* Swap Trail Effect */}\n                        {isSwapping && (\n                          <>\n                            <motion.div\n                              className=\"absolute inset-0 rounded-t\"\n                              initial={{ opacity: 0 }}\n                              animate={{ \n                                opacity: [0, 1, 0],\n                                scale: [1, 1.5, 2]\n                              }}\n                              transition={{ \n                                duration: 0.6,\n                                repeat: Infinity\n                              }}\n                              style={{\n                                background: `radial-gradient(circle, ${barColor}80, transparent)`,\n                                filter: 'blur(10px)'\n                              }}\n                            />\n                            <motion.div\n                              className=\"absolute -top-8 left-1/2 transform -translate-x-1/2\"\n                              initial={{ opacity: 0, y: 10 }}\n                              animate={{ \n                                opacity: [0, 1, 0],\n                                y: [-30, -40, -50]\n                              }}\n                              transition={{ \n                                duration: 0.8,\n                                repeat: Infinity\n                              }}\n                            >\n                              <div className=\"w-2 h-2 rounded-full\" style={{ \n                                backgroundColor: barColor,\n                                boxShadow: `0 0 10px ${barColor}`\n                              }} />\n                            </motion.div>\n                          </>\n                        )}\n                        \n                        {/* Comparison Indicator */}\n                        {isComparing && (\n                          <motion.div\n                            className=\"absolute -top-12 left-1/2 transform -translate-x-1/2\"\n                            initial={{ opacity: 0, scale: 0 }}\n                            animate={{ \n                              opacity: [0, 1, 0],\n                              scale: [0.5, 1.5, 0.5],\n                              rotate: [0, 180, 360]\n                            }}\n                            transition={{ \n                              duration: 1,\n                              repeat: Infinity\n                            }}\n                          >\n                            <div className=\"relative\">\n                              <div className=\"w-8 h-8 border-4 border-yellow-400 rounded-full\" style={{\n                                boxShadow: '0 0 20px rgba(255, 255, 0, 0.8)'\n                              }} />\n                              <div className=\"absolute inset-0 flex items-center justify-center\">\n                                <Zap className=\"w-4 h-4 text-yellow-400\" />\n                              </div>\n                            </div>\n                          </motion.div>\n                        )}\n                        \n                        {/* Sorted Checkmark */}\n                        {isSorted && (\n                          <motion.div\n                            className=\"absolute -top-10 left-1/2 transform -translate-x-1/2\"\n                            initial={{ opacity: 0, scale: 0, rotate: -180 }}\n                            animate={{ \n                              opacity: 1,\n                              scale: 1,\n                              rotate: 0\n                            }}\n                            transition={{ \n                              type: \"spring\",\n                              stiffness: 200,\n                              damping: 10\n                            }}\n                          >\n                            <div className=\"w-6 h-6 rounded-full bg-green-500 flex items-center justify-center\" style={{\n                              boxShadow: '0 0 20px rgba(0, 255, 0, 0.8)'\n                            }}>\n                              <svg className=\"w-4 h-4 text-white\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={3} d=\"M5 13l4 4L19 7\" />\n                              </svg>\n                            </div>\n                          </motion.div>\n                        )}\n                        \n                        {/* Value Label on Hover */}\n                        <motion.div\n                          className=\"absolute -bottom-8 left-1/2 transform -translate-x-1/2 opacity-0 group-hover:opacity-100 transition-opacity duration-200\"\n                          style={{ pointerEvents: 'none' }}\n                        >\n                          <div className=\"px-2 py-1 bg-gray-900 border border-cyan-500/50 rounded text-xs font-mono text-cyan-300 whitespace-nowrap\" style={{\n                            boxShadow: '0 0 10px rgba(0, 255, 255, 0.3)'\n                          }}>\n                            {element.value}\n                          </div>\n                        </motion.div>\n                        \n                        {/* Shimmer Effect */}\n                        <motion.div\n                          className=\"absolute inset-0 rounded-t overflow-hidden\"\n                          style={{ \n                            background: 'linear-gradient(to top, transparent, rgba(255, 255, 255, 0.3), transparent)',\n                            opacity: 0.5\n                          }}\n                          animate={{\n                            y: ['100%', '-100%']\n                          }}\n                          transition={{\n                            duration: 2,\n                            repeat: Infinity,\n                            ease: \"linear\"\n                          }}\n                        />\n                      </motion.div>\n                    );\n                  })}\n                </div>\n              )}\n              \n              <div className=\"relative h-full flex items-end justify-center gap-1\">\n                {(steps.length > 0 && currentStep < steps.length ? steps[currentStep].array : array).map((element, index) => {\n                  const currentStepData = steps.length > 0 && currentStep < steps.length ? steps[currentStep] : null;\n                  const isComparing = currentStepData?.comparingIndices.includes(index);\n                  const isSwapping = currentStepData?.swappingIndices.includes(index);\n                  const isSorted = currentStepData?.sortedIndices.includes(index);\n                  \n                  const barColor = isSorted \n                    ? '#00ff00' \n                    : isSwapping \n                    ? '#ff0066' \n                    : isComparing \n                    ? '#ffff00' \n                    : NEON_COLORS[index % NEON_COLORS.length];\n                  \n                  const maxHeight = 500;\n                  const barHeight = (element.value / 100) * maxHeight;\n                  \n                  return (\n                    <motion.div\n                      key={element.id}\n                      className=\"relative flex-1 min-w-[4px] max-w-[60px] rounded-t-lg\"\n                      initial={{ height: 0, opacity: 0 }}\n                      animate={{\n                        height: barHeight,\n                        opacity: 1,\n                        scale: isSwapping ? 1.1 : isComparing ? 1.05 : 1,\n                        y: isSwapping ? -20 : 0\n                      }}\n                      transition={{\n                        height: { duration: 0.5, ease: 'easeOut' },\n                        scale: { duration: 0.2 },\n                        y: { duration: 0.3, type: 'spring' }\n                      }}\n                      style={{\n                        backgroundColor: barColor,\n                        boxShadow: `\n                          0 0 ${isSwapping ? '40px' : isComparing ? '30px' : '20px'} ${barColor}80,\n                          0 0 ${isSwapping ? '60px' : isComparing ? '45px' : '30px'} ${barColor}40,\n                          inset 0 0 ${isSwapping ? '20px' : '10px'} ${barColor}40\n                        `,\n                        border: `1px solid ${barColor}`,\n                        filter: isSwapping ? 'brightness(1.5)' : isComparing ? 'brightness(1.3)' : 'brightness(1)'\n                      }}\n                    >\n                      {/* Glow effect overlay */}\n                      <motion.div\n                        className=\"absolute inset-0 rounded-t-lg\"\n                        animate={{\n                          opacity: isSwapping ? [0.5, 1, 0.5] : isComparing ? [0.3, 0.7, 0.3] : [0.2, 0.4, 0.2]\n                        }}\n                        transition={{\n                          duration: isSwapping ? 0.5 : isComparing ? 0.8 : 1.5,\n                          repeat: Infinity,\n                          ease: 'easeInOut'\n                        }}\n                        style={{\n                          background: `linear-gradient(to top, transparent, ${barColor}60)`,\n                          boxShadow: `inset 0 0 20px ${barColor}80`\n                        }}\n                      />\n                      \n                      {/* Value label */}\n                      {arraySize[0] <= 30 && (\n                        <motion.div\n                          className=\"absolute -top-8 left-1/2 transform -translate-x-1/2 text-xs font-mono font-bold whitespace-nowrap\"\n                          initial={{ opacity: 0 }}\n                          animate={{ \n                            opacity: isSwapping || isComparing ? 1 : 0.7,\n                            scale: isSwapping ? 1.2 : 1\n                          }}\n                          style={{\n                            color: barColor,\n                            textShadow: `0 0 10px ${barColor}, 0 0 20px ${barColor}80`\n                          }}\n                        >\n                          {element.value}\n                        </motion.div>\n                      )}\n                      \n                      {/* Swap trail effect */}\n                      {isSwapping && (\n                        <motion.div\n                          className=\"absolute inset-0 rounded-t-lg\"\n                          initial={{ opacity: 0, scale: 1 }}\n                          animate={{ \n                            opacity: [0.8, 0],\n                            scale: [1, 1.5]\n                          }}\n                          transition={{\n                            duration: 0.6,\n                            repeat: Infinity\n                          }}\n                          style={{\n                            border: `2px solid ${barColor}`,\n                            boxShadow: `0 0 30px ${barColor}`\n                          }}\n                        />\n                      )}\n                      \n                      {/* Sorted indicator */}\n                      {isSorted && (\n                        <motion.div\n                          className=\"absolute -top-12 left-1/2 transform -translate-x-1/2\"\n                          initial={{ opacity: 0, y: 10 }}\n                          animate={{ opacity: 1, y: 0 }}\n                          transition={{ duration: 0.3 }}\n                        >\n                          <motion.div\n                            animate={{ rotate: 360 }}\n                            transition={{ duration: 2, repeat: Infinity, ease: 'linear' }}\n                            className=\"w-6 h-6 rounded-full bg-green-400 flex items-center justify-center\"\n                            style={{\n                              boxShadow: '0 0 20px #00ff00, 0 0 40px #00ff0080'\n                            }}\n                          >\n                            <div className=\"w-2 h-2 bg-white rounded-full\" />\n                          </motion.div>\n                        </motion.div>\n                      )}\n                    </motion.div>\n                  );\n                })}\n              </div>\n            </div>\n\n            <motion.div\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ delay: 0.3, duration: 0.6 }}\n              className=\"mt-6 bg-gray-900/50 backdrop-blur-lg border border-purple-500/30 rounded-xl p-6 shadow-[0_0_30px_rgba(168,85,247,0.3)]\"\n            >\n              <div className=\"space-y-3\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center gap-2\">\n                    <BarChart3 className=\"w-5 h-5 text-purple-400\" />\n                    <h3 className=\"text-sm font-semibold uppercase tracking-wider text-purple-400\">\n                      Sorting Progress\n                    </h3>\n                  </div>\n                  <motion.span\n                    key={currentStep}\n                    initial={{ scale: 1.2, color: '#a855f7' }}\n                    animate={{ scale: 1, color: '#c084fc' }}\n                    className=\"text-2xl font-bold font-mono text-purple-300\"\n                  >\n                    {steps.length > 0 ? Math.round((currentStep / Math.max(steps.length - 1, 1)) * 100) : 0}%\n                  </motion.span>\n                </div>\n                \n                <div className=\"relative h-4 bg-gray-800/80 rounded-full overflow-hidden border border-purple-500/30\">\n                  <motion.div\n                    className=\"absolute inset-y-0 left-0 bg-gradient-to-r from-cyan-500 via-purple-500 to-pink-500 rounded-full\"\n                    initial={{ width: '0%' }}\n                    animate={{\n                      width: steps.length > 0 ? `${(currentStep / Math.max(steps.length - 1, 1)) * 100}%` : '0%',\n                      boxShadow: [\n                        '0 0 20px rgba(168,85,247,0.6)',\n                        '0 0 40px rgba(168,85,247,0.8)',\n                        '0 0 20px rgba(168,85,247,0.6)'\n                      ]\n                    }}\n                    transition={{\n                      width: { duration: 0.3, ease: 'easeOut' },\n                      boxShadow: { duration: 1.5, repeat: Infinity }\n                    }}\n                  />\n                  \n                  {/* Animated shimmer effect */}\n                  <motion.div\n                    className=\"absolute inset-0 bg-gradient-to-r from-transparent via-white/20 to-transparent\"\n                    animate={{\n                      x: ['-100%', '200%']\n                    }}\n                    transition={{\n                      duration: 2,\n                      repeat: Infinity,\n                      ease: 'linear'\n                    }}\n                    style={{\n                      width: '50%'\n                    }}\n                  />\n                </div>\n                \n                <div className=\"flex justify-between text-xs text-gray-400\">\n                  <span>Step {currentStep} of {Math.max(steps.length - 1, 0)}</span>\n                  <span>\n                    {currentStep >= steps.length - 1 && steps.length > 0 ? (\n                      <motion.span\n                        initial={{ opacity: 0, scale: 0.8 }}\n                        animate={{ opacity: 1, scale: 1 }}\n                        className=\"text-green-400 font-semibold flex items-center gap-1\"\n                      >\n                        \u2713 Complete\n                      </motion.span>\n                    ) : isPlaying ? (\n                      <span className=\"text-cyan-400 font-semibold\">Sorting...</span>\n                    ) : (\n                      <span className=\"text-gray-500\">Ready</span>\n                    )}\n                  </span>\n                </div>\n              </div>\n            </motion.div>\n          </div>\n        </div>\n\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.8, delay: 0.4 }}\n          className=\"bg-gray-900/50 backdrop-blur-lg border border-cyan-500/30 rounded-xl p-6 shadow-[0_0_30px_rgba(0,255,255,0.2)]\"\n        >\n          <div className=\"flex items-center gap-2 mb-6\">\n            <BarChart3 className=\"w-5 h-5 text-cyan-400\" />\n            <h3 className=\"text-lg font-semibold text-cyan-300 uppercase tracking-wider\">Legend</h3>\n          </div>\n          \n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n            <motion.div\n              className=\"flex items-center gap-3 p-4 bg-gray-800/50 rounded-lg border border-cyan-500/30 hover:border-cyan-400/60 transition-all duration-300\"\n              whileHover={{ scale: 1.05 }}\n            >\n              <motion.div\n                className=\"w-6 h-6 rounded bg-cyan-400 shadow-[0_0_20px_rgba(0,255,255,0.8)]\"\n                animate={{\n                  boxShadow: [\n                    '0 0 20px rgba(0,255,255,0.8)',\n                    '0 0 30px rgba(0,255,255,1)',\n                    '0 0 20px rgba(0,255,255,0.8)'\n                  ]\n                }}\n                transition={{ duration: 2, repeat: Infinity }}\n              />\n              <div>\n                <div className=\"text-sm font-semibold text-cyan-300\">Comparing</div>\n                <div className=\"text-xs text-gray-400\">Active comparison</div>\n              </div>\n            </motion.div>\n\n            <motion.div\n              className=\"flex items-center gap-3 p-4 bg-gray-800/50 rounded-lg border border-pink-500/30 hover:border-pink-400/60 transition-all duration-300\"\n              whileHover={{ scale: 1.05 }}\n            >\n              <motion.div\n                className=\"w-6 h-6 rounded bg-pink-400 shadow-[0_0_20px_rgba(236,72,153,0.8)]\"\n                animate={{\n                  boxShadow: [\n                    '0 0 20px rgba(236,72,153,0.8)',\n                    '0 0 30px rgba(236,72,153,1)',\n                    '0 0 20px rgba(236,72,153,0.8)'\n                  ]\n                }}\n                transition={{ duration: 2, repeat: Infinity, delay: 0.5 }}\n              />\n              <div>\n                <div className=\"text-sm font-semibold text-pink-300\">Swapping</div>\n                <div className=\"text-xs text-gray-400\">Elements moving</div>\n              </div>\n            </motion.div>\n\n            <motion.div\n              className=\"flex items-center gap-3 p-4 bg-gray-800/50 rounded-lg border border-green-500/30 hover:border-green-400/60 transition-all duration-300\"\n              whileHover={{ scale: 1.05 }}\n            >\n              <motion.div\n                className=\"w-6 h-6 rounded bg-green-400 shadow-[0_0_20px_rgba(34,197,94,0.8)]\"\n                animate={{\n                  boxShadow: [\n                    '0 0 20px rgba(34,197,94,0.8)',\n                    '0 0 30px rgba(34,197,94,1)',\n                    '0 0 20px rgba(34,197,94,0.8)'\n                  ]\n                }}\n                transition={{ duration: 2, repeat: Infinity, delay: 1 }}\n              />\n              <div>\n                <div className=\"text-sm font-semibold text-green-300\">Sorted</div>\n                <div className=\"text-xs text-gray-400\">In final position</div>\n              </div>\n            </motion.div>\n\n            <motion.div\n              className=\"flex items-center gap-3 p-4 bg-gray-800/50 rounded-lg border border-purple-500/30 hover:border-purple-400/60 transition-all duration-300\"\n              whileHover={{ scale: 1.05 }}\n            >\n              <motion.div\n                className=\"w-6 h-6 rounded bg-gradient-to-br from-purple-400 to-blue-400 shadow-[0_0_20px_rgba(168,85,247,0.8)]\"\n                animate={{\n                  boxShadow: [\n                    '0 0 20px rgba(168,85,247,0.8)',\n                    '0 0 30px rgba(168,85,247,1)',\n                    '0 0 20px rgba(168,85,247,0.8)'\n                  ]\n                }}\n                transition={{ duration: 2, repeat: Infinity, delay: 1.5 }}\n              />\n              <div>\n                <div className=\"text-sm font-semibold text-purple-300\">Unsorted</div>\n                <div className=\"text-xs text-gray-400\">Awaiting sort</div>\n              </div>\n            </motion.div>\n          </div>\n        </motion.div>\n      </div>\n    </div>\n  );\n}",
  "error": null,
  "overall_score": 41,
  "code_quality_score": 12,
  "architecture_score": 10,
  "performance_score": 8,
  "accessibility_score": 11,
  "metadata": {
    "document_id": "eval_room_d7c608b6d6d3",
    "prompt_category": "creative",
    "prompt_complexity": 9.0
  },
  "raw_response": {
    "document_id": "eval_room_d7c608b6d6d3",
    "mode": "parallel",
    "prompt": "Build a captivating algorithm visualizer with neon colored bars, smooth height transitions, glowing comparison indicators, trail effects during swaps, and a futuristic dashboard design with animated controls",
    "content": "import { useState, useCallback } from 'react';\nimport { useEffect } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Slider } from '@/components/ui/slider';\nimport { Play, Pause, RotateCcw, Zap, BarChart3 } from 'lucide-react';\nimport { Activity, TrendingUp, Shuffle } from 'lucide-react';\nimport { motion } from 'framer-motion';\n\ninterface ArrayElement {\n  value: number;\n  id: string;\n  isComparing?: boolean;\n  isSwapping?: boolean;\n  isSorted?: boolean;\n}\n\ninterface AlgorithmStep {\n  array: ArrayElement[];\n  comparingIndices: number[];\n  swappingIndices: number[];\n  sortedIndices: number[];\n}\n\ntype AlgorithmType = 'bubble' | 'quick' | 'merge' | 'insertion';\n\nconst NEON_COLORS = [\n  '#00ffff',\n  '#ff00ff', \n  '#00ff00',\n  '#ffff00',\n  '#ff0066',\n  '#00ffaa'\n];\n\nconst mockAlgorithms = [\n  { id: 'bubble', name: 'Bubble Sort', complexity: 'O(n\u00b2)' },\n  { id: 'quick', name: 'Quick Sort', complexity: 'O(n log n)' },\n  { id: 'merge', name: 'Merge Sort', complexity: 'O(n log n)' },\n  { id: 'insertion', name: 'Insertion Sort', complexity: 'O(n\u00b2)' }\n];\n\nexport default function AlgorithmVisualizer() {\n  const [array, setArray] = useState<ArrayElement[]>([]);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [speed, setSpeed] = useState([50]);\n  const [arraySize, setArraySize] = useState([20]);\n  const [selectedAlgorithm, setSelectedAlgorithm] = useState<AlgorithmType>('bubble');\n  const [currentStep, setCurrentStep] = useState(0);\n  const [steps, setSteps] = useState<AlgorithmStep[]>([]);\n\n  const generateRandomArray = useCallback(() => {\n    const newArray: ArrayElement[] = Array.from({ length: arraySize[0] }, (_, index) => ({\n      value: Math.floor(Math.random() * 100) + 5,\n      id: `element-${index}-${Date.now()}`,\n      isComparing: false,\n      isSwapping: false,\n      isSorted: false\n    }));\n    setArray(newArray);\n    setSteps([]);\n    setCurrentStep(0);\n    setIsPlaying(false);\n  }, [arraySize]);\n\n  const resetVisualization = useCallback(() => {\n\n    setIsPlaying(false);\n    setCurrentStep(0);\n    setSteps([]);\n    generateRandomArray();    \n  }, [generateRandomArray]);\n\n  // Generate algorithm steps for visualization\n  const generateAlgorithmSteps = (arr: ArrayElement[], algorithm: AlgorithmType): AlgorithmStep[] => {\n    const steps: AlgorithmStep[] = [];\n    const workingArray = arr.map(el => ({ ...el }));\n\n    if (algorithm === 'bubble') {\n      for (let i = 0; i < workingArray.length; i++) {\n        for (let j = 0; j < workingArray.length - i - 1; j++) {\n          // Comparing step\n          steps.push({\n            array: workingArray.map(el => ({ ...el })),\n            comparingIndices: [j, j + 1],\n            swappingIndices: [],\n            sortedIndices: Array.from({ length: i }, (_, k) => workingArray.length - 1 - k)\n          });\n\n          if (workingArray[j].value > workingArray[j + 1].value) {\n            // Swapping step\n            [workingArray[j], workingArray[j + 1]] = [workingArray[j + 1], workingArray[j]];\n            steps.push({\n              array: workingArray.map(el => ({ ...el })),\n              comparingIndices: [],\n              swappingIndices: [j, j + 1],\n              sortedIndices: Array.from({ length: i }, (_, k) => workingArray.length - 1 - k)\n            });\n          }\n        }\n      }\n    } else if (algorithm === 'insertion') {\n      for (let i = 1; i < workingArray.length; i++) {\n        const key = workingArray[i];\n        let j = i - 1;\n\n        while (j >= 0 && workingArray[j].value > key.value) {\n          steps.push({\n            array: workingArray.map(el => ({ ...el })),\n            comparingIndices: [j, j + 1],\n            swappingIndices: [],\n            sortedIndices: []\n          });\n\n          workingArray[j + 1] = workingArray[j];\n          steps.push({\n            array: workingArray.map(el => ({ ...el })),\n            comparingIndices: [],\n            swappingIndices: [j, j + 1],\n            sortedIndices: []\n          });\n          j--;\n        }\n        workingArray[j + 1] = key;\n      }\n    }\n\n    // Final sorted state\n    steps.push({\n      array: workingArray.map(el => ({ ...el })),\n      comparingIndices: [],\n      swappingIndices: [],\n      sortedIndices: Array.from({ length: workingArray.length }, (_, i) => i)\n    });\n\n    return steps;\n  };\n  // Animation effect for step-by-step visualization\n  const animateSteps = useCallback(() => {\n    if (currentStep < steps.length - 1) {\n      const delay = 1000 - (speed[0] * 9.5); // Convert speed slider to delay (50ms - 1000ms)\n      const timer = setTimeout(() => {\n        setCurrentStep(prev => prev + 1);\n      }, delay);\n      return () => clearTimeout(timer);\n    } else {\n      setIsPlaying(false);\n    }\n  }, [currentStep, steps.length, speed]);\n\n  useEffect(() => {\n    if (isPlaying && steps.length > 0) {\n      animateSteps();\n    }\n  }, [isPlaying, animateSteps]);\n  const startVisualization = useCallback(() => {\n    if (steps.length === 0) {\n      // Generate steps for the selected algorithm first\n      const algorithmSteps = generateAlgorithmSteps(array, selectedAlgorithm);\n      setSteps(algorithmSteps);\n      setCurrentStep(0);\n    }\n    setIsPlaying(true);\n  }, [steps, speed, currentStep]);\n\n  const pauseVisualization = useCallback(() => {\n\n    setIsPlaying(false);\n  }, []);\n\n  const generateSortingSteps = useCallback((algorithm: AlgorithmType) => {\n    const sortedArray = [...array];\n    const newSteps: AlgorithmStep[] = [];\n\n    const addStep = (arr: ArrayElement[], comparing: number[] = [], swapping: number[] = [], sorted: number[] = []) => {\n      newSteps.push({\n        array: arr.map(el => ({ ...el })),\n        comparingIndices: [...comparing],\n        swappingIndices: [...swapping],\n        sortedIndices: [...sorted]\n      });\n    };\n\n    // Initial state\n    addStep(sortedArray);\n\n    switch (algorithm) {\n      case 'bubble': {\n        const sortedSet = new Set<number>();\n        for (let i = 0; i < sortedArray.length - 1; i++) {\n          for (let j = 0; j < sortedArray.length - i - 1; j++) {\n            // Comparing\n            addStep(sortedArray, [j, j + 1], [], Array.from(sortedSet));\n            \n            if (sortedArray[j].value > sortedArray[j + 1].value) {\n              // Swapping\n              addStep(sortedArray, [], [j, j + 1], Array.from(sortedSet));\n              [sortedArray[j], sortedArray[j + 1]] = [sortedArray[j + 1], sortedArray[j]];\n              addStep(sortedArray, [], [], Array.from(sortedSet));\n            }\n          }\n          sortedSet.add(sortedArray.length - i - 1);\n          addStep(sortedArray, [], [], Array.from(sortedSet));\n        }\n        sortedSet.add(0);\n        addStep(sortedArray, [], [], Array.from(sortedSet));\n        break;\n      }\n\n      case 'insertion': {\n        const sortedSet = new Set<number>([0]);\n        addStep(sortedArray, [], [], [0]);\n        \n        for (let i = 1; i < sortedArray.length; i++) {\n          const key = sortedArray[i];\n          let j = i - 1;\n          \n          addStep(sortedArray, [i], [], Array.from(sortedSet));\n          \n          while (j >= 0 && sortedArray[j].value > key.value) {\n            addStep(sortedArray, [j, j + 1], [], Array.from(sortedSet));\n            addStep(sortedArray, [], [j, j + 1], Array.from(sortedSet));\n            sortedArray[j + 1] = sortedArray[j];\n            addStep(sortedArray, [], [], Array.from(sortedSet));\n            j--;\n          }\n          \n          sortedArray[j + 1] = key;\n          sortedSet.add(i);\n          addStep(sortedArray, [], [], Array.from(sortedSet));\n        }\n        break;\n      }\n\n      case 'quick': {\n        const sortedSet = new Set<number>();\n        \n        const partition = (low: number, high: number): number => {\n          const pivot = sortedArray[high];\n          addStep(sortedArray, [high], [], Array.from(sortedSet));\n          let i = low - 1;\n\n          for (let j = low; j < high; j++) {\n            addStep(sortedArray, [j, high], [], Array.from(sortedSet));\n            \n            if (sortedArray[j].value < pivot.value) {\n              i++;\n              if (i !== j) {\n                addStep(sortedArray, [], [i, j], Array.from(sortedSet));\n                [sortedArray[i], sortedArray[j]] = [sortedArray[j], sortedArray[i]];\n                addStep(sortedArray, [], [], Array.from(sortedSet));\n              }\n            }\n          }\n          \n          addStep(sortedArray, [], [i + 1, high], Array.from(sortedSet));\n          [sortedArray[i + 1], sortedArray[high]] = [sortedArray[high], sortedArray[i + 1]];\n          sortedSet.add(i + 1);\n          addStep(sortedArray, [], [], Array.from(sortedSet));\n          \n          return i + 1;\n        };\n\n        const quickSort = (low: number, high: number) => {\n          if (low < high) {\n            const pi = partition(low, high);\n            quickSort(low, pi - 1);\n            quickSort(pi + 1, high);\n          } else if (low === high) {\n            sortedSet.add(low);\n            addStep(sortedArray, [], [], Array.from(sortedSet));\n          }\n        };\n\n        quickSort(0, sortedArray.length - 1);\n        break;\n      }\n\n      case 'merge': {\n        const sortedSet = new Set<number>();\n        \n        const merge = (left: number, mid: number, right: number) => {\n          const leftArr = sortedArray.slice(left, mid + 1);\n          const rightArr = sortedArray.slice(mid + 1, right + 1);\n          \n          let i = 0, j = 0, k = left;\n          \n          while (i < leftArr.length && j < rightArr.length) {\n            addStep(sortedArray, [left + i, mid + 1 + j], [], Array.from(sortedSet));\n            \n            if (leftArr[i].value <= rightArr[j].value) {\n              sortedArray[k] = leftArr[i];\n              i++;\n            } else {\n              sortedArray[k] = rightArr[j];\n              j++;\n            }\n            addStep(sortedArray, [], [k], Array.from(sortedSet));\n            k++;\n          }\n          \n          while (i < leftArr.length) {\n            sortedArray[k] = leftArr[i];\n            addStep(sortedArray, [], [k], Array.from(sortedSet));\n            i++;\n            k++;\n          }\n          \n          while (j < rightArr.length) {\n            sortedArray[k] = rightArr[j];\n            addStep(sortedArray, [], [k], Array.from(sortedSet));\n            j++;\n            k++;\n          }\n          \n          for (let idx = left; idx <= right; idx++) {\n            sortedSet.add(idx);\n          }\n          addStep(sortedArray, [], [], Array.from(sortedSet));\n        };\n\n        const mergeSort = (left: number, right: number) => {\n          if (left < right) {\n            const mid = Math.floor((left + right) / 2);\n            mergeSort(left, mid);\n            mergeSort(mid + 1, right);\n            merge(left, mid, right);\n          } else if (left === right) {\n            sortedSet.add(left);\n            addStep(sortedArray, [], [], Array.from(sortedSet));\n          }\n        };\n\n        mergeSort(0, sortedArray.length - 1);\n        break;\n      }\n    }\n\n    setSteps(newSteps);\n    setCurrentStep(0);\n  }, [array]);\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-gray-900 via-purple-900 to-gray-900 p-8\">\n      <div className=\"max-w-7xl mx-auto space-y-8\">\n        <motion.div\n          initial={{ opacity: 0, y: -20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.8 }}\n          className=\"text-center space-y-4\"\n        >\n          <motion.h1\n            className=\"text-6xl font-bold bg-gradient-to-r from-cyan-400 via-purple-400 to-pink-400 bg-clip-text text-transparent\"\n            animate={{\n              textShadow: [\n                '0 0 20px rgba(0, 255, 255, 0.5)',\n                '0 0 40px rgba(255, 0, 255, 0.5)',\n                '0 0 20px rgba(0, 255, 255, 0.5)'\n              ]\n            }}\n            transition={{ duration: 2, repeat: Infinity }}\n          >\n            Algorithm Visualizer\n          </motion.h1>\n          \n          <div className=\"flex items-center justify-center gap-4\">\n            <motion.div\n              initial={{ scale: 0 }}\n              animate={{ scale: 1 }}\n              transition={{ delay: 0.3, type: 'spring' }}\n              className=\"flex items-center gap-2 px-6 py-3 bg-gray-800/50 backdrop-blur-sm rounded-full border border-cyan-500/30\"\n            >\n              <Zap className=\"w-5 h-5 text-cyan-400\" />\n              <span className=\"text-xl font-semibold text-cyan-300\">\n                {mockAlgorithms.find(a => a.id === selectedAlgorithm)?.name}\n              </span>\n            </motion.div>\n            \n            <motion.div\n              initial={{ scale: 0 }}\n              animate={{ scale: 1 }}\n              transition={{ delay: 0.5, type: 'spring' }}\n              className=\"px-4 py-2 bg-purple-500/20 backdrop-blur-sm rounded-full border border-purple-400/50\"\n            >\n              <div className=\"flex items-center gap-2\">\n                <BarChart3 className=\"w-4 h-4 text-purple-300\" />\n                <span className=\"text-sm font-mono text-purple-200\">\n                  {mockAlgorithms.find(a => a.id === selectedAlgorithm)?.complexity}\n                </span>\n              </div>\n            </motion.div>\n          </div>\n        </motion.div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-6\">\n          <div className=\"lg:col-span-1 space-y-6\">\n            <motion.div\n              initial={{ opacity: 0, x: -50 }}\n              animate={{ opacity: 1, x: 0 }}\n              className=\"bg-gray-900/50 backdrop-blur-lg border border-cyan-500/30 rounded-xl p-6 shadow-[0_0_30px_rgba(0,255,255,0.3)] hover:shadow-[0_0_50px_rgba(0,255,255,0.5)] transition-all duration-300\"\n            >\n              <div className=\"space-y-6\">\n                {/* Algorithm Selection */}\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center gap-2 text-cyan-400\">\n                    <Zap className=\"w-4 h-4\" />\n                    <h3 className=\"text-sm font-semibold uppercase tracking-wider\">Algorithm</h3>\n                  </div>\n                  <div className=\"grid grid-cols-1 gap-2\">\n                    {mockAlgorithms.map((algo) => (\n                      <button\n                        key={algo.id}\n                        onClick={() => setSelectedAlgorithm(algo.id as AlgorithmType)}\n                        disabled={isPlaying}\n                        className={`p-3 rounded-lg border transition-all duration-300 text-left ${\n                          selectedAlgorithm === algo.id\n                            ? 'bg-cyan-500/20 border-cyan-400 shadow-[0_0_20px_rgba(0,255,255,0.4)]'\n                            : 'bg-gray-800/50 border-gray-700 hover:border-cyan-500/50 hover:bg-gray-800'\n                        } disabled:opacity-50 disabled:cursor-not-allowed`}\n                      >\n                        <div className=\"font-medium text-white\">{algo.name}</div>\n                        <div className=\"text-xs text-gray-400 mt-1\">{algo.complexity}</div>\n                      </button>\n                    ))}\n                  </div>\n                </div>\n\n                {/* Array Size Control */}\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center gap-2 text-purple-400\">\n                      <BarChart3 className=\"w-4 h-4\" />\n                      <h3 className=\"text-sm font-semibold uppercase tracking-wider\">Array Size</h3>\n                    </div>\n                    <span className=\"text-white font-mono text-lg\">{arraySize[0]}</span>\n                  </div>\n                  <Slider\n                    value={arraySize}\n                    onValueChange={setArraySize}\n                    min={5}\n                    max={50}\n                    step={1}\n                    disabled={isPlaying}\n                    className=\"cursor-pointer\"\n                  />\n                </div>\n\n                {/* Speed Control */}\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center gap-2 text-pink-400\">\n                      <Zap className=\"w-4 h-4\" />\n                      <h3 className=\"text-sm font-semibold uppercase tracking-wider\">Speed</h3>\n                    </div>\n                    <span className=\"text-white font-mono text-lg\">{speed[0]}%</span>\n                  </div>\n                  <Slider\n                    value={speed}\n                    onValueChange={setSpeed}\n                    min={10}\n                    max={100}\n                    step={10}\n                    className=\"cursor-pointer\"\n                  />\n                </div>\n\n                {/* Control Buttons */}\n                <div className=\"space-y-3 pt-4 border-t border-gray-700\">\n                  <Button\n                    onClick={isPlaying ? pauseVisualization : startVisualization}\n                    disabled={steps.length === 0 || (currentStep >= steps.length && !isPlaying)}\n                    className=\"w-full bg-gradient-to-r from-cyan-500 to-blue-500 hover:from-cyan-400 hover:to-blue-400 text-white font-semibold shadow-[0_0_20px_rgba(0,255,255,0.5)] hover:shadow-[0_0_30px_rgba(0,255,255,0.7)] transition-all duration-300\"\n                  >\n                    {isPlaying ? (\n                      <>\n                        <Pause className=\"w-4 h-4 mr-2\" />\n                        Pause\n                      </>\n                    ) : (\n                      <>\n                        <Play className=\"w-4 h-4 mr-2\" />\n                        {currentStep >= steps.length ? 'Start' : 'Resume'}\n                      </>\n                    )}\n                  </Button>\n\n                  <Button\n                    onClick={resetVisualization}\n                    variant=\"outline\"\n                    className=\"w-full border-purple-500/50 text-purple-400 hover:bg-purple-500/20 hover:border-purple-400 hover:text-purple-300 shadow-[0_0_15px_rgba(168,85,247,0.3)] hover:shadow-[0_0_25px_rgba(168,85,247,0.5)] transition-all duration-300\"\n                  >\n                    <RotateCcw className=\"w-4 h-4 mr-2\" />\n                    Reset\n                  </Button>\n\n                  <Button\n                    onClick={() => generateSortingSteps(selectedAlgorithm)}\n                    disabled={isPlaying || array.length === 0}\n                    variant=\"outline\"\n                    className=\"w-full border-pink-500/50 text-pink-400 hover:bg-pink-500/20 hover:border-pink-400 hover:text-pink-300 shadow-[0_0_15px_rgba(236,72,153,0.3)] hover:shadow-[0_0_25px_rgba(236,72,153,0.5)] transition-all duration-300\"\n                  >\n                    <Zap className=\"w-4 h-4 mr-2\" />\n                    Generate Steps\n                  </Button>\n                </div>\n\n                {/* Stats Display */}\n                <div className=\"pt-4 border-t border-gray-700 space-y-2\">\n                  <div className=\"flex justify-between text-sm\">\n                    <span className=\"text-gray-400\">Current Step:</span>\n                    <span className=\"text-cyan-400 font-mono\">{currentStep} / {steps.length}</span>\n                  </div>\n                  <div className=\"flex justify-between text-sm\">\n                    <span className=\"text-gray-400\">Array Length:</span>\n                    <span className=\"text-purple-400 font-mono\">{array.length}</span>\n                  </div>\n                </div>\n              </div>\n            </motion.div>\n            \n            <div className=\"bg-gray-900/50 backdrop-blur-lg border border-cyan-500/30 rounded-xl p-6 shadow-2xl shadow-cyan-500/20\">\n              <div className=\"space-y-6\">\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center gap-2 text-cyan-400\">\n                    <Zap className=\"w-4 h-4\" />\n                    <span className=\"text-sm font-semibold tracking-wider\">ALGORITHM</span>\n                  </div>\n                  <div className=\"grid grid-cols-1 gap-3\">\n                    {mockAlgorithms.map((algo) => (\n                      <motion.button\n                        key={algo.id}\n                        onClick={() => setSelectedAlgorithm(algo.id as AlgorithmType)}\n                        className={`relative p-4 rounded-lg border-2 transition-all duration-300 text-left ${\n                          selectedAlgorithm === algo.id\n                            ? 'border-cyan-400 bg-cyan-500/20 shadow-lg shadow-cyan-500/50'\n                            : 'border-gray-700 bg-gray-800/50 hover:border-cyan-500/50 hover:shadow-md hover:shadow-cyan-500/30'\n                        }`}\n                        whileHover={{ scale: 1.02 }}\n                        whileTap={{ scale: 0.98 }}\n                      >\n                        <div className=\"space-y-1\">\n                          <div className={`font-semibold ${\n                            selectedAlgorithm === algo.id ? 'text-cyan-300' : 'text-gray-300'\n                          }`}>\n                            {algo.name}\n                          </div>\n                          <div className={`text-xs font-mono ${\n                            selectedAlgorithm === algo.id ? 'text-cyan-400' : 'text-gray-500'\n                          }`}>\n                            {algo.complexity}\n                          </div>\n                        </div>\n                        {selectedAlgorithm === algo.id && (\n                          <motion.div\n                            className=\"absolute inset-0 rounded-lg border-2 border-cyan-400\"\n                            initial={{ opacity: 0 }}\n                            animate={{ opacity: [0.5, 1, 0.5] }}\n                            transition={{ duration: 2, repeat: Infinity }}\n                          />\n                        )}\n                      </motion.button>\n                    ))}\n                  </div>\n                </div></parameter>\n</invoke>\n\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <label className=\"text-cyan-400 text-sm font-medium flex items-center gap-2\">\n                      <Zap className=\"w-4 h-4\" />\n                      Speed\n                    </label>\n                    <span className=\"text-cyan-300 text-xs\">{speed[0]}ms</span>\n                  </div>\n                  <Slider\n                    value={speed}\n                    onValueChange={setSpeed}\n                    min={10}\n                    max={200}\n                    step={10}\n                    className=\"[&_[role=slider]]:h-4 [&_[role=slider]]:w-4 [&_[role=slider]]:bg-cyan-400 [&_[role=slider]]:border-2 [&_[role=slider]]:border-cyan-300 [&_[role=slider]]:shadow-[0_0_15px_rgba(34,211,238,0.8)] [&_[role=slider]]:transition-all [&_[role=slider]]:hover:shadow-[0_0_25px_rgba(34,211,238,1)] [&_.relative]:h-2 [&_.relative]:bg-gray-800 [&_.relative]:rounded-full [&_.relative]:border [&_.relative]:border-cyan-500/30 [&_.relative_.bg-primary]:bg-gradient-to-r [&_.relative_.bg-primary]:from-cyan-500 [&_.relative_.bg-primary]:to-purple-500 [&_.relative_.bg-primary]:shadow-[0_0_10px_rgba(34,211,238,0.5)]\"\n                  /></parameter>\n                </div>\n\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <label className=\"text-cyan-400 text-sm font-medium flex items-center gap-2\">\n                      <BarChart3 className=\"w-4 h-4\" />\n                      Array Size\n                    </label>\n                    <span className=\"text-cyan-300 text-xs\">{arraySize[0]}</span>\n                  </div>\n                  <Slider\n                    value={arraySize}\n                    onValueChange={setArraySize}\n                    min={5}\n                    max={100}\n                    step={5}\n                    className=\"[&_[role=slider]]:bg-gradient-to-r [&_[role=slider]]:from-purple-500 [&_[role=slider]]:to-pink-500 [&_[role=slider]]:border-2 [&_[role=slider]]:border-purple-300 [&_[role=slider]]:shadow-lg [&_[role=slider]]:shadow-purple-500/50 [&_[role=slider]]:transition-all [&_[role=slider]]:hover:shadow-purple-500/80 [&_[role=slider]]:hover:scale-110 [&>span]:bg-gradient-to-r [&>span]:from-purple-500/30 [&>span]:to-pink-500/30 [&>span]:h-2 [&>span]:rounded-full\"\n                  />\n                </div>\n\n                <div className=\"flex gap-3 pt-4\">\n                  <Button\n                    onClick={isPlaying ? pauseVisualization : startVisualization}\n                    disabled={array.length === 0 || (steps.length === 0 && !isPlaying)}\n                    className=\"flex-1 relative overflow-hidden group bg-gradient-to-r from-cyan-500 to-blue-500 hover:from-cyan-400 hover:to-blue-400 border-0 shadow-lg shadow-cyan-500/50 hover:shadow-cyan-400/70 transition-all duration-300\"\n                  >\n                    <motion.div\n                      className=\"absolute inset-0 bg-gradient-to-r from-cyan-400/0 via-white/20 to-cyan-400/0\"\n                      animate={{\n                        x: ['-100%', '100%'],\n                      }}\n                      transition={{\n                        duration: 2,\n                        repeat: Infinity,\n                        ease: 'linear',\n                      }}\n                    />\n                    <motion.div\n                      className=\"relative flex items-center justify-center gap-2\"\n                      whileHover={{ scale: 1.05 }}\n                      whileTap={{ scale: 0.95 }}\n                    >\n                      <motion.div\n                        key={isPlaying ? 'pause' : 'play'}\n                        initial={{ scale: 0, rotate: -180 }}\n                        animate={{ scale: 1, rotate: 0 }}\n                        exit={{ scale: 0, rotate: 180 }}\n                        transition={{ type: 'spring', stiffness: 200, damping: 15 }}\n                      >\n                        {isPlaying ? (\n                          <Pause className=\"w-4 h-4 fill-current\" />\n                        ) : (\n                          <Play className=\"w-4 h-4 fill-current\" />\n                        )}\n                      </motion.div>\n                      <span className=\"font-semibold\">\n                        {isPlaying ? 'Pause' : 'Play'}\n                      </span>\n                    </motion.div>\n                  </Button>\n                  <Button\n                    onClick={resetVisualization}\n                    disabled={isPlaying}\n                    className=\"flex-1 bg-gradient-to-r from-pink-600 to-red-600 hover:from-pink-500 hover:to-red-500 text-white border-2 border-pink-400 shadow-[0_0_20px_rgba(236,72,153,0.6)] hover:shadow-[0_0_30px_rgba(236,72,153,0.9)] transition-all duration-300 disabled:opacity-50 disabled:cursor-not-allowed group\"\n                  >\n                    <motion.div\n                      className=\"flex items-center gap-2\"\n                      whileHover={{ scale: 1.05 }}\n                      whileTap={{ scale: 0.95, rotate: -360 }}\n                      transition={{ duration: 0.6, type: \"spring\" }}\n                    >\n                      <motion.div\n                        animate={{ rotate: 0 }}\n                        whileHover={{ rotate: 180 }}\n                        transition={{ duration: 0.6 }}\n                      >\n                        <RotateCcw className=\"w-4 h-4\" />\n                      </motion.div>\n                      <span className=\"font-semibold\">Reset</span>\n                    </motion.div>\n                  </Button>\n                </div>\n              </div>\n            </div>\n\n            <motion.div\n              initial={{ opacity: 0, x: -50 }}\n              animate={{ opacity: 1, x: 0 }}\n              transition={{ delay: 0.2 }}\n              className=\"bg-gray-900/50 backdrop-blur-lg border border-purple-500/30 rounded-xl p-6 shadow-[0_0_30px_rgba(168,85,247,0.3)] hover:shadow-[0_0_50px_rgba(168,85,247,0.5)] transition-all duration-300\"\n            >\n              <div className=\"flex items-center gap-2 text-purple-400 mb-4\">\n                <Activity className=\"w-4 h-4\" />\n                <h3 className=\"text-sm font-semibold uppercase tracking-wider\">Statistics</h3>\n              </div>\n              \n              <div className=\"space-y-4\">\n                {/* Comparisons Counter */}\n                <motion.div\n                  className=\"bg-gradient-to-r from-cyan-500/10 to-blue-500/10 border border-cyan-500/30 rounded-lg p-4\"\n                  whileHover={{ scale: 1.02 }}\n                  transition={{ type: 'spring', stiffness: 300 }}\n                >\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center gap-2\">\n                      <TrendingUp className=\"w-5 h-5 text-cyan-400\" />\n                      <span className=\"text-sm text-gray-300\">Comparisons</span>\n                    </div>\n                    <motion.span\n                      key={currentStep}\n                      initial={{ scale: 1.5, color: '#00ffff' }}\n                      animate={{ scale: 1, color: '#ffffff' }}\n                      className=\"text-2xl font-bold font-mono\"\n                    >\n                      {steps.length > 0 && currentStep < steps.length\n                        ? steps.slice(0, currentStep + 1).filter(s => s.comparingIndices.length > 0).length\n                        : 0}\n                    </motion.span>\n                  </div>\n                  <div className=\"mt-2 h-1 bg-gray-800 rounded-full overflow-hidden\">\n                    <motion.div\n                      className=\"h-full bg-gradient-to-r from-cyan-400 to-blue-400 shadow-[0_0_10px_rgba(0,255,255,0.8)]\"\n                      initial={{ width: 0 }}\n                      animate={{\n                        width: steps.length > 0\n                          ? `${(steps.slice(0, currentStep + 1).filter(s => s.comparingIndices.length > 0).length / Math.max(steps.length, 1)) * 100}%`\n                          : '0%'\n                      }}\n                      transition={{ duration: 0.3 }}\n                    />\n                  </div>\n                </motion.div>\n\n                {/* Swaps Counter */}\n                <motion.div\n                  className=\"bg-gradient-to-r from-pink-500/10 to-purple-500/10 border border-pink-500/30 rounded-lg p-4\"\n                  whileHover={{ scale: 1.02 }}\n                  transition={{ type: 'spring', stiffness: 300 }}\n                >\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center gap-2\">\n                      <Shuffle className=\"w-5 h-5 text-pink-400\" />\n                      <span className=\"text-sm text-gray-300\">Swaps</span>\n                    </div>\n                    <motion.span\n                      key={`swap-${currentStep}`}\n                      initial={{ scale: 1.5, color: '#ff00ff' }}\n                      animate={{ scale: 1, color: '#ffffff' }}\n                      className=\"text-2xl font-bold font-mono\"\n                    >\n                      {steps.length > 0 && currentStep < steps.length\n                        ? steps.slice(0, currentStep + 1).filter(s => s.swappingIndices.length > 0).length\n                        : 0}\n                    </motion.span>\n                  </div>\n                  <div className=\"mt-2 h-1 bg-gray-800 rounded-full overflow-hidden\">\n                    <motion.div\n                      className=\"h-full bg-gradient-to-r from-pink-400 to-purple-400 shadow-[0_0_10px_rgba(255,0,255,0.8)]\"\n                      initial={{ width: 0 }}\n                      animate={{\n                        width: steps.length > 0\n                          ? `${(steps.slice(0, currentStep + 1).filter(s => s.swappingIndices.length > 0).length / Math.max(steps.length, 1)) * 100}%`\n                          : '0%'\n                      }}\n                      transition={{ duration: 0.3 }}\n                    />\n                  </div>\n                </motion.div>\n\n                {/* Progress */}\n                <motion.div\n                  className=\"bg-gradient-to-r from-green-500/10 to-emerald-500/10 border border-green-500/30 rounded-lg p-4\"\n                  whileHover={{ scale: 1.02 }}\n                  transition={{ type: 'spring', stiffness: 300 }}\n                >\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center gap-2\">\n                      <BarChart3 className=\"w-5 h-5 text-green-400\" />\n                      <span className=\"text-sm text-gray-300\">Progress</span>\n                    </div>\n                    <motion.span\n                      key={`progress-${currentStep}`}\n                      initial={{ scale: 1.5, color: '#00ff00' }}\n                      animate={{ scale: 1, color: '#ffffff' }}\n                      className=\"text-2xl font-bold font-mono\"\n                    >\n                      {steps.length > 0\n                        ? `${Math.round((currentStep / Math.max(steps.length - 1, 1)) * 100)}%`\n                        : '0%'}\n                    </motion.span>\n                  </div>\n                  <div className=\"mt-2 h-1 bg-gray-800 rounded-full overflow-hidden\">\n                    <motion.div\n                      className=\"h-full bg-gradient-to-r from-green-400 to-emerald-400 shadow-[0_0_10px_rgba(0,255,0,0.8)]\"\n                      initial={{ width: 0 }}\n                      animate={{\n                        width: steps.length > 0\n                          ? `${(currentStep / Math.max(steps.length - 1, 1)) * 100}%`\n                          : '0%'\n                      }}\n                      transition={{ duration: 0.3 }}\n                    />\n                  </div>\n                </motion.div>\n\n                {/* Array Status */}\n                <div className=\"pt-2 space-y-2\">\n                  <div className=\"flex items-center justify-between text-xs\">\n                    <span className=\"text-gray-400\">Total Steps</span>\n                    <span className=\"text-white font-mono\">{steps.length}</span>\n                  </div>\n                  <div className=\"flex items-center justify-between text-xs\">\n                    <span className=\"text-gray-400\">Current Step</span>\n                    <span className=\"text-white font-mono\">{currentStep + 1}</span>\n                  </div>\n                  <div className=\"flex items-center justify-between text-xs\">\n                    <span className=\"text-gray-400\">Array Length</span>\n                    <span className=\"text-white font-mono\">{array.length}</span>\n                  </div>\n                </div>\n\n                {/* Status Indicator */}\n                <div className=\"pt-2 border-t border-gray-700\">\n                  <div className=\"flex items-center gap-2 mt-2\">\n                    <motion.div\n                      className={`w-2 h-2 rounded-full ${\n                        isPlaying\n                          ? 'bg-green-400 shadow-[0_0_10px_rgba(0,255,0,0.8)]'\n                          : steps.length > 0 && currentStep >= steps.length - 1\n                          ? 'bg-blue-400 shadow-[0_0_10px_rgba(0,150,255,0.8)]'\n                          : 'bg-gray-500'\n                      }`}\n                      animate={\n                        isPlaying\n                          ? { scale: [1, 1.5, 1], opacity: [1, 0.5, 1] }\n                          : { scale: 1, opacity: 1 }\n                      }\n                      transition={{ duration: 1, repeat: isPlaying ? Infinity : 0 }}\n                    />\n                    <span className=\"text-xs text-gray-300\">\n                      {isPlaying\n                        ? 'Sorting...'\n                        : steps.length > 0 && currentStep >= steps.length - 1\n                        ? 'Completed'\n                        : 'Ready'}\n                    </span>\n                  </div>\n                </div>\n              </div>\n            </motion.div>\n          </div>\n\n          <div className=\"lg:col-span-3\">\n            <div className=\"bg-gray-900/50 backdrop-blur-lg border border-purple-500/30 rounded-xl p-8 shadow-2xl shadow-purple-500/20 min-h-[600px]\">\n                            {array.length === 0 ? (\n                <motion.div\n                  initial={{ opacity: 0, scale: 0.8 }}\n                  animate={{ opacity: 1, scale: 1 }}\n                  className=\"absolute inset-0 flex flex-col items-center justify-center space-y-6\"\n                >\n                  <motion.div\n                    animate={{\n                      rotate: [0, 360],\n                      scale: [1, 1.2, 1]\n                    }}\n                    transition={{\n                      duration: 3,\n                      repeat: Infinity,\n                      ease: \"easeInOut\"\n                    }}\n                  >\n                    <BarChart3 className=\"w-24 h-24 text-purple-400/50\" />\n                  </motion.div>\n                  <div className=\"text-center space-y-2\">\n                    <h3 className=\"text-2xl font-semibold text-purple-300\">\n                      Generate an Array to Begin\n                    </h3>\n                    <p className=\"text-gray-400\">\n                      Click the button below to create a random array\n                    </p>\n                  </div>\n                </motion.div>\n              ) : (\n                <div className=\"relative w-full h-full flex items-end justify-center gap-1 px-4\">\n                  {(steps.length > 0 ? steps[currentStep]?.array : array).map((element, index) => {\n                    const currentStepData = steps.length > 0 ? steps[currentStep] : null;\n                    const isComparing = currentStepData?.comparingIndices.includes(index);\n                    const isSwapping = currentStepData?.swappingIndices.includes(index);\n                    const isSorted = currentStepData?.sortedIndices.includes(index);\n                    \n                    const maxValue = Math.max(...array.map(el => el.value));\n                    const heightPercentage = (element.value / maxValue) * 100;\n                    \n                    let barColor = NEON_COLORS[index % NEON_COLORS.length];\n                    let glowColor = barColor;\n                    let glowIntensity = '0.3';\n                    \n                    if (isSorted) {\n                      barColor = '#00ff00';\n                      glowColor = '#00ff00';\n                      glowIntensity = '0.8';\n                    } else if (isSwapping) {\n                      barColor = '#ff0066';\n                      glowColor = '#ff0066';\n                      glowIntensity = '1';\n                    } else if (isComparing) {\n                      barColor = '#ffff00';\n                      glowColor = '#ffff00';\n                      glowIntensity = '0.9';\n                    }\n                    \n                    return (\n                      <motion.div\n                        key={element.id}\n                        className=\"relative flex-1 min-w-[4px] max-w-[60px] group\"\n                        initial={{ height: 0, opacity: 0 }}\n                        animate={{\n                          height: `${heightPercentage}%`,\n                          opacity: 1,\n                          y: isSwapping ? [-20, 0] : 0,\n                          scale: isComparing ? [1, 1.1, 1] : 1\n                        }}\n                        transition={{\n                          height: { duration: 0.5, ease: \"easeOut\" },\n                          opacity: { duration: 0.3 },\n                          y: { duration: 0.4, ease: \"easeInOut\" },\n                          scale: { duration: 0.3, repeat: isComparing ? Infinity : 0 }\n                        }}\n                        style={{\n                          backgroundColor: barColor,\n                          boxShadow: `\n                            0 0 20px rgba(${parseInt(glowColor.slice(1, 3), 16)}, ${parseInt(glowColor.slice(3, 5), 16)}, ${parseInt(glowColor.slice(5, 7), 16)}, ${glowIntensity}),\n                            0 0 40px rgba(${parseInt(glowColor.slice(1, 3), 16)}, ${parseInt(glowColor.slice(3, 5), 16)}, ${parseInt(glowColor.slice(5, 7), 16)}, ${parseFloat(glowIntensity) * 0.6}),\n                            inset 0 0 20px rgba(255, 255, 255, 0.2)\n                          `,\n                          borderRadius: '4px 4px 0 0',\n                          position: 'relative'\n                        }}\n                      >\n                        {/* Swap Trail Effect */}\n                        {isSwapping && (\n                          <>\n                            <motion.div\n                              className=\"absolute inset-0 rounded-t\"\n                              initial={{ opacity: 0 }}\n                              animate={{ \n                                opacity: [0, 1, 0],\n                                scale: [1, 1.5, 2]\n                              }}\n                              transition={{ \n                                duration: 0.6,\n                                repeat: Infinity\n                              }}\n                              style={{\n                                background: `radial-gradient(circle, ${barColor}80, transparent)`,\n                                filter: 'blur(10px)'\n                              }}\n                            />\n                            <motion.div\n                              className=\"absolute -top-8 left-1/2 transform -translate-x-1/2\"\n                              initial={{ opacity: 0, y: 10 }}\n                              animate={{ \n                                opacity: [0, 1, 0],\n                                y: [-30, -40, -50]\n                              }}\n                              transition={{ \n                                duration: 0.8,\n                                repeat: Infinity\n                              }}\n                            >\n                              <div className=\"w-2 h-2 rounded-full\" style={{ \n                                backgroundColor: barColor,\n                                boxShadow: `0 0 10px ${barColor}`\n                              }} />\n                            </motion.div>\n                          </>\n                        )}\n                        \n                        {/* Comparison Indicator */}\n                        {isComparing && (\n                          <motion.div\n                            className=\"absolute -top-12 left-1/2 transform -translate-x-1/2\"\n                            initial={{ opacity: 0, scale: 0 }}\n                            animate={{ \n                              opacity: [0, 1, 0],\n                              scale: [0.5, 1.5, 0.5],\n                              rotate: [0, 180, 360]\n                            }}\n                            transition={{ \n                              duration: 1,\n                              repeat: Infinity\n                            }}\n                          >\n                            <div className=\"relative\">\n                              <div className=\"w-8 h-8 border-4 border-yellow-400 rounded-full\" style={{\n                                boxShadow: '0 0 20px rgba(255, 255, 0, 0.8)'\n                              }} />\n                              <div className=\"absolute inset-0 flex items-center justify-center\">\n                                <Zap className=\"w-4 h-4 text-yellow-400\" />\n                              </div>\n                            </div>\n                          </motion.div>\n                        )}\n                        \n                        {/* Sorted Checkmark */}\n                        {isSorted && (\n                          <motion.div\n                            className=\"absolute -top-10 left-1/2 transform -translate-x-1/2\"\n                            initial={{ opacity: 0, scale: 0, rotate: -180 }}\n                            animate={{ \n                              opacity: 1,\n                              scale: 1,\n                              rotate: 0\n                            }}\n                            transition={{ \n                              type: \"spring\",\n                              stiffness: 200,\n                              damping: 10\n                            }}\n                          >\n                            <div className=\"w-6 h-6 rounded-full bg-green-500 flex items-center justify-center\" style={{\n                              boxShadow: '0 0 20px rgba(0, 255, 0, 0.8)'\n                            }}>\n                              <svg className=\"w-4 h-4 text-white\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={3} d=\"M5 13l4 4L19 7\" />\n                              </svg>\n                            </div>\n                          </motion.div>\n                        )}\n                        \n                        {/* Value Label on Hover */}\n                        <motion.div\n                          className=\"absolute -bottom-8 left-1/2 transform -translate-x-1/2 opacity-0 group-hover:opacity-100 transition-opacity duration-200\"\n                          style={{ pointerEvents: 'none' }}\n                        >\n                          <div className=\"px-2 py-1 bg-gray-900 border border-cyan-500/50 rounded text-xs font-mono text-cyan-300 whitespace-nowrap\" style={{\n                            boxShadow: '0 0 10px rgba(0, 255, 255, 0.3)'\n                          }}>\n                            {element.value}\n                          </div>\n                        </motion.div>\n                        \n                        {/* Shimmer Effect */}\n                        <motion.div\n                          className=\"absolute inset-0 rounded-t overflow-hidden\"\n                          style={{ \n                            background: 'linear-gradient(to top, transparent, rgba(255, 255, 255, 0.3), transparent)',\n                            opacity: 0.5\n                          }}\n                          animate={{\n                            y: ['100%', '-100%']\n                          }}\n                          transition={{\n                            duration: 2,\n                            repeat: Infinity,\n                            ease: \"linear\"\n                          }}\n                        />\n                      </motion.div>\n                    );\n                  })}\n                </div>\n              )}\n              \n              <div className=\"relative h-full flex items-end justify-center gap-1\">\n                {(steps.length > 0 && currentStep < steps.length ? steps[currentStep].array : array).map((element, index) => {\n                  const currentStepData = steps.length > 0 && currentStep < steps.length ? steps[currentStep] : null;\n                  const isComparing = currentStepData?.comparingIndices.includes(index);\n                  const isSwapping = currentStepData?.swappingIndices.includes(index);\n                  const isSorted = currentStepData?.sortedIndices.includes(index);\n                  \n                  const barColor = isSorted \n                    ? '#00ff00' \n                    : isSwapping \n                    ? '#ff0066' \n                    : isComparing \n                    ? '#ffff00' \n                    : NEON_COLORS[index % NEON_COLORS.length];\n                  \n                  const maxHeight = 500;\n                  const barHeight = (element.value / 100) * maxHeight;\n                  \n                  return (\n                    <motion.div\n                      key={element.id}\n                      className=\"relative flex-1 min-w-[4px] max-w-[60px] rounded-t-lg\"\n                      initial={{ height: 0, opacity: 0 }}\n                      animate={{\n                        height: barHeight,\n                        opacity: 1,\n                        scale: isSwapping ? 1.1 : isComparing ? 1.05 : 1,\n                        y: isSwapping ? -20 : 0\n                      }}\n                      transition={{\n                        height: { duration: 0.5, ease: 'easeOut' },\n                        scale: { duration: 0.2 },\n                        y: { duration: 0.3, type: 'spring' }\n                      }}\n                      style={{\n                        backgroundColor: barColor,\n                        boxShadow: `\n                          0 0 ${isSwapping ? '40px' : isComparing ? '30px' : '20px'} ${barColor}80,\n                          0 0 ${isSwapping ? '60px' : isComparing ? '45px' : '30px'} ${barColor}40,\n                          inset 0 0 ${isSwapping ? '20px' : '10px'} ${barColor}40\n                        `,\n                        border: `1px solid ${barColor}`,\n                        filter: isSwapping ? 'brightness(1.5)' : isComparing ? 'brightness(1.3)' : 'brightness(1)'\n                      }}\n                    >\n                      {/* Glow effect overlay */}\n                      <motion.div\n                        className=\"absolute inset-0 rounded-t-lg\"\n                        animate={{\n                          opacity: isSwapping ? [0.5, 1, 0.5] : isComparing ? [0.3, 0.7, 0.3] : [0.2, 0.4, 0.2]\n                        }}\n                        transition={{\n                          duration: isSwapping ? 0.5 : isComparing ? 0.8 : 1.5,\n                          repeat: Infinity,\n                          ease: 'easeInOut'\n                        }}\n                        style={{\n                          background: `linear-gradient(to top, transparent, ${barColor}60)`,\n                          boxShadow: `inset 0 0 20px ${barColor}80`\n                        }}\n                      />\n                      \n                      {/* Value label */}\n                      {arraySize[0] <= 30 && (\n                        <motion.div\n                          className=\"absolute -top-8 left-1/2 transform -translate-x-1/2 text-xs font-mono font-bold whitespace-nowrap\"\n                          initial={{ opacity: 0 }}\n                          animate={{ \n                            opacity: isSwapping || isComparing ? 1 : 0.7,\n                            scale: isSwapping ? 1.2 : 1\n                          }}\n                          style={{\n                            color: barColor,\n                            textShadow: `0 0 10px ${barColor}, 0 0 20px ${barColor}80`\n                          }}\n                        >\n                          {element.value}\n                        </motion.div>\n                      )}\n                      \n                      {/* Swap trail effect */}\n                      {isSwapping && (\n                        <motion.div\n                          className=\"absolute inset-0 rounded-t-lg\"\n                          initial={{ opacity: 0, scale: 1 }}\n                          animate={{ \n                            opacity: [0.8, 0],\n                            scale: [1, 1.5]\n                          }}\n                          transition={{\n                            duration: 0.6,\n                            repeat: Infinity\n                          }}\n                          style={{\n                            border: `2px solid ${barColor}`,\n                            boxShadow: `0 0 30px ${barColor}`\n                          }}\n                        />\n                      )}\n                      \n                      {/* Sorted indicator */}\n                      {isSorted && (\n                        <motion.div\n                          className=\"absolute -top-12 left-1/2 transform -translate-x-1/2\"\n                          initial={{ opacity: 0, y: 10 }}\n                          animate={{ opacity: 1, y: 0 }}\n                          transition={{ duration: 0.3 }}\n                        >\n                          <motion.div\n                            animate={{ rotate: 360 }}\n                            transition={{ duration: 2, repeat: Infinity, ease: 'linear' }}\n                            className=\"w-6 h-6 rounded-full bg-green-400 flex items-center justify-center\"\n                            style={{\n                              boxShadow: '0 0 20px #00ff00, 0 0 40px #00ff0080'\n                            }}\n                          >\n                            <div className=\"w-2 h-2 bg-white rounded-full\" />\n                          </motion.div>\n                        </motion.div>\n                      )}\n                    </motion.div>\n                  );\n                })}\n              </div>\n            </div>\n\n            <motion.div\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ delay: 0.3, duration: 0.6 }}\n              className=\"mt-6 bg-gray-900/50 backdrop-blur-lg border border-purple-500/30 rounded-xl p-6 shadow-[0_0_30px_rgba(168,85,247,0.3)]\"\n            >\n              <div className=\"space-y-3\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center gap-2\">\n                    <BarChart3 className=\"w-5 h-5 text-purple-400\" />\n                    <h3 className=\"text-sm font-semibold uppercase tracking-wider text-purple-400\">\n                      Sorting Progress\n                    </h3>\n                  </div>\n                  <motion.span\n                    key={currentStep}\n                    initial={{ scale: 1.2, color: '#a855f7' }}\n                    animate={{ scale: 1, color: '#c084fc' }}\n                    className=\"text-2xl font-bold font-mono text-purple-300\"\n                  >\n                    {steps.length > 0 ? Math.round((currentStep / Math.max(steps.length - 1, 1)) * 100) : 0}%\n                  </motion.span>\n                </div>\n                \n                <div className=\"relative h-4 bg-gray-800/80 rounded-full overflow-hidden border border-purple-500/30\">\n                  <motion.div\n                    className=\"absolute inset-y-0 left-0 bg-gradient-to-r from-cyan-500 via-purple-500 to-pink-500 rounded-full\"\n                    initial={{ width: '0%' }}\n                    animate={{\n                      width: steps.length > 0 ? `${(currentStep / Math.max(steps.length - 1, 1)) * 100}%` : '0%',\n                      boxShadow: [\n                        '0 0 20px rgba(168,85,247,0.6)',\n                        '0 0 40px rgba(168,85,247,0.8)',\n                        '0 0 20px rgba(168,85,247,0.6)'\n                      ]\n                    }}\n                    transition={{\n                      width: { duration: 0.3, ease: 'easeOut' },\n                      boxShadow: { duration: 1.5, repeat: Infinity }\n                    }}\n                  />\n                  \n                  {/* Animated shimmer effect */}\n                  <motion.div\n                    className=\"absolute inset-0 bg-gradient-to-r from-transparent via-white/20 to-transparent\"\n                    animate={{\n                      x: ['-100%', '200%']\n                    }}\n                    transition={{\n                      duration: 2,\n                      repeat: Infinity,\n                      ease: 'linear'\n                    }}\n                    style={{\n                      width: '50%'\n                    }}\n                  />\n                </div>\n                \n                <div className=\"flex justify-between text-xs text-gray-400\">\n                  <span>Step {currentStep} of {Math.max(steps.length - 1, 0)}</span>\n                  <span>\n                    {currentStep >= steps.length - 1 && steps.length > 0 ? (\n                      <motion.span\n                        initial={{ opacity: 0, scale: 0.8 }}\n                        animate={{ opacity: 1, scale: 1 }}\n                        className=\"text-green-400 font-semibold flex items-center gap-1\"\n                      >\n                        \u2713 Complete\n                      </motion.span>\n                    ) : isPlaying ? (\n                      <span className=\"text-cyan-400 font-semibold\">Sorting...</span>\n                    ) : (\n                      <span className=\"text-gray-500\">Ready</span>\n                    )}\n                  </span>\n                </div>\n              </div>\n            </motion.div>\n          </div>\n        </div>\n\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.8, delay: 0.4 }}\n          className=\"bg-gray-900/50 backdrop-blur-lg border border-cyan-500/30 rounded-xl p-6 shadow-[0_0_30px_rgba(0,255,255,0.2)]\"\n        >\n          <div className=\"flex items-center gap-2 mb-6\">\n            <BarChart3 className=\"w-5 h-5 text-cyan-400\" />\n            <h3 className=\"text-lg font-semibold text-cyan-300 uppercase tracking-wider\">Legend</h3>\n          </div>\n          \n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n            <motion.div\n              className=\"flex items-center gap-3 p-4 bg-gray-800/50 rounded-lg border border-cyan-500/30 hover:border-cyan-400/60 transition-all duration-300\"\n              whileHover={{ scale: 1.05 }}\n            >\n              <motion.div\n                className=\"w-6 h-6 rounded bg-cyan-400 shadow-[0_0_20px_rgba(0,255,255,0.8)]\"\n                animate={{\n                  boxShadow: [\n                    '0 0 20px rgba(0,255,255,0.8)',\n                    '0 0 30px rgba(0,255,255,1)',\n                    '0 0 20px rgba(0,255,255,0.8)'\n                  ]\n                }}\n                transition={{ duration: 2, repeat: Infinity }}\n              />\n              <div>\n                <div className=\"text-sm font-semibold text-cyan-300\">Comparing</div>\n                <div className=\"text-xs text-gray-400\">Active comparison</div>\n              </div>\n            </motion.div>\n\n            <motion.div\n              className=\"flex items-center gap-3 p-4 bg-gray-800/50 rounded-lg border border-pink-500/30 hover:border-pink-400/60 transition-all duration-300\"\n              whileHover={{ scale: 1.05 }}\n            >\n              <motion.div\n                className=\"w-6 h-6 rounded bg-pink-400 shadow-[0_0_20px_rgba(236,72,153,0.8)]\"\n                animate={{\n                  boxShadow: [\n                    '0 0 20px rgba(236,72,153,0.8)',\n                    '0 0 30px rgba(236,72,153,1)',\n                    '0 0 20px rgba(236,72,153,0.8)'\n                  ]\n                }}\n                transition={{ duration: 2, repeat: Infinity, delay: 0.5 }}\n              />\n              <div>\n                <div className=\"text-sm font-semibold text-pink-300\">Swapping</div>\n                <div className=\"text-xs text-gray-400\">Elements moving</div>\n              </div>\n            </motion.div>\n\n            <motion.div\n              className=\"flex items-center gap-3 p-4 bg-gray-800/50 rounded-lg border border-green-500/30 hover:border-green-400/60 transition-all duration-300\"\n              whileHover={{ scale: 1.05 }}\n            >\n              <motion.div\n                className=\"w-6 h-6 rounded bg-green-400 shadow-[0_0_20px_rgba(34,197,94,0.8)]\"\n                animate={{\n                  boxShadow: [\n                    '0 0 20px rgba(34,197,94,0.8)',\n                    '0 0 30px rgba(34,197,94,1)',\n                    '0 0 20px rgba(34,197,94,0.8)'\n                  ]\n                }}\n                transition={{ duration: 2, repeat: Infinity, delay: 1 }}\n              />\n              <div>\n                <div className=\"text-sm font-semibold text-green-300\">Sorted</div>\n                <div className=\"text-xs text-gray-400\">In final position</div>\n              </div>\n            </motion.div>\n\n            <motion.div\n              className=\"flex items-center gap-3 p-4 bg-gray-800/50 rounded-lg border border-purple-500/30 hover:border-purple-400/60 transition-all duration-300\"\n              whileHover={{ scale: 1.05 }}\n            >\n              <motion.div\n                className=\"w-6 h-6 rounded bg-gradient-to-br from-purple-400 to-blue-400 shadow-[0_0_20px_rgba(168,85,247,0.8)]\"\n                animate={{\n                  boxShadow: [\n                    '0 0 20px rgba(168,85,247,0.8)',\n                    '0 0 30px rgba(168,85,247,1)',\n                    '0 0 20px rgba(168,85,247,0.8)'\n                  ]\n                }}\n                transition={{ duration: 2, repeat: Infinity, delay: 1.5 }}\n              />\n              <div>\n                <div className=\"text-sm font-semibold text-purple-300\">Unsorted</div>\n                <div className=\"text-xs text-gray-400\">Awaiting sort</div>\n              </div>\n            </motion.div>\n          </div>\n        </motion.div>\n      </div>\n    </div>\n  );\n}",
    "error": null,
    "elapsed_time": 109.3822922706604,
    "success": true
  }
}