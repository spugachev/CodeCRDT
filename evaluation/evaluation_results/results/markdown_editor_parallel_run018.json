{
  "prompt_id": "markdown_editor",
  "prompt_name": "Premium Markdown Editor",
  "mode": "parallel",
  "run_number": 18,
  "timestamp": "2025-10-14T04:29:03.745036",
  "response_time": 79.34262609481812,
  "total_tokens": null,
  "response_content": "import { useState, useCallback } from 'react';\nimport { useRef } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Bold, Italic, Code, List, ListOrdered, Link, Image, Eye, EyeOff } from 'lucide-react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport Prism from 'prismjs';\nimport 'prismjs/components/prism-javascript';\nimport 'prismjs/components/prism-typescript';\nimport 'prismjs/components/prism-python';\nimport 'prismjs/components/prism-jsx';\nimport 'prismjs/components/prism-css';\nimport 'prismjs/components/prism-bash';\nimport 'prismjs/components/prism-json';\nimport { useEffect } from 'react';\n\ninterface ToolbarButton {\n  id: string;\n  icon: any;\n  label: string;\n  action: string;\n}\n\nconst toolbarButtons: ToolbarButton[] = [\n  { id: 'bold', icon: Bold, label: 'Bold', action: '**text**' },\n  { id: 'italic', icon: Italic, label: 'Italic', action: '*text*' },\n  { id: 'code', icon: Code, label: 'Code', action: '`code`' },\n  { id: 'list', icon: List, label: 'Bullet List', action: '- item' },\n  { id: 'ordered', icon: ListOrdered, label: 'Numbered List', action: '1. item' },\n  { id: 'link', icon: Link, label: 'Link', action: '[text](url)' },\n  { id: 'image', icon: Image, label: 'Image', action: '![alt](url)' }\n];\n\nconst calculateStats = (text: string) => {\n  const words = text.trim().split(/\\s+/).filter(word => word.length > 0).length;\n  const characters = text.length;\n  const readingTime = Math.ceil(words / 200); // Average reading speed: 200 words per minute\n  return { words, characters, readingTime };\n};\n\n// Markdown parser utility\nconst parseMarkdown = (text: string): string => {\n  let html = text;\n\n  // Code blocks with syntax highlighting\n  html = html.replace(/```(\\w+)?\\n([\\s\\S]*?)```/g, (match, lang, code) => {\n    const language = lang || 'javascript';\n    let highlighted = code;\n    \n    try {\n      if (Prism.languages[language]) {\n        highlighted = Prism.highlight(code, Prism.languages[language], language);\n      }\n    } catch (e) {\n      highlighted = code;\n    }\n    \n    return `<pre class=\"code-block\"><code class=\"language-${language}\">${highlighted}</code></pre>`;\n  });\n\n  // Headers\n  html = html.replace(/^### (.*$)/gim, '<h3>$1</h3>');\n  html = html.replace(/^## (.*$)/gim, '<h2>$1</h2>');\n  html = html.replace(/^# (.*$)/gim, '<h1>$1</h1>');\n\n  // Bold\n  html = html.replace(/\\*\\*(.*?)\\*\\*/g, '<strong>$1</strong>');\n\n  // Italic\n  html = html.replace(/\\*(.*?)\\*/g, '<em>$1</em>');\n\n  // Inline code\n  html = html.replace(/`([^`]+)`/g, '<code class=\"inline-code\">$1</code>');\n\n  // Links\n  html = html.replace(/\\[([^\\]]+)\\]\\(([^)]+)\\)/g, '<a href=\"$2\" target=\"_blank\" rel=\"noopener noreferrer\">$1</a>');\n\n  // Images\n  html = html.replace(/!\\[([^\\]]*)\\]\\(([^)]+)\\)/g, '<img src=\"$2\" alt=\"$1\" />');\n\n  // Blockquotes\n  html = html.replace(/^> (.*$)/gim, '<blockquote>$1</blockquote>');\n\n  // Horizontal rule\n  html = html.replace(/^---$/gim, '<hr />');\n\n  // Unordered lists\n  html = html.replace(/^\\- (.*$)/gim, '<li class=\"unordered\">$1</li>');\n\n  // Ordered lists\n  html = html.replace(/^\\d+\\. (.*$)/gim, '<li class=\"ordered\">$1</li>');\n\n  // Wrap consecutive list items\n  html = html.replace(/(<li class=\"unordered\">.*<\\/li>\\n?)+/g, '<ul>$&</ul>');\n  html = html.replace(/(<li class=\"ordered\">.*<\\/li>\\n?)+/g, '<ol>$&</ol>');\n\n  // Line breaks\n  html = html.replace(/\\n\\n/g, '<br /><br />');\n  html = html.replace(/\\n/g, '<br />');\n\n  return html;\n};\n\n// Preview component with VS Code styling\nconst MarkdownPreview = ({ content }: { content: string }) => {\n  useEffect(() => {\n    // Re-highlight code blocks when content changes\n    Prism.highlightAll();\n  }, [content]);\n\n  const htmlContent = parseMarkdown(content);\n\n  return (\n    <div \n      className=\"markdown-preview prose prose-invert max-w-none\"\n      dangerouslySetInnerHTML={{ __html: htmlContent }}\n      style={{\n        '--tw-prose-body': '#c9d1d9',\n        '--tw-prose-headings': '#58a6ff',\n        '--tw-prose-links': '#58a6ff',\n        '--tw-prose-bold': '#ffffff',\n        '--tw-prose-code': '#ff7b72',\n        '--tw-prose-quotes': '#8b949e',\n      } as React.CSSProperties}\n    />\n  );\n};\n\nconst mockMarkdownContent = `# Welcome to Premium Markdown Editor\n\n## Features\n\nThis is a **bold** statement and this is *italic* text.\n\n### Code Blocks\n\n\\`\\`\\`javascript\nfunction greet(name) {\n  console.log(\\`Hello, \\${name}!\\`);\n  return true;\n}\n\\`\\`\\`\n\n\\`\\`\\`python\ndef calculate(x, y):\n    result = x + y\n    return result\n\\`\\`\\`\n\n### Lists\n\n- First item\n- Second item\n- Third item\n\n1. Numbered one\n2. Numbered two\n3. Numbered three\n\n### Inline Code\n\nUse \\`const variable = 'value'\\` for inline code.\n\n### Links and Images\n\n[Visit Example](https://example.com)\n\n> This is a blockquote with important information.\n\n---\n\n**End of document**\n`;\n\nexport default function MarkdownEditor() {\n  const [markdown, setMarkdown] = useState(mockMarkdownContent);\n  const [showPreview, setShowPreview] = useState(true);\n  const [cursorPosition, setCursorPosition] = useState(0);\n  const textareaRef = useRef<HTMLTextAreaElement>(null);\n\n  const handleMarkdownChange = useCallback((e: React.ChangeEvent<HTMLTextAreaElement>) => {\n    setMarkdown(e.target.value);\n    setCursorPosition(e.target.selectionStart);\n  }, []);\n\n  const togglePreview = useCallback(() => {\n    setShowPreview(prev => !prev);\n  }, []);\n\n  const handleToolbarAction = useCallback((action: string) => {\n    const textarea = textareaRef.current;\n    if (!textarea) return;\n\n    const start = textarea.selectionStart;\n    const end = textarea.selectionEnd;\n    const selectedText = markdown.substring(start, end);\n    \n    let newText = '';\n    let cursorOffset = 0;\n\n    // Handle different markdown syntax patterns\n    if (action.includes('**text**')) {\n      // Bold\n      newText = selectedText ? `**${selectedText}**` : '**text**';\n      cursorOffset = selectedText ? newText.length : 2;\n    } else if (action.includes('*text*')) {\n      // Italic\n      newText = selectedText ? `*${selectedText}*` : '*text*';\n      cursorOffset = selectedText ? newText.length : 1;\n    } else if (action.includes('`code`')) {\n      // Inline code\n      newText = selectedText ? `\\`${selectedText}\\`` : '`code`';\n      cursorOffset = selectedText ? newText.length : 1;\n    } else if (action.includes('[text](url)')) {\n      // Link\n      newText = selectedText ? `[${selectedText}](url)` : '[text](url)';\n      cursorOffset = selectedText ? newText.length - 4 : 1;\n    } else if (action.includes('![alt](url)')) {\n      // Image\n      newText = selectedText ? `![${selectedText}](url)` : '![alt](url)';\n      cursorOffset = selectedText ? newText.length - 4 : 2;\n    } else if (action.includes('- item')) {\n      // Bullet list\n      const lineStart = markdown.lastIndexOf('\\n', start - 1) + 1;\n      const isNewLine = start === lineStart || markdown[start - 1] === '\\n';\n      newText = isNewLine ? `- ${selectedText || 'item'}` : `\\n- ${selectedText || 'item'}`;\n      cursorOffset = newText.length;\n    } else if (action.includes('1. item')) {\n      // Numbered list\n      const lineStart = markdown.lastIndexOf('\\n', start - 1) + 1;\n      const isNewLine = start === lineStart || markdown[start - 1] === '\\n';\n      newText = isNewLine ? `1. ${selectedText || 'item'}` : `\\n1. ${selectedText || 'item'}`;\n      cursorOffset = newText.length;\n    } else {\n      newText = action;\n      cursorOffset = newText.length;\n    }\n\n    // Insert the new text\n    const newMarkdown = markdown.substring(0, start) + newText + markdown.substring(end);\n    setMarkdown(newMarkdown);\n\n    // Set cursor position after insertion\n    setTimeout(() => {\n      textarea.focus();\n      const newCursorPos = start + cursorOffset;\n      textarea.setSelectionRange(newCursorPos, newCursorPos);\n      setCursorPosition(newCursorPos);\n    }, 0);\n  }, [markdown, cursorPosition]);\n\n  return (\n    <div className=\"min-h-screen bg-[#0d1117] text-gray-100\">\n      <div className=\"container mx-auto px-4 py-6\">\n        {/* Header */}\n        <div className=\"mb-6 flex items-center justify-between\">\n          <h1 className=\"text-3xl font-bold bg-gradient-to-r from-blue-400 to-purple-500 bg-clip-text text-transparent\">\n            Premium Markdown Editor\n          </h1>\n          <Button\n            onClick={togglePreview}\n            variant=\"outline\"\n            className=\"bg-[#161b22] border-[#30363d] hover:bg-[#1f2937] text-gray-300\"\n          >\n            {showPreview ? <EyeOff className=\"w-4 h-4 mr-2\" /> : <Eye className=\"w-4 h-4 mr-2\" />}\n            {showPreview ? 'Hide Preview' : 'Show Preview'}\n          </Button>\n        </div>\n\n        {/* Floating Toolbar */}\n        \n<motion.div\n          initial={{ opacity: 0, y: -20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.5, ease: \"easeOut\" }}\n          className=\"mb-6 bg-[#161b22] border border-[#30363d] rounded-lg p-3 shadow-xl\"\n        >\n          <div className=\"flex flex-wrap gap-2 justify-center\">\n            {toolbarButtons.map((button, index) => (\n              <motion.div\n                key={button.id}\n                initial={{ opacity: 0, scale: 0.8 }}\n                animate={{ opacity: 1, scale: 1 }}\n                transition={{ \n                  duration: 0.3, \n                  delay: index * 0.05,\n                  ease: \"easeOut\"\n                }}\n                whileHover={{ scale: 1.1 }}\n                whileTap={{ scale: 0.95 }}\n              >\n                <Button\n                  onClick={() => handleToolbarAction(button.action)}\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  className=\"relative group bg-[#0d1117] hover:bg-[#1f2937] border border-[#30363d] hover:border-blue-500/50 text-gray-300 hover:text-blue-400 transition-all duration-300\"\n                  title={button.label}\n                >\n                  <button.icon className=\"w-4 h-4\" />\n                  <motion.div\n                    className=\"absolute -bottom-8 left-1/2 transform -translate-x-1/2 bg-[#1f2937] text-xs text-gray-300 px-2 py-1 rounded border border-[#30363d] whitespace-nowrap pointer-events-none\"\n                    initial={{ opacity: 0, y: -5 }}\n                    whileHover={{ opacity: 1, y: 0 }}\n                    transition={{ duration: 0.2 }}\n                  >\n                    {button.label}\n                  </motion.div>\n                </Button>\n              </motion.div>\n            ))}\n          </div>\n        </motion.div>\n\n        {/* Editor Layout */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n          {/* Editor Panel */}\n          <motion.div\n            layout\n            className=\"relative\"\n          >\n            <div className=\"bg-[#0d1117] border border-[#30363d] rounded-lg overflow-hidden shadow-2xl\">\n              <div className=\"bg-[#161b22] px-4 py-3 border-b border-[#30363d] flex items-center justify-between\">\n                <span className=\"text-sm font-medium text-gray-400\">Editor</span>\n                <div className=\"flex gap-2\">\n                  <div className=\"w-3 h-3 rounded-full bg-red-500\"></div>\n                  <div className=\"w-3 h-3 rounded-full bg-yellow-500\"></div>\n                  <div className=\"w-3 h-3 rounded-full bg-green-500\"></div>\n                </div>\n              </div>\n              <textarea\n                value={markdown}\n                onChange={handleMarkdownChange}\n                className=\"w-full h-[600px] bg-[#0d1117] text-gray-100 p-6 font-mono text-sm resize-none focus:outline-none\"\n                placeholder=\"Start writing your markdown...\"\n                spellCheck={false}\n              />\n            </div>\n          </motion.div>\n\n          {/* Preview Panel */}\n          <AnimatePresence mode=\"wait\">\n            {showPreview && (\n              <motion.div\n                initial={{ opacity: 0, x: 20 }}\n                animate={{ opacity: 1, x: 0 }}\n                exit={{ opacity: 0, x: 20 }}\n                transition={{ duration: 0.3 }}\n                className=\"relative\"\n              >\n                <div className=\"bg-[#0d1117] border border-[#30363d] rounded-lg overflow-hidden shadow-2xl\">\n                  <div className=\"bg-[#161b22] px-4 py-3 border-b border-[#30363d]\">\n                    <span className=\"text-sm font-medium text-gray-400\">Preview</span>\n                  </div>\n                  <div className=\"p-6 h-[600px] overflow-y-auto\">\n                    <MarkdownPreview content={markdown} />\n                    <style jsx>{`\n                      .markdown-preview {\n                        color: #c9d1d9;\n                        line-height: 1.6;\n                      }\n\n                      .markdown-preview h1 {\n                        font-size: 2em;\n                        font-weight: 700;\n                        margin-bottom: 1rem;\n                        color: #58a6ff;\n                        border-bottom: 1px solid #30363d;\n                        padding-bottom: 0.5rem;\n                      }\n\n                      .markdown-preview h2 {\n                        font-size: 1.5em;\n                        font-weight: 600;\n                        margin-top: 1.5rem;\n                        margin-bottom: 0.75rem;\n                        color: #58a6ff;\n                        border-bottom: 1px solid #30363d;\n                        padding-bottom: 0.3rem;\n                      }\n\n                      .markdown-preview h3 {\n                        font-size: 1.25em;\n                        font-weight: 600;\n                        margin-top: 1.25rem;\n                        margin-bottom: 0.5rem;\n                        color: #58a6ff;\n                      }\n\n                      .markdown-preview strong {\n                        color: #ffffff;\n                        font-weight: 600;\n                      }\n\n                      .markdown-preview em {\n                        color: #f0883e;\n                        font-style: italic;\n                      }\n\n                      .markdown-preview a {\n                        color: #58a6ff;\n                        text-decoration: none;\n                        border-bottom: 1px solid transparent;\n                        transition: border-color 0.2s;\n                      }\n\n                      .markdown-preview a:hover {\n                        border-bottom-color: #58a6ff;\n                      }\n\n                      .markdown-preview .inline-code {\n                        background: #161b22;\n                        color: #ff7b72;\n                        padding: 0.2em 0.4em;\n                        border-radius: 3px;\n                        font-family: 'Consolas', 'Monaco', 'Courier New', monospace;\n                        font-size: 0.9em;\n                        border: 1px solid #30363d;\n                      }\n\n                      .markdown-preview .code-block {\n                        background: #161b22;\n                        border: 1px solid #30363d;\n                        border-radius: 6px;\n                        padding: 1rem;\n                        margin: 1rem 0;\n                        overflow-x: auto;\n                        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.3);\n                      }\n\n                      .markdown-preview .code-block code {\n                        font-family: 'Consolas', 'Monaco', 'Courier New', monospace;\n                        font-size: 0.875em;\n                        line-height: 1.5;\n                        color: #c9d1d9;\n                      }\n\n                      .markdown-preview ul,\n                      .markdown-preview ol {\n                        margin: 1rem 0;\n                        padding-left: 2rem;\n                      }\n\n                      .markdown-preview li {\n                        margin: 0.5rem 0;\n                        color: #c9d1d9;\n                      }\n\n                      .markdown-preview ul li {\n                        list-style-type: disc;\n                      }\n\n                      .markdown-preview ol li {\n                        list-style-type: decimal;\n                      }\n\n                      .markdown-preview blockquote {\n                        border-left: 4px solid #58a6ff;\n                        padding-left: 1rem;\n                        margin: 1rem 0;\n                        color: #8b949e;\n                        font-style: italic;\n                        background: #161b22;\n                        padding: 0.75rem 1rem;\n                        border-radius: 0 4px 4px 0;\n                      }\n\n                      .markdown-preview hr {\n                        border: none;\n                        border-top: 2px solid #30363d;\n                        margin: 2rem 0;\n                      }\n\n                      .markdown-preview img {\n                        max-width: 100%;\n                        height: auto;\n                        border-radius: 6px;\n                        margin: 1rem 0;\n                        border: 1px solid #30363d;\n                      }\n\n                      /* Prism syntax highlighting - VS Code theme */\n                      .markdown-preview .token.comment,\n                      .markdown-preview .token.prolog,\n                      .markdown-preview .token.doctype,\n                      .markdown-preview .token.cdata {\n                        color: #6a9955;\n                      }\n\n                      .markdown-preview .token.punctuation {\n                        color: #d4d4d4;\n                      }\n\n                      .markdown-preview .token.property,\n                      .markdown-preview .token.tag,\n                      .markdown-preview .token.boolean,\n                      .markdown-preview .token.number,\n                      .markdown-preview .token.constant,\n                      .markdown-preview .token.symbol,\n                      .markdown-preview .token.deleted {\n                        color: #b5cea8;\n                      }\n\n                      .markdown-preview .token.selector,\n                      .markdown-preview .token.attr-name,\n                      .markdown-preview .token.string,\n                      .markdown-preview .token.char,\n                      .markdown-preview .token.builtin,\n                      .markdown-preview .token.inserted {\n                        color: #ce9178;\n                      }\n\n                      .markdown-preview .token.operator,\n                      .markdown-preview .token.entity,\n                      .markdown-preview .token.url,\n                      .markdown-preview .language-css .token.string,\n                      .markdown-preview .style .token.string {\n                        color: #d4d4d4;\n                      }\n\n                      .markdown-preview .token.atrule,\n                      .markdown-preview .token.attr-value,\n                      .markdown-preview .token.keyword {\n                        color: #c586c0;\n                      }\n\n                      .markdown-preview .token.function,\n                      .markdown-preview .token.class-name {\n                        color: #dcdcaa;\n                      }\n\n                      .markdown-preview .token.regex,\n                      .markdown-preview .token.important,\n                      .markdown-preview .token.variable {\n                        color: #4fc1ff;\n                      }\n                    `}</style>\n                  </div>\n                </div>\n              </motion.div>\n            )}\n          </AnimatePresence>\n        </div>\n\n        {/* Stats Bar */}\n                <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.5, delay: 0.2 }}\n          className=\"mt-6 bg-[#161b22] border border-[#30363d] rounded-lg p-4 shadow-xl\"\n        >\n          <div className=\"flex flex-wrap gap-6 justify-center items-center text-sm\">\n            <div className=\"flex items-center gap-2\">\n              <span className=\"text-gray-400\">Words:</span>\n              <span className=\"font-semibold text-blue-400\">{calculateStats(markdown).words}</span>\n            </div>\n            <div className=\"w-px h-4 bg-[#30363d]\"></div>\n            <div className=\"flex items-center gap-2\">\n              <span className=\"text-gray-400\">Characters:</span>\n              <span className=\"font-semibold text-purple-400\">{calculateStats(markdown).characters}</span>\n            </div>\n            <div className=\"w-px h-4 bg-[#30363d]\"></div>\n            <div className=\"flex items-center gap-2\">\n              <span className=\"text-gray-400\">Reading Time:</span>\n              <span className=\"font-semibold text-green-400\">\n                {calculateStats(markdown).readingTime} min\n              </span>\n            </div>\n          </div>\n        </motion.div>\n      </div>\n    </div>\n  );\n}\n",
  "error": null,
  "overall_score": 53,
  "code_quality_score": 16,
  "architecture_score": 14,
  "performance_score": 12,
  "accessibility_score": 11,
  "metadata": {
    "document_id": "eval_room_ec62c66270ef",
    "prompt_category": "productivity",
    "prompt_complexity": 8.0
  },
  "raw_response": {
    "document_id": "eval_room_ec62c66270ef",
    "mode": "parallel",
    "prompt": "Create a premium markdown editor with dark theme, syntax highlighting with vibrant colors, smooth live preview transitions, floating toolbar with hover effects, and code block styling like VS Code",
    "content": "import { useState, useCallback } from 'react';\nimport { useRef } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Bold, Italic, Code, List, ListOrdered, Link, Image, Eye, EyeOff } from 'lucide-react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport Prism from 'prismjs';\nimport 'prismjs/components/prism-javascript';\nimport 'prismjs/components/prism-typescript';\nimport 'prismjs/components/prism-python';\nimport 'prismjs/components/prism-jsx';\nimport 'prismjs/components/prism-css';\nimport 'prismjs/components/prism-bash';\nimport 'prismjs/components/prism-json';\nimport { useEffect } from 'react';\n\ninterface ToolbarButton {\n  id: string;\n  icon: any;\n  label: string;\n  action: string;\n}\n\nconst toolbarButtons: ToolbarButton[] = [\n  { id: 'bold', icon: Bold, label: 'Bold', action: '**text**' },\n  { id: 'italic', icon: Italic, label: 'Italic', action: '*text*' },\n  { id: 'code', icon: Code, label: 'Code', action: '`code`' },\n  { id: 'list', icon: List, label: 'Bullet List', action: '- item' },\n  { id: 'ordered', icon: ListOrdered, label: 'Numbered List', action: '1. item' },\n  { id: 'link', icon: Link, label: 'Link', action: '[text](url)' },\n  { id: 'image', icon: Image, label: 'Image', action: '![alt](url)' }\n];\n\nconst calculateStats = (text: string) => {\n  const words = text.trim().split(/\\s+/).filter(word => word.length > 0).length;\n  const characters = text.length;\n  const readingTime = Math.ceil(words / 200); // Average reading speed: 200 words per minute\n  return { words, characters, readingTime };\n};\n\n// Markdown parser utility\nconst parseMarkdown = (text: string): string => {\n  let html = text;\n\n  // Code blocks with syntax highlighting\n  html = html.replace(/```(\\w+)?\\n([\\s\\S]*?)```/g, (match, lang, code) => {\n    const language = lang || 'javascript';\n    let highlighted = code;\n    \n    try {\n      if (Prism.languages[language]) {\n        highlighted = Prism.highlight(code, Prism.languages[language], language);\n      }\n    } catch (e) {\n      highlighted = code;\n    }\n    \n    return `<pre class=\"code-block\"><code class=\"language-${language}\">${highlighted}</code></pre>`;\n  });\n\n  // Headers\n  html = html.replace(/^### (.*$)/gim, '<h3>$1</h3>');\n  html = html.replace(/^## (.*$)/gim, '<h2>$1</h2>');\n  html = html.replace(/^# (.*$)/gim, '<h1>$1</h1>');\n\n  // Bold\n  html = html.replace(/\\*\\*(.*?)\\*\\*/g, '<strong>$1</strong>');\n\n  // Italic\n  html = html.replace(/\\*(.*?)\\*/g, '<em>$1</em>');\n\n  // Inline code\n  html = html.replace(/`([^`]+)`/g, '<code class=\"inline-code\">$1</code>');\n\n  // Links\n  html = html.replace(/\\[([^\\]]+)\\]\\(([^)]+)\\)/g, '<a href=\"$2\" target=\"_blank\" rel=\"noopener noreferrer\">$1</a>');\n\n  // Images\n  html = html.replace(/!\\[([^\\]]*)\\]\\(([^)]+)\\)/g, '<img src=\"$2\" alt=\"$1\" />');\n\n  // Blockquotes\n  html = html.replace(/^> (.*$)/gim, '<blockquote>$1</blockquote>');\n\n  // Horizontal rule\n  html = html.replace(/^---$/gim, '<hr />');\n\n  // Unordered lists\n  html = html.replace(/^\\- (.*$)/gim, '<li class=\"unordered\">$1</li>');\n\n  // Ordered lists\n  html = html.replace(/^\\d+\\. (.*$)/gim, '<li class=\"ordered\">$1</li>');\n\n  // Wrap consecutive list items\n  html = html.replace(/(<li class=\"unordered\">.*<\\/li>\\n?)+/g, '<ul>$&</ul>');\n  html = html.replace(/(<li class=\"ordered\">.*<\\/li>\\n?)+/g, '<ol>$&</ol>');\n\n  // Line breaks\n  html = html.replace(/\\n\\n/g, '<br /><br />');\n  html = html.replace(/\\n/g, '<br />');\n\n  return html;\n};\n\n// Preview component with VS Code styling\nconst MarkdownPreview = ({ content }: { content: string }) => {\n  useEffect(() => {\n    // Re-highlight code blocks when content changes\n    Prism.highlightAll();\n  }, [content]);\n\n  const htmlContent = parseMarkdown(content);\n\n  return (\n    <div \n      className=\"markdown-preview prose prose-invert max-w-none\"\n      dangerouslySetInnerHTML={{ __html: htmlContent }}\n      style={{\n        '--tw-prose-body': '#c9d1d9',\n        '--tw-prose-headings': '#58a6ff',\n        '--tw-prose-links': '#58a6ff',\n        '--tw-prose-bold': '#ffffff',\n        '--tw-prose-code': '#ff7b72',\n        '--tw-prose-quotes': '#8b949e',\n      } as React.CSSProperties}\n    />\n  );\n};\n\nconst mockMarkdownContent = `# Welcome to Premium Markdown Editor\n\n## Features\n\nThis is a **bold** statement and this is *italic* text.\n\n### Code Blocks\n\n\\`\\`\\`javascript\nfunction greet(name) {\n  console.log(\\`Hello, \\${name}!\\`);\n  return true;\n}\n\\`\\`\\`\n\n\\`\\`\\`python\ndef calculate(x, y):\n    result = x + y\n    return result\n\\`\\`\\`\n\n### Lists\n\n- First item\n- Second item\n- Third item\n\n1. Numbered one\n2. Numbered two\n3. Numbered three\n\n### Inline Code\n\nUse \\`const variable = 'value'\\` for inline code.\n\n### Links and Images\n\n[Visit Example](https://example.com)\n\n> This is a blockquote with important information.\n\n---\n\n**End of document**\n`;\n\nexport default function MarkdownEditor() {\n  const [markdown, setMarkdown] = useState(mockMarkdownContent);\n  const [showPreview, setShowPreview] = useState(true);\n  const [cursorPosition, setCursorPosition] = useState(0);\n  const textareaRef = useRef<HTMLTextAreaElement>(null);\n\n  const handleMarkdownChange = useCallback((e: React.ChangeEvent<HTMLTextAreaElement>) => {\n    setMarkdown(e.target.value);\n    setCursorPosition(e.target.selectionStart);\n  }, []);\n\n  const togglePreview = useCallback(() => {\n    setShowPreview(prev => !prev);\n  }, []);\n\n  const handleToolbarAction = useCallback((action: string) => {\n    const textarea = textareaRef.current;\n    if (!textarea) return;\n\n    const start = textarea.selectionStart;\n    const end = textarea.selectionEnd;\n    const selectedText = markdown.substring(start, end);\n    \n    let newText = '';\n    let cursorOffset = 0;\n\n    // Handle different markdown syntax patterns\n    if (action.includes('**text**')) {\n      // Bold\n      newText = selectedText ? `**${selectedText}**` : '**text**';\n      cursorOffset = selectedText ? newText.length : 2;\n    } else if (action.includes('*text*')) {\n      // Italic\n      newText = selectedText ? `*${selectedText}*` : '*text*';\n      cursorOffset = selectedText ? newText.length : 1;\n    } else if (action.includes('`code`')) {\n      // Inline code\n      newText = selectedText ? `\\`${selectedText}\\`` : '`code`';\n      cursorOffset = selectedText ? newText.length : 1;\n    } else if (action.includes('[text](url)')) {\n      // Link\n      newText = selectedText ? `[${selectedText}](url)` : '[text](url)';\n      cursorOffset = selectedText ? newText.length - 4 : 1;\n    } else if (action.includes('![alt](url)')) {\n      // Image\n      newText = selectedText ? `![${selectedText}](url)` : '![alt](url)';\n      cursorOffset = selectedText ? newText.length - 4 : 2;\n    } else if (action.includes('- item')) {\n      // Bullet list\n      const lineStart = markdown.lastIndexOf('\\n', start - 1) + 1;\n      const isNewLine = start === lineStart || markdown[start - 1] === '\\n';\n      newText = isNewLine ? `- ${selectedText || 'item'}` : `\\n- ${selectedText || 'item'}`;\n      cursorOffset = newText.length;\n    } else if (action.includes('1. item')) {\n      // Numbered list\n      const lineStart = markdown.lastIndexOf('\\n', start - 1) + 1;\n      const isNewLine = start === lineStart || markdown[start - 1] === '\\n';\n      newText = isNewLine ? `1. ${selectedText || 'item'}` : `\\n1. ${selectedText || 'item'}`;\n      cursorOffset = newText.length;\n    } else {\n      newText = action;\n      cursorOffset = newText.length;\n    }\n\n    // Insert the new text\n    const newMarkdown = markdown.substring(0, start) + newText + markdown.substring(end);\n    setMarkdown(newMarkdown);\n\n    // Set cursor position after insertion\n    setTimeout(() => {\n      textarea.focus();\n      const newCursorPos = start + cursorOffset;\n      textarea.setSelectionRange(newCursorPos, newCursorPos);\n      setCursorPosition(newCursorPos);\n    }, 0);\n  }, [markdown, cursorPosition]);\n\n  return (\n    <div className=\"min-h-screen bg-[#0d1117] text-gray-100\">\n      <div className=\"container mx-auto px-4 py-6\">\n        {/* Header */}\n        <div className=\"mb-6 flex items-center justify-between\">\n          <h1 className=\"text-3xl font-bold bg-gradient-to-r from-blue-400 to-purple-500 bg-clip-text text-transparent\">\n            Premium Markdown Editor\n          </h1>\n          <Button\n            onClick={togglePreview}\n            variant=\"outline\"\n            className=\"bg-[#161b22] border-[#30363d] hover:bg-[#1f2937] text-gray-300\"\n          >\n            {showPreview ? <EyeOff className=\"w-4 h-4 mr-2\" /> : <Eye className=\"w-4 h-4 mr-2\" />}\n            {showPreview ? 'Hide Preview' : 'Show Preview'}\n          </Button>\n        </div>\n\n        {/* Floating Toolbar */}\n        \n<motion.div\n          initial={{ opacity: 0, y: -20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.5, ease: \"easeOut\" }}\n          className=\"mb-6 bg-[#161b22] border border-[#30363d] rounded-lg p-3 shadow-xl\"\n        >\n          <div className=\"flex flex-wrap gap-2 justify-center\">\n            {toolbarButtons.map((button, index) => (\n              <motion.div\n                key={button.id}\n                initial={{ opacity: 0, scale: 0.8 }}\n                animate={{ opacity: 1, scale: 1 }}\n                transition={{ \n                  duration: 0.3, \n                  delay: index * 0.05,\n                  ease: \"easeOut\"\n                }}\n                whileHover={{ scale: 1.1 }}\n                whileTap={{ scale: 0.95 }}\n              >\n                <Button\n                  onClick={() => handleToolbarAction(button.action)}\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  className=\"relative group bg-[#0d1117] hover:bg-[#1f2937] border border-[#30363d] hover:border-blue-500/50 text-gray-300 hover:text-blue-400 transition-all duration-300\"\n                  title={button.label}\n                >\n                  <button.icon className=\"w-4 h-4\" />\n                  <motion.div\n                    className=\"absolute -bottom-8 left-1/2 transform -translate-x-1/2 bg-[#1f2937] text-xs text-gray-300 px-2 py-1 rounded border border-[#30363d] whitespace-nowrap pointer-events-none\"\n                    initial={{ opacity: 0, y: -5 }}\n                    whileHover={{ opacity: 1, y: 0 }}\n                    transition={{ duration: 0.2 }}\n                  >\n                    {button.label}\n                  </motion.div>\n                </Button>\n              </motion.div>\n            ))}\n          </div>\n        </motion.div>\n\n        {/* Editor Layout */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n          {/* Editor Panel */}\n          <motion.div\n            layout\n            className=\"relative\"\n          >\n            <div className=\"bg-[#0d1117] border border-[#30363d] rounded-lg overflow-hidden shadow-2xl\">\n              <div className=\"bg-[#161b22] px-4 py-3 border-b border-[#30363d] flex items-center justify-between\">\n                <span className=\"text-sm font-medium text-gray-400\">Editor</span>\n                <div className=\"flex gap-2\">\n                  <div className=\"w-3 h-3 rounded-full bg-red-500\"></div>\n                  <div className=\"w-3 h-3 rounded-full bg-yellow-500\"></div>\n                  <div className=\"w-3 h-3 rounded-full bg-green-500\"></div>\n                </div>\n              </div>\n              <textarea\n                value={markdown}\n                onChange={handleMarkdownChange}\n                className=\"w-full h-[600px] bg-[#0d1117] text-gray-100 p-6 font-mono text-sm resize-none focus:outline-none\"\n                placeholder=\"Start writing your markdown...\"\n                spellCheck={false}\n              />\n            </div>\n          </motion.div>\n\n          {/* Preview Panel */}\n          <AnimatePresence mode=\"wait\">\n            {showPreview && (\n              <motion.div\n                initial={{ opacity: 0, x: 20 }}\n                animate={{ opacity: 1, x: 0 }}\n                exit={{ opacity: 0, x: 20 }}\n                transition={{ duration: 0.3 }}\n                className=\"relative\"\n              >\n                <div className=\"bg-[#0d1117] border border-[#30363d] rounded-lg overflow-hidden shadow-2xl\">\n                  <div className=\"bg-[#161b22] px-4 py-3 border-b border-[#30363d]\">\n                    <span className=\"text-sm font-medium text-gray-400\">Preview</span>\n                  </div>\n                  <div className=\"p-6 h-[600px] overflow-y-auto\">\n                    <MarkdownPreview content={markdown} />\n                    <style jsx>{`\n                      .markdown-preview {\n                        color: #c9d1d9;\n                        line-height: 1.6;\n                      }\n\n                      .markdown-preview h1 {\n                        font-size: 2em;\n                        font-weight: 700;\n                        margin-bottom: 1rem;\n                        color: #58a6ff;\n                        border-bottom: 1px solid #30363d;\n                        padding-bottom: 0.5rem;\n                      }\n\n                      .markdown-preview h2 {\n                        font-size: 1.5em;\n                        font-weight: 600;\n                        margin-top: 1.5rem;\n                        margin-bottom: 0.75rem;\n                        color: #58a6ff;\n                        border-bottom: 1px solid #30363d;\n                        padding-bottom: 0.3rem;\n                      }\n\n                      .markdown-preview h3 {\n                        font-size: 1.25em;\n                        font-weight: 600;\n                        margin-top: 1.25rem;\n                        margin-bottom: 0.5rem;\n                        color: #58a6ff;\n                      }\n\n                      .markdown-preview strong {\n                        color: #ffffff;\n                        font-weight: 600;\n                      }\n\n                      .markdown-preview em {\n                        color: #f0883e;\n                        font-style: italic;\n                      }\n\n                      .markdown-preview a {\n                        color: #58a6ff;\n                        text-decoration: none;\n                        border-bottom: 1px solid transparent;\n                        transition: border-color 0.2s;\n                      }\n\n                      .markdown-preview a:hover {\n                        border-bottom-color: #58a6ff;\n                      }\n\n                      .markdown-preview .inline-code {\n                        background: #161b22;\n                        color: #ff7b72;\n                        padding: 0.2em 0.4em;\n                        border-radius: 3px;\n                        font-family: 'Consolas', 'Monaco', 'Courier New', monospace;\n                        font-size: 0.9em;\n                        border: 1px solid #30363d;\n                      }\n\n                      .markdown-preview .code-block {\n                        background: #161b22;\n                        border: 1px solid #30363d;\n                        border-radius: 6px;\n                        padding: 1rem;\n                        margin: 1rem 0;\n                        overflow-x: auto;\n                        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.3);\n                      }\n\n                      .markdown-preview .code-block code {\n                        font-family: 'Consolas', 'Monaco', 'Courier New', monospace;\n                        font-size: 0.875em;\n                        line-height: 1.5;\n                        color: #c9d1d9;\n                      }\n\n                      .markdown-preview ul,\n                      .markdown-preview ol {\n                        margin: 1rem 0;\n                        padding-left: 2rem;\n                      }\n\n                      .markdown-preview li {\n                        margin: 0.5rem 0;\n                        color: #c9d1d9;\n                      }\n\n                      .markdown-preview ul li {\n                        list-style-type: disc;\n                      }\n\n                      .markdown-preview ol li {\n                        list-style-type: decimal;\n                      }\n\n                      .markdown-preview blockquote {\n                        border-left: 4px solid #58a6ff;\n                        padding-left: 1rem;\n                        margin: 1rem 0;\n                        color: #8b949e;\n                        font-style: italic;\n                        background: #161b22;\n                        padding: 0.75rem 1rem;\n                        border-radius: 0 4px 4px 0;\n                      }\n\n                      .markdown-preview hr {\n                        border: none;\n                        border-top: 2px solid #30363d;\n                        margin: 2rem 0;\n                      }\n\n                      .markdown-preview img {\n                        max-width: 100%;\n                        height: auto;\n                        border-radius: 6px;\n                        margin: 1rem 0;\n                        border: 1px solid #30363d;\n                      }\n\n                      /* Prism syntax highlighting - VS Code theme */\n                      .markdown-preview .token.comment,\n                      .markdown-preview .token.prolog,\n                      .markdown-preview .token.doctype,\n                      .markdown-preview .token.cdata {\n                        color: #6a9955;\n                      }\n\n                      .markdown-preview .token.punctuation {\n                        color: #d4d4d4;\n                      }\n\n                      .markdown-preview .token.property,\n                      .markdown-preview .token.tag,\n                      .markdown-preview .token.boolean,\n                      .markdown-preview .token.number,\n                      .markdown-preview .token.constant,\n                      .markdown-preview .token.symbol,\n                      .markdown-preview .token.deleted {\n                        color: #b5cea8;\n                      }\n\n                      .markdown-preview .token.selector,\n                      .markdown-preview .token.attr-name,\n                      .markdown-preview .token.string,\n                      .markdown-preview .token.char,\n                      .markdown-preview .token.builtin,\n                      .markdown-preview .token.inserted {\n                        color: #ce9178;\n                      }\n\n                      .markdown-preview .token.operator,\n                      .markdown-preview .token.entity,\n                      .markdown-preview .token.url,\n                      .markdown-preview .language-css .token.string,\n                      .markdown-preview .style .token.string {\n                        color: #d4d4d4;\n                      }\n\n                      .markdown-preview .token.atrule,\n                      .markdown-preview .token.attr-value,\n                      .markdown-preview .token.keyword {\n                        color: #c586c0;\n                      }\n\n                      .markdown-preview .token.function,\n                      .markdown-preview .token.class-name {\n                        color: #dcdcaa;\n                      }\n\n                      .markdown-preview .token.regex,\n                      .markdown-preview .token.important,\n                      .markdown-preview .token.variable {\n                        color: #4fc1ff;\n                      }\n                    `}</style>\n                  </div>\n                </div>\n              </motion.div>\n            )}\n          </AnimatePresence>\n        </div>\n\n        {/* Stats Bar */}\n                <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.5, delay: 0.2 }}\n          className=\"mt-6 bg-[#161b22] border border-[#30363d] rounded-lg p-4 shadow-xl\"\n        >\n          <div className=\"flex flex-wrap gap-6 justify-center items-center text-sm\">\n            <div className=\"flex items-center gap-2\">\n              <span className=\"text-gray-400\">Words:</span>\n              <span className=\"font-semibold text-blue-400\">{calculateStats(markdown).words}</span>\n            </div>\n            <div className=\"w-px h-4 bg-[#30363d]\"></div>\n            <div className=\"flex items-center gap-2\">\n              <span className=\"text-gray-400\">Characters:</span>\n              <span className=\"font-semibold text-purple-400\">{calculateStats(markdown).characters}</span>\n            </div>\n            <div className=\"w-px h-4 bg-[#30363d]\"></div>\n            <div className=\"flex items-center gap-2\">\n              <span className=\"text-gray-400\">Reading Time:</span>\n              <span className=\"font-semibold text-green-400\">\n                {calculateStats(markdown).readingTime} min\n              </span>\n            </div>\n          </div>\n        </motion.div>\n      </div>\n    </div>\n  );\n}\n",
    "error": null,
    "elapsed_time": 79.34262609481812,
    "success": true
  }
}