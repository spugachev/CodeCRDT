{
  "prompt_id": "dashboard",
  "prompt_name": "Analytics Dashboard",
  "mode": "parallel",
  "run_number": 26,
  "timestamp": "2025-10-14T10:12:37.421054",
  "response_time": 610.0400266647339,
  "total_tokens": null,
  "response_content": "import { useState, useCallback } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Moon, Sun, RefreshCw } from 'lucide-react';\nimport { ArrowUpDown, ChevronLeft, ChevronRight } from 'lucide-react';\nimport { Badge } from '@/components/ui/badge';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\nimport { TrendingUp, TrendingDown, ShoppingCart, UserPlus, CreditCard, Package } from 'lucide-react';\n\n\nimport { PieChart, Pie, Cell, ResponsiveContainer, Legend, Tooltip } from 'recharts';\nimport { motion } from 'framer-motion';\nimport { motion } from 'framer-motion';\nimport { TrendingUp, TrendingDown, DollarSign, Users, ShoppingCart, Target } from 'lucide-react';\nimport { BarChart3 } from 'lucide-react';\nimport { TrendingUp, TrendingDown, DollarSign, Users, ShoppingCart, Target } from 'lucide-react'\nimport { AlertCircle, AlertTriangle, Info, X } from 'lucide-react';\nimport { Badge } from '@/components/ui/badge';;\nimport { motion } from 'framer-motion';\n\nconst UserAreaChart = ({ data, isDarkMode }: { data: ChartDataPoint[], isDarkMode: boolean }) => {\n  const maxUsers = Math.max(...data.map(d => d.users));\n  const minUsers = Math.min(...data.map(d => d.users));\n  const range = maxUsers - minUsers;\n  const padding = range * 0.2;\n  const chartHeight = 200;\n  const chartWidth = 100;\n\n  const points = data.map((point, index) => {\n    const x = (index / (data.length - 1)) * chartWidth;\n    const y = chartHeight - ((point.users - minUsers + padding) / (range + padding * 2)) * chartHeight;\n    return { x, y, ...point };\n  });\n\n  const pathD = points.reduce((path, point, index) => {\n    if (index === 0) return `M ${point.x} ${point.y}`;\n    return `${path} L ${point.x} ${point.y}`;\n  }, '');\n\n  const areaD = `${pathD} L ${chartWidth} ${chartHeight} L 0 ${chartHeight} Z`;\n\n  return (\n    <div className=\"relative w-full h-[200px]\">\n      <svg viewBox={`0 0 ${chartWidth} ${chartHeight}`} className=\"w-full h-full\" preserveAspectRatio=\"none\">\n        <defs>\n          <linearGradient id=\"userGradient\" x1=\"0%\" y1=\"0%\" x2=\"0%\" y2=\"100%\">\n            <stop offset=\"0%\" stopColor=\"#3b82f6\" stopOpacity=\"0.6\" />\n            <stop offset=\"100%\" stopColor=\"#3b82f6\" stopOpacity=\"0.05\" />\n          </linearGradient>\n        </defs>\n        \n        <motion.path\n          d={areaD}\n          fill=\"url(#userGradient)\"\n          initial={{ opacity: 0 }}\n          animate={{ opacity: 1 }}\n          transition={{ duration: 0.8, ease: \"easeOut\" }}\n        />\n        \n        <motion.path\n          d={pathD}\n          fill=\"none\"\n          stroke=\"#3b82f6\"\n          strokeWidth=\"0.5\"\n          initial={{ pathLength: 0 }}\n          animate={{ pathLength: 1 }}\n          transition={{ duration: 1.5, ease: \"easeInOut\" }}\n        />\n        \n        {points.map((point, index) => (\n          <motion.g key={index}>\n            <motion.circle\n              cx={point.x}\n              cy={point.y}\n              r=\"1\"\n              fill=\"#3b82f6\"\n              initial={{ scale: 0, opacity: 0 }}\n              animate={{ scale: 1, opacity: 1 }}\n              transition={{ delay: index * 0.1, duration: 0.3 }}\n            />\n          </motion.g>\n        ))}\n      </svg>\n      \n      <div className=\"flex justify-between mt-4 text-xs\">\n        {data.map((point, index) => (\n          index % Math.ceil(data.length / 4) === 0 && (\n            <span key={index} className={isDarkMode ? 'text-gray-400' : 'text-gray-600'}>\n              {new Date(point.date).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n            </span>\n          )\n        ))}\n      </div>\n      \n      <div className=\"mt-4 grid grid-cols-3 gap-4\">\n        <div>\n          <p className={`text-xs ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>Current</p>\n          <p className={`text-lg font-semibold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n            {data[data.length - 1].users.toLocaleString()}\n          </p>\n        </div>\n        <div>\n          <p className={`text-xs ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>Peak</p>\n          <p className={`text-lg font-semibold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n            {maxUsers.toLocaleString()}\n          </p>\n        </div>\n        <div>\n          <p className={`text-xs ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>Growth</p>\n          <p className=\"text-lg font-semibold text-blue-500\">\n            +{(((data[data.length - 1].users - data[0].users) / data[0].users) * 100).toFixed(1)}%\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n};\n\ninterface MetricData {\n  id: string;\n  label: string;\n  value: number;\n  change: number;\n  trend: 'up' | 'down';\n}\n\ninterface ChartDataPoint {\n  date: string;\n  revenue: number;\n  users: number;\n  orders: number;\n}\n\ninterface TableRow {\n  id: string;\n  product: string;\n  sales: number;\n  revenue: number;\n  status: 'active' | 'pending' | 'inactive';\n}\n\nconst mockMetrics: MetricData[] = [\n  { id: '1', label: 'Total Revenue', value: 45231, change: 12.5, trend: 'up' },\n  { id: '2', label: 'Active Users', value: 2350, change: 8.2, trend: 'up' },\n  { id: '3', label: 'Total Orders', value: 1543, change: -3.1, trend: 'down' },\n  { id: '4', label: 'Conversion Rate', value: 3.24, change: 5.7, trend: 'up' }\n];\n\nconst mockChartData: ChartDataPoint[] = [\n  { date: '2024-01-01', revenue: 12000, users: 450, orders: 230 },\n  { date: '2024-01-02', revenue: 15000, users: 520, orders: 280 },\n  { date: '2024-01-03', revenue: 13500, users: 490, orders: 250 },\n  { date: '2024-01-04', revenue: 18000, users: 610, orders: 320 },\n  { date: '2024-01-05', revenue: 16500, users: 580, orders: 295 },\n  { date: '2024-01-06', revenue: 20000, users: 680, orders: 350 },\n  { date: '2024-01-07', revenue: 22000, users: 720, orders: 380 }\n];\n\nconst mockTableData: TableRow[] = [\n  { id: '1', product: 'Premium Plan', sales: 234, revenue: 23400, status: 'active' },\n  { id: '2', product: 'Basic Plan', sales: 567, revenue: 11340, status: 'active' },\n  { id: '3', product: 'Enterprise Plan', sales: 89, revenue: 44500, status: 'active' },\n  { id: '4', product: 'Starter Plan', sales: 432, revenue: 4320, status: 'pending' },\n  { id: '5', product: 'Pro Plan', sales: 156, revenue: 15600, status: 'inactive' }\n];\ninterface Alert {\n  id: string;\n  severity: 'error' | 'warning' | 'info';\n  title: string;\n  message: string;\n  timestamp: string;\n}\n\nconst mockAlerts: Alert[] = [\n  {\n    id: '1',\n    severity: 'error',\n    title: 'Server Error',\n    message: 'Failed to sync data with backup server',\n    timestamp: '2 min ago'\n  },\n  {\n    id: '2',\n    severity: 'warning',\n    title: 'High Traffic',\n    message: 'Server load at 85% capacity',\n    timestamp: '15 min ago'\n  },\n  {\n    id: '3',\n    severity: 'info',\n    title: 'Update Available',\n    message: 'New dashboard features are ready',\n    timestamp: '1 hour ago'\n  },\n  {\n    id: '4',\n    severity: 'warning',\n    title: 'Low Inventory',\n    message: 'Premium Plan stock below threshold',\n    timestamp: '2 hours ago'\n  }\n];\n\nconst mockQuickStats = [\n  { \n    id: '1', \n    label: 'Avg Order Value', \n    value: '$142', \n    change: 15.3, \n    trend: 'up' as const,\n    icon: DollarSign,\n    sparklineData: [120, 135, 128, 145, 138, 152, 142]\n  },\n  { \n    id: '2', \n    label: 'Customer Retention', \n    value: '87%', \n    change: 3.2, \n    trend: 'up' as const,\n    icon: Users,\n    sparklineData: [82, 83, 85, 84, 86, 85, 87]\n  },\n  { \n    id: '3', \n    label: 'Cart Abandonment', \n    value: '23%', \n    change: -5.1, \n    trend: 'down' as const,\n    icon: ShoppingCart,\n    sparklineData: [28, 27, 26, 25, 24, 24, 23]\n  },\n  { \n    id: '4', \n    label: 'Goal Completion', \n    value: '94%', \n    change: 8.7, \n    trend: 'up' as const,\n    icon: Target,\n    sparklineData: [85, 87, 89, 90, 91, 93, 94]\n  }\n];\n\nconst Sparkline = ({ data, trend, isDarkMode }: { data: number[], trend: 'up' | 'down', isDarkMode: boolean }) => {\n  const max = Math.max(...data);\n  const min = Math.min(...data);\n  const range = max - min || 1;\n  \n  const points = data.map((value, index) => {\n    const x = (index / (data.length - 1)) * 100;\n    const y = 100 - ((value - min) / range) * 100;\n    return `${x},${y}`;\n  }).join(' ');\n\n  const pathD = `M ${points.split(' ').map((point, i) => {\n    const [x, y] = point.split(',');\n    return i === 0 ? `${x} ${y}` : `L ${x} ${y}`;\n  }).join(' ')}`;\n\n  return (\n    <svg className=\"w-full h-12\" viewBox=\"0 0 100 100\" preserveAspectRatio=\"none\">\n      <motion.path\n        d={pathD}\n        fill=\"none\"\n        stroke={trend === 'up' ? (isDarkMode ? '#10b981' : '#059669') : (isDarkMode ? '#ef4444' : '#dc2626')}\n        strokeWidth=\"2\"\n        initial={{ pathLength: 0, opacity: 0 }}\n        animate={{ pathLength: 1, opacity: 1 }}\n        transition={{ duration: 1, ease: \"easeInOut\" }}\n      />\n    </svg>\n  );\n};\ninterface ActivityItem {\n  id: string;\n  type: 'sale' | 'user' | 'order' | 'payment';\n  message: string;\n  timestamp: string;\n  icon: any;\n  color: string;\n}\n\nconst mockActivityData: ActivityItem[] = [\n  {\n    id: '1',\n    type: 'sale',\n    message: 'New sale: Premium Plan',\n    timestamp: '2 minutes ago',\n    icon: TrendingUp,\n    color: 'text-green-500'\n  },\n  {\n    id: '2',\n    type: 'user',\n    message: 'New user registered',\n    timestamp: '5 minutes ago',\n    icon: UserPlus,\n    color: 'text-blue-500'\n  },\n  {\n    id: '3',\n    type: 'order',\n    message: 'Order #1234 completed',\n    timestamp: '12 minutes ago',\n    icon: ShoppingCart,\n    color: 'text-purple-500'\n  },\n  {\n    id: '4',\n    type: 'payment',\n    message: 'Payment received: $450',\n    timestamp: '18 minutes ago',\n    icon: CreditCard,\n    color: 'text-emerald-500'\n  },\n  {\n    id: '5',\n    type: 'order',\n    message: 'New order placed',\n    timestamp: '25 minutes ago',\n    icon: Package,\n    color: 'text-orange-500'\n  },\n  {\n    id: '6',\n    type: 'sale',\n    message: 'Enterprise Plan upgraded',\n    timestamp: '32 minutes ago',\n    icon: TrendingUp,\n    color: 'text-green-500'\n  }\n];\n\nconst RevenueChart = ({ data, isDarkMode }: { data: ChartDataPoint[], isDarkMode: boolean }) => {\n  const [hoveredPoint, setHoveredPoint] = useState<number | null>(null);\n  \n  const maxRevenue = Math.max(...data.map(d => d.revenue));\n  const minRevenue = Math.min(...data.map(d => d.revenue));\n  const revenueRange = maxRevenue - minRevenue;\n  \n  const chartWidth = 100;\n  const chartHeight = 100;\n  const padding = 10;\n  \n  const points = data.map((point, index) => {\n    const x = padding + (index / (data.length - 1)) * (chartWidth - 2 * padding);\n    const y = chartHeight - padding - ((point.revenue - minRevenue) / revenueRange) * (chartHeight - 2 * padding);\n    return { x, y, ...point };\n  });\n  \n  const pathData = points.map((p, i) => `${i === 0 ? 'M' : 'L'} ${p.x} ${p.y}`).join(' ');\n  \n  const areaPath = `${pathData} L ${points[points.length - 1].x} ${chartHeight - padding} L ${points[0].x} ${chartHeight - padding} Z`;\n  \n  return (\n    <div className=\"relative w-full h-64 md:h-80\">\n      <svg\n        viewBox={`0 0 ${chartWidth} ${chartHeight}`}\n        className=\"w-full h-full\"\n        preserveAspectRatio=\"none\"\n      >\n        <defs>\n          <linearGradient id=\"revenueGradient\" x1=\"0%\" y1=\"0%\" x2=\"0%\" y2=\"100%\">\n            <stop offset=\"0%\" stopColor={isDarkMode ? \"#3b82f6\" : \"#2563eb\"} stopOpacity=\"0.3\" />\n            <stop offset=\"100%\" stopColor={isDarkMode ? \"#3b82f6\" : \"#2563eb\"} stopOpacity=\"0.05\" />\n          </linearGradient>\n        </defs>\n        \n        <motion.path\n          d={areaPath}\n          fill=\"url(#revenueGradient)\"\n          initial={{ opacity: 0 }}\n          animate={{ opacity: 1 }}\n          transition={{ duration: 0.5 }}\n        />\n        \n        <motion.path\n          d={pathData}\n          fill=\"none\"\n          stroke={isDarkMode ? \"#3b82f6\" : \"#2563eb\"}\n          strokeWidth=\"0.5\"\n          strokeLinecap=\"round\"\n          strokeLinejoin=\"round\"\n          initial={{ pathLength: 0 }}\n          animate={{ pathLength: 1 }}\n          transition={{ duration: 1, ease: \"easeInOut\" }}\n        />\n        \n        {points.map((point, index) => (\n          <g key={index}>\n            <motion.circle\n              cx={point.x}\n              cy={point.y}\n              r={hoveredPoint === index ? \"1.5\" : \"0.8\"}\n              fill={isDarkMode ? \"#3b82f6\" : \"#2563eb\"}\n              initial={{ scale: 0 }}\n              animate={{ scale: 1 }}\n              transition={{ delay: index * 0.1, duration: 0.3 }}\n              onMouseEnter={() => setHoveredPoint(index)}\n              onMouseLeave={() => setHoveredPoint(null)}\n              className=\"cursor-pointer transition-all\"\n              style={{ transformOrigin: `${point.x}px ${point.y}px` }}\n            />\n          </g>\n        ))}\n      </svg>\n      \n      {hoveredPoint !== null && (\n        <motion.div\n          initial={{ opacity: 0, y: 10 }}\n          animate={{ opacity: 1, y: 0 }}\n          className={`absolute top-4 left-1/2 transform -translate-x-1/2 ${\n            isDarkMode ? 'bg-gray-700 text-white' : 'bg-white text-gray-900'\n          } px-4 py-2 rounded-lg shadow-lg border ${\n            isDarkMode ? 'border-gray-600' : 'border-gray-200'\n          } z-10`}\n        >\n          <div className=\"text-xs font-medium mb-1\">\n            {new Date(points[hoveredPoint].date).toLocaleDateString('en-US', { \n              month: 'short', \n              day: 'numeric' \n            })}\n          </div>\n          <div className=\"text-lg font-bold\">\n            ${points[hoveredPoint].revenue.toLocaleString()}\n          </div>\n          <div className={`text-xs ${isDarkMode ? 'text-gray-400' : 'text-gray-500'}`}>\n            {points[hoveredPoint].users} users \u2022 {points[hoveredPoint].orders} orders\n          </div>\n        </motion.div>\n      )}\n      \n      <div className={`flex justify-between mt-2 px-2 text-xs ${\n        isDarkMode ? 'text-gray-400' : 'text-gray-600'\n      }`}>\n        <span>{new Date(data[0].date).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}</span>\n        <span>{new Date(data[data.length - 1].date).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}</span>\n      </div>\n    </div>\n  );\n};\n\n\ntype SortField = 'product' | 'sales' | 'revenue' | 'status';\ntype SortDirection = 'asc' | 'desc';\n\nconst ITEMS_PER_PAGE = 3;\n\nconst QuickStats = ({ isDarkMode }: { isDarkMode: boolean }) => {\n  return (\n    <div className=\"space-y-4\">\n      {mockQuickStats.map((stat, index) => {\n        const Icon = stat.icon;\n        return (\n          <motion.div\n            key={stat.id}\n            initial={{ opacity: 0, x: -20 }}\n            animate={{ opacity: 1, x: 0 }}\n            transition={{ delay: index * 0.1 }}\n            className={`p-4 rounded-lg border ${\n              isDarkMode ? 'bg-gray-700/50 border-gray-600' : 'bg-white border-gray-200'\n            }`}\n          >\n            <div className=\"flex items-start justify-between mb-2\">\n              <div className=\"flex items-center gap-2\">\n                <div className={`p-2 rounded-lg ${\n                  isDarkMode ? 'bg-gray-600' : 'bg-gray-100'\n                }`}>\n                  <Icon className={`h-4 w-4 ${isDarkMode ? 'text-gray-300' : 'text-gray-600'}`} />\n                </div>\n                <div>\n                  <p className={`text-xs ${isDarkMode ? 'text-gray-400' : 'text-gray-500'}`}>\n                    {stat.label}\n                  </p>\n                  <p className={`text-lg font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                    {stat.value}\n                  </p>\n                </div>\n              </div>\n              <div className={`flex items-center gap-1 text-xs font-medium ${\n                stat.trend === 'up' \n                  ? 'text-green-600 dark:text-green-400' \n                  : 'text-red-600 dark:text-red-400'\n              }`}>\n                {stat.trend === 'up' ? (\n                  <TrendingUp className=\"h-3 w-3\" />\n                ) : (\n                  <TrendingDown className=\"h-3 w-3\" />\n                )}\n                {Math.abs(stat.change)}%\n              </div>\n            </div>\n            <Sparkline data={stat.sparklineData} trend={stat.trend} isDarkMode={isDarkMode} />\n          </motion.div>\n        );\n      })}\n    </div>\n  );\n};\n\nexport default function AnalyticsDashboard() {\n  const [isDarkMode, setIsDarkMode] = useState(false);\n  const [metrics, setMetrics] = useState<MetricData[]>(mockMetrics);\n  const [chartData, setChartData] = useState<ChartDataPoint[]>(mockChartData);\n  const [tableData, setTableData] = useState<TableRow[]>(mockTableData);\n  const [isRefreshing, setIsRefreshing] = useState(false);\n  const [sortField, setSortField] = useState<SortField>('revenue');\n  const [sortDirection, setSortDirection] = useState<SortDirection>('desc');\n  const [currentPage, setCurrentPage] = useState(1);\n  const [alerts, setAlerts] = useState<Alert[]>(mockAlerts);\n\n  const dismissAlert = useCallback((alertId: string) => {\n    setAlerts(prev => prev.filter(alert => alert.id !== alertId));\n  }, []);\n  // Prepare pie chart data from table data\n  const pieChartData = tableData.map(item => ({\n    name: item.product,\n    value: item.sales,\n    revenue: item.revenue\n  }));\n\n  const COLORS = ['#3b82f6', '#8b5cf6', '#ec4899', '#f59e0b', '#10b981'];\n\n  const toggleDarkMode = useCallback(() => {\n    setIsDarkMode(prev => !prev);\n  }, []);\n\n  const handleSort = useCallback((field: SortField) => {\n    if (sortField === field) {\n      setSortDirection(prev => prev === 'asc' ? 'desc' : 'asc');\n    } else {\n      setSortField(field);\n      setSortDirection('desc');\n    }\n    setCurrentPage(1);\n  }, [sortField]);\n\n  const sortedTableData = useCallback(() => {\n    const sorted = [...tableData].sort((a, b) => {\n      let aValue = a[sortField];\n      let bValue = b[sortField];\n\n      if (typeof aValue === 'string') {\n        aValue = aValue.toLowerCase();\n        bValue = (bValue as string).toLowerCase();\n      }\n\n      if (aValue < bValue) return sortDirection === 'asc' ? -1 : 1;\n      if (aValue > bValue) return sortDirection === 'asc' ? 1 : -1;\n      return 0;\n    });\n    return sorted;\n  }, [tableData, sortField, sortDirection]);\n\n  const paginatedData = useCallback(() => {\n    const sorted = sortedTableData();\n    const startIndex = (currentPage - 1) * ITEMS_PER_PAGE;\n    const endIndex = startIndex + ITEMS_PER_PAGE;\n    return sorted.slice(startIndex, endIndex);\n  }, [sortedTableData, currentPage]);\n\n  const totalPages = Math.ceil(tableData.length / ITEMS_PER_PAGE);\n\n  const getStatusBadgeVariant = (status: TableRow['status']) => {\n    switch (status) {\n      case 'active':\n        return 'default';\n      case 'pending':\n        return 'secondary';\n      case 'inactive':\n        return 'outline';\n      default:\n        return 'default';\n    }\n  };\n\n  const [hoveredBar, setHoveredBar] = useState<{ metric: string; value: number; date: string } | null>(null);\n  const [tooltipPosition, setTooltipPosition] = useState({ x: 0, y: 0 });\n\n  const handleBarHover = useCallback((metric: string, value: number, date: string, event: React.MouseEvent) => {\n    setHoveredBar({ metric, value, date });\n    setTooltipPosition({ x: event.clientX, y: event.clientY });\n  }, []);\n\n  const handleBarLeave = useCallback(() => {\n    setHoveredBar(null);\n  }, []);\n\n  const getMaxValue = useCallback(() => {\n    const allValues = chartData.flatMap(d => [d.revenue, d.users * 10, d.orders * 10]);\n    return Math.max(...allValues);\n  }, [chartData]);\n\n  const handleRefresh = useCallback(() => {\n    setIsRefreshing(true);\n    \n    setTimeout(() => {\n      // Generate updated mock metrics with random variations\n      const updatedMetrics = mockMetrics.map(metric => ({\n        ...metric,\n        value: metric.value + Math.floor(Math.random() * 200 - 100),\n        change: parseFloat((Math.random() * 20 - 5).toFixed(1)),\n        trend: Math.random() > 0.5 ? 'up' : 'down' as 'up' | 'down'\n      }));\n\n      // Generate updated chart data with random variations\n      const updatedChartData = mockChartData.map(point => ({\n        ...point,\n        revenue: point.revenue + Math.floor(Math.random() * 4000 - 2000),\n        users: point.users + Math.floor(Math.random() * 100 - 50),\n        orders: point.orders + Math.floor(Math.random() * 50 - 25)\n      }));\n\n      // Generate updated table data with random variations\n      const updatedTableData = mockTableData.map(row => ({\n        ...row,\n        sales: row.sales + Math.floor(Math.random() * 40 - 20),\n        revenue: row.revenue + Math.floor(Math.random() * 2000 - 1000)\n      }));\n\n      setMetrics(updatedMetrics);\n      setChartData(updatedChartData);\n      setTableData(updatedTableData);\n      setIsRefreshing(false);\n    }, 1500);\n  }, []);\n\n  return (\n    <div className={`min-h-screen ${isDarkMode ? 'dark bg-gray-900' : 'bg-gray-50'}`}>\n      <div className=\"container mx-auto p-4 md:p-6 lg:p-8\">\n        <div className=\"flex flex-col md:flex-row justify-between items-start md:items-center gap-4 mb-8\">\n          <div>\n            <h1 className={`text-3xl md:text-4xl font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n              Analytics Dashboard\n            </h1>\n            <p className={`mt-2 ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n              Real-time insights and performance metrics\n            </p>\n          </div>\n          \n          <div className=\"flex gap-2\">\n            <Button\n              variant=\"outline\"\n              size=\"icon\"\n              onClick={toggleDarkMode}\n              className={isDarkMode ? 'border-gray-700' : ''}\n            >\n              {isDarkMode ? <Sun className=\"h-5 w-5\" /> : <Moon className=\"h-5 w-5\" />}\n            </Button>\n            \n            <Button\n              variant=\"outline\"\n              onClick={handleRefresh}\n              disabled={isRefreshing}\n              className={isDarkMode ? 'border-gray-700' : ''}\n            >\n              <RefreshCw className={`h-4 w-4 mr-2 ${isRefreshing ? 'animate-spin' : ''}`} />\n              Refresh\n            </Button>\n          </div>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 md:gap-6 mb-8\">\n          {metrics.map((metric, index) => {\n            const Icon = metric.id === '1' ? DollarSign : \n                        metric.id === '2' ? Users : \n                        metric.id === '3' ? ShoppingCart : Target;\n            \n            const TrendIcon = metric.trend === 'up' ? TrendingUp : TrendingDown;\n            const trendColor = metric.trend === 'up' ? 'text-green-500' : 'text-red-500';\n            const trendBgColor = metric.trend === 'up' ? 'bg-green-50 dark:bg-green-900/20' : 'bg-red-50 dark:bg-red-900/20';\n\n            return (\n              <motion.div\n                key={metric.id}\n                initial={{ opacity: 0, y: 20 }}\n                animate={{ opacity: 1, y: 0 }}\n                transition={{ duration: 0.4, delay: index * 0.1 }}\n              >\n                <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n                  <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                    <CardTitle className={`text-sm font-medium ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                      {metric.label}\n                    </CardTitle>\n                    <div className={`p-2 rounded-lg ${isDarkMode ? 'bg-gray-700' : 'bg-gray-100'}`}>\n                      <Icon className={`h-4 w-4 ${isDarkMode ? 'text-gray-300' : 'text-gray-600'}`} />\n                    </div>\n                  </CardHeader>\n                  <CardContent>\n                    <div className={`text-2xl font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                      {metric.id === '1' || metric.id === '3' ? \n                        metric.value.toLocaleString() : \n                        metric.id === '4' ? \n                        `${metric.value}%` : \n                        metric.value.toLocaleString()\n                      }\n                    </div>\n                    <div className=\"flex items-center mt-2\">\n                      <div className={`flex items-center gap-1 px-2 py-1 rounded-full ${trendBgColor}`}>\n                        <TrendIcon className={`h-3 w-3 ${trendColor}`} />\n                        <span className={`text-xs font-medium ${trendColor}`}>\n                          {Math.abs(metric.change)}%\n                        </span>\n                      </div>\n                      <span className={`text-xs ml-2 ${isDarkMode ? 'text-gray-400' : 'text-gray-500'}`}>\n                        vs last period\n                      </span>\n                    </div>\n                  </CardContent>\n                </Card>\n              </motion.div>\n            );\n          })}\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-4 md:gap-6 mb-8\">\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Revenue Overview</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Daily revenue trends\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <RevenueChart data={chartData} isDarkMode={isDarkMode} />\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>User Growth</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Active users over time\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <UserAreaChart data={chartData} isDarkMode={isDarkMode} />\n            </CardContent>\n          </Card>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-4 md:gap-6 mb-8\">\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Orders Distribution</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                By product category\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"h-[300px] w-full\">\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <PieChart>\n                    <Pie\n                      data={pieChartData}\n                      cx=\"50%\"\n                      cy=\"50%\"\n                      labelLine={false}\n                      label={({ name, percent }) => `${name}: ${(percent * 100).toFixed(0)}%`}\n                      outerRadius={80}\n                      fill=\"#8884d8\"\n                      dataKey=\"value\"\n                    >\n                      {pieChartData.map((entry, index) => (\n                        <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\n                      ))}\n                    </Pie>\n                    <Tooltip\n                      contentStyle={{\n                        backgroundColor: isDarkMode ? '#1f2937' : '#ffffff',\n                        border: isDarkMode ? '1px solid #374151' : '1px solid #e5e7eb',\n                        borderRadius: '6px',\n                        color: isDarkMode ? '#ffffff' : '#000000'\n                      }}\n                      formatter={(value: number, name: string, props: any) => [\n                        `${value} orders`,\n                        props.payload.name\n                      ]}\n                    />\n                    <Legend\n                      verticalAlign=\"bottom\"\n                      height={36}\n                      iconType=\"circle\"\n                      wrapperStyle={{\n                        color: isDarkMode ? '#9ca3af' : '#6b7280'\n                      }}\n                    />\n                  </PieChart>\n                </ResponsiveContainer>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className={`lg:col-span-2 ${isDarkMode ? 'bg-gray-800 border-gray-700' : ''}`}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Performance Metrics</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Combined view of key indicators\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"relative h-80\">\n                {/* Chart Container */}\n                <div className=\"flex items-end justify-between h-full gap-2 px-4\">\n                  {chartData.map((dataPoint, index) => {\n                    const maxValue = getMaxValue();\n                    const revenueHeight = (dataPoint.revenue / maxValue) * 100;\n                    const usersHeight = ((dataPoint.users * 10) / maxValue) * 100;\n                    const ordersHeight = ((dataPoint.orders * 10) / maxValue) * 100;\n\n                    return (\n                      <div key={dataPoint.date} className=\"flex-1 flex items-end justify-center gap-1 h-full\">\n                        <div className=\"flex items-end gap-0.5 h-full\">\n                          {/* Revenue Bar */}\n                          <motion.div\n                            initial={{ height: 0 }}\n                            animate={{ height: `${revenueHeight}%` }}\n                            transition={{ duration: 0.5, delay: index * 0.1 }}\n                            className=\"w-6 bg-blue-500 rounded-t cursor-pointer hover:bg-blue-600 transition-colors relative\"\n                            onMouseEnter={(e) => handleBarHover('Revenue', dataPoint.revenue, dataPoint.date, e)}\n                            onMouseMove={(e) => setTooltipPosition({ x: e.clientX, y: e.clientY })}\n                            onMouseLeave={handleBarLeave}\n                          />\n                          \n                          {/* Users Bar */}\n                          <motion.div\n                            initial={{ height: 0 }}\n                            animate={{ height: `${usersHeight}%` }}\n                            transition={{ duration: 0.5, delay: index * 0.1 + 0.05 }}\n                            className=\"w-6 bg-green-500 rounded-t cursor-pointer hover:bg-green-600 transition-colors relative\"\n                            onMouseEnter={(e) => handleBarHover('Users', dataPoint.users, dataPoint.date, e)}\n                            onMouseMove={(e) => setTooltipPosition({ x: e.clientX, y: e.clientY })}\n                            onMouseLeave={handleBarLeave}\n                          />\n                          \n                          {/* Orders Bar */}\n                          <motion.div\n                            initial={{ height: 0 }}\n                            animate={{ height: `${ordersHeight}%` }}\n                            transition={{ duration: 0.5, delay: index * 0.1 + 0.1 }}\n                            className=\"w-6 bg-purple-500 rounded-t cursor-pointer hover:bg-purple-600 transition-colors relative\"\n                            onMouseEnter={(e) => handleBarHover('Orders', dataPoint.orders, dataPoint.date, e)}\n                            onMouseMove={(e) => setTooltipPosition({ x: e.clientX, y: e.clientY })}\n                            onMouseLeave={handleBarLeave}\n                          />\n                        </div>\n                        \n                        {/* Date Label */}\n                        <div className=\"absolute bottom-0 left-0 right-0 flex justify-between px-4 -mb-6\">\n                          <span className={`text-xs ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                            {new Date(dataPoint.date).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n                          </span>\n                        </div>\n                      </div>\n                    );\n                  })}\n                </div>\n\n                {/* Y-axis Labels */}\n                <div className=\"absolute left-0 top-0 bottom-0 flex flex-col justify-between text-xs pr-2 -ml-12\">\n                  {[100, 75, 50, 25, 0].map((percent) => (\n                    <span key={percent} className={isDarkMode ? 'text-gray-400' : 'text-gray-600'}>\n                      {Math.round((getMaxValue() * percent) / 100).toLocaleString()}\n                    </span>\n                  ))}\n                </div>\n\n                {/* Tooltip */}\n                {hoveredBar && (\n                  <motion.div\n                    initial={{ opacity: 0, scale: 0.9 }}\n                    animate={{ opacity: 1, scale: 1 }}\n                    className={`fixed z-50 px-3 py-2 rounded-lg shadow-lg pointer-events-none ${\n                      isDarkMode ? 'bg-gray-700 text-white' : 'bg-white text-gray-900'\n                    }`}\n                    style={{\n                      left: tooltipPosition.x + 10,\n                      top: tooltipPosition.y - 40,\n                    }}\n                  >\n                    <div className=\"text-sm font-semibold\">{hoveredBar.metric}</div>\n                    <div className=\"text-xs\">\n                      {new Date(hoveredBar.date).toLocaleDateString('en-US', { \n                        month: 'short', \n                        day: 'numeric',\n                        year: 'numeric'\n                      })}\n                    </div>\n                    <div className=\"text-sm font-bold mt-1\">\n                      {hoveredBar.metric === 'Revenue' \n                        ? `$${hoveredBar.value.toLocaleString()}`\n                        : hoveredBar.value.toLocaleString()}\n                    </div>\n                  </motion.div>\n                )}\n\n                {/* Legend */}\n                <div className=\"flex justify-center gap-6 mt-8\">\n                  <div className=\"flex items-center gap-2\">\n                    <div className=\"w-4 h-4 bg-blue-500 rounded\"></div>\n                    <span className={`text-sm ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>\n                      Revenue\n                    </span>\n                  </div>\n                  <div className=\"flex items-center gap-2\">\n                    <div className=\"w-4 h-4 bg-green-500 rounded\"></div>\n                    <span className={`text-sm ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>\n                      Users\n                    </span>\n                  </div>\n                  <div className=\"flex items-center gap-2\">\n                    <div className=\"w-4 h-4 bg-purple-500 rounded\"></div>\n                    <span className={`text-sm ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>\n                      Orders\n                    </span>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n          <CardHeader>\n            <CardTitle className={isDarkMode ? 'text-white' : ''}>Top Products</CardTitle>\n            <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n              Best performing products by revenue\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {/* Desktop Table */}\n              <div className=\"hidden md:block overflow-x-auto\">\n                <Table>\n                  <TableHeader>\n                    <TableRow className={isDarkMode ? 'border-gray-700' : ''}>\n                      <TableHead className={isDarkMode ? 'text-gray-300' : ''}>\n                        <Button\n                          variant=\"ghost\"\n                          onClick={() => handleSort('product')}\n                          className=\"flex items-center gap-1 hover:bg-transparent p-0\"\n                        >\n                          Product\n                          <ArrowUpDown className=\"h-4 w-4\" />\n                        </Button>\n                      </TableHead>\n                      <TableHead className={isDarkMode ? 'text-gray-300' : ''}>\n                        <Button\n                          variant=\"ghost\"\n                          onClick={() => handleSort('sales')}\n                          className=\"flex items-center gap-1 hover:bg-transparent p-0\"\n                        >\n                          Sales\n                          <ArrowUpDown className=\"h-4 w-4\" />\n                        </Button>\n                      </TableHead>\n                      <TableHead className={isDarkMode ? 'text-gray-300' : ''}>\n                        <Button\n                          variant=\"ghost\"\n                          onClick={() => handleSort('revenue')}\n                          className=\"flex items-center gap-1 hover:bg-transparent p-0\"\n                        >\n                          Revenue\n                          <ArrowUpDown className=\"h-4 w-4\" />\n                        </Button>\n                      </TableHead>\n                      <TableHead className={isDarkMode ? 'text-gray-300' : ''}>\n                        <Button\n                          variant=\"ghost\"\n                          onClick={() => handleSort('status')}\n                          className=\"flex items-center gap-1 hover:bg-transparent p-0\"\n                        >\n                          Status\n                          <ArrowUpDown className=\"h-4 w-4\" />\n                        </Button>\n                      </TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {paginatedData().map((row) => (\n                      <TableRow\n                        key={row.id}\n                        className={isDarkMode ? 'border-gray-700 hover:bg-gray-700/50' : 'hover:bg-gray-50'}\n                      >\n                        <TableCell className={`font-medium ${isDarkMode ? 'text-white' : ''}`}>\n                          {row.product}\n                        </TableCell>\n                        <TableCell className={isDarkMode ? 'text-gray-300' : ''}>\n                          {row.sales.toLocaleString()}\n                        </TableCell>\n                        <TableCell className={isDarkMode ? 'text-gray-300' : ''}>\n                          ${row.revenue.toLocaleString()}\n                        </TableCell>\n                        <TableCell>\n                          <Badge\n                            variant={getStatusBadgeVariant(row.status)}\n                            className=\"capitalize\"\n                          >\n                            {row.status}\n                          </Badge>\n                        </TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              </div>\n\n              {/* Mobile Cards */}\n              <div className=\"md:hidden space-y-4\">\n                {paginatedData().map((row) => (\n                  <div\n                    key={row.id}\n                    className={`p-4 rounded-lg border ${\n                      isDarkMode ? 'bg-gray-700 border-gray-600' : 'bg-white border-gray-200'\n                    }`}\n                  >\n                    <div className=\"flex justify-between items-start mb-3\">\n                      <h3 className={`font-semibold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                        {row.product}\n                      </h3>\n                      <Badge\n                        variant={getStatusBadgeVariant(row.status)}\n                        className=\"capitalize\"\n                      >\n                        {row.status}\n                      </Badge>\n                    </div>\n                    <div className=\"grid grid-cols-2 gap-2\">\n                      <div>\n                        <p className={`text-sm ${isDarkMode ? 'text-gray-400' : 'text-gray-500'}`}>\n                          Sales\n                        </p>\n                        <p className={`font-medium ${isDarkMode ? 'text-gray-200' : 'text-gray-900'}`}>\n                          {row.sales.toLocaleString()}\n                        </p>\n                      </div>\n                      <div>\n                        <p className={`text-sm ${isDarkMode ? 'text-gray-400' : 'text-gray-500'}`}>\n                          Revenue\n                        </p>\n                        <p className={`font-medium ${isDarkMode ? 'text-gray-200' : 'text-gray-900'}`}>\n                          ${row.revenue.toLocaleString()}\n                        </p>\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n\n              {/* Pagination */}\n              <div className=\"flex items-center justify-between pt-4\">\n                <p className={`text-sm ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                  Showing {((currentPage - 1) * ITEMS_PER_PAGE) + 1} to{' '}\n                  {Math.min(currentPage * ITEMS_PER_PAGE, tableData.length)} of{' '}\n                  {tableData.length} products\n                </p>\n                <div className=\"flex gap-2\">\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => setCurrentPage(prev => Math.max(1, prev - 1))}\n                    disabled={currentPage === 1}\n                    className={isDarkMode ? 'border-gray-700' : ''}\n                  >\n                    <ChevronLeft className=\"h-4 w-4\" />\n                  </Button>\n                  <div className=\"flex items-center gap-1\">\n                    {Array.from({ length: totalPages }, (_, i) => i + 1).map((page) => (\n                      <Button\n                        key={page}\n                        variant={currentPage === page ? 'default' : 'outline'}\n                        size=\"sm\"\n                        onClick={() => setCurrentPage(page)}\n                        className={`w-8 ${isDarkMode && currentPage !== page ? 'border-gray-700' : ''}`}\n                      >\n                        {page}\n                      </Button>\n                    ))}\n                  </div>\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => setCurrentPage(prev => Math.min(totalPages, prev + 1))}\n                    disabled={currentPage === totalPages}\n                    className={isDarkMode ? 'border-gray-700' : ''}\n                  >\n                    <ChevronRight className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 md:gap-6 mt-8\">\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Recent Activity</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {mockActivityData.map((activity, index) => {\n                  const Icon = activity.icon;\n                  return (\n                    <motion.div\n                      key={activity.id}\n                      initial={{ opacity: 0, x: -20 }}\n                      animate={{ opacity: 1, x: 0 }}\n                      transition={{ delay: index * 0.1, duration: 0.3 }}\n                      className=\"flex items-start gap-3\"\n                    >\n                      <div className={`p-2 rounded-full ${isDarkMode ? 'bg-gray-700' : 'bg-gray-100'} flex-shrink-0`}>\n                        <Icon className={`h-4 w-4 ${activity.color}`} />\n                      </div>\n                      <div className=\"flex-1 min-w-0\">\n                        <p className={`text-sm font-medium ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                          {activity.message}\n                        </p>\n                        <p className={`text-xs mt-1 ${isDarkMode ? 'text-gray-500' : 'text-gray-500'}`}>\n                          {activity.timestamp}\n                        </p>\n                      </div>\n                      <div className={`h-full w-px ${isDarkMode ? 'bg-gray-700' : 'bg-gray-200'} absolute left-[22px] top-12 -z-10`} \n                           style={{ height: index === mockActivityData.length - 1 ? '0' : '100%' }} />\n                    </motion.div>\n                  );\n                })}\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Quick Stats</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <QuickStats isDarkMode={isDarkMode} />\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Alerts</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-3\">\n                {alerts.length === 0 ? (\n                  <div className={`text-center py-8 ${isDarkMode ? 'text-gray-400' : 'text-gray-500'}`}>\n                    <Info className=\"h-8 w-8 mx-auto mb-2 opacity-50\" />\n                    <p className=\"text-sm\">No active alerts</p>\n                  </div>\n                ) : (\n                  alerts.map((alert, index) => (\n                    <motion.div\n                      key={alert.id}\n                      initial={{ opacity: 0, x: -20 }}\n                      animate={{ opacity: 1, x: 0 }}\n                      exit={{ opacity: 0, x: 20 }}\n                      transition={{ delay: index * 0.1 }}\n                      className={`relative p-4 rounded-lg border ${\n                        isDarkMode ? 'bg-gray-700/50 border-gray-600' : 'bg-white border-gray-200'\n                      } ${\n                        alert.severity === 'error'\n                          ? 'border-l-4 border-l-red-500'\n                          : alert.severity === 'warning'\n                          ? 'border-l-4 border-l-yellow-500'\n                          : 'border-l-4 border-l-blue-500'\n                      }`}\n                    >\n                      <div className=\"flex items-start gap-3\">\n                        <div className=\"flex-shrink-0 mt-0.5\">\n                          {alert.severity === 'error' && (\n                            <AlertCircle className=\"h-5 w-5 text-red-500\" />\n                          )}\n                          {alert.severity === 'warning' && (\n                            <AlertTriangle className=\"h-5 w-5 text-yellow-500\" />\n                          )}\n                          {alert.severity === 'info' && (\n                            <Info className=\"h-5 w-5 text-blue-500\" />\n                          )}\n                        </div>\n                        \n                        <div className=\"flex-1 min-w-0\">\n                          <div className=\"flex items-start justify-between gap-2\">\n                            <div className=\"flex-1\">\n                              <div className=\"flex items-center gap-2 mb-1\">\n                                <h4 className={`text-sm font-semibold ${\n                                  isDarkMode ? 'text-white' : 'text-gray-900'\n                                }`}>\n                                  {alert.title}\n                                </h4>\n                                <Badge\n                                  variant={\n                                    alert.severity === 'error'\n                                      ? 'destructive'\n                                      : alert.severity === 'warning'\n                                      ? 'default'\n                                      : 'secondary'\n                                  }\n                                  className=\"text-xs\"\n                                >\n                                  {alert.severity}\n                                </Badge>\n                              </div>\n                              <p className={`text-sm ${\n                                isDarkMode ? 'text-gray-300' : 'text-gray-600'\n                              }`}>\n                                {alert.message}\n                              </p>\n                              <p className={`text-xs mt-1 ${\n                                isDarkMode ? 'text-gray-500' : 'text-gray-400'\n                              }`}>\n                                {alert.timestamp}\n                              </p>\n                            </div>\n                            \n                            <Button\n                              variant=\"ghost\"\n                              size=\"icon\"\n                              className=\"h-6 w-6 flex-shrink-0\"\n                              onClick={() => dismissAlert(alert.id)}\n                            >\n                              <X className=\"h-4 w-4\" />\n                            </Button>\n                          </div>\n                        </div>\n                      </div>\n                    </motion.div>\n                  ))\n                )}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}",
  "error": null,
  "overall_score": 57,
  "code_quality_score": 12,
  "architecture_score": 14,
  "performance_score": 15,
  "accessibility_score": 16,
  "metadata": {
    "document_id": "eval_room_bec48bdddaf6",
    "prompt_category": "intermediate",
    "prompt_complexity": 6.0
  },
  "raw_response": {
    "document_id": "eval_room_bec48bdddaf6",
    "mode": "parallel",
    "prompt": "Generate an analytics dashboard page with charts, data tables, real-time updates, dark mode, and responsive design",
    "content": "import { useState, useCallback } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Moon, Sun, RefreshCw } from 'lucide-react';\nimport { ArrowUpDown, ChevronLeft, ChevronRight } from 'lucide-react';\nimport { Badge } from '@/components/ui/badge';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\nimport { TrendingUp, TrendingDown, ShoppingCart, UserPlus, CreditCard, Package } from 'lucide-react';\n\n\nimport { PieChart, Pie, Cell, ResponsiveContainer, Legend, Tooltip } from 'recharts';\nimport { motion } from 'framer-motion';\nimport { motion } from 'framer-motion';\nimport { TrendingUp, TrendingDown, DollarSign, Users, ShoppingCart, Target } from 'lucide-react';\nimport { BarChart3 } from 'lucide-react';\nimport { TrendingUp, TrendingDown, DollarSign, Users, ShoppingCart, Target } from 'lucide-react'\nimport { AlertCircle, AlertTriangle, Info, X } from 'lucide-react';\nimport { Badge } from '@/components/ui/badge';;\nimport { motion } from 'framer-motion';\n\nconst UserAreaChart = ({ data, isDarkMode }: { data: ChartDataPoint[], isDarkMode: boolean }) => {\n  const maxUsers = Math.max(...data.map(d => d.users));\n  const minUsers = Math.min(...data.map(d => d.users));\n  const range = maxUsers - minUsers;\n  const padding = range * 0.2;\n  const chartHeight = 200;\n  const chartWidth = 100;\n\n  const points = data.map((point, index) => {\n    const x = (index / (data.length - 1)) * chartWidth;\n    const y = chartHeight - ((point.users - minUsers + padding) / (range + padding * 2)) * chartHeight;\n    return { x, y, ...point };\n  });\n\n  const pathD = points.reduce((path, point, index) => {\n    if (index === 0) return `M ${point.x} ${point.y}`;\n    return `${path} L ${point.x} ${point.y}`;\n  }, '');\n\n  const areaD = `${pathD} L ${chartWidth} ${chartHeight} L 0 ${chartHeight} Z`;\n\n  return (\n    <div className=\"relative w-full h-[200px]\">\n      <svg viewBox={`0 0 ${chartWidth} ${chartHeight}`} className=\"w-full h-full\" preserveAspectRatio=\"none\">\n        <defs>\n          <linearGradient id=\"userGradient\" x1=\"0%\" y1=\"0%\" x2=\"0%\" y2=\"100%\">\n            <stop offset=\"0%\" stopColor=\"#3b82f6\" stopOpacity=\"0.6\" />\n            <stop offset=\"100%\" stopColor=\"#3b82f6\" stopOpacity=\"0.05\" />\n          </linearGradient>\n        </defs>\n        \n        <motion.path\n          d={areaD}\n          fill=\"url(#userGradient)\"\n          initial={{ opacity: 0 }}\n          animate={{ opacity: 1 }}\n          transition={{ duration: 0.8, ease: \"easeOut\" }}\n        />\n        \n        <motion.path\n          d={pathD}\n          fill=\"none\"\n          stroke=\"#3b82f6\"\n          strokeWidth=\"0.5\"\n          initial={{ pathLength: 0 }}\n          animate={{ pathLength: 1 }}\n          transition={{ duration: 1.5, ease: \"easeInOut\" }}\n        />\n        \n        {points.map((point, index) => (\n          <motion.g key={index}>\n            <motion.circle\n              cx={point.x}\n              cy={point.y}\n              r=\"1\"\n              fill=\"#3b82f6\"\n              initial={{ scale: 0, opacity: 0 }}\n              animate={{ scale: 1, opacity: 1 }}\n              transition={{ delay: index * 0.1, duration: 0.3 }}\n            />\n          </motion.g>\n        ))}\n      </svg>\n      \n      <div className=\"flex justify-between mt-4 text-xs\">\n        {data.map((point, index) => (\n          index % Math.ceil(data.length / 4) === 0 && (\n            <span key={index} className={isDarkMode ? 'text-gray-400' : 'text-gray-600'}>\n              {new Date(point.date).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n            </span>\n          )\n        ))}\n      </div>\n      \n      <div className=\"mt-4 grid grid-cols-3 gap-4\">\n        <div>\n          <p className={`text-xs ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>Current</p>\n          <p className={`text-lg font-semibold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n            {data[data.length - 1].users.toLocaleString()}\n          </p>\n        </div>\n        <div>\n          <p className={`text-xs ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>Peak</p>\n          <p className={`text-lg font-semibold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n            {maxUsers.toLocaleString()}\n          </p>\n        </div>\n        <div>\n          <p className={`text-xs ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>Growth</p>\n          <p className=\"text-lg font-semibold text-blue-500\">\n            +{(((data[data.length - 1].users - data[0].users) / data[0].users) * 100).toFixed(1)}%\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n};\n\ninterface MetricData {\n  id: string;\n  label: string;\n  value: number;\n  change: number;\n  trend: 'up' | 'down';\n}\n\ninterface ChartDataPoint {\n  date: string;\n  revenue: number;\n  users: number;\n  orders: number;\n}\n\ninterface TableRow {\n  id: string;\n  product: string;\n  sales: number;\n  revenue: number;\n  status: 'active' | 'pending' | 'inactive';\n}\n\nconst mockMetrics: MetricData[] = [\n  { id: '1', label: 'Total Revenue', value: 45231, change: 12.5, trend: 'up' },\n  { id: '2', label: 'Active Users', value: 2350, change: 8.2, trend: 'up' },\n  { id: '3', label: 'Total Orders', value: 1543, change: -3.1, trend: 'down' },\n  { id: '4', label: 'Conversion Rate', value: 3.24, change: 5.7, trend: 'up' }\n];\n\nconst mockChartData: ChartDataPoint[] = [\n  { date: '2024-01-01', revenue: 12000, users: 450, orders: 230 },\n  { date: '2024-01-02', revenue: 15000, users: 520, orders: 280 },\n  { date: '2024-01-03', revenue: 13500, users: 490, orders: 250 },\n  { date: '2024-01-04', revenue: 18000, users: 610, orders: 320 },\n  { date: '2024-01-05', revenue: 16500, users: 580, orders: 295 },\n  { date: '2024-01-06', revenue: 20000, users: 680, orders: 350 },\n  { date: '2024-01-07', revenue: 22000, users: 720, orders: 380 }\n];\n\nconst mockTableData: TableRow[] = [\n  { id: '1', product: 'Premium Plan', sales: 234, revenue: 23400, status: 'active' },\n  { id: '2', product: 'Basic Plan', sales: 567, revenue: 11340, status: 'active' },\n  { id: '3', product: 'Enterprise Plan', sales: 89, revenue: 44500, status: 'active' },\n  { id: '4', product: 'Starter Plan', sales: 432, revenue: 4320, status: 'pending' },\n  { id: '5', product: 'Pro Plan', sales: 156, revenue: 15600, status: 'inactive' }\n];\ninterface Alert {\n  id: string;\n  severity: 'error' | 'warning' | 'info';\n  title: string;\n  message: string;\n  timestamp: string;\n}\n\nconst mockAlerts: Alert[] = [\n  {\n    id: '1',\n    severity: 'error',\n    title: 'Server Error',\n    message: 'Failed to sync data with backup server',\n    timestamp: '2 min ago'\n  },\n  {\n    id: '2',\n    severity: 'warning',\n    title: 'High Traffic',\n    message: 'Server load at 85% capacity',\n    timestamp: '15 min ago'\n  },\n  {\n    id: '3',\n    severity: 'info',\n    title: 'Update Available',\n    message: 'New dashboard features are ready',\n    timestamp: '1 hour ago'\n  },\n  {\n    id: '4',\n    severity: 'warning',\n    title: 'Low Inventory',\n    message: 'Premium Plan stock below threshold',\n    timestamp: '2 hours ago'\n  }\n];\n\nconst mockQuickStats = [\n  { \n    id: '1', \n    label: 'Avg Order Value', \n    value: '$142', \n    change: 15.3, \n    trend: 'up' as const,\n    icon: DollarSign,\n    sparklineData: [120, 135, 128, 145, 138, 152, 142]\n  },\n  { \n    id: '2', \n    label: 'Customer Retention', \n    value: '87%', \n    change: 3.2, \n    trend: 'up' as const,\n    icon: Users,\n    sparklineData: [82, 83, 85, 84, 86, 85, 87]\n  },\n  { \n    id: '3', \n    label: 'Cart Abandonment', \n    value: '23%', \n    change: -5.1, \n    trend: 'down' as const,\n    icon: ShoppingCart,\n    sparklineData: [28, 27, 26, 25, 24, 24, 23]\n  },\n  { \n    id: '4', \n    label: 'Goal Completion', \n    value: '94%', \n    change: 8.7, \n    trend: 'up' as const,\n    icon: Target,\n    sparklineData: [85, 87, 89, 90, 91, 93, 94]\n  }\n];\n\nconst Sparkline = ({ data, trend, isDarkMode }: { data: number[], trend: 'up' | 'down', isDarkMode: boolean }) => {\n  const max = Math.max(...data);\n  const min = Math.min(...data);\n  const range = max - min || 1;\n  \n  const points = data.map((value, index) => {\n    const x = (index / (data.length - 1)) * 100;\n    const y = 100 - ((value - min) / range) * 100;\n    return `${x},${y}`;\n  }).join(' ');\n\n  const pathD = `M ${points.split(' ').map((point, i) => {\n    const [x, y] = point.split(',');\n    return i === 0 ? `${x} ${y}` : `L ${x} ${y}`;\n  }).join(' ')}`;\n\n  return (\n    <svg className=\"w-full h-12\" viewBox=\"0 0 100 100\" preserveAspectRatio=\"none\">\n      <motion.path\n        d={pathD}\n        fill=\"none\"\n        stroke={trend === 'up' ? (isDarkMode ? '#10b981' : '#059669') : (isDarkMode ? '#ef4444' : '#dc2626')}\n        strokeWidth=\"2\"\n        initial={{ pathLength: 0, opacity: 0 }}\n        animate={{ pathLength: 1, opacity: 1 }}\n        transition={{ duration: 1, ease: \"easeInOut\" }}\n      />\n    </svg>\n  );\n};\ninterface ActivityItem {\n  id: string;\n  type: 'sale' | 'user' | 'order' | 'payment';\n  message: string;\n  timestamp: string;\n  icon: any;\n  color: string;\n}\n\nconst mockActivityData: ActivityItem[] = [\n  {\n    id: '1',\n    type: 'sale',\n    message: 'New sale: Premium Plan',\n    timestamp: '2 minutes ago',\n    icon: TrendingUp,\n    color: 'text-green-500'\n  },\n  {\n    id: '2',\n    type: 'user',\n    message: 'New user registered',\n    timestamp: '5 minutes ago',\n    icon: UserPlus,\n    color: 'text-blue-500'\n  },\n  {\n    id: '3',\n    type: 'order',\n    message: 'Order #1234 completed',\n    timestamp: '12 minutes ago',\n    icon: ShoppingCart,\n    color: 'text-purple-500'\n  },\n  {\n    id: '4',\n    type: 'payment',\n    message: 'Payment received: $450',\n    timestamp: '18 minutes ago',\n    icon: CreditCard,\n    color: 'text-emerald-500'\n  },\n  {\n    id: '5',\n    type: 'order',\n    message: 'New order placed',\n    timestamp: '25 minutes ago',\n    icon: Package,\n    color: 'text-orange-500'\n  },\n  {\n    id: '6',\n    type: 'sale',\n    message: 'Enterprise Plan upgraded',\n    timestamp: '32 minutes ago',\n    icon: TrendingUp,\n    color: 'text-green-500'\n  }\n];\n\nconst RevenueChart = ({ data, isDarkMode }: { data: ChartDataPoint[], isDarkMode: boolean }) => {\n  const [hoveredPoint, setHoveredPoint] = useState<number | null>(null);\n  \n  const maxRevenue = Math.max(...data.map(d => d.revenue));\n  const minRevenue = Math.min(...data.map(d => d.revenue));\n  const revenueRange = maxRevenue - minRevenue;\n  \n  const chartWidth = 100;\n  const chartHeight = 100;\n  const padding = 10;\n  \n  const points = data.map((point, index) => {\n    const x = padding + (index / (data.length - 1)) * (chartWidth - 2 * padding);\n    const y = chartHeight - padding - ((point.revenue - minRevenue) / revenueRange) * (chartHeight - 2 * padding);\n    return { x, y, ...point };\n  });\n  \n  const pathData = points.map((p, i) => `${i === 0 ? 'M' : 'L'} ${p.x} ${p.y}`).join(' ');\n  \n  const areaPath = `${pathData} L ${points[points.length - 1].x} ${chartHeight - padding} L ${points[0].x} ${chartHeight - padding} Z`;\n  \n  return (\n    <div className=\"relative w-full h-64 md:h-80\">\n      <svg\n        viewBox={`0 0 ${chartWidth} ${chartHeight}`}\n        className=\"w-full h-full\"\n        preserveAspectRatio=\"none\"\n      >\n        <defs>\n          <linearGradient id=\"revenueGradient\" x1=\"0%\" y1=\"0%\" x2=\"0%\" y2=\"100%\">\n            <stop offset=\"0%\" stopColor={isDarkMode ? \"#3b82f6\" : \"#2563eb\"} stopOpacity=\"0.3\" />\n            <stop offset=\"100%\" stopColor={isDarkMode ? \"#3b82f6\" : \"#2563eb\"} stopOpacity=\"0.05\" />\n          </linearGradient>\n        </defs>\n        \n        <motion.path\n          d={areaPath}\n          fill=\"url(#revenueGradient)\"\n          initial={{ opacity: 0 }}\n          animate={{ opacity: 1 }}\n          transition={{ duration: 0.5 }}\n        />\n        \n        <motion.path\n          d={pathData}\n          fill=\"none\"\n          stroke={isDarkMode ? \"#3b82f6\" : \"#2563eb\"}\n          strokeWidth=\"0.5\"\n          strokeLinecap=\"round\"\n          strokeLinejoin=\"round\"\n          initial={{ pathLength: 0 }}\n          animate={{ pathLength: 1 }}\n          transition={{ duration: 1, ease: \"easeInOut\" }}\n        />\n        \n        {points.map((point, index) => (\n          <g key={index}>\n            <motion.circle\n              cx={point.x}\n              cy={point.y}\n              r={hoveredPoint === index ? \"1.5\" : \"0.8\"}\n              fill={isDarkMode ? \"#3b82f6\" : \"#2563eb\"}\n              initial={{ scale: 0 }}\n              animate={{ scale: 1 }}\n              transition={{ delay: index * 0.1, duration: 0.3 }}\n              onMouseEnter={() => setHoveredPoint(index)}\n              onMouseLeave={() => setHoveredPoint(null)}\n              className=\"cursor-pointer transition-all\"\n              style={{ transformOrigin: `${point.x}px ${point.y}px` }}\n            />\n          </g>\n        ))}\n      </svg>\n      \n      {hoveredPoint !== null && (\n        <motion.div\n          initial={{ opacity: 0, y: 10 }}\n          animate={{ opacity: 1, y: 0 }}\n          className={`absolute top-4 left-1/2 transform -translate-x-1/2 ${\n            isDarkMode ? 'bg-gray-700 text-white' : 'bg-white text-gray-900'\n          } px-4 py-2 rounded-lg shadow-lg border ${\n            isDarkMode ? 'border-gray-600' : 'border-gray-200'\n          } z-10`}\n        >\n          <div className=\"text-xs font-medium mb-1\">\n            {new Date(points[hoveredPoint].date).toLocaleDateString('en-US', { \n              month: 'short', \n              day: 'numeric' \n            })}\n          </div>\n          <div className=\"text-lg font-bold\">\n            ${points[hoveredPoint].revenue.toLocaleString()}\n          </div>\n          <div className={`text-xs ${isDarkMode ? 'text-gray-400' : 'text-gray-500'}`}>\n            {points[hoveredPoint].users} users \u2022 {points[hoveredPoint].orders} orders\n          </div>\n        </motion.div>\n      )}\n      \n      <div className={`flex justify-between mt-2 px-2 text-xs ${\n        isDarkMode ? 'text-gray-400' : 'text-gray-600'\n      }`}>\n        <span>{new Date(data[0].date).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}</span>\n        <span>{new Date(data[data.length - 1].date).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}</span>\n      </div>\n    </div>\n  );\n};\n\n\ntype SortField = 'product' | 'sales' | 'revenue' | 'status';\ntype SortDirection = 'asc' | 'desc';\n\nconst ITEMS_PER_PAGE = 3;\n\nconst QuickStats = ({ isDarkMode }: { isDarkMode: boolean }) => {\n  return (\n    <div className=\"space-y-4\">\n      {mockQuickStats.map((stat, index) => {\n        const Icon = stat.icon;\n        return (\n          <motion.div\n            key={stat.id}\n            initial={{ opacity: 0, x: -20 }}\n            animate={{ opacity: 1, x: 0 }}\n            transition={{ delay: index * 0.1 }}\n            className={`p-4 rounded-lg border ${\n              isDarkMode ? 'bg-gray-700/50 border-gray-600' : 'bg-white border-gray-200'\n            }`}\n          >\n            <div className=\"flex items-start justify-between mb-2\">\n              <div className=\"flex items-center gap-2\">\n                <div className={`p-2 rounded-lg ${\n                  isDarkMode ? 'bg-gray-600' : 'bg-gray-100'\n                }`}>\n                  <Icon className={`h-4 w-4 ${isDarkMode ? 'text-gray-300' : 'text-gray-600'}`} />\n                </div>\n                <div>\n                  <p className={`text-xs ${isDarkMode ? 'text-gray-400' : 'text-gray-500'}`}>\n                    {stat.label}\n                  </p>\n                  <p className={`text-lg font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                    {stat.value}\n                  </p>\n                </div>\n              </div>\n              <div className={`flex items-center gap-1 text-xs font-medium ${\n                stat.trend === 'up' \n                  ? 'text-green-600 dark:text-green-400' \n                  : 'text-red-600 dark:text-red-400'\n              }`}>\n                {stat.trend === 'up' ? (\n                  <TrendingUp className=\"h-3 w-3\" />\n                ) : (\n                  <TrendingDown className=\"h-3 w-3\" />\n                )}\n                {Math.abs(stat.change)}%\n              </div>\n            </div>\n            <Sparkline data={stat.sparklineData} trend={stat.trend} isDarkMode={isDarkMode} />\n          </motion.div>\n        );\n      })}\n    </div>\n  );\n};\n\nexport default function AnalyticsDashboard() {\n  const [isDarkMode, setIsDarkMode] = useState(false);\n  const [metrics, setMetrics] = useState<MetricData[]>(mockMetrics);\n  const [chartData, setChartData] = useState<ChartDataPoint[]>(mockChartData);\n  const [tableData, setTableData] = useState<TableRow[]>(mockTableData);\n  const [isRefreshing, setIsRefreshing] = useState(false);\n  const [sortField, setSortField] = useState<SortField>('revenue');\n  const [sortDirection, setSortDirection] = useState<SortDirection>('desc');\n  const [currentPage, setCurrentPage] = useState(1);\n  const [alerts, setAlerts] = useState<Alert[]>(mockAlerts);\n\n  const dismissAlert = useCallback((alertId: string) => {\n    setAlerts(prev => prev.filter(alert => alert.id !== alertId));\n  }, []);\n  // Prepare pie chart data from table data\n  const pieChartData = tableData.map(item => ({\n    name: item.product,\n    value: item.sales,\n    revenue: item.revenue\n  }));\n\n  const COLORS = ['#3b82f6', '#8b5cf6', '#ec4899', '#f59e0b', '#10b981'];\n\n  const toggleDarkMode = useCallback(() => {\n    setIsDarkMode(prev => !prev);\n  }, []);\n\n  const handleSort = useCallback((field: SortField) => {\n    if (sortField === field) {\n      setSortDirection(prev => prev === 'asc' ? 'desc' : 'asc');\n    } else {\n      setSortField(field);\n      setSortDirection('desc');\n    }\n    setCurrentPage(1);\n  }, [sortField]);\n\n  const sortedTableData = useCallback(() => {\n    const sorted = [...tableData].sort((a, b) => {\n      let aValue = a[sortField];\n      let bValue = b[sortField];\n\n      if (typeof aValue === 'string') {\n        aValue = aValue.toLowerCase();\n        bValue = (bValue as string).toLowerCase();\n      }\n\n      if (aValue < bValue) return sortDirection === 'asc' ? -1 : 1;\n      if (aValue > bValue) return sortDirection === 'asc' ? 1 : -1;\n      return 0;\n    });\n    return sorted;\n  }, [tableData, sortField, sortDirection]);\n\n  const paginatedData = useCallback(() => {\n    const sorted = sortedTableData();\n    const startIndex = (currentPage - 1) * ITEMS_PER_PAGE;\n    const endIndex = startIndex + ITEMS_PER_PAGE;\n    return sorted.slice(startIndex, endIndex);\n  }, [sortedTableData, currentPage]);\n\n  const totalPages = Math.ceil(tableData.length / ITEMS_PER_PAGE);\n\n  const getStatusBadgeVariant = (status: TableRow['status']) => {\n    switch (status) {\n      case 'active':\n        return 'default';\n      case 'pending':\n        return 'secondary';\n      case 'inactive':\n        return 'outline';\n      default:\n        return 'default';\n    }\n  };\n\n  const [hoveredBar, setHoveredBar] = useState<{ metric: string; value: number; date: string } | null>(null);\n  const [tooltipPosition, setTooltipPosition] = useState({ x: 0, y: 0 });\n\n  const handleBarHover = useCallback((metric: string, value: number, date: string, event: React.MouseEvent) => {\n    setHoveredBar({ metric, value, date });\n    setTooltipPosition({ x: event.clientX, y: event.clientY });\n  }, []);\n\n  const handleBarLeave = useCallback(() => {\n    setHoveredBar(null);\n  }, []);\n\n  const getMaxValue = useCallback(() => {\n    const allValues = chartData.flatMap(d => [d.revenue, d.users * 10, d.orders * 10]);\n    return Math.max(...allValues);\n  }, [chartData]);\n\n  const handleRefresh = useCallback(() => {\n    setIsRefreshing(true);\n    \n    setTimeout(() => {\n      // Generate updated mock metrics with random variations\n      const updatedMetrics = mockMetrics.map(metric => ({\n        ...metric,\n        value: metric.value + Math.floor(Math.random() * 200 - 100),\n        change: parseFloat((Math.random() * 20 - 5).toFixed(1)),\n        trend: Math.random() > 0.5 ? 'up' : 'down' as 'up' | 'down'\n      }));\n\n      // Generate updated chart data with random variations\n      const updatedChartData = mockChartData.map(point => ({\n        ...point,\n        revenue: point.revenue + Math.floor(Math.random() * 4000 - 2000),\n        users: point.users + Math.floor(Math.random() * 100 - 50),\n        orders: point.orders + Math.floor(Math.random() * 50 - 25)\n      }));\n\n      // Generate updated table data with random variations\n      const updatedTableData = mockTableData.map(row => ({\n        ...row,\n        sales: row.sales + Math.floor(Math.random() * 40 - 20),\n        revenue: row.revenue + Math.floor(Math.random() * 2000 - 1000)\n      }));\n\n      setMetrics(updatedMetrics);\n      setChartData(updatedChartData);\n      setTableData(updatedTableData);\n      setIsRefreshing(false);\n    }, 1500);\n  }, []);\n\n  return (\n    <div className={`min-h-screen ${isDarkMode ? 'dark bg-gray-900' : 'bg-gray-50'}`}>\n      <div className=\"container mx-auto p-4 md:p-6 lg:p-8\">\n        <div className=\"flex flex-col md:flex-row justify-between items-start md:items-center gap-4 mb-8\">\n          <div>\n            <h1 className={`text-3xl md:text-4xl font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n              Analytics Dashboard\n            </h1>\n            <p className={`mt-2 ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n              Real-time insights and performance metrics\n            </p>\n          </div>\n          \n          <div className=\"flex gap-2\">\n            <Button\n              variant=\"outline\"\n              size=\"icon\"\n              onClick={toggleDarkMode}\n              className={isDarkMode ? 'border-gray-700' : ''}\n            >\n              {isDarkMode ? <Sun className=\"h-5 w-5\" /> : <Moon className=\"h-5 w-5\" />}\n            </Button>\n            \n            <Button\n              variant=\"outline\"\n              onClick={handleRefresh}\n              disabled={isRefreshing}\n              className={isDarkMode ? 'border-gray-700' : ''}\n            >\n              <RefreshCw className={`h-4 w-4 mr-2 ${isRefreshing ? 'animate-spin' : ''}`} />\n              Refresh\n            </Button>\n          </div>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 md:gap-6 mb-8\">\n          {metrics.map((metric, index) => {\n            const Icon = metric.id === '1' ? DollarSign : \n                        metric.id === '2' ? Users : \n                        metric.id === '3' ? ShoppingCart : Target;\n            \n            const TrendIcon = metric.trend === 'up' ? TrendingUp : TrendingDown;\n            const trendColor = metric.trend === 'up' ? 'text-green-500' : 'text-red-500';\n            const trendBgColor = metric.trend === 'up' ? 'bg-green-50 dark:bg-green-900/20' : 'bg-red-50 dark:bg-red-900/20';\n\n            return (\n              <motion.div\n                key={metric.id}\n                initial={{ opacity: 0, y: 20 }}\n                animate={{ opacity: 1, y: 0 }}\n                transition={{ duration: 0.4, delay: index * 0.1 }}\n              >\n                <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n                  <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                    <CardTitle className={`text-sm font-medium ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                      {metric.label}\n                    </CardTitle>\n                    <div className={`p-2 rounded-lg ${isDarkMode ? 'bg-gray-700' : 'bg-gray-100'}`}>\n                      <Icon className={`h-4 w-4 ${isDarkMode ? 'text-gray-300' : 'text-gray-600'}`} />\n                    </div>\n                  </CardHeader>\n                  <CardContent>\n                    <div className={`text-2xl font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                      {metric.id === '1' || metric.id === '3' ? \n                        metric.value.toLocaleString() : \n                        metric.id === '4' ? \n                        `${metric.value}%` : \n                        metric.value.toLocaleString()\n                      }\n                    </div>\n                    <div className=\"flex items-center mt-2\">\n                      <div className={`flex items-center gap-1 px-2 py-1 rounded-full ${trendBgColor}`}>\n                        <TrendIcon className={`h-3 w-3 ${trendColor}`} />\n                        <span className={`text-xs font-medium ${trendColor}`}>\n                          {Math.abs(metric.change)}%\n                        </span>\n                      </div>\n                      <span className={`text-xs ml-2 ${isDarkMode ? 'text-gray-400' : 'text-gray-500'}`}>\n                        vs last period\n                      </span>\n                    </div>\n                  </CardContent>\n                </Card>\n              </motion.div>\n            );\n          })}\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-4 md:gap-6 mb-8\">\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Revenue Overview</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Daily revenue trends\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <RevenueChart data={chartData} isDarkMode={isDarkMode} />\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>User Growth</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Active users over time\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <UserAreaChart data={chartData} isDarkMode={isDarkMode} />\n            </CardContent>\n          </Card>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-4 md:gap-6 mb-8\">\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Orders Distribution</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                By product category\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"h-[300px] w-full\">\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <PieChart>\n                    <Pie\n                      data={pieChartData}\n                      cx=\"50%\"\n                      cy=\"50%\"\n                      labelLine={false}\n                      label={({ name, percent }) => `${name}: ${(percent * 100).toFixed(0)}%`}\n                      outerRadius={80}\n                      fill=\"#8884d8\"\n                      dataKey=\"value\"\n                    >\n                      {pieChartData.map((entry, index) => (\n                        <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\n                      ))}\n                    </Pie>\n                    <Tooltip\n                      contentStyle={{\n                        backgroundColor: isDarkMode ? '#1f2937' : '#ffffff',\n                        border: isDarkMode ? '1px solid #374151' : '1px solid #e5e7eb',\n                        borderRadius: '6px',\n                        color: isDarkMode ? '#ffffff' : '#000000'\n                      }}\n                      formatter={(value: number, name: string, props: any) => [\n                        `${value} orders`,\n                        props.payload.name\n                      ]}\n                    />\n                    <Legend\n                      verticalAlign=\"bottom\"\n                      height={36}\n                      iconType=\"circle\"\n                      wrapperStyle={{\n                        color: isDarkMode ? '#9ca3af' : '#6b7280'\n                      }}\n                    />\n                  </PieChart>\n                </ResponsiveContainer>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className={`lg:col-span-2 ${isDarkMode ? 'bg-gray-800 border-gray-700' : ''}`}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Performance Metrics</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Combined view of key indicators\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"relative h-80\">\n                {/* Chart Container */}\n                <div className=\"flex items-end justify-between h-full gap-2 px-4\">\n                  {chartData.map((dataPoint, index) => {\n                    const maxValue = getMaxValue();\n                    const revenueHeight = (dataPoint.revenue / maxValue) * 100;\n                    const usersHeight = ((dataPoint.users * 10) / maxValue) * 100;\n                    const ordersHeight = ((dataPoint.orders * 10) / maxValue) * 100;\n\n                    return (\n                      <div key={dataPoint.date} className=\"flex-1 flex items-end justify-center gap-1 h-full\">\n                        <div className=\"flex items-end gap-0.5 h-full\">\n                          {/* Revenue Bar */}\n                          <motion.div\n                            initial={{ height: 0 }}\n                            animate={{ height: `${revenueHeight}%` }}\n                            transition={{ duration: 0.5, delay: index * 0.1 }}\n                            className=\"w-6 bg-blue-500 rounded-t cursor-pointer hover:bg-blue-600 transition-colors relative\"\n                            onMouseEnter={(e) => handleBarHover('Revenue', dataPoint.revenue, dataPoint.date, e)}\n                            onMouseMove={(e) => setTooltipPosition({ x: e.clientX, y: e.clientY })}\n                            onMouseLeave={handleBarLeave}\n                          />\n                          \n                          {/* Users Bar */}\n                          <motion.div\n                            initial={{ height: 0 }}\n                            animate={{ height: `${usersHeight}%` }}\n                            transition={{ duration: 0.5, delay: index * 0.1 + 0.05 }}\n                            className=\"w-6 bg-green-500 rounded-t cursor-pointer hover:bg-green-600 transition-colors relative\"\n                            onMouseEnter={(e) => handleBarHover('Users', dataPoint.users, dataPoint.date, e)}\n                            onMouseMove={(e) => setTooltipPosition({ x: e.clientX, y: e.clientY })}\n                            onMouseLeave={handleBarLeave}\n                          />\n                          \n                          {/* Orders Bar */}\n                          <motion.div\n                            initial={{ height: 0 }}\n                            animate={{ height: `${ordersHeight}%` }}\n                            transition={{ duration: 0.5, delay: index * 0.1 + 0.1 }}\n                            className=\"w-6 bg-purple-500 rounded-t cursor-pointer hover:bg-purple-600 transition-colors relative\"\n                            onMouseEnter={(e) => handleBarHover('Orders', dataPoint.orders, dataPoint.date, e)}\n                            onMouseMove={(e) => setTooltipPosition({ x: e.clientX, y: e.clientY })}\n                            onMouseLeave={handleBarLeave}\n                          />\n                        </div>\n                        \n                        {/* Date Label */}\n                        <div className=\"absolute bottom-0 left-0 right-0 flex justify-between px-4 -mb-6\">\n                          <span className={`text-xs ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                            {new Date(dataPoint.date).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n                          </span>\n                        </div>\n                      </div>\n                    );\n                  })}\n                </div>\n\n                {/* Y-axis Labels */}\n                <div className=\"absolute left-0 top-0 bottom-0 flex flex-col justify-between text-xs pr-2 -ml-12\">\n                  {[100, 75, 50, 25, 0].map((percent) => (\n                    <span key={percent} className={isDarkMode ? 'text-gray-400' : 'text-gray-600'}>\n                      {Math.round((getMaxValue() * percent) / 100).toLocaleString()}\n                    </span>\n                  ))}\n                </div>\n\n                {/* Tooltip */}\n                {hoveredBar && (\n                  <motion.div\n                    initial={{ opacity: 0, scale: 0.9 }}\n                    animate={{ opacity: 1, scale: 1 }}\n                    className={`fixed z-50 px-3 py-2 rounded-lg shadow-lg pointer-events-none ${\n                      isDarkMode ? 'bg-gray-700 text-white' : 'bg-white text-gray-900'\n                    }`}\n                    style={{\n                      left: tooltipPosition.x + 10,\n                      top: tooltipPosition.y - 40,\n                    }}\n                  >\n                    <div className=\"text-sm font-semibold\">{hoveredBar.metric}</div>\n                    <div className=\"text-xs\">\n                      {new Date(hoveredBar.date).toLocaleDateString('en-US', { \n                        month: 'short', \n                        day: 'numeric',\n                        year: 'numeric'\n                      })}\n                    </div>\n                    <div className=\"text-sm font-bold mt-1\">\n                      {hoveredBar.metric === 'Revenue' \n                        ? `$${hoveredBar.value.toLocaleString()}`\n                        : hoveredBar.value.toLocaleString()}\n                    </div>\n                  </motion.div>\n                )}\n\n                {/* Legend */}\n                <div className=\"flex justify-center gap-6 mt-8\">\n                  <div className=\"flex items-center gap-2\">\n                    <div className=\"w-4 h-4 bg-blue-500 rounded\"></div>\n                    <span className={`text-sm ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>\n                      Revenue\n                    </span>\n                  </div>\n                  <div className=\"flex items-center gap-2\">\n                    <div className=\"w-4 h-4 bg-green-500 rounded\"></div>\n                    <span className={`text-sm ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>\n                      Users\n                    </span>\n                  </div>\n                  <div className=\"flex items-center gap-2\">\n                    <div className=\"w-4 h-4 bg-purple-500 rounded\"></div>\n                    <span className={`text-sm ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>\n                      Orders\n                    </span>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n          <CardHeader>\n            <CardTitle className={isDarkMode ? 'text-white' : ''}>Top Products</CardTitle>\n            <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n              Best performing products by revenue\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {/* Desktop Table */}\n              <div className=\"hidden md:block overflow-x-auto\">\n                <Table>\n                  <TableHeader>\n                    <TableRow className={isDarkMode ? 'border-gray-700' : ''}>\n                      <TableHead className={isDarkMode ? 'text-gray-300' : ''}>\n                        <Button\n                          variant=\"ghost\"\n                          onClick={() => handleSort('product')}\n                          className=\"flex items-center gap-1 hover:bg-transparent p-0\"\n                        >\n                          Product\n                          <ArrowUpDown className=\"h-4 w-4\" />\n                        </Button>\n                      </TableHead>\n                      <TableHead className={isDarkMode ? 'text-gray-300' : ''}>\n                        <Button\n                          variant=\"ghost\"\n                          onClick={() => handleSort('sales')}\n                          className=\"flex items-center gap-1 hover:bg-transparent p-0\"\n                        >\n                          Sales\n                          <ArrowUpDown className=\"h-4 w-4\" />\n                        </Button>\n                      </TableHead>\n                      <TableHead className={isDarkMode ? 'text-gray-300' : ''}>\n                        <Button\n                          variant=\"ghost\"\n                          onClick={() => handleSort('revenue')}\n                          className=\"flex items-center gap-1 hover:bg-transparent p-0\"\n                        >\n                          Revenue\n                          <ArrowUpDown className=\"h-4 w-4\" />\n                        </Button>\n                      </TableHead>\n                      <TableHead className={isDarkMode ? 'text-gray-300' : ''}>\n                        <Button\n                          variant=\"ghost\"\n                          onClick={() => handleSort('status')}\n                          className=\"flex items-center gap-1 hover:bg-transparent p-0\"\n                        >\n                          Status\n                          <ArrowUpDown className=\"h-4 w-4\" />\n                        </Button>\n                      </TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {paginatedData().map((row) => (\n                      <TableRow\n                        key={row.id}\n                        className={isDarkMode ? 'border-gray-700 hover:bg-gray-700/50' : 'hover:bg-gray-50'}\n                      >\n                        <TableCell className={`font-medium ${isDarkMode ? 'text-white' : ''}`}>\n                          {row.product}\n                        </TableCell>\n                        <TableCell className={isDarkMode ? 'text-gray-300' : ''}>\n                          {row.sales.toLocaleString()}\n                        </TableCell>\n                        <TableCell className={isDarkMode ? 'text-gray-300' : ''}>\n                          ${row.revenue.toLocaleString()}\n                        </TableCell>\n                        <TableCell>\n                          <Badge\n                            variant={getStatusBadgeVariant(row.status)}\n                            className=\"capitalize\"\n                          >\n                            {row.status}\n                          </Badge>\n                        </TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              </div>\n\n              {/* Mobile Cards */}\n              <div className=\"md:hidden space-y-4\">\n                {paginatedData().map((row) => (\n                  <div\n                    key={row.id}\n                    className={`p-4 rounded-lg border ${\n                      isDarkMode ? 'bg-gray-700 border-gray-600' : 'bg-white border-gray-200'\n                    }`}\n                  >\n                    <div className=\"flex justify-between items-start mb-3\">\n                      <h3 className={`font-semibold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                        {row.product}\n                      </h3>\n                      <Badge\n                        variant={getStatusBadgeVariant(row.status)}\n                        className=\"capitalize\"\n                      >\n                        {row.status}\n                      </Badge>\n                    </div>\n                    <div className=\"grid grid-cols-2 gap-2\">\n                      <div>\n                        <p className={`text-sm ${isDarkMode ? 'text-gray-400' : 'text-gray-500'}`}>\n                          Sales\n                        </p>\n                        <p className={`font-medium ${isDarkMode ? 'text-gray-200' : 'text-gray-900'}`}>\n                          {row.sales.toLocaleString()}\n                        </p>\n                      </div>\n                      <div>\n                        <p className={`text-sm ${isDarkMode ? 'text-gray-400' : 'text-gray-500'}`}>\n                          Revenue\n                        </p>\n                        <p className={`font-medium ${isDarkMode ? 'text-gray-200' : 'text-gray-900'}`}>\n                          ${row.revenue.toLocaleString()}\n                        </p>\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n\n              {/* Pagination */}\n              <div className=\"flex items-center justify-between pt-4\">\n                <p className={`text-sm ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                  Showing {((currentPage - 1) * ITEMS_PER_PAGE) + 1} to{' '}\n                  {Math.min(currentPage * ITEMS_PER_PAGE, tableData.length)} of{' '}\n                  {tableData.length} products\n                </p>\n                <div className=\"flex gap-2\">\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => setCurrentPage(prev => Math.max(1, prev - 1))}\n                    disabled={currentPage === 1}\n                    className={isDarkMode ? 'border-gray-700' : ''}\n                  >\n                    <ChevronLeft className=\"h-4 w-4\" />\n                  </Button>\n                  <div className=\"flex items-center gap-1\">\n                    {Array.from({ length: totalPages }, (_, i) => i + 1).map((page) => (\n                      <Button\n                        key={page}\n                        variant={currentPage === page ? 'default' : 'outline'}\n                        size=\"sm\"\n                        onClick={() => setCurrentPage(page)}\n                        className={`w-8 ${isDarkMode && currentPage !== page ? 'border-gray-700' : ''}`}\n                      >\n                        {page}\n                      </Button>\n                    ))}\n                  </div>\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => setCurrentPage(prev => Math.min(totalPages, prev + 1))}\n                    disabled={currentPage === totalPages}\n                    className={isDarkMode ? 'border-gray-700' : ''}\n                  >\n                    <ChevronRight className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 md:gap-6 mt-8\">\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Recent Activity</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {mockActivityData.map((activity, index) => {\n                  const Icon = activity.icon;\n                  return (\n                    <motion.div\n                      key={activity.id}\n                      initial={{ opacity: 0, x: -20 }}\n                      animate={{ opacity: 1, x: 0 }}\n                      transition={{ delay: index * 0.1, duration: 0.3 }}\n                      className=\"flex items-start gap-3\"\n                    >\n                      <div className={`p-2 rounded-full ${isDarkMode ? 'bg-gray-700' : 'bg-gray-100'} flex-shrink-0`}>\n                        <Icon className={`h-4 w-4 ${activity.color}`} />\n                      </div>\n                      <div className=\"flex-1 min-w-0\">\n                        <p className={`text-sm font-medium ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                          {activity.message}\n                        </p>\n                        <p className={`text-xs mt-1 ${isDarkMode ? 'text-gray-500' : 'text-gray-500'}`}>\n                          {activity.timestamp}\n                        </p>\n                      </div>\n                      <div className={`h-full w-px ${isDarkMode ? 'bg-gray-700' : 'bg-gray-200'} absolute left-[22px] top-12 -z-10`} \n                           style={{ height: index === mockActivityData.length - 1 ? '0' : '100%' }} />\n                    </motion.div>\n                  );\n                })}\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Quick Stats</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <QuickStats isDarkMode={isDarkMode} />\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Alerts</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-3\">\n                {alerts.length === 0 ? (\n                  <div className={`text-center py-8 ${isDarkMode ? 'text-gray-400' : 'text-gray-500'}`}>\n                    <Info className=\"h-8 w-8 mx-auto mb-2 opacity-50\" />\n                    <p className=\"text-sm\">No active alerts</p>\n                  </div>\n                ) : (\n                  alerts.map((alert, index) => (\n                    <motion.div\n                      key={alert.id}\n                      initial={{ opacity: 0, x: -20 }}\n                      animate={{ opacity: 1, x: 0 }}\n                      exit={{ opacity: 0, x: 20 }}\n                      transition={{ delay: index * 0.1 }}\n                      className={`relative p-4 rounded-lg border ${\n                        isDarkMode ? 'bg-gray-700/50 border-gray-600' : 'bg-white border-gray-200'\n                      } ${\n                        alert.severity === 'error'\n                          ? 'border-l-4 border-l-red-500'\n                          : alert.severity === 'warning'\n                          ? 'border-l-4 border-l-yellow-500'\n                          : 'border-l-4 border-l-blue-500'\n                      }`}\n                    >\n                      <div className=\"flex items-start gap-3\">\n                        <div className=\"flex-shrink-0 mt-0.5\">\n                          {alert.severity === 'error' && (\n                            <AlertCircle className=\"h-5 w-5 text-red-500\" />\n                          )}\n                          {alert.severity === 'warning' && (\n                            <AlertTriangle className=\"h-5 w-5 text-yellow-500\" />\n                          )}\n                          {alert.severity === 'info' && (\n                            <Info className=\"h-5 w-5 text-blue-500\" />\n                          )}\n                        </div>\n                        \n                        <div className=\"flex-1 min-w-0\">\n                          <div className=\"flex items-start justify-between gap-2\">\n                            <div className=\"flex-1\">\n                              <div className=\"flex items-center gap-2 mb-1\">\n                                <h4 className={`text-sm font-semibold ${\n                                  isDarkMode ? 'text-white' : 'text-gray-900'\n                                }`}>\n                                  {alert.title}\n                                </h4>\n                                <Badge\n                                  variant={\n                                    alert.severity === 'error'\n                                      ? 'destructive'\n                                      : alert.severity === 'warning'\n                                      ? 'default'\n                                      : 'secondary'\n                                  }\n                                  className=\"text-xs\"\n                                >\n                                  {alert.severity}\n                                </Badge>\n                              </div>\n                              <p className={`text-sm ${\n                                isDarkMode ? 'text-gray-300' : 'text-gray-600'\n                              }`}>\n                                {alert.message}\n                              </p>\n                              <p className={`text-xs mt-1 ${\n                                isDarkMode ? 'text-gray-500' : 'text-gray-400'\n                              }`}>\n                                {alert.timestamp}\n                              </p>\n                            </div>\n                            \n                            <Button\n                              variant=\"ghost\"\n                              size=\"icon\"\n                              className=\"h-6 w-6 flex-shrink-0\"\n                              onClick={() => dismissAlert(alert.id)}\n                            >\n                              <X className=\"h-4 w-4\" />\n                            </Button>\n                          </div>\n                        </div>\n                      </div>\n                    </motion.div>\n                  ))\n                )}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}",
    "error": null,
    "elapsed_time": 610.0400266647339,
    "success": true
  }
}