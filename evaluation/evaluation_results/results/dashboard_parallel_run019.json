{
  "prompt_id": "dashboard",
  "prompt_name": "Analytics Dashboard",
  "mode": "parallel",
  "run_number": 19,
  "timestamp": "2025-10-14T02:11:02.347722",
  "response_time": 69.34117984771729,
  "total_tokens": null,
  "response_content": "import { useState, useCallback } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Moon, Sun, RefreshCw } from 'lucide-react';\nimport { ArrowUpDown, ChevronLeft, ChevronRight } from 'lucide-react';\nimport { Badge } from '@/components/ui/badge';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\n\n\nimport { PieChart, Pie, Cell, ResponsiveContainer, Legend, Tooltip } from 'recharts';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\nimport { motion } from 'framer-motion';\n\nimport { TrendingUp, TrendingDown, DollarSign, Users, ShoppingCart, Target, CheckCircle, AlertCircle, UserPlus, Package } from 'lucide-react';\nimport { TrendingUp, TrendingDown, DollarSign, Users, ShoppingCart, Target } from 'lucide-react';\nimport { Progress } from '@/components/ui/progress';\nimport { motion } from 'framer-motion';\n\n\ninterface MetricData {\n  id: string;\n  label: string;\n  value: number;\n  change: number;\n  trend: 'up' | 'down';\n}\n\ninterface ChartDataPoint {\n  date: string;\n  revenue: number;\n  users: number;\n  orders: number;\n}\n\ninterface TableRow {\n  id: string;\n  product: string;\n  sales: number;\n  revenue: number;\n  status: 'active' | 'pending' | 'inactive';\n}\n\nconst mockMetrics: MetricData[] = [\n  { id: '1', label: 'Total Revenue', value: 45231, change: 12.5, trend: 'up' },\n  { id: '2', label: 'Active Users', value: 2350, change: 8.2, trend: 'up' },\n  { id: '3', label: 'Total Orders', value: 1543, change: -3.1, trend: 'down' },\n  { id: '4', label: 'Conversion Rate', value: 3.24, change: 5.7, trend: 'up' }\n];\n\nconst mockChartData: ChartDataPoint[] = [\n  { date: '2024-01-01', revenue: 12000, users: 450, orders: 230 },\n  { date: '2024-01-02', revenue: 15000, users: 520, orders: 280 },\n  { date: '2024-01-03', revenue: 13500, users: 490, orders: 250 },\n  { date: '2024-01-04', revenue: 18000, users: 610, orders: 320 },\n  { date: '2024-01-05', revenue: 16500, users: 580, orders: 295 },\n  { date: '2024-01-06', revenue: 20000, users: 680, orders: 350 },\n  { date: '2024-01-07', revenue: 22000, users: 720, orders: 380 }\n];\n\nconst mockTableData: TableRow[] = [\n  { id: '1', product: 'Premium Plan', sales: 234, revenue: 23400, status: 'active' },\n  { id: '2', product: 'Basic Plan', sales: 567, revenue: 11340, status: 'active' },\n  { id: '3', product: 'Enterprise Plan', sales: 89, revenue: 17800, status: 'active' },\n  { id: '4', product: 'Starter Plan', sales: 432, revenue: 4320, status: 'pending' },\n  { id: '5', product: 'Pro Plan', sales: 156, revenue: 15600, status: 'active' }\n];\ninterface ActivityItem {\n  id: string;\n  type: 'success' | 'warning' | 'info' | 'error';\n  message: string;\n  timestamp: string;\n  icon: 'check' | 'alert' | 'user' | 'package' | 'dollar' | 'cart';\n}\n\nconst mockActivityData: ActivityItem[] = [\n  { id: '1', type: 'success', message: 'New order #1234 completed', timestamp: '2 minutes ago', icon: 'check' },\n  { id: '2', type: 'info', message: 'User John Doe registered', timestamp: '5 minutes ago', icon: 'user' },\n  { id: '3', type: 'success', message: 'Payment of $450 received', timestamp: '12 minutes ago', icon: 'dollar' },\n  { id: '4', type: 'warning', message: 'Low stock alert for Premium Plan', timestamp: '18 minutes ago', icon: 'alert' },\n  { id: '5', type: 'info', message: 'New product added to catalog', timestamp: '25 minutes ago', icon: 'package' },\n  { id: '6', type: 'success', message: 'Order #1233 shipped', timestamp: '32 minutes ago', icon: 'cart' },\n  { id: '7', type: 'info', message: 'User Jane Smith registered', timestamp: '45 minutes ago', icon: 'user' },\n  { id: '8', type: 'success', message: 'Payment of $890 received', timestamp: '1 hour ago', icon: 'dollar' },\n  { id: '9', type: 'success', message: 'Order #1232 completed', timestamp: '1 hour ago', icon: 'check' },\n  { id: '10', type: 'info', message: 'System backup completed', timestamp: '2 hours ago', icon: 'check' }\n];\nconst pieChartData = [\n  { name: 'Premium Plan', value: 23400, color: '#3b82f6' },\n  { name: 'Enterprise Plan', value: 17800, color: '#8b5cf6' },\n  { name: 'Pro Plan', value: 15600, color: '#10b981' },\n  { name: 'Basic Plan', value: 11340, color: '#f59e0b' },\n  { name: 'Starter Plan', value: 4320, color: '#ef4444' }\n];\n\nconst DonutChart = ({ isDarkMode }: { isDarkMode: boolean }) => {\n  const CustomTooltip = ({ active, payload }: any) => {\n    if (active && payload && payload.length) {\n      return (\n        <div className={`p-3 rounded-lg shadow-lg border ${\n          isDarkMode ? 'bg-gray-800 border-gray-700 text-white' : 'bg-white border-gray-200'\n        }`}>\n          <p className=\"font-semibold\">{payload[0].name}</p>\n          <p className={isDarkMode ? 'text-gray-300' : 'text-gray-600'}>\n            ${payload[0].value.toLocaleString()}\n          </p>\n          <p className=\"text-sm text-gray-500\">\n            {((payload[0].value / pieChartData.reduce((sum, item) => sum + item.value, 0)) * 100).toFixed(1)}%\n          </p>\n        </div>\n      );\n    }\n    return null;\n  };\n\n  const CustomLegend = ({ payload }: any) => {\n    const total = pieChartData.reduce((sum, item) => sum + item.value, 0);\n    \n    return (\n      <div className=\"flex flex-col gap-2 mt-4\">\n        {payload.map((entry: any, index: number) => {\n          const percentage = ((entry.payload.value / total) * 100).toFixed(1);\n          return (\n            <div key={`legend-${index}`} className=\"flex items-center justify-between\">\n              <div className=\"flex items-center gap-2\">\n                <div \n                  className=\"w-3 h-3 rounded-full\" \n                  style={{ backgroundColor: entry.color }}\n                />\n                <span className={`text-sm ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>\n                  {entry.value}\n                </span>\n              </div>\n              <div className=\"flex items-center gap-3\">\n                <span className={`text-sm font-semibold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                  ${entry.payload.value.toLocaleString()}\n                </span>\n                <span className={`text-xs ${isDarkMode ? 'text-gray-400' : 'text-gray-500'}`}>\n                  {percentage}%\n                </span>\n              </div>\n            </div>\n          );\n        })}\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"w-full h-full\">\n      <ResponsiveContainer width=\"100%\" height={300}>\n        <PieChart>\n          <Pie\n            data={pieChartData}\n            cx=\"50%\"\n            cy=\"50%\"\n            innerRadius={60}\n            outerRadius={90}\n            paddingAngle={2}\n            dataKey=\"value\"\n            animationBegin={0}\n            animationDuration={800}\n          >\n            {pieChartData.map((entry, index) => (\n              <Cell key={`cell-${index}`} fill={entry.color} />\n            ))}\n          </Pie>\n          <Tooltip content={<CustomTooltip />} />\n          <Legend content={<CustomLegend />} />\n        </PieChart>\n      </ResponsiveContainer>\n    </div>\n  );\n};\n\nconst RevenueChart = ({ data, isDarkMode }: { data: ChartDataPoint[], isDarkMode: boolean }) => {\n  const [hoveredPoint, setHoveredPoint] = useState<number | null>(null);\n  \n  const maxRevenue = Math.max(...data.map(d => d.revenue));\n  const minRevenue = Math.min(...data.map(d => d.revenue));\n  const revenueRange = maxRevenue - minRevenue;\n  \n  const chartHeight = 250;\n  const chartWidth = 100; // percentage\n  const padding = { top: 20, right: 20, bottom: 40, left: 60 };\n  \n  const getX = (index: number) => {\n    return (index / (data.length - 1)) * 100;\n  };\n  \n  const getY = (value: number) => {\n    const normalizedValue = ((value - minRevenue) / revenueRange) * 100;\n    return 100 - normalizedValue;\n  };\n  \n  const pathData = data.map((point, index) => {\n    const x = getX(index);\n    const y = getY(point.revenue);\n    return `${index === 0 ? 'M' : 'L'} ${x} ${y}`;\n  }).join(' ');\n  \n  const formatCurrency = (value: number) => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0\n    }).format(value);\n  };\n  \n  const formatDate = (dateStr: string) => {\n    const date = new Date(dateStr);\n    return date.toLocaleDateString('en-US', { month: 'short', day: 'numeric' });\n  };\n  \n  return (\n    <div className=\"w-full h-full\">\n      <div className=\"relative\" style={{ height: `${chartHeight}px` }}>\n        <svg\n          viewBox=\"0 0 100 100\"\n          preserveAspectRatio=\"none\"\n          className=\"w-full h-full\"\n        >\n          {/* Grid lines */}\n          {[0, 25, 50, 75, 100].map((y) => (\n            <line\n              key={y}\n              x1=\"0\"\n              y1={y}\n              x2=\"100\"\n              y2={y}\n              stroke={isDarkMode ? '#374151' : '#e5e7eb'}\n              strokeWidth=\"0.2\"\n              vectorEffect=\"non-scaling-stroke\"\n            />\n          ))}\n          \n          {/* Area fill */}\n          <path\n            d={`${pathData} L 100 100 L 0 100 Z`}\n            fill={isDarkMode ? 'rgba(59, 130, 246, 0.1)' : 'rgba(59, 130, 246, 0.1)'}\n          />\n          \n          {/* Line */}\n          <path\n            d={pathData}\n            fill=\"none\"\n            stroke={isDarkMode ? '#3b82f6' : '#2563eb'}\n            strokeWidth=\"0.5\"\n            vectorEffect=\"non-scaling-stroke\"\n            strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n          />\n          \n          {/* Data points */}\n          {data.map((point, index) => {\n            const x = getX(index);\n            const y = getY(point.revenue);\n            const isHovered = hoveredPoint === index;\n            \n            return (\n              <g key={index}>\n                <circle\n                  cx={x}\n                  cy={y}\n                  r={isHovered ? '1.5' : '0.8'}\n                  fill={isDarkMode ? '#3b82f6' : '#2563eb'}\n                  vectorEffect=\"non-scaling-stroke\"\n                  className=\"transition-all duration-200 cursor-pointer\"\n                  onMouseEnter={() => setHoveredPoint(index)}\n                  onMouseLeave={() => setHoveredPoint(null)}\n                />\n              </g>\n            );\n          })}\n        </svg>\n        \n        {/* Y-axis labels */}\n        <div className=\"absolute left-0 top-0 bottom-0 flex flex-col justify-between text-xs\" style={{ width: '50px' }}>\n          {[maxRevenue, maxRevenue * 0.75, maxRevenue * 0.5, maxRevenue * 0.25, minRevenue].map((value, index) => (\n            <span\n              key={index}\n              className={`${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}\n            >\n              {formatCurrency(value)}\n            </span>\n          ))}\n        </div>\n        \n        {/* Tooltips */}\n        {hoveredPoint !== null && (\n          <div\n            className={`absolute z-10 px-3 py-2 rounded-lg shadow-lg border transition-all duration-200 ${\n              isDarkMode ? 'bg-gray-700 border-gray-600 text-white' : 'bg-white border-gray-200 text-gray-900'\n            }`}\n            style={{\n              left: `${getX(hoveredPoint)}%`,\n              top: `${(getY(data[hoveredPoint].revenue) / 100) * chartHeight - 60}px`,\n              transform: 'translateX(-50%)'\n            }}\n          >\n            <div className=\"text-xs font-semibold mb-1\">\n              {formatDate(data[hoveredPoint].date)}\n            </div>\n            <div className=\"text-sm font-bold flex items-center gap-1\">\n              <TrendingUp className=\"h-3 w-3 text-green-500\" />\n              {formatCurrency(data[hoveredPoint].revenue)}\n            </div>\n            <div className={`text-xs mt-1 ${isDarkMode ? 'text-gray-400' : 'text-gray-500'}`}>\n              {data[hoveredPoint].orders} orders\n            </div>\n          </div>\n        )}\n      </div>\n      \n      {/* X-axis labels */}\n      <div className=\"flex justify-between mt-2 px-12\">\n        {data.map((point, index) => (\n          <span\n            key={index}\n            className={`text-xs ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}\n          >\n            {formatDate(point.date)}\n          </span>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nconst UserAreaChart = ({ data, isDarkMode }: { data: ChartDataPoint[], isDarkMode: boolean }) => {\n  const maxUsers = Math.max(...data.map(d => d.users));\n  const minUsers = Math.min(...data.map(d => d.users));\n  const padding = 40;\n  const chartHeight = 300;\n  const chartWidth = 600;\n  \n  const getX = (index: number) => {\n    return (index / (data.length - 1)) * (chartWidth - padding * 2) + padding;\n  };\n  \n  const getY = (value: number) => {\n    const range = maxUsers - minUsers;\n    const normalized = (value - minUsers) / range;\n    return chartHeight - padding - (normalized * (chartHeight - padding * 2));\n  };\n  \n  const pathData = data.map((point, index) => {\n    const x = getX(index);\n    const y = getY(point.users);\n    return `${index === 0 ? 'M' : 'L'} ${x} ${y}`;\n  }).join(' ');\n  \n  const areaPath = `${pathData} L ${getX(data.length - 1)} ${chartHeight - padding} L ${padding} ${chartHeight - padding} Z`;\n  \n  const gradientId = `userGradient-${isDarkMode ? 'dark' : 'light'}`;\n  \n  return (\n    <div className=\"w-full h-full\">\n      <div className=\"relative\" style={{ height: chartHeight }}>\n        <svg width=\"100%\" height={chartHeight} viewBox={`0 0 ${chartWidth} ${chartHeight}`} preserveAspectRatio=\"none\">\n          <defs>\n            <linearGradient id={gradientId} x1=\"0%\" y1=\"0%\" x2=\"0%\" y2=\"100%\">\n              <stop offset=\"0%\" stopColor={isDarkMode ? '#3b82f6' : '#60a5fa'} stopOpacity=\"0.8\" />\n              <stop offset=\"50%\" stopColor={isDarkMode ? '#3b82f6' : '#60a5fa'} stopOpacity=\"0.4\" />\n              <stop offset=\"100%\" stopColor={isDarkMode ? '#3b82f6' : '#60a5fa'} stopOpacity=\"0.1\" />\n            </linearGradient>\n          </defs>\n          \n          {/* Grid lines */}\n          {[0, 1, 2, 3, 4].map((i) => {\n            const y = padding + (i * (chartHeight - padding * 2) / 4);\n            return (\n              <line\n                key={i}\n                x1={padding}\n                y1={y}\n                x2={chartWidth - padding}\n                y2={y}\n                stroke={isDarkMode ? '#374151' : '#e5e7eb'}\n                strokeWidth=\"1\"\n                strokeDasharray=\"4 4\"\n              />\n            );\n          })}\n          \n          {/* Area path with animation */}\n          <motion.path\n            d={areaPath}\n            fill={`url(#${gradientId})`}\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            transition={{ duration: 0.8, ease: \"easeOut\" }}\n          />\n          \n          {/* Line path with animation */}\n          <motion.path\n            d={pathData}\n            fill=\"none\"\n            stroke={isDarkMode ? '#3b82f6' : '#2563eb'}\n            strokeWidth=\"3\"\n            strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n            initial={{ pathLength: 0 }}\n            animate={{ pathLength: 1 }}\n            transition={{ duration: 1.5, ease: \"easeInOut\" }}\n          />\n          \n          {/* Data points */}\n          {data.map((point, index) => {\n            const x = getX(index);\n            const y = getY(point.users);\n            return (\n              <motion.g\n                key={index}\n                initial={{ scale: 0, opacity: 0 }}\n                animate={{ scale: 1, opacity: 1 }}\n                transition={{ delay: 0.1 * index, duration: 0.3 }}\n              >\n                <circle\n                  cx={x}\n                  cy={y}\n                  r=\"5\"\n                  fill={isDarkMode ? '#1e293b' : '#ffffff'}\n                  stroke={isDarkMode ? '#3b82f6' : '#2563eb'}\n                  strokeWidth=\"2\"\n                  className=\"cursor-pointer hover:r-6 transition-all\"\n                />\n                <title>{`${point.date}: ${point.users} users`}</title>\n              </motion.g>\n            );\n          })}\n          \n          {/* Y-axis labels */}\n          {[0, 1, 2, 3, 4].map((i) => {\n            const value = maxUsers - (i * (maxUsers - minUsers) / 4);\n            const y = padding + (i * (chartHeight - padding * 2) / 4);\n            return (\n              <text\n                key={i}\n                x={padding - 10}\n                y={y + 5}\n                textAnchor=\"end\"\n                fontSize=\"12\"\n                fill={isDarkMode ? '#9ca3af' : '#6b7280'}\n              >\n                {Math.round(value)}\n              </text>\n            );\n          })}\n          \n          {/* X-axis labels */}\n          {data.map((point, index) => {\n            if (index % Math.ceil(data.length / 4) === 0 || index === data.length - 1) {\n              const x = getX(index);\n              const date = new Date(point.date);\n              const label = `${date.getMonth() + 1}/${date.getDate()}`;\n              return (\n                <text\n                  key={index}\n                  x={x}\n                  y={chartHeight - padding + 20}\n                  textAnchor=\"middle\"\n                  fontSize=\"12\"\n                  fill={isDarkMode ? '#9ca3af' : '#6b7280'}\n                >\n                  {label}\n                </text>\n              );\n            }\n            return null;\n          })}\n        </svg>\n      </div>\n    </div>\n  );\n};\n\nexport default function AnalyticsDashboard() {\n  const [sortColumn, setSortColumn] = useState<keyof TableRow>('revenue');\n  const [sortDirection, setSortDirection] = useState<'asc' | 'desc'>('desc');\n  const [currentPage, setCurrentPage] = useState(1);\n  const itemsPerPage = 3;\n  const [isDarkMode, setIsDarkMode] = useState(false);\n  const [metrics, setMetrics] = useState<MetricData[]>(mockMetrics);\n  const [chartData, setChartData] = useState<ChartDataPoint[]>(mockChartData);\n  const [tableData, setTableData] = useState<TableRow[]>(mockTableData);\n  const [isRefreshing, setIsRefreshing] = useState(false);\n\n  const toggleDarkMode = useCallback(() => {\n    setIsDarkMode(prev => !prev);\n  }, []);\n\n  const handleSort = useCallback((column: keyof TableRow) => {\n    if (sortColumn === column) {\n      setSortDirection(prev => prev === 'asc' ? 'desc' : 'asc');\n    } else {\n      setSortColumn(column);\n      setSortDirection('desc');\n    }\n    setCurrentPage(1);\n  }, [sortColumn]);\n\n  const sortedTableData = [...tableData].sort((a, b) => {\n    const aValue = a[sortColumn];\n    const bValue = b[sortColumn];\n    \n    if (typeof aValue === 'number' && typeof bValue === 'number') {\n      return sortDirection === 'asc' ? aValue - bValue : bValue - aValue;\n    }\n    \n    const aString = String(aValue);\n    const bString = String(bValue);\n    return sortDirection === 'asc' \n      ? aString.localeCompare(bString)\n      : bString.localeCompare(aString);\n  });\n\n  const totalPages = Math.ceil(sortedTableData.length / itemsPerPage);\n  const paginatedData = sortedTableData.slice(\n    (currentPage - 1) * itemsPerPage,\n    currentPage * itemsPerPage\n  );\n\n  const getStatusBadgeVariant = (status: TableRow['status']) => {\n    switch (status) {\n      case 'active':\n        return 'default';\n      case 'pending':\n        return 'secondary';\n      case 'inactive':\n        return 'outline';\n      default:\n        return 'default';\n    }\n  };\n\n  const handleRefresh = useCallback(() => {\n    setIsRefreshing(true);\n    \n    setTimeout(() => {\n      // Generate updated metrics with random variations\n      const updatedMetrics = mockMetrics.map(metric => ({\n        ...metric,\n        value: metric.value + Math.floor(Math.random() * 200 - 100),\n        change: parseFloat((Math.random() * 20 - 5).toFixed(1)),\n        trend: Math.random() > 0.5 ? 'up' as const : 'down' as const\n      }));\n\n      // Generate updated chart data with random variations\n      const updatedChartData = mockChartData.map(point => ({\n        ...point,\n        revenue: point.revenue + Math.floor(Math.random() * 4000 - 2000),\n        users: point.users + Math.floor(Math.random() * 100 - 50),\n        orders: point.orders + Math.floor(Math.random() * 50 - 25)\n      }));\n\n      // Generate updated table data with random variations\n      const updatedTableData = mockTableData.map(row => ({\n        ...row,\n        sales: row.sales + Math.floor(Math.random() * 40 - 20),\n        revenue: row.revenue + Math.floor(Math.random() * 2000 - 1000)\n      }));\n\n      setMetrics(updatedMetrics);\n      setChartData(updatedChartData);\n      setTableData(updatedTableData);\n      setIsRefreshing(false);\n    }, 1500);\n  }, []);\n\n  return (\n    <div className={`min-h-screen transition-colors duration-300 ${isDarkMode ? 'dark bg-gray-900' : 'bg-gray-50'}`}>\n      <div className=\"container mx-auto p-4 md:p-6 lg:p-8\">\n        <div className=\"flex flex-col md:flex-row justify-between items-start md:items-center gap-4 mb-8\">\n          <div>\n            <h1 className={`text-3xl md:text-4xl font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n              Analytics Dashboard\n            </h1>\n            <p className={`mt-2 ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n              Real-time insights and performance metrics\n            </p>\n          </div>\n          \n          <div className=\"flex gap-2\">\n            <Button\n              variant=\"outline\"\n              size=\"icon\"\n              onClick={toggleDarkMode}\n              className={isDarkMode ? 'border-gray-700' : ''}\n            >\n              {isDarkMode ? <Sun className=\"h-5 w-5\" /> : <Moon className=\"h-5 w-5\" />}\n            </Button>\n            \n            <Button\n              variant=\"outline\"\n              onClick={handleRefresh}\n              disabled={isRefreshing}\n              className={isDarkMode ? 'border-gray-700' : ''}\n            >\n              <RefreshCw className={`h-4 w-4 mr-2 ${isRefreshing ? 'animate-spin' : ''}`} />\n              Refresh\n            </Button>\n          </div>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 md:gap-6 mb-8\">\n          {metrics.map((metric, index) => {\n            const Icon = metric.label.includes('Revenue') ? DollarSign :\n                        metric.label.includes('Users') ? Users :\n                        metric.label.includes('Orders') ? ShoppingCart :\n                        Target;\n            \n            const TrendIcon = metric.trend === 'up' ? TrendingUp : TrendingDown;\n            \n            return (\n              <motion.div\n                key={metric.id}\n                initial={{ opacity: 0, y: 20 }}\n                animate={{ opacity: 1, y: 0 }}\n                transition={{ duration: 0.4, delay: index * 0.1 }}\n              >\n                <Card className={`${isDarkMode ? 'bg-gray-800 border-gray-700' : 'bg-white'} hover:shadow-lg transition-shadow duration-300`}>\n                  <CardHeader className=\"flex flex-row items-center justify-between pb-2\">\n                    <CardTitle className={`text-sm font-medium ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                      {metric.label}\n                    </CardTitle>\n                    <div className={`p-2 rounded-full ${isDarkMode ? 'bg-gray-700' : 'bg-gray-100'}`}>\n                      <Icon className={`h-4 w-4 ${isDarkMode ? 'text-gray-300' : 'text-gray-600'}`} />\n                    </div>\n                  </CardHeader>\n                  <CardContent>\n                    <div className={`text-2xl md:text-3xl font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                      {metric.label.includes('Revenue') ? `$${metric.value.toLocaleString()}` :\n                       metric.label.includes('Rate') ? `${metric.value}%` :\n                       metric.value.toLocaleString()}\n                    </div>\n                    <div className=\"flex items-center mt-2\">\n                      <TrendIcon className={`h-4 w-4 mr-1 ${metric.trend === 'up' ? 'text-green-500' : 'text-red-500'}`} />\n                      <span className={`text-sm font-medium ${metric.trend === 'up' ? 'text-green-500' : 'text-red-500'}`}>\n                        {metric.change > 0 ? '+' : ''}{metric.change}%\n                      </span>\n                      <span className={`text-sm ml-2 ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                        vs last period\n                      </span>\n                    </div>\n                  </CardContent>\n                </Card>\n              </motion.div>\n            );\n          })}</parameter>\n</invoke>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-4 md:gap-6 mb-8\">\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Revenue Overview</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Daily revenue trends\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <RevenueChart data={chartData} isDarkMode={isDarkMode} />\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>User Activity</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Active users over time\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <UserAreaChart data={chartData} isDarkMode={isDarkMode} />\n            </CardContent>\n          </Card>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-4 md:gap-6 mb-8\">\n          <Card className={`lg:col-span-2 ${isDarkMode ? 'bg-gray-800 border-gray-700' : ''}`}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Performance Metrics</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Combined view of key metrics\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <ResponsiveContainer width=\"100%\" height={300}>\n                <LineChart data={chartData}>\n                  <CartesianGrid strokeDasharray=\"3 3\" stroke={isDarkMode ? '#374151' : '#e5e7eb'} />\n                  <XAxis \n                    dataKey=\"date\" \n                    stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                    tick={{ fill: isDarkMode ? '#9ca3af' : '#6b7280' }}\n                  />\n                  <YAxis \n                    stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                    tick={{ fill: isDarkMode ? '#9ca3af' : '#6b7280' }}\n                  />\n                  <Tooltip \n                    contentStyle={{\n                      backgroundColor: isDarkMode ? '#1f2937' : '#ffffff',\n                      border: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\n                      borderRadius: '6px',\n                      color: isDarkMode ? '#ffffff' : '#000000'\n                    }}\n                  />\n                  <Legend \n                    wrapperStyle={{\n                      color: isDarkMode ? '#9ca3af' : '#6b7280'\n                    }}\n                  />\n                  <Line \n                    type=\"monotone\" \n                    dataKey=\"revenue\" \n                    stroke=\"#3b82f6\" \n                    strokeWidth={2}\n                    dot={{ fill: '#3b82f6', r: 4 }}\n                    activeDot={{ r: 6 }}\n                    name=\"Revenue ($)\"\n                  />\n                  <Line \n                    type=\"monotone\" \n                    dataKey=\"users\" \n                    stroke=\"#10b981\" \n                    strokeWidth={2}\n                    dot={{ fill: '#10b981', r: 4 }}\n                    activeDot={{ r: 6 }}\n                    name=\"Users\"\n                  />\n                  <Line \n                    type=\"monotone\" \n                    dataKey=\"orders\" \n                    stroke=\"#f59e0b\" \n                    strokeWidth={2}\n                    dot={{ fill: '#f59e0b', r: 4 }}\n                    activeDot={{ r: 6 }}\n                    name=\"Orders\"\n                  />\n                </LineChart>\n              </ResponsiveContainer>\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Distribution</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Sales by category\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <DonutChart isDarkMode={isDarkMode} />\n            </CardContent>\n          </Card>\n        </div>\n\n        <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n          <CardHeader>\n            <CardTitle className={isDarkMode ? 'text-white' : ''}>Top Products</CardTitle>\n            <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n              Best performing products by revenue\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              <div className=\"rounded-md border\">\n                <Table>\n                  <TableHeader>\n                    <TableRow className={isDarkMode ? 'border-gray-700' : ''}>\n                      <TableHead className={isDarkMode ? 'text-gray-300' : ''}>\n                        <Button\n                          variant=\"ghost\"\n                          onClick={() => handleSort('product')}\n                          className=\"h-8 px-2 lg:px-3\"\n                        >\n                          Product\n                          <ArrowUpDown className=\"ml-2 h-4 w-4\" />\n                        </Button>\n                      </TableHead>\n                      <TableHead className={isDarkMode ? 'text-gray-300' : ''}>\n                        <Button\n                          variant=\"ghost\"\n                          onClick={() => handleSort('sales')}\n                          className=\"h-8 px-2 lg:px-3\"\n                        >\n                          Sales\n                          <ArrowUpDown className=\"ml-2 h-4 w-4\" />\n                        </Button>\n                      </TableHead>\n                      <TableHead className={isDarkMode ? 'text-gray-300' : ''}>\n                        <Button\n                          variant=\"ghost\"\n                          onClick={() => handleSort('revenue')}\n                          className=\"h-8 px-2 lg:px-3\"\n                        >\n                          Revenue\n                          <ArrowUpDown className=\"ml-2 h-4 w-4\" />\n                        </Button>\n                      </TableHead>\n                      <TableHead className={isDarkMode ? 'text-gray-300' : ''}>\n                        <Button\n                          variant=\"ghost\"\n                          onClick={() => handleSort('status')}\n                          className=\"h-8 px-2 lg:px-3\"\n                        >\n                          Status\n                          <ArrowUpDown className=\"ml-2 h-4 w-4\" />\n                        </Button>\n                      </TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {paginatedData.map((row) => (\n                      <TableRow \n                        key={row.id}\n                        className={isDarkMode ? 'border-gray-700 hover:bg-gray-700/50' : ''}\n                      >\n                        <TableCell className={`font-medium ${isDarkMode ? 'text-gray-200' : ''}`}>\n                          {row.product}\n                        </TableCell>\n                        <TableCell className={isDarkMode ? 'text-gray-300' : ''}>\n                          {row.sales.toLocaleString()}\n                        </TableCell>\n                        <TableCell className={isDarkMode ? 'text-gray-300' : ''}>\n                          ${row.revenue.toLocaleString()}\n                        </TableCell>\n                        <TableCell>\n                          <Badge \n                            variant={getStatusBadgeVariant(row.status)}\n                            className=\"capitalize\"\n                          >\n                            {row.status}\n                          </Badge>\n                        </TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              </div>\n\n              <div className=\"flex items-center justify-between\">\n                <p className={`text-sm ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                  Showing {((currentPage - 1) * itemsPerPage) + 1} to {Math.min(currentPage * itemsPerPage, sortedTableData.length)} of {sortedTableData.length} products\n                </p>\n                \n                <div className=\"flex items-center gap-2\">\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => setCurrentPage(prev => Math.max(1, prev - 1))}\n                    disabled={currentPage === 1}\n                    className={isDarkMode ? 'border-gray-700' : ''}\n                  >\n                    <ChevronLeft className=\"h-4 w-4\" />\n                    Previous\n                  </Button>\n                  \n                  <div className={`text-sm ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>\n                    Page {currentPage} of {totalPages}\n                  </div>\n                  \n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => setCurrentPage(prev => Math.min(totalPages, prev + 1))}\n                    disabled={currentPage === totalPages}\n                    className={isDarkMode ? 'border-gray-700' : ''}\n                  >\n                    Next\n                    <ChevronRight className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 md:gap-6 mt-8\">\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Recent Activity</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Latest system events\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4 max-h-[400px] overflow-y-auto pr-2\">\n                {mockActivityData.map((activity) => {\n                  const getIcon = () => {\n                    switch (activity.icon) {\n                      case 'check':\n                        return <CheckCircle className=\"h-5 w-5\" />;\n                      case 'alert':\n                        return <AlertCircle className=\"h-5 w-5\" />;\n                      case 'user':\n                        return <UserPlus className=\"h-5 w-5\" />;\n                      case 'package':\n                        return <Package className=\"h-5 w-5\" />;\n                      case 'dollar':\n                        return <DollarSign className=\"h-5 w-5\" />;\n                      case 'cart':\n                        return <ShoppingCart className=\"h-5 w-5\" />;\n                      default:\n                        return <CheckCircle className=\"h-5 w-5\" />;\n                    }\n                  };\n\n                  const getColorClasses = () => {\n                    switch (activity.type) {\n                      case 'success':\n                        return isDarkMode \n                          ? 'bg-green-900/30 text-green-400 border-green-800' \n                          : 'bg-green-50 text-green-600 border-green-200';\n                      case 'warning':\n                        return isDarkMode \n                          ? 'bg-yellow-900/30 text-yellow-400 border-yellow-800' \n                          : 'bg-yellow-50 text-yellow-600 border-yellow-200';\n                      case 'error':\n                        return isDarkMode \n                          ? 'bg-red-900/30 text-red-400 border-red-800' \n                          : 'bg-red-50 text-red-600 border-red-200';\n                      case 'info':\n                      default:\n                        return isDarkMode \n                          ? 'bg-blue-900/30 text-blue-400 border-blue-800' \n                          : 'bg-blue-50 text-blue-600 border-blue-200';\n                    }\n                  };\n\n                  return (\n                    <div\n                      key={activity.id}\n                      className={`flex items-start gap-3 p-3 rounded-lg border transition-colors ${\n                        isDarkMode ? 'hover:bg-gray-700/50' : 'hover:bg-gray-50'\n                      }`}\n                    >\n                      <div className={`p-2 rounded-full border ${getColorClasses()}`}>\n                        {getIcon()}\n                      </div>\n                      <div className=\"flex-1 min-w-0\">\n                        <p className={`text-sm font-medium ${isDarkMode ? 'text-gray-200' : 'text-gray-900'}`}>\n                          {activity.message}\n                        </p>\n                        <p className={`text-xs mt-1 ${isDarkMode ? 'text-gray-500' : 'text-gray-500'}`}>\n                          {activity.timestamp}\n                        </p>\n                      </div>\n                    </div>\n                  );\n                })}\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Quick Stats</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Summary statistics\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                <motion.div\n                  initial={{ opacity: 0, y: 20 }}\n                  animate={{ opacity: 1, y: 0 }}\n                  transition={{ duration: 0.3 }}\n                  className=\"grid grid-cols-1 gap-4\"\n                >\n                  <div className={`p-4 rounded-lg border ${isDarkMode ? 'bg-gray-700/50 border-gray-600' : 'bg-white border-gray-200'}`}>\n                    <div className=\"flex items-center justify-between mb-2\">\n                      <span className={`text-sm font-medium ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>\n                        Goal Completion\n                      </span>\n                      <span className={`text-sm font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                        78%\n                      </span>\n                    </div>\n                    <Progress value={78} className=\"h-2\" />\n                  </div>\n\n                  <div className={`p-4 rounded-lg border ${isDarkMode ? 'bg-gray-700/50 border-gray-600' : 'bg-white border-gray-200'}`}>\n                    <div className=\"flex items-center justify-between mb-2\">\n                      <span className={`text-sm font-medium ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>\n                        Customer Satisfaction\n                      </span>\n                      <span className={`text-sm font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                        92%\n                      </span>\n                    </div>\n                    <Progress value={92} className=\"h-2\" />\n                  </div>\n\n                  <div className={`p-4 rounded-lg border ${isDarkMode ? 'bg-gray-700/50 border-gray-600' : 'bg-white border-gray-200'}`}>\n                    <div className=\"flex items-center justify-between mb-2\">\n                      <span className={`text-sm font-medium ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>\n                        System Performance\n                      </span>\n                      <span className={`text-sm font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                        85%\n                      </span>\n                    </div>\n                    <Progress value={85} className=\"h-2\" />\n                  </div>\n\n                  <div className={`p-4 rounded-lg border ${isDarkMode ? 'bg-gray-700/50 border-gray-600' : 'bg-white border-gray-200'}`}>\n                    <div className=\"flex items-center justify-between mb-2\">\n                      <span className={`text-sm font-medium ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>\n                        Team Productivity\n                      </span>\n                      <span className={`text-sm font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                        67%\n                      </span>\n                    </div>\n                    <Progress value={67} className=\"h-2\" />\n                  </div>\n\n                  <div className={`p-4 rounded-lg border ${isDarkMode ? 'bg-gray-700/50 border-gray-600' : 'bg-white border-gray-200'}`}>\n                    <div className=\"flex items-center justify-between mb-2\">\n                      <span className={`text-sm font-medium ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>\n                        Revenue Target\n                      </span>\n                      <span className={`text-sm font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                        94%\n                      </span>\n                    </div>\n                    <Progress value={94} className=\"h-2\" />\n                  </div>\n\n                  <div className={`p-4 rounded-lg border ${isDarkMode ? 'bg-gray-700/50 border-gray-600' : 'bg-white border-gray-200'}`}>\n                    <div className=\"flex items-center justify-between mb-2\">\n                      <span className={`text-sm font-medium ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>\n                        User Retention\n                      </span>\n                      <span className={`text-sm font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                        88%\n                      </span>\n                    </div>\n                    <Progress value={88} className=\"h-2\" />\n                  </div>\n                </motion.div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}",
  "error": null,
  "overall_score": 53,
  "code_quality_score": 14,
  "architecture_score": 16,
  "performance_score": 12,
  "accessibility_score": 11,
  "metadata": {
    "document_id": "eval_room_4ab050fbb8cf",
    "prompt_category": "intermediate",
    "prompt_complexity": 6.0
  },
  "raw_response": {
    "document_id": "eval_room_4ab050fbb8cf",
    "mode": "parallel",
    "prompt": "Generate an analytics dashboard page with charts, data tables, real-time updates, dark mode, and responsive design",
    "content": "import { useState, useCallback } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Moon, Sun, RefreshCw } from 'lucide-react';\nimport { ArrowUpDown, ChevronLeft, ChevronRight } from 'lucide-react';\nimport { Badge } from '@/components/ui/badge';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\n\n\nimport { PieChart, Pie, Cell, ResponsiveContainer, Legend, Tooltip } from 'recharts';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\nimport { motion } from 'framer-motion';\n\nimport { TrendingUp, TrendingDown, DollarSign, Users, ShoppingCart, Target, CheckCircle, AlertCircle, UserPlus, Package } from 'lucide-react';\nimport { TrendingUp, TrendingDown, DollarSign, Users, ShoppingCart, Target } from 'lucide-react';\nimport { Progress } from '@/components/ui/progress';\nimport { motion } from 'framer-motion';\n\n\ninterface MetricData {\n  id: string;\n  label: string;\n  value: number;\n  change: number;\n  trend: 'up' | 'down';\n}\n\ninterface ChartDataPoint {\n  date: string;\n  revenue: number;\n  users: number;\n  orders: number;\n}\n\ninterface TableRow {\n  id: string;\n  product: string;\n  sales: number;\n  revenue: number;\n  status: 'active' | 'pending' | 'inactive';\n}\n\nconst mockMetrics: MetricData[] = [\n  { id: '1', label: 'Total Revenue', value: 45231, change: 12.5, trend: 'up' },\n  { id: '2', label: 'Active Users', value: 2350, change: 8.2, trend: 'up' },\n  { id: '3', label: 'Total Orders', value: 1543, change: -3.1, trend: 'down' },\n  { id: '4', label: 'Conversion Rate', value: 3.24, change: 5.7, trend: 'up' }\n];\n\nconst mockChartData: ChartDataPoint[] = [\n  { date: '2024-01-01', revenue: 12000, users: 450, orders: 230 },\n  { date: '2024-01-02', revenue: 15000, users: 520, orders: 280 },\n  { date: '2024-01-03', revenue: 13500, users: 490, orders: 250 },\n  { date: '2024-01-04', revenue: 18000, users: 610, orders: 320 },\n  { date: '2024-01-05', revenue: 16500, users: 580, orders: 295 },\n  { date: '2024-01-06', revenue: 20000, users: 680, orders: 350 },\n  { date: '2024-01-07', revenue: 22000, users: 720, orders: 380 }\n];\n\nconst mockTableData: TableRow[] = [\n  { id: '1', product: 'Premium Plan', sales: 234, revenue: 23400, status: 'active' },\n  { id: '2', product: 'Basic Plan', sales: 567, revenue: 11340, status: 'active' },\n  { id: '3', product: 'Enterprise Plan', sales: 89, revenue: 17800, status: 'active' },\n  { id: '4', product: 'Starter Plan', sales: 432, revenue: 4320, status: 'pending' },\n  { id: '5', product: 'Pro Plan', sales: 156, revenue: 15600, status: 'active' }\n];\ninterface ActivityItem {\n  id: string;\n  type: 'success' | 'warning' | 'info' | 'error';\n  message: string;\n  timestamp: string;\n  icon: 'check' | 'alert' | 'user' | 'package' | 'dollar' | 'cart';\n}\n\nconst mockActivityData: ActivityItem[] = [\n  { id: '1', type: 'success', message: 'New order #1234 completed', timestamp: '2 minutes ago', icon: 'check' },\n  { id: '2', type: 'info', message: 'User John Doe registered', timestamp: '5 minutes ago', icon: 'user' },\n  { id: '3', type: 'success', message: 'Payment of $450 received', timestamp: '12 minutes ago', icon: 'dollar' },\n  { id: '4', type: 'warning', message: 'Low stock alert for Premium Plan', timestamp: '18 minutes ago', icon: 'alert' },\n  { id: '5', type: 'info', message: 'New product added to catalog', timestamp: '25 minutes ago', icon: 'package' },\n  { id: '6', type: 'success', message: 'Order #1233 shipped', timestamp: '32 minutes ago', icon: 'cart' },\n  { id: '7', type: 'info', message: 'User Jane Smith registered', timestamp: '45 minutes ago', icon: 'user' },\n  { id: '8', type: 'success', message: 'Payment of $890 received', timestamp: '1 hour ago', icon: 'dollar' },\n  { id: '9', type: 'success', message: 'Order #1232 completed', timestamp: '1 hour ago', icon: 'check' },\n  { id: '10', type: 'info', message: 'System backup completed', timestamp: '2 hours ago', icon: 'check' }\n];\nconst pieChartData = [\n  { name: 'Premium Plan', value: 23400, color: '#3b82f6' },\n  { name: 'Enterprise Plan', value: 17800, color: '#8b5cf6' },\n  { name: 'Pro Plan', value: 15600, color: '#10b981' },\n  { name: 'Basic Plan', value: 11340, color: '#f59e0b' },\n  { name: 'Starter Plan', value: 4320, color: '#ef4444' }\n];\n\nconst DonutChart = ({ isDarkMode }: { isDarkMode: boolean }) => {\n  const CustomTooltip = ({ active, payload }: any) => {\n    if (active && payload && payload.length) {\n      return (\n        <div className={`p-3 rounded-lg shadow-lg border ${\n          isDarkMode ? 'bg-gray-800 border-gray-700 text-white' : 'bg-white border-gray-200'\n        }`}>\n          <p className=\"font-semibold\">{payload[0].name}</p>\n          <p className={isDarkMode ? 'text-gray-300' : 'text-gray-600'}>\n            ${payload[0].value.toLocaleString()}\n          </p>\n          <p className=\"text-sm text-gray-500\">\n            {((payload[0].value / pieChartData.reduce((sum, item) => sum + item.value, 0)) * 100).toFixed(1)}%\n          </p>\n        </div>\n      );\n    }\n    return null;\n  };\n\n  const CustomLegend = ({ payload }: any) => {\n    const total = pieChartData.reduce((sum, item) => sum + item.value, 0);\n    \n    return (\n      <div className=\"flex flex-col gap-2 mt-4\">\n        {payload.map((entry: any, index: number) => {\n          const percentage = ((entry.payload.value / total) * 100).toFixed(1);\n          return (\n            <div key={`legend-${index}`} className=\"flex items-center justify-between\">\n              <div className=\"flex items-center gap-2\">\n                <div \n                  className=\"w-3 h-3 rounded-full\" \n                  style={{ backgroundColor: entry.color }}\n                />\n                <span className={`text-sm ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>\n                  {entry.value}\n                </span>\n              </div>\n              <div className=\"flex items-center gap-3\">\n                <span className={`text-sm font-semibold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                  ${entry.payload.value.toLocaleString()}\n                </span>\n                <span className={`text-xs ${isDarkMode ? 'text-gray-400' : 'text-gray-500'}`}>\n                  {percentage}%\n                </span>\n              </div>\n            </div>\n          );\n        })}\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"w-full h-full\">\n      <ResponsiveContainer width=\"100%\" height={300}>\n        <PieChart>\n          <Pie\n            data={pieChartData}\n            cx=\"50%\"\n            cy=\"50%\"\n            innerRadius={60}\n            outerRadius={90}\n            paddingAngle={2}\n            dataKey=\"value\"\n            animationBegin={0}\n            animationDuration={800}\n          >\n            {pieChartData.map((entry, index) => (\n              <Cell key={`cell-${index}`} fill={entry.color} />\n            ))}\n          </Pie>\n          <Tooltip content={<CustomTooltip />} />\n          <Legend content={<CustomLegend />} />\n        </PieChart>\n      </ResponsiveContainer>\n    </div>\n  );\n};\n\nconst RevenueChart = ({ data, isDarkMode }: { data: ChartDataPoint[], isDarkMode: boolean }) => {\n  const [hoveredPoint, setHoveredPoint] = useState<number | null>(null);\n  \n  const maxRevenue = Math.max(...data.map(d => d.revenue));\n  const minRevenue = Math.min(...data.map(d => d.revenue));\n  const revenueRange = maxRevenue - minRevenue;\n  \n  const chartHeight = 250;\n  const chartWidth = 100; // percentage\n  const padding = { top: 20, right: 20, bottom: 40, left: 60 };\n  \n  const getX = (index: number) => {\n    return (index / (data.length - 1)) * 100;\n  };\n  \n  const getY = (value: number) => {\n    const normalizedValue = ((value - minRevenue) / revenueRange) * 100;\n    return 100 - normalizedValue;\n  };\n  \n  const pathData = data.map((point, index) => {\n    const x = getX(index);\n    const y = getY(point.revenue);\n    return `${index === 0 ? 'M' : 'L'} ${x} ${y}`;\n  }).join(' ');\n  \n  const formatCurrency = (value: number) => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0\n    }).format(value);\n  };\n  \n  const formatDate = (dateStr: string) => {\n    const date = new Date(dateStr);\n    return date.toLocaleDateString('en-US', { month: 'short', day: 'numeric' });\n  };\n  \n  return (\n    <div className=\"w-full h-full\">\n      <div className=\"relative\" style={{ height: `${chartHeight}px` }}>\n        <svg\n          viewBox=\"0 0 100 100\"\n          preserveAspectRatio=\"none\"\n          className=\"w-full h-full\"\n        >\n          {/* Grid lines */}\n          {[0, 25, 50, 75, 100].map((y) => (\n            <line\n              key={y}\n              x1=\"0\"\n              y1={y}\n              x2=\"100\"\n              y2={y}\n              stroke={isDarkMode ? '#374151' : '#e5e7eb'}\n              strokeWidth=\"0.2\"\n              vectorEffect=\"non-scaling-stroke\"\n            />\n          ))}\n          \n          {/* Area fill */}\n          <path\n            d={`${pathData} L 100 100 L 0 100 Z`}\n            fill={isDarkMode ? 'rgba(59, 130, 246, 0.1)' : 'rgba(59, 130, 246, 0.1)'}\n          />\n          \n          {/* Line */}\n          <path\n            d={pathData}\n            fill=\"none\"\n            stroke={isDarkMode ? '#3b82f6' : '#2563eb'}\n            strokeWidth=\"0.5\"\n            vectorEffect=\"non-scaling-stroke\"\n            strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n          />\n          \n          {/* Data points */}\n          {data.map((point, index) => {\n            const x = getX(index);\n            const y = getY(point.revenue);\n            const isHovered = hoveredPoint === index;\n            \n            return (\n              <g key={index}>\n                <circle\n                  cx={x}\n                  cy={y}\n                  r={isHovered ? '1.5' : '0.8'}\n                  fill={isDarkMode ? '#3b82f6' : '#2563eb'}\n                  vectorEffect=\"non-scaling-stroke\"\n                  className=\"transition-all duration-200 cursor-pointer\"\n                  onMouseEnter={() => setHoveredPoint(index)}\n                  onMouseLeave={() => setHoveredPoint(null)}\n                />\n              </g>\n            );\n          })}\n        </svg>\n        \n        {/* Y-axis labels */}\n        <div className=\"absolute left-0 top-0 bottom-0 flex flex-col justify-between text-xs\" style={{ width: '50px' }}>\n          {[maxRevenue, maxRevenue * 0.75, maxRevenue * 0.5, maxRevenue * 0.25, minRevenue].map((value, index) => (\n            <span\n              key={index}\n              className={`${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}\n            >\n              {formatCurrency(value)}\n            </span>\n          ))}\n        </div>\n        \n        {/* Tooltips */}\n        {hoveredPoint !== null && (\n          <div\n            className={`absolute z-10 px-3 py-2 rounded-lg shadow-lg border transition-all duration-200 ${\n              isDarkMode ? 'bg-gray-700 border-gray-600 text-white' : 'bg-white border-gray-200 text-gray-900'\n            }`}\n            style={{\n              left: `${getX(hoveredPoint)}%`,\n              top: `${(getY(data[hoveredPoint].revenue) / 100) * chartHeight - 60}px`,\n              transform: 'translateX(-50%)'\n            }}\n          >\n            <div className=\"text-xs font-semibold mb-1\">\n              {formatDate(data[hoveredPoint].date)}\n            </div>\n            <div className=\"text-sm font-bold flex items-center gap-1\">\n              <TrendingUp className=\"h-3 w-3 text-green-500\" />\n              {formatCurrency(data[hoveredPoint].revenue)}\n            </div>\n            <div className={`text-xs mt-1 ${isDarkMode ? 'text-gray-400' : 'text-gray-500'}`}>\n              {data[hoveredPoint].orders} orders\n            </div>\n          </div>\n        )}\n      </div>\n      \n      {/* X-axis labels */}\n      <div className=\"flex justify-between mt-2 px-12\">\n        {data.map((point, index) => (\n          <span\n            key={index}\n            className={`text-xs ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}\n          >\n            {formatDate(point.date)}\n          </span>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nconst UserAreaChart = ({ data, isDarkMode }: { data: ChartDataPoint[], isDarkMode: boolean }) => {\n  const maxUsers = Math.max(...data.map(d => d.users));\n  const minUsers = Math.min(...data.map(d => d.users));\n  const padding = 40;\n  const chartHeight = 300;\n  const chartWidth = 600;\n  \n  const getX = (index: number) => {\n    return (index / (data.length - 1)) * (chartWidth - padding * 2) + padding;\n  };\n  \n  const getY = (value: number) => {\n    const range = maxUsers - minUsers;\n    const normalized = (value - minUsers) / range;\n    return chartHeight - padding - (normalized * (chartHeight - padding * 2));\n  };\n  \n  const pathData = data.map((point, index) => {\n    const x = getX(index);\n    const y = getY(point.users);\n    return `${index === 0 ? 'M' : 'L'} ${x} ${y}`;\n  }).join(' ');\n  \n  const areaPath = `${pathData} L ${getX(data.length - 1)} ${chartHeight - padding} L ${padding} ${chartHeight - padding} Z`;\n  \n  const gradientId = `userGradient-${isDarkMode ? 'dark' : 'light'}`;\n  \n  return (\n    <div className=\"w-full h-full\">\n      <div className=\"relative\" style={{ height: chartHeight }}>\n        <svg width=\"100%\" height={chartHeight} viewBox={`0 0 ${chartWidth} ${chartHeight}`} preserveAspectRatio=\"none\">\n          <defs>\n            <linearGradient id={gradientId} x1=\"0%\" y1=\"0%\" x2=\"0%\" y2=\"100%\">\n              <stop offset=\"0%\" stopColor={isDarkMode ? '#3b82f6' : '#60a5fa'} stopOpacity=\"0.8\" />\n              <stop offset=\"50%\" stopColor={isDarkMode ? '#3b82f6' : '#60a5fa'} stopOpacity=\"0.4\" />\n              <stop offset=\"100%\" stopColor={isDarkMode ? '#3b82f6' : '#60a5fa'} stopOpacity=\"0.1\" />\n            </linearGradient>\n          </defs>\n          \n          {/* Grid lines */}\n          {[0, 1, 2, 3, 4].map((i) => {\n            const y = padding + (i * (chartHeight - padding * 2) / 4);\n            return (\n              <line\n                key={i}\n                x1={padding}\n                y1={y}\n                x2={chartWidth - padding}\n                y2={y}\n                stroke={isDarkMode ? '#374151' : '#e5e7eb'}\n                strokeWidth=\"1\"\n                strokeDasharray=\"4 4\"\n              />\n            );\n          })}\n          \n          {/* Area path with animation */}\n          <motion.path\n            d={areaPath}\n            fill={`url(#${gradientId})`}\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            transition={{ duration: 0.8, ease: \"easeOut\" }}\n          />\n          \n          {/* Line path with animation */}\n          <motion.path\n            d={pathData}\n            fill=\"none\"\n            stroke={isDarkMode ? '#3b82f6' : '#2563eb'}\n            strokeWidth=\"3\"\n            strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n            initial={{ pathLength: 0 }}\n            animate={{ pathLength: 1 }}\n            transition={{ duration: 1.5, ease: \"easeInOut\" }}\n          />\n          \n          {/* Data points */}\n          {data.map((point, index) => {\n            const x = getX(index);\n            const y = getY(point.users);\n            return (\n              <motion.g\n                key={index}\n                initial={{ scale: 0, opacity: 0 }}\n                animate={{ scale: 1, opacity: 1 }}\n                transition={{ delay: 0.1 * index, duration: 0.3 }}\n              >\n                <circle\n                  cx={x}\n                  cy={y}\n                  r=\"5\"\n                  fill={isDarkMode ? '#1e293b' : '#ffffff'}\n                  stroke={isDarkMode ? '#3b82f6' : '#2563eb'}\n                  strokeWidth=\"2\"\n                  className=\"cursor-pointer hover:r-6 transition-all\"\n                />\n                <title>{`${point.date}: ${point.users} users`}</title>\n              </motion.g>\n            );\n          })}\n          \n          {/* Y-axis labels */}\n          {[0, 1, 2, 3, 4].map((i) => {\n            const value = maxUsers - (i * (maxUsers - minUsers) / 4);\n            const y = padding + (i * (chartHeight - padding * 2) / 4);\n            return (\n              <text\n                key={i}\n                x={padding - 10}\n                y={y + 5}\n                textAnchor=\"end\"\n                fontSize=\"12\"\n                fill={isDarkMode ? '#9ca3af' : '#6b7280'}\n              >\n                {Math.round(value)}\n              </text>\n            );\n          })}\n          \n          {/* X-axis labels */}\n          {data.map((point, index) => {\n            if (index % Math.ceil(data.length / 4) === 0 || index === data.length - 1) {\n              const x = getX(index);\n              const date = new Date(point.date);\n              const label = `${date.getMonth() + 1}/${date.getDate()}`;\n              return (\n                <text\n                  key={index}\n                  x={x}\n                  y={chartHeight - padding + 20}\n                  textAnchor=\"middle\"\n                  fontSize=\"12\"\n                  fill={isDarkMode ? '#9ca3af' : '#6b7280'}\n                >\n                  {label}\n                </text>\n              );\n            }\n            return null;\n          })}\n        </svg>\n      </div>\n    </div>\n  );\n};\n\nexport default function AnalyticsDashboard() {\n  const [sortColumn, setSortColumn] = useState<keyof TableRow>('revenue');\n  const [sortDirection, setSortDirection] = useState<'asc' | 'desc'>('desc');\n  const [currentPage, setCurrentPage] = useState(1);\n  const itemsPerPage = 3;\n  const [isDarkMode, setIsDarkMode] = useState(false);\n  const [metrics, setMetrics] = useState<MetricData[]>(mockMetrics);\n  const [chartData, setChartData] = useState<ChartDataPoint[]>(mockChartData);\n  const [tableData, setTableData] = useState<TableRow[]>(mockTableData);\n  const [isRefreshing, setIsRefreshing] = useState(false);\n\n  const toggleDarkMode = useCallback(() => {\n    setIsDarkMode(prev => !prev);\n  }, []);\n\n  const handleSort = useCallback((column: keyof TableRow) => {\n    if (sortColumn === column) {\n      setSortDirection(prev => prev === 'asc' ? 'desc' : 'asc');\n    } else {\n      setSortColumn(column);\n      setSortDirection('desc');\n    }\n    setCurrentPage(1);\n  }, [sortColumn]);\n\n  const sortedTableData = [...tableData].sort((a, b) => {\n    const aValue = a[sortColumn];\n    const bValue = b[sortColumn];\n    \n    if (typeof aValue === 'number' && typeof bValue === 'number') {\n      return sortDirection === 'asc' ? aValue - bValue : bValue - aValue;\n    }\n    \n    const aString = String(aValue);\n    const bString = String(bValue);\n    return sortDirection === 'asc' \n      ? aString.localeCompare(bString)\n      : bString.localeCompare(aString);\n  });\n\n  const totalPages = Math.ceil(sortedTableData.length / itemsPerPage);\n  const paginatedData = sortedTableData.slice(\n    (currentPage - 1) * itemsPerPage,\n    currentPage * itemsPerPage\n  );\n\n  const getStatusBadgeVariant = (status: TableRow['status']) => {\n    switch (status) {\n      case 'active':\n        return 'default';\n      case 'pending':\n        return 'secondary';\n      case 'inactive':\n        return 'outline';\n      default:\n        return 'default';\n    }\n  };\n\n  const handleRefresh = useCallback(() => {\n    setIsRefreshing(true);\n    \n    setTimeout(() => {\n      // Generate updated metrics with random variations\n      const updatedMetrics = mockMetrics.map(metric => ({\n        ...metric,\n        value: metric.value + Math.floor(Math.random() * 200 - 100),\n        change: parseFloat((Math.random() * 20 - 5).toFixed(1)),\n        trend: Math.random() > 0.5 ? 'up' as const : 'down' as const\n      }));\n\n      // Generate updated chart data with random variations\n      const updatedChartData = mockChartData.map(point => ({\n        ...point,\n        revenue: point.revenue + Math.floor(Math.random() * 4000 - 2000),\n        users: point.users + Math.floor(Math.random() * 100 - 50),\n        orders: point.orders + Math.floor(Math.random() * 50 - 25)\n      }));\n\n      // Generate updated table data with random variations\n      const updatedTableData = mockTableData.map(row => ({\n        ...row,\n        sales: row.sales + Math.floor(Math.random() * 40 - 20),\n        revenue: row.revenue + Math.floor(Math.random() * 2000 - 1000)\n      }));\n\n      setMetrics(updatedMetrics);\n      setChartData(updatedChartData);\n      setTableData(updatedTableData);\n      setIsRefreshing(false);\n    }, 1500);\n  }, []);\n\n  return (\n    <div className={`min-h-screen transition-colors duration-300 ${isDarkMode ? 'dark bg-gray-900' : 'bg-gray-50'}`}>\n      <div className=\"container mx-auto p-4 md:p-6 lg:p-8\">\n        <div className=\"flex flex-col md:flex-row justify-between items-start md:items-center gap-4 mb-8\">\n          <div>\n            <h1 className={`text-3xl md:text-4xl font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n              Analytics Dashboard\n            </h1>\n            <p className={`mt-2 ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n              Real-time insights and performance metrics\n            </p>\n          </div>\n          \n          <div className=\"flex gap-2\">\n            <Button\n              variant=\"outline\"\n              size=\"icon\"\n              onClick={toggleDarkMode}\n              className={isDarkMode ? 'border-gray-700' : ''}\n            >\n              {isDarkMode ? <Sun className=\"h-5 w-5\" /> : <Moon className=\"h-5 w-5\" />}\n            </Button>\n            \n            <Button\n              variant=\"outline\"\n              onClick={handleRefresh}\n              disabled={isRefreshing}\n              className={isDarkMode ? 'border-gray-700' : ''}\n            >\n              <RefreshCw className={`h-4 w-4 mr-2 ${isRefreshing ? 'animate-spin' : ''}`} />\n              Refresh\n            </Button>\n          </div>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 md:gap-6 mb-8\">\n          {metrics.map((metric, index) => {\n            const Icon = metric.label.includes('Revenue') ? DollarSign :\n                        metric.label.includes('Users') ? Users :\n                        metric.label.includes('Orders') ? ShoppingCart :\n                        Target;\n            \n            const TrendIcon = metric.trend === 'up' ? TrendingUp : TrendingDown;\n            \n            return (\n              <motion.div\n                key={metric.id}\n                initial={{ opacity: 0, y: 20 }}\n                animate={{ opacity: 1, y: 0 }}\n                transition={{ duration: 0.4, delay: index * 0.1 }}\n              >\n                <Card className={`${isDarkMode ? 'bg-gray-800 border-gray-700' : 'bg-white'} hover:shadow-lg transition-shadow duration-300`}>\n                  <CardHeader className=\"flex flex-row items-center justify-between pb-2\">\n                    <CardTitle className={`text-sm font-medium ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                      {metric.label}\n                    </CardTitle>\n                    <div className={`p-2 rounded-full ${isDarkMode ? 'bg-gray-700' : 'bg-gray-100'}`}>\n                      <Icon className={`h-4 w-4 ${isDarkMode ? 'text-gray-300' : 'text-gray-600'}`} />\n                    </div>\n                  </CardHeader>\n                  <CardContent>\n                    <div className={`text-2xl md:text-3xl font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                      {metric.label.includes('Revenue') ? `$${metric.value.toLocaleString()}` :\n                       metric.label.includes('Rate') ? `${metric.value}%` :\n                       metric.value.toLocaleString()}\n                    </div>\n                    <div className=\"flex items-center mt-2\">\n                      <TrendIcon className={`h-4 w-4 mr-1 ${metric.trend === 'up' ? 'text-green-500' : 'text-red-500'}`} />\n                      <span className={`text-sm font-medium ${metric.trend === 'up' ? 'text-green-500' : 'text-red-500'}`}>\n                        {metric.change > 0 ? '+' : ''}{metric.change}%\n                      </span>\n                      <span className={`text-sm ml-2 ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                        vs last period\n                      </span>\n                    </div>\n                  </CardContent>\n                </Card>\n              </motion.div>\n            );\n          })}</parameter>\n</invoke>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-4 md:gap-6 mb-8\">\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Revenue Overview</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Daily revenue trends\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <RevenueChart data={chartData} isDarkMode={isDarkMode} />\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>User Activity</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Active users over time\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <UserAreaChart data={chartData} isDarkMode={isDarkMode} />\n            </CardContent>\n          </Card>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-4 md:gap-6 mb-8\">\n          <Card className={`lg:col-span-2 ${isDarkMode ? 'bg-gray-800 border-gray-700' : ''}`}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Performance Metrics</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Combined view of key metrics\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <ResponsiveContainer width=\"100%\" height={300}>\n                <LineChart data={chartData}>\n                  <CartesianGrid strokeDasharray=\"3 3\" stroke={isDarkMode ? '#374151' : '#e5e7eb'} />\n                  <XAxis \n                    dataKey=\"date\" \n                    stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                    tick={{ fill: isDarkMode ? '#9ca3af' : '#6b7280' }}\n                  />\n                  <YAxis \n                    stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                    tick={{ fill: isDarkMode ? '#9ca3af' : '#6b7280' }}\n                  />\n                  <Tooltip \n                    contentStyle={{\n                      backgroundColor: isDarkMode ? '#1f2937' : '#ffffff',\n                      border: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\n                      borderRadius: '6px',\n                      color: isDarkMode ? '#ffffff' : '#000000'\n                    }}\n                  />\n                  <Legend \n                    wrapperStyle={{\n                      color: isDarkMode ? '#9ca3af' : '#6b7280'\n                    }}\n                  />\n                  <Line \n                    type=\"monotone\" \n                    dataKey=\"revenue\" \n                    stroke=\"#3b82f6\" \n                    strokeWidth={2}\n                    dot={{ fill: '#3b82f6', r: 4 }}\n                    activeDot={{ r: 6 }}\n                    name=\"Revenue ($)\"\n                  />\n                  <Line \n                    type=\"monotone\" \n                    dataKey=\"users\" \n                    stroke=\"#10b981\" \n                    strokeWidth={2}\n                    dot={{ fill: '#10b981', r: 4 }}\n                    activeDot={{ r: 6 }}\n                    name=\"Users\"\n                  />\n                  <Line \n                    type=\"monotone\" \n                    dataKey=\"orders\" \n                    stroke=\"#f59e0b\" \n                    strokeWidth={2}\n                    dot={{ fill: '#f59e0b', r: 4 }}\n                    activeDot={{ r: 6 }}\n                    name=\"Orders\"\n                  />\n                </LineChart>\n              </ResponsiveContainer>\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Distribution</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Sales by category\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <DonutChart isDarkMode={isDarkMode} />\n            </CardContent>\n          </Card>\n        </div>\n\n        <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n          <CardHeader>\n            <CardTitle className={isDarkMode ? 'text-white' : ''}>Top Products</CardTitle>\n            <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n              Best performing products by revenue\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              <div className=\"rounded-md border\">\n                <Table>\n                  <TableHeader>\n                    <TableRow className={isDarkMode ? 'border-gray-700' : ''}>\n                      <TableHead className={isDarkMode ? 'text-gray-300' : ''}>\n                        <Button\n                          variant=\"ghost\"\n                          onClick={() => handleSort('product')}\n                          className=\"h-8 px-2 lg:px-3\"\n                        >\n                          Product\n                          <ArrowUpDown className=\"ml-2 h-4 w-4\" />\n                        </Button>\n                      </TableHead>\n                      <TableHead className={isDarkMode ? 'text-gray-300' : ''}>\n                        <Button\n                          variant=\"ghost\"\n                          onClick={() => handleSort('sales')}\n                          className=\"h-8 px-2 lg:px-3\"\n                        >\n                          Sales\n                          <ArrowUpDown className=\"ml-2 h-4 w-4\" />\n                        </Button>\n                      </TableHead>\n                      <TableHead className={isDarkMode ? 'text-gray-300' : ''}>\n                        <Button\n                          variant=\"ghost\"\n                          onClick={() => handleSort('revenue')}\n                          className=\"h-8 px-2 lg:px-3\"\n                        >\n                          Revenue\n                          <ArrowUpDown className=\"ml-2 h-4 w-4\" />\n                        </Button>\n                      </TableHead>\n                      <TableHead className={isDarkMode ? 'text-gray-300' : ''}>\n                        <Button\n                          variant=\"ghost\"\n                          onClick={() => handleSort('status')}\n                          className=\"h-8 px-2 lg:px-3\"\n                        >\n                          Status\n                          <ArrowUpDown className=\"ml-2 h-4 w-4\" />\n                        </Button>\n                      </TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {paginatedData.map((row) => (\n                      <TableRow \n                        key={row.id}\n                        className={isDarkMode ? 'border-gray-700 hover:bg-gray-700/50' : ''}\n                      >\n                        <TableCell className={`font-medium ${isDarkMode ? 'text-gray-200' : ''}`}>\n                          {row.product}\n                        </TableCell>\n                        <TableCell className={isDarkMode ? 'text-gray-300' : ''}>\n                          {row.sales.toLocaleString()}\n                        </TableCell>\n                        <TableCell className={isDarkMode ? 'text-gray-300' : ''}>\n                          ${row.revenue.toLocaleString()}\n                        </TableCell>\n                        <TableCell>\n                          <Badge \n                            variant={getStatusBadgeVariant(row.status)}\n                            className=\"capitalize\"\n                          >\n                            {row.status}\n                          </Badge>\n                        </TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              </div>\n\n              <div className=\"flex items-center justify-between\">\n                <p className={`text-sm ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                  Showing {((currentPage - 1) * itemsPerPage) + 1} to {Math.min(currentPage * itemsPerPage, sortedTableData.length)} of {sortedTableData.length} products\n                </p>\n                \n                <div className=\"flex items-center gap-2\">\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => setCurrentPage(prev => Math.max(1, prev - 1))}\n                    disabled={currentPage === 1}\n                    className={isDarkMode ? 'border-gray-700' : ''}\n                  >\n                    <ChevronLeft className=\"h-4 w-4\" />\n                    Previous\n                  </Button>\n                  \n                  <div className={`text-sm ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>\n                    Page {currentPage} of {totalPages}\n                  </div>\n                  \n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => setCurrentPage(prev => Math.min(totalPages, prev + 1))}\n                    disabled={currentPage === totalPages}\n                    className={isDarkMode ? 'border-gray-700' : ''}\n                  >\n                    Next\n                    <ChevronRight className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 md:gap-6 mt-8\">\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Recent Activity</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Latest system events\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4 max-h-[400px] overflow-y-auto pr-2\">\n                {mockActivityData.map((activity) => {\n                  const getIcon = () => {\n                    switch (activity.icon) {\n                      case 'check':\n                        return <CheckCircle className=\"h-5 w-5\" />;\n                      case 'alert':\n                        return <AlertCircle className=\"h-5 w-5\" />;\n                      case 'user':\n                        return <UserPlus className=\"h-5 w-5\" />;\n                      case 'package':\n                        return <Package className=\"h-5 w-5\" />;\n                      case 'dollar':\n                        return <DollarSign className=\"h-5 w-5\" />;\n                      case 'cart':\n                        return <ShoppingCart className=\"h-5 w-5\" />;\n                      default:\n                        return <CheckCircle className=\"h-5 w-5\" />;\n                    }\n                  };\n\n                  const getColorClasses = () => {\n                    switch (activity.type) {\n                      case 'success':\n                        return isDarkMode \n                          ? 'bg-green-900/30 text-green-400 border-green-800' \n                          : 'bg-green-50 text-green-600 border-green-200';\n                      case 'warning':\n                        return isDarkMode \n                          ? 'bg-yellow-900/30 text-yellow-400 border-yellow-800' \n                          : 'bg-yellow-50 text-yellow-600 border-yellow-200';\n                      case 'error':\n                        return isDarkMode \n                          ? 'bg-red-900/30 text-red-400 border-red-800' \n                          : 'bg-red-50 text-red-600 border-red-200';\n                      case 'info':\n                      default:\n                        return isDarkMode \n                          ? 'bg-blue-900/30 text-blue-400 border-blue-800' \n                          : 'bg-blue-50 text-blue-600 border-blue-200';\n                    }\n                  };\n\n                  return (\n                    <div\n                      key={activity.id}\n                      className={`flex items-start gap-3 p-3 rounded-lg border transition-colors ${\n                        isDarkMode ? 'hover:bg-gray-700/50' : 'hover:bg-gray-50'\n                      }`}\n                    >\n                      <div className={`p-2 rounded-full border ${getColorClasses()}`}>\n                        {getIcon()}\n                      </div>\n                      <div className=\"flex-1 min-w-0\">\n                        <p className={`text-sm font-medium ${isDarkMode ? 'text-gray-200' : 'text-gray-900'}`}>\n                          {activity.message}\n                        </p>\n                        <p className={`text-xs mt-1 ${isDarkMode ? 'text-gray-500' : 'text-gray-500'}`}>\n                          {activity.timestamp}\n                        </p>\n                      </div>\n                    </div>\n                  );\n                })}\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Quick Stats</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Summary statistics\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                <motion.div\n                  initial={{ opacity: 0, y: 20 }}\n                  animate={{ opacity: 1, y: 0 }}\n                  transition={{ duration: 0.3 }}\n                  className=\"grid grid-cols-1 gap-4\"\n                >\n                  <div className={`p-4 rounded-lg border ${isDarkMode ? 'bg-gray-700/50 border-gray-600' : 'bg-white border-gray-200'}`}>\n                    <div className=\"flex items-center justify-between mb-2\">\n                      <span className={`text-sm font-medium ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>\n                        Goal Completion\n                      </span>\n                      <span className={`text-sm font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                        78%\n                      </span>\n                    </div>\n                    <Progress value={78} className=\"h-2\" />\n                  </div>\n\n                  <div className={`p-4 rounded-lg border ${isDarkMode ? 'bg-gray-700/50 border-gray-600' : 'bg-white border-gray-200'}`}>\n                    <div className=\"flex items-center justify-between mb-2\">\n                      <span className={`text-sm font-medium ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>\n                        Customer Satisfaction\n                      </span>\n                      <span className={`text-sm font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                        92%\n                      </span>\n                    </div>\n                    <Progress value={92} className=\"h-2\" />\n                  </div>\n\n                  <div className={`p-4 rounded-lg border ${isDarkMode ? 'bg-gray-700/50 border-gray-600' : 'bg-white border-gray-200'}`}>\n                    <div className=\"flex items-center justify-between mb-2\">\n                      <span className={`text-sm font-medium ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>\n                        System Performance\n                      </span>\n                      <span className={`text-sm font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                        85%\n                      </span>\n                    </div>\n                    <Progress value={85} className=\"h-2\" />\n                  </div>\n\n                  <div className={`p-4 rounded-lg border ${isDarkMode ? 'bg-gray-700/50 border-gray-600' : 'bg-white border-gray-200'}`}>\n                    <div className=\"flex items-center justify-between mb-2\">\n                      <span className={`text-sm font-medium ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>\n                        Team Productivity\n                      </span>\n                      <span className={`text-sm font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                        67%\n                      </span>\n                    </div>\n                    <Progress value={67} className=\"h-2\" />\n                  </div>\n\n                  <div className={`p-4 rounded-lg border ${isDarkMode ? 'bg-gray-700/50 border-gray-600' : 'bg-white border-gray-200'}`}>\n                    <div className=\"flex items-center justify-between mb-2\">\n                      <span className={`text-sm font-medium ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>\n                        Revenue Target\n                      </span>\n                      <span className={`text-sm font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                        94%\n                      </span>\n                    </div>\n                    <Progress value={94} className=\"h-2\" />\n                  </div>\n\n                  <div className={`p-4 rounded-lg border ${isDarkMode ? 'bg-gray-700/50 border-gray-600' : 'bg-white border-gray-200'}`}>\n                    <div className=\"flex items-center justify-between mb-2\">\n                      <span className={`text-sm font-medium ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>\n                        User Retention\n                      </span>\n                      <span className={`text-sm font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                        88%\n                      </span>\n                    </div>\n                    <Progress value={88} className=\"h-2\" />\n                  </div>\n                </motion.div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}",
    "error": null,
    "elapsed_time": 69.34117984771729,
    "success": true
  }
}