{
  "prompt_id": "dashboard",
  "prompt_name": "Analytics Dashboard",
  "mode": "parallel",
  "run_number": 10,
  "timestamp": "2025-10-14T08:04:03.226517",
  "response_time": 79.34758281707764,
  "total_tokens": null,
  "response_content": "import { useState, useCallback } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Moon, Sun, RefreshCw } from 'lucide-react';\nimport { Activity, Clock, Zap } from 'lucide-react';\nimport { Badge } from '@/components/ui/badge';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\nimport { ChevronUp, ChevronDown, ChevronsUpDown } from 'lucide-react';\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\nimport { PieChart, Pie, Cell, ResponsiveContainer, Legend, Tooltip } from 'recharts';\nimport { motion } from 'framer-motion';\nimport { TrendingUp } from 'lucide-react';\nimport { TrendingUp, TrendingDown, DollarSign, Users, ShoppingCart, Target } from 'lucide-react';\n\ninterface MetricData {\n  id: string;\n  label: string;\n  value: number;\n  change: number;\n  trend: 'up' | 'down';\n}\n\ninterface ChartDataPoint {\n  date: string;\n  revenue: number;\n  users: number;\n  orders: number;\n}\n\ninterface TableRow {\n  id: string;\n  product: string;\n  sales: number;\n  revenue: number;\n  status: 'active' | 'pending' | 'inactive';\n}\n\nconst mockMetrics: MetricData[] = [\n  { id: '1', label: 'Total Revenue', value: 45231, change: 12.5, trend: 'up' },\n  { id: '2', label: 'Active Users', value: 2350, change: 8.2, trend: 'up' },\n  { id: '3', label: 'Total Orders', value: 1543, change: -3.1, trend: 'down' },\n  { id: '4', label: 'Conversion Rate', value: 3.24, change: 5.7, trend: 'up' }\n];\n\nconst mockChartData: ChartDataPoint[] = [\n  { date: '2024-01-01', revenue: 12000, users: 450, orders: 230 },\n  { date: '2024-01-02', revenue: 15000, users: 520, orders: 280 },\n  { date: '2024-01-03', revenue: 13500, users: 490, orders: 250 },\n  { date: '2024-01-04', revenue: 18000, users: 610, orders: 320 },\n  { date: '2024-01-05', revenue: 16500, users: 580, orders: 295 },\n  { date: '2024-01-06', revenue: 20000, users: 680, orders: 350 },\n  { date: '2024-01-07', revenue: 22000, users: 720, orders: 380 }\n];\n\nconst mockTableData: TableRow[] = [\n  { id: '1', product: 'Premium Plan', sales: 234, revenue: 23400, status: 'active' },\n  { id: '2', product: 'Basic Plan', sales: 567, revenue: 11340, status: 'active' },\n  { id: '3', product: 'Enterprise Plan', sales: 89, revenue: 17800, status: 'active' },\n  { id: '4', product: 'Starter Plan', sales: 432, revenue: 4320, status: 'pending' },\n  { id: '5', product: 'Pro Plan', sales: 156, revenue: 15600, status: 'active' }\n];\n\nconst RevenueChart = ({ data, isDarkMode }: { data: ChartDataPoint[], isDarkMode: boolean }) => {\n  const [hoveredPoint, setHoveredPoint] = useState<number | null>(null);\n  \n  const maxRevenue = Math.max(...data.map(d => d.revenue));\n  const minRevenue = Math.min(...data.map(d => d.revenue));\n  const revenueRange = maxRevenue - minRevenue;\n  \n  const chartHeight = 250;\n  const chartWidth = 100; // percentage\n  const padding = { top: 20, right: 20, bottom: 40, left: 60 };\n  \n  const getX = (index: number) => {\n    return (index / (data.length - 1)) * 100;\n  };\n  \n  const getY = (value: number) => {\n    const normalizedValue = ((value - minRevenue) / revenueRange) * 100;\n    return 100 - normalizedValue;\n  };\n  \n  const pathData = data.map((point, index) => {\n    const x = getX(index);\n    const y = getY(point.revenue);\n    return `${index === 0 ? 'M' : 'L'} ${x} ${y}`;\n  }).join(' ');\n  \n  const formatCurrency = (value: number) => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0\n    }).format(value);\n  };\n  \n  const formatDate = (dateString: string) => {\n    const date = new Date(dateString);\n    return date.toLocaleDateString('en-US', { month: 'short', day: 'numeric' });\n  };\n  \n  return (\n    <div className=\"relative w-full\" style={{ height: `${chartHeight}px` }}>\n      <svg\n        viewBox=\"0 0 100 100\"\n        preserveAspectRatio=\"none\"\n        className=\"w-full h-full\"\n      >\n        {/* Grid lines */}\n        {[0, 25, 50, 75, 100].map((y) => (\n          <line\n            key={y}\n            x1=\"0\"\n            y1={y}\n            x2=\"100\"\n            y2={y}\n            stroke={isDarkMode ? '#374151' : '#e5e7eb'}\n            strokeWidth=\"0.2\"\n            vectorEffect=\"non-scaling-stroke\"\n          />\n        ))}\n        \n        {/* Area fill */}\n        <path\n          d={`${pathData} L 100 100 L 0 100 Z`}\n          fill={isDarkMode ? 'rgba(59, 130, 246, 0.1)' : 'rgba(59, 130, 246, 0.1)'}\n        />\n        \n        {/* Line */}\n        <path\n          d={pathData}\n          fill=\"none\"\n          stroke={isDarkMode ? '#3b82f6' : '#2563eb'}\n          strokeWidth=\"0.5\"\n          vectorEffect=\"non-scaling-stroke\"\n          strokeLinecap=\"round\"\n          strokeLinejoin=\"round\"\n        />\n      </svg>\n      \n      {/* Data points and tooltips */}\n      <div className=\"absolute inset-0\">\n        {data.map((point, index) => {\n          const x = getX(index);\n          const y = getY(point.revenue);\n          \n          return (\n            <div\n              key={index}\n              className=\"absolute\"\n              style={{\n                left: `${x}%`,\n                top: `${y}%`,\n                transform: 'translate(-50%, -50%)'\n              }}\n              onMouseEnter={() => setHoveredPoint(index)}\n              onMouseLeave={() => setHoveredPoint(null)}\n            >\n              <div\n                className={`w-3 h-3 rounded-full border-2 transition-all cursor-pointer ${\n                  isDarkMode\n                    ? 'bg-gray-800 border-blue-500'\n                    : 'bg-white border-blue-600'\n                } ${hoveredPoint === index ? 'scale-150' : 'scale-100'}`}\n              />\n              \n              {hoveredPoint === index && (\n                <div\n                  className={`absolute z-10 px-3 py-2 rounded-lg shadow-lg whitespace-nowrap transition-opacity ${\n                    isDarkMode\n                      ? 'bg-gray-700 border border-gray-600'\n                      : 'bg-white border border-gray-200'\n                  }`}\n                  style={{\n                    bottom: '100%',\n                    left: '50%',\n                    transform: 'translateX(-50%)',\n                    marginBottom: '8px'\n                  }}\n                >\n                  <div className={`text-xs font-medium ${isDarkMode ? 'text-gray-300' : 'text-gray-600'}`}>\n                    {formatDate(point.date)}\n                  </div>\n                  <div className={`text-sm font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                    {formatCurrency(point.revenue)}\n                  </div>\n                  <div className={`text-xs ${isDarkMode ? 'text-gray-400' : 'text-gray-500'}`}>\n                    {point.users} users \u2022 {point.orders} orders\n                  </div>\n                  <div\n                    className={`absolute w-2 h-2 rotate-45 ${\n                      isDarkMode ? 'bg-gray-700 border-r border-b border-gray-600' : 'bg-white border-r border-b border-gray-200'\n                    }`}\n                    style={{\n                      top: '100%',\n                      left: '50%',\n                      transform: 'translateX(-50%) translateY(-50%)'\n                    }}\n                  />\n                </div>\n              )}\n            </div>\n          );\n        })}\n      </div>\n      \n      {/* Y-axis labels */}\n      <div className=\"absolute left-0 top-0 bottom-0 flex flex-col justify-between pr-2\" style={{ width: '50px' }}>\n        {[maxRevenue, maxRevenue * 0.75, maxRevenue * 0.5, maxRevenue * 0.25, minRevenue].map((value, index) => (\n          <div\n            key={index}\n            className={`text-xs ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}\n            style={{ transform: 'translateY(-50%)' }}\n          >\n            {formatCurrency(value)}\n          </div>\n        ))}\n      </div>\n      \n      {/* X-axis labels */}\n      <div className=\"absolute bottom-0 left-0 right-0 flex justify-between pt-2\" style={{ height: '30px' }}>\n        {data.map((point, index) => (\n          <div\n            key={index}\n            className={`text-xs ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}\n            style={{ transform: 'translateX(-50%)' }}\n          >\n            {index % 2 === 0 ? formatDate(point.date) : ''}\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nconst COLORS = ['#3b82f6', '#10b981', '#f59e0b', '#ef4444', '#8b5cf6'];\n\nconst CustomPieLabel = ({ cx, cy, midAngle, innerRadius, outerRadius, percent }: any) => {\n  const RADIAN = Math.PI / 180;\n  const radius = innerRadius + (outerRadius - innerRadius) * 0.5;\n  const x = cx + radius * Math.cos(-midAngle * RADIAN);\n  const y = cy + radius * Math.sin(-midAngle * RADIAN);\n\n  if (percent < 0.05) return null;\n\n  return (\n    <text\n      x={x}\n      y={y}\n      fill=\"white\"\n      textAnchor={x > cx ? 'start' : 'end'}\n      dominantBaseline=\"central\"\n      className=\"text-xs font-semibold\"\n    >\n      {`${(percent * 100).toFixed(0)}%`}\n    </text>\n  );\n};\n\ntype SortField = 'product' | 'sales' | 'revenue' | 'status';\ntype SortDirection = 'asc' | 'desc' | null;\n\nconst ITEMS_PER_PAGE = 5;\n\nexport default function AnalyticsDashboard() {\n  const [isDarkMode, setIsDarkMode] = useState(false);\n  const [metrics, setMetrics] = useState<MetricData[]>(mockMetrics);\n  const [chartData, setChartData] = useState<ChartDataPoint[]>(mockChartData);\n  const [tableData, setTableData] = useState<TableRow[]>(mockTableData);\n  const [isRefreshing, setIsRefreshing] = useState(false);\n  const [sortField, setSortField] = useState<SortField | null>(null);\n  const [sortDirection, setSortDirection] = useState<SortDirection>(null);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [lastUpdate, setLastUpdate] = useState(new Date());\n  const [realtimeStats, setRealtimeStats] = useState({\n    activeConnections: 1247,\n    dataPoints: 45231,\n    updateFrequency: 2.5\n  });\n\n  const toggleDarkMode = useCallback(() => {\n    setIsDarkMode(prev => !prev);\n  }, []);\n\n  const handleSort = useCallback((field: SortField) => {\n    if (sortField === field) {\n      if (sortDirection === 'asc') {\n        setSortDirection('desc');\n      } else if (sortDirection === 'desc') {\n        setSortDirection(null);\n        setSortField(null);\n      }\n    } else {\n      setSortField(field);\n      setSortDirection('asc');\n    }\n    setCurrentPage(1);\n  }, [sortField, sortDirection]);\n\n  const getSortedData = useCallback(() => {\n    if (!sortField || !sortDirection) return tableData;\n\n    return [...tableData].sort((a, b) => {\n      let aValue = a[sortField];\n      let bValue = b[sortField];\n\n      if (typeof aValue === 'string') aValue = aValue.toLowerCase();\n      if (typeof bValue === 'string') bValue = bValue.toLowerCase();\n\n      if (aValue < bValue) return sortDirection === 'asc' ? -1 : 1;\n      if (aValue > bValue) return sortDirection === 'asc' ? 1 : -1;\n      return 0;\n    });\n  }, [tableData, sortField, sortDirection]);\n\n  const paginatedData = useCallback(() => {\n    const sorted = getSortedData();\n    const startIndex = (currentPage - 1) * ITEMS_PER_PAGE;\n    const endIndex = startIndex + ITEMS_PER_PAGE;\n    return sorted.slice(startIndex, endIndex);\n  }, [getSortedData, currentPage]);\n\n  const totalPages = Math.ceil(tableData.length / ITEMS_PER_PAGE);\n\n  const getSortIcon = (field: SortField) => {\n    if (sortField !== field) {\n      return <ChevronsUpDown className=\"h-4 w-4 ml-1 opacity-50\" />;\n    }\n    if (sortDirection === 'asc') {\n      return <ChevronUp className=\"h-4 w-4 ml-1\" />;\n    }\n    return <ChevronDown className=\"h-4 w-4 ml-1\" />;\n  };\n\n  const getStatusBadge = (status: TableRow['status']) => {\n    const variants = {\n      active: 'default',\n      pending: 'secondary',\n      inactive: 'outline'\n    } as const;\n\n    const colors = {\n      active: isDarkMode ? 'bg-green-900 text-green-300 border-green-700' : 'bg-green-100 text-green-800 border-green-300',\n      pending: isDarkMode ? 'bg-yellow-900 text-yellow-300 border-yellow-700' : 'bg-yellow-100 text-yellow-800 border-yellow-300',\n      inactive: isDarkMode ? 'bg-gray-700 text-gray-300 border-gray-600' : 'bg-gray-100 text-gray-800 border-gray-300'\n    };\n\n    return (\n      <Badge variant={variants[status]} className={colors[status]}>\n        {status.charAt(0).toUpperCase() + status.slice(1)}\n      </Badge>\n    );\n  };\n\n  const handleRefresh = useCallback(() => {\n    setIsRefreshing(true);\n    \n    setTimeout(() => {\n      // Simulate data refresh\n      setMetrics(mockMetrics.map(m => ({\n        ...m,\n        value: m.value + Math.random() * 100 - 50,\n        change: Math.random() * 20 - 10\n      })));\n      setIsRefreshing(false);\n    }, 1000);tIsRefreshing(true);\n    \n    setTimeout(() => {\n      // Generate updated metrics with random variations\n      const updatedMetrics = mockMetrics.map(metric => ({\n        ...metric,\n        value: metric.value + Math.floor(Math.random() * 200 - 100),\n        change: parseFloat((Math.random() * 20 - 5).toFixed(1)),\n        trend: Math.random() > 0.5 ? 'up' as const : 'down' as const\n      }));\n\n      // Update realtime stats\n      setRealtimeStats({\n        activeConnections: 1247 + Math.floor(Math.random() * 100 - 50),\n        dataPoints: 45231 + Math.floor(Math.random() * 1000 - 500),\n        updateFrequency: parseFloat((2 + Math.random() * 2).toFixed(1))\n      });\n\n      // Generate updated chart data with random variations\n      const updatedChartDat\n      }));\n\n      // Generate updated chart data with random variations\n      const updatedChartData = mockChartData.map(point => ({\n        ...point,\n        revenue: point.revenue + Math.floor(Math.random() * 4000 - 2000),\n        users: point.users + Math.floor(Math.random() * 100 - 50),\n        orders: point.orders + Math.floor(Math.random() * 50 - 25)\n      }));\n\n      // Generate updated table data with random variations\n      const updatedTableData = mockTableData.map(row => ({\n        ...row,\n        sales: row.sales + Math.floor(Math.random() * 40 - 20),\n        revenue: row.revenue + Math.floor(Math.random() * 2000 - 1000),\n        status: ['active', 'pending', 'inactive'][Math.floor(Math.random() * 3)] as 'active' | 'pending' | 'inactive'\n      }));\n\n      setMetrics(updatedMetrics);\n      setChartData(updatedChartData);\n      setTableData(updatedTableData);\n      setIsRefreshing(false);\n      setLastUpdate(new Date());\n    }, 1500);\n  }, []);\n\n  return (\n    <div className={`min-h-screen ${isDarkMode ? 'dark bg-gray-900' : 'bg-gray-50'}`}>\n      <div className=\"container mx-auto p-4 md:p-6 lg:p-8\">\n        <div className=\"flex flex-col md:flex-row justify-between items-start md:items-center gap-4 mb-8\">\n          <div>\n            <h1 className={`text-3xl md:text-4xl font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n              Analytics Dashboard\n            </h1>\n            <p className={`mt-2 ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n              Real-time insights and performance metrics\n            </p>\n          </div>\n          \n          <div className=\"flex gap-2\">\n            <Button\n              variant=\"outline\"\n              size=\"icon\"\n              onClick={toggleDarkMode}\n              className={isDarkMode ? 'border-gray-700' : ''}\n            >\n              {isDarkMode ? <Sun className=\"h-5 w-5\" /> : <Moon className=\"h-5 w-5\" />}\n            </Button>\n            \n            <Button\n              variant=\"outline\"\n              onClick={handleRefresh}\n              disabled={isRefreshing}\n              className={isDarkMode ? 'border-gray-700' : ''}\n            >\n              <RefreshCw className={`h-4 w-4 mr-2 ${isRefreshing ? 'animate-spin' : ''}`} />\n              Refresh\n            </Button>\n          </div>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 md:gap-6 mb-8\">\n          {metrics.map((metric, index) => {\n            const Icon = \n              metric.label === 'Total Revenue' ? DollarSign :\n              metric.label === 'Active Users' ? Users :\n              metric.label === 'Total Orders' ? ShoppingCart :\n              Target;\n            \n            const TrendIcon = metric.trend === 'up' ? TrendingUp : TrendingDown;\n            const trendColor = metric.trend === 'up' ? 'text-green-500' : 'text-red-500';\n            const trendBgColor = metric.trend === 'up' \n              ? (isDarkMode ? 'bg-green-500/10' : 'bg-green-50') \n              : (isDarkMode ? 'bg-red-500/10' : 'bg-red-50');\n\n            return (\n              <Card \n                key={metric.id}\n                className={`transition-all duration-300 hover:shadow-lg hover:-translate-y-1 ${\n                  isDarkMode ? 'bg-gray-800 border-gray-700' : 'bg-white'\n                }`}\n                style={{\n                  animationDelay: `${index * 100}ms`,\n                  animation: 'fadeInUp 0.5s ease-out forwards',\n                  opacity: 0\n                }}\n              >\n                <CardHeader className=\"flex flex-row items-center justify-between pb-2\">\n                  <CardTitle className={`text-sm font-medium ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                    {metric.label}\n                  </CardTitle>\n                  <div className={`p-2 rounded-lg ${isDarkMode ? 'bg-gray-700' : 'bg-gray-100'}`}>\n                    <Icon className={`h-4 w-4 ${isDarkMode ? 'text-gray-300' : 'text-gray-600'}`} />\n                  </div>\n                </CardHeader>\n                <CardContent>\n                  <div className={`text-2xl font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                    {metric.label.includes('Revenue') || metric.label.includes('Rate') \n                      ? metric.label.includes('Rate') \n                        ? `${metric.value}%`\n                        : `$${metric.value.toLocaleString()}`\n                      : metric.value.toLocaleString()\n                    }\n                  </div>\n                  <div className=\"flex items-center gap-1 mt-2\">\n                    <div className={`flex items-center gap-1 px-2 py-1 rounded-full ${trendBgColor}`}>\n                      <TrendIcon className={`h-3 w-3 ${trendColor}`} />\n                      <span className={`text-xs font-medium ${trendColor}`}>\n                        {Math.abs(metric.change)}%\n                      </span>\n                    </div>\n                    <span className={`text-xs ${isDarkMode ? 'text-gray-500' : 'text-gray-500'}`}>\n                      vs last period\n                    </span>\n                  </div>\n                </CardContent>\n              </Card>\n            );\n          })}\n          <style jsx>{`\n            @keyframes fadeInUp {\n              from {\n                opacity: 0;\n                transform: translateY(20px);\n              }\n              to {\n                opacity: 1;\n                transform: translateY(0);\n              }\n            }\n          `}</style>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-4 md:gap-6 mb-8\">\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Revenue Overview</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Daily revenue trends\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <RevenueChart data={chartData} isDarkMode={isDarkMode} />\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>User Growth</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Active users over time\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"h-[300px] w-full\">\n                <svg width=\"100%\" height=\"100%\" viewBox=\"0 0 700 300\" preserveAspectRatio=\"none\">\n                  <defs>\n                    <linearGradient id=\"userGradient\" x1=\"0\" x2=\"0\" y1=\"0\" y2=\"1\">\n                      <stop offset=\"0%\" stopColor={isDarkMode ? '#3b82f6' : '#60a5fa'} stopOpacity=\"0.8\" />\n                      <stop offset=\"100%\" stopColor={isDarkMode ? '#3b82f6' : '#60a5fa'} stopOpacity=\"0.1\" />\n                    </linearGradient>\n                  </defs>\n                  \n                  {/* Grid lines */}\n                  {[0, 1, 2, 3, 4].map((i) => (\n                    <line\n                      key={i}\n                      x1=\"0\"\n                      y1={i * 75}\n                      x2=\"700\"\n                      y2={i * 75}\n                      stroke={isDarkMode ? '#374151' : '#e5e7eb'}\n                      strokeWidth=\"1\"\n                    />\n                  ))}\n                  \n                  {/* Area chart */}\n                  <motion.path\n                    initial={{ opacity: 0, pathLength: 0 }}\n                    animate={{ opacity: 1, pathLength: 1 }}\n                    transition={{ duration: 1.5, ease: \"easeInOut\" }}\n                    d={(() => {\n                      const maxUsers = Math.max(...chartData.map(d => d.users));\n                      const points = chartData.map((d, i) => {\n                        const x = (i / (chartData.length - 1)) * 700;\n                        const y = 300 - (d.users / maxUsers) * 250;\n                        return `${x},${y}`;\n                      });\n                      return `M 0,300 L ${points.join(' L ')} L 700,300 Z`;\n                    })()}\n                    fill=\"url(#userGradient)\"\n                  />\n                  \n                  {/* Line stroke */}\n                  <motion.path\n                    initial={{ pathLength: 0 }}\n                    animate={{ pathLength: 1 }}\n                    transition={{ duration: 1.5, ease: \"easeInOut\" }}\n                    d={(() => {\n                      const maxUsers = Math.max(...chartData.map(d => d.users));\n                      const points = chartData.map((d, i) => {\n                        const x = (i / (chartData.length - 1)) * 700;\n                        const y = 300 - (d.users / maxUsers) * 250;\n                        return `${x},${y}`;\n                      });\n                      return `M ${points.join(' L ')}`;\n                    })()}\n                    fill=\"none\"\n                    stroke={isDarkMode ? '#3b82f6' : '#2563eb'}\n                    strokeWidth=\"3\"\n                    strokeLinecap=\"round\"\n                    strokeLinejoin=\"round\"\n                  />\n                  \n                  {/* Data points */}\n                  {chartData.map((d, i) => {\n                    const maxUsers = Math.max(...chartData.map(d => d.users));\n                    const x = (i / (chartData.length - 1)) * 700;\n                    const y = 300 - (d.users / maxUsers) * 250;\n                    return (\n                      <motion.g\n                        key={d.date}\n                        initial={{ opacity: 0, scale: 0 }}\n                        animate={{ opacity: 1, scale: 1 }}\n                        transition={{ duration: 0.3, delay: i * 0.1 + 0.5 }}\n                      >\n                        <circle\n                          cx={x}\n                          cy={y}\n                          r=\"6\"\n                          fill={isDarkMode ? '#1e293b' : '#ffffff'}\n                          stroke={isDarkMode ? '#3b82f6' : '#2563eb'}\n                          strokeWidth=\"3\"\n                          className=\"cursor-pointer hover:r-8 transition-all\"\n                        />\n                        <title>{`${new Date(d.date).toLocaleDateString()}: ${d.users} users`}</title>\n                      </motion.g>\n                    );\n                  })}\n                </svg>\n                \n                {/* X-axis labels */}\n                <div className=\"flex justify-between mt-2 px-1\">\n                  {chartData.map((d, i) => (\n                    <span\n                      key={d.date}\n                      className={`text-xs ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}\n                    >\n                      {new Date(d.date).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n                    </span>\n                  ))}\n                </div>\n                \n                {/* Summary stats */}\n                <div className=\"flex justify-between mt-4 pt-4 border-t border-gray-200 dark:border-gray-700\">\n                  <div>\n                    <p className={`text-xs ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>Peak Users</p>\n                    <p className={`text-lg font-semibold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                      {Math.max(...chartData.map(d => d.users)).toLocaleString()}\n                    </p>\n                  </div>\n                  <div>\n                    <p className={`text-xs ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>Average</p>\n                    <p className={`text-lg font-semibold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                      {Math.round(chartData.reduce((sum, d) => sum + d.users, 0) / chartData.length).toLocaleString()}\n                    </p>\n                  </div>\n                  <div>\n                    <p className={`text-xs ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>Growth</p>\n                    <p className=\"text-lg font-semibold text-green-500\">\n                      +{Math.round(((chartData[chartData.length - 1].users - chartData[0].users) / chartData[0].users) * 100)}%\n                    </p>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-4 md:gap-6 mb-8\">\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Orders Distribution</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                By product category\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <ResponsiveContainer width=\"100%\" height={300}>\n                <PieChart>\n                  <Pie\n                    data={tableData}\n                    cx=\"50%\"\n                    cy=\"50%\"\n                    labelLine={false}\n                    label={CustomPieLabel}\n                    outerRadius={100}\n                    fill=\"#8884d8\"\n                    dataKey=\"sales\"\n                    nameKey=\"product\"\n                    animationBegin={0}\n                    animationDuration={800}\n                  >\n                    {tableData.map((entry, index) => (\n                      <Cell \n                        key={`cell-${entry.id}`} \n                        fill={COLORS[index % COLORS.length]}\n                        className=\"transition-opacity hover:opacity-80\"\n                      />\n                    ))}\n                  </Pie>\n                  <Tooltip\n                    contentStyle={{\n                      backgroundColor: isDarkMode ? '#1f2937' : '#ffffff',\n                      border: isDarkMode ? '1px solid #374151' : '1px solid #e5e7eb',\n                      borderRadius: '8px',\n                      color: isDarkMode ? '#ffffff' : '#000000'\n                    }}\n                    formatter={(value: number, name: string) => [\n                      `${value} orders`,\n                      name\n                    ]}\n                  />\n                  <Legend\n                    verticalAlign=\"bottom\"\n                    height={36}\n                    iconType=\"circle\"\n                    wrapperStyle={{\n                      color: isDarkMode ? '#9ca3af' : '#4b5563',\n                      fontSize: '12px'\n                    }}\n                  />\n                </PieChart>\n              </ResponsiveContainer>\n            </CardContent>\n          </Card>\n\n          <Card className={`lg:col-span-2 ${isDarkMode ? 'bg-gray-800 border-gray-700' : ''}`}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Performance Metrics</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Combined view of key indicators\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"h-[300px] w-full\">\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <BarChart\n                    data={chartData}\n                    margin={{ top: 20, right: 30, left: 20, bottom: 5 }}\n                  >\n                    <CartesianGrid \n                      strokeDasharray=\"3 3\" \n                      stroke={isDarkMode ? '#374151' : '#e5e7eb'}\n                    />\n                    <XAxis \n                      dataKey=\"date\" \n                      stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                      tick={{ fill: isDarkMode ? '#9ca3af' : '#6b7280' }}\n                      tickFormatter={(value) => new Date(value).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n                    />\n                    <YAxis \n                      stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                      tick={{ fill: isDarkMode ? '#9ca3af' : '#6b7280' }}\n                    />\n                    <Tooltip \n                      contentStyle={{\n                        backgroundColor: isDarkMode ? '#1f2937' : '#ffffff',\n                        border: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\n                        borderRadius: '8px',\n                        color: isDarkMode ? '#f3f4f6' : '#111827'\n                      }}\n                      labelStyle={{ color: isDarkMode ? '#f3f4f6' : '#111827' }}\n                      formatter={(value: number) => value.toLocaleString()}\n                      labelFormatter={(label) => new Date(label).toLocaleDateString('en-US', { month: 'long', day: 'numeric', year: 'numeric' })}\n                    />\n                    <Legend \n                      wrapperStyle={{ color: isDarkMode ? '#f3f4f6' : '#111827' }}\n                    />\n                    <Bar \n                      dataKey=\"revenue\" \n                      fill=\"#3b82f6\" \n                      radius={[8, 8, 0, 0]}\n                      name=\"Revenue ($)\"\n                    />\n                    <Bar \n                      dataKey=\"users\" \n                      fill=\"#10b981\" \n                      radius={[8, 8, 0, 0]}\n                      name=\"Users\"\n                    />\n                    <Bar \n                      dataKey=\"orders\" \n                      fill=\"#f59e0b\" \n                      radius={[8, 8, 0, 0]}\n                      name=\"Orders\"\n                    />\n                  </BarChart>\n                </ResponsiveContainer>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n          <CardHeader>\n            <CardTitle className={isDarkMode ? 'text-white' : ''}>Top Products</CardTitle>\n            <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n              Best performing products by revenue\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {/* Table Container with Horizontal Scroll on Mobile */}\n              <div className=\"overflow-x-auto rounded-lg border border-gray-200 dark:border-gray-700\">\n                <Table>\n                  <TableHeader>\n                    <TableRow className={isDarkMode ? 'border-gray-700 hover:bg-gray-750' : ''}>\n                      <TableHead className={isDarkMode ? 'text-gray-300' : ''}>\n                        <Button\n                          variant=\"ghost\"\n                          onClick={() => handleSort('product')}\n                          className={`flex items-center font-semibold -ml-4 ${isDarkMode ? 'hover:bg-gray-700 text-gray-300' : ''}`}\n                        >\n                          Product\n                          {getSortIcon('product')}\n                        </Button>\n                      </TableHead>\n                      <TableHead className={`text-right ${isDarkMode ? 'text-gray-300' : ''}`}>\n                        <Button\n                          variant=\"ghost\"\n                          onClick={() => handleSort('sales')}\n                          className={`flex items-center font-semibold ml-auto ${isDarkMode ? 'hover:bg-gray-700 text-gray-300' : ''}`}\n                        >\n                          Sales\n                          {getSortIcon('sales')}\n                        </Button>\n                      </TableHead>\n                      <TableHead className={`text-right ${isDarkMode ? 'text-gray-300' : ''}`}>\n                        <Button\n                          variant=\"ghost\"\n                          onClick={() => handleSort('revenue')}\n                          className={`flex items-center font-semibold ml-auto ${isDarkMode ? 'hover:bg-gray-700 text-gray-300' : ''}`}\n                        >\n                          Revenue\n                          {getSortIcon('revenue')}\n                        </Button>\n                      </TableHead>\n                      <TableHead className={`text-center ${isDarkMode ? 'text-gray-300' : ''}`}>\n                        <Button\n                          variant=\"ghost\"\n                          onClick={() => handleSort('status')}\n                          className={`flex items-center font-semibold mx-auto ${isDarkMode ? 'hover:bg-gray-700 text-gray-300' : ''}`}\n                        >\n                          Status\n                          {getSortIcon('status')}\n                        </Button>\n                      </TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {paginatedData().map((row) => (\n                      <TableRow \n                        key={row.id}\n                        className={isDarkMode ? 'border-gray-700 hover:bg-gray-750' : 'hover:bg-gray-50'}\n                      >\n                        <TableCell className={`font-medium ${isDarkMode ? 'text-gray-200' : ''}`}>\n                          {row.product}\n                        </TableCell>\n                        <TableCell className={`text-right ${isDarkMode ? 'text-gray-300' : ''}`}>\n                          {row.sales.toLocaleString()}\n                        </TableCell>\n                        <TableCell className={`text-right ${isDarkMode ? 'text-gray-300' : ''}`}>\n                          ${row.revenue.toLocaleString()}\n                        </TableCell>\n                        <TableCell className=\"text-center\">\n                          {getStatusBadge(row.status)}\n                        </TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              </div>\n\n              {/* Pagination Controls */}\n              <div className=\"flex flex-col sm:flex-row items-center justify-between gap-4 px-2\">\n                <div className={`text-sm ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                  Showing {((currentPage - 1) * ITEMS_PER_PAGE) + 1} to {Math.min(currentPage * ITEMS_PER_PAGE, tableData.length)} of {tableData.length} products\n                </div>\n                \n                <div className=\"flex items-center gap-2\">\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => setCurrentPage(prev => Math.max(1, prev - 1))}\n                    disabled={currentPage === 1}\n                    className={isDarkMode ? 'border-gray-700 text-gray-300 hover:bg-gray-700' : ''}\n                  >\n                    Previous\n                  </Button>\n                  \n                  <div className=\"flex gap-1\">\n                    {Array.from({ length: totalPages }, (_, i) => i + 1).map((page) => (\n                      <Button\n                        key={page}\n                        variant={currentPage === page ? 'default' : 'outline'}\n                        size=\"sm\"\n                        onClick={() => setCurrentPage(page)}\n                        className={\n                          currentPage === page\n                            ? ''\n                            : isDarkMode\n                            ? 'border-gray-700 text-gray-300 hover:bg-gray-700'\n                            : ''\n                        }\n                      >\n                        {page}\n                      </Button>\n                    ))}\n                  </div>\n                  \n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => setCurrentPage(prev => Math.min(totalPages, prev + 1))}\n                    disabled={currentPage === totalPages}\n                    className={isDarkMode ? 'border-gray-700 text-gray-300 hover:bg-gray-700' : ''}\n                  >\n                    Next\n                  </Button>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 md:gap-6 mt-8\">\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={`flex items-center gap-2 ${isDarkMode ? 'text-white' : ''}`}>\n                <Activity className=\"h-5 w-5 text-blue-500\" />\n                Active Connections\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <div className={`text-3xl font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                    {realtimeStats.activeConnections.toLocaleString()}\n                  </div>\n                  <div className={`text-sm mt-1 ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                    Live connections\n                  </div>\n                </div>\n                <div className=\"relative\">\n                  <div className=\"h-12 w-12 rounded-full bg-blue-500 opacity-20 animate-ping absolute\"></div>\n                  <div className=\"h-12 w-12 rounded-full bg-blue-500 opacity-40 flex items-center justify-center\">\n                    <div className=\"h-6 w-6 rounded-full bg-blue-600\"></div>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={`flex items-center gap-2 ${isDarkMode ? 'text-white' : ''}`}>\n                <Zap className=\"h-5 w-5 text-yellow-500\" />\n                Data Points\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <div className={`text-3xl font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                    {realtimeStats.dataPoints.toLocaleString()}\n                  </div>\n                  <div className={`text-sm mt-1 ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                    Processed today\n                  </div>\n                </div>\n                <div className=\"relative\">\n                  <div className=\"h-12 w-12 rounded-full bg-yellow-500 opacity-20 animate-ping absolute\" style={{ animationDuration: '1.5s' }}></div>\n                  <div className=\"h-12 w-12 rounded-full bg-yellow-500 opacity-40 flex items-center justify-center\">\n                    <div className=\"h-6 w-6 rounded-full bg-yellow-600\"></div>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={`flex items-center gap-2 ${isDarkMode ? 'text-white' : ''}`}>\n                <Clock className=\"h-5 w-5 text-green-500\" />\n                Update Frequency\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <div className={`text-3xl font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                    {realtimeStats.updateFrequency}s\n                  </div>\n                  <div className={`text-sm mt-1 ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                    Last updated: {lastUpdate.toLocaleTimeString()}\n                  </div>\n                </div>\n                <div className=\"relative\">\n                  <div className=\"h-12 w-12 rounded-full bg-green-500 opacity-20 animate-ping absolute\" style={{ animationDuration: '2s' }}></div>\n                  <div className=\"h-12 w-12 rounded-full bg-green-500 opacity-40 flex items-center justify-center\">\n                    <div className=\"h-6 w-6 rounded-full bg-green-600\"></div>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}",
  "error": null,
  "overall_score": 65,
  "code_quality_score": 16,
  "architecture_score": 14,
  "performance_score": 17,
  "accessibility_score": 18,
  "metadata": {
    "document_id": "eval_room_bb0a222ae69a",
    "prompt_category": "intermediate",
    "prompt_complexity": 6.0
  },
  "raw_response": {
    "document_id": "eval_room_bb0a222ae69a",
    "mode": "parallel",
    "prompt": "Generate an analytics dashboard page with charts, data tables, real-time updates, dark mode, and responsive design",
    "content": "import { useState, useCallback } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Moon, Sun, RefreshCw } from 'lucide-react';\nimport { Activity, Clock, Zap } from 'lucide-react';\nimport { Badge } from '@/components/ui/badge';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\nimport { ChevronUp, ChevronDown, ChevronsUpDown } from 'lucide-react';\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\nimport { PieChart, Pie, Cell, ResponsiveContainer, Legend, Tooltip } from 'recharts';\nimport { motion } from 'framer-motion';\nimport { TrendingUp } from 'lucide-react';\nimport { TrendingUp, TrendingDown, DollarSign, Users, ShoppingCart, Target } from 'lucide-react';\n\ninterface MetricData {\n  id: string;\n  label: string;\n  value: number;\n  change: number;\n  trend: 'up' | 'down';\n}\n\ninterface ChartDataPoint {\n  date: string;\n  revenue: number;\n  users: number;\n  orders: number;\n}\n\ninterface TableRow {\n  id: string;\n  product: string;\n  sales: number;\n  revenue: number;\n  status: 'active' | 'pending' | 'inactive';\n}\n\nconst mockMetrics: MetricData[] = [\n  { id: '1', label: 'Total Revenue', value: 45231, change: 12.5, trend: 'up' },\n  { id: '2', label: 'Active Users', value: 2350, change: 8.2, trend: 'up' },\n  { id: '3', label: 'Total Orders', value: 1543, change: -3.1, trend: 'down' },\n  { id: '4', label: 'Conversion Rate', value: 3.24, change: 5.7, trend: 'up' }\n];\n\nconst mockChartData: ChartDataPoint[] = [\n  { date: '2024-01-01', revenue: 12000, users: 450, orders: 230 },\n  { date: '2024-01-02', revenue: 15000, users: 520, orders: 280 },\n  { date: '2024-01-03', revenue: 13500, users: 490, orders: 250 },\n  { date: '2024-01-04', revenue: 18000, users: 610, orders: 320 },\n  { date: '2024-01-05', revenue: 16500, users: 580, orders: 295 },\n  { date: '2024-01-06', revenue: 20000, users: 680, orders: 350 },\n  { date: '2024-01-07', revenue: 22000, users: 720, orders: 380 }\n];\n\nconst mockTableData: TableRow[] = [\n  { id: '1', product: 'Premium Plan', sales: 234, revenue: 23400, status: 'active' },\n  { id: '2', product: 'Basic Plan', sales: 567, revenue: 11340, status: 'active' },\n  { id: '3', product: 'Enterprise Plan', sales: 89, revenue: 17800, status: 'active' },\n  { id: '4', product: 'Starter Plan', sales: 432, revenue: 4320, status: 'pending' },\n  { id: '5', product: 'Pro Plan', sales: 156, revenue: 15600, status: 'active' }\n];\n\nconst RevenueChart = ({ data, isDarkMode }: { data: ChartDataPoint[], isDarkMode: boolean }) => {\n  const [hoveredPoint, setHoveredPoint] = useState<number | null>(null);\n  \n  const maxRevenue = Math.max(...data.map(d => d.revenue));\n  const minRevenue = Math.min(...data.map(d => d.revenue));\n  const revenueRange = maxRevenue - minRevenue;\n  \n  const chartHeight = 250;\n  const chartWidth = 100; // percentage\n  const padding = { top: 20, right: 20, bottom: 40, left: 60 };\n  \n  const getX = (index: number) => {\n    return (index / (data.length - 1)) * 100;\n  };\n  \n  const getY = (value: number) => {\n    const normalizedValue = ((value - minRevenue) / revenueRange) * 100;\n    return 100 - normalizedValue;\n  };\n  \n  const pathData = data.map((point, index) => {\n    const x = getX(index);\n    const y = getY(point.revenue);\n    return `${index === 0 ? 'M' : 'L'} ${x} ${y}`;\n  }).join(' ');\n  \n  const formatCurrency = (value: number) => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0\n    }).format(value);\n  };\n  \n  const formatDate = (dateString: string) => {\n    const date = new Date(dateString);\n    return date.toLocaleDateString('en-US', { month: 'short', day: 'numeric' });\n  };\n  \n  return (\n    <div className=\"relative w-full\" style={{ height: `${chartHeight}px` }}>\n      <svg\n        viewBox=\"0 0 100 100\"\n        preserveAspectRatio=\"none\"\n        className=\"w-full h-full\"\n      >\n        {/* Grid lines */}\n        {[0, 25, 50, 75, 100].map((y) => (\n          <line\n            key={y}\n            x1=\"0\"\n            y1={y}\n            x2=\"100\"\n            y2={y}\n            stroke={isDarkMode ? '#374151' : '#e5e7eb'}\n            strokeWidth=\"0.2\"\n            vectorEffect=\"non-scaling-stroke\"\n          />\n        ))}\n        \n        {/* Area fill */}\n        <path\n          d={`${pathData} L 100 100 L 0 100 Z`}\n          fill={isDarkMode ? 'rgba(59, 130, 246, 0.1)' : 'rgba(59, 130, 246, 0.1)'}\n        />\n        \n        {/* Line */}\n        <path\n          d={pathData}\n          fill=\"none\"\n          stroke={isDarkMode ? '#3b82f6' : '#2563eb'}\n          strokeWidth=\"0.5\"\n          vectorEffect=\"non-scaling-stroke\"\n          strokeLinecap=\"round\"\n          strokeLinejoin=\"round\"\n        />\n      </svg>\n      \n      {/* Data points and tooltips */}\n      <div className=\"absolute inset-0\">\n        {data.map((point, index) => {\n          const x = getX(index);\n          const y = getY(point.revenue);\n          \n          return (\n            <div\n              key={index}\n              className=\"absolute\"\n              style={{\n                left: `${x}%`,\n                top: `${y}%`,\n                transform: 'translate(-50%, -50%)'\n              }}\n              onMouseEnter={() => setHoveredPoint(index)}\n              onMouseLeave={() => setHoveredPoint(null)}\n            >\n              <div\n                className={`w-3 h-3 rounded-full border-2 transition-all cursor-pointer ${\n                  isDarkMode\n                    ? 'bg-gray-800 border-blue-500'\n                    : 'bg-white border-blue-600'\n                } ${hoveredPoint === index ? 'scale-150' : 'scale-100'}`}\n              />\n              \n              {hoveredPoint === index && (\n                <div\n                  className={`absolute z-10 px-3 py-2 rounded-lg shadow-lg whitespace-nowrap transition-opacity ${\n                    isDarkMode\n                      ? 'bg-gray-700 border border-gray-600'\n                      : 'bg-white border border-gray-200'\n                  }`}\n                  style={{\n                    bottom: '100%',\n                    left: '50%',\n                    transform: 'translateX(-50%)',\n                    marginBottom: '8px'\n                  }}\n                >\n                  <div className={`text-xs font-medium ${isDarkMode ? 'text-gray-300' : 'text-gray-600'}`}>\n                    {formatDate(point.date)}\n                  </div>\n                  <div className={`text-sm font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                    {formatCurrency(point.revenue)}\n                  </div>\n                  <div className={`text-xs ${isDarkMode ? 'text-gray-400' : 'text-gray-500'}`}>\n                    {point.users} users \u2022 {point.orders} orders\n                  </div>\n                  <div\n                    className={`absolute w-2 h-2 rotate-45 ${\n                      isDarkMode ? 'bg-gray-700 border-r border-b border-gray-600' : 'bg-white border-r border-b border-gray-200'\n                    }`}\n                    style={{\n                      top: '100%',\n                      left: '50%',\n                      transform: 'translateX(-50%) translateY(-50%)'\n                    }}\n                  />\n                </div>\n              )}\n            </div>\n          );\n        })}\n      </div>\n      \n      {/* Y-axis labels */}\n      <div className=\"absolute left-0 top-0 bottom-0 flex flex-col justify-between pr-2\" style={{ width: '50px' }}>\n        {[maxRevenue, maxRevenue * 0.75, maxRevenue * 0.5, maxRevenue * 0.25, minRevenue].map((value, index) => (\n          <div\n            key={index}\n            className={`text-xs ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}\n            style={{ transform: 'translateY(-50%)' }}\n          >\n            {formatCurrency(value)}\n          </div>\n        ))}\n      </div>\n      \n      {/* X-axis labels */}\n      <div className=\"absolute bottom-0 left-0 right-0 flex justify-between pt-2\" style={{ height: '30px' }}>\n        {data.map((point, index) => (\n          <div\n            key={index}\n            className={`text-xs ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}\n            style={{ transform: 'translateX(-50%)' }}\n          >\n            {index % 2 === 0 ? formatDate(point.date) : ''}\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nconst COLORS = ['#3b82f6', '#10b981', '#f59e0b', '#ef4444', '#8b5cf6'];\n\nconst CustomPieLabel = ({ cx, cy, midAngle, innerRadius, outerRadius, percent }: any) => {\n  const RADIAN = Math.PI / 180;\n  const radius = innerRadius + (outerRadius - innerRadius) * 0.5;\n  const x = cx + radius * Math.cos(-midAngle * RADIAN);\n  const y = cy + radius * Math.sin(-midAngle * RADIAN);\n\n  if (percent < 0.05) return null;\n\n  return (\n    <text\n      x={x}\n      y={y}\n      fill=\"white\"\n      textAnchor={x > cx ? 'start' : 'end'}\n      dominantBaseline=\"central\"\n      className=\"text-xs font-semibold\"\n    >\n      {`${(percent * 100).toFixed(0)}%`}\n    </text>\n  );\n};\n\ntype SortField = 'product' | 'sales' | 'revenue' | 'status';\ntype SortDirection = 'asc' | 'desc' | null;\n\nconst ITEMS_PER_PAGE = 5;\n\nexport default function AnalyticsDashboard() {\n  const [isDarkMode, setIsDarkMode] = useState(false);\n  const [metrics, setMetrics] = useState<MetricData[]>(mockMetrics);\n  const [chartData, setChartData] = useState<ChartDataPoint[]>(mockChartData);\n  const [tableData, setTableData] = useState<TableRow[]>(mockTableData);\n  const [isRefreshing, setIsRefreshing] = useState(false);\n  const [sortField, setSortField] = useState<SortField | null>(null);\n  const [sortDirection, setSortDirection] = useState<SortDirection>(null);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [lastUpdate, setLastUpdate] = useState(new Date());\n  const [realtimeStats, setRealtimeStats] = useState({\n    activeConnections: 1247,\n    dataPoints: 45231,\n    updateFrequency: 2.5\n  });\n\n  const toggleDarkMode = useCallback(() => {\n    setIsDarkMode(prev => !prev);\n  }, []);\n\n  const handleSort = useCallback((field: SortField) => {\n    if (sortField === field) {\n      if (sortDirection === 'asc') {\n        setSortDirection('desc');\n      } else if (sortDirection === 'desc') {\n        setSortDirection(null);\n        setSortField(null);\n      }\n    } else {\n      setSortField(field);\n      setSortDirection('asc');\n    }\n    setCurrentPage(1);\n  }, [sortField, sortDirection]);\n\n  const getSortedData = useCallback(() => {\n    if (!sortField || !sortDirection) return tableData;\n\n    return [...tableData].sort((a, b) => {\n      let aValue = a[sortField];\n      let bValue = b[sortField];\n\n      if (typeof aValue === 'string') aValue = aValue.toLowerCase();\n      if (typeof bValue === 'string') bValue = bValue.toLowerCase();\n\n      if (aValue < bValue) return sortDirection === 'asc' ? -1 : 1;\n      if (aValue > bValue) return sortDirection === 'asc' ? 1 : -1;\n      return 0;\n    });\n  }, [tableData, sortField, sortDirection]);\n\n  const paginatedData = useCallback(() => {\n    const sorted = getSortedData();\n    const startIndex = (currentPage - 1) * ITEMS_PER_PAGE;\n    const endIndex = startIndex + ITEMS_PER_PAGE;\n    return sorted.slice(startIndex, endIndex);\n  }, [getSortedData, currentPage]);\n\n  const totalPages = Math.ceil(tableData.length / ITEMS_PER_PAGE);\n\n  const getSortIcon = (field: SortField) => {\n    if (sortField !== field) {\n      return <ChevronsUpDown className=\"h-4 w-4 ml-1 opacity-50\" />;\n    }\n    if (sortDirection === 'asc') {\n      return <ChevronUp className=\"h-4 w-4 ml-1\" />;\n    }\n    return <ChevronDown className=\"h-4 w-4 ml-1\" />;\n  };\n\n  const getStatusBadge = (status: TableRow['status']) => {\n    const variants = {\n      active: 'default',\n      pending: 'secondary',\n      inactive: 'outline'\n    } as const;\n\n    const colors = {\n      active: isDarkMode ? 'bg-green-900 text-green-300 border-green-700' : 'bg-green-100 text-green-800 border-green-300',\n      pending: isDarkMode ? 'bg-yellow-900 text-yellow-300 border-yellow-700' : 'bg-yellow-100 text-yellow-800 border-yellow-300',\n      inactive: isDarkMode ? 'bg-gray-700 text-gray-300 border-gray-600' : 'bg-gray-100 text-gray-800 border-gray-300'\n    };\n\n    return (\n      <Badge variant={variants[status]} className={colors[status]}>\n        {status.charAt(0).toUpperCase() + status.slice(1)}\n      </Badge>\n    );\n  };\n\n  const handleRefresh = useCallback(() => {\n    setIsRefreshing(true);\n    \n    setTimeout(() => {\n      // Simulate data refresh\n      setMetrics(mockMetrics.map(m => ({\n        ...m,\n        value: m.value + Math.random() * 100 - 50,\n        change: Math.random() * 20 - 10\n      })));\n      setIsRefreshing(false);\n    }, 1000);tIsRefreshing(true);\n    \n    setTimeout(() => {\n      // Generate updated metrics with random variations\n      const updatedMetrics = mockMetrics.map(metric => ({\n        ...metric,\n        value: metric.value + Math.floor(Math.random() * 200 - 100),\n        change: parseFloat((Math.random() * 20 - 5).toFixed(1)),\n        trend: Math.random() > 0.5 ? 'up' as const : 'down' as const\n      }));\n\n      // Update realtime stats\n      setRealtimeStats({\n        activeConnections: 1247 + Math.floor(Math.random() * 100 - 50),\n        dataPoints: 45231 + Math.floor(Math.random() * 1000 - 500),\n        updateFrequency: parseFloat((2 + Math.random() * 2).toFixed(1))\n      });\n\n      // Generate updated chart data with random variations\n      const updatedChartDat\n      }));\n\n      // Generate updated chart data with random variations\n      const updatedChartData = mockChartData.map(point => ({\n        ...point,\n        revenue: point.revenue + Math.floor(Math.random() * 4000 - 2000),\n        users: point.users + Math.floor(Math.random() * 100 - 50),\n        orders: point.orders + Math.floor(Math.random() * 50 - 25)\n      }));\n\n      // Generate updated table data with random variations\n      const updatedTableData = mockTableData.map(row => ({\n        ...row,\n        sales: row.sales + Math.floor(Math.random() * 40 - 20),\n        revenue: row.revenue + Math.floor(Math.random() * 2000 - 1000),\n        status: ['active', 'pending', 'inactive'][Math.floor(Math.random() * 3)] as 'active' | 'pending' | 'inactive'\n      }));\n\n      setMetrics(updatedMetrics);\n      setChartData(updatedChartData);\n      setTableData(updatedTableData);\n      setIsRefreshing(false);\n      setLastUpdate(new Date());\n    }, 1500);\n  }, []);\n\n  return (\n    <div className={`min-h-screen ${isDarkMode ? 'dark bg-gray-900' : 'bg-gray-50'}`}>\n      <div className=\"container mx-auto p-4 md:p-6 lg:p-8\">\n        <div className=\"flex flex-col md:flex-row justify-between items-start md:items-center gap-4 mb-8\">\n          <div>\n            <h1 className={`text-3xl md:text-4xl font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n              Analytics Dashboard\n            </h1>\n            <p className={`mt-2 ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n              Real-time insights and performance metrics\n            </p>\n          </div>\n          \n          <div className=\"flex gap-2\">\n            <Button\n              variant=\"outline\"\n              size=\"icon\"\n              onClick={toggleDarkMode}\n              className={isDarkMode ? 'border-gray-700' : ''}\n            >\n              {isDarkMode ? <Sun className=\"h-5 w-5\" /> : <Moon className=\"h-5 w-5\" />}\n            </Button>\n            \n            <Button\n              variant=\"outline\"\n              onClick={handleRefresh}\n              disabled={isRefreshing}\n              className={isDarkMode ? 'border-gray-700' : ''}\n            >\n              <RefreshCw className={`h-4 w-4 mr-2 ${isRefreshing ? 'animate-spin' : ''}`} />\n              Refresh\n            </Button>\n          </div>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 md:gap-6 mb-8\">\n          {metrics.map((metric, index) => {\n            const Icon = \n              metric.label === 'Total Revenue' ? DollarSign :\n              metric.label === 'Active Users' ? Users :\n              metric.label === 'Total Orders' ? ShoppingCart :\n              Target;\n            \n            const TrendIcon = metric.trend === 'up' ? TrendingUp : TrendingDown;\n            const trendColor = metric.trend === 'up' ? 'text-green-500' : 'text-red-500';\n            const trendBgColor = metric.trend === 'up' \n              ? (isDarkMode ? 'bg-green-500/10' : 'bg-green-50') \n              : (isDarkMode ? 'bg-red-500/10' : 'bg-red-50');\n\n            return (\n              <Card \n                key={metric.id}\n                className={`transition-all duration-300 hover:shadow-lg hover:-translate-y-1 ${\n                  isDarkMode ? 'bg-gray-800 border-gray-700' : 'bg-white'\n                }`}\n                style={{\n                  animationDelay: `${index * 100}ms`,\n                  animation: 'fadeInUp 0.5s ease-out forwards',\n                  opacity: 0\n                }}\n              >\n                <CardHeader className=\"flex flex-row items-center justify-between pb-2\">\n                  <CardTitle className={`text-sm font-medium ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                    {metric.label}\n                  </CardTitle>\n                  <div className={`p-2 rounded-lg ${isDarkMode ? 'bg-gray-700' : 'bg-gray-100'}`}>\n                    <Icon className={`h-4 w-4 ${isDarkMode ? 'text-gray-300' : 'text-gray-600'}`} />\n                  </div>\n                </CardHeader>\n                <CardContent>\n                  <div className={`text-2xl font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                    {metric.label.includes('Revenue') || metric.label.includes('Rate') \n                      ? metric.label.includes('Rate') \n                        ? `${metric.value}%`\n                        : `$${metric.value.toLocaleString()}`\n                      : metric.value.toLocaleString()\n                    }\n                  </div>\n                  <div className=\"flex items-center gap-1 mt-2\">\n                    <div className={`flex items-center gap-1 px-2 py-1 rounded-full ${trendBgColor}`}>\n                      <TrendIcon className={`h-3 w-3 ${trendColor}`} />\n                      <span className={`text-xs font-medium ${trendColor}`}>\n                        {Math.abs(metric.change)}%\n                      </span>\n                    </div>\n                    <span className={`text-xs ${isDarkMode ? 'text-gray-500' : 'text-gray-500'}`}>\n                      vs last period\n                    </span>\n                  </div>\n                </CardContent>\n              </Card>\n            );\n          })}\n          <style jsx>{`\n            @keyframes fadeInUp {\n              from {\n                opacity: 0;\n                transform: translateY(20px);\n              }\n              to {\n                opacity: 1;\n                transform: translateY(0);\n              }\n            }\n          `}</style>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-4 md:gap-6 mb-8\">\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Revenue Overview</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Daily revenue trends\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <RevenueChart data={chartData} isDarkMode={isDarkMode} />\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>User Growth</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Active users over time\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"h-[300px] w-full\">\n                <svg width=\"100%\" height=\"100%\" viewBox=\"0 0 700 300\" preserveAspectRatio=\"none\">\n                  <defs>\n                    <linearGradient id=\"userGradient\" x1=\"0\" x2=\"0\" y1=\"0\" y2=\"1\">\n                      <stop offset=\"0%\" stopColor={isDarkMode ? '#3b82f6' : '#60a5fa'} stopOpacity=\"0.8\" />\n                      <stop offset=\"100%\" stopColor={isDarkMode ? '#3b82f6' : '#60a5fa'} stopOpacity=\"0.1\" />\n                    </linearGradient>\n                  </defs>\n                  \n                  {/* Grid lines */}\n                  {[0, 1, 2, 3, 4].map((i) => (\n                    <line\n                      key={i}\n                      x1=\"0\"\n                      y1={i * 75}\n                      x2=\"700\"\n                      y2={i * 75}\n                      stroke={isDarkMode ? '#374151' : '#e5e7eb'}\n                      strokeWidth=\"1\"\n                    />\n                  ))}\n                  \n                  {/* Area chart */}\n                  <motion.path\n                    initial={{ opacity: 0, pathLength: 0 }}\n                    animate={{ opacity: 1, pathLength: 1 }}\n                    transition={{ duration: 1.5, ease: \"easeInOut\" }}\n                    d={(() => {\n                      const maxUsers = Math.max(...chartData.map(d => d.users));\n                      const points = chartData.map((d, i) => {\n                        const x = (i / (chartData.length - 1)) * 700;\n                        const y = 300 - (d.users / maxUsers) * 250;\n                        return `${x},${y}`;\n                      });\n                      return `M 0,300 L ${points.join(' L ')} L 700,300 Z`;\n                    })()}\n                    fill=\"url(#userGradient)\"\n                  />\n                  \n                  {/* Line stroke */}\n                  <motion.path\n                    initial={{ pathLength: 0 }}\n                    animate={{ pathLength: 1 }}\n                    transition={{ duration: 1.5, ease: \"easeInOut\" }}\n                    d={(() => {\n                      const maxUsers = Math.max(...chartData.map(d => d.users));\n                      const points = chartData.map((d, i) => {\n                        const x = (i / (chartData.length - 1)) * 700;\n                        const y = 300 - (d.users / maxUsers) * 250;\n                        return `${x},${y}`;\n                      });\n                      return `M ${points.join(' L ')}`;\n                    })()}\n                    fill=\"none\"\n                    stroke={isDarkMode ? '#3b82f6' : '#2563eb'}\n                    strokeWidth=\"3\"\n                    strokeLinecap=\"round\"\n                    strokeLinejoin=\"round\"\n                  />\n                  \n                  {/* Data points */}\n                  {chartData.map((d, i) => {\n                    const maxUsers = Math.max(...chartData.map(d => d.users));\n                    const x = (i / (chartData.length - 1)) * 700;\n                    const y = 300 - (d.users / maxUsers) * 250;\n                    return (\n                      <motion.g\n                        key={d.date}\n                        initial={{ opacity: 0, scale: 0 }}\n                        animate={{ opacity: 1, scale: 1 }}\n                        transition={{ duration: 0.3, delay: i * 0.1 + 0.5 }}\n                      >\n                        <circle\n                          cx={x}\n                          cy={y}\n                          r=\"6\"\n                          fill={isDarkMode ? '#1e293b' : '#ffffff'}\n                          stroke={isDarkMode ? '#3b82f6' : '#2563eb'}\n                          strokeWidth=\"3\"\n                          className=\"cursor-pointer hover:r-8 transition-all\"\n                        />\n                        <title>{`${new Date(d.date).toLocaleDateString()}: ${d.users} users`}</title>\n                      </motion.g>\n                    );\n                  })}\n                </svg>\n                \n                {/* X-axis labels */}\n                <div className=\"flex justify-between mt-2 px-1\">\n                  {chartData.map((d, i) => (\n                    <span\n                      key={d.date}\n                      className={`text-xs ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}\n                    >\n                      {new Date(d.date).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n                    </span>\n                  ))}\n                </div>\n                \n                {/* Summary stats */}\n                <div className=\"flex justify-between mt-4 pt-4 border-t border-gray-200 dark:border-gray-700\">\n                  <div>\n                    <p className={`text-xs ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>Peak Users</p>\n                    <p className={`text-lg font-semibold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                      {Math.max(...chartData.map(d => d.users)).toLocaleString()}\n                    </p>\n                  </div>\n                  <div>\n                    <p className={`text-xs ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>Average</p>\n                    <p className={`text-lg font-semibold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                      {Math.round(chartData.reduce((sum, d) => sum + d.users, 0) / chartData.length).toLocaleString()}\n                    </p>\n                  </div>\n                  <div>\n                    <p className={`text-xs ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>Growth</p>\n                    <p className=\"text-lg font-semibold text-green-500\">\n                      +{Math.round(((chartData[chartData.length - 1].users - chartData[0].users) / chartData[0].users) * 100)}%\n                    </p>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-4 md:gap-6 mb-8\">\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Orders Distribution</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                By product category\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <ResponsiveContainer width=\"100%\" height={300}>\n                <PieChart>\n                  <Pie\n                    data={tableData}\n                    cx=\"50%\"\n                    cy=\"50%\"\n                    labelLine={false}\n                    label={CustomPieLabel}\n                    outerRadius={100}\n                    fill=\"#8884d8\"\n                    dataKey=\"sales\"\n                    nameKey=\"product\"\n                    animationBegin={0}\n                    animationDuration={800}\n                  >\n                    {tableData.map((entry, index) => (\n                      <Cell \n                        key={`cell-${entry.id}`} \n                        fill={COLORS[index % COLORS.length]}\n                        className=\"transition-opacity hover:opacity-80\"\n                      />\n                    ))}\n                  </Pie>\n                  <Tooltip\n                    contentStyle={{\n                      backgroundColor: isDarkMode ? '#1f2937' : '#ffffff',\n                      border: isDarkMode ? '1px solid #374151' : '1px solid #e5e7eb',\n                      borderRadius: '8px',\n                      color: isDarkMode ? '#ffffff' : '#000000'\n                    }}\n                    formatter={(value: number, name: string) => [\n                      `${value} orders`,\n                      name\n                    ]}\n                  />\n                  <Legend\n                    verticalAlign=\"bottom\"\n                    height={36}\n                    iconType=\"circle\"\n                    wrapperStyle={{\n                      color: isDarkMode ? '#9ca3af' : '#4b5563',\n                      fontSize: '12px'\n                    }}\n                  />\n                </PieChart>\n              </ResponsiveContainer>\n            </CardContent>\n          </Card>\n\n          <Card className={`lg:col-span-2 ${isDarkMode ? 'bg-gray-800 border-gray-700' : ''}`}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Performance Metrics</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Combined view of key indicators\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"h-[300px] w-full\">\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <BarChart\n                    data={chartData}\n                    margin={{ top: 20, right: 30, left: 20, bottom: 5 }}\n                  >\n                    <CartesianGrid \n                      strokeDasharray=\"3 3\" \n                      stroke={isDarkMode ? '#374151' : '#e5e7eb'}\n                    />\n                    <XAxis \n                      dataKey=\"date\" \n                      stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                      tick={{ fill: isDarkMode ? '#9ca3af' : '#6b7280' }}\n                      tickFormatter={(value) => new Date(value).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n                    />\n                    <YAxis \n                      stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                      tick={{ fill: isDarkMode ? '#9ca3af' : '#6b7280' }}\n                    />\n                    <Tooltip \n                      contentStyle={{\n                        backgroundColor: isDarkMode ? '#1f2937' : '#ffffff',\n                        border: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\n                        borderRadius: '8px',\n                        color: isDarkMode ? '#f3f4f6' : '#111827'\n                      }}\n                      labelStyle={{ color: isDarkMode ? '#f3f4f6' : '#111827' }}\n                      formatter={(value: number) => value.toLocaleString()}\n                      labelFormatter={(label) => new Date(label).toLocaleDateString('en-US', { month: 'long', day: 'numeric', year: 'numeric' })}\n                    />\n                    <Legend \n                      wrapperStyle={{ color: isDarkMode ? '#f3f4f6' : '#111827' }}\n                    />\n                    <Bar \n                      dataKey=\"revenue\" \n                      fill=\"#3b82f6\" \n                      radius={[8, 8, 0, 0]}\n                      name=\"Revenue ($)\"\n                    />\n                    <Bar \n                      dataKey=\"users\" \n                      fill=\"#10b981\" \n                      radius={[8, 8, 0, 0]}\n                      name=\"Users\"\n                    />\n                    <Bar \n                      dataKey=\"orders\" \n                      fill=\"#f59e0b\" \n                      radius={[8, 8, 0, 0]}\n                      name=\"Orders\"\n                    />\n                  </BarChart>\n                </ResponsiveContainer>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n          <CardHeader>\n            <CardTitle className={isDarkMode ? 'text-white' : ''}>Top Products</CardTitle>\n            <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n              Best performing products by revenue\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {/* Table Container with Horizontal Scroll on Mobile */}\n              <div className=\"overflow-x-auto rounded-lg border border-gray-200 dark:border-gray-700\">\n                <Table>\n                  <TableHeader>\n                    <TableRow className={isDarkMode ? 'border-gray-700 hover:bg-gray-750' : ''}>\n                      <TableHead className={isDarkMode ? 'text-gray-300' : ''}>\n                        <Button\n                          variant=\"ghost\"\n                          onClick={() => handleSort('product')}\n                          className={`flex items-center font-semibold -ml-4 ${isDarkMode ? 'hover:bg-gray-700 text-gray-300' : ''}`}\n                        >\n                          Product\n                          {getSortIcon('product')}\n                        </Button>\n                      </TableHead>\n                      <TableHead className={`text-right ${isDarkMode ? 'text-gray-300' : ''}`}>\n                        <Button\n                          variant=\"ghost\"\n                          onClick={() => handleSort('sales')}\n                          className={`flex items-center font-semibold ml-auto ${isDarkMode ? 'hover:bg-gray-700 text-gray-300' : ''}`}\n                        >\n                          Sales\n                          {getSortIcon('sales')}\n                        </Button>\n                      </TableHead>\n                      <TableHead className={`text-right ${isDarkMode ? 'text-gray-300' : ''}`}>\n                        <Button\n                          variant=\"ghost\"\n                          onClick={() => handleSort('revenue')}\n                          className={`flex items-center font-semibold ml-auto ${isDarkMode ? 'hover:bg-gray-700 text-gray-300' : ''}`}\n                        >\n                          Revenue\n                          {getSortIcon('revenue')}\n                        </Button>\n                      </TableHead>\n                      <TableHead className={`text-center ${isDarkMode ? 'text-gray-300' : ''}`}>\n                        <Button\n                          variant=\"ghost\"\n                          onClick={() => handleSort('status')}\n                          className={`flex items-center font-semibold mx-auto ${isDarkMode ? 'hover:bg-gray-700 text-gray-300' : ''}`}\n                        >\n                          Status\n                          {getSortIcon('status')}\n                        </Button>\n                      </TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {paginatedData().map((row) => (\n                      <TableRow \n                        key={row.id}\n                        className={isDarkMode ? 'border-gray-700 hover:bg-gray-750' : 'hover:bg-gray-50'}\n                      >\n                        <TableCell className={`font-medium ${isDarkMode ? 'text-gray-200' : ''}`}>\n                          {row.product}\n                        </TableCell>\n                        <TableCell className={`text-right ${isDarkMode ? 'text-gray-300' : ''}`}>\n                          {row.sales.toLocaleString()}\n                        </TableCell>\n                        <TableCell className={`text-right ${isDarkMode ? 'text-gray-300' : ''}`}>\n                          ${row.revenue.toLocaleString()}\n                        </TableCell>\n                        <TableCell className=\"text-center\">\n                          {getStatusBadge(row.status)}\n                        </TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              </div>\n\n              {/* Pagination Controls */}\n              <div className=\"flex flex-col sm:flex-row items-center justify-between gap-4 px-2\">\n                <div className={`text-sm ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                  Showing {((currentPage - 1) * ITEMS_PER_PAGE) + 1} to {Math.min(currentPage * ITEMS_PER_PAGE, tableData.length)} of {tableData.length} products\n                </div>\n                \n                <div className=\"flex items-center gap-2\">\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => setCurrentPage(prev => Math.max(1, prev - 1))}\n                    disabled={currentPage === 1}\n                    className={isDarkMode ? 'border-gray-700 text-gray-300 hover:bg-gray-700' : ''}\n                  >\n                    Previous\n                  </Button>\n                  \n                  <div className=\"flex gap-1\">\n                    {Array.from({ length: totalPages }, (_, i) => i + 1).map((page) => (\n                      <Button\n                        key={page}\n                        variant={currentPage === page ? 'default' : 'outline'}\n                        size=\"sm\"\n                        onClick={() => setCurrentPage(page)}\n                        className={\n                          currentPage === page\n                            ? ''\n                            : isDarkMode\n                            ? 'border-gray-700 text-gray-300 hover:bg-gray-700'\n                            : ''\n                        }\n                      >\n                        {page}\n                      </Button>\n                    ))}\n                  </div>\n                  \n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => setCurrentPage(prev => Math.min(totalPages, prev + 1))}\n                    disabled={currentPage === totalPages}\n                    className={isDarkMode ? 'border-gray-700 text-gray-300 hover:bg-gray-700' : ''}\n                  >\n                    Next\n                  </Button>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 md:gap-6 mt-8\">\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={`flex items-center gap-2 ${isDarkMode ? 'text-white' : ''}`}>\n                <Activity className=\"h-5 w-5 text-blue-500\" />\n                Active Connections\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <div className={`text-3xl font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                    {realtimeStats.activeConnections.toLocaleString()}\n                  </div>\n                  <div className={`text-sm mt-1 ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                    Live connections\n                  </div>\n                </div>\n                <div className=\"relative\">\n                  <div className=\"h-12 w-12 rounded-full bg-blue-500 opacity-20 animate-ping absolute\"></div>\n                  <div className=\"h-12 w-12 rounded-full bg-blue-500 opacity-40 flex items-center justify-center\">\n                    <div className=\"h-6 w-6 rounded-full bg-blue-600\"></div>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={`flex items-center gap-2 ${isDarkMode ? 'text-white' : ''}`}>\n                <Zap className=\"h-5 w-5 text-yellow-500\" />\n                Data Points\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <div className={`text-3xl font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                    {realtimeStats.dataPoints.toLocaleString()}\n                  </div>\n                  <div className={`text-sm mt-1 ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                    Processed today\n                  </div>\n                </div>\n                <div className=\"relative\">\n                  <div className=\"h-12 w-12 rounded-full bg-yellow-500 opacity-20 animate-ping absolute\" style={{ animationDuration: '1.5s' }}></div>\n                  <div className=\"h-12 w-12 rounded-full bg-yellow-500 opacity-40 flex items-center justify-center\">\n                    <div className=\"h-6 w-6 rounded-full bg-yellow-600\"></div>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={`flex items-center gap-2 ${isDarkMode ? 'text-white' : ''}`}>\n                <Clock className=\"h-5 w-5 text-green-500\" />\n                Update Frequency\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <div className={`text-3xl font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                    {realtimeStats.updateFrequency}s\n                  </div>\n                  <div className={`text-sm mt-1 ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                    Last updated: {lastUpdate.toLocaleTimeString()}\n                  </div>\n                </div>\n                <div className=\"relative\">\n                  <div className=\"h-12 w-12 rounded-full bg-green-500 opacity-20 animate-ping absolute\" style={{ animationDuration: '2s' }}></div>\n                  <div className=\"h-12 w-12 rounded-full bg-green-500 opacity-40 flex items-center justify-center\">\n                    <div className=\"h-6 w-6 rounded-full bg-green-600\"></div>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}",
    "error": null,
    "elapsed_time": 79.34758281707764,
    "success": true
  }
}