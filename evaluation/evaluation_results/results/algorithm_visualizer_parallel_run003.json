{
  "prompt_id": "algorithm_visualizer",
  "prompt_name": "Algorithm Visualizer",
  "mode": "parallel",
  "run_number": 3,
  "timestamp": "2025-10-13T20:36:49.567530",
  "response_time": 104.38266825675964,
  "total_tokens": null,
  "response_content": "import { useState, useCallback } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Slider } from '@/components/ui/slider';\nimport { Play, Pause, RotateCcw, Zap, BarChart3 } from 'lucide-react';\nimport { motion } from 'framer-motion';\nimport { useEffect, useRef } from 'react';\n\ninterface ArrayElement {\n  value: number;\n  id: string;\n  isComparing?: boolean;\n  isSwapping?: boolean;\n  isSorted?: boolean;\n}\n\ninterface AlgorithmStep {\n  array: ArrayElement[];\n  comparingIndices: number[];\n  swappingIndices: number[];\n  sortedIndices: number[];\n}\n\ntype AlgorithmType = 'bubble' | 'quick' | 'merge' | 'insertion';\n\nconst NEON_COLORS = [\n  '#00ffff',\n  '#ff00ff', \n  '#00ff00',\n  '#ffff00',\n  '#ff0066',\n  '#00ffaa'\n];\n\nconst mockAlgorithms = [\n  { id: 'bubble', name: 'Bubble Sort', complexity: 'O(n\u00b2)' },\n  { id: 'quick', name: 'Quick Sort', complexity: 'O(n log n)' },\n  { id: 'merge', name: 'Merge Sort', complexity: 'O(n log n)' },\n  { id: 'insertion', name: 'Insertion Sort', complexity: 'O(n\u00b2)' }\n];\n\n// Hook to handle step-by-step animation\nconst useAnimationLoop = (\n  isPlaying: boolean,\n  steps: AlgorithmStep[],\n  currentStep: number,\n  speed: number[],\n  onStepComplete: () => void,\n  onAnimationEnd: () => void\n) => {\n  const timeoutRef = useRef<NodeJS.Timeout | null>(null);\n\n  useEffect(() => {\n    if (isPlaying && currentStep < steps.length) {\n      const delay = 1000 - speed[0] * 9.5; // Convert speed (0-100) to delay (1000ms-50ms)\n      timeoutRef.current = setTimeout(() => {\n        onStepComplete();\n      }, delay);\n    } else if (isPlaying && currentStep >= steps.length) {\n      onAnimationEnd();\n    }\n\n    return () => {\n      if (timeoutRef.current) {\n        clearTimeout(timeoutRef.current);\n      }\n    };\n  }, [isPlaying, currentStep, steps.length, speed, onStepComplete, onAnimationEnd]);\n};\n\nexport default function AlgorithmVisualizer() {\n  const [array, setArray] = useState<ArrayElement[]>([]);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [speed, setSpeed] = useState([50]);\n  const [arraySize, setArraySize] = useState([20]);\n  const [selectedAlgorithm, setSelectedAlgorithm] = useState<AlgorithmType>('bubble');\n  const [currentStep, setCurrentStep] = useState(0);\n  const [steps, setSteps] = useState<AlgorithmStep[]>([]);\n\n  const generateRandomArray = useCallback(() => {\n    const newArray: ArrayElement[] = Array.from({ length: arraySize[0] }, (_, i) => ({\n      value: Math.floor(Math.random() * 100) + 5,\n      id: `element-${i}-${Date.now()}`,\n      isComparing: false,\n      isSwapping: false,\n      isSorted: false\n    }));\n    setArray(newArray);\n    setSteps([]);\n    setCurrentStep(0);\n    setIsPlaying(false);\n  }, [arraySize]);\n\n  const resetVisualization = useCallback(() => {\n\n    setIsPlaying(false);\n    setCurrentStep(0);\n    setSteps([]);\n    generateRandomArray();\n  }, [generateRandomArray]);\n\n  const startVisualization = useCallback(() => {\n    if (steps.length === 0) return;\n    if (currentStep >= steps.length) return;\n    \n    setIsPlaying(true);\n  }, [steps, speed, currentStep]);\n\n  const pauseVisualization = useCallback(() => {\n\n    setIsPlaying(false);\n  }, []);\n\n  const generateSortingSteps = useCallback((algorithm: AlgorithmType) => {\n    const sortedArray = [...array];\n    const newSteps: AlgorithmStep[] = [];\n\n    const addStep = (arr: ArrayElement[], comparing: number[] = [], swapping: number[] = [], sorted: number[] = []) => {\n      newSteps.push({\n        array: arr.map(el => ({ ...el })),\n        comparingIndices: [...comparing],\n        swappingIndices: [...swapping],\n        sortedIndices: [...sorted]\n      });\n    };\n\n    // Initial state\n    addStep(sortedArray);\n\n    switch (algorithm) {\n      case 'bubble': {\n        const sortedSet = new Set<number>();\n        for (let i = 0; i < sortedArray.length - 1; i++) {\n          for (let j = 0; j < sortedArray.length - i - 1; j++) {\n            // Comparing\n            addStep(sortedArray, [j, j + 1], [], Array.from(sortedSet));\n            \n            if (sortedArray[j].value > sortedArray[j + 1].value) {\n              // Swapping\n              addStep(sortedArray, [], [j, j + 1], Array.from(sortedSet));\n              [sortedArray[j], sortedArray[j + 1]] = [sortedArray[j + 1], sortedArray[j]];\n              addStep(sortedArray, [], [], Array.from(sortedSet));\n            }\n          }\n          sortedSet.add(sortedArray.length - i - 1);\n          addStep(sortedArray, [], [], Array.from(sortedSet));\n        }\n        sortedSet.add(0);\n        addStep(sortedArray, [], [], Array.from(sortedSet));\n        break;\n      }\n\n      case 'insertion': {\n        const sortedSet = new Set<number>([0]);\n        addStep(sortedArray, [], [], [0]);\n        \n        for (let i = 1; i < sortedArray.length; i++) {\n          const key = sortedArray[i];\n          let j = i - 1;\n          \n          addStep(sortedArray, [i], [], Array.from(sortedSet));\n          \n          while (j >= 0 && sortedArray[j].value > key.value) {\n            addStep(sortedArray, [j, j + 1], [], Array.from(sortedSet));\n            addStep(sortedArray, [], [j, j + 1], Array.from(sortedSet));\n            sortedArray[j + 1] = sortedArray[j];\n            addStep(sortedArray, [], [], Array.from(sortedSet));\n            j--;\n          }\n          \n          sortedArray[j + 1] = key;\n          sortedSet.add(i);\n          addStep(sortedArray, [], [], Array.from(sortedSet));\n        }\n        break;\n      }\n\n      case 'quick': {\n        const sortedSet = new Set<number>();\n        \n        const partition = (low: number, high: number): number => {\n          const pivot = sortedArray[high];\n          addStep(sortedArray, [high], [], Array.from(sortedSet));\n          let i = low - 1;\n\n          for (let j = low; j < high; j++) {\n            addStep(sortedArray, [j, high], [], Array.from(sortedSet));\n            \n            if (sortedArray[j].value < pivot.value) {\n              i++;\n              if (i !== j) {\n                addStep(sortedArray, [], [i, j], Array.from(sortedSet));\n                [sortedArray[i], sortedArray[j]] = [sortedArray[j], sortedArray[i]];\n                addStep(sortedArray, [], [], Array.from(sortedSet));\n              }\n            }\n          }\n\n          addStep(sortedArray, [], [i + 1, high], Array.from(sortedSet));\n          [sortedArray[i + 1], sortedArray[high]] = [sortedArray[high], sortedArray[i + 1]];\n          sortedSet.add(i + 1);\n          addStep(sortedArray, [], [], Array.from(sortedSet));\n          \n          return i + 1;\n        };\n\n        const quickSort = (low: number, high: number) => {\n          if (low < high) {\n            const pi = partition(low, high);\n            quickSort(low, pi - 1);\n            quickSort(pi + 1, high);\n          } else if (low === high) {\n            sortedSet.add(low);\n            addStep(sortedArray, [], [], Array.from(sortedSet));\n          }\n        };\n\n        quickSort(0, sortedArray.length - 1);\n        break;\n      }\n\n      case 'merge': {\n        const sortedSet = new Set<number>();\n        \n        const merge = (left: number, mid: number, right: number) => {\n          const leftArr = sortedArray.slice(left, mid + 1);\n          const rightArr = sortedArray.slice(mid + 1, right + 1);\n          \n          let i = 0, j = 0, k = left;\n          \n          while (i < leftArr.length && j < rightArr.length) {\n            addStep(sortedArray, [left + i, mid + 1 + j], [], Array.from(sortedSet));\n            \n            if (leftArr[i].value <= rightArr[j].value) {\n              sortedArray[k] = leftArr[i];\n              i++;\n            } else {\n              sortedArray[k] = rightArr[j];\n              j++;\n            }\n            addStep(sortedArray, [], [k], Array.from(sortedSet));\n            k++;\n          }\n          \n          while (i < leftArr.length) {\n            sortedArray[k] = leftArr[i];\n            addStep(sortedArray, [], [k], Array.from(sortedSet));\n            i++;\n            k++;\n          }\n          \n          while (j < rightArr.length) {\n            sortedArray[k] = rightArr[j];\n            addStep(sortedArray, [], [k], Array.from(sortedSet));\n            j++;\n            k++;\n          }\n          \n          if (right - left + 1 === sortedArray.length) {\n            for (let idx = left; idx <= right; idx++) {\n              sortedSet.add(idx);\n            }\n          }\n          addStep(sortedArray, [], [], Array.from(sortedSet));\n        };\n\n        const mergeSort = (left: number, right: number) => {\n          if (left < right) {\n            const mid = Math.floor((left + right) / 2);\n            mergeSort(left, mid);\n            mergeSort(mid + 1, right);\n            merge(left, mid, right);\n          } else if (left === right && sortedArray.length === 1) {\n            sortedSet.add(left);\n            addStep(sortedArray, [], [], Array.from(sortedSet));\n          }\n        };\n\n        mergeSort(0, sortedArray.length - 1);\n        \n        // Mark all as sorted at the end\n        for (let i = 0; i < sortedArray.length; i++) {\n          sortedSet.add(i);\n        }\n        addStep(sortedArray, [], [], Array.from(sortedSet));\n        break;\n      }\n    }\n\n    setSteps(newSteps);\n    setCurrentStep(0);\n  }, [array]);\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-gray-900 via-purple-900 to-gray-900 p-8\">\n      <div className=\"max-w-7xl mx-auto space-y-8\">\n        <motion.div\n          initial={{ opacity: 0, y: -20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.8 }}\n          className=\"text-center space-y-4\"\n        >\n          <motion.h1\n            className=\"text-6xl font-bold bg-gradient-to-r from-cyan-400 via-purple-400 to-pink-400 bg-clip-text text-transparent\"\n            animate={{\n              textShadow: [\n                '0 0 20px rgba(0, 255, 255, 0.5)',\n                '0 0 40px rgba(255, 0, 255, 0.5)',\n                '0 0 20px rgba(0, 255, 255, 0.5)'\n              ]\n            }}\n            transition={{ duration: 2, repeat: Infinity }}\n          >\n            Algorithm Visualizer\n          </motion.h1>\n          <div className=\"flex items-center justify-center gap-4\">\n            <motion.div\n              className=\"text-2xl font-semibold text-cyan-300\"\n              animate={{ opacity: [0.7, 1, 0.7] }}\n              transition={{ duration: 2, repeat: Infinity }}\n            >\n              {mockAlgorithms.find(a => a.id === selectedAlgorithm)?.name}\n            </motion.div>\n            <motion.div\n              className=\"px-4 py-2 rounded-full bg-purple-500/20 border border-purple-400/50 backdrop-blur-sm\"\n              whileHover={{ scale: 1.05, boxShadow: '0 0 20px rgba(168, 85, 247, 0.6)' }}\n            >\n              <div className=\"flex items-center gap-2\">\n                <BarChart3 className=\"w-5 h-5 text-purple-300\" />\n                <span className=\"text-purple-200 font-mono\">\n                  {mockAlgorithms.find(a => a.id === selectedAlgorithm)?.complexity}\n                </span>\n              </div>\n            </motion.div>\n          </div>\n        </motion.div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-6\">\n          <div className=\"lg:col-span-1 space-y-6\">\n            <motion.div\n              initial={{ opacity: 0, x: -50 }}\n              animate={{ opacity: 1, x: 0 }}\n              className=\"bg-gray-900/50 backdrop-blur-lg border border-cyan-500/30 rounded-xl p-6 shadow-[0_0_30px_rgba(0,255,255,0.3)] hover:shadow-[0_0_50px_rgba(0,255,255,0.5)] transition-shadow duration-300\"\n            >\n              <div className=\"space-y-6\">\n                {/* Algorithm Selection */}\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center gap-2 text-cyan-400 mb-4\">\n                    <Zap className=\"w-5 h-5\" />\n                    <h3 className=\"font-bold text-lg\">Algorithm</h3>\n                  </div>\n                  <div className=\"grid grid-cols-1 gap-2\">\n                    {mockAlgorithms.map((algo) => (\n                      <motion.button\n                        key={algo.id}\n                        whileHover={{ scale: 1.02 }}\n                        whileTap={{ scale: 0.98 }}\n                        onClick={() => {\n                          setSelectedAlgorithm(algo.id as AlgorithmType);\n                          generateSortingSteps(algo.id as AlgorithmType);\n                        }}\n                        disabled={isPlaying}\n                        className={`p-3 rounded-lg border transition-all duration-300 text-left ${\n                          selectedAlgorithm === algo.id\n                            ? 'bg-cyan-500/20 border-cyan-400 shadow-[0_0_20px_rgba(0,255,255,0.4)]'\n                            : 'bg-gray-800/50 border-gray-700 hover:border-cyan-500/50'\n                        } disabled:opacity-50 disabled:cursor-not-allowed`}\n                      >\n                        <div className=\"font-semibold text-white\">{algo.name}</div>\n                        <div className=\"text-xs text-gray-400 mt-1\">{algo.complexity}</div>\n                      </motion.button>\n                    ))}\n                  </div>\n                </div>\n\n                {/* Array Size Control */}\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center gap-2 text-purple-400\">\n                    <BarChart3 className=\"w-5 h-5\" />\n                    <label className=\"font-semibold\">Array Size: {arraySize[0]}</label>\n                  </div>\n                  <Slider\n                    value={arraySize}\n                    onValueChange={(value) => {\n                      setArraySize(value);\n                      if (!isPlaying) {\n                        generateRandomArray();\n                      }\n                    }}\n                    min={5}\n                    max={50}\n                    step={1}\n                    disabled={isPlaying}\n                    className=\"cursor-pointer\"\n                  />\n                </div>\n\n                {/* Speed Control */}\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center gap-2 text-pink-400\">\n                    <Zap className=\"w-5 h-5\" />\n                    <label className=\"font-semibold\">Speed: {speed[0]}%</label>\n                  </div>\n                  <Slider\n                    value={speed}\n                    onValueChange={setSpeed}\n                    min={10}\n                    max={100}\n                    step={10}\n                    className=\"cursor-pointer\"\n                  />\n                </div>\n\n                {/* Control Buttons */}\n                <div className=\"space-y-3 pt-4 border-t border-gray-700\">\n                  <Button\n                    onClick={isPlaying ? pauseVisualization : startVisualization}\n                    disabled={steps.length === 0 || (currentStep >= steps.length && !isPlaying)}\n                    className=\"w-full bg-gradient-to-r from-cyan-500 to-blue-500 hover:from-cyan-400 hover:to-blue-400 text-white font-bold py-6 rounded-lg shadow-[0_0_20px_rgba(0,255,255,0.5)] hover:shadow-[0_0_30px_rgba(0,255,255,0.7)] transition-all duration-300\"\n                  >\n                    {isPlaying ? (\n                      <>\n                        <Pause className=\"w-5 h-5 mr-2\" />\n                        Pause\n                      </>\n                    ) : (\n                      <>\n                        <Play className=\"w-5 h-5 mr-2\" />\n                        {currentStep >= steps.length ? 'Restart' : 'Play'}\n                      </>\n                    )}\n                  </Button>\n\n                  <Button\n                    onClick={resetVisualization}\n                    disabled={isPlaying}\n                    variant=\"outline\"\n                    className=\"w-full border-2 border-purple-500/50 bg-gray-800/50 hover:bg-purple-500/20 hover:border-purple-400 text-purple-300 font-bold py-6 rounded-lg shadow-[0_0_15px_rgba(168,85,247,0.3)] hover:shadow-[0_0_25px_rgba(168,85,247,0.5)] transition-all duration-300\"\n                  >\n                    <RotateCcw className=\"w-5 h-5 mr-2\" />\n                    Reset\n                  </Button>\n                </div>\n\n                {/* Progress Indicator */}\n                {steps.length > 0 && (\n                  <div className=\"space-y-2 pt-4 border-t border-gray-700\">\n                    <div className=\"flex justify-between text-sm text-gray-400\">\n                      <span>Progress</span>\n                      <span>{Math.min(currentStep, steps.length)} / {steps.length}</span>\n                    </div>\n                    <div className=\"w-full h-2 bg-gray-800 rounded-full overflow-hidden\">\n                      <motion.div\n                        className=\"h-full bg-gradient-to-r from-cyan-500 via-purple-500 to-pink-500 shadow-[0_0_10px_rgba(0,255,255,0.5)]\"\n                        initial={{ width: 0 }}\n                        animate={{ width: `${(Math.min(currentStep, steps.length) / steps.length) * 100}%` }}\n                        transition={{ duration: 0.3 }}\n                      />\n                    </div>\n                  </div>\n                )}\n              </div>\n            </motion.div>\n            \n            <div className=\"bg-gray-900/50 backdrop-blur-lg border border-cyan-500/30 rounded-xl p-6 shadow-2xl shadow-cyan-500/20\">\n              <div className=\"space-y-6\">\n                <div>\n                  <h3 className=\"text-sm font-semibold text-cyan-400 mb-3 flex items-center gap-2\">\n                    <Zap className=\"w-4 h-4\" />\n                    Algorithm\n                  </h3>\n                  <div className=\"grid grid-cols-1 gap-2\">\n                    {mockAlgorithms.map((algo) => (\n                      <motion.button\n                        key={algo.id}\n                        onClick={() => setSelectedAlgorithm(algo.id as AlgorithmType)}\n                        className={`relative p-3 rounded-lg border transition-all duration-300 text-left ${\n                          selectedAlgorithm === algo.id\n                            ? 'bg-cyan-500/20 border-cyan-400 shadow-lg shadow-cyan-500/50'\n                            : 'bg-gray-800/50 border-gray-700 hover:border-cyan-500/50 hover:shadow-md hover:shadow-cyan-500/30'\n                        }`}\n                        whileHover={{ scale: 1.02 }}\n                        whileTap={{ scale: 0.98 }}\n                      >\n                        <div className=\"flex flex-col gap-1\">\n                          <span className={`text-sm font-medium ${\n                            selectedAlgorithm === algo.id ? 'text-cyan-300' : 'text-gray-300'\n                          }`}>\n                            {algo.name}\n                          </span>\n                          <span className={`text-xs ${\n                            selectedAlgorithm === algo.id ? 'text-cyan-400/80' : 'text-gray-500'\n                          }`}>\n                            {algo.complexity}\n                          </span>\n                        </div>\n                        {selectedAlgorithm === algo.id && (\n                          <motion.div\n                            className=\"absolute inset-0 rounded-lg border-2 border-cyan-400\"\n                            layoutId=\"algorithmSelector\"\n                            transition={{ type: \"spring\", stiffness: 300, damping: 30 }}\n                          />\n                        )}\n                      </motion.button>\n                    ))}\n                  </div>\n                </div>\n\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <label className=\"text-cyan-400 text-sm font-medium flex items-center gap-2\">\n                      <Zap className=\"w-4 h-4\" />\n                      Speed\n                    </label>\n                    <span className=\"text-cyan-300 text-xs\">{speed[0]}ms</span>\n                  </div>\n                  <Slider\n                    value={speed}\n                    onValueChange={setSpeed}\n                    min={10}\n                    max={200}\n                    step={10}\n                    className=\"[&_[role=slider]]:h-4 [&_[role=slider]]:w-4 [&_[role=slider]]:bg-cyan-400 [&_[role=slider]]:border-2 [&_[role=slider]]:border-cyan-300 [&_[role=slider]]:shadow-[0_0_15px_rgba(34,211,238,0.8)] [&_[role=slider]]:transition-all [&_[role=slider]]:hover:shadow-[0_0_25px_rgba(34,211,238,1)] [&_.relative]:h-2 [&_.relative]:bg-gray-800 [&_.relative]:rounded-full [&_.relative]:border [&_.relative]:border-cyan-500/30 [&_.relative_.bg-primary]:bg-gradient-to-r [&_.relative_.bg-primary]:from-cyan-500 [&_.relative_.bg-primary]:to-purple-500 [&_.relative_.bg-primary]:shadow-[0_0_10px_rgba(34,211,238,0.5)]\"\n                  /></parameter>\n                </div>\n\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <label className=\"text-cyan-400 text-sm font-medium flex items-center gap-2\">\n                      <BarChart3 className=\"w-4 h-4\" />\n                      Array Size\n                    </label>\n                    <span className=\"text-cyan-300 text-xs\">{arraySize[0]}</span>\n                  </div>\n                  <Slider\n                    value={arraySize}\n                    onValueChange={setArraySize}\n                    min={5}\n                    max={100}\n                    step={1}\n                    className=\"[&_[role=slider]]:bg-gradient-to-r [&_[role=slider]]:from-purple-500 [&_[role=slider]]:to-pink-500 [&_[role=slider]]:border-2 [&_[role=slider]]:border-purple-300 [&_[role=slider]]:shadow-lg [&_[role=slider]]:shadow-purple-500/50 [&_[role=slider]]:transition-all [&_[role=slider]]:hover:shadow-purple-500/80 [&_[role=slider]]:hover:scale-110 [&>span]:bg-gradient-to-r [&>span]:from-purple-500/30 [&>span]:to-pink-500/30 [&>span]:h-2 [&>span]:rounded-full\"\n                  />\n                </div>\n\n                <div className=\"flex gap-3 pt-4\">\n                  <motion.button\n                    onClick={isPlaying ? pauseVisualization : startVisualization}\n                    disabled={array.length === 0 || (steps.length === 0 && !isPlaying)}\n                    className=\"flex-1 relative group overflow-hidden rounded-lg bg-gradient-to-r from-cyan-500 to-purple-500 p-[2px] disabled:opacity-50 disabled:cursor-not-allowed\"\n                    whileHover={{ scale: 1.05 }}\n                    whileTap={{ scale: 0.95 }}\n                  >\n                    <div className=\"relative bg-gray-900 rounded-lg px-4 py-3 flex items-center justify-center gap-2 group-hover:bg-gray-900/80 transition-colors\">\n                      <motion.div\n                        animate={{\n                          rotate: isPlaying ? 0 : 0,\n                          scale: isPlaying ? 1 : 1\n                        }}\n                        transition={{ duration: 0.3 }}\n                      >\n                        {isPlaying ? (\n                          <Pause className=\"w-5 h-5 text-cyan-400\" />\n                        ) : (\n                          <Play className=\"w-5 h-5 text-cyan-400\" />\n                        )}\n                      </motion.div>\n                      <span className=\"text-sm font-semibold bg-gradient-to-r from-cyan-400 to-purple-400 bg-clip-text text-transparent\">\n                        {isPlaying ? 'Pause' : 'Play'}\n                      </span>\n                      <motion.div\n                        className=\"absolute inset-0 bg-gradient-to-r from-cyan-500/20 to-purple-500/20 rounded-lg\"\n                        animate={{\n                          opacity: [0.5, 1, 0.5],\n                          boxShadow: [\n                            '0 0 20px rgba(0, 255, 255, 0.3)',\n                            '0 0 40px rgba(168, 85, 247, 0.5)',\n                            '0 0 20px rgba(0, 255, 255, 0.3)'\n                          ]\n                        }}\n                        transition={{ duration: 2, repeat: Infinity }}\n                      />\n                    </div>\n                  </motion.button>\n                  <motion.button\n                    onClick={resetVisualization}\n                    className=\"flex-1 px-6 py-3 bg-gradient-to-r from-pink-600 to-red-600 text-white rounded-lg font-semibold shadow-lg shadow-pink-500/50 hover:shadow-pink-500/80 transition-all duration-300 flex items-center justify-center gap-2 border border-pink-400/50\"\n                    whileHover={{ \n                      scale: 1.05,\n                      boxShadow: '0 0 30px rgba(236, 72, 153, 0.8)'\n                    }}\n                    whileTap={{ \n                      scale: 0.95,\n                      rotate: 360\n                    }}\n                    transition={{ \n                      rotate: { duration: 0.6, ease: \"easeInOut\" }\n                    }}\n                  >\n                    <RotateCcw className=\"w-5 h-5\" />\n                    Reset\n                  </motion.button>\n                </div>\n              </div>\n            </div>\n\n            <motion.div\n            initial={{ opacity: 0, x: -50 }}\n            animate={{ opacity: 1, x: 0 }}\n            transition={{ delay: 0.2 }}\n            className=\"bg-gray-900/50 backdrop-blur-lg border border-purple-500/30 rounded-xl p-6 shadow-2xl shadow-purple-500/20\"\n          >\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center gap-2 text-purple-400 mb-4\">\n                <BarChart3 className=\"w-5 h-5\" />\n                <h3 className=\"font-bold text-lg\">Statistics</h3>\n              </div>\n\n              <div className=\"grid grid-cols-1 gap-4\">\n                {/* Comparisons Counter */}\n                <motion.div\n                  className=\"relative overflow-hidden rounded-lg bg-gradient-to-br from-cyan-500/10 to-cyan-600/5 border border-cyan-500/30 p-4\"\n                  whileHover={{ scale: 1.02, boxShadow: '0 0 25px rgba(6, 182, 212, 0.4)' }}\n                  transition={{ type: \"spring\", stiffness: 300 }}\n                >\n                  <div className=\"relative z-10\">\n                    <div className=\"text-xs text-cyan-400 font-medium mb-1 uppercase tracking-wider\">\n                      Comparisons\n                    </div>\n                    <motion.div\n                      className=\"text-3xl font-bold text-cyan-300\"\n                      key={currentStep}\n                      initial={{ scale: 1.2, opacity: 0.5 }}\n                      animate={{ scale: 1, opacity: 1 }}\n                      transition={{ duration: 0.3 }}\n                    >\n                      {steps[currentStep]?.comparingIndices.length > 0 ? currentStep : 0}\n                    </motion.div>\n                  </div>\n                  <motion.div\n                    className=\"absolute inset-0 bg-gradient-to-r from-cyan-500/20 to-transparent\"\n                    animate={{\n                      opacity: [0.3, 0.6, 0.3],\n                      x: [-100, 100]\n                    }}\n                    transition={{ duration: 3, repeat: Infinity }}\n                  />\n                </motion.div>\n\n                {/* Swaps Counter */}\n                <motion.div\n                  className=\"relative overflow-hidden rounded-lg bg-gradient-to-br from-pink-500/10 to-pink-600/5 border border-pink-500/30 p-4\"\n                  whileHover={{ scale: 1.02, boxShadow: '0 0 25px rgba(236, 72, 153, 0.4)' }}\n                  transition={{ type: \"spring\", stiffness: 300 }}\n                >\n                  <div className=\"relative z-10\">\n                    <div className=\"text-xs text-pink-400 font-medium mb-1 uppercase tracking-wider\">\n                      Swaps\n                    </div>\n                    <motion.div\n                      className=\"text-3xl font-bold text-pink-300\"\n                      key={`swap-${currentStep}`}\n                      initial={{ scale: 1.2, opacity: 0.5 }}\n                      animate={{ scale: 1, opacity: 1 }}\n                      transition={{ duration: 0.3 }}\n                    >\n                      {steps[currentStep]?.swappingIndices.length > 0 ? Math.floor(currentStep / 2) : 0}\n                    </motion.div>\n                  </div>\n                  <motion.div\n                    className=\"absolute inset-0 bg-gradient-to-r from-pink-500/20 to-transparent\"\n                    animate={{\n                      opacity: [0.3, 0.6, 0.3],\n                      x: [-100, 100]\n                    }}\n                    transition={{ duration: 3, repeat: Infinity, delay: 0.5 }}\n                  />\n                </motion.div>\n\n                {/* Progress Bar */}\n                <motion.div\n                  className=\"relative overflow-hidden rounded-lg bg-gradient-to-br from-purple-500/10 to-purple-600/5 border border-purple-500/30 p-4\"\n                  whileHover={{ scale: 1.02, boxShadow: '0 0 25px rgba(168, 85, 247, 0.4)' }}\n                  transition={{ type: \"spring\", stiffness: 300 }}\n                >\n                  <div className=\"relative z-10\">\n                    <div className=\"flex items-center justify-between mb-2\">\n                      <div className=\"text-xs text-purple-400 font-medium uppercase tracking-wider\">\n                        Progress\n                      </div>\n                      <div className=\"text-xs text-purple-300 font-mono\">\n                        {steps.length > 0 ? Math.round((currentStep / steps.length) * 100) : 0}%\n                      </div>\n                    </div>\n                    <div className=\"relative h-3 bg-gray-800/50 rounded-full overflow-hidden border border-purple-500/20\">\n                      <motion.div\n                        className=\"absolute inset-y-0 left-0 bg-gradient-to-r from-purple-500 via-pink-500 to-cyan-500 rounded-full\"\n                        initial={{ width: 0 }}\n                        animate={{\n                          width: steps.length > 0 ? `${(currentStep / steps.length) * 100}%` : '0%'\n                        }}\n                        transition={{ duration: 0.3, ease: \"easeOut\" }}\n                      />\n                      <motion.div\n                        className=\"absolute inset-0 bg-gradient-to-r from-transparent via-white/30 to-transparent\"\n                        animate={{\n                          x: ['-100%', '200%']\n                        }}\n                        transition={{ duration: 2, repeat: Infinity, ease: \"linear\" }}\n                      />\n                    </div>\n                  </div>\n                </motion.div>\n\n                {/* Sorted Elements Counter */}\n                <motion.div\n                  className=\"relative overflow-hidden rounded-lg bg-gradient-to-br from-green-500/10 to-green-600/5 border border-green-500/30 p-4\"\n                  whileHover={{ scale: 1.02, boxShadow: '0 0 25px rgba(34, 197, 94, 0.4)' }}\n                  transition={{ type: \"spring\", stiffness: 300 }}\n                >\n                  <div className=\"relative z-10\">\n                    <div className=\"text-xs text-green-400 font-medium mb-1 uppercase tracking-wider\">\n                      Sorted Elements\n                    </div>\n                    <div className=\"flex items-baseline gap-2\">\n                      <motion.div\n                        className=\"text-3xl font-bold text-green-300\"\n                        key={`sorted-${currentStep}`}\n                        initial={{ scale: 1.2, opacity: 0.5 }}\n                        animate={{ scale: 1, opacity: 1 }}\n                        transition={{ duration: 0.3 }}\n                      >\n                        {steps[currentStep]?.sortedIndices.length || 0}\n                      </motion.div>\n                      <div className=\"text-sm text-green-400/60\">\n                        / {array.length}\n                      </div>\n                    </div>\n                  </div>\n                  <motion.div\n                    className=\"absolute inset-0 bg-gradient-to-r from-green-500/20 to-transparent\"\n                    animate={{\n                      opacity: [0.3, 0.6, 0.3],\n                      x: [-100, 100]\n                    }}\n                    transition={{ duration: 3, repeat: Infinity, delay: 1 }}\n                  />\n                </motion.div>\n\n                {/* Current Step Indicator */}\n                <motion.div\n                  className=\"relative overflow-hidden rounded-lg bg-gradient-to-br from-yellow-500/10 to-yellow-600/5 border border-yellow-500/30 p-4\"\n                  whileHover={{ scale: 1.02, boxShadow: '0 0 25px rgba(234, 179, 8, 0.4)' }}\n                  transition={{ type: \"spring\", stiffness: 300 }}\n                >\n                  <div className=\"relative z-10\">\n                    <div className=\"text-xs text-yellow-400 font-medium mb-1 uppercase tracking-wider\">\n                      Current Step\n                    </div>\n                    <div className=\"flex items-baseline gap-2\">\n                      <motion.div\n                        className=\"text-3xl font-bold text-yellow-300\"\n                        key={`step-${currentStep}`}\n                        initial={{ scale: 1.2, opacity: 0.5 }}\n                        animate={{ scale: 1, opacity: 1 }}\n                        transition={{ duration: 0.3 }}\n                      >\n                        {currentStep}\n                      </motion.div>\n                      <div className=\"text-sm text-yellow-400/60\">\n                        / {steps.length}\n                      </div>\n                    </div>\n                  </div>\n                  <motion.div\n                    className=\"absolute inset-0 bg-gradient-to-r from-yellow-500/20 to-transparent\"\n                    animate={{\n                      opacity: [0.3, 0.6, 0.3],\n                      x: [-100, 100]\n                    }}\n                    transition={{ duration: 3, repeat: Infinity, delay: 1.5 }}\n                  />\n                </motion.div>\n              </div>\n\n              {/* Status Indicator */}\n              <motion.div\n                className=\"mt-4 p-3 rounded-lg bg-gray-800/50 border border-gray-700/50\"\n                animate={{\n                  borderColor: isPlaying \n                    ? ['rgba(34, 211, 238, 0.5)', 'rgba(168, 85, 247, 0.5)', 'rgba(34, 211, 238, 0.5)']\n                    : 'rgba(107, 114, 128, 0.5)'\n                }}\n                transition={{ duration: 2, repeat: Infinity }}\n              >\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-xs text-gray-400 uppercase tracking-wider\">Status</span>\n                  <motion.div\n                    className=\"flex items-center gap-2\"\n                    animate={{\n                      opacity: isPlaying ? [1, 0.6, 1] : 1\n                    }}\n                    transition={{ duration: 1, repeat: Infinity }}\n                  >\n                    <motion.div\n                      className={`w-2 h-2 rounded-full ${\n                        isPlaying ? 'bg-green-400' : 'bg-gray-500'\n                      }`}\n                      animate={{\n                        boxShadow: isPlaying \n                          ? ['0 0 5px rgba(34, 197, 94, 0.8)', '0 0 15px rgba(34, 197, 94, 0.8)', '0 0 5px rgba(34, 197, 94, 0.8)']\n                          : '0 0 0px rgba(107, 114, 128, 0)'\n                      }}\n                      transition={{ duration: 1, repeat: Infinity }}\n                    />\n                    <span className={`text-sm font-medium ${\n                      isPlaying ? 'text-green-400' : 'text-gray-400'\n                    }`}>\n                      {isPlaying ? 'Running' : 'Paused'}\n                    </span>\n                  </motion.div>\n                </div>\n              </motion.div>\n            </div>\n          </motion.div>\n          </div>\n\n          <div className=\"lg:col-span-3\">\n            <div className=\"bg-gray-900/50 backdrop-blur-lg border border-purple-500/30 rounded-xl p-8 shadow-2xl shadow-purple-500/20 min-h-[600px]\">\n              {/* TODO:VisualizationCanvas Main canvas with animated bars, comparison indicators, and swap trails */}\n              \n              <div className=\"relative h-full flex items-end justify-center gap-1\">\n                {array.length === 0 ? (\n                  <motion.div\n                    initial={{ opacity: 0, scale: 0.8 }}\n                    animate={{ opacity: 1, scale: 1 }}\n                    className=\"absolute inset-0 flex items-center justify-center\"\n                  >\n                    <div className=\"text-center space-y-4\">\n                      <motion.div\n                        animate={{\n                          rotate: [0, 360],\n                          scale: [1, 1.2, 1]\n                        }}\n                        transition={{ duration: 3, repeat: Infinity }}\n                      >\n                        <BarChart3 className=\"w-24 h-24 text-cyan-400/50 mx-auto\" />\n                      </motion.div>\n                      <p className=\"text-cyan-300/70 text-lg font-semibold\">\n                        Generate an array to begin\n                      </p>\n                    </div>\n                  </motion.div>\n                ) : (\n                  (steps.length > 0 && currentStep < steps.length ? steps[currentStep].array : array).map((element, index) => {\n                    const currentArray = steps.length > 0 && currentStep < steps.length ? steps[currentStep] : null;\n                    const isComparing = currentArray?.comparingIndices.includes(index);\n                    const isSwapping = currentArray?.swappingIndices.includes(index);\n                    const isSorted = currentArray?.sortedIndices.includes(index);\n                    \n                    const maxValue = Math.max(...array.map(el => el.value));\n                    const heightPercentage = (element.value / maxValue) * 100;\n                    \n                    const getBarColor = () => {\n                      if (isSorted) return '#00ff00';\n                      if (isSwapping) return '#ff0066';\n                      if (isComparing) return '#ffff00';\n                      return NEON_COLORS[index % NEON_COLORS.length];\n                    };\n\n                    const barColor = getBarColor();\n\n                    return (\n                      <motion.div\n                        key={element.id}\n                        layout\n                        initial={{ opacity: 0, y: 50, scale: 0.5 }}\n                        animate={{\n                          opacity: 1,\n                          y: 0,\n                          scale: isSwapping ? 1.15 : isComparing ? 1.1 : 1,\n                          height: `${heightPercentage}%`,\n                          backgroundColor: barColor,\n                          boxShadow: [\n                            `0 0 ${isSwapping ? '40px' : isComparing ? '30px' : '20px'} ${barColor}`,\n                            `0 0 ${isSwapping ? '50px' : isComparing ? '40px' : '25px'} ${barColor}`,\n                            `0 0 ${isSwapping ? '40px' : isComparing ? '30px' : '20px'} ${barColor}`\n                          ]\n                        }}\n                        exit={{ opacity: 0, scale: 0 }}\n                        transition={{\n                          layout: { type: 'spring', stiffness: 300, damping: 30 },\n                          height: { duration: 0.3, ease: 'easeInOut' },\n                          backgroundColor: { duration: 0.2 },\n                          scale: { duration: 0.2 },\n                          boxShadow: { duration: 1, repeat: Infinity }\n                        }}\n                        className=\"relative rounded-t-lg min-w-[8px] flex-1 max-w-[60px] border-t-2 border-white/30\"\n                        style={{\n                          background: `linear-gradient(to top, ${barColor}, ${barColor}dd)`,\n                        }}\n                      >\n                        {/* Value label */}\n                        <motion.div\n                          initial={{ opacity: 0 }}\n                          animate={{ opacity: array.length <= 30 ? 1 : 0 }}\n                          className=\"absolute -top-8 left-1/2 -translate-x-1/2 text-xs font-bold text-white whitespace-nowrap\"\n                          style={{\n                            textShadow: `0 0 10px ${barColor}, 0 0 20px ${barColor}`\n                          }}\n                        >\n                          {element.value}\n                        </motion.div>\n\n                        {/* Glow effect overlay */}\n                        <motion.div\n                          className=\"absolute inset-0 rounded-t-lg\"\n                          animate={{\n                            opacity: isSwapping ? [0.3, 0.7, 0.3] : isComparing ? [0.2, 0.5, 0.2] : [0.1, 0.3, 0.1]\n                          }}\n                          transition={{ duration: 0.8, repeat: Infinity }}\n                          style={{\n                            background: `linear-gradient(to top, transparent, ${barColor}88)`,\n                          }}\n                        />\n\n                        {/* Status indicator */}\n                        {(isComparing || isSwapping || isSorted) && (\n                          <motion.div\n                            initial={{ scale: 0 }}\n                            animate={{ scale: 1, rotate: 360 }}\n                            exit={{ scale: 0 }}\n                            transition={{ duration: 0.3 }}\n                            className=\"absolute -top-12 left-1/2 -translate-x-1/2\"\n                          >\n                            {isSorted && (\n                              <motion.div\n                                animate={{ y: [0, -5, 0] }}\n                                transition={{ duration: 1, repeat: Infinity }}\n                                className=\"w-6 h-6 rounded-full bg-green-400 border-2 border-green-300 shadow-[0_0_20px_rgba(0,255,0,0.8)]\"\n                              />\n                            )}\n                            {isSwapping && !isSorted && (\n                              <motion.div\n                                animate={{ rotate: [0, 180, 360] }}\n                                transition={{ duration: 0.6, repeat: Infinity }}\n                                className=\"w-6 h-6 rounded-full bg-pink-500 border-2 border-pink-300 shadow-[0_0_20px_rgba(255,0,102,0.8)]\"\n                              />\n                            )}\n                            {isComparing && !isSwapping && !isSorted && (\n                              <motion.div\n                                animate={{ scale: [1, 1.3, 1] }}\n                                transition={{ duration: 0.5, repeat: Infinity }}\n                                className=\"w-6 h-6 rounded-full bg-yellow-400 border-2 border-yellow-300 shadow-[0_0_20px_rgba(255,255,0,0.8)]\"\n                              />\n                            )}\n                          </motion.div>\n                        )}\n                      </motion.div>\n                    );\n                  })\n                )}</parameter>\n</invoke>\n              </div>\n\n              \n              {steps.length > 0 && currentStep < steps.length && steps[currentStep].comparingIndices.length > 0 && (\n                <div className=\"absolute inset-0 pointer-events-none\">\n                  {steps[currentStep].comparingIndices.map((index, i) => {\n                    const barWidth = 100 / (array.length || 1);\n                    const xPosition = index * barWidth + barWidth / 2;\n                    \n                    return (\n                      <motion.div\n                        key={`compare-${index}-${i}`}\n                        initial={{ opacity: 0, y: -20, scale: 0.5 }}\n                        animate={{ \n                          opacity: [0, 1, 1, 0],\n                          y: [-20, 0, 0, -20],\n                          scale: [0.5, 1.2, 1.2, 0.5]\n                        }}\n                        transition={{ \n                          duration: 1.5,\n                          repeat: Infinity,\n                          ease: \"easeInOut\"\n                        }}\n                        className=\"absolute top-0\"\n                        style={{ left: `${xPosition}%`, transform: 'translateX(-50%)' }}\n                      >\n                        <motion.div\n                          className=\"relative\"\n                          animate={{\n                            rotate: [0, 360],\n                          }}\n                          transition={{\n                            duration: 2,\n                            repeat: Infinity,\n                            ease: \"linear\"\n                          }}\n                        >\n                          <div className=\"w-8 h-8 rounded-full bg-gradient-to-br from-yellow-400 to-orange-500 flex items-center justify-center shadow-[0_0_30px_rgba(251,191,36,0.8)]\">\n                            <motion.div\n                              className=\"w-6 h-6 rounded-full bg-yellow-300 flex items-center justify-center\"\n                              animate={{\n                                boxShadow: [\n                                  '0 0 10px rgba(251,191,36,0.6)',\n                                  '0 0 25px rgba(251,191,36,1)',\n                                  '0 0 10px rgba(251,191,36,0.6)'\n                                ]\n                              }}\n                              transition={{\n                                duration: 1,\n                                repeat: Infinity\n                              }}\n                            >\n                              <span className=\"text-xs font-bold text-gray-900\">?</span>\n                            </motion.div>\n                          </div>\n                        </motion.div>\n                        \n                        {/* Connecting line to bar */}\n                        <motion.div\n                          className=\"absolute top-8 left-1/2 w-0.5 bg-gradient-to-b from-yellow-400 to-transparent\"\n                          initial={{ height: 0 }}\n                          animate={{ height: 40 }}\n                          transition={{ duration: 0.3 }}\n                          style={{ transform: 'translateX(-50%)' }}\n                        />\n                        \n                        {/* Pulsing ring effect */}\n                        <motion.div\n                          className=\"absolute top-0 left-0 w-8 h-8 rounded-full border-2 border-yellow-400\"\n                          animate={{\n                            scale: [1, 2, 2],\n                            opacity: [0.8, 0, 0]\n                          }}\n                          transition={{\n                            duration: 1.5,\n                            repeat: Infinity,\n                            ease: \"easeOut\"\n                          }}\n                        />\n                      </motion.div>\n                    );\n                  })}\n                  \n                  {/* Comparison arc connecting compared elements */}\n                  {steps[currentStep].comparingIndices.length === 2 && (\n                    <motion.svg\n                      className=\"absolute inset-0 w-full h-full\"\n                      initial={{ opacity: 0 }}\n                      animate={{ opacity: 1 }}\n                      exit={{ opacity: 0 }}\n                    >\n                      <motion.path\n                        d={(() => {\n                          const barWidth = 100 / (array.length || 1);\n                          const x1 = steps[currentStep].comparingIndices[0] * barWidth + barWidth / 2;\n                          const x2 = steps[currentStep].comparingIndices[1] * barWidth + barWidth / 2;\n                          const y = 60;\n                          const midX = (x1 + x2) / 2;\n                          const controlY = y - Math.abs(x2 - x1) * 0.3;\n                          \n                          return `M ${x1}% ${y} Q ${midX}% ${controlY} ${x2}% ${y}`;\n                        })()}\n                        stroke=\"url(#compareGradient)\"\n                        strokeWidth=\"3\"\n                        fill=\"none\"\n                        strokeLinecap=\"round\"\n                        initial={{ pathLength: 0 }}\n                        animate={{ \n                          pathLength: [0, 1, 1, 0],\n                          opacity: [0, 1, 1, 0]\n                        }}\n                        transition={{ \n                          duration: 1.5,\n                          repeat: Infinity,\n                          ease: \"easeInOut\"\n                        }}\n                        style={{\n                          filter: 'drop-shadow(0 0 8px rgba(251, 191, 36, 0.8))'\n                        }}\n                      />\n                      <defs>\n                        <linearGradient id=\"compareGradient\" x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"0%\">\n                          <stop offset=\"0%\" stopColor=\"#fbbf24\" stopOpacity=\"0.8\" />\n                          <stop offset=\"50%\" stopColor=\"#f59e0b\" stopOpacity=\"1\" />\n                          <stop offset=\"100%\" stopColor=\"#fbbf24\" stopOpacity=\"0.8\" />\n                        </linearGradient>\n                      </defs>\n                    </motion.svg>\n                  )}\n                </div>\n              )}\n              \n                            {steps.length > 0 && currentStep < steps.length && steps[currentStep].swappingIndices.length > 0 && (\n                <div className=\"absolute inset-0 pointer-events-none\">\n                  {steps[currentStep].swappingIndices.map((index, i) => {\n                    const maxHeight = 500;\n                    const barWidth = Math.max(8, Math.min(60, (100 / arraySize[0]) * 8));\n                    const gap = 4;\n                    const totalWidth = array.length * (barWidth + gap);\n                    const startX = (800 - totalWidth) / 2;\n                    const xPosition = startX + index * (barWidth + gap) + barWidth / 2;\n                    const element = steps[currentStep].array[index];\n                    const height = (element.value / 100) * maxHeight;\n                    const yPosition = maxHeight - height;\n\n                    return (\n                      <motion.div\n                        key={`trail-${index}-${i}`}\n                        className=\"absolute\"\n                        style={{\n                          left: xPosition,\n                          bottom: 0,\n                          width: barWidth,\n                          height: height,\n                        }}\n                        initial={{ opacity: 0, scale: 1 }}\n                        animate={{ \n                          opacity: [0.8, 0.4, 0],\n                          scale: [1, 1.2, 1.4],\n                          filter: [\n                            'blur(0px) brightness(1.5)',\n                            'blur(8px) brightness(1.2)',\n                            'blur(16px) brightness(0.8)'\n                          ]\n                        }}\n                        transition={{ \n                          duration: 0.6,\n                          ease: \"easeOut\"\n                        }}\n                      >\n                        <div \n                          className=\"w-full h-full rounded-t-lg\"\n                          style={{\n                            background: `linear-gradient(to top, ${NEON_COLORS[index % NEON_COLORS.length]}, ${NEON_COLORS[(index + 1) % NEON_COLORS.length]})`,\n                            boxShadow: `0 0 30px ${NEON_COLORS[index % NEON_COLORS.length]}, 0 0 60px ${NEON_COLORS[index % NEON_COLORS.length]}`,\n                          }}\n                        />\n                      </motion.div>\n                    );\n                  })}\n                  \n                  {/* Swap connection line with motion blur */}\n                  {steps[currentStep].swappingIndices.length === 2 && (\n                    <motion.svg\n                      className=\"absolute inset-0 w-full h-full\"\n                      initial={{ opacity: 0 }}\n                      animate={{ opacity: [0, 1, 0] }}\n                      transition={{ duration: 0.5 }}\n                    >\n                      <defs>\n                        <filter id=\"motionBlur\">\n                          <feGaussianBlur in=\"SourceGraphic\" stdDeviation=\"8,0\" />\n                        </filter>\n                        <linearGradient id=\"swapGradient\" x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"0%\">\n                          <stop offset=\"0%\" stopColor={NEON_COLORS[steps[currentStep].swappingIndices[0] % NEON_COLORS.length]} stopOpacity=\"0.8\" />\n                          <stop offset=\"50%\" stopColor=\"#ffffff\" stopOpacity=\"1\" />\n                          <stop offset=\"100%\" stopColor={NEON_COLORS[steps[currentStep].swappingIndices[1] % NEON_COLORS.length]} stopOpacity=\"0.8\" />\n                        </linearGradient>\n                      </defs>\n                      <motion.path\n                        d={(() => {\n                          const barWidth = Math.max(8, Math.min(60, (100 / arraySize[0]) * 8));\n                          const gap = 4;\n                          const totalWidth = array.length * (barWidth + gap);\n                          const startX = (800 - totalWidth) / 2;\n                          const x1 = startX + steps[currentStep].swappingIndices[0] * (barWidth + gap) + barWidth / 2;\n                          const x2 = startX + steps[currentStep].swappingIndices[1] * (barWidth + gap) + barWidth / 2;\n                          const y = 50;\n                          const controlY = y - 40;\n                          return `M ${x1} ${y} Q ${(x1 + x2) / 2} ${controlY} ${x2} ${y}`;\n                        })()}\n                        stroke=\"url(#swapGradient)\"\n                        strokeWidth=\"3\"\n                        fill=\"none\"\n                        filter=\"url(#motionBlur)\"\n                        initial={{ pathLength: 0, opacity: 0 }}\n                        animate={{ \n                          pathLength: [0, 1, 1],\n                          opacity: [0, 1, 0]\n                        }}\n                        transition={{ duration: 0.5, ease: \"easeInOut\" }}\n                      />\n                    </motion.svg>\n                  )}\n                  \n                  {/* Particle burst effects at swap positions */}\n                  {steps[currentStep].swappingIndices.map((index) => {\n                    const barWidth = Math.max(8, Math.min(60, (100 / arraySize[0]) * 8));\n                    const gap = 4;\n                    const totalWidth = array.length * (barWidth + gap);\n                    const startX = (800 - totalWidth) / 2;\n                    const xPosition = startX + index * (barWidth + gap) + barWidth / 2;\n\n                    return (\n                      <div key={`particles-${index}`} className=\"absolute\" style={{ left: xPosition, top: 40 }}>\n                        {[...Array(8)].map((_, particleIndex) => {\n                          const angle = (particleIndex / 8) * Math.PI * 2;\n                          const distance = 30;\n                          const x = Math.cos(angle) * distance;\n                          const y = Math.sin(angle) * distance;\n                          \n                          return (\n                            <motion.div\n                              key={particleIndex}\n                              className=\"absolute w-2 h-2 rounded-full\"\n                              style={{\n                                background: NEON_COLORS[index % NEON_COLORS.length],\n                                boxShadow: `0 0 10px ${NEON_COLORS[index % NEON_COLORS.length]}`,\n                              }}\n                              initial={{ x: 0, y: 0, opacity: 1, scale: 1 }}\n                              animate={{ \n                                x: x,\n                                y: y,\n                                opacity: 0,\n                                scale: 0\n                              }}\n                              transition={{ \n                                duration: 0.6,\n                                ease: \"easeOut\"\n                              }}\n                            />\n                          );\n                        })}\n                      </div>\n                    );\n                  })}\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.8, delay: 0.3 }}\n          className=\"bg-gray-900/50 backdrop-blur-lg border border-cyan-500/30 rounded-xl p-6 shadow-[0_0_30px_rgba(0,255,255,0.2)]\"\n        >\n          <h3 className=\"text-lg font-bold text-cyan-400 mb-4 flex items-center gap-2\">\n            <BarChart3 className=\"w-5 h-5\" />\n            Legend\n          </h3>\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n            <motion.div\n              className=\"flex items-center gap-3 p-3 rounded-lg bg-gray-800/50 border border-gray-700\"\n              whileHover={{ scale: 1.05, borderColor: 'rgba(0, 255, 255, 0.5)' }}\n              transition={{ duration: 0.2 }}\n            >\n              <motion.div\n                className=\"w-6 h-12 rounded bg-gradient-to-t from-cyan-500 to-cyan-300\"\n                animate={{\n                  boxShadow: [\n                    '0 0 10px rgba(0, 255, 255, 0.5)',\n                    '0 0 20px rgba(0, 255, 255, 0.8)',\n                    '0 0 10px rgba(0, 255, 255, 0.5)'\n                  ]\n                }}\n                transition={{ duration: 2, repeat: Infinity }}\n              />\n              <div>\n                <div className=\"text-sm font-semibold text-white\">Default</div>\n                <div className=\"text-xs text-gray-400\">Unsorted</div>\n              </div>\n            </motion.div>\n\n            <motion.div\n              className=\"flex items-center gap-3 p-3 rounded-lg bg-gray-800/50 border border-gray-700\"\n              whileHover={{ scale: 1.05, borderColor: 'rgba(255, 255, 0, 0.5)' }}\n              transition={{ duration: 0.2 }}\n            >\n              <motion.div\n                className=\"w-6 h-12 rounded bg-gradient-to-t from-yellow-500 to-yellow-300\"\n                animate={{\n                  boxShadow: [\n                    '0 0 15px rgba(255, 255, 0, 0.6)',\n                    '0 0 30px rgba(255, 255, 0, 1)',\n                    '0 0 15px rgba(255, 255, 0, 0.6)'\n                  ],\n                  scale: [1, 1.1, 1]\n                }}\n                transition={{ duration: 1.5, repeat: Infinity }}\n              />\n              <div>\n                <div className=\"text-sm font-semibold text-white\">Comparing</div>\n                <div className=\"text-xs text-gray-400\">Active</div>\n              </div>\n            </motion.div>\n\n            <motion.div\n              className=\"flex items-center gap-3 p-3 rounded-lg bg-gray-800/50 border border-gray-700\"\n              whileHover={{ scale: 1.05, borderColor: 'rgba(255, 0, 102, 0.5)' }}\n              transition={{ duration: 0.2 }}\n            >\n              <motion.div\n                className=\"w-6 h-12 rounded bg-gradient-to-t from-pink-600 to-pink-400\"\n                animate={{\n                  boxShadow: [\n                    '0 0 15px rgba(255, 0, 102, 0.6)',\n                    '0 0 30px rgba(255, 0, 102, 1)',\n                    '0 0 15px rgba(255, 0, 102, 0.6)'\n                  ],\n                  x: [-2, 2, -2]\n                }}\n                transition={{ duration: 0.8, repeat: Infinity }}\n              />\n              <div>\n                <div className=\"text-sm font-semibold text-white\">Swapping</div>\n                <div className=\"text-xs text-gray-400\">Moving</div>\n              </div>\n            </motion.div>\n\n            <motion.div\n              className=\"flex items-center gap-3 p-3 rounded-lg bg-gray-800/50 border border-gray-700\"\n              whileHover={{ scale: 1.05, borderColor: 'rgba(0, 255, 0, 0.5)' }}\n              transition={{ duration: 0.2 }}\n            >\n              <motion.div\n                className=\"w-6 h-12 rounded bg-gradient-to-t from-green-600 to-green-400\"\n                animate={{\n                  boxShadow: [\n                    '0 0 10px rgba(0, 255, 0, 0.5)',\n                    '0 0 20px rgba(0, 255, 0, 0.8)',\n                    '0 0 10px rgba(0, 255, 0, 0.5)'\n                  ]\n                }}\n                transition={{ duration: 2, repeat: Infinity }}\n              />\n              <div>\n                <div className=\"text-sm font-semibold text-white\">Sorted</div>\n                <div className=\"text-xs text-gray-400\">Complete</div>\n              </div>\n            </motion.div>\n          </div>\n        </motion.div>\n      </div>\n    </div>\n  );\n}",
  "error": null,
  "overall_score": 46,
  "code_quality_score": 14,
  "architecture_score": 12,
  "performance_score": 11,
  "accessibility_score": 9,
  "metadata": {
    "document_id": "eval_room_1f18c88e7e94",
    "prompt_category": "creative",
    "prompt_complexity": 9.0
  },
  "raw_response": {
    "document_id": "eval_room_1f18c88e7e94",
    "mode": "parallel",
    "prompt": "Build a captivating algorithm visualizer with neon colored bars, smooth height transitions, glowing comparison indicators, trail effects during swaps, and a futuristic dashboard design with animated controls",
    "content": "import { useState, useCallback } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Slider } from '@/components/ui/slider';\nimport { Play, Pause, RotateCcw, Zap, BarChart3 } from 'lucide-react';\nimport { motion } from 'framer-motion';\nimport { useEffect, useRef } from 'react';\n\ninterface ArrayElement {\n  value: number;\n  id: string;\n  isComparing?: boolean;\n  isSwapping?: boolean;\n  isSorted?: boolean;\n}\n\ninterface AlgorithmStep {\n  array: ArrayElement[];\n  comparingIndices: number[];\n  swappingIndices: number[];\n  sortedIndices: number[];\n}\n\ntype AlgorithmType = 'bubble' | 'quick' | 'merge' | 'insertion';\n\nconst NEON_COLORS = [\n  '#00ffff',\n  '#ff00ff', \n  '#00ff00',\n  '#ffff00',\n  '#ff0066',\n  '#00ffaa'\n];\n\nconst mockAlgorithms = [\n  { id: 'bubble', name: 'Bubble Sort', complexity: 'O(n\u00b2)' },\n  { id: 'quick', name: 'Quick Sort', complexity: 'O(n log n)' },\n  { id: 'merge', name: 'Merge Sort', complexity: 'O(n log n)' },\n  { id: 'insertion', name: 'Insertion Sort', complexity: 'O(n\u00b2)' }\n];\n\n// Hook to handle step-by-step animation\nconst useAnimationLoop = (\n  isPlaying: boolean,\n  steps: AlgorithmStep[],\n  currentStep: number,\n  speed: number[],\n  onStepComplete: () => void,\n  onAnimationEnd: () => void\n) => {\n  const timeoutRef = useRef<NodeJS.Timeout | null>(null);\n\n  useEffect(() => {\n    if (isPlaying && currentStep < steps.length) {\n      const delay = 1000 - speed[0] * 9.5; // Convert speed (0-100) to delay (1000ms-50ms)\n      timeoutRef.current = setTimeout(() => {\n        onStepComplete();\n      }, delay);\n    } else if (isPlaying && currentStep >= steps.length) {\n      onAnimationEnd();\n    }\n\n    return () => {\n      if (timeoutRef.current) {\n        clearTimeout(timeoutRef.current);\n      }\n    };\n  }, [isPlaying, currentStep, steps.length, speed, onStepComplete, onAnimationEnd]);\n};\n\nexport default function AlgorithmVisualizer() {\n  const [array, setArray] = useState<ArrayElement[]>([]);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [speed, setSpeed] = useState([50]);\n  const [arraySize, setArraySize] = useState([20]);\n  const [selectedAlgorithm, setSelectedAlgorithm] = useState<AlgorithmType>('bubble');\n  const [currentStep, setCurrentStep] = useState(0);\n  const [steps, setSteps] = useState<AlgorithmStep[]>([]);\n\n  const generateRandomArray = useCallback(() => {\n    const newArray: ArrayElement[] = Array.from({ length: arraySize[0] }, (_, i) => ({\n      value: Math.floor(Math.random() * 100) + 5,\n      id: `element-${i}-${Date.now()}`,\n      isComparing: false,\n      isSwapping: false,\n      isSorted: false\n    }));\n    setArray(newArray);\n    setSteps([]);\n    setCurrentStep(0);\n    setIsPlaying(false);\n  }, [arraySize]);\n\n  const resetVisualization = useCallback(() => {\n\n    setIsPlaying(false);\n    setCurrentStep(0);\n    setSteps([]);\n    generateRandomArray();\n  }, [generateRandomArray]);\n\n  const startVisualization = useCallback(() => {\n    if (steps.length === 0) return;\n    if (currentStep >= steps.length) return;\n    \n    setIsPlaying(true);\n  }, [steps, speed, currentStep]);\n\n  const pauseVisualization = useCallback(() => {\n\n    setIsPlaying(false);\n  }, []);\n\n  const generateSortingSteps = useCallback((algorithm: AlgorithmType) => {\n    const sortedArray = [...array];\n    const newSteps: AlgorithmStep[] = [];\n\n    const addStep = (arr: ArrayElement[], comparing: number[] = [], swapping: number[] = [], sorted: number[] = []) => {\n      newSteps.push({\n        array: arr.map(el => ({ ...el })),\n        comparingIndices: [...comparing],\n        swappingIndices: [...swapping],\n        sortedIndices: [...sorted]\n      });\n    };\n\n    // Initial state\n    addStep(sortedArray);\n\n    switch (algorithm) {\n      case 'bubble': {\n        const sortedSet = new Set<number>();\n        for (let i = 0; i < sortedArray.length - 1; i++) {\n          for (let j = 0; j < sortedArray.length - i - 1; j++) {\n            // Comparing\n            addStep(sortedArray, [j, j + 1], [], Array.from(sortedSet));\n            \n            if (sortedArray[j].value > sortedArray[j + 1].value) {\n              // Swapping\n              addStep(sortedArray, [], [j, j + 1], Array.from(sortedSet));\n              [sortedArray[j], sortedArray[j + 1]] = [sortedArray[j + 1], sortedArray[j]];\n              addStep(sortedArray, [], [], Array.from(sortedSet));\n            }\n          }\n          sortedSet.add(sortedArray.length - i - 1);\n          addStep(sortedArray, [], [], Array.from(sortedSet));\n        }\n        sortedSet.add(0);\n        addStep(sortedArray, [], [], Array.from(sortedSet));\n        break;\n      }\n\n      case 'insertion': {\n        const sortedSet = new Set<number>([0]);\n        addStep(sortedArray, [], [], [0]);\n        \n        for (let i = 1; i < sortedArray.length; i++) {\n          const key = sortedArray[i];\n          let j = i - 1;\n          \n          addStep(sortedArray, [i], [], Array.from(sortedSet));\n          \n          while (j >= 0 && sortedArray[j].value > key.value) {\n            addStep(sortedArray, [j, j + 1], [], Array.from(sortedSet));\n            addStep(sortedArray, [], [j, j + 1], Array.from(sortedSet));\n            sortedArray[j + 1] = sortedArray[j];\n            addStep(sortedArray, [], [], Array.from(sortedSet));\n            j--;\n          }\n          \n          sortedArray[j + 1] = key;\n          sortedSet.add(i);\n          addStep(sortedArray, [], [], Array.from(sortedSet));\n        }\n        break;\n      }\n\n      case 'quick': {\n        const sortedSet = new Set<number>();\n        \n        const partition = (low: number, high: number): number => {\n          const pivot = sortedArray[high];\n          addStep(sortedArray, [high], [], Array.from(sortedSet));\n          let i = low - 1;\n\n          for (let j = low; j < high; j++) {\n            addStep(sortedArray, [j, high], [], Array.from(sortedSet));\n            \n            if (sortedArray[j].value < pivot.value) {\n              i++;\n              if (i !== j) {\n                addStep(sortedArray, [], [i, j], Array.from(sortedSet));\n                [sortedArray[i], sortedArray[j]] = [sortedArray[j], sortedArray[i]];\n                addStep(sortedArray, [], [], Array.from(sortedSet));\n              }\n            }\n          }\n\n          addStep(sortedArray, [], [i + 1, high], Array.from(sortedSet));\n          [sortedArray[i + 1], sortedArray[high]] = [sortedArray[high], sortedArray[i + 1]];\n          sortedSet.add(i + 1);\n          addStep(sortedArray, [], [], Array.from(sortedSet));\n          \n          return i + 1;\n        };\n\n        const quickSort = (low: number, high: number) => {\n          if (low < high) {\n            const pi = partition(low, high);\n            quickSort(low, pi - 1);\n            quickSort(pi + 1, high);\n          } else if (low === high) {\n            sortedSet.add(low);\n            addStep(sortedArray, [], [], Array.from(sortedSet));\n          }\n        };\n\n        quickSort(0, sortedArray.length - 1);\n        break;\n      }\n\n      case 'merge': {\n        const sortedSet = new Set<number>();\n        \n        const merge = (left: number, mid: number, right: number) => {\n          const leftArr = sortedArray.slice(left, mid + 1);\n          const rightArr = sortedArray.slice(mid + 1, right + 1);\n          \n          let i = 0, j = 0, k = left;\n          \n          while (i < leftArr.length && j < rightArr.length) {\n            addStep(sortedArray, [left + i, mid + 1 + j], [], Array.from(sortedSet));\n            \n            if (leftArr[i].value <= rightArr[j].value) {\n              sortedArray[k] = leftArr[i];\n              i++;\n            } else {\n              sortedArray[k] = rightArr[j];\n              j++;\n            }\n            addStep(sortedArray, [], [k], Array.from(sortedSet));\n            k++;\n          }\n          \n          while (i < leftArr.length) {\n            sortedArray[k] = leftArr[i];\n            addStep(sortedArray, [], [k], Array.from(sortedSet));\n            i++;\n            k++;\n          }\n          \n          while (j < rightArr.length) {\n            sortedArray[k] = rightArr[j];\n            addStep(sortedArray, [], [k], Array.from(sortedSet));\n            j++;\n            k++;\n          }\n          \n          if (right - left + 1 === sortedArray.length) {\n            for (let idx = left; idx <= right; idx++) {\n              sortedSet.add(idx);\n            }\n          }\n          addStep(sortedArray, [], [], Array.from(sortedSet));\n        };\n\n        const mergeSort = (left: number, right: number) => {\n          if (left < right) {\n            const mid = Math.floor((left + right) / 2);\n            mergeSort(left, mid);\n            mergeSort(mid + 1, right);\n            merge(left, mid, right);\n          } else if (left === right && sortedArray.length === 1) {\n            sortedSet.add(left);\n            addStep(sortedArray, [], [], Array.from(sortedSet));\n          }\n        };\n\n        mergeSort(0, sortedArray.length - 1);\n        \n        // Mark all as sorted at the end\n        for (let i = 0; i < sortedArray.length; i++) {\n          sortedSet.add(i);\n        }\n        addStep(sortedArray, [], [], Array.from(sortedSet));\n        break;\n      }\n    }\n\n    setSteps(newSteps);\n    setCurrentStep(0);\n  }, [array]);\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-gray-900 via-purple-900 to-gray-900 p-8\">\n      <div className=\"max-w-7xl mx-auto space-y-8\">\n        <motion.div\n          initial={{ opacity: 0, y: -20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.8 }}\n          className=\"text-center space-y-4\"\n        >\n          <motion.h1\n            className=\"text-6xl font-bold bg-gradient-to-r from-cyan-400 via-purple-400 to-pink-400 bg-clip-text text-transparent\"\n            animate={{\n              textShadow: [\n                '0 0 20px rgba(0, 255, 255, 0.5)',\n                '0 0 40px rgba(255, 0, 255, 0.5)',\n                '0 0 20px rgba(0, 255, 255, 0.5)'\n              ]\n            }}\n            transition={{ duration: 2, repeat: Infinity }}\n          >\n            Algorithm Visualizer\n          </motion.h1>\n          <div className=\"flex items-center justify-center gap-4\">\n            <motion.div\n              className=\"text-2xl font-semibold text-cyan-300\"\n              animate={{ opacity: [0.7, 1, 0.7] }}\n              transition={{ duration: 2, repeat: Infinity }}\n            >\n              {mockAlgorithms.find(a => a.id === selectedAlgorithm)?.name}\n            </motion.div>\n            <motion.div\n              className=\"px-4 py-2 rounded-full bg-purple-500/20 border border-purple-400/50 backdrop-blur-sm\"\n              whileHover={{ scale: 1.05, boxShadow: '0 0 20px rgba(168, 85, 247, 0.6)' }}\n            >\n              <div className=\"flex items-center gap-2\">\n                <BarChart3 className=\"w-5 h-5 text-purple-300\" />\n                <span className=\"text-purple-200 font-mono\">\n                  {mockAlgorithms.find(a => a.id === selectedAlgorithm)?.complexity}\n                </span>\n              </div>\n            </motion.div>\n          </div>\n        </motion.div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-6\">\n          <div className=\"lg:col-span-1 space-y-6\">\n            <motion.div\n              initial={{ opacity: 0, x: -50 }}\n              animate={{ opacity: 1, x: 0 }}\n              className=\"bg-gray-900/50 backdrop-blur-lg border border-cyan-500/30 rounded-xl p-6 shadow-[0_0_30px_rgba(0,255,255,0.3)] hover:shadow-[0_0_50px_rgba(0,255,255,0.5)] transition-shadow duration-300\"\n            >\n              <div className=\"space-y-6\">\n                {/* Algorithm Selection */}\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center gap-2 text-cyan-400 mb-4\">\n                    <Zap className=\"w-5 h-5\" />\n                    <h3 className=\"font-bold text-lg\">Algorithm</h3>\n                  </div>\n                  <div className=\"grid grid-cols-1 gap-2\">\n                    {mockAlgorithms.map((algo) => (\n                      <motion.button\n                        key={algo.id}\n                        whileHover={{ scale: 1.02 }}\n                        whileTap={{ scale: 0.98 }}\n                        onClick={() => {\n                          setSelectedAlgorithm(algo.id as AlgorithmType);\n                          generateSortingSteps(algo.id as AlgorithmType);\n                        }}\n                        disabled={isPlaying}\n                        className={`p-3 rounded-lg border transition-all duration-300 text-left ${\n                          selectedAlgorithm === algo.id\n                            ? 'bg-cyan-500/20 border-cyan-400 shadow-[0_0_20px_rgba(0,255,255,0.4)]'\n                            : 'bg-gray-800/50 border-gray-700 hover:border-cyan-500/50'\n                        } disabled:opacity-50 disabled:cursor-not-allowed`}\n                      >\n                        <div className=\"font-semibold text-white\">{algo.name}</div>\n                        <div className=\"text-xs text-gray-400 mt-1\">{algo.complexity}</div>\n                      </motion.button>\n                    ))}\n                  </div>\n                </div>\n\n                {/* Array Size Control */}\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center gap-2 text-purple-400\">\n                    <BarChart3 className=\"w-5 h-5\" />\n                    <label className=\"font-semibold\">Array Size: {arraySize[0]}</label>\n                  </div>\n                  <Slider\n                    value={arraySize}\n                    onValueChange={(value) => {\n                      setArraySize(value);\n                      if (!isPlaying) {\n                        generateRandomArray();\n                      }\n                    }}\n                    min={5}\n                    max={50}\n                    step={1}\n                    disabled={isPlaying}\n                    className=\"cursor-pointer\"\n                  />\n                </div>\n\n                {/* Speed Control */}\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center gap-2 text-pink-400\">\n                    <Zap className=\"w-5 h-5\" />\n                    <label className=\"font-semibold\">Speed: {speed[0]}%</label>\n                  </div>\n                  <Slider\n                    value={speed}\n                    onValueChange={setSpeed}\n                    min={10}\n                    max={100}\n                    step={10}\n                    className=\"cursor-pointer\"\n                  />\n                </div>\n\n                {/* Control Buttons */}\n                <div className=\"space-y-3 pt-4 border-t border-gray-700\">\n                  <Button\n                    onClick={isPlaying ? pauseVisualization : startVisualization}\n                    disabled={steps.length === 0 || (currentStep >= steps.length && !isPlaying)}\n                    className=\"w-full bg-gradient-to-r from-cyan-500 to-blue-500 hover:from-cyan-400 hover:to-blue-400 text-white font-bold py-6 rounded-lg shadow-[0_0_20px_rgba(0,255,255,0.5)] hover:shadow-[0_0_30px_rgba(0,255,255,0.7)] transition-all duration-300\"\n                  >\n                    {isPlaying ? (\n                      <>\n                        <Pause className=\"w-5 h-5 mr-2\" />\n                        Pause\n                      </>\n                    ) : (\n                      <>\n                        <Play className=\"w-5 h-5 mr-2\" />\n                        {currentStep >= steps.length ? 'Restart' : 'Play'}\n                      </>\n                    )}\n                  </Button>\n\n                  <Button\n                    onClick={resetVisualization}\n                    disabled={isPlaying}\n                    variant=\"outline\"\n                    className=\"w-full border-2 border-purple-500/50 bg-gray-800/50 hover:bg-purple-500/20 hover:border-purple-400 text-purple-300 font-bold py-6 rounded-lg shadow-[0_0_15px_rgba(168,85,247,0.3)] hover:shadow-[0_0_25px_rgba(168,85,247,0.5)] transition-all duration-300\"\n                  >\n                    <RotateCcw className=\"w-5 h-5 mr-2\" />\n                    Reset\n                  </Button>\n                </div>\n\n                {/* Progress Indicator */}\n                {steps.length > 0 && (\n                  <div className=\"space-y-2 pt-4 border-t border-gray-700\">\n                    <div className=\"flex justify-between text-sm text-gray-400\">\n                      <span>Progress</span>\n                      <span>{Math.min(currentStep, steps.length)} / {steps.length}</span>\n                    </div>\n                    <div className=\"w-full h-2 bg-gray-800 rounded-full overflow-hidden\">\n                      <motion.div\n                        className=\"h-full bg-gradient-to-r from-cyan-500 via-purple-500 to-pink-500 shadow-[0_0_10px_rgba(0,255,255,0.5)]\"\n                        initial={{ width: 0 }}\n                        animate={{ width: `${(Math.min(currentStep, steps.length) / steps.length) * 100}%` }}\n                        transition={{ duration: 0.3 }}\n                      />\n                    </div>\n                  </div>\n                )}\n              </div>\n            </motion.div>\n            \n            <div className=\"bg-gray-900/50 backdrop-blur-lg border border-cyan-500/30 rounded-xl p-6 shadow-2xl shadow-cyan-500/20\">\n              <div className=\"space-y-6\">\n                <div>\n                  <h3 className=\"text-sm font-semibold text-cyan-400 mb-3 flex items-center gap-2\">\n                    <Zap className=\"w-4 h-4\" />\n                    Algorithm\n                  </h3>\n                  <div className=\"grid grid-cols-1 gap-2\">\n                    {mockAlgorithms.map((algo) => (\n                      <motion.button\n                        key={algo.id}\n                        onClick={() => setSelectedAlgorithm(algo.id as AlgorithmType)}\n                        className={`relative p-3 rounded-lg border transition-all duration-300 text-left ${\n                          selectedAlgorithm === algo.id\n                            ? 'bg-cyan-500/20 border-cyan-400 shadow-lg shadow-cyan-500/50'\n                            : 'bg-gray-800/50 border-gray-700 hover:border-cyan-500/50 hover:shadow-md hover:shadow-cyan-500/30'\n                        }`}\n                        whileHover={{ scale: 1.02 }}\n                        whileTap={{ scale: 0.98 }}\n                      >\n                        <div className=\"flex flex-col gap-1\">\n                          <span className={`text-sm font-medium ${\n                            selectedAlgorithm === algo.id ? 'text-cyan-300' : 'text-gray-300'\n                          }`}>\n                            {algo.name}\n                          </span>\n                          <span className={`text-xs ${\n                            selectedAlgorithm === algo.id ? 'text-cyan-400/80' : 'text-gray-500'\n                          }`}>\n                            {algo.complexity}\n                          </span>\n                        </div>\n                        {selectedAlgorithm === algo.id && (\n                          <motion.div\n                            className=\"absolute inset-0 rounded-lg border-2 border-cyan-400\"\n                            layoutId=\"algorithmSelector\"\n                            transition={{ type: \"spring\", stiffness: 300, damping: 30 }}\n                          />\n                        )}\n                      </motion.button>\n                    ))}\n                  </div>\n                </div>\n\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <label className=\"text-cyan-400 text-sm font-medium flex items-center gap-2\">\n                      <Zap className=\"w-4 h-4\" />\n                      Speed\n                    </label>\n                    <span className=\"text-cyan-300 text-xs\">{speed[0]}ms</span>\n                  </div>\n                  <Slider\n                    value={speed}\n                    onValueChange={setSpeed}\n                    min={10}\n                    max={200}\n                    step={10}\n                    className=\"[&_[role=slider]]:h-4 [&_[role=slider]]:w-4 [&_[role=slider]]:bg-cyan-400 [&_[role=slider]]:border-2 [&_[role=slider]]:border-cyan-300 [&_[role=slider]]:shadow-[0_0_15px_rgba(34,211,238,0.8)] [&_[role=slider]]:transition-all [&_[role=slider]]:hover:shadow-[0_0_25px_rgba(34,211,238,1)] [&_.relative]:h-2 [&_.relative]:bg-gray-800 [&_.relative]:rounded-full [&_.relative]:border [&_.relative]:border-cyan-500/30 [&_.relative_.bg-primary]:bg-gradient-to-r [&_.relative_.bg-primary]:from-cyan-500 [&_.relative_.bg-primary]:to-purple-500 [&_.relative_.bg-primary]:shadow-[0_0_10px_rgba(34,211,238,0.5)]\"\n                  /></parameter>\n                </div>\n\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <label className=\"text-cyan-400 text-sm font-medium flex items-center gap-2\">\n                      <BarChart3 className=\"w-4 h-4\" />\n                      Array Size\n                    </label>\n                    <span className=\"text-cyan-300 text-xs\">{arraySize[0]}</span>\n                  </div>\n                  <Slider\n                    value={arraySize}\n                    onValueChange={setArraySize}\n                    min={5}\n                    max={100}\n                    step={1}\n                    className=\"[&_[role=slider]]:bg-gradient-to-r [&_[role=slider]]:from-purple-500 [&_[role=slider]]:to-pink-500 [&_[role=slider]]:border-2 [&_[role=slider]]:border-purple-300 [&_[role=slider]]:shadow-lg [&_[role=slider]]:shadow-purple-500/50 [&_[role=slider]]:transition-all [&_[role=slider]]:hover:shadow-purple-500/80 [&_[role=slider]]:hover:scale-110 [&>span]:bg-gradient-to-r [&>span]:from-purple-500/30 [&>span]:to-pink-500/30 [&>span]:h-2 [&>span]:rounded-full\"\n                  />\n                </div>\n\n                <div className=\"flex gap-3 pt-4\">\n                  <motion.button\n                    onClick={isPlaying ? pauseVisualization : startVisualization}\n                    disabled={array.length === 0 || (steps.length === 0 && !isPlaying)}\n                    className=\"flex-1 relative group overflow-hidden rounded-lg bg-gradient-to-r from-cyan-500 to-purple-500 p-[2px] disabled:opacity-50 disabled:cursor-not-allowed\"\n                    whileHover={{ scale: 1.05 }}\n                    whileTap={{ scale: 0.95 }}\n                  >\n                    <div className=\"relative bg-gray-900 rounded-lg px-4 py-3 flex items-center justify-center gap-2 group-hover:bg-gray-900/80 transition-colors\">\n                      <motion.div\n                        animate={{\n                          rotate: isPlaying ? 0 : 0,\n                          scale: isPlaying ? 1 : 1\n                        }}\n                        transition={{ duration: 0.3 }}\n                      >\n                        {isPlaying ? (\n                          <Pause className=\"w-5 h-5 text-cyan-400\" />\n                        ) : (\n                          <Play className=\"w-5 h-5 text-cyan-400\" />\n                        )}\n                      </motion.div>\n                      <span className=\"text-sm font-semibold bg-gradient-to-r from-cyan-400 to-purple-400 bg-clip-text text-transparent\">\n                        {isPlaying ? 'Pause' : 'Play'}\n                      </span>\n                      <motion.div\n                        className=\"absolute inset-0 bg-gradient-to-r from-cyan-500/20 to-purple-500/20 rounded-lg\"\n                        animate={{\n                          opacity: [0.5, 1, 0.5],\n                          boxShadow: [\n                            '0 0 20px rgba(0, 255, 255, 0.3)',\n                            '0 0 40px rgba(168, 85, 247, 0.5)',\n                            '0 0 20px rgba(0, 255, 255, 0.3)'\n                          ]\n                        }}\n                        transition={{ duration: 2, repeat: Infinity }}\n                      />\n                    </div>\n                  </motion.button>\n                  <motion.button\n                    onClick={resetVisualization}\n                    className=\"flex-1 px-6 py-3 bg-gradient-to-r from-pink-600 to-red-600 text-white rounded-lg font-semibold shadow-lg shadow-pink-500/50 hover:shadow-pink-500/80 transition-all duration-300 flex items-center justify-center gap-2 border border-pink-400/50\"\n                    whileHover={{ \n                      scale: 1.05,\n                      boxShadow: '0 0 30px rgba(236, 72, 153, 0.8)'\n                    }}\n                    whileTap={{ \n                      scale: 0.95,\n                      rotate: 360\n                    }}\n                    transition={{ \n                      rotate: { duration: 0.6, ease: \"easeInOut\" }\n                    }}\n                  >\n                    <RotateCcw className=\"w-5 h-5\" />\n                    Reset\n                  </motion.button>\n                </div>\n              </div>\n            </div>\n\n            <motion.div\n            initial={{ opacity: 0, x: -50 }}\n            animate={{ opacity: 1, x: 0 }}\n            transition={{ delay: 0.2 }}\n            className=\"bg-gray-900/50 backdrop-blur-lg border border-purple-500/30 rounded-xl p-6 shadow-2xl shadow-purple-500/20\"\n          >\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center gap-2 text-purple-400 mb-4\">\n                <BarChart3 className=\"w-5 h-5\" />\n                <h3 className=\"font-bold text-lg\">Statistics</h3>\n              </div>\n\n              <div className=\"grid grid-cols-1 gap-4\">\n                {/* Comparisons Counter */}\n                <motion.div\n                  className=\"relative overflow-hidden rounded-lg bg-gradient-to-br from-cyan-500/10 to-cyan-600/5 border border-cyan-500/30 p-4\"\n                  whileHover={{ scale: 1.02, boxShadow: '0 0 25px rgba(6, 182, 212, 0.4)' }}\n                  transition={{ type: \"spring\", stiffness: 300 }}\n                >\n                  <div className=\"relative z-10\">\n                    <div className=\"text-xs text-cyan-400 font-medium mb-1 uppercase tracking-wider\">\n                      Comparisons\n                    </div>\n                    <motion.div\n                      className=\"text-3xl font-bold text-cyan-300\"\n                      key={currentStep}\n                      initial={{ scale: 1.2, opacity: 0.5 }}\n                      animate={{ scale: 1, opacity: 1 }}\n                      transition={{ duration: 0.3 }}\n                    >\n                      {steps[currentStep]?.comparingIndices.length > 0 ? currentStep : 0}\n                    </motion.div>\n                  </div>\n                  <motion.div\n                    className=\"absolute inset-0 bg-gradient-to-r from-cyan-500/20 to-transparent\"\n                    animate={{\n                      opacity: [0.3, 0.6, 0.3],\n                      x: [-100, 100]\n                    }}\n                    transition={{ duration: 3, repeat: Infinity }}\n                  />\n                </motion.div>\n\n                {/* Swaps Counter */}\n                <motion.div\n                  className=\"relative overflow-hidden rounded-lg bg-gradient-to-br from-pink-500/10 to-pink-600/5 border border-pink-500/30 p-4\"\n                  whileHover={{ scale: 1.02, boxShadow: '0 0 25px rgba(236, 72, 153, 0.4)' }}\n                  transition={{ type: \"spring\", stiffness: 300 }}\n                >\n                  <div className=\"relative z-10\">\n                    <div className=\"text-xs text-pink-400 font-medium mb-1 uppercase tracking-wider\">\n                      Swaps\n                    </div>\n                    <motion.div\n                      className=\"text-3xl font-bold text-pink-300\"\n                      key={`swap-${currentStep}`}\n                      initial={{ scale: 1.2, opacity: 0.5 }}\n                      animate={{ scale: 1, opacity: 1 }}\n                      transition={{ duration: 0.3 }}\n                    >\n                      {steps[currentStep]?.swappingIndices.length > 0 ? Math.floor(currentStep / 2) : 0}\n                    </motion.div>\n                  </div>\n                  <motion.div\n                    className=\"absolute inset-0 bg-gradient-to-r from-pink-500/20 to-transparent\"\n                    animate={{\n                      opacity: [0.3, 0.6, 0.3],\n                      x: [-100, 100]\n                    }}\n                    transition={{ duration: 3, repeat: Infinity, delay: 0.5 }}\n                  />\n                </motion.div>\n\n                {/* Progress Bar */}\n                <motion.div\n                  className=\"relative overflow-hidden rounded-lg bg-gradient-to-br from-purple-500/10 to-purple-600/5 border border-purple-500/30 p-4\"\n                  whileHover={{ scale: 1.02, boxShadow: '0 0 25px rgba(168, 85, 247, 0.4)' }}\n                  transition={{ type: \"spring\", stiffness: 300 }}\n                >\n                  <div className=\"relative z-10\">\n                    <div className=\"flex items-center justify-between mb-2\">\n                      <div className=\"text-xs text-purple-400 font-medium uppercase tracking-wider\">\n                        Progress\n                      </div>\n                      <div className=\"text-xs text-purple-300 font-mono\">\n                        {steps.length > 0 ? Math.round((currentStep / steps.length) * 100) : 0}%\n                      </div>\n                    </div>\n                    <div className=\"relative h-3 bg-gray-800/50 rounded-full overflow-hidden border border-purple-500/20\">\n                      <motion.div\n                        className=\"absolute inset-y-0 left-0 bg-gradient-to-r from-purple-500 via-pink-500 to-cyan-500 rounded-full\"\n                        initial={{ width: 0 }}\n                        animate={{\n                          width: steps.length > 0 ? `${(currentStep / steps.length) * 100}%` : '0%'\n                        }}\n                        transition={{ duration: 0.3, ease: \"easeOut\" }}\n                      />\n                      <motion.div\n                        className=\"absolute inset-0 bg-gradient-to-r from-transparent via-white/30 to-transparent\"\n                        animate={{\n                          x: ['-100%', '200%']\n                        }}\n                        transition={{ duration: 2, repeat: Infinity, ease: \"linear\" }}\n                      />\n                    </div>\n                  </div>\n                </motion.div>\n\n                {/* Sorted Elements Counter */}\n                <motion.div\n                  className=\"relative overflow-hidden rounded-lg bg-gradient-to-br from-green-500/10 to-green-600/5 border border-green-500/30 p-4\"\n                  whileHover={{ scale: 1.02, boxShadow: '0 0 25px rgba(34, 197, 94, 0.4)' }}\n                  transition={{ type: \"spring\", stiffness: 300 }}\n                >\n                  <div className=\"relative z-10\">\n                    <div className=\"text-xs text-green-400 font-medium mb-1 uppercase tracking-wider\">\n                      Sorted Elements\n                    </div>\n                    <div className=\"flex items-baseline gap-2\">\n                      <motion.div\n                        className=\"text-3xl font-bold text-green-300\"\n                        key={`sorted-${currentStep}`}\n                        initial={{ scale: 1.2, opacity: 0.5 }}\n                        animate={{ scale: 1, opacity: 1 }}\n                        transition={{ duration: 0.3 }}\n                      >\n                        {steps[currentStep]?.sortedIndices.length || 0}\n                      </motion.div>\n                      <div className=\"text-sm text-green-400/60\">\n                        / {array.length}\n                      </div>\n                    </div>\n                  </div>\n                  <motion.div\n                    className=\"absolute inset-0 bg-gradient-to-r from-green-500/20 to-transparent\"\n                    animate={{\n                      opacity: [0.3, 0.6, 0.3],\n                      x: [-100, 100]\n                    }}\n                    transition={{ duration: 3, repeat: Infinity, delay: 1 }}\n                  />\n                </motion.div>\n\n                {/* Current Step Indicator */}\n                <motion.div\n                  className=\"relative overflow-hidden rounded-lg bg-gradient-to-br from-yellow-500/10 to-yellow-600/5 border border-yellow-500/30 p-4\"\n                  whileHover={{ scale: 1.02, boxShadow: '0 0 25px rgba(234, 179, 8, 0.4)' }}\n                  transition={{ type: \"spring\", stiffness: 300 }}\n                >\n                  <div className=\"relative z-10\">\n                    <div className=\"text-xs text-yellow-400 font-medium mb-1 uppercase tracking-wider\">\n                      Current Step\n                    </div>\n                    <div className=\"flex items-baseline gap-2\">\n                      <motion.div\n                        className=\"text-3xl font-bold text-yellow-300\"\n                        key={`step-${currentStep}`}\n                        initial={{ scale: 1.2, opacity: 0.5 }}\n                        animate={{ scale: 1, opacity: 1 }}\n                        transition={{ duration: 0.3 }}\n                      >\n                        {currentStep}\n                      </motion.div>\n                      <div className=\"text-sm text-yellow-400/60\">\n                        / {steps.length}\n                      </div>\n                    </div>\n                  </div>\n                  <motion.div\n                    className=\"absolute inset-0 bg-gradient-to-r from-yellow-500/20 to-transparent\"\n                    animate={{\n                      opacity: [0.3, 0.6, 0.3],\n                      x: [-100, 100]\n                    }}\n                    transition={{ duration: 3, repeat: Infinity, delay: 1.5 }}\n                  />\n                </motion.div>\n              </div>\n\n              {/* Status Indicator */}\n              <motion.div\n                className=\"mt-4 p-3 rounded-lg bg-gray-800/50 border border-gray-700/50\"\n                animate={{\n                  borderColor: isPlaying \n                    ? ['rgba(34, 211, 238, 0.5)', 'rgba(168, 85, 247, 0.5)', 'rgba(34, 211, 238, 0.5)']\n                    : 'rgba(107, 114, 128, 0.5)'\n                }}\n                transition={{ duration: 2, repeat: Infinity }}\n              >\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-xs text-gray-400 uppercase tracking-wider\">Status</span>\n                  <motion.div\n                    className=\"flex items-center gap-2\"\n                    animate={{\n                      opacity: isPlaying ? [1, 0.6, 1] : 1\n                    }}\n                    transition={{ duration: 1, repeat: Infinity }}\n                  >\n                    <motion.div\n                      className={`w-2 h-2 rounded-full ${\n                        isPlaying ? 'bg-green-400' : 'bg-gray-500'\n                      }`}\n                      animate={{\n                        boxShadow: isPlaying \n                          ? ['0 0 5px rgba(34, 197, 94, 0.8)', '0 0 15px rgba(34, 197, 94, 0.8)', '0 0 5px rgba(34, 197, 94, 0.8)']\n                          : '0 0 0px rgba(107, 114, 128, 0)'\n                      }}\n                      transition={{ duration: 1, repeat: Infinity }}\n                    />\n                    <span className={`text-sm font-medium ${\n                      isPlaying ? 'text-green-400' : 'text-gray-400'\n                    }`}>\n                      {isPlaying ? 'Running' : 'Paused'}\n                    </span>\n                  </motion.div>\n                </div>\n              </motion.div>\n            </div>\n          </motion.div>\n          </div>\n\n          <div className=\"lg:col-span-3\">\n            <div className=\"bg-gray-900/50 backdrop-blur-lg border border-purple-500/30 rounded-xl p-8 shadow-2xl shadow-purple-500/20 min-h-[600px]\">\n              {/* TODO:VisualizationCanvas Main canvas with animated bars, comparison indicators, and swap trails */}\n              \n              <div className=\"relative h-full flex items-end justify-center gap-1\">\n                {array.length === 0 ? (\n                  <motion.div\n                    initial={{ opacity: 0, scale: 0.8 }}\n                    animate={{ opacity: 1, scale: 1 }}\n                    className=\"absolute inset-0 flex items-center justify-center\"\n                  >\n                    <div className=\"text-center space-y-4\">\n                      <motion.div\n                        animate={{\n                          rotate: [0, 360],\n                          scale: [1, 1.2, 1]\n                        }}\n                        transition={{ duration: 3, repeat: Infinity }}\n                      >\n                        <BarChart3 className=\"w-24 h-24 text-cyan-400/50 mx-auto\" />\n                      </motion.div>\n                      <p className=\"text-cyan-300/70 text-lg font-semibold\">\n                        Generate an array to begin\n                      </p>\n                    </div>\n                  </motion.div>\n                ) : (\n                  (steps.length > 0 && currentStep < steps.length ? steps[currentStep].array : array).map((element, index) => {\n                    const currentArray = steps.length > 0 && currentStep < steps.length ? steps[currentStep] : null;\n                    const isComparing = currentArray?.comparingIndices.includes(index);\n                    const isSwapping = currentArray?.swappingIndices.includes(index);\n                    const isSorted = currentArray?.sortedIndices.includes(index);\n                    \n                    const maxValue = Math.max(...array.map(el => el.value));\n                    const heightPercentage = (element.value / maxValue) * 100;\n                    \n                    const getBarColor = () => {\n                      if (isSorted) return '#00ff00';\n                      if (isSwapping) return '#ff0066';\n                      if (isComparing) return '#ffff00';\n                      return NEON_COLORS[index % NEON_COLORS.length];\n                    };\n\n                    const barColor = getBarColor();\n\n                    return (\n                      <motion.div\n                        key={element.id}\n                        layout\n                        initial={{ opacity: 0, y: 50, scale: 0.5 }}\n                        animate={{\n                          opacity: 1,\n                          y: 0,\n                          scale: isSwapping ? 1.15 : isComparing ? 1.1 : 1,\n                          height: `${heightPercentage}%`,\n                          backgroundColor: barColor,\n                          boxShadow: [\n                            `0 0 ${isSwapping ? '40px' : isComparing ? '30px' : '20px'} ${barColor}`,\n                            `0 0 ${isSwapping ? '50px' : isComparing ? '40px' : '25px'} ${barColor}`,\n                            `0 0 ${isSwapping ? '40px' : isComparing ? '30px' : '20px'} ${barColor}`\n                          ]\n                        }}\n                        exit={{ opacity: 0, scale: 0 }}\n                        transition={{\n                          layout: { type: 'spring', stiffness: 300, damping: 30 },\n                          height: { duration: 0.3, ease: 'easeInOut' },\n                          backgroundColor: { duration: 0.2 },\n                          scale: { duration: 0.2 },\n                          boxShadow: { duration: 1, repeat: Infinity }\n                        }}\n                        className=\"relative rounded-t-lg min-w-[8px] flex-1 max-w-[60px] border-t-2 border-white/30\"\n                        style={{\n                          background: `linear-gradient(to top, ${barColor}, ${barColor}dd)`,\n                        }}\n                      >\n                        {/* Value label */}\n                        <motion.div\n                          initial={{ opacity: 0 }}\n                          animate={{ opacity: array.length <= 30 ? 1 : 0 }}\n                          className=\"absolute -top-8 left-1/2 -translate-x-1/2 text-xs font-bold text-white whitespace-nowrap\"\n                          style={{\n                            textShadow: `0 0 10px ${barColor}, 0 0 20px ${barColor}`\n                          }}\n                        >\n                          {element.value}\n                        </motion.div>\n\n                        {/* Glow effect overlay */}\n                        <motion.div\n                          className=\"absolute inset-0 rounded-t-lg\"\n                          animate={{\n                            opacity: isSwapping ? [0.3, 0.7, 0.3] : isComparing ? [0.2, 0.5, 0.2] : [0.1, 0.3, 0.1]\n                          }}\n                          transition={{ duration: 0.8, repeat: Infinity }}\n                          style={{\n                            background: `linear-gradient(to top, transparent, ${barColor}88)`,\n                          }}\n                        />\n\n                        {/* Status indicator */}\n                        {(isComparing || isSwapping || isSorted) && (\n                          <motion.div\n                            initial={{ scale: 0 }}\n                            animate={{ scale: 1, rotate: 360 }}\n                            exit={{ scale: 0 }}\n                            transition={{ duration: 0.3 }}\n                            className=\"absolute -top-12 left-1/2 -translate-x-1/2\"\n                          >\n                            {isSorted && (\n                              <motion.div\n                                animate={{ y: [0, -5, 0] }}\n                                transition={{ duration: 1, repeat: Infinity }}\n                                className=\"w-6 h-6 rounded-full bg-green-400 border-2 border-green-300 shadow-[0_0_20px_rgba(0,255,0,0.8)]\"\n                              />\n                            )}\n                            {isSwapping && !isSorted && (\n                              <motion.div\n                                animate={{ rotate: [0, 180, 360] }}\n                                transition={{ duration: 0.6, repeat: Infinity }}\n                                className=\"w-6 h-6 rounded-full bg-pink-500 border-2 border-pink-300 shadow-[0_0_20px_rgba(255,0,102,0.8)]\"\n                              />\n                            )}\n                            {isComparing && !isSwapping && !isSorted && (\n                              <motion.div\n                                animate={{ scale: [1, 1.3, 1] }}\n                                transition={{ duration: 0.5, repeat: Infinity }}\n                                className=\"w-6 h-6 rounded-full bg-yellow-400 border-2 border-yellow-300 shadow-[0_0_20px_rgba(255,255,0,0.8)]\"\n                              />\n                            )}\n                          </motion.div>\n                        )}\n                      </motion.div>\n                    );\n                  })\n                )}</parameter>\n</invoke>\n              </div>\n\n              \n              {steps.length > 0 && currentStep < steps.length && steps[currentStep].comparingIndices.length > 0 && (\n                <div className=\"absolute inset-0 pointer-events-none\">\n                  {steps[currentStep].comparingIndices.map((index, i) => {\n                    const barWidth = 100 / (array.length || 1);\n                    const xPosition = index * barWidth + barWidth / 2;\n                    \n                    return (\n                      <motion.div\n                        key={`compare-${index}-${i}`}\n                        initial={{ opacity: 0, y: -20, scale: 0.5 }}\n                        animate={{ \n                          opacity: [0, 1, 1, 0],\n                          y: [-20, 0, 0, -20],\n                          scale: [0.5, 1.2, 1.2, 0.5]\n                        }}\n                        transition={{ \n                          duration: 1.5,\n                          repeat: Infinity,\n                          ease: \"easeInOut\"\n                        }}\n                        className=\"absolute top-0\"\n                        style={{ left: `${xPosition}%`, transform: 'translateX(-50%)' }}\n                      >\n                        <motion.div\n                          className=\"relative\"\n                          animate={{\n                            rotate: [0, 360],\n                          }}\n                          transition={{\n                            duration: 2,\n                            repeat: Infinity,\n                            ease: \"linear\"\n                          }}\n                        >\n                          <div className=\"w-8 h-8 rounded-full bg-gradient-to-br from-yellow-400 to-orange-500 flex items-center justify-center shadow-[0_0_30px_rgba(251,191,36,0.8)]\">\n                            <motion.div\n                              className=\"w-6 h-6 rounded-full bg-yellow-300 flex items-center justify-center\"\n                              animate={{\n                                boxShadow: [\n                                  '0 0 10px rgba(251,191,36,0.6)',\n                                  '0 0 25px rgba(251,191,36,1)',\n                                  '0 0 10px rgba(251,191,36,0.6)'\n                                ]\n                              }}\n                              transition={{\n                                duration: 1,\n                                repeat: Infinity\n                              }}\n                            >\n                              <span className=\"text-xs font-bold text-gray-900\">?</span>\n                            </motion.div>\n                          </div>\n                        </motion.div>\n                        \n                        {/* Connecting line to bar */}\n                        <motion.div\n                          className=\"absolute top-8 left-1/2 w-0.5 bg-gradient-to-b from-yellow-400 to-transparent\"\n                          initial={{ height: 0 }}\n                          animate={{ height: 40 }}\n                          transition={{ duration: 0.3 }}\n                          style={{ transform: 'translateX(-50%)' }}\n                        />\n                        \n                        {/* Pulsing ring effect */}\n                        <motion.div\n                          className=\"absolute top-0 left-0 w-8 h-8 rounded-full border-2 border-yellow-400\"\n                          animate={{\n                            scale: [1, 2, 2],\n                            opacity: [0.8, 0, 0]\n                          }}\n                          transition={{\n                            duration: 1.5,\n                            repeat: Infinity,\n                            ease: \"easeOut\"\n                          }}\n                        />\n                      </motion.div>\n                    );\n                  })}\n                  \n                  {/* Comparison arc connecting compared elements */}\n                  {steps[currentStep].comparingIndices.length === 2 && (\n                    <motion.svg\n                      className=\"absolute inset-0 w-full h-full\"\n                      initial={{ opacity: 0 }}\n                      animate={{ opacity: 1 }}\n                      exit={{ opacity: 0 }}\n                    >\n                      <motion.path\n                        d={(() => {\n                          const barWidth = 100 / (array.length || 1);\n                          const x1 = steps[currentStep].comparingIndices[0] * barWidth + barWidth / 2;\n                          const x2 = steps[currentStep].comparingIndices[1] * barWidth + barWidth / 2;\n                          const y = 60;\n                          const midX = (x1 + x2) / 2;\n                          const controlY = y - Math.abs(x2 - x1) * 0.3;\n                          \n                          return `M ${x1}% ${y} Q ${midX}% ${controlY} ${x2}% ${y}`;\n                        })()}\n                        stroke=\"url(#compareGradient)\"\n                        strokeWidth=\"3\"\n                        fill=\"none\"\n                        strokeLinecap=\"round\"\n                        initial={{ pathLength: 0 }}\n                        animate={{ \n                          pathLength: [0, 1, 1, 0],\n                          opacity: [0, 1, 1, 0]\n                        }}\n                        transition={{ \n                          duration: 1.5,\n                          repeat: Infinity,\n                          ease: \"easeInOut\"\n                        }}\n                        style={{\n                          filter: 'drop-shadow(0 0 8px rgba(251, 191, 36, 0.8))'\n                        }}\n                      />\n                      <defs>\n                        <linearGradient id=\"compareGradient\" x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"0%\">\n                          <stop offset=\"0%\" stopColor=\"#fbbf24\" stopOpacity=\"0.8\" />\n                          <stop offset=\"50%\" stopColor=\"#f59e0b\" stopOpacity=\"1\" />\n                          <stop offset=\"100%\" stopColor=\"#fbbf24\" stopOpacity=\"0.8\" />\n                        </linearGradient>\n                      </defs>\n                    </motion.svg>\n                  )}\n                </div>\n              )}\n              \n                            {steps.length > 0 && currentStep < steps.length && steps[currentStep].swappingIndices.length > 0 && (\n                <div className=\"absolute inset-0 pointer-events-none\">\n                  {steps[currentStep].swappingIndices.map((index, i) => {\n                    const maxHeight = 500;\n                    const barWidth = Math.max(8, Math.min(60, (100 / arraySize[0]) * 8));\n                    const gap = 4;\n                    const totalWidth = array.length * (barWidth + gap);\n                    const startX = (800 - totalWidth) / 2;\n                    const xPosition = startX + index * (barWidth + gap) + barWidth / 2;\n                    const element = steps[currentStep].array[index];\n                    const height = (element.value / 100) * maxHeight;\n                    const yPosition = maxHeight - height;\n\n                    return (\n                      <motion.div\n                        key={`trail-${index}-${i}`}\n                        className=\"absolute\"\n                        style={{\n                          left: xPosition,\n                          bottom: 0,\n                          width: barWidth,\n                          height: height,\n                        }}\n                        initial={{ opacity: 0, scale: 1 }}\n                        animate={{ \n                          opacity: [0.8, 0.4, 0],\n                          scale: [1, 1.2, 1.4],\n                          filter: [\n                            'blur(0px) brightness(1.5)',\n                            'blur(8px) brightness(1.2)',\n                            'blur(16px) brightness(0.8)'\n                          ]\n                        }}\n                        transition={{ \n                          duration: 0.6,\n                          ease: \"easeOut\"\n                        }}\n                      >\n                        <div \n                          className=\"w-full h-full rounded-t-lg\"\n                          style={{\n                            background: `linear-gradient(to top, ${NEON_COLORS[index % NEON_COLORS.length]}, ${NEON_COLORS[(index + 1) % NEON_COLORS.length]})`,\n                            boxShadow: `0 0 30px ${NEON_COLORS[index % NEON_COLORS.length]}, 0 0 60px ${NEON_COLORS[index % NEON_COLORS.length]}`,\n                          }}\n                        />\n                      </motion.div>\n                    );\n                  })}\n                  \n                  {/* Swap connection line with motion blur */}\n                  {steps[currentStep].swappingIndices.length === 2 && (\n                    <motion.svg\n                      className=\"absolute inset-0 w-full h-full\"\n                      initial={{ opacity: 0 }}\n                      animate={{ opacity: [0, 1, 0] }}\n                      transition={{ duration: 0.5 }}\n                    >\n                      <defs>\n                        <filter id=\"motionBlur\">\n                          <feGaussianBlur in=\"SourceGraphic\" stdDeviation=\"8,0\" />\n                        </filter>\n                        <linearGradient id=\"swapGradient\" x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"0%\">\n                          <stop offset=\"0%\" stopColor={NEON_COLORS[steps[currentStep].swappingIndices[0] % NEON_COLORS.length]} stopOpacity=\"0.8\" />\n                          <stop offset=\"50%\" stopColor=\"#ffffff\" stopOpacity=\"1\" />\n                          <stop offset=\"100%\" stopColor={NEON_COLORS[steps[currentStep].swappingIndices[1] % NEON_COLORS.length]} stopOpacity=\"0.8\" />\n                        </linearGradient>\n                      </defs>\n                      <motion.path\n                        d={(() => {\n                          const barWidth = Math.max(8, Math.min(60, (100 / arraySize[0]) * 8));\n                          const gap = 4;\n                          const totalWidth = array.length * (barWidth + gap);\n                          const startX = (800 - totalWidth) / 2;\n                          const x1 = startX + steps[currentStep].swappingIndices[0] * (barWidth + gap) + barWidth / 2;\n                          const x2 = startX + steps[currentStep].swappingIndices[1] * (barWidth + gap) + barWidth / 2;\n                          const y = 50;\n                          const controlY = y - 40;\n                          return `M ${x1} ${y} Q ${(x1 + x2) / 2} ${controlY} ${x2} ${y}`;\n                        })()}\n                        stroke=\"url(#swapGradient)\"\n                        strokeWidth=\"3\"\n                        fill=\"none\"\n                        filter=\"url(#motionBlur)\"\n                        initial={{ pathLength: 0, opacity: 0 }}\n                        animate={{ \n                          pathLength: [0, 1, 1],\n                          opacity: [0, 1, 0]\n                        }}\n                        transition={{ duration: 0.5, ease: \"easeInOut\" }}\n                      />\n                    </motion.svg>\n                  )}\n                  \n                  {/* Particle burst effects at swap positions */}\n                  {steps[currentStep].swappingIndices.map((index) => {\n                    const barWidth = Math.max(8, Math.min(60, (100 / arraySize[0]) * 8));\n                    const gap = 4;\n                    const totalWidth = array.length * (barWidth + gap);\n                    const startX = (800 - totalWidth) / 2;\n                    const xPosition = startX + index * (barWidth + gap) + barWidth / 2;\n\n                    return (\n                      <div key={`particles-${index}`} className=\"absolute\" style={{ left: xPosition, top: 40 }}>\n                        {[...Array(8)].map((_, particleIndex) => {\n                          const angle = (particleIndex / 8) * Math.PI * 2;\n                          const distance = 30;\n                          const x = Math.cos(angle) * distance;\n                          const y = Math.sin(angle) * distance;\n                          \n                          return (\n                            <motion.div\n                              key={particleIndex}\n                              className=\"absolute w-2 h-2 rounded-full\"\n                              style={{\n                                background: NEON_COLORS[index % NEON_COLORS.length],\n                                boxShadow: `0 0 10px ${NEON_COLORS[index % NEON_COLORS.length]}`,\n                              }}\n                              initial={{ x: 0, y: 0, opacity: 1, scale: 1 }}\n                              animate={{ \n                                x: x,\n                                y: y,\n                                opacity: 0,\n                                scale: 0\n                              }}\n                              transition={{ \n                                duration: 0.6,\n                                ease: \"easeOut\"\n                              }}\n                            />\n                          );\n                        })}\n                      </div>\n                    );\n                  })}\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.8, delay: 0.3 }}\n          className=\"bg-gray-900/50 backdrop-blur-lg border border-cyan-500/30 rounded-xl p-6 shadow-[0_0_30px_rgba(0,255,255,0.2)]\"\n        >\n          <h3 className=\"text-lg font-bold text-cyan-400 mb-4 flex items-center gap-2\">\n            <BarChart3 className=\"w-5 h-5\" />\n            Legend\n          </h3>\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n            <motion.div\n              className=\"flex items-center gap-3 p-3 rounded-lg bg-gray-800/50 border border-gray-700\"\n              whileHover={{ scale: 1.05, borderColor: 'rgba(0, 255, 255, 0.5)' }}\n              transition={{ duration: 0.2 }}\n            >\n              <motion.div\n                className=\"w-6 h-12 rounded bg-gradient-to-t from-cyan-500 to-cyan-300\"\n                animate={{\n                  boxShadow: [\n                    '0 0 10px rgba(0, 255, 255, 0.5)',\n                    '0 0 20px rgba(0, 255, 255, 0.8)',\n                    '0 0 10px rgba(0, 255, 255, 0.5)'\n                  ]\n                }}\n                transition={{ duration: 2, repeat: Infinity }}\n              />\n              <div>\n                <div className=\"text-sm font-semibold text-white\">Default</div>\n                <div className=\"text-xs text-gray-400\">Unsorted</div>\n              </div>\n            </motion.div>\n\n            <motion.div\n              className=\"flex items-center gap-3 p-3 rounded-lg bg-gray-800/50 border border-gray-700\"\n              whileHover={{ scale: 1.05, borderColor: 'rgba(255, 255, 0, 0.5)' }}\n              transition={{ duration: 0.2 }}\n            >\n              <motion.div\n                className=\"w-6 h-12 rounded bg-gradient-to-t from-yellow-500 to-yellow-300\"\n                animate={{\n                  boxShadow: [\n                    '0 0 15px rgba(255, 255, 0, 0.6)',\n                    '0 0 30px rgba(255, 255, 0, 1)',\n                    '0 0 15px rgba(255, 255, 0, 0.6)'\n                  ],\n                  scale: [1, 1.1, 1]\n                }}\n                transition={{ duration: 1.5, repeat: Infinity }}\n              />\n              <div>\n                <div className=\"text-sm font-semibold text-white\">Comparing</div>\n                <div className=\"text-xs text-gray-400\">Active</div>\n              </div>\n            </motion.div>\n\n            <motion.div\n              className=\"flex items-center gap-3 p-3 rounded-lg bg-gray-800/50 border border-gray-700\"\n              whileHover={{ scale: 1.05, borderColor: 'rgba(255, 0, 102, 0.5)' }}\n              transition={{ duration: 0.2 }}\n            >\n              <motion.div\n                className=\"w-6 h-12 rounded bg-gradient-to-t from-pink-600 to-pink-400\"\n                animate={{\n                  boxShadow: [\n                    '0 0 15px rgba(255, 0, 102, 0.6)',\n                    '0 0 30px rgba(255, 0, 102, 1)',\n                    '0 0 15px rgba(255, 0, 102, 0.6)'\n                  ],\n                  x: [-2, 2, -2]\n                }}\n                transition={{ duration: 0.8, repeat: Infinity }}\n              />\n              <div>\n                <div className=\"text-sm font-semibold text-white\">Swapping</div>\n                <div className=\"text-xs text-gray-400\">Moving</div>\n              </div>\n            </motion.div>\n\n            <motion.div\n              className=\"flex items-center gap-3 p-3 rounded-lg bg-gray-800/50 border border-gray-700\"\n              whileHover={{ scale: 1.05, borderColor: 'rgba(0, 255, 0, 0.5)' }}\n              transition={{ duration: 0.2 }}\n            >\n              <motion.div\n                className=\"w-6 h-12 rounded bg-gradient-to-t from-green-600 to-green-400\"\n                animate={{\n                  boxShadow: [\n                    '0 0 10px rgba(0, 255, 0, 0.5)',\n                    '0 0 20px rgba(0, 255, 0, 0.8)',\n                    '0 0 10px rgba(0, 255, 0, 0.5)'\n                  ]\n                }}\n                transition={{ duration: 2, repeat: Infinity }}\n              />\n              <div>\n                <div className=\"text-sm font-semibold text-white\">Sorted</div>\n                <div className=\"text-xs text-gray-400\">Complete</div>\n              </div>\n            </motion.div>\n          </div>\n        </motion.div>\n      </div>\n    </div>\n  );\n}",
    "error": null,
    "elapsed_time": 104.38266825675964,
    "success": true
  }
}