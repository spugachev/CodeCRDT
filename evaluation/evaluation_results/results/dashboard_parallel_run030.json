{
  "prompt_id": "dashboard",
  "prompt_name": "Analytics Dashboard",
  "mode": "parallel",
  "run_number": 30,
  "timestamp": "2025-10-13T21:03:17.014140",
  "response_time": 89.36840534210205,
  "total_tokens": null,
  "response_content": "import { useState, useCallback } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Moon, Sun, RefreshCw } from 'lucide-react';\nimport { ArrowUpDown, ChevronLeft, ChevronRight } from 'lucide-react';\nimport { Badge } from '@/components/ui/badge';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\nimport { TrendingUp, TrendingDown, DollarSign, Users, ShoppingCart, Target, Package, CreditCard, UserPlus, AlertCircle } from 'lucide-react';\n\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\nimport { PieChart, Pie, Cell, ResponsiveContainer, Legend, Tooltip } from 'recharts';\nimport { motion } from 'framer-motion';\nimport { TrendingUp, Users } from 'lucide-react';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';\nimport { AreaChart, Area, BarChart, Bar, PieChart, Pie, Cell, Legend } from 'recharts';\nimport { TrendingUp, TrendingDown, DollarSign, Users, ShoppingCart, Target } from 'lucide-react';\nimport { TrendingUp, TrendingDown, DollarSign, Users, ShoppingCart, Target } from 'lucide-react'\nimport { AlertCircle, AlertTriangle, Info, X } from 'lucide-react';\nimport { Badge } from '@/components/ui/badge';\n;\nimport { motion } from 'framer-motion';\n\ninterface MetricData {\n  id: string;\n  label: string;\n  value: number;\n  change: number;\n  trend: 'up' | 'down';\n}\n\ninterface ChartDataPoint {\n  date: string;\n  revenue: number;\n  users: number;\n  orders: number;\n}\n\ninterface TableRow {\n  id: string;\n  product: string;\n  sales: number;\n  revenue: number;\n  status: 'active' | 'pending' | 'inactive';\n}\ninterface Alert {\n  id: string;\n  message: string;\n  severity: 'error' | 'warning' | 'info';\n  timestamp: string;\n}\n\nconst mockAlerts: Alert[] = [\n  { id: '1', message: 'Server response time increased by 45%', severity: 'error', timestamp: '2 min ago' },\n  { id: '2', message: 'Low inventory alert for Premium Plan', severity: 'warning', timestamp: '15 min ago' },\n  { id: '3', message: 'New feature deployed successfully', severity: 'info', timestamp: '1 hour ago' },\n  { id: '4', message: 'Payment gateway experiencing delays', severity: 'warning', timestamp: '2 hours ago' }\n];\n\nconst mockMetrics: MetricData[] = [\n  { id: '1', label: 'Total Revenue', value: 45231, change: 12.5, trend: 'up' },\n  { id: '2', label: 'Active Users', value: 2350, change: 8.2, trend: 'up' },\n  { id: '3', label: 'Total Orders', value: 1543, change: -3.1, trend: 'down' },\n  { id: '4', label: 'Conversion Rate', value: 3.24, change: 5.7, trend: 'up' }\n];\n\nconst mockChartData: ChartDataPoint[] = [\n  { date: '2024-01-01', revenue: 12000, users: 450, orders: 230 },\n  { date: '2024-01-02', revenue: 15000, users: 520, orders: 280 },\n  { date: '2024-01-03', revenue: 13500, users: 490, orders: 250 },\n  { date: '2024-01-04', revenue: 18000, users: 610, orders: 320 },\n  { date: '2024-01-05', revenue: 16500, users: 580, orders: 295 },\n  { date: '2024-01-06', revenue: 20000, users: 680, orders: 350 },\n  { date: '2024-01-07', revenue: 22000, users: 720, orders: 380 }\n];\n\nconst mockTableData: TableRow[] = [\n  { id: '1', product: 'Premium Plan', sales: 234, revenue: 23400, status: 'active' },\n  { id: '2', product: 'Basic Plan', sales: 567, revenue: 11340, status: 'active' },\n  { id: '3', product: 'Enterprise Plan', sales: 89, revenue: 44500, status: 'active' },\n  { id: '4', product: 'Starter Plan', sales: 432, revenue: 4320, status: 'pending' },\n  { id: '5', product: 'Pro Plan', sales: 156, revenue: 15600, status: 'inactive' }\n];\n\ninterface ActivityItem {\n  id: string;\n  type: 'sale' | 'user' | 'order' | 'alert';\n  message: string;\n  timestamp: string;\n  icon: 'package' | 'userPlus' | 'creditCard' | 'alertCircle';\n}\n\nconst mockActivityData: ActivityItem[] = [\n  { id: '1', type: 'sale', message: 'New sale: Premium Plan', timestamp: '2 minutes ago', icon: 'package' },\n  { id: '2', type: 'user', message: 'New user registered', timestamp: '5 minutes ago', icon: 'userPlus' },\n  { id: '3', type: 'order', message: 'Order #1234 completed', timestamp: '12 minutes ago', icon: 'creditCard' },\n  { id: '4', type: 'sale', message: 'New sale: Enterprise Plan', timestamp: '18 minutes ago', icon: 'package' },\n  { id: '5', type: 'alert', message: 'Low stock alert', timestamp: '25 minutes ago', icon: 'alertCircle' },\n  { id: '6', type: 'user', message: '3 new users registered', timestamp: '32 minutes ago', icon: 'userPlus' }\n];\nconst mockQuickStats = [\n  {\n    id: '1',\n    label: 'Avg Order Value',\n    value: '$142.50',\n    change: 15.3,\n    trend: 'up' as const,\n    icon: DollarSign,\n    sparklineData: [120, 135, 128, 145, 138, 152, 142]\n  },\n  {\n    id: '2',\n    label: 'Customer Retention',\n    value: '87.5%',\n    change: 4.2,\n    trend: 'up' as const,\n    icon: Users,\n    sparklineData: [82, 83, 85, 84, 86, 87, 87.5]\n  },\n  {\n    id: '3',\n    label: 'Cart Abandonment',\n    value: '23.8%',\n    change: -2.1,\n    trend: 'down' as const,\n    icon: ShoppingCart,\n    sparklineData: [28, 27, 26, 25, 24.5, 24, 23.8]\n  },\n  {\n    id: '4',\n    label: 'Goal Completion',\n    value: '92.3%',\n    change: 8.7,\n    trend: 'up' as const,\n    icon: Target,\n    sparklineData: [85, 87, 88, 89, 90, 91, 92.3]\n  }\n];\nconst mockPieData = [\n  { name: 'Premium Plan', value: 234, color: '#3b82f6' },\n  { name: 'Basic Plan', value: 567, color: '#10b981' },\n  { name: 'Enterprise Plan', value: 89, color: '#8b5cf6' },\n  { name: 'Starter Plan', value: 432, color: '#f59e0b' },\n  { name: 'Pro Plan', value: 156, color: '#ef4444' }\n];\n\nconst CustomTooltip = ({ active, payload }: any) => {\n  if (active && payload && payload.length) {\n    return (\n      <div className=\"bg-white dark:bg-gray-800 p-3 rounded-lg shadow-lg border border-gray-200 dark:border-gray-700\">\n        <p className=\"font-semibold text-gray-900 dark:text-white\">{payload[0].name}</p>\n        <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n          Orders: <span className=\"font-medium\">{payload[0].value}</span>\n        </p>\n        <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n          Percentage: <span className=\"font-medium\">{payload[0].percent ? (payload[0].percent * 100).toFixed(1) : 0}%</span>\n        </p>\n      </div>\n    );\n  }\n  return null;\n};\n\nconst renderCustomLabel = ({ cx, cy, midAngle, innerRadius, outerRadius, percent }: any) => {\n  const RADIAN = Math.PI / 180;\n  const radius = innerRadius + (outerRadius - innerRadius) * 0.5;\n  const x = cx + radius * Math.cos(-midAngle * RADIAN);\n  const y = cy + radius * Math.sin(-midAngle * RADIAN);\n\n  if (percent < 0.05) return null;\n\n  return (\n    <text \n      x={x} \n      y={y} \n      fill=\"white\" \n      textAnchor={x > cx ? 'start' : 'end'} \n      dominantBaseline=\"central\"\n      className=\"text-xs font-semibold\"\n    >\n      {`${(percent * 100).toFixed(0)}%`}\n    </text>\n  );\n};\n\ntype SortField = 'product' | 'sales' | 'revenue' | 'status';\ntype SortDirection = 'asc' | 'desc';\n\nexport default function AnalyticsDashboard() {\n  const [alerts, setAlerts] = useState<Alert[]>(mockAlerts);\n  const [isDarkMode, setIsDarkMode] = useState(false);\n  const [metrics, setMetrics] = useState<MetricData[]>(mockMetrics);\n  const [chartData, setChartData] = useState<ChartDataPoint[]>(mockChartData);\n  const [tableData, setTableData] = useState<TableRow[]>(mockTableData);\n  const [isRefreshing, setIsRefreshing] = useState(false);\n  const [activityData, setActivityData] = useState<ActivityItem[]>(mockActivityData);\n  const [pieData, setPieData] = useState(mockPieData);\n  const [sortField, setSortField] = useState<SortField>('revenue');\n  const [sortDirection, setSortDirection] = useState<SortDirection>('desc');\n  const [currentPage, setCurrentPage] = useState(1);\n  const itemsPerPage = 5;\n\n  const toggleDarkMode = useCallback(() => {\n    setIsDarkMode(prev => !prev);\n  }, []);\n\n  const handleSort = useCallback((field: SortField) => {\n    if (sortField === field) {\n      setSortDirection(prev => prev === 'asc' ? 'desc' : 'asc');\n    } else {\n      setSortField(field);\n      setSortDirection('desc');\n    }\n    setCurrentPage(1);\n  }, [sortField]);\n\n  const sortedData = useCallback(() => {\n    const sorted = [...tableData].sort((a, b) => {\n      let aValue = a[sortField];\n      let bValue = b[sortField];\n\n      if (typeof aValue === 'string') {\n        aValue = aValue.toLowerCase();\n        bValue = (bValue as string).toLowerCase();\n      }\n\n      if (aValue < bValue) return sortDirection === 'asc' ? -1 : 1;\n      if (aValue > bValue) return sortDirection === 'asc' ? 1 : -1;\n      return 0;\n    });\n    return sorted;\n  }, [tableData, sortField, sortDirection]);\n\n  const paginatedData = useCallback(() => {\n    const sorted = sortedData();\n    const startIndex = (currentPage - 1) * itemsPerPage;\n    const endIndex = startIndex + itemsPerPage;\n    return sorted.slice(startIndex, endIndex);\n  }, [sortedData, currentPage]);\n\n  const totalPages = Math.ceil(tableData.length / itemsPerPage);\n\n  const getStatusBadge = (status: TableRow['status']) => {\n    const variants = {\n      active: 'default',\n      pending: 'secondary',\n      inactive: 'destructive'\n    };\n    return (\n      <Badge variant={variants[status] as any} className=\"capitalize\">\n        {status}\n      </Badge>\n    );\n  };\n\n  const handleRefresh = useCallback(() => {\n    setIsRefreshing(true);\n    \n    setTimeout(() => {\n      // Generate updated metrics with random variations\n      const updatedMetrics = mockMetrics.map(metric => ({\n        ...metric,\n        value: metric.value + Math.floor(Math.random() * 200 - 100),\n        change: parseFloat((Math.random() * 20 - 5).toFixed(1)),\n        trend: Math.random() > 0.5 ? 'up' as const : 'down' as const\n      }));\n\n      // Generate updated chart data with random variations\n      const updatedChartData = mockChartData.map(point => ({\n        ...point,\n        revenue: point.revenue + Math.floor(Math.random() * 4000 - 2000),\n        users: point.users + Math.floor(Math.random() * 100 - 50),\n        orders: point.orders + Math.floor(Math.random() * 50 - 25)\n      }));\n\n      // Generate updated table data with random variations\n      const updatedTableData = mockTableData.map(row => ({\n        ...row,\n        sales: row.sales + Math.floor(Math.random() * 40 - 20),\n        revenue: row.revenue + Math.floor(Math.random() * 2000 - 1000)\n      }));\n\n      setMetrics(updatedMetrics);\n      setChartData(updatedChartData);\n      setTableData(updatedTableData);\n      setIsRefreshing(false);\n    }, 1500);\n\n  const dismissAlert = useCallback((alertId: string) => {\n    setAlerts(prev => prev.filter(alert => alert.id !== alertId));\n  }, []);\n\n  const getAlertIcon = (severity: Alert['severity']) => {\n    switch (severity) {\n      case 'error':\n        return <AlertCircle className=\"h-5 w-5 text-red-500\" />;\n      case 'warning':\n        return <AlertTriangle className=\"h-5 w-5 text-yellow-500\" />;\n      case 'info':\n        return <Info className=\"h-5 w-5 text-blue-500\" />;\n    }\n  };\n\n  const getAlertBadgeVariant = (severity: Alert['severity']) => {\n    switch (severity) {\n      case 'error':\n        return 'destructive';\n      case 'warning':\n        return 'default';\n      case 'info':\n        return 'secondary';\n    }\n  };</parameter>\n  }, []);\n\n  return (\n    <div className={`min-h-screen ${isDarkMode ? 'dark bg-gray-900' : 'bg-gray-50'}`}>\n      <div className=\"container mx-auto p-4 md:p-6 lg:p-8\">\n        <div className=\"flex flex-col md:flex-row justify-between items-start md:items-center gap-4 mb-8\">\n          <div>\n            <h1 className={`text-3xl md:text-4xl font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n              Analytics Dashboard\n            </h1>\n            <p className={`mt-2 ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n              Real-time insights and performance metrics\n            </p>\n          </div>\n          \n          <div className=\"flex gap-2\">\n            <Button\n              variant=\"outline\"\n              size=\"icon\"\n              onClick={toggleDarkMode}\n              className={isDarkMode ? 'border-gray-700' : ''}\n            >\n              {isDarkMode ? <Sun className=\"h-5 w-5\" /> : <Moon className=\"h-5 w-5\" />}\n            </Button>\n            \n            <Button\n              variant=\"outline\"\n              onClick={handleRefresh}\n              disabled={isRefreshing}\n              className={isDarkMode ? 'border-gray-700' : ''}\n            >\n              <RefreshCw className={`h-4 w-4 mr-2 ${isRefreshing ? 'animate-spin' : ''}`} />\n              Refresh\n            </Button>\n          </div>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 md:gap-6 mb-8\">\n          {metrics.map((metric, index) => {\n            const Icon = metric.label === 'Total Revenue' ? DollarSign :\n                        metric.label === 'Active Users' ? Users :\n                        metric.label === 'Total Orders' ? ShoppingCart :\n                        Target;\n            \n            const TrendIcon = metric.trend === 'up' ? TrendingUp : TrendingDown;\n            const trendColor = metric.trend === 'up' ? 'text-green-500' : 'text-red-500';\n            const trendBgColor = metric.trend === 'up' ? 'bg-green-50 dark:bg-green-900/20' : 'bg-red-50 dark:bg-red-900/20';\n\n            return (\n              <motion.div\n                key={metric.id}\n                initial={{ opacity: 0, y: 20 }}\n                animate={{ opacity: 1, y: 0 }}\n                transition={{ duration: 0.4, delay: index * 0.1 }}\n              >\n                <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n                  <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                    <CardTitle className={`text-sm font-medium ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                      {metric.label}\n                    </CardTitle>\n                    <div className={`p-2 rounded-lg ${isDarkMode ? 'bg-gray-700' : 'bg-gray-100'}`}>\n                      <Icon className={`h-4 w-4 ${isDarkMode ? 'text-gray-300' : 'text-gray-600'}`} />\n                    </div>\n                  </CardHeader>\n                  <CardContent>\n                    <div className={`text-2xl font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                      {metric.label === 'Total Revenue' ? `$${metric.value.toLocaleString()}` :\n                       metric.label === 'Conversion Rate' ? `${metric.value}%` :\n                       metric.value.toLocaleString()}\n                    </div>\n                    <div className=\"flex items-center mt-2\">\n                      <div className={`flex items-center gap-1 px-2 py-1 rounded-full ${trendBgColor}`}>\n                        <TrendIcon className={`h-3 w-3 ${trendColor}`} />\n                        <span className={`text-xs font-medium ${trendColor}`}>\n                          {Math.abs(metric.change)}%\n                        </span>\n                      </div>\n                      <span className={`text-xs ml-2 ${isDarkMode ? 'text-gray-400' : 'text-gray-500'}`}>\n                        vs last period\n                      </span>\n                    </div>\n                  </CardContent>\n                </Card>\n              </motion.div>\n            );\n          })}\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-4 md:gap-6 mb-8\">\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Revenue Overview</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Daily revenue trends\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <ResponsiveContainer width=\"100%\" height={300}>\n                <LineChart data={chartData}>\n                  <CartesianGrid \n                    strokeDasharray=\"3 3\" \n                    stroke={isDarkMode ? '#374151' : '#e5e7eb'} \n                  />\n                  <XAxis \n                    dataKey=\"date\" \n                    stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                    tick={{ fill: isDarkMode ? '#9ca3af' : '#6b7280' }}\n                    tickFormatter={(value) => new Date(value).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n                  />\n                  <YAxis \n                    stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                    tick={{ fill: isDarkMode ? '#9ca3af' : '#6b7280' }}\n                    tickFormatter={(value) => `$${(value / 1000).toFixed(0)}k`}\n                  />\n                  <Tooltip \n                    contentStyle={{\n                      backgroundColor: isDarkMode ? '#1f2937' : '#ffffff',\n                      border: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\n                      borderRadius: '6px',\n                      color: isDarkMode ? '#ffffff' : '#000000'\n                    }}\n                    labelStyle={{ color: isDarkMode ? '#9ca3af' : '#6b7280' }}\n                    formatter={(value: number) => [`$${value.toLocaleString()}`, 'Revenue']}\n                    labelFormatter={(label) => new Date(label).toLocaleDateString('en-US', { month: 'long', day: 'numeric', year: 'numeric' })}\n                  />\n                  <Line \n                    type=\"monotone\" \n                    dataKey=\"revenue\" \n                    stroke=\"#3b82f6\" \n                    strokeWidth={2}\n                    dot={{ fill: '#3b82f6', r: 4 }}\n                    activeDot={{ r: 6 }}\n                  />\n                </LineChart>\n              </ResponsiveContainer>\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>User Growth</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Active users over time\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"h-[300px] w-full\">\n                <svg width=\"100%\" height=\"100%\" viewBox=\"0 0 700 300\" preserveAspectRatio=\"none\">\n                  <defs>\n                    <linearGradient id=\"userGradient\" x1=\"0%\" y1=\"0%\" x2=\"0%\" y2=\"100%\">\n                      <stop offset=\"0%\" stopColor=\"#3b82f6\" stopOpacity=\"0.4\" />\n                      <stop offset=\"100%\" stopColor=\"#3b82f6\" stopOpacity=\"0.05\" />\n                    </linearGradient>\n                  </defs>\n                  \n                  {/* Generate path for area chart */}\n                  <motion.path\n                    d={(() => {\n                      const maxUsers = Math.max(...chartData.map(d => d.users));\n                      const width = 700;\n                      const height = 300;\n                      const padding = 20;\n                      const points = chartData.map((d, i) => {\n                        const x = (i / (chartData.length - 1)) * (width - 2 * padding) + padding;\n                        const y = height - padding - ((d.users / maxUsers) * (height - 2 * padding));\n                        return `${x},${y}`;\n                      });\n                      const firstX = padding;\n                      const lastX = width - padding;\n                      return `M${firstX},${height - padding} L${points.join(' L')} L${lastX},${height - padding} Z`;\n                    })()}\n                    fill=\"url(#userGradient)\"\n                    initial={{ opacity: 0 }}\n                    animate={{ opacity: 1 }}\n                    transition={{ duration: 0.8 }}\n                  />\n                  \n                  {/* Line on top of area */}\n                  <motion.path\n                    d={(() => {\n                      const maxUsers = Math.max(...chartData.map(d => d.users));\n                      const width = 700;\n                      const height = 300;\n                      const padding = 20;\n                      const points = chartData.map((d, i) => {\n                        const x = (i / (chartData.length - 1)) * (width - 2 * padding) + padding;\n                        const y = height - padding - ((d.users / maxUsers) * (height - 2 * padding));\n                        return `${x},${y}`;\n                      });\n                      return `M${points.join(' L')}`;\n                    })()}\n                    stroke=\"#3b82f6\"\n                    strokeWidth=\"3\"\n                    fill=\"none\"\n                    initial={{ pathLength: 0 }}\n                    animate={{ pathLength: 1 }}\n                    transition={{ duration: 1.5, ease: \"easeInOut\" }}\n                  />\n                  \n                  {/* Data points */}\n                  {chartData.map((d, i) => {\n                    const maxUsers = Math.max(...chartData.map(d => d.users));\n                    const width = 700;\n                    const height = 300;\n                    const padding = 20;\n                    const x = (i / (chartData.length - 1)) * (width - 2 * padding) + padding;\n                    const y = height - padding - ((d.users / maxUsers) * (height - 2 * padding));\n                    \n                    return (\n                      <g key={i}>\n                        <motion.circle\n                          cx={x}\n                          cy={y}\n                          r=\"5\"\n                          fill=\"#3b82f6\"\n                          initial={{ scale: 0 }}\n                          animate={{ scale: 1 }}\n                          transition={{ delay: 0.1 * i, duration: 0.3 }}\n                          className=\"cursor-pointer hover:r-7\"\n                        />\n                        <title>{`${d.date}: ${d.users} users`}</title>\n                      </g>\n                    );\n                  })}\n                </svg>\n                \n                {/* Chart labels */}\n                <div className=\"flex justify-between mt-4 px-4\">\n                  {chartData.map((d, i) => (\n                    <motion.div\n                      key={i}\n                      className={`text-xs ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}\n                      initial={{ opacity: 0, y: 10 }}\n                      animate={{ opacity: 1, y: 0 }}\n                      transition={{ delay: 0.1 * i }}\n                    >\n                      {new Date(d.date).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n                    </motion.div>\n                  ))}\n                </div>\n                \n                {/* Summary stats */}\n                <motion.div\n                  className={`mt-4 flex items-center gap-2 ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}\n                  initial={{ opacity: 0 }}\n                  animate={{ opacity: 1 }}\n                  transition={{ delay: 0.5 }}\n                >\n                  <Users className=\"h-4 w-4 text-blue-500\" />\n                  <span className=\"text-sm font-medium\">\n                    Total: {chartData[chartData.length - 1].users} users\n                  </span>\n                  <TrendingUp className=\"h-4 w-4 text-green-500 ml-2\" />\n                  <span className=\"text-sm text-green-500\">\n                    +{Math.round(((chartData[chartData.length - 1].users - chartData[0].users) / chartData[0].users) * 100)}%\n                  </span>\n                </motion.div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-4 md:gap-6 mb-8\">\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Orders Distribution</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                By product category\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"h-[300px] w-full\">\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <PieChart>\n                    <Pie\n                      data={pieData}\n                      cx=\"50%\"\n                      cy=\"50%\"\n                      labelLine={false}\n                      label={renderCustomLabel}\n                      outerRadius={100}\n                      fill=\"#8884d8\"\n                      dataKey=\"value\"\n                      animationBegin={0}\n                      animationDuration={800}\n                    >\n                      {pieData.map((entry, index) => (\n                        <Cell key={`cell-${index}`} fill={entry.color} />\n                      ))}\n                    </Pie>\n                    <Tooltip content={<CustomTooltip />} />\n                    <Legend \n                      verticalAlign=\"bottom\" \n                      height={36}\n                      formatter={(value, entry: any) => (\n                        <span className={isDarkMode ? 'text-gray-300' : 'text-gray-700'}>\n                          {value}\n                        </span>\n                      )}\n                    />\n                  </PieChart>\n                </ResponsiveContainer>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className={`lg:col-span-2 ${isDarkMode ? 'bg-gray-800 border-gray-700' : ''}`}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Performance Metrics</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Combined view of key indicators\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <ResponsiveContainer width=\"100%\" height={300}>\n                <BarChart data={chartData}>\n                  <CartesianGrid strokeDasharray=\"3 3\" stroke={isDarkMode ? '#374151' : '#e5e7eb'} />\n                  <XAxis \n                    dataKey=\"date\" \n                    stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                    tick={{ fill: isDarkMode ? '#9ca3af' : '#6b7280' }}\n                    tickFormatter={(value) => new Date(value).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n                  />\n                  <YAxis \n                    stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                    tick={{ fill: isDarkMode ? '#9ca3af' : '#6b7280' }}\n                  />\n                  <Tooltip \n                    contentStyle={{\n                      backgroundColor: isDarkMode ? '#1f2937' : '#ffffff',\n                      border: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\n                      borderRadius: '6px',\n                      color: isDarkMode ? '#f3f4f6' : '#111827'\n                    }}\n                    labelStyle={{ color: isDarkMode ? '#f3f4f6' : '#111827' }}\n                    formatter={(value: number) => value.toLocaleString()}\n                    labelFormatter={(label) => new Date(label).toLocaleDateString('en-US', { month: 'long', day: 'numeric', year: 'numeric' })}\n                  />\n                  <Legend \n                    wrapperStyle={{ color: isDarkMode ? '#9ca3af' : '#6b7280' }}\n                  />\n                  <Bar dataKey=\"revenue\" fill=\"#3b82f6\" name=\"Revenue ($)\" radius={[4, 4, 0, 0]} />\n                  <Bar dataKey=\"users\" fill=\"#10b981\" name=\"Users\" radius={[4, 4, 0, 0]} />\n                  <Bar dataKey=\"orders\" fill=\"#f59e0b\" name=\"Orders\" radius={[4, 4, 0, 0]} />\n                </BarChart>\n              </ResponsiveContainer>\n            </CardContent>\n          </Card>\n        </div>\n\n        <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n          <CardHeader>\n            <CardTitle className={isDarkMode ? 'text-white' : ''}>Top Products</CardTitle>\n            <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n              Best performing products by revenue\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              <div className=\"overflow-x-auto rounded-md border border-gray-200 dark:border-gray-700\">\n                <Table>\n                  <TableHeader>\n                    <TableRow className={isDarkMode ? 'border-gray-700 hover:bg-gray-750' : ''}>\n                      <TableHead className={isDarkMode ? 'text-gray-300' : ''}>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => handleSort('product')}\n                          className={`-ml-3 h-8 ${isDarkMode ? 'hover:bg-gray-700' : ''}`}\n                        >\n                          Product\n                          <ArrowUpDown className=\"ml-2 h-4 w-4\" />\n                        </Button>\n                      </TableHead>\n                      <TableHead className={`text-right ${isDarkMode ? 'text-gray-300' : ''}`}>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => handleSort('sales')}\n                          className={`-mr-3 h-8 ${isDarkMode ? 'hover:bg-gray-700' : ''}`}\n                        >\n                          Sales\n                          <ArrowUpDown className=\"ml-2 h-4 w-4\" />\n                        </Button>\n                      </TableHead>\n                      <TableHead className={`text-right ${isDarkMode ? 'text-gray-300' : ''}`}>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => handleSort('revenue')}\n                          className={`-mr-3 h-8 ${isDarkMode ? 'hover:bg-gray-700' : ''}`}\n                        >\n                          Revenue\n                          <ArrowUpDown className=\"ml-2 h-4 w-4\" />\n                        </Button>\n                      </TableHead>\n                      <TableHead className={`text-center ${isDarkMode ? 'text-gray-300' : ''}`}>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => handleSort('status')}\n                          className={`h-8 ${isDarkMode ? 'hover:bg-gray-700' : ''}`}\n                        >\n                          Status\n                          <ArrowUpDown className=\"ml-2 h-4 w-4\" />\n                        </Button>\n                      </TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {paginatedData().map((row) => (\n                      <TableRow \n                        key={row.id}\n                        className={isDarkMode ? 'border-gray-700 hover:bg-gray-750' : ''}\n                      >\n                        <TableCell className={`font-medium ${isDarkMode ? 'text-gray-200' : ''}`}>\n                          {row.product}\n                        </TableCell>\n                        <TableCell className={`text-right ${isDarkMode ? 'text-gray-300' : ''}`}>\n                          {row.sales.toLocaleString()}\n                        </TableCell>\n                        <TableCell className={`text-right ${isDarkMode ? 'text-gray-300' : ''}`}>\n                          ${row.revenue.toLocaleString()}\n                        </TableCell>\n                        <TableCell className=\"text-center\">\n                          {getStatusBadge(row.status)}\n                        </TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              </div>\n\n              <div className=\"flex flex-col sm:flex-row items-center justify-between gap-4\">\n                <p className={`text-sm ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                  Showing {((currentPage - 1) * itemsPerPage) + 1} to {Math.min(currentPage * itemsPerPage, tableData.length)} of {tableData.length} products\n                </p>\n                \n                <div className=\"flex items-center gap-2\">\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => setCurrentPage(prev => Math.max(1, prev - 1))}\n                    disabled={currentPage === 1}\n                    className={isDarkMode ? 'border-gray-700' : ''}\n                  >\n                    <ChevronLeft className=\"h-4 w-4 mr-1\" />\n                    Previous\n                  </Button>\n                  \n                  <div className=\"flex items-center gap-1\">\n                    {Array.from({ length: totalPages }, (_, i) => i + 1).map((page) => (\n                      <Button\n                        key={page}\n                        variant={currentPage === page ? 'default' : 'outline'}\n                        size=\"sm\"\n                        onClick={() => setCurrentPage(page)}\n                        className={`w-8 h-8 p-0 ${isDarkMode && currentPage !== page ? 'border-gray-700' : ''}`}\n                      >\n                        {page}\n                      </Button>\n                    ))}\n                  </div>\n                  \n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => setCurrentPage(prev => Math.min(totalPages, prev + 1))}\n                    disabled={currentPage === totalPages}\n                    className={isDarkMode ? 'border-gray-700' : ''}\n                  >\n                    Next\n                    <ChevronRight className=\"h-4 w-4 ml-1\" />\n                  </Button>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 md:gap-6 mt-8\">\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Recent Activity</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {activityData.map((activity, index) => {\n                  const getIcon = () => {\n                    switch (activity.icon) {\n                      case 'package':\n                        return <Package className=\"h-4 w-4\" />;\n                      case 'userPlus':\n                        return <UserPlus className=\"h-4 w-4\" />;\n                      case 'creditCard':\n                        return <CreditCard className=\"h-4 w-4\" />;\n                      case 'alertCircle':\n                        return <AlertCircle className=\"h-4 w-4\" />;\n                      default:\n                        return <Package className=\"h-4 w-4\" />;\n                    }\n                  };\n\n                  const getIconBgColor = () => {\n                    switch (activity.type) {\n                      case 'sale':\n                        return 'bg-green-100 text-green-600 dark:bg-green-900/30 dark:text-green-400';\n                      case 'user':\n                        return 'bg-blue-100 text-blue-600 dark:bg-blue-900/30 dark:text-blue-400';\n                      case 'order':\n                        return 'bg-purple-100 text-purple-600 dark:bg-purple-900/30 dark:text-purple-400';\n                      case 'alert':\n                        return 'bg-orange-100 text-orange-600 dark:bg-orange-900/30 dark:text-orange-400';\n                      default:\n                        return 'bg-gray-100 text-gray-600 dark:bg-gray-700 dark:text-gray-400';\n                    }\n                  };\n\n                  return (\n                    <div\n                      key={activity.id}\n                      className=\"flex items-start gap-3 animate-in fade-in slide-in-from-left-2\"\n                      style={{ animationDelay: `${index * 50}ms` }}\n                    >\n                      <div className={`flex-shrink-0 w-8 h-8 rounded-full flex items-center justify-center ${getIconBgColor()} transition-all duration-300 hover:scale-110`}>\n                        {getIcon()}\n                      </div>\n                      <div className=\"flex-1 min-w-0\">\n                        <p className={`text-sm font-medium ${isDarkMode ? 'text-gray-200' : 'text-gray-900'}`}>\n                          {activity.message}\n                        </p>\n                        <p className={`text-xs mt-1 ${isDarkMode ? 'text-gray-500' : 'text-gray-500'}`}>\n                          {activity.timestamp}\n                        </p>\n                      </div>\n                      {index < activityData.length - 1 && (\n                        <div className={`absolute left-[15px] top-8 w-0.5 h-12 ${isDarkMode ? 'bg-gray-700' : 'bg-gray-200'}`} style={{ marginTop: '8px' }} />\n                      )}\n                    </div>\n                  );\n                })}\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Quick Stats</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {mockQuickStats.map((stat, index) => {\n                  const Icon = stat.icon;\n                  const sparklineChartData = stat.sparklineData.map((value, i) => ({\n                    index: i,\n                    value: value\n                  }));\n\n                  return (\n                    <div\n                      key={stat.id}\n                      className={`p-4 rounded-lg border ${\n                        isDarkMode ? 'bg-gray-700/50 border-gray-600' : 'bg-white border-gray-200'\n                      } transition-all hover:shadow-md`}\n                      style={{\n                        animation: `fadeIn 0.5s ease-out ${index * 0.1}s both`\n                      }}\n                    >\n                      <div className=\"flex items-start justify-between mb-3\">\n                        <div className=\"flex items-center gap-2\">\n                          <div className={`p-2 rounded-lg ${\n                            isDarkMode ? 'bg-gray-600' : 'bg-gray-100'\n                          }`}>\n                            <Icon className={`h-4 w-4 ${\n                              isDarkMode ? 'text-gray-300' : 'text-gray-600'\n                            }`} />\n                          </div>\n                          <span className={`text-sm font-medium ${\n                            isDarkMode ? 'text-gray-300' : 'text-gray-600'\n                          }`}>\n                            {stat.label}\n                          </span>\n                        </div>\n                        <div className={`flex items-center gap-1 text-xs font-semibold ${\n                          stat.trend === 'up' ? 'text-green-500' : 'text-red-500'\n                        }`}>\n                          {stat.trend === 'up' ? (\n                            <TrendingUp className=\"h-3 w-3\" />\n                          ) : (\n                            <TrendingDown className=\"h-3 w-3\" />\n                          )}\n                          {Math.abs(stat.change)}%\n                        </div>\n                      </div>\n\n                      <div className=\"flex items-end justify-between gap-4\">\n                        <div className={`text-2xl font-bold ${\n                          isDarkMode ? 'text-white' : 'text-gray-900'\n                        }`}>\n                          {stat.value}\n                        </div>\n\n                        <div className=\"flex-1 max-w-[120px] h-12\">\n                          <ResponsiveContainer width=\"100%\" height=\"100%\">\n                            <LineChart data={sparklineChartData}>\n                              <Line\n                                type=\"monotone\"\n                                dataKey=\"value\"\n                                stroke={stat.trend === 'up' ? '#10b981' : '#ef4444'}\n                                strokeWidth={2}\n                                dot={false}\n                                animationDuration={1000}\n                                animationBegin={index * 100}\n                              />\n                            </LineChart>\n                          </ResponsiveContainer>\n                        </div>\n                      </div>\n                    </div>\n                  );\n                })}\n              </div>\n\n              <style jsx>{`\n                @keyframes fadeIn {\n                  from {\n                    opacity: 0;\n                    transform: translateY(10px);\n                  }\n                  to {\n                    opacity: 1;\n                    transform: translateY(0);\n                  }\n                }\n              `}</style>\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Alerts</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-3\">\n                {alerts.length === 0 ? (\n                  <div className={`text-center py-8 ${isDarkMode ? 'text-gray-400' : 'text-gray-500'}`}>\n                    <Info className=\"h-8 w-8 mx-auto mb-2 opacity-50\" />\n                    <p className=\"text-sm\">No active alerts</p>\n                  </div>\n                ) : (\n                  alerts.map((alert, index) => (\n                    <motion.div\n                      key={alert.id}\n                      initial={{ opacity: 0, x: -20 }}\n                      animate={{ opacity: 1, x: 0 }}\n                      exit={{ opacity: 0, x: 20 }}\n                      transition={{ delay: index * 0.1 }}\n                      className={`flex items-start gap-3 p-3 rounded-lg border ${\n                        isDarkMode ? 'bg-gray-700 border-gray-600' : 'bg-white border-gray-200'\n                      }`}\n                    >\n                      <div className=\"flex-shrink-0 mt-0.5\">\n                        {getAlertIcon(alert.severity)}\n                      </div>\n                      \n                      <div className=\"flex-1 min-w-0\">\n                        <div className=\"flex items-start justify-between gap-2 mb-1\">\n                          <Badge variant={getAlertBadgeVariant(alert.severity)} className=\"text-xs\">\n                            {alert.severity.toUpperCase()}\n                          </Badge>\n                          <span className={`text-xs ${isDarkMode ? 'text-gray-400' : 'text-gray-500'}`}>\n                            {alert.timestamp}\n                          </span>\n                        </div>\n                        <p className={`text-sm ${isDarkMode ? 'text-gray-200' : 'text-gray-700'}`}>\n                          {alert.message}\n                        </p>\n                      </div>\n                      \n                      <Button\n                        variant=\"ghost\"\n                        size=\"icon\"\n                        className=\"h-6 w-6 flex-shrink-0\"\n                        onClick={() => dismissAlert(alert.id)}\n                      >\n                        <X className=\"h-4 w-4\" />\n                      </Button>\n                    </motion.div>\n                  ))\n                )}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}",
  "error": null,
  "overall_score": 47,
  "code_quality_score": 12,
  "architecture_score": 10,
  "performance_score": 14,
  "accessibility_score": 11,
  "metadata": {
    "document_id": "eval_room_9d84aeb2de34",
    "prompt_category": "intermediate",
    "prompt_complexity": 6.0
  },
  "raw_response": {
    "document_id": "eval_room_9d84aeb2de34",
    "mode": "parallel",
    "prompt": "Generate an analytics dashboard page with charts, data tables, real-time updates, dark mode, and responsive design",
    "content": "import { useState, useCallback } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Moon, Sun, RefreshCw } from 'lucide-react';\nimport { ArrowUpDown, ChevronLeft, ChevronRight } from 'lucide-react';\nimport { Badge } from '@/components/ui/badge';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\nimport { TrendingUp, TrendingDown, DollarSign, Users, ShoppingCart, Target, Package, CreditCard, UserPlus, AlertCircle } from 'lucide-react';\n\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\nimport { PieChart, Pie, Cell, ResponsiveContainer, Legend, Tooltip } from 'recharts';\nimport { motion } from 'framer-motion';\nimport { TrendingUp, Users } from 'lucide-react';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';\nimport { AreaChart, Area, BarChart, Bar, PieChart, Pie, Cell, Legend } from 'recharts';\nimport { TrendingUp, TrendingDown, DollarSign, Users, ShoppingCart, Target } from 'lucide-react';\nimport { TrendingUp, TrendingDown, DollarSign, Users, ShoppingCart, Target } from 'lucide-react'\nimport { AlertCircle, AlertTriangle, Info, X } from 'lucide-react';\nimport { Badge } from '@/components/ui/badge';\n;\nimport { motion } from 'framer-motion';\n\ninterface MetricData {\n  id: string;\n  label: string;\n  value: number;\n  change: number;\n  trend: 'up' | 'down';\n}\n\ninterface ChartDataPoint {\n  date: string;\n  revenue: number;\n  users: number;\n  orders: number;\n}\n\ninterface TableRow {\n  id: string;\n  product: string;\n  sales: number;\n  revenue: number;\n  status: 'active' | 'pending' | 'inactive';\n}\ninterface Alert {\n  id: string;\n  message: string;\n  severity: 'error' | 'warning' | 'info';\n  timestamp: string;\n}\n\nconst mockAlerts: Alert[] = [\n  { id: '1', message: 'Server response time increased by 45%', severity: 'error', timestamp: '2 min ago' },\n  { id: '2', message: 'Low inventory alert for Premium Plan', severity: 'warning', timestamp: '15 min ago' },\n  { id: '3', message: 'New feature deployed successfully', severity: 'info', timestamp: '1 hour ago' },\n  { id: '4', message: 'Payment gateway experiencing delays', severity: 'warning', timestamp: '2 hours ago' }\n];\n\nconst mockMetrics: MetricData[] = [\n  { id: '1', label: 'Total Revenue', value: 45231, change: 12.5, trend: 'up' },\n  { id: '2', label: 'Active Users', value: 2350, change: 8.2, trend: 'up' },\n  { id: '3', label: 'Total Orders', value: 1543, change: -3.1, trend: 'down' },\n  { id: '4', label: 'Conversion Rate', value: 3.24, change: 5.7, trend: 'up' }\n];\n\nconst mockChartData: ChartDataPoint[] = [\n  { date: '2024-01-01', revenue: 12000, users: 450, orders: 230 },\n  { date: '2024-01-02', revenue: 15000, users: 520, orders: 280 },\n  { date: '2024-01-03', revenue: 13500, users: 490, orders: 250 },\n  { date: '2024-01-04', revenue: 18000, users: 610, orders: 320 },\n  { date: '2024-01-05', revenue: 16500, users: 580, orders: 295 },\n  { date: '2024-01-06', revenue: 20000, users: 680, orders: 350 },\n  { date: '2024-01-07', revenue: 22000, users: 720, orders: 380 }\n];\n\nconst mockTableData: TableRow[] = [\n  { id: '1', product: 'Premium Plan', sales: 234, revenue: 23400, status: 'active' },\n  { id: '2', product: 'Basic Plan', sales: 567, revenue: 11340, status: 'active' },\n  { id: '3', product: 'Enterprise Plan', sales: 89, revenue: 44500, status: 'active' },\n  { id: '4', product: 'Starter Plan', sales: 432, revenue: 4320, status: 'pending' },\n  { id: '5', product: 'Pro Plan', sales: 156, revenue: 15600, status: 'inactive' }\n];\n\ninterface ActivityItem {\n  id: string;\n  type: 'sale' | 'user' | 'order' | 'alert';\n  message: string;\n  timestamp: string;\n  icon: 'package' | 'userPlus' | 'creditCard' | 'alertCircle';\n}\n\nconst mockActivityData: ActivityItem[] = [\n  { id: '1', type: 'sale', message: 'New sale: Premium Plan', timestamp: '2 minutes ago', icon: 'package' },\n  { id: '2', type: 'user', message: 'New user registered', timestamp: '5 minutes ago', icon: 'userPlus' },\n  { id: '3', type: 'order', message: 'Order #1234 completed', timestamp: '12 minutes ago', icon: 'creditCard' },\n  { id: '4', type: 'sale', message: 'New sale: Enterprise Plan', timestamp: '18 minutes ago', icon: 'package' },\n  { id: '5', type: 'alert', message: 'Low stock alert', timestamp: '25 minutes ago', icon: 'alertCircle' },\n  { id: '6', type: 'user', message: '3 new users registered', timestamp: '32 minutes ago', icon: 'userPlus' }\n];\nconst mockQuickStats = [\n  {\n    id: '1',\n    label: 'Avg Order Value',\n    value: '$142.50',\n    change: 15.3,\n    trend: 'up' as const,\n    icon: DollarSign,\n    sparklineData: [120, 135, 128, 145, 138, 152, 142]\n  },\n  {\n    id: '2',\n    label: 'Customer Retention',\n    value: '87.5%',\n    change: 4.2,\n    trend: 'up' as const,\n    icon: Users,\n    sparklineData: [82, 83, 85, 84, 86, 87, 87.5]\n  },\n  {\n    id: '3',\n    label: 'Cart Abandonment',\n    value: '23.8%',\n    change: -2.1,\n    trend: 'down' as const,\n    icon: ShoppingCart,\n    sparklineData: [28, 27, 26, 25, 24.5, 24, 23.8]\n  },\n  {\n    id: '4',\n    label: 'Goal Completion',\n    value: '92.3%',\n    change: 8.7,\n    trend: 'up' as const,\n    icon: Target,\n    sparklineData: [85, 87, 88, 89, 90, 91, 92.3]\n  }\n];\nconst mockPieData = [\n  { name: 'Premium Plan', value: 234, color: '#3b82f6' },\n  { name: 'Basic Plan', value: 567, color: '#10b981' },\n  { name: 'Enterprise Plan', value: 89, color: '#8b5cf6' },\n  { name: 'Starter Plan', value: 432, color: '#f59e0b' },\n  { name: 'Pro Plan', value: 156, color: '#ef4444' }\n];\n\nconst CustomTooltip = ({ active, payload }: any) => {\n  if (active && payload && payload.length) {\n    return (\n      <div className=\"bg-white dark:bg-gray-800 p-3 rounded-lg shadow-lg border border-gray-200 dark:border-gray-700\">\n        <p className=\"font-semibold text-gray-900 dark:text-white\">{payload[0].name}</p>\n        <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n          Orders: <span className=\"font-medium\">{payload[0].value}</span>\n        </p>\n        <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n          Percentage: <span className=\"font-medium\">{payload[0].percent ? (payload[0].percent * 100).toFixed(1) : 0}%</span>\n        </p>\n      </div>\n    );\n  }\n  return null;\n};\n\nconst renderCustomLabel = ({ cx, cy, midAngle, innerRadius, outerRadius, percent }: any) => {\n  const RADIAN = Math.PI / 180;\n  const radius = innerRadius + (outerRadius - innerRadius) * 0.5;\n  const x = cx + radius * Math.cos(-midAngle * RADIAN);\n  const y = cy + radius * Math.sin(-midAngle * RADIAN);\n\n  if (percent < 0.05) return null;\n\n  return (\n    <text \n      x={x} \n      y={y} \n      fill=\"white\" \n      textAnchor={x > cx ? 'start' : 'end'} \n      dominantBaseline=\"central\"\n      className=\"text-xs font-semibold\"\n    >\n      {`${(percent * 100).toFixed(0)}%`}\n    </text>\n  );\n};\n\ntype SortField = 'product' | 'sales' | 'revenue' | 'status';\ntype SortDirection = 'asc' | 'desc';\n\nexport default function AnalyticsDashboard() {\n  const [alerts, setAlerts] = useState<Alert[]>(mockAlerts);\n  const [isDarkMode, setIsDarkMode] = useState(false);\n  const [metrics, setMetrics] = useState<MetricData[]>(mockMetrics);\n  const [chartData, setChartData] = useState<ChartDataPoint[]>(mockChartData);\n  const [tableData, setTableData] = useState<TableRow[]>(mockTableData);\n  const [isRefreshing, setIsRefreshing] = useState(false);\n  const [activityData, setActivityData] = useState<ActivityItem[]>(mockActivityData);\n  const [pieData, setPieData] = useState(mockPieData);\n  const [sortField, setSortField] = useState<SortField>('revenue');\n  const [sortDirection, setSortDirection] = useState<SortDirection>('desc');\n  const [currentPage, setCurrentPage] = useState(1);\n  const itemsPerPage = 5;\n\n  const toggleDarkMode = useCallback(() => {\n    setIsDarkMode(prev => !prev);\n  }, []);\n\n  const handleSort = useCallback((field: SortField) => {\n    if (sortField === field) {\n      setSortDirection(prev => prev === 'asc' ? 'desc' : 'asc');\n    } else {\n      setSortField(field);\n      setSortDirection('desc');\n    }\n    setCurrentPage(1);\n  }, [sortField]);\n\n  const sortedData = useCallback(() => {\n    const sorted = [...tableData].sort((a, b) => {\n      let aValue = a[sortField];\n      let bValue = b[sortField];\n\n      if (typeof aValue === 'string') {\n        aValue = aValue.toLowerCase();\n        bValue = (bValue as string).toLowerCase();\n      }\n\n      if (aValue < bValue) return sortDirection === 'asc' ? -1 : 1;\n      if (aValue > bValue) return sortDirection === 'asc' ? 1 : -1;\n      return 0;\n    });\n    return sorted;\n  }, [tableData, sortField, sortDirection]);\n\n  const paginatedData = useCallback(() => {\n    const sorted = sortedData();\n    const startIndex = (currentPage - 1) * itemsPerPage;\n    const endIndex = startIndex + itemsPerPage;\n    return sorted.slice(startIndex, endIndex);\n  }, [sortedData, currentPage]);\n\n  const totalPages = Math.ceil(tableData.length / itemsPerPage);\n\n  const getStatusBadge = (status: TableRow['status']) => {\n    const variants = {\n      active: 'default',\n      pending: 'secondary',\n      inactive: 'destructive'\n    };\n    return (\n      <Badge variant={variants[status] as any} className=\"capitalize\">\n        {status}\n      </Badge>\n    );\n  };\n\n  const handleRefresh = useCallback(() => {\n    setIsRefreshing(true);\n    \n    setTimeout(() => {\n      // Generate updated metrics with random variations\n      const updatedMetrics = mockMetrics.map(metric => ({\n        ...metric,\n        value: metric.value + Math.floor(Math.random() * 200 - 100),\n        change: parseFloat((Math.random() * 20 - 5).toFixed(1)),\n        trend: Math.random() > 0.5 ? 'up' as const : 'down' as const\n      }));\n\n      // Generate updated chart data with random variations\n      const updatedChartData = mockChartData.map(point => ({\n        ...point,\n        revenue: point.revenue + Math.floor(Math.random() * 4000 - 2000),\n        users: point.users + Math.floor(Math.random() * 100 - 50),\n        orders: point.orders + Math.floor(Math.random() * 50 - 25)\n      }));\n\n      // Generate updated table data with random variations\n      const updatedTableData = mockTableData.map(row => ({\n        ...row,\n        sales: row.sales + Math.floor(Math.random() * 40 - 20),\n        revenue: row.revenue + Math.floor(Math.random() * 2000 - 1000)\n      }));\n\n      setMetrics(updatedMetrics);\n      setChartData(updatedChartData);\n      setTableData(updatedTableData);\n      setIsRefreshing(false);\n    }, 1500);\n\n  const dismissAlert = useCallback((alertId: string) => {\n    setAlerts(prev => prev.filter(alert => alert.id !== alertId));\n  }, []);\n\n  const getAlertIcon = (severity: Alert['severity']) => {\n    switch (severity) {\n      case 'error':\n        return <AlertCircle className=\"h-5 w-5 text-red-500\" />;\n      case 'warning':\n        return <AlertTriangle className=\"h-5 w-5 text-yellow-500\" />;\n      case 'info':\n        return <Info className=\"h-5 w-5 text-blue-500\" />;\n    }\n  };\n\n  const getAlertBadgeVariant = (severity: Alert['severity']) => {\n    switch (severity) {\n      case 'error':\n        return 'destructive';\n      case 'warning':\n        return 'default';\n      case 'info':\n        return 'secondary';\n    }\n  };</parameter>\n  }, []);\n\n  return (\n    <div className={`min-h-screen ${isDarkMode ? 'dark bg-gray-900' : 'bg-gray-50'}`}>\n      <div className=\"container mx-auto p-4 md:p-6 lg:p-8\">\n        <div className=\"flex flex-col md:flex-row justify-between items-start md:items-center gap-4 mb-8\">\n          <div>\n            <h1 className={`text-3xl md:text-4xl font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n              Analytics Dashboard\n            </h1>\n            <p className={`mt-2 ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n              Real-time insights and performance metrics\n            </p>\n          </div>\n          \n          <div className=\"flex gap-2\">\n            <Button\n              variant=\"outline\"\n              size=\"icon\"\n              onClick={toggleDarkMode}\n              className={isDarkMode ? 'border-gray-700' : ''}\n            >\n              {isDarkMode ? <Sun className=\"h-5 w-5\" /> : <Moon className=\"h-5 w-5\" />}\n            </Button>\n            \n            <Button\n              variant=\"outline\"\n              onClick={handleRefresh}\n              disabled={isRefreshing}\n              className={isDarkMode ? 'border-gray-700' : ''}\n            >\n              <RefreshCw className={`h-4 w-4 mr-2 ${isRefreshing ? 'animate-spin' : ''}`} />\n              Refresh\n            </Button>\n          </div>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 md:gap-6 mb-8\">\n          {metrics.map((metric, index) => {\n            const Icon = metric.label === 'Total Revenue' ? DollarSign :\n                        metric.label === 'Active Users' ? Users :\n                        metric.label === 'Total Orders' ? ShoppingCart :\n                        Target;\n            \n            const TrendIcon = metric.trend === 'up' ? TrendingUp : TrendingDown;\n            const trendColor = metric.trend === 'up' ? 'text-green-500' : 'text-red-500';\n            const trendBgColor = metric.trend === 'up' ? 'bg-green-50 dark:bg-green-900/20' : 'bg-red-50 dark:bg-red-900/20';\n\n            return (\n              <motion.div\n                key={metric.id}\n                initial={{ opacity: 0, y: 20 }}\n                animate={{ opacity: 1, y: 0 }}\n                transition={{ duration: 0.4, delay: index * 0.1 }}\n              >\n                <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n                  <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                    <CardTitle className={`text-sm font-medium ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                      {metric.label}\n                    </CardTitle>\n                    <div className={`p-2 rounded-lg ${isDarkMode ? 'bg-gray-700' : 'bg-gray-100'}`}>\n                      <Icon className={`h-4 w-4 ${isDarkMode ? 'text-gray-300' : 'text-gray-600'}`} />\n                    </div>\n                  </CardHeader>\n                  <CardContent>\n                    <div className={`text-2xl font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                      {metric.label === 'Total Revenue' ? `$${metric.value.toLocaleString()}` :\n                       metric.label === 'Conversion Rate' ? `${metric.value}%` :\n                       metric.value.toLocaleString()}\n                    </div>\n                    <div className=\"flex items-center mt-2\">\n                      <div className={`flex items-center gap-1 px-2 py-1 rounded-full ${trendBgColor}`}>\n                        <TrendIcon className={`h-3 w-3 ${trendColor}`} />\n                        <span className={`text-xs font-medium ${trendColor}`}>\n                          {Math.abs(metric.change)}%\n                        </span>\n                      </div>\n                      <span className={`text-xs ml-2 ${isDarkMode ? 'text-gray-400' : 'text-gray-500'}`}>\n                        vs last period\n                      </span>\n                    </div>\n                  </CardContent>\n                </Card>\n              </motion.div>\n            );\n          })}\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-4 md:gap-6 mb-8\">\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Revenue Overview</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Daily revenue trends\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <ResponsiveContainer width=\"100%\" height={300}>\n                <LineChart data={chartData}>\n                  <CartesianGrid \n                    strokeDasharray=\"3 3\" \n                    stroke={isDarkMode ? '#374151' : '#e5e7eb'} \n                  />\n                  <XAxis \n                    dataKey=\"date\" \n                    stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                    tick={{ fill: isDarkMode ? '#9ca3af' : '#6b7280' }}\n                    tickFormatter={(value) => new Date(value).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n                  />\n                  <YAxis \n                    stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                    tick={{ fill: isDarkMode ? '#9ca3af' : '#6b7280' }}\n                    tickFormatter={(value) => `$${(value / 1000).toFixed(0)}k`}\n                  />\n                  <Tooltip \n                    contentStyle={{\n                      backgroundColor: isDarkMode ? '#1f2937' : '#ffffff',\n                      border: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\n                      borderRadius: '6px',\n                      color: isDarkMode ? '#ffffff' : '#000000'\n                    }}\n                    labelStyle={{ color: isDarkMode ? '#9ca3af' : '#6b7280' }}\n                    formatter={(value: number) => [`$${value.toLocaleString()}`, 'Revenue']}\n                    labelFormatter={(label) => new Date(label).toLocaleDateString('en-US', { month: 'long', day: 'numeric', year: 'numeric' })}\n                  />\n                  <Line \n                    type=\"monotone\" \n                    dataKey=\"revenue\" \n                    stroke=\"#3b82f6\" \n                    strokeWidth={2}\n                    dot={{ fill: '#3b82f6', r: 4 }}\n                    activeDot={{ r: 6 }}\n                  />\n                </LineChart>\n              </ResponsiveContainer>\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>User Growth</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Active users over time\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"h-[300px] w-full\">\n                <svg width=\"100%\" height=\"100%\" viewBox=\"0 0 700 300\" preserveAspectRatio=\"none\">\n                  <defs>\n                    <linearGradient id=\"userGradient\" x1=\"0%\" y1=\"0%\" x2=\"0%\" y2=\"100%\">\n                      <stop offset=\"0%\" stopColor=\"#3b82f6\" stopOpacity=\"0.4\" />\n                      <stop offset=\"100%\" stopColor=\"#3b82f6\" stopOpacity=\"0.05\" />\n                    </linearGradient>\n                  </defs>\n                  \n                  {/* Generate path for area chart */}\n                  <motion.path\n                    d={(() => {\n                      const maxUsers = Math.max(...chartData.map(d => d.users));\n                      const width = 700;\n                      const height = 300;\n                      const padding = 20;\n                      const points = chartData.map((d, i) => {\n                        const x = (i / (chartData.length - 1)) * (width - 2 * padding) + padding;\n                        const y = height - padding - ((d.users / maxUsers) * (height - 2 * padding));\n                        return `${x},${y}`;\n                      });\n                      const firstX = padding;\n                      const lastX = width - padding;\n                      return `M${firstX},${height - padding} L${points.join(' L')} L${lastX},${height - padding} Z`;\n                    })()}\n                    fill=\"url(#userGradient)\"\n                    initial={{ opacity: 0 }}\n                    animate={{ opacity: 1 }}\n                    transition={{ duration: 0.8 }}\n                  />\n                  \n                  {/* Line on top of area */}\n                  <motion.path\n                    d={(() => {\n                      const maxUsers = Math.max(...chartData.map(d => d.users));\n                      const width = 700;\n                      const height = 300;\n                      const padding = 20;\n                      const points = chartData.map((d, i) => {\n                        const x = (i / (chartData.length - 1)) * (width - 2 * padding) + padding;\n                        const y = height - padding - ((d.users / maxUsers) * (height - 2 * padding));\n                        return `${x},${y}`;\n                      });\n                      return `M${points.join(' L')}`;\n                    })()}\n                    stroke=\"#3b82f6\"\n                    strokeWidth=\"3\"\n                    fill=\"none\"\n                    initial={{ pathLength: 0 }}\n                    animate={{ pathLength: 1 }}\n                    transition={{ duration: 1.5, ease: \"easeInOut\" }}\n                  />\n                  \n                  {/* Data points */}\n                  {chartData.map((d, i) => {\n                    const maxUsers = Math.max(...chartData.map(d => d.users));\n                    const width = 700;\n                    const height = 300;\n                    const padding = 20;\n                    const x = (i / (chartData.length - 1)) * (width - 2 * padding) + padding;\n                    const y = height - padding - ((d.users / maxUsers) * (height - 2 * padding));\n                    \n                    return (\n                      <g key={i}>\n                        <motion.circle\n                          cx={x}\n                          cy={y}\n                          r=\"5\"\n                          fill=\"#3b82f6\"\n                          initial={{ scale: 0 }}\n                          animate={{ scale: 1 }}\n                          transition={{ delay: 0.1 * i, duration: 0.3 }}\n                          className=\"cursor-pointer hover:r-7\"\n                        />\n                        <title>{`${d.date}: ${d.users} users`}</title>\n                      </g>\n                    );\n                  })}\n                </svg>\n                \n                {/* Chart labels */}\n                <div className=\"flex justify-between mt-4 px-4\">\n                  {chartData.map((d, i) => (\n                    <motion.div\n                      key={i}\n                      className={`text-xs ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}\n                      initial={{ opacity: 0, y: 10 }}\n                      animate={{ opacity: 1, y: 0 }}\n                      transition={{ delay: 0.1 * i }}\n                    >\n                      {new Date(d.date).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n                    </motion.div>\n                  ))}\n                </div>\n                \n                {/* Summary stats */}\n                <motion.div\n                  className={`mt-4 flex items-center gap-2 ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}\n                  initial={{ opacity: 0 }}\n                  animate={{ opacity: 1 }}\n                  transition={{ delay: 0.5 }}\n                >\n                  <Users className=\"h-4 w-4 text-blue-500\" />\n                  <span className=\"text-sm font-medium\">\n                    Total: {chartData[chartData.length - 1].users} users\n                  </span>\n                  <TrendingUp className=\"h-4 w-4 text-green-500 ml-2\" />\n                  <span className=\"text-sm text-green-500\">\n                    +{Math.round(((chartData[chartData.length - 1].users - chartData[0].users) / chartData[0].users) * 100)}%\n                  </span>\n                </motion.div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-4 md:gap-6 mb-8\">\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Orders Distribution</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                By product category\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"h-[300px] w-full\">\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <PieChart>\n                    <Pie\n                      data={pieData}\n                      cx=\"50%\"\n                      cy=\"50%\"\n                      labelLine={false}\n                      label={renderCustomLabel}\n                      outerRadius={100}\n                      fill=\"#8884d8\"\n                      dataKey=\"value\"\n                      animationBegin={0}\n                      animationDuration={800}\n                    >\n                      {pieData.map((entry, index) => (\n                        <Cell key={`cell-${index}`} fill={entry.color} />\n                      ))}\n                    </Pie>\n                    <Tooltip content={<CustomTooltip />} />\n                    <Legend \n                      verticalAlign=\"bottom\" \n                      height={36}\n                      formatter={(value, entry: any) => (\n                        <span className={isDarkMode ? 'text-gray-300' : 'text-gray-700'}>\n                          {value}\n                        </span>\n                      )}\n                    />\n                  </PieChart>\n                </ResponsiveContainer>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className={`lg:col-span-2 ${isDarkMode ? 'bg-gray-800 border-gray-700' : ''}`}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Performance Metrics</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Combined view of key indicators\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <ResponsiveContainer width=\"100%\" height={300}>\n                <BarChart data={chartData}>\n                  <CartesianGrid strokeDasharray=\"3 3\" stroke={isDarkMode ? '#374151' : '#e5e7eb'} />\n                  <XAxis \n                    dataKey=\"date\" \n                    stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                    tick={{ fill: isDarkMode ? '#9ca3af' : '#6b7280' }}\n                    tickFormatter={(value) => new Date(value).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n                  />\n                  <YAxis \n                    stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                    tick={{ fill: isDarkMode ? '#9ca3af' : '#6b7280' }}\n                  />\n                  <Tooltip \n                    contentStyle={{\n                      backgroundColor: isDarkMode ? '#1f2937' : '#ffffff',\n                      border: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\n                      borderRadius: '6px',\n                      color: isDarkMode ? '#f3f4f6' : '#111827'\n                    }}\n                    labelStyle={{ color: isDarkMode ? '#f3f4f6' : '#111827' }}\n                    formatter={(value: number) => value.toLocaleString()}\n                    labelFormatter={(label) => new Date(label).toLocaleDateString('en-US', { month: 'long', day: 'numeric', year: 'numeric' })}\n                  />\n                  <Legend \n                    wrapperStyle={{ color: isDarkMode ? '#9ca3af' : '#6b7280' }}\n                  />\n                  <Bar dataKey=\"revenue\" fill=\"#3b82f6\" name=\"Revenue ($)\" radius={[4, 4, 0, 0]} />\n                  <Bar dataKey=\"users\" fill=\"#10b981\" name=\"Users\" radius={[4, 4, 0, 0]} />\n                  <Bar dataKey=\"orders\" fill=\"#f59e0b\" name=\"Orders\" radius={[4, 4, 0, 0]} />\n                </BarChart>\n              </ResponsiveContainer>\n            </CardContent>\n          </Card>\n        </div>\n\n        <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n          <CardHeader>\n            <CardTitle className={isDarkMode ? 'text-white' : ''}>Top Products</CardTitle>\n            <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n              Best performing products by revenue\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              <div className=\"overflow-x-auto rounded-md border border-gray-200 dark:border-gray-700\">\n                <Table>\n                  <TableHeader>\n                    <TableRow className={isDarkMode ? 'border-gray-700 hover:bg-gray-750' : ''}>\n                      <TableHead className={isDarkMode ? 'text-gray-300' : ''}>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => handleSort('product')}\n                          className={`-ml-3 h-8 ${isDarkMode ? 'hover:bg-gray-700' : ''}`}\n                        >\n                          Product\n                          <ArrowUpDown className=\"ml-2 h-4 w-4\" />\n                        </Button>\n                      </TableHead>\n                      <TableHead className={`text-right ${isDarkMode ? 'text-gray-300' : ''}`}>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => handleSort('sales')}\n                          className={`-mr-3 h-8 ${isDarkMode ? 'hover:bg-gray-700' : ''}`}\n                        >\n                          Sales\n                          <ArrowUpDown className=\"ml-2 h-4 w-4\" />\n                        </Button>\n                      </TableHead>\n                      <TableHead className={`text-right ${isDarkMode ? 'text-gray-300' : ''}`}>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => handleSort('revenue')}\n                          className={`-mr-3 h-8 ${isDarkMode ? 'hover:bg-gray-700' : ''}`}\n                        >\n                          Revenue\n                          <ArrowUpDown className=\"ml-2 h-4 w-4\" />\n                        </Button>\n                      </TableHead>\n                      <TableHead className={`text-center ${isDarkMode ? 'text-gray-300' : ''}`}>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => handleSort('status')}\n                          className={`h-8 ${isDarkMode ? 'hover:bg-gray-700' : ''}`}\n                        >\n                          Status\n                          <ArrowUpDown className=\"ml-2 h-4 w-4\" />\n                        </Button>\n                      </TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {paginatedData().map((row) => (\n                      <TableRow \n                        key={row.id}\n                        className={isDarkMode ? 'border-gray-700 hover:bg-gray-750' : ''}\n                      >\n                        <TableCell className={`font-medium ${isDarkMode ? 'text-gray-200' : ''}`}>\n                          {row.product}\n                        </TableCell>\n                        <TableCell className={`text-right ${isDarkMode ? 'text-gray-300' : ''}`}>\n                          {row.sales.toLocaleString()}\n                        </TableCell>\n                        <TableCell className={`text-right ${isDarkMode ? 'text-gray-300' : ''}`}>\n                          ${row.revenue.toLocaleString()}\n                        </TableCell>\n                        <TableCell className=\"text-center\">\n                          {getStatusBadge(row.status)}\n                        </TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              </div>\n\n              <div className=\"flex flex-col sm:flex-row items-center justify-between gap-4\">\n                <p className={`text-sm ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                  Showing {((currentPage - 1) * itemsPerPage) + 1} to {Math.min(currentPage * itemsPerPage, tableData.length)} of {tableData.length} products\n                </p>\n                \n                <div className=\"flex items-center gap-2\">\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => setCurrentPage(prev => Math.max(1, prev - 1))}\n                    disabled={currentPage === 1}\n                    className={isDarkMode ? 'border-gray-700' : ''}\n                  >\n                    <ChevronLeft className=\"h-4 w-4 mr-1\" />\n                    Previous\n                  </Button>\n                  \n                  <div className=\"flex items-center gap-1\">\n                    {Array.from({ length: totalPages }, (_, i) => i + 1).map((page) => (\n                      <Button\n                        key={page}\n                        variant={currentPage === page ? 'default' : 'outline'}\n                        size=\"sm\"\n                        onClick={() => setCurrentPage(page)}\n                        className={`w-8 h-8 p-0 ${isDarkMode && currentPage !== page ? 'border-gray-700' : ''}`}\n                      >\n                        {page}\n                      </Button>\n                    ))}\n                  </div>\n                  \n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => setCurrentPage(prev => Math.min(totalPages, prev + 1))}\n                    disabled={currentPage === totalPages}\n                    className={isDarkMode ? 'border-gray-700' : ''}\n                  >\n                    Next\n                    <ChevronRight className=\"h-4 w-4 ml-1\" />\n                  </Button>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 md:gap-6 mt-8\">\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Recent Activity</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {activityData.map((activity, index) => {\n                  const getIcon = () => {\n                    switch (activity.icon) {\n                      case 'package':\n                        return <Package className=\"h-4 w-4\" />;\n                      case 'userPlus':\n                        return <UserPlus className=\"h-4 w-4\" />;\n                      case 'creditCard':\n                        return <CreditCard className=\"h-4 w-4\" />;\n                      case 'alertCircle':\n                        return <AlertCircle className=\"h-4 w-4\" />;\n                      default:\n                        return <Package className=\"h-4 w-4\" />;\n                    }\n                  };\n\n                  const getIconBgColor = () => {\n                    switch (activity.type) {\n                      case 'sale':\n                        return 'bg-green-100 text-green-600 dark:bg-green-900/30 dark:text-green-400';\n                      case 'user':\n                        return 'bg-blue-100 text-blue-600 dark:bg-blue-900/30 dark:text-blue-400';\n                      case 'order':\n                        return 'bg-purple-100 text-purple-600 dark:bg-purple-900/30 dark:text-purple-400';\n                      case 'alert':\n                        return 'bg-orange-100 text-orange-600 dark:bg-orange-900/30 dark:text-orange-400';\n                      default:\n                        return 'bg-gray-100 text-gray-600 dark:bg-gray-700 dark:text-gray-400';\n                    }\n                  };\n\n                  return (\n                    <div\n                      key={activity.id}\n                      className=\"flex items-start gap-3 animate-in fade-in slide-in-from-left-2\"\n                      style={{ animationDelay: `${index * 50}ms` }}\n                    >\n                      <div className={`flex-shrink-0 w-8 h-8 rounded-full flex items-center justify-center ${getIconBgColor()} transition-all duration-300 hover:scale-110`}>\n                        {getIcon()}\n                      </div>\n                      <div className=\"flex-1 min-w-0\">\n                        <p className={`text-sm font-medium ${isDarkMode ? 'text-gray-200' : 'text-gray-900'}`}>\n                          {activity.message}\n                        </p>\n                        <p className={`text-xs mt-1 ${isDarkMode ? 'text-gray-500' : 'text-gray-500'}`}>\n                          {activity.timestamp}\n                        </p>\n                      </div>\n                      {index < activityData.length - 1 && (\n                        <div className={`absolute left-[15px] top-8 w-0.5 h-12 ${isDarkMode ? 'bg-gray-700' : 'bg-gray-200'}`} style={{ marginTop: '8px' }} />\n                      )}\n                    </div>\n                  );\n                })}\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Quick Stats</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {mockQuickStats.map((stat, index) => {\n                  const Icon = stat.icon;\n                  const sparklineChartData = stat.sparklineData.map((value, i) => ({\n                    index: i,\n                    value: value\n                  }));\n\n                  return (\n                    <div\n                      key={stat.id}\n                      className={`p-4 rounded-lg border ${\n                        isDarkMode ? 'bg-gray-700/50 border-gray-600' : 'bg-white border-gray-200'\n                      } transition-all hover:shadow-md`}\n                      style={{\n                        animation: `fadeIn 0.5s ease-out ${index * 0.1}s both`\n                      }}\n                    >\n                      <div className=\"flex items-start justify-between mb-3\">\n                        <div className=\"flex items-center gap-2\">\n                          <div className={`p-2 rounded-lg ${\n                            isDarkMode ? 'bg-gray-600' : 'bg-gray-100'\n                          }`}>\n                            <Icon className={`h-4 w-4 ${\n                              isDarkMode ? 'text-gray-300' : 'text-gray-600'\n                            }`} />\n                          </div>\n                          <span className={`text-sm font-medium ${\n                            isDarkMode ? 'text-gray-300' : 'text-gray-600'\n                          }`}>\n                            {stat.label}\n                          </span>\n                        </div>\n                        <div className={`flex items-center gap-1 text-xs font-semibold ${\n                          stat.trend === 'up' ? 'text-green-500' : 'text-red-500'\n                        }`}>\n                          {stat.trend === 'up' ? (\n                            <TrendingUp className=\"h-3 w-3\" />\n                          ) : (\n                            <TrendingDown className=\"h-3 w-3\" />\n                          )}\n                          {Math.abs(stat.change)}%\n                        </div>\n                      </div>\n\n                      <div className=\"flex items-end justify-between gap-4\">\n                        <div className={`text-2xl font-bold ${\n                          isDarkMode ? 'text-white' : 'text-gray-900'\n                        }`}>\n                          {stat.value}\n                        </div>\n\n                        <div className=\"flex-1 max-w-[120px] h-12\">\n                          <ResponsiveContainer width=\"100%\" height=\"100%\">\n                            <LineChart data={sparklineChartData}>\n                              <Line\n                                type=\"monotone\"\n                                dataKey=\"value\"\n                                stroke={stat.trend === 'up' ? '#10b981' : '#ef4444'}\n                                strokeWidth={2}\n                                dot={false}\n                                animationDuration={1000}\n                                animationBegin={index * 100}\n                              />\n                            </LineChart>\n                          </ResponsiveContainer>\n                        </div>\n                      </div>\n                    </div>\n                  );\n                })}\n              </div>\n\n              <style jsx>{`\n                @keyframes fadeIn {\n                  from {\n                    opacity: 0;\n                    transform: translateY(10px);\n                  }\n                  to {\n                    opacity: 1;\n                    transform: translateY(0);\n                  }\n                }\n              `}</style>\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Alerts</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-3\">\n                {alerts.length === 0 ? (\n                  <div className={`text-center py-8 ${isDarkMode ? 'text-gray-400' : 'text-gray-500'}`}>\n                    <Info className=\"h-8 w-8 mx-auto mb-2 opacity-50\" />\n                    <p className=\"text-sm\">No active alerts</p>\n                  </div>\n                ) : (\n                  alerts.map((alert, index) => (\n                    <motion.div\n                      key={alert.id}\n                      initial={{ opacity: 0, x: -20 }}\n                      animate={{ opacity: 1, x: 0 }}\n                      exit={{ opacity: 0, x: 20 }}\n                      transition={{ delay: index * 0.1 }}\n                      className={`flex items-start gap-3 p-3 rounded-lg border ${\n                        isDarkMode ? 'bg-gray-700 border-gray-600' : 'bg-white border-gray-200'\n                      }`}\n                    >\n                      <div className=\"flex-shrink-0 mt-0.5\">\n                        {getAlertIcon(alert.severity)}\n                      </div>\n                      \n                      <div className=\"flex-1 min-w-0\">\n                        <div className=\"flex items-start justify-between gap-2 mb-1\">\n                          <Badge variant={getAlertBadgeVariant(alert.severity)} className=\"text-xs\">\n                            {alert.severity.toUpperCase()}\n                          </Badge>\n                          <span className={`text-xs ${isDarkMode ? 'text-gray-400' : 'text-gray-500'}`}>\n                            {alert.timestamp}\n                          </span>\n                        </div>\n                        <p className={`text-sm ${isDarkMode ? 'text-gray-200' : 'text-gray-700'}`}>\n                          {alert.message}\n                        </p>\n                      </div>\n                      \n                      <Button\n                        variant=\"ghost\"\n                        size=\"icon\"\n                        className=\"h-6 w-6 flex-shrink-0\"\n                        onClick={() => dismissAlert(alert.id)}\n                      >\n                        <X className=\"h-4 w-4\" />\n                      </Button>\n                    </motion.div>\n                  ))\n                )}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}",
    "error": null,
    "elapsed_time": 89.36840534210205,
    "success": true
  }
}