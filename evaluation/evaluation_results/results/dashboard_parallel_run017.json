{
  "prompt_id": "dashboard",
  "prompt_name": "Analytics Dashboard",
  "mode": "parallel",
  "run_number": 17,
  "timestamp": "2025-10-13T23:12:03.262363",
  "response_time": 79.34156370162964,
  "total_tokens": null,
  "response_content": "import { useState, useCallback } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Moon, Sun, RefreshCw } from 'lucide-react';\nimport { TrendingUp, TrendingDown, DollarSign, Users, ShoppingCart, Target, CheckCircle, AlertCircle, Package, CreditCard } from 'lucide-react';\nimport { ArrowUpDown, ChevronLeft, ChevronRight } from 'lucide-react';\nimport { Badge } from '@/components/ui/badge';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\nimport { AreaChart, Area, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';\nimport { motion } from 'framer-motion';\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\nimport { motion } from 'framer-motion';\n\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';\nimport { motion } from 'framer-motion';\nimport { TrendingUp, TrendingDown, DollarSign, Users, ShoppingCart, Target } from 'lucide-react'\n;\nimport { motion } from 'framer-motion';\nimport { AlertCircle, AlertTriangle, Info, CheckCircle, X } from 'lucide-react';\n\ninterface MetricData {\n  id: string;\n  label: string;\n  value: number;\n  change: number;\n  trend: 'up' | 'down';\n}\n\ninterface ChartDataPoint {\n  date: string;\n  revenue: number;\n  users: number;\n  orders: number;\n}\n\ninterface TableRow {\n  id: string;\n  product: string;\n  sales: number;\n  revenue: number;\n  status: 'active' | 'pending' | 'inactive';\n}\n\ninterface Alert {\n  id: string;\n  message: string;\n  severity: 'info' | 'warning' | 'error' | 'success';\n  timestamp: string;\n}\n\nconst mockMetrics: MetricData[] = [\n  { id: '1', label: 'Total Revenue', value: 45231, change: 12.5, trend: 'up' },\n  { id: '2', label: 'Active Users', value: 2350, change: 8.2, trend: 'up' },\n  { id: '3', label: 'Total Orders', value: 1543, change: -3.1, trend: 'down' },\n  { id: '4', label: 'Conversion Rate', value: 3.24, change: 5.7, trend: 'up' }\n];\n\nconst mockChartData: ChartDataPoint[] = [\n  { date: '2024-01-01', revenue: 12000, users: 450, orders: 230 },\n  { date: '2024-01-02', revenue: 15000, users: 520, orders: 280 },\n  { date: '2024-01-03', revenue: 13500, users: 490, orders: 250 },\n  { date: '2024-01-04', revenue: 18000, users: 610, orders: 320 },\n  { date: '2024-01-05', revenue: 16500, users: 580, orders: 295 },\n  { date: '2024-01-06', revenue: 20000, users: 680, orders: 350 },\n  { date: '2024-01-07', revenue: 22000, users: 720, orders: 380 }\n];\n\nconst mockTableData: TableRow[] = [\n  { id: '1', product: 'Premium Plan', sales: 234, revenue: 23400, status: 'active' },\n  { id: '2', product: 'Basic Plan', sales: 567, revenue: 11340, status: 'active' },\n  { id: '3', product: 'Enterprise Plan', sales: 89, revenue: 44500, status: 'active' },\n  { id: '4', product: 'Starter Plan', sales: 432, revenue: 4320, status: 'pending' },\n  { id: '5', product: 'Pro Plan', sales: 156, revenue: 15600, status: 'inactive' }\n];\nconst mockQuickStats = [\n  { \n    id: '1', \n    label: 'Avg Order Value', \n    value: '$142.50', \n    change: 15.3, \n    trend: 'up' as const,\n    sparklineData: [120, 135, 128, 145, 138, 152, 142]\n  },\n  { \n    id: '2', \n    label: 'Customer Retention', \n    value: '87.2%', \n    change: 3.8, \n    trend: 'up' as const,\n    sparklineData: [82, 83, 85, 84, 86, 87, 87]\n  },\n  { \n    id: '3', \n    label: 'Bounce Rate', \n    value: '32.4%', \n    change: -5.2, \n    trend: 'down' as const,\n    sparklineData: [38, 37, 35, 34, 33, 33, 32]\n  },\n  { \n    id: '4', \n    label: 'Page Views', \n    value: '12.4K', \n    change: 22.1, \n    trend: 'up' as const,\n    sparklineData: [9800, 10200, 10800, 11200, 11800, 12100, 12400]\n  }\n];\n\nconst mockAlerts: Alert[] = [\n  { id: '1', message: 'Server response time increased by 15%', severity: 'warning', timestamp: '5 min ago' },\n  { id: '2', message: 'New user milestone reached: 2,500 users', severity: 'success', timestamp: '12 min ago' },\n  { id: '3', message: 'Payment gateway experiencing delays', severity: 'error', timestamp: '18 min ago' },\n  { id: '4', message: 'Scheduled maintenance in 2 hours', severity: 'info', timestamp: '25 min ago' }\n];\ninterface ActivityItem {\n  id: string;\n  type: 'success' | 'warning' | 'info' | 'error';\n  message: string;\n  timestamp: string;\n  icon: 'check' | 'alert' | 'package' | 'card' | 'users' | 'cart';\n}\n\nconst mockActivityData: ActivityItem[] = [\n  { id: '1', type: 'success', message: 'New order #1234 completed', timestamp: '2 min ago', icon: 'check' },\n  { id: '2', type: 'info', message: '15 new users registered', timestamp: '5 min ago', icon: 'users' },\n  { id: '3', type: 'warning', message: 'Low stock alert for Premium Plan', timestamp: '12 min ago', icon: 'alert' },\n  { id: '4', type: 'success', message: 'Payment received $2,450', timestamp: '18 min ago', icon: 'card' },\n  { id: '5', type: 'info', message: 'Package shipped to customer', timestamp: '25 min ago', icon: 'package' },\n  { id: '6', type: 'success', message: '8 items added to cart', timestamp: '32 min ago', icon: 'cart' }\n];\n\nconst pieChartColors = ['#3b82f6', '#8b5cf6', '#ec4899', '#f59e0b', '#10b981'];\n\ninterface PieChartData {\n  label: string;\n  value: number;\n  color: string;\n  percentage: number;\n}\n\nconst PieChart = ({ data, isDark }: { data: PieChartData[]; isDark: boolean }) => {\n  const size = 200;\n  const center = size / 2;\n  const radius = size / 2 - 10;\n  \n  let currentAngle = -90;\n  \n  const createArc = (startAngle: number, endAngle: number) => {\n    const start = polarToCartesian(center, center, radius, endAngle);\n    const end = polarToCartesian(center, center, radius, startAngle);\n    const largeArcFlag = endAngle - startAngle <= 180 ? '0' : '1';\n    \n    return [\n      'M', center, center,\n      'L', start.x, start.y,\n      'A', radius, radius, 0, largeArcFlag, 0, end.x, end.y,\n      'Z'\n    ].join(' ');\n  };\n  \n  const polarToCartesian = (centerX: number, centerY: number, radius: number, angleInDegrees: number) => {\n    const angleInRadians = (angleInDegrees * Math.PI) / 180.0;\n    return {\n      x: centerX + radius * Math.cos(angleInRadians),\n      y: centerY + radius * Math.sin(angleInRadians)\n    };\n  };\n  \n  return (\n    <div className=\"flex flex-col items-center gap-6\">\n      <svg width={size} height={size} viewBox={`0 0 ${size} ${size}`}>\n        {data.map((item, index) => {\n          const angle = (item.percentage / 100) * 360;\n          const path = createArc(currentAngle, currentAngle + angle);\n          currentAngle += angle;\n          \n          return (\n            <motion.path\n              key={item.label}\n              d={path}\n              fill={item.color}\n              initial={{ opacity: 0, scale: 0 }}\n              animate={{ opacity: 1, scale: 1 }}\n              transition={{ duration: 0.5, delay: index * 0.1 }}\n              className=\"hover:opacity-80 transition-opacity cursor-pointer\"\n            />\n          );\n        })}\n      </svg>\n      \n      <div className=\"grid grid-cols-1 gap-2 w-full\">\n        {data.map((item, index) => (\n          <motion.div\n            key={item.label}\n            initial={{ opacity: 0, x: -20 }}\n            animate={{ opacity: 1, x: 0 }}\n            transition={{ duration: 0.3, delay: index * 0.1 }}\n            className=\"flex items-center justify-between gap-2\"\n          >\n            <div className=\"flex items-center gap-2\">\n              <div\n                className=\"w-3 h-3 rounded-full\"\n                style={{ backgroundColor: item.color }}\n              />\n              <span className={`text-sm ${isDark ? 'text-gray-300' : 'text-gray-700'}`}>\n                {item.label}\n              </span>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <span className={`text-sm font-medium ${isDark ? 'text-white' : 'text-gray-900'}`}>\n                {item.value}\n              </span>\n              <span className={`text-xs ${isDark ? 'text-gray-400' : 'text-gray-500'}`}>\n                ({item.percentage.toFixed(1)}%)\n              </span>\n            </div>\n          </motion.div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\ntype SortField = 'product' | 'sales' | 'revenue' | 'status';\ntype SortDirection = 'asc' | 'desc';\n\nexport default function AnalyticsDashboard() {\n  const [isDarkMode, setIsDarkMode] = useState(false);\n  const [metrics, setMetrics] = useState<MetricData[]>(mockMetrics);\n  const [chartData, setChartData] = useState<ChartDataPoint[]>(mockChartData);\n  const [tableData, setTableData] = useState<TableRow[]>(mockTableData);\n  const [isRefreshing, setIsRefreshing] = useState(false);\n  const [alerts, setAlerts] = useState<Alert[]>(mockAlerts);\n\n  const handleDismissAlert = useCallback((alertId: string) => {\n    setAlerts(prev => prev.filter(alert => alert.id !== alertId));\n  }, []);\n  const [sortField, setSortField] = useState<SortField>('revenue');\n  const [sortDirection, setSortDirection] = useState<SortDirection>('desc');\n  const [currentPage, setCurrentPage] = useState(1);\n  const itemsPerPage = 3;\n\n  const toggleDarkMode = useCallback(() => {\n    setIsDarkMode(prev => !prev);\n  }, []);\n\n  const handleSort = useCallback((field: SortField) => {\n    if (sortField === field) {\n      setSortDirection(prev => prev === 'asc' ? 'desc' : 'asc');\n    } else {\n      setSortField(field);\n      setSortDirection('desc');\n    }\n    setCurrentPage(1);\n  }, [sortField]);\n\n  const sortedData = useCallback(() => {\n    const sorted = [...tableData].sort((a, b) => {\n      let aValue: string | number = a[sortField];\n      let bValue: string | number = b[sortField];\n\n      if (typeof aValue === 'string') {\n        aValue = aValue.toLowerCase();\n        bValue = (bValue as string).toLowerCase();\n      }\n\n      if (aValue < bValue) return sortDirection === 'asc' ? -1 : 1;\n      if (aValue > bValue) return sortDirection === 'asc' ? 1 : -1;\n      return 0;\n    });\n    return sorted;\n  }, [tableData, sortField, sortDirection]);\n\n  const paginatedData = useCallback(() => {\n    const sorted = sortedData();\n    const startIndex = (currentPage - 1) * itemsPerPage;\n    const endIndex = startIndex + itemsPerPage;\n    return sorted.slice(startIndex, endIndex);\n  }, [sortedData, currentPage]);\n\n  const totalPages = Math.ceil(tableData.length / itemsPerPage);\n\n  const getStatusBadgeVariant = (status: TableRow['status']) => {\n    switch (status) {\n      case 'active':\n        return 'default';\n      case 'pending':\n        return 'secondary';\n      case 'inactive':\n        return 'outline';\n      default:\n        return 'default';\n    }\n  };\n\n  const handleRefresh = useCallback(() => {\n    setIsRefreshing(true);\n    \n    setTimeout(() => {\n      // Generate updated mock metrics with random variations\n      const updatedMetrics = mockMetrics.map(metric => ({\n        ...metric,\n        value: metric.value + Math.floor(Math.random() * 200 - 100),\n        change: parseFloat((Math.random() * 20 - 5).toFixed(1)),\n        trend: Math.random() > 0.5 ? 'up' as const : 'down' as const\n      }));\n\n      // Generate updated chart data with random variations\n      const updatedChartData = mockChartData.map(point => ({\n        ...point,\n        revenue: point.revenue + Math.floor(Math.random() * 4000 - 2000),\n        users: point.users + Math.floor(Math.random() * 100 - 50),\n        orders: point.orders + Math.floor(Math.random() * 50 - 25)\n      }));\n\n      // Generate updated table data with random variations\n      const updatedTableData = mockTableData.map(row => ({\n        ...row,\n        sales: row.sales + Math.floor(Math.random() * 40 - 20),\n        revenue: row.revenue + Math.floor(Math.random() * 2000 - 1000)\n      }));\n\n      setMetrics(updatedMetrics);\n      setChartData(updatedChartData);\n      setTableData(updatedTableData);\n      setIsRefreshing(false);\n    }, 1500);</parameter>\n</invoke>\n  }, []);\n\n  return (\n    <div className={`min-h-screen ${isDarkMode ? 'dark bg-gray-900' : 'bg-gray-50'}`}>\n      <div className=\"container mx-auto p-4 md:p-6 lg:p-8\">\n        <div className=\"flex flex-col md:flex-row justify-between items-start md:items-center gap-4 mb-8\">\n          <div>\n            <h1 className={`text-3xl md:text-4xl font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n              Analytics Dashboard\n            </h1>\n            <p className={`mt-2 ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n              Real-time insights and performance metrics\n            </p>\n          </div>\n          \n          <div className=\"flex gap-2\">\n            <Button\n              variant=\"outline\"\n              size=\"icon\"\n              onClick={toggleDarkMode}\n              className={isDarkMode ? 'border-gray-700' : ''}\n            >\n              {isDarkMode ? <Sun className=\"h-5 w-5\" /> : <Moon className=\"h-5 w-5\" />}\n            </Button>\n            \n            <Button\n              variant=\"outline\"\n              onClick={handleRefresh}\n              disabled={isRefreshing}\n              className={isDarkMode ? 'border-gray-700' : ''}\n            >\n              <RefreshCw className={`h-4 w-4 mr-2 ${isRefreshing ? 'animate-spin' : ''}`} />\n              Refresh\n            </Button>\n          </div>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 md:gap-6 mb-8\">\n          {metrics.map((metric, index) => {\n            const Icon = metric.label.includes('Revenue') ? DollarSign :\n                        metric.label.includes('Users') ? Users :\n                        metric.label.includes('Orders') ? ShoppingCart : Target;\n            \n            const TrendIcon = metric.trend === 'up' ? TrendingUp : TrendingDown;\n            const trendColor = metric.trend === 'up' ? 'text-green-500' : 'text-red-500';\n            const trendBgColor = metric.trend === 'up' ? 'bg-green-50 dark:bg-green-900/20' : 'bg-red-50 dark:bg-red-900/20';\n\n            return (\n              <motion.div\n                key={metric.id}\n                initial={{ opacity: 0, y: 20 }}\n                animate={{ opacity: 1, y: 0 }}\n                transition={{ duration: 0.4, delay: index * 0.1 }}\n              >\n                <Card className={`${isDarkMode ? 'bg-gray-800 border-gray-700' : 'bg-white'} hover:shadow-lg transition-shadow duration-300`}>\n                  <CardHeader className=\"flex flex-row items-center justify-between pb-2\">\n                    <CardTitle className={`text-sm font-medium ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                      {metric.label}\n                    </CardTitle>\n                    <div className={`p-2 rounded-lg ${isDarkMode ? 'bg-gray-700' : 'bg-gray-100'}`}>\n                      <Icon className={`h-4 w-4 ${isDarkMode ? 'text-gray-300' : 'text-gray-600'}`} />\n                    </div>\n                  </CardHeader>\n                  <CardContent>\n                    <div className={`text-2xl md:text-3xl font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                      {metric.label.includes('Revenue') ? `$${metric.value.toLocaleString()}` :\n                       metric.label.includes('Rate') ? `${metric.value}%` :\n                       metric.value.toLocaleString()}\n                    </div>\n                    <div className=\"flex items-center mt-2\">\n                      <div className={`flex items-center gap-1 px-2 py-1 rounded-full ${trendBgColor}`}>\n                        <TrendIcon className={`h-3 w-3 ${trendColor}`} />\n                        <span className={`text-xs font-medium ${trendColor}`}>\n                          {Math.abs(metric.change)}%\n                        </span>\n                      </div>\n                      <span className={`text-xs ml-2 ${isDarkMode ? 'text-gray-400' : 'text-gray-500'}`}>\n                        vs last period\n                      </span>\n                    </div>\n                  </CardContent>\n                </Card>\n              </motion.div>\n            );\n          })}\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-4 md:gap-6 mb-8\">\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Revenue Overview</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Daily revenue trends\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <ResponsiveContainer width=\"100%\" height={300}>\n                <LineChart data={chartData} margin={{ top: 5, right: 20, left: 0, bottom: 5 }}>\n                  <CartesianGrid \n                    strokeDasharray=\"3 3\" \n                    stroke={isDarkMode ? '#374151' : '#e5e7eb'} \n                  />\n                  <XAxis \n                    dataKey=\"date\" \n                    stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                    tick={{ fill: isDarkMode ? '#9ca3af' : '#6b7280', fontSize: 12 }}\n                    tickFormatter={(value) => new Date(value).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n                  />\n                  <YAxis \n                    stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                    tick={{ fill: isDarkMode ? '#9ca3af' : '#6b7280', fontSize: 12 }}\n                    tickFormatter={(value) => `$${(value / 1000).toFixed(0)}k`}\n                  />\n                  <Tooltip \n                    contentStyle={{\n                      backgroundColor: isDarkMode ? '#1f2937' : '#ffffff',\n                      border: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\n                      borderRadius: '8px',\n                      color: isDarkMode ? '#ffffff' : '#000000'\n                    }}\n                    labelStyle={{ color: isDarkMode ? '#9ca3af' : '#6b7280' }}\n                    formatter={(value: number) => [`$${value.toLocaleString()}`, 'Revenue']}\n                    labelFormatter={(label) => new Date(label).toLocaleDateString('en-US', { month: 'long', day: 'numeric', year: 'numeric' })}\n                  />\n                  <Line \n                    type=\"monotone\" \n                    dataKey=\"revenue\" \n                    stroke=\"#3b82f6\" \n                    strokeWidth={2}\n                    dot={{ fill: '#3b82f6', r: 4 }}\n                    activeDot={{ r: 6, fill: '#2563eb' }}\n                  />\n                </LineChart>\n              </ResponsiveContainer>\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>User Growth</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Active users over time\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              \n            </CardContent>\n          </Card>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-4 md:gap-6 mb-8\">\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Orders Distribution</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                By product category\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <PieChart\n                data={(() => {\n                  const total = chartData.reduce((sum, item) => sum + item.orders, 0);\n                  return chartData.slice(0, 5).map((item, index) => ({\n                    label: item.date.slice(5),\n                    value: item.orders,\n                    color: pieChartColors[index],\n                    percentage: (item.orders / total) * 100\n                  }));\n                })()}\n                isDark={isDarkMode}\n              />\n            </CardContent>\n          </Card>\n\n          <Card className={`lg:col-span-2 ${isDarkMode ? 'bg-gray-800 border-gray-700' : ''}`}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Performance Metrics</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Combined view of key indicators\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"h-[300px] w-full\">\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <BarChart\n                    data={chartData}\n                    margin={{ top: 20, right: 30, left: 20, bottom: 5 }}\n                  >\n                    <CartesianGrid \n                      strokeDasharray=\"3 3\" \n                      stroke={isDarkMode ? '#374151' : '#e5e7eb'}\n                    />\n                    <XAxis \n                      dataKey=\"date\" \n                      stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                      tick={{ fill: isDarkMode ? '#9ca3af' : '#6b7280' }}\n                      tickFormatter={(value) => new Date(value).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n                    />\n                    <YAxis \n                      stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                      tick={{ fill: isDarkMode ? '#9ca3af' : '#6b7280' }}\n                    />\n                    <Tooltip \n                      contentStyle={{\n                        backgroundColor: isDarkMode ? '#1f2937' : '#ffffff',\n                        border: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\n                        borderRadius: '8px',\n                        color: isDarkMode ? '#f3f4f6' : '#111827'\n                      }}\n                      labelStyle={{ color: isDarkMode ? '#f3f4f6' : '#111827' }}\n                      formatter={(value: number) => value.toLocaleString()}\n                      labelFormatter={(label) => new Date(label).toLocaleDateString('en-US', { month: 'long', day: 'numeric', year: 'numeric' })}\n                    />\n                    <Legend \n                      wrapperStyle={{ color: isDarkMode ? '#f3f4f6' : '#111827' }}\n                      iconType=\"rect\"\n                    />\n                    <Bar \n                      dataKey=\"revenue\" \n                      fill=\"#3b82f6\" \n                      radius={[8, 8, 0, 0]}\n                      name=\"Revenue ($)\"\n                    />\n                    <Bar \n                      dataKey=\"users\" \n                      fill=\"#10b981\" \n                      radius={[8, 8, 0, 0]}\n                      name=\"Active Users\"\n                    />\n                    <Bar \n                      dataKey=\"orders\" \n                      fill=\"#f59e0b\" \n                      radius={[8, 8, 0, 0]}\n                      name=\"Total Orders\"\n                    />\n                  </BarChart>\n                </ResponsiveContainer>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n          <CardHeader>\n            <CardTitle className={isDarkMode ? 'text-white' : ''}>Top Products</CardTitle>\n            <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n              Best performing products by revenue\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              <div className=\"rounded-md border overflow-hidden\">\n                <div className=\"overflow-x-auto\">\n                  <Table>\n                    <TableHeader>\n                      <TableRow className={isDarkMode ? 'border-gray-700 hover:bg-gray-750' : ''}>\n                        <TableHead className={isDarkMode ? 'text-gray-300' : ''}>\n                          <Button\n                            variant=\"ghost\"\n                            onClick={() => handleSort('product')}\n                            className=\"h-8 px-2 lg:px-3\"\n                          >\n                            Product\n                            <ArrowUpDown className=\"ml-2 h-4 w-4\" />\n                          </Button>\n                        </TableHead>\n                        <TableHead className={isDarkMode ? 'text-gray-300' : ''}>\n                          <Button\n                            variant=\"ghost\"\n                            onClick={() => handleSort('sales')}\n                            className=\"h-8 px-2 lg:px-3\"\n                          >\n                            Sales\n                            <ArrowUpDown className=\"ml-2 h-4 w-4\" />\n                          </Button>\n                        </TableHead>\n                        <TableHead className={isDarkMode ? 'text-gray-300' : ''}>\n                          <Button\n                            variant=\"ghost\"\n                            onClick={() => handleSort('revenue')}\n                            className=\"h-8 px-2 lg:px-3\"\n                          >\n                            Revenue\n                            <ArrowUpDown className=\"ml-2 h-4 w-4\" />\n                          </Button>\n                        </TableHead>\n                        <TableHead className={isDarkMode ? 'text-gray-300' : ''}>\n                          <Button\n                            variant=\"ghost\"\n                            onClick={() => handleSort('status')}\n                            className=\"h-8 px-2 lg:px-3\"\n                          >\n                            Status\n                            <ArrowUpDown className=\"ml-2 h-4 w-4\" />\n                          </Button>\n                        </TableHead>\n                      </TableRow>\n                    </TableHeader>\n                    <TableBody>\n                      {paginatedData().map((row) => (\n                        <TableRow \n                          key={row.id}\n                          className={isDarkMode ? 'border-gray-700 hover:bg-gray-750' : ''}\n                        >\n                          <TableCell className={`font-medium ${isDarkMode ? 'text-white' : ''}`}>\n                            {row.product}\n                          </TableCell>\n                          <TableCell className={isDarkMode ? 'text-gray-300' : ''}>\n                            {row.sales.toLocaleString()}\n                          </TableCell>\n                          <TableCell className={isDarkMode ? 'text-gray-300' : ''}>\n                            ${row.revenue.toLocaleString()}\n                          </TableCell>\n                          <TableCell>\n                            <Badge \n                              variant={getStatusBadgeVariant(row.status)}\n                              className=\"capitalize\"\n                            >\n                              {row.status}\n                            </Badge>\n                          </TableCell>\n                        </TableRow>\n                      ))}\n                    </TableBody>\n                  </Table>\n                </div>\n              </div>\n\n              <div className=\"flex flex-col sm:flex-row items-center justify-between gap-4\">\n                <div className={`text-sm ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                  Showing {((currentPage - 1) * itemsPerPage) + 1} to {Math.min(currentPage * itemsPerPage, tableData.length)} of {tableData.length} products\n                </div>\n                \n                <div className=\"flex items-center gap-2\">\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => setCurrentPage(prev => Math.max(1, prev - 1))}\n                    disabled={currentPage === 1}\n                    className={isDarkMode ? 'border-gray-700' : ''}\n                  >\n                    <ChevronLeft className=\"h-4 w-4 mr-1\" />\n                    Previous\n                  </Button>\n                  \n                  <div className=\"flex items-center gap-1\">\n                    {Array.from({ length: totalPages }, (_, i) => i + 1).map((page) => (\n                      <Button\n                        key={page}\n                        variant={currentPage === page ? 'default' : 'outline'}\n                        size=\"sm\"\n                        onClick={() => setCurrentPage(page)}\n                        className={`w-8 h-8 p-0 ${isDarkMode && currentPage !== page ? 'border-gray-700' : ''}`}\n                      >\n                        {page}\n                      </Button>\n                    ))}\n                  </div>\n                  \n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => setCurrentPage(prev => Math.min(totalPages, prev + 1))}\n                    disabled={currentPage === totalPages}\n                    className={isDarkMode ? 'border-gray-700' : ''}\n                  >\n                    Next\n                    <ChevronRight className=\"h-4 w-4 ml-1\" />\n                  </Button>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 md:gap-6 mt-8\">\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Recent Activity</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {mockActivityData.map((activity, index) => {\n                  const getIcon = () => {\n                    switch (activity.icon) {\n                      case 'check': return <CheckCircle className=\"h-4 w-4\" />;\n                      case 'alert': return <AlertCircle className=\"h-4 w-4\" />;\n                      case 'package': return <Package className=\"h-4 w-4\" />;\n                      case 'card': return <CreditCard className=\"h-4 w-4\" />;\n                      case 'users': return <Users className=\"h-4 w-4\" />;\n                      case 'cart': return <ShoppingCart className=\"h-4 w-4\" />;\n                      default: return <CheckCircle className=\"h-4 w-4\" />;\n                    }\n                  };\n\n                  const getIconBgColor = () => {\n                    switch (activity.type) {\n                      case 'success': return isDarkMode ? 'bg-green-900/30 text-green-400' : 'bg-green-100 text-green-600';\n                      case 'warning': return isDarkMode ? 'bg-yellow-900/30 text-yellow-400' : 'bg-yellow-100 text-yellow-600';\n                      case 'info': return isDarkMode ? 'bg-blue-900/30 text-blue-400' : 'bg-blue-100 text-blue-600';\n                      case 'error': return isDarkMode ? 'bg-red-900/30 text-red-400' : 'bg-red-100 text-red-600';\n                      default: return isDarkMode ? 'bg-gray-700 text-gray-400' : 'bg-gray-100 text-gray-600';\n                    }\n                  };\n\n                  return (\n                    <motion.div\n                      key={activity.id}\n                      initial={{ opacity: 0, x: -20 }}\n                      animate={{ opacity: 1, x: 0 }}\n                      transition={{ delay: index * 0.1, duration: 0.3 }}\n                      className=\"flex items-start gap-3\"\n                    >\n                      <div className={`flex-shrink-0 w-8 h-8 rounded-full flex items-center justify-center ${getIconBgColor()}`}>\n                        {getIcon()}\n                      </div>\n                      <div className=\"flex-1 min-w-0\">\n                        <p className={`text-sm ${isDarkMode ? 'text-gray-300' : 'text-gray-900'}`}>\n                          {activity.message}\n                        </p>\n                        <p className={`text-xs mt-1 ${isDarkMode ? 'text-gray-500' : 'text-gray-500'}`}>\n                          {activity.timestamp}\n                        </p>\n                      </div>\n                    </motion.div>\n                  );\n                })}\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Quick Stats</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {mockQuickStats.map((stat, index) => (\n                  <motion.div\n                    key={stat.id}\n                    initial={{ opacity: 0, x: -20 }}\n                    animate={{ opacity: 1, x: 0 }}\n                    transition={{ delay: index * 0.1 }}\n                    className={`p-4 rounded-lg border ${\n                      isDarkMode ? 'bg-gray-700/50 border-gray-600' : 'bg-white border-gray-200'\n                    }`}\n                  >\n                    <div className=\"flex items-start justify-between mb-3\">\n                      <div className=\"flex-1\">\n                        <p className={`text-sm font-medium ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                          {stat.label}\n                        </p>\n                        <p className={`text-2xl font-bold mt-1 ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                          {stat.value}\n                        </p>\n                      </div>\n                      <div className={`flex items-center gap-1 px-2 py-1 rounded-full text-xs font-semibold ${\n                        stat.trend === 'up'\n                          ? 'bg-green-100 text-green-700 dark:bg-green-900/30 dark:text-green-400'\n                          : 'bg-red-100 text-red-700 dark:bg-red-900/30 dark:text-red-400'\n                      }`}>\n                        {stat.trend === 'up' ? (\n                          <TrendingUp className=\"h-3 w-3\" />\n                        ) : (\n                          <TrendingDown className=\"h-3 w-3\" />\n                        )}\n                        {Math.abs(stat.change)}%\n                      </div>\n                    </div>\n                    \n                    <div className=\"h-12\">\n                      <ResponsiveContainer width=\"100%\" height=\"100%\">\n                        <LineChart data={stat.sparklineData.map((value, i) => ({ value, index: i }))}>\n                          <Line\n                            type=\"monotone\"\n                            dataKey=\"value\"\n                            stroke={stat.trend === 'up' ? '#10b981' : '#ef4444'}\n                            strokeWidth={2}\n                            dot={false}\n                            animationDuration={1000}\n                          />\n                        </LineChart>\n                      </ResponsiveContainer>\n                    </div>\n                  </motion.div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Alerts</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-3\">\n                {alerts.length === 0 ? (\n                  <div className={`text-center py-8 ${isDarkMode ? 'text-gray-400' : 'text-gray-500'}`}>\n                    <CheckCircle className=\"h-12 w-12 mx-auto mb-2 opacity-50\" />\n                    <p className=\"text-sm\">No active alerts</p>\n                  </div>\n                ) : (\n                  alerts.map((alert, index) => {\n                    const severityConfig = {\n                      info: {\n                        icon: Info,\n                        bgColor: isDarkMode ? 'bg-blue-900/30' : 'bg-blue-50',\n                        borderColor: 'border-blue-500',\n                        iconColor: 'text-blue-500',\n                        textColor: isDarkMode ? 'text-blue-200' : 'text-blue-900'\n                      },\n                      warning: {\n                        icon: AlertTriangle,\n                        bgColor: isDarkMode ? 'bg-yellow-900/30' : 'bg-yellow-50',\n                        borderColor: 'border-yellow-500',\n                        iconColor: 'text-yellow-500',\n                        textColor: isDarkMode ? 'text-yellow-200' : 'text-yellow-900'\n                      },\n                      error: {\n                        icon: AlertCircle,\n                        bgColor: isDarkMode ? 'bg-red-900/30' : 'bg-red-50',\n                        borderColor: 'border-red-500',\n                        iconColor: 'text-red-500',\n                        textColor: isDarkMode ? 'text-red-200' : 'text-red-900'\n                      },\n                      success: {\n                        icon: CheckCircle,\n                        bgColor: isDarkMode ? 'bg-green-900/30' : 'bg-green-50',\n                        borderColor: 'border-green-500',\n                        iconColor: 'text-green-500',\n                        textColor: isDarkMode ? 'text-green-200' : 'text-green-900'\n                      }\n                    };\n\n                    const config = severityConfig[alert.severity];\n                    const Icon = config.icon;\n\n                    return (\n                      <motion.div\n                        key={alert.id}\n                        initial={{ opacity: 0, x: -20 }}\n                        animate={{ opacity: 1, x: 0 }}\n                        exit={{ opacity: 0, x: 20 }}\n                        transition={{ delay: index * 0.1 }}\n                        className={`relative flex items-start gap-3 p-3 rounded-lg border-l-4 ${config.bgColor} ${config.borderColor}`}\n                      >\n                        <Icon className={`h-5 w-5 mt-0.5 flex-shrink-0 ${config.iconColor}`} />\n                        \n                        <div className=\"flex-1 min-w-0\">\n                          <p className={`text-sm font-medium ${config.textColor}`}>\n                            {alert.message}\n                          </p>\n                          <p className={`text-xs mt-1 ${isDarkMode ? 'text-gray-400' : 'text-gray-500'}`}>\n                            {alert.timestamp}\n                          </p>\n                        </div>\n\n                        <button\n                          onClick={() => handleDismissAlert(alert.id)}\n                          className={`flex-shrink-0 p-1 rounded hover:bg-black/10 transition-colors ${isDarkMode ? 'text-gray-400 hover:text-gray-200' : 'text-gray-500 hover:text-gray-700'}`}\n                          aria-label=\"Dismiss alert\"\n                        >\n                          <X className=\"h-4 w-4\" />\n                        </button>\n                      </motion.div>\n                    );\n                  })\n                )}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}",
  "error": null,
  "overall_score": 59,
  "code_quality_score": 14,
  "architecture_score": 12,
  "performance_score": 16,
  "accessibility_score": 17,
  "metadata": {
    "document_id": "eval_room_a59c8d11c3cd",
    "prompt_category": "intermediate",
    "prompt_complexity": 6.0
  },
  "raw_response": {
    "document_id": "eval_room_a59c8d11c3cd",
    "mode": "parallel",
    "prompt": "Generate an analytics dashboard page with charts, data tables, real-time updates, dark mode, and responsive design",
    "content": "import { useState, useCallback } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Moon, Sun, RefreshCw } from 'lucide-react';\nimport { TrendingUp, TrendingDown, DollarSign, Users, ShoppingCart, Target, CheckCircle, AlertCircle, Package, CreditCard } from 'lucide-react';\nimport { ArrowUpDown, ChevronLeft, ChevronRight } from 'lucide-react';\nimport { Badge } from '@/components/ui/badge';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\nimport { AreaChart, Area, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';\nimport { motion } from 'framer-motion';\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\nimport { motion } from 'framer-motion';\n\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';\nimport { motion } from 'framer-motion';\nimport { TrendingUp, TrendingDown, DollarSign, Users, ShoppingCart, Target } from 'lucide-react'\n;\nimport { motion } from 'framer-motion';\nimport { AlertCircle, AlertTriangle, Info, CheckCircle, X } from 'lucide-react';\n\ninterface MetricData {\n  id: string;\n  label: string;\n  value: number;\n  change: number;\n  trend: 'up' | 'down';\n}\n\ninterface ChartDataPoint {\n  date: string;\n  revenue: number;\n  users: number;\n  orders: number;\n}\n\ninterface TableRow {\n  id: string;\n  product: string;\n  sales: number;\n  revenue: number;\n  status: 'active' | 'pending' | 'inactive';\n}\n\ninterface Alert {\n  id: string;\n  message: string;\n  severity: 'info' | 'warning' | 'error' | 'success';\n  timestamp: string;\n}\n\nconst mockMetrics: MetricData[] = [\n  { id: '1', label: 'Total Revenue', value: 45231, change: 12.5, trend: 'up' },\n  { id: '2', label: 'Active Users', value: 2350, change: 8.2, trend: 'up' },\n  { id: '3', label: 'Total Orders', value: 1543, change: -3.1, trend: 'down' },\n  { id: '4', label: 'Conversion Rate', value: 3.24, change: 5.7, trend: 'up' }\n];\n\nconst mockChartData: ChartDataPoint[] = [\n  { date: '2024-01-01', revenue: 12000, users: 450, orders: 230 },\n  { date: '2024-01-02', revenue: 15000, users: 520, orders: 280 },\n  { date: '2024-01-03', revenue: 13500, users: 490, orders: 250 },\n  { date: '2024-01-04', revenue: 18000, users: 610, orders: 320 },\n  { date: '2024-01-05', revenue: 16500, users: 580, orders: 295 },\n  { date: '2024-01-06', revenue: 20000, users: 680, orders: 350 },\n  { date: '2024-01-07', revenue: 22000, users: 720, orders: 380 }\n];\n\nconst mockTableData: TableRow[] = [\n  { id: '1', product: 'Premium Plan', sales: 234, revenue: 23400, status: 'active' },\n  { id: '2', product: 'Basic Plan', sales: 567, revenue: 11340, status: 'active' },\n  { id: '3', product: 'Enterprise Plan', sales: 89, revenue: 44500, status: 'active' },\n  { id: '4', product: 'Starter Plan', sales: 432, revenue: 4320, status: 'pending' },\n  { id: '5', product: 'Pro Plan', sales: 156, revenue: 15600, status: 'inactive' }\n];\nconst mockQuickStats = [\n  { \n    id: '1', \n    label: 'Avg Order Value', \n    value: '$142.50', \n    change: 15.3, \n    trend: 'up' as const,\n    sparklineData: [120, 135, 128, 145, 138, 152, 142]\n  },\n  { \n    id: '2', \n    label: 'Customer Retention', \n    value: '87.2%', \n    change: 3.8, \n    trend: 'up' as const,\n    sparklineData: [82, 83, 85, 84, 86, 87, 87]\n  },\n  { \n    id: '3', \n    label: 'Bounce Rate', \n    value: '32.4%', \n    change: -5.2, \n    trend: 'down' as const,\n    sparklineData: [38, 37, 35, 34, 33, 33, 32]\n  },\n  { \n    id: '4', \n    label: 'Page Views', \n    value: '12.4K', \n    change: 22.1, \n    trend: 'up' as const,\n    sparklineData: [9800, 10200, 10800, 11200, 11800, 12100, 12400]\n  }\n];\n\nconst mockAlerts: Alert[] = [\n  { id: '1', message: 'Server response time increased by 15%', severity: 'warning', timestamp: '5 min ago' },\n  { id: '2', message: 'New user milestone reached: 2,500 users', severity: 'success', timestamp: '12 min ago' },\n  { id: '3', message: 'Payment gateway experiencing delays', severity: 'error', timestamp: '18 min ago' },\n  { id: '4', message: 'Scheduled maintenance in 2 hours', severity: 'info', timestamp: '25 min ago' }\n];\ninterface ActivityItem {\n  id: string;\n  type: 'success' | 'warning' | 'info' | 'error';\n  message: string;\n  timestamp: string;\n  icon: 'check' | 'alert' | 'package' | 'card' | 'users' | 'cart';\n}\n\nconst mockActivityData: ActivityItem[] = [\n  { id: '1', type: 'success', message: 'New order #1234 completed', timestamp: '2 min ago', icon: 'check' },\n  { id: '2', type: 'info', message: '15 new users registered', timestamp: '5 min ago', icon: 'users' },\n  { id: '3', type: 'warning', message: 'Low stock alert for Premium Plan', timestamp: '12 min ago', icon: 'alert' },\n  { id: '4', type: 'success', message: 'Payment received $2,450', timestamp: '18 min ago', icon: 'card' },\n  { id: '5', type: 'info', message: 'Package shipped to customer', timestamp: '25 min ago', icon: 'package' },\n  { id: '6', type: 'success', message: '8 items added to cart', timestamp: '32 min ago', icon: 'cart' }\n];\n\nconst pieChartColors = ['#3b82f6', '#8b5cf6', '#ec4899', '#f59e0b', '#10b981'];\n\ninterface PieChartData {\n  label: string;\n  value: number;\n  color: string;\n  percentage: number;\n}\n\nconst PieChart = ({ data, isDark }: { data: PieChartData[]; isDark: boolean }) => {\n  const size = 200;\n  const center = size / 2;\n  const radius = size / 2 - 10;\n  \n  let currentAngle = -90;\n  \n  const createArc = (startAngle: number, endAngle: number) => {\n    const start = polarToCartesian(center, center, radius, endAngle);\n    const end = polarToCartesian(center, center, radius, startAngle);\n    const largeArcFlag = endAngle - startAngle <= 180 ? '0' : '1';\n    \n    return [\n      'M', center, center,\n      'L', start.x, start.y,\n      'A', radius, radius, 0, largeArcFlag, 0, end.x, end.y,\n      'Z'\n    ].join(' ');\n  };\n  \n  const polarToCartesian = (centerX: number, centerY: number, radius: number, angleInDegrees: number) => {\n    const angleInRadians = (angleInDegrees * Math.PI) / 180.0;\n    return {\n      x: centerX + radius * Math.cos(angleInRadians),\n      y: centerY + radius * Math.sin(angleInRadians)\n    };\n  };\n  \n  return (\n    <div className=\"flex flex-col items-center gap-6\">\n      <svg width={size} height={size} viewBox={`0 0 ${size} ${size}`}>\n        {data.map((item, index) => {\n          const angle = (item.percentage / 100) * 360;\n          const path = createArc(currentAngle, currentAngle + angle);\n          currentAngle += angle;\n          \n          return (\n            <motion.path\n              key={item.label}\n              d={path}\n              fill={item.color}\n              initial={{ opacity: 0, scale: 0 }}\n              animate={{ opacity: 1, scale: 1 }}\n              transition={{ duration: 0.5, delay: index * 0.1 }}\n              className=\"hover:opacity-80 transition-opacity cursor-pointer\"\n            />\n          );\n        })}\n      </svg>\n      \n      <div className=\"grid grid-cols-1 gap-2 w-full\">\n        {data.map((item, index) => (\n          <motion.div\n            key={item.label}\n            initial={{ opacity: 0, x: -20 }}\n            animate={{ opacity: 1, x: 0 }}\n            transition={{ duration: 0.3, delay: index * 0.1 }}\n            className=\"flex items-center justify-between gap-2\"\n          >\n            <div className=\"flex items-center gap-2\">\n              <div\n                className=\"w-3 h-3 rounded-full\"\n                style={{ backgroundColor: item.color }}\n              />\n              <span className={`text-sm ${isDark ? 'text-gray-300' : 'text-gray-700'}`}>\n                {item.label}\n              </span>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <span className={`text-sm font-medium ${isDark ? 'text-white' : 'text-gray-900'}`}>\n                {item.value}\n              </span>\n              <span className={`text-xs ${isDark ? 'text-gray-400' : 'text-gray-500'}`}>\n                ({item.percentage.toFixed(1)}%)\n              </span>\n            </div>\n          </motion.div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\ntype SortField = 'product' | 'sales' | 'revenue' | 'status';\ntype SortDirection = 'asc' | 'desc';\n\nexport default function AnalyticsDashboard() {\n  const [isDarkMode, setIsDarkMode] = useState(false);\n  const [metrics, setMetrics] = useState<MetricData[]>(mockMetrics);\n  const [chartData, setChartData] = useState<ChartDataPoint[]>(mockChartData);\n  const [tableData, setTableData] = useState<TableRow[]>(mockTableData);\n  const [isRefreshing, setIsRefreshing] = useState(false);\n  const [alerts, setAlerts] = useState<Alert[]>(mockAlerts);\n\n  const handleDismissAlert = useCallback((alertId: string) => {\n    setAlerts(prev => prev.filter(alert => alert.id !== alertId));\n  }, []);\n  const [sortField, setSortField] = useState<SortField>('revenue');\n  const [sortDirection, setSortDirection] = useState<SortDirection>('desc');\n  const [currentPage, setCurrentPage] = useState(1);\n  const itemsPerPage = 3;\n\n  const toggleDarkMode = useCallback(() => {\n    setIsDarkMode(prev => !prev);\n  }, []);\n\n  const handleSort = useCallback((field: SortField) => {\n    if (sortField === field) {\n      setSortDirection(prev => prev === 'asc' ? 'desc' : 'asc');\n    } else {\n      setSortField(field);\n      setSortDirection('desc');\n    }\n    setCurrentPage(1);\n  }, [sortField]);\n\n  const sortedData = useCallback(() => {\n    const sorted = [...tableData].sort((a, b) => {\n      let aValue: string | number = a[sortField];\n      let bValue: string | number = b[sortField];\n\n      if (typeof aValue === 'string') {\n        aValue = aValue.toLowerCase();\n        bValue = (bValue as string).toLowerCase();\n      }\n\n      if (aValue < bValue) return sortDirection === 'asc' ? -1 : 1;\n      if (aValue > bValue) return sortDirection === 'asc' ? 1 : -1;\n      return 0;\n    });\n    return sorted;\n  }, [tableData, sortField, sortDirection]);\n\n  const paginatedData = useCallback(() => {\n    const sorted = sortedData();\n    const startIndex = (currentPage - 1) * itemsPerPage;\n    const endIndex = startIndex + itemsPerPage;\n    return sorted.slice(startIndex, endIndex);\n  }, [sortedData, currentPage]);\n\n  const totalPages = Math.ceil(tableData.length / itemsPerPage);\n\n  const getStatusBadgeVariant = (status: TableRow['status']) => {\n    switch (status) {\n      case 'active':\n        return 'default';\n      case 'pending':\n        return 'secondary';\n      case 'inactive':\n        return 'outline';\n      default:\n        return 'default';\n    }\n  };\n\n  const handleRefresh = useCallback(() => {\n    setIsRefreshing(true);\n    \n    setTimeout(() => {\n      // Generate updated mock metrics with random variations\n      const updatedMetrics = mockMetrics.map(metric => ({\n        ...metric,\n        value: metric.value + Math.floor(Math.random() * 200 - 100),\n        change: parseFloat((Math.random() * 20 - 5).toFixed(1)),\n        trend: Math.random() > 0.5 ? 'up' as const : 'down' as const\n      }));\n\n      // Generate updated chart data with random variations\n      const updatedChartData = mockChartData.map(point => ({\n        ...point,\n        revenue: point.revenue + Math.floor(Math.random() * 4000 - 2000),\n        users: point.users + Math.floor(Math.random() * 100 - 50),\n        orders: point.orders + Math.floor(Math.random() * 50 - 25)\n      }));\n\n      // Generate updated table data with random variations\n      const updatedTableData = mockTableData.map(row => ({\n        ...row,\n        sales: row.sales + Math.floor(Math.random() * 40 - 20),\n        revenue: row.revenue + Math.floor(Math.random() * 2000 - 1000)\n      }));\n\n      setMetrics(updatedMetrics);\n      setChartData(updatedChartData);\n      setTableData(updatedTableData);\n      setIsRefreshing(false);\n    }, 1500);</parameter>\n</invoke>\n  }, []);\n\n  return (\n    <div className={`min-h-screen ${isDarkMode ? 'dark bg-gray-900' : 'bg-gray-50'}`}>\n      <div className=\"container mx-auto p-4 md:p-6 lg:p-8\">\n        <div className=\"flex flex-col md:flex-row justify-between items-start md:items-center gap-4 mb-8\">\n          <div>\n            <h1 className={`text-3xl md:text-4xl font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n              Analytics Dashboard\n            </h1>\n            <p className={`mt-2 ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n              Real-time insights and performance metrics\n            </p>\n          </div>\n          \n          <div className=\"flex gap-2\">\n            <Button\n              variant=\"outline\"\n              size=\"icon\"\n              onClick={toggleDarkMode}\n              className={isDarkMode ? 'border-gray-700' : ''}\n            >\n              {isDarkMode ? <Sun className=\"h-5 w-5\" /> : <Moon className=\"h-5 w-5\" />}\n            </Button>\n            \n            <Button\n              variant=\"outline\"\n              onClick={handleRefresh}\n              disabled={isRefreshing}\n              className={isDarkMode ? 'border-gray-700' : ''}\n            >\n              <RefreshCw className={`h-4 w-4 mr-2 ${isRefreshing ? 'animate-spin' : ''}`} />\n              Refresh\n            </Button>\n          </div>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 md:gap-6 mb-8\">\n          {metrics.map((metric, index) => {\n            const Icon = metric.label.includes('Revenue') ? DollarSign :\n                        metric.label.includes('Users') ? Users :\n                        metric.label.includes('Orders') ? ShoppingCart : Target;\n            \n            const TrendIcon = metric.trend === 'up' ? TrendingUp : TrendingDown;\n            const trendColor = metric.trend === 'up' ? 'text-green-500' : 'text-red-500';\n            const trendBgColor = metric.trend === 'up' ? 'bg-green-50 dark:bg-green-900/20' : 'bg-red-50 dark:bg-red-900/20';\n\n            return (\n              <motion.div\n                key={metric.id}\n                initial={{ opacity: 0, y: 20 }}\n                animate={{ opacity: 1, y: 0 }}\n                transition={{ duration: 0.4, delay: index * 0.1 }}\n              >\n                <Card className={`${isDarkMode ? 'bg-gray-800 border-gray-700' : 'bg-white'} hover:shadow-lg transition-shadow duration-300`}>\n                  <CardHeader className=\"flex flex-row items-center justify-between pb-2\">\n                    <CardTitle className={`text-sm font-medium ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                      {metric.label}\n                    </CardTitle>\n                    <div className={`p-2 rounded-lg ${isDarkMode ? 'bg-gray-700' : 'bg-gray-100'}`}>\n                      <Icon className={`h-4 w-4 ${isDarkMode ? 'text-gray-300' : 'text-gray-600'}`} />\n                    </div>\n                  </CardHeader>\n                  <CardContent>\n                    <div className={`text-2xl md:text-3xl font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                      {metric.label.includes('Revenue') ? `$${metric.value.toLocaleString()}` :\n                       metric.label.includes('Rate') ? `${metric.value}%` :\n                       metric.value.toLocaleString()}\n                    </div>\n                    <div className=\"flex items-center mt-2\">\n                      <div className={`flex items-center gap-1 px-2 py-1 rounded-full ${trendBgColor}`}>\n                        <TrendIcon className={`h-3 w-3 ${trendColor}`} />\n                        <span className={`text-xs font-medium ${trendColor}`}>\n                          {Math.abs(metric.change)}%\n                        </span>\n                      </div>\n                      <span className={`text-xs ml-2 ${isDarkMode ? 'text-gray-400' : 'text-gray-500'}`}>\n                        vs last period\n                      </span>\n                    </div>\n                  </CardContent>\n                </Card>\n              </motion.div>\n            );\n          })}\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-4 md:gap-6 mb-8\">\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Revenue Overview</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Daily revenue trends\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <ResponsiveContainer width=\"100%\" height={300}>\n                <LineChart data={chartData} margin={{ top: 5, right: 20, left: 0, bottom: 5 }}>\n                  <CartesianGrid \n                    strokeDasharray=\"3 3\" \n                    stroke={isDarkMode ? '#374151' : '#e5e7eb'} \n                  />\n                  <XAxis \n                    dataKey=\"date\" \n                    stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                    tick={{ fill: isDarkMode ? '#9ca3af' : '#6b7280', fontSize: 12 }}\n                    tickFormatter={(value) => new Date(value).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n                  />\n                  <YAxis \n                    stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                    tick={{ fill: isDarkMode ? '#9ca3af' : '#6b7280', fontSize: 12 }}\n                    tickFormatter={(value) => `$${(value / 1000).toFixed(0)}k`}\n                  />\n                  <Tooltip \n                    contentStyle={{\n                      backgroundColor: isDarkMode ? '#1f2937' : '#ffffff',\n                      border: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\n                      borderRadius: '8px',\n                      color: isDarkMode ? '#ffffff' : '#000000'\n                    }}\n                    labelStyle={{ color: isDarkMode ? '#9ca3af' : '#6b7280' }}\n                    formatter={(value: number) => [`$${value.toLocaleString()}`, 'Revenue']}\n                    labelFormatter={(label) => new Date(label).toLocaleDateString('en-US', { month: 'long', day: 'numeric', year: 'numeric' })}\n                  />\n                  <Line \n                    type=\"monotone\" \n                    dataKey=\"revenue\" \n                    stroke=\"#3b82f6\" \n                    strokeWidth={2}\n                    dot={{ fill: '#3b82f6', r: 4 }}\n                    activeDot={{ r: 6, fill: '#2563eb' }}\n                  />\n                </LineChart>\n              </ResponsiveContainer>\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>User Growth</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Active users over time\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              \n            </CardContent>\n          </Card>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-4 md:gap-6 mb-8\">\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Orders Distribution</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                By product category\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <PieChart\n                data={(() => {\n                  const total = chartData.reduce((sum, item) => sum + item.orders, 0);\n                  return chartData.slice(0, 5).map((item, index) => ({\n                    label: item.date.slice(5),\n                    value: item.orders,\n                    color: pieChartColors[index],\n                    percentage: (item.orders / total) * 100\n                  }));\n                })()}\n                isDark={isDarkMode}\n              />\n            </CardContent>\n          </Card>\n\n          <Card className={`lg:col-span-2 ${isDarkMode ? 'bg-gray-800 border-gray-700' : ''}`}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Performance Metrics</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Combined view of key indicators\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"h-[300px] w-full\">\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <BarChart\n                    data={chartData}\n                    margin={{ top: 20, right: 30, left: 20, bottom: 5 }}\n                  >\n                    <CartesianGrid \n                      strokeDasharray=\"3 3\" \n                      stroke={isDarkMode ? '#374151' : '#e5e7eb'}\n                    />\n                    <XAxis \n                      dataKey=\"date\" \n                      stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                      tick={{ fill: isDarkMode ? '#9ca3af' : '#6b7280' }}\n                      tickFormatter={(value) => new Date(value).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n                    />\n                    <YAxis \n                      stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                      tick={{ fill: isDarkMode ? '#9ca3af' : '#6b7280' }}\n                    />\n                    <Tooltip \n                      contentStyle={{\n                        backgroundColor: isDarkMode ? '#1f2937' : '#ffffff',\n                        border: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\n                        borderRadius: '8px',\n                        color: isDarkMode ? '#f3f4f6' : '#111827'\n                      }}\n                      labelStyle={{ color: isDarkMode ? '#f3f4f6' : '#111827' }}\n                      formatter={(value: number) => value.toLocaleString()}\n                      labelFormatter={(label) => new Date(label).toLocaleDateString('en-US', { month: 'long', day: 'numeric', year: 'numeric' })}\n                    />\n                    <Legend \n                      wrapperStyle={{ color: isDarkMode ? '#f3f4f6' : '#111827' }}\n                      iconType=\"rect\"\n                    />\n                    <Bar \n                      dataKey=\"revenue\" \n                      fill=\"#3b82f6\" \n                      radius={[8, 8, 0, 0]}\n                      name=\"Revenue ($)\"\n                    />\n                    <Bar \n                      dataKey=\"users\" \n                      fill=\"#10b981\" \n                      radius={[8, 8, 0, 0]}\n                      name=\"Active Users\"\n                    />\n                    <Bar \n                      dataKey=\"orders\" \n                      fill=\"#f59e0b\" \n                      radius={[8, 8, 0, 0]}\n                      name=\"Total Orders\"\n                    />\n                  </BarChart>\n                </ResponsiveContainer>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n          <CardHeader>\n            <CardTitle className={isDarkMode ? 'text-white' : ''}>Top Products</CardTitle>\n            <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n              Best performing products by revenue\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              <div className=\"rounded-md border overflow-hidden\">\n                <div className=\"overflow-x-auto\">\n                  <Table>\n                    <TableHeader>\n                      <TableRow className={isDarkMode ? 'border-gray-700 hover:bg-gray-750' : ''}>\n                        <TableHead className={isDarkMode ? 'text-gray-300' : ''}>\n                          <Button\n                            variant=\"ghost\"\n                            onClick={() => handleSort('product')}\n                            className=\"h-8 px-2 lg:px-3\"\n                          >\n                            Product\n                            <ArrowUpDown className=\"ml-2 h-4 w-4\" />\n                          </Button>\n                        </TableHead>\n                        <TableHead className={isDarkMode ? 'text-gray-300' : ''}>\n                          <Button\n                            variant=\"ghost\"\n                            onClick={() => handleSort('sales')}\n                            className=\"h-8 px-2 lg:px-3\"\n                          >\n                            Sales\n                            <ArrowUpDown className=\"ml-2 h-4 w-4\" />\n                          </Button>\n                        </TableHead>\n                        <TableHead className={isDarkMode ? 'text-gray-300' : ''}>\n                          <Button\n                            variant=\"ghost\"\n                            onClick={() => handleSort('revenue')}\n                            className=\"h-8 px-2 lg:px-3\"\n                          >\n                            Revenue\n                            <ArrowUpDown className=\"ml-2 h-4 w-4\" />\n                          </Button>\n                        </TableHead>\n                        <TableHead className={isDarkMode ? 'text-gray-300' : ''}>\n                          <Button\n                            variant=\"ghost\"\n                            onClick={() => handleSort('status')}\n                            className=\"h-8 px-2 lg:px-3\"\n                          >\n                            Status\n                            <ArrowUpDown className=\"ml-2 h-4 w-4\" />\n                          </Button>\n                        </TableHead>\n                      </TableRow>\n                    </TableHeader>\n                    <TableBody>\n                      {paginatedData().map((row) => (\n                        <TableRow \n                          key={row.id}\n                          className={isDarkMode ? 'border-gray-700 hover:bg-gray-750' : ''}\n                        >\n                          <TableCell className={`font-medium ${isDarkMode ? 'text-white' : ''}`}>\n                            {row.product}\n                          </TableCell>\n                          <TableCell className={isDarkMode ? 'text-gray-300' : ''}>\n                            {row.sales.toLocaleString()}\n                          </TableCell>\n                          <TableCell className={isDarkMode ? 'text-gray-300' : ''}>\n                            ${row.revenue.toLocaleString()}\n                          </TableCell>\n                          <TableCell>\n                            <Badge \n                              variant={getStatusBadgeVariant(row.status)}\n                              className=\"capitalize\"\n                            >\n                              {row.status}\n                            </Badge>\n                          </TableCell>\n                        </TableRow>\n                      ))}\n                    </TableBody>\n                  </Table>\n                </div>\n              </div>\n\n              <div className=\"flex flex-col sm:flex-row items-center justify-between gap-4\">\n                <div className={`text-sm ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                  Showing {((currentPage - 1) * itemsPerPage) + 1} to {Math.min(currentPage * itemsPerPage, tableData.length)} of {tableData.length} products\n                </div>\n                \n                <div className=\"flex items-center gap-2\">\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => setCurrentPage(prev => Math.max(1, prev - 1))}\n                    disabled={currentPage === 1}\n                    className={isDarkMode ? 'border-gray-700' : ''}\n                  >\n                    <ChevronLeft className=\"h-4 w-4 mr-1\" />\n                    Previous\n                  </Button>\n                  \n                  <div className=\"flex items-center gap-1\">\n                    {Array.from({ length: totalPages }, (_, i) => i + 1).map((page) => (\n                      <Button\n                        key={page}\n                        variant={currentPage === page ? 'default' : 'outline'}\n                        size=\"sm\"\n                        onClick={() => setCurrentPage(page)}\n                        className={`w-8 h-8 p-0 ${isDarkMode && currentPage !== page ? 'border-gray-700' : ''}`}\n                      >\n                        {page}\n                      </Button>\n                    ))}\n                  </div>\n                  \n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => setCurrentPage(prev => Math.min(totalPages, prev + 1))}\n                    disabled={currentPage === totalPages}\n                    className={isDarkMode ? 'border-gray-700' : ''}\n                  >\n                    Next\n                    <ChevronRight className=\"h-4 w-4 ml-1\" />\n                  </Button>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 md:gap-6 mt-8\">\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Recent Activity</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {mockActivityData.map((activity, index) => {\n                  const getIcon = () => {\n                    switch (activity.icon) {\n                      case 'check': return <CheckCircle className=\"h-4 w-4\" />;\n                      case 'alert': return <AlertCircle className=\"h-4 w-4\" />;\n                      case 'package': return <Package className=\"h-4 w-4\" />;\n                      case 'card': return <CreditCard className=\"h-4 w-4\" />;\n                      case 'users': return <Users className=\"h-4 w-4\" />;\n                      case 'cart': return <ShoppingCart className=\"h-4 w-4\" />;\n                      default: return <CheckCircle className=\"h-4 w-4\" />;\n                    }\n                  };\n\n                  const getIconBgColor = () => {\n                    switch (activity.type) {\n                      case 'success': return isDarkMode ? 'bg-green-900/30 text-green-400' : 'bg-green-100 text-green-600';\n                      case 'warning': return isDarkMode ? 'bg-yellow-900/30 text-yellow-400' : 'bg-yellow-100 text-yellow-600';\n                      case 'info': return isDarkMode ? 'bg-blue-900/30 text-blue-400' : 'bg-blue-100 text-blue-600';\n                      case 'error': return isDarkMode ? 'bg-red-900/30 text-red-400' : 'bg-red-100 text-red-600';\n                      default: return isDarkMode ? 'bg-gray-700 text-gray-400' : 'bg-gray-100 text-gray-600';\n                    }\n                  };\n\n                  return (\n                    <motion.div\n                      key={activity.id}\n                      initial={{ opacity: 0, x: -20 }}\n                      animate={{ opacity: 1, x: 0 }}\n                      transition={{ delay: index * 0.1, duration: 0.3 }}\n                      className=\"flex items-start gap-3\"\n                    >\n                      <div className={`flex-shrink-0 w-8 h-8 rounded-full flex items-center justify-center ${getIconBgColor()}`}>\n                        {getIcon()}\n                      </div>\n                      <div className=\"flex-1 min-w-0\">\n                        <p className={`text-sm ${isDarkMode ? 'text-gray-300' : 'text-gray-900'}`}>\n                          {activity.message}\n                        </p>\n                        <p className={`text-xs mt-1 ${isDarkMode ? 'text-gray-500' : 'text-gray-500'}`}>\n                          {activity.timestamp}\n                        </p>\n                      </div>\n                    </motion.div>\n                  );\n                })}\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Quick Stats</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {mockQuickStats.map((stat, index) => (\n                  <motion.div\n                    key={stat.id}\n                    initial={{ opacity: 0, x: -20 }}\n                    animate={{ opacity: 1, x: 0 }}\n                    transition={{ delay: index * 0.1 }}\n                    className={`p-4 rounded-lg border ${\n                      isDarkMode ? 'bg-gray-700/50 border-gray-600' : 'bg-white border-gray-200'\n                    }`}\n                  >\n                    <div className=\"flex items-start justify-between mb-3\">\n                      <div className=\"flex-1\">\n                        <p className={`text-sm font-medium ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                          {stat.label}\n                        </p>\n                        <p className={`text-2xl font-bold mt-1 ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                          {stat.value}\n                        </p>\n                      </div>\n                      <div className={`flex items-center gap-1 px-2 py-1 rounded-full text-xs font-semibold ${\n                        stat.trend === 'up'\n                          ? 'bg-green-100 text-green-700 dark:bg-green-900/30 dark:text-green-400'\n                          : 'bg-red-100 text-red-700 dark:bg-red-900/30 dark:text-red-400'\n                      }`}>\n                        {stat.trend === 'up' ? (\n                          <TrendingUp className=\"h-3 w-3\" />\n                        ) : (\n                          <TrendingDown className=\"h-3 w-3\" />\n                        )}\n                        {Math.abs(stat.change)}%\n                      </div>\n                    </div>\n                    \n                    <div className=\"h-12\">\n                      <ResponsiveContainer width=\"100%\" height=\"100%\">\n                        <LineChart data={stat.sparklineData.map((value, i) => ({ value, index: i }))}>\n                          <Line\n                            type=\"monotone\"\n                            dataKey=\"value\"\n                            stroke={stat.trend === 'up' ? '#10b981' : '#ef4444'}\n                            strokeWidth={2}\n                            dot={false}\n                            animationDuration={1000}\n                          />\n                        </LineChart>\n                      </ResponsiveContainer>\n                    </div>\n                  </motion.div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Alerts</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-3\">\n                {alerts.length === 0 ? (\n                  <div className={`text-center py-8 ${isDarkMode ? 'text-gray-400' : 'text-gray-500'}`}>\n                    <CheckCircle className=\"h-12 w-12 mx-auto mb-2 opacity-50\" />\n                    <p className=\"text-sm\">No active alerts</p>\n                  </div>\n                ) : (\n                  alerts.map((alert, index) => {\n                    const severityConfig = {\n                      info: {\n                        icon: Info,\n                        bgColor: isDarkMode ? 'bg-blue-900/30' : 'bg-blue-50',\n                        borderColor: 'border-blue-500',\n                        iconColor: 'text-blue-500',\n                        textColor: isDarkMode ? 'text-blue-200' : 'text-blue-900'\n                      },\n                      warning: {\n                        icon: AlertTriangle,\n                        bgColor: isDarkMode ? 'bg-yellow-900/30' : 'bg-yellow-50',\n                        borderColor: 'border-yellow-500',\n                        iconColor: 'text-yellow-500',\n                        textColor: isDarkMode ? 'text-yellow-200' : 'text-yellow-900'\n                      },\n                      error: {\n                        icon: AlertCircle,\n                        bgColor: isDarkMode ? 'bg-red-900/30' : 'bg-red-50',\n                        borderColor: 'border-red-500',\n                        iconColor: 'text-red-500',\n                        textColor: isDarkMode ? 'text-red-200' : 'text-red-900'\n                      },\n                      success: {\n                        icon: CheckCircle,\n                        bgColor: isDarkMode ? 'bg-green-900/30' : 'bg-green-50',\n                        borderColor: 'border-green-500',\n                        iconColor: 'text-green-500',\n                        textColor: isDarkMode ? 'text-green-200' : 'text-green-900'\n                      }\n                    };\n\n                    const config = severityConfig[alert.severity];\n                    const Icon = config.icon;\n\n                    return (\n                      <motion.div\n                        key={alert.id}\n                        initial={{ opacity: 0, x: -20 }}\n                        animate={{ opacity: 1, x: 0 }}\n                        exit={{ opacity: 0, x: 20 }}\n                        transition={{ delay: index * 0.1 }}\n                        className={`relative flex items-start gap-3 p-3 rounded-lg border-l-4 ${config.bgColor} ${config.borderColor}`}\n                      >\n                        <Icon className={`h-5 w-5 mt-0.5 flex-shrink-0 ${config.iconColor}`} />\n                        \n                        <div className=\"flex-1 min-w-0\">\n                          <p className={`text-sm font-medium ${config.textColor}`}>\n                            {alert.message}\n                          </p>\n                          <p className={`text-xs mt-1 ${isDarkMode ? 'text-gray-400' : 'text-gray-500'}`}>\n                            {alert.timestamp}\n                          </p>\n                        </div>\n\n                        <button\n                          onClick={() => handleDismissAlert(alert.id)}\n                          className={`flex-shrink-0 p-1 rounded hover:bg-black/10 transition-colors ${isDarkMode ? 'text-gray-400 hover:text-gray-200' : 'text-gray-500 hover:text-gray-700'}`}\n                          aria-label=\"Dismiss alert\"\n                        >\n                          <X className=\"h-4 w-4\" />\n                        </button>\n                      </motion.div>\n                    );\n                  })\n                )}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}",
    "error": null,
    "elapsed_time": 79.34156370162964,
    "success": true
  }
}