{
  "prompt_id": "dashboard",
  "prompt_name": "Analytics Dashboard",
  "mode": "parallel",
  "run_number": 11,
  "timestamp": "2025-10-14T09:43:58.447576",
  "response_time": 99.37476825714111,
  "total_tokens": null,
  "response_content": "import { useState, useCallback } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Moon, Sun, RefreshCw } from 'lucide-react';\nimport { ShoppingCart, UserPlus, DollarSign, Package, CheckCircle, AlertCircle } from 'lucide-react';\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, Cell } from 'recharts';\nimport { ArrowUpDown, ChevronLeft, ChevronRight } from 'lucide-react';\nimport { Badge } from '@/components/ui/badge';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\n\n\nimport { PieChart, Pie, Cell, ResponsiveContainer, Legend, Tooltip } from 'recharts';\n\nimport { motion } from 'framer-motion';\nimport { TrendingUp } from 'lucide-react'\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';;\nimport { TrendingUp, TrendingDown, DollarSign, Users, ShoppingCart, Target } from 'lucide-react';\nimport { Progress } from '@/components/ui/progress';\n\n\ninterface MetricData {\n  id: string;\n  label: string;\n  value: number;\n  change: number;\n  trend: 'up' | 'down';\n}\n\ninterface ChartDataPoint {\n  date: string;\n  revenue: number;\n  users: number;\n  orders: number;\n}\n\ninterface TableRow {\n  id: string;\n  product: string;\n  sales: number;\n  revenue: number;\n  status: 'active' | 'pending' | 'inactive';\n}\n\nconst mockMetrics: MetricData[] = [\n  { id: '1', label: 'Total Revenue', value: 45231, change: 12.5, trend: 'up' },\n  { id: '2', label: 'Active Users', value: 2350, change: 8.2, trend: 'up' },\n  { id: '3', label: 'Total Orders', value: 1543, change: -3.1, trend: 'down' },\n  { id: '4', label: 'Conversion Rate', value: 3.24, change: 5.7, trend: 'up' }\n];\n\nconst mockChartData: ChartDataPoint[] = [\n  { date: '2024-01-01', revenue: 12000, users: 450, orders: 230 },\n  { date: '2024-01-02', revenue: 15000, users: 520, orders: 280 },\n  { date: '2024-01-03', revenue: 13500, users: 490, orders: 250 },\n  { date: '2024-01-04', revenue: 18000, users: 610, orders: 320 },\n  { date: '2024-01-05', revenue: 16500, users: 580, orders: 295 },\n  { date: '2024-01-06', revenue: 20000, users: 680, orders: 350 },\n  { date: '2024-01-07', revenue: 22000, users: 720, orders: 380 }\n];\n\nconst mockTableData: TableRow[] = [\n  { id: '1', product: 'Premium Plan', sales: 234, revenue: 23400, status: 'active' },\n  { id: '2', product: 'Basic Plan', sales: 567, revenue: 11340, status: 'active' },\n  { id: '3', product: 'Enterprise Plan', sales: 89, revenue: 17800, status: 'active' },\n  { id: '4', product: 'Starter Plan', sales: 432, revenue: 4320, status: 'pending' },\n  { id: '5', product: 'Pro Plan', sales: 156, revenue: 15600, status: 'active' }\n];\n\ninterface ActivityItem {\n  id: string;\n  type: 'sale' | 'user' | 'revenue' | 'order' | 'success' | 'alert';\n  message: string;\n  timestamp: string;\n  icon: 'ShoppingCart' | 'UserPlus' | 'DollarSign' | 'Package' | 'CheckCircle' | 'AlertCircle';\n}\n\nconst mockActivityData: ActivityItem[] = [\n  { id: '1', type: 'sale', message: 'New sale: Premium Plan', timestamp: '2 minutes ago', icon: 'ShoppingCart' },\n  { id: '2', type: 'user', message: 'New user registered', timestamp: '5 minutes ago', icon: 'UserPlus' },\n  { id: '3', type: 'revenue', message: 'Revenue milestone reached', timestamp: '12 minutes ago', icon: 'DollarSign' },\n  { id: '4', type: 'order', message: 'Order #1234 shipped', timestamp: '18 minutes ago', icon: 'Package' },\n  { id: '5', type: 'success', message: 'Payment processed successfully', timestamp: '25 minutes ago', icon: 'CheckCircle' },\n  { id: '6', type: 'alert', message: 'Low stock alert: Basic Plan', timestamp: '32 minutes ago', icon: 'AlertCircle' },\n  { id: '7', type: 'sale', message: 'New sale: Enterprise Plan', timestamp: '45 minutes ago', icon: 'ShoppingCart' },\n  { id: '8', type: 'user', message: '3 new users registered', timestamp: '1 hour ago', icon: 'UserPlus' },\n  { id: '9', type: 'revenue', message: 'Daily revenue target achieved', timestamp: '2 hours ago', icon: 'DollarSign' },\n  { id: '10', type: 'order', message: 'Order #1233 delivered', timestamp: '3 hours ago', icon: 'CheckCircle' }\n];\ninterface GoalData {\n  id: string;\n  label: string;\n  current: number;\n  target: number;\n  color: string;\n}\n\nconst mockGoals: GoalData[] = [\n  { id: '1', label: 'Monthly Revenue', current: 45231, target: 50000, color: 'bg-blue-500' },\n  { id: '2', label: 'New Users', current: 2350, target: 3000, color: 'bg-green-500' },\n  { id: '3', label: 'Orders Target', current: 1543, target: 2000, color: 'bg-purple-500' },\n  { id: '4', label: 'Conversion Goal', current: 324, target: 400, color: 'bg-orange-500' }\n];\nconst mockQuickStats = [\n  { name: 'Mon', value: 4200, color: '#3b82f6' },\n  { name: 'Tue', value: 5100, color: '#8b5cf6' },\n  { name: 'Wed', value: 3800, color: '#ec4899' },\n  { name: 'Thu', value: 6200, color: '#10b981' },\n  { name: 'Fri', value: 5500, color: '#f59e0b' },\n  { name: 'Sat', value: 4800, color: '#06b6d4' },\n  { name: 'Sun', value: 3900, color: '#6366f1' }\n];\n\nconst RevenueChart = ({ data, isDarkMode }: { data: ChartDataPoint[], isDarkMode: boolean }) => {\n  const [hoveredPoint, setHoveredPoint] = useState<number | null>(null);\n  \n  const maxRevenue = Math.max(...data.map(d => d.revenue));\n  const minRevenue = Math.min(...data.map(d => d.revenue));\n  const revenueRange = maxRevenue - minRevenue;\n  \n  const chartHeight = 200;\n  const chartWidth = 100; // percentage\n  const padding = 20;\n  \n  const getX = (index: number) => {\n    return (index / (data.length - 1)) * 100;\n  };\n  \n  const getY = (value: number) => {\n    const normalized = (value - minRevenue) / revenueRange;\n    return chartHeight - (normalized * (chartHeight - padding * 2)) - padding;\n  };\n  \n  const pathData = data.map((point, index) => {\n    const x = getX(index);\n    const y = getY(point.revenue);\n    return `${index === 0 ? 'M' : 'L'} ${x} ${y}`;\n  }).join(' ');\n  \n  const areaPathData = `${pathData} L ${getX(data.length - 1)} ${chartHeight} L 0 ${chartHeight} Z`;\n  \n  return (\n    <div className=\"relative w-full h-64\">\n      <svg\n        viewBox={`0 0 100 ${chartHeight}`}\n        preserveAspectRatio=\"none\"\n        className=\"w-full h-full\"\n      >\n        <defs>\n          <linearGradient id=\"revenueGradient\" x1=\"0%\" y1=\"0%\" x2=\"0%\" y2=\"100%\">\n            <stop offset=\"0%\" stopColor={isDarkMode ? '#3b82f6' : '#2563eb'} stopOpacity=\"0.3\" />\n            <stop offset=\"100%\" stopColor={isDarkMode ? '#3b82f6' : '#2563eb'} stopOpacity=\"0\" />\n          </linearGradient>\n        </defs>\n        \n        <path\n          d={areaPathData}\n          fill=\"url(#revenueGradient)\"\n          className=\"transition-all duration-300\"\n        />\n        \n        <path\n          d={pathData}\n          fill=\"none\"\n          stroke={isDarkMode ? '#3b82f6' : '#2563eb'}\n          strokeWidth=\"0.5\"\n          vectorEffect=\"non-scaling-stroke\"\n          className=\"transition-colors duration-300\"\n        />\n        \n        {data.map((point, index) => (\n          <g key={index}>\n            <circle\n              cx={getX(index)}\n              cy={getY(point.revenue)}\n              r={hoveredPoint === index ? '1.5' : '1'}\n              fill={isDarkMode ? '#3b82f6' : '#2563eb'}\n              vectorEffect=\"non-scaling-stroke\"\n              className=\"transition-all duration-200 cursor-pointer\"\n              onMouseEnter={() => setHoveredPoint(index)}\n              onMouseLeave={() => setHoveredPoint(null)}\n            />\n          </g>\n        ))}\n      </svg>\n      \n      <div className=\"absolute inset-0 flex items-end justify-between px-2 pb-2 pointer-events-none\">\n        {data.map((point, index) => (\n          <div key={index} className=\"flex flex-col items-center text-xs\">\n            <span className={`${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n              {new Date(point.date).getDate()}/{new Date(point.date).getMonth() + 1}\n            </span>\n          </div>\n        ))}\n      </div>\n      \n      {hoveredPoint !== null && (\n        <div\n          className={`absolute pointer-events-none transition-all duration-200 ${\n            isDarkMode ? 'bg-gray-700 text-white' : 'bg-white text-gray-900'\n          } px-3 py-2 rounded-lg shadow-lg border ${\n            isDarkMode ? 'border-gray-600' : 'border-gray-200'\n          }`}\n          style={{\n            left: `${getX(hoveredPoint)}%`,\n            top: `${(getY(data[hoveredPoint].revenue) / chartHeight) * 100}%`,\n            transform: 'translate(-50%, -120%)'\n          }}\n        >\n          <div className=\"text-xs font-semibold mb-1\">\n            {new Date(data[hoveredPoint].date).toLocaleDateString('en-US', { \n              month: 'short', \n              day: 'numeric' \n            })}\n          </div>\n          <div className=\"flex items-center gap-1\">\n            <TrendingUp className=\"h-3 w-3 text-blue-500\" />\n            <span className=\"text-sm font-bold\">\n              ${data[hoveredPoint].revenue.toLocaleString()}\n            </span>\n          </div>\n          <div className={`text-xs ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n            {data[hoveredPoint].orders} orders\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nconst UserChart = ({ data, isDarkMode }: { data: ChartDataPoint[], isDarkMode: boolean }) => {\n  const maxUsers = Math.max(...data.map(d => d.users));\n  const minUsers = Math.min(...data.map(d => d.users));\n  const range = maxUsers - minUsers;\n  const padding = range * 0.1;\n  const chartHeight = 200;\n  const chartWidth = 100;\n\n  const points = data.map((point, index) => {\n    const x = (index / (data.length - 1)) * chartWidth;\n    const y = chartHeight - ((point.users - minUsers + padding) / (range + 2 * padding)) * chartHeight;\n    return { x, y, ...point };\n  });\n\n  const pathD = points.reduce((path, point, index) => {\n    if (index === 0) return `M ${point.x} ${point.y}`;\n    return `${path} L ${point.x} ${point.y}`;\n  }, '');\n\n  const areaD = `${pathD} L ${chartWidth} ${chartHeight} L 0 ${chartHeight} Z`;\n\n  const [hoveredIndex, setHoveredIndex] = useState<number | null>(null);\n\n  return (\n    <div className=\"relative w-full h-[200px]\">\n      <svg\n        viewBox={`0 0 ${chartWidth} ${chartHeight}`}\n        className=\"w-full h-full\"\n        preserveAspectRatio=\"none\"\n      >\n        <defs>\n          <linearGradient id=\"userGradient\" x1=\"0%\" y1=\"0%\" x2=\"0%\" y2=\"100%\">\n            <stop offset=\"0%\" stopColor=\"#3b82f6\" stopOpacity=\"0.6\" />\n            <stop offset=\"100%\" stopColor=\"#3b82f6\" stopOpacity=\"0.05\" />\n          </linearGradient>\n        </defs>\n\n        <motion.path\n          d={areaD}\n          fill=\"url(#userGradient)\"\n          initial={{ opacity: 0 }}\n          animate={{ opacity: 1 }}\n          transition={{ duration: 0.8, ease: \"easeOut\" }}\n        />\n\n        <motion.path\n          d={pathD}\n          fill=\"none\"\n          stroke=\"#3b82f6\"\n          strokeWidth=\"0.5\"\n          initial={{ pathLength: 0 }}\n          animate={{ pathLength: 1 }}\n          transition={{ duration: 1.5, ease: \"easeInOut\" }}\n        />\n\n        {points.map((point, index) => (\n          <motion.circle\n            key={index}\n            cx={point.x}\n            cy={point.y}\n            r={hoveredIndex === index ? \"1.2\" : \"0.8\"}\n            fill=\"#3b82f6\"\n            initial={{ scale: 0 }}\n            animate={{ scale: 1 }}\n            transition={{ delay: index * 0.1, duration: 0.3 }}\n            onMouseEnter={() => setHoveredIndex(index)}\n            onMouseLeave={() => setHoveredIndex(null)}\n            className=\"cursor-pointer\"\n          />\n        ))}\n      </svg>\n\n      {hoveredIndex !== null && (\n        <motion.div\n          initial={{ opacity: 0, y: 10 }}\n          animate={{ opacity: 1, y: 0 }}\n          className={`absolute top-2 left-2 px-3 py-2 rounded-lg shadow-lg ${\n            isDarkMode ? 'bg-gray-700 text-white' : 'bg-white text-gray-900'\n          }`}\n        >\n          <div className=\"text-xs font-semibold\">{points[hoveredIndex].date}</div>\n          <div className=\"text-sm font-bold text-blue-500\">\n            {points[hoveredIndex].users.toLocaleString()} users\n          </div>\n        </motion.div>\n      )}\n\n      <div className={`flex justify-between mt-2 text-xs ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n        {data.map((point, index) => (\n          index % Math.ceil(data.length / 4) === 0 && (\n            <span key={index}>{new Date(point.date).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}</span>\n          )\n        ))}\n      </div>\n    </div>\n  );\n};\n\n<style jsx>{`\n  @keyframes fadeInUp {\n    from {\n      opacity: 0;\n      transform: translateY(20px);\n    }\n    to {\n      opacity: 1;\n      transform: translateY(0);\n    }\n  }\n`}</style>\nexport default function AnalyticsDashboard() {\n  const [sortColumn, setSortColumn] = useState<keyof TableRow | null>(null);\n  const [sortDirection, setSortDirection] = useState<'asc' | 'desc'>('asc');\n  const [currentPage, setCurrentPage] = useState(1);\n  const itemsPerPage = 5;\n  const [isDarkMode, setIsDarkMode] = useState(false);\n  const [metrics, setMetrics] = useState<MetricData[]>(mockMetrics);\n  const [chartData, setChartData] = useState<ChartDataPoint[]>(mockChartData);\n  const [tableData, setTableData] = useState<TableRow[]>(mockTableData);\n  const [isRefreshing, setIsRefreshing] = useState(false);\n  const [activityData] = useState<ActivityItem[]>(mockActivityData);\n\n  const toggleDarkMode = useCallback(() => {\n    setIsDarkMode(prev => !prev);\n  }, []);\n  const handleSort = useCallback((column: keyof TableRow) => {\n    if (sortColumn === column) {\n      setSortDirection(prev => prev === 'asc' ? 'desc' : 'asc');\n    } else {\n      setSortColumn(column);\n      setSortDirection('asc');\n    }\n    setCurrentPage(1);\n  }, [sortColumn]);\n\n  const sortedTableData = useCallback(() => {\n    if (!sortColumn) return tableData;\n\n    return [...tableData].sort((a, b) => {\n      const aValue = a[sortColumn];\n      const bValue = b[sortColumn];\n\n      if (typeof aValue === 'number' && typeof bValue === 'number') {\n        return sortDirection === 'asc' ? aValue - bValue : bValue - aValue;\n      }\n\n      if (typeof aValue === 'string' && typeof bValue === 'string') {\n        return sortDirection === 'asc' \n          ? aValue.localeCompare(bValue)\n          : bValue.localeCompare(aValue);\n      }\n\n      return 0;\n    });\n  }, [tableData, sortColumn, sortDirection]);\n\n  const paginatedData = useCallback(() => {\n    const sorted = sortedTableData();\n    const startIndex = (currentPage - 1) * itemsPerPage;\n    const endIndex = startIndex + itemsPerPage;\n    return sorted.slice(startIndex, endIndex);\n  }, [sortedTableData, currentPage]);\n\n  const totalPages = Math.ceil(tableData.length / itemsPerPage);\n\n  const getStatusBadgeVariant = (status: TableRow['status']) => {\n    switch (status) {\n      case 'active':\n        return 'default';\n      case 'pending':\n        return 'secondary';\n      case 'inactive':\n        return 'outline';\n      default:\n        return 'default';\n    }\n  };\n  const handleRefresh = useCallback(() => {\n    setIsRefreshing(true);\n    \n    // Simulate async data refresh\n    setTimeout(() => {\n      // Generate updated metrics with random variations\n      const updatedMetrics = mockMetrics.map(metric => ({\n        ...metric,\n        value: metric.value * (0.9 + Math.random() * 0.2),\n        change: -10 + Math.random() * 20\n      }));\n      \n      setMetrics(updatedMetrics);\n      setIsRefreshing(false);\n    }, 1500);\n  }, []);\n\n  // Calculate pie chart data from table data\n  const pieChartData = tableData.map(item => ({\n    name: item.product,\n    value: item.sales,\n    revenue: item.revenue\n  }));\n\n  const COLORS = ['#3b82f6', '#8b5cf6', '#ec4899', '#f59e0b', '#10b981'];\n\n  const CustomTooltip = ({ active, payload }: any) => {\n    if (active && payload && payload.length) {\n      const data = payload[0];\n      const percentage = ((data.value / tableData.reduce((sum, item) => sum + item.sales, 0)) * 100).toFixed(1);\n      return (\n        <div className={`p-3 rounded-lg shadow-lg border ${isDarkMode ? 'bg-gray-800 border-gray-700 text-white' : 'bg-white border-gray-200'}`}>\n          <p className=\"font-semibold\">{data.name}</p>\n          <p className={isDarkMode ? 'text-gray-300' : 'text-gray-600'}>\n            Sales: {data.value}\n          </p>\n          <p className={isDarkMode ? 'text-gray-300' : 'text-gray-600'}>\n            Revenue: ${data.payload.revenue.toLocaleString()}\n          </p>\n          <p className=\"font-semibold text-blue-500\">{percentage}%</p>\n        </div>\n      );\n    }\n    return null;\n  };\n\n  const handleRefresh = useCallback(() => {\n    setIsRefreshing(true);\n    \n    // Simulate async data refresh\n    setTimeout(() => {\n      // Generate updated metrics with random variations\n      const updatedMetrics = mockMetrics.map(metric => ({\n        ...metric,\n        value: metric.value + Math.floor(Math.random() * 200 - 100),\n        change: parseFloat((Math.random() * 20 - 5).toFixed(1)),\n        trend: Math.random() > 0.5 ? 'up' as const : 'down' as const\n      }));\n\n      // Generate updated chart data with random variations\n      const updatedChartData = mockChartData.map(point => ({\n        ...point,\n        revenue: point.revenue + Math.floor(Math.random() * 4000 - 2000),\n        users: point.users + Math.floor(Math.random() * 100 - 50),\n        orders: point.orders + Math.floor(Math.random() * 50 - 25)\n      }));\n\n      // Generate updated table data with random variations\n      const updatedTableData = mockTableData.map(row => ({\n        ...row,\n        sales: row.sales + Math.floor(Math.random() * 40 - 20),\n        revenue: row.revenue + Math.floor(Math.random() * 2000 - 1000)\n      }));\n\n      setMetrics(updatedMetrics);\n      setChartData(updatedChartData);\n      setTableData(updatedTableData);\n      setIsRefreshing(false);\n    }, 1500);\n  }, []);\n\n  return (\n    <div className={`min-h-screen transition-colors duration-300 ${isDarkMode ? 'dark bg-gray-900' : 'bg-gray-50'}`}>\n      <div className=\"container mx-auto p-4 md:p-6 lg:p-8\">\n        <div className=\"flex flex-col md:flex-row justify-between items-start md:items-center gap-4 mb-8\">\n          <div>\n            <h1 className={`text-3xl md:text-4xl font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n              Analytics Dashboard\n            </h1>\n            <p className={`mt-2 ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n              Real-time insights and performance metrics\n            </p>\n          </div>\n\n          <div className=\"flex gap-2\">\n            <Button\n              variant=\"outline\"\n              size=\"icon\"\n              onClick={toggleDarkMode}\n              className={isDarkMode ? 'border-gray-700' : ''}\n            >\n              {isDarkMode ? <Sun className=\"h-5 w-5\" /> : <Moon className=\"h-5 w-5\" />}\n            </Button>\n            <Button\n              variant=\"outline\"\n              onClick={handleRefresh}\n              disabled={isRefreshing}\n              className={isDarkMode ? 'border-gray-700' : ''}\n            >\n              <RefreshCw className={`h-4 w-4 mr-2 ${isRefreshing ? 'animate-spin' : ''}`} />\n              Refresh\n            </Button>\n          </div>\n        </div>\n\n        <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 md:gap-6 mb-8\">\n          {metrics.map((metric, index) => {\n            const Icon = metric.label.includes('Revenue') ? DollarSign :\n                        metric.label.includes('Users') ? Users :\n                        metric.label.includes('Orders') ? ShoppingCart :\n                        Target;\n            \n            const TrendIcon = metric.trend === 'up' ? TrendingUp : TrendingDown;\n            const trendColor = metric.trend === 'up' ? 'text-green-500' : 'text-red-500';\n            const trendBgColor = metric.trend === 'up' ? 'bg-green-50 dark:bg-green-900/20' : 'bg-red-50 dark:bg-red-900/20';\n\n            return (\n              <Card\n                key={metric.id}\n                className={`transition-all duration-300 hover:shadow-lg hover:-translate-y-1 ${\n                  isDarkMode ? 'bg-gray-800 border-gray-700' : 'bg-white'\n                }`}\n                style={{\n                  animation: `fadeInUp 0.5s ease-out ${index * 0.1}s both`\n                }}\n              >\n                <CardHeader className=\"flex flex-row items-center justify-between pb-2\">\n                  <CardTitle className={`text-sm font-medium ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                    {metric.label}\n                  </CardTitle>\n                  <div className={`p-2 rounded-lg ${isDarkMode ? 'bg-gray-700' : 'bg-gray-100'}`}>\n                    <Icon className={`h-4 w-4 ${isDarkMode ? 'text-gray-300' : 'text-gray-600'}`} />\n                  </div>\n                </CardHeader>\n                <CardContent>\n                  <div className={`text-2xl md:text-3xl font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                    {metric.label.includes('Rate') \n                      ? `${metric.value}%` \n                      : metric.label.includes('Revenue') \n                        ? `$${metric.value.toLocaleString()}` \n                        : metric.value.toLocaleString()}\n                  </div>\n                  <div className=\"flex items-center gap-2 mt-2\">\n                    <div className={`flex items-center gap-1 px-2 py-1 rounded-full ${trendBgColor}`}>\n                      <TrendIcon className={`h-3 w-3 ${trendColor}`} />\n                      <span className={`text-xs font-medium ${trendColor}`}>\n                        {Math.abs(metric.change)}%\n                      </span>\n                    </div>\n                    <span className={`text-xs ${isDarkMode ? 'text-gray-400' : 'text-gray-500'}`}>\n                      vs last period\n                    </span>\n                  </div>\n                </CardContent>\n              </Card>\n            );\n          })}\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-4 md:gap-6 mb-8\">\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Revenue Overview</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Daily revenue trends\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <RevenueChart data={chartData} isDarkMode={isDarkMode} />\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>User Growth</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Active users over time\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <UserChart data={chartData} isDarkMode={isDarkMode} />\n            </CardContent>\n          </Card>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-4 md:gap-6 mb-8\">\n          <Card className={`lg:col-span-2 ${isDarkMode ? 'bg-gray-800 border-gray-700' : ''}`}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Performance Metrics</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Combined view of key metrics\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"h-[300px] w-full\">\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <LineChart\n                    data={chartData}\n                    margin={{ top: 5, right: 30, left: 20, bottom: 5 }}\n                  >\n                    <CartesianGrid \n                      strokeDasharray=\"3 3\" \n                      stroke={isDarkMode ? '#374151' : '#e5e7eb'}\n                    />\n                    <XAxis \n                      dataKey=\"date\" \n                      stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                      tick={{ fill: isDarkMode ? '#9ca3af' : '#6b7280' }}\n                      tickFormatter={(value) => new Date(value).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n                    />\n                    <YAxis \n                      stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                      tick={{ fill: isDarkMode ? '#9ca3af' : '#6b7280' }}\n                    />\n                    <Tooltip \n                      contentStyle={{\n                        backgroundColor: isDarkMode ? '#1f2937' : '#ffffff',\n                        border: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\n                        borderRadius: '8px',\n                        color: isDarkMode ? '#f3f4f6' : '#111827'\n                      }}\n                      labelFormatter={(value) => new Date(value).toLocaleDateString('en-US', { month: 'long', day: 'numeric', year: 'numeric' })}\n                    />\n                    <Legend \n                      wrapperStyle={{\n                        color: isDarkMode ? '#f3f4f6' : '#111827'\n                      }}\n                    />\n                    <Line \n                      type=\"monotone\" \n                      dataKey=\"revenue\" \n                      stroke=\"#3b82f6\" \n                      strokeWidth={2}\n                      dot={{ fill: '#3b82f6', r: 4 }}\n                      activeDot={{ r: 6 }}\n                      name=\"Revenue ($)\"\n                    />\n                    <Line \n                      type=\"monotone\" \n                      dataKey=\"users\" \n                      stroke=\"#10b981\" \n                      strokeWidth={2}\n                      dot={{ fill: '#10b981', r: 4 }}\n                      activeDot={{ r: 6 }}\n                      name=\"Users\"\n                    />\n                    <Line \n                      type=\"monotone\" \n                      dataKey=\"orders\" \n                      stroke=\"#f59e0b\" \n                      strokeWidth={2}\n                      dot={{ fill: '#f59e0b', r: 4 }}\n                      activeDot={{ r: 6 }}\n                      name=\"Orders\"\n                    />\n                  </LineChart>\n                </ResponsiveContainer>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Distribution</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Sales by category\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"h-[300px]\">\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <PieChart>\n                    <Pie\n                      data={pieChartData}\n                      cx=\"50%\"\n                      cy=\"50%\"\n                      labelLine={false}\n                      label={({ name, percent }) => `${(percent * 100).toFixed(0)}%`}\n                      outerRadius={80}\n                      fill=\"#8884d8\"\n                      dataKey=\"value\"\n                      animationBegin={0}\n                      animationDuration={800}\n                    >\n                      {pieChartData.map((entry, index) => (\n                        <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\n                      ))}\n                    </Pie>\n                    <Tooltip content={<CustomTooltip />} />\n                    <Legend \n                      verticalAlign=\"bottom\" \n                      height={36}\n                      formatter={(value) => (\n                        <span className={isDarkMode ? 'text-gray-300' : 'text-gray-700'}>\n                          {value}\n                        </span>\n                      )}\n                    />\n                  </PieChart>\n                </ResponsiveContainer>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n          <CardHeader>\n            <CardTitle className={isDarkMode ? 'text-white' : ''}>Top Products</CardTitle>\n            <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n              Best performing products by revenue\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              <div className=\"rounded-md border\">\n                <Table>\n                  <TableHeader>\n                    <TableRow className={isDarkMode ? 'border-gray-700' : ''}>\n                      <TableHead className={isDarkMode ? 'text-gray-300' : ''}>\n                        <Button\n                          variant=\"ghost\"\n                          onClick={() => handleSort('product')}\n                          className=\"h-8 px-2 lg:px-3\"\n                        >\n                          Product\n                          <ArrowUpDown className=\"ml-2 h-4 w-4\" />\n                        </Button>\n                      </TableHead>\n                      <TableHead className={isDarkMode ? 'text-gray-300' : ''}>\n                        <Button\n                          variant=\"ghost\"\n                          onClick={() => handleSort('sales')}\n                          className=\"h-8 px-2 lg:px-3\"\n                        >\n                          Sales\n                          <ArrowUpDown className=\"ml-2 h-4 w-4\" />\n                        </Button>\n                      </TableHead>\n                      <TableHead className={isDarkMode ? 'text-gray-300' : ''}>\n                        <Button\n                          variant=\"ghost\"\n                          onClick={() => handleSort('revenue')}\n                          className=\"h-8 px-2 lg:px-3\"\n                        >\n                          Revenue\n                          <ArrowUpDown className=\"ml-2 h-4 w-4\" />\n                        </Button>\n                      </TableHead>\n                      <TableHead className={isDarkMode ? 'text-gray-300' : ''}>\n                        <Button\n                          variant=\"ghost\"\n                          onClick={() => handleSort('status')}\n                          className=\"h-8 px-2 lg:px-3\"\n                        >\n                          Status\n                          <ArrowUpDown className=\"ml-2 h-4 w-4\" />\n                        </Button>\n                      </TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {paginatedData().map((row) => (\n                      <TableRow \n                        key={row.id}\n                        className={isDarkMode ? 'border-gray-700 hover:bg-gray-700/50' : ''}\n                      >\n                        <TableCell className={`font-medium ${isDarkMode ? 'text-gray-200' : ''}`}>\n                          {row.product}\n                        </TableCell>\n                        <TableCell className={isDarkMode ? 'text-gray-300' : ''}>\n                          {row.sales.toLocaleString()}\n                        </TableCell>\n                        <TableCell className={isDarkMode ? 'text-gray-300' : ''}>\n                          ${row.revenue.toLocaleString()}\n                        </TableCell>\n                        <TableCell>\n                          <Badge \n                            variant={getStatusBadgeVariant(row.status)}\n                            className=\"capitalize\"\n                          >\n                            {row.status}\n                          </Badge>\n                        </TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              </div>\n\n              <div className=\"flex items-center justify-between\">\n                <div className={`text-sm ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                  Showing {((currentPage - 1) * itemsPerPage) + 1} to {Math.min(currentPage * itemsPerPage, tableData.length)} of {tableData.length} products\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => setCurrentPage(prev => Math.max(1, prev - 1))}\n                    disabled={currentPage === 1}\n                    className={isDarkMode ? 'border-gray-700' : ''}\n                  >\n                    <ChevronLeft className=\"h-4 w-4\" />\n                    Previous\n                  </Button>\n                  <div className={`text-sm ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                    Page {currentPage} of {totalPages}\n                  </div>\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => setCurrentPage(prev => Math.min(totalPages, prev + 1))}\n                    disabled={currentPage === totalPages}\n                    className={isDarkMode ? 'border-gray-700' : ''}\n                  >\n                    Next\n                    <ChevronRight className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 md:gap-6 mt-8\">\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Recent Activity</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"max-h-[400px] overflow-y-auto space-y-4 pr-2\">\n                {activityData.map((activity) => {\n                  const IconComponent = \n                    activity.icon === 'ShoppingCart' ? ShoppingCart :\n                    activity.icon === 'UserPlus' ? UserPlus :\n                    activity.icon === 'DollarSign' ? DollarSign :\n                    activity.icon === 'Package' ? Package :\n                    activity.icon === 'CheckCircle' ? CheckCircle :\n                    AlertCircle;\n\n                  const iconColor = \n                    activity.type === 'sale' ? 'text-blue-500' :\n                    activity.type === 'user' ? 'text-green-500' :\n                    activity.type === 'revenue' ? 'text-yellow-500' :\n                    activity.type === 'order' ? 'text-purple-500' :\n                    activity.type === 'success' ? 'text-emerald-500' :\n                    'text-red-500';\n\n                  const bgColor = \n                    activity.type === 'sale' ? (isDarkMode ? 'bg-blue-500/10' : 'bg-blue-50') :\n                    activity.type === 'user' ? (isDarkMode ? 'bg-green-500/10' : 'bg-green-50') :\n                    activity.type === 'revenue' ? (isDarkMode ? 'bg-yellow-500/10' : 'bg-yellow-50') :\n                    activity.type === 'order' ? (isDarkMode ? 'bg-purple-500/10' : 'bg-purple-50') :\n                    activity.type === 'success' ? (isDarkMode ? 'bg-emerald-500/10' : 'bg-emerald-50') :\n                    (isDarkMode ? 'bg-red-500/10' : 'bg-red-50');\n\n                  return (\n                    <div \n                      key={activity.id} \n                      className=\"flex items-start gap-3 p-3 rounded-lg transition-colors hover:bg-gray-100 dark:hover:bg-gray-700/50\"\n                    >\n                      <div className={`p-2 rounded-full ${bgColor} flex-shrink-0`}>\n                        <IconComponent className={`h-4 w-4 ${iconColor}`} />\n                      </div>\n                      <div className=\"flex-1 min-w-0\">\n                        <p className={`text-sm font-medium ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                          {activity.message}\n                        </p>\n                        <p className={`text-xs mt-1 ${isDarkMode ? 'text-gray-400' : 'text-gray-500'}`}>\n                          {activity.timestamp}\n                        </p>\n                      </div>\n                    </div>\n                  );\n                })}\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Quick Stats</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                <div className={`text-sm ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                  Daily sales comparison (last 7 days)\n                </div>\n                <ResponsiveContainer width=\"100%\" height={250}>\n                  <BarChart data={mockQuickStats}>\n                    <CartesianGrid \n                      strokeDasharray=\"3 3\" \n                      stroke={isDarkMode ? '#374151' : '#e5e7eb'}\n                    />\n                    <XAxis \n                      dataKey=\"name\" \n                      stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                      style={{ fontSize: '12px' }}\n                    />\n                    <YAxis \n                      stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                      style={{ fontSize: '12px' }}\n                    />\n                    <Tooltip \n                      contentStyle={{\n                        backgroundColor: isDarkMode ? '#1f2937' : '#ffffff',\n                        border: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\n                        borderRadius: '6px',\n                        color: isDarkMode ? '#ffffff' : '#000000'\n                      }}\n                      formatter={(value: number) => [`$${value.toLocaleString()}`, 'Sales']}\n                    />\n                    <Bar dataKey=\"value\" radius={[8, 8, 0, 0]}>\n                      {mockQuickStats.map((entry, index) => (\n                        <Cell key={`cell-${index}`} fill={entry.color} />\n                      ))}\n                    </Bar>\n                  </BarChart>\n                </ResponsiveContainer>\n                <div className=\"grid grid-cols-2 gap-2 pt-2\">\n                  <div className={`text-center p-2 rounded ${isDarkMode ? 'bg-gray-700' : 'bg-gray-100'}`}>\n                    <div className={`text-xs ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                      Avg Daily\n                    </div>\n                    <div className={`text-lg font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                      ${(mockQuickStats.reduce((sum, stat) => sum + stat.value, 0) / mockQuickStats.length).toLocaleString(undefined, { maximumFractionDigits: 0 })}\n                    </div>\n                  </div>\n                  <div className={`text-center p-2 rounded ${isDarkMode ? 'bg-gray-700' : 'bg-gray-100'}`}>\n                    <div className={`text-xs ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                      Peak Day\n                    </div>\n                    <div className={`text-lg font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                      {mockQuickStats.reduce((max, stat) => stat.value > max.value ? stat : max).name}\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Goals Progress</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-6\">\n                {mockGoals.map((goal) => {\n                  const percentage = Math.min((goal.current / goal.target) * 100, 100);\n                  \n                  return (\n                    <div key={goal.id} className=\"space-y-2\">\n                      <div className=\"flex justify-between items-center\">\n                        <span className={`text-sm font-medium ${isDarkMode ? 'text-gray-200' : 'text-gray-700'}`}>\n                          {goal.label}\n                        </span>\n                        <span className={`text-sm ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                          {percentage.toFixed(0)}%\n                        </span>\n                      </div>\n                      <Progress \n                        value={percentage} \n                        className={`h-2 ${isDarkMode ? 'bg-gray-700' : 'bg-gray-200'}`}\n                      />\n                      <div className=\"flex justify-between items-center\">\n                        <span className={`text-xs ${isDarkMode ? 'text-gray-500' : 'text-gray-500'}`}>\n                          {goal.current.toLocaleString()} / {goal.target.toLocaleString()}\n                        </span>\n                        <span className={`text-xs font-medium ${\n                          percentage >= 100 \n                            ? 'text-green-500' \n                            : percentage >= 75 \n                            ? 'text-blue-500' \n                            : percentage >= 50 \n                            ? 'text-yellow-500' \n                            : 'text-red-500'\n                        }`}>\n                          {percentage >= 100 \n                            ? '\u2713 Complete' \n                            : `${(goal.target - goal.current).toLocaleString()} to go`\n                          }\n                        </span>\n                      </div>\n                    </div>\n                  );\n                })}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}",
  "error": null,
  "overall_score": 57,
  "code_quality_score": 14,
  "architecture_score": 16,
  "performance_score": 12,
  "accessibility_score": 15,
  "metadata": {
    "document_id": "eval_room_7e6568f6b750",
    "prompt_category": "intermediate",
    "prompt_complexity": 6.0
  },
  "raw_response": {
    "document_id": "eval_room_7e6568f6b750",
    "mode": "parallel",
    "prompt": "Generate an analytics dashboard page with charts, data tables, real-time updates, dark mode, and responsive design",
    "content": "import { useState, useCallback } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Moon, Sun, RefreshCw } from 'lucide-react';\nimport { ShoppingCart, UserPlus, DollarSign, Package, CheckCircle, AlertCircle } from 'lucide-react';\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, Cell } from 'recharts';\nimport { ArrowUpDown, ChevronLeft, ChevronRight } from 'lucide-react';\nimport { Badge } from '@/components/ui/badge';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\n\n\nimport { PieChart, Pie, Cell, ResponsiveContainer, Legend, Tooltip } from 'recharts';\n\nimport { motion } from 'framer-motion';\nimport { TrendingUp } from 'lucide-react'\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';;\nimport { TrendingUp, TrendingDown, DollarSign, Users, ShoppingCart, Target } from 'lucide-react';\nimport { Progress } from '@/components/ui/progress';\n\n\ninterface MetricData {\n  id: string;\n  label: string;\n  value: number;\n  change: number;\n  trend: 'up' | 'down';\n}\n\ninterface ChartDataPoint {\n  date: string;\n  revenue: number;\n  users: number;\n  orders: number;\n}\n\ninterface TableRow {\n  id: string;\n  product: string;\n  sales: number;\n  revenue: number;\n  status: 'active' | 'pending' | 'inactive';\n}\n\nconst mockMetrics: MetricData[] = [\n  { id: '1', label: 'Total Revenue', value: 45231, change: 12.5, trend: 'up' },\n  { id: '2', label: 'Active Users', value: 2350, change: 8.2, trend: 'up' },\n  { id: '3', label: 'Total Orders', value: 1543, change: -3.1, trend: 'down' },\n  { id: '4', label: 'Conversion Rate', value: 3.24, change: 5.7, trend: 'up' }\n];\n\nconst mockChartData: ChartDataPoint[] = [\n  { date: '2024-01-01', revenue: 12000, users: 450, orders: 230 },\n  { date: '2024-01-02', revenue: 15000, users: 520, orders: 280 },\n  { date: '2024-01-03', revenue: 13500, users: 490, orders: 250 },\n  { date: '2024-01-04', revenue: 18000, users: 610, orders: 320 },\n  { date: '2024-01-05', revenue: 16500, users: 580, orders: 295 },\n  { date: '2024-01-06', revenue: 20000, users: 680, orders: 350 },\n  { date: '2024-01-07', revenue: 22000, users: 720, orders: 380 }\n];\n\nconst mockTableData: TableRow[] = [\n  { id: '1', product: 'Premium Plan', sales: 234, revenue: 23400, status: 'active' },\n  { id: '2', product: 'Basic Plan', sales: 567, revenue: 11340, status: 'active' },\n  { id: '3', product: 'Enterprise Plan', sales: 89, revenue: 17800, status: 'active' },\n  { id: '4', product: 'Starter Plan', sales: 432, revenue: 4320, status: 'pending' },\n  { id: '5', product: 'Pro Plan', sales: 156, revenue: 15600, status: 'active' }\n];\n\ninterface ActivityItem {\n  id: string;\n  type: 'sale' | 'user' | 'revenue' | 'order' | 'success' | 'alert';\n  message: string;\n  timestamp: string;\n  icon: 'ShoppingCart' | 'UserPlus' | 'DollarSign' | 'Package' | 'CheckCircle' | 'AlertCircle';\n}\n\nconst mockActivityData: ActivityItem[] = [\n  { id: '1', type: 'sale', message: 'New sale: Premium Plan', timestamp: '2 minutes ago', icon: 'ShoppingCart' },\n  { id: '2', type: 'user', message: 'New user registered', timestamp: '5 minutes ago', icon: 'UserPlus' },\n  { id: '3', type: 'revenue', message: 'Revenue milestone reached', timestamp: '12 minutes ago', icon: 'DollarSign' },\n  { id: '4', type: 'order', message: 'Order #1234 shipped', timestamp: '18 minutes ago', icon: 'Package' },\n  { id: '5', type: 'success', message: 'Payment processed successfully', timestamp: '25 minutes ago', icon: 'CheckCircle' },\n  { id: '6', type: 'alert', message: 'Low stock alert: Basic Plan', timestamp: '32 minutes ago', icon: 'AlertCircle' },\n  { id: '7', type: 'sale', message: 'New sale: Enterprise Plan', timestamp: '45 minutes ago', icon: 'ShoppingCart' },\n  { id: '8', type: 'user', message: '3 new users registered', timestamp: '1 hour ago', icon: 'UserPlus' },\n  { id: '9', type: 'revenue', message: 'Daily revenue target achieved', timestamp: '2 hours ago', icon: 'DollarSign' },\n  { id: '10', type: 'order', message: 'Order #1233 delivered', timestamp: '3 hours ago', icon: 'CheckCircle' }\n];\ninterface GoalData {\n  id: string;\n  label: string;\n  current: number;\n  target: number;\n  color: string;\n}\n\nconst mockGoals: GoalData[] = [\n  { id: '1', label: 'Monthly Revenue', current: 45231, target: 50000, color: 'bg-blue-500' },\n  { id: '2', label: 'New Users', current: 2350, target: 3000, color: 'bg-green-500' },\n  { id: '3', label: 'Orders Target', current: 1543, target: 2000, color: 'bg-purple-500' },\n  { id: '4', label: 'Conversion Goal', current: 324, target: 400, color: 'bg-orange-500' }\n];\nconst mockQuickStats = [\n  { name: 'Mon', value: 4200, color: '#3b82f6' },\n  { name: 'Tue', value: 5100, color: '#8b5cf6' },\n  { name: 'Wed', value: 3800, color: '#ec4899' },\n  { name: 'Thu', value: 6200, color: '#10b981' },\n  { name: 'Fri', value: 5500, color: '#f59e0b' },\n  { name: 'Sat', value: 4800, color: '#06b6d4' },\n  { name: 'Sun', value: 3900, color: '#6366f1' }\n];\n\nconst RevenueChart = ({ data, isDarkMode }: { data: ChartDataPoint[], isDarkMode: boolean }) => {\n  const [hoveredPoint, setHoveredPoint] = useState<number | null>(null);\n  \n  const maxRevenue = Math.max(...data.map(d => d.revenue));\n  const minRevenue = Math.min(...data.map(d => d.revenue));\n  const revenueRange = maxRevenue - minRevenue;\n  \n  const chartHeight = 200;\n  const chartWidth = 100; // percentage\n  const padding = 20;\n  \n  const getX = (index: number) => {\n    return (index / (data.length - 1)) * 100;\n  };\n  \n  const getY = (value: number) => {\n    const normalized = (value - minRevenue) / revenueRange;\n    return chartHeight - (normalized * (chartHeight - padding * 2)) - padding;\n  };\n  \n  const pathData = data.map((point, index) => {\n    const x = getX(index);\n    const y = getY(point.revenue);\n    return `${index === 0 ? 'M' : 'L'} ${x} ${y}`;\n  }).join(' ');\n  \n  const areaPathData = `${pathData} L ${getX(data.length - 1)} ${chartHeight} L 0 ${chartHeight} Z`;\n  \n  return (\n    <div className=\"relative w-full h-64\">\n      <svg\n        viewBox={`0 0 100 ${chartHeight}`}\n        preserveAspectRatio=\"none\"\n        className=\"w-full h-full\"\n      >\n        <defs>\n          <linearGradient id=\"revenueGradient\" x1=\"0%\" y1=\"0%\" x2=\"0%\" y2=\"100%\">\n            <stop offset=\"0%\" stopColor={isDarkMode ? '#3b82f6' : '#2563eb'} stopOpacity=\"0.3\" />\n            <stop offset=\"100%\" stopColor={isDarkMode ? '#3b82f6' : '#2563eb'} stopOpacity=\"0\" />\n          </linearGradient>\n        </defs>\n        \n        <path\n          d={areaPathData}\n          fill=\"url(#revenueGradient)\"\n          className=\"transition-all duration-300\"\n        />\n        \n        <path\n          d={pathData}\n          fill=\"none\"\n          stroke={isDarkMode ? '#3b82f6' : '#2563eb'}\n          strokeWidth=\"0.5\"\n          vectorEffect=\"non-scaling-stroke\"\n          className=\"transition-colors duration-300\"\n        />\n        \n        {data.map((point, index) => (\n          <g key={index}>\n            <circle\n              cx={getX(index)}\n              cy={getY(point.revenue)}\n              r={hoveredPoint === index ? '1.5' : '1'}\n              fill={isDarkMode ? '#3b82f6' : '#2563eb'}\n              vectorEffect=\"non-scaling-stroke\"\n              className=\"transition-all duration-200 cursor-pointer\"\n              onMouseEnter={() => setHoveredPoint(index)}\n              onMouseLeave={() => setHoveredPoint(null)}\n            />\n          </g>\n        ))}\n      </svg>\n      \n      <div className=\"absolute inset-0 flex items-end justify-between px-2 pb-2 pointer-events-none\">\n        {data.map((point, index) => (\n          <div key={index} className=\"flex flex-col items-center text-xs\">\n            <span className={`${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n              {new Date(point.date).getDate()}/{new Date(point.date).getMonth() + 1}\n            </span>\n          </div>\n        ))}\n      </div>\n      \n      {hoveredPoint !== null && (\n        <div\n          className={`absolute pointer-events-none transition-all duration-200 ${\n            isDarkMode ? 'bg-gray-700 text-white' : 'bg-white text-gray-900'\n          } px-3 py-2 rounded-lg shadow-lg border ${\n            isDarkMode ? 'border-gray-600' : 'border-gray-200'\n          }`}\n          style={{\n            left: `${getX(hoveredPoint)}%`,\n            top: `${(getY(data[hoveredPoint].revenue) / chartHeight) * 100}%`,\n            transform: 'translate(-50%, -120%)'\n          }}\n        >\n          <div className=\"text-xs font-semibold mb-1\">\n            {new Date(data[hoveredPoint].date).toLocaleDateString('en-US', { \n              month: 'short', \n              day: 'numeric' \n            })}\n          </div>\n          <div className=\"flex items-center gap-1\">\n            <TrendingUp className=\"h-3 w-3 text-blue-500\" />\n            <span className=\"text-sm font-bold\">\n              ${data[hoveredPoint].revenue.toLocaleString()}\n            </span>\n          </div>\n          <div className={`text-xs ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n            {data[hoveredPoint].orders} orders\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nconst UserChart = ({ data, isDarkMode }: { data: ChartDataPoint[], isDarkMode: boolean }) => {\n  const maxUsers = Math.max(...data.map(d => d.users));\n  const minUsers = Math.min(...data.map(d => d.users));\n  const range = maxUsers - minUsers;\n  const padding = range * 0.1;\n  const chartHeight = 200;\n  const chartWidth = 100;\n\n  const points = data.map((point, index) => {\n    const x = (index / (data.length - 1)) * chartWidth;\n    const y = chartHeight - ((point.users - minUsers + padding) / (range + 2 * padding)) * chartHeight;\n    return { x, y, ...point };\n  });\n\n  const pathD = points.reduce((path, point, index) => {\n    if (index === 0) return `M ${point.x} ${point.y}`;\n    return `${path} L ${point.x} ${point.y}`;\n  }, '');\n\n  const areaD = `${pathD} L ${chartWidth} ${chartHeight} L 0 ${chartHeight} Z`;\n\n  const [hoveredIndex, setHoveredIndex] = useState<number | null>(null);\n\n  return (\n    <div className=\"relative w-full h-[200px]\">\n      <svg\n        viewBox={`0 0 ${chartWidth} ${chartHeight}`}\n        className=\"w-full h-full\"\n        preserveAspectRatio=\"none\"\n      >\n        <defs>\n          <linearGradient id=\"userGradient\" x1=\"0%\" y1=\"0%\" x2=\"0%\" y2=\"100%\">\n            <stop offset=\"0%\" stopColor=\"#3b82f6\" stopOpacity=\"0.6\" />\n            <stop offset=\"100%\" stopColor=\"#3b82f6\" stopOpacity=\"0.05\" />\n          </linearGradient>\n        </defs>\n\n        <motion.path\n          d={areaD}\n          fill=\"url(#userGradient)\"\n          initial={{ opacity: 0 }}\n          animate={{ opacity: 1 }}\n          transition={{ duration: 0.8, ease: \"easeOut\" }}\n        />\n\n        <motion.path\n          d={pathD}\n          fill=\"none\"\n          stroke=\"#3b82f6\"\n          strokeWidth=\"0.5\"\n          initial={{ pathLength: 0 }}\n          animate={{ pathLength: 1 }}\n          transition={{ duration: 1.5, ease: \"easeInOut\" }}\n        />\n\n        {points.map((point, index) => (\n          <motion.circle\n            key={index}\n            cx={point.x}\n            cy={point.y}\n            r={hoveredIndex === index ? \"1.2\" : \"0.8\"}\n            fill=\"#3b82f6\"\n            initial={{ scale: 0 }}\n            animate={{ scale: 1 }}\n            transition={{ delay: index * 0.1, duration: 0.3 }}\n            onMouseEnter={() => setHoveredIndex(index)}\n            onMouseLeave={() => setHoveredIndex(null)}\n            className=\"cursor-pointer\"\n          />\n        ))}\n      </svg>\n\n      {hoveredIndex !== null && (\n        <motion.div\n          initial={{ opacity: 0, y: 10 }}\n          animate={{ opacity: 1, y: 0 }}\n          className={`absolute top-2 left-2 px-3 py-2 rounded-lg shadow-lg ${\n            isDarkMode ? 'bg-gray-700 text-white' : 'bg-white text-gray-900'\n          }`}\n        >\n          <div className=\"text-xs font-semibold\">{points[hoveredIndex].date}</div>\n          <div className=\"text-sm font-bold text-blue-500\">\n            {points[hoveredIndex].users.toLocaleString()} users\n          </div>\n        </motion.div>\n      )}\n\n      <div className={`flex justify-between mt-2 text-xs ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n        {data.map((point, index) => (\n          index % Math.ceil(data.length / 4) === 0 && (\n            <span key={index}>{new Date(point.date).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}</span>\n          )\n        ))}\n      </div>\n    </div>\n  );\n};\n\n<style jsx>{`\n  @keyframes fadeInUp {\n    from {\n      opacity: 0;\n      transform: translateY(20px);\n    }\n    to {\n      opacity: 1;\n      transform: translateY(0);\n    }\n  }\n`}</style>\nexport default function AnalyticsDashboard() {\n  const [sortColumn, setSortColumn] = useState<keyof TableRow | null>(null);\n  const [sortDirection, setSortDirection] = useState<'asc' | 'desc'>('asc');\n  const [currentPage, setCurrentPage] = useState(1);\n  const itemsPerPage = 5;\n  const [isDarkMode, setIsDarkMode] = useState(false);\n  const [metrics, setMetrics] = useState<MetricData[]>(mockMetrics);\n  const [chartData, setChartData] = useState<ChartDataPoint[]>(mockChartData);\n  const [tableData, setTableData] = useState<TableRow[]>(mockTableData);\n  const [isRefreshing, setIsRefreshing] = useState(false);\n  const [activityData] = useState<ActivityItem[]>(mockActivityData);\n\n  const toggleDarkMode = useCallback(() => {\n    setIsDarkMode(prev => !prev);\n  }, []);\n  const handleSort = useCallback((column: keyof TableRow) => {\n    if (sortColumn === column) {\n      setSortDirection(prev => prev === 'asc' ? 'desc' : 'asc');\n    } else {\n      setSortColumn(column);\n      setSortDirection('asc');\n    }\n    setCurrentPage(1);\n  }, [sortColumn]);\n\n  const sortedTableData = useCallback(() => {\n    if (!sortColumn) return tableData;\n\n    return [...tableData].sort((a, b) => {\n      const aValue = a[sortColumn];\n      const bValue = b[sortColumn];\n\n      if (typeof aValue === 'number' && typeof bValue === 'number') {\n        return sortDirection === 'asc' ? aValue - bValue : bValue - aValue;\n      }\n\n      if (typeof aValue === 'string' && typeof bValue === 'string') {\n        return sortDirection === 'asc' \n          ? aValue.localeCompare(bValue)\n          : bValue.localeCompare(aValue);\n      }\n\n      return 0;\n    });\n  }, [tableData, sortColumn, sortDirection]);\n\n  const paginatedData = useCallback(() => {\n    const sorted = sortedTableData();\n    const startIndex = (currentPage - 1) * itemsPerPage;\n    const endIndex = startIndex + itemsPerPage;\n    return sorted.slice(startIndex, endIndex);\n  }, [sortedTableData, currentPage]);\n\n  const totalPages = Math.ceil(tableData.length / itemsPerPage);\n\n  const getStatusBadgeVariant = (status: TableRow['status']) => {\n    switch (status) {\n      case 'active':\n        return 'default';\n      case 'pending':\n        return 'secondary';\n      case 'inactive':\n        return 'outline';\n      default:\n        return 'default';\n    }\n  };\n  const handleRefresh = useCallback(() => {\n    setIsRefreshing(true);\n    \n    // Simulate async data refresh\n    setTimeout(() => {\n      // Generate updated metrics with random variations\n      const updatedMetrics = mockMetrics.map(metric => ({\n        ...metric,\n        value: metric.value * (0.9 + Math.random() * 0.2),\n        change: -10 + Math.random() * 20\n      }));\n      \n      setMetrics(updatedMetrics);\n      setIsRefreshing(false);\n    }, 1500);\n  }, []);\n\n  // Calculate pie chart data from table data\n  const pieChartData = tableData.map(item => ({\n    name: item.product,\n    value: item.sales,\n    revenue: item.revenue\n  }));\n\n  const COLORS = ['#3b82f6', '#8b5cf6', '#ec4899', '#f59e0b', '#10b981'];\n\n  const CustomTooltip = ({ active, payload }: any) => {\n    if (active && payload && payload.length) {\n      const data = payload[0];\n      const percentage = ((data.value / tableData.reduce((sum, item) => sum + item.sales, 0)) * 100).toFixed(1);\n      return (\n        <div className={`p-3 rounded-lg shadow-lg border ${isDarkMode ? 'bg-gray-800 border-gray-700 text-white' : 'bg-white border-gray-200'}`}>\n          <p className=\"font-semibold\">{data.name}</p>\n          <p className={isDarkMode ? 'text-gray-300' : 'text-gray-600'}>\n            Sales: {data.value}\n          </p>\n          <p className={isDarkMode ? 'text-gray-300' : 'text-gray-600'}>\n            Revenue: ${data.payload.revenue.toLocaleString()}\n          </p>\n          <p className=\"font-semibold text-blue-500\">{percentage}%</p>\n        </div>\n      );\n    }\n    return null;\n  };\n\n  const handleRefresh = useCallback(() => {\n    setIsRefreshing(true);\n    \n    // Simulate async data refresh\n    setTimeout(() => {\n      // Generate updated metrics with random variations\n      const updatedMetrics = mockMetrics.map(metric => ({\n        ...metric,\n        value: metric.value + Math.floor(Math.random() * 200 - 100),\n        change: parseFloat((Math.random() * 20 - 5).toFixed(1)),\n        trend: Math.random() > 0.5 ? 'up' as const : 'down' as const\n      }));\n\n      // Generate updated chart data with random variations\n      const updatedChartData = mockChartData.map(point => ({\n        ...point,\n        revenue: point.revenue + Math.floor(Math.random() * 4000 - 2000),\n        users: point.users + Math.floor(Math.random() * 100 - 50),\n        orders: point.orders + Math.floor(Math.random() * 50 - 25)\n      }));\n\n      // Generate updated table data with random variations\n      const updatedTableData = mockTableData.map(row => ({\n        ...row,\n        sales: row.sales + Math.floor(Math.random() * 40 - 20),\n        revenue: row.revenue + Math.floor(Math.random() * 2000 - 1000)\n      }));\n\n      setMetrics(updatedMetrics);\n      setChartData(updatedChartData);\n      setTableData(updatedTableData);\n      setIsRefreshing(false);\n    }, 1500);\n  }, []);\n\n  return (\n    <div className={`min-h-screen transition-colors duration-300 ${isDarkMode ? 'dark bg-gray-900' : 'bg-gray-50'}`}>\n      <div className=\"container mx-auto p-4 md:p-6 lg:p-8\">\n        <div className=\"flex flex-col md:flex-row justify-between items-start md:items-center gap-4 mb-8\">\n          <div>\n            <h1 className={`text-3xl md:text-4xl font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n              Analytics Dashboard\n            </h1>\n            <p className={`mt-2 ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n              Real-time insights and performance metrics\n            </p>\n          </div>\n\n          <div className=\"flex gap-2\">\n            <Button\n              variant=\"outline\"\n              size=\"icon\"\n              onClick={toggleDarkMode}\n              className={isDarkMode ? 'border-gray-700' : ''}\n            >\n              {isDarkMode ? <Sun className=\"h-5 w-5\" /> : <Moon className=\"h-5 w-5\" />}\n            </Button>\n            <Button\n              variant=\"outline\"\n              onClick={handleRefresh}\n              disabled={isRefreshing}\n              className={isDarkMode ? 'border-gray-700' : ''}\n            >\n              <RefreshCw className={`h-4 w-4 mr-2 ${isRefreshing ? 'animate-spin' : ''}`} />\n              Refresh\n            </Button>\n          </div>\n        </div>\n\n        <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 md:gap-6 mb-8\">\n          {metrics.map((metric, index) => {\n            const Icon = metric.label.includes('Revenue') ? DollarSign :\n                        metric.label.includes('Users') ? Users :\n                        metric.label.includes('Orders') ? ShoppingCart :\n                        Target;\n            \n            const TrendIcon = metric.trend === 'up' ? TrendingUp : TrendingDown;\n            const trendColor = metric.trend === 'up' ? 'text-green-500' : 'text-red-500';\n            const trendBgColor = metric.trend === 'up' ? 'bg-green-50 dark:bg-green-900/20' : 'bg-red-50 dark:bg-red-900/20';\n\n            return (\n              <Card\n                key={metric.id}\n                className={`transition-all duration-300 hover:shadow-lg hover:-translate-y-1 ${\n                  isDarkMode ? 'bg-gray-800 border-gray-700' : 'bg-white'\n                }`}\n                style={{\n                  animation: `fadeInUp 0.5s ease-out ${index * 0.1}s both`\n                }}\n              >\n                <CardHeader className=\"flex flex-row items-center justify-between pb-2\">\n                  <CardTitle className={`text-sm font-medium ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                    {metric.label}\n                  </CardTitle>\n                  <div className={`p-2 rounded-lg ${isDarkMode ? 'bg-gray-700' : 'bg-gray-100'}`}>\n                    <Icon className={`h-4 w-4 ${isDarkMode ? 'text-gray-300' : 'text-gray-600'}`} />\n                  </div>\n                </CardHeader>\n                <CardContent>\n                  <div className={`text-2xl md:text-3xl font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                    {metric.label.includes('Rate') \n                      ? `${metric.value}%` \n                      : metric.label.includes('Revenue') \n                        ? `$${metric.value.toLocaleString()}` \n                        : metric.value.toLocaleString()}\n                  </div>\n                  <div className=\"flex items-center gap-2 mt-2\">\n                    <div className={`flex items-center gap-1 px-2 py-1 rounded-full ${trendBgColor}`}>\n                      <TrendIcon className={`h-3 w-3 ${trendColor}`} />\n                      <span className={`text-xs font-medium ${trendColor}`}>\n                        {Math.abs(metric.change)}%\n                      </span>\n                    </div>\n                    <span className={`text-xs ${isDarkMode ? 'text-gray-400' : 'text-gray-500'}`}>\n                      vs last period\n                    </span>\n                  </div>\n                </CardContent>\n              </Card>\n            );\n          })}\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-4 md:gap-6 mb-8\">\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Revenue Overview</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Daily revenue trends\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <RevenueChart data={chartData} isDarkMode={isDarkMode} />\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>User Growth</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Active users over time\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <UserChart data={chartData} isDarkMode={isDarkMode} />\n            </CardContent>\n          </Card>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-4 md:gap-6 mb-8\">\n          <Card className={`lg:col-span-2 ${isDarkMode ? 'bg-gray-800 border-gray-700' : ''}`}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Performance Metrics</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Combined view of key metrics\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"h-[300px] w-full\">\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <LineChart\n                    data={chartData}\n                    margin={{ top: 5, right: 30, left: 20, bottom: 5 }}\n                  >\n                    <CartesianGrid \n                      strokeDasharray=\"3 3\" \n                      stroke={isDarkMode ? '#374151' : '#e5e7eb'}\n                    />\n                    <XAxis \n                      dataKey=\"date\" \n                      stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                      tick={{ fill: isDarkMode ? '#9ca3af' : '#6b7280' }}\n                      tickFormatter={(value) => new Date(value).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n                    />\n                    <YAxis \n                      stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                      tick={{ fill: isDarkMode ? '#9ca3af' : '#6b7280' }}\n                    />\n                    <Tooltip \n                      contentStyle={{\n                        backgroundColor: isDarkMode ? '#1f2937' : '#ffffff',\n                        border: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\n                        borderRadius: '8px',\n                        color: isDarkMode ? '#f3f4f6' : '#111827'\n                      }}\n                      labelFormatter={(value) => new Date(value).toLocaleDateString('en-US', { month: 'long', day: 'numeric', year: 'numeric' })}\n                    />\n                    <Legend \n                      wrapperStyle={{\n                        color: isDarkMode ? '#f3f4f6' : '#111827'\n                      }}\n                    />\n                    <Line \n                      type=\"monotone\" \n                      dataKey=\"revenue\" \n                      stroke=\"#3b82f6\" \n                      strokeWidth={2}\n                      dot={{ fill: '#3b82f6', r: 4 }}\n                      activeDot={{ r: 6 }}\n                      name=\"Revenue ($)\"\n                    />\n                    <Line \n                      type=\"monotone\" \n                      dataKey=\"users\" \n                      stroke=\"#10b981\" \n                      strokeWidth={2}\n                      dot={{ fill: '#10b981', r: 4 }}\n                      activeDot={{ r: 6 }}\n                      name=\"Users\"\n                    />\n                    <Line \n                      type=\"monotone\" \n                      dataKey=\"orders\" \n                      stroke=\"#f59e0b\" \n                      strokeWidth={2}\n                      dot={{ fill: '#f59e0b', r: 4 }}\n                      activeDot={{ r: 6 }}\n                      name=\"Orders\"\n                    />\n                  </LineChart>\n                </ResponsiveContainer>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Distribution</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Sales by category\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"h-[300px]\">\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <PieChart>\n                    <Pie\n                      data={pieChartData}\n                      cx=\"50%\"\n                      cy=\"50%\"\n                      labelLine={false}\n                      label={({ name, percent }) => `${(percent * 100).toFixed(0)}%`}\n                      outerRadius={80}\n                      fill=\"#8884d8\"\n                      dataKey=\"value\"\n                      animationBegin={0}\n                      animationDuration={800}\n                    >\n                      {pieChartData.map((entry, index) => (\n                        <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\n                      ))}\n                    </Pie>\n                    <Tooltip content={<CustomTooltip />} />\n                    <Legend \n                      verticalAlign=\"bottom\" \n                      height={36}\n                      formatter={(value) => (\n                        <span className={isDarkMode ? 'text-gray-300' : 'text-gray-700'}>\n                          {value}\n                        </span>\n                      )}\n                    />\n                  </PieChart>\n                </ResponsiveContainer>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n          <CardHeader>\n            <CardTitle className={isDarkMode ? 'text-white' : ''}>Top Products</CardTitle>\n            <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n              Best performing products by revenue\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              <div className=\"rounded-md border\">\n                <Table>\n                  <TableHeader>\n                    <TableRow className={isDarkMode ? 'border-gray-700' : ''}>\n                      <TableHead className={isDarkMode ? 'text-gray-300' : ''}>\n                        <Button\n                          variant=\"ghost\"\n                          onClick={() => handleSort('product')}\n                          className=\"h-8 px-2 lg:px-3\"\n                        >\n                          Product\n                          <ArrowUpDown className=\"ml-2 h-4 w-4\" />\n                        </Button>\n                      </TableHead>\n                      <TableHead className={isDarkMode ? 'text-gray-300' : ''}>\n                        <Button\n                          variant=\"ghost\"\n                          onClick={() => handleSort('sales')}\n                          className=\"h-8 px-2 lg:px-3\"\n                        >\n                          Sales\n                          <ArrowUpDown className=\"ml-2 h-4 w-4\" />\n                        </Button>\n                      </TableHead>\n                      <TableHead className={isDarkMode ? 'text-gray-300' : ''}>\n                        <Button\n                          variant=\"ghost\"\n                          onClick={() => handleSort('revenue')}\n                          className=\"h-8 px-2 lg:px-3\"\n                        >\n                          Revenue\n                          <ArrowUpDown className=\"ml-2 h-4 w-4\" />\n                        </Button>\n                      </TableHead>\n                      <TableHead className={isDarkMode ? 'text-gray-300' : ''}>\n                        <Button\n                          variant=\"ghost\"\n                          onClick={() => handleSort('status')}\n                          className=\"h-8 px-2 lg:px-3\"\n                        >\n                          Status\n                          <ArrowUpDown className=\"ml-2 h-4 w-4\" />\n                        </Button>\n                      </TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {paginatedData().map((row) => (\n                      <TableRow \n                        key={row.id}\n                        className={isDarkMode ? 'border-gray-700 hover:bg-gray-700/50' : ''}\n                      >\n                        <TableCell className={`font-medium ${isDarkMode ? 'text-gray-200' : ''}`}>\n                          {row.product}\n                        </TableCell>\n                        <TableCell className={isDarkMode ? 'text-gray-300' : ''}>\n                          {row.sales.toLocaleString()}\n                        </TableCell>\n                        <TableCell className={isDarkMode ? 'text-gray-300' : ''}>\n                          ${row.revenue.toLocaleString()}\n                        </TableCell>\n                        <TableCell>\n                          <Badge \n                            variant={getStatusBadgeVariant(row.status)}\n                            className=\"capitalize\"\n                          >\n                            {row.status}\n                          </Badge>\n                        </TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              </div>\n\n              <div className=\"flex items-center justify-between\">\n                <div className={`text-sm ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                  Showing {((currentPage - 1) * itemsPerPage) + 1} to {Math.min(currentPage * itemsPerPage, tableData.length)} of {tableData.length} products\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => setCurrentPage(prev => Math.max(1, prev - 1))}\n                    disabled={currentPage === 1}\n                    className={isDarkMode ? 'border-gray-700' : ''}\n                  >\n                    <ChevronLeft className=\"h-4 w-4\" />\n                    Previous\n                  </Button>\n                  <div className={`text-sm ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                    Page {currentPage} of {totalPages}\n                  </div>\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => setCurrentPage(prev => Math.min(totalPages, prev + 1))}\n                    disabled={currentPage === totalPages}\n                    className={isDarkMode ? 'border-gray-700' : ''}\n                  >\n                    Next\n                    <ChevronRight className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 md:gap-6 mt-8\">\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Recent Activity</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"max-h-[400px] overflow-y-auto space-y-4 pr-2\">\n                {activityData.map((activity) => {\n                  const IconComponent = \n                    activity.icon === 'ShoppingCart' ? ShoppingCart :\n                    activity.icon === 'UserPlus' ? UserPlus :\n                    activity.icon === 'DollarSign' ? DollarSign :\n                    activity.icon === 'Package' ? Package :\n                    activity.icon === 'CheckCircle' ? CheckCircle :\n                    AlertCircle;\n\n                  const iconColor = \n                    activity.type === 'sale' ? 'text-blue-500' :\n                    activity.type === 'user' ? 'text-green-500' :\n                    activity.type === 'revenue' ? 'text-yellow-500' :\n                    activity.type === 'order' ? 'text-purple-500' :\n                    activity.type === 'success' ? 'text-emerald-500' :\n                    'text-red-500';\n\n                  const bgColor = \n                    activity.type === 'sale' ? (isDarkMode ? 'bg-blue-500/10' : 'bg-blue-50') :\n                    activity.type === 'user' ? (isDarkMode ? 'bg-green-500/10' : 'bg-green-50') :\n                    activity.type === 'revenue' ? (isDarkMode ? 'bg-yellow-500/10' : 'bg-yellow-50') :\n                    activity.type === 'order' ? (isDarkMode ? 'bg-purple-500/10' : 'bg-purple-50') :\n                    activity.type === 'success' ? (isDarkMode ? 'bg-emerald-500/10' : 'bg-emerald-50') :\n                    (isDarkMode ? 'bg-red-500/10' : 'bg-red-50');\n\n                  return (\n                    <div \n                      key={activity.id} \n                      className=\"flex items-start gap-3 p-3 rounded-lg transition-colors hover:bg-gray-100 dark:hover:bg-gray-700/50\"\n                    >\n                      <div className={`p-2 rounded-full ${bgColor} flex-shrink-0`}>\n                        <IconComponent className={`h-4 w-4 ${iconColor}`} />\n                      </div>\n                      <div className=\"flex-1 min-w-0\">\n                        <p className={`text-sm font-medium ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                          {activity.message}\n                        </p>\n                        <p className={`text-xs mt-1 ${isDarkMode ? 'text-gray-400' : 'text-gray-500'}`}>\n                          {activity.timestamp}\n                        </p>\n                      </div>\n                    </div>\n                  );\n                })}\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Quick Stats</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                <div className={`text-sm ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                  Daily sales comparison (last 7 days)\n                </div>\n                <ResponsiveContainer width=\"100%\" height={250}>\n                  <BarChart data={mockQuickStats}>\n                    <CartesianGrid \n                      strokeDasharray=\"3 3\" \n                      stroke={isDarkMode ? '#374151' : '#e5e7eb'}\n                    />\n                    <XAxis \n                      dataKey=\"name\" \n                      stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                      style={{ fontSize: '12px' }}\n                    />\n                    <YAxis \n                      stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                      style={{ fontSize: '12px' }}\n                    />\n                    <Tooltip \n                      contentStyle={{\n                        backgroundColor: isDarkMode ? '#1f2937' : '#ffffff',\n                        border: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\n                        borderRadius: '6px',\n                        color: isDarkMode ? '#ffffff' : '#000000'\n                      }}\n                      formatter={(value: number) => [`$${value.toLocaleString()}`, 'Sales']}\n                    />\n                    <Bar dataKey=\"value\" radius={[8, 8, 0, 0]}>\n                      {mockQuickStats.map((entry, index) => (\n                        <Cell key={`cell-${index}`} fill={entry.color} />\n                      ))}\n                    </Bar>\n                  </BarChart>\n                </ResponsiveContainer>\n                <div className=\"grid grid-cols-2 gap-2 pt-2\">\n                  <div className={`text-center p-2 rounded ${isDarkMode ? 'bg-gray-700' : 'bg-gray-100'}`}>\n                    <div className={`text-xs ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                      Avg Daily\n                    </div>\n                    <div className={`text-lg font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                      ${(mockQuickStats.reduce((sum, stat) => sum + stat.value, 0) / mockQuickStats.length).toLocaleString(undefined, { maximumFractionDigits: 0 })}\n                    </div>\n                  </div>\n                  <div className={`text-center p-2 rounded ${isDarkMode ? 'bg-gray-700' : 'bg-gray-100'}`}>\n                    <div className={`text-xs ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                      Peak Day\n                    </div>\n                    <div className={`text-lg font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                      {mockQuickStats.reduce((max, stat) => stat.value > max.value ? stat : max).name}\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Goals Progress</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-6\">\n                {mockGoals.map((goal) => {\n                  const percentage = Math.min((goal.current / goal.target) * 100, 100);\n                  \n                  return (\n                    <div key={goal.id} className=\"space-y-2\">\n                      <div className=\"flex justify-between items-center\">\n                        <span className={`text-sm font-medium ${isDarkMode ? 'text-gray-200' : 'text-gray-700'}`}>\n                          {goal.label}\n                        </span>\n                        <span className={`text-sm ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                          {percentage.toFixed(0)}%\n                        </span>\n                      </div>\n                      <Progress \n                        value={percentage} \n                        className={`h-2 ${isDarkMode ? 'bg-gray-700' : 'bg-gray-200'}`}\n                      />\n                      <div className=\"flex justify-between items-center\">\n                        <span className={`text-xs ${isDarkMode ? 'text-gray-500' : 'text-gray-500'}`}>\n                          {goal.current.toLocaleString()} / {goal.target.toLocaleString()}\n                        </span>\n                        <span className={`text-xs font-medium ${\n                          percentage >= 100 \n                            ? 'text-green-500' \n                            : percentage >= 75 \n                            ? 'text-blue-500' \n                            : percentage >= 50 \n                            ? 'text-yellow-500' \n                            : 'text-red-500'\n                        }`}>\n                          {percentage >= 100 \n                            ? '\u2713 Complete' \n                            : `${(goal.target - goal.current).toLocaleString()} to go`\n                          }\n                        </span>\n                      </div>\n                    </div>\n                  );\n                })}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}",
    "error": null,
    "elapsed_time": 99.37476825714111,
    "success": true
  }
}