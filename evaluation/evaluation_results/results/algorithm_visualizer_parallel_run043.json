{
  "prompt_id": "algorithm_visualizer",
  "prompt_name": "Algorithm Visualizer",
  "mode": "parallel",
  "run_number": 43,
  "timestamp": "2025-10-14T12:43:34.577352",
  "response_time": 104.39519786834717,
  "total_tokens": null,
  "response_content": "import { useState, useCallback } from 'react';import { useEffect, useRef } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Card } from '@/components/ui/card';\nimport { Slider } from '@/components/ui/slider';\nimport { Play, Pause, RotateCcw, Zap, BarChart3 } from 'lucide-react';\nimport { TrendingUp, Repeat, Activity } from 'lucide-react';\nimport { motion } from 'framer-motion';\n\ninterface ArrayElement {\n  value: number;\n  id: string;\n  isComparing?: boolean;\n  isSwapping?: boolean;\n  isSorted?: boolean;\n}\n\ninterface AlgorithmStep {\n  array: ArrayElement[];\n  comparingIndices: number[];\n  swappingIndices: number[];\n  sortedIndices: number[];\n}\n\ntype AlgorithmType = 'bubble' | 'quick' | 'merge' | 'insertion';\n\nconst NEON_COLORS = [\n  '#00ffff',\n  '#ff00ff', \n  '#00ff00',\n  '#ffff00',\n  '#ff0066',\n  '#00ffaa'\n];\n\nconst mockAlgorithms = [\n  { id: 'bubble', name: 'Bubble Sort', complexity: 'O(n\u00b2)' },\n  { id: 'quick', name: 'Quick Sort', complexity: 'O(n log n)' },\n  { id: 'merge', name: 'Merge Sort', complexity: 'O(n log n)' },\n  { id: 'insertion', name: 'Insertion Sort', complexity: 'O(n\u00b2)' }\n];\n\nexport default function AlgorithmVisualizer() {\n  const [array, setArray] = useState<ArrayElement[]>([]);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [speed, setSpeed] = useState([50]);\n  const [arraySize, setArraySize] = useState([20]);\n  const [selectedAlgorithm, setSelectedAlgorithm] = useState<AlgorithmType>('bubble');\n  const [currentStep, setCurrentStep] = useState(0);\n  const [steps, setSteps] = useState<AlgorithmStep[]>([]);\n  const [comparisons, setComparisons] = useState(0);\n  const [swaps, setSwaps] = useState(0);\n\n  const generateRandomArray = useCallback(() => {\n    const newArray: ArrayElement[] = Array.from({ length: arraySize[0] }, (_, i) => ({\n      value: Math.floor(Math.random() * 100) + 5,\n      id: `element-${i}-${Date.now()}`,\n      isComparing: false,\n      isSwapping: false,\n      isSorted: false\n    }));\n    setArray(newArray);\n    setSteps([]);\n    setCurrentStep(0);\n    setIsPlaying(false);\n  }, [arraySize]);\n\n  const resetVisualization = useCallback(() => {\n    setIsPlaying(false);\n    setCurrentStep(0);\n    setSteps([]);\n    generateRandomArray();\n    \n  }, [generateRandomArray]);\n\n  const startVisualization = useCallback(() => {\n    if (steps.length === 0 || currentStep >= steps.length) return;\n    \n    setIsPlaying(true);\n    \n    const intervalId = setInterval(() => {\n      setCurrentStep((prevStep) => {\n        const nextStep = prevStep + 1;\n        \n        if (nextStep >= steps.length) {\n          setIsPlaying(false);\n          clearInterval(intervalId);\n          return prevStep;\n        }\n        \n        const stepData = steps[nextStep];\n        setArray(stepData.array);\n        \n        return nextStep;\n      });\n    }, 1000 - speed[0] * 9);\n    \n    return () => clearInterval(intervalId);\n  }, [steps, speed, currentStep]);\n\n  const pauseVisualization = useCallback(() => {    setIsPlaying(false);\n  }, []);\n\n  useEffect(() => {\n    generateRandomArray();\n  }, [generateRandomArray]);\n\n  useEffect(() => {\n    if (!isPlaying || steps.length === 0 || currentStep >= steps.length) {\n      if (currentStep >= steps.length && steps.length > 0) {\n        setIsPlaying(false);\n      }\n      return;\n    }\n\n    const delay = 1000 - (speed[0] * 9);\n    const timer = setTimeout(() => {\n      const step = steps[currentStep];\n      setArray(step.array);\n      setCurrentStep(prev => prev + 1);\n    }, delay);\n\n    return () => clearTimeout(timer);\n  }, [isPlaying, currentStep, steps, speed]);\n\n  const generateSortingSteps = useCallback((algorithm: AlgorithmType) => {\n        if (array.length === 0) return;\n\n    const steps: AlgorithmStep[] = [];\n    const arr = [...array];\n\n    const createStep = (\n      currentArray: ArrayElement[],\n      comparing: number[] = [],\n      swapping: number[] = [],\n      sorted: number[] = []\n    ): AlgorithmStep => ({\n      array: currentArray.map((el, idx) => ({\n        ...el,\n        isComparing: comparing.includes(idx),\n        isSwapping: swapping.includes(idx),\n        isSorted: sorted.includes(idx)\n      })),\n      comparingIndices: comparing,\n      swappingIndices: swapping,\n      sortedIndices: sorted\n    });\n\n    // Initial state\n    steps.push(createStep([...arr]));\n\n    switch (algorithm) {\n      case 'bubble': {\n        const sortedIndices: number[] = [];\n        for (let i = 0; i < arr.length - 1; i++) {\n          for (let j = 0; j < arr.length - i - 1; j++) {\n            // Comparing\n            steps.push(createStep([...arr], [j, j + 1], [], sortedIndices));\n            \n            if (arr[j].value > arr[j + 1].value) {\n              // Swapping\n              steps.push(createStep([...arr], [], [j, j + 1], sortedIndices));\n              [arr[j], arr[j + 1]] = [arr[j + 1], arr[j]];\n              steps.push(createStep([...arr], [], [], sortedIndices));\n            }\n          }\n          sortedIndices.push(arr.length - i - 1);\n          steps.push(createStep([...arr], [], [], sortedIndices));\n        }\n        sortedIndices.push(0);\n        steps.push(createStep([...arr], [], [], sortedIndices));\n        break;\n      }\n\n      case 'insertion': {\n        const sortedIndices: number[] = [0];\n        steps.push(createStep([...arr], [], [], [0]));\n        \n        for (let i = 1; i < arr.length; i++) {\n          const key = arr[i];\n          let j = i - 1;\n          \n          steps.push(createStep([...arr], [i], [], sortedIndices));\n          \n          while (j >= 0 && arr[j].value > key.value) {\n            steps.push(createStep([...arr], [j, j + 1], [], sortedIndices));\n            steps.push(createStep([...arr], [], [j, j + 1], sortedIndices));\n            arr[j + 1] = arr[j];\n            steps.push(createStep([...arr], [], [], sortedIndices));\n            j--;\n          }\n          \n          arr[j + 1] = key;\n          sortedIndices.push(i);\n          steps.push(createStep([...arr], [], [], sortedIndices));\n        }\n        break;\n      }\n\n      case 'quick': {\n        const sortedIndices: number[] = [];\n        \n        const partition = (low: number, high: number): number => {\n          const pivot = arr[high];\n          steps.push(createStep([...arr], [high], [], sortedIndices));\n          let i = low - 1;\n\n          for (let j = low; j < high; j++) {\n            steps.push(createStep([...arr], [j, high], [], sortedIndices));\n            \n            if (arr[j].value < pivot.value) {\n              i++;\n              if (i !== j) {\n                steps.push(createStep([...arr], [], [i, j], sortedIndices));\n                [arr[i], arr[j]] = [arr[j], arr[i]];\n                steps.push(createStep([...arr], [], [], sortedIndices));\n              }\n            }\n          }\n\n          steps.push(createStep([...arr], [], [i + 1, high], sortedIndices));\n          [arr[i + 1], arr[high]] = [arr[high], arr[i + 1]];\n          sortedIndices.push(i + 1);\n          steps.push(createStep([...arr], [], [], sortedIndices));\n          \n          return i + 1;\n        };\n\n        const quickSort = (low: number, high: number) => {\n          if (low < high) {\n            const pi = partition(low, high);\n            quickSort(low, pi - 1);\n            quickSort(pi + 1, high);\n          } else if (low === high) {\n            sortedIndices.push(low);\n            steps.push(createStep([...arr], [], [], sortedIndices));\n          }\n        };\n\n        quickSort(0, arr.length - 1);\n        break;\n      }\n\n      case 'merge': {\n        const sortedIndices: number[] = [];\n        \n        const merge = (left: number, mid: number, right: number) => {\n          const leftArr = arr.slice(left, mid + 1);\n          const rightArr = arr.slice(mid + 1, right + 1);\n          \n          let i = 0, j = 0, k = left;\n          \n          while (i < leftArr.length && j < rightArr.length) {\n            const leftIdx = left + i;\n            const rightIdx = mid + 1 + j;\n            steps.push(createStep([...arr], [leftIdx, rightIdx], [], sortedIndices));\n            \n            if (leftArr[i].value <= rightArr[j].value) {\n              steps.push(createStep([...arr], [], [k], sortedIndices));\n              arr[k] = leftArr[i];\n              steps.push(createStep([...arr], [], [], sortedIndices));\n              i++;\n            } else {\n              steps.push(createStep([...arr], [], [k], sortedIndices));\n              arr[k] = rightArr[j];\n              steps.push(createStep([...arr], [], [], sortedIndices));\n              j++;\n            }\n            k++;\n          }\n          \n          while (i < leftArr.length) {\n            steps.push(createStep([...arr], [], [k], sortedIndices));\n            arr[k] = leftArr[i];\n            steps.push(createStep([...arr], [], [], sortedIndices));\n            i++;\n            k++;\n          }\n          \n          while (j < rightArr.length) {\n            steps.push(createStep([...arr], [], [k], sortedIndices));\n            arr[k] = rightArr[j];\n            steps.push(createStep([...arr], [], [], sortedIndices));\n            j++;\n            k++;\n          }\n        };\n\n        const mergeSort = (left: number, right: number) => {\n          if (left < right) {\n            const mid = Math.floor((left + right) / 2);\n            mergeSort(left, mid);\n            mergeSort(mid + 1, right);\n            merge(left, mid, right);\n          }\n        };\n\n        mergeSort(0, arr.length - 1);\n        \n        for (let i = 0; i < arr.length; i++) {\n          sortedIndices.push(i);\n        }\n        steps.push(createStep([...arr], [], [], sortedIndices));\n        break;\n      }\n    }\n\n    setSteps(steps);\n    setCurrentStep(0);\n    setIsPlaying(false);\n  }, [array]);\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-gray-900 via-purple-900 to-gray-900 p-8\">\n      <div className=\"max-w-7xl mx-auto space-y-8\">\n        <motion.div\n          initial={{ opacity: 0, y: -20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.6 }}\n          className=\"text-center space-y-4\"\n        >\n          <div className=\"relative inline-block\">\n            <motion.h1\n              className=\"text-6xl font-bold bg-gradient-to-r from-cyan-400 via-purple-400 to-pink-400 bg-clip-text text-transparent\"\n              animate={{\n                textShadow: [\n                  '0 0 20px rgba(0, 255, 255, 0.5)',\n                  '0 0 40px rgba(255, 0, 255, 0.5)',\n                  '0 0 20px rgba(0, 255, 255, 0.5)'\n                ]\n              }}\n              transition={{ duration: 2, repeat: Infinity }}\n            >\n              Algorithm Visualizer\n            </motion.h1>\n          </div>\n          \n          <div className=\"flex items-center justify-center gap-4\">\n            <motion.div\n              initial={{ scale: 0.9, opacity: 0 }}\n              animate={{ scale: 1, opacity: 1 }}\n              transition={{ delay: 0.2 }}\n              className=\"flex items-center gap-2 px-6 py-3 bg-gray-800/50 backdrop-blur-sm rounded-lg border border-cyan-500/30\"\n            >\n              <Zap className=\"w-5 h-5 text-cyan-400\" />\n              <span className=\"text-xl font-semibold text-white\">\n                {mockAlgorithms.find(a => a.id === selectedAlgorithm)?.name}\n              </span>\n            </motion.div>\n            \n            <motion.div\n              initial={{ scale: 0.9, opacity: 0 }}\n              animate={{ scale: 1, opacity: 1 }}\n              transition={{ delay: 0.3 }}\n              className=\"relative px-4 py-2 rounded-lg overflow-hidden\"\n            >\n              <motion.div\n                className=\"absolute inset-0 bg-gradient-to-r from-purple-500/20 to-pink-500/20\"\n                animate={{\n                  opacity: [0.5, 1, 0.5]\n                }}\n                transition={{ duration: 2, repeat: Infinity }}\n              />\n              <div className=\"relative flex items-center gap-2\">\n                <BarChart3 className=\"w-4 h-4 text-purple-400\" />\n                <span className=\"text-sm font-mono text-purple-300\">\n                  {mockAlgorithms.find(a => a.id === selectedAlgorithm)?.complexity}\n                </span>\n              </div>\n            </motion.div>\n          </div>\n        </motion.div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-6\">\n          <div className=\"lg:col-span-1 space-y-6\">\n            <motion.div\n              initial={{ opacity: 0, x: -50 }}\n              animate={{ opacity: 1, x: 0 }}\n              className=\"bg-gray-800/50 backdrop-blur-lg rounded-2xl p-6 border border-cyan-500/30 shadow-[0_0_30px_rgba(0,255,255,0.3)] space-y-6\"\n            >\n              {/* Algorithm Selection */}\n              <div className=\"space-y-3\">\n                <div className=\"flex items-center gap-2 text-cyan-400\">\n                  <Zap className=\"w-5 h-5\" />\n                  <h3 className=\"font-bold text-lg\">Algorithm</h3>\n                </div>\n                <div className=\"grid grid-cols-1 gap-2\">\n                  {mockAlgorithms.map((algo) => (\n                    <motion.button\n                      key={algo.id}\n                      whileHover={{ scale: 1.02 }}\n                      whileTap={{ scale: 0.98 }}\n                      onClick={() => setSelectedAlgorithm(algo.id as AlgorithmType)}\n                      className={`p-3 rounded-lg border transition-all ${\n                        selectedAlgorithm === algo.id\n                          ? 'bg-cyan-500/20 border-cyan-400 shadow-[0_0_20px_rgba(0,255,255,0.4)]'\n                          : 'bg-gray-700/30 border-gray-600 hover:border-cyan-500/50'\n                      }`}\n                    >\n                      <div className=\"text-left\">\n                        <div className=\"font-semibold text-white\">{algo.name}</div>\n                        <div className=\"text-xs text-gray-400\">{algo.complexity}</div>\n                      </div>\n                    </motion.button>\n                  ))}\n                </div>\n              </div>\n\n              {/* Speed Control */}\n              <div className=\"space-y-3\">\n                <div className=\"flex items-center justify-between\">\n                  <label className=\"text-cyan-400 font-semibold\">Speed</label>\n                  <span className=\"text-white font-mono\">{speed[0]}%</span>\n                </div>\n                <Slider\n                  value={speed}\n                  onValueChange={setSpeed}\n                  min={10}\n                  max={100}\n                  step={10}\n                  className=\"[&_[role=slider]]:bg-cyan-400 [&_[role=slider]]:border-cyan-300 [&_[role=slider]]:shadow-[0_0_10px_rgba(0,255,255,0.6)]\"\n                />\n              </div>\n\n              {/* Array Size Control */}\n              <div className=\"space-y-3\">\n                <div className=\"flex items-center justify-between\">\n                  <label className=\"text-cyan-400 font-semibold flex items-center gap-2\">\n                    <BarChart3 className=\"w-4 h-4\" />\n                    Array Size\n                  </label>\n                  <span className=\"text-white font-mono\">{arraySize[0]}</span>\n                </div>\n                <Slider\n                  value={arraySize}\n                  onValueChange={setArraySize}\n                  min={5}\n                  max={50}\n                  step={5}\n                  disabled={isPlaying}\n                  className=\"[&_[role=slider]]:bg-purple-400 [&_[role=slider]]:border-purple-300 [&_[role=slider]]:shadow-[0_0_10px_rgba(168,85,247,0.6)]\"\n                />\n              </div>\n\n              {/* Control Buttons */}\n              <div className=\"space-y-3 pt-4 border-t border-cyan-500/20\">\n                <Button\n                  onClick={isPlaying ? pauseVisualization : startVisualization}\n                  disabled={steps.length === 0 || currentStep >= steps.length}\n                  className=\"w-full bg-gradient-to-r from-cyan-500 to-blue-500 hover:from-cyan-400 hover:to-blue-400 text-white font-bold shadow-[0_0_20px_rgba(0,255,255,0.5)] transition-all\"\n                >\n                  {isPlaying ? (\n                    <>\n                      <Pause className=\"w-4 h-4 mr-2\" />\n                      Pause\n                    </>\n                  ) : (\n                    <>\n                      <Play className=\"w-4 h-4 mr-2\" />\n                      {currentStep >= steps.length ? 'Finished' : 'Play'}\n                    </>\n                  )}\n                </Button>\n\n                <Button\n                  onClick={resetVisualization}\n                  variant=\"outline\"\n                  className=\"w-full border-purple-500/50 bg-purple-500/10 hover:bg-purple-500/20 text-purple-300 hover:text-purple-200 shadow-[0_0_15px_rgba(168,85,247,0.3)]\"\n                >\n                  <RotateCcw className=\"w-4 h-4 mr-2\" />\n                  Reset\n                </Button>\n\n                <Button\n                  onClick={() => generateSortingSteps(selectedAlgorithm)}\n                  disabled={isPlaying || array.length === 0}\n                  className=\"w-full bg-gradient-to-r from-purple-500 to-pink-500 hover:from-purple-400 hover:to-pink-400 text-white font-bold shadow-[0_0_20px_rgba(168,85,247,0.5)]\"\n                >\n                  <Zap className=\"w-4 h-4 mr-2\" />\n                  Generate Steps\n                </Button>\n              </div>\n\n              {/* Stats Display */}\n              <div className=\"pt-4 border-t border-cyan-500/20 space-y-2\">\n                <div className=\"flex justify-between text-sm\">\n                  <span className=\"text-gray-400\">Current Step:</span>\n                  <span className=\"text-cyan-400 font-mono\">{currentStep} / {steps.length}</span>\n                </div>\n                <div className=\"flex justify-between text-sm\">\n                  <span className=\"text-gray-400\">Array Length:</span>\n                  <span className=\"text-purple-400 font-mono\">{array.length}</span>\n                </div>\n              </div>\n            </motion.div>\n            \n            <div className=\"bg-gray-800/50 backdrop-blur-lg rounded-2xl p-6 border border-cyan-500/30 shadow-lg shadow-cyan-500/20\">\n              <div className=\"space-y-6\">\n                <div>\n                  <h3 className=\"text-cyan-400 font-semibold mb-4 flex items-center gap-2\">\n                    <Zap className=\"w-5 h-5\" />\n                    Algorithm\n                  </h3>\n                  <div className=\"grid grid-cols-2 gap-3\">\n                    {mockAlgorithms.map((algo) => (\n                      <motion.button\n                        key={algo.id}\n                        onClick={() => {\n                          setSelectedAlgorithm(algo.id as AlgorithmType);\n                          setSteps([]);\n                          setCurrentStep(0);\n                          setIsPlaying(false);\n                        }}\n                        className={`\n                          relative p-3 rounded-lg font-medium text-sm transition-all\n                          ${selectedAlgorithm === algo.id\n                            ? 'bg-cyan-500/20 text-cyan-300 border-2 border-cyan-400 shadow-lg shadow-cyan-500/50'\n                            : 'bg-gray-700/50 text-gray-300 border border-gray-600 hover:border-cyan-500/50'\n                          }\n                        `}\n                        whileHover={{ \n                          scale: 1.05,\n                          boxShadow: '0 0 20px rgba(6, 182, 212, 0.4)'\n                        }}\n                        whileTap={{ scale: 0.95 }}\n                      >\n                        <div className=\"flex flex-col items-center gap-1\">\n                          <span>{algo.name.split(' ')[0]}</span>\n                          <span className=\"text-xs opacity-70\">{algo.complexity}</span>\n                        </div>\n                        {selectedAlgorithm === algo.id && (\n                          <motion.div\n                            className=\"absolute inset-0 rounded-lg bg-cyan-400/10\"\n                            layoutId=\"algorithmSelector\"\n                            transition={{ type: \"spring\", bounce: 0.2, duration: 0.6 }}\n                          />\n                        )}\n                      </motion.button>\n                    ))}\n                  </div>\n                </div>\n\n                <div>\n                  <h3 className=\"text-cyan-400 font-semibold mb-4\">Speed</h3>\n                  <div className=\"space-y-2\">\n                    <Slider\n                      value={speed}\n                      onValueChange={setSpeed}\n                      min={1}\n                      max={100}\n                      step={1}\n                      className=\"cursor-pointer [&_[role=slider]]:bg-cyan-400 [&_[role=slider]]:border-cyan-300 [&_[role=slider]]:shadow-lg [&_[role=slider]]:shadow-cyan-400/50 [&_[role=slider]]:transition-all [&_[role=slider]]:hover:shadow-cyan-400/80 [&_[role=slider]]:hover:scale-110 [&_.relative]:bg-gray-700 [&_.relative]:overflow-visible [&_.bg-primary]:bg-gradient-to-r [&_.bg-primary]:from-cyan-500 [&_.bg-primary]:to-purple-500 [&_.bg-primary]:shadow-lg [&_.bg-primary]:shadow-cyan-500/30\"\n                    />\n                    <div className=\"flex justify-between text-xs text-gray-400\">\n                      <span>Slow</span>\n                      <span className=\"text-cyan-400 font-semibold\">{speed[0]}%</span>\n                      <span>Fast</span>\n                    </div>\n                  </div>\n                </div>\n\n                <div>\n                  <h3 className=\"text-cyan-400 font-semibold mb-4\">Array Size</h3>\n                  <div className=\"space-y-3\">\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"text-sm text-gray-400\">Elements</span>\n                      <motion.span \n                        key={arraySize[0]}\n                        initial={{ scale: 1.3, color: '#00ffff' }}\n                        animate={{ scale: 1, color: '#ffffff' }}\n                        className=\"text-lg font-bold text-white\"\n                      >\n                        {arraySize[0]}\n                      </motion.span>\n                    </div>\n                    <div className=\"relative\">\n                      <Slider\n                        value={arraySize}\n                        onValueChange={setArraySize}\n                        min={5}\n                        max={50}\n                        step={1}\n                        disabled={isPlaying}\n                        className=\"cursor-pointer [&_[role=slider]]:bg-gradient-to-r [&_[role=slider]]:from-cyan-400 [&_[role=slider]]:to-purple-500 [&_[role=slider]]:border-2 [&_[role=slider]]:border-white [&_[role=slider]]:shadow-lg [&_[role=slider]]:shadow-cyan-400/50 [&_[role=slider]]:transition-shadow hover:[&_[role=slider]]:shadow-xl hover:[&_[role=slider]]:shadow-cyan-400/70 [&>span]:bg-gradient-to-r [&>span]:from-cyan-500/30 [&>span]:to-purple-500/30\"\n                      />\n                      <div className=\"absolute inset-0 bg-gradient-to-r from-cyan-500/10 to-purple-500/10 rounded-full blur-sm pointer-events-none\" />\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"space-y-3 pt-4 border-t border-cyan-500/20\">\n                  <Button\n                    onClick={() => {\n                      if (isPlaying) {\n                        pauseVisualization();\n                      } else {\n                        if (steps.length === 0) {\n                          generateSortingSteps(selectedAlgorithm);\n                        }\n                        startVisualization();\n                      }\n                    }}\n                    disabled={array.length === 0}\n                    className=\"w-full bg-gradient-to-r from-cyan-500 to-blue-500 hover:from-cyan-400 hover:to-blue-400 text-white font-bold py-6 rounded-xl shadow-[0_0_20px_rgba(0,255,255,0.5)] hover:shadow-[0_0_30px_rgba(0,255,255,0.8)] transition-all duration-300 disabled:opacity-50 disabled:cursor-not-allowed\"\n                  >\n                    <motion.div\n                      className=\"flex items-center justify-center gap-3\"\n                      whileHover={{ scale: 1.05 }}\n                      whileTap={{ scale: 0.95 }}\n                    >\n                      {isPlaying ? (\n                        <>\n                          <motion.div\n                            initial={{ rotate: 0 }}\n                            animate={{ rotate: 360 }}\n                            transition={{ duration: 2, repeat: Infinity, ease: \"linear\" }}\n                          >\n                            <Pause className=\"w-6 h-6\" />\n                          </motion.div>\n                          <span>Pause</span>\n                        </>\n                      ) : (\n                        <>\n                          <motion.div\n                            animate={{ x: [0, 3, 0] }}\n                            transition={{ duration: 1.5, repeat: Infinity }}\n                          >\n                            <Play className=\"w-6 h-6\" />\n                          </motion.div>\n                          <span>Start</span>\n                        </>\n                      )}\n                    </motion.div>\n                  </Button>\n\n                  <Button\n                    onClick={resetVisualization}\n                    variant=\"outline\"\n                    className=\"w-full border-2 border-purple-500 bg-purple-500/10 hover:bg-purple-500/30 text-purple-300 font-bold py-6 rounded-xl shadow-[0_0_15px_rgba(168,85,247,0.4)] hover:shadow-[0_0_25px_rgba(168,85,247,0.7)] transition-all duration-300\"\n                  >\n                    <motion.div\n                      className=\"flex items-center justify-center gap-3\"\n                      whileHover={{ scale: 1.05 }}\n                      whileTap={{ scale: 0.95 }}\n                    >\n                      <motion.div\n                        whileHover={{ rotate: -180 }}\n                        transition={{ duration: 0.5 }}\n                      >\n                        <RotateCcw className=\"w-5 h-5\" />\n                      </motion.div>\n                      <span>Reset</span>\n                    </motion.div>\n                  </Button>\n\n                  <Button\n                    onClick={generateRandomArray}\n                    variant=\"outline\"\n                    className=\"w-full border-2 border-green-500 bg-green-500/10 hover:bg-green-500/30 text-green-300 font-bold py-6 rounded-xl shadow-[0_0_15px_rgba(34,197,94,0.4)] hover:shadow-[0_0_25px_rgba(34,197,94,0.7)] transition-all duration-300\"\n                  >\n                    <motion.div\n                      className=\"flex items-center justify-center gap-3\"\n                      whileHover={{ scale: 1.05 }}\n                      whileTap={{ scale: 0.95 }}\n                    >\n                      <motion.div\n                        animate={{ rotate: [0, 10, -10, 0] }}\n                        transition={{ duration: 2, repeat: Infinity }}\n                      >\n                        <BarChart3 className=\"w-5 h-5\" />\n                      </motion.div>\n                      <span>New Array</span>\n                    </motion.div>\n                  </Button>\n                </div>\n              </div>\n            </div>\n\n            <motion.div\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ delay: 0.2 }}\n              className=\"bg-gray-800/50 backdrop-blur-lg rounded-2xl p-6 border border-purple-500/30 shadow-lg shadow-purple-500/20 mt-6\"\n            >\n              <div className=\"flex items-center gap-2 mb-6\">\n                <BarChart3 className=\"w-6 h-6 text-purple-400\" />\n                <h3 className=\"text-xl font-bold text-purple-400\">Statistics</h3>\n              </div>\n              \n              <div className=\"grid grid-cols-3 gap-4\">\n                {/* Comparisons */}\n                <motion.div\n                  className=\"relative overflow-hidden bg-gradient-to-br from-cyan-500/10 to-cyan-500/5 rounded-xl p-4 border border-cyan-500/30\"\n                  whileHover={{ scale: 1.05, boxShadow: '0 0 30px rgba(0, 255, 255, 0.3)' }}\n                  transition={{ type: 'spring', stiffness: 300 }}\n                >\n                  <div className=\"absolute inset-0 bg-gradient-to-br from-cyan-400/20 to-transparent opacity-0 hover:opacity-100 transition-opacity\" />\n                  <div className=\"relative z-10\">\n                    <div className=\"flex items-center gap-2 mb-2\">\n                      <Activity className=\"w-5 h-5 text-cyan-400\" />\n                      <span className=\"text-sm text-cyan-300 font-semibold\">Comparisons</span>\n                    </div>\n                    <motion.div\n                      key={comparisons}\n                      initial={{ scale: 1.5, opacity: 0 }}\n                      animate={{ scale: 1, opacity: 1 }}\n                      className=\"text-3xl font-bold text-white\"\n                    >\n                      {comparisons}\n                    </motion.div>\n                  </div>\n                  <div className=\"absolute -bottom-2 -right-2 w-16 h-16 bg-cyan-400/20 rounded-full blur-xl\" />\n                </motion.div>\n\n                {/* Swaps */}\n                <motion.div\n                  className=\"relative overflow-hidden bg-gradient-to-br from-pink-500/10 to-pink-500/5 rounded-xl p-4 border border-pink-500/30\"\n                  whileHover={{ scale: 1.05, boxShadow: '0 0 30px rgba(255, 0, 102, 0.3)' }}\n                  transition={{ type: 'spring', stiffness: 300 }}\n                >\n                  <div className=\"absolute inset-0 bg-gradient-to-br from-pink-400/20 to-transparent opacity-0 hover:opacity-100 transition-opacity\" />\n                  <div className=\"relative z-10\">\n                    <div className=\"flex items-center gap-2 mb-2\">\n                      <Repeat className=\"w-5 h-5 text-pink-400\" />\n                      <span className=\"text-sm text-pink-300 font-semibold\">Swaps</span>\n                    </div>\n                    <motion.div\n                      key={swaps}\n                      initial={{ scale: 1.5, opacity: 0 }}\n                      animate={{ scale: 1, opacity: 1 }}\n                      className=\"text-3xl font-bold text-white\"\n                    >\n                      {swaps}\n                    </motion.div>\n                  </div>\n                  <div className=\"absolute -bottom-2 -right-2 w-16 h-16 bg-pink-400/20 rounded-full blur-xl\" />\n                </motion.div>\n\n                {/* Progress */}\n                <motion.div\n                  className=\"relative overflow-hidden bg-gradient-to-br from-purple-500/10 to-purple-500/5 rounded-xl p-4 border border-purple-500/30\"\n                  whileHover={{ scale: 1.05, boxShadow: '0 0 30px rgba(168, 85, 247, 0.3)' }}\n                  transition={{ type: 'spring', stiffness: 300 }}\n                >\n                  <div className=\"absolute inset-0 bg-gradient-to-br from-purple-400/20 to-transparent opacity-0 hover:opacity-100 transition-opacity\" />\n                  <div className=\"relative z-10\">\n                    <div className=\"flex items-center gap-2 mb-2\">\n                      <TrendingUp className=\"w-5 h-5 text-purple-400\" />\n                      <span className=\"text-sm text-purple-300 font-semibold\">Progress</span>\n                    </div>\n                    <motion.div\n                      key={currentStep}\n                      initial={{ scale: 1.5, opacity: 0 }}\n                      animate={{ scale: 1, opacity: 1 }}\n                      className=\"text-3xl font-bold text-white\"\n                    >\n                      {steps.length > 0 ? Math.round((currentStep / steps.length) * 100) : 0}%\n                    </motion.div>\n                  </div>\n                  <div className=\"absolute -bottom-2 -right-2 w-16 h-16 bg-purple-400/20 rounded-full blur-xl\" />\n                </motion.div>\n              </div>\n\n              {/* Progress Bar */}\n              <div className=\"mt-6 space-y-2\">\n                <div className=\"flex justify-between text-sm text-gray-400\">\n                  <span>Step {currentStep} of {steps.length}</span>\n                  <span>{steps.length > 0 && currentStep === steps.length ? 'Complete!' : 'In Progress'}</span>\n                </div>\n                <div className=\"relative h-3 bg-gray-700/50 rounded-full overflow-hidden border border-purple-500/30\">\n                  <motion.div\n                    className=\"absolute inset-y-0 left-0 bg-gradient-to-r from-cyan-500 via-purple-500 to-pink-500 rounded-full\"\n                    initial={{ width: 0 }}\n                    animate={{ \n                      width: steps.length > 0 ? `${(currentStep / steps.length) * 100}%` : '0%'\n                    }}\n                    transition={{ duration: 0.3, ease: 'easeOut' }}\n                  >\n                    <div className=\"absolute inset-0 bg-gradient-to-r from-transparent via-white/30 to-transparent animate-pulse\" />\n                  </motion.div>\n                  {steps.length > 0 && currentStep === steps.length && (\n                    <motion.div\n                      className=\"absolute inset-0 bg-gradient-to-r from-cyan-400/50 via-purple-400/50 to-pink-400/50\"\n                      animate={{\n                        opacity: [0.5, 1, 0.5],\n                      }}\n                      transition={{\n                        duration: 1.5,\n                        repeat: Infinity,\n                        ease: 'easeInOut'\n                      }}\n                    />\n                  )}\n                </div>\n              </div>\n            </motion.div>\n          </div>\n\n          <div className=\"lg:col-span-3\">\n            <div className=\"bg-gray-800/50 backdrop-blur-lg rounded-2xl p-8 border border-purple-500/30 shadow-lg shadow-purple-500/20 min-h-[600px]\">\n              {array.length === 0 ? (\n                <div className=\"flex flex-col items-center justify-center h-full space-y-6\">\n                  <motion.div\n                    initial={{ scale: 0 }}\n                    animate={{ scale: 1 }}\n                    transition={{ type: \"spring\", bounce: 0.5 }}\n                    className=\"relative\"\n                  >\n                    <BarChart3 className=\"w-24 h-24 text-cyan-400\" />\n                    <motion.div\n                      className=\"absolute inset-0 bg-cyan-400/20 rounded-full blur-2xl\"\n                      animate={{\n                        scale: [1, 1.2, 1],\n                        opacity: [0.5, 0.8, 0.5]\n                      }}\n                      transition={{\n                        duration: 2,\n                        repeat: Infinity,\n                        ease: \"easeInOut\"\n                      }}\n                    />\n                  </motion.div>\n                  <motion.p\n                    initial={{ opacity: 0, y: 20 }}\n                    animate={{ opacity: 1, y: 0 }}\n                    transition={{ delay: 0.2 }}\n                    className=\"text-gray-400 text-lg\"\n                  >\n                    Click \"Generate Array\" to start visualizing\n                  </motion.p>\n                </div>\n              ) : (\n                <div className=\"h-full flex items-end justify-center gap-1 px-4\">\n                  {array.map((element, index) => {\n                    const maxValue = Math.max(...array.map(el => el.value));\n                    const heightPercentage = (element.value / maxValue) * 100;\n                    \n                    let barColor = NEON_COLORS[index % NEON_COLORS.length];\n                    let glowIntensity = 0.3;\n                    let scale = 1;\n                    \n                    if (element.isComparing) {\n                      barColor = '#ffff00';\n                      glowIntensity = 0.8;\n                      scale = 1.05;\n                    } else if (element.isSwapping) {\n                      barColor = '#ff0066';\n                      glowIntensity = 1;\n                      scale = 1.1;\n                    } else if (element.isSorted) {\n                      barColor = '#00ff00';\n                      glowIntensity = 0.6;\n                    }\n\n                    return (\n                      <motion.div\n                        key={element.id}\n                        className=\"relative flex-1 min-w-[4px] max-w-[60px] rounded-t-lg\"\n                        style={{\n                          height: `${heightPercentage}%`,\n                          backgroundColor: barColor,\n                          boxShadow: `0 0 ${20 * glowIntensity}px ${barColor}, 0 0 ${40 * glowIntensity}px ${barColor}`,\n                        }}\n                        initial={{ height: 0, opacity: 0 }}\n                        animate={{\n                          height: `${heightPercentage}%`,\n                          opacity: 1,\n                          scale: scale,\n                          y: element.isSwapping ? [-10, 0] : 0\n                        }}\n                        transition={{\n                          height: { duration: 0.3, ease: \"easeOut\" },\n                          scale: { duration: 0.2 },\n                          y: { duration: 0.3, ease: \"easeInOut\" },\n                          opacity: { duration: 0.2 }\n                        }}\n                      >\n                        {/* Glow effect overlay */}\n                        <motion.div\n                          className=\"absolute inset-0 rounded-t-lg\"\n                          style={{\n                            backgroundColor: barColor,\n                            opacity: 0.3\n                          }}\n                          animate={{\n                            opacity: element.isComparing || element.isSwapping ? [0.3, 0.7, 0.3] : 0.3\n                          }}\n                          transition={{\n                            duration: 0.5,\n                            repeat: element.isComparing || element.isSwapping ? Infinity : 0\n                          }}\n                        />\n                        \n                        {/* Trail effect for swapping */}\n                        {element.isSwapping && (\n                          <motion.div\n                            className=\"absolute inset-0 rounded-t-lg\"\n                            style={{\n                              backgroundColor: barColor,\n                              filter: 'blur(8px)'\n                            }}\n                            initial={{ opacity: 0.8, scale: 1 }}\n                            animate={{ opacity: 0, scale: 1.5 }}\n                            transition={{ duration: 0.5, repeat: Infinity }}\n                          />\n                        )}\n                        \n                        {/* Value label */}\n                        {arraySize[0] <= 30 && (\n                          <motion.div\n                            className=\"absolute -top-8 left-1/2 transform -translate-x-1/2 text-xs font-bold whitespace-nowrap\"\n                            style={{ color: barColor }}\n                            initial={{ opacity: 0 }}\n                            animate={{ opacity: 1 }}\n                            transition={{ delay: 0.1 }}\n                          >\n                            {element.value}\n                          </motion.div>\n                        )}\n                      </motion.div>\n                    );\n                  })}\n                </div>\n              )}\n                {array.length === 0 ? (\n                  <motion.div\n                    initial={{ opacity: 0, scale: 0.8 }}\n                    animate={{ opacity: 1, scale: 1 }}\n                    className=\"absolute inset-0 flex items-center justify-center\"\n                  >\n                    <div className=\"text-center space-y-4\">\n                      <motion.div\n                        animate={{\n                          rotate: [0, 360],\n                          scale: [1, 1.2, 1]\n                        }}\n                        transition={{ duration: 3, repeat: Infinity }}\n                        className=\"inline-block\"\n                      >\n                        <BarChart3 className=\"w-16 h-16 text-cyan-400\" />\n                      </motion.div>\n                      <p className=\"text-gray-400 text-lg\">Generate an array to start visualizing</p>\n                    </div>\n                  </motion.div>\n                ) : (\n                  array.map((element, index) => {\n                    const colorIndex = index % NEON_COLORS.length;\n                    const neonColor = NEON_COLORS[colorIndex];\n                    const heightPercentage = (element.value / 100) * 100;\n                    \n                    return (\n                      <motion.div\n                        key={element.id}\n                        layout\n                        initial={{ opacity: 0, y: 50, scale: 0.5 }}\n                        animate={{\n                          opacity: 1,\n                          y: 0,\n                          scale: element.isSwapping ? 1.1 : 1,\n                          height: `${heightPercentage}%`,\n                          boxShadow: element.isComparing\n                            ? `0 0 30px ${neonColor}, 0 0 60px ${neonColor}, 0 0 90px ${neonColor}`\n                            : element.isSwapping\n                            ? `0 0 40px ${neonColor}, 0 0 80px ${neonColor}`\n                            : element.isSorted\n                            ? `0 0 20px #00ff00, 0 0 40px #00ff00`\n                            : `0 0 15px ${neonColor}`,\n                        }}\n                        transition={{\n                          layout: { duration: 0.3, type: \"spring\", bounce: 0.2 },\n                          height: { duration: 0.4, ease: \"easeInOut\" },\n                          scale: { duration: 0.2 },\n                          boxShadow: { duration: 0.3 },\n                          opacity: { duration: 0.5, delay: index * 0.02 }\n                        }}\n                        className=\"relative flex-1 min-w-[8px] max-w-[60px] rounded-t-lg\"\n                        style={{\n                          backgroundColor: element.isSorted\n                            ? '#00ff00'\n                            : element.isComparing\n                            ? '#ffff00'\n                            : element.isSwapping\n                            ? '#ff00ff'\n                            : neonColor,\n                          minHeight: '20px'\n                        }}\n                      >\n                        {/* Glow overlay */}\n                        <motion.div\n                          className=\"absolute inset-0 rounded-t-lg\"\n                          animate={{\n                            opacity: element.isComparing || element.isSwapping ? [0.3, 0.7, 0.3] : 0.2\n                          }}\n                          transition={{\n                            duration: 0.8,\n                            repeat: element.isComparing || element.isSwapping ? Infinity : 0\n                          }}\n                          style={{\n                            background: `linear-gradient(to top, transparent, ${neonColor})`,\n                          }}\n                        />\n                        \n                        {/* Trail effect during swaps */}\n                        {element.isSwapping && (\n                          <>\n                            <motion.div\n                              className=\"absolute inset-0 rounded-t-lg\"\n                              initial={{ opacity: 0.8, scale: 1 }}\n                              animate={{ opacity: 0, scale: 1.5 }}\n                              transition={{ duration: 0.6, repeat: Infinity }}\n                              style={{\n                                backgroundColor: neonColor,\n                                filter: 'blur(8px)'\n                              }}\n                            />\n                            <motion.div\n                              className=\"absolute -top-2 left-1/2 -translate-x-1/2\"\n                              animate={{\n                                y: [-10, -20, -10],\n                                opacity: [0, 1, 0]\n                              }}\n                              transition={{ duration: 1, repeat: Infinity }}\n                            >\n                              <div \n                                className=\"w-2 h-2 rounded-full\"\n                                style={{ backgroundColor: neonColor, boxShadow: `0 0 10px ${neonColor}` }}\n                              />\n                            </motion.div>\n                          </>\n                        )}\n                        \n                        {/* Pulse effect for comparing */}\n                        {element.isComparing && (\n                          <motion.div\n                            className=\"absolute inset-0 rounded-t-lg border-2\"\n                            animate={{\n                              borderColor: ['#ffff00', '#ffffff', '#ffff00'],\n                              scale: [1, 1.05, 1]\n                            }}\n                            transition={{ duration: 0.6, repeat: Infinity }}\n                            style={{ borderColor: '#ffff00' }}\n                          />\n                        )}\n                        \n                        {/* Value label */}\n                        <motion.div\n                          className=\"absolute -bottom-6 left-1/2 -translate-x-1/2 text-xs font-mono font-bold whitespace-nowrap\"\n                          animate={{\n                            color: element.isSorted\n                              ? '#00ff00'\n                              : element.isComparing\n                              ? '#ffff00'\n                              : element.isSwapping\n                              ? '#ff00ff'\n                              : '#ffffff',\n                            scale: element.isComparing || element.isSwapping ? [1, 1.2, 1] : 1\n                          }}\n                          transition={{ duration: 0.3 }}\n                        >\n                          {element.value}\n                        </motion.div>\n                        \n                        {/* Sorted checkmark */}\n                        {element.isSorted && (\n                          <motion.div\n                            initial={{ scale: 0, rotate: -180 }}\n                            animate={{ scale: 1, rotate: 0 }}\n                            className=\"absolute -top-8 left-1/2 -translate-x-1/2\"\n                          >\n                            <div className=\"w-6 h-6 rounded-full bg-green-500 flex items-center justify-center shadow-[0_0_20px_rgba(0,255,0,0.8)]\">\n                              <svg className=\"w-4 h-4 text-white\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={3} d=\"M5 13l4 4L19 7\" />\n                              </svg>\n                            </div>\n                          </motion.div>\n                        )}\n                        \n                        {/* Particle effects for swapping */}\n                        {element.isSwapping && (\n                          <>\n                            {[...Array(3)].map((_, i) => (\n                              <motion.div\n                                key={i}\n                                className=\"absolute top-0 left-1/2\"\n                                initial={{ x: 0, y: 0, opacity: 1 }}\n                                animate={{\n                                  x: [0, (Math.random() - 0.5) * 40],\n                                  y: [0, -30 - Math.random() * 20],\n                                  opacity: [1, 0]\n                                }}\n                                transition={{\n                                  duration: 0.8,\n                                  delay: i * 0.1,\n                                  repeat: Infinity\n                                }}\n                              >\n                                <div\n                                  className=\"w-1 h-1 rounded-full\"\n                                  style={{\n                                    backgroundColor: neonColor,\n                                    boxShadow: `0 0 6px ${neonColor}`\n                                  }}\n                                />\n                              </motion.div>\n                            ))}\n                          </>\n                        )}\n                      </motion.div>\n                    );\n                  })\n                )}</parameter>\n</invoke>\n              </div>\n            </div>\n\n            <motion.div\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ delay: 0.3, duration: 0.5 }}\n              className=\"mt-6 bg-gray-800/50 backdrop-blur-lg rounded-xl p-6 border border-purple-500/30 shadow-lg shadow-purple-500/10\"\n            >\n              <h3 className=\"text-purple-400 font-semibold mb-4 flex items-center gap-2\">\n                <BarChart3 className=\"w-5 h-5\" />\n                Legend\n              </h3>\n              <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n                <motion.div\n                  className=\"flex items-center gap-3 p-3 rounded-lg bg-gray-700/30 border border-gray-600/50\"\n                  whileHover={{ scale: 1.05, borderColor: 'rgba(100, 200, 255, 0.5)' }}\n                  transition={{ type: \"spring\", stiffness: 300 }}\n                >\n                  <motion.div\n                    className=\"w-6 h-6 rounded bg-gradient-to-br from-cyan-400 to-blue-500 shadow-lg\"\n                    animate={{\n                      boxShadow: [\n                        '0 0 10px rgba(0, 255, 255, 0.5)',\n                        '0 0 20px rgba(0, 255, 255, 0.8)',\n                        '0 0 10px rgba(0, 255, 255, 0.5)'\n                      ]\n                    }}\n                    transition={{ duration: 2, repeat: Infinity }}\n                  />\n                  <div>\n                    <div className=\"text-sm font-semibold text-white\">Default</div>\n                    <div className=\"text-xs text-gray-400\">Unsorted</div>\n                  </div>\n                </motion.div>\n\n                <motion.div\n                  className=\"flex items-center gap-3 p-3 rounded-lg bg-gray-700/30 border border-gray-600/50\"\n                  whileHover={{ scale: 1.05, borderColor: 'rgba(255, 255, 0, 0.5)' }}\n                  transition={{ type: \"spring\", stiffness: 300 }}\n                >\n                  <motion.div\n                    className=\"w-6 h-6 rounded bg-gradient-to-br from-yellow-400 to-orange-500 shadow-lg\"\n                    animate={{\n                      boxShadow: [\n                        '0 0 10px rgba(255, 255, 0, 0.5)',\n                        '0 0 20px rgba(255, 255, 0, 0.8)',\n                        '0 0 10px rgba(255, 255, 0, 0.5)'\n                      ],\n                      scale: [1, 1.1, 1]\n                    }}\n                    transition={{ duration: 1.5, repeat: Infinity }}\n                  />\n                  <div>\n                    <div className=\"text-sm font-semibold text-white\">Comparing</div>\n                    <div className=\"text-xs text-gray-400\">Active</div>\n                  </div>\n                </motion.div>\n\n                <motion.div\n                  className=\"flex items-center gap-3 p-3 rounded-lg bg-gray-700/30 border border-gray-600/50\"\n                  whileHover={{ scale: 1.05, borderColor: 'rgba(255, 0, 255, 0.5)' }}\n                  transition={{ type: \"spring\", stiffness: 300 }}\n                >\n                  <motion.div\n                    className=\"w-6 h-6 rounded bg-gradient-to-br from-pink-500 to-purple-600 shadow-lg\"\n                    animate={{\n                      boxShadow: [\n                        '0 0 10px rgba(255, 0, 255, 0.5)',\n                        '0 0 25px rgba(255, 0, 255, 0.9)',\n                        '0 0 10px rgba(255, 0, 255, 0.5)'\n                      ],\n                      scale: [1, 1.15, 1],\n                      rotate: [0, 5, -5, 0]\n                    }}\n                    transition={{ duration: 1, repeat: Infinity }}\n                  />\n                  <div>\n                    <div className=\"text-sm font-semibold text-white\">Swapping</div>\n                    <div className=\"text-xs text-gray-400\">Moving</div>\n                  </div>\n                </motion.div>\n\n                <motion.div\n                  className=\"flex items-center gap-3 p-3 rounded-lg bg-gray-700/30 border border-gray-600/50\"\n                  whileHover={{ scale: 1.05, borderColor: 'rgba(0, 255, 0, 0.5)' }}\n                  transition={{ type: \"spring\", stiffness: 300 }}\n                >\n                  <motion.div\n                    className=\"w-6 h-6 rounded bg-gradient-to-br from-green-400 to-emerald-600 shadow-lg\"\n                    animate={{\n                      boxShadow: [\n                        '0 0 10px rgba(0, 255, 0, 0.5)',\n                        '0 0 20px rgba(0, 255, 0, 0.8)',\n                        '0 0 10px rgba(0, 255, 0, 0.5)'\n                      ]\n                    }}\n                    transition={{ duration: 2, repeat: Infinity }}\n                  />\n                  <div>\n                    <div className=\"text-sm font-semibold text-white\">Sorted</div>\n                    <div className=\"text-xs text-gray-400\">Complete</div>\n                  </div>\n                </motion.div>\n              </div>\n            </motion.div>\n          </div>\n        </div>\n\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ delay: 0.4 }}\n          className=\"bg-gray-800/50 backdrop-blur-lg rounded-2xl p-6 border border-purple-500/30 shadow-lg shadow-purple-500/20\"\n        >\n          <div className=\"space-y-4\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center gap-3\">\n                <motion.div\n                  animate={{\n                    rotate: [0, 360],\n                  }}\n                  transition={{ duration: 3, repeat: Infinity, ease: \"linear\" }}\n                  className=\"w-8 h-8 rounded-full bg-gradient-to-r from-cyan-400 to-purple-500 flex items-center justify-center\"\n                >\n                  <BarChart3 className=\"w-4 h-4 text-white\" />\n                </motion.div>\n                <h3 className=\"text-cyan-400 font-bold text-lg\">Timeline Control</h3>\n              </div>\n              <div className=\"flex items-center gap-2 px-4 py-2 bg-gray-700/50 rounded-lg border border-cyan-500/30\">\n                <span className=\"text-gray-400 text-sm\">Step:</span>\n                <motion.span\n                  key={currentStep}\n                  initial={{ scale: 1.3, color: '#00ffff' }}\n                  animate={{ scale: 1, color: '#ffffff' }}\n                  className=\"text-white font-bold font-mono\"\n                >\n                  {currentStep}\n                </motion.span>\n                <span className=\"text-gray-500\">/</span>\n                <span className=\"text-gray-400 font-mono\">{steps.length}</span>\n              </div>\n            </div>\n\n            {/* Progress Bar */}\n            <div className=\"relative h-3 bg-gray-700/50 rounded-full overflow-hidden border border-gray-600/50\">\n              <motion.div\n                className=\"absolute inset-y-0 left-0 bg-gradient-to-r from-cyan-500 via-purple-500 to-pink-500 rounded-full\"\n                initial={{ width: 0 }}\n                animate={{\n                  width: steps.length > 0 ? `${(currentStep / steps.length) * 100}%` : '0%',\n                }}\n                transition={{ duration: 0.3, ease: \"easeOut\" }}\n              >\n                <motion.div\n                  className=\"absolute inset-0 bg-gradient-to-r from-transparent via-white/30 to-transparent\"\n                  animate={{\n                    x: ['-100%', '200%'],\n                  }}\n                  transition={{\n                    duration: 1.5,\n                    repeat: Infinity,\n                    ease: \"linear\",\n                  }}\n                />\n              </motion.div>\n              \n              {/* Glow effect */}\n              <motion.div\n                className=\"absolute inset-0 rounded-full\"\n                animate={{\n                  boxShadow: [\n                    '0 0 10px rgba(0, 255, 255, 0.3)',\n                    '0 0 20px rgba(168, 85, 247, 0.5)',\n                    '0 0 10px rgba(0, 255, 255, 0.3)',\n                  ],\n                }}\n                transition={{ duration: 2, repeat: Infinity }}\n              />\n            </div>\n\n            {/* Timeline Scrubber */}\n            <div className=\"relative pt-2\">\n              <input\n                type=\"range\"\n                min={0}\n                max={Math.max(0, steps.length - 1)}\n                value={currentStep}\n                onChange={(e) => {\n                  const newStep = parseInt(e.target.value);\n                  setCurrentStep(newStep);\n                  if (steps[newStep]) {\n                    setArray(steps[newStep].array);\n                  }\n                }}\n                disabled={isPlaying || steps.length === 0}\n                className=\"w-full h-2 bg-transparent appearance-none cursor-pointer disabled:cursor-not-allowed\n                  [&::-webkit-slider-track]:h-2 [&::-webkit-slider-track]:bg-gray-700/50 [&::-webkit-slider-track]:rounded-full [&::-webkit-slider-track]:border [&::-webkit-slider-track]:border-gray-600/50\n                  [&::-webkit-slider-thumb]:appearance-none [&::-webkit-slider-thumb]:w-5 [&::-webkit-slider-thumb]:h-5 [&::-webkit-slider-thumb]:rounded-full [&::-webkit-slider-thumb]:bg-gradient-to-r [&::-webkit-slider-thumb]:from-cyan-400 [&::-webkit-slider-thumb]:to-purple-500 [&::-webkit-slider-thumb]:border-2 [&::-webkit-slider-thumb]:border-white [&::-webkit-slider-thumb]:shadow-lg [&::-webkit-slider-thumb]:shadow-cyan-400/50 [&::-webkit-slider-thumb]:transition-all [&::-webkit-slider-thumb]:hover:scale-125 [&::-webkit-slider-thumb]:hover:shadow-xl [&::-webkit-slider-thumb]:hover:shadow-cyan-400/70\n                  [&::-moz-range-track]:h-2 [&::-moz-range-track]:bg-gray-700/50 [&::-moz-range-track]:rounded-full [&::-moz-range-track]:border [&::-moz-range-track]:border-gray-600/50\n                  [&::-moz-range-thumb]:w-5 [&::-moz-range-thumb]:h-5 [&::-moz-range-thumb]:rounded-full [&::-moz-range-thumb]:bg-gradient-to-r [&::-moz-range-thumb]:from-cyan-400 [&::-moz-range-thumb]:to-purple-500 [&::-moz-range-thumb]:border-2 [&::-moz-range-thumb]:border-white [&::-moz-range-thumb]:shadow-lg [&::-moz-range-thumb]:shadow-cyan-400/50 [&::-moz-range-thumb]:transition-all [&::-moz-range-thumb]:hover:scale-125\"\n              />\n              \n              {/* Step markers */}\n              {steps.length > 0 && steps.length <= 50 && (\n                <div className=\"absolute top-0 left-0 right-0 flex justify-between pointer-events-none\">\n                  {steps.map((_, index) => (\n                    <motion.div\n                      key={index}\n                      initial={{ scale: 0 }}\n                      animate={{ scale: 1 }}\n                      transition={{ delay: index * 0.01 }}\n                      className={`w-1 h-1 rounded-full transition-all ${\n                        index <= currentStep\n                          ? 'bg-cyan-400 shadow-[0_0_4px_rgba(0,255,255,0.8)]'\n                          : 'bg-gray-600'\n                      }`}\n                    />\n                  ))}\n                </div>\n              )}\n            </div>\n\n            {/* Control Info */}\n            <div className=\"flex items-center justify-between text-xs\">\n              <div className=\"flex items-center gap-2 text-gray-400\">\n                <div className=\"w-2 h-2 rounded-full bg-cyan-400 shadow-[0_0_6px_rgba(0,255,255,0.8)]\" />\n                <span>Drag to navigate steps</span>\n              </div>\n              <div className=\"text-gray-500\">\n                {steps.length === 0 ? 'Generate steps to begin' : currentStep >= steps.length - 1 ? 'Sorting complete!' : 'In progress...'}\n              </div>\n            </div>\n\n            {/* Quick Navigation Buttons */}\n            <div className=\"flex gap-2 pt-2\">\n              <Button\n                onClick={() => {\n                  setCurrentStep(0);\n                  if (steps[0]) {\n                    setArray(steps[0].array);\n                  }\n                }}\n                disabled={isPlaying || steps.length === 0 || currentStep === 0}\n                variant=\"outline\"\n                size=\"sm\"\n                className=\"flex-1 border-cyan-500/30 bg-cyan-500/5 hover:bg-cyan-500/10 text-cyan-300 text-xs\"\n              >\n                \u23ee First\n              </Button>\n              <Button\n                onClick={() => {\n                  const newStep = Math.max(0, currentStep - 1);\n                  setCurrentStep(newStep);\n                  if (steps[newStep]) {\n                    setArray(steps[newStep].array);\n                  }\n                }}\n                disabled={isPlaying || steps.length === 0 || currentStep === 0}\n                variant=\"outline\"\n                size=\"sm\"\n                className=\"flex-1 border-purple-500/30 bg-purple-500/5 hover:bg-purple-500/10 text-purple-300 text-xs\"\n              >\n                \u23ea Prev\n              </Button>\n              <Button\n                onClick={() => {\n                  const newStep = Math.min(steps.length - 1, currentStep + 1);\n                  setCurrentStep(newStep);\n                  if (steps[newStep]) {\n                    setArray(steps[newStep].array);\n                  }\n                }}\n                disabled={isPlaying || steps.length === 0 || currentStep >= steps.length - 1}\n                variant=\"outline\"\n                size=\"sm\"\n                className=\"flex-1 border-purple-500/30 bg-purple-500/5 hover:bg-purple-500/10 text-purple-300 text-xs\"\n              >\n                Next \u23e9\n              </Button>\n              <Button\n                onClick={() => {\n                  const lastStep = steps.length - 1;\n                  setCurrentStep(lastStep);\n                  if (steps[lastStep]) {\n                    setArray(steps[lastStep].array);\n                  }\n                }}\n                disabled={isPlaying || steps.length === 0 || currentStep >= steps.length - 1}\n                variant=\"outline\"\n                size=\"sm\"\n                className=\"flex-1 border-cyan-500/30 bg-cyan-500/5 hover:bg-cyan-500/10 text-cyan-300 text-xs\"\n              >\n                Last \u23ed\n              </Button>\n            </div>\n          </div>\n        </motion.div>\n      </div>\n    </div>\n  );\n}",
  "error": null,
  "overall_score": 41,
  "code_quality_score": 12,
  "architecture_score": 10,
  "performance_score": 8,
  "accessibility_score": 11,
  "metadata": {
    "document_id": "eval_room_7ea0bee3f011",
    "prompt_category": "creative",
    "prompt_complexity": 9.0
  },
  "raw_response": {
    "document_id": "eval_room_7ea0bee3f011",
    "mode": "parallel",
    "prompt": "Build a captivating algorithm visualizer with neon colored bars, smooth height transitions, glowing comparison indicators, trail effects during swaps, and a futuristic dashboard design with animated controls",
    "content": "import { useState, useCallback } from 'react';import { useEffect, useRef } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Card } from '@/components/ui/card';\nimport { Slider } from '@/components/ui/slider';\nimport { Play, Pause, RotateCcw, Zap, BarChart3 } from 'lucide-react';\nimport { TrendingUp, Repeat, Activity } from 'lucide-react';\nimport { motion } from 'framer-motion';\n\ninterface ArrayElement {\n  value: number;\n  id: string;\n  isComparing?: boolean;\n  isSwapping?: boolean;\n  isSorted?: boolean;\n}\n\ninterface AlgorithmStep {\n  array: ArrayElement[];\n  comparingIndices: number[];\n  swappingIndices: number[];\n  sortedIndices: number[];\n}\n\ntype AlgorithmType = 'bubble' | 'quick' | 'merge' | 'insertion';\n\nconst NEON_COLORS = [\n  '#00ffff',\n  '#ff00ff', \n  '#00ff00',\n  '#ffff00',\n  '#ff0066',\n  '#00ffaa'\n];\n\nconst mockAlgorithms = [\n  { id: 'bubble', name: 'Bubble Sort', complexity: 'O(n\u00b2)' },\n  { id: 'quick', name: 'Quick Sort', complexity: 'O(n log n)' },\n  { id: 'merge', name: 'Merge Sort', complexity: 'O(n log n)' },\n  { id: 'insertion', name: 'Insertion Sort', complexity: 'O(n\u00b2)' }\n];\n\nexport default function AlgorithmVisualizer() {\n  const [array, setArray] = useState<ArrayElement[]>([]);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [speed, setSpeed] = useState([50]);\n  const [arraySize, setArraySize] = useState([20]);\n  const [selectedAlgorithm, setSelectedAlgorithm] = useState<AlgorithmType>('bubble');\n  const [currentStep, setCurrentStep] = useState(0);\n  const [steps, setSteps] = useState<AlgorithmStep[]>([]);\n  const [comparisons, setComparisons] = useState(0);\n  const [swaps, setSwaps] = useState(0);\n\n  const generateRandomArray = useCallback(() => {\n    const newArray: ArrayElement[] = Array.from({ length: arraySize[0] }, (_, i) => ({\n      value: Math.floor(Math.random() * 100) + 5,\n      id: `element-${i}-${Date.now()}`,\n      isComparing: false,\n      isSwapping: false,\n      isSorted: false\n    }));\n    setArray(newArray);\n    setSteps([]);\n    setCurrentStep(0);\n    setIsPlaying(false);\n  }, [arraySize]);\n\n  const resetVisualization = useCallback(() => {\n    setIsPlaying(false);\n    setCurrentStep(0);\n    setSteps([]);\n    generateRandomArray();\n    \n  }, [generateRandomArray]);\n\n  const startVisualization = useCallback(() => {\n    if (steps.length === 0 || currentStep >= steps.length) return;\n    \n    setIsPlaying(true);\n    \n    const intervalId = setInterval(() => {\n      setCurrentStep((prevStep) => {\n        const nextStep = prevStep + 1;\n        \n        if (nextStep >= steps.length) {\n          setIsPlaying(false);\n          clearInterval(intervalId);\n          return prevStep;\n        }\n        \n        const stepData = steps[nextStep];\n        setArray(stepData.array);\n        \n        return nextStep;\n      });\n    }, 1000 - speed[0] * 9);\n    \n    return () => clearInterval(intervalId);\n  }, [steps, speed, currentStep]);\n\n  const pauseVisualization = useCallback(() => {    setIsPlaying(false);\n  }, []);\n\n  useEffect(() => {\n    generateRandomArray();\n  }, [generateRandomArray]);\n\n  useEffect(() => {\n    if (!isPlaying || steps.length === 0 || currentStep >= steps.length) {\n      if (currentStep >= steps.length && steps.length > 0) {\n        setIsPlaying(false);\n      }\n      return;\n    }\n\n    const delay = 1000 - (speed[0] * 9);\n    const timer = setTimeout(() => {\n      const step = steps[currentStep];\n      setArray(step.array);\n      setCurrentStep(prev => prev + 1);\n    }, delay);\n\n    return () => clearTimeout(timer);\n  }, [isPlaying, currentStep, steps, speed]);\n\n  const generateSortingSteps = useCallback((algorithm: AlgorithmType) => {\n        if (array.length === 0) return;\n\n    const steps: AlgorithmStep[] = [];\n    const arr = [...array];\n\n    const createStep = (\n      currentArray: ArrayElement[],\n      comparing: number[] = [],\n      swapping: number[] = [],\n      sorted: number[] = []\n    ): AlgorithmStep => ({\n      array: currentArray.map((el, idx) => ({\n        ...el,\n        isComparing: comparing.includes(idx),\n        isSwapping: swapping.includes(idx),\n        isSorted: sorted.includes(idx)\n      })),\n      comparingIndices: comparing,\n      swappingIndices: swapping,\n      sortedIndices: sorted\n    });\n\n    // Initial state\n    steps.push(createStep([...arr]));\n\n    switch (algorithm) {\n      case 'bubble': {\n        const sortedIndices: number[] = [];\n        for (let i = 0; i < arr.length - 1; i++) {\n          for (let j = 0; j < arr.length - i - 1; j++) {\n            // Comparing\n            steps.push(createStep([...arr], [j, j + 1], [], sortedIndices));\n            \n            if (arr[j].value > arr[j + 1].value) {\n              // Swapping\n              steps.push(createStep([...arr], [], [j, j + 1], sortedIndices));\n              [arr[j], arr[j + 1]] = [arr[j + 1], arr[j]];\n              steps.push(createStep([...arr], [], [], sortedIndices));\n            }\n          }\n          sortedIndices.push(arr.length - i - 1);\n          steps.push(createStep([...arr], [], [], sortedIndices));\n        }\n        sortedIndices.push(0);\n        steps.push(createStep([...arr], [], [], sortedIndices));\n        break;\n      }\n\n      case 'insertion': {\n        const sortedIndices: number[] = [0];\n        steps.push(createStep([...arr], [], [], [0]));\n        \n        for (let i = 1; i < arr.length; i++) {\n          const key = arr[i];\n          let j = i - 1;\n          \n          steps.push(createStep([...arr], [i], [], sortedIndices));\n          \n          while (j >= 0 && arr[j].value > key.value) {\n            steps.push(createStep([...arr], [j, j + 1], [], sortedIndices));\n            steps.push(createStep([...arr], [], [j, j + 1], sortedIndices));\n            arr[j + 1] = arr[j];\n            steps.push(createStep([...arr], [], [], sortedIndices));\n            j--;\n          }\n          \n          arr[j + 1] = key;\n          sortedIndices.push(i);\n          steps.push(createStep([...arr], [], [], sortedIndices));\n        }\n        break;\n      }\n\n      case 'quick': {\n        const sortedIndices: number[] = [];\n        \n        const partition = (low: number, high: number): number => {\n          const pivot = arr[high];\n          steps.push(createStep([...arr], [high], [], sortedIndices));\n          let i = low - 1;\n\n          for (let j = low; j < high; j++) {\n            steps.push(createStep([...arr], [j, high], [], sortedIndices));\n            \n            if (arr[j].value < pivot.value) {\n              i++;\n              if (i !== j) {\n                steps.push(createStep([...arr], [], [i, j], sortedIndices));\n                [arr[i], arr[j]] = [arr[j], arr[i]];\n                steps.push(createStep([...arr], [], [], sortedIndices));\n              }\n            }\n          }\n\n          steps.push(createStep([...arr], [], [i + 1, high], sortedIndices));\n          [arr[i + 1], arr[high]] = [arr[high], arr[i + 1]];\n          sortedIndices.push(i + 1);\n          steps.push(createStep([...arr], [], [], sortedIndices));\n          \n          return i + 1;\n        };\n\n        const quickSort = (low: number, high: number) => {\n          if (low < high) {\n            const pi = partition(low, high);\n            quickSort(low, pi - 1);\n            quickSort(pi + 1, high);\n          } else if (low === high) {\n            sortedIndices.push(low);\n            steps.push(createStep([...arr], [], [], sortedIndices));\n          }\n        };\n\n        quickSort(0, arr.length - 1);\n        break;\n      }\n\n      case 'merge': {\n        const sortedIndices: number[] = [];\n        \n        const merge = (left: number, mid: number, right: number) => {\n          const leftArr = arr.slice(left, mid + 1);\n          const rightArr = arr.slice(mid + 1, right + 1);\n          \n          let i = 0, j = 0, k = left;\n          \n          while (i < leftArr.length && j < rightArr.length) {\n            const leftIdx = left + i;\n            const rightIdx = mid + 1 + j;\n            steps.push(createStep([...arr], [leftIdx, rightIdx], [], sortedIndices));\n            \n            if (leftArr[i].value <= rightArr[j].value) {\n              steps.push(createStep([...arr], [], [k], sortedIndices));\n              arr[k] = leftArr[i];\n              steps.push(createStep([...arr], [], [], sortedIndices));\n              i++;\n            } else {\n              steps.push(createStep([...arr], [], [k], sortedIndices));\n              arr[k] = rightArr[j];\n              steps.push(createStep([...arr], [], [], sortedIndices));\n              j++;\n            }\n            k++;\n          }\n          \n          while (i < leftArr.length) {\n            steps.push(createStep([...arr], [], [k], sortedIndices));\n            arr[k] = leftArr[i];\n            steps.push(createStep([...arr], [], [], sortedIndices));\n            i++;\n            k++;\n          }\n          \n          while (j < rightArr.length) {\n            steps.push(createStep([...arr], [], [k], sortedIndices));\n            arr[k] = rightArr[j];\n            steps.push(createStep([...arr], [], [], sortedIndices));\n            j++;\n            k++;\n          }\n        };\n\n        const mergeSort = (left: number, right: number) => {\n          if (left < right) {\n            const mid = Math.floor((left + right) / 2);\n            mergeSort(left, mid);\n            mergeSort(mid + 1, right);\n            merge(left, mid, right);\n          }\n        };\n\n        mergeSort(0, arr.length - 1);\n        \n        for (let i = 0; i < arr.length; i++) {\n          sortedIndices.push(i);\n        }\n        steps.push(createStep([...arr], [], [], sortedIndices));\n        break;\n      }\n    }\n\n    setSteps(steps);\n    setCurrentStep(0);\n    setIsPlaying(false);\n  }, [array]);\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-gray-900 via-purple-900 to-gray-900 p-8\">\n      <div className=\"max-w-7xl mx-auto space-y-8\">\n        <motion.div\n          initial={{ opacity: 0, y: -20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.6 }}\n          className=\"text-center space-y-4\"\n        >\n          <div className=\"relative inline-block\">\n            <motion.h1\n              className=\"text-6xl font-bold bg-gradient-to-r from-cyan-400 via-purple-400 to-pink-400 bg-clip-text text-transparent\"\n              animate={{\n                textShadow: [\n                  '0 0 20px rgba(0, 255, 255, 0.5)',\n                  '0 0 40px rgba(255, 0, 255, 0.5)',\n                  '0 0 20px rgba(0, 255, 255, 0.5)'\n                ]\n              }}\n              transition={{ duration: 2, repeat: Infinity }}\n            >\n              Algorithm Visualizer\n            </motion.h1>\n          </div>\n          \n          <div className=\"flex items-center justify-center gap-4\">\n            <motion.div\n              initial={{ scale: 0.9, opacity: 0 }}\n              animate={{ scale: 1, opacity: 1 }}\n              transition={{ delay: 0.2 }}\n              className=\"flex items-center gap-2 px-6 py-3 bg-gray-800/50 backdrop-blur-sm rounded-lg border border-cyan-500/30\"\n            >\n              <Zap className=\"w-5 h-5 text-cyan-400\" />\n              <span className=\"text-xl font-semibold text-white\">\n                {mockAlgorithms.find(a => a.id === selectedAlgorithm)?.name}\n              </span>\n            </motion.div>\n            \n            <motion.div\n              initial={{ scale: 0.9, opacity: 0 }}\n              animate={{ scale: 1, opacity: 1 }}\n              transition={{ delay: 0.3 }}\n              className=\"relative px-4 py-2 rounded-lg overflow-hidden\"\n            >\n              <motion.div\n                className=\"absolute inset-0 bg-gradient-to-r from-purple-500/20 to-pink-500/20\"\n                animate={{\n                  opacity: [0.5, 1, 0.5]\n                }}\n                transition={{ duration: 2, repeat: Infinity }}\n              />\n              <div className=\"relative flex items-center gap-2\">\n                <BarChart3 className=\"w-4 h-4 text-purple-400\" />\n                <span className=\"text-sm font-mono text-purple-300\">\n                  {mockAlgorithms.find(a => a.id === selectedAlgorithm)?.complexity}\n                </span>\n              </div>\n            </motion.div>\n          </div>\n        </motion.div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-6\">\n          <div className=\"lg:col-span-1 space-y-6\">\n            <motion.div\n              initial={{ opacity: 0, x: -50 }}\n              animate={{ opacity: 1, x: 0 }}\n              className=\"bg-gray-800/50 backdrop-blur-lg rounded-2xl p-6 border border-cyan-500/30 shadow-[0_0_30px_rgba(0,255,255,0.3)] space-y-6\"\n            >\n              {/* Algorithm Selection */}\n              <div className=\"space-y-3\">\n                <div className=\"flex items-center gap-2 text-cyan-400\">\n                  <Zap className=\"w-5 h-5\" />\n                  <h3 className=\"font-bold text-lg\">Algorithm</h3>\n                </div>\n                <div className=\"grid grid-cols-1 gap-2\">\n                  {mockAlgorithms.map((algo) => (\n                    <motion.button\n                      key={algo.id}\n                      whileHover={{ scale: 1.02 }}\n                      whileTap={{ scale: 0.98 }}\n                      onClick={() => setSelectedAlgorithm(algo.id as AlgorithmType)}\n                      className={`p-3 rounded-lg border transition-all ${\n                        selectedAlgorithm === algo.id\n                          ? 'bg-cyan-500/20 border-cyan-400 shadow-[0_0_20px_rgba(0,255,255,0.4)]'\n                          : 'bg-gray-700/30 border-gray-600 hover:border-cyan-500/50'\n                      }`}\n                    >\n                      <div className=\"text-left\">\n                        <div className=\"font-semibold text-white\">{algo.name}</div>\n                        <div className=\"text-xs text-gray-400\">{algo.complexity}</div>\n                      </div>\n                    </motion.button>\n                  ))}\n                </div>\n              </div>\n\n              {/* Speed Control */}\n              <div className=\"space-y-3\">\n                <div className=\"flex items-center justify-between\">\n                  <label className=\"text-cyan-400 font-semibold\">Speed</label>\n                  <span className=\"text-white font-mono\">{speed[0]}%</span>\n                </div>\n                <Slider\n                  value={speed}\n                  onValueChange={setSpeed}\n                  min={10}\n                  max={100}\n                  step={10}\n                  className=\"[&_[role=slider]]:bg-cyan-400 [&_[role=slider]]:border-cyan-300 [&_[role=slider]]:shadow-[0_0_10px_rgba(0,255,255,0.6)]\"\n                />\n              </div>\n\n              {/* Array Size Control */}\n              <div className=\"space-y-3\">\n                <div className=\"flex items-center justify-between\">\n                  <label className=\"text-cyan-400 font-semibold flex items-center gap-2\">\n                    <BarChart3 className=\"w-4 h-4\" />\n                    Array Size\n                  </label>\n                  <span className=\"text-white font-mono\">{arraySize[0]}</span>\n                </div>\n                <Slider\n                  value={arraySize}\n                  onValueChange={setArraySize}\n                  min={5}\n                  max={50}\n                  step={5}\n                  disabled={isPlaying}\n                  className=\"[&_[role=slider]]:bg-purple-400 [&_[role=slider]]:border-purple-300 [&_[role=slider]]:shadow-[0_0_10px_rgba(168,85,247,0.6)]\"\n                />\n              </div>\n\n              {/* Control Buttons */}\n              <div className=\"space-y-3 pt-4 border-t border-cyan-500/20\">\n                <Button\n                  onClick={isPlaying ? pauseVisualization : startVisualization}\n                  disabled={steps.length === 0 || currentStep >= steps.length}\n                  className=\"w-full bg-gradient-to-r from-cyan-500 to-blue-500 hover:from-cyan-400 hover:to-blue-400 text-white font-bold shadow-[0_0_20px_rgba(0,255,255,0.5)] transition-all\"\n                >\n                  {isPlaying ? (\n                    <>\n                      <Pause className=\"w-4 h-4 mr-2\" />\n                      Pause\n                    </>\n                  ) : (\n                    <>\n                      <Play className=\"w-4 h-4 mr-2\" />\n                      {currentStep >= steps.length ? 'Finished' : 'Play'}\n                    </>\n                  )}\n                </Button>\n\n                <Button\n                  onClick={resetVisualization}\n                  variant=\"outline\"\n                  className=\"w-full border-purple-500/50 bg-purple-500/10 hover:bg-purple-500/20 text-purple-300 hover:text-purple-200 shadow-[0_0_15px_rgba(168,85,247,0.3)]\"\n                >\n                  <RotateCcw className=\"w-4 h-4 mr-2\" />\n                  Reset\n                </Button>\n\n                <Button\n                  onClick={() => generateSortingSteps(selectedAlgorithm)}\n                  disabled={isPlaying || array.length === 0}\n                  className=\"w-full bg-gradient-to-r from-purple-500 to-pink-500 hover:from-purple-400 hover:to-pink-400 text-white font-bold shadow-[0_0_20px_rgba(168,85,247,0.5)]\"\n                >\n                  <Zap className=\"w-4 h-4 mr-2\" />\n                  Generate Steps\n                </Button>\n              </div>\n\n              {/* Stats Display */}\n              <div className=\"pt-4 border-t border-cyan-500/20 space-y-2\">\n                <div className=\"flex justify-between text-sm\">\n                  <span className=\"text-gray-400\">Current Step:</span>\n                  <span className=\"text-cyan-400 font-mono\">{currentStep} / {steps.length}</span>\n                </div>\n                <div className=\"flex justify-between text-sm\">\n                  <span className=\"text-gray-400\">Array Length:</span>\n                  <span className=\"text-purple-400 font-mono\">{array.length}</span>\n                </div>\n              </div>\n            </motion.div>\n            \n            <div className=\"bg-gray-800/50 backdrop-blur-lg rounded-2xl p-6 border border-cyan-500/30 shadow-lg shadow-cyan-500/20\">\n              <div className=\"space-y-6\">\n                <div>\n                  <h3 className=\"text-cyan-400 font-semibold mb-4 flex items-center gap-2\">\n                    <Zap className=\"w-5 h-5\" />\n                    Algorithm\n                  </h3>\n                  <div className=\"grid grid-cols-2 gap-3\">\n                    {mockAlgorithms.map((algo) => (\n                      <motion.button\n                        key={algo.id}\n                        onClick={() => {\n                          setSelectedAlgorithm(algo.id as AlgorithmType);\n                          setSteps([]);\n                          setCurrentStep(0);\n                          setIsPlaying(false);\n                        }}\n                        className={`\n                          relative p-3 rounded-lg font-medium text-sm transition-all\n                          ${selectedAlgorithm === algo.id\n                            ? 'bg-cyan-500/20 text-cyan-300 border-2 border-cyan-400 shadow-lg shadow-cyan-500/50'\n                            : 'bg-gray-700/50 text-gray-300 border border-gray-600 hover:border-cyan-500/50'\n                          }\n                        `}\n                        whileHover={{ \n                          scale: 1.05,\n                          boxShadow: '0 0 20px rgba(6, 182, 212, 0.4)'\n                        }}\n                        whileTap={{ scale: 0.95 }}\n                      >\n                        <div className=\"flex flex-col items-center gap-1\">\n                          <span>{algo.name.split(' ')[0]}</span>\n                          <span className=\"text-xs opacity-70\">{algo.complexity}</span>\n                        </div>\n                        {selectedAlgorithm === algo.id && (\n                          <motion.div\n                            className=\"absolute inset-0 rounded-lg bg-cyan-400/10\"\n                            layoutId=\"algorithmSelector\"\n                            transition={{ type: \"spring\", bounce: 0.2, duration: 0.6 }}\n                          />\n                        )}\n                      </motion.button>\n                    ))}\n                  </div>\n                </div>\n\n                <div>\n                  <h3 className=\"text-cyan-400 font-semibold mb-4\">Speed</h3>\n                  <div className=\"space-y-2\">\n                    <Slider\n                      value={speed}\n                      onValueChange={setSpeed}\n                      min={1}\n                      max={100}\n                      step={1}\n                      className=\"cursor-pointer [&_[role=slider]]:bg-cyan-400 [&_[role=slider]]:border-cyan-300 [&_[role=slider]]:shadow-lg [&_[role=slider]]:shadow-cyan-400/50 [&_[role=slider]]:transition-all [&_[role=slider]]:hover:shadow-cyan-400/80 [&_[role=slider]]:hover:scale-110 [&_.relative]:bg-gray-700 [&_.relative]:overflow-visible [&_.bg-primary]:bg-gradient-to-r [&_.bg-primary]:from-cyan-500 [&_.bg-primary]:to-purple-500 [&_.bg-primary]:shadow-lg [&_.bg-primary]:shadow-cyan-500/30\"\n                    />\n                    <div className=\"flex justify-between text-xs text-gray-400\">\n                      <span>Slow</span>\n                      <span className=\"text-cyan-400 font-semibold\">{speed[0]}%</span>\n                      <span>Fast</span>\n                    </div>\n                  </div>\n                </div>\n\n                <div>\n                  <h3 className=\"text-cyan-400 font-semibold mb-4\">Array Size</h3>\n                  <div className=\"space-y-3\">\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"text-sm text-gray-400\">Elements</span>\n                      <motion.span \n                        key={arraySize[0]}\n                        initial={{ scale: 1.3, color: '#00ffff' }}\n                        animate={{ scale: 1, color: '#ffffff' }}\n                        className=\"text-lg font-bold text-white\"\n                      >\n                        {arraySize[0]}\n                      </motion.span>\n                    </div>\n                    <div className=\"relative\">\n                      <Slider\n                        value={arraySize}\n                        onValueChange={setArraySize}\n                        min={5}\n                        max={50}\n                        step={1}\n                        disabled={isPlaying}\n                        className=\"cursor-pointer [&_[role=slider]]:bg-gradient-to-r [&_[role=slider]]:from-cyan-400 [&_[role=slider]]:to-purple-500 [&_[role=slider]]:border-2 [&_[role=slider]]:border-white [&_[role=slider]]:shadow-lg [&_[role=slider]]:shadow-cyan-400/50 [&_[role=slider]]:transition-shadow hover:[&_[role=slider]]:shadow-xl hover:[&_[role=slider]]:shadow-cyan-400/70 [&>span]:bg-gradient-to-r [&>span]:from-cyan-500/30 [&>span]:to-purple-500/30\"\n                      />\n                      <div className=\"absolute inset-0 bg-gradient-to-r from-cyan-500/10 to-purple-500/10 rounded-full blur-sm pointer-events-none\" />\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"space-y-3 pt-4 border-t border-cyan-500/20\">\n                  <Button\n                    onClick={() => {\n                      if (isPlaying) {\n                        pauseVisualization();\n                      } else {\n                        if (steps.length === 0) {\n                          generateSortingSteps(selectedAlgorithm);\n                        }\n                        startVisualization();\n                      }\n                    }}\n                    disabled={array.length === 0}\n                    className=\"w-full bg-gradient-to-r from-cyan-500 to-blue-500 hover:from-cyan-400 hover:to-blue-400 text-white font-bold py-6 rounded-xl shadow-[0_0_20px_rgba(0,255,255,0.5)] hover:shadow-[0_0_30px_rgba(0,255,255,0.8)] transition-all duration-300 disabled:opacity-50 disabled:cursor-not-allowed\"\n                  >\n                    <motion.div\n                      className=\"flex items-center justify-center gap-3\"\n                      whileHover={{ scale: 1.05 }}\n                      whileTap={{ scale: 0.95 }}\n                    >\n                      {isPlaying ? (\n                        <>\n                          <motion.div\n                            initial={{ rotate: 0 }}\n                            animate={{ rotate: 360 }}\n                            transition={{ duration: 2, repeat: Infinity, ease: \"linear\" }}\n                          >\n                            <Pause className=\"w-6 h-6\" />\n                          </motion.div>\n                          <span>Pause</span>\n                        </>\n                      ) : (\n                        <>\n                          <motion.div\n                            animate={{ x: [0, 3, 0] }}\n                            transition={{ duration: 1.5, repeat: Infinity }}\n                          >\n                            <Play className=\"w-6 h-6\" />\n                          </motion.div>\n                          <span>Start</span>\n                        </>\n                      )}\n                    </motion.div>\n                  </Button>\n\n                  <Button\n                    onClick={resetVisualization}\n                    variant=\"outline\"\n                    className=\"w-full border-2 border-purple-500 bg-purple-500/10 hover:bg-purple-500/30 text-purple-300 font-bold py-6 rounded-xl shadow-[0_0_15px_rgba(168,85,247,0.4)] hover:shadow-[0_0_25px_rgba(168,85,247,0.7)] transition-all duration-300\"\n                  >\n                    <motion.div\n                      className=\"flex items-center justify-center gap-3\"\n                      whileHover={{ scale: 1.05 }}\n                      whileTap={{ scale: 0.95 }}\n                    >\n                      <motion.div\n                        whileHover={{ rotate: -180 }}\n                        transition={{ duration: 0.5 }}\n                      >\n                        <RotateCcw className=\"w-5 h-5\" />\n                      </motion.div>\n                      <span>Reset</span>\n                    </motion.div>\n                  </Button>\n\n                  <Button\n                    onClick={generateRandomArray}\n                    variant=\"outline\"\n                    className=\"w-full border-2 border-green-500 bg-green-500/10 hover:bg-green-500/30 text-green-300 font-bold py-6 rounded-xl shadow-[0_0_15px_rgba(34,197,94,0.4)] hover:shadow-[0_0_25px_rgba(34,197,94,0.7)] transition-all duration-300\"\n                  >\n                    <motion.div\n                      className=\"flex items-center justify-center gap-3\"\n                      whileHover={{ scale: 1.05 }}\n                      whileTap={{ scale: 0.95 }}\n                    >\n                      <motion.div\n                        animate={{ rotate: [0, 10, -10, 0] }}\n                        transition={{ duration: 2, repeat: Infinity }}\n                      >\n                        <BarChart3 className=\"w-5 h-5\" />\n                      </motion.div>\n                      <span>New Array</span>\n                    </motion.div>\n                  </Button>\n                </div>\n              </div>\n            </div>\n\n            <motion.div\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ delay: 0.2 }}\n              className=\"bg-gray-800/50 backdrop-blur-lg rounded-2xl p-6 border border-purple-500/30 shadow-lg shadow-purple-500/20 mt-6\"\n            >\n              <div className=\"flex items-center gap-2 mb-6\">\n                <BarChart3 className=\"w-6 h-6 text-purple-400\" />\n                <h3 className=\"text-xl font-bold text-purple-400\">Statistics</h3>\n              </div>\n              \n              <div className=\"grid grid-cols-3 gap-4\">\n                {/* Comparisons */}\n                <motion.div\n                  className=\"relative overflow-hidden bg-gradient-to-br from-cyan-500/10 to-cyan-500/5 rounded-xl p-4 border border-cyan-500/30\"\n                  whileHover={{ scale: 1.05, boxShadow: '0 0 30px rgba(0, 255, 255, 0.3)' }}\n                  transition={{ type: 'spring', stiffness: 300 }}\n                >\n                  <div className=\"absolute inset-0 bg-gradient-to-br from-cyan-400/20 to-transparent opacity-0 hover:opacity-100 transition-opacity\" />\n                  <div className=\"relative z-10\">\n                    <div className=\"flex items-center gap-2 mb-2\">\n                      <Activity className=\"w-5 h-5 text-cyan-400\" />\n                      <span className=\"text-sm text-cyan-300 font-semibold\">Comparisons</span>\n                    </div>\n                    <motion.div\n                      key={comparisons}\n                      initial={{ scale: 1.5, opacity: 0 }}\n                      animate={{ scale: 1, opacity: 1 }}\n                      className=\"text-3xl font-bold text-white\"\n                    >\n                      {comparisons}\n                    </motion.div>\n                  </div>\n                  <div className=\"absolute -bottom-2 -right-2 w-16 h-16 bg-cyan-400/20 rounded-full blur-xl\" />\n                </motion.div>\n\n                {/* Swaps */}\n                <motion.div\n                  className=\"relative overflow-hidden bg-gradient-to-br from-pink-500/10 to-pink-500/5 rounded-xl p-4 border border-pink-500/30\"\n                  whileHover={{ scale: 1.05, boxShadow: '0 0 30px rgba(255, 0, 102, 0.3)' }}\n                  transition={{ type: 'spring', stiffness: 300 }}\n                >\n                  <div className=\"absolute inset-0 bg-gradient-to-br from-pink-400/20 to-transparent opacity-0 hover:opacity-100 transition-opacity\" />\n                  <div className=\"relative z-10\">\n                    <div className=\"flex items-center gap-2 mb-2\">\n                      <Repeat className=\"w-5 h-5 text-pink-400\" />\n                      <span className=\"text-sm text-pink-300 font-semibold\">Swaps</span>\n                    </div>\n                    <motion.div\n                      key={swaps}\n                      initial={{ scale: 1.5, opacity: 0 }}\n                      animate={{ scale: 1, opacity: 1 }}\n                      className=\"text-3xl font-bold text-white\"\n                    >\n                      {swaps}\n                    </motion.div>\n                  </div>\n                  <div className=\"absolute -bottom-2 -right-2 w-16 h-16 bg-pink-400/20 rounded-full blur-xl\" />\n                </motion.div>\n\n                {/* Progress */}\n                <motion.div\n                  className=\"relative overflow-hidden bg-gradient-to-br from-purple-500/10 to-purple-500/5 rounded-xl p-4 border border-purple-500/30\"\n                  whileHover={{ scale: 1.05, boxShadow: '0 0 30px rgba(168, 85, 247, 0.3)' }}\n                  transition={{ type: 'spring', stiffness: 300 }}\n                >\n                  <div className=\"absolute inset-0 bg-gradient-to-br from-purple-400/20 to-transparent opacity-0 hover:opacity-100 transition-opacity\" />\n                  <div className=\"relative z-10\">\n                    <div className=\"flex items-center gap-2 mb-2\">\n                      <TrendingUp className=\"w-5 h-5 text-purple-400\" />\n                      <span className=\"text-sm text-purple-300 font-semibold\">Progress</span>\n                    </div>\n                    <motion.div\n                      key={currentStep}\n                      initial={{ scale: 1.5, opacity: 0 }}\n                      animate={{ scale: 1, opacity: 1 }}\n                      className=\"text-3xl font-bold text-white\"\n                    >\n                      {steps.length > 0 ? Math.round((currentStep / steps.length) * 100) : 0}%\n                    </motion.div>\n                  </div>\n                  <div className=\"absolute -bottom-2 -right-2 w-16 h-16 bg-purple-400/20 rounded-full blur-xl\" />\n                </motion.div>\n              </div>\n\n              {/* Progress Bar */}\n              <div className=\"mt-6 space-y-2\">\n                <div className=\"flex justify-between text-sm text-gray-400\">\n                  <span>Step {currentStep} of {steps.length}</span>\n                  <span>{steps.length > 0 && currentStep === steps.length ? 'Complete!' : 'In Progress'}</span>\n                </div>\n                <div className=\"relative h-3 bg-gray-700/50 rounded-full overflow-hidden border border-purple-500/30\">\n                  <motion.div\n                    className=\"absolute inset-y-0 left-0 bg-gradient-to-r from-cyan-500 via-purple-500 to-pink-500 rounded-full\"\n                    initial={{ width: 0 }}\n                    animate={{ \n                      width: steps.length > 0 ? `${(currentStep / steps.length) * 100}%` : '0%'\n                    }}\n                    transition={{ duration: 0.3, ease: 'easeOut' }}\n                  >\n                    <div className=\"absolute inset-0 bg-gradient-to-r from-transparent via-white/30 to-transparent animate-pulse\" />\n                  </motion.div>\n                  {steps.length > 0 && currentStep === steps.length && (\n                    <motion.div\n                      className=\"absolute inset-0 bg-gradient-to-r from-cyan-400/50 via-purple-400/50 to-pink-400/50\"\n                      animate={{\n                        opacity: [0.5, 1, 0.5],\n                      }}\n                      transition={{\n                        duration: 1.5,\n                        repeat: Infinity,\n                        ease: 'easeInOut'\n                      }}\n                    />\n                  )}\n                </div>\n              </div>\n            </motion.div>\n          </div>\n\n          <div className=\"lg:col-span-3\">\n            <div className=\"bg-gray-800/50 backdrop-blur-lg rounded-2xl p-8 border border-purple-500/30 shadow-lg shadow-purple-500/20 min-h-[600px]\">\n              {array.length === 0 ? (\n                <div className=\"flex flex-col items-center justify-center h-full space-y-6\">\n                  <motion.div\n                    initial={{ scale: 0 }}\n                    animate={{ scale: 1 }}\n                    transition={{ type: \"spring\", bounce: 0.5 }}\n                    className=\"relative\"\n                  >\n                    <BarChart3 className=\"w-24 h-24 text-cyan-400\" />\n                    <motion.div\n                      className=\"absolute inset-0 bg-cyan-400/20 rounded-full blur-2xl\"\n                      animate={{\n                        scale: [1, 1.2, 1],\n                        opacity: [0.5, 0.8, 0.5]\n                      }}\n                      transition={{\n                        duration: 2,\n                        repeat: Infinity,\n                        ease: \"easeInOut\"\n                      }}\n                    />\n                  </motion.div>\n                  <motion.p\n                    initial={{ opacity: 0, y: 20 }}\n                    animate={{ opacity: 1, y: 0 }}\n                    transition={{ delay: 0.2 }}\n                    className=\"text-gray-400 text-lg\"\n                  >\n                    Click \"Generate Array\" to start visualizing\n                  </motion.p>\n                </div>\n              ) : (\n                <div className=\"h-full flex items-end justify-center gap-1 px-4\">\n                  {array.map((element, index) => {\n                    const maxValue = Math.max(...array.map(el => el.value));\n                    const heightPercentage = (element.value / maxValue) * 100;\n                    \n                    let barColor = NEON_COLORS[index % NEON_COLORS.length];\n                    let glowIntensity = 0.3;\n                    let scale = 1;\n                    \n                    if (element.isComparing) {\n                      barColor = '#ffff00';\n                      glowIntensity = 0.8;\n                      scale = 1.05;\n                    } else if (element.isSwapping) {\n                      barColor = '#ff0066';\n                      glowIntensity = 1;\n                      scale = 1.1;\n                    } else if (element.isSorted) {\n                      barColor = '#00ff00';\n                      glowIntensity = 0.6;\n                    }\n\n                    return (\n                      <motion.div\n                        key={element.id}\n                        className=\"relative flex-1 min-w-[4px] max-w-[60px] rounded-t-lg\"\n                        style={{\n                          height: `${heightPercentage}%`,\n                          backgroundColor: barColor,\n                          boxShadow: `0 0 ${20 * glowIntensity}px ${barColor}, 0 0 ${40 * glowIntensity}px ${barColor}`,\n                        }}\n                        initial={{ height: 0, opacity: 0 }}\n                        animate={{\n                          height: `${heightPercentage}%`,\n                          opacity: 1,\n                          scale: scale,\n                          y: element.isSwapping ? [-10, 0] : 0\n                        }}\n                        transition={{\n                          height: { duration: 0.3, ease: \"easeOut\" },\n                          scale: { duration: 0.2 },\n                          y: { duration: 0.3, ease: \"easeInOut\" },\n                          opacity: { duration: 0.2 }\n                        }}\n                      >\n                        {/* Glow effect overlay */}\n                        <motion.div\n                          className=\"absolute inset-0 rounded-t-lg\"\n                          style={{\n                            backgroundColor: barColor,\n                            opacity: 0.3\n                          }}\n                          animate={{\n                            opacity: element.isComparing || element.isSwapping ? [0.3, 0.7, 0.3] : 0.3\n                          }}\n                          transition={{\n                            duration: 0.5,\n                            repeat: element.isComparing || element.isSwapping ? Infinity : 0\n                          }}\n                        />\n                        \n                        {/* Trail effect for swapping */}\n                        {element.isSwapping && (\n                          <motion.div\n                            className=\"absolute inset-0 rounded-t-lg\"\n                            style={{\n                              backgroundColor: barColor,\n                              filter: 'blur(8px)'\n                            }}\n                            initial={{ opacity: 0.8, scale: 1 }}\n                            animate={{ opacity: 0, scale: 1.5 }}\n                            transition={{ duration: 0.5, repeat: Infinity }}\n                          />\n                        )}\n                        \n                        {/* Value label */}\n                        {arraySize[0] <= 30 && (\n                          <motion.div\n                            className=\"absolute -top-8 left-1/2 transform -translate-x-1/2 text-xs font-bold whitespace-nowrap\"\n                            style={{ color: barColor }}\n                            initial={{ opacity: 0 }}\n                            animate={{ opacity: 1 }}\n                            transition={{ delay: 0.1 }}\n                          >\n                            {element.value}\n                          </motion.div>\n                        )}\n                      </motion.div>\n                    );\n                  })}\n                </div>\n              )}\n                {array.length === 0 ? (\n                  <motion.div\n                    initial={{ opacity: 0, scale: 0.8 }}\n                    animate={{ opacity: 1, scale: 1 }}\n                    className=\"absolute inset-0 flex items-center justify-center\"\n                  >\n                    <div className=\"text-center space-y-4\">\n                      <motion.div\n                        animate={{\n                          rotate: [0, 360],\n                          scale: [1, 1.2, 1]\n                        }}\n                        transition={{ duration: 3, repeat: Infinity }}\n                        className=\"inline-block\"\n                      >\n                        <BarChart3 className=\"w-16 h-16 text-cyan-400\" />\n                      </motion.div>\n                      <p className=\"text-gray-400 text-lg\">Generate an array to start visualizing</p>\n                    </div>\n                  </motion.div>\n                ) : (\n                  array.map((element, index) => {\n                    const colorIndex = index % NEON_COLORS.length;\n                    const neonColor = NEON_COLORS[colorIndex];\n                    const heightPercentage = (element.value / 100) * 100;\n                    \n                    return (\n                      <motion.div\n                        key={element.id}\n                        layout\n                        initial={{ opacity: 0, y: 50, scale: 0.5 }}\n                        animate={{\n                          opacity: 1,\n                          y: 0,\n                          scale: element.isSwapping ? 1.1 : 1,\n                          height: `${heightPercentage}%`,\n                          boxShadow: element.isComparing\n                            ? `0 0 30px ${neonColor}, 0 0 60px ${neonColor}, 0 0 90px ${neonColor}`\n                            : element.isSwapping\n                            ? `0 0 40px ${neonColor}, 0 0 80px ${neonColor}`\n                            : element.isSorted\n                            ? `0 0 20px #00ff00, 0 0 40px #00ff00`\n                            : `0 0 15px ${neonColor}`,\n                        }}\n                        transition={{\n                          layout: { duration: 0.3, type: \"spring\", bounce: 0.2 },\n                          height: { duration: 0.4, ease: \"easeInOut\" },\n                          scale: { duration: 0.2 },\n                          boxShadow: { duration: 0.3 },\n                          opacity: { duration: 0.5, delay: index * 0.02 }\n                        }}\n                        className=\"relative flex-1 min-w-[8px] max-w-[60px] rounded-t-lg\"\n                        style={{\n                          backgroundColor: element.isSorted\n                            ? '#00ff00'\n                            : element.isComparing\n                            ? '#ffff00'\n                            : element.isSwapping\n                            ? '#ff00ff'\n                            : neonColor,\n                          minHeight: '20px'\n                        }}\n                      >\n                        {/* Glow overlay */}\n                        <motion.div\n                          className=\"absolute inset-0 rounded-t-lg\"\n                          animate={{\n                            opacity: element.isComparing || element.isSwapping ? [0.3, 0.7, 0.3] : 0.2\n                          }}\n                          transition={{\n                            duration: 0.8,\n                            repeat: element.isComparing || element.isSwapping ? Infinity : 0\n                          }}\n                          style={{\n                            background: `linear-gradient(to top, transparent, ${neonColor})`,\n                          }}\n                        />\n                        \n                        {/* Trail effect during swaps */}\n                        {element.isSwapping && (\n                          <>\n                            <motion.div\n                              className=\"absolute inset-0 rounded-t-lg\"\n                              initial={{ opacity: 0.8, scale: 1 }}\n                              animate={{ opacity: 0, scale: 1.5 }}\n                              transition={{ duration: 0.6, repeat: Infinity }}\n                              style={{\n                                backgroundColor: neonColor,\n                                filter: 'blur(8px)'\n                              }}\n                            />\n                            <motion.div\n                              className=\"absolute -top-2 left-1/2 -translate-x-1/2\"\n                              animate={{\n                                y: [-10, -20, -10],\n                                opacity: [0, 1, 0]\n                              }}\n                              transition={{ duration: 1, repeat: Infinity }}\n                            >\n                              <div \n                                className=\"w-2 h-2 rounded-full\"\n                                style={{ backgroundColor: neonColor, boxShadow: `0 0 10px ${neonColor}` }}\n                              />\n                            </motion.div>\n                          </>\n                        )}\n                        \n                        {/* Pulse effect for comparing */}\n                        {element.isComparing && (\n                          <motion.div\n                            className=\"absolute inset-0 rounded-t-lg border-2\"\n                            animate={{\n                              borderColor: ['#ffff00', '#ffffff', '#ffff00'],\n                              scale: [1, 1.05, 1]\n                            }}\n                            transition={{ duration: 0.6, repeat: Infinity }}\n                            style={{ borderColor: '#ffff00' }}\n                          />\n                        )}\n                        \n                        {/* Value label */}\n                        <motion.div\n                          className=\"absolute -bottom-6 left-1/2 -translate-x-1/2 text-xs font-mono font-bold whitespace-nowrap\"\n                          animate={{\n                            color: element.isSorted\n                              ? '#00ff00'\n                              : element.isComparing\n                              ? '#ffff00'\n                              : element.isSwapping\n                              ? '#ff00ff'\n                              : '#ffffff',\n                            scale: element.isComparing || element.isSwapping ? [1, 1.2, 1] : 1\n                          }}\n                          transition={{ duration: 0.3 }}\n                        >\n                          {element.value}\n                        </motion.div>\n                        \n                        {/* Sorted checkmark */}\n                        {element.isSorted && (\n                          <motion.div\n                            initial={{ scale: 0, rotate: -180 }}\n                            animate={{ scale: 1, rotate: 0 }}\n                            className=\"absolute -top-8 left-1/2 -translate-x-1/2\"\n                          >\n                            <div className=\"w-6 h-6 rounded-full bg-green-500 flex items-center justify-center shadow-[0_0_20px_rgba(0,255,0,0.8)]\">\n                              <svg className=\"w-4 h-4 text-white\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={3} d=\"M5 13l4 4L19 7\" />\n                              </svg>\n                            </div>\n                          </motion.div>\n                        )}\n                        \n                        {/* Particle effects for swapping */}\n                        {element.isSwapping && (\n                          <>\n                            {[...Array(3)].map((_, i) => (\n                              <motion.div\n                                key={i}\n                                className=\"absolute top-0 left-1/2\"\n                                initial={{ x: 0, y: 0, opacity: 1 }}\n                                animate={{\n                                  x: [0, (Math.random() - 0.5) * 40],\n                                  y: [0, -30 - Math.random() * 20],\n                                  opacity: [1, 0]\n                                }}\n                                transition={{\n                                  duration: 0.8,\n                                  delay: i * 0.1,\n                                  repeat: Infinity\n                                }}\n                              >\n                                <div\n                                  className=\"w-1 h-1 rounded-full\"\n                                  style={{\n                                    backgroundColor: neonColor,\n                                    boxShadow: `0 0 6px ${neonColor}`\n                                  }}\n                                />\n                              </motion.div>\n                            ))}\n                          </>\n                        )}\n                      </motion.div>\n                    );\n                  })\n                )}</parameter>\n</invoke>\n              </div>\n            </div>\n\n            <motion.div\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ delay: 0.3, duration: 0.5 }}\n              className=\"mt-6 bg-gray-800/50 backdrop-blur-lg rounded-xl p-6 border border-purple-500/30 shadow-lg shadow-purple-500/10\"\n            >\n              <h3 className=\"text-purple-400 font-semibold mb-4 flex items-center gap-2\">\n                <BarChart3 className=\"w-5 h-5\" />\n                Legend\n              </h3>\n              <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n                <motion.div\n                  className=\"flex items-center gap-3 p-3 rounded-lg bg-gray-700/30 border border-gray-600/50\"\n                  whileHover={{ scale: 1.05, borderColor: 'rgba(100, 200, 255, 0.5)' }}\n                  transition={{ type: \"spring\", stiffness: 300 }}\n                >\n                  <motion.div\n                    className=\"w-6 h-6 rounded bg-gradient-to-br from-cyan-400 to-blue-500 shadow-lg\"\n                    animate={{\n                      boxShadow: [\n                        '0 0 10px rgba(0, 255, 255, 0.5)',\n                        '0 0 20px rgba(0, 255, 255, 0.8)',\n                        '0 0 10px rgba(0, 255, 255, 0.5)'\n                      ]\n                    }}\n                    transition={{ duration: 2, repeat: Infinity }}\n                  />\n                  <div>\n                    <div className=\"text-sm font-semibold text-white\">Default</div>\n                    <div className=\"text-xs text-gray-400\">Unsorted</div>\n                  </div>\n                </motion.div>\n\n                <motion.div\n                  className=\"flex items-center gap-3 p-3 rounded-lg bg-gray-700/30 border border-gray-600/50\"\n                  whileHover={{ scale: 1.05, borderColor: 'rgba(255, 255, 0, 0.5)' }}\n                  transition={{ type: \"spring\", stiffness: 300 }}\n                >\n                  <motion.div\n                    className=\"w-6 h-6 rounded bg-gradient-to-br from-yellow-400 to-orange-500 shadow-lg\"\n                    animate={{\n                      boxShadow: [\n                        '0 0 10px rgba(255, 255, 0, 0.5)',\n                        '0 0 20px rgba(255, 255, 0, 0.8)',\n                        '0 0 10px rgba(255, 255, 0, 0.5)'\n                      ],\n                      scale: [1, 1.1, 1]\n                    }}\n                    transition={{ duration: 1.5, repeat: Infinity }}\n                  />\n                  <div>\n                    <div className=\"text-sm font-semibold text-white\">Comparing</div>\n                    <div className=\"text-xs text-gray-400\">Active</div>\n                  </div>\n                </motion.div>\n\n                <motion.div\n                  className=\"flex items-center gap-3 p-3 rounded-lg bg-gray-700/30 border border-gray-600/50\"\n                  whileHover={{ scale: 1.05, borderColor: 'rgba(255, 0, 255, 0.5)' }}\n                  transition={{ type: \"spring\", stiffness: 300 }}\n                >\n                  <motion.div\n                    className=\"w-6 h-6 rounded bg-gradient-to-br from-pink-500 to-purple-600 shadow-lg\"\n                    animate={{\n                      boxShadow: [\n                        '0 0 10px rgba(255, 0, 255, 0.5)',\n                        '0 0 25px rgba(255, 0, 255, 0.9)',\n                        '0 0 10px rgba(255, 0, 255, 0.5)'\n                      ],\n                      scale: [1, 1.15, 1],\n                      rotate: [0, 5, -5, 0]\n                    }}\n                    transition={{ duration: 1, repeat: Infinity }}\n                  />\n                  <div>\n                    <div className=\"text-sm font-semibold text-white\">Swapping</div>\n                    <div className=\"text-xs text-gray-400\">Moving</div>\n                  </div>\n                </motion.div>\n\n                <motion.div\n                  className=\"flex items-center gap-3 p-3 rounded-lg bg-gray-700/30 border border-gray-600/50\"\n                  whileHover={{ scale: 1.05, borderColor: 'rgba(0, 255, 0, 0.5)' }}\n                  transition={{ type: \"spring\", stiffness: 300 }}\n                >\n                  <motion.div\n                    className=\"w-6 h-6 rounded bg-gradient-to-br from-green-400 to-emerald-600 shadow-lg\"\n                    animate={{\n                      boxShadow: [\n                        '0 0 10px rgba(0, 255, 0, 0.5)',\n                        '0 0 20px rgba(0, 255, 0, 0.8)',\n                        '0 0 10px rgba(0, 255, 0, 0.5)'\n                      ]\n                    }}\n                    transition={{ duration: 2, repeat: Infinity }}\n                  />\n                  <div>\n                    <div className=\"text-sm font-semibold text-white\">Sorted</div>\n                    <div className=\"text-xs text-gray-400\">Complete</div>\n                  </div>\n                </motion.div>\n              </div>\n            </motion.div>\n          </div>\n        </div>\n\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ delay: 0.4 }}\n          className=\"bg-gray-800/50 backdrop-blur-lg rounded-2xl p-6 border border-purple-500/30 shadow-lg shadow-purple-500/20\"\n        >\n          <div className=\"space-y-4\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center gap-3\">\n                <motion.div\n                  animate={{\n                    rotate: [0, 360],\n                  }}\n                  transition={{ duration: 3, repeat: Infinity, ease: \"linear\" }}\n                  className=\"w-8 h-8 rounded-full bg-gradient-to-r from-cyan-400 to-purple-500 flex items-center justify-center\"\n                >\n                  <BarChart3 className=\"w-4 h-4 text-white\" />\n                </motion.div>\n                <h3 className=\"text-cyan-400 font-bold text-lg\">Timeline Control</h3>\n              </div>\n              <div className=\"flex items-center gap-2 px-4 py-2 bg-gray-700/50 rounded-lg border border-cyan-500/30\">\n                <span className=\"text-gray-400 text-sm\">Step:</span>\n                <motion.span\n                  key={currentStep}\n                  initial={{ scale: 1.3, color: '#00ffff' }}\n                  animate={{ scale: 1, color: '#ffffff' }}\n                  className=\"text-white font-bold font-mono\"\n                >\n                  {currentStep}\n                </motion.span>\n                <span className=\"text-gray-500\">/</span>\n                <span className=\"text-gray-400 font-mono\">{steps.length}</span>\n              </div>\n            </div>\n\n            {/* Progress Bar */}\n            <div className=\"relative h-3 bg-gray-700/50 rounded-full overflow-hidden border border-gray-600/50\">\n              <motion.div\n                className=\"absolute inset-y-0 left-0 bg-gradient-to-r from-cyan-500 via-purple-500 to-pink-500 rounded-full\"\n                initial={{ width: 0 }}\n                animate={{\n                  width: steps.length > 0 ? `${(currentStep / steps.length) * 100}%` : '0%',\n                }}\n                transition={{ duration: 0.3, ease: \"easeOut\" }}\n              >\n                <motion.div\n                  className=\"absolute inset-0 bg-gradient-to-r from-transparent via-white/30 to-transparent\"\n                  animate={{\n                    x: ['-100%', '200%'],\n                  }}\n                  transition={{\n                    duration: 1.5,\n                    repeat: Infinity,\n                    ease: \"linear\",\n                  }}\n                />\n              </motion.div>\n              \n              {/* Glow effect */}\n              <motion.div\n                className=\"absolute inset-0 rounded-full\"\n                animate={{\n                  boxShadow: [\n                    '0 0 10px rgba(0, 255, 255, 0.3)',\n                    '0 0 20px rgba(168, 85, 247, 0.5)',\n                    '0 0 10px rgba(0, 255, 255, 0.3)',\n                  ],\n                }}\n                transition={{ duration: 2, repeat: Infinity }}\n              />\n            </div>\n\n            {/* Timeline Scrubber */}\n            <div className=\"relative pt-2\">\n              <input\n                type=\"range\"\n                min={0}\n                max={Math.max(0, steps.length - 1)}\n                value={currentStep}\n                onChange={(e) => {\n                  const newStep = parseInt(e.target.value);\n                  setCurrentStep(newStep);\n                  if (steps[newStep]) {\n                    setArray(steps[newStep].array);\n                  }\n                }}\n                disabled={isPlaying || steps.length === 0}\n                className=\"w-full h-2 bg-transparent appearance-none cursor-pointer disabled:cursor-not-allowed\n                  [&::-webkit-slider-track]:h-2 [&::-webkit-slider-track]:bg-gray-700/50 [&::-webkit-slider-track]:rounded-full [&::-webkit-slider-track]:border [&::-webkit-slider-track]:border-gray-600/50\n                  [&::-webkit-slider-thumb]:appearance-none [&::-webkit-slider-thumb]:w-5 [&::-webkit-slider-thumb]:h-5 [&::-webkit-slider-thumb]:rounded-full [&::-webkit-slider-thumb]:bg-gradient-to-r [&::-webkit-slider-thumb]:from-cyan-400 [&::-webkit-slider-thumb]:to-purple-500 [&::-webkit-slider-thumb]:border-2 [&::-webkit-slider-thumb]:border-white [&::-webkit-slider-thumb]:shadow-lg [&::-webkit-slider-thumb]:shadow-cyan-400/50 [&::-webkit-slider-thumb]:transition-all [&::-webkit-slider-thumb]:hover:scale-125 [&::-webkit-slider-thumb]:hover:shadow-xl [&::-webkit-slider-thumb]:hover:shadow-cyan-400/70\n                  [&::-moz-range-track]:h-2 [&::-moz-range-track]:bg-gray-700/50 [&::-moz-range-track]:rounded-full [&::-moz-range-track]:border [&::-moz-range-track]:border-gray-600/50\n                  [&::-moz-range-thumb]:w-5 [&::-moz-range-thumb]:h-5 [&::-moz-range-thumb]:rounded-full [&::-moz-range-thumb]:bg-gradient-to-r [&::-moz-range-thumb]:from-cyan-400 [&::-moz-range-thumb]:to-purple-500 [&::-moz-range-thumb]:border-2 [&::-moz-range-thumb]:border-white [&::-moz-range-thumb]:shadow-lg [&::-moz-range-thumb]:shadow-cyan-400/50 [&::-moz-range-thumb]:transition-all [&::-moz-range-thumb]:hover:scale-125\"\n              />\n              \n              {/* Step markers */}\n              {steps.length > 0 && steps.length <= 50 && (\n                <div className=\"absolute top-0 left-0 right-0 flex justify-between pointer-events-none\">\n                  {steps.map((_, index) => (\n                    <motion.div\n                      key={index}\n                      initial={{ scale: 0 }}\n                      animate={{ scale: 1 }}\n                      transition={{ delay: index * 0.01 }}\n                      className={`w-1 h-1 rounded-full transition-all ${\n                        index <= currentStep\n                          ? 'bg-cyan-400 shadow-[0_0_4px_rgba(0,255,255,0.8)]'\n                          : 'bg-gray-600'\n                      }`}\n                    />\n                  ))}\n                </div>\n              )}\n            </div>\n\n            {/* Control Info */}\n            <div className=\"flex items-center justify-between text-xs\">\n              <div className=\"flex items-center gap-2 text-gray-400\">\n                <div className=\"w-2 h-2 rounded-full bg-cyan-400 shadow-[0_0_6px_rgba(0,255,255,0.8)]\" />\n                <span>Drag to navigate steps</span>\n              </div>\n              <div className=\"text-gray-500\">\n                {steps.length === 0 ? 'Generate steps to begin' : currentStep >= steps.length - 1 ? 'Sorting complete!' : 'In progress...'}\n              </div>\n            </div>\n\n            {/* Quick Navigation Buttons */}\n            <div className=\"flex gap-2 pt-2\">\n              <Button\n                onClick={() => {\n                  setCurrentStep(0);\n                  if (steps[0]) {\n                    setArray(steps[0].array);\n                  }\n                }}\n                disabled={isPlaying || steps.length === 0 || currentStep === 0}\n                variant=\"outline\"\n                size=\"sm\"\n                className=\"flex-1 border-cyan-500/30 bg-cyan-500/5 hover:bg-cyan-500/10 text-cyan-300 text-xs\"\n              >\n                \u23ee First\n              </Button>\n              <Button\n                onClick={() => {\n                  const newStep = Math.max(0, currentStep - 1);\n                  setCurrentStep(newStep);\n                  if (steps[newStep]) {\n                    setArray(steps[newStep].array);\n                  }\n                }}\n                disabled={isPlaying || steps.length === 0 || currentStep === 0}\n                variant=\"outline\"\n                size=\"sm\"\n                className=\"flex-1 border-purple-500/30 bg-purple-500/5 hover:bg-purple-500/10 text-purple-300 text-xs\"\n              >\n                \u23ea Prev\n              </Button>\n              <Button\n                onClick={() => {\n                  const newStep = Math.min(steps.length - 1, currentStep + 1);\n                  setCurrentStep(newStep);\n                  if (steps[newStep]) {\n                    setArray(steps[newStep].array);\n                  }\n                }}\n                disabled={isPlaying || steps.length === 0 || currentStep >= steps.length - 1}\n                variant=\"outline\"\n                size=\"sm\"\n                className=\"flex-1 border-purple-500/30 bg-purple-500/5 hover:bg-purple-500/10 text-purple-300 text-xs\"\n              >\n                Next \u23e9\n              </Button>\n              <Button\n                onClick={() => {\n                  const lastStep = steps.length - 1;\n                  setCurrentStep(lastStep);\n                  if (steps[lastStep]) {\n                    setArray(steps[lastStep].array);\n                  }\n                }}\n                disabled={isPlaying || steps.length === 0 || currentStep >= steps.length - 1}\n                variant=\"outline\"\n                size=\"sm\"\n                className=\"flex-1 border-cyan-500/30 bg-cyan-500/5 hover:bg-cyan-500/10 text-cyan-300 text-xs\"\n              >\n                Last \u23ed\n              </Button>\n            </div>\n          </div>\n        </motion.div>\n      </div>\n    </div>\n  );\n}",
    "error": null,
    "elapsed_time": 104.39519786834717,
    "success": true
  }
}