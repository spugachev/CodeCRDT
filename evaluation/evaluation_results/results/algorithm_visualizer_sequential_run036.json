{
  "prompt_id": "algorithm_visualizer",
  "prompt_name": "Algorithm Visualizer",
  "mode": "sequential",
  "run_number": 36,
  "timestamp": "2025-10-13T21:27:31.876553",
  "response_time": 69.33709979057312,
  "total_tokens": null,
  "response_content": "import { useState, useEffect, useRef } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Slider } from '@/components/ui/slider';\nimport { Play, Pause, RotateCcw, Zap, Activity } from 'lucide-react';\nimport { motion, AnimatePresence } from 'framer-motion';\n\ninterface ArrayElement {\n  value: number;\n  id: string;\n  isComparing?: boolean;\n  isSorted?: boolean;\n  isSwapping?: boolean;\n  trail?: boolean;\n}\n\ntype Algorithm = 'bubble' | 'quick' | 'merge' | 'insertion';\n\nconst ALGORITHMS = [\n  { id: 'bubble' as Algorithm, name: 'Bubble Sort', icon: Activity },\n  { id: 'quick' as Algorithm, name: 'Quick Sort', icon: Zap },\n  { id: 'merge' as Algorithm, name: 'Merge Sort', icon: Activity },\n  { id: 'insertion' as Algorithm, name: 'Insertion Sort', icon: Zap },\n];\n\nexport default function AlgorithmVisualizer() {\n  const [array, setArray] = useState<ArrayElement[]>([]);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [speed, setSpeed] = useState([50]);\n  const [arraySize, setArraySize] = useState([30]);\n  const [selectedAlgorithm, setSelectedAlgorithm] = useState<Algorithm>('bubble');\n  const [comparisons, setComparisons] = useState(0);\n  const [swaps, setSwaps] = useState(0);\n  const animationRef = useRef<NodeJS.Timeout | null>(null);\n  const stepsRef = useRef<(() => void)[]>([]);\n  const currentStepRef = useRef(0);\n\n  const generateArray = () => {\n    const newArray: ArrayElement[] = [];\n    for (let i = 0; i < arraySize[0]; i++) {\n      newArray.push({\n        value: Math.floor(Math.random() * 100) + 10,\n        id: `${i}-${Date.now()}`,\n      });\n    }\n    setArray(newArray);\n    setComparisons(0);\n    setSwaps(0);\n    currentStepRef.current = 0;\n    stepsRef.current = [];\n  };\n\n  useEffect(() => {\n    generateArray();\n  }, [arraySize[0]]);\n\n  const sleep = () => {\n    return new Promise(resolve => setTimeout(resolve, 101 - speed[0]));\n  };\n\n  const updateArray = (newArray: ArrayElement[], incrementComparisons = false, incrementSwaps = false) => {\n    stepsRef.current.push(() => {\n      setArray([...newArray]);\n      if (incrementComparisons) setComparisons(prev => prev + 1);\n      if (incrementSwaps) setSwaps(prev => prev + 1);\n    });\n  };\n\n  const bubbleSort = async () => {\n    const arr = [...array];\n    const n = arr.length;\n\n    for (let i = 0; i < n - 1; i++) {\n      for (let j = 0; j < n - i - 1; j++) {\n        arr[j].isComparing = true;\n        arr[j + 1].isComparing = true;\n        updateArray(arr, true);\n\n        if (arr[j].value > arr[j + 1].value) {\n          arr[j].isSwapping = true;\n          arr[j + 1].isSwapping = true;\n          arr[j].trail = true;\n          arr[j + 1].trail = true;\n          updateArray(arr);\n\n          [arr[j], arr[j + 1]] = [arr[j + 1], arr[j]];\n          updateArray(arr, false, true);\n\n          arr[j].isSwapping = false;\n          arr[j + 1].isSwapping = false;\n        }\n\n        arr[j].isComparing = false;\n        arr[j + 1].isComparing = false;\n        arr[j].trail = false;\n        arr[j + 1].trail = false;\n        updateArray(arr);\n      }\n      arr[n - i - 1].isSorted = true;\n      updateArray(arr);\n    }\n    arr[0].isSorted = true;\n    updateArray(arr);\n  };\n\n  const quickSort = async () => {\n    const arr = [...array];\n\n    const partition = (low: number, high: number): number => {\n      const pivot = arr[high].value;\n      arr[high].isComparing = true;\n      updateArray(arr);\n\n      let i = low - 1;\n\n      for (let j = low; j < high; j++) {\n        arr[j].isComparing = true;\n        updateArray(arr, true);\n\n        if (arr[j].value < pivot) {\n          i++;\n          arr[i].isSwapping = true;\n          arr[j].isSwapping = true;\n          arr[i].trail = true;\n          arr[j].trail = true;\n          updateArray(arr);\n\n          [arr[i], arr[j]] = [arr[j], arr[i]];\n          updateArray(arr, false, true);\n\n          arr[i].isSwapping = false;\n          arr[j].isSwapping = false;\n        }\n\n        arr[j].isComparing = false;\n        arr[j].trail = false;\n        updateArray(arr);\n      }\n\n      arr[i + 1].isSwapping = true;\n      arr[high].isSwapping = true;\n      arr[i + 1].trail = true;\n      arr[high].trail = true;\n      updateArray(arr);\n\n      [arr[i + 1], arr[high]] = [arr[high], arr[i + 1]];\n      updateArray(arr, false, true);\n\n      arr[i + 1].isSwapping = false;\n      arr[high].isSwapping = false;\n      arr[high].isComparing = false;\n      arr[i + 1].trail = false;\n      arr[high].trail = false;\n      updateArray(arr);\n\n      return i + 1;\n    };\n\n    const quickSortHelper = (low: number, high: number) => {\n      if (low < high) {\n        const pi = partition(low, high);\n        arr[pi].isSorted = true;\n        updateArray(arr);\n        quickSortHelper(low, pi - 1);\n        quickSortHelper(pi + 1, high);\n      } else if (low === high) {\n        arr[low].isSorted = true;\n        updateArray(arr);\n      }\n    };\n\n    quickSortHelper(0, arr.length - 1);\n  };\n\n  const mergeSort = async () => {\n    const arr = [...array];\n\n    const merge = (left: number, mid: number, right: number) => {\n      const leftArr = arr.slice(left, mid + 1);\n      const rightArr = arr.slice(mid + 1, right + 1);\n\n      let i = 0, j = 0, k = left;\n\n      while (i < leftArr.length && j < rightArr.length) {\n        arr[k].isComparing = true;\n        updateArray(arr, true);\n\n        if (leftArr[i].value <= rightArr[j].value) {\n          arr[k] = { ...leftArr[i], isSwapping: true, trail: true };\n          updateArray(arr, false, true);\n          arr[k].isSwapping = false;\n          arr[k].trail = false;\n          i++;\n        } else {\n          arr[k] = { ...rightArr[j], isSwapping: true, trail: true };\n          updateArray(arr, false, true);\n          arr[k].isSwapping = false;\n          arr[k].trail = false;\n          j++;\n        }\n\n        arr[k].isComparing = false;\n        updateArray(arr);\n        k++;\n      }\n\n      while (i < leftArr.length) {\n        arr[k] = { ...leftArr[i], trail: true };\n        updateArray(arr);\n        arr[k].trail = false;\n        i++;\n        k++;\n      }\n\n      while (j < rightArr.length) {\n        arr[k] = { ...rightArr[j], trail: true };\n        updateArray(arr);\n        arr[k].trail = false;\n        j++;\n        k++;\n      }\n    };\n\n    const mergeSortHelper = (left: number, right: number) => {\n      if (left < right) {\n        const mid = Math.floor((left + right) / 2);\n        mergeSortHelper(left, mid);\n        mergeSortHelper(mid + 1, right);\n        merge(left, mid, right);\n\n        for (let i = left; i <= right; i++) {\n          arr[i].isSorted = true;\n        }\n        updateArray(arr);\n      }\n    };\n\n    mergeSortHelper(0, arr.length - 1);\n  };\n\n  const insertionSort = async () => {\n    const arr = [...array];\n    arr[0].isSorted = true;\n    updateArray(arr);\n\n    for (let i = 1; i < arr.length; i++) {\n      const key = arr[i];\n      key.isComparing = true;\n      key.trail = true;\n      updateArray(arr);\n\n      let j = i - 1;\n\n      while (j >= 0 && arr[j].value > key.value) {\n        arr[j].isComparing = true;\n        updateArray(arr, true);\n\n        arr[j + 1] = { ...arr[j], isSwapping: true, trail: true };\n        updateArray(arr, false, true);\n\n        arr[j + 1].isSwapping = false;\n        arr[j].isComparing = false;\n        j--;\n      }\n\n      arr[j + 1] = { ...key, isComparing: false, isSorted: true, trail: false };\n      updateArray(arr);\n\n      for (let k = 0; k <= i; k++) {\n        arr[k].isSorted = true;\n      }\n      updateArray(arr);\n    }\n  };\n\n  const startSorting = async () => {\n    if (isPlaying) return;\n\n    setIsPlaying(true);\n    stepsRef.current = [];\n    currentStepRef.current = 0;\n\n    switch (selectedAlgorithm) {\n      case 'bubble':\n        await bubbleSort();\n        break;\n      case 'quick':\n        await quickSort();\n        break;\n      case 'merge':\n        await mergeSort();\n        break;\n      case 'insertion':\n        await insertionSort();\n        break;\n    }\n\n    executeSteps();\n  };\n\n  const executeSteps = () => {\n    const runStep = () => {\n      if (currentStepRef.current < stepsRef.current.length) {\n        stepsRef.current[currentStepRef.current]();\n        currentStepRef.current++;\n        animationRef.current = setTimeout(runStep, 101 - speed[0]);\n      } else {\n        setIsPlaying(false);\n      }\n    };\n    runStep();\n  };\n\n  const pauseSorting = () => {\n    if (animationRef.current) {\n      clearTimeout(animationRef.current);\n      animationRef.current = null;\n    }\n    setIsPlaying(false);\n  };\n\n  const resetArray = () => {\n    pauseSorting();\n    generateArray();\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-950 via-purple-950 to-slate-950 p-8\">\n      <div className=\"max-w-7xl mx-auto space-y-8\">\n        {/* Header */}\n        <motion.div\n          initial={{ opacity: 0, y: -20 }}\n          animate={{ opacity: 1, y: 0 }}\n          className=\"text-center space-y-4\"\n        >\n          <h1 className=\"text-6xl font-bold bg-gradient-to-r from-cyan-400 via-purple-400 to-pink-400 bg-clip-text text-transparent\">\n            Algorithm Visualizer\n          </h1>\n          <p className=\"text-cyan-300/70 text-lg\">Experience sorting algorithms in neon-powered glory</p>\n        </motion.div>\n\n        {/* Stats Dashboard */}\n        <motion.div\n          initial={{ opacity: 0, scale: 0.95 }}\n          animate={{ opacity: 1, scale: 1 }}\n          className=\"grid grid-cols-1 md:grid-cols-3 gap-4\"\n        >\n          <div className=\"bg-gradient-to-br from-cyan-500/10 to-blue-500/10 border border-cyan-500/30 rounded-xl p-6 backdrop-blur-sm shadow-lg shadow-cyan-500/20\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-cyan-300/70 text-sm\">Comparisons</p>\n                <p className=\"text-4xl font-bold text-cyan-400\">{comparisons}</p>\n              </div>\n              <Activity className=\"w-12 h-12 text-cyan-400/50\" />\n            </div>\n          </div>\n\n          <div className=\"bg-gradient-to-br from-purple-500/10 to-pink-500/10 border border-purple-500/30 rounded-xl p-6 backdrop-blur-sm shadow-lg shadow-purple-500/20\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-purple-300/70 text-sm\">Swaps</p>\n                <p className=\"text-4xl font-bold text-purple-400\">{swaps}</p>\n              </div>\n              <Zap className=\"w-12 h-12 text-purple-400/50\" />\n            </div>\n          </div>\n\n          <div className=\"bg-gradient-to-br from-pink-500/10 to-rose-500/10 border border-pink-500/30 rounded-xl p-6 backdrop-blur-sm shadow-lg shadow-pink-500/20\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-pink-300/70 text-sm\">Array Size</p>\n                <p className=\"text-4xl font-bold text-pink-400\">{arraySize[0]}</p>\n              </div>\n              <Activity className=\"w-12 h-12 text-pink-400/50\" />\n            </div>\n          </div>\n        </motion.div>\n\n        {/* Visualization Area */}\n        <motion.div\n          initial={{ opacity: 0 }}\n          animate={{ opacity: 1 }}\n          transition={{ delay: 0.2 }}\n          className=\"bg-slate-900/50 border border-cyan-500/20 rounded-2xl p-8 backdrop-blur-sm shadow-2xl shadow-cyan-500/10\"\n        >\n          <div className=\"flex items-end justify-center gap-1 h-96\">\n            <AnimatePresence mode=\"popLayout\">\n              {array.map((element, index) => (\n                <motion.div\n                  key={element.id}\n                  layout\n                  initial={{ opacity: 0, scale: 0 }}\n                  animate={{\n                    opacity: 1,\n                    scale: 1,\n                    height: `${(element.value / 110) * 100}%`,\n                  }}\n                  exit={{ opacity: 0, scale: 0 }}\n                  transition={{\n                    layout: { duration: 0.3, ease: 'easeInOut' },\n                    height: { duration: 0.3, ease: 'easeInOut' },\n                  }}\n                  className=\"relative flex-1 min-w-0 rounded-t-lg\"\n                  style={{\n                    background: element.isSorted\n                      ? 'linear-gradient(to top, #10b981, #34d399)'\n                      : element.isSwapping\n                      ? 'linear-gradient(to top, #f59e0b, #fbbf24)'\n                      : element.isComparing\n                      ? 'linear-gradient(to top, #ef4444, #f87171)'\n                      : 'linear-gradient(to top, #06b6d4, #22d3ee)',\n                    boxShadow: element.isSorted\n                      ? '0 0 20px rgba(16, 185, 129, 0.6), 0 0 40px rgba(16, 185, 129, 0.3)'\n                      : element.isSwapping\n                      ? '0 0 20px rgba(245, 158, 11, 0.6), 0 0 40px rgba(245, 158, 11, 0.3)'\n                      : element.isComparing\n                      ? '0 0 20px rgba(239, 68, 68, 0.6), 0 0 40px rgba(239, 68, 68, 0.3)'\n                      : '0 0 15px rgba(6, 182, 212, 0.4), 0 0 30px rgba(6, 182, 212, 0.2)',\n                  }}\n                >\n                  {element.trail && (\n                    <motion.div\n                      initial={{ opacity: 0.8, scale: 1.2 }}\n                      animate={{ opacity: 0, scale: 1.5 }}\n                      transition={{ duration: 0.5 }}\n                      className=\"absolute inset-0 rounded-t-lg\"\n                      style={{\n                        background: 'radial-gradient(circle, rgba(251, 191, 36, 0.6) 0%, transparent 70%)',\n                      }}\n                    />\n                  )}\n                </motion.div>\n              ))}\n            </AnimatePresence>\n          </div>\n        </motion.div>\n\n        {/* Controls */}\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ delay: 0.3 }}\n          className=\"bg-slate-900/50 border border-purple-500/20 rounded-2xl p-8 backdrop-blur-sm shadow-2xl shadow-purple-500/10 space-y-8\"\n        >\n          {/* Algorithm Selection */}\n          <div className=\"space-y-4\">\n            <label className=\"text-purple-300 font-semibold text-lg\">Select Algorithm</label>\n            <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n              {ALGORITHMS.map((algo) => {\n                const Icon = algo.icon;\n                return (\n                  <motion.button\n                    key={algo.id}\n                    whileHover={{ scale: 1.05 }}\n                    whileTap={{ scale: 0.95 }}\n                    onClick={() => setSelectedAlgorithm(algo.id)}\n                    className={`p-4 rounded-xl border-2 transition-all ${\n                      selectedAlgorithm === algo.id\n                        ? 'bg-gradient-to-br from-purple-500/30 to-pink-500/30 border-purple-400 shadow-lg shadow-purple-500/30'\n                        : 'bg-slate-800/50 border-slate-700 hover:border-purple-500/50'\n                    }`}\n                  >\n                    <Icon className={`w-6 h-6 mx-auto mb-2 ${\n                      selectedAlgorithm === algo.id ? 'text-purple-400' : 'text-slate-400'\n                    }`} />\n                    <p className={`text-sm font-medium ${\n                      selectedAlgorithm === algo.id ? 'text-purple-300' : 'text-slate-400'\n                    }`}>\n                      {algo.name}\n                    </p>\n                  </motion.button>\n                );\n              })}\n            </div>\n          </div>\n\n          {/* Sliders */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-8\">\n            <div className=\"space-y-4\">\n              <div className=\"flex justify-between items-center\">\n                <label className=\"text-cyan-300 font-semibold\">Speed</label>\n                <span className=\"text-cyan-400 font-mono\">{speed[0]}%</span>\n              </div>\n              <Slider\n                value={speed}\n                onValueChange={setSpeed}\n                min={1}\n                max={100}\n                step={1}\n                className=\"[&_[role=slider]]:bg-cyan-400 [&_[role=slider]]:border-cyan-300 [&_[role=slider]]:shadow-lg [&_[role=slider]]:shadow-cyan-500/50\"\n              />\n            </div>\n\n            <div className=\"space-y-4\">\n              <div className=\"flex justify-between items-center\">\n                <label className=\"text-pink-300 font-semibold\">Array Size</label>\n                <span className=\"text-pink-400 font-mono\">{arraySize[0]}</span>\n              </div>\n              <Slider\n                value={arraySize}\n                onValueChange={(val) => {\n                  if (!isPlaying) setArraySize(val);\n                }}\n                min={5}\n                max={100}\n                step={1}\n                disabled={isPlaying}\n                className=\"[&_[role=slider]]:bg-pink-400 [&_[role=slider]]:border-pink-300 [&_[role=slider]]:shadow-lg [&_[role=slider]]:shadow-pink-500/50\"\n              />\n            </div>\n          </div>\n\n          {/* Action Buttons */}\n          <div className=\"flex flex-wrap gap-4 justify-center\">\n            <motion.div whileHover={{ scale: 1.05 }} whileTap={{ scale: 0.95 }}>\n              <Button\n                onClick={isPlaying ? pauseSorting : startSorting}\n                disabled={array.length === 0}\n                className=\"bg-gradient-to-r from-cyan-500 to-blue-500 hover:from-cyan-600 hover:to-blue-600 text-white px-8 py-6 text-lg font-semibold rounded-xl shadow-lg shadow-cyan-500/30 border-0\"\n              >\n                {isPlaying ? (\n                  <>\n                    <Pause className=\"w-5 h-5 mr-2\" />\n                    Pause\n                  </>\n                ) : (\n                  <>\n                    <Play className=\"w-5 h-5 mr-2\" />\n                    Start Sorting\n                  </>\n                )}\n              </Button>\n            </motion.div>\n\n            <motion.div whileHover={{ scale: 1.05 }} whileTap={{ scale: 0.95 }}>\n              <Button\n                onClick={resetArray}\n                className=\"bg-gradient-to-r from-purple-500 to-pink-500 hover:from-purple-600 hover:to-pink-600 text-white px-8 py-6 text-lg font-semibold rounded-xl shadow-lg shadow-purple-500/30 border-0\"\n              >\n                <RotateCcw className=\"w-5 h-5 mr-2\" />\n                Generate New Array\n              </Button>\n            </motion.div>\n          </div>\n        </motion.div>\n      </div>\n    </div>\n  );\n}",
  "error": null,
  "overall_score": 52,
  "code_quality_score": 16,
  "architecture_score": 12,
  "performance_score": 10,
  "accessibility_score": 14,
  "metadata": {
    "document_id": "eval_room_91caec244ab3",
    "prompt_category": "creative",
    "prompt_complexity": 9.0
  },
  "raw_response": {
    "document_id": "eval_room_91caec244ab3",
    "mode": "sequential",
    "prompt": "Build a captivating algorithm visualizer with neon colored bars, smooth height transitions, glowing comparison indicators, trail effects during swaps, and a futuristic dashboard design with animated controls",
    "content": "import { useState, useEffect, useRef } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Slider } from '@/components/ui/slider';\nimport { Play, Pause, RotateCcw, Zap, Activity } from 'lucide-react';\nimport { motion, AnimatePresence } from 'framer-motion';\n\ninterface ArrayElement {\n  value: number;\n  id: string;\n  isComparing?: boolean;\n  isSorted?: boolean;\n  isSwapping?: boolean;\n  trail?: boolean;\n}\n\ntype Algorithm = 'bubble' | 'quick' | 'merge' | 'insertion';\n\nconst ALGORITHMS = [\n  { id: 'bubble' as Algorithm, name: 'Bubble Sort', icon: Activity },\n  { id: 'quick' as Algorithm, name: 'Quick Sort', icon: Zap },\n  { id: 'merge' as Algorithm, name: 'Merge Sort', icon: Activity },\n  { id: 'insertion' as Algorithm, name: 'Insertion Sort', icon: Zap },\n];\n\nexport default function AlgorithmVisualizer() {\n  const [array, setArray] = useState<ArrayElement[]>([]);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [speed, setSpeed] = useState([50]);\n  const [arraySize, setArraySize] = useState([30]);\n  const [selectedAlgorithm, setSelectedAlgorithm] = useState<Algorithm>('bubble');\n  const [comparisons, setComparisons] = useState(0);\n  const [swaps, setSwaps] = useState(0);\n  const animationRef = useRef<NodeJS.Timeout | null>(null);\n  const stepsRef = useRef<(() => void)[]>([]);\n  const currentStepRef = useRef(0);\n\n  const generateArray = () => {\n    const newArray: ArrayElement[] = [];\n    for (let i = 0; i < arraySize[0]; i++) {\n      newArray.push({\n        value: Math.floor(Math.random() * 100) + 10,\n        id: `${i}-${Date.now()}`,\n      });\n    }\n    setArray(newArray);\n    setComparisons(0);\n    setSwaps(0);\n    currentStepRef.current = 0;\n    stepsRef.current = [];\n  };\n\n  useEffect(() => {\n    generateArray();\n  }, [arraySize[0]]);\n\n  const sleep = () => {\n    return new Promise(resolve => setTimeout(resolve, 101 - speed[0]));\n  };\n\n  const updateArray = (newArray: ArrayElement[], incrementComparisons = false, incrementSwaps = false) => {\n    stepsRef.current.push(() => {\n      setArray([...newArray]);\n      if (incrementComparisons) setComparisons(prev => prev + 1);\n      if (incrementSwaps) setSwaps(prev => prev + 1);\n    });\n  };\n\n  const bubbleSort = async () => {\n    const arr = [...array];\n    const n = arr.length;\n\n    for (let i = 0; i < n - 1; i++) {\n      for (let j = 0; j < n - i - 1; j++) {\n        arr[j].isComparing = true;\n        arr[j + 1].isComparing = true;\n        updateArray(arr, true);\n\n        if (arr[j].value > arr[j + 1].value) {\n          arr[j].isSwapping = true;\n          arr[j + 1].isSwapping = true;\n          arr[j].trail = true;\n          arr[j + 1].trail = true;\n          updateArray(arr);\n\n          [arr[j], arr[j + 1]] = [arr[j + 1], arr[j]];\n          updateArray(arr, false, true);\n\n          arr[j].isSwapping = false;\n          arr[j + 1].isSwapping = false;\n        }\n\n        arr[j].isComparing = false;\n        arr[j + 1].isComparing = false;\n        arr[j].trail = false;\n        arr[j + 1].trail = false;\n        updateArray(arr);\n      }\n      arr[n - i - 1].isSorted = true;\n      updateArray(arr);\n    }\n    arr[0].isSorted = true;\n    updateArray(arr);\n  };\n\n  const quickSort = async () => {\n    const arr = [...array];\n\n    const partition = (low: number, high: number): number => {\n      const pivot = arr[high].value;\n      arr[high].isComparing = true;\n      updateArray(arr);\n\n      let i = low - 1;\n\n      for (let j = low; j < high; j++) {\n        arr[j].isComparing = true;\n        updateArray(arr, true);\n\n        if (arr[j].value < pivot) {\n          i++;\n          arr[i].isSwapping = true;\n          arr[j].isSwapping = true;\n          arr[i].trail = true;\n          arr[j].trail = true;\n          updateArray(arr);\n\n          [arr[i], arr[j]] = [arr[j], arr[i]];\n          updateArray(arr, false, true);\n\n          arr[i].isSwapping = false;\n          arr[j].isSwapping = false;\n        }\n\n        arr[j].isComparing = false;\n        arr[j].trail = false;\n        updateArray(arr);\n      }\n\n      arr[i + 1].isSwapping = true;\n      arr[high].isSwapping = true;\n      arr[i + 1].trail = true;\n      arr[high].trail = true;\n      updateArray(arr);\n\n      [arr[i + 1], arr[high]] = [arr[high], arr[i + 1]];\n      updateArray(arr, false, true);\n\n      arr[i + 1].isSwapping = false;\n      arr[high].isSwapping = false;\n      arr[high].isComparing = false;\n      arr[i + 1].trail = false;\n      arr[high].trail = false;\n      updateArray(arr);\n\n      return i + 1;\n    };\n\n    const quickSortHelper = (low: number, high: number) => {\n      if (low < high) {\n        const pi = partition(low, high);\n        arr[pi].isSorted = true;\n        updateArray(arr);\n        quickSortHelper(low, pi - 1);\n        quickSortHelper(pi + 1, high);\n      } else if (low === high) {\n        arr[low].isSorted = true;\n        updateArray(arr);\n      }\n    };\n\n    quickSortHelper(0, arr.length - 1);\n  };\n\n  const mergeSort = async () => {\n    const arr = [...array];\n\n    const merge = (left: number, mid: number, right: number) => {\n      const leftArr = arr.slice(left, mid + 1);\n      const rightArr = arr.slice(mid + 1, right + 1);\n\n      let i = 0, j = 0, k = left;\n\n      while (i < leftArr.length && j < rightArr.length) {\n        arr[k].isComparing = true;\n        updateArray(arr, true);\n\n        if (leftArr[i].value <= rightArr[j].value) {\n          arr[k] = { ...leftArr[i], isSwapping: true, trail: true };\n          updateArray(arr, false, true);\n          arr[k].isSwapping = false;\n          arr[k].trail = false;\n          i++;\n        } else {\n          arr[k] = { ...rightArr[j], isSwapping: true, trail: true };\n          updateArray(arr, false, true);\n          arr[k].isSwapping = false;\n          arr[k].trail = false;\n          j++;\n        }\n\n        arr[k].isComparing = false;\n        updateArray(arr);\n        k++;\n      }\n\n      while (i < leftArr.length) {\n        arr[k] = { ...leftArr[i], trail: true };\n        updateArray(arr);\n        arr[k].trail = false;\n        i++;\n        k++;\n      }\n\n      while (j < rightArr.length) {\n        arr[k] = { ...rightArr[j], trail: true };\n        updateArray(arr);\n        arr[k].trail = false;\n        j++;\n        k++;\n      }\n    };\n\n    const mergeSortHelper = (left: number, right: number) => {\n      if (left < right) {\n        const mid = Math.floor((left + right) / 2);\n        mergeSortHelper(left, mid);\n        mergeSortHelper(mid + 1, right);\n        merge(left, mid, right);\n\n        for (let i = left; i <= right; i++) {\n          arr[i].isSorted = true;\n        }\n        updateArray(arr);\n      }\n    };\n\n    mergeSortHelper(0, arr.length - 1);\n  };\n\n  const insertionSort = async () => {\n    const arr = [...array];\n    arr[0].isSorted = true;\n    updateArray(arr);\n\n    for (let i = 1; i < arr.length; i++) {\n      const key = arr[i];\n      key.isComparing = true;\n      key.trail = true;\n      updateArray(arr);\n\n      let j = i - 1;\n\n      while (j >= 0 && arr[j].value > key.value) {\n        arr[j].isComparing = true;\n        updateArray(arr, true);\n\n        arr[j + 1] = { ...arr[j], isSwapping: true, trail: true };\n        updateArray(arr, false, true);\n\n        arr[j + 1].isSwapping = false;\n        arr[j].isComparing = false;\n        j--;\n      }\n\n      arr[j + 1] = { ...key, isComparing: false, isSorted: true, trail: false };\n      updateArray(arr);\n\n      for (let k = 0; k <= i; k++) {\n        arr[k].isSorted = true;\n      }\n      updateArray(arr);\n    }\n  };\n\n  const startSorting = async () => {\n    if (isPlaying) return;\n\n    setIsPlaying(true);\n    stepsRef.current = [];\n    currentStepRef.current = 0;\n\n    switch (selectedAlgorithm) {\n      case 'bubble':\n        await bubbleSort();\n        break;\n      case 'quick':\n        await quickSort();\n        break;\n      case 'merge':\n        await mergeSort();\n        break;\n      case 'insertion':\n        await insertionSort();\n        break;\n    }\n\n    executeSteps();\n  };\n\n  const executeSteps = () => {\n    const runStep = () => {\n      if (currentStepRef.current < stepsRef.current.length) {\n        stepsRef.current[currentStepRef.current]();\n        currentStepRef.current++;\n        animationRef.current = setTimeout(runStep, 101 - speed[0]);\n      } else {\n        setIsPlaying(false);\n      }\n    };\n    runStep();\n  };\n\n  const pauseSorting = () => {\n    if (animationRef.current) {\n      clearTimeout(animationRef.current);\n      animationRef.current = null;\n    }\n    setIsPlaying(false);\n  };\n\n  const resetArray = () => {\n    pauseSorting();\n    generateArray();\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-950 via-purple-950 to-slate-950 p-8\">\n      <div className=\"max-w-7xl mx-auto space-y-8\">\n        {/* Header */}\n        <motion.div\n          initial={{ opacity: 0, y: -20 }}\n          animate={{ opacity: 1, y: 0 }}\n          className=\"text-center space-y-4\"\n        >\n          <h1 className=\"text-6xl font-bold bg-gradient-to-r from-cyan-400 via-purple-400 to-pink-400 bg-clip-text text-transparent\">\n            Algorithm Visualizer\n          </h1>\n          <p className=\"text-cyan-300/70 text-lg\">Experience sorting algorithms in neon-powered glory</p>\n        </motion.div>\n\n        {/* Stats Dashboard */}\n        <motion.div\n          initial={{ opacity: 0, scale: 0.95 }}\n          animate={{ opacity: 1, scale: 1 }}\n          className=\"grid grid-cols-1 md:grid-cols-3 gap-4\"\n        >\n          <div className=\"bg-gradient-to-br from-cyan-500/10 to-blue-500/10 border border-cyan-500/30 rounded-xl p-6 backdrop-blur-sm shadow-lg shadow-cyan-500/20\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-cyan-300/70 text-sm\">Comparisons</p>\n                <p className=\"text-4xl font-bold text-cyan-400\">{comparisons}</p>\n              </div>\n              <Activity className=\"w-12 h-12 text-cyan-400/50\" />\n            </div>\n          </div>\n\n          <div className=\"bg-gradient-to-br from-purple-500/10 to-pink-500/10 border border-purple-500/30 rounded-xl p-6 backdrop-blur-sm shadow-lg shadow-purple-500/20\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-purple-300/70 text-sm\">Swaps</p>\n                <p className=\"text-4xl font-bold text-purple-400\">{swaps}</p>\n              </div>\n              <Zap className=\"w-12 h-12 text-purple-400/50\" />\n            </div>\n          </div>\n\n          <div className=\"bg-gradient-to-br from-pink-500/10 to-rose-500/10 border border-pink-500/30 rounded-xl p-6 backdrop-blur-sm shadow-lg shadow-pink-500/20\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-pink-300/70 text-sm\">Array Size</p>\n                <p className=\"text-4xl font-bold text-pink-400\">{arraySize[0]}</p>\n              </div>\n              <Activity className=\"w-12 h-12 text-pink-400/50\" />\n            </div>\n          </div>\n        </motion.div>\n\n        {/* Visualization Area */}\n        <motion.div\n          initial={{ opacity: 0 }}\n          animate={{ opacity: 1 }}\n          transition={{ delay: 0.2 }}\n          className=\"bg-slate-900/50 border border-cyan-500/20 rounded-2xl p-8 backdrop-blur-sm shadow-2xl shadow-cyan-500/10\"\n        >\n          <div className=\"flex items-end justify-center gap-1 h-96\">\n            <AnimatePresence mode=\"popLayout\">\n              {array.map((element, index) => (\n                <motion.div\n                  key={element.id}\n                  layout\n                  initial={{ opacity: 0, scale: 0 }}\n                  animate={{\n                    opacity: 1,\n                    scale: 1,\n                    height: `${(element.value / 110) * 100}%`,\n                  }}\n                  exit={{ opacity: 0, scale: 0 }}\n                  transition={{\n                    layout: { duration: 0.3, ease: 'easeInOut' },\n                    height: { duration: 0.3, ease: 'easeInOut' },\n                  }}\n                  className=\"relative flex-1 min-w-0 rounded-t-lg\"\n                  style={{\n                    background: element.isSorted\n                      ? 'linear-gradient(to top, #10b981, #34d399)'\n                      : element.isSwapping\n                      ? 'linear-gradient(to top, #f59e0b, #fbbf24)'\n                      : element.isComparing\n                      ? 'linear-gradient(to top, #ef4444, #f87171)'\n                      : 'linear-gradient(to top, #06b6d4, #22d3ee)',\n                    boxShadow: element.isSorted\n                      ? '0 0 20px rgba(16, 185, 129, 0.6), 0 0 40px rgba(16, 185, 129, 0.3)'\n                      : element.isSwapping\n                      ? '0 0 20px rgba(245, 158, 11, 0.6), 0 0 40px rgba(245, 158, 11, 0.3)'\n                      : element.isComparing\n                      ? '0 0 20px rgba(239, 68, 68, 0.6), 0 0 40px rgba(239, 68, 68, 0.3)'\n                      : '0 0 15px rgba(6, 182, 212, 0.4), 0 0 30px rgba(6, 182, 212, 0.2)',\n                  }}\n                >\n                  {element.trail && (\n                    <motion.div\n                      initial={{ opacity: 0.8, scale: 1.2 }}\n                      animate={{ opacity: 0, scale: 1.5 }}\n                      transition={{ duration: 0.5 }}\n                      className=\"absolute inset-0 rounded-t-lg\"\n                      style={{\n                        background: 'radial-gradient(circle, rgba(251, 191, 36, 0.6) 0%, transparent 70%)',\n                      }}\n                    />\n                  )}\n                </motion.div>\n              ))}\n            </AnimatePresence>\n          </div>\n        </motion.div>\n\n        {/* Controls */}\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ delay: 0.3 }}\n          className=\"bg-slate-900/50 border border-purple-500/20 rounded-2xl p-8 backdrop-blur-sm shadow-2xl shadow-purple-500/10 space-y-8\"\n        >\n          {/* Algorithm Selection */}\n          <div className=\"space-y-4\">\n            <label className=\"text-purple-300 font-semibold text-lg\">Select Algorithm</label>\n            <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n              {ALGORITHMS.map((algo) => {\n                const Icon = algo.icon;\n                return (\n                  <motion.button\n                    key={algo.id}\n                    whileHover={{ scale: 1.05 }}\n                    whileTap={{ scale: 0.95 }}\n                    onClick={() => setSelectedAlgorithm(algo.id)}\n                    className={`p-4 rounded-xl border-2 transition-all ${\n                      selectedAlgorithm === algo.id\n                        ? 'bg-gradient-to-br from-purple-500/30 to-pink-500/30 border-purple-400 shadow-lg shadow-purple-500/30'\n                        : 'bg-slate-800/50 border-slate-700 hover:border-purple-500/50'\n                    }`}\n                  >\n                    <Icon className={`w-6 h-6 mx-auto mb-2 ${\n                      selectedAlgorithm === algo.id ? 'text-purple-400' : 'text-slate-400'\n                    }`} />\n                    <p className={`text-sm font-medium ${\n                      selectedAlgorithm === algo.id ? 'text-purple-300' : 'text-slate-400'\n                    }`}>\n                      {algo.name}\n                    </p>\n                  </motion.button>\n                );\n              })}\n            </div>\n          </div>\n\n          {/* Sliders */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-8\">\n            <div className=\"space-y-4\">\n              <div className=\"flex justify-between items-center\">\n                <label className=\"text-cyan-300 font-semibold\">Speed</label>\n                <span className=\"text-cyan-400 font-mono\">{speed[0]}%</span>\n              </div>\n              <Slider\n                value={speed}\n                onValueChange={setSpeed}\n                min={1}\n                max={100}\n                step={1}\n                className=\"[&_[role=slider]]:bg-cyan-400 [&_[role=slider]]:border-cyan-300 [&_[role=slider]]:shadow-lg [&_[role=slider]]:shadow-cyan-500/50\"\n              />\n            </div>\n\n            <div className=\"space-y-4\">\n              <div className=\"flex justify-between items-center\">\n                <label className=\"text-pink-300 font-semibold\">Array Size</label>\n                <span className=\"text-pink-400 font-mono\">{arraySize[0]}</span>\n              </div>\n              <Slider\n                value={arraySize}\n                onValueChange={(val) => {\n                  if (!isPlaying) setArraySize(val);\n                }}\n                min={5}\n                max={100}\n                step={1}\n                disabled={isPlaying}\n                className=\"[&_[role=slider]]:bg-pink-400 [&_[role=slider]]:border-pink-300 [&_[role=slider]]:shadow-lg [&_[role=slider]]:shadow-pink-500/50\"\n              />\n            </div>\n          </div>\n\n          {/* Action Buttons */}\n          <div className=\"flex flex-wrap gap-4 justify-center\">\n            <motion.div whileHover={{ scale: 1.05 }} whileTap={{ scale: 0.95 }}>\n              <Button\n                onClick={isPlaying ? pauseSorting : startSorting}\n                disabled={array.length === 0}\n                className=\"bg-gradient-to-r from-cyan-500 to-blue-500 hover:from-cyan-600 hover:to-blue-600 text-white px-8 py-6 text-lg font-semibold rounded-xl shadow-lg shadow-cyan-500/30 border-0\"\n              >\n                {isPlaying ? (\n                  <>\n                    <Pause className=\"w-5 h-5 mr-2\" />\n                    Pause\n                  </>\n                ) : (\n                  <>\n                    <Play className=\"w-5 h-5 mr-2\" />\n                    Start Sorting\n                  </>\n                )}\n              </Button>\n            </motion.div>\n\n            <motion.div whileHover={{ scale: 1.05 }} whileTap={{ scale: 0.95 }}>\n              <Button\n                onClick={resetArray}\n                className=\"bg-gradient-to-r from-purple-500 to-pink-500 hover:from-purple-600 hover:to-pink-600 text-white px-8 py-6 text-lg font-semibold rounded-xl shadow-lg shadow-purple-500/30 border-0\"\n              >\n                <RotateCcw className=\"w-5 h-5 mr-2\" />\n                Generate New Array\n              </Button>\n            </motion.div>\n          </div>\n        </motion.div>\n      </div>\n    </div>\n  );\n}",
    "error": null,
    "elapsed_time": 69.33709979057312,
    "success": true
  }
}