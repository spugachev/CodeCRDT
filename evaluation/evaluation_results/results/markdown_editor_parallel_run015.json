{
  "prompt_id": "markdown_editor",
  "prompt_name": "Premium Markdown Editor",
  "mode": "parallel",
  "run_number": 15,
  "timestamp": "2025-10-14T11:26:25.813646",
  "response_time": 89.37075853347778,
  "total_tokens": null,
  "response_content": "import { useState, useCallback } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Bold, Italic, Code, List, ListOrdered, Link, Image, Eye, EyeOff } from 'lucide-react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { useMemo } from 'react';\n\ninterface ToolbarButton {\n  id: string;\n  icon: any;\n  label: string;\n  action: string;\n}\n\nconst toolbarButtons: ToolbarButton[] = [\n  { id: 'bold', icon: Bold, label: 'Bold', action: '**text**' },\n  { id: 'italic', icon: Italic, label: 'Italic', action: '*text*' },\n  { id: 'code', icon: Code, label: 'Code', action: '`code`' },\n  { id: 'list', icon: List, label: 'Bullet List', action: '- item' },\n  { id: 'ordered', icon: ListOrdered, label: 'Numbered List', action: '1. item' },\n  { id: 'link', icon: Link, label: 'Link', action: '[text](url)' },\n  { id: 'image', icon: Image, label: 'Image', action: '![alt](url)' }\n];\n\n// Markdown parser with syntax highlighting\nconst parseMarkdown = (text: string): string => {\n  let html = text;\n\n  // Code blocks with syntax highlighting\n  html = html.replace(/```(\\w+)?\\n([\\s\\S]*?)```/g, (match, lang, code) => {\n    const language = lang || 'plaintext';\n    const highlightedCode = highlightCode(code.trim(), language);\n    return `<pre class=\"code-block\"><div class=\"code-header\"><span class=\"code-lang\">${language}</span></div><code class=\"language-${language}\">${highlightedCode}</code></pre>`;\n  });\n\n  // Inline code\n  html = html.replace(/`([^`]+)`/g, '<code class=\"inline-code\">$1</code>');\n\n  // Headers\n  html = html.replace(/^### (.*$)/gim, '<h3 class=\"markdown-h3\">$1</h3>');\n  html = html.replace(/^## (.*$)/gim, '<h2 class=\"markdown-h2\">$1</h2>');\n  html = html.replace(/^# (.*$)/gim, '<h1 class=\"markdown-h1\">$1</h1>');\n\n  // Bold\n  html = html.replace(/\\*\\*(.+?)\\*\\*/g, '<strong class=\"markdown-bold\">$1</strong>');\n\n  // Italic\n  html = html.replace(/\\*(.+?)\\*/g, '<em class=\"markdown-italic\">$1</em>');\n\n  // Links\n  html = html.replace(/\\[([^\\]]+)\\]\\(([^)]+)\\)/g, '<a href=\"$2\" class=\"markdown-link\" target=\"_blank\" rel=\"noopener noreferrer\">$1</a>');\n\n  // Images\n  html = html.replace(/!\\[([^\\]]*)\\]\\(([^)]+)\\)/g, '<img src=\"$2\" alt=\"$1\" class=\"markdown-image\" />');\n\n  // Blockquotes\n  html = html.replace(/^> (.*$)/gim, '<blockquote class=\"markdown-blockquote\">$1</blockquote>');\n\n  // Horizontal rules\n  html = html.replace(/^---$/gim, '<hr class=\"markdown-hr\" />');\n\n  // Unordered lists\n  html = html.replace(/^\\- (.+)$/gim, '<li class=\"markdown-li\">$1</li>');\n  html = html.replace(/(<li class=\"markdown-li\">.*<\\/li>)/s, '<ul class=\"markdown-ul\">$1</ul>');\n\n  // Ordered lists\n  html = html.replace(/^\\d+\\. (.+)$/gim, '<li class=\"markdown-li-ordered\">$1</li>');\n  html = html.replace(/(<li class=\"markdown-li-ordered\">.*<\\/li>)/s, '<ol class=\"markdown-ol\">$1</ol>');\n\n  // Paragraphs\n  html = html.split('\\n\\n').map(para => {\n    if (para.match(/^<(h[1-3]|pre|ul|ol|blockquote|hr)/)) {\n      return para;\n    }\n    return para.trim() ? `<p class=\"markdown-p\">${para}</p>` : '';\n  }).join('\\n');\n\n  return html;\n};\n\n// Syntax highlighter for code blocks\nconst highlightCode = (code: string, language: string): string => {\n  const escapeHtml = (str: string) => \n    str.replace(/&/g, '&amp;')\n       .replace(/</g, '&lt;')\n       .replace(/>/g, '&gt;')\n       .replace(/\"/g, '&quot;')\n       .replace(/'/g, '&#039;');\n\n  let highlighted = escapeHtml(code);\n\n  if (language === 'javascript' || language === 'typescript') {\n    // Keywords\n    highlighted = highlighted.replace(/\\b(function|const|let|var|return|if|else|for|while|class|import|export|from|async|await|new|this|typeof|instanceof)\\b/g, \n      '<span class=\"token-keyword\">$1</span>');\n    \n    // Strings\n    highlighted = highlighted.replace(/(['\"`])(.*?)\\1/g, '<span class=\"token-string\">$1$2$1</span>');\n    \n    // Functions\n    highlighted = highlighted.replace(/\\b([a-zA-Z_$][a-zA-Z0-9_$]*)\\s*\\(/g, '<span class=\"token-function\">$1</span>(');\n    \n    // Comments\n    highlighted = highlighted.replace(/(\\/\\/.*$)/gm, '<span class=\"token-comment\">$1</span>');\n    \n    // Numbers\n    highlighted = highlighted.replace(/\\b(\\d+)\\b/g, '<span class=\"token-number\">$1</span>');\n  } else if (language === 'python') {\n    // Keywords\n    highlighted = highlighted.replace(/\\b(def|class|return|if|else|elif|for|while|import|from|as|with|try|except|finally|pass|break|continue|lambda|yield)\\b/g, \n      '<span class=\"token-keyword\">$1</span>');\n    \n    // Strings\n    highlighted = highlighted.replace(/(['\"])(.*?)\\1/g, '<span class=\"token-string\">$1$2$1</span>');\n    \n    // Functions\n    highlighted = highlighted.replace(/\\b([a-zA-Z_][a-zA-Z0-9_]*)\\s*\\(/g, '<span class=\"token-function\">$1</span>(');\n    \n    // Comments\n    highlighted = highlighted.replace(/(#.*$)/gm, '<span class=\"token-comment\">$1</span>');\n    \n    // Numbers\n    highlighted = highlighted.replace(/\\b(\\d+)\\b/g, '<span class=\"token-number\">$1</span>');\n  }\n\n  return highlighted;\n};\nconst mockMarkdownContent = `# Welcome to Premium Markdown Editor\n\n## Features\n\nThis is a **bold** statement and this is *italic* text.\n\n### Code Blocks\n\n\\`\\`\\`javascript\nfunction greet(name) {\n  console.log(\\`Hello, \\${name}!\\`);\n  return true;\n}\n\\`\\`\\`\n\n\\`\\`\\`python\ndef calculate(x, y):\n    result = x + y\n    return result\n\\`\\`\\`\n\n### Lists\n\n- First item\n- Second item\n- Third item\n\n1. Numbered one\n2. Numbered two\n3. Numbered three\n\n### Inline Code\n\nUse \\`const variable = 'value'\\` for inline code.\n\n### Links and Images\n\n[Visit Example](https://example.com)\n\n> This is a blockquote with important information.\n\n---\n\n**End of document**\n`;\n\n// Global styles for markdown preview\nconst markdownStyles = `\n  .markdown-preview h1.markdown-h1 {\n    font-size: 2em;\n    font-weight: 700;\n    margin: 0.67em 0;\n    color: #569cd6;\n    border-bottom: 1px solid #404040;\n    padding-bottom: 0.3em;\n  }\n\n  .markdown-preview h2.markdown-h2 {\n    font-size: 1.5em;\n    font-weight: 600;\n    margin: 0.75em 0 0.5em 0;\n    color: #4ec9b0;\n    border-bottom: 1px solid #404040;\n    padding-bottom: 0.3em;\n  }\n\n  .markdown-preview h3.markdown-h3 {\n    font-size: 1.25em;\n    font-weight: 600;\n    margin: 0.5em 0;\n    color: #4ec9b0;\n  }\n\n  .markdown-preview p.markdown-p {\n    margin: 1em 0;\n    color: #d4d4d4;\n  }\n\n  .markdown-preview strong.markdown-bold {\n    font-weight: 700;\n    color: #dcdcaa;\n  }\n\n  .markdown-preview em.markdown-italic {\n    font-style: italic;\n    color: #ce9178;\n  }\n\n  .markdown-preview code.inline-code {\n    background: #2d2d2d;\n    color: #ce9178;\n    padding: 2px 6px;\n    border-radius: 3px;\n    font-family: 'Consolas', 'Monaco', 'Courier New', monospace;\n    font-size: 0.9em;\n    border: 1px solid #404040;\n  }\n\n  .markdown-preview pre.code-block {\n    background: #1e1e1e;\n    border: 1px solid #404040;\n    border-radius: 6px;\n    margin: 1em 0;\n    overflow: hidden;\n  }\n\n  .markdown-preview .code-header {\n    background: #2d2d2d;\n    padding: 8px 16px;\n    border-bottom: 1px solid #404040;\n    font-size: 0.75em;\n    color: #858585;\n    font-weight: 500;\n    text-transform: uppercase;\n    letter-spacing: 0.5px;\n  }\n\n  .markdown-preview .code-lang {\n    color: #4ec9b0;\n  }\n\n  .markdown-preview pre.code-block code {\n    display: block;\n    padding: 16px;\n    overflow-x: auto;\n    font-family: 'Consolas', 'Monaco', 'Courier New', monospace;\n    font-size: 0.9em;\n    line-height: 1.5;\n    color: #d4d4d4;\n  }\n\n  .markdown-preview .token-keyword {\n    color: #569cd6;\n    font-weight: 500;\n  }\n\n  .markdown-preview .token-string {\n    color: #ce9178;\n  }\n\n  .markdown-preview .token-function {\n    color: #dcdcaa;\n  }\n\n  .markdown-preview .token-comment {\n    color: #6a9955;\n    font-style: italic;\n  }\n\n  .markdown-preview .token-number {\n    color: #b5cea8;\n  }\n\n  .markdown-preview a.markdown-link {\n    color: #3794ff;\n    text-decoration: none;\n    border-bottom: 1px solid transparent;\n    transition: border-color 0.2s;\n  }\n\n  .markdown-preview a.markdown-link:hover {\n    border-bottom-color: #3794ff;\n  }\n\n  .markdown-preview img.markdown-image {\n    max-width: 100%;\n    height: auto;\n    border-radius: 4px;\n    margin: 1em 0;\n  }\n\n  .markdown-preview ul.markdown-ul,\n  .markdown-preview ol.markdown-ol {\n    margin: 1em 0;\n    padding-left: 2em;\n  }\n\n  .markdown-preview li.markdown-li,\n  .markdown-preview li.markdown-li-ordered {\n    margin: 0.5em 0;\n    color: #d4d4d4;\n  }\n\n  .markdown-preview blockquote.markdown-blockquote {\n    border-left: 4px solid #007acc;\n    padding-left: 1em;\n    margin: 1em 0;\n    color: #9cdcfe;\n    background: rgba(0, 122, 204, 0.1);\n    padding: 0.5em 1em;\n    border-radius: 0 4px 4px 0;\n  }\n\n  .markdown-preview hr.markdown-hr {\n    border: none;\n    border-top: 1px solid #404040;\n    margin: 2em 0;\n  }\n`;\n\n// Inject styles into document\nif (typeof document !== 'undefined') {\n  const styleId = 'markdown-preview-styles';\n  if (!document.getElementById(styleId)) {\n    const styleElement = document.createElement('style');\n    styleElement.id = styleId;\n    styleElement.textContent = markdownStyles;\n    document.head.appendChild(styleElement);\n  }\n}\n\nexport default function MarkdownEditor() {\n  const [markdown, setMarkdown] = useState(mockMarkdownContent);\n  const [showPreview, setShowPreview] = useState(true);\n  const [cursorPosition, setCursorPosition] = useState(0);\n\n  const handleMarkdownChange = useCallback((e: React.ChangeEvent<HTMLTextAreaElement>) => {\n    setMarkdown(e.target.value);\n    setCursorPosition(e.target.selectionStart);\n  }, []);\n\n  const togglePreview = useCallback(() => {\n    setShowPreview(prev => !prev);\n  }, []);\n\n  const handleToolbarAction = useCallback((action: string) => {\n    const textareaRef = document.querySelector('textarea') as HTMLTextAreaElement;\n    if (!textareaRef) return;\n\n    const start = textareaRef.selectionStart;\n    const end = textareaRef.selectionEnd;\n    const selectedText = markdown.substring(start, end);\n    \n    let newText = '';\n    let cursorOffset = 0;\n\n    // Handle different markdown syntax patterns\n    if (action.includes('text') && selectedText) {\n      // Replace 'text' with selected text\n      newText = action.replace('text', selectedText);\n      cursorOffset = newText.length;\n    } else if (action.includes('url')) {\n      // For links and images, position cursor at 'text' or 'alt'\n      if (selectedText) {\n        newText = action.replace('text', selectedText).replace('alt', selectedText);\n        cursorOffset = newText.indexOf('url');\n      } else {\n        newText = action;\n        cursorOffset = action.indexOf('text') !== -1 ? action.indexOf('text') : action.indexOf('alt');\n      }\n    } else if (action.includes('item')) {\n      // For lists, add on new line if not at start\n      const beforeCursor = markdown.substring(0, start);\n      const needsNewline = beforeCursor.length > 0 && !beforeCursor.endsWith('\\n');\n      newText = (needsNewline ? '\\n' : '') + action;\n      cursorOffset = newText.length;\n    } else {\n      newText = action;\n      cursorOffset = selectedText ? newText.length : action.indexOf('text');\n      if (cursorOffset === -1) cursorOffset = newText.length;\n    }\n\n    // Insert the new text\n    const newMarkdown = markdown.substring(0, start) + newText + markdown.substring(end);\n    setMarkdown(newMarkdown);\n\n    // Update cursor position after state update\n    setTimeout(() => {\n      if (textareaRef) {\n        const newCursorPos = start + cursorOffset;\n        textareaRef.focus();\n        textareaRef.setSelectionRange(newCursorPos, newCursorPos);\n        setCursorPosition(newCursorPos);\n      }\n    }, 0);\n\n// MarkdownPreview component with VS Code styling\ninterface MarkdownPreviewProps {\n  markdown: string;\n}\n\nconst MarkdownPreview: React.FC<MarkdownPreviewProps> = ({ markdown }) => {\n  const htmlContent = useMemo(() => parseMarkdown(markdown), [markdown]);\n\n  return (\n    <div \n      className=\"markdown-preview\"\n      dangerouslySetInnerHTML={{ __html: htmlContent }}\n      style={{\n        color: '#d4d4d4',\n        lineHeight: '1.6',\n      }}\n    />\n  );\n};\n  }, [markdown, cursorPosition]);\n\n\n  return (\n    <div className=\"min-h-screen bg-[#1e1e1e] text-gray-100\">\n      <div className=\"container mx-auto px-4 py-6\">\n        {/* Header */}\n        <div className=\"mb-6 flex items-center justify-between\">\n          <h1 className=\"text-3xl font-bold bg-gradient-to-r from-blue-400 to-purple-500 bg-clip-text text-transparent\">\n            Premium Markdown Editor\n          </h1>\n          <Button\n            onClick={togglePreview}\n            variant=\"outline\"\n            className=\"bg-[#2d2d2d] border-gray-700 hover:bg-[#3d3d3d] text-gray-100\"\n          >\n            {showPreview ? <EyeOff className=\"w-4 h-4 mr-2\" /> : <Eye className=\"w-4 h-4 mr-2\" />}\n            {showPreview ? 'Hide Preview' : 'Show Preview'}\n          </Button>\n        </div>\n\n        \n        {/* Floating Toolbar */}\n        <motion.div\n          initial={{ opacity: 0, y: -20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.3 }}\n          className=\"mb-4 bg-[#2d2d2d] border border-gray-700 rounded-lg p-2 shadow-xl\"\n        >\n          <div className=\"flex items-center gap-1 flex-wrap\">\n            {toolbarButtons.map((button) => {\n              const Icon = button.icon;\n              return (\n                <motion.div\n                  key={button.id}\n                  whileHover={{ scale: 1.05 }}\n                  whileTap={{ scale: 0.95 }}\n                >\n                  <Button\n                    onClick={() => handleToolbarAction(button.action)}\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    className=\"h-9 w-9 p-0 hover:bg-[#3d3d3d] hover:text-blue-400 transition-colors duration-200\"\n                    title={button.label}\n                  >\n                    <Icon className=\"w-4 h-4\" />\n                  </Button>\n                </motion.div>\n              );\n            })}\n          </div>\n        </motion.div>\n\n        {/* Editor Layout */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n          {/* Editor Panel */}\n          <motion.div\n            layout\n            className=\"relative\"\n            initial={{ opacity: 0, x: -20 }}\n            animate={{ opacity: 1, x: 0 }}\n            transition={{ duration: 0.3 }}\n          >\n            <div className=\"bg-[#1e1e1e] border border-gray-800 rounded-lg overflow-hidden shadow-2xl\">\n              <div className=\"bg-[#2d2d2d] px-4 py-2 border-b border-gray-800 flex items-center justify-between\">\n                <span className=\"text-sm font-medium text-gray-400\">Editor</span>\n                <div className=\"flex gap-2\">\n                  <div className=\"w-3 h-3 rounded-full bg-red-500\"></div>\n                  <div className=\"w-3 h-3 rounded-full bg-yellow-500\"></div>\n                  <div className=\"w-3 h-3 rounded-full bg-green-500\"></div>\n                </div>\n              </div>\n              <textarea\n                value={markdown}\n                onChange={handleMarkdownChange}\n                className=\"w-full h-[600px] bg-[#1e1e1e] text-gray-100 p-6 font-mono text-sm resize-none focus:outline-none\"\n                placeholder=\"Start typing your markdown...\"\n                spellCheck={false}\n              />\n            </div>\n          </motion.div>\n\n          {/* Preview Panel */}\n          <AnimatePresence mode=\"wait\">\n            {showPreview && (\n              <motion.div\n                key=\"preview\"\n                initial={{ opacity: 0, x: 20 }}\n                animate={{ opacity: 1, x: 0 }}\n                exit={{ opacity: 0, x: 20 }}\n                transition={{ duration: 0.3 }}\n                className=\"relative\"\n              >\n                <div className=\"bg-[#1e1e1e] border border-gray-800 rounded-lg overflow-hidden shadow-2xl\">\n                  <div className=\"bg-[#2d2d2d] px-4 py-2 border-b border-gray-800\">\n                    <span className=\"text-sm font-medium text-gray-400\">Preview</span>\n                  </div>\n                  <div className=\"p-6 h-[600px] overflow-y-auto\">\n                    <MarkdownPreview markdown={markdown} />\n                  </div>\n                </div>\n              </motion.div>\n            )}\n          </AnimatePresence>\n        </div>\n\n        {/* Stats Bar */}\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ delay: 0.2 }}\n          className=\"mt-6 bg-[#2d2d2d] border border-gray-800 rounded-lg p-4\"\n        >\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n            <div className=\"flex flex-col items-center justify-center p-3 bg-[#1e1e1e] rounded-lg border border-gray-800\">\n              <span className=\"text-2xl font-bold text-blue-400\">{markdown.length}</span>\n              <span className=\"text-xs text-gray-500 mt-1\">Characters</span>\n            </div>\n            <div className=\"flex flex-col items-center justify-center p-3 bg-[#1e1e1e] rounded-lg border border-gray-800\">\n              <span className=\"text-2xl font-bold text-purple-400\">\n                {markdown.trim().split(/\\s+/).filter(word => word.length > 0).length}\n              </span>\n              <span className=\"text-xs text-gray-500 mt-1\">Words</span>\n            </div>\n            <div className=\"flex flex-col items-center justify-center p-3 bg-[#1e1e1e] rounded-lg border border-gray-800\">\n              <span className=\"text-2xl font-bold text-green-400\">\n                {markdown.split('\\n').length}\n              </span>\n              <span className=\"text-xs text-gray-500 mt-1\">Lines</span>\n            </div>\n            <div className=\"flex flex-col items-center justify-center p-3 bg-[#1e1e1e] rounded-lg border border-gray-800\">\n              <span className=\"text-2xl font-bold text-orange-400\">\n                {Math.ceil(markdown.trim().split(/\\s+/).filter(word => word.length > 0).length / 200)} min\n              </span>\n              <span className=\"text-xs text-gray-500 mt-1\">Reading Time</span>\n            </div>\n          </div>\n        </motion.div>\n      </div>\n    </div>\n  );\n}",
  "error": null,
  "overall_score": 50,
  "code_quality_score": 14,
  "architecture_score": 11,
  "performance_score": 12,
  "accessibility_score": 13,
  "metadata": {
    "document_id": "eval_room_599830690134",
    "prompt_category": "productivity",
    "prompt_complexity": 8.0
  },
  "raw_response": {
    "document_id": "eval_room_599830690134",
    "mode": "parallel",
    "prompt": "Create a premium markdown editor with dark theme, syntax highlighting with vibrant colors, smooth live preview transitions, floating toolbar with hover effects, and code block styling like VS Code",
    "content": "import { useState, useCallback } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Bold, Italic, Code, List, ListOrdered, Link, Image, Eye, EyeOff } from 'lucide-react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { useMemo } from 'react';\n\ninterface ToolbarButton {\n  id: string;\n  icon: any;\n  label: string;\n  action: string;\n}\n\nconst toolbarButtons: ToolbarButton[] = [\n  { id: 'bold', icon: Bold, label: 'Bold', action: '**text**' },\n  { id: 'italic', icon: Italic, label: 'Italic', action: '*text*' },\n  { id: 'code', icon: Code, label: 'Code', action: '`code`' },\n  { id: 'list', icon: List, label: 'Bullet List', action: '- item' },\n  { id: 'ordered', icon: ListOrdered, label: 'Numbered List', action: '1. item' },\n  { id: 'link', icon: Link, label: 'Link', action: '[text](url)' },\n  { id: 'image', icon: Image, label: 'Image', action: '![alt](url)' }\n];\n\n// Markdown parser with syntax highlighting\nconst parseMarkdown = (text: string): string => {\n  let html = text;\n\n  // Code blocks with syntax highlighting\n  html = html.replace(/```(\\w+)?\\n([\\s\\S]*?)```/g, (match, lang, code) => {\n    const language = lang || 'plaintext';\n    const highlightedCode = highlightCode(code.trim(), language);\n    return `<pre class=\"code-block\"><div class=\"code-header\"><span class=\"code-lang\">${language}</span></div><code class=\"language-${language}\">${highlightedCode}</code></pre>`;\n  });\n\n  // Inline code\n  html = html.replace(/`([^`]+)`/g, '<code class=\"inline-code\">$1</code>');\n\n  // Headers\n  html = html.replace(/^### (.*$)/gim, '<h3 class=\"markdown-h3\">$1</h3>');\n  html = html.replace(/^## (.*$)/gim, '<h2 class=\"markdown-h2\">$1</h2>');\n  html = html.replace(/^# (.*$)/gim, '<h1 class=\"markdown-h1\">$1</h1>');\n\n  // Bold\n  html = html.replace(/\\*\\*(.+?)\\*\\*/g, '<strong class=\"markdown-bold\">$1</strong>');\n\n  // Italic\n  html = html.replace(/\\*(.+?)\\*/g, '<em class=\"markdown-italic\">$1</em>');\n\n  // Links\n  html = html.replace(/\\[([^\\]]+)\\]\\(([^)]+)\\)/g, '<a href=\"$2\" class=\"markdown-link\" target=\"_blank\" rel=\"noopener noreferrer\">$1</a>');\n\n  // Images\n  html = html.replace(/!\\[([^\\]]*)\\]\\(([^)]+)\\)/g, '<img src=\"$2\" alt=\"$1\" class=\"markdown-image\" />');\n\n  // Blockquotes\n  html = html.replace(/^> (.*$)/gim, '<blockquote class=\"markdown-blockquote\">$1</blockquote>');\n\n  // Horizontal rules\n  html = html.replace(/^---$/gim, '<hr class=\"markdown-hr\" />');\n\n  // Unordered lists\n  html = html.replace(/^\\- (.+)$/gim, '<li class=\"markdown-li\">$1</li>');\n  html = html.replace(/(<li class=\"markdown-li\">.*<\\/li>)/s, '<ul class=\"markdown-ul\">$1</ul>');\n\n  // Ordered lists\n  html = html.replace(/^\\d+\\. (.+)$/gim, '<li class=\"markdown-li-ordered\">$1</li>');\n  html = html.replace(/(<li class=\"markdown-li-ordered\">.*<\\/li>)/s, '<ol class=\"markdown-ol\">$1</ol>');\n\n  // Paragraphs\n  html = html.split('\\n\\n').map(para => {\n    if (para.match(/^<(h[1-3]|pre|ul|ol|blockquote|hr)/)) {\n      return para;\n    }\n    return para.trim() ? `<p class=\"markdown-p\">${para}</p>` : '';\n  }).join('\\n');\n\n  return html;\n};\n\n// Syntax highlighter for code blocks\nconst highlightCode = (code: string, language: string): string => {\n  const escapeHtml = (str: string) => \n    str.replace(/&/g, '&amp;')\n       .replace(/</g, '&lt;')\n       .replace(/>/g, '&gt;')\n       .replace(/\"/g, '&quot;')\n       .replace(/'/g, '&#039;');\n\n  let highlighted = escapeHtml(code);\n\n  if (language === 'javascript' || language === 'typescript') {\n    // Keywords\n    highlighted = highlighted.replace(/\\b(function|const|let|var|return|if|else|for|while|class|import|export|from|async|await|new|this|typeof|instanceof)\\b/g, \n      '<span class=\"token-keyword\">$1</span>');\n    \n    // Strings\n    highlighted = highlighted.replace(/(['\"`])(.*?)\\1/g, '<span class=\"token-string\">$1$2$1</span>');\n    \n    // Functions\n    highlighted = highlighted.replace(/\\b([a-zA-Z_$][a-zA-Z0-9_$]*)\\s*\\(/g, '<span class=\"token-function\">$1</span>(');\n    \n    // Comments\n    highlighted = highlighted.replace(/(\\/\\/.*$)/gm, '<span class=\"token-comment\">$1</span>');\n    \n    // Numbers\n    highlighted = highlighted.replace(/\\b(\\d+)\\b/g, '<span class=\"token-number\">$1</span>');\n  } else if (language === 'python') {\n    // Keywords\n    highlighted = highlighted.replace(/\\b(def|class|return|if|else|elif|for|while|import|from|as|with|try|except|finally|pass|break|continue|lambda|yield)\\b/g, \n      '<span class=\"token-keyword\">$1</span>');\n    \n    // Strings\n    highlighted = highlighted.replace(/(['\"])(.*?)\\1/g, '<span class=\"token-string\">$1$2$1</span>');\n    \n    // Functions\n    highlighted = highlighted.replace(/\\b([a-zA-Z_][a-zA-Z0-9_]*)\\s*\\(/g, '<span class=\"token-function\">$1</span>(');\n    \n    // Comments\n    highlighted = highlighted.replace(/(#.*$)/gm, '<span class=\"token-comment\">$1</span>');\n    \n    // Numbers\n    highlighted = highlighted.replace(/\\b(\\d+)\\b/g, '<span class=\"token-number\">$1</span>');\n  }\n\n  return highlighted;\n};\nconst mockMarkdownContent = `# Welcome to Premium Markdown Editor\n\n## Features\n\nThis is a **bold** statement and this is *italic* text.\n\n### Code Blocks\n\n\\`\\`\\`javascript\nfunction greet(name) {\n  console.log(\\`Hello, \\${name}!\\`);\n  return true;\n}\n\\`\\`\\`\n\n\\`\\`\\`python\ndef calculate(x, y):\n    result = x + y\n    return result\n\\`\\`\\`\n\n### Lists\n\n- First item\n- Second item\n- Third item\n\n1. Numbered one\n2. Numbered two\n3. Numbered three\n\n### Inline Code\n\nUse \\`const variable = 'value'\\` for inline code.\n\n### Links and Images\n\n[Visit Example](https://example.com)\n\n> This is a blockquote with important information.\n\n---\n\n**End of document**\n`;\n\n// Global styles for markdown preview\nconst markdownStyles = `\n  .markdown-preview h1.markdown-h1 {\n    font-size: 2em;\n    font-weight: 700;\n    margin: 0.67em 0;\n    color: #569cd6;\n    border-bottom: 1px solid #404040;\n    padding-bottom: 0.3em;\n  }\n\n  .markdown-preview h2.markdown-h2 {\n    font-size: 1.5em;\n    font-weight: 600;\n    margin: 0.75em 0 0.5em 0;\n    color: #4ec9b0;\n    border-bottom: 1px solid #404040;\n    padding-bottom: 0.3em;\n  }\n\n  .markdown-preview h3.markdown-h3 {\n    font-size: 1.25em;\n    font-weight: 600;\n    margin: 0.5em 0;\n    color: #4ec9b0;\n  }\n\n  .markdown-preview p.markdown-p {\n    margin: 1em 0;\n    color: #d4d4d4;\n  }\n\n  .markdown-preview strong.markdown-bold {\n    font-weight: 700;\n    color: #dcdcaa;\n  }\n\n  .markdown-preview em.markdown-italic {\n    font-style: italic;\n    color: #ce9178;\n  }\n\n  .markdown-preview code.inline-code {\n    background: #2d2d2d;\n    color: #ce9178;\n    padding: 2px 6px;\n    border-radius: 3px;\n    font-family: 'Consolas', 'Monaco', 'Courier New', monospace;\n    font-size: 0.9em;\n    border: 1px solid #404040;\n  }\n\n  .markdown-preview pre.code-block {\n    background: #1e1e1e;\n    border: 1px solid #404040;\n    border-radius: 6px;\n    margin: 1em 0;\n    overflow: hidden;\n  }\n\n  .markdown-preview .code-header {\n    background: #2d2d2d;\n    padding: 8px 16px;\n    border-bottom: 1px solid #404040;\n    font-size: 0.75em;\n    color: #858585;\n    font-weight: 500;\n    text-transform: uppercase;\n    letter-spacing: 0.5px;\n  }\n\n  .markdown-preview .code-lang {\n    color: #4ec9b0;\n  }\n\n  .markdown-preview pre.code-block code {\n    display: block;\n    padding: 16px;\n    overflow-x: auto;\n    font-family: 'Consolas', 'Monaco', 'Courier New', monospace;\n    font-size: 0.9em;\n    line-height: 1.5;\n    color: #d4d4d4;\n  }\n\n  .markdown-preview .token-keyword {\n    color: #569cd6;\n    font-weight: 500;\n  }\n\n  .markdown-preview .token-string {\n    color: #ce9178;\n  }\n\n  .markdown-preview .token-function {\n    color: #dcdcaa;\n  }\n\n  .markdown-preview .token-comment {\n    color: #6a9955;\n    font-style: italic;\n  }\n\n  .markdown-preview .token-number {\n    color: #b5cea8;\n  }\n\n  .markdown-preview a.markdown-link {\n    color: #3794ff;\n    text-decoration: none;\n    border-bottom: 1px solid transparent;\n    transition: border-color 0.2s;\n  }\n\n  .markdown-preview a.markdown-link:hover {\n    border-bottom-color: #3794ff;\n  }\n\n  .markdown-preview img.markdown-image {\n    max-width: 100%;\n    height: auto;\n    border-radius: 4px;\n    margin: 1em 0;\n  }\n\n  .markdown-preview ul.markdown-ul,\n  .markdown-preview ol.markdown-ol {\n    margin: 1em 0;\n    padding-left: 2em;\n  }\n\n  .markdown-preview li.markdown-li,\n  .markdown-preview li.markdown-li-ordered {\n    margin: 0.5em 0;\n    color: #d4d4d4;\n  }\n\n  .markdown-preview blockquote.markdown-blockquote {\n    border-left: 4px solid #007acc;\n    padding-left: 1em;\n    margin: 1em 0;\n    color: #9cdcfe;\n    background: rgba(0, 122, 204, 0.1);\n    padding: 0.5em 1em;\n    border-radius: 0 4px 4px 0;\n  }\n\n  .markdown-preview hr.markdown-hr {\n    border: none;\n    border-top: 1px solid #404040;\n    margin: 2em 0;\n  }\n`;\n\n// Inject styles into document\nif (typeof document !== 'undefined') {\n  const styleId = 'markdown-preview-styles';\n  if (!document.getElementById(styleId)) {\n    const styleElement = document.createElement('style');\n    styleElement.id = styleId;\n    styleElement.textContent = markdownStyles;\n    document.head.appendChild(styleElement);\n  }\n}\n\nexport default function MarkdownEditor() {\n  const [markdown, setMarkdown] = useState(mockMarkdownContent);\n  const [showPreview, setShowPreview] = useState(true);\n  const [cursorPosition, setCursorPosition] = useState(0);\n\n  const handleMarkdownChange = useCallback((e: React.ChangeEvent<HTMLTextAreaElement>) => {\n    setMarkdown(e.target.value);\n    setCursorPosition(e.target.selectionStart);\n  }, []);\n\n  const togglePreview = useCallback(() => {\n    setShowPreview(prev => !prev);\n  }, []);\n\n  const handleToolbarAction = useCallback((action: string) => {\n    const textareaRef = document.querySelector('textarea') as HTMLTextAreaElement;\n    if (!textareaRef) return;\n\n    const start = textareaRef.selectionStart;\n    const end = textareaRef.selectionEnd;\n    const selectedText = markdown.substring(start, end);\n    \n    let newText = '';\n    let cursorOffset = 0;\n\n    // Handle different markdown syntax patterns\n    if (action.includes('text') && selectedText) {\n      // Replace 'text' with selected text\n      newText = action.replace('text', selectedText);\n      cursorOffset = newText.length;\n    } else if (action.includes('url')) {\n      // For links and images, position cursor at 'text' or 'alt'\n      if (selectedText) {\n        newText = action.replace('text', selectedText).replace('alt', selectedText);\n        cursorOffset = newText.indexOf('url');\n      } else {\n        newText = action;\n        cursorOffset = action.indexOf('text') !== -1 ? action.indexOf('text') : action.indexOf('alt');\n      }\n    } else if (action.includes('item')) {\n      // For lists, add on new line if not at start\n      const beforeCursor = markdown.substring(0, start);\n      const needsNewline = beforeCursor.length > 0 && !beforeCursor.endsWith('\\n');\n      newText = (needsNewline ? '\\n' : '') + action;\n      cursorOffset = newText.length;\n    } else {\n      newText = action;\n      cursorOffset = selectedText ? newText.length : action.indexOf('text');\n      if (cursorOffset === -1) cursorOffset = newText.length;\n    }\n\n    // Insert the new text\n    const newMarkdown = markdown.substring(0, start) + newText + markdown.substring(end);\n    setMarkdown(newMarkdown);\n\n    // Update cursor position after state update\n    setTimeout(() => {\n      if (textareaRef) {\n        const newCursorPos = start + cursorOffset;\n        textareaRef.focus();\n        textareaRef.setSelectionRange(newCursorPos, newCursorPos);\n        setCursorPosition(newCursorPos);\n      }\n    }, 0);\n\n// MarkdownPreview component with VS Code styling\ninterface MarkdownPreviewProps {\n  markdown: string;\n}\n\nconst MarkdownPreview: React.FC<MarkdownPreviewProps> = ({ markdown }) => {\n  const htmlContent = useMemo(() => parseMarkdown(markdown), [markdown]);\n\n  return (\n    <div \n      className=\"markdown-preview\"\n      dangerouslySetInnerHTML={{ __html: htmlContent }}\n      style={{\n        color: '#d4d4d4',\n        lineHeight: '1.6',\n      }}\n    />\n  );\n};\n  }, [markdown, cursorPosition]);\n\n\n  return (\n    <div className=\"min-h-screen bg-[#1e1e1e] text-gray-100\">\n      <div className=\"container mx-auto px-4 py-6\">\n        {/* Header */}\n        <div className=\"mb-6 flex items-center justify-between\">\n          <h1 className=\"text-3xl font-bold bg-gradient-to-r from-blue-400 to-purple-500 bg-clip-text text-transparent\">\n            Premium Markdown Editor\n          </h1>\n          <Button\n            onClick={togglePreview}\n            variant=\"outline\"\n            className=\"bg-[#2d2d2d] border-gray-700 hover:bg-[#3d3d3d] text-gray-100\"\n          >\n            {showPreview ? <EyeOff className=\"w-4 h-4 mr-2\" /> : <Eye className=\"w-4 h-4 mr-2\" />}\n            {showPreview ? 'Hide Preview' : 'Show Preview'}\n          </Button>\n        </div>\n\n        \n        {/* Floating Toolbar */}\n        <motion.div\n          initial={{ opacity: 0, y: -20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.3 }}\n          className=\"mb-4 bg-[#2d2d2d] border border-gray-700 rounded-lg p-2 shadow-xl\"\n        >\n          <div className=\"flex items-center gap-1 flex-wrap\">\n            {toolbarButtons.map((button) => {\n              const Icon = button.icon;\n              return (\n                <motion.div\n                  key={button.id}\n                  whileHover={{ scale: 1.05 }}\n                  whileTap={{ scale: 0.95 }}\n                >\n                  <Button\n                    onClick={() => handleToolbarAction(button.action)}\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    className=\"h-9 w-9 p-0 hover:bg-[#3d3d3d] hover:text-blue-400 transition-colors duration-200\"\n                    title={button.label}\n                  >\n                    <Icon className=\"w-4 h-4\" />\n                  </Button>\n                </motion.div>\n              );\n            })}\n          </div>\n        </motion.div>\n\n        {/* Editor Layout */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n          {/* Editor Panel */}\n          <motion.div\n            layout\n            className=\"relative\"\n            initial={{ opacity: 0, x: -20 }}\n            animate={{ opacity: 1, x: 0 }}\n            transition={{ duration: 0.3 }}\n          >\n            <div className=\"bg-[#1e1e1e] border border-gray-800 rounded-lg overflow-hidden shadow-2xl\">\n              <div className=\"bg-[#2d2d2d] px-4 py-2 border-b border-gray-800 flex items-center justify-between\">\n                <span className=\"text-sm font-medium text-gray-400\">Editor</span>\n                <div className=\"flex gap-2\">\n                  <div className=\"w-3 h-3 rounded-full bg-red-500\"></div>\n                  <div className=\"w-3 h-3 rounded-full bg-yellow-500\"></div>\n                  <div className=\"w-3 h-3 rounded-full bg-green-500\"></div>\n                </div>\n              </div>\n              <textarea\n                value={markdown}\n                onChange={handleMarkdownChange}\n                className=\"w-full h-[600px] bg-[#1e1e1e] text-gray-100 p-6 font-mono text-sm resize-none focus:outline-none\"\n                placeholder=\"Start typing your markdown...\"\n                spellCheck={false}\n              />\n            </div>\n          </motion.div>\n\n          {/* Preview Panel */}\n          <AnimatePresence mode=\"wait\">\n            {showPreview && (\n              <motion.div\n                key=\"preview\"\n                initial={{ opacity: 0, x: 20 }}\n                animate={{ opacity: 1, x: 0 }}\n                exit={{ opacity: 0, x: 20 }}\n                transition={{ duration: 0.3 }}\n                className=\"relative\"\n              >\n                <div className=\"bg-[#1e1e1e] border border-gray-800 rounded-lg overflow-hidden shadow-2xl\">\n                  <div className=\"bg-[#2d2d2d] px-4 py-2 border-b border-gray-800\">\n                    <span className=\"text-sm font-medium text-gray-400\">Preview</span>\n                  </div>\n                  <div className=\"p-6 h-[600px] overflow-y-auto\">\n                    <MarkdownPreview markdown={markdown} />\n                  </div>\n                </div>\n              </motion.div>\n            )}\n          </AnimatePresence>\n        </div>\n\n        {/* Stats Bar */}\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ delay: 0.2 }}\n          className=\"mt-6 bg-[#2d2d2d] border border-gray-800 rounded-lg p-4\"\n        >\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n            <div className=\"flex flex-col items-center justify-center p-3 bg-[#1e1e1e] rounded-lg border border-gray-800\">\n              <span className=\"text-2xl font-bold text-blue-400\">{markdown.length}</span>\n              <span className=\"text-xs text-gray-500 mt-1\">Characters</span>\n            </div>\n            <div className=\"flex flex-col items-center justify-center p-3 bg-[#1e1e1e] rounded-lg border border-gray-800\">\n              <span className=\"text-2xl font-bold text-purple-400\">\n                {markdown.trim().split(/\\s+/).filter(word => word.length > 0).length}\n              </span>\n              <span className=\"text-xs text-gray-500 mt-1\">Words</span>\n            </div>\n            <div className=\"flex flex-col items-center justify-center p-3 bg-[#1e1e1e] rounded-lg border border-gray-800\">\n              <span className=\"text-2xl font-bold text-green-400\">\n                {markdown.split('\\n').length}\n              </span>\n              <span className=\"text-xs text-gray-500 mt-1\">Lines</span>\n            </div>\n            <div className=\"flex flex-col items-center justify-center p-3 bg-[#1e1e1e] rounded-lg border border-gray-800\">\n              <span className=\"text-2xl font-bold text-orange-400\">\n                {Math.ceil(markdown.trim().split(/\\s+/).filter(word => word.length > 0).length / 200)} min\n              </span>\n              <span className=\"text-xs text-gray-500 mt-1\">Reading Time</span>\n            </div>\n          </div>\n        </motion.div>\n      </div>\n    </div>\n  );\n}",
    "error": null,
    "elapsed_time": 89.37075853347778,
    "success": true
  }
}