{
  "prompt_id": "algorithm_visualizer",
  "prompt_name": "Algorithm Visualizer",
  "mode": "parallel",
  "run_number": 40,
  "timestamp": "2025-10-14T10:51:33.536818",
  "response_time": 89.37487173080444,
  "total_tokens": null,
  "response_content": "import { useState, useCallback } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Slider } from '@/components/ui/slider';\nimport { Play, Pause, RotateCcw, Zap, BarChart3 } from 'lucide-react';\nimport { motion } from 'framer-motion';\n\ninterface ArrayElement {\n  value: number;\n  id: string;\n  isComparing?: boolean;\n  isSwapping?: boolean;\n  isSorted?: boolean;\n}\n\ninterface AlgorithmStep {\n  array: ArrayElement[];\n  comparingIndices: number[];\n  swappingIndices: number[];\n  sortedIndices: number[];\n}\n\ntype AlgorithmType = 'bubble' | 'quick' | 'merge' | 'insertion';\n\nconst NEON_COLORS = [\n  '#00ffff',\n  '#ff00ff', \n  '#00ff00',\n  '#ffff00',\n  '#ff0066',\n  '#00ffaa'\n];\n\nconst mockAlgorithms = [\n  { id: 'bubble', name: 'Bubble Sort', complexity: 'O(n\u00b2)' },\n  { id: 'quick', name: 'Quick Sort', complexity: 'O(n log n)' },\n  { id: 'merge', name: 'Merge Sort', complexity: 'O(n log n)' },\n  { id: 'insertion', name: 'Insertion Sort', complexity: 'O(n\u00b2)' }\n];\n\nexport default function AlgorithmVisualizer() {\n  const [array, setArray] = useState<ArrayElement[]>([]);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [speed, setSpeed] = useState([50]);\n  const [arraySize, setArraySize] = useState([20]);\n  const [selectedAlgorithm, setSelectedAlgorithm] = useState<AlgorithmType>('bubble');\n  const [currentStep, setCurrentStep] = useState(0);\n  const [steps, setSteps] = useState<AlgorithmStep[]>([]);\n\n  const generateRandomArray = useCallback(() => {\n    const newArray: ArrayElement[] = Array.from({ length: arraySize[0] }, (_, index) => ({\n      value: Math.floor(Math.random() * 100) + 5,\n      id: `element-${index}-${Date.now()}`,\n      isComparing: false,\n      isSwapping: false,\n      isSorted: false\n    }));\n    setArray(newArray);\n    setSteps([]);\n    setCurrentStep(0);\n    setIsPlaying(false);\n  }, [arraySize]);\n\n  const resetVisualization = useCallback(() => {\n\n    setIsPlaying(false);\n    setCurrentStep(0);\n    setSteps([]);\n    generateRandomArray();\n  }, [generateRandomArray]);\n\n  // Animation effect for step-by-step visualization\n  const animateSteps = useCallback(() => {\n    if (currentStep < steps.length && isPlaying) {\n      const timer = setTimeout(() => {\n        setCurrentStep(prev => prev + 1);\n      }, 1000 - speed[0] * 9); // Convert speed slider (0-100) to delay (1000ms-100ms)\n      \n      return () => clearTimeout(timer);\n    } else if (currentStep >= steps.length && isPlaying) {\n      setIsPlaying(false);\n    }\n  }, [currentStep, steps.length, isPlaying, speed]);\n\n  // Run animation effect\n  useState(() => {\n    const cleanup = animateSteps();\n    return cleanup;\n  });\n  const startVisualization = useCallback(() => {\n    if (steps.length === 0 || currentStep >= steps.length) {\n      return;\n    }\n    \n    setIsPlaying(true);\n  }, [steps, speed, currentStep]);\n\n  const pauseVisualization = useCallback(() => {    setIsPlaying(false);\n  }, []);\n\n  const generateSortingSteps = useCallback((algorithm: AlgorithmType) => {\n    if (array.length === 0) return;\n\n    const steps: AlgorithmStep[] = [];\n    const arr = [...array];\n\n    const createStep = (\n      currentArray: ArrayElement[],\n      comparing: number[] = [],\n      swapping: number[] = [],\n      sorted: number[] = []\n    ): AlgorithmStep => ({\n      array: currentArray.map((el, idx) => ({\n        ...el,\n        isComparing: comparing.includes(idx),\n        isSwapping: swapping.includes(idx),\n        isSorted: sorted.includes(idx)\n      })),\n      comparingIndices: comparing,\n      swappingIndices: swapping,\n      sortedIndices: sorted\n    });\n\n    if (algorithm === 'bubble') {\n      const sortedIndices: number[] = [];\n      for (let i = 0; i < arr.length; i++) {\n        for (let j = 0; j < arr.length - i - 1; j++) {\n          steps.push(createStep([...arr], [j, j + 1], [], sortedIndices));\n          \n          if (arr[j].value > arr[j + 1].value) {\n            steps.push(createStep([...arr], [], [j, j + 1], sortedIndices));\n            [arr[j], arr[j + 1]] = [arr[j + 1], arr[j]];\n            steps.push(createStep([...arr], [], [], sortedIndices));\n          }\n        }\n        sortedIndices.push(arr.length - i - 1);\n      }\n      steps.push(createStep([...arr], [], [], Array.from({ length: arr.length }, (_, i) => i)));\n    } else if (algorithm === 'insertion') {\n      const sortedIndices: number[] = [0];\n      for (let i = 1; i < arr.length; i++) {\n        const key = arr[i];\n        let j = i - 1;\n        \n        steps.push(createStep([...arr], [i], [], sortedIndices));\n        \n        while (j >= 0 && arr[j].value > key.value) {\n          steps.push(createStep([...arr], [j, j + 1], [], sortedIndices));\n          arr[j + 1] = arr[j];\n          steps.push(createStep([...arr], [], [j, j + 1], sortedIndices));\n          j--;\n        }\n        arr[j + 1] = key;\n        sortedIndices.push(i);\n        steps.push(createStep([...arr], [], [], sortedIndices));\n      }\n      steps.push(createStep([...arr], [], [], Array.from({ length: arr.length }, (_, i) => i)));\n    } else if (algorithm === 'quick') {\n      const sortedIndices: number[] = [];\n      \n      const partition = (low: number, high: number): number => {\n        const pivot = arr[high];\n        steps.push(createStep([...arr], [high], [], sortedIndices));\n        let i = low - 1;\n\n        for (let j = low; j < high; j++) {\n          steps.push(createStep([...arr], [j, high], [], sortedIndices));\n          \n          if (arr[j].value < pivot.value) {\n            i++;\n            if (i !== j) {\n              steps.push(createStep([...arr], [], [i, j], sortedIndices));\n              [arr[i], arr[j]] = [arr[j], arr[i]];\n              steps.push(createStep([...arr], [], [], sortedIndices));\n            }\n          }\n        }\n        \n        steps.push(createStep([...arr], [], [i + 1, high], sortedIndices));\n        [arr[i + 1], arr[high]] = [arr[high], arr[i + 1]];\n        sortedIndices.push(i + 1);\n        steps.push(createStep([...arr], [], [], sortedIndices));\n        \n        return i + 1;\n      };\n\n      const quickSort = (low: number, high: number) => {\n        if (low < high) {\n          const pi = partition(low, high);\n          quickSort(low, pi - 1);\n          quickSort(pi + 1, high);\n        } else if (low === high) {\n          sortedIndices.push(low);\n        }\n      };\n\n      quickSort(0, arr.length - 1);\n      steps.push(createStep([...arr], [], [], Array.from({ length: arr.length }, (_, i) => i)));\n    } else if (algorithm === 'merge') {\n      const sortedIndices: number[] = [];\n      \n      const merge = (left: number, mid: number, right: number) => {\n        const leftArr = arr.slice(left, mid + 1);\n        const rightArr = arr.slice(mid + 1, right + 1);\n        \n        let i = 0, j = 0, k = left;\n        \n        while (i < leftArr.length && j < rightArr.length) {\n          steps.push(createStep([...arr], [left + i, mid + 1 + j], [], sortedIndices));\n          \n          if (leftArr[i].value <= rightArr[j].value) {\n            arr[k] = leftArr[i];\n            i++;\n          } else {\n            arr[k] = rightArr[j];\n            j++;\n          }\n          steps.push(createStep([...arr], [], [k], sortedIndices));\n          k++;\n        }\n        \n        while (i < leftArr.length) {\n          arr[k] = leftArr[i];\n          steps.push(createStep([...arr], [], [k], sortedIndices));\n          i++;\n          k++;\n        }\n        \n        while (j < rightArr.length) {\n          arr[k] = rightArr[j];\n          steps.push(createStep([...arr], [], [k], sortedIndices));\n          j++;\n          k++;\n        }\n      };\n\n      const mergeSort = (left: number, right: number) => {\n        if (left < right) {\n          const mid = Math.floor((left + right) / 2);\n          mergeSort(left, mid);\n          mergeSort(mid + 1, right);\n          merge(left, mid, right);\n        }\n      };\n\n      mergeSort(0, arr.length - 1);\n      steps.push(createStep([...arr], [], [], Array.from({ length: arr.length }, (_, i) => i)));\n    }\n\n    setSteps(steps);\n    setCurrentStep(0);</parameter>\n</invoke>\n  }, [array]);\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-gray-900 via-purple-900 to-gray-900 p-8\">\n      <div className=\"max-w-7xl mx-auto space-y-8\">\n        <motion.div\n          initial={{ opacity: 0, y: -20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.8 }}\n          className=\"text-center space-y-4\"\n        >\n          <motion.h1\n            className=\"text-6xl font-bold bg-gradient-to-r from-cyan-400 via-purple-400 to-pink-400 bg-clip-text text-transparent\"\n            animate={{\n              textShadow: [\n                '0 0 20px rgba(0, 255, 255, 0.5)',\n                '0 0 40px rgba(255, 0, 255, 0.5)',\n                '0 0 20px rgba(0, 255, 255, 0.5)'\n              ]\n            }}\n            transition={{ duration: 2, repeat: Infinity }}\n          >\n            Algorithm Visualizer\n          </motion.h1>\n          \n          <div className=\"flex items-center justify-center gap-4\">\n            <motion.div\n              initial={{ scale: 0 }}\n              animate={{ scale: 1 }}\n              transition={{ delay: 0.3, type: 'spring' }}\n              className=\"flex items-center gap-2 px-6 py-3 bg-gray-800/50 backdrop-blur-sm rounded-full border border-cyan-500/30\"\n            >\n              <Zap className=\"w-5 h-5 text-cyan-400\" />\n              <span className=\"text-xl font-semibold text-cyan-300\">\n                {mockAlgorithms.find(a => a.id === selectedAlgorithm)?.name}\n              </span>\n            </motion.div>\n            \n            <motion.div\n              initial={{ scale: 0 }}\n              animate={{ scale: 1 }}\n              transition={{ delay: 0.5, type: 'spring' }}\n              className=\"px-4 py-2 bg-purple-500/20 backdrop-blur-sm rounded-full border border-purple-400/50\"\n            >\n              <div className=\"flex items-center gap-2\">\n                <BarChart3 className=\"w-4 h-4 text-purple-300\" />\n                <span className=\"text-sm font-mono text-purple-200\">\n                  {mockAlgorithms.find(a => a.id === selectedAlgorithm)?.complexity}\n                </span>\n              </div>\n            </motion.div>\n          </div>\n        </motion.div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-6\">\n          <div className=\"lg:col-span-1 space-y-6\">\n            <motion.div\n              initial={{ opacity: 0, x: -50 }}\n              animate={{ opacity: 1, x: 0 }}\n              className=\"bg-gray-800/50 backdrop-blur-lg rounded-2xl p-6 border border-cyan-500/30 shadow-[0_0_30px_rgba(0,255,255,0.3)]\"\n            >\n              <div className=\"space-y-6\">\n                {/* Algorithm Selection */}\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center gap-2 text-cyan-400\">\n                    <Zap className=\"w-5 h-5\" />\n                    <h3 className=\"font-semibold text-lg\">Algorithm</h3>\n                  </div>\n                  <div className=\"space-y-2\">\n                    {mockAlgorithms.map((algo) => (\n                      <button\n                        key={algo.id}\n                        onClick={() => {\n                          setSelectedAlgorithm(algo.id as AlgorithmType);\n                          generateSortingSteps(algo.id as AlgorithmType);\n                        }}\n                        disabled={isPlaying}\n                        className={`w-full text-left p-3 rounded-lg transition-all duration-300 ${\n                          selectedAlgorithm === algo.id\n                            ? 'bg-cyan-500/20 border border-cyan-400 shadow-[0_0_15px_rgba(0,255,255,0.5)]'\n                            : 'bg-gray-700/30 border border-gray-600/30 hover:border-cyan-500/50 hover:shadow-[0_0_10px_rgba(0,255,255,0.3)]'\n                        } disabled:opacity-50 disabled:cursor-not-allowed`}\n                      >\n                        <div className=\"font-medium text-white\">{algo.name}</div>\n                        <div className=\"text-xs text-gray-400 mt-1\">{algo.complexity}</div>\n                      </button>\n                    ))}\n                  </div>\n                </div>\n\n                {/* Speed Control */}\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <label className=\"text-cyan-400 font-semibold\">Speed</label>\n                    <span className=\"text-white text-sm bg-cyan-500/20 px-3 py-1 rounded-full border border-cyan-400/30\">\n                      {speed[0]}ms\n                    </span>\n                  </div>\n                  <Slider\n                    value={speed}\n                    onValueChange={setSpeed}\n                    min={10}\n                    max={200}\n                    step={10}\n                    className=\"cursor-pointer\"\n                  />\n                </div>\n\n                {/* Array Size Control */}\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <label className=\"text-cyan-400 font-semibold flex items-center gap-2\">\n                      <BarChart3 className=\"w-4 h-4\" />\n                      Array Size\n                    </label>\n                    <span className=\"text-white text-sm bg-purple-500/20 px-3 py-1 rounded-full border border-purple-400/30\">\n                      {arraySize[0]}\n                    </span>\n                  </div>\n                  <Slider\n                    value={arraySize}\n                    onValueChange={(val) => {\n                      setArraySize(val);\n                      if (!isPlaying) {\n                        generateRandomArray();\n                      }\n                    }}\n                    min={5}\n                    max={50}\n                    step={5}\n                    disabled={isPlaying}\n                    className=\"cursor-pointer\"\n                  />\n                </div>\n\n                {/* Control Buttons */}\n                <div className=\"space-y-3 pt-4 border-t border-gray-700/50\">\n                  <Button\n                    onClick={isPlaying ? pauseVisualization : startVisualization}\n                    disabled={steps.length === 0 || (currentStep >= steps.length && !isPlaying)}\n                    className=\"w-full bg-gradient-to-r from-cyan-500 to-blue-500 hover:from-cyan-400 hover:to-blue-400 text-white font-semibold py-6 rounded-xl shadow-[0_0_20px_rgba(0,255,255,0.4)] hover:shadow-[0_0_30px_rgba(0,255,255,0.6)] transition-all duration-300 disabled:opacity-50 disabled:cursor-not-allowed\"\n                  >\n                    {isPlaying ? (\n                      <>\n                        <Pause className=\"w-5 h-5 mr-2\" />\n                        Pause\n                      </>\n                    ) : (\n                      <>\n                        <Play className=\"w-5 h-5 mr-2\" />\n                        {currentStep >= steps.length ? 'Start' : 'Resume'}\n                      </>\n                    )}\n                  </Button>\n\n                  <Button\n                    onClick={resetVisualization}\n                    disabled={isPlaying}\n                    className=\"w-full bg-gradient-to-r from-purple-500 to-pink-500 hover:from-purple-400 hover:to-pink-400 text-white font-semibold py-6 rounded-xl shadow-[0_0_20px_rgba(255,0,255,0.4)] hover:shadow-[0_0_30px_rgba(255,0,255,0.6)] transition-all duration-300 disabled:opacity-50 disabled:cursor-not-allowed\"\n                  >\n                    <RotateCcw className=\"w-5 h-5 mr-2\" />\n                    Reset\n                  </Button>\n                </div>\n\n                {/* Stats */}\n                <div className=\"pt-4 border-t border-gray-700/50 space-y-2\">\n                  <div className=\"flex justify-between text-sm\">\n                    <span className=\"text-gray-400\">Current Step:</span>\n                    <span className=\"text-cyan-400 font-mono\">{currentStep} / {steps.length}</span>\n                  </div>\n                  <div className=\"flex justify-between text-sm\">\n                    <span className=\"text-gray-400\">Array Elements:</span>\n                    <span className=\"text-purple-400 font-mono\">{array.length}</span>\n                  </div>\n                </div>\n              </div>\n            </motion.div>\n            \n            <div className=\"bg-gray-800/50 backdrop-blur-lg rounded-2xl p-6 border border-cyan-500/30 shadow-lg shadow-cyan-500/20\">\n              <div className=\"space-y-6\">\n                <div>\n                  <h3 className=\"text-cyan-400 font-semibold mb-4 flex items-center gap-2\">\n                    <Zap className=\"w-5 h-5\" />\n                    Algorithm\n                  </h3>\n                  <div className=\"grid grid-cols-2 gap-3\">\n                    {mockAlgorithms.map((algo) => (\n                      <motion.button\n                        key={algo.id}\n                        onClick={() => setSelectedAlgorithm(algo.id as AlgorithmType)}\n                        className={`relative p-3 rounded-lg border transition-all duration-300 ${\n                          selectedAlgorithm === algo.id\n                            ? 'bg-cyan-500/20 border-cyan-400 shadow-lg shadow-cyan-500/50'\n                            : 'bg-gray-700/30 border-gray-600 hover:border-cyan-500/50 hover:shadow-md hover:shadow-cyan-500/30'\n                        }`}\n                        whileHover={{ scale: 1.05 }}\n                        whileTap={{ scale: 0.95 }}\n                        disabled={isPlaying}\n                      >\n                        <div className=\"text-left\">\n                          <div className={`text-sm font-semibold ${\n                            selectedAlgorithm === algo.id ? 'text-cyan-300' : 'text-gray-300'\n                          }`}>\n                            {algo.name}\n                          </div>\n                          <div className={`text-xs mt-1 ${\n                            selectedAlgorithm === algo.id ? 'text-cyan-400' : 'text-gray-500'\n                          }`}>\n                            {algo.complexity}\n                          </div>\n                        </div>\n                        {selectedAlgorithm === algo.id && (\n                          <motion.div\n                            className=\"absolute inset-0 rounded-lg bg-cyan-500/10\"\n                            layoutId=\"algorithmSelector\"\n                            transition={{ type: \"spring\", bounce: 0.2, duration: 0.6 }}\n                          />\n                        )}\n                      </motion.button>\n                    ))}\n                  </div>\n                </div>\n\n                <div>\n                  <h3 className=\"text-cyan-400 font-semibold mb-4\">Speed</h3>\n                  <div className=\"space-y-2\">\n                    <Slider\n                      value={speed}\n                      onValueChange={setSpeed}\n                      min={1}\n                      max={100}\n                      step={1}\n                      className=\"cursor-pointer [&_[role=slider]]:bg-cyan-400 [&_[role=slider]]:border-cyan-300 [&_[role=slider]]:shadow-lg [&_[role=slider]]:shadow-cyan-400/50 [&_[role=slider]]:transition-all [&_[role=slider]]:hover:shadow-cyan-400/80 [&_[role=slider]]:hover:scale-110 [&_.relative]:bg-gray-700 [&_.relative]:overflow-visible [&_.bg-primary]:bg-gradient-to-r [&_.bg-primary]:from-cyan-500 [&_.bg-primary]:to-purple-500 [&_.bg-primary]:shadow-lg [&_.bg-primary]:shadow-cyan-500/30\"\n                    />\n                    <div className=\"flex justify-between text-xs text-gray-400\">\n                      <span>Slow</span>\n                      <span className=\"text-cyan-400 font-semibold\">{speed[0]}%</span>\n                      <span>Fast</span>\n                    </div>\n                  </div>\n                </div>\n\n                <div>\n                  <h3 className=\"text-cyan-400 font-semibold mb-4\">Array Size</h3>\n                  <div className=\"space-y-3\">\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"text-sm text-gray-400\">Elements</span>\n                      <motion.span \n                        key={arraySize[0]}\n                        initial={{ scale: 1.3, color: '#00ffff' }}\n                        animate={{ scale: 1, color: '#9ca3af' }}\n                        className=\"text-sm font-mono font-bold\"\n                      >\n                        {arraySize[0]}\n                      </motion.span>\n                    </div>\n                    <div className=\"relative\">\n                      <Slider\n                        value={arraySize}\n                        onValueChange={(value) => {\n                          setArraySize(value);\n                          if (!isPlaying) {\n                            generateRandomArray();\n                          }\n                        }}\n                        min={5}\n                        max={100}\n                        step={1}\n                        disabled={isPlaying}\n                        className=\"cursor-pointer [&_[role=slider]]:bg-gradient-to-r [&_[role=slider]]:from-cyan-400 [&_[role=slider]]:to-purple-500 [&_[role=slider]]:border-2 [&_[role=slider]]:border-cyan-300 [&_[role=slider]]:shadow-lg [&_[role=slider]]:shadow-cyan-500/50 [&_[role=slider]]:transition-all [&_[role=slider]]:hover:shadow-cyan-400/70 [&_[role=slider]]:hover:scale-110 [&>.relative>.absolute]:bg-gradient-to-r [&>.relative>.absolute]:from-cyan-500/30 [&>.relative>.absolute]:to-purple-500/30 [&>.relative>.absolute]:h-2\"\n                      />\n                      <div className=\"absolute inset-0 bg-gradient-to-r from-cyan-500/10 to-purple-500/10 rounded-full blur-sm pointer-events-none\" />\n                    </div>\n                  </div></parameter>\n</invoke>\n                </div>\n\n                <div className=\"space-y-3 pt-4 border-t border-cyan-500/20\">\n                  <motion.div\n                    whileHover={{ scale: 1.02 }}\n                    whileTap={{ scale: 0.98 }}\n                  >\n                    <Button\n                      onClick={isPlaying ? pauseVisualization : startVisualization}\n                      disabled={array.length === 0 || (steps.length === 0 && !isPlaying)}\n                      className=\"w-full bg-gradient-to-r from-cyan-500 to-purple-500 hover:from-cyan-400 hover:to-purple-400 text-white font-semibold py-6 rounded-xl shadow-lg transition-all duration-300 disabled:opacity-50 disabled:cursor-not-allowed\"\n                      style={{\n                        boxShadow: isPlaying \n                          ? '0 0 30px rgba(168, 85, 247, 0.6), 0 0 60px rgba(6, 182, 212, 0.4)'\n                          : '0 0 20px rgba(168, 85, 247, 0.4)'\n                      }}\n                    >\n                      <motion.div\n                        className=\"flex items-center justify-center gap-2\"\n                        animate={isPlaying ? {\n                          scale: [1, 1.1, 1],\n                        } : {}}\n                        transition={{\n                          duration: 1,\n                          repeat: isPlaying ? Infinity : 0,\n                          ease: \"easeInOut\"\n                        }}\n                      >\n                        {isPlaying ? (\n                          <>\n                            <Pause className=\"w-5 h-5\" />\n                            <span>Pause</span>\n                          </>\n                        ) : (\n                          <>\n                            <Play className=\"w-5 h-5\" />\n                            <span>Play</span>\n                          </>\n                        )}\n                      </motion.div>\n                    </Button>\n                  </motion.div>\n\n                  <motion.div\n                    whileHover={{ scale: 1.02 }}\n                    whileTap={{ scale: 0.98 }}\n                  >\n                    <Button\n                      onClick={resetVisualization}\n                      variant=\"outline\"\n                      className=\"w-full border-2 border-pink-500/50 bg-gray-900/50 hover:bg-pink-500/20 text-pink-400 font-semibold py-6 rounded-xl transition-all duration-300\"\n                      style={{\n                        boxShadow: '0 0 20px rgba(236, 72, 153, 0.3)'\n                      }}\n                    >\n                      <motion.div\n                        className=\"flex items-center justify-center gap-2\"\n                        whileHover={{\n                          rotate: -180,\n                        }}\n                        transition={{\n                          duration: 0.6,\n                          ease: \"easeInOut\"\n                        }}\n                      >\n                        <RotateCcw className=\"w-5 h-5\" />\n                      </motion.div>\n                      <span>Reset</span>\n                    </Button>\n                  </motion.div>\n\n                  <motion.div\n                    whileHover={{ scale: 1.02 }}\n                    whileTap={{ scale: 0.98 }}\n                  >\n                    <Button\n                      onClick={generateRandomArray}\n                      variant=\"outline\"\n                      className=\"w-full border-2 border-cyan-500/50 bg-gray-900/50 hover:bg-cyan-500/20 text-cyan-400 font-semibold py-6 rounded-xl transition-all duration-300\"\n                      style={{\n                        boxShadow: '0 0 20px rgba(6, 182, 212, 0.3)'\n                      }}\n                    >\n                      <motion.div\n                        className=\"flex items-center justify-center gap-2\"\n                        whileHover={{\n                          rotate: [0, -10, 10, -10, 10, 0],\n                        }}\n                        transition={{\n                          duration: 0.5,\n                        }}\n                      >\n                        <Zap className=\"w-5 h-5\" />\n                      </motion.div>\n                      <span>Generate New</span>\n                    </Button>\n                  </motion.div>\n                </div>\n              </div>\n            </div>\n\n            {/* TODO:StatsPanel Real-time statistics panel showing comparisons, swaps, and progress */}\n          </div>\n\n            <motion.div\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ delay: 0.2 }}\n              className=\"bg-gray-800/50 backdrop-blur-lg rounded-2xl p-6 border border-purple-500/30 shadow-lg shadow-purple-500/20\"\n            >\n              <div className=\"flex items-center gap-2 mb-4\">\n                <BarChart3 className=\"w-5 h-5 text-purple-400\" />\n                <h3 className=\"text-purple-400 font-semibold text-lg\">Statistics</h3>\n              </div>\n              \n              <div className=\"grid grid-cols-3 gap-4\">\n                <div className=\"bg-gradient-to-br from-cyan-500/10 to-cyan-500/5 rounded-xl p-4 border border-cyan-500/30 shadow-[0_0_15px_rgba(0,255,255,0.2)]\">\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <span className=\"text-xs text-cyan-300 font-medium uppercase tracking-wider\">Comparisons</span>\n                    <motion.div\n                      animate={{\n                        scale: steps[currentStep]?.comparingIndices.length > 0 ? [1, 1.2, 1] : 1,\n                        opacity: steps[currentStep]?.comparingIndices.length > 0 ? [1, 0.7, 1] : 1\n                      }}\n                      transition={{ duration: 0.3 }}\n                      className=\"w-2 h-2 rounded-full bg-cyan-400 shadow-[0_0_8px_rgba(0,255,255,0.8)]\"\n                    />\n                  </div>\n                  <motion.div\n                    key={steps.slice(0, currentStep).filter(s => s.comparingIndices.length > 0).length}\n                    initial={{ scale: 1.3, color: '#00ffff' }}\n                    animate={{ scale: 1, color: '#ffffff' }}\n                    className=\"text-3xl font-bold text-white font-mono\"\n                  >\n                    {steps.slice(0, currentStep).filter(s => s.comparingIndices.length > 0).length}\n                  </motion.div>\n                  <div className=\"mt-1 text-xs text-cyan-400/70\">\n                    Total comparisons made\n                  </div>\n                </div>\n\n                <div className=\"bg-gradient-to-br from-pink-500/10 to-pink-500/5 rounded-xl p-4 border border-pink-500/30 shadow-[0_0_15px_rgba(255,0,102,0.2)]\">\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <span className=\"text-xs text-pink-300 font-medium uppercase tracking-wider\">Swaps</span>\n                    <motion.div\n                      animate={{\n                        scale: steps[currentStep]?.swappingIndices.length > 0 ? [1, 1.2, 1] : 1,\n                        opacity: steps[currentStep]?.swappingIndices.length > 0 ? [1, 0.7, 1] : 1\n                      }}\n                      transition={{ duration: 0.3 }}\n                      className=\"w-2 h-2 rounded-full bg-pink-400 shadow-[0_0_8px_rgba(255,0,102,0.8)]\"\n                    />\n                  </div>\n                  <motion.div\n                    key={steps.slice(0, currentStep).filter(s => s.swappingIndices.length > 0).length}\n                    initial={{ scale: 1.3, color: '#ff0066' }}\n                    animate={{ scale: 1, color: '#ffffff' }}\n                    className=\"text-3xl font-bold text-white font-mono\"\n                  >\n                    {steps.slice(0, currentStep).filter(s => s.swappingIndices.length > 0).length}\n                  </motion.div>\n                  <div className=\"mt-1 text-xs text-pink-400/70\">\n                    Elements swapped\n                  </div>\n                </div>\n\n                <div className=\"bg-gradient-to-br from-purple-500/10 to-purple-500/5 rounded-xl p-4 border border-purple-500/30 shadow-[0_0_15px_rgba(168,85,247,0.2)]\">\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <span className=\"text-xs text-purple-300 font-medium uppercase tracking-wider\">Progress</span>\n                    <motion.div\n                      animate={{\n                        rotate: isPlaying ? 360 : 0\n                      }}\n                      transition={{ duration: 2, repeat: isPlaying ? Infinity : 0, ease: \"linear\" }}\n                      className=\"w-2 h-2 rounded-full bg-purple-400 shadow-[0_0_8px_rgba(168,85,247,0.8)]\"\n                    />\n                  </div>\n                  <motion.div\n                    key={steps.length > 0 ? Math.round((currentStep / steps.length) * 100) : 0}\n                    initial={{ scale: 1.3, color: '#a855f7' }}\n                    animate={{ scale: 1, color: '#ffffff' }}\n                    className=\"text-3xl font-bold text-white font-mono\"\n                  >\n                    {steps.length > 0 ? Math.round((currentStep / steps.length) * 100) : 0}%\n                  </motion.div>\n                  <div className=\"mt-1 h-1.5 bg-gray-700 rounded-full overflow-hidden\">\n                    <motion.div\n                      className=\"h-full bg-gradient-to-r from-purple-500 to-pink-500 shadow-[0_0_10px_rgba(168,85,247,0.6)]\"\n                      initial={{ width: 0 }}\n                      animate={{ \n                        width: steps.length > 0 ? `${(currentStep / steps.length) * 100}%` : '0%'\n                      }}\n                      transition={{ duration: 0.3 }}\n                    />\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"mt-4 pt-4 border-t border-purple-500/20\">\n                <div className=\"flex items-center justify-between text-sm\">\n                  <div className=\"flex items-center gap-2\">\n                    <div className=\"w-1.5 h-1.5 rounded-full bg-green-400 shadow-[0_0_6px_rgba(0,255,170,0.8)]\" />\n                    <span className=\"text-gray-400\">Step:</span>\n                    <span className=\"text-white font-mono font-semibold\">{currentStep}</span>\n                    <span className=\"text-gray-500\">/</span>\n                    <span className=\"text-gray-400 font-mono\">{steps.length}</span>\n                  </div>\n                  <div className=\"flex items-center gap-2\">\n                    <span className=\"text-gray-400\">Status:</span>\n                    <motion.span\n                      animate={{\n                        color: isPlaying ? '#00ffaa' : currentStep === steps.length && steps.length > 0 ? '#00ffff' : '#9ca3af'\n                      }}\n                      className=\"font-semibold\"\n                    >\n                      {isPlaying ? 'Running' : currentStep === steps.length && steps.length > 0 ? 'Complete' : 'Ready'}\n                    </motion.span>\n                  </div>\n                </div>\n              </div>\n            </motion.div>\n          <div className=\"lg:col-span-3\">\n            <div className=\"bg-gray-800/50 backdrop-blur-lg rounded-2xl p-8 border border-purple-500/30 shadow-lg shadow-purple-500/20 min-h-[600px]\">\n              {array.length === 0 ? (\n                <motion.div\n                  initial={{ opacity: 0, scale: 0.8 }}\n                  animate={{ opacity: 1, scale: 1 }}\n                  transition={{ duration: 0.5 }}\n                  className=\"flex flex-col items-center justify-center h-full space-y-6\"\n                >\n                  <motion.div\n                    animate={{\n                      rotate: [0, 360],\n                      scale: [1, 1.2, 1]\n                    }}\n                    transition={{\n                      duration: 3,\n                      repeat: Infinity,\n                      ease: \"easeInOut\"\n                    }}\n                  >\n                    <BarChart3 className=\"w-24 h-24 text-cyan-400/50\" />\n                  </motion.div>\n                  <div className=\"text-center space-y-2\">\n                    <h3 className=\"text-2xl font-semibold text-cyan-300\">No Array Generated</h3>\n                    <p className=\"text-gray-400\">Click \"Generate Array\" to start visualizing</p>\n                  </div>\n                  <Button\n                    onClick={generateRandomArray}\n                    className=\"bg-gradient-to-r from-cyan-500 to-purple-500 hover:from-cyan-400 hover:to-purple-400 text-white font-semibold px-8 py-6 text-lg rounded-xl shadow-lg shadow-cyan-500/50 hover:shadow-cyan-500/80 transition-all duration-300\"\n                  >\n                    <Zap className=\"w-5 h-5 mr-2\" />\n                    Generate Array\n                  </Button>\n                </motion.div>\n              ) : (\n                <div className=\"w-full h-full flex items-center justify-center\">\n                  <div className=\"w-full h-[500px] flex items-end justify-center gap-1 px-4\">\n                    {(currentStep > 0 && currentStep <= steps.length ? steps[currentStep - 1].array : array).map((element, index) => {\n                      const maxValue = 105;\n                      const heightPercentage = (element.value / maxValue) * 100;\n                      const barWidth = Math.max(8, Math.min(60, (100 / array.length) * 8));\n                      \n                      let barColor = NEON_COLORS[index % NEON_COLORS.length];\n                      let glowIntensity = 0.3;\n                      let scale = 1;\n                      \n                      if (element.isSorted) {\n                        barColor = '#00ff00';\n                        glowIntensity = 0.6;\n                      } else if (element.isSwapping) {\n                        barColor = '#ff0066';\n                        glowIntensity = 0.8;\n                        scale = 1.1;\n                      } else if (element.isComparing) {\n                        barColor = '#ffff00';\n                        glowIntensity = 0.7;\n                        scale = 1.05;\n                      }\n                      \n                      return (\n                        <motion.div\n                          key={element.id}\n                          className=\"relative flex flex-col items-center justify-end\"\n                          style={{ width: `${barWidth}px` }}\n                          initial={{ opacity: 0, y: 50 }}\n                          animate={{\n                            opacity: 1,\n                            y: 0,\n                            scale: scale\n                          }}\n                          transition={{\n                            duration: 0.3,\n                            scale: { duration: 0.2 }\n                          }}\n                        >\n                          <motion.div\n                            className=\"w-full rounded-t-lg relative overflow-hidden\"\n                            style={{\n                              height: `${heightPercentage}%`,\n                              backgroundColor: barColor,\n                              boxShadow: `\n                                0 0 ${20 * glowIntensity}px ${barColor},\n                                0 0 ${40 * glowIntensity}px ${barColor},\n                                inset 0 0 ${10 * glowIntensity}px rgba(255, 255, 255, 0.5)\n                              `\n                            }}\n                            animate={{\n                              height: `${heightPercentage}%`,\n                              backgroundColor: barColor,\n                              boxShadow: `\n                                0 0 ${20 * glowIntensity}px ${barColor},\n                                0 0 ${40 * glowIntensity}px ${barColor},\n                                inset 0 0 ${10 * glowIntensity}px rgba(255, 255, 255, 0.5)\n                              `\n                            }}\n                            transition={{\n                              duration: 0.3,\n                              ease: \"easeInOut\"\n                            }}\n                          >\n                            {/* Shimmer effect */}\n                            <motion.div\n                              className=\"absolute inset-0 bg-gradient-to-r from-transparent via-white to-transparent opacity-30\"\n                              animate={{\n                                x: ['-100%', '200%']\n                              }}\n                              transition={{\n                                duration: 2,\n                                repeat: Infinity,\n                                ease: \"linear\",\n                                repeatDelay: 1\n                              }}\n                            />\n                            \n                            {/* Trail effect for swapping */}\n                            {element.isSwapping && (\n                              <motion.div\n                                className=\"absolute inset-0\"\n                                initial={{ opacity: 0 }}\n                                animate={{\n                                  opacity: [0, 1, 0],\n                                  scale: [1, 1.2, 1]\n                                }}\n                                transition={{\n                                  duration: 0.5,\n                                  repeat: Infinity\n                                }}\n                                style={{\n                                  background: `radial-gradient(circle, ${barColor} 0%, transparent 70%)`,\n                                  filter: 'blur(10px)'\n                                }}\n                              />\n                            )}\n                          </motion.div>\n                          \n                          {/* Value label */}\n                          {array.length <= 50 && (\n                            <motion.div\n                              className=\"absolute -top-6 text-xs font-mono font-bold\"\n                              style={{\n                                color: barColor,\n                                textShadow: `0 0 10px ${barColor}`\n                              }}\n                              animate={{\n                                scale: element.isComparing || element.isSwapping ? [1, 1.2, 1] : 1\n                              }}\n                              transition={{\n                                duration: 0.3,\n                                repeat: element.isComparing || element.isSwapping ? Infinity : 0\n                              }}\n                            >\n                              {element.value}\n                            </motion.div>\n                          )}\n                          \n                          {/* Pulse ring for comparing */}\n                          {element.isComparing && (\n                            <motion.div\n                              className=\"absolute inset-0 rounded-t-lg border-2\"\n                              style={{\n                                borderColor: barColor\n                              }}\n                              animate={{\n                                scale: [1, 1.3, 1],\n                                opacity: [1, 0, 1]\n                              }}\n                              transition={{\n                                duration: 1,\n                                repeat: Infinity,\n                                ease: \"easeInOut\"\n                              }}\n                            />\n                          )}\n                        </motion.div>\n                      );\n                    })}\n                  </div>\n                </div>\n              )}</parameter>\n</invoke>\n              \n              <div className=\"h-full flex items-end justify-center gap-1\">\n                {(currentStep < steps.length && steps[currentStep]?.array || array).map((element, index) => {\n                  const displayArray = currentStep < steps.length && steps[currentStep]?.array ? steps[currentStep].array : array;\n                  const maxValue = Math.max(...displayArray.map(el => el.value), 1);\n                  const heightPercentage = (element.value / maxValue) * 100;\n                  const colorIndex = index % NEON_COLORS.length;\n                  const baseColor = NEON_COLORS[colorIndex];\n                  \n                  let barColor = baseColor;\n                  let glowIntensity = 0.3;\n                  let scale = 1;\n                  \n                  if (element.isSorted) {\n                    barColor = '#00ff00';\n                    glowIntensity = 0.6;\n                  } else if (element.isSwapping) {\n                    barColor = '#ff0066';\n                    glowIntensity = 0.8;\n                    scale = 1.1;\n                  } else if (element.isComparing) {\n                    barColor = '#ffff00';\n                    glowIntensity = 0.7;\n                    scale = 1.05;\n                  }\n                  \n                  return (\n                    <motion.div\n                      key={element.id}\n                      className=\"relative flex-1 min-w-[4px] max-w-[60px] rounded-t-lg\"\n                      style={{\n                        height: `${heightPercentage}%`,\n                        backgroundColor: barColor,\n                        boxShadow: `\n                          0 0 ${10 * glowIntensity}px ${barColor},\n                          0 0 ${20 * glowIntensity}px ${barColor},\n                          0 0 ${30 * glowIntensity}px ${barColor}\n                        `,\n                      }}\n                      initial={{ height: 0, opacity: 0 }}\n                      animate={{\n                        height: `${heightPercentage}%`,\n                        opacity: 1,\n                        scale: scale,\n                        boxShadow: `\n                          0 0 ${10 * glowIntensity}px ${barColor},\n                          0 0 ${20 * glowIntensity}px ${barColor},\n                          0 0 ${30 * glowIntensity}px ${barColor}\n                        `,\n                      }}\n                      transition={{\n                        height: { duration: 0.3, ease: 'easeOut' },\n                        scale: { duration: 0.2, ease: 'easeInOut' },\n                        backgroundColor: { duration: 0.2 },\n                        boxShadow: { duration: 0.2 },\n                      }}\n                    >\n                      {element.isSwapping && (\n                        <motion.div\n                          className=\"absolute inset-0 rounded-t-lg\"\n                          style={{\n                            backgroundColor: barColor,\n                            opacity: 0.5,\n                          }}\n                          initial={{ y: 0, opacity: 0.8 }}\n                          animate={{\n                            y: [-20, 0],\n                            opacity: [0.8, 0],\n                          }}\n                          transition={{\n                            duration: 0.5,\n                            ease: 'easeOut',\n                          }}\n                        />\n                      )}\n                      \n                      {arraySize[0] <= 30 && (\n                        <motion.div\n                          className=\"absolute -top-6 left-1/2 transform -translate-x-1/2 text-xs font-mono font-bold whitespace-nowrap\"\n                          style={{ color: barColor }}\n                          initial={{ opacity: 0, y: 10 }}\n                          animate={{ opacity: element.isComparing || element.isSwapping ? 1 : 0.6, y: 0 }}\n                          transition={{ duration: 0.2 }}\n                        >\n                          {element.value}\n                        </motion.div>\n                      )}\n                      \n                      {element.isComparing && (\n                        <motion.div\n                          className=\"absolute -top-2 left-1/2 transform -translate-x-1/2\"\n                          initial={{ scale: 0 }}\n                          animate={{ scale: [1, 1.3, 1] }}\n                          transition={{ duration: 0.5, repeat: Infinity }}\n                        >\n                          <div\n                            className=\"w-2 h-2 rounded-full\"\n                            style={{\n                              backgroundColor: barColor,\n                              boxShadow: `0 0 10px ${barColor}, 0 0 20px ${barColor}`,\n                            }}\n                          />\n                        </motion.div>\n                      )}\n                    </motion.div>\n                  );\n                })}</parameter>\n</invoke>\n              </div>\n            </div>\n\n            <motion.div\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ delay: 0.3, duration: 0.6 }}\n              className=\"mt-6 bg-gray-800/50 backdrop-blur-lg rounded-xl p-6 border border-purple-500/30 shadow-lg shadow-purple-500/20\"\n            >\n              <h3 className=\"text-purple-400 font-semibold mb-4 flex items-center gap-2\">\n                <BarChart3 className=\"w-5 h-5\" />\n                Legend\n              </h3>\n              <div className=\"grid grid-cols-2 gap-4\">\n                <motion.div\n                  className=\"flex items-center gap-3 p-3 rounded-lg bg-gray-700/30 border border-cyan-500/30\"\n                  whileHover={{ scale: 1.05, borderColor: 'rgba(0, 255, 255, 0.6)' }}\n                  transition={{ type: 'spring', stiffness: 300 }}\n                >\n                  <motion.div\n                    className=\"w-6 h-6 rounded bg-cyan-400 shadow-lg shadow-cyan-400/50\"\n                    animate={{\n                      boxShadow: [\n                        '0 0 10px rgba(0, 255, 255, 0.5)',\n                        '0 0 20px rgba(0, 255, 255, 0.8)',\n                        '0 0 10px rgba(0, 255, 255, 0.5)'\n                      ]\n                    }}\n                    transition={{ duration: 1.5, repeat: Infinity }}\n                  />\n                  <div>\n                    <div className=\"text-sm font-semibold text-cyan-300\">Comparing</div>\n                    <div className=\"text-xs text-gray-400\">Elements being compared</div>\n                  </div>\n                </motion.div>\n\n                <motion.div\n                  className=\"flex items-center gap-3 p-3 rounded-lg bg-gray-700/30 border border-pink-500/30\"\n                  whileHover={{ scale: 1.05, borderColor: 'rgba(255, 0, 102, 0.6)' }}\n                  transition={{ type: 'spring', stiffness: 300 }}\n                >\n                  <motion.div\n                    className=\"w-6 h-6 rounded bg-pink-500 shadow-lg shadow-pink-500/50\"\n                    animate={{\n                      boxShadow: [\n                        '0 0 10px rgba(255, 0, 102, 0.5)',\n                        '0 0 20px rgba(255, 0, 102, 0.8)',\n                        '0 0 10px rgba(255, 0, 102, 0.5)'\n                      ],\n                      scale: [1, 1.1, 1]\n                    }}\n                    transition={{ duration: 1.2, repeat: Infinity }}\n                  />\n                  <div>\n                    <div className=\"text-sm font-semibold text-pink-300\">Swapping</div>\n                    <div className=\"text-xs text-gray-400\">Elements being swapped</div>\n                  </div>\n                </motion.div>\n\n                <motion.div\n                  className=\"flex items-center gap-3 p-3 rounded-lg bg-gray-700/30 border border-green-500/30\"\n                  whileHover={{ scale: 1.05, borderColor: 'rgba(0, 255, 0, 0.6)' }}\n                  transition={{ type: 'spring', stiffness: 300 }}\n                >\n                  <motion.div\n                    className=\"w-6 h-6 rounded bg-green-400 shadow-lg shadow-green-400/50\"\n                    animate={{\n                      boxShadow: [\n                        '0 0 10px rgba(0, 255, 0, 0.5)',\n                        '0 0 20px rgba(0, 255, 0, 0.8)',\n                        '0 0 10px rgba(0, 255, 0, 0.5)'\n                      ]\n                    }}\n                    transition={{ duration: 2, repeat: Infinity }}\n                  />\n                  <div>\n                    <div className=\"text-sm font-semibold text-green-300\">Sorted</div>\n                    <div className=\"text-xs text-gray-400\">In final position</div>\n                  </div>\n                </motion.div>\n\n                <motion.div\n                  className=\"flex items-center gap-3 p-3 rounded-lg bg-gray-700/30 border border-purple-500/30\"\n                  whileHover={{ scale: 1.05, borderColor: 'rgba(168, 85, 247, 0.6)' }}\n                  transition={{ type: 'spring', stiffness: 300 }}\n                >\n                  <motion.div\n                    className=\"w-6 h-6 rounded bg-gradient-to-br from-purple-400 to-pink-400 shadow-lg shadow-purple-400/50\"\n                    animate={{\n                      boxShadow: [\n                        '0 0 10px rgba(168, 85, 247, 0.5)',\n                        '0 0 20px rgba(168, 85, 247, 0.8)',\n                        '0 0 10px rgba(168, 85, 247, 0.5)'\n                      ]\n                    }}\n                    transition={{ duration: 1.8, repeat: Infinity }}\n                  />\n                  <div>\n                    <div className=\"text-sm font-semibold text-purple-300\">Unsorted</div>\n                    <div className=\"text-xs text-gray-400\">Awaiting processing</div>\n                  </div>\n                </motion.div>\n              </div>\n            </motion.div>\n          </div>\n        </div>\n\n        <motion.div\n          initial={{ opacity: 0, y: 50 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ delay: 0.4, duration: 0.6 }}\n          className=\"bg-gray-800/50 backdrop-blur-lg rounded-2xl p-6 border border-purple-500/30 shadow-lg shadow-purple-500/20\"\n        >\n          <div className=\"space-y-4\">\n            <div className=\"flex items-center justify-between\">\n              <h3 className=\"text-purple-400 font-semibold flex items-center gap-2\">\n                <BarChart3 className=\"w-5 h-5\" />\n                Timeline Control\n              </h3>\n              <div className=\"flex items-center gap-3 text-sm\">\n                <span className=\"text-gray-400\">\n                  Step: <span className=\"text-cyan-400 font-mono font-bold\">{currentStep}</span> / <span className=\"text-purple-400 font-mono\">{steps.length}</span>\n                </span>\n                {steps.length > 0 && (\n                  <motion.span\n                    initial={{ scale: 0 }}\n                    animate={{ scale: 1 }}\n                    className=\"px-3 py-1 bg-gradient-to-r from-cyan-500/20 to-purple-500/20 rounded-full border border-cyan-400/30 text-cyan-300 font-semibold\"\n                  >\n                    {Math.round((currentStep / steps.length) * 100)}%\n                  </motion.span>\n                )}\n              </div>\n            </div>\n\n            {/* Timeline Scrubber */}\n            <div className=\"relative\">\n              <div className=\"relative h-3 bg-gray-700/50 rounded-full overflow-hidden border border-gray-600/30\">\n                {/* Progress Bar */}\n                <motion.div\n                  className=\"absolute inset-y-0 left-0 bg-gradient-to-r from-cyan-500 via-purple-500 to-pink-500 rounded-full\"\n                  initial={{ width: 0 }}\n                  animate={{\n                    width: steps.length > 0 ? `${(currentStep / steps.length) * 100}%` : '0%'\n                  }}\n                  transition={{ duration: 0.3, ease: 'easeOut' }}\n                >\n                  <motion.div\n                    className=\"absolute inset-0 bg-gradient-to-r from-transparent via-white/30 to-transparent\"\n                    animate={{\n                      x: ['-100%', '200%']\n                    }}\n                    transition={{\n                      duration: 2,\n                      repeat: Infinity,\n                      ease: 'linear'\n                    }}\n                  />\n                </motion.div>\n\n                {/* Glow Effect */}\n                {steps.length > 0 && currentStep > 0 && (\n                  <motion.div\n                    className=\"absolute inset-y-0 left-0 bg-gradient-to-r from-cyan-500/50 via-purple-500/50 to-pink-500/50 blur-md\"\n                    animate={{\n                      width: `${(currentStep / steps.length) * 100}%`\n                    }}\n                    transition={{ duration: 0.3 }}\n                  />\n                )}\n\n                {/* Step Markers */}\n                {steps.length > 0 && steps.length <= 50 && (\n                  <div className=\"absolute inset-0 flex items-center\">\n                    {steps.map((_, index) => (\n                      <div\n                        key={index}\n                        className=\"flex-1 flex justify-center\"\n                      >\n                        <motion.div\n                          className={`w-1 h-1 rounded-full transition-all duration-300 ${\n                            index < currentStep\n                              ? 'bg-cyan-300 shadow-[0_0_6px_rgba(0,255,255,0.8)]'\n                              : 'bg-gray-600'\n                          }`}\n                          initial={{ scale: 0 }}\n                          animate={{ scale: index === currentStep - 1 ? 1.5 : 1 }}\n                        />\n                      </div>\n                    ))}\n                  </div>\n                )}\n              </div>\n\n              {/* Interactive Slider */}\n              {steps.length > 0 && (\n                <div className=\"absolute inset-0 -mx-2\">\n                  <Slider\n                    value={[currentStep]}\n                    onValueChange={(value) => {\n                      setCurrentStep(value[0]);\n                      setIsPlaying(false);\n                    }}\n                    min={0}\n                    max={steps.length}\n                    step={1}\n                    className=\"cursor-pointer [&_[role=slider]]:bg-gradient-to-br [&_[role=slider]]:from-cyan-400 [&_[role=slider]]:to-purple-500 [&_[role=slider]]:border-2 [&_[role=slider]]:border-white [&_[role=slider]]:shadow-[0_0_20px_rgba(0,255,255,0.8)] [&_[role=slider]]:transition-all [&_[role=slider]]:hover:shadow-[0_0_30px_rgba(0,255,255,1)] [&_[role=slider]]:hover:scale-125 [&_[role=slider]]:w-5 [&_[role=slider]]:h-5 [&>.relative]:bg-transparent\"\n                  />\n                </div>\n              )}\n            </div>\n\n            {/* Step Navigation Buttons */}\n            <div className=\"flex items-center justify-between gap-3\">\n              <div className=\"flex gap-2\">\n                <Button\n                  onClick={() => {\n                    setCurrentStep(0);\n                    setIsPlaying(false);\n                  }}\n                  disabled={currentStep === 0 || steps.length === 0}\n                  size=\"sm\"\n                  className=\"bg-gray-700/50 hover:bg-gray-600/50 text-cyan-400 border border-cyan-500/30 hover:border-cyan-400/50 hover:shadow-[0_0_15px_rgba(0,255,255,0.4)] transition-all duration-300 disabled:opacity-30 disabled:cursor-not-allowed\"\n                >\n                  <RotateCcw className=\"w-4 h-4 mr-1\" />\n                  Start\n                </Button>\n                <Button\n                  onClick={() => {\n                    if (currentStep > 0) {\n                      setCurrentStep(prev => prev - 1);\n                      setIsPlaying(false);\n                    }\n                  }}\n                  disabled={currentStep === 0 || steps.length === 0}\n                  size=\"sm\"\n                  className=\"bg-gray-700/50 hover:bg-gray-600/50 text-purple-400 border border-purple-500/30 hover:border-purple-400/50 hover:shadow-[0_0_15px_rgba(168,85,247,0.4)] transition-all duration-300 disabled:opacity-30 disabled:cursor-not-allowed\"\n                >\n                  \u2190 Prev\n                </Button>\n                <Button\n                  onClick={() => {\n                    if (currentStep < steps.length) {\n                      setCurrentStep(prev => prev + 1);\n                      setIsPlaying(false);\n                    }\n                  }}\n                  disabled={currentStep >= steps.length || steps.length === 0}\n                  size=\"sm\"\n                  className=\"bg-gray-700/50 hover:bg-gray-600/50 text-purple-400 border border-purple-500/30 hover:border-purple-400/50 hover:shadow-[0_0_15px_rgba(168,85,247,0.4)] transition-all duration-300 disabled:opacity-30 disabled:cursor-not-allowed\"\n                >\n                  Next \u2192\n                </Button>\n              </div>\n\n              <Button\n                onClick={() => {\n                  setCurrentStep(steps.length);\n                  setIsPlaying(false);\n                }}\n                disabled={currentStep >= steps.length || steps.length === 0}\n                size=\"sm\"\n                className=\"bg-gradient-to-r from-cyan-500/20 to-purple-500/20 hover:from-cyan-500/30 hover:to-purple-500/30 text-cyan-300 border border-cyan-400/30 hover:border-cyan-400/50 hover:shadow-[0_0_15px_rgba(0,255,255,0.4)] transition-all duration-300 disabled:opacity-30 disabled:cursor-not-allowed\"\n              >\n                Skip to End\n              </Button>\n            </div>\n\n            {/* Current Step Info */}\n            {steps.length > 0 && currentStep > 0 && currentStep <= steps.length && (\n              <motion.div\n                initial={{ opacity: 0, height: 0 }}\n                animate={{ opacity: 1, height: 'auto' }}\n                className=\"pt-4 border-t border-gray-700/50\"\n              >\n                <div className=\"flex items-center justify-between text-sm\">\n                  <div className=\"flex items-center gap-4\">\n                    {steps[currentStep - 1]?.comparingIndices.length > 0 && (\n                      <motion.div\n                        initial={{ scale: 0 }}\n                        animate={{ scale: 1 }}\n                        className=\"flex items-center gap-2 px-3 py-1.5 bg-yellow-500/20 rounded-lg border border-yellow-400/30\"\n                      >\n                        <div className=\"w-2 h-2 rounded-full bg-yellow-400 animate-pulse\" />\n                        <span className=\"text-yellow-300 font-medium\">Comparing</span>\n                      </motion.div>\n                    )}\n                    {steps[currentStep - 1]?.swappingIndices.length > 0 && (\n                      <motion.div\n                        initial={{ scale: 0 }}\n                        animate={{ scale: 1 }}\n                        className=\"flex items-center gap-2 px-3 py-1.5 bg-pink-500/20 rounded-lg border border-pink-400/30\"\n                      >\n                        <div className=\"w-2 h-2 rounded-full bg-pink-400 animate-pulse\" />\n                        <span className=\"text-pink-300 font-medium\">Swapping</span>\n                      </motion.div>\n                    )}\n                    {steps[currentStep - 1]?.sortedIndices.length > 0 && (\n                      <motion.div\n                        initial={{ scale: 0 }}\n                        animate={{ scale: 1 }}\n                        className=\"flex items-center gap-2 px-3 py-1.5 bg-green-500/20 rounded-lg border border-green-400/30\"\n                      >\n                        <div className=\"w-2 h-2 rounded-full bg-green-400\" />\n                        <span className=\"text-green-300 font-medium\">\n                          Sorted: {steps[currentStep - 1].sortedIndices.length}\n                        </span>\n                      </motion.div>\n                    )}\n                  </div>\n                </div>\n              </motion.div>\n            )}\n          </div>\n        </motion.div>\n      </div>\n    </div>\n  );\n}",
  "error": null,
  "overall_score": 47,
  "code_quality_score": 12,
  "architecture_score": 10,
  "performance_score": 14,
  "accessibility_score": 11,
  "metadata": {
    "document_id": "eval_room_594c29bc53ad",
    "prompt_category": "creative",
    "prompt_complexity": 9.0
  },
  "raw_response": {
    "document_id": "eval_room_594c29bc53ad",
    "mode": "parallel",
    "prompt": "Build a captivating algorithm visualizer with neon colored bars, smooth height transitions, glowing comparison indicators, trail effects during swaps, and a futuristic dashboard design with animated controls",
    "content": "import { useState, useCallback } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Slider } from '@/components/ui/slider';\nimport { Play, Pause, RotateCcw, Zap, BarChart3 } from 'lucide-react';\nimport { motion } from 'framer-motion';\n\ninterface ArrayElement {\n  value: number;\n  id: string;\n  isComparing?: boolean;\n  isSwapping?: boolean;\n  isSorted?: boolean;\n}\n\ninterface AlgorithmStep {\n  array: ArrayElement[];\n  comparingIndices: number[];\n  swappingIndices: number[];\n  sortedIndices: number[];\n}\n\ntype AlgorithmType = 'bubble' | 'quick' | 'merge' | 'insertion';\n\nconst NEON_COLORS = [\n  '#00ffff',\n  '#ff00ff', \n  '#00ff00',\n  '#ffff00',\n  '#ff0066',\n  '#00ffaa'\n];\n\nconst mockAlgorithms = [\n  { id: 'bubble', name: 'Bubble Sort', complexity: 'O(n\u00b2)' },\n  { id: 'quick', name: 'Quick Sort', complexity: 'O(n log n)' },\n  { id: 'merge', name: 'Merge Sort', complexity: 'O(n log n)' },\n  { id: 'insertion', name: 'Insertion Sort', complexity: 'O(n\u00b2)' }\n];\n\nexport default function AlgorithmVisualizer() {\n  const [array, setArray] = useState<ArrayElement[]>([]);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [speed, setSpeed] = useState([50]);\n  const [arraySize, setArraySize] = useState([20]);\n  const [selectedAlgorithm, setSelectedAlgorithm] = useState<AlgorithmType>('bubble');\n  const [currentStep, setCurrentStep] = useState(0);\n  const [steps, setSteps] = useState<AlgorithmStep[]>([]);\n\n  const generateRandomArray = useCallback(() => {\n    const newArray: ArrayElement[] = Array.from({ length: arraySize[0] }, (_, index) => ({\n      value: Math.floor(Math.random() * 100) + 5,\n      id: `element-${index}-${Date.now()}`,\n      isComparing: false,\n      isSwapping: false,\n      isSorted: false\n    }));\n    setArray(newArray);\n    setSteps([]);\n    setCurrentStep(0);\n    setIsPlaying(false);\n  }, [arraySize]);\n\n  const resetVisualization = useCallback(() => {\n\n    setIsPlaying(false);\n    setCurrentStep(0);\n    setSteps([]);\n    generateRandomArray();\n  }, [generateRandomArray]);\n\n  // Animation effect for step-by-step visualization\n  const animateSteps = useCallback(() => {\n    if (currentStep < steps.length && isPlaying) {\n      const timer = setTimeout(() => {\n        setCurrentStep(prev => prev + 1);\n      }, 1000 - speed[0] * 9); // Convert speed slider (0-100) to delay (1000ms-100ms)\n      \n      return () => clearTimeout(timer);\n    } else if (currentStep >= steps.length && isPlaying) {\n      setIsPlaying(false);\n    }\n  }, [currentStep, steps.length, isPlaying, speed]);\n\n  // Run animation effect\n  useState(() => {\n    const cleanup = animateSteps();\n    return cleanup;\n  });\n  const startVisualization = useCallback(() => {\n    if (steps.length === 0 || currentStep >= steps.length) {\n      return;\n    }\n    \n    setIsPlaying(true);\n  }, [steps, speed, currentStep]);\n\n  const pauseVisualization = useCallback(() => {    setIsPlaying(false);\n  }, []);\n\n  const generateSortingSteps = useCallback((algorithm: AlgorithmType) => {\n    if (array.length === 0) return;\n\n    const steps: AlgorithmStep[] = [];\n    const arr = [...array];\n\n    const createStep = (\n      currentArray: ArrayElement[],\n      comparing: number[] = [],\n      swapping: number[] = [],\n      sorted: number[] = []\n    ): AlgorithmStep => ({\n      array: currentArray.map((el, idx) => ({\n        ...el,\n        isComparing: comparing.includes(idx),\n        isSwapping: swapping.includes(idx),\n        isSorted: sorted.includes(idx)\n      })),\n      comparingIndices: comparing,\n      swappingIndices: swapping,\n      sortedIndices: sorted\n    });\n\n    if (algorithm === 'bubble') {\n      const sortedIndices: number[] = [];\n      for (let i = 0; i < arr.length; i++) {\n        for (let j = 0; j < arr.length - i - 1; j++) {\n          steps.push(createStep([...arr], [j, j + 1], [], sortedIndices));\n          \n          if (arr[j].value > arr[j + 1].value) {\n            steps.push(createStep([...arr], [], [j, j + 1], sortedIndices));\n            [arr[j], arr[j + 1]] = [arr[j + 1], arr[j]];\n            steps.push(createStep([...arr], [], [], sortedIndices));\n          }\n        }\n        sortedIndices.push(arr.length - i - 1);\n      }\n      steps.push(createStep([...arr], [], [], Array.from({ length: arr.length }, (_, i) => i)));\n    } else if (algorithm === 'insertion') {\n      const sortedIndices: number[] = [0];\n      for (let i = 1; i < arr.length; i++) {\n        const key = arr[i];\n        let j = i - 1;\n        \n        steps.push(createStep([...arr], [i], [], sortedIndices));\n        \n        while (j >= 0 && arr[j].value > key.value) {\n          steps.push(createStep([...arr], [j, j + 1], [], sortedIndices));\n          arr[j + 1] = arr[j];\n          steps.push(createStep([...arr], [], [j, j + 1], sortedIndices));\n          j--;\n        }\n        arr[j + 1] = key;\n        sortedIndices.push(i);\n        steps.push(createStep([...arr], [], [], sortedIndices));\n      }\n      steps.push(createStep([...arr], [], [], Array.from({ length: arr.length }, (_, i) => i)));\n    } else if (algorithm === 'quick') {\n      const sortedIndices: number[] = [];\n      \n      const partition = (low: number, high: number): number => {\n        const pivot = arr[high];\n        steps.push(createStep([...arr], [high], [], sortedIndices));\n        let i = low - 1;\n\n        for (let j = low; j < high; j++) {\n          steps.push(createStep([...arr], [j, high], [], sortedIndices));\n          \n          if (arr[j].value < pivot.value) {\n            i++;\n            if (i !== j) {\n              steps.push(createStep([...arr], [], [i, j], sortedIndices));\n              [arr[i], arr[j]] = [arr[j], arr[i]];\n              steps.push(createStep([...arr], [], [], sortedIndices));\n            }\n          }\n        }\n        \n        steps.push(createStep([...arr], [], [i + 1, high], sortedIndices));\n        [arr[i + 1], arr[high]] = [arr[high], arr[i + 1]];\n        sortedIndices.push(i + 1);\n        steps.push(createStep([...arr], [], [], sortedIndices));\n        \n        return i + 1;\n      };\n\n      const quickSort = (low: number, high: number) => {\n        if (low < high) {\n          const pi = partition(low, high);\n          quickSort(low, pi - 1);\n          quickSort(pi + 1, high);\n        } else if (low === high) {\n          sortedIndices.push(low);\n        }\n      };\n\n      quickSort(0, arr.length - 1);\n      steps.push(createStep([...arr], [], [], Array.from({ length: arr.length }, (_, i) => i)));\n    } else if (algorithm === 'merge') {\n      const sortedIndices: number[] = [];\n      \n      const merge = (left: number, mid: number, right: number) => {\n        const leftArr = arr.slice(left, mid + 1);\n        const rightArr = arr.slice(mid + 1, right + 1);\n        \n        let i = 0, j = 0, k = left;\n        \n        while (i < leftArr.length && j < rightArr.length) {\n          steps.push(createStep([...arr], [left + i, mid + 1 + j], [], sortedIndices));\n          \n          if (leftArr[i].value <= rightArr[j].value) {\n            arr[k] = leftArr[i];\n            i++;\n          } else {\n            arr[k] = rightArr[j];\n            j++;\n          }\n          steps.push(createStep([...arr], [], [k], sortedIndices));\n          k++;\n        }\n        \n        while (i < leftArr.length) {\n          arr[k] = leftArr[i];\n          steps.push(createStep([...arr], [], [k], sortedIndices));\n          i++;\n          k++;\n        }\n        \n        while (j < rightArr.length) {\n          arr[k] = rightArr[j];\n          steps.push(createStep([...arr], [], [k], sortedIndices));\n          j++;\n          k++;\n        }\n      };\n\n      const mergeSort = (left: number, right: number) => {\n        if (left < right) {\n          const mid = Math.floor((left + right) / 2);\n          mergeSort(left, mid);\n          mergeSort(mid + 1, right);\n          merge(left, mid, right);\n        }\n      };\n\n      mergeSort(0, arr.length - 1);\n      steps.push(createStep([...arr], [], [], Array.from({ length: arr.length }, (_, i) => i)));\n    }\n\n    setSteps(steps);\n    setCurrentStep(0);</parameter>\n</invoke>\n  }, [array]);\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-gray-900 via-purple-900 to-gray-900 p-8\">\n      <div className=\"max-w-7xl mx-auto space-y-8\">\n        <motion.div\n          initial={{ opacity: 0, y: -20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.8 }}\n          className=\"text-center space-y-4\"\n        >\n          <motion.h1\n            className=\"text-6xl font-bold bg-gradient-to-r from-cyan-400 via-purple-400 to-pink-400 bg-clip-text text-transparent\"\n            animate={{\n              textShadow: [\n                '0 0 20px rgba(0, 255, 255, 0.5)',\n                '0 0 40px rgba(255, 0, 255, 0.5)',\n                '0 0 20px rgba(0, 255, 255, 0.5)'\n              ]\n            }}\n            transition={{ duration: 2, repeat: Infinity }}\n          >\n            Algorithm Visualizer\n          </motion.h1>\n          \n          <div className=\"flex items-center justify-center gap-4\">\n            <motion.div\n              initial={{ scale: 0 }}\n              animate={{ scale: 1 }}\n              transition={{ delay: 0.3, type: 'spring' }}\n              className=\"flex items-center gap-2 px-6 py-3 bg-gray-800/50 backdrop-blur-sm rounded-full border border-cyan-500/30\"\n            >\n              <Zap className=\"w-5 h-5 text-cyan-400\" />\n              <span className=\"text-xl font-semibold text-cyan-300\">\n                {mockAlgorithms.find(a => a.id === selectedAlgorithm)?.name}\n              </span>\n            </motion.div>\n            \n            <motion.div\n              initial={{ scale: 0 }}\n              animate={{ scale: 1 }}\n              transition={{ delay: 0.5, type: 'spring' }}\n              className=\"px-4 py-2 bg-purple-500/20 backdrop-blur-sm rounded-full border border-purple-400/50\"\n            >\n              <div className=\"flex items-center gap-2\">\n                <BarChart3 className=\"w-4 h-4 text-purple-300\" />\n                <span className=\"text-sm font-mono text-purple-200\">\n                  {mockAlgorithms.find(a => a.id === selectedAlgorithm)?.complexity}\n                </span>\n              </div>\n            </motion.div>\n          </div>\n        </motion.div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-6\">\n          <div className=\"lg:col-span-1 space-y-6\">\n            <motion.div\n              initial={{ opacity: 0, x: -50 }}\n              animate={{ opacity: 1, x: 0 }}\n              className=\"bg-gray-800/50 backdrop-blur-lg rounded-2xl p-6 border border-cyan-500/30 shadow-[0_0_30px_rgba(0,255,255,0.3)]\"\n            >\n              <div className=\"space-y-6\">\n                {/* Algorithm Selection */}\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center gap-2 text-cyan-400\">\n                    <Zap className=\"w-5 h-5\" />\n                    <h3 className=\"font-semibold text-lg\">Algorithm</h3>\n                  </div>\n                  <div className=\"space-y-2\">\n                    {mockAlgorithms.map((algo) => (\n                      <button\n                        key={algo.id}\n                        onClick={() => {\n                          setSelectedAlgorithm(algo.id as AlgorithmType);\n                          generateSortingSteps(algo.id as AlgorithmType);\n                        }}\n                        disabled={isPlaying}\n                        className={`w-full text-left p-3 rounded-lg transition-all duration-300 ${\n                          selectedAlgorithm === algo.id\n                            ? 'bg-cyan-500/20 border border-cyan-400 shadow-[0_0_15px_rgba(0,255,255,0.5)]'\n                            : 'bg-gray-700/30 border border-gray-600/30 hover:border-cyan-500/50 hover:shadow-[0_0_10px_rgba(0,255,255,0.3)]'\n                        } disabled:opacity-50 disabled:cursor-not-allowed`}\n                      >\n                        <div className=\"font-medium text-white\">{algo.name}</div>\n                        <div className=\"text-xs text-gray-400 mt-1\">{algo.complexity}</div>\n                      </button>\n                    ))}\n                  </div>\n                </div>\n\n                {/* Speed Control */}\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <label className=\"text-cyan-400 font-semibold\">Speed</label>\n                    <span className=\"text-white text-sm bg-cyan-500/20 px-3 py-1 rounded-full border border-cyan-400/30\">\n                      {speed[0]}ms\n                    </span>\n                  </div>\n                  <Slider\n                    value={speed}\n                    onValueChange={setSpeed}\n                    min={10}\n                    max={200}\n                    step={10}\n                    className=\"cursor-pointer\"\n                  />\n                </div>\n\n                {/* Array Size Control */}\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <label className=\"text-cyan-400 font-semibold flex items-center gap-2\">\n                      <BarChart3 className=\"w-4 h-4\" />\n                      Array Size\n                    </label>\n                    <span className=\"text-white text-sm bg-purple-500/20 px-3 py-1 rounded-full border border-purple-400/30\">\n                      {arraySize[0]}\n                    </span>\n                  </div>\n                  <Slider\n                    value={arraySize}\n                    onValueChange={(val) => {\n                      setArraySize(val);\n                      if (!isPlaying) {\n                        generateRandomArray();\n                      }\n                    }}\n                    min={5}\n                    max={50}\n                    step={5}\n                    disabled={isPlaying}\n                    className=\"cursor-pointer\"\n                  />\n                </div>\n\n                {/* Control Buttons */}\n                <div className=\"space-y-3 pt-4 border-t border-gray-700/50\">\n                  <Button\n                    onClick={isPlaying ? pauseVisualization : startVisualization}\n                    disabled={steps.length === 0 || (currentStep >= steps.length && !isPlaying)}\n                    className=\"w-full bg-gradient-to-r from-cyan-500 to-blue-500 hover:from-cyan-400 hover:to-blue-400 text-white font-semibold py-6 rounded-xl shadow-[0_0_20px_rgba(0,255,255,0.4)] hover:shadow-[0_0_30px_rgba(0,255,255,0.6)] transition-all duration-300 disabled:opacity-50 disabled:cursor-not-allowed\"\n                  >\n                    {isPlaying ? (\n                      <>\n                        <Pause className=\"w-5 h-5 mr-2\" />\n                        Pause\n                      </>\n                    ) : (\n                      <>\n                        <Play className=\"w-5 h-5 mr-2\" />\n                        {currentStep >= steps.length ? 'Start' : 'Resume'}\n                      </>\n                    )}\n                  </Button>\n\n                  <Button\n                    onClick={resetVisualization}\n                    disabled={isPlaying}\n                    className=\"w-full bg-gradient-to-r from-purple-500 to-pink-500 hover:from-purple-400 hover:to-pink-400 text-white font-semibold py-6 rounded-xl shadow-[0_0_20px_rgba(255,0,255,0.4)] hover:shadow-[0_0_30px_rgba(255,0,255,0.6)] transition-all duration-300 disabled:opacity-50 disabled:cursor-not-allowed\"\n                  >\n                    <RotateCcw className=\"w-5 h-5 mr-2\" />\n                    Reset\n                  </Button>\n                </div>\n\n                {/* Stats */}\n                <div className=\"pt-4 border-t border-gray-700/50 space-y-2\">\n                  <div className=\"flex justify-between text-sm\">\n                    <span className=\"text-gray-400\">Current Step:</span>\n                    <span className=\"text-cyan-400 font-mono\">{currentStep} / {steps.length}</span>\n                  </div>\n                  <div className=\"flex justify-between text-sm\">\n                    <span className=\"text-gray-400\">Array Elements:</span>\n                    <span className=\"text-purple-400 font-mono\">{array.length}</span>\n                  </div>\n                </div>\n              </div>\n            </motion.div>\n            \n            <div className=\"bg-gray-800/50 backdrop-blur-lg rounded-2xl p-6 border border-cyan-500/30 shadow-lg shadow-cyan-500/20\">\n              <div className=\"space-y-6\">\n                <div>\n                  <h3 className=\"text-cyan-400 font-semibold mb-4 flex items-center gap-2\">\n                    <Zap className=\"w-5 h-5\" />\n                    Algorithm\n                  </h3>\n                  <div className=\"grid grid-cols-2 gap-3\">\n                    {mockAlgorithms.map((algo) => (\n                      <motion.button\n                        key={algo.id}\n                        onClick={() => setSelectedAlgorithm(algo.id as AlgorithmType)}\n                        className={`relative p-3 rounded-lg border transition-all duration-300 ${\n                          selectedAlgorithm === algo.id\n                            ? 'bg-cyan-500/20 border-cyan-400 shadow-lg shadow-cyan-500/50'\n                            : 'bg-gray-700/30 border-gray-600 hover:border-cyan-500/50 hover:shadow-md hover:shadow-cyan-500/30'\n                        }`}\n                        whileHover={{ scale: 1.05 }}\n                        whileTap={{ scale: 0.95 }}\n                        disabled={isPlaying}\n                      >\n                        <div className=\"text-left\">\n                          <div className={`text-sm font-semibold ${\n                            selectedAlgorithm === algo.id ? 'text-cyan-300' : 'text-gray-300'\n                          }`}>\n                            {algo.name}\n                          </div>\n                          <div className={`text-xs mt-1 ${\n                            selectedAlgorithm === algo.id ? 'text-cyan-400' : 'text-gray-500'\n                          }`}>\n                            {algo.complexity}\n                          </div>\n                        </div>\n                        {selectedAlgorithm === algo.id && (\n                          <motion.div\n                            className=\"absolute inset-0 rounded-lg bg-cyan-500/10\"\n                            layoutId=\"algorithmSelector\"\n                            transition={{ type: \"spring\", bounce: 0.2, duration: 0.6 }}\n                          />\n                        )}\n                      </motion.button>\n                    ))}\n                  </div>\n                </div>\n\n                <div>\n                  <h3 className=\"text-cyan-400 font-semibold mb-4\">Speed</h3>\n                  <div className=\"space-y-2\">\n                    <Slider\n                      value={speed}\n                      onValueChange={setSpeed}\n                      min={1}\n                      max={100}\n                      step={1}\n                      className=\"cursor-pointer [&_[role=slider]]:bg-cyan-400 [&_[role=slider]]:border-cyan-300 [&_[role=slider]]:shadow-lg [&_[role=slider]]:shadow-cyan-400/50 [&_[role=slider]]:transition-all [&_[role=slider]]:hover:shadow-cyan-400/80 [&_[role=slider]]:hover:scale-110 [&_.relative]:bg-gray-700 [&_.relative]:overflow-visible [&_.bg-primary]:bg-gradient-to-r [&_.bg-primary]:from-cyan-500 [&_.bg-primary]:to-purple-500 [&_.bg-primary]:shadow-lg [&_.bg-primary]:shadow-cyan-500/30\"\n                    />\n                    <div className=\"flex justify-between text-xs text-gray-400\">\n                      <span>Slow</span>\n                      <span className=\"text-cyan-400 font-semibold\">{speed[0]}%</span>\n                      <span>Fast</span>\n                    </div>\n                  </div>\n                </div>\n\n                <div>\n                  <h3 className=\"text-cyan-400 font-semibold mb-4\">Array Size</h3>\n                  <div className=\"space-y-3\">\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"text-sm text-gray-400\">Elements</span>\n                      <motion.span \n                        key={arraySize[0]}\n                        initial={{ scale: 1.3, color: '#00ffff' }}\n                        animate={{ scale: 1, color: '#9ca3af' }}\n                        className=\"text-sm font-mono font-bold\"\n                      >\n                        {arraySize[0]}\n                      </motion.span>\n                    </div>\n                    <div className=\"relative\">\n                      <Slider\n                        value={arraySize}\n                        onValueChange={(value) => {\n                          setArraySize(value);\n                          if (!isPlaying) {\n                            generateRandomArray();\n                          }\n                        }}\n                        min={5}\n                        max={100}\n                        step={1}\n                        disabled={isPlaying}\n                        className=\"cursor-pointer [&_[role=slider]]:bg-gradient-to-r [&_[role=slider]]:from-cyan-400 [&_[role=slider]]:to-purple-500 [&_[role=slider]]:border-2 [&_[role=slider]]:border-cyan-300 [&_[role=slider]]:shadow-lg [&_[role=slider]]:shadow-cyan-500/50 [&_[role=slider]]:transition-all [&_[role=slider]]:hover:shadow-cyan-400/70 [&_[role=slider]]:hover:scale-110 [&>.relative>.absolute]:bg-gradient-to-r [&>.relative>.absolute]:from-cyan-500/30 [&>.relative>.absolute]:to-purple-500/30 [&>.relative>.absolute]:h-2\"\n                      />\n                      <div className=\"absolute inset-0 bg-gradient-to-r from-cyan-500/10 to-purple-500/10 rounded-full blur-sm pointer-events-none\" />\n                    </div>\n                  </div></parameter>\n</invoke>\n                </div>\n\n                <div className=\"space-y-3 pt-4 border-t border-cyan-500/20\">\n                  <motion.div\n                    whileHover={{ scale: 1.02 }}\n                    whileTap={{ scale: 0.98 }}\n                  >\n                    <Button\n                      onClick={isPlaying ? pauseVisualization : startVisualization}\n                      disabled={array.length === 0 || (steps.length === 0 && !isPlaying)}\n                      className=\"w-full bg-gradient-to-r from-cyan-500 to-purple-500 hover:from-cyan-400 hover:to-purple-400 text-white font-semibold py-6 rounded-xl shadow-lg transition-all duration-300 disabled:opacity-50 disabled:cursor-not-allowed\"\n                      style={{\n                        boxShadow: isPlaying \n                          ? '0 0 30px rgba(168, 85, 247, 0.6), 0 0 60px rgba(6, 182, 212, 0.4)'\n                          : '0 0 20px rgba(168, 85, 247, 0.4)'\n                      }}\n                    >\n                      <motion.div\n                        className=\"flex items-center justify-center gap-2\"\n                        animate={isPlaying ? {\n                          scale: [1, 1.1, 1],\n                        } : {}}\n                        transition={{\n                          duration: 1,\n                          repeat: isPlaying ? Infinity : 0,\n                          ease: \"easeInOut\"\n                        }}\n                      >\n                        {isPlaying ? (\n                          <>\n                            <Pause className=\"w-5 h-5\" />\n                            <span>Pause</span>\n                          </>\n                        ) : (\n                          <>\n                            <Play className=\"w-5 h-5\" />\n                            <span>Play</span>\n                          </>\n                        )}\n                      </motion.div>\n                    </Button>\n                  </motion.div>\n\n                  <motion.div\n                    whileHover={{ scale: 1.02 }}\n                    whileTap={{ scale: 0.98 }}\n                  >\n                    <Button\n                      onClick={resetVisualization}\n                      variant=\"outline\"\n                      className=\"w-full border-2 border-pink-500/50 bg-gray-900/50 hover:bg-pink-500/20 text-pink-400 font-semibold py-6 rounded-xl transition-all duration-300\"\n                      style={{\n                        boxShadow: '0 0 20px rgba(236, 72, 153, 0.3)'\n                      }}\n                    >\n                      <motion.div\n                        className=\"flex items-center justify-center gap-2\"\n                        whileHover={{\n                          rotate: -180,\n                        }}\n                        transition={{\n                          duration: 0.6,\n                          ease: \"easeInOut\"\n                        }}\n                      >\n                        <RotateCcw className=\"w-5 h-5\" />\n                      </motion.div>\n                      <span>Reset</span>\n                    </Button>\n                  </motion.div>\n\n                  <motion.div\n                    whileHover={{ scale: 1.02 }}\n                    whileTap={{ scale: 0.98 }}\n                  >\n                    <Button\n                      onClick={generateRandomArray}\n                      variant=\"outline\"\n                      className=\"w-full border-2 border-cyan-500/50 bg-gray-900/50 hover:bg-cyan-500/20 text-cyan-400 font-semibold py-6 rounded-xl transition-all duration-300\"\n                      style={{\n                        boxShadow: '0 0 20px rgba(6, 182, 212, 0.3)'\n                      }}\n                    >\n                      <motion.div\n                        className=\"flex items-center justify-center gap-2\"\n                        whileHover={{\n                          rotate: [0, -10, 10, -10, 10, 0],\n                        }}\n                        transition={{\n                          duration: 0.5,\n                        }}\n                      >\n                        <Zap className=\"w-5 h-5\" />\n                      </motion.div>\n                      <span>Generate New</span>\n                    </Button>\n                  </motion.div>\n                </div>\n              </div>\n            </div>\n\n            {/* TODO:StatsPanel Real-time statistics panel showing comparisons, swaps, and progress */}\n          </div>\n\n            <motion.div\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ delay: 0.2 }}\n              className=\"bg-gray-800/50 backdrop-blur-lg rounded-2xl p-6 border border-purple-500/30 shadow-lg shadow-purple-500/20\"\n            >\n              <div className=\"flex items-center gap-2 mb-4\">\n                <BarChart3 className=\"w-5 h-5 text-purple-400\" />\n                <h3 className=\"text-purple-400 font-semibold text-lg\">Statistics</h3>\n              </div>\n              \n              <div className=\"grid grid-cols-3 gap-4\">\n                <div className=\"bg-gradient-to-br from-cyan-500/10 to-cyan-500/5 rounded-xl p-4 border border-cyan-500/30 shadow-[0_0_15px_rgba(0,255,255,0.2)]\">\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <span className=\"text-xs text-cyan-300 font-medium uppercase tracking-wider\">Comparisons</span>\n                    <motion.div\n                      animate={{\n                        scale: steps[currentStep]?.comparingIndices.length > 0 ? [1, 1.2, 1] : 1,\n                        opacity: steps[currentStep]?.comparingIndices.length > 0 ? [1, 0.7, 1] : 1\n                      }}\n                      transition={{ duration: 0.3 }}\n                      className=\"w-2 h-2 rounded-full bg-cyan-400 shadow-[0_0_8px_rgba(0,255,255,0.8)]\"\n                    />\n                  </div>\n                  <motion.div\n                    key={steps.slice(0, currentStep).filter(s => s.comparingIndices.length > 0).length}\n                    initial={{ scale: 1.3, color: '#00ffff' }}\n                    animate={{ scale: 1, color: '#ffffff' }}\n                    className=\"text-3xl font-bold text-white font-mono\"\n                  >\n                    {steps.slice(0, currentStep).filter(s => s.comparingIndices.length > 0).length}\n                  </motion.div>\n                  <div className=\"mt-1 text-xs text-cyan-400/70\">\n                    Total comparisons made\n                  </div>\n                </div>\n\n                <div className=\"bg-gradient-to-br from-pink-500/10 to-pink-500/5 rounded-xl p-4 border border-pink-500/30 shadow-[0_0_15px_rgba(255,0,102,0.2)]\">\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <span className=\"text-xs text-pink-300 font-medium uppercase tracking-wider\">Swaps</span>\n                    <motion.div\n                      animate={{\n                        scale: steps[currentStep]?.swappingIndices.length > 0 ? [1, 1.2, 1] : 1,\n                        opacity: steps[currentStep]?.swappingIndices.length > 0 ? [1, 0.7, 1] : 1\n                      }}\n                      transition={{ duration: 0.3 }}\n                      className=\"w-2 h-2 rounded-full bg-pink-400 shadow-[0_0_8px_rgba(255,0,102,0.8)]\"\n                    />\n                  </div>\n                  <motion.div\n                    key={steps.slice(0, currentStep).filter(s => s.swappingIndices.length > 0).length}\n                    initial={{ scale: 1.3, color: '#ff0066' }}\n                    animate={{ scale: 1, color: '#ffffff' }}\n                    className=\"text-3xl font-bold text-white font-mono\"\n                  >\n                    {steps.slice(0, currentStep).filter(s => s.swappingIndices.length > 0).length}\n                  </motion.div>\n                  <div className=\"mt-1 text-xs text-pink-400/70\">\n                    Elements swapped\n                  </div>\n                </div>\n\n                <div className=\"bg-gradient-to-br from-purple-500/10 to-purple-500/5 rounded-xl p-4 border border-purple-500/30 shadow-[0_0_15px_rgba(168,85,247,0.2)]\">\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <span className=\"text-xs text-purple-300 font-medium uppercase tracking-wider\">Progress</span>\n                    <motion.div\n                      animate={{\n                        rotate: isPlaying ? 360 : 0\n                      }}\n                      transition={{ duration: 2, repeat: isPlaying ? Infinity : 0, ease: \"linear\" }}\n                      className=\"w-2 h-2 rounded-full bg-purple-400 shadow-[0_0_8px_rgba(168,85,247,0.8)]\"\n                    />\n                  </div>\n                  <motion.div\n                    key={steps.length > 0 ? Math.round((currentStep / steps.length) * 100) : 0}\n                    initial={{ scale: 1.3, color: '#a855f7' }}\n                    animate={{ scale: 1, color: '#ffffff' }}\n                    className=\"text-3xl font-bold text-white font-mono\"\n                  >\n                    {steps.length > 0 ? Math.round((currentStep / steps.length) * 100) : 0}%\n                  </motion.div>\n                  <div className=\"mt-1 h-1.5 bg-gray-700 rounded-full overflow-hidden\">\n                    <motion.div\n                      className=\"h-full bg-gradient-to-r from-purple-500 to-pink-500 shadow-[0_0_10px_rgba(168,85,247,0.6)]\"\n                      initial={{ width: 0 }}\n                      animate={{ \n                        width: steps.length > 0 ? `${(currentStep / steps.length) * 100}%` : '0%'\n                      }}\n                      transition={{ duration: 0.3 }}\n                    />\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"mt-4 pt-4 border-t border-purple-500/20\">\n                <div className=\"flex items-center justify-between text-sm\">\n                  <div className=\"flex items-center gap-2\">\n                    <div className=\"w-1.5 h-1.5 rounded-full bg-green-400 shadow-[0_0_6px_rgba(0,255,170,0.8)]\" />\n                    <span className=\"text-gray-400\">Step:</span>\n                    <span className=\"text-white font-mono font-semibold\">{currentStep}</span>\n                    <span className=\"text-gray-500\">/</span>\n                    <span className=\"text-gray-400 font-mono\">{steps.length}</span>\n                  </div>\n                  <div className=\"flex items-center gap-2\">\n                    <span className=\"text-gray-400\">Status:</span>\n                    <motion.span\n                      animate={{\n                        color: isPlaying ? '#00ffaa' : currentStep === steps.length && steps.length > 0 ? '#00ffff' : '#9ca3af'\n                      }}\n                      className=\"font-semibold\"\n                    >\n                      {isPlaying ? 'Running' : currentStep === steps.length && steps.length > 0 ? 'Complete' : 'Ready'}\n                    </motion.span>\n                  </div>\n                </div>\n              </div>\n            </motion.div>\n          <div className=\"lg:col-span-3\">\n            <div className=\"bg-gray-800/50 backdrop-blur-lg rounded-2xl p-8 border border-purple-500/30 shadow-lg shadow-purple-500/20 min-h-[600px]\">\n              {array.length === 0 ? (\n                <motion.div\n                  initial={{ opacity: 0, scale: 0.8 }}\n                  animate={{ opacity: 1, scale: 1 }}\n                  transition={{ duration: 0.5 }}\n                  className=\"flex flex-col items-center justify-center h-full space-y-6\"\n                >\n                  <motion.div\n                    animate={{\n                      rotate: [0, 360],\n                      scale: [1, 1.2, 1]\n                    }}\n                    transition={{\n                      duration: 3,\n                      repeat: Infinity,\n                      ease: \"easeInOut\"\n                    }}\n                  >\n                    <BarChart3 className=\"w-24 h-24 text-cyan-400/50\" />\n                  </motion.div>\n                  <div className=\"text-center space-y-2\">\n                    <h3 className=\"text-2xl font-semibold text-cyan-300\">No Array Generated</h3>\n                    <p className=\"text-gray-400\">Click \"Generate Array\" to start visualizing</p>\n                  </div>\n                  <Button\n                    onClick={generateRandomArray}\n                    className=\"bg-gradient-to-r from-cyan-500 to-purple-500 hover:from-cyan-400 hover:to-purple-400 text-white font-semibold px-8 py-6 text-lg rounded-xl shadow-lg shadow-cyan-500/50 hover:shadow-cyan-500/80 transition-all duration-300\"\n                  >\n                    <Zap className=\"w-5 h-5 mr-2\" />\n                    Generate Array\n                  </Button>\n                </motion.div>\n              ) : (\n                <div className=\"w-full h-full flex items-center justify-center\">\n                  <div className=\"w-full h-[500px] flex items-end justify-center gap-1 px-4\">\n                    {(currentStep > 0 && currentStep <= steps.length ? steps[currentStep - 1].array : array).map((element, index) => {\n                      const maxValue = 105;\n                      const heightPercentage = (element.value / maxValue) * 100;\n                      const barWidth = Math.max(8, Math.min(60, (100 / array.length) * 8));\n                      \n                      let barColor = NEON_COLORS[index % NEON_COLORS.length];\n                      let glowIntensity = 0.3;\n                      let scale = 1;\n                      \n                      if (element.isSorted) {\n                        barColor = '#00ff00';\n                        glowIntensity = 0.6;\n                      } else if (element.isSwapping) {\n                        barColor = '#ff0066';\n                        glowIntensity = 0.8;\n                        scale = 1.1;\n                      } else if (element.isComparing) {\n                        barColor = '#ffff00';\n                        glowIntensity = 0.7;\n                        scale = 1.05;\n                      }\n                      \n                      return (\n                        <motion.div\n                          key={element.id}\n                          className=\"relative flex flex-col items-center justify-end\"\n                          style={{ width: `${barWidth}px` }}\n                          initial={{ opacity: 0, y: 50 }}\n                          animate={{\n                            opacity: 1,\n                            y: 0,\n                            scale: scale\n                          }}\n                          transition={{\n                            duration: 0.3,\n                            scale: { duration: 0.2 }\n                          }}\n                        >\n                          <motion.div\n                            className=\"w-full rounded-t-lg relative overflow-hidden\"\n                            style={{\n                              height: `${heightPercentage}%`,\n                              backgroundColor: barColor,\n                              boxShadow: `\n                                0 0 ${20 * glowIntensity}px ${barColor},\n                                0 0 ${40 * glowIntensity}px ${barColor},\n                                inset 0 0 ${10 * glowIntensity}px rgba(255, 255, 255, 0.5)\n                              `\n                            }}\n                            animate={{\n                              height: `${heightPercentage}%`,\n                              backgroundColor: barColor,\n                              boxShadow: `\n                                0 0 ${20 * glowIntensity}px ${barColor},\n                                0 0 ${40 * glowIntensity}px ${barColor},\n                                inset 0 0 ${10 * glowIntensity}px rgba(255, 255, 255, 0.5)\n                              `\n                            }}\n                            transition={{\n                              duration: 0.3,\n                              ease: \"easeInOut\"\n                            }}\n                          >\n                            {/* Shimmer effect */}\n                            <motion.div\n                              className=\"absolute inset-0 bg-gradient-to-r from-transparent via-white to-transparent opacity-30\"\n                              animate={{\n                                x: ['-100%', '200%']\n                              }}\n                              transition={{\n                                duration: 2,\n                                repeat: Infinity,\n                                ease: \"linear\",\n                                repeatDelay: 1\n                              }}\n                            />\n                            \n                            {/* Trail effect for swapping */}\n                            {element.isSwapping && (\n                              <motion.div\n                                className=\"absolute inset-0\"\n                                initial={{ opacity: 0 }}\n                                animate={{\n                                  opacity: [0, 1, 0],\n                                  scale: [1, 1.2, 1]\n                                }}\n                                transition={{\n                                  duration: 0.5,\n                                  repeat: Infinity\n                                }}\n                                style={{\n                                  background: `radial-gradient(circle, ${barColor} 0%, transparent 70%)`,\n                                  filter: 'blur(10px)'\n                                }}\n                              />\n                            )}\n                          </motion.div>\n                          \n                          {/* Value label */}\n                          {array.length <= 50 && (\n                            <motion.div\n                              className=\"absolute -top-6 text-xs font-mono font-bold\"\n                              style={{\n                                color: barColor,\n                                textShadow: `0 0 10px ${barColor}`\n                              }}\n                              animate={{\n                                scale: element.isComparing || element.isSwapping ? [1, 1.2, 1] : 1\n                              }}\n                              transition={{\n                                duration: 0.3,\n                                repeat: element.isComparing || element.isSwapping ? Infinity : 0\n                              }}\n                            >\n                              {element.value}\n                            </motion.div>\n                          )}\n                          \n                          {/* Pulse ring for comparing */}\n                          {element.isComparing && (\n                            <motion.div\n                              className=\"absolute inset-0 rounded-t-lg border-2\"\n                              style={{\n                                borderColor: barColor\n                              }}\n                              animate={{\n                                scale: [1, 1.3, 1],\n                                opacity: [1, 0, 1]\n                              }}\n                              transition={{\n                                duration: 1,\n                                repeat: Infinity,\n                                ease: \"easeInOut\"\n                              }}\n                            />\n                          )}\n                        </motion.div>\n                      );\n                    })}\n                  </div>\n                </div>\n              )}</parameter>\n</invoke>\n              \n              <div className=\"h-full flex items-end justify-center gap-1\">\n                {(currentStep < steps.length && steps[currentStep]?.array || array).map((element, index) => {\n                  const displayArray = currentStep < steps.length && steps[currentStep]?.array ? steps[currentStep].array : array;\n                  const maxValue = Math.max(...displayArray.map(el => el.value), 1);\n                  const heightPercentage = (element.value / maxValue) * 100;\n                  const colorIndex = index % NEON_COLORS.length;\n                  const baseColor = NEON_COLORS[colorIndex];\n                  \n                  let barColor = baseColor;\n                  let glowIntensity = 0.3;\n                  let scale = 1;\n                  \n                  if (element.isSorted) {\n                    barColor = '#00ff00';\n                    glowIntensity = 0.6;\n                  } else if (element.isSwapping) {\n                    barColor = '#ff0066';\n                    glowIntensity = 0.8;\n                    scale = 1.1;\n                  } else if (element.isComparing) {\n                    barColor = '#ffff00';\n                    glowIntensity = 0.7;\n                    scale = 1.05;\n                  }\n                  \n                  return (\n                    <motion.div\n                      key={element.id}\n                      className=\"relative flex-1 min-w-[4px] max-w-[60px] rounded-t-lg\"\n                      style={{\n                        height: `${heightPercentage}%`,\n                        backgroundColor: barColor,\n                        boxShadow: `\n                          0 0 ${10 * glowIntensity}px ${barColor},\n                          0 0 ${20 * glowIntensity}px ${barColor},\n                          0 0 ${30 * glowIntensity}px ${barColor}\n                        `,\n                      }}\n                      initial={{ height: 0, opacity: 0 }}\n                      animate={{\n                        height: `${heightPercentage}%`,\n                        opacity: 1,\n                        scale: scale,\n                        boxShadow: `\n                          0 0 ${10 * glowIntensity}px ${barColor},\n                          0 0 ${20 * glowIntensity}px ${barColor},\n                          0 0 ${30 * glowIntensity}px ${barColor}\n                        `,\n                      }}\n                      transition={{\n                        height: { duration: 0.3, ease: 'easeOut' },\n                        scale: { duration: 0.2, ease: 'easeInOut' },\n                        backgroundColor: { duration: 0.2 },\n                        boxShadow: { duration: 0.2 },\n                      }}\n                    >\n                      {element.isSwapping && (\n                        <motion.div\n                          className=\"absolute inset-0 rounded-t-lg\"\n                          style={{\n                            backgroundColor: barColor,\n                            opacity: 0.5,\n                          }}\n                          initial={{ y: 0, opacity: 0.8 }}\n                          animate={{\n                            y: [-20, 0],\n                            opacity: [0.8, 0],\n                          }}\n                          transition={{\n                            duration: 0.5,\n                            ease: 'easeOut',\n                          }}\n                        />\n                      )}\n                      \n                      {arraySize[0] <= 30 && (\n                        <motion.div\n                          className=\"absolute -top-6 left-1/2 transform -translate-x-1/2 text-xs font-mono font-bold whitespace-nowrap\"\n                          style={{ color: barColor }}\n                          initial={{ opacity: 0, y: 10 }}\n                          animate={{ opacity: element.isComparing || element.isSwapping ? 1 : 0.6, y: 0 }}\n                          transition={{ duration: 0.2 }}\n                        >\n                          {element.value}\n                        </motion.div>\n                      )}\n                      \n                      {element.isComparing && (\n                        <motion.div\n                          className=\"absolute -top-2 left-1/2 transform -translate-x-1/2\"\n                          initial={{ scale: 0 }}\n                          animate={{ scale: [1, 1.3, 1] }}\n                          transition={{ duration: 0.5, repeat: Infinity }}\n                        >\n                          <div\n                            className=\"w-2 h-2 rounded-full\"\n                            style={{\n                              backgroundColor: barColor,\n                              boxShadow: `0 0 10px ${barColor}, 0 0 20px ${barColor}`,\n                            }}\n                          />\n                        </motion.div>\n                      )}\n                    </motion.div>\n                  );\n                })}</parameter>\n</invoke>\n              </div>\n            </div>\n\n            <motion.div\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ delay: 0.3, duration: 0.6 }}\n              className=\"mt-6 bg-gray-800/50 backdrop-blur-lg rounded-xl p-6 border border-purple-500/30 shadow-lg shadow-purple-500/20\"\n            >\n              <h3 className=\"text-purple-400 font-semibold mb-4 flex items-center gap-2\">\n                <BarChart3 className=\"w-5 h-5\" />\n                Legend\n              </h3>\n              <div className=\"grid grid-cols-2 gap-4\">\n                <motion.div\n                  className=\"flex items-center gap-3 p-3 rounded-lg bg-gray-700/30 border border-cyan-500/30\"\n                  whileHover={{ scale: 1.05, borderColor: 'rgba(0, 255, 255, 0.6)' }}\n                  transition={{ type: 'spring', stiffness: 300 }}\n                >\n                  <motion.div\n                    className=\"w-6 h-6 rounded bg-cyan-400 shadow-lg shadow-cyan-400/50\"\n                    animate={{\n                      boxShadow: [\n                        '0 0 10px rgba(0, 255, 255, 0.5)',\n                        '0 0 20px rgba(0, 255, 255, 0.8)',\n                        '0 0 10px rgba(0, 255, 255, 0.5)'\n                      ]\n                    }}\n                    transition={{ duration: 1.5, repeat: Infinity }}\n                  />\n                  <div>\n                    <div className=\"text-sm font-semibold text-cyan-300\">Comparing</div>\n                    <div className=\"text-xs text-gray-400\">Elements being compared</div>\n                  </div>\n                </motion.div>\n\n                <motion.div\n                  className=\"flex items-center gap-3 p-3 rounded-lg bg-gray-700/30 border border-pink-500/30\"\n                  whileHover={{ scale: 1.05, borderColor: 'rgba(255, 0, 102, 0.6)' }}\n                  transition={{ type: 'spring', stiffness: 300 }}\n                >\n                  <motion.div\n                    className=\"w-6 h-6 rounded bg-pink-500 shadow-lg shadow-pink-500/50\"\n                    animate={{\n                      boxShadow: [\n                        '0 0 10px rgba(255, 0, 102, 0.5)',\n                        '0 0 20px rgba(255, 0, 102, 0.8)',\n                        '0 0 10px rgba(255, 0, 102, 0.5)'\n                      ],\n                      scale: [1, 1.1, 1]\n                    }}\n                    transition={{ duration: 1.2, repeat: Infinity }}\n                  />\n                  <div>\n                    <div className=\"text-sm font-semibold text-pink-300\">Swapping</div>\n                    <div className=\"text-xs text-gray-400\">Elements being swapped</div>\n                  </div>\n                </motion.div>\n\n                <motion.div\n                  className=\"flex items-center gap-3 p-3 rounded-lg bg-gray-700/30 border border-green-500/30\"\n                  whileHover={{ scale: 1.05, borderColor: 'rgba(0, 255, 0, 0.6)' }}\n                  transition={{ type: 'spring', stiffness: 300 }}\n                >\n                  <motion.div\n                    className=\"w-6 h-6 rounded bg-green-400 shadow-lg shadow-green-400/50\"\n                    animate={{\n                      boxShadow: [\n                        '0 0 10px rgba(0, 255, 0, 0.5)',\n                        '0 0 20px rgba(0, 255, 0, 0.8)',\n                        '0 0 10px rgba(0, 255, 0, 0.5)'\n                      ]\n                    }}\n                    transition={{ duration: 2, repeat: Infinity }}\n                  />\n                  <div>\n                    <div className=\"text-sm font-semibold text-green-300\">Sorted</div>\n                    <div className=\"text-xs text-gray-400\">In final position</div>\n                  </div>\n                </motion.div>\n\n                <motion.div\n                  className=\"flex items-center gap-3 p-3 rounded-lg bg-gray-700/30 border border-purple-500/30\"\n                  whileHover={{ scale: 1.05, borderColor: 'rgba(168, 85, 247, 0.6)' }}\n                  transition={{ type: 'spring', stiffness: 300 }}\n                >\n                  <motion.div\n                    className=\"w-6 h-6 rounded bg-gradient-to-br from-purple-400 to-pink-400 shadow-lg shadow-purple-400/50\"\n                    animate={{\n                      boxShadow: [\n                        '0 0 10px rgba(168, 85, 247, 0.5)',\n                        '0 0 20px rgba(168, 85, 247, 0.8)',\n                        '0 0 10px rgba(168, 85, 247, 0.5)'\n                      ]\n                    }}\n                    transition={{ duration: 1.8, repeat: Infinity }}\n                  />\n                  <div>\n                    <div className=\"text-sm font-semibold text-purple-300\">Unsorted</div>\n                    <div className=\"text-xs text-gray-400\">Awaiting processing</div>\n                  </div>\n                </motion.div>\n              </div>\n            </motion.div>\n          </div>\n        </div>\n\n        <motion.div\n          initial={{ opacity: 0, y: 50 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ delay: 0.4, duration: 0.6 }}\n          className=\"bg-gray-800/50 backdrop-blur-lg rounded-2xl p-6 border border-purple-500/30 shadow-lg shadow-purple-500/20\"\n        >\n          <div className=\"space-y-4\">\n            <div className=\"flex items-center justify-between\">\n              <h3 className=\"text-purple-400 font-semibold flex items-center gap-2\">\n                <BarChart3 className=\"w-5 h-5\" />\n                Timeline Control\n              </h3>\n              <div className=\"flex items-center gap-3 text-sm\">\n                <span className=\"text-gray-400\">\n                  Step: <span className=\"text-cyan-400 font-mono font-bold\">{currentStep}</span> / <span className=\"text-purple-400 font-mono\">{steps.length}</span>\n                </span>\n                {steps.length > 0 && (\n                  <motion.span\n                    initial={{ scale: 0 }}\n                    animate={{ scale: 1 }}\n                    className=\"px-3 py-1 bg-gradient-to-r from-cyan-500/20 to-purple-500/20 rounded-full border border-cyan-400/30 text-cyan-300 font-semibold\"\n                  >\n                    {Math.round((currentStep / steps.length) * 100)}%\n                  </motion.span>\n                )}\n              </div>\n            </div>\n\n            {/* Timeline Scrubber */}\n            <div className=\"relative\">\n              <div className=\"relative h-3 bg-gray-700/50 rounded-full overflow-hidden border border-gray-600/30\">\n                {/* Progress Bar */}\n                <motion.div\n                  className=\"absolute inset-y-0 left-0 bg-gradient-to-r from-cyan-500 via-purple-500 to-pink-500 rounded-full\"\n                  initial={{ width: 0 }}\n                  animate={{\n                    width: steps.length > 0 ? `${(currentStep / steps.length) * 100}%` : '0%'\n                  }}\n                  transition={{ duration: 0.3, ease: 'easeOut' }}\n                >\n                  <motion.div\n                    className=\"absolute inset-0 bg-gradient-to-r from-transparent via-white/30 to-transparent\"\n                    animate={{\n                      x: ['-100%', '200%']\n                    }}\n                    transition={{\n                      duration: 2,\n                      repeat: Infinity,\n                      ease: 'linear'\n                    }}\n                  />\n                </motion.div>\n\n                {/* Glow Effect */}\n                {steps.length > 0 && currentStep > 0 && (\n                  <motion.div\n                    className=\"absolute inset-y-0 left-0 bg-gradient-to-r from-cyan-500/50 via-purple-500/50 to-pink-500/50 blur-md\"\n                    animate={{\n                      width: `${(currentStep / steps.length) * 100}%`\n                    }}\n                    transition={{ duration: 0.3 }}\n                  />\n                )}\n\n                {/* Step Markers */}\n                {steps.length > 0 && steps.length <= 50 && (\n                  <div className=\"absolute inset-0 flex items-center\">\n                    {steps.map((_, index) => (\n                      <div\n                        key={index}\n                        className=\"flex-1 flex justify-center\"\n                      >\n                        <motion.div\n                          className={`w-1 h-1 rounded-full transition-all duration-300 ${\n                            index < currentStep\n                              ? 'bg-cyan-300 shadow-[0_0_6px_rgba(0,255,255,0.8)]'\n                              : 'bg-gray-600'\n                          }`}\n                          initial={{ scale: 0 }}\n                          animate={{ scale: index === currentStep - 1 ? 1.5 : 1 }}\n                        />\n                      </div>\n                    ))}\n                  </div>\n                )}\n              </div>\n\n              {/* Interactive Slider */}\n              {steps.length > 0 && (\n                <div className=\"absolute inset-0 -mx-2\">\n                  <Slider\n                    value={[currentStep]}\n                    onValueChange={(value) => {\n                      setCurrentStep(value[0]);\n                      setIsPlaying(false);\n                    }}\n                    min={0}\n                    max={steps.length}\n                    step={1}\n                    className=\"cursor-pointer [&_[role=slider]]:bg-gradient-to-br [&_[role=slider]]:from-cyan-400 [&_[role=slider]]:to-purple-500 [&_[role=slider]]:border-2 [&_[role=slider]]:border-white [&_[role=slider]]:shadow-[0_0_20px_rgba(0,255,255,0.8)] [&_[role=slider]]:transition-all [&_[role=slider]]:hover:shadow-[0_0_30px_rgba(0,255,255,1)] [&_[role=slider]]:hover:scale-125 [&_[role=slider]]:w-5 [&_[role=slider]]:h-5 [&>.relative]:bg-transparent\"\n                  />\n                </div>\n              )}\n            </div>\n\n            {/* Step Navigation Buttons */}\n            <div className=\"flex items-center justify-between gap-3\">\n              <div className=\"flex gap-2\">\n                <Button\n                  onClick={() => {\n                    setCurrentStep(0);\n                    setIsPlaying(false);\n                  }}\n                  disabled={currentStep === 0 || steps.length === 0}\n                  size=\"sm\"\n                  className=\"bg-gray-700/50 hover:bg-gray-600/50 text-cyan-400 border border-cyan-500/30 hover:border-cyan-400/50 hover:shadow-[0_0_15px_rgba(0,255,255,0.4)] transition-all duration-300 disabled:opacity-30 disabled:cursor-not-allowed\"\n                >\n                  <RotateCcw className=\"w-4 h-4 mr-1\" />\n                  Start\n                </Button>\n                <Button\n                  onClick={() => {\n                    if (currentStep > 0) {\n                      setCurrentStep(prev => prev - 1);\n                      setIsPlaying(false);\n                    }\n                  }}\n                  disabled={currentStep === 0 || steps.length === 0}\n                  size=\"sm\"\n                  className=\"bg-gray-700/50 hover:bg-gray-600/50 text-purple-400 border border-purple-500/30 hover:border-purple-400/50 hover:shadow-[0_0_15px_rgba(168,85,247,0.4)] transition-all duration-300 disabled:opacity-30 disabled:cursor-not-allowed\"\n                >\n                  \u2190 Prev\n                </Button>\n                <Button\n                  onClick={() => {\n                    if (currentStep < steps.length) {\n                      setCurrentStep(prev => prev + 1);\n                      setIsPlaying(false);\n                    }\n                  }}\n                  disabled={currentStep >= steps.length || steps.length === 0}\n                  size=\"sm\"\n                  className=\"bg-gray-700/50 hover:bg-gray-600/50 text-purple-400 border border-purple-500/30 hover:border-purple-400/50 hover:shadow-[0_0_15px_rgba(168,85,247,0.4)] transition-all duration-300 disabled:opacity-30 disabled:cursor-not-allowed\"\n                >\n                  Next \u2192\n                </Button>\n              </div>\n\n              <Button\n                onClick={() => {\n                  setCurrentStep(steps.length);\n                  setIsPlaying(false);\n                }}\n                disabled={currentStep >= steps.length || steps.length === 0}\n                size=\"sm\"\n                className=\"bg-gradient-to-r from-cyan-500/20 to-purple-500/20 hover:from-cyan-500/30 hover:to-purple-500/30 text-cyan-300 border border-cyan-400/30 hover:border-cyan-400/50 hover:shadow-[0_0_15px_rgba(0,255,255,0.4)] transition-all duration-300 disabled:opacity-30 disabled:cursor-not-allowed\"\n              >\n                Skip to End\n              </Button>\n            </div>\n\n            {/* Current Step Info */}\n            {steps.length > 0 && currentStep > 0 && currentStep <= steps.length && (\n              <motion.div\n                initial={{ opacity: 0, height: 0 }}\n                animate={{ opacity: 1, height: 'auto' }}\n                className=\"pt-4 border-t border-gray-700/50\"\n              >\n                <div className=\"flex items-center justify-between text-sm\">\n                  <div className=\"flex items-center gap-4\">\n                    {steps[currentStep - 1]?.comparingIndices.length > 0 && (\n                      <motion.div\n                        initial={{ scale: 0 }}\n                        animate={{ scale: 1 }}\n                        className=\"flex items-center gap-2 px-3 py-1.5 bg-yellow-500/20 rounded-lg border border-yellow-400/30\"\n                      >\n                        <div className=\"w-2 h-2 rounded-full bg-yellow-400 animate-pulse\" />\n                        <span className=\"text-yellow-300 font-medium\">Comparing</span>\n                      </motion.div>\n                    )}\n                    {steps[currentStep - 1]?.swappingIndices.length > 0 && (\n                      <motion.div\n                        initial={{ scale: 0 }}\n                        animate={{ scale: 1 }}\n                        className=\"flex items-center gap-2 px-3 py-1.5 bg-pink-500/20 rounded-lg border border-pink-400/30\"\n                      >\n                        <div className=\"w-2 h-2 rounded-full bg-pink-400 animate-pulse\" />\n                        <span className=\"text-pink-300 font-medium\">Swapping</span>\n                      </motion.div>\n                    )}\n                    {steps[currentStep - 1]?.sortedIndices.length > 0 && (\n                      <motion.div\n                        initial={{ scale: 0 }}\n                        animate={{ scale: 1 }}\n                        className=\"flex items-center gap-2 px-3 py-1.5 bg-green-500/20 rounded-lg border border-green-400/30\"\n                      >\n                        <div className=\"w-2 h-2 rounded-full bg-green-400\" />\n                        <span className=\"text-green-300 font-medium\">\n                          Sorted: {steps[currentStep - 1].sortedIndices.length}\n                        </span>\n                      </motion.div>\n                    )}\n                  </div>\n                </div>\n              </motion.div>\n            )}\n          </div>\n        </motion.div>\n      </div>\n    </div>\n  );\n}",
    "error": null,
    "elapsed_time": 89.37487173080444,
    "success": true
  }
}