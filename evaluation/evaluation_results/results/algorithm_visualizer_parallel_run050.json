{
  "prompt_id": "algorithm_visualizer",
  "prompt_name": "Algorithm Visualizer",
  "mode": "parallel",
  "run_number": 50,
  "timestamp": "2025-10-13T18:19:47.824868",
  "response_time": 89.37697792053223,
  "total_tokens": null,
  "response_content": "import { useState, useCallback } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Slider } from '@/components/ui/slider';\nimport { Play, Pause, RotateCcw, Zap, BarChart3 } from 'lucide-react';\nimport { Activity, TrendingUp, Shuffle } from 'lucide-react';\nimport { motion } from 'framer-motion';\nimport { useEffect, useRef } from 'react';\n\ninterface ArrayElement {\n  value: number;\n  id: string;\n  isComparing?: boolean;\n  isSwapping?: boolean;\n  isSorted?: boolean;\n}\n\ninterface AlgorithmStep {\n  array: ArrayElement[];\n  comparingIndices: number[];\n  swappingIndices: number[];\n  sortedIndices: number[];\n}\n\ntype AlgorithmType = 'bubble' | 'quick' | 'merge' | 'insertion';\n\nconst NEON_COLORS = [\n  '#00ffff',\n  '#ff00ff', \n  '#00ff00',\n  '#ffff00',\n  '#ff0066',\n  '#00ffaa'\n];\n\nconst mockAlgorithms = [\n  { id: 'bubble', name: 'Bubble Sort', complexity: 'O(n\u00b2)' },\n  { id: 'quick', name: 'Quick Sort', complexity: 'O(n log n)' },\n  { id: 'merge', name: 'Merge Sort', complexity: 'O(n log n)' },\n  { id: 'insertion', name: 'Insertion Sort', complexity: 'O(n\u00b2)' }\n];\n\nexport default function AlgorithmVisualizer() {\n  const [array, setArray] = useState<ArrayElement[]>([]);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [speed, setSpeed] = useState([50]);\n  const [arraySize, setArraySize] = useState([20]);\n  const [selectedAlgorithm, setSelectedAlgorithm] = useState<AlgorithmType>('bubble');\n  const [currentStep, setCurrentStep] = useState(0);\n  const [steps, setSteps] = useState<AlgorithmStep[]>([]);\n  const [comparisons, setComparisons] = useState(0);\n  const [swaps, setSwaps] = useState(0);\n\n  const generateRandomArray = useCallback(() => {\n    const newArray: ArrayElement[] = Array.from({ length: arraySize[0] }, (_, index) => ({\n      value: Math.floor(Math.random() * 100) + 5,\n      id: `element-${index}-${Date.now()}`,\n      isComparing: false,\n      isSwapping: false,\n      isSorted: false\n    }));\n    setArray(newArray);\n    setSteps([]);\n    setCurrentStep(0);\n    setIsPlaying(false);\n  }, [arraySize]);\n\n  // Update statistics when step changes\n  const updateStats = useCallback(() => {\n    if (steps.length === 0 || currentStep >= steps.length) return;\n    \n    const step = steps[currentStep];\n    let compCount = 0;\n    let swapCount = 0;\n    \n    for (let i = 0; i <= currentStep; i++) {\n      if (steps[i].comparingIndices.length > 0) compCount++;\n      if (steps[i].swappingIndices.length > 0) swapCount++;\n    }\n    \n    setComparisons(compCount);\n    setSwaps(swapCount);\n  }, [steps, currentStep]);\n\n  // Reset stats when generating new array or algorithm changes\n  const resetStats = useCallback(() => {\n    setComparisons(0);\n    setSwaps(0);\n  }, []);\n\n</parameter>\n</invoke>  const resetVisualization = useCallback(() => {\n\n    setIsPlaying(false);\n    setCurrentStep(0);\n    setSteps([]);\n    generateRandomArray();\n  }, [generateRandomArray]);\n\n  // Animation control using useEffect\n  useEffect(() => {\n    if (!isPlaying || currentStep >= steps.length) {\n      if (currentStep >= steps.length && steps.length > 0) {\n        setIsPlaying(false);\n      }\n      return;\n    }\n\n    const delay = 1000 - speed[0] * 9.5; // Convert speed (0-100) to delay (1000ms-50ms)\n    const timer = setTimeout(() => {\n      setCurrentStep(prev => prev + 1);\n    }, delay);\n\n    return () => clearTimeout(timer);\n  }, [isPlaying, currentStep, steps.length, speed]);\n\n  // Update array visualization based on current step\n  useEffect(() => {\n    if (steps.length > 0 && currentStep < steps.length) {\n      const step = steps[currentStep];\n      setArray(step.array.map((el, idx) => ({\n        ...el,\n        isComparing: step.comparingIndices.includes(idx),\n        isSwapping: step.swappingIndices.includes(idx),\n        isSorted: step.sortedIndices.includes(idx)\n      })));\n    }\n  }, [currentStep, steps]);\n  const startVisualization = useCallback(() => {\n    if (steps.length === 0) return;\n    setIsPlaying(true);\n    if (currentStep >= steps.length) {\n      setCurrentStep(0);\n    }\n  \n  }, [steps, speed, currentStep]);\n\n  const pauseVisualization = useCallback(() => {\n\n    /* TODO:PauseAnimation Set isPlaying false, preserve current step */\n  }, []);\n\n  const generateSortingSteps = useCallback((algorithm: AlgorithmType) => {\n        if (array.length === 0) return;\n\n    const steps: AlgorithmStep[] = [];\n    const arr = array.map(el => ({ ...el }));\n\n    const addStep = (\n      currentArray: ArrayElement[],\n      comparing: number[] = [],\n      swapping: number[] = [],\n      sorted: number[] = []\n    ) => {\n      steps.push({\n        array: currentArray.map(el => ({ ...el })),\n        comparingIndices: [...comparing],\n        swappingIndices: [...swapping],\n        sortedIndices: [...sorted]\n      });\n    };\n\n    // Initial state\n    addStep(arr);\n\n    switch (algorithm) {\n      case 'bubble': {\n        const sortedIndices: number[] = [];\n        for (let i = 0; i < arr.length - 1; i++) {\n          for (let j = 0; j < arr.length - i - 1; j++) {\n            // Comparing\n            addStep(arr, [j, j + 1], [], sortedIndices);\n            \n            if (arr[j].value > arr[j + 1].value) {\n              // Swapping\n              addStep(arr, [], [j, j + 1], sortedIndices);\n              [arr[j], arr[j + 1]] = [arr[j + 1], arr[j]];\n              addStep(arr, [], [], sortedIndices);\n            }\n          }\n          sortedIndices.push(arr.length - i - 1);\n          addStep(arr, [], [], sortedIndices);\n        }\n        sortedIndices.push(0);\n        addStep(arr, [], [], sortedIndices);\n        break;\n      }\n\n      case 'insertion': {\n        const sortedIndices: number[] = [0];\n        addStep(arr, [], [], sortedIndices);\n        \n        for (let i = 1; i < arr.length; i++) {\n          const key = arr[i];\n          let j = i - 1;\n          \n          addStep(arr, [i], [], sortedIndices);\n          \n          while (j >= 0 && arr[j].value > key.value) {\n            addStep(arr, [j, j + 1], [], sortedIndices);\n            addStep(arr, [], [j, j + 1], sortedIndices);\n            arr[j + 1] = arr[j];\n            addStep(arr, [], [], sortedIndices);\n            j--;\n          }\n          \n          arr[j + 1] = key;\n          sortedIndices.push(i);\n          addStep(arr, [], [], sortedIndices);\n        }\n        break;\n      }\n\n      case 'quick': {\n        const sortedIndices: number[] = [];\n        \n        const partition = (low: number, high: number): number => {\n          const pivot = arr[high].value;\n          let i = low - 1;\n          \n          addStep(arr, [high], [], sortedIndices);\n          \n          for (let j = low; j < high; j++) {\n            addStep(arr, [j, high], [], sortedIndices);\n            \n            if (arr[j].value < pivot) {\n              i++;\n              addStep(arr, [], [i, j], sortedIndices);\n              [arr[i], arr[j]] = [arr[j], arr[i]];\n              addStep(arr, [], [], sortedIndices);\n            }\n          }\n          \n          addStep(arr, [], [i + 1, high], sortedIndices);\n          [arr[i + 1], arr[high]] = [arr[high], arr[i + 1]];\n          sortedIndices.push(i + 1);\n          addStep(arr, [], [], sortedIndices);\n          \n          return i + 1;\n        };\n        \n        const quickSort = (low: number, high: number) => {\n          if (low < high) {\n            const pi = partition(low, high);\n            quickSort(low, pi - 1);\n            quickSort(pi + 1, high);\n          } else if (low === high) {\n            sortedIndices.push(low);\n            addStep(arr, [], [], sortedIndices);\n          }\n        };\n        \n        quickSort(0, arr.length - 1);\n        break;\n      }\n\n      case 'merge': {\n        const sortedIndices: number[] = [];\n        \n        const merge = (left: number, mid: number, right: number) => {\n          const leftArr = arr.slice(left, mid + 1);\n          const rightArr = arr.slice(mid + 1, right + 1);\n          \n          let i = 0, j = 0, k = left;\n          \n          while (i < leftArr.length && j < rightArr.length) {\n            addStep(arr, [left + i, mid + 1 + j], [], sortedIndices);\n            \n            if (leftArr[i].value <= rightArr[j].value) {\n              addStep(arr, [], [k], sortedIndices);\n              arr[k] = leftArr[i];\n              i++;\n            } else {\n              addStep(arr, [], [k], sortedIndices);\n              arr[k] = rightArr[j];\n              j++;\n            }\n            k++;\n            addStep(arr, [], [], sortedIndices);\n          }\n          \n          while (i < leftArr.length) {\n            addStep(arr, [], [k], sortedIndices);\n            arr[k] = leftArr[i];\n            i++;\n            k++;\n            addStep(arr, [], [], sortedIndices);\n          }\n          \n          while (j < rightArr.length) {\n            addStep(arr, [], [k], sortedIndices);\n            arr[k] = rightArr[j];\n            j++;\n            k++;\n            addStep(arr, [], [], sortedIndices);\n          }\n          \n          if (right - left + 1 === arr.length) {\n            for (let idx = 0; idx < arr.length; idx++) {\n              sortedIndices.push(idx);\n            }\n          }\n          addStep(arr, [], [], sortedIndices);\n        };\n        \n        const mergeSort = (left: number, right: number) => {\n          if (left < right) {\n            const mid = Math.floor((left + right) / 2);\n            mergeSort(left, mid);\n            mergeSort(mid + 1, right);\n            merge(left, mid, right);\n          }\n        };\n        \n        mergeSort(0, arr.length - 1);\n        break;\n      }\n    }\n\n    setSteps(steps);\n    setCurrentStep(0);\n  }, [array]);\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-gray-900 via-purple-900 to-gray-900 p-8\">\n      <div className=\"max-w-7xl mx-auto space-y-8\">\n        <motion.div\n          initial={{ opacity: 0, y: -20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.8 }}\n          className=\"text-center space-y-4\"\n        >\n          <motion.h1\n            className=\"text-6xl font-bold bg-gradient-to-r from-cyan-400 via-purple-400 to-pink-400 bg-clip-text text-transparent\"\n            animate={{\n              textShadow: [\n                '0 0 20px rgba(0, 255, 255, 0.5)',\n                '0 0 40px rgba(255, 0, 255, 0.5)',\n                '0 0 20px rgba(0, 255, 255, 0.5)'\n              ]\n            }}\n            transition={{ duration: 2, repeat: Infinity }}\n          >\n            Algorithm Visualizer\n          </motion.h1>\n          \n          <div className=\"flex items-center justify-center gap-4\">\n            <motion.div\n              initial={{ scale: 0 }}\n              animate={{ scale: 1 }}\n              transition={{ delay: 0.3, type: 'spring' }}\n              className=\"px-6 py-2 bg-purple-500/20 border border-purple-400/50 rounded-full backdrop-blur-sm\"\n            >\n              <span className=\"text-2xl font-semibold text-purple-300\">\n                {mockAlgorithms.find(a => a.id === selectedAlgorithm)?.name || 'Bubble Sort'}\n              </span>\n            </motion.div>\n            \n            <motion.div\n              initial={{ scale: 0 }}\n              animate={{ scale: 1 }}\n              transition={{ delay: 0.5, type: 'spring' }}\n              className=\"px-4 py-2 bg-cyan-500/20 border border-cyan-400/50 rounded-full backdrop-blur-sm relative overflow-hidden\"\n            >\n              <motion.div\n                className=\"absolute inset-0 bg-gradient-to-r from-transparent via-cyan-400/20 to-transparent\"\n                animate={{ x: ['-100%', '200%'] }}\n                transition={{ duration: 2, repeat: Infinity, ease: 'linear' }}\n              />\n              <span className=\"text-lg font-mono text-cyan-300 relative z-10 flex items-center gap-2\">\n                <BarChart3 className=\"w-4 h-4\" />\n                {mockAlgorithms.find(a => a.id === selectedAlgorithm)?.complexity || 'O(n\u00b2)'}\n              </span>\n            </motion.div>\n          </div>\n        </motion.div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-6\">\n          <div className=\"lg:col-span-1 space-y-6\">\n            <motion.div\n              initial={{ opacity: 0, x: -50 }}\n              animate={{ opacity: 1, x: 0 }}\n              className=\"bg-gray-900/50 backdrop-blur-lg border border-cyan-500/30 rounded-xl p-6 shadow-[0_0_30px_rgba(0,255,255,0.3)]\"\n            >\n              <div className=\"space-y-6\">\n                {/* Algorithm Selection */}\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center gap-2 text-cyan-400\">\n                    <Zap className=\"w-4 h-4\" />\n                    <h3 className=\"text-sm font-semibold uppercase tracking-wider\">Algorithm</h3>\n                  </div>\n                  <div className=\"grid grid-cols-1 gap-2\">\n                    {mockAlgorithms.map((algo) => (\n                      <button\n                        key={algo.id}\n                        onClick={() => setSelectedAlgorithm(algo.id as AlgorithmType)}\n                        disabled={isPlaying}\n                        className={`\n                          relative px-4 py-3 rounded-lg text-left transition-all duration-300\n                          ${selectedAlgorithm === algo.id\n                            ? 'bg-cyan-500/20 border border-cyan-400 shadow-[0_0_20px_rgba(0,255,255,0.4)]'\n                            : 'bg-gray-800/50 border border-gray-700 hover:border-cyan-500/50'\n                          }\n                          disabled:opacity-50 disabled:cursor-not-allowed\n                        `}\n                      >\n                        <div className=\"text-sm font-medium text-white\">{algo.name}</div>\n                        <div className=\"text-xs text-gray-400 mt-1\">{algo.complexity}</div>\n                      </button>\n                    ))}\n                  </div>\n                </div>\n\n                {/* Speed Control */}\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center gap-2 text-purple-400\">\n                      <BarChart3 className=\"w-4 h-4\" />\n                      <h3 className=\"text-sm font-semibold uppercase tracking-wider\">Speed</h3>\n                    </div>\n                    <span className=\"text-xs text-gray-400\">{speed[0]}%</span>\n                  </div>\n                  <Slider\n                    value={speed}\n                    onValueChange={setSpeed}\n                    min={10}\n                    max={100}\n                    step={10}\n                    disabled={isPlaying}\n                    className=\"cursor-pointer\"\n                  />\n                </div>\n\n                {/* Array Size Control */}\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center gap-2 text-pink-400\">\n                      <BarChart3 className=\"w-4 h-4\" />\n                      <h3 className=\"text-sm font-semibold uppercase tracking-wider\">Array Size</h3>\n                    </div>\n                    <span className=\"text-xs text-gray-400\">{arraySize[0]}</span>\n                  </div>\n                  <Slider\n                    value={arraySize}\n                    onValueChange={setArraySize}\n                    min={5}\n                    max={50}\n                    step={5}\n                    disabled={isPlaying}\n                    className=\"cursor-pointer\"\n                  />\n                </div>\n\n                {/* Control Buttons */}\n                <div className=\"space-y-2 pt-4 border-t border-gray-700\">\n                  <Button\n                    onClick={isPlaying ? pauseVisualization : startVisualization}\n                    disabled={steps.length === 0 || (currentStep >= steps.length && !isPlaying)}\n                    className=\"w-full bg-gradient-to-r from-cyan-500 to-blue-500 hover:from-cyan-600 hover:to-blue-600 text-white shadow-[0_0_20px_rgba(0,255,255,0.5)] transition-all duration-300\"\n                  >\n                    {isPlaying ? (\n                      <>\n                        <Pause className=\"w-4 h-4 mr-2\" />\n                        Pause\n                      </>\n                    ) : (\n                      <>\n                        <Play className=\"w-4 h-4 mr-2\" />\n                        {currentStep >= steps.length ? 'Start' : 'Resume'}\n                      </>\n                    )}\n                  </Button>\n                  <Button\n                    onClick={resetVisualization}\n                    variant=\"outline\"\n                    className=\"w-full border-purple-500/50 text-purple-400 hover:bg-purple-500/20 hover:border-purple-400 shadow-[0_0_15px_rgba(168,85,247,0.3)]\"\n                  >\n                    <RotateCcw className=\"w-4 h-4 mr-2\" />\n                    Reset\n                  </Button>\n                  <Button\n                    onClick={() => {\n                      generateSortingSteps(selectedAlgorithm);\n                      setCurrentStep(0);\n                    }}\n                    disabled={isPlaying || array.length === 0}\n                    variant=\"outline\"\n                    className=\"w-full border-pink-500/50 text-pink-400 hover:bg-pink-500/20 hover:border-pink-400 shadow-[0_0_15px_rgba(255,0,102,0.3)]\"\n                  >\n                    <Zap className=\"w-4 h-4 mr-2\" />\n                    Generate Steps\n                  </Button>\n                </div>\n              </div>\n            </motion.div>\n            \n            <div className=\"bg-gray-900/50 backdrop-blur-lg border border-cyan-500/30 rounded-xl p-6 shadow-2xl shadow-cyan-500/20\">\n              <div className=\"space-y-6\">\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center gap-2 text-cyan-400\">\n                    <Zap className=\"w-4 h-4\" />\n                    <h3 className=\"font-semibold\">Algorithm</h3>\n                  </div>\n                  <div className=\"grid grid-cols-1 gap-2\">\n                    {mockAlgorithms.map((algo) => (\n                      <motion.button\n                        key={algo.id}\n                        onClick={() => setSelectedAlgorithm(algo.id as AlgorithmType)}\n                        className={`relative p-3 rounded-lg border transition-all duration-300 text-left ${\n                          selectedAlgorithm === algo.id\n                            ? 'bg-cyan-500/20 border-cyan-400 shadow-lg shadow-cyan-500/50'\n                            : 'bg-gray-800/50 border-gray-700 hover:border-cyan-500/50 hover:shadow-md hover:shadow-cyan-500/30'\n                        }`}\n                        whileHover={{ scale: 1.02 }}\n                        whileTap={{ scale: 0.98 }}\n                      >\n                        <div className=\"flex flex-col gap-1\">\n                          <span className={`font-medium text-sm ${\n                            selectedAlgorithm === algo.id ? 'text-cyan-300' : 'text-gray-300'\n                          }`}>\n                            {algo.name}\n                          </span>\n                          <span className={`text-xs ${\n                            selectedAlgorithm === algo.id ? 'text-cyan-400/80' : 'text-gray-500'\n                          }`}>\n                            {algo.complexity}\n                          </span>\n                        </div>\n                        {selectedAlgorithm === algo.id && (\n                          <motion.div\n                            className=\"absolute inset-0 rounded-lg border-2 border-cyan-400\"\n                            layoutId=\"algorithmSelector\"\n                            transition={{ type: \"spring\", stiffness: 300, damping: 30 }}\n                          />\n                        )}\n                      </motion.button>\n                    ))}\n                  </div>\n                </div>\n\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <label className=\"text-cyan-400 text-sm font-medium flex items-center gap-2\">\n                      <Zap className=\"w-4 h-4\" />\n                      Speed\n                    </label>\n                    <span className=\"text-cyan-300 text-xs\">{speed[0]}ms</span>\n                  </div>\n                  <Slider\n                    value={speed}\n                    onValueChange={setSpeed}\n                    min={10}\n                    max={200}\n                    step={10}\n                    className=\"[&_[role=slider]]:h-4 [&_[role=slider]]:w-4 [&_[role=slider]]:bg-cyan-400 [&_[role=slider]]:border-2 [&_[role=slider]]:border-cyan-300 [&_[role=slider]]:shadow-[0_0_15px_rgba(34,211,238,0.8)] [&_[role=slider]]:transition-all [&_[role=slider]]:hover:shadow-[0_0_25px_rgba(34,211,238,1)] [&_.relative]:h-2 [&_.relative]:bg-gray-800 [&_.relative]:rounded-full [&_.relative]:border [&_.relative]:border-cyan-500/30 [&_.relative_.bg-primary]:bg-gradient-to-r [&_.relative_.bg-primary]:from-cyan-500 [&_.relative_.bg-primary]:to-purple-500 [&_.relative_.bg-primary]:shadow-[0_0_10px_rgba(34,211,238,0.5)]\"\n                  /></parameter>\n                </div>\n\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <label className=\"text-cyan-400 text-sm font-medium flex items-center gap-2\">\n                      <BarChart3 className=\"w-4 h-4\" />\n                      Array Size\n                    </label>\n                    <span className=\"text-cyan-300 text-xs\">{arraySize[0]}</span>\n                  </div>\n                  <Slider\n                    value={arraySize}\n                    onValueChange={setArraySize}\n                    min={5}\n                    max={50}\n                    step={1}\n                    disabled={isPlaying}\n                    className=\"[&_[role=slider]]:bg-gradient-to-r [&_[role=slider]]:from-purple-500 [&_[role=slider]]:to-pink-500 [&_[role=slider]]:border-0 [&_[role=slider]]:shadow-lg [&_[role=slider]]:shadow-purple-500/50 [&_[role=slider]]:transition-all [&_[role=slider]]:hover:shadow-purple-500/80 [&_[role=slider]]:hover:scale-110 [&>span]:bg-gradient-to-r [&>span]:from-purple-500/30 [&>span]:to-pink-500/30 [&>span]:h-2\"\n                  />\n                </div>\n\n                <div className=\"flex gap-3 pt-4\">\n                  <motion.button\n                    onClick={isPlaying ? pauseVisualization : startVisualization}\n                    disabled={array.length === 0 || (steps.length === 0 && !isPlaying)}\n                    whileHover={{ scale: 1.05 }}\n                    whileTap={{ scale: 0.95 }}\n                    className={`\n                      relative flex-1 px-6 py-3 rounded-lg font-semibold\n                      transition-all duration-300 overflow-hidden\n                      ${isPlaying\n                        ? 'bg-gradient-to-r from-pink-500 to-purple-500 text-white shadow-[0_0_30px_rgba(236,72,153,0.6)]'\n                        : 'bg-gradient-to-r from-cyan-500 to-blue-500 text-white shadow-[0_0_30px_rgba(6,182,212,0.6)]'\n                      }\n                      disabled:opacity-50 disabled:cursor-not-allowed disabled:shadow-none\n                      border-2 ${isPlaying ? 'border-pink-400' : 'border-cyan-400'}\n                    `}\n                  >\n                    <motion.div\n                      className=\"absolute inset-0 bg-gradient-to-r from-transparent via-white/30 to-transparent\"\n                      animate={{\n                        x: ['-100%', '200%']\n                      }}\n                      transition={{\n                        duration: 2,\n                        repeat: Infinity,\n                        ease: 'linear'\n                      }}\n                    />\n                    <motion.div\n                      className=\"relative flex items-center justify-center gap-2\"\n                      animate={{\n                        textShadow: isPlaying\n                          ? [\n                              '0 0 10px rgba(236,72,153,0.8)',\n                              '0 0 20px rgba(236,72,153,0.8)',\n                              '0 0 10px rgba(236,72,153,0.8)'\n                            ]\n                          : [\n                              '0 0 10px rgba(6,182,212,0.8)',\n                              '0 0 20px rgba(6,182,212,0.8)',\n                              '0 0 10px rgba(6,182,212,0.8)'\n                            ]\n                      }}\n                      transition={{\n                        duration: 1.5,\n                        repeat: Infinity\n                      }}\n                    >\n                      <motion.div\n                        key={isPlaying ? 'pause' : 'play'}\n                        initial={{ rotate: -180, opacity: 0, scale: 0 }}\n                        animate={{ rotate: 0, opacity: 1, scale: 1 }}\n                        exit={{ rotate: 180, opacity: 0, scale: 0 }}\n                        transition={{ duration: 0.3, type: 'spring' }}\n                      >\n                        {isPlaying ? (\n                          <Pause className=\"w-5 h-5\" fill=\"currentColor\" />\n                        ) : (\n                          <Play className=\"w-5 h-5\" fill=\"currentColor\" />\n                        )}\n                      </motion.div>\n                      <span className=\"font-bold tracking-wide\">\n                        {isPlaying ? 'PAUSE' : 'PLAY'}\n                      </span>\n                    </motion.div>\n                  </motion.button>\n                  <motion.button\n                    onClick={resetVisualization}\n                    disabled={isPlaying}\n                    className=\"flex-1 relative group overflow-hidden px-6 py-3 bg-gradient-to-r from-pink-500/20 to-purple-500/20 border border-pink-400/50 rounded-lg disabled:opacity-50 disabled:cursor-not-allowed transition-all duration-300 hover:shadow-[0_0_30px_rgba(236,72,153,0.6)]\"\n                    whileHover={{ scale: 1.05 }}\n                    whileTap={{ scale: 0.95, rotate: 360 }}\n                    transition={{ \n                      rotate: { duration: 0.6, ease: \"easeInOut\" },\n                      scale: { duration: 0.2 }\n                    }}\n                  >\n                    <motion.div\n                      className=\"absolute inset-0 bg-gradient-to-r from-pink-500/0 via-pink-500/30 to-pink-500/0\"\n                      animate={{ x: ['-100%', '200%'] }}\n                      transition={{ duration: 2, repeat: Infinity, ease: 'linear' }}\n                    />\n                    <div className=\"relative z-10 flex items-center justify-center gap-2\">\n                      <motion.div\n                        animate={{ rotate: 0 }}\n                        whileHover={{ rotate: -180 }}\n                        transition={{ duration: 0.5 }}\n                      >\n                        <RotateCcw className=\"w-5 h-5 text-pink-300\" />\n                      </motion.div>\n                      <span className=\"font-semibold text-pink-300\">Reset</span>\n                    </div>\n                    <motion.div\n                      className=\"absolute inset-0 rounded-lg opacity-0 group-hover:opacity-100 transition-opacity duration-300\"\n                      style={{\n                        boxShadow: '0 0 20px rgba(236,72,153,0.5), inset 0 0 20px rgba(236,72,153,0.2)'\n                      }}\n                    />\n                  </motion.button>\n                </div>\n              </div>\n            </div>\n\n            {/* TODO:StatsPanel Real-time statistics panel showing comparisons, swaps, and progress */}\n          </div>\n\n          <div className=\"lg:col-span-3\">\n            <div className=\"bg-gray-900/50 backdrop-blur-lg border border-purple-500/30 rounded-xl p-8 shadow-2xl shadow-purple-500/20 min-h-[600px]\">\n                            {array.length === 0 ? (\n                <motion.div\n                  initial={{ opacity: 0, scale: 0.8 }}\n                  animate={{ opacity: 1, scale: 1 }}\n                  className=\"absolute inset-0 flex flex-col items-center justify-center gap-6\"\n                >\n                  <motion.div\n                    animate={{\n                      boxShadow: [\n                        '0 0 20px rgba(0, 255, 255, 0.3)',\n                        '0 0 40px rgba(255, 0, 255, 0.5)',\n                        '0 0 20px rgba(0, 255, 255, 0.3)'\n                      ]\n                    }}\n                    transition={{ duration: 2, repeat: Infinity }}\n                    className=\"p-8 rounded-full bg-gradient-to-br from-cyan-500/20 to-purple-500/20 border border-cyan-400/50\"\n                  >\n                    <BarChart3 className=\"w-16 h-16 text-cyan-400\" />\n                  </motion.div>\n                  <div className=\"text-center space-y-2\">\n                    <h3 className=\"text-2xl font-bold text-cyan-300\">Ready to Visualize</h3>\n                    <p className=\"text-gray-400\">Generate an array to begin</p>\n                  </div>\n                </motion.div>\n              ) : (\n                <div className=\"relative w-full h-full flex items-end justify-center gap-1 px-4\">\n                  {array.map((element, index) => {\n                    const currentStepData = steps[currentStep];\n                    const isComparing = currentStepData?.comparingIndices.includes(index);\n                    const isSwapping = currentStepData?.swappingIndices.includes(index);\n                    const isSorted = currentStepData?.sortedIndices.includes(index);\n                    \n                    const maxValue = Math.max(...array.map(el => el.value));\n                    const heightPercentage = (element.value / maxValue) * 100;\n                    \n                    let barColor = NEON_COLORS[index % NEON_COLORS.length];\n                    let glowColor = barColor;\n                    let glowIntensity = 0.3;\n                    \n                    if (isSorted) {\n                      barColor = '#00ff00';\n                      glowColor = '#00ff00';\n                      glowIntensity = 0.8;\n                    } else if (isSwapping) {\n                      barColor = '#ff0066';\n                      glowColor = '#ff0066';\n                      glowIntensity = 1;\n                    } else if (isComparing) {\n                      barColor = '#ffff00';\n                      glowColor = '#ffff00';\n                      glowIntensity = 0.7;\n                    }\n                    \n                    return (\n                      <motion.div\n                        key={element.id}\n                        className=\"relative flex-1 min-w-[4px] max-w-[60px]\"\n                        initial={{ height: 0, opacity: 0 }}\n                        animate={{\n                          height: `${heightPercentage}%`,\n                          opacity: 1,\n                          y: isSwapping ? [-10, 0] : 0,\n                          scale: isSwapping ? [1, 1.1, 1] : isComparing ? 1.05 : 1\n                        }}\n                        transition={{\n                          height: { duration: 0.3, ease: 'easeOut' },\n                          opacity: { duration: 0.3 },\n                          y: { duration: 0.4, ease: 'easeInOut' },\n                          scale: { duration: 0.2 }\n                        }}\n                      >\n                        {/* Swap trail effect */}\n                        {isSwapping && (\n                          <motion.div\n                            className=\"absolute inset-0 rounded-t-lg\"\n                            initial={{ opacity: 0 }}\n                            animate={{\n                              opacity: [0, 0.6, 0],\n                              scale: [1, 1.5, 2],\n                              boxShadow: [\n                                `0 0 0px ${glowColor}`,\n                                `0 0 30px ${glowColor}`,\n                                `0 0 60px ${glowColor}`\n                              ]\n                            }}\n                            transition={{ duration: 0.6, repeat: Infinity }}\n                            style={{\n                              background: `radial-gradient(circle, ${glowColor}40 0%, transparent 70%)`\n                            }}\n                          />\n                        )}\n                        \n                        {/* Main bar */}\n                        <motion.div\n                          className=\"absolute inset-0 rounded-t-lg\"\n                          animate={{\n                            background: `linear-gradient(to top, ${barColor}, ${barColor}dd)`,\n                            boxShadow: [\n                              `0 0 ${glowIntensity * 20}px ${glowColor}${Math.floor(glowIntensity * 255).toString(16).padStart(2, '0')}`,\n                              `0 0 ${glowIntensity * 30}px ${glowColor}${Math.floor(glowIntensity * 255).toString(16).padStart(2, '0')}`,\n                              `0 0 ${glowIntensity * 20}px ${glowColor}${Math.floor(glowIntensity * 255).toString(16).padStart(2, '0')}`\n                            ]\n                          }}\n                          transition={{\n                            background: { duration: 0.3 },\n                            boxShadow: { duration: 0.8, repeat: Infinity }\n                          }}\n                          style={{\n                            border: `1px solid ${barColor}`,\n                            position: 'relative',\n                            overflow: 'hidden'\n                          }}\n                        >\n                          {/* Shimmer effect */}\n                          <motion.div\n                            className=\"absolute inset-0\"\n                            animate={{\n                              background: [\n                                `linear-gradient(to top, transparent 0%, ${barColor}40 50%, transparent 100%)`,\n                                `linear-gradient(to top, transparent 50%, ${barColor}60 100%, transparent 150%)`\n                              ],\n                              y: ['-100%', '100%']\n                            }}\n                            transition={{\n                              duration: 2,\n                              repeat: Infinity,\n                              ease: 'linear'\n                            }}\n                          />\n                          \n                          {/* Sorted checkmark indicator */}\n                          {isSorted && (\n                            <motion.div\n                              initial={{ scale: 0, rotate: -180 }}\n                              animate={{ scale: 1, rotate: 0 }}\n                              className=\"absolute top-2 left-1/2 -translate-x-1/2 w-4 h-4 bg-green-400 rounded-full flex items-center justify-center\"\n                              style={{\n                                boxShadow: '0 0 10px #00ff00'\n                              }}\n                            >\n                              <div className=\"w-2 h-2 bg-gray-900 rounded-full\" />\n                            </motion.div>\n                          )}\n                        </motion.div>\n                        \n                        {/* Comparison indicator */}\n                        {isComparing && (\n                          <motion.div\n                            className=\"absolute -top-8 left-1/2 -translate-x-1/2\"\n                            initial={{ opacity: 0, y: 10 }}\n                            animate={{\n                              opacity: [0.5, 1, 0.5],\n                              y: [-5, -10, -5],\n                              scale: [1, 1.2, 1]\n                            }}\n                            transition={{ duration: 0.8, repeat: Infinity }}\n                          >\n                            <div\n                              className=\"w-3 h-3 rotate-45\"\n                              style={{\n                                background: glowColor,\n                                boxShadow: `0 0 15px ${glowColor}`\n                              }}\n                            />\n                          </motion.div>\n                        )}\n                        \n                        {/* Value label */}\n                        {arraySize[0] <= 20 && (\n                          <motion.div\n                            className=\"absolute -bottom-6 left-1/2 -translate-x-1/2 text-xs font-mono font-bold whitespace-nowrap\"\n                            animate={{\n                              color: barColor,\n                              textShadow: `0 0 10px ${glowColor}`\n                            }}\n                            transition={{ duration: 0.3 }}\n                          >\n                            {element.value}\n                          </motion.div>\n                        )}\n                      </motion.div>\n                    );\n                  })}\n                </div>\n              )}\n              \n              <div className=\"relative h-full flex items-end justify-center gap-1\">\n                {array.length === 0 ? (\n                  <motion.div\n                    initial={{ opacity: 0, scale: 0.8 }}\n                    animate={{ opacity: 1, scale: 1 }}\n                    className=\"absolute inset-0 flex flex-col items-center justify-center gap-4\"\n                  >\n                    <motion.div\n                      animate={{\n                        boxShadow: [\n                          '0 0 20px rgba(0, 255, 255, 0.3)',\n                          '0 0 40px rgba(255, 0, 255, 0.5)',\n                          '0 0 20px rgba(0, 255, 255, 0.3)'\n                        ]\n                      }}\n                      transition={{ duration: 2, repeat: Infinity }}\n                      className=\"p-8 rounded-full bg-gray-800/50 border border-cyan-500/30\"\n                    >\n                      <BarChart3 className=\"w-16 h-16 text-cyan-400\" />\n                    </motion.div>\n                    <p className=\"text-cyan-300 text-lg font-medium\">Generate an array to begin</p>\n                  </motion.div>\n                ) : (\n                  array.map((element, index) => {\n                    const isComparing = steps[currentStep]?.comparingIndices.includes(index);\n                    const isSwapping = steps[currentStep]?.swappingIndices.includes(index);\n                    const isSorted = steps[currentStep]?.sortedIndices.includes(index);\n                    \n                    const heightPercentage = (element.value / 105) * 100;\n                    const barColor = isSorted \n                      ? '#00ff00' \n                      : isSwapping \n                      ? '#ff0066' \n                      : isComparing \n                      ? '#ffff00' \n                      : NEON_COLORS[index % NEON_COLORS.length];\n\n                    return (\n                      <motion.div\n                        key={element.id}\n                        layout\n                        initial={{ opacity: 0, height: 0 }}\n                        animate={{\n                          opacity: 1,\n                          height: `${heightPercentage}%`,\n                          scale: isComparing || isSwapping ? 1.05 : 1,\n                          y: isSwapping ? -10 : 0\n                        }}\n                        transition={{\n                          layout: { type: 'spring', stiffness: 300, damping: 30 },\n                          height: { duration: 0.3, ease: 'easeOut' },\n                          scale: { duration: 0.2 },\n                          y: { duration: 0.3, type: 'spring' }\n                        }}\n                        className=\"relative flex-1 min-w-[8px] max-w-[60px] rounded-t-lg\"\n                        style={{\n                          backgroundColor: barColor,\n                          boxShadow: `\n                            0 0 ${isSwapping ? '30px' : isComparing ? '25px' : '15px'} ${barColor}80,\n                            0 0 ${isSwapping ? '60px' : isComparing ? '50px' : '30px'} ${barColor}40,\n                            inset 0 0 20px ${barColor}40\n                          `,\n                          border: `1px solid ${barColor}`,\n                          filter: isSorted ? 'brightness(1.3)' : 'brightness(1)'\n                        }}\n                      >\n                        {/* Glow overlay */}\n                        <motion.div\n                          className=\"absolute inset-0 rounded-t-lg\"\n                          animate={{\n                            background: [\n                              `linear-gradient(to top, transparent, ${barColor}40)`,\n                              `linear-gradient(to top, transparent, ${barColor}60)`,\n                              `linear-gradient(to top, transparent, ${barColor}40)`\n                            ]\n                          }}\n                          transition={{ duration: 1.5, repeat: Infinity }}\n                        />\n\n                        {/* Shimmer effect */}\n                        {(isComparing || isSwapping) && (\n                          <motion.div\n                            className=\"absolute inset-0 rounded-t-lg overflow-hidden\"\n                            initial={{ opacity: 0 }}\n                            animate={{ opacity: 1 }}\n                          >\n                            <motion.div\n                              className=\"absolute inset-0 bg-gradient-to-b from-transparent via-white to-transparent opacity-30\"\n                              animate={{\n                                y: ['-100%', '200%']\n                              }}\n                              transition={{\n                                duration: 0.8,\n                                repeat: Infinity,\n                                ease: 'linear'\n                              }}\n                            />\n                          </motion.div>\n                        )}\n\n                        {/* Swap trail effect */}\n                        {isSwapping && (\n                          <>\n                            <motion.div\n                              className=\"absolute -top-2 left-1/2 -translate-x-1/2 w-2 h-2 rounded-full\"\n                              style={{ backgroundColor: barColor }}\n                              animate={{\n                                scale: [1, 1.5, 1],\n                                opacity: [1, 0.5, 1]\n                              }}\n                              transition={{ duration: 0.5, repeat: Infinity }}\n                            />\n                            <motion.div\n                              className=\"absolute inset-0 rounded-t-lg\"\n                              animate={{\n                                boxShadow: [\n                                  `0 0 20px ${barColor}`,\n                                  `0 0 40px ${barColor}`,\n                                  `0 0 20px ${barColor}`\n                                ]\n                              }}\n                              transition={{ duration: 0.3, repeat: Infinity }}\n                            />\n                          </>\n                        )}\n\n                        {/* Value label */}\n                        <motion.div\n                          className=\"absolute -bottom-6 left-1/2 -translate-x-1/2 text-xs font-mono font-bold whitespace-nowrap\"\n                          style={{ \n                            color: barColor,\n                            textShadow: `0 0 10px ${barColor}`\n                          }}\n                          animate={{\n                            scale: isComparing || isSwapping ? 1.2 : 1\n                          }}\n                        >\n                          {element.value}\n                        </motion.div>\n\n                        {/* Sorted checkmark */}\n                        {isSorted && (\n                          <motion.div\n                            initial={{ scale: 0, rotate: -180 }}\n                            animate={{ scale: 1, rotate: 0 }}\n                            className=\"absolute -top-8 left-1/2 -translate-x-1/2 w-6 h-6 rounded-full bg-green-500 flex items-center justify-center\"\n                            style={{\n                              boxShadow: '0 0 20px rgba(0, 255, 0, 0.8)'\n                            }}\n                          >\n                            <svg\n                              className=\"w-4 h-4 text-white\"\n                              fill=\"none\"\n                              strokeLinecap=\"round\"\n                              strokeLinejoin=\"round\"\n                              strokeWidth=\"3\"\n                              viewBox=\"0 0 24 24\"\n                              stroke=\"currentColor\"\n                            >\n                              <path d=\"M5 13l4 4L19 7\" />\n                            </svg>\n                          </motion.div>\n                        )}\n                      </motion.div>\n                    );\n                  })\n                )}\n              </div>\n            </div>\n\n            \n<motion.div\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ delay: 0.4 }}\n              className=\"mt-6 space-y-3\"\n            >\n              <div className=\"flex items-center justify-between text-sm\">\n                <span className=\"text-cyan-400 font-medium\">Sorting Progress</span>\n                <span className=\"text-purple-300 font-mono\">\n                  {steps.length > 0 ? Math.round((currentStep / steps.length) * 100) : 0}%\n                </span>\n              </div>\n              \n              <div className=\"relative h-3 bg-gray-800/80 rounded-full overflow-hidden border border-purple-500/30 shadow-inner\">\n                <motion.div\n                  className=\"absolute inset-y-0 left-0 bg-gradient-to-r from-cyan-500 via-purple-500 to-pink-500 rounded-full shadow-[0_0_20px_rgba(168,85,247,0.8)]\"\n                  initial={{ width: '0%' }}\n                  animate={{ \n                    width: steps.length > 0 ? `${(currentStep / steps.length) * 100}%` : '0%'\n                  }}\n                  transition={{ duration: 0.3, ease: 'easeOut' }}\n                />\n                \n                <motion.div\n                  className=\"absolute inset-0 bg-gradient-to-r from-transparent via-white/30 to-transparent\"\n                  animate={{ x: ['-100%', '200%'] }}\n                  transition={{ \n                    duration: 1.5, \n                    repeat: Infinity, \n                    ease: 'linear',\n                    repeatDelay: 0.5\n                  }}\n                  style={{ \n                    opacity: steps.length > 0 && currentStep < steps.length ? 1 : 0 \n                  }}\n                />\n              </div>\n              \n              <div className=\"flex items-center justify-between text-xs text-gray-500\">\n                <span>Step {currentStep} / {steps.length}</span>\n                {steps.length > 0 && currentStep >= steps.length && (\n                  <motion.span\n                    initial={{ opacity: 0, scale: 0.8 }}\n                    animate={{ opacity: 1, scale: 1 }}\n                    className=\"text-green-400 font-semibold flex items-center gap-1\"\n                  >\n                    \u2713 Complete\n                  </motion.span>\n                )}\n              </div>\n            </motion.div>\n          </div>\n        </div>\n\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ delay: 0.6, duration: 0.8 }}\n          className=\"bg-gray-900/50 backdrop-blur-lg border border-pink-500/30 rounded-xl p-6 shadow-[0_0_30px_rgba(255,0,102,0.3)]\"\n        >\n          <div className=\"flex items-center gap-2 mb-4 text-pink-400\">\n            <BarChart3 className=\"w-5 h-5\" />\n            <h3 className=\"text-lg font-semibold uppercase tracking-wider\">Legend</h3>\n          </div>\n          \n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n            {/* Default State */}\n            <motion.div\n              whileHover={{ scale: 1.05 }}\n              className=\"flex items-center gap-3 p-3 bg-gray-800/50 rounded-lg border border-gray-700/50\"\n            >\n              <motion.div\n                className=\"w-6 h-12 rounded bg-gradient-to-t from-cyan-500 to-cyan-300\"\n                animate={{\n                  boxShadow: [\n                    '0 0 10px rgba(0, 255, 255, 0.5)',\n                    '0 0 20px rgba(0, 255, 255, 0.8)',\n                    '0 0 10px rgba(0, 255, 255, 0.5)'\n                  ]\n                }}\n                transition={{ duration: 2, repeat: Infinity }}\n              />\n              <div>\n                <div className=\"text-sm font-semibold text-white\">Default</div>\n                <div className=\"text-xs text-gray-400\">Unsorted</div>\n              </div>\n            </motion.div>\n\n            {/* Comparing State */}\n            <motion.div\n              whileHover={{ scale: 1.05 }}\n              className=\"flex items-center gap-3 p-3 bg-gray-800/50 rounded-lg border border-yellow-500/30\"\n            >\n              <motion.div\n                className=\"w-6 h-12 rounded bg-gradient-to-t from-yellow-500 to-yellow-300\"\n                animate={{\n                  boxShadow: [\n                    '0 0 15px rgba(255, 255, 0, 0.6)',\n                    '0 0 30px rgba(255, 255, 0, 1)',\n                    '0 0 15px rgba(255, 255, 0, 0.6)'\n                  ],\n                  scale: [1, 1.1, 1]\n                }}\n                transition={{ duration: 1.5, repeat: Infinity }}\n              />\n              <div>\n                <div className=\"text-sm font-semibold text-yellow-300\">Comparing</div>\n                <div className=\"text-xs text-gray-400\">Active</div>\n              </div>\n            </motion.div>\n\n            {/* Swapping State */}\n            <motion.div\n              whileHover={{ scale: 1.05 }}\n              className=\"flex items-center gap-3 p-3 bg-gray-800/50 rounded-lg border border-pink-500/30\"\n            >\n              <motion.div\n                className=\"w-6 h-12 rounded bg-gradient-to-t from-pink-500 to-pink-300\"\n                animate={{\n                  boxShadow: [\n                    '0 0 15px rgba(255, 0, 102, 0.6)',\n                    '0 0 30px rgba(255, 0, 102, 1)',\n                    '0 0 15px rgba(255, 0, 102, 0.6)'\n                  ],\n                  x: [-2, 2, -2]\n                }}\n                transition={{ duration: 1, repeat: Infinity }}\n              />\n              <div>\n                <div className=\"text-sm font-semibold text-pink-300\">Swapping</div>\n                <div className=\"text-xs text-gray-400\">Moving</div>\n              </div>\n            </motion.div>\n\n            {/* Sorted State */}\n            <motion.div\n              whileHover={{ scale: 1.05 }}\n              className=\"flex items-center gap-3 p-3 bg-gray-800/50 rounded-lg border border-green-500/30\"\n            >\n              <motion.div\n                className=\"w-6 h-12 rounded bg-gradient-to-t from-green-500 to-green-300\"\n                animate={{\n                  boxShadow: [\n                    '0 0 15px rgba(0, 255, 0, 0.6)',\n                    '0 0 25px rgba(0, 255, 0, 0.9)',\n                    '0 0 15px rgba(0, 255, 0, 0.6)'\n                  ]\n                }}\n                transition={{ duration: 2, repeat: Infinity }}\n              />\n              <div>\n                <div className=\"text-sm font-semibold text-green-300\">Sorted</div>\n                <div className=\"text-xs text-gray-400\">Complete</div>\n              </div>\n            </motion.div>\n          </div>\n\n          {/* Additional Info */}\n          <motion.div\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            transition={{ delay: 1 }}\n            className=\"mt-4 pt-4 border-t border-gray-700/50\"\n          >\n            <div className=\"flex items-center justify-between text-xs text-gray-400\">\n              <div className=\"flex items-center gap-2\">\n                <motion.div\n                  className=\"w-2 h-2 rounded-full bg-cyan-400\"\n                  animate={{\n                    boxShadow: [\n                      '0 0 5px rgba(0, 255, 255, 0.8)',\n                      '0 0 15px rgba(0, 255, 255, 1)',\n                      '0 0 5px rgba(0, 255, 255, 0.8)'\n                    ]\n                  }}\n                  transition={{ duration: 1.5, repeat: Infinity }}\n                />\n                <span>Bar height represents value</span>\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <motion.div\n                  className=\"w-2 h-2 rounded-full bg-purple-400\"\n                  animate={{\n                    boxShadow: [\n                      '0 0 5px rgba(168, 85, 247, 0.8)',\n                      '0 0 15px rgba(168, 85, 247, 1)',\n                      '0 0 5px rgba(168, 85, 247, 0.8)'\n                    ]\n                  }}\n                  transition={{ duration: 1.5, repeat: Infinity, delay: 0.5 }}\n                />\n                <span>Glow intensity shows activity</span>\n              </div>\n            </div>\n          </motion.div>\n        </motion.div>\n      </div>\n    </div>\n  );\n}\n",
  "error": null,
  "overall_score": 46,
  "code_quality_score": 14,
  "architecture_score": 12,
  "performance_score": 11,
  "accessibility_score": 9,
  "metadata": {
    "document_id": "eval_room_5db96f3caf68",
    "prompt_category": "creative",
    "prompt_complexity": 9.0
  },
  "raw_response": {
    "document_id": "eval_room_5db96f3caf68",
    "mode": "parallel",
    "prompt": "Build a captivating algorithm visualizer with neon colored bars, smooth height transitions, glowing comparison indicators, trail effects during swaps, and a futuristic dashboard design with animated controls",
    "content": "import { useState, useCallback } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Slider } from '@/components/ui/slider';\nimport { Play, Pause, RotateCcw, Zap, BarChart3 } from 'lucide-react';\nimport { Activity, TrendingUp, Shuffle } from 'lucide-react';\nimport { motion } from 'framer-motion';\nimport { useEffect, useRef } from 'react';\n\ninterface ArrayElement {\n  value: number;\n  id: string;\n  isComparing?: boolean;\n  isSwapping?: boolean;\n  isSorted?: boolean;\n}\n\ninterface AlgorithmStep {\n  array: ArrayElement[];\n  comparingIndices: number[];\n  swappingIndices: number[];\n  sortedIndices: number[];\n}\n\ntype AlgorithmType = 'bubble' | 'quick' | 'merge' | 'insertion';\n\nconst NEON_COLORS = [\n  '#00ffff',\n  '#ff00ff', \n  '#00ff00',\n  '#ffff00',\n  '#ff0066',\n  '#00ffaa'\n];\n\nconst mockAlgorithms = [\n  { id: 'bubble', name: 'Bubble Sort', complexity: 'O(n\u00b2)' },\n  { id: 'quick', name: 'Quick Sort', complexity: 'O(n log n)' },\n  { id: 'merge', name: 'Merge Sort', complexity: 'O(n log n)' },\n  { id: 'insertion', name: 'Insertion Sort', complexity: 'O(n\u00b2)' }\n];\n\nexport default function AlgorithmVisualizer() {\n  const [array, setArray] = useState<ArrayElement[]>([]);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [speed, setSpeed] = useState([50]);\n  const [arraySize, setArraySize] = useState([20]);\n  const [selectedAlgorithm, setSelectedAlgorithm] = useState<AlgorithmType>('bubble');\n  const [currentStep, setCurrentStep] = useState(0);\n  const [steps, setSteps] = useState<AlgorithmStep[]>([]);\n  const [comparisons, setComparisons] = useState(0);\n  const [swaps, setSwaps] = useState(0);\n\n  const generateRandomArray = useCallback(() => {\n    const newArray: ArrayElement[] = Array.from({ length: arraySize[0] }, (_, index) => ({\n      value: Math.floor(Math.random() * 100) + 5,\n      id: `element-${index}-${Date.now()}`,\n      isComparing: false,\n      isSwapping: false,\n      isSorted: false\n    }));\n    setArray(newArray);\n    setSteps([]);\n    setCurrentStep(0);\n    setIsPlaying(false);\n  }, [arraySize]);\n\n  // Update statistics when step changes\n  const updateStats = useCallback(() => {\n    if (steps.length === 0 || currentStep >= steps.length) return;\n    \n    const step = steps[currentStep];\n    let compCount = 0;\n    let swapCount = 0;\n    \n    for (let i = 0; i <= currentStep; i++) {\n      if (steps[i].comparingIndices.length > 0) compCount++;\n      if (steps[i].swappingIndices.length > 0) swapCount++;\n    }\n    \n    setComparisons(compCount);\n    setSwaps(swapCount);\n  }, [steps, currentStep]);\n\n  // Reset stats when generating new array or algorithm changes\n  const resetStats = useCallback(() => {\n    setComparisons(0);\n    setSwaps(0);\n  }, []);\n\n</parameter>\n</invoke>  const resetVisualization = useCallback(() => {\n\n    setIsPlaying(false);\n    setCurrentStep(0);\n    setSteps([]);\n    generateRandomArray();\n  }, [generateRandomArray]);\n\n  // Animation control using useEffect\n  useEffect(() => {\n    if (!isPlaying || currentStep >= steps.length) {\n      if (currentStep >= steps.length && steps.length > 0) {\n        setIsPlaying(false);\n      }\n      return;\n    }\n\n    const delay = 1000 - speed[0] * 9.5; // Convert speed (0-100) to delay (1000ms-50ms)\n    const timer = setTimeout(() => {\n      setCurrentStep(prev => prev + 1);\n    }, delay);\n\n    return () => clearTimeout(timer);\n  }, [isPlaying, currentStep, steps.length, speed]);\n\n  // Update array visualization based on current step\n  useEffect(() => {\n    if (steps.length > 0 && currentStep < steps.length) {\n      const step = steps[currentStep];\n      setArray(step.array.map((el, idx) => ({\n        ...el,\n        isComparing: step.comparingIndices.includes(idx),\n        isSwapping: step.swappingIndices.includes(idx),\n        isSorted: step.sortedIndices.includes(idx)\n      })));\n    }\n  }, [currentStep, steps]);\n  const startVisualization = useCallback(() => {\n    if (steps.length === 0) return;\n    setIsPlaying(true);\n    if (currentStep >= steps.length) {\n      setCurrentStep(0);\n    }\n  \n  }, [steps, speed, currentStep]);\n\n  const pauseVisualization = useCallback(() => {\n\n    /* TODO:PauseAnimation Set isPlaying false, preserve current step */\n  }, []);\n\n  const generateSortingSteps = useCallback((algorithm: AlgorithmType) => {\n        if (array.length === 0) return;\n\n    const steps: AlgorithmStep[] = [];\n    const arr = array.map(el => ({ ...el }));\n\n    const addStep = (\n      currentArray: ArrayElement[],\n      comparing: number[] = [],\n      swapping: number[] = [],\n      sorted: number[] = []\n    ) => {\n      steps.push({\n        array: currentArray.map(el => ({ ...el })),\n        comparingIndices: [...comparing],\n        swappingIndices: [...swapping],\n        sortedIndices: [...sorted]\n      });\n    };\n\n    // Initial state\n    addStep(arr);\n\n    switch (algorithm) {\n      case 'bubble': {\n        const sortedIndices: number[] = [];\n        for (let i = 0; i < arr.length - 1; i++) {\n          for (let j = 0; j < arr.length - i - 1; j++) {\n            // Comparing\n            addStep(arr, [j, j + 1], [], sortedIndices);\n            \n            if (arr[j].value > arr[j + 1].value) {\n              // Swapping\n              addStep(arr, [], [j, j + 1], sortedIndices);\n              [arr[j], arr[j + 1]] = [arr[j + 1], arr[j]];\n              addStep(arr, [], [], sortedIndices);\n            }\n          }\n          sortedIndices.push(arr.length - i - 1);\n          addStep(arr, [], [], sortedIndices);\n        }\n        sortedIndices.push(0);\n        addStep(arr, [], [], sortedIndices);\n        break;\n      }\n\n      case 'insertion': {\n        const sortedIndices: number[] = [0];\n        addStep(arr, [], [], sortedIndices);\n        \n        for (let i = 1; i < arr.length; i++) {\n          const key = arr[i];\n          let j = i - 1;\n          \n          addStep(arr, [i], [], sortedIndices);\n          \n          while (j >= 0 && arr[j].value > key.value) {\n            addStep(arr, [j, j + 1], [], sortedIndices);\n            addStep(arr, [], [j, j + 1], sortedIndices);\n            arr[j + 1] = arr[j];\n            addStep(arr, [], [], sortedIndices);\n            j--;\n          }\n          \n          arr[j + 1] = key;\n          sortedIndices.push(i);\n          addStep(arr, [], [], sortedIndices);\n        }\n        break;\n      }\n\n      case 'quick': {\n        const sortedIndices: number[] = [];\n        \n        const partition = (low: number, high: number): number => {\n          const pivot = arr[high].value;\n          let i = low - 1;\n          \n          addStep(arr, [high], [], sortedIndices);\n          \n          for (let j = low; j < high; j++) {\n            addStep(arr, [j, high], [], sortedIndices);\n            \n            if (arr[j].value < pivot) {\n              i++;\n              addStep(arr, [], [i, j], sortedIndices);\n              [arr[i], arr[j]] = [arr[j], arr[i]];\n              addStep(arr, [], [], sortedIndices);\n            }\n          }\n          \n          addStep(arr, [], [i + 1, high], sortedIndices);\n          [arr[i + 1], arr[high]] = [arr[high], arr[i + 1]];\n          sortedIndices.push(i + 1);\n          addStep(arr, [], [], sortedIndices);\n          \n          return i + 1;\n        };\n        \n        const quickSort = (low: number, high: number) => {\n          if (low < high) {\n            const pi = partition(low, high);\n            quickSort(low, pi - 1);\n            quickSort(pi + 1, high);\n          } else if (low === high) {\n            sortedIndices.push(low);\n            addStep(arr, [], [], sortedIndices);\n          }\n        };\n        \n        quickSort(0, arr.length - 1);\n        break;\n      }\n\n      case 'merge': {\n        const sortedIndices: number[] = [];\n        \n        const merge = (left: number, mid: number, right: number) => {\n          const leftArr = arr.slice(left, mid + 1);\n          const rightArr = arr.slice(mid + 1, right + 1);\n          \n          let i = 0, j = 0, k = left;\n          \n          while (i < leftArr.length && j < rightArr.length) {\n            addStep(arr, [left + i, mid + 1 + j], [], sortedIndices);\n            \n            if (leftArr[i].value <= rightArr[j].value) {\n              addStep(arr, [], [k], sortedIndices);\n              arr[k] = leftArr[i];\n              i++;\n            } else {\n              addStep(arr, [], [k], sortedIndices);\n              arr[k] = rightArr[j];\n              j++;\n            }\n            k++;\n            addStep(arr, [], [], sortedIndices);\n          }\n          \n          while (i < leftArr.length) {\n            addStep(arr, [], [k], sortedIndices);\n            arr[k] = leftArr[i];\n            i++;\n            k++;\n            addStep(arr, [], [], sortedIndices);\n          }\n          \n          while (j < rightArr.length) {\n            addStep(arr, [], [k], sortedIndices);\n            arr[k] = rightArr[j];\n            j++;\n            k++;\n            addStep(arr, [], [], sortedIndices);\n          }\n          \n          if (right - left + 1 === arr.length) {\n            for (let idx = 0; idx < arr.length; idx++) {\n              sortedIndices.push(idx);\n            }\n          }\n          addStep(arr, [], [], sortedIndices);\n        };\n        \n        const mergeSort = (left: number, right: number) => {\n          if (left < right) {\n            const mid = Math.floor((left + right) / 2);\n            mergeSort(left, mid);\n            mergeSort(mid + 1, right);\n            merge(left, mid, right);\n          }\n        };\n        \n        mergeSort(0, arr.length - 1);\n        break;\n      }\n    }\n\n    setSteps(steps);\n    setCurrentStep(0);\n  }, [array]);\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-gray-900 via-purple-900 to-gray-900 p-8\">\n      <div className=\"max-w-7xl mx-auto space-y-8\">\n        <motion.div\n          initial={{ opacity: 0, y: -20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.8 }}\n          className=\"text-center space-y-4\"\n        >\n          <motion.h1\n            className=\"text-6xl font-bold bg-gradient-to-r from-cyan-400 via-purple-400 to-pink-400 bg-clip-text text-transparent\"\n            animate={{\n              textShadow: [\n                '0 0 20px rgba(0, 255, 255, 0.5)',\n                '0 0 40px rgba(255, 0, 255, 0.5)',\n                '0 0 20px rgba(0, 255, 255, 0.5)'\n              ]\n            }}\n            transition={{ duration: 2, repeat: Infinity }}\n          >\n            Algorithm Visualizer\n          </motion.h1>\n          \n          <div className=\"flex items-center justify-center gap-4\">\n            <motion.div\n              initial={{ scale: 0 }}\n              animate={{ scale: 1 }}\n              transition={{ delay: 0.3, type: 'spring' }}\n              className=\"px-6 py-2 bg-purple-500/20 border border-purple-400/50 rounded-full backdrop-blur-sm\"\n            >\n              <span className=\"text-2xl font-semibold text-purple-300\">\n                {mockAlgorithms.find(a => a.id === selectedAlgorithm)?.name || 'Bubble Sort'}\n              </span>\n            </motion.div>\n            \n            <motion.div\n              initial={{ scale: 0 }}\n              animate={{ scale: 1 }}\n              transition={{ delay: 0.5, type: 'spring' }}\n              className=\"px-4 py-2 bg-cyan-500/20 border border-cyan-400/50 rounded-full backdrop-blur-sm relative overflow-hidden\"\n            >\n              <motion.div\n                className=\"absolute inset-0 bg-gradient-to-r from-transparent via-cyan-400/20 to-transparent\"\n                animate={{ x: ['-100%', '200%'] }}\n                transition={{ duration: 2, repeat: Infinity, ease: 'linear' }}\n              />\n              <span className=\"text-lg font-mono text-cyan-300 relative z-10 flex items-center gap-2\">\n                <BarChart3 className=\"w-4 h-4\" />\n                {mockAlgorithms.find(a => a.id === selectedAlgorithm)?.complexity || 'O(n\u00b2)'}\n              </span>\n            </motion.div>\n          </div>\n        </motion.div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-6\">\n          <div className=\"lg:col-span-1 space-y-6\">\n            <motion.div\n              initial={{ opacity: 0, x: -50 }}\n              animate={{ opacity: 1, x: 0 }}\n              className=\"bg-gray-900/50 backdrop-blur-lg border border-cyan-500/30 rounded-xl p-6 shadow-[0_0_30px_rgba(0,255,255,0.3)]\"\n            >\n              <div className=\"space-y-6\">\n                {/* Algorithm Selection */}\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center gap-2 text-cyan-400\">\n                    <Zap className=\"w-4 h-4\" />\n                    <h3 className=\"text-sm font-semibold uppercase tracking-wider\">Algorithm</h3>\n                  </div>\n                  <div className=\"grid grid-cols-1 gap-2\">\n                    {mockAlgorithms.map((algo) => (\n                      <button\n                        key={algo.id}\n                        onClick={() => setSelectedAlgorithm(algo.id as AlgorithmType)}\n                        disabled={isPlaying}\n                        className={`\n                          relative px-4 py-3 rounded-lg text-left transition-all duration-300\n                          ${selectedAlgorithm === algo.id\n                            ? 'bg-cyan-500/20 border border-cyan-400 shadow-[0_0_20px_rgba(0,255,255,0.4)]'\n                            : 'bg-gray-800/50 border border-gray-700 hover:border-cyan-500/50'\n                          }\n                          disabled:opacity-50 disabled:cursor-not-allowed\n                        `}\n                      >\n                        <div className=\"text-sm font-medium text-white\">{algo.name}</div>\n                        <div className=\"text-xs text-gray-400 mt-1\">{algo.complexity}</div>\n                      </button>\n                    ))}\n                  </div>\n                </div>\n\n                {/* Speed Control */}\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center gap-2 text-purple-400\">\n                      <BarChart3 className=\"w-4 h-4\" />\n                      <h3 className=\"text-sm font-semibold uppercase tracking-wider\">Speed</h3>\n                    </div>\n                    <span className=\"text-xs text-gray-400\">{speed[0]}%</span>\n                  </div>\n                  <Slider\n                    value={speed}\n                    onValueChange={setSpeed}\n                    min={10}\n                    max={100}\n                    step={10}\n                    disabled={isPlaying}\n                    className=\"cursor-pointer\"\n                  />\n                </div>\n\n                {/* Array Size Control */}\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center gap-2 text-pink-400\">\n                      <BarChart3 className=\"w-4 h-4\" />\n                      <h3 className=\"text-sm font-semibold uppercase tracking-wider\">Array Size</h3>\n                    </div>\n                    <span className=\"text-xs text-gray-400\">{arraySize[0]}</span>\n                  </div>\n                  <Slider\n                    value={arraySize}\n                    onValueChange={setArraySize}\n                    min={5}\n                    max={50}\n                    step={5}\n                    disabled={isPlaying}\n                    className=\"cursor-pointer\"\n                  />\n                </div>\n\n                {/* Control Buttons */}\n                <div className=\"space-y-2 pt-4 border-t border-gray-700\">\n                  <Button\n                    onClick={isPlaying ? pauseVisualization : startVisualization}\n                    disabled={steps.length === 0 || (currentStep >= steps.length && !isPlaying)}\n                    className=\"w-full bg-gradient-to-r from-cyan-500 to-blue-500 hover:from-cyan-600 hover:to-blue-600 text-white shadow-[0_0_20px_rgba(0,255,255,0.5)] transition-all duration-300\"\n                  >\n                    {isPlaying ? (\n                      <>\n                        <Pause className=\"w-4 h-4 mr-2\" />\n                        Pause\n                      </>\n                    ) : (\n                      <>\n                        <Play className=\"w-4 h-4 mr-2\" />\n                        {currentStep >= steps.length ? 'Start' : 'Resume'}\n                      </>\n                    )}\n                  </Button>\n                  <Button\n                    onClick={resetVisualization}\n                    variant=\"outline\"\n                    className=\"w-full border-purple-500/50 text-purple-400 hover:bg-purple-500/20 hover:border-purple-400 shadow-[0_0_15px_rgba(168,85,247,0.3)]\"\n                  >\n                    <RotateCcw className=\"w-4 h-4 mr-2\" />\n                    Reset\n                  </Button>\n                  <Button\n                    onClick={() => {\n                      generateSortingSteps(selectedAlgorithm);\n                      setCurrentStep(0);\n                    }}\n                    disabled={isPlaying || array.length === 0}\n                    variant=\"outline\"\n                    className=\"w-full border-pink-500/50 text-pink-400 hover:bg-pink-500/20 hover:border-pink-400 shadow-[0_0_15px_rgba(255,0,102,0.3)]\"\n                  >\n                    <Zap className=\"w-4 h-4 mr-2\" />\n                    Generate Steps\n                  </Button>\n                </div>\n              </div>\n            </motion.div>\n            \n            <div className=\"bg-gray-900/50 backdrop-blur-lg border border-cyan-500/30 rounded-xl p-6 shadow-2xl shadow-cyan-500/20\">\n              <div className=\"space-y-6\">\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center gap-2 text-cyan-400\">\n                    <Zap className=\"w-4 h-4\" />\n                    <h3 className=\"font-semibold\">Algorithm</h3>\n                  </div>\n                  <div className=\"grid grid-cols-1 gap-2\">\n                    {mockAlgorithms.map((algo) => (\n                      <motion.button\n                        key={algo.id}\n                        onClick={() => setSelectedAlgorithm(algo.id as AlgorithmType)}\n                        className={`relative p-3 rounded-lg border transition-all duration-300 text-left ${\n                          selectedAlgorithm === algo.id\n                            ? 'bg-cyan-500/20 border-cyan-400 shadow-lg shadow-cyan-500/50'\n                            : 'bg-gray-800/50 border-gray-700 hover:border-cyan-500/50 hover:shadow-md hover:shadow-cyan-500/30'\n                        }`}\n                        whileHover={{ scale: 1.02 }}\n                        whileTap={{ scale: 0.98 }}\n                      >\n                        <div className=\"flex flex-col gap-1\">\n                          <span className={`font-medium text-sm ${\n                            selectedAlgorithm === algo.id ? 'text-cyan-300' : 'text-gray-300'\n                          }`}>\n                            {algo.name}\n                          </span>\n                          <span className={`text-xs ${\n                            selectedAlgorithm === algo.id ? 'text-cyan-400/80' : 'text-gray-500'\n                          }`}>\n                            {algo.complexity}\n                          </span>\n                        </div>\n                        {selectedAlgorithm === algo.id && (\n                          <motion.div\n                            className=\"absolute inset-0 rounded-lg border-2 border-cyan-400\"\n                            layoutId=\"algorithmSelector\"\n                            transition={{ type: \"spring\", stiffness: 300, damping: 30 }}\n                          />\n                        )}\n                      </motion.button>\n                    ))}\n                  </div>\n                </div>\n\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <label className=\"text-cyan-400 text-sm font-medium flex items-center gap-2\">\n                      <Zap className=\"w-4 h-4\" />\n                      Speed\n                    </label>\n                    <span className=\"text-cyan-300 text-xs\">{speed[0]}ms</span>\n                  </div>\n                  <Slider\n                    value={speed}\n                    onValueChange={setSpeed}\n                    min={10}\n                    max={200}\n                    step={10}\n                    className=\"[&_[role=slider]]:h-4 [&_[role=slider]]:w-4 [&_[role=slider]]:bg-cyan-400 [&_[role=slider]]:border-2 [&_[role=slider]]:border-cyan-300 [&_[role=slider]]:shadow-[0_0_15px_rgba(34,211,238,0.8)] [&_[role=slider]]:transition-all [&_[role=slider]]:hover:shadow-[0_0_25px_rgba(34,211,238,1)] [&_.relative]:h-2 [&_.relative]:bg-gray-800 [&_.relative]:rounded-full [&_.relative]:border [&_.relative]:border-cyan-500/30 [&_.relative_.bg-primary]:bg-gradient-to-r [&_.relative_.bg-primary]:from-cyan-500 [&_.relative_.bg-primary]:to-purple-500 [&_.relative_.bg-primary]:shadow-[0_0_10px_rgba(34,211,238,0.5)]\"\n                  /></parameter>\n                </div>\n\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <label className=\"text-cyan-400 text-sm font-medium flex items-center gap-2\">\n                      <BarChart3 className=\"w-4 h-4\" />\n                      Array Size\n                    </label>\n                    <span className=\"text-cyan-300 text-xs\">{arraySize[0]}</span>\n                  </div>\n                  <Slider\n                    value={arraySize}\n                    onValueChange={setArraySize}\n                    min={5}\n                    max={50}\n                    step={1}\n                    disabled={isPlaying}\n                    className=\"[&_[role=slider]]:bg-gradient-to-r [&_[role=slider]]:from-purple-500 [&_[role=slider]]:to-pink-500 [&_[role=slider]]:border-0 [&_[role=slider]]:shadow-lg [&_[role=slider]]:shadow-purple-500/50 [&_[role=slider]]:transition-all [&_[role=slider]]:hover:shadow-purple-500/80 [&_[role=slider]]:hover:scale-110 [&>span]:bg-gradient-to-r [&>span]:from-purple-500/30 [&>span]:to-pink-500/30 [&>span]:h-2\"\n                  />\n                </div>\n\n                <div className=\"flex gap-3 pt-4\">\n                  <motion.button\n                    onClick={isPlaying ? pauseVisualization : startVisualization}\n                    disabled={array.length === 0 || (steps.length === 0 && !isPlaying)}\n                    whileHover={{ scale: 1.05 }}\n                    whileTap={{ scale: 0.95 }}\n                    className={`\n                      relative flex-1 px-6 py-3 rounded-lg font-semibold\n                      transition-all duration-300 overflow-hidden\n                      ${isPlaying\n                        ? 'bg-gradient-to-r from-pink-500 to-purple-500 text-white shadow-[0_0_30px_rgba(236,72,153,0.6)]'\n                        : 'bg-gradient-to-r from-cyan-500 to-blue-500 text-white shadow-[0_0_30px_rgba(6,182,212,0.6)]'\n                      }\n                      disabled:opacity-50 disabled:cursor-not-allowed disabled:shadow-none\n                      border-2 ${isPlaying ? 'border-pink-400' : 'border-cyan-400'}\n                    `}\n                  >\n                    <motion.div\n                      className=\"absolute inset-0 bg-gradient-to-r from-transparent via-white/30 to-transparent\"\n                      animate={{\n                        x: ['-100%', '200%']\n                      }}\n                      transition={{\n                        duration: 2,\n                        repeat: Infinity,\n                        ease: 'linear'\n                      }}\n                    />\n                    <motion.div\n                      className=\"relative flex items-center justify-center gap-2\"\n                      animate={{\n                        textShadow: isPlaying\n                          ? [\n                              '0 0 10px rgba(236,72,153,0.8)',\n                              '0 0 20px rgba(236,72,153,0.8)',\n                              '0 0 10px rgba(236,72,153,0.8)'\n                            ]\n                          : [\n                              '0 0 10px rgba(6,182,212,0.8)',\n                              '0 0 20px rgba(6,182,212,0.8)',\n                              '0 0 10px rgba(6,182,212,0.8)'\n                            ]\n                      }}\n                      transition={{\n                        duration: 1.5,\n                        repeat: Infinity\n                      }}\n                    >\n                      <motion.div\n                        key={isPlaying ? 'pause' : 'play'}\n                        initial={{ rotate: -180, opacity: 0, scale: 0 }}\n                        animate={{ rotate: 0, opacity: 1, scale: 1 }}\n                        exit={{ rotate: 180, opacity: 0, scale: 0 }}\n                        transition={{ duration: 0.3, type: 'spring' }}\n                      >\n                        {isPlaying ? (\n                          <Pause className=\"w-5 h-5\" fill=\"currentColor\" />\n                        ) : (\n                          <Play className=\"w-5 h-5\" fill=\"currentColor\" />\n                        )}\n                      </motion.div>\n                      <span className=\"font-bold tracking-wide\">\n                        {isPlaying ? 'PAUSE' : 'PLAY'}\n                      </span>\n                    </motion.div>\n                  </motion.button>\n                  <motion.button\n                    onClick={resetVisualization}\n                    disabled={isPlaying}\n                    className=\"flex-1 relative group overflow-hidden px-6 py-3 bg-gradient-to-r from-pink-500/20 to-purple-500/20 border border-pink-400/50 rounded-lg disabled:opacity-50 disabled:cursor-not-allowed transition-all duration-300 hover:shadow-[0_0_30px_rgba(236,72,153,0.6)]\"\n                    whileHover={{ scale: 1.05 }}\n                    whileTap={{ scale: 0.95, rotate: 360 }}\n                    transition={{ \n                      rotate: { duration: 0.6, ease: \"easeInOut\" },\n                      scale: { duration: 0.2 }\n                    }}\n                  >\n                    <motion.div\n                      className=\"absolute inset-0 bg-gradient-to-r from-pink-500/0 via-pink-500/30 to-pink-500/0\"\n                      animate={{ x: ['-100%', '200%'] }}\n                      transition={{ duration: 2, repeat: Infinity, ease: 'linear' }}\n                    />\n                    <div className=\"relative z-10 flex items-center justify-center gap-2\">\n                      <motion.div\n                        animate={{ rotate: 0 }}\n                        whileHover={{ rotate: -180 }}\n                        transition={{ duration: 0.5 }}\n                      >\n                        <RotateCcw className=\"w-5 h-5 text-pink-300\" />\n                      </motion.div>\n                      <span className=\"font-semibold text-pink-300\">Reset</span>\n                    </div>\n                    <motion.div\n                      className=\"absolute inset-0 rounded-lg opacity-0 group-hover:opacity-100 transition-opacity duration-300\"\n                      style={{\n                        boxShadow: '0 0 20px rgba(236,72,153,0.5), inset 0 0 20px rgba(236,72,153,0.2)'\n                      }}\n                    />\n                  </motion.button>\n                </div>\n              </div>\n            </div>\n\n            {/* TODO:StatsPanel Real-time statistics panel showing comparisons, swaps, and progress */}\n          </div>\n\n          <div className=\"lg:col-span-3\">\n            <div className=\"bg-gray-900/50 backdrop-blur-lg border border-purple-500/30 rounded-xl p-8 shadow-2xl shadow-purple-500/20 min-h-[600px]\">\n                            {array.length === 0 ? (\n                <motion.div\n                  initial={{ opacity: 0, scale: 0.8 }}\n                  animate={{ opacity: 1, scale: 1 }}\n                  className=\"absolute inset-0 flex flex-col items-center justify-center gap-6\"\n                >\n                  <motion.div\n                    animate={{\n                      boxShadow: [\n                        '0 0 20px rgba(0, 255, 255, 0.3)',\n                        '0 0 40px rgba(255, 0, 255, 0.5)',\n                        '0 0 20px rgba(0, 255, 255, 0.3)'\n                      ]\n                    }}\n                    transition={{ duration: 2, repeat: Infinity }}\n                    className=\"p-8 rounded-full bg-gradient-to-br from-cyan-500/20 to-purple-500/20 border border-cyan-400/50\"\n                  >\n                    <BarChart3 className=\"w-16 h-16 text-cyan-400\" />\n                  </motion.div>\n                  <div className=\"text-center space-y-2\">\n                    <h3 className=\"text-2xl font-bold text-cyan-300\">Ready to Visualize</h3>\n                    <p className=\"text-gray-400\">Generate an array to begin</p>\n                  </div>\n                </motion.div>\n              ) : (\n                <div className=\"relative w-full h-full flex items-end justify-center gap-1 px-4\">\n                  {array.map((element, index) => {\n                    const currentStepData = steps[currentStep];\n                    const isComparing = currentStepData?.comparingIndices.includes(index);\n                    const isSwapping = currentStepData?.swappingIndices.includes(index);\n                    const isSorted = currentStepData?.sortedIndices.includes(index);\n                    \n                    const maxValue = Math.max(...array.map(el => el.value));\n                    const heightPercentage = (element.value / maxValue) * 100;\n                    \n                    let barColor = NEON_COLORS[index % NEON_COLORS.length];\n                    let glowColor = barColor;\n                    let glowIntensity = 0.3;\n                    \n                    if (isSorted) {\n                      barColor = '#00ff00';\n                      glowColor = '#00ff00';\n                      glowIntensity = 0.8;\n                    } else if (isSwapping) {\n                      barColor = '#ff0066';\n                      glowColor = '#ff0066';\n                      glowIntensity = 1;\n                    } else if (isComparing) {\n                      barColor = '#ffff00';\n                      glowColor = '#ffff00';\n                      glowIntensity = 0.7;\n                    }\n                    \n                    return (\n                      <motion.div\n                        key={element.id}\n                        className=\"relative flex-1 min-w-[4px] max-w-[60px]\"\n                        initial={{ height: 0, opacity: 0 }}\n                        animate={{\n                          height: `${heightPercentage}%`,\n                          opacity: 1,\n                          y: isSwapping ? [-10, 0] : 0,\n                          scale: isSwapping ? [1, 1.1, 1] : isComparing ? 1.05 : 1\n                        }}\n                        transition={{\n                          height: { duration: 0.3, ease: 'easeOut' },\n                          opacity: { duration: 0.3 },\n                          y: { duration: 0.4, ease: 'easeInOut' },\n                          scale: { duration: 0.2 }\n                        }}\n                      >\n                        {/* Swap trail effect */}\n                        {isSwapping && (\n                          <motion.div\n                            className=\"absolute inset-0 rounded-t-lg\"\n                            initial={{ opacity: 0 }}\n                            animate={{\n                              opacity: [0, 0.6, 0],\n                              scale: [1, 1.5, 2],\n                              boxShadow: [\n                                `0 0 0px ${glowColor}`,\n                                `0 0 30px ${glowColor}`,\n                                `0 0 60px ${glowColor}`\n                              ]\n                            }}\n                            transition={{ duration: 0.6, repeat: Infinity }}\n                            style={{\n                              background: `radial-gradient(circle, ${glowColor}40 0%, transparent 70%)`\n                            }}\n                          />\n                        )}\n                        \n                        {/* Main bar */}\n                        <motion.div\n                          className=\"absolute inset-0 rounded-t-lg\"\n                          animate={{\n                            background: `linear-gradient(to top, ${barColor}, ${barColor}dd)`,\n                            boxShadow: [\n                              `0 0 ${glowIntensity * 20}px ${glowColor}${Math.floor(glowIntensity * 255).toString(16).padStart(2, '0')}`,\n                              `0 0 ${glowIntensity * 30}px ${glowColor}${Math.floor(glowIntensity * 255).toString(16).padStart(2, '0')}`,\n                              `0 0 ${glowIntensity * 20}px ${glowColor}${Math.floor(glowIntensity * 255).toString(16).padStart(2, '0')}`\n                            ]\n                          }}\n                          transition={{\n                            background: { duration: 0.3 },\n                            boxShadow: { duration: 0.8, repeat: Infinity }\n                          }}\n                          style={{\n                            border: `1px solid ${barColor}`,\n                            position: 'relative',\n                            overflow: 'hidden'\n                          }}\n                        >\n                          {/* Shimmer effect */}\n                          <motion.div\n                            className=\"absolute inset-0\"\n                            animate={{\n                              background: [\n                                `linear-gradient(to top, transparent 0%, ${barColor}40 50%, transparent 100%)`,\n                                `linear-gradient(to top, transparent 50%, ${barColor}60 100%, transparent 150%)`\n                              ],\n                              y: ['-100%', '100%']\n                            }}\n                            transition={{\n                              duration: 2,\n                              repeat: Infinity,\n                              ease: 'linear'\n                            }}\n                          />\n                          \n                          {/* Sorted checkmark indicator */}\n                          {isSorted && (\n                            <motion.div\n                              initial={{ scale: 0, rotate: -180 }}\n                              animate={{ scale: 1, rotate: 0 }}\n                              className=\"absolute top-2 left-1/2 -translate-x-1/2 w-4 h-4 bg-green-400 rounded-full flex items-center justify-center\"\n                              style={{\n                                boxShadow: '0 0 10px #00ff00'\n                              }}\n                            >\n                              <div className=\"w-2 h-2 bg-gray-900 rounded-full\" />\n                            </motion.div>\n                          )}\n                        </motion.div>\n                        \n                        {/* Comparison indicator */}\n                        {isComparing && (\n                          <motion.div\n                            className=\"absolute -top-8 left-1/2 -translate-x-1/2\"\n                            initial={{ opacity: 0, y: 10 }}\n                            animate={{\n                              opacity: [0.5, 1, 0.5],\n                              y: [-5, -10, -5],\n                              scale: [1, 1.2, 1]\n                            }}\n                            transition={{ duration: 0.8, repeat: Infinity }}\n                          >\n                            <div\n                              className=\"w-3 h-3 rotate-45\"\n                              style={{\n                                background: glowColor,\n                                boxShadow: `0 0 15px ${glowColor}`\n                              }}\n                            />\n                          </motion.div>\n                        )}\n                        \n                        {/* Value label */}\n                        {arraySize[0] <= 20 && (\n                          <motion.div\n                            className=\"absolute -bottom-6 left-1/2 -translate-x-1/2 text-xs font-mono font-bold whitespace-nowrap\"\n                            animate={{\n                              color: barColor,\n                              textShadow: `0 0 10px ${glowColor}`\n                            }}\n                            transition={{ duration: 0.3 }}\n                          >\n                            {element.value}\n                          </motion.div>\n                        )}\n                      </motion.div>\n                    );\n                  })}\n                </div>\n              )}\n              \n              <div className=\"relative h-full flex items-end justify-center gap-1\">\n                {array.length === 0 ? (\n                  <motion.div\n                    initial={{ opacity: 0, scale: 0.8 }}\n                    animate={{ opacity: 1, scale: 1 }}\n                    className=\"absolute inset-0 flex flex-col items-center justify-center gap-4\"\n                  >\n                    <motion.div\n                      animate={{\n                        boxShadow: [\n                          '0 0 20px rgba(0, 255, 255, 0.3)',\n                          '0 0 40px rgba(255, 0, 255, 0.5)',\n                          '0 0 20px rgba(0, 255, 255, 0.3)'\n                        ]\n                      }}\n                      transition={{ duration: 2, repeat: Infinity }}\n                      className=\"p-8 rounded-full bg-gray-800/50 border border-cyan-500/30\"\n                    >\n                      <BarChart3 className=\"w-16 h-16 text-cyan-400\" />\n                    </motion.div>\n                    <p className=\"text-cyan-300 text-lg font-medium\">Generate an array to begin</p>\n                  </motion.div>\n                ) : (\n                  array.map((element, index) => {\n                    const isComparing = steps[currentStep]?.comparingIndices.includes(index);\n                    const isSwapping = steps[currentStep]?.swappingIndices.includes(index);\n                    const isSorted = steps[currentStep]?.sortedIndices.includes(index);\n                    \n                    const heightPercentage = (element.value / 105) * 100;\n                    const barColor = isSorted \n                      ? '#00ff00' \n                      : isSwapping \n                      ? '#ff0066' \n                      : isComparing \n                      ? '#ffff00' \n                      : NEON_COLORS[index % NEON_COLORS.length];\n\n                    return (\n                      <motion.div\n                        key={element.id}\n                        layout\n                        initial={{ opacity: 0, height: 0 }}\n                        animate={{\n                          opacity: 1,\n                          height: `${heightPercentage}%`,\n                          scale: isComparing || isSwapping ? 1.05 : 1,\n                          y: isSwapping ? -10 : 0\n                        }}\n                        transition={{\n                          layout: { type: 'spring', stiffness: 300, damping: 30 },\n                          height: { duration: 0.3, ease: 'easeOut' },\n                          scale: { duration: 0.2 },\n                          y: { duration: 0.3, type: 'spring' }\n                        }}\n                        className=\"relative flex-1 min-w-[8px] max-w-[60px] rounded-t-lg\"\n                        style={{\n                          backgroundColor: barColor,\n                          boxShadow: `\n                            0 0 ${isSwapping ? '30px' : isComparing ? '25px' : '15px'} ${barColor}80,\n                            0 0 ${isSwapping ? '60px' : isComparing ? '50px' : '30px'} ${barColor}40,\n                            inset 0 0 20px ${barColor}40\n                          `,\n                          border: `1px solid ${barColor}`,\n                          filter: isSorted ? 'brightness(1.3)' : 'brightness(1)'\n                        }}\n                      >\n                        {/* Glow overlay */}\n                        <motion.div\n                          className=\"absolute inset-0 rounded-t-lg\"\n                          animate={{\n                            background: [\n                              `linear-gradient(to top, transparent, ${barColor}40)`,\n                              `linear-gradient(to top, transparent, ${barColor}60)`,\n                              `linear-gradient(to top, transparent, ${barColor}40)`\n                            ]\n                          }}\n                          transition={{ duration: 1.5, repeat: Infinity }}\n                        />\n\n                        {/* Shimmer effect */}\n                        {(isComparing || isSwapping) && (\n                          <motion.div\n                            className=\"absolute inset-0 rounded-t-lg overflow-hidden\"\n                            initial={{ opacity: 0 }}\n                            animate={{ opacity: 1 }}\n                          >\n                            <motion.div\n                              className=\"absolute inset-0 bg-gradient-to-b from-transparent via-white to-transparent opacity-30\"\n                              animate={{\n                                y: ['-100%', '200%']\n                              }}\n                              transition={{\n                                duration: 0.8,\n                                repeat: Infinity,\n                                ease: 'linear'\n                              }}\n                            />\n                          </motion.div>\n                        )}\n\n                        {/* Swap trail effect */}\n                        {isSwapping && (\n                          <>\n                            <motion.div\n                              className=\"absolute -top-2 left-1/2 -translate-x-1/2 w-2 h-2 rounded-full\"\n                              style={{ backgroundColor: barColor }}\n                              animate={{\n                                scale: [1, 1.5, 1],\n                                opacity: [1, 0.5, 1]\n                              }}\n                              transition={{ duration: 0.5, repeat: Infinity }}\n                            />\n                            <motion.div\n                              className=\"absolute inset-0 rounded-t-lg\"\n                              animate={{\n                                boxShadow: [\n                                  `0 0 20px ${barColor}`,\n                                  `0 0 40px ${barColor}`,\n                                  `0 0 20px ${barColor}`\n                                ]\n                              }}\n                              transition={{ duration: 0.3, repeat: Infinity }}\n                            />\n                          </>\n                        )}\n\n                        {/* Value label */}\n                        <motion.div\n                          className=\"absolute -bottom-6 left-1/2 -translate-x-1/2 text-xs font-mono font-bold whitespace-nowrap\"\n                          style={{ \n                            color: barColor,\n                            textShadow: `0 0 10px ${barColor}`\n                          }}\n                          animate={{\n                            scale: isComparing || isSwapping ? 1.2 : 1\n                          }}\n                        >\n                          {element.value}\n                        </motion.div>\n\n                        {/* Sorted checkmark */}\n                        {isSorted && (\n                          <motion.div\n                            initial={{ scale: 0, rotate: -180 }}\n                            animate={{ scale: 1, rotate: 0 }}\n                            className=\"absolute -top-8 left-1/2 -translate-x-1/2 w-6 h-6 rounded-full bg-green-500 flex items-center justify-center\"\n                            style={{\n                              boxShadow: '0 0 20px rgba(0, 255, 0, 0.8)'\n                            }}\n                          >\n                            <svg\n                              className=\"w-4 h-4 text-white\"\n                              fill=\"none\"\n                              strokeLinecap=\"round\"\n                              strokeLinejoin=\"round\"\n                              strokeWidth=\"3\"\n                              viewBox=\"0 0 24 24\"\n                              stroke=\"currentColor\"\n                            >\n                              <path d=\"M5 13l4 4L19 7\" />\n                            </svg>\n                          </motion.div>\n                        )}\n                      </motion.div>\n                    );\n                  })\n                )}\n              </div>\n            </div>\n\n            \n<motion.div\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ delay: 0.4 }}\n              className=\"mt-6 space-y-3\"\n            >\n              <div className=\"flex items-center justify-between text-sm\">\n                <span className=\"text-cyan-400 font-medium\">Sorting Progress</span>\n                <span className=\"text-purple-300 font-mono\">\n                  {steps.length > 0 ? Math.round((currentStep / steps.length) * 100) : 0}%\n                </span>\n              </div>\n              \n              <div className=\"relative h-3 bg-gray-800/80 rounded-full overflow-hidden border border-purple-500/30 shadow-inner\">\n                <motion.div\n                  className=\"absolute inset-y-0 left-0 bg-gradient-to-r from-cyan-500 via-purple-500 to-pink-500 rounded-full shadow-[0_0_20px_rgba(168,85,247,0.8)]\"\n                  initial={{ width: '0%' }}\n                  animate={{ \n                    width: steps.length > 0 ? `${(currentStep / steps.length) * 100}%` : '0%'\n                  }}\n                  transition={{ duration: 0.3, ease: 'easeOut' }}\n                />\n                \n                <motion.div\n                  className=\"absolute inset-0 bg-gradient-to-r from-transparent via-white/30 to-transparent\"\n                  animate={{ x: ['-100%', '200%'] }}\n                  transition={{ \n                    duration: 1.5, \n                    repeat: Infinity, \n                    ease: 'linear',\n                    repeatDelay: 0.5\n                  }}\n                  style={{ \n                    opacity: steps.length > 0 && currentStep < steps.length ? 1 : 0 \n                  }}\n                />\n              </div>\n              \n              <div className=\"flex items-center justify-between text-xs text-gray-500\">\n                <span>Step {currentStep} / {steps.length}</span>\n                {steps.length > 0 && currentStep >= steps.length && (\n                  <motion.span\n                    initial={{ opacity: 0, scale: 0.8 }}\n                    animate={{ opacity: 1, scale: 1 }}\n                    className=\"text-green-400 font-semibold flex items-center gap-1\"\n                  >\n                    \u2713 Complete\n                  </motion.span>\n                )}\n              </div>\n            </motion.div>\n          </div>\n        </div>\n\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ delay: 0.6, duration: 0.8 }}\n          className=\"bg-gray-900/50 backdrop-blur-lg border border-pink-500/30 rounded-xl p-6 shadow-[0_0_30px_rgba(255,0,102,0.3)]\"\n        >\n          <div className=\"flex items-center gap-2 mb-4 text-pink-400\">\n            <BarChart3 className=\"w-5 h-5\" />\n            <h3 className=\"text-lg font-semibold uppercase tracking-wider\">Legend</h3>\n          </div>\n          \n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n            {/* Default State */}\n            <motion.div\n              whileHover={{ scale: 1.05 }}\n              className=\"flex items-center gap-3 p-3 bg-gray-800/50 rounded-lg border border-gray-700/50\"\n            >\n              <motion.div\n                className=\"w-6 h-12 rounded bg-gradient-to-t from-cyan-500 to-cyan-300\"\n                animate={{\n                  boxShadow: [\n                    '0 0 10px rgba(0, 255, 255, 0.5)',\n                    '0 0 20px rgba(0, 255, 255, 0.8)',\n                    '0 0 10px rgba(0, 255, 255, 0.5)'\n                  ]\n                }}\n                transition={{ duration: 2, repeat: Infinity }}\n              />\n              <div>\n                <div className=\"text-sm font-semibold text-white\">Default</div>\n                <div className=\"text-xs text-gray-400\">Unsorted</div>\n              </div>\n            </motion.div>\n\n            {/* Comparing State */}\n            <motion.div\n              whileHover={{ scale: 1.05 }}\n              className=\"flex items-center gap-3 p-3 bg-gray-800/50 rounded-lg border border-yellow-500/30\"\n            >\n              <motion.div\n                className=\"w-6 h-12 rounded bg-gradient-to-t from-yellow-500 to-yellow-300\"\n                animate={{\n                  boxShadow: [\n                    '0 0 15px rgba(255, 255, 0, 0.6)',\n                    '0 0 30px rgba(255, 255, 0, 1)',\n                    '0 0 15px rgba(255, 255, 0, 0.6)'\n                  ],\n                  scale: [1, 1.1, 1]\n                }}\n                transition={{ duration: 1.5, repeat: Infinity }}\n              />\n              <div>\n                <div className=\"text-sm font-semibold text-yellow-300\">Comparing</div>\n                <div className=\"text-xs text-gray-400\">Active</div>\n              </div>\n            </motion.div>\n\n            {/* Swapping State */}\n            <motion.div\n              whileHover={{ scale: 1.05 }}\n              className=\"flex items-center gap-3 p-3 bg-gray-800/50 rounded-lg border border-pink-500/30\"\n            >\n              <motion.div\n                className=\"w-6 h-12 rounded bg-gradient-to-t from-pink-500 to-pink-300\"\n                animate={{\n                  boxShadow: [\n                    '0 0 15px rgba(255, 0, 102, 0.6)',\n                    '0 0 30px rgba(255, 0, 102, 1)',\n                    '0 0 15px rgba(255, 0, 102, 0.6)'\n                  ],\n                  x: [-2, 2, -2]\n                }}\n                transition={{ duration: 1, repeat: Infinity }}\n              />\n              <div>\n                <div className=\"text-sm font-semibold text-pink-300\">Swapping</div>\n                <div className=\"text-xs text-gray-400\">Moving</div>\n              </div>\n            </motion.div>\n\n            {/* Sorted State */}\n            <motion.div\n              whileHover={{ scale: 1.05 }}\n              className=\"flex items-center gap-3 p-3 bg-gray-800/50 rounded-lg border border-green-500/30\"\n            >\n              <motion.div\n                className=\"w-6 h-12 rounded bg-gradient-to-t from-green-500 to-green-300\"\n                animate={{\n                  boxShadow: [\n                    '0 0 15px rgba(0, 255, 0, 0.6)',\n                    '0 0 25px rgba(0, 255, 0, 0.9)',\n                    '0 0 15px rgba(0, 255, 0, 0.6)'\n                  ]\n                }}\n                transition={{ duration: 2, repeat: Infinity }}\n              />\n              <div>\n                <div className=\"text-sm font-semibold text-green-300\">Sorted</div>\n                <div className=\"text-xs text-gray-400\">Complete</div>\n              </div>\n            </motion.div>\n          </div>\n\n          {/* Additional Info */}\n          <motion.div\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            transition={{ delay: 1 }}\n            className=\"mt-4 pt-4 border-t border-gray-700/50\"\n          >\n            <div className=\"flex items-center justify-between text-xs text-gray-400\">\n              <div className=\"flex items-center gap-2\">\n                <motion.div\n                  className=\"w-2 h-2 rounded-full bg-cyan-400\"\n                  animate={{\n                    boxShadow: [\n                      '0 0 5px rgba(0, 255, 255, 0.8)',\n                      '0 0 15px rgba(0, 255, 255, 1)',\n                      '0 0 5px rgba(0, 255, 255, 0.8)'\n                    ]\n                  }}\n                  transition={{ duration: 1.5, repeat: Infinity }}\n                />\n                <span>Bar height represents value</span>\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <motion.div\n                  className=\"w-2 h-2 rounded-full bg-purple-400\"\n                  animate={{\n                    boxShadow: [\n                      '0 0 5px rgba(168, 85, 247, 0.8)',\n                      '0 0 15px rgba(168, 85, 247, 1)',\n                      '0 0 5px rgba(168, 85, 247, 0.8)'\n                    ]\n                  }}\n                  transition={{ duration: 1.5, repeat: Infinity, delay: 0.5 }}\n                />\n                <span>Glow intensity shows activity</span>\n              </div>\n            </div>\n          </motion.div>\n        </motion.div>\n      </div>\n    </div>\n  );\n}\n",
    "error": null,
    "elapsed_time": 89.37697792053223,
    "success": true
  }
}