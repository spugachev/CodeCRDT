{
  "prompt_id": "pomodoro_timer",
  "prompt_name": "Pomodoro Timer",
  "mode": "sequential",
  "run_number": 41,
  "timestamp": "2025-10-13T21:43:42.570508",
  "response_time": 59.32110095024109,
  "total_tokens": null,
  "response_content": "import { useState, useEffect, useRef } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Play, Pause, RotateCcw, Settings } from 'lucide-react';\nimport { motion, AnimatePresence } from 'framer-motion';\n\ntype TimerMode = 'work' | 'shortBreak' | 'longBreak';\n\ninterface TimerSettings {\n  work: number;\n  shortBreak: number;\n  longBreak: number;\n}\n\nexport default function PomodoroTimer() {\n  const [mode, setMode] = useState<TimerMode>('work');\n  const [timeLeft, setTimeLeft] = useState(25 * 60);\n  const [isRunning, setIsRunning] = useState(false);\n  const [showSettings, setShowSettings] = useState(false);\n  const [completedPomodoros, setCompletedPomodoros] = useState(0);\n  const [showCompletion, setShowCompletion] = useState(false);\n  const audioContextRef = useRef<AudioContext | null>(null);\n\n  const [settings, setSettings] = useState<TimerSettings>({\n    work: 25,\n    shortBreak: 5,\n    longBreak: 15,\n  });\n\n  const totalTime = settings[mode] * 60;\n  const progress = ((totalTime - timeLeft) / totalTime) * 100;\n\n  const modeColors = {\n    work: {\n      primary: 'from-rose-500 via-pink-500 to-purple-500',\n      glow: 'shadow-rose-500/50',\n      text: 'text-rose-400',\n      bg: 'bg-rose-500/10',\n    },\n    shortBreak: {\n      primary: 'from-cyan-500 via-blue-500 to-indigo-500',\n      glow: 'shadow-cyan-500/50',\n      text: 'text-cyan-400',\n      bg: 'bg-cyan-500/10',\n    },\n    longBreak: {\n      primary: 'from-emerald-500 via-teal-500 to-green-500',\n      glow: 'shadow-emerald-500/50',\n      text: 'text-emerald-400',\n      bg: 'bg-emerald-500/10',\n    },\n  };\n\n  const currentColors = modeColors[mode];\n\n  useEffect(() => {\n    let interval: NodeJS.Timeout;\n\n    if (isRunning && timeLeft > 0) {\n      interval = setInterval(() => {\n        setTimeLeft((prev) => prev - 1);\n      }, 1000);\n    } else if (timeLeft === 0) {\n      handleTimerComplete();\n    }\n\n    return () => clearInterval(interval);\n  }, [isRunning, timeLeft]);\n\n  const playCompletionSound = () => {\n    if (!audioContextRef.current) {\n      audioContextRef.current = new AudioContext();\n    }\n\n    const ctx = audioContextRef.current;\n    const oscillator = ctx.createOscillator();\n    const gainNode = ctx.createGain();\n\n    oscillator.connect(gainNode);\n    gainNode.connect(ctx.destination);\n\n    oscillator.frequency.setValueAtTime(523.25, ctx.currentTime);\n    oscillator.frequency.setValueAtTime(659.25, ctx.currentTime + 0.1);\n    oscillator.frequency.setValueAtTime(783.99, ctx.currentTime + 0.2);\n\n    gainNode.gain.setValueAtTime(0.3, ctx.currentTime);\n    gainNode.gain.exponentialRampToValueAtTime(0.01, ctx.currentTime + 0.5);\n\n    oscillator.start(ctx.currentTime);\n    oscillator.stop(ctx.currentTime + 0.5);\n  };\n\n  const handleTimerComplete = () => {\n    setIsRunning(false);\n    setShowCompletion(true);\n    playCompletionSound();\n\n    setTimeout(() => {\n      setShowCompletion(false);\n      if (mode === 'work') {\n        setCompletedPomodoros((prev) => prev + 1);\n        const nextMode = (completedPomodoros + 1) % 4 === 0 ? 'longBreak' : 'shortBreak';\n        setMode(nextMode);\n        setTimeLeft(settings[nextMode] * 60);\n      } else {\n        setMode('work');\n        setTimeLeft(settings.work * 60);\n      }\n    }, 2000);\n  };\n\n  const toggleTimer = () => {\n    setIsRunning(!isRunning);\n  };\n\n  const resetTimer = () => {\n    setIsRunning(false);\n    setTimeLeft(settings[mode] * 60);\n  };\n\n  const changeMode = (newMode: TimerMode) => {\n    setMode(newMode);\n    setTimeLeft(settings[newMode] * 60);\n    setIsRunning(false);\n  };\n\n  const formatTime = (seconds: number) => {\n    const mins = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;\n  };\n\n  const particles = Array.from({ length: 30 }, (_, i) => ({\n    id: i,\n    x: Math.random() * 100,\n    y: Math.random() * 100,\n    size: Math.random() * 4 + 2,\n    duration: Math.random() * 20 + 10,\n    delay: Math.random() * 5,\n  }));\n\n  return (\n    <div className=\"min-h-screen relative overflow-hidden bg-gradient-to-br from-slate-950 via-slate-900 to-slate-950\">\n      {/* Animated Background Particles */}\n      <div className=\"absolute inset-0 overflow-hidden\">\n        {particles.map((particle) => (\n          <motion.div\n            key={particle.id}\n            className={`absolute rounded-full ${currentColors.bg} blur-sm`}\n            style={{\n              left: `${particle.x}%`,\n              top: `${particle.y}%`,\n              width: particle.size,\n              height: particle.size,\n            }}\n            animate={{\n              y: [0, -30, 0],\n              opacity: [0.2, 0.5, 0.2],\n              scale: [1, 1.2, 1],\n            }}\n            transition={{\n              duration: particle.duration,\n              repeat: Infinity,\n              delay: particle.delay,\n              ease: 'easeInOut',\n            }}\n          />\n        ))}\n      </div>\n\n      {/* Main Content */}\n      <div className=\"relative z-10 flex flex-col items-center justify-center min-h-screen p-8\">\n        {/* Header */}\n        <motion.div\n          initial={{ opacity: 0, y: -20 }}\n          animate={{ opacity: 1, y: 0 }}\n          className=\"mb-12 text-center\"\n        >\n          <h1 className=\"text-5xl font-bold text-white mb-2 tracking-tight\">\n            Pomodoro Flow\n          </h1>\n          <p className=\"text-slate-400\">Stay focused, stay productive</p>\n        </motion.div>\n\n        {/* Mode Selector */}\n        <motion.div\n          initial={{ opacity: 0, scale: 0.9 }}\n          animate={{ opacity: 1, scale: 1 }}\n          className=\"flex gap-3 mb-12 backdrop-blur-xl bg-white/5 p-2 rounded-2xl border border-white/10\"\n        >\n          {(['work', 'shortBreak', 'longBreak'] as TimerMode[]).map((m) => (\n            <Button\n              key={m}\n              onClick={() => changeMode(m)}\n              variant=\"ghost\"\n              className={`px-6 py-3 rounded-xl transition-all duration-300 ${\n                mode === m\n                  ? `bg-gradient-to-r ${modeColors[m].primary} text-white shadow-lg ${modeColors[m].glow}`\n                  : 'text-slate-400 hover:text-white hover:bg-white/5'\n              }`}\n            >\n              {m === 'work' ? 'Work' : m === 'shortBreak' ? 'Short Break' : 'Long Break'}\n            </Button>\n          ))}\n        </motion.div>\n\n        {/* Timer Circle */}\n        <motion.div\n          initial={{ opacity: 0, scale: 0.8 }}\n          animate={{ opacity: 1, scale: 1 }}\n          transition={{ duration: 0.5 }}\n          className=\"relative mb-12\"\n        >\n          {/* Glass Morphism Container */}\n          <div className=\"relative backdrop-blur-2xl bg-white/5 rounded-full p-8 border border-white/10 shadow-2xl\">\n            {/* SVG Progress Ring */}\n            <svg className=\"w-80 h-80 transform -rotate-90\" viewBox=\"0 0 320 320\">\n              {/* Background Circle */}\n              <circle\n                cx=\"160\"\n                cy=\"160\"\n                r=\"140\"\n                fill=\"none\"\n                stroke=\"rgba(255,255,255,0.05)\"\n                strokeWidth=\"12\"\n              />\n              {/* Progress Circle */}\n              <motion.circle\n                cx=\"160\"\n                cy=\"160\"\n                r=\"140\"\n                fill=\"none\"\n                strokeWidth=\"12\"\n                strokeLinecap=\"round\"\n                className={`drop-shadow-[0_0_20px_currentColor]`}\n                style={{\n                  stroke: `url(#gradient-${mode})`,\n                }}\n                initial={{ strokeDasharray: '0 880' }}\n                animate={{\n                  strokeDasharray: `${(progress / 100) * 880} 880`,\n                }}\n                transition={{ duration: 0.5, ease: 'easeInOut' }}\n              />\n              <defs>\n                <linearGradient id={`gradient-${mode}`} x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"100%\">\n                  <stop offset=\"0%\" stopColor={mode === 'work' ? '#f43f5e' : mode === 'shortBreak' ? '#06b6d4' : '#10b981'} />\n                  <stop offset=\"100%\" stopColor={mode === 'work' ? '#a855f7' : mode === 'shortBreak' ? '#6366f1' : '#14b8a6'} />\n                </linearGradient>\n              </defs>\n            </svg>\n\n            {/* Timer Display */}\n            <div className=\"absolute inset-0 flex flex-col items-center justify-center\">\n              <motion.div\n                key={timeLeft}\n                initial={{ scale: 1.1, opacity: 0 }}\n                animate={{ scale: 1, opacity: 1 }}\n                transition={{ duration: 0.3 }}\n                className=\"text-8xl font-bold text-white tracking-tight\"\n              >\n                {formatTime(timeLeft)}\n              </motion.div>\n              <div className={`text-lg font-medium mt-4 ${currentColors.text}`}>\n                {mode === 'work' ? 'Focus Time' : mode === 'shortBreak' ? 'Short Break' : 'Long Break'}\n              </div>\n              <div className=\"text-sm text-slate-400 mt-2\">\n                Session {completedPomodoros + 1}\n              </div>\n            </div>\n          </div>\n\n          {/* Pulsing Glow Effect */}\n          {isRunning && (\n            <motion.div\n              className={`absolute inset-0 rounded-full bg-gradient-to-r ${currentColors.primary} opacity-20 blur-3xl`}\n              animate={{\n                scale: [1, 1.1, 1],\n                opacity: [0.2, 0.3, 0.2],\n              }}\n              transition={{\n                duration: 2,\n                repeat: Infinity,\n                ease: 'easeInOut',\n              }}\n            />\n          )}\n        </motion.div>\n\n        {/* Controls */}\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ delay: 0.2 }}\n          className=\"flex gap-4\"\n        >\n          <Button\n            onClick={toggleTimer}\n            size=\"lg\"\n            className={`px-8 py-6 rounded-2xl text-lg font-semibold bg-gradient-to-r ${currentColors.primary} hover:opacity-90 transition-all duration-300 shadow-lg ${currentColors.glow}`}\n          >\n            {isRunning ? (\n              <>\n                <Pause className=\"mr-2\" size={24} />\n                Pause\n              </>\n            ) : (\n              <>\n                <Play className=\"mr-2\" size={24} />\n                Start\n              </>\n            )}\n          </Button>\n\n          <Button\n            onClick={resetTimer}\n            size=\"lg\"\n            variant=\"ghost\"\n            className=\"px-6 py-6 rounded-2xl backdrop-blur-xl bg-white/5 hover:bg-white/10 border border-white/10 transition-all duration-300\"\n          >\n            <RotateCcw size={24} />\n          </Button>\n\n          <Button\n            onClick={() => setShowSettings(!showSettings)}\n            size=\"lg\"\n            variant=\"ghost\"\n            className=\"px-6 py-6 rounded-2xl backdrop-blur-xl bg-white/5 hover:bg-white/10 border border-white/10 transition-all duration-300\"\n          >\n            <Settings size={24} />\n          </Button>\n        </motion.div>\n\n        {/* Settings Panel */}\n        <AnimatePresence>\n          {showSettings && (\n            <motion.div\n              initial={{ opacity: 0, y: 20, scale: 0.9 }}\n              animate={{ opacity: 1, y: 0, scale: 1 }}\n              exit={{ opacity: 0, y: 20, scale: 0.9 }}\n              className=\"mt-8 backdrop-blur-2xl bg-white/5 rounded-2xl p-6 border border-white/10 shadow-2xl\"\n            >\n              <h3 className=\"text-xl font-semibold text-white mb-4\">Timer Settings</h3>\n              <div className=\"space-y-4\">\n                {(['work', 'shortBreak', 'longBreak'] as TimerMode[]).map((m) => (\n                  <div key={m} className=\"flex items-center justify-between\">\n                    <label className=\"text-slate-300 capitalize\">\n                      {m === 'shortBreak' ? 'Short Break' : m === 'longBreak' ? 'Long Break' : m}\n                    </label>\n                    <input\n                      type=\"number\"\n                      min=\"1\"\n                      max=\"60\"\n                      value={settings[m]}\n                      onChange={(e) => {\n                        const newSettings = { ...settings, [m]: parseInt(e.target.value) || 1 };\n                        setSettings(newSettings);\n                        if (mode === m) {\n                          setTimeLeft(newSettings[m] * 60);\n                        }\n                      }}\n                      className=\"w-20 px-3 py-2 rounded-lg bg-white/5 border border-white/10 text-white text-center focus:outline-none focus:ring-2 focus:ring-white/20\"\n                    />\n                  </div>\n                ))}\n              </div>\n            </motion.div>\n          )}\n        </AnimatePresence>\n\n        {/* Completion Animation */}\n        <AnimatePresence>\n          {showCompletion && (\n            <motion.div\n              initial={{ opacity: 0, scale: 0 }}\n              animate={{ opacity: 1, scale: 1 }}\n              exit={{ opacity: 0, scale: 0 }}\n              className=\"fixed inset-0 flex items-center justify-center z-50 pointer-events-none\"\n            >\n              <motion.div\n                className={`text-9xl font-bold bg-gradient-to-r ${currentColors.primary} bg-clip-text text-transparent`}\n                animate={{\n                  scale: [1, 1.2, 1],\n                  rotate: [0, 5, -5, 0],\n                }}\n                transition={{ duration: 0.5 }}\n              >\n                \u2713\n              </motion.div>\n              {Array.from({ length: 20 }).map((_, i) => (\n                <motion.div\n                  key={i}\n                  className={`absolute w-4 h-4 rounded-full bg-gradient-to-r ${currentColors.primary}`}\n                  initial={{ scale: 0, x: 0, y: 0 }}\n                  animate={{\n                    scale: [0, 1, 0],\n                    x: Math.cos((i / 20) * Math.PI * 2) * 200,\n                    y: Math.sin((i / 20) * Math.PI * 2) * 200,\n                  }}\n                  transition={{ duration: 1, ease: 'easeOut' }}\n                />\n              ))}\n            </motion.div>\n          )}\n        </AnimatePresence>\n\n        {/* Stats */}\n        <motion.div\n          initial={{ opacity: 0 }}\n          animate={{ opacity: 1 }}\n          transition={{ delay: 0.4 }}\n          className=\"mt-12 backdrop-blur-xl bg-white/5 rounded-2xl p-6 border border-white/10\"\n        >\n          <div className=\"text-center\">\n            <div className=\"text-4xl font-bold text-white mb-2\">{completedPomodoros}</div>\n            <div className=\"text-slate-400\">Completed Sessions</div>\n          </div>\n        </motion.div>\n      </div>\n    </div>\n  );\n}",
  "error": null,
  "overall_score": 60,
  "code_quality_score": 18,
  "architecture_score": 16,
  "performance_score": 14,
  "accessibility_score": 12,
  "metadata": {
    "document_id": "eval_room_977bccd89d51",
    "prompt_category": "productivity",
    "prompt_complexity": 7.0
  },
  "raw_response": {
    "document_id": "eval_room_977bccd89d51",
    "mode": "sequential",
    "prompt": "Build a gorgeous Pomodoro timer with a circular animated progress ring, glass morphism design, smooth color transitions between work/break modes, floating particles background, and satisfying completion animations with sound",
    "content": "import { useState, useEffect, useRef } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Play, Pause, RotateCcw, Settings } from 'lucide-react';\nimport { motion, AnimatePresence } from 'framer-motion';\n\ntype TimerMode = 'work' | 'shortBreak' | 'longBreak';\n\ninterface TimerSettings {\n  work: number;\n  shortBreak: number;\n  longBreak: number;\n}\n\nexport default function PomodoroTimer() {\n  const [mode, setMode] = useState<TimerMode>('work');\n  const [timeLeft, setTimeLeft] = useState(25 * 60);\n  const [isRunning, setIsRunning] = useState(false);\n  const [showSettings, setShowSettings] = useState(false);\n  const [completedPomodoros, setCompletedPomodoros] = useState(0);\n  const [showCompletion, setShowCompletion] = useState(false);\n  const audioContextRef = useRef<AudioContext | null>(null);\n\n  const [settings, setSettings] = useState<TimerSettings>({\n    work: 25,\n    shortBreak: 5,\n    longBreak: 15,\n  });\n\n  const totalTime = settings[mode] * 60;\n  const progress = ((totalTime - timeLeft) / totalTime) * 100;\n\n  const modeColors = {\n    work: {\n      primary: 'from-rose-500 via-pink-500 to-purple-500',\n      glow: 'shadow-rose-500/50',\n      text: 'text-rose-400',\n      bg: 'bg-rose-500/10',\n    },\n    shortBreak: {\n      primary: 'from-cyan-500 via-blue-500 to-indigo-500',\n      glow: 'shadow-cyan-500/50',\n      text: 'text-cyan-400',\n      bg: 'bg-cyan-500/10',\n    },\n    longBreak: {\n      primary: 'from-emerald-500 via-teal-500 to-green-500',\n      glow: 'shadow-emerald-500/50',\n      text: 'text-emerald-400',\n      bg: 'bg-emerald-500/10',\n    },\n  };\n\n  const currentColors = modeColors[mode];\n\n  useEffect(() => {\n    let interval: NodeJS.Timeout;\n\n    if (isRunning && timeLeft > 0) {\n      interval = setInterval(() => {\n        setTimeLeft((prev) => prev - 1);\n      }, 1000);\n    } else if (timeLeft === 0) {\n      handleTimerComplete();\n    }\n\n    return () => clearInterval(interval);\n  }, [isRunning, timeLeft]);\n\n  const playCompletionSound = () => {\n    if (!audioContextRef.current) {\n      audioContextRef.current = new AudioContext();\n    }\n\n    const ctx = audioContextRef.current;\n    const oscillator = ctx.createOscillator();\n    const gainNode = ctx.createGain();\n\n    oscillator.connect(gainNode);\n    gainNode.connect(ctx.destination);\n\n    oscillator.frequency.setValueAtTime(523.25, ctx.currentTime);\n    oscillator.frequency.setValueAtTime(659.25, ctx.currentTime + 0.1);\n    oscillator.frequency.setValueAtTime(783.99, ctx.currentTime + 0.2);\n\n    gainNode.gain.setValueAtTime(0.3, ctx.currentTime);\n    gainNode.gain.exponentialRampToValueAtTime(0.01, ctx.currentTime + 0.5);\n\n    oscillator.start(ctx.currentTime);\n    oscillator.stop(ctx.currentTime + 0.5);\n  };\n\n  const handleTimerComplete = () => {\n    setIsRunning(false);\n    setShowCompletion(true);\n    playCompletionSound();\n\n    setTimeout(() => {\n      setShowCompletion(false);\n      if (mode === 'work') {\n        setCompletedPomodoros((prev) => prev + 1);\n        const nextMode = (completedPomodoros + 1) % 4 === 0 ? 'longBreak' : 'shortBreak';\n        setMode(nextMode);\n        setTimeLeft(settings[nextMode] * 60);\n      } else {\n        setMode('work');\n        setTimeLeft(settings.work * 60);\n      }\n    }, 2000);\n  };\n\n  const toggleTimer = () => {\n    setIsRunning(!isRunning);\n  };\n\n  const resetTimer = () => {\n    setIsRunning(false);\n    setTimeLeft(settings[mode] * 60);\n  };\n\n  const changeMode = (newMode: TimerMode) => {\n    setMode(newMode);\n    setTimeLeft(settings[newMode] * 60);\n    setIsRunning(false);\n  };\n\n  const formatTime = (seconds: number) => {\n    const mins = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;\n  };\n\n  const particles = Array.from({ length: 30 }, (_, i) => ({\n    id: i,\n    x: Math.random() * 100,\n    y: Math.random() * 100,\n    size: Math.random() * 4 + 2,\n    duration: Math.random() * 20 + 10,\n    delay: Math.random() * 5,\n  }));\n\n  return (\n    <div className=\"min-h-screen relative overflow-hidden bg-gradient-to-br from-slate-950 via-slate-900 to-slate-950\">\n      {/* Animated Background Particles */}\n      <div className=\"absolute inset-0 overflow-hidden\">\n        {particles.map((particle) => (\n          <motion.div\n            key={particle.id}\n            className={`absolute rounded-full ${currentColors.bg} blur-sm`}\n            style={{\n              left: `${particle.x}%`,\n              top: `${particle.y}%`,\n              width: particle.size,\n              height: particle.size,\n            }}\n            animate={{\n              y: [0, -30, 0],\n              opacity: [0.2, 0.5, 0.2],\n              scale: [1, 1.2, 1],\n            }}\n            transition={{\n              duration: particle.duration,\n              repeat: Infinity,\n              delay: particle.delay,\n              ease: 'easeInOut',\n            }}\n          />\n        ))}\n      </div>\n\n      {/* Main Content */}\n      <div className=\"relative z-10 flex flex-col items-center justify-center min-h-screen p-8\">\n        {/* Header */}\n        <motion.div\n          initial={{ opacity: 0, y: -20 }}\n          animate={{ opacity: 1, y: 0 }}\n          className=\"mb-12 text-center\"\n        >\n          <h1 className=\"text-5xl font-bold text-white mb-2 tracking-tight\">\n            Pomodoro Flow\n          </h1>\n          <p className=\"text-slate-400\">Stay focused, stay productive</p>\n        </motion.div>\n\n        {/* Mode Selector */}\n        <motion.div\n          initial={{ opacity: 0, scale: 0.9 }}\n          animate={{ opacity: 1, scale: 1 }}\n          className=\"flex gap-3 mb-12 backdrop-blur-xl bg-white/5 p-2 rounded-2xl border border-white/10\"\n        >\n          {(['work', 'shortBreak', 'longBreak'] as TimerMode[]).map((m) => (\n            <Button\n              key={m}\n              onClick={() => changeMode(m)}\n              variant=\"ghost\"\n              className={`px-6 py-3 rounded-xl transition-all duration-300 ${\n                mode === m\n                  ? `bg-gradient-to-r ${modeColors[m].primary} text-white shadow-lg ${modeColors[m].glow}`\n                  : 'text-slate-400 hover:text-white hover:bg-white/5'\n              }`}\n            >\n              {m === 'work' ? 'Work' : m === 'shortBreak' ? 'Short Break' : 'Long Break'}\n            </Button>\n          ))}\n        </motion.div>\n\n        {/* Timer Circle */}\n        <motion.div\n          initial={{ opacity: 0, scale: 0.8 }}\n          animate={{ opacity: 1, scale: 1 }}\n          transition={{ duration: 0.5 }}\n          className=\"relative mb-12\"\n        >\n          {/* Glass Morphism Container */}\n          <div className=\"relative backdrop-blur-2xl bg-white/5 rounded-full p-8 border border-white/10 shadow-2xl\">\n            {/* SVG Progress Ring */}\n            <svg className=\"w-80 h-80 transform -rotate-90\" viewBox=\"0 0 320 320\">\n              {/* Background Circle */}\n              <circle\n                cx=\"160\"\n                cy=\"160\"\n                r=\"140\"\n                fill=\"none\"\n                stroke=\"rgba(255,255,255,0.05)\"\n                strokeWidth=\"12\"\n              />\n              {/* Progress Circle */}\n              <motion.circle\n                cx=\"160\"\n                cy=\"160\"\n                r=\"140\"\n                fill=\"none\"\n                strokeWidth=\"12\"\n                strokeLinecap=\"round\"\n                className={`drop-shadow-[0_0_20px_currentColor]`}\n                style={{\n                  stroke: `url(#gradient-${mode})`,\n                }}\n                initial={{ strokeDasharray: '0 880' }}\n                animate={{\n                  strokeDasharray: `${(progress / 100) * 880} 880`,\n                }}\n                transition={{ duration: 0.5, ease: 'easeInOut' }}\n              />\n              <defs>\n                <linearGradient id={`gradient-${mode}`} x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"100%\">\n                  <stop offset=\"0%\" stopColor={mode === 'work' ? '#f43f5e' : mode === 'shortBreak' ? '#06b6d4' : '#10b981'} />\n                  <stop offset=\"100%\" stopColor={mode === 'work' ? '#a855f7' : mode === 'shortBreak' ? '#6366f1' : '#14b8a6'} />\n                </linearGradient>\n              </defs>\n            </svg>\n\n            {/* Timer Display */}\n            <div className=\"absolute inset-0 flex flex-col items-center justify-center\">\n              <motion.div\n                key={timeLeft}\n                initial={{ scale: 1.1, opacity: 0 }}\n                animate={{ scale: 1, opacity: 1 }}\n                transition={{ duration: 0.3 }}\n                className=\"text-8xl font-bold text-white tracking-tight\"\n              >\n                {formatTime(timeLeft)}\n              </motion.div>\n              <div className={`text-lg font-medium mt-4 ${currentColors.text}`}>\n                {mode === 'work' ? 'Focus Time' : mode === 'shortBreak' ? 'Short Break' : 'Long Break'}\n              </div>\n              <div className=\"text-sm text-slate-400 mt-2\">\n                Session {completedPomodoros + 1}\n              </div>\n            </div>\n          </div>\n\n          {/* Pulsing Glow Effect */}\n          {isRunning && (\n            <motion.div\n              className={`absolute inset-0 rounded-full bg-gradient-to-r ${currentColors.primary} opacity-20 blur-3xl`}\n              animate={{\n                scale: [1, 1.1, 1],\n                opacity: [0.2, 0.3, 0.2],\n              }}\n              transition={{\n                duration: 2,\n                repeat: Infinity,\n                ease: 'easeInOut',\n              }}\n            />\n          )}\n        </motion.div>\n\n        {/* Controls */}\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ delay: 0.2 }}\n          className=\"flex gap-4\"\n        >\n          <Button\n            onClick={toggleTimer}\n            size=\"lg\"\n            className={`px-8 py-6 rounded-2xl text-lg font-semibold bg-gradient-to-r ${currentColors.primary} hover:opacity-90 transition-all duration-300 shadow-lg ${currentColors.glow}`}\n          >\n            {isRunning ? (\n              <>\n                <Pause className=\"mr-2\" size={24} />\n                Pause\n              </>\n            ) : (\n              <>\n                <Play className=\"mr-2\" size={24} />\n                Start\n              </>\n            )}\n          </Button>\n\n          <Button\n            onClick={resetTimer}\n            size=\"lg\"\n            variant=\"ghost\"\n            className=\"px-6 py-6 rounded-2xl backdrop-blur-xl bg-white/5 hover:bg-white/10 border border-white/10 transition-all duration-300\"\n          >\n            <RotateCcw size={24} />\n          </Button>\n\n          <Button\n            onClick={() => setShowSettings(!showSettings)}\n            size=\"lg\"\n            variant=\"ghost\"\n            className=\"px-6 py-6 rounded-2xl backdrop-blur-xl bg-white/5 hover:bg-white/10 border border-white/10 transition-all duration-300\"\n          >\n            <Settings size={24} />\n          </Button>\n        </motion.div>\n\n        {/* Settings Panel */}\n        <AnimatePresence>\n          {showSettings && (\n            <motion.div\n              initial={{ opacity: 0, y: 20, scale: 0.9 }}\n              animate={{ opacity: 1, y: 0, scale: 1 }}\n              exit={{ opacity: 0, y: 20, scale: 0.9 }}\n              className=\"mt-8 backdrop-blur-2xl bg-white/5 rounded-2xl p-6 border border-white/10 shadow-2xl\"\n            >\n              <h3 className=\"text-xl font-semibold text-white mb-4\">Timer Settings</h3>\n              <div className=\"space-y-4\">\n                {(['work', 'shortBreak', 'longBreak'] as TimerMode[]).map((m) => (\n                  <div key={m} className=\"flex items-center justify-between\">\n                    <label className=\"text-slate-300 capitalize\">\n                      {m === 'shortBreak' ? 'Short Break' : m === 'longBreak' ? 'Long Break' : m}\n                    </label>\n                    <input\n                      type=\"number\"\n                      min=\"1\"\n                      max=\"60\"\n                      value={settings[m]}\n                      onChange={(e) => {\n                        const newSettings = { ...settings, [m]: parseInt(e.target.value) || 1 };\n                        setSettings(newSettings);\n                        if (mode === m) {\n                          setTimeLeft(newSettings[m] * 60);\n                        }\n                      }}\n                      className=\"w-20 px-3 py-2 rounded-lg bg-white/5 border border-white/10 text-white text-center focus:outline-none focus:ring-2 focus:ring-white/20\"\n                    />\n                  </div>\n                ))}\n              </div>\n            </motion.div>\n          )}\n        </AnimatePresence>\n\n        {/* Completion Animation */}\n        <AnimatePresence>\n          {showCompletion && (\n            <motion.div\n              initial={{ opacity: 0, scale: 0 }}\n              animate={{ opacity: 1, scale: 1 }}\n              exit={{ opacity: 0, scale: 0 }}\n              className=\"fixed inset-0 flex items-center justify-center z-50 pointer-events-none\"\n            >\n              <motion.div\n                className={`text-9xl font-bold bg-gradient-to-r ${currentColors.primary} bg-clip-text text-transparent`}\n                animate={{\n                  scale: [1, 1.2, 1],\n                  rotate: [0, 5, -5, 0],\n                }}\n                transition={{ duration: 0.5 }}\n              >\n                \u2713\n              </motion.div>\n              {Array.from({ length: 20 }).map((_, i) => (\n                <motion.div\n                  key={i}\n                  className={`absolute w-4 h-4 rounded-full bg-gradient-to-r ${currentColors.primary}`}\n                  initial={{ scale: 0, x: 0, y: 0 }}\n                  animate={{\n                    scale: [0, 1, 0],\n                    x: Math.cos((i / 20) * Math.PI * 2) * 200,\n                    y: Math.sin((i / 20) * Math.PI * 2) * 200,\n                  }}\n                  transition={{ duration: 1, ease: 'easeOut' }}\n                />\n              ))}\n            </motion.div>\n          )}\n        </AnimatePresence>\n\n        {/* Stats */}\n        <motion.div\n          initial={{ opacity: 0 }}\n          animate={{ opacity: 1 }}\n          transition={{ delay: 0.4 }}\n          className=\"mt-12 backdrop-blur-xl bg-white/5 rounded-2xl p-6 border border-white/10\"\n        >\n          <div className=\"text-center\">\n            <div className=\"text-4xl font-bold text-white mb-2\">{completedPomodoros}</div>\n            <div className=\"text-slate-400\">Completed Sessions</div>\n          </div>\n        </motion.div>\n      </div>\n    </div>\n  );\n}",
    "error": null,
    "elapsed_time": 59.32110095024109,
    "success": true
  }
}