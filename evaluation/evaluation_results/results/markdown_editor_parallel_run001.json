{
  "prompt_id": "markdown_editor",
  "prompt_name": "Premium Markdown Editor",
  "mode": "parallel",
  "run_number": 1,
  "timestamp": "2025-10-14T07:41:51.563621",
  "response_time": 54.31600904464722,
  "total_tokens": null,
  "response_content": "import { useState, useCallback } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Bold, Italic, Code, List, ListOrdered, Link, Image, Eye, EyeOff } from 'lucide-react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport ReactMarkdown from 'react-markdown';\nimport { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';\nimport { vscDarkPlus } from 'react-syntax-highlighter/dist/esm/styles/prism';\n\ninterface ToolbarButton {\n  id: string;\n  icon: any;\n  label: string;\n  action: string;\n}\n\nconst toolbarButtons: ToolbarButton[] = [\n  { id: 'bold', icon: Bold, label: 'Bold', action: '**text**' },\n  { id: 'italic', icon: Italic, label: 'Italic', action: '*text*' },\n  { id: 'code', icon: Code, label: 'Code', action: '`code`' },\n  { id: 'list', icon: List, label: 'Bullet List', action: '- item' },\n  { id: 'ordered', icon: ListOrdered, label: 'Numbered List', action: '1. item' },\n  { id: 'link', icon: Link, label: 'Link', action: '[text](url)' },\n  { id: 'image', icon: Image, label: 'Image', action: '![alt](url)' }\n];\n\n// Custom syntax highlighter style with vibrant colors\nconst customCodeStyle = {\n  ...vscDarkPlus,\n  'pre[class*=\"language-\"]': {\n    ...vscDarkPlus['pre[class*=\"language-\"]'],\n    background: '#161b22',\n    borderRadius: '8px',\n    padding: '1rem',\n    margin: '1rem 0',\n    border: '1px solid #30363d',\n    boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.3)',\n  },\n  'code[class*=\"language-\"]': {\n    ...vscDarkPlus['code[class*=\"language-\"]'],\n    background: 'transparent',\n    fontSize: '0.9rem',\n    lineHeight: '1.6',\n  },\n};\n\nconst mockMarkdownContent = `# Welcome to Premium Markdown Editor\n\n## Features\n\nThis is a **bold** statement and this is *italic* text.\n\n### Code Blocks\n\n\\`\\`\\`javascript\nfunction greet(name) {\n  console.log(\\`Hello, \\${name}!\\`);\n  return true;\n}\n\\`\\`\\`\n\n\\`\\`\\`python\ndef calculate(x, y):\n    result = x + y\n    return result\n\\`\\`\\`\n\n### Lists\n\n- First item\n- Second item\n- Third item\n\n1. Numbered one\n2. Numbered two\n3. Numbered three\n\n### Inline Code\n\nUse \\`const variable = 'value'\\` for inline code.\n\n### Links and Images\n\n[Visit Example](https://example.com)\n\n> This is a blockquote with important information.\n\n---\n\n**Try editing this content!**`;\n\nexport default function MarkdownEditor() {\n  const [markdown, setMarkdown] = useState(mockMarkdownContent);\n  const [showPreview, setShowPreview] = useState(true);\n  const [cursorPosition, setCursorPosition] = useState(0);\n\n  const handleMarkdownChange = useCallback((e: React.ChangeEvent<HTMLTextAreaElement>) => {\n    setMarkdown(e.target.value);\n    setCursorPosition(e.target.selectionStart);\n  }, []);\n\n  const togglePreview = useCallback(() => {\n    setShowPreview(prev => !prev);\n  }, []);\n\n  const insertMarkdown = useCallback((syntax: string) => {\n    const textArea = document.querySelector('textarea') as HTMLTextAreaElement;\n    if (!textArea) return;\n\n    const start = cursorPosition;\n    const end = cursorPosition;\n    const textBefore = markdown.substring(0, start);\n    const textAfter = markdown.substring(end);\n    \n    const newMarkdown = textBefore + syntax + textAfter;\n    setMarkdown(newMarkdown);\n    \n    // Set cursor position after inserted syntax\n    setTimeout(() => {\n      textArea.focus();\n      const newCursorPos = start + syntax.length;\n      textArea.setSelectionRange(newCursorPos, newCursorPos);\n      setCursorPosition(newCursorPos);\n    }, 0);\n  }, [markdown, cursorPosition]);\n\n  return (\n    <div className=\"min-h-screen bg-[#0d1117] text-gray-100\">\n      <div className=\"container mx-auto px-4 py-8\">\n                <motion.header\n          initial={{ opacity: 0, y: -20 }}\n          animate={{ opacity: 1, y: 0 }}\n          className=\"mb-8 flex items-center justify-between\"\n        >\n          <div>\n            <h1 className=\"text-4xl font-bold bg-gradient-to-r from-blue-400 via-purple-400 to-pink-400 bg-clip-text text-transparent\">\n              Premium Markdown Editor\n            </h1>\n            <div className=\"mt-2 flex items-center gap-4 text-sm text-gray-400\">\n              <span>{markdown.length} characters</span>\n              <span>\u2022</span>\n              <span>{markdown.split('\\n').length} lines</span>\n              <span>\u2022</span>\n              <span>{markdown.trim().split(/\\s+/).length} words</span>\n            </div>\n          </div>\n          <Button\n            onClick={togglePreview}\n            variant=\"outline\"\n            className=\"bg-[#161b22] border-gray-700 hover:bg-[#1f2937] hover:border-gray-600 transition-all\"\n          >\n            {showPreview ? (\n              <>\n                <EyeOff className=\"mr-2 h-4 w-4\" />\n                Hide Preview\n              </>\n            ) : (\n              <>\n                <Eye className=\"mr-2 h-4 w-4\" />\n                Show Preview\n              </>\n            )}\n          </Button>\n        </motion.header>\n\n        <motion.div\n          initial={{ opacity: 0, y: -20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.5, delay: 0.2 }}\n          className=\"bg-[#161b22] border border-[#30363d] rounded-lg p-3 mb-6 shadow-xl\"\n        >\n          <div className=\"flex flex-wrap gap-2 justify-center\">\n            {toolbarButtons.map((button, index) => (\n              <motion.div\n                key={button.id}\n                initial={{ opacity: 0, scale: 0.8 }}\n                animate={{ opacity: 1, scale: 1 }}\n                transition={{ duration: 0.3, delay: 0.3 + index * 0.05 }}\n                whileHover={{ scale: 1.1, y: -2 }}\n                whileTap={{ scale: 0.95 }}\n              >\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={() => insertMarkdown(button.action)}\n                  className=\"relative group bg-[#21262d] hover:bg-[#30363d] border border-[#30363d] hover:border-[#58a6ff] text-gray-300 hover:text-[#58a6ff] transition-all duration-200\"\n                  title={button.label}\n                >\n                  <button.icon className=\"w-4 h-4\" />\n                  <motion.div\n                    className=\"absolute -bottom-8 left-1/2 transform -translate-x-1/2 bg-[#1f6feb] text-white text-xs px-2 py-1 rounded whitespace-nowrap pointer-events-none\"\n                    initial={{ opacity: 0, y: -5 }}\n                    whileHover={{ opacity: 1, y: 0 }}\n                  >\n                    {button.label}\n                  </motion.div>\n                </Button>\n              </motion.div>\n            ))}\n          </div>\n        </motion.div></parameter>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6 mt-6\">\n          <div className=\"relative\">\n                        <div className=\"relative bg-[#161b22] rounded-lg border border-gray-800 overflow-hidden\">\n              <div className=\"flex items-center justify-between px-4 py-2 bg-[#0d1117] border-b border-gray-800\">\n                <span className=\"text-sm font-medium text-gray-400\">Editor</span>\n                <span className=\"text-xs text-gray-500\">{markdown.length} characters</span>\n              </div>\n              \n              <div className=\"relative\">\n                {/* Line numbers */}\n                <div className=\"absolute left-0 top-0 bottom-0 w-12 bg-[#0d1117] border-r border-gray-800 py-4 text-right pr-3 select-none pointer-events-none z-10\">\n                  {markdown.split('\\n').map((_, index) => (\n                    <div key={index} className=\"text-xs text-gray-600 leading-6 font-mono\">\n                      {index + 1}\n                    </div>\n                  ))}\n                </div>\n\n                {/* Syntax highlighting overlay */}\n                <div className=\"absolute left-12 top-0 py-4 px-4 pointer-events-none z-0 font-mono text-sm leading-6 whitespace-pre-wrap break-words overflow-hidden\">\n                  {markdown.split('\\n').map((line, index) => {\n                    // Heading syntax\n                    if (line.startsWith('# ')) {\n                      return <div key={index} className=\"text-[#58a6ff] font-bold text-xl\">{line}</div>;\n                    }\n                    if (line.startsWith('## ')) {\n                      return <div key={index} className=\"text-[#58a6ff] font-bold text-lg\">{line}</div>;\n                    }\n                    if (line.startsWith('### ')) {\n                      return <div key={index} className=\"text-[#58a6ff] font-bold\">{line}</div>;\n                    }\n                    \n                    // Code block detection\n                    if (line.startsWith('```')) {\n                      return <div key={index} className=\"text-[#79c0ff]\">{line}</div>;\n                    }\n                    \n                    // List items\n                    if (line.match(/^[\\s]*[-*+]\\s/)) {\n                      return <div key={index} className=\"text-gray-300\">\n                        <span className=\"text-[#ff7b72]\">{line.match(/^[\\s]*[-*+]/)?.[0]}</span>\n                        {line.replace(/^[\\s]*[-*+]\\s/, ' ')}\n                      </div>;\n                    }\n                    \n                    // Numbered lists\n                    if (line.match(/^[\\s]*\\d+\\.\\s/)) {\n                      return <div key={index} className=\"text-gray-300\">\n                        <span className=\"text-[#ff7b72]\">{line.match(/^[\\s]*\\d+\\./)?.[0]}</span>\n                        {line.replace(/^[\\s]*\\d+\\.\\s/, ' ')}\n                      </div>;\n                    }\n                    \n                    // Blockquote\n                    if (line.startsWith('>')) {\n                      return <div key={index} className=\"text-[#8b949e] italic\">{line}</div>;\n                    }\n                    \n                    // Horizontal rule\n                    if (line.match(/^---+$/)) {\n                      return <div key={index} className=\"text-gray-600\">{line}</div>;\n                    }\n                    \n                    // Process inline syntax\n                    let processedLine = line;\n                    const parts: JSX.Element[] = [];\n                    let lastIndex = 0;\n                    \n                    // Bold **text**\n                    const boldRegex = /\\*\\*(.+?)\\*\\*/g;\n                    let match;\n                    const matches: Array<{type: string, start: number, end: number, content: string}> = [];\n                    \n                    while ((match = boldRegex.exec(line)) !== null) {\n                      matches.push({type: 'bold', start: match.index, end: match.index + match[0].length, content: match[0]});\n                    }\n                    \n                    // Italic *text*\n                    const italicRegex = /\\*(.+?)\\*/g;\n                    while ((match = italicRegex.exec(line)) !== null) {\n                      if (!matches.some(m => m.start <= match.index && m.end >= match.index + match[0].length)) {\n                        matches.push({type: 'italic', start: match.index, end: match.index + match[0].length, content: match[0]});\n                      }\n                    }\n                    \n                    // Inline code `code`\n                    const codeRegex = /`(.+?)`/g;\n                    while ((match = codeRegex.exec(line)) !== null) {\n                      matches.push({type: 'code', start: match.index, end: match.index + match[0].length, content: match[0]});\n                    }\n                    \n                    // Links [text](url)\n                    const linkRegex = /\\[(.+?)\\]\\((.+?)\\)/g;\n                    while ((match = linkRegex.exec(line)) !== null) {\n                      matches.push({type: 'link', start: match.index, end: match.index + match[0].length, content: match[0]});\n                    }\n                    \n                    // Sort matches by start position\n                    matches.sort((a, b) => a.start - b.start);\n                    \n                    if (matches.length > 0) {\n                      matches.forEach((m, i) => {\n                        if (m.start > lastIndex) {\n                          parts.push(<span key={`text-${i}`}>{line.substring(lastIndex, m.start)}</span>);\n                        }\n                        \n                        if (m.type === 'bold') {\n                          parts.push(<span key={`bold-${i}`} className=\"text-[#ffa657] font-bold\">{m.content}</span>);\n                        } else if (m.type === 'italic') {\n                          parts.push(<span key={`italic-${i}`} className=\"text-[#a5d6ff] italic\">{m.content}</span>);\n                        } else if (m.type === 'code') {\n                          parts.push(<span key={`code-${i}`} className=\"text-[#a5d6ff] bg-[#1f2937] px-1 rounded\">{m.content}</span>);\n                        } else if (m.type === 'link') {\n                          parts.push(<span key={`link-${i}`} className=\"text-[#58a6ff] underline\">{m.content}</span>);\n                        }\n                        \n                        lastIndex = m.end;\n                      });\n                      \n                      if (lastIndex < line.length) {\n                        parts.push(<span key={`text-end`}>{line.substring(lastIndex)}</span>);\n                      }\n                      \n                      return <div key={index} className=\"text-gray-300\">{parts}</div>;\n                    }\n                    \n                    return <div key={index} className=\"text-gray-300\">{line || '\\u00A0'}</div>;\n                  })}\n                </div>\n\n                {/* Textarea */}\n                <textarea\n                  value={markdown}\n                  onChange={handleMarkdownChange}\n                  onSelect={(e) => setCursorPosition((e.target as HTMLTextAreaElement).selectionStart)}\n                  className=\"relative w-full h-[600px] bg-transparent text-transparent caret-white pl-16 pr-4 py-4 font-mono text-sm leading-6 resize-none focus:outline-none focus:ring-2 focus:ring-[#58a6ff] focus:ring-opacity-50 rounded-lg z-20\"\n                  style={{ caretColor: '#58a6ff' }}\n                  spellCheck={false}\n                />\n              </div>\n            </div>\n          </div>\n\n          <AnimatePresence mode=\"wait\">\n            {showPreview && (\n              <motion.div\n                initial={{ opacity: 0, x: 20 }}\n                animate={{ opacity: 1, x: 0 }}\n                exit={{ opacity: 0, x: 20 }}\n                transition={{ duration: 0.3 }}\n                className=\"relative\"\n              >\n                <div className=\"bg-[#0d1117] border border-[#30363d] rounded-lg p-6 h-[600px] overflow-y-auto\">\n                  <div className=\"prose prose-invert prose-slate max-w-none\">\n                    <ReactMarkdown\n                      components={{\n                        code({ node, inline, className, children, ...props }) {\n                          const match = /language-(\\w+)/.exec(className || '');\n                          return !inline && match ? (\n                            <SyntaxHighlighter\n                              style={customCodeStyle}\n                              language={match[1]}\n                              PreTag=\"div\"\n                              customStyle={{\n                                margin: '1rem 0',\n                                borderRadius: '8px',\n                                fontSize: '0.9rem',\n                              }}\n                              {...props}\n                            >\n                              {String(children).replace(/\\n$/, '')}\n                            </SyntaxHighlighter>\n                          ) : (\n                            <code\n                              className=\"bg-[#161b22] text-[#79c0ff] px-1.5 py-0.5 rounded text-sm border border-[#30363d]\"\n                              {...props}\n                            >\n                              {children}\n                            </code>\n                          );\n                        },\n                        h1: ({ children }) => (\n                          <h1 className=\"text-4xl font-bold text-white mb-4 mt-6 pb-2 border-b border-[#30363d]\">\n                            {children}\n                          </h1>\n                        ),\n                        h2: ({ children }) => (\n                          <h2 className=\"text-3xl font-bold text-white mb-3 mt-5 pb-2 border-b border-[#30363d]\">\n                            {children}\n                          </h2>\n                        ),\n                        h3: ({ children }) => (\n                          <h3 className=\"text-2xl font-semibold text-white mb-2 mt-4\">\n                            {children}\n                          </h3>\n                        ),\n                        p: ({ children }) => (\n                          <p className=\"text-gray-300 mb-4 leading-7\">{children}</p>\n                        ),\n                        strong: ({ children }) => (\n                          <strong className=\"text-[#79c0ff] font-semibold\">{children}</strong>\n                        ),\n                        em: ({ children }) => (\n                          <em className=\"text-[#a5d6ff] italic\">{children}</em>\n                        ),\n                        ul: ({ children }) => (\n                          <ul className=\"list-disc list-inside mb-4 space-y-2 text-gray-300\">\n                            {children}\n                          </ul>\n                        ),\n                        ol: ({ children }) => (\n                          <ol className=\"list-decimal list-inside mb-4 space-y-2 text-gray-300\">\n                            {children}\n                          </ol>\n                        ),\n                        li: ({ children }) => (\n                          <li className=\"text-gray-300 ml-4\">{children}</li>\n                        ),\n                        a: ({ href, children }) => (\n                          <a\n                            href={href}\n                            className=\"text-[#58a6ff] hover:text-[#79c0ff] underline transition-colors\"\n                            target=\"_blank\"\n                            rel=\"noopener noreferrer\"\n                          >\n                            {children}\n                          </a>\n                        ),\n                        blockquote: ({ children }) => (\n                          <blockquote className=\"border-l-4 border-[#58a6ff] pl-4 py-2 my-4 bg-[#161b22] rounded-r-lg text-gray-300 italic\">\n                            {children}\n                          </blockquote>\n                        ),\n                        hr: () => (\n                          <hr className=\"border-[#30363d] my-6\" />\n                        ),\n                        img: ({ src, alt }) => (\n                          <img\n                            src={src}\n                            alt={alt}\n                            className=\"rounded-lg border border-[#30363d] max-w-full h-auto my-4\"\n                          />\n                        ),\n                      }}\n                    >\n                      {markdown}\n                    </ReactMarkdown>\n                  </div>\n                </div>\n              </motion.div>\n            )}\n          </AnimatePresence>\n        </div>\n\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ delay: 0.2, duration: 0.4 }}\n          className=\"mt-8 bg-[#161b22] border border-[#30363d] rounded-lg p-4\"\n        >\n          <div className=\"flex items-center justify-between text-sm\">\n            <div className=\"flex items-center gap-6\">\n              <div className=\"flex items-center gap-2\">\n                <span className=\"text-gray-400\">Words:</span>\n                <span className=\"text-blue-400 font-semibold\">\n                  {markdown.trim().split(/\\s+/).filter(word => word.length > 0).length}\n                </span>\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <span className=\"text-gray-400\">Characters:</span>\n                <span className=\"text-green-400 font-semibold\">\n                  {markdown.length}\n                </span>\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <span className=\"text-gray-400\">Lines:</span>\n                <span className=\"text-purple-400 font-semibold\">\n                  {markdown.split('\\n').length}\n                </span>\n              </div>\n            </div>\n            <div className=\"text-gray-500 text-xs\">\n              Cursor: {cursorPosition}\n            </div>\n          </div>\n        </motion.div>\n      </div>\n    </div>\n  );\n}",
  "error": null,
  "overall_score": 53,
  "code_quality_score": 16,
  "architecture_score": 14,
  "performance_score": 11,
  "accessibility_score": 12,
  "metadata": {
    "document_id": "eval_room_2463793f8843",
    "prompt_category": "productivity",
    "prompt_complexity": 8.0
  },
  "raw_response": {
    "document_id": "eval_room_2463793f8843",
    "mode": "parallel",
    "prompt": "Create a premium markdown editor with dark theme, syntax highlighting with vibrant colors, smooth live preview transitions, floating toolbar with hover effects, and code block styling like VS Code",
    "content": "import { useState, useCallback } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Bold, Italic, Code, List, ListOrdered, Link, Image, Eye, EyeOff } from 'lucide-react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport ReactMarkdown from 'react-markdown';\nimport { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';\nimport { vscDarkPlus } from 'react-syntax-highlighter/dist/esm/styles/prism';\n\ninterface ToolbarButton {\n  id: string;\n  icon: any;\n  label: string;\n  action: string;\n}\n\nconst toolbarButtons: ToolbarButton[] = [\n  { id: 'bold', icon: Bold, label: 'Bold', action: '**text**' },\n  { id: 'italic', icon: Italic, label: 'Italic', action: '*text*' },\n  { id: 'code', icon: Code, label: 'Code', action: '`code`' },\n  { id: 'list', icon: List, label: 'Bullet List', action: '- item' },\n  { id: 'ordered', icon: ListOrdered, label: 'Numbered List', action: '1. item' },\n  { id: 'link', icon: Link, label: 'Link', action: '[text](url)' },\n  { id: 'image', icon: Image, label: 'Image', action: '![alt](url)' }\n];\n\n// Custom syntax highlighter style with vibrant colors\nconst customCodeStyle = {\n  ...vscDarkPlus,\n  'pre[class*=\"language-\"]': {\n    ...vscDarkPlus['pre[class*=\"language-\"]'],\n    background: '#161b22',\n    borderRadius: '8px',\n    padding: '1rem',\n    margin: '1rem 0',\n    border: '1px solid #30363d',\n    boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.3)',\n  },\n  'code[class*=\"language-\"]': {\n    ...vscDarkPlus['code[class*=\"language-\"]'],\n    background: 'transparent',\n    fontSize: '0.9rem',\n    lineHeight: '1.6',\n  },\n};\n\nconst mockMarkdownContent = `# Welcome to Premium Markdown Editor\n\n## Features\n\nThis is a **bold** statement and this is *italic* text.\n\n### Code Blocks\n\n\\`\\`\\`javascript\nfunction greet(name) {\n  console.log(\\`Hello, \\${name}!\\`);\n  return true;\n}\n\\`\\`\\`\n\n\\`\\`\\`python\ndef calculate(x, y):\n    result = x + y\n    return result\n\\`\\`\\`\n\n### Lists\n\n- First item\n- Second item\n- Third item\n\n1. Numbered one\n2. Numbered two\n3. Numbered three\n\n### Inline Code\n\nUse \\`const variable = 'value'\\` for inline code.\n\n### Links and Images\n\n[Visit Example](https://example.com)\n\n> This is a blockquote with important information.\n\n---\n\n**Try editing this content!**`;\n\nexport default function MarkdownEditor() {\n  const [markdown, setMarkdown] = useState(mockMarkdownContent);\n  const [showPreview, setShowPreview] = useState(true);\n  const [cursorPosition, setCursorPosition] = useState(0);\n\n  const handleMarkdownChange = useCallback((e: React.ChangeEvent<HTMLTextAreaElement>) => {\n    setMarkdown(e.target.value);\n    setCursorPosition(e.target.selectionStart);\n  }, []);\n\n  const togglePreview = useCallback(() => {\n    setShowPreview(prev => !prev);\n  }, []);\n\n  const insertMarkdown = useCallback((syntax: string) => {\n    const textArea = document.querySelector('textarea') as HTMLTextAreaElement;\n    if (!textArea) return;\n\n    const start = cursorPosition;\n    const end = cursorPosition;\n    const textBefore = markdown.substring(0, start);\n    const textAfter = markdown.substring(end);\n    \n    const newMarkdown = textBefore + syntax + textAfter;\n    setMarkdown(newMarkdown);\n    \n    // Set cursor position after inserted syntax\n    setTimeout(() => {\n      textArea.focus();\n      const newCursorPos = start + syntax.length;\n      textArea.setSelectionRange(newCursorPos, newCursorPos);\n      setCursorPosition(newCursorPos);\n    }, 0);\n  }, [markdown, cursorPosition]);\n\n  return (\n    <div className=\"min-h-screen bg-[#0d1117] text-gray-100\">\n      <div className=\"container mx-auto px-4 py-8\">\n                <motion.header\n          initial={{ opacity: 0, y: -20 }}\n          animate={{ opacity: 1, y: 0 }}\n          className=\"mb-8 flex items-center justify-between\"\n        >\n          <div>\n            <h1 className=\"text-4xl font-bold bg-gradient-to-r from-blue-400 via-purple-400 to-pink-400 bg-clip-text text-transparent\">\n              Premium Markdown Editor\n            </h1>\n            <div className=\"mt-2 flex items-center gap-4 text-sm text-gray-400\">\n              <span>{markdown.length} characters</span>\n              <span>\u2022</span>\n              <span>{markdown.split('\\n').length} lines</span>\n              <span>\u2022</span>\n              <span>{markdown.trim().split(/\\s+/).length} words</span>\n            </div>\n          </div>\n          <Button\n            onClick={togglePreview}\n            variant=\"outline\"\n            className=\"bg-[#161b22] border-gray-700 hover:bg-[#1f2937] hover:border-gray-600 transition-all\"\n          >\n            {showPreview ? (\n              <>\n                <EyeOff className=\"mr-2 h-4 w-4\" />\n                Hide Preview\n              </>\n            ) : (\n              <>\n                <Eye className=\"mr-2 h-4 w-4\" />\n                Show Preview\n              </>\n            )}\n          </Button>\n        </motion.header>\n\n        <motion.div\n          initial={{ opacity: 0, y: -20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.5, delay: 0.2 }}\n          className=\"bg-[#161b22] border border-[#30363d] rounded-lg p-3 mb-6 shadow-xl\"\n        >\n          <div className=\"flex flex-wrap gap-2 justify-center\">\n            {toolbarButtons.map((button, index) => (\n              <motion.div\n                key={button.id}\n                initial={{ opacity: 0, scale: 0.8 }}\n                animate={{ opacity: 1, scale: 1 }}\n                transition={{ duration: 0.3, delay: 0.3 + index * 0.05 }}\n                whileHover={{ scale: 1.1, y: -2 }}\n                whileTap={{ scale: 0.95 }}\n              >\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={() => insertMarkdown(button.action)}\n                  className=\"relative group bg-[#21262d] hover:bg-[#30363d] border border-[#30363d] hover:border-[#58a6ff] text-gray-300 hover:text-[#58a6ff] transition-all duration-200\"\n                  title={button.label}\n                >\n                  <button.icon className=\"w-4 h-4\" />\n                  <motion.div\n                    className=\"absolute -bottom-8 left-1/2 transform -translate-x-1/2 bg-[#1f6feb] text-white text-xs px-2 py-1 rounded whitespace-nowrap pointer-events-none\"\n                    initial={{ opacity: 0, y: -5 }}\n                    whileHover={{ opacity: 1, y: 0 }}\n                  >\n                    {button.label}\n                  </motion.div>\n                </Button>\n              </motion.div>\n            ))}\n          </div>\n        </motion.div></parameter>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6 mt-6\">\n          <div className=\"relative\">\n                        <div className=\"relative bg-[#161b22] rounded-lg border border-gray-800 overflow-hidden\">\n              <div className=\"flex items-center justify-between px-4 py-2 bg-[#0d1117] border-b border-gray-800\">\n                <span className=\"text-sm font-medium text-gray-400\">Editor</span>\n                <span className=\"text-xs text-gray-500\">{markdown.length} characters</span>\n              </div>\n              \n              <div className=\"relative\">\n                {/* Line numbers */}\n                <div className=\"absolute left-0 top-0 bottom-0 w-12 bg-[#0d1117] border-r border-gray-800 py-4 text-right pr-3 select-none pointer-events-none z-10\">\n                  {markdown.split('\\n').map((_, index) => (\n                    <div key={index} className=\"text-xs text-gray-600 leading-6 font-mono\">\n                      {index + 1}\n                    </div>\n                  ))}\n                </div>\n\n                {/* Syntax highlighting overlay */}\n                <div className=\"absolute left-12 top-0 py-4 px-4 pointer-events-none z-0 font-mono text-sm leading-6 whitespace-pre-wrap break-words overflow-hidden\">\n                  {markdown.split('\\n').map((line, index) => {\n                    // Heading syntax\n                    if (line.startsWith('# ')) {\n                      return <div key={index} className=\"text-[#58a6ff] font-bold text-xl\">{line}</div>;\n                    }\n                    if (line.startsWith('## ')) {\n                      return <div key={index} className=\"text-[#58a6ff] font-bold text-lg\">{line}</div>;\n                    }\n                    if (line.startsWith('### ')) {\n                      return <div key={index} className=\"text-[#58a6ff] font-bold\">{line}</div>;\n                    }\n                    \n                    // Code block detection\n                    if (line.startsWith('```')) {\n                      return <div key={index} className=\"text-[#79c0ff]\">{line}</div>;\n                    }\n                    \n                    // List items\n                    if (line.match(/^[\\s]*[-*+]\\s/)) {\n                      return <div key={index} className=\"text-gray-300\">\n                        <span className=\"text-[#ff7b72]\">{line.match(/^[\\s]*[-*+]/)?.[0]}</span>\n                        {line.replace(/^[\\s]*[-*+]\\s/, ' ')}\n                      </div>;\n                    }\n                    \n                    // Numbered lists\n                    if (line.match(/^[\\s]*\\d+\\.\\s/)) {\n                      return <div key={index} className=\"text-gray-300\">\n                        <span className=\"text-[#ff7b72]\">{line.match(/^[\\s]*\\d+\\./)?.[0]}</span>\n                        {line.replace(/^[\\s]*\\d+\\.\\s/, ' ')}\n                      </div>;\n                    }\n                    \n                    // Blockquote\n                    if (line.startsWith('>')) {\n                      return <div key={index} className=\"text-[#8b949e] italic\">{line}</div>;\n                    }\n                    \n                    // Horizontal rule\n                    if (line.match(/^---+$/)) {\n                      return <div key={index} className=\"text-gray-600\">{line}</div>;\n                    }\n                    \n                    // Process inline syntax\n                    let processedLine = line;\n                    const parts: JSX.Element[] = [];\n                    let lastIndex = 0;\n                    \n                    // Bold **text**\n                    const boldRegex = /\\*\\*(.+?)\\*\\*/g;\n                    let match;\n                    const matches: Array<{type: string, start: number, end: number, content: string}> = [];\n                    \n                    while ((match = boldRegex.exec(line)) !== null) {\n                      matches.push({type: 'bold', start: match.index, end: match.index + match[0].length, content: match[0]});\n                    }\n                    \n                    // Italic *text*\n                    const italicRegex = /\\*(.+?)\\*/g;\n                    while ((match = italicRegex.exec(line)) !== null) {\n                      if (!matches.some(m => m.start <= match.index && m.end >= match.index + match[0].length)) {\n                        matches.push({type: 'italic', start: match.index, end: match.index + match[0].length, content: match[0]});\n                      }\n                    }\n                    \n                    // Inline code `code`\n                    const codeRegex = /`(.+?)`/g;\n                    while ((match = codeRegex.exec(line)) !== null) {\n                      matches.push({type: 'code', start: match.index, end: match.index + match[0].length, content: match[0]});\n                    }\n                    \n                    // Links [text](url)\n                    const linkRegex = /\\[(.+?)\\]\\((.+?)\\)/g;\n                    while ((match = linkRegex.exec(line)) !== null) {\n                      matches.push({type: 'link', start: match.index, end: match.index + match[0].length, content: match[0]});\n                    }\n                    \n                    // Sort matches by start position\n                    matches.sort((a, b) => a.start - b.start);\n                    \n                    if (matches.length > 0) {\n                      matches.forEach((m, i) => {\n                        if (m.start > lastIndex) {\n                          parts.push(<span key={`text-${i}`}>{line.substring(lastIndex, m.start)}</span>);\n                        }\n                        \n                        if (m.type === 'bold') {\n                          parts.push(<span key={`bold-${i}`} className=\"text-[#ffa657] font-bold\">{m.content}</span>);\n                        } else if (m.type === 'italic') {\n                          parts.push(<span key={`italic-${i}`} className=\"text-[#a5d6ff] italic\">{m.content}</span>);\n                        } else if (m.type === 'code') {\n                          parts.push(<span key={`code-${i}`} className=\"text-[#a5d6ff] bg-[#1f2937] px-1 rounded\">{m.content}</span>);\n                        } else if (m.type === 'link') {\n                          parts.push(<span key={`link-${i}`} className=\"text-[#58a6ff] underline\">{m.content}</span>);\n                        }\n                        \n                        lastIndex = m.end;\n                      });\n                      \n                      if (lastIndex < line.length) {\n                        parts.push(<span key={`text-end`}>{line.substring(lastIndex)}</span>);\n                      }\n                      \n                      return <div key={index} className=\"text-gray-300\">{parts}</div>;\n                    }\n                    \n                    return <div key={index} className=\"text-gray-300\">{line || '\\u00A0'}</div>;\n                  })}\n                </div>\n\n                {/* Textarea */}\n                <textarea\n                  value={markdown}\n                  onChange={handleMarkdownChange}\n                  onSelect={(e) => setCursorPosition((e.target as HTMLTextAreaElement).selectionStart)}\n                  className=\"relative w-full h-[600px] bg-transparent text-transparent caret-white pl-16 pr-4 py-4 font-mono text-sm leading-6 resize-none focus:outline-none focus:ring-2 focus:ring-[#58a6ff] focus:ring-opacity-50 rounded-lg z-20\"\n                  style={{ caretColor: '#58a6ff' }}\n                  spellCheck={false}\n                />\n              </div>\n            </div>\n          </div>\n\n          <AnimatePresence mode=\"wait\">\n            {showPreview && (\n              <motion.div\n                initial={{ opacity: 0, x: 20 }}\n                animate={{ opacity: 1, x: 0 }}\n                exit={{ opacity: 0, x: 20 }}\n                transition={{ duration: 0.3 }}\n                className=\"relative\"\n              >\n                <div className=\"bg-[#0d1117] border border-[#30363d] rounded-lg p-6 h-[600px] overflow-y-auto\">\n                  <div className=\"prose prose-invert prose-slate max-w-none\">\n                    <ReactMarkdown\n                      components={{\n                        code({ node, inline, className, children, ...props }) {\n                          const match = /language-(\\w+)/.exec(className || '');\n                          return !inline && match ? (\n                            <SyntaxHighlighter\n                              style={customCodeStyle}\n                              language={match[1]}\n                              PreTag=\"div\"\n                              customStyle={{\n                                margin: '1rem 0',\n                                borderRadius: '8px',\n                                fontSize: '0.9rem',\n                              }}\n                              {...props}\n                            >\n                              {String(children).replace(/\\n$/, '')}\n                            </SyntaxHighlighter>\n                          ) : (\n                            <code\n                              className=\"bg-[#161b22] text-[#79c0ff] px-1.5 py-0.5 rounded text-sm border border-[#30363d]\"\n                              {...props}\n                            >\n                              {children}\n                            </code>\n                          );\n                        },\n                        h1: ({ children }) => (\n                          <h1 className=\"text-4xl font-bold text-white mb-4 mt-6 pb-2 border-b border-[#30363d]\">\n                            {children}\n                          </h1>\n                        ),\n                        h2: ({ children }) => (\n                          <h2 className=\"text-3xl font-bold text-white mb-3 mt-5 pb-2 border-b border-[#30363d]\">\n                            {children}\n                          </h2>\n                        ),\n                        h3: ({ children }) => (\n                          <h3 className=\"text-2xl font-semibold text-white mb-2 mt-4\">\n                            {children}\n                          </h3>\n                        ),\n                        p: ({ children }) => (\n                          <p className=\"text-gray-300 mb-4 leading-7\">{children}</p>\n                        ),\n                        strong: ({ children }) => (\n                          <strong className=\"text-[#79c0ff] font-semibold\">{children}</strong>\n                        ),\n                        em: ({ children }) => (\n                          <em className=\"text-[#a5d6ff] italic\">{children}</em>\n                        ),\n                        ul: ({ children }) => (\n                          <ul className=\"list-disc list-inside mb-4 space-y-2 text-gray-300\">\n                            {children}\n                          </ul>\n                        ),\n                        ol: ({ children }) => (\n                          <ol className=\"list-decimal list-inside mb-4 space-y-2 text-gray-300\">\n                            {children}\n                          </ol>\n                        ),\n                        li: ({ children }) => (\n                          <li className=\"text-gray-300 ml-4\">{children}</li>\n                        ),\n                        a: ({ href, children }) => (\n                          <a\n                            href={href}\n                            className=\"text-[#58a6ff] hover:text-[#79c0ff] underline transition-colors\"\n                            target=\"_blank\"\n                            rel=\"noopener noreferrer\"\n                          >\n                            {children}\n                          </a>\n                        ),\n                        blockquote: ({ children }) => (\n                          <blockquote className=\"border-l-4 border-[#58a6ff] pl-4 py-2 my-4 bg-[#161b22] rounded-r-lg text-gray-300 italic\">\n                            {children}\n                          </blockquote>\n                        ),\n                        hr: () => (\n                          <hr className=\"border-[#30363d] my-6\" />\n                        ),\n                        img: ({ src, alt }) => (\n                          <img\n                            src={src}\n                            alt={alt}\n                            className=\"rounded-lg border border-[#30363d] max-w-full h-auto my-4\"\n                          />\n                        ),\n                      }}\n                    >\n                      {markdown}\n                    </ReactMarkdown>\n                  </div>\n                </div>\n              </motion.div>\n            )}\n          </AnimatePresence>\n        </div>\n\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ delay: 0.2, duration: 0.4 }}\n          className=\"mt-8 bg-[#161b22] border border-[#30363d] rounded-lg p-4\"\n        >\n          <div className=\"flex items-center justify-between text-sm\">\n            <div className=\"flex items-center gap-6\">\n              <div className=\"flex items-center gap-2\">\n                <span className=\"text-gray-400\">Words:</span>\n                <span className=\"text-blue-400 font-semibold\">\n                  {markdown.trim().split(/\\s+/).filter(word => word.length > 0).length}\n                </span>\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <span className=\"text-gray-400\">Characters:</span>\n                <span className=\"text-green-400 font-semibold\">\n                  {markdown.length}\n                </span>\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <span className=\"text-gray-400\">Lines:</span>\n                <span className=\"text-purple-400 font-semibold\">\n                  {markdown.split('\\n').length}\n                </span>\n              </div>\n            </div>\n            <div className=\"text-gray-500 text-xs\">\n              Cursor: {cursorPosition}\n            </div>\n          </div>\n        </motion.div>\n      </div>\n    </div>\n  );\n}",
    "error": null,
    "elapsed_time": 54.31600904464722,
    "success": true
  }
}