{
  "prompt_id": "dashboard",
  "prompt_name": "Analytics Dashboard",
  "mode": "parallel",
  "run_number": 46,
  "timestamp": "2025-10-14T05:13:52.371834",
  "response_time": 84.36101484298706,
  "total_tokens": null,
  "response_content": "import { useState, useCallback } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Moon, Sun, RefreshCw } from 'lucide-react';\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, Legend } from 'recharts';\nimport { PieChart, Pie, Cell, Legend, ResponsiveContainer, Tooltip as RechartsTooltip } from 'recharts';\nimport { motion } from 'framer-motion';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';\nimport { AreaChart, Area } from 'recharts';\nimport { TrendingUp, TrendingDown, DollarSign, Users, ShoppingCart, Target }, AlertCircle, AlertTriangle, Info, X\nimport { CheckCircle, AlertCircle, UserPlus, Package, CreditCard, Clock } from 'lucide-react';\n\nimport { motion } from 'framer-motion';\nimport { Badge } from '@/components/ui/badge';\nimport { ArrowUpDown, ChevronLeft, ChevronRight } from 'lucide-react';\n\n\ninterface MetricData {\n  id: string;\n  label: string;\n  value: number;\n  change: number;\n  trend: 'up' | 'down';\n}\n\ninterface ChartDataPoint {\n  date: string;\n  revenue: number;\n  users: number;\n  orders: number;\n}\n\ninterface TableRow {\n  id: string;\n  product: string;\n  sales: number;\n  revenue: number;\n  status: 'active' | 'pending' | 'inactive';\n}\n\ninterface Alert {\n  id: string;\n  message: string;\n  severity: 'error' | 'warning' | 'info';\n  timestamp: string;\n}\ninterface ActivityItem {\n  id: string;\n  type: 'success' | 'warning' | 'info' | 'error';\n  message: string;\n  timestamp: string;\n  icon: 'check' | 'alert' | 'user' | 'package' | 'card' | 'clock';\n}\n\nconst mockActivityData: ActivityItem[] = [\n  { id: '1', type: 'success', message: 'New order placed - Premium Plan', timestamp: '2 min ago', icon: 'check' },\n  { id: '2', type: 'info', message: 'User registered - john@example.com', timestamp: '15 min ago', icon: 'user' },\n  { id: '3', type: 'success', message: 'Payment received - $450.00', timestamp: '32 min ago', icon: 'card' },\n  { id: '4', type: 'warning', message: 'Low stock alert - Starter Plan', timestamp: '1 hour ago', icon: 'alert' },\n  { id: '5', type: 'info', message: 'Package shipped - Order #1234', timestamp: '2 hours ago', icon: 'package' },\n  { id: '6', type: 'success', message: 'Subscription renewed - Enterprise', timestamp: '3 hours ago', icon: 'check' }\n];\n\nconst mockMetrics: MetricData[] = [\n  { id: '1', label: 'Total Revenue', value: 45231, change: 12.5, trend: 'up' },\n  { id: '2', label: 'Active Users', value: 2350, change: 8.2, trend: 'up' },\n  { id: '3', label: 'Total Orders', value: 1543, change: -3.1, trend: 'down' },\n  { id: '4', label: 'Conversion Rate', value: 3.24, change: 5.7, trend: 'up' }\n];\n\nconst mockChartData: ChartDataPoint[] = [\n  { date: '2024-01-01', revenue: 12000, users: 450, orders: 230 },\n  { date: '2024-01-02', revenue: 15000, users: 520, orders: 280 },\n  { date: '2024-01-03', revenue: 13500, users: 490, orders: 250 },\n  { date: '2024-01-04', revenue: 18000, users: 610, orders: 320 },\n  { date: '2024-01-05', revenue: 16500, users: 580, orders: 295 },\n  { date: '2024-01-06', revenue: 20000, users: 680, orders: 350 },\n  { date: '2024-01-07', revenue: 22000, users: 720, orders: 380 }\n];\n\nconst mockTableData: TableRow[] = [\n  { id: '1', product: 'Premium Plan', sales: 234, revenue: 23400, status: 'active' },\n  { id: '2', product: 'Basic Plan', sales: 567, revenue: 11340, status: 'active' },\n  { id: '3', product: 'Enterprise Plan', sales: 89, revenue: 44500, status: 'active' },\n  { id: '4', product: 'Starter Plan', sales: 432, revenue: 4320, status: 'pending' },\n  { id: '5', product: 'Pro Plan', sales: 156, revenue: 15600, status: 'inactive' }\n];\n\nconst mockAlerts: Alert[] = [\n  { id: '1', message: 'Server response time increased by 25%', severity: 'warning', timestamp: '5 min ago' },\n  { id: '2', message: 'Payment gateway integration successful', severity: 'info', timestamp: '12 min ago' },\n  { id: '3', message: 'Critical: Database backup failed', severity: 'error', timestamp: '18 min ago' },\n  { id: '4', message: 'New user registration spike detected', severity: 'info', timestamp: '25 min ago' },\n  { id: '5', message: 'API rate limit approaching threshold', severity: 'warning', timestamp: '32 min ago' }\n];\nconst mockQuickStats = [\n  {\n    id: '1',\n    label: 'Avg. Order Value',\n    value: '$142.50',\n    change: 15.3,\n    sparklineData: [\n      { value: 120 },\n      { value: 135 },\n      { value: 128 },\n      { value: 145 },\n      { value: 138 },\n      { value: 152 },\n      { value: 142 }\n    ]\n  },\n  {\n    id: '2',\n    label: 'Customer Retention',\n    value: '87.5%',\n    change: 4.2,\n    sparklineData: [\n      { value: 82 },\n      { value: 84 },\n      { value: 85 },\n      { value: 86 },\n      { value: 85 },\n      { value: 87 },\n      { value: 88 }\n    ]\n  },\n  {\n    id: '3',\n    label: 'Bounce Rate',\n    value: '32.1%',\n    change: -2.8,\n    sparklineData: [\n      { value: 35 },\n      { value: 36 },\n      { value: 34 },\n      { value: 33 },\n      { value: 34 },\n      { value: 32 },\n      { value: 32 }\n    ]\n  },\n  {\n    id: '4',\n    label: 'Page Views',\n    value: '45.2K',\n    change: 22.7,\n    sparklineData: [\n      { value: 35 },\n      { value: 38 },\n      { value: 42 },\n      { value: 40 },\n      { value: 43 },\n      { value: 44 },\n      { value: 45 }\n    ]\n  }\n];\nconst mockPieData = [\n  { name: 'Premium Plan', value: 234, color: '#3b82f6' },\n  { name: 'Basic Plan', value: 567, color: '#10b981' },\n  { name: 'Enterprise Plan', value: 89, color: '#f59e0b' },\n  { name: 'Starter Plan', value: 432, color: '#8b5cf6' },\n  { name: 'Pro Plan', value: 156, color: '#ec4899' }\n];\n\nconst getActivityIcon = (icon: string, isDark: boolean) => {\n  const iconClass = `h-4 w-4 ${isDark ? 'text-gray-300' : 'text-gray-700'}`;\n  switch (icon) {\n    case 'check':\n      return <CheckCircle className={iconClass} />;\n    case 'alert':\n      return <AlertCircle className={iconClass} />;\n    case 'user':\n      return <UserPlus className={iconClass} />;\n    case 'package':\n      return <Package className={iconClass} />;\n    case 'card':\n      return <CreditCard className={iconClass} />;\n    case 'clock':\n      return <Clock className={iconClass} />;\n    default:\n      return <CheckCircle className={iconClass} />;\n  }\n};\n\nconst getActivityColor = (type: string) => {\n  switch (type) {\n    case 'success':\n      return 'bg-green-500';\n    case 'warning':\n      return 'bg-yellow-500';\n    case 'info':\n      return 'bg-blue-500';\n    case 'error':\n      return 'bg-red-500';\n    default:\n      return 'bg-gray-500';\n  }\n};\nconst UserChart = ({ data, isDarkMode }: { data: ChartDataPoint[], isDarkMode: boolean }) => {\n  const maxUsers = Math.max(...data.map(d => d.users));\n  const minUsers = Math.min(...data.map(d => d.users));\n  const range = maxUsers - minUsers;\n  const padding = range * 0.2;\n  const chartMax = maxUsers + padding;\n  const chartMin = Math.max(0, minUsers - padding);\n  const chartRange = chartMax - chartMin;\n\n  const [hoveredIndex, setHoveredIndex] = useState<number | null>(null);\n\n  const points = data.map((point, index) => {\n    const x = (index / (data.length - 1)) * 100;\n    const y = 100 - ((point.users - chartMin) / chartRange) * 100;\n    return { x, y, ...point };\n  });\n\n  const pathD = points.reduce((path, point, index) => {\n    const command = index === 0 ? 'M' : 'L';\n    return `${path} ${command} ${point.x} ${point.y}`;\n  }, '');\n\n  const areaD = `${pathD} L 100 100 L 0 100 Z`;\n\n  const gradientId = `userGradient-${isDarkMode ? 'dark' : 'light'}`;\n\n  return (\n    <div className=\"relative w-full h-64\">\n      <svg\n        viewBox=\"0 0 100 100\"\n        preserveAspectRatio=\"none\"\n        className=\"w-full h-full\"\n      >\n        <defs>\n          <linearGradient id={gradientId} x1=\"0%\" y1=\"0%\" x2=\"0%\" y2=\"100%\">\n            <stop offset=\"0%\" stopColor={isDarkMode ? '#3b82f6' : '#60a5fa'} stopOpacity=\"0.8\" />\n            <stop offset=\"50%\" stopColor={isDarkMode ? '#3b82f6' : '#60a5fa'} stopOpacity=\"0.4\" />\n            <stop offset=\"100%\" stopColor={isDarkMode ? '#3b82f6' : '#60a5fa'} stopOpacity=\"0.1\" />\n          </linearGradient>\n        </defs>\n\n        <motion.path\n          d={areaD}\n          fill={`url(#${gradientId})`}\n          initial={{ opacity: 0 }}\n          animate={{ opacity: 1 }}\n          transition={{ duration: 0.8, ease: \"easeOut\" }}\n        />\n\n        <motion.path\n          d={pathD}\n          fill=\"none\"\n          stroke={isDarkMode ? '#3b82f6' : '#2563eb'}\n          strokeWidth=\"0.5\"\n          strokeLinecap=\"round\"\n          strokeLinejoin=\"round\"\n          initial={{ pathLength: 0 }}\n          animate={{ pathLength: 1 }}\n          transition={{ duration: 1.2, ease: \"easeInOut\" }}\n        />\n\n        {points.map((point, index) => (\n          <motion.circle\n            key={index}\n            cx={point.x}\n            cy={point.y}\n            r={hoveredIndex === index ? \"1.5\" : \"1\"}\n            fill={isDarkMode ? '#3b82f6' : '#2563eb'}\n            initial={{ scale: 0 }}\n            animate={{ scale: 1 }}\n            transition={{ duration: 0.3, delay: index * 0.1 }}\n            onMouseEnter={() => setHoveredIndex(index)}\n            onMouseLeave={() => setHoveredIndex(null)}\n            className=\"cursor-pointer\"\n            style={{ transformOrigin: `${point.x}px ${point.y}px` }}\n          />\n        ))}\n      </svg>\n\n      <div className=\"absolute inset-0 pointer-events-none\">\n        {points.map((point, index) => (\n          <motion.div\n            key={index}\n            className=\"absolute pointer-events-auto\"\n            style={{\n              left: `${point.x}%`,\n              top: `${point.y}%`,\n              transform: 'translate(-50%, -50%)'\n            }}\n            onMouseEnter={() => setHoveredIndex(index)}\n            onMouseLeave={() => setHoveredIndex(null)}\n          >\n            {hoveredIndex === index && (\n              <motion.div\n                initial={{ opacity: 0, y: 10 }}\n                animate={{ opacity: 1, y: 0 }}\n                className={`absolute bottom-full mb-2 px-3 py-2 rounded-lg shadow-lg whitespace-nowrap ${\n                  isDarkMode ? 'bg-gray-700 text-white' : 'bg-white text-gray-900'\n                }`}\n                style={{ transform: 'translateX(-50%)' }}\n              >\n                <div className=\"text-xs font-semibold\">{point.users.toLocaleString()} users</div>\n                <div className={`text-xs ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                  {new Date(point.date).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n                </div>\n              </motion.div>\n            )}\n          </motion.div>\n        ))}\n      </div>\n\n      <div className={`flex justify-between mt-2 text-xs ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n        {data.map((point, index) => (\n          index % Math.ceil(data.length / 4) === 0 && (\n            <span key={index}>\n              {new Date(point.date).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n            </span>\n          )\n        ))}\n      </div>\n    </div>\n  );\n};\n\nconst getMetricIcon = (label: string) => {\n  switch (label) {\n    case 'Total Revenue':\n      return DollarSign;\n    case 'Active Users':\n      return Users;\n    case 'Total Orders':\n      return ShoppingCart;\n    case 'Conversion Rate':\n      return Target;\n    default:\n      return DollarSign;\n  }\n};\n\nconst formatMetricValue = (label: string, value: number) => {\n  if (label === 'Total Revenue') {\n    return `$${value.toLocaleString()}`;\n  } else if (label === 'Conversion Rate') {\n    return `${value}%`;\n  }\n  return value.toLocaleString();\n};\n\ntype SortField = 'product' | 'sales' | 'revenue' | 'status';\ntype SortDirection = 'asc' | 'desc';\n\nconst DataTable = ({ \n  data, \n  isDarkMode \n}: { \n  data: TableRow[]; \n  isDarkMode: boolean;\n}) => {\n  const [sortField, setSortField] = useState<SortField>('revenue');\n  const [sortDirection, setSortDirection] = useState<SortDirection>('desc');\n  const [currentPage, setCurrentPage] = useState(1);\n  const itemsPerPage = 5;\n\n  const handleSort = (field: SortField) => {\n    if (sortField === field) {\n      setSortDirection(sortDirection === 'asc' ? 'desc' : 'asc');\n    } else {\n      setSortField(field);\n      setSortDirection('desc');\n    }\n  };\n\n  const sortedData = [...data].sort((a, b) => {\n    let aValue = a[sortField];\n    let bValue = b[sortField];\n\n    if (typeof aValue === 'string') {\n      aValue = aValue.toLowerCase();\n      bValue = (bValue as string).toLowerCase();\n    }\n\n    if (sortDirection === 'asc') {\n      return aValue > bValue ? 1 : -1;\n    } else {\n      return aValue < bValue ? 1 : -1;\n    }\n  });\n\n  const totalPages = Math.ceil(sortedData.length / itemsPerPage);\n  const startIndex = (currentPage - 1) * itemsPerPage;\n  const paginatedData = sortedData.slice(startIndex, startIndex + itemsPerPage);\n\n  const getStatusBadge = (status: TableRow['status']) => {\n    const variants = {\n      active: 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200',\n      pending: 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200',\n      inactive: 'bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-300'\n    };\n\n    return (\n      <Badge className={variants[status]} variant=\"secondary\">\n        {status.charAt(0).toUpperCase() + status.slice(1)}\n      </Badge>\n    );\n  };\n\n  return (\n    <div className=\"space-y-4\">\n      {/* Desktop Table */}\n      <div className=\"hidden md:block overflow-x-auto\">\n        <table className=\"w-full\">\n          <thead>\n            <tr className={`border-b ${isDarkMode ? 'border-gray-700' : 'border-gray-200'}`}>\n              <th className={`text-left p-3 ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>\n                <button\n                  onClick={() => handleSort('product')}\n                  className=\"flex items-center gap-1 hover:text-blue-500 transition-colors\"\n                >\n                  Product\n                  <ArrowUpDown className=\"h-4 w-4\" />\n                </button>\n              </th>\n              <th className={`text-left p-3 ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>\n                <button\n                  onClick={() => handleSort('sales')}\n                  className=\"flex items-center gap-1 hover:text-blue-500 transition-colors\"\n                >\n                  Sales\n                  <ArrowUpDown className=\"h-4 w-4\" />\n                </button>\n              </th>\n              <th className={`text-left p-3 ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>\n                <button\n                  onClick={() => handleSort('revenue')}\n                  className=\"flex items-center gap-1 hover:text-blue-500 transition-colors\"\n                >\n                  Revenue\n                  <ArrowUpDown className=\"h-4 w-4\" />\n                </button>\n              </th>\n              <th className={`text-left p-3 ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>\n                <button\n                  onClick={() => handleSort('status')}\n                  className=\"flex items-center gap-1 hover:text-blue-500 transition-colors\"\n                >\n                  Status\n                  <ArrowUpDown className=\"h-4 w-4\" />\n                </button>\n              </th>\n            </tr>\n          </thead>\n          <tbody>\n            {paginatedData.map((row, index) => (\n              <motion.tr\n                key={row.id}\n                initial={{ opacity: 0, y: 10 }}\n                animate={{ opacity: 1, y: 0 }}\n                transition={{ delay: index * 0.05 }}\n                className={`border-b ${isDarkMode ? 'border-gray-700 hover:bg-gray-750' : 'border-gray-100 hover:bg-gray-50'} transition-colors`}\n              >\n                <td className={`p-3 font-medium ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                  {row.product}\n                </td>\n                <td className={`p-3 ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>\n                  {row.sales.toLocaleString()}\n                </td>\n                <td className={`p-3 ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>\n                  ${row.revenue.toLocaleString()}\n                </td>\n                <td className=\"p-3\">\n                  {getStatusBadge(row.status)}\n                </td>\n              </motion.tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n\n      {/* Mobile Cards */}\n      <div className=\"md:hidden space-y-3\">\n        {paginatedData.map((row, index) => (\n          <motion.div\n            key={row.id}\n            initial={{ opacity: 0, y: 10 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ delay: index * 0.05 }}\n            className={`p-4 rounded-lg border ${isDarkMode ? 'bg-gray-750 border-gray-700' : 'bg-white border-gray-200'}`}\n          >\n            <div className=\"flex justify-between items-start mb-3\">\n              <h3 className={`font-medium ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                {row.product}\n              </h3>\n              {getStatusBadge(row.status)}\n            </div>\n            <div className=\"grid grid-cols-2 gap-2\">\n              <div>\n                <p className={`text-sm ${isDarkMode ? 'text-gray-400' : 'text-gray-500'}`}>\n                  Sales\n                </p>\n                <p className={`font-medium ${isDarkMode ? 'text-gray-200' : 'text-gray-900'}`}>\n                  {row.sales.toLocaleString()}\n                </p>\n              </div>\n              <div>\n                <p className={`text-sm ${isDarkMode ? 'text-gray-400' : 'text-gray-500'}`}>\n                  Revenue\n                </p>\n                <p className={`font-medium ${isDarkMode ? 'text-gray-200' : 'text-gray-900'}`}>\n                  ${row.revenue.toLocaleString()}\n                </p>\n              </div>\n            </div>\n          </motion.div>\n        ))}\n      </div>\n\n      {/* Pagination */}\n      <div className=\"flex items-center justify-between pt-4\">\n        <p className={`text-sm ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n          Showing {startIndex + 1} to {Math.min(startIndex + itemsPerPage, sortedData.length)} of {sortedData.length} results\n        </p>\n        <div className=\"flex gap-2\">\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={() => setCurrentPage(prev => Math.max(1, prev - 1))}\n            disabled={currentPage === 1}\n            className={isDarkMode ? 'border-gray-700' : ''}\n          >\n            <ChevronLeft className=\"h-4 w-4\" />\n          </Button>\n          <div className=\"flex items-center gap-1\">\n            {Array.from({ length: totalPages }, (_, i) => i + 1).map(page => (\n              <Button\n                key={page}\n                variant={currentPage === page ? 'default' : 'outline'}\n                size=\"sm\"\n                onClick={() => setCurrentPage(page)}\n                className={`w-8 ${isDarkMode && currentPage !== page ? 'border-gray-700' : ''}`}\n              >\n                {page}\n              </Button>\n            ))}\n          </div>\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={() => setCurrentPage(prev => Math.min(totalPages, prev + 1))}\n            disabled={currentPage === totalPages}\n            className={isDarkMode ? 'border-gray-700' : ''}\n          >\n            <ChevronRight className=\"h-4 w-4\" />\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default function AnalyticsDashboard() {\n  const [pieData] = useState(mockPieData);\n\n  const renderCustomLabel = ({ cx, cy, midAngle, innerRadius, outerRadius, percent }: any) => {\n    const RADIAN = Math.PI / 180;\n    const radius = innerRadius + (outerRadius - innerRadius) * 0.5;\n    const x = cx + radius * Math.cos(-midAngle * RADIAN);\n    const y = cy + radius * Math.sin(-midAngle * RADIAN);\n\n    return (\n      <text\n        x={x}\n        y={y}\n        fill=\"white\"\n        textAnchor={x > cx ? 'start' : 'end'}\n        dominantBaseline=\"central\"\n        className=\"text-xs font-semibold\"\n      >\n        {`${(percent * 100).toFixed(0)}%`}\n      </text>\n    );\n  };\n  const [isDarkMode, setIsDarkMode] = useState(false);\n  const [metrics, setMetrics] = useState<MetricData[]>(mockMetrics);\n  const [chartData, setChartData] = useState<ChartDataPoint[]>(mockChartData);\n  const [tableData, setTableData] = useState<TableRow[]>(mockTableData);\n  const [isRefreshing, setIsRefreshing] = useState(false);\n\n  const toggleDarkMode = useCallback(() => {\n    setIsDarkMode(prev => !prev);\n  }, []);\n\n  const handleRefresh = useCallback(() => {\n    setIsRefreshing(true);\n    \n    setTimeout(() => {\n      // Generate updated metrics with random variations\n      const updatedMetrics = mockMetrics.map(metric => ({\n        ...metric,\n        value: metric.value + Math.floor(Math.random() * 200 - 100),\n        change: parseFloat((Math.random() * 20 - 5).toFixed(1)),\n        trend: Math.random() > 0.5 ? 'up' as const : 'down' as const\n      }));\n      \n      // Generate updated chart data with random variations\n      const updatedChartData = mockChartData.map(point => ({\n        ...point,\n        revenue: point.revenue + Math.floor(Math.random() * 4000 - 2000),\n        users: point.users + Math.floor(Math.random() * 100 - 50),\n        orders: point.orders + Math.floor(Math.random() * 50 - 25)\n      }));\n      \n      // Generate updated table data with random variations\n      const updatedTableData = mockTableData.map(row => ({\n        ...row,\n        sales: row.sales + Math.floor(Math.random() * 40 - 20),\n        revenue: row.revenue + Math.floor(Math.random() * 2000 - 1000)\n      }));\n      \n      setMetrics(updatedMetrics);\n      setChartData(updatedChartData);\n      setTableData(updatedTableData);\n      setIsRefreshing(false);\n    }, 1500);\n  }, []);\n\n  const [alerts, setAlerts] = useState<Alert[]>(mockAlerts);\n\n  const dismissAlert = useCallback((alertId: string) => {\n    setAlerts(prev => prev.filter(alert => alert.id !== alertId));\n  }, []);\n\n  const getAlertIcon = (severity: Alert['severity']) => {\n    switch (severity) {\n      case 'error':\n        return <AlertCircle className=\"h-5 w-5 text-red-500\" />;\n      case 'warning':\n        return <AlertTriangle className=\"h-5 w-5 text-yellow-500\" />;\n      case 'info':\n        return <Info className=\"h-5 w-5 text-blue-500\" />;\n    }\n  };\n\n  const getAlertStyles = (severity: Alert['severity']) => {\n    const baseStyles = 'p-3 rounded-lg border flex items-start gap-3 mb-3';\n    switch (severity) {\n      case 'error':\n        return `${baseStyles} ${isDarkMode ? 'bg-red-950 border-red-800' : 'bg-red-50 border-red-200'}`;\n      case 'warning':\n        return `${baseStyles} ${isDarkMode ? 'bg-yellow-950 border-yellow-800' : 'bg-yellow-50 border-yellow-200'}`;\n      case 'info':\n        return `${baseStyles} ${isDarkMode ? 'bg-blue-950 border-blue-800' : 'bg-blue-50 border-blue-200'}`;\n    }\n  };\n\n  return (\n    <div className={`min-h-screen ${isDarkMode ? 'dark bg-gray-900' : 'bg-gray-50'}`}>\n      <div className=\"container mx-auto p-4 md:p-6 lg:p-8\">\n        <div className=\"flex flex-col md:flex-row justify-between items-start md:items-center gap-4 mb-8\">\n          <div>\n            <h1 className={`text-3xl md:text-4xl font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n              Analytics Dashboard\n            </h1>\n            <p className={`mt-2 ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n              Real-time insights and performance metrics\n            </p>\n          </div>\n          \n          <div className=\"flex gap-2\">\n            <Button\n              variant=\"outline\"\n              size=\"icon\"\n              onClick={toggleDarkMode}\n              className={isDarkMode ? 'border-gray-700' : ''}\n            >\n              {isDarkMode ? <Sun className=\"h-5 w-5\" /> : <Moon className=\"h-5 w-5\" />}\n            </Button>\n            \n            <Button\n              variant=\"outline\"\n              onClick={handleRefresh}\n              disabled={isRefreshing}\n              className={isDarkMode ? 'border-gray-700' : ''}\n            >\n              <RefreshCw className={`h-4 w-4 mr-2 ${isRefreshing ? 'animate-spin' : ''}`} />\n              Refresh\n            </Button>\n          </div>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 md:gap-6 mb-8\">\n          {metrics.map((metric, index) => {\n            const IconComponent = getMetricIcon(metric.label);\n            const isPositive = metric.trend === 'up';\n            \n            return (\n              <motion.div\n                key={metric.id}\n                initial={{ opacity: 0, y: 20 }}\n                animate={{ opacity: 1, y: 0 }}\n                transition={{ duration: 0.4, delay: index * 0.1 }}\n              >\n                <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n                  <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                    <CardTitle className={`text-sm font-medium ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                      {metric.label}\n                    </CardTitle>\n                    <div className={`p-2 rounded-lg ${isDarkMode ? 'bg-gray-700' : 'bg-gray-100'}`}>\n                      <IconComponent className={`h-4 w-4 ${isDarkMode ? 'text-gray-300' : 'text-gray-600'}`} />\n                    </div>\n                  </CardHeader>\n                  <CardContent>\n                    <div className={`text-2xl font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                      {formatMetricValue(metric.label, metric.value)}\n                    </div>\n                    <div className=\"flex items-center mt-2\">\n                      {isPositive ? (\n                        <TrendingUp className=\"h-4 w-4 text-green-500 mr-1\" />\n                      ) : (\n                        <TrendingDown className=\"h-4 w-4 text-red-500 mr-1\" />\n                      )}\n                      <span className={`text-sm font-medium ${isPositive ? 'text-green-500' : 'text-red-500'}`}>\n                        {isPositive ? '+' : ''}{metric.change}%\n                      </span>\n                      <span className={`text-sm ml-2 ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                        vs last period\n                      </span>\n                    </div>\n                  </CardContent>\n                </Card>\n              </motion.div>\n            );\n          })}\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-4 md:gap-6 mb-8\">\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Revenue Overview</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Daily revenue trends\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <ResponsiveContainer width=\"100%\" height={300}>\n                <LineChart data={chartData}>\n                  <CartesianGrid \n                    strokeDasharray=\"3 3\" \n                    stroke={isDarkMode ? '#374151' : '#e5e7eb'} \n                  />\n                  <XAxis \n                    dataKey=\"date\" \n                    stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                    tick={{ fill: isDarkMode ? '#9ca3af' : '#6b7280' }}\n                    tickFormatter={(value) => new Date(value).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n                  />\n                  <YAxis \n                    stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                    tick={{ fill: isDarkMode ? '#9ca3af' : '#6b7280' }}\n                    tickFormatter={(value) => `$${(value / 1000).toFixed(0)}k`}\n                  />\n                  <Tooltip \n                    contentStyle={{\n                      backgroundColor: isDarkMode ? '#1f2937' : '#ffffff',\n                      border: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\n                      borderRadius: '6px',\n                      color: isDarkMode ? '#ffffff' : '#000000'\n                    }}\n                    labelStyle={{ color: isDarkMode ? '#9ca3af' : '#6b7280' }}\n                    formatter={(value: number) => [`$${value.toLocaleString()}`, 'Revenue']}\n                    labelFormatter={(label) => new Date(label).toLocaleDateString('en-US', { month: 'long', day: 'numeric', year: 'numeric' })}\n                  />\n                  <Line \n                    type=\"monotone\" \n                    dataKey=\"revenue\" \n                    stroke=\"#3b82f6\" \n                    strokeWidth={2}\n                    dot={{ fill: '#3b82f6', r: 4 }}\n                    activeDot={{ r: 6 }}\n                  />\n                </LineChart>\n              </ResponsiveContainer>\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>User Growth</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Active users over time\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <UserChart data={chartData} isDarkMode={isDarkMode} />\n            </CardContent>\n          </Card>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-4 md:gap-6 mb-8\">\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Orders Distribution</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                By product category\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"h-[300px] w-full\">\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <PieChart>\n                    <Pie\n                      data={pieData}\n                      cx=\"50%\"\n                      cy=\"50%\"\n                      labelLine={false}\n                      label={renderCustomLabel}\n                      outerRadius={80}\n                      fill=\"#8884d8\"\n                      dataKey=\"value\"\n                      animationBegin={0}\n                      animationDuration={800}\n                    >\n                      {pieData.map((entry, index) => (\n                        <Cell key={`cell-${index}`} fill={entry.color} />\n                      ))}\n                    </Pie>\n                    <RechartsTooltip\n                      contentStyle={{\n                        backgroundColor: isDarkMode ? '#1f2937' : '#ffffff',\n                        border: isDarkMode ? '1px solid #374151' : '1px solid #e5e7eb',\n                        borderRadius: '6px',\n                        color: isDarkMode ? '#ffffff' : '#000000'\n                      }}\n                      formatter={(value: number) => [`${value} orders`, 'Orders']}\n                    />\n                    <Legend\n                      verticalAlign=\"bottom\"\n                      height={36}\n                      iconType=\"circle\"\n                      formatter={(value) => (\n                        <span className={isDarkMode ? 'text-gray-300' : 'text-gray-700'}>\n                          {value}\n                        </span>\n                      )}\n                    />\n                  </PieChart>\n                </ResponsiveContainer>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className={`lg:col-span-2 ${isDarkMode ? 'bg-gray-800 border-gray-700' : ''}`}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Performance Metrics</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Combined view of key indicators\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <ResponsiveContainer width=\"100%\" height={300}>\n                <BarChart data={chartData}>\n                  <CartesianGrid \n                    strokeDasharray=\"3 3\" \n                    stroke={isDarkMode ? '#374151' : '#e5e7eb'}\n                  />\n                  <XAxis \n                    dataKey=\"date\" \n                    stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                    tick={{ fill: isDarkMode ? '#9ca3af' : '#6b7280' }}\n                    tickFormatter={(value) => new Date(value).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n                  />\n                  <YAxis \n                    stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                    tick={{ fill: isDarkMode ? '#9ca3af' : '#6b7280' }}\n                  />\n                  <Tooltip \n                    contentStyle={{\n                      backgroundColor: isDarkMode ? '#1f2937' : '#ffffff',\n                      border: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\n                      borderRadius: '8px',\n                      color: isDarkMode ? '#f3f4f6' : '#111827'\n                    }}\n                    labelStyle={{ color: isDarkMode ? '#f3f4f6' : '#111827' }}\n                    formatter={(value: number, name: string) => {\n                      if (name === 'revenue') return [`$${value.toLocaleString()}`, 'Revenue'];\n                      if (name === 'users') return [value.toLocaleString(), 'Users'];\n                      if (name === 'orders') return [value.toLocaleString(), 'Orders'];\n                      return [value, name];\n                    }}\n                    labelFormatter={(label) => new Date(label).toLocaleDateString('en-US', { \n                      month: 'long', \n                      day: 'numeric',\n                      year: 'numeric'\n                    })}\n                  />\n                  <Legend \n                    wrapperStyle={{ color: isDarkMode ? '#9ca3af' : '#6b7280' }}\n                    formatter={(value) => {\n                      if (value === 'revenue') return 'Revenue';\n                      if (value === 'users') return 'Users';\n                      if (value === 'orders') return 'Orders';\n                      return value;\n                    }}\n                  />\n                  <Bar \n                    dataKey=\"revenue\" \n                    fill=\"#3b82f6\" \n                    radius={[4, 4, 0, 0]}\n                    animationDuration={800}\n                  />\n                  <Bar \n                    dataKey=\"users\" \n                    fill=\"#10b981\" \n                    radius={[4, 4, 0, 0]}\n                    animationDuration={800}\n                  />\n                  <Bar \n                    dataKey=\"orders\" \n                    fill=\"#f59e0b\" \n                    radius={[4, 4, 0, 0]}\n                    animationDuration={800}\n                  />\n                </BarChart>\n              </ResponsiveContainer>\n            </CardContent>\n          </Card>\n        </div>\n\n        <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n          <CardHeader>\n            <CardTitle className={isDarkMode ? 'text-white' : ''}>Top Products</CardTitle>\n            <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n              Best performing products by revenue\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <DataTable data={tableData} isDarkMode={isDarkMode} />\n          </CardContent>\n        </Card>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 md:gap-6 mt-8\">\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Recent Activity</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {mockActivityData.map((activity, index) => (\n                  <motion.div\n                    key={activity.id}\n                    initial={{ opacity: 0, x: -20 }}\n                    animate={{ opacity: 1, x: 0 }}\n                    transition={{ delay: index * 0.1, duration: 0.3 }}\n                    className=\"flex items-start gap-3\"\n                  >\n                    <div className={`mt-1 rounded-full p-2 ${getActivityColor(activity.type)}`}>\n                      {getActivityIcon(activity.icon, isDarkMode)}\n                    </div>\n                    <div className=\"flex-1 min-w-0\">\n                      <p className={`text-sm font-medium ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                        {activity.message}\n                      </p>\n                      <p className={`text-xs mt-1 ${isDarkMode ? 'text-gray-400' : 'text-gray-500'}`}>\n                        {activity.timestamp}\n                      </p>\n                    </div>\n                  </motion.div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Quick Stats</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {mockQuickStats.map((stat, index) => (\n                  <motion.div\n                    key={stat.id}\n                    initial={{ opacity: 0, x: -20 }}\n                    animate={{ opacity: 1, x: 0 }}\n                    transition={{ delay: index * 0.1 }}\n                    className={`p-4 rounded-lg border ${\n                      isDarkMode ? 'bg-gray-700/50 border-gray-600' : 'bg-white border-gray-200'\n                    }`}\n                  >\n                    <div className=\"flex items-start justify-between mb-3\">\n                      <div className=\"flex-1\">\n                        <p className={`text-sm ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                          {stat.label}\n                        </p>\n                        <p className={`text-2xl font-bold mt-1 ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                          {stat.value}\n                        </p>\n                      </div>\n                      <div className={`flex items-center gap-1 px-2 py-1 rounded-full text-xs font-medium ${\n                        stat.change >= 0\n                          ? 'bg-green-100 text-green-700 dark:bg-green-900/30 dark:text-green-400'\n                          : 'bg-red-100 text-red-700 dark:bg-red-900/30 dark:text-red-400'\n                      }`}>\n                        {stat.change >= 0 ? (\n                          <TrendingUp className=\"h-3 w-3\" />\n                        ) : (\n                          <TrendingDown className=\"h-3 w-3\" />\n                        )}\n                        {Math.abs(stat.change)}%\n                      </div>\n                    </div>\n                    \n                    <div className=\"h-12\">\n                      <ResponsiveContainer width=\"100%\" height=\"100%\">\n                        <AreaChart data={stat.sparklineData}>\n                          <defs>\n                            <linearGradient id={`gradient-${stat.id}`} x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                              <stop\n                                offset=\"0%\"\n                                stopColor={stat.change >= 0 ? '#10b981' : '#ef4444'}\n                                stopOpacity={0.3}\n                              />\n                              <stop\n                                offset=\"100%\"\n                                stopColor={stat.change >= 0 ? '#10b981' : '#ef4444'}\n                                stopOpacity={0}\n                              />\n                            </linearGradient>\n                          </defs>\n                          <Area\n                            type=\"monotone\"\n                            dataKey=\"value\"\n                            stroke={stat.change >= 0 ? '#10b981' : '#ef4444'}\n                            strokeWidth={2}\n                            fill={`url(#gradient-${stat.id})`}\n                            animationDuration={1000}\n                          />\n                        </AreaChart>\n                      </ResponsiveContainer>\n                    </div>\n                  </motion.div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Alerts</CardTitle>\n            </CardHeader>\n            <CardContent>              <div className=\"space-y-2\">\n                {alerts.length === 0 ? (\n                  <div className={`text-center py-8 ${isDarkMode ? 'text-gray-400' : 'text-gray-500'}`}>\n                    <Info className=\"h-12 w-12 mx-auto mb-2 opacity-50\" />\n                    <p>No alerts at this time</p>\n                  </div>\n                ) : (\n                  alerts.map((alert, index) => (\n                    <motion.div\n                      key={alert.id}\n                      initial={{ opacity: 0, x: -20 }}\n                      animate={{ opacity: 1, x: 0 }}\n                      exit={{ opacity: 0, x: 20 }}\n                      transition={{ delay: index * 0.1 }}\n                      className={getAlertStyles(alert.severity)}\n                    >\n                      <div className=\"flex-shrink-0 mt-0.5\">\n                        {getAlertIcon(alert.severity)}\n                      </div>\n                      <div className=\"flex-1 min-w-0\">\n                        <p className={`text-sm font-medium ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                          {alert.message}\n                        </p>\n                        <p className={`text-xs mt-1 ${isDarkMode ? 'text-gray-400' : 'text-gray-500'}`}>\n                          {alert.timestamp}\n                        </p>\n                      </div>\n                      <button\n                        onClick={() => dismissAlert(alert.id)}\n                        className={`flex-shrink-0 p-1 rounded hover:bg-black/10 transition-colors ${\n                          isDarkMode ? 'text-gray-400 hover:text-white' : 'text-gray-500 hover:text-gray-700'\n                        }`}\n                        aria-label=\"Dismiss alert\"\n                      >\n                        <X className=\"h-4 w-4\" />\n                      </button>\n                    </motion.div>\n                  ))\n                )}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}",
  "error": null,
  "overall_score": 53,
  "code_quality_score": 15,
  "architecture_score": 12,
  "performance_score": 10,
  "accessibility_score": 16,
  "metadata": {
    "document_id": "eval_room_bc238a4a07c3",
    "prompt_category": "intermediate",
    "prompt_complexity": 6.0
  },
  "raw_response": {
    "document_id": "eval_room_bc238a4a07c3",
    "mode": "parallel",
    "prompt": "Generate an analytics dashboard page with charts, data tables, real-time updates, dark mode, and responsive design",
    "content": "import { useState, useCallback } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Moon, Sun, RefreshCw } from 'lucide-react';\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, Legend } from 'recharts';\nimport { PieChart, Pie, Cell, Legend, ResponsiveContainer, Tooltip as RechartsTooltip } from 'recharts';\nimport { motion } from 'framer-motion';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';\nimport { AreaChart, Area } from 'recharts';\nimport { TrendingUp, TrendingDown, DollarSign, Users, ShoppingCart, Target }, AlertCircle, AlertTriangle, Info, X\nimport { CheckCircle, AlertCircle, UserPlus, Package, CreditCard, Clock } from 'lucide-react';\n\nimport { motion } from 'framer-motion';\nimport { Badge } from '@/components/ui/badge';\nimport { ArrowUpDown, ChevronLeft, ChevronRight } from 'lucide-react';\n\n\ninterface MetricData {\n  id: string;\n  label: string;\n  value: number;\n  change: number;\n  trend: 'up' | 'down';\n}\n\ninterface ChartDataPoint {\n  date: string;\n  revenue: number;\n  users: number;\n  orders: number;\n}\n\ninterface TableRow {\n  id: string;\n  product: string;\n  sales: number;\n  revenue: number;\n  status: 'active' | 'pending' | 'inactive';\n}\n\ninterface Alert {\n  id: string;\n  message: string;\n  severity: 'error' | 'warning' | 'info';\n  timestamp: string;\n}\ninterface ActivityItem {\n  id: string;\n  type: 'success' | 'warning' | 'info' | 'error';\n  message: string;\n  timestamp: string;\n  icon: 'check' | 'alert' | 'user' | 'package' | 'card' | 'clock';\n}\n\nconst mockActivityData: ActivityItem[] = [\n  { id: '1', type: 'success', message: 'New order placed - Premium Plan', timestamp: '2 min ago', icon: 'check' },\n  { id: '2', type: 'info', message: 'User registered - john@example.com', timestamp: '15 min ago', icon: 'user' },\n  { id: '3', type: 'success', message: 'Payment received - $450.00', timestamp: '32 min ago', icon: 'card' },\n  { id: '4', type: 'warning', message: 'Low stock alert - Starter Plan', timestamp: '1 hour ago', icon: 'alert' },\n  { id: '5', type: 'info', message: 'Package shipped - Order #1234', timestamp: '2 hours ago', icon: 'package' },\n  { id: '6', type: 'success', message: 'Subscription renewed - Enterprise', timestamp: '3 hours ago', icon: 'check' }\n];\n\nconst mockMetrics: MetricData[] = [\n  { id: '1', label: 'Total Revenue', value: 45231, change: 12.5, trend: 'up' },\n  { id: '2', label: 'Active Users', value: 2350, change: 8.2, trend: 'up' },\n  { id: '3', label: 'Total Orders', value: 1543, change: -3.1, trend: 'down' },\n  { id: '4', label: 'Conversion Rate', value: 3.24, change: 5.7, trend: 'up' }\n];\n\nconst mockChartData: ChartDataPoint[] = [\n  { date: '2024-01-01', revenue: 12000, users: 450, orders: 230 },\n  { date: '2024-01-02', revenue: 15000, users: 520, orders: 280 },\n  { date: '2024-01-03', revenue: 13500, users: 490, orders: 250 },\n  { date: '2024-01-04', revenue: 18000, users: 610, orders: 320 },\n  { date: '2024-01-05', revenue: 16500, users: 580, orders: 295 },\n  { date: '2024-01-06', revenue: 20000, users: 680, orders: 350 },\n  { date: '2024-01-07', revenue: 22000, users: 720, orders: 380 }\n];\n\nconst mockTableData: TableRow[] = [\n  { id: '1', product: 'Premium Plan', sales: 234, revenue: 23400, status: 'active' },\n  { id: '2', product: 'Basic Plan', sales: 567, revenue: 11340, status: 'active' },\n  { id: '3', product: 'Enterprise Plan', sales: 89, revenue: 44500, status: 'active' },\n  { id: '4', product: 'Starter Plan', sales: 432, revenue: 4320, status: 'pending' },\n  { id: '5', product: 'Pro Plan', sales: 156, revenue: 15600, status: 'inactive' }\n];\n\nconst mockAlerts: Alert[] = [\n  { id: '1', message: 'Server response time increased by 25%', severity: 'warning', timestamp: '5 min ago' },\n  { id: '2', message: 'Payment gateway integration successful', severity: 'info', timestamp: '12 min ago' },\n  { id: '3', message: 'Critical: Database backup failed', severity: 'error', timestamp: '18 min ago' },\n  { id: '4', message: 'New user registration spike detected', severity: 'info', timestamp: '25 min ago' },\n  { id: '5', message: 'API rate limit approaching threshold', severity: 'warning', timestamp: '32 min ago' }\n];\nconst mockQuickStats = [\n  {\n    id: '1',\n    label: 'Avg. Order Value',\n    value: '$142.50',\n    change: 15.3,\n    sparklineData: [\n      { value: 120 },\n      { value: 135 },\n      { value: 128 },\n      { value: 145 },\n      { value: 138 },\n      { value: 152 },\n      { value: 142 }\n    ]\n  },\n  {\n    id: '2',\n    label: 'Customer Retention',\n    value: '87.5%',\n    change: 4.2,\n    sparklineData: [\n      { value: 82 },\n      { value: 84 },\n      { value: 85 },\n      { value: 86 },\n      { value: 85 },\n      { value: 87 },\n      { value: 88 }\n    ]\n  },\n  {\n    id: '3',\n    label: 'Bounce Rate',\n    value: '32.1%',\n    change: -2.8,\n    sparklineData: [\n      { value: 35 },\n      { value: 36 },\n      { value: 34 },\n      { value: 33 },\n      { value: 34 },\n      { value: 32 },\n      { value: 32 }\n    ]\n  },\n  {\n    id: '4',\n    label: 'Page Views',\n    value: '45.2K',\n    change: 22.7,\n    sparklineData: [\n      { value: 35 },\n      { value: 38 },\n      { value: 42 },\n      { value: 40 },\n      { value: 43 },\n      { value: 44 },\n      { value: 45 }\n    ]\n  }\n];\nconst mockPieData = [\n  { name: 'Premium Plan', value: 234, color: '#3b82f6' },\n  { name: 'Basic Plan', value: 567, color: '#10b981' },\n  { name: 'Enterprise Plan', value: 89, color: '#f59e0b' },\n  { name: 'Starter Plan', value: 432, color: '#8b5cf6' },\n  { name: 'Pro Plan', value: 156, color: '#ec4899' }\n];\n\nconst getActivityIcon = (icon: string, isDark: boolean) => {\n  const iconClass = `h-4 w-4 ${isDark ? 'text-gray-300' : 'text-gray-700'}`;\n  switch (icon) {\n    case 'check':\n      return <CheckCircle className={iconClass} />;\n    case 'alert':\n      return <AlertCircle className={iconClass} />;\n    case 'user':\n      return <UserPlus className={iconClass} />;\n    case 'package':\n      return <Package className={iconClass} />;\n    case 'card':\n      return <CreditCard className={iconClass} />;\n    case 'clock':\n      return <Clock className={iconClass} />;\n    default:\n      return <CheckCircle className={iconClass} />;\n  }\n};\n\nconst getActivityColor = (type: string) => {\n  switch (type) {\n    case 'success':\n      return 'bg-green-500';\n    case 'warning':\n      return 'bg-yellow-500';\n    case 'info':\n      return 'bg-blue-500';\n    case 'error':\n      return 'bg-red-500';\n    default:\n      return 'bg-gray-500';\n  }\n};\nconst UserChart = ({ data, isDarkMode }: { data: ChartDataPoint[], isDarkMode: boolean }) => {\n  const maxUsers = Math.max(...data.map(d => d.users));\n  const minUsers = Math.min(...data.map(d => d.users));\n  const range = maxUsers - minUsers;\n  const padding = range * 0.2;\n  const chartMax = maxUsers + padding;\n  const chartMin = Math.max(0, minUsers - padding);\n  const chartRange = chartMax - chartMin;\n\n  const [hoveredIndex, setHoveredIndex] = useState<number | null>(null);\n\n  const points = data.map((point, index) => {\n    const x = (index / (data.length - 1)) * 100;\n    const y = 100 - ((point.users - chartMin) / chartRange) * 100;\n    return { x, y, ...point };\n  });\n\n  const pathD = points.reduce((path, point, index) => {\n    const command = index === 0 ? 'M' : 'L';\n    return `${path} ${command} ${point.x} ${point.y}`;\n  }, '');\n\n  const areaD = `${pathD} L 100 100 L 0 100 Z`;\n\n  const gradientId = `userGradient-${isDarkMode ? 'dark' : 'light'}`;\n\n  return (\n    <div className=\"relative w-full h-64\">\n      <svg\n        viewBox=\"0 0 100 100\"\n        preserveAspectRatio=\"none\"\n        className=\"w-full h-full\"\n      >\n        <defs>\n          <linearGradient id={gradientId} x1=\"0%\" y1=\"0%\" x2=\"0%\" y2=\"100%\">\n            <stop offset=\"0%\" stopColor={isDarkMode ? '#3b82f6' : '#60a5fa'} stopOpacity=\"0.8\" />\n            <stop offset=\"50%\" stopColor={isDarkMode ? '#3b82f6' : '#60a5fa'} stopOpacity=\"0.4\" />\n            <stop offset=\"100%\" stopColor={isDarkMode ? '#3b82f6' : '#60a5fa'} stopOpacity=\"0.1\" />\n          </linearGradient>\n        </defs>\n\n        <motion.path\n          d={areaD}\n          fill={`url(#${gradientId})`}\n          initial={{ opacity: 0 }}\n          animate={{ opacity: 1 }}\n          transition={{ duration: 0.8, ease: \"easeOut\" }}\n        />\n\n        <motion.path\n          d={pathD}\n          fill=\"none\"\n          stroke={isDarkMode ? '#3b82f6' : '#2563eb'}\n          strokeWidth=\"0.5\"\n          strokeLinecap=\"round\"\n          strokeLinejoin=\"round\"\n          initial={{ pathLength: 0 }}\n          animate={{ pathLength: 1 }}\n          transition={{ duration: 1.2, ease: \"easeInOut\" }}\n        />\n\n        {points.map((point, index) => (\n          <motion.circle\n            key={index}\n            cx={point.x}\n            cy={point.y}\n            r={hoveredIndex === index ? \"1.5\" : \"1\"}\n            fill={isDarkMode ? '#3b82f6' : '#2563eb'}\n            initial={{ scale: 0 }}\n            animate={{ scale: 1 }}\n            transition={{ duration: 0.3, delay: index * 0.1 }}\n            onMouseEnter={() => setHoveredIndex(index)}\n            onMouseLeave={() => setHoveredIndex(null)}\n            className=\"cursor-pointer\"\n            style={{ transformOrigin: `${point.x}px ${point.y}px` }}\n          />\n        ))}\n      </svg>\n\n      <div className=\"absolute inset-0 pointer-events-none\">\n        {points.map((point, index) => (\n          <motion.div\n            key={index}\n            className=\"absolute pointer-events-auto\"\n            style={{\n              left: `${point.x}%`,\n              top: `${point.y}%`,\n              transform: 'translate(-50%, -50%)'\n            }}\n            onMouseEnter={() => setHoveredIndex(index)}\n            onMouseLeave={() => setHoveredIndex(null)}\n          >\n            {hoveredIndex === index && (\n              <motion.div\n                initial={{ opacity: 0, y: 10 }}\n                animate={{ opacity: 1, y: 0 }}\n                className={`absolute bottom-full mb-2 px-3 py-2 rounded-lg shadow-lg whitespace-nowrap ${\n                  isDarkMode ? 'bg-gray-700 text-white' : 'bg-white text-gray-900'\n                }`}\n                style={{ transform: 'translateX(-50%)' }}\n              >\n                <div className=\"text-xs font-semibold\">{point.users.toLocaleString()} users</div>\n                <div className={`text-xs ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                  {new Date(point.date).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n                </div>\n              </motion.div>\n            )}\n          </motion.div>\n        ))}\n      </div>\n\n      <div className={`flex justify-between mt-2 text-xs ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n        {data.map((point, index) => (\n          index % Math.ceil(data.length / 4) === 0 && (\n            <span key={index}>\n              {new Date(point.date).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n            </span>\n          )\n        ))}\n      </div>\n    </div>\n  );\n};\n\nconst getMetricIcon = (label: string) => {\n  switch (label) {\n    case 'Total Revenue':\n      return DollarSign;\n    case 'Active Users':\n      return Users;\n    case 'Total Orders':\n      return ShoppingCart;\n    case 'Conversion Rate':\n      return Target;\n    default:\n      return DollarSign;\n  }\n};\n\nconst formatMetricValue = (label: string, value: number) => {\n  if (label === 'Total Revenue') {\n    return `$${value.toLocaleString()}`;\n  } else if (label === 'Conversion Rate') {\n    return `${value}%`;\n  }\n  return value.toLocaleString();\n};\n\ntype SortField = 'product' | 'sales' | 'revenue' | 'status';\ntype SortDirection = 'asc' | 'desc';\n\nconst DataTable = ({ \n  data, \n  isDarkMode \n}: { \n  data: TableRow[]; \n  isDarkMode: boolean;\n}) => {\n  const [sortField, setSortField] = useState<SortField>('revenue');\n  const [sortDirection, setSortDirection] = useState<SortDirection>('desc');\n  const [currentPage, setCurrentPage] = useState(1);\n  const itemsPerPage = 5;\n\n  const handleSort = (field: SortField) => {\n    if (sortField === field) {\n      setSortDirection(sortDirection === 'asc' ? 'desc' : 'asc');\n    } else {\n      setSortField(field);\n      setSortDirection('desc');\n    }\n  };\n\n  const sortedData = [...data].sort((a, b) => {\n    let aValue = a[sortField];\n    let bValue = b[sortField];\n\n    if (typeof aValue === 'string') {\n      aValue = aValue.toLowerCase();\n      bValue = (bValue as string).toLowerCase();\n    }\n\n    if (sortDirection === 'asc') {\n      return aValue > bValue ? 1 : -1;\n    } else {\n      return aValue < bValue ? 1 : -1;\n    }\n  });\n\n  const totalPages = Math.ceil(sortedData.length / itemsPerPage);\n  const startIndex = (currentPage - 1) * itemsPerPage;\n  const paginatedData = sortedData.slice(startIndex, startIndex + itemsPerPage);\n\n  const getStatusBadge = (status: TableRow['status']) => {\n    const variants = {\n      active: 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200',\n      pending: 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200',\n      inactive: 'bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-300'\n    };\n\n    return (\n      <Badge className={variants[status]} variant=\"secondary\">\n        {status.charAt(0).toUpperCase() + status.slice(1)}\n      </Badge>\n    );\n  };\n\n  return (\n    <div className=\"space-y-4\">\n      {/* Desktop Table */}\n      <div className=\"hidden md:block overflow-x-auto\">\n        <table className=\"w-full\">\n          <thead>\n            <tr className={`border-b ${isDarkMode ? 'border-gray-700' : 'border-gray-200'}`}>\n              <th className={`text-left p-3 ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>\n                <button\n                  onClick={() => handleSort('product')}\n                  className=\"flex items-center gap-1 hover:text-blue-500 transition-colors\"\n                >\n                  Product\n                  <ArrowUpDown className=\"h-4 w-4\" />\n                </button>\n              </th>\n              <th className={`text-left p-3 ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>\n                <button\n                  onClick={() => handleSort('sales')}\n                  className=\"flex items-center gap-1 hover:text-blue-500 transition-colors\"\n                >\n                  Sales\n                  <ArrowUpDown className=\"h-4 w-4\" />\n                </button>\n              </th>\n              <th className={`text-left p-3 ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>\n                <button\n                  onClick={() => handleSort('revenue')}\n                  className=\"flex items-center gap-1 hover:text-blue-500 transition-colors\"\n                >\n                  Revenue\n                  <ArrowUpDown className=\"h-4 w-4\" />\n                </button>\n              </th>\n              <th className={`text-left p-3 ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>\n                <button\n                  onClick={() => handleSort('status')}\n                  className=\"flex items-center gap-1 hover:text-blue-500 transition-colors\"\n                >\n                  Status\n                  <ArrowUpDown className=\"h-4 w-4\" />\n                </button>\n              </th>\n            </tr>\n          </thead>\n          <tbody>\n            {paginatedData.map((row, index) => (\n              <motion.tr\n                key={row.id}\n                initial={{ opacity: 0, y: 10 }}\n                animate={{ opacity: 1, y: 0 }}\n                transition={{ delay: index * 0.05 }}\n                className={`border-b ${isDarkMode ? 'border-gray-700 hover:bg-gray-750' : 'border-gray-100 hover:bg-gray-50'} transition-colors`}\n              >\n                <td className={`p-3 font-medium ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                  {row.product}\n                </td>\n                <td className={`p-3 ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>\n                  {row.sales.toLocaleString()}\n                </td>\n                <td className={`p-3 ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>\n                  ${row.revenue.toLocaleString()}\n                </td>\n                <td className=\"p-3\">\n                  {getStatusBadge(row.status)}\n                </td>\n              </motion.tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n\n      {/* Mobile Cards */}\n      <div className=\"md:hidden space-y-3\">\n        {paginatedData.map((row, index) => (\n          <motion.div\n            key={row.id}\n            initial={{ opacity: 0, y: 10 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ delay: index * 0.05 }}\n            className={`p-4 rounded-lg border ${isDarkMode ? 'bg-gray-750 border-gray-700' : 'bg-white border-gray-200'}`}\n          >\n            <div className=\"flex justify-between items-start mb-3\">\n              <h3 className={`font-medium ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                {row.product}\n              </h3>\n              {getStatusBadge(row.status)}\n            </div>\n            <div className=\"grid grid-cols-2 gap-2\">\n              <div>\n                <p className={`text-sm ${isDarkMode ? 'text-gray-400' : 'text-gray-500'}`}>\n                  Sales\n                </p>\n                <p className={`font-medium ${isDarkMode ? 'text-gray-200' : 'text-gray-900'}`}>\n                  {row.sales.toLocaleString()}\n                </p>\n              </div>\n              <div>\n                <p className={`text-sm ${isDarkMode ? 'text-gray-400' : 'text-gray-500'}`}>\n                  Revenue\n                </p>\n                <p className={`font-medium ${isDarkMode ? 'text-gray-200' : 'text-gray-900'}`}>\n                  ${row.revenue.toLocaleString()}\n                </p>\n              </div>\n            </div>\n          </motion.div>\n        ))}\n      </div>\n\n      {/* Pagination */}\n      <div className=\"flex items-center justify-between pt-4\">\n        <p className={`text-sm ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n          Showing {startIndex + 1} to {Math.min(startIndex + itemsPerPage, sortedData.length)} of {sortedData.length} results\n        </p>\n        <div className=\"flex gap-2\">\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={() => setCurrentPage(prev => Math.max(1, prev - 1))}\n            disabled={currentPage === 1}\n            className={isDarkMode ? 'border-gray-700' : ''}\n          >\n            <ChevronLeft className=\"h-4 w-4\" />\n          </Button>\n          <div className=\"flex items-center gap-1\">\n            {Array.from({ length: totalPages }, (_, i) => i + 1).map(page => (\n              <Button\n                key={page}\n                variant={currentPage === page ? 'default' : 'outline'}\n                size=\"sm\"\n                onClick={() => setCurrentPage(page)}\n                className={`w-8 ${isDarkMode && currentPage !== page ? 'border-gray-700' : ''}`}\n              >\n                {page}\n              </Button>\n            ))}\n          </div>\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={() => setCurrentPage(prev => Math.min(totalPages, prev + 1))}\n            disabled={currentPage === totalPages}\n            className={isDarkMode ? 'border-gray-700' : ''}\n          >\n            <ChevronRight className=\"h-4 w-4\" />\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default function AnalyticsDashboard() {\n  const [pieData] = useState(mockPieData);\n\n  const renderCustomLabel = ({ cx, cy, midAngle, innerRadius, outerRadius, percent }: any) => {\n    const RADIAN = Math.PI / 180;\n    const radius = innerRadius + (outerRadius - innerRadius) * 0.5;\n    const x = cx + radius * Math.cos(-midAngle * RADIAN);\n    const y = cy + radius * Math.sin(-midAngle * RADIAN);\n\n    return (\n      <text\n        x={x}\n        y={y}\n        fill=\"white\"\n        textAnchor={x > cx ? 'start' : 'end'}\n        dominantBaseline=\"central\"\n        className=\"text-xs font-semibold\"\n      >\n        {`${(percent * 100).toFixed(0)}%`}\n      </text>\n    );\n  };\n  const [isDarkMode, setIsDarkMode] = useState(false);\n  const [metrics, setMetrics] = useState<MetricData[]>(mockMetrics);\n  const [chartData, setChartData] = useState<ChartDataPoint[]>(mockChartData);\n  const [tableData, setTableData] = useState<TableRow[]>(mockTableData);\n  const [isRefreshing, setIsRefreshing] = useState(false);\n\n  const toggleDarkMode = useCallback(() => {\n    setIsDarkMode(prev => !prev);\n  }, []);\n\n  const handleRefresh = useCallback(() => {\n    setIsRefreshing(true);\n    \n    setTimeout(() => {\n      // Generate updated metrics with random variations\n      const updatedMetrics = mockMetrics.map(metric => ({\n        ...metric,\n        value: metric.value + Math.floor(Math.random() * 200 - 100),\n        change: parseFloat((Math.random() * 20 - 5).toFixed(1)),\n        trend: Math.random() > 0.5 ? 'up' as const : 'down' as const\n      }));\n      \n      // Generate updated chart data with random variations\n      const updatedChartData = mockChartData.map(point => ({\n        ...point,\n        revenue: point.revenue + Math.floor(Math.random() * 4000 - 2000),\n        users: point.users + Math.floor(Math.random() * 100 - 50),\n        orders: point.orders + Math.floor(Math.random() * 50 - 25)\n      }));\n      \n      // Generate updated table data with random variations\n      const updatedTableData = mockTableData.map(row => ({\n        ...row,\n        sales: row.sales + Math.floor(Math.random() * 40 - 20),\n        revenue: row.revenue + Math.floor(Math.random() * 2000 - 1000)\n      }));\n      \n      setMetrics(updatedMetrics);\n      setChartData(updatedChartData);\n      setTableData(updatedTableData);\n      setIsRefreshing(false);\n    }, 1500);\n  }, []);\n\n  const [alerts, setAlerts] = useState<Alert[]>(mockAlerts);\n\n  const dismissAlert = useCallback((alertId: string) => {\n    setAlerts(prev => prev.filter(alert => alert.id !== alertId));\n  }, []);\n\n  const getAlertIcon = (severity: Alert['severity']) => {\n    switch (severity) {\n      case 'error':\n        return <AlertCircle className=\"h-5 w-5 text-red-500\" />;\n      case 'warning':\n        return <AlertTriangle className=\"h-5 w-5 text-yellow-500\" />;\n      case 'info':\n        return <Info className=\"h-5 w-5 text-blue-500\" />;\n    }\n  };\n\n  const getAlertStyles = (severity: Alert['severity']) => {\n    const baseStyles = 'p-3 rounded-lg border flex items-start gap-3 mb-3';\n    switch (severity) {\n      case 'error':\n        return `${baseStyles} ${isDarkMode ? 'bg-red-950 border-red-800' : 'bg-red-50 border-red-200'}`;\n      case 'warning':\n        return `${baseStyles} ${isDarkMode ? 'bg-yellow-950 border-yellow-800' : 'bg-yellow-50 border-yellow-200'}`;\n      case 'info':\n        return `${baseStyles} ${isDarkMode ? 'bg-blue-950 border-blue-800' : 'bg-blue-50 border-blue-200'}`;\n    }\n  };\n\n  return (\n    <div className={`min-h-screen ${isDarkMode ? 'dark bg-gray-900' : 'bg-gray-50'}`}>\n      <div className=\"container mx-auto p-4 md:p-6 lg:p-8\">\n        <div className=\"flex flex-col md:flex-row justify-between items-start md:items-center gap-4 mb-8\">\n          <div>\n            <h1 className={`text-3xl md:text-4xl font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n              Analytics Dashboard\n            </h1>\n            <p className={`mt-2 ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n              Real-time insights and performance metrics\n            </p>\n          </div>\n          \n          <div className=\"flex gap-2\">\n            <Button\n              variant=\"outline\"\n              size=\"icon\"\n              onClick={toggleDarkMode}\n              className={isDarkMode ? 'border-gray-700' : ''}\n            >\n              {isDarkMode ? <Sun className=\"h-5 w-5\" /> : <Moon className=\"h-5 w-5\" />}\n            </Button>\n            \n            <Button\n              variant=\"outline\"\n              onClick={handleRefresh}\n              disabled={isRefreshing}\n              className={isDarkMode ? 'border-gray-700' : ''}\n            >\n              <RefreshCw className={`h-4 w-4 mr-2 ${isRefreshing ? 'animate-spin' : ''}`} />\n              Refresh\n            </Button>\n          </div>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 md:gap-6 mb-8\">\n          {metrics.map((metric, index) => {\n            const IconComponent = getMetricIcon(metric.label);\n            const isPositive = metric.trend === 'up';\n            \n            return (\n              <motion.div\n                key={metric.id}\n                initial={{ opacity: 0, y: 20 }}\n                animate={{ opacity: 1, y: 0 }}\n                transition={{ duration: 0.4, delay: index * 0.1 }}\n              >\n                <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n                  <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                    <CardTitle className={`text-sm font-medium ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                      {metric.label}\n                    </CardTitle>\n                    <div className={`p-2 rounded-lg ${isDarkMode ? 'bg-gray-700' : 'bg-gray-100'}`}>\n                      <IconComponent className={`h-4 w-4 ${isDarkMode ? 'text-gray-300' : 'text-gray-600'}`} />\n                    </div>\n                  </CardHeader>\n                  <CardContent>\n                    <div className={`text-2xl font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                      {formatMetricValue(metric.label, metric.value)}\n                    </div>\n                    <div className=\"flex items-center mt-2\">\n                      {isPositive ? (\n                        <TrendingUp className=\"h-4 w-4 text-green-500 mr-1\" />\n                      ) : (\n                        <TrendingDown className=\"h-4 w-4 text-red-500 mr-1\" />\n                      )}\n                      <span className={`text-sm font-medium ${isPositive ? 'text-green-500' : 'text-red-500'}`}>\n                        {isPositive ? '+' : ''}{metric.change}%\n                      </span>\n                      <span className={`text-sm ml-2 ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                        vs last period\n                      </span>\n                    </div>\n                  </CardContent>\n                </Card>\n              </motion.div>\n            );\n          })}\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-4 md:gap-6 mb-8\">\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Revenue Overview</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Daily revenue trends\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <ResponsiveContainer width=\"100%\" height={300}>\n                <LineChart data={chartData}>\n                  <CartesianGrid \n                    strokeDasharray=\"3 3\" \n                    stroke={isDarkMode ? '#374151' : '#e5e7eb'} \n                  />\n                  <XAxis \n                    dataKey=\"date\" \n                    stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                    tick={{ fill: isDarkMode ? '#9ca3af' : '#6b7280' }}\n                    tickFormatter={(value) => new Date(value).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n                  />\n                  <YAxis \n                    stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                    tick={{ fill: isDarkMode ? '#9ca3af' : '#6b7280' }}\n                    tickFormatter={(value) => `$${(value / 1000).toFixed(0)}k`}\n                  />\n                  <Tooltip \n                    contentStyle={{\n                      backgroundColor: isDarkMode ? '#1f2937' : '#ffffff',\n                      border: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\n                      borderRadius: '6px',\n                      color: isDarkMode ? '#ffffff' : '#000000'\n                    }}\n                    labelStyle={{ color: isDarkMode ? '#9ca3af' : '#6b7280' }}\n                    formatter={(value: number) => [`$${value.toLocaleString()}`, 'Revenue']}\n                    labelFormatter={(label) => new Date(label).toLocaleDateString('en-US', { month: 'long', day: 'numeric', year: 'numeric' })}\n                  />\n                  <Line \n                    type=\"monotone\" \n                    dataKey=\"revenue\" \n                    stroke=\"#3b82f6\" \n                    strokeWidth={2}\n                    dot={{ fill: '#3b82f6', r: 4 }}\n                    activeDot={{ r: 6 }}\n                  />\n                </LineChart>\n              </ResponsiveContainer>\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>User Growth</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Active users over time\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <UserChart data={chartData} isDarkMode={isDarkMode} />\n            </CardContent>\n          </Card>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-4 md:gap-6 mb-8\">\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Orders Distribution</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                By product category\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"h-[300px] w-full\">\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <PieChart>\n                    <Pie\n                      data={pieData}\n                      cx=\"50%\"\n                      cy=\"50%\"\n                      labelLine={false}\n                      label={renderCustomLabel}\n                      outerRadius={80}\n                      fill=\"#8884d8\"\n                      dataKey=\"value\"\n                      animationBegin={0}\n                      animationDuration={800}\n                    >\n                      {pieData.map((entry, index) => (\n                        <Cell key={`cell-${index}`} fill={entry.color} />\n                      ))}\n                    </Pie>\n                    <RechartsTooltip\n                      contentStyle={{\n                        backgroundColor: isDarkMode ? '#1f2937' : '#ffffff',\n                        border: isDarkMode ? '1px solid #374151' : '1px solid #e5e7eb',\n                        borderRadius: '6px',\n                        color: isDarkMode ? '#ffffff' : '#000000'\n                      }}\n                      formatter={(value: number) => [`${value} orders`, 'Orders']}\n                    />\n                    <Legend\n                      verticalAlign=\"bottom\"\n                      height={36}\n                      iconType=\"circle\"\n                      formatter={(value) => (\n                        <span className={isDarkMode ? 'text-gray-300' : 'text-gray-700'}>\n                          {value}\n                        </span>\n                      )}\n                    />\n                  </PieChart>\n                </ResponsiveContainer>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className={`lg:col-span-2 ${isDarkMode ? 'bg-gray-800 border-gray-700' : ''}`}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Performance Metrics</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Combined view of key indicators\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <ResponsiveContainer width=\"100%\" height={300}>\n                <BarChart data={chartData}>\n                  <CartesianGrid \n                    strokeDasharray=\"3 3\" \n                    stroke={isDarkMode ? '#374151' : '#e5e7eb'}\n                  />\n                  <XAxis \n                    dataKey=\"date\" \n                    stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                    tick={{ fill: isDarkMode ? '#9ca3af' : '#6b7280' }}\n                    tickFormatter={(value) => new Date(value).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n                  />\n                  <YAxis \n                    stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                    tick={{ fill: isDarkMode ? '#9ca3af' : '#6b7280' }}\n                  />\n                  <Tooltip \n                    contentStyle={{\n                      backgroundColor: isDarkMode ? '#1f2937' : '#ffffff',\n                      border: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\n                      borderRadius: '8px',\n                      color: isDarkMode ? '#f3f4f6' : '#111827'\n                    }}\n                    labelStyle={{ color: isDarkMode ? '#f3f4f6' : '#111827' }}\n                    formatter={(value: number, name: string) => {\n                      if (name === 'revenue') return [`$${value.toLocaleString()}`, 'Revenue'];\n                      if (name === 'users') return [value.toLocaleString(), 'Users'];\n                      if (name === 'orders') return [value.toLocaleString(), 'Orders'];\n                      return [value, name];\n                    }}\n                    labelFormatter={(label) => new Date(label).toLocaleDateString('en-US', { \n                      month: 'long', \n                      day: 'numeric',\n                      year: 'numeric'\n                    })}\n                  />\n                  <Legend \n                    wrapperStyle={{ color: isDarkMode ? '#9ca3af' : '#6b7280' }}\n                    formatter={(value) => {\n                      if (value === 'revenue') return 'Revenue';\n                      if (value === 'users') return 'Users';\n                      if (value === 'orders') return 'Orders';\n                      return value;\n                    }}\n                  />\n                  <Bar \n                    dataKey=\"revenue\" \n                    fill=\"#3b82f6\" \n                    radius={[4, 4, 0, 0]}\n                    animationDuration={800}\n                  />\n                  <Bar \n                    dataKey=\"users\" \n                    fill=\"#10b981\" \n                    radius={[4, 4, 0, 0]}\n                    animationDuration={800}\n                  />\n                  <Bar \n                    dataKey=\"orders\" \n                    fill=\"#f59e0b\" \n                    radius={[4, 4, 0, 0]}\n                    animationDuration={800}\n                  />\n                </BarChart>\n              </ResponsiveContainer>\n            </CardContent>\n          </Card>\n        </div>\n\n        <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n          <CardHeader>\n            <CardTitle className={isDarkMode ? 'text-white' : ''}>Top Products</CardTitle>\n            <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n              Best performing products by revenue\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <DataTable data={tableData} isDarkMode={isDarkMode} />\n          </CardContent>\n        </Card>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 md:gap-6 mt-8\">\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Recent Activity</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {mockActivityData.map((activity, index) => (\n                  <motion.div\n                    key={activity.id}\n                    initial={{ opacity: 0, x: -20 }}\n                    animate={{ opacity: 1, x: 0 }}\n                    transition={{ delay: index * 0.1, duration: 0.3 }}\n                    className=\"flex items-start gap-3\"\n                  >\n                    <div className={`mt-1 rounded-full p-2 ${getActivityColor(activity.type)}`}>\n                      {getActivityIcon(activity.icon, isDarkMode)}\n                    </div>\n                    <div className=\"flex-1 min-w-0\">\n                      <p className={`text-sm font-medium ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                        {activity.message}\n                      </p>\n                      <p className={`text-xs mt-1 ${isDarkMode ? 'text-gray-400' : 'text-gray-500'}`}>\n                        {activity.timestamp}\n                      </p>\n                    </div>\n                  </motion.div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Quick Stats</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {mockQuickStats.map((stat, index) => (\n                  <motion.div\n                    key={stat.id}\n                    initial={{ opacity: 0, x: -20 }}\n                    animate={{ opacity: 1, x: 0 }}\n                    transition={{ delay: index * 0.1 }}\n                    className={`p-4 rounded-lg border ${\n                      isDarkMode ? 'bg-gray-700/50 border-gray-600' : 'bg-white border-gray-200'\n                    }`}\n                  >\n                    <div className=\"flex items-start justify-between mb-3\">\n                      <div className=\"flex-1\">\n                        <p className={`text-sm ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                          {stat.label}\n                        </p>\n                        <p className={`text-2xl font-bold mt-1 ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                          {stat.value}\n                        </p>\n                      </div>\n                      <div className={`flex items-center gap-1 px-2 py-1 rounded-full text-xs font-medium ${\n                        stat.change >= 0\n                          ? 'bg-green-100 text-green-700 dark:bg-green-900/30 dark:text-green-400'\n                          : 'bg-red-100 text-red-700 dark:bg-red-900/30 dark:text-red-400'\n                      }`}>\n                        {stat.change >= 0 ? (\n                          <TrendingUp className=\"h-3 w-3\" />\n                        ) : (\n                          <TrendingDown className=\"h-3 w-3\" />\n                        )}\n                        {Math.abs(stat.change)}%\n                      </div>\n                    </div>\n                    \n                    <div className=\"h-12\">\n                      <ResponsiveContainer width=\"100%\" height=\"100%\">\n                        <AreaChart data={stat.sparklineData}>\n                          <defs>\n                            <linearGradient id={`gradient-${stat.id}`} x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                              <stop\n                                offset=\"0%\"\n                                stopColor={stat.change >= 0 ? '#10b981' : '#ef4444'}\n                                stopOpacity={0.3}\n                              />\n                              <stop\n                                offset=\"100%\"\n                                stopColor={stat.change >= 0 ? '#10b981' : '#ef4444'}\n                                stopOpacity={0}\n                              />\n                            </linearGradient>\n                          </defs>\n                          <Area\n                            type=\"monotone\"\n                            dataKey=\"value\"\n                            stroke={stat.change >= 0 ? '#10b981' : '#ef4444'}\n                            strokeWidth={2}\n                            fill={`url(#gradient-${stat.id})`}\n                            animationDuration={1000}\n                          />\n                        </AreaChart>\n                      </ResponsiveContainer>\n                    </div>\n                  </motion.div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Alerts</CardTitle>\n            </CardHeader>\n            <CardContent>              <div className=\"space-y-2\">\n                {alerts.length === 0 ? (\n                  <div className={`text-center py-8 ${isDarkMode ? 'text-gray-400' : 'text-gray-500'}`}>\n                    <Info className=\"h-12 w-12 mx-auto mb-2 opacity-50\" />\n                    <p>No alerts at this time</p>\n                  </div>\n                ) : (\n                  alerts.map((alert, index) => (\n                    <motion.div\n                      key={alert.id}\n                      initial={{ opacity: 0, x: -20 }}\n                      animate={{ opacity: 1, x: 0 }}\n                      exit={{ opacity: 0, x: 20 }}\n                      transition={{ delay: index * 0.1 }}\n                      className={getAlertStyles(alert.severity)}\n                    >\n                      <div className=\"flex-shrink-0 mt-0.5\">\n                        {getAlertIcon(alert.severity)}\n                      </div>\n                      <div className=\"flex-1 min-w-0\">\n                        <p className={`text-sm font-medium ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                          {alert.message}\n                        </p>\n                        <p className={`text-xs mt-1 ${isDarkMode ? 'text-gray-400' : 'text-gray-500'}`}>\n                          {alert.timestamp}\n                        </p>\n                      </div>\n                      <button\n                        onClick={() => dismissAlert(alert.id)}\n                        className={`flex-shrink-0 p-1 rounded hover:bg-black/10 transition-colors ${\n                          isDarkMode ? 'text-gray-400 hover:text-white' : 'text-gray-500 hover:text-gray-700'\n                        }`}\n                        aria-label=\"Dismiss alert\"\n                      >\n                        <X className=\"h-4 w-4\" />\n                      </button>\n                    </motion.div>\n                  ))\n                )}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}",
    "error": null,
    "elapsed_time": 84.36101484298706,
    "success": true
  }
}