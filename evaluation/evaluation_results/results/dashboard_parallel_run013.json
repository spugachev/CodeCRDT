{
  "prompt_id": "dashboard",
  "prompt_name": "Analytics Dashboard",
  "mode": "parallel",
  "run_number": 13,
  "timestamp": "2025-10-13T22:08:32.127379",
  "response_time": 69.32596015930176,
  "total_tokens": null,
  "response_content": "import { useState, useCallback } from 'react';\nimport { Badge } from '@/components/ui/badge';\nimport { ArrowUpDown } from 'lucide-react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Moon, Sun, RefreshCw } from 'lucide-react';\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';\nimport { PieChart, Pie, Cell, Legend } from 'recharts';\nimport { motion } from 'framer-motion';\n\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';\n\nimport { TrendingUp, TrendingDown, DollarSign, Users, ShoppingCart, Target } from 'lucide-react';\nimport { motion } from 'framer-motion';\n\ninterface MetricData {\n  id: string;\n  label: string;\n  value: number;\n  change: number;\n  trend: 'up' | 'down';\n}\n\ninterface ChartDataPoint {\n  date: string;\n  revenue: number;\n  users: number;\n  orders: number;\n}\n\ninterface TableRow {\n  id: string;\n  product: string;\n  sales: number;\n  revenue: number;\n  status: 'active' | 'pending' | 'inactive';\n}\n\nconst mockMetrics: MetricData[] = [\n  { id: '1', label: 'Total Revenue', value: 45231, change: 12.5, trend: 'up' },\n  { id: '2', label: 'Active Users', value: 2350, change: 8.2, trend: 'up' },\n  { id: '3', label: 'Total Orders', value: 1543, change: -3.1, trend: 'down' },\n  { id: '4', label: 'Conversion Rate', value: 3.24, change: 5.7, trend: 'up' }\n];\n\nconst mockChartData: ChartDataPoint[] = [\n  { date: '2024-01-01', revenue: 12000, users: 450, orders: 230 },\n  { date: '2024-01-02', revenue: 15000, users: 520, orders: 280 },\n  { date: '2024-01-03', revenue: 13500, users: 490, orders: 250 },\n  { date: '2024-01-04', revenue: 18000, users: 610, orders: 320 },\n  { date: '2024-01-05', revenue: 16500, users: 580, orders: 295 },\n  { date: '2024-01-06', revenue: 20000, users: 680, orders: 360 },\n  { date: '2024-01-07', revenue: 22000, users: 720, orders: 390 }\n];\n\nconst mockTableData: TableRow[] = [\n  { id: '1', product: 'Premium Plan', sales: 234, revenue: 23400, status: 'active' },\n  { id: '2', product: 'Basic Plan', sales: 567, revenue: 11340, status: 'active' },\n  { id: '3', product: 'Enterprise Plan', sales: 89, revenue: 17800, status: 'active' },\n  { id: '4', product: 'Starter Plan', sales: 432, revenue: 4320, status: 'pending' },\n  { id: '5', product: 'Pro Plan', sales: 156, revenue: 15600, status: 'inactive' }\n];\nconst mockTrafficData = [\n  { name: 'Organic Search', value: 4200, color: '#3b82f6' },\n  { name: 'Direct', value: 2800, color: '#10b981' },\n  { name: 'Social Media', value: 1900, color: '#f59e0b' },\n  { name: 'Referral', value: 1200, color: '#8b5cf6' },\n  { name: 'Email', value: 900, color: '#ec4899' }\n];\n\nconst getMetricIcon = (label: string) => {\n  switch (label) {\n    case 'Total Revenue':\n      return DollarSign;\n    case 'Active Users':\n      return Users;\n    case 'Total Orders':\n      return ShoppingCart;\n    case 'Conversion Rate':\n      return Target;\n    default:\n      return DollarSign;\n  }\n};\n\nconst formatMetricValue = (label: string, value: number) => {\n  if (label === 'Total Revenue') {\n    return `$${value.toLocaleString()}`;\n  } else if (label === 'Conversion Rate') {\n    return `${value}%`;\n  }\n  return value.toLocaleString();\n};\n\nexport default function AnalyticsDashboard() {\n  const [isDarkMode, setIsDarkMode] = useState(false);\n  const [metrics, setMetrics] = useState<MetricData[]>(mockMetrics);\n  const [chartData, setChartData] = useState<ChartDataPoint[]>(mockChartData);\n  const [tableData, setTableData] = useState<TableRow[]>(mockTableData);\n  const [isRefreshing, setIsRefreshing] = useState(false);\n  const [sortConfig, setSortConfig] = useState<{ key: keyof TableRow; direction: 'asc' | 'desc' } | null>(null);\n\n  const handleSort = useCallback((key: keyof TableRow) => {\n    setSortConfig(prevConfig => {\n      if (prevConfig?.key === key) {\n        return { key, direction: prevConfig.direction === 'asc' ? 'desc' : 'asc' };\n      }\n      return { key, direction: 'asc' };\n    });\n  }, []);\n\n  const sortedTableData = useCallback(() => {\n    if (!sortConfig) return tableData;\n    \n    return [...tableData].sort((a, b) => {\n      const aValue = a[sortConfig.key];\n      const bValue = b[sortConfig.key];\n      \n      if (typeof aValue === 'number' && typeof bValue === 'number') {\n        return sortConfig.direction === 'asc' ? aValue - bValue : bValue - aValue;\n      }\n      \n      if (typeof aValue === 'string' && typeof bValue === 'string') {\n        return sortConfig.direction === 'asc' \n          ? aValue.localeCompare(bValue) \n          : bValue.localeCompare(aValue);\n      }\n      \n      return 0;\n    });\n  }, [tableData, sortConfig]);\n\n  const formatCurrency = (value: number) => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0\n    }).format(value);\n  };\n\n  const formatNumber = (value: number) => {\n    return new Intl.NumberFormat('en-US').format(value);\n  };\n\n  const getStatusColor = (status: TableRow['status']) => {\n    switch (status) {\n      case 'active':\n        return 'bg-green-500/10 text-green-500 hover:bg-green-500/20';\n      case 'pending':\n        return 'bg-yellow-500/10 text-yellow-500 hover:bg-yellow-500/20';\n      case 'inactive':\n        return 'bg-gray-500/10 text-gray-500 hover:bg-gray-500/20';\n      default:\n        return 'bg-gray-500/10 text-gray-500 hover:bg-gray-500/20';\n    }\n  };\n\n  const toggleDarkMode = useCallback(() => {\n    setIsDarkMode(prev => !prev);\n  }, []);\n\n  const handleRefresh = useCallback(() => {\n    setIsRefreshing(true);\n    \n    setTimeout(() => {\n      setIsRefreshing(false);\n    }, 1000);\n    setIsRefreshing(true);\n    \n    setTimeout(() => {\n      // Generate updated metrics with random variations\n      const updatedMetrics = mockMetrics.map(metric => ({\n        ...metric,\n        value: metric.value + Math.floor(Math.random() * 200 - 100),\n        change: parseFloat((Math.random() * 20 - 5).toFixed(1)),\n        trend: Math.random() > 0.5 ? 'up' as const : 'down' as const\n      }));\n      \n      // Generate updated chart data with random variations\n      const updatedChartData = mockChartData.map(point => ({\n        ...point,\n        revenue: point.revenue + Math.floor(Math.random() * 4000 - 2000),\n        users: point.users + Math.floor(Math.random() * 100 - 50),\n        orders: point.orders + Math.floor(Math.random() * 50 - 25)\n      }));\n      \n      // Generate updated table data with random variations\n      const updatedTableData = mockTableData.map(row => ({\n        ...row,\n        sales: row.sales + Math.floor(Math.random() * 40 - 20),\n        revenue: row.revenue + Math.floor(Math.random() * 2000 - 1000)\n      }));\n      \n      setMetrics(updatedMetrics);\n      setChartData(updatedChartData);\n      setTableData(updatedTableData);\n      setIsRefreshing(false);\n    }, 1500);\n  }, []);\n\n  return (\n    <div className={`min-h-screen transition-colors duration-300 ${isDarkMode ? 'dark bg-gray-900' : 'bg-gray-50'}`}>\n      <div className=\"container mx-auto p-4 md:p-6 lg:p-8\">\n        <div className=\"flex flex-col md:flex-row md:items-center md:justify-between mb-8 gap-4\">\n          <div>\n            <h1 className={`text-3xl md:text-4xl font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n              Analytics Dashboard\n            </h1>\n            <p className={`mt-2 ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n              Real-time insights and performance metrics\n            </p>\n          </div>\n          \n          <div className=\"flex items-center gap-3\">\n            <Button\n              variant=\"outline\"\n              size=\"icon\"\n              onClick={toggleDarkMode}\n              className={isDarkMode ? 'border-gray-700 hover:bg-gray-800' : ''}\n            >\n              {isDarkMode ? <Sun className=\"h-5 w-5\" /> : <Moon className=\"h-5 w-5\" />}\n            </Button>\n            \n            <Button\n              variant=\"outline\"\n              onClick={handleRefresh}\n              disabled={isRefreshing}\n              className={isDarkMode ? 'border-gray-700 hover:bg-gray-800' : ''}\n            >\n              <RefreshCw className={`h-4 w-4 mr-2 ${isRefreshing ? 'animate-spin' : ''}`} />\n              Refresh\n            </Button>\n          </div>\n        </div>\n\n        <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 md:gap-6 mb-8\">\n          {metrics.map((metric, index) => {\n            const Icon = getMetricIcon(metric.label);\n            const isPositive = metric.trend === 'up';\n            const TrendIcon = isPositive ? TrendingUp : TrendingDown;\n            \n            return (\n              <motion.div\n                key={metric.id}\n                initial={{ opacity: 0, y: 20 }}\n                animate={{ opacity: 1, y: 0 }}\n                transition={{ duration: 0.4, delay: index * 0.1 }}\n              >\n                <Card className={`${isDarkMode ? 'bg-gray-800 border-gray-700' : 'bg-white'} hover:shadow-lg transition-shadow duration-300`}>\n                  <CardHeader className=\"flex flex-row items-center justify-between pb-2\">\n                    <CardTitle className={`text-sm font-medium ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                      {metric.label}\n                    </CardTitle>\n                    <div className={`p-2 rounded-lg ${isDarkMode ? 'bg-gray-700' : 'bg-gray-100'}`}>\n                      <Icon className={`h-4 w-4 ${isDarkMode ? 'text-gray-300' : 'text-gray-600'}`} />\n                    </div>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"flex items-end justify-between\">\n                      <div>\n                        <div className={`text-2xl md:text-3xl font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                          {formatMetricValue(metric.label, metric.value)}\n                        </div>\n                        <div className=\"flex items-center mt-2 gap-1\">\n                          <TrendIcon \n                            className={`h-4 w-4 ${isPositive ? 'text-green-500' : 'text-red-500'}`} \n                          />\n                          <span className={`text-sm font-medium ${isPositive ? 'text-green-500' : 'text-red-500'}`}>\n                            {Math.abs(metric.change)}%\n                          </span>\n                          <span className={`text-sm ${isDarkMode ? 'text-gray-400' : 'text-gray-500'}`}>\n                            vs last period\n                          </span>\n                        </div>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              </motion.div>\n            );\n          })}\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6 mb-8\">\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Revenue Overview</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Daily revenue trends for the past week\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"w-full h-[300px] md:h-[350px]\">\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <LineChart\n                    data={chartData}\n                    margin={{ top: 5, right: 10, left: -20, bottom: 5 }}\n                  >\n                    <CartesianGrid \n                      strokeDasharray=\"3 3\" \n                      stroke={isDarkMode ? '#374151' : '#e5e7eb'}\n                    />\n                    <XAxis \n                      dataKey=\"date\" \n                      stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                      fontSize={12}\n                      tickFormatter={(value) => new Date(value).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n                    />\n                    <YAxis \n                      stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                      fontSize={12}\n                      tickFormatter={(value) => `$${(value / 1000).toFixed(0)}k`}\n                    />\n                    <Tooltip \n                      contentStyle={{\n                        backgroundColor: isDarkMode ? '#1f2937' : '#ffffff',\n                        border: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\n                        borderRadius: '8px',\n                        color: isDarkMode ? '#ffffff' : '#000000'\n                      }}\n                      labelFormatter={(value) => new Date(value).toLocaleDateString('en-US', { month: 'long', day: 'numeric', year: 'numeric' })}\n                      formatter={(value: number) => [`$${value.toLocaleString()}`, 'Revenue']}\n                    />\n                    <Line \n                      type=\"monotone\" \n                      dataKey=\"revenue\" \n                      stroke=\"#3b82f6\" \n                      strokeWidth={2}\n                      dot={{ fill: '#3b82f6', r: 4 }}\n                      activeDot={{ r: 6, fill: '#2563eb' }}\n                    />\n                  </LineChart>\n                </ResponsiveContainer>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>User Activity</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Active users and engagement metrics\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"relative h-[300px] w-full\">\n                <svg width=\"100%\" height=\"100%\" viewBox=\"0 0 700 300\" preserveAspectRatio=\"none\" className=\"overflow-visible\">\n                  <defs>\n                    <linearGradient id=\"userGradient\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                      <stop offset=\"0%\" stopColor={isDarkMode ? \"#3b82f6\" : \"#60a5fa\"} stopOpacity=\"0.6\" />\n                      <stop offset=\"100%\" stopColor={isDarkMode ? \"#3b82f6\" : \"#60a5fa\"} stopOpacity=\"0.05\" />\n                    </linearGradient>\n                  </defs>\n                  \n                  {/* Grid lines */}\n                  {[0, 1, 2, 3, 4].map((i) => (\n                    <line\n                      key={i}\n                      x1=\"0\"\n                      y1={i * 75}\n                      x2=\"700\"\n                      y2={i * 75}\n                      stroke={isDarkMode ? '#374151' : '#e5e7eb'}\n                      strokeWidth=\"1\"\n                    />\n                  ))}\n                  \n                  {/* Area path */}\n                  <motion.path\n                    initial={{ opacity: 0 }}\n                    animate={{ opacity: 1 }}\n                    transition={{ duration: 0.8 }}\n                    d={`\n                      M 0,${300 - (chartData[0].users / 720) * 250}\n                      ${chartData.map((point, i) => {\n                        const x = (i / (chartData.length - 1)) * 700;\n                        const y = 300 - (point.users / 720) * 250;\n                        return `L ${x},${y}`;\n                      }).join(' ')}\n                      L 700,300\n                      L 0,300\n                      Z\n                    `}\n                    fill=\"url(#userGradient)\"\n                  />\n                  \n                  {/* Line path */}\n                  <motion.path\n                    initial={{ pathLength: 0 }}\n                    animate={{ pathLength: 1 }}\n                    transition={{ duration: 1.5, ease: \"easeInOut\" }}\n                    d={`\n                      M 0,${300 - (chartData[0].users / 720) * 250}\n                      ${chartData.map((point, i) => {\n                        const x = (i / (chartData.length - 1)) * 700;\n                        const y = 300 - (point.users / 720) * 250;\n                        return `L ${x},${y}`;\n                      }).join(' ')}\n                    `}\n                    fill=\"none\"\n                    stroke={isDarkMode ? \"#3b82f6\" : \"#2563eb\"}\n                    strokeWidth=\"3\"\n                    strokeLinecap=\"round\"\n                    strokeLinejoin=\"round\"\n                  />\n                  \n                  {/* Data points with hover effects */}\n                  {chartData.map((point, i) => {\n                    const x = (i / (chartData.length - 1)) * 700;\n                    const y = 300 - (point.users / 720) * 250;\n                    return (\n                      <g key={i}>\n                        <motion.circle\n                          initial={{ scale: 0 }}\n                          animate={{ scale: 1 }}\n                          transition={{ delay: i * 0.1, duration: 0.3 }}\n                          cx={x}\n                          cy={y}\n                          r=\"6\"\n                          fill={isDarkMode ? \"#1e293b\" : \"#ffffff\"}\n                          stroke={isDarkMode ? \"#3b82f6\" : \"#2563eb\"}\n                          strokeWidth=\"3\"\n                          className=\"cursor-pointer transition-all hover:r-8\"\n                          style={{ filter: 'drop-shadow(0 2px 4px rgba(0,0,0,0.1))' }}\n                        />\n                        <circle\n                          cx={x}\n                          cy={y}\n                          r=\"20\"\n                          fill=\"transparent\"\n                          className=\"cursor-pointer\"\n                        >\n                          <title>{`${new Date(point.date).toLocaleDateString()}: ${point.users} users`}</title>\n                        </circle>\n                      </g>\n                    );\n                  })}\n                </svg>\n                \n                {/* X-axis labels */}\n                <div className=\"flex justify-between mt-4 px-2\">\n                  {chartData.map((point, i) => (\n                    <span\n                      key={i}\n                      className={`text-xs ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}\n                    >\n                      {new Date(point.date).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n                    </span>\n                  ))}\n                </div>\n                \n                {/* Y-axis labels */}\n                <div className=\"absolute left-0 top-0 h-[300px] flex flex-col justify-between -ml-12\">\n                  {[720, 540, 360, 180, 0].map((value, i) => (\n                    <span\n                      key={i}\n                      className={`text-xs ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}\n                    >\n                      {value}\n                    </span>\n                  ))}\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6 mb-8\">\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Orders Distribution</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Order volume by category\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"h-[300px] w-full\">\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <BarChart data={chartData}>\n                    <CartesianGrid \n                      strokeDasharray=\"3 3\" \n                      stroke={isDarkMode ? '#374151' : '#e5e7eb'}\n                    />\n                    <XAxis \n                      dataKey=\"date\" \n                      stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                      fontSize={12}\n                      tickFormatter={(value) => new Date(value).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n                    />\n                    <YAxis \n                      stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                      fontSize={12}\n                    />\n                    <Tooltip \n                      contentStyle={{\n                        backgroundColor: isDarkMode ? '#1f2937' : '#ffffff',\n                        border: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\n                        borderRadius: '8px',\n                        color: isDarkMode ? '#ffffff' : '#000000'\n                      }}\n                      labelStyle={{ color: isDarkMode ? '#9ca3af' : '#6b7280' }}\n                    />\n                    <Bar \n                      dataKey=\"orders\" \n                      fill=\"#8b5cf6\" \n                      radius={[8, 8, 0, 0]}\n                      animationDuration={1000}\n                    />\n                  </BarChart>\n                </ResponsiveContainer>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className={`lg:col-span-2 ${isDarkMode ? 'bg-gray-800 border-gray-700' : ''}`}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Performance Comparison</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Multi-metric comparison over time\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"h-80 w-full\">\n                <svg viewBox=\"0 0 800 300\" className=\"w-full h-full\">\n                  {/* Grid lines */}\n                  {[0, 1, 2, 3, 4, 5].map((i) => (\n                    <line\n                      key={`grid-${i}`}\n                      x1=\"50\"\n                      y1={50 + i * 40}\n                      x2=\"750\"\n                      y2={50 + i * 40}\n                      stroke={isDarkMode ? '#374151' : '#e5e7eb'}\n                      strokeWidth=\"1\"\n                    />\n                  ))}\n                  \n                  {/* Revenue line (scaled to fit) */}\n                  <motion.polyline\n                    initial={{ pathLength: 0, opacity: 0 }}\n                    animate={{ pathLength: 1, opacity: 1 }}\n                    transition={{ duration: 1, ease: \"easeInOut\" }}\n                    points={chartData.map((point, i) => {\n                      const x = 50 + (i * 700) / (chartData.length - 1);\n                      const y = 250 - (point.revenue / 25000) * 200;\n                      return `${x},${y}`;\n                    }).join(' ')}\n                    fill=\"none\"\n                    stroke=\"#3b82f6\"\n                    strokeWidth=\"3\"\n                    strokeLinecap=\"round\"\n                    strokeLinejoin=\"round\"\n                  />\n                  \n                  {/* Users line (scaled to fit) */}\n                  <motion.polyline\n                    initial={{ pathLength: 0, opacity: 0 }}\n                    animate={{ pathLength: 1, opacity: 1 }}\n                    transition={{ duration: 1, delay: 0.2, ease: \"easeInOut\" }}\n                    points={chartData.map((point, i) => {\n                      const x = 50 + (i * 700) / (chartData.length - 1);\n                      const y = 250 - (point.users / 800) * 200;\n                      return `${x},${y}`;\n                    }).join(' ')}\n                    fill=\"none\"\n                    stroke=\"#10b981\"\n                    strokeWidth=\"3\"\n                    strokeLinecap=\"round\"\n                    strokeLinejoin=\"round\"\n                  />\n                  \n                  {/* Orders line (scaled to fit) */}\n                  <motion.polyline\n                    initial={{ pathLength: 0, opacity: 0 }}\n                    animate={{ pathLength: 1, opacity: 1 }}\n                    transition={{ duration: 1, delay: 0.4, ease: \"easeInOut\" }}\n                    points={chartData.map((point, i) => {\n                      const x = 50 + (i * 700) / (chartData.length - 1);\n                      const y = 250 - (point.orders / 450) * 200;\n                      return `${x},${y}`;\n                    }).join(' ')}\n                    fill=\"none\"\n                    stroke=\"#f59e0b\"\n                    strokeWidth=\"3\"\n                    strokeLinecap=\"round\"\n                    strokeLinejoin=\"round\"\n                  />\n                  \n                  {/* Data points for revenue */}\n                  {chartData.map((point, i) => {\n                    const x = 50 + (i * 700) / (chartData.length - 1);\n                    const y = 250 - (point.revenue / 25000) * 200;\n                    return (\n                      <motion.circle\n                        key={`revenue-point-${i}`}\n                        initial={{ scale: 0 }}\n                        animate={{ scale: 1 }}\n                        transition={{ duration: 0.3, delay: 1 + i * 0.1 }}\n                        cx={x}\n                        cy={y}\n                        r=\"4\"\n                        fill=\"#3b82f6\"\n                        className=\"cursor-pointer hover:r-6 transition-all\"\n                      />\n                    );\n                  })}\n                  \n                  {/* Data points for users */}\n                  {chartData.map((point, i) => {\n                    const x = 50 + (i * 700) / (chartData.length - 1);\n                    const y = 250 - (point.users / 800) * 200;\n                    return (\n                      <motion.circle\n                        key={`users-point-${i}`}\n                        initial={{ scale: 0 }}\n                        animate={{ scale: 1 }}\n                        transition={{ duration: 0.3, delay: 1.2 + i * 0.1 }}\n                        cx={x}\n                        cy={y}\n                        r=\"4\"\n                        fill=\"#10b981\"\n                        className=\"cursor-pointer hover:r-6 transition-all\"\n                      />\n                    );\n                  })}\n                  \n                  {/* Data points for orders */}\n                  {chartData.map((point, i) => {\n                    const x = 50 + (i * 700) / (chartData.length - 1);\n                    const y = 250 - (point.orders / 450) * 200;\n                    return (\n                      <motion.circle\n                        key={`orders-point-${i}`}\n                        initial={{ scale: 0 }}\n                        animate={{ scale: 1 }}\n                        transition={{ duration: 0.3, delay: 1.4 + i * 0.1 }}\n                        cx={x}\n                        cy={y}\n                        r=\"4\"\n                        fill=\"#f59e0b\"\n                        className=\"cursor-pointer hover:r-6 transition-all\"\n                      />\n                    );\n                  })}\n                  \n                  {/* X-axis labels */}\n                  {chartData.map((point, i) => {\n                    const x = 50 + (i * 700) / (chartData.length - 1);\n                    return (\n                      <text\n                        key={`label-${i}`}\n                        x={x}\n                        y=\"280\"\n                        textAnchor=\"middle\"\n                        className={`text-xs ${isDarkMode ? 'fill-gray-400' : 'fill-gray-600'}`}\n                      >\n                        {new Date(point.date).getDate()}/{new Date(point.date).getMonth() + 1}\n                      </text>\n                    );\n                  })}\n                </svg>\n                \n                {/* Legend */}\n                <div className=\"flex justify-center gap-6 mt-4\">\n                  <div className=\"flex items-center gap-2\">\n                    <div className=\"w-4 h-4 rounded-full bg-blue-500\"></div>\n                    <span className={`text-sm ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>\n                      Revenue\n                    </span>\n                  </div>\n                  <div className=\"flex items-center gap-2\">\n                    <div className=\"w-4 h-4 rounded-full bg-green-500\"></div>\n                    <span className={`text-sm ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>\n                      Users\n                    </span>\n                  </div>\n                  <div className=\"flex items-center gap-2\">\n                    <div className=\"w-4 h-4 rounded-full bg-amber-500\"></div>\n                    <span className={`text-sm ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>\n                      Orders\n                    </span>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n          <CardHeader>\n            <CardTitle className={isDarkMode ? 'text-white' : ''}>Top Products</CardTitle>\n            <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n              Best performing products by sales and revenue\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"overflow-x-auto\">\n              <table className=\"w-full\">\n                <thead>\n                  <tr className={`border-b ${isDarkMode ? 'border-gray-700' : 'border-gray-200'}`}>\n                    <th className={`text-left py-3 px-4 font-semibold ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>\n                      <button\n                        onClick={() => handleSort('product')}\n                        className=\"flex items-center gap-2 hover:opacity-70 transition-opacity\"\n                      >\n                        Product\n                        <ArrowUpDown className=\"h-4 w-4\" />\n                      </button>\n                    </th>\n                    <th className={`text-right py-3 px-4 font-semibold ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>\n                      <button\n                        onClick={() => handleSort('sales')}\n                        className=\"flex items-center gap-2 ml-auto hover:opacity-70 transition-opacity\"\n                      >\n                        Sales\n                        <ArrowUpDown className=\"h-4 w-4\" />\n                      </button>\n                    </th>\n                    <th className={`text-right py-3 px-4 font-semibold ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>\n                      <button\n                        onClick={() => handleSort('revenue')}\n                        className=\"flex items-center gap-2 ml-auto hover:opacity-70 transition-opacity\"\n                      >\n                        Revenue\n                        <ArrowUpDown className=\"h-4 w-4\" />\n                      </button>\n                    </th>\n                    <th className={`text-center py-3 px-4 font-semibold ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>\n                      <button\n                        onClick={() => handleSort('status')}\n                        className=\"flex items-center gap-2 mx-auto hover:opacity-70 transition-opacity\"\n                      >\n                        Status\n                        <ArrowUpDown className=\"h-4 w-4\" />\n                      </button>\n                    </th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {sortedTableData().map((row, index) => (\n                    <motion.tr\n                      key={row.id}\n                      initial={{ opacity: 0, y: 10 }}\n                      animate={{ opacity: 1, y: 0 }}\n                      transition={{ delay: index * 0.05 }}\n                      className={`border-b ${isDarkMode ? 'border-gray-700 hover:bg-gray-700/50' : 'border-gray-100 hover:bg-gray-50'} transition-colors`}\n                    >\n                      <td className={`py-4 px-4 font-medium ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                        {row.product}\n                      </td>\n                      <td className={`py-4 px-4 text-right ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>\n                        {formatNumber(row.sales)}\n                      </td>\n                      <td className={`py-4 px-4 text-right font-semibold ${isDarkMode ? 'text-green-400' : 'text-green-600'}`}>\n                        {formatCurrency(row.revenue)}\n                      </td>\n                      <td className=\"py-4 px-4 text-center\">\n                        <Badge \n                          variant=\"secondary\" \n                          className={`${getStatusColor(row.status)} capitalize`}\n                        >\n                          {row.status}\n                        </Badge>\n                      </td>\n                    </motion.tr>\n                  ))}\n                </tbody>\n              </table>\n            </div>\n          </CardContent>\n        </Card>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mt-8\">\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Conversion Funnel</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                User journey and drop-off rates\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {[\n                  { stage: 'Visitors', value: 10000, percentage: 100 },\n                  { stage: 'Sign Ups', value: 5000, percentage: 50 },\n                  { stage: 'Active Users', value: 2350, percentage: 23.5 },\n                  { stage: 'Paying Customers', value: 1543, percentage: 15.4 },\n                  { stage: 'Repeat Customers', value: 892, percentage: 8.9 }\n                ].map((item, index) => (\n                  <motion.div\n                    key={item.stage}\n                    initial={{ opacity: 0, x: -20 }}\n                    animate={{ opacity: 1, x: 0 }}\n                    transition={{ delay: index * 0.1 }}\n                    className=\"relative\"\n                  >\n                    <div className=\"flex items-center justify-between mb-1\">\n                      <span className={`text-sm font-medium ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>\n                        {item.stage}\n                      </span>\n                      <span className={`text-xs ${isDarkMode ? 'text-gray-400' : 'text-gray-500'}`}>\n                        {item.value.toLocaleString()} ({item.percentage}%)\n                      </span>\n                    </div>\n                    <div className=\"relative h-12 rounded-lg overflow-hidden bg-gradient-to-r from-blue-500 to-purple-500\"\n                      style={{ width: `${item.percentage}%` }}\n                    >\n                      <div className=\"absolute inset-0 bg-gradient-to-t from-black/20 to-transparent\" />\n                    </div>\n                  </motion.div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Traffic Sources</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Visitor sources breakdown\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"w-full h-[300px]\">\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <PieChart>\n                    <Pie\n                      data={mockTrafficData}\n                      cx=\"50%\"\n                      cy=\"50%\"\n                      innerRadius={60}\n                      outerRadius={90}\n                      paddingAngle={2}\n                      dataKey=\"value\"\n                    >\n                      {mockTrafficData.map((entry, index) => (\n                        <Cell key={`cell-${index}`} fill={entry.color} />\n                      ))}\n                    </Pie>\n                    <Tooltip\n                      contentStyle={{\n                        backgroundColor: isDarkMode ? '#1f2937' : '#ffffff',\n                        border: isDarkMode ? '1px solid #374151' : '1px solid #e5e7eb',\n                        borderRadius: '8px',\n                        color: isDarkMode ? '#ffffff' : '#000000'\n                      }}\n                      formatter={(value: number) => [`${value.toLocaleString()} visitors`, 'Traffic']}\n                    />\n                  </PieChart>\n                </ResponsiveContainer>\n              </div>\n              \n              <div className=\"mt-4 space-y-2\">\n                {mockTrafficData.map((source) => (\n                  <div key={source.name} className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center gap-2\">\n                      <div\n                        className=\"w-3 h-3 rounded-full\"\n                        style={{ backgroundColor: source.color }}\n                      />\n                      <span className={`text-sm ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>\n                        {source.name}\n                      </span>\n                    </div>\n                    <span className={`text-sm font-medium ${isDarkMode ? 'text-gray-200' : 'text-gray-900'}`}>\n                      {source.value.toLocaleString()}\n                    </span>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Recent Activity</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Latest system events\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"max-h-[400px] overflow-y-auto space-y-3 pr-2\">\n                {[\n                  { id: '1', type: 'sale', message: 'New order placed - Premium Plan', time: '2 minutes ago', icon: ShoppingCart, color: 'text-green-500' },\n                  { id: '2', type: 'user', message: 'New user registration', time: '15 minutes ago', icon: Users, color: 'text-blue-500' },\n                  { id: '3', type: 'revenue', message: 'Payment received - $234.00', time: '32 minutes ago', icon: DollarSign, color: 'text-emerald-500' },\n                  { id: '4', type: 'sale', message: 'Order completed - Basic Plan', time: '1 hour ago', icon: ShoppingCart, color: 'text-green-500' },\n                  { id: '5', type: 'target', message: 'Monthly goal 75% achieved', time: '2 hours ago', icon: Target, color: 'text-purple-500' },\n                  { id: '6', type: 'user', message: '5 new users registered', time: '3 hours ago', icon: Users, color: 'text-blue-500' },\n                  { id: '7', type: 'revenue', message: 'Payment received - $1,780.00', time: '4 hours ago', icon: DollarSign, color: 'text-emerald-500' },\n                  { id: '8', type: 'sale', message: 'New order placed - Enterprise Plan', time: '5 hours ago', icon: ShoppingCart, color: 'text-green-500' }\n                ].map((activity) => {\n                  const Icon = activity.icon;\n                  return (\n                    <motion.div\n                      key={activity.id}\n                      initial={{ opacity: 0, x: -20 }}\n                      animate={{ opacity: 1, x: 0 }}\n                      transition={{ duration: 0.3 }}\n                      className={`flex items-start gap-3 p-3 rounded-lg transition-colors ${\n                        isDarkMode ? 'hover:bg-gray-700/50' : 'hover:bg-gray-100'\n                      }`}\n                    >\n                      <div className={`mt-0.5 ${activity.color}`}>\n                        <Icon className=\"h-5 w-5\" />\n                      </div>\n                      <div className=\"flex-1 min-w-0\">\n                        <p className={`text-sm font-medium ${isDarkMode ? 'text-gray-200' : 'text-gray-900'}`}>\n                          {activity.message}\n                        </p>\n                        <p className={`text-xs mt-1 ${isDarkMode ? 'text-gray-500' : 'text-gray-500'}`}>\n                          {activity.time}\n                        </p>\n                      </div>\n                    </motion.div>\n                  );\n                })}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}",
  "error": null,
  "overall_score": 57,
  "code_quality_score": 16,
  "architecture_score": 14,
  "performance_score": 12,
  "accessibility_score": 15,
  "metadata": {
    "document_id": "eval_room_9537ef005e5c",
    "prompt_category": "intermediate",
    "prompt_complexity": 6.0
  },
  "raw_response": {
    "document_id": "eval_room_9537ef005e5c",
    "mode": "parallel",
    "prompt": "Generate an analytics dashboard page with charts, data tables, real-time updates, dark mode, and responsive design",
    "content": "import { useState, useCallback } from 'react';\nimport { Badge } from '@/components/ui/badge';\nimport { ArrowUpDown } from 'lucide-react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Moon, Sun, RefreshCw } from 'lucide-react';\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';\nimport { PieChart, Pie, Cell, Legend } from 'recharts';\nimport { motion } from 'framer-motion';\n\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';\n\nimport { TrendingUp, TrendingDown, DollarSign, Users, ShoppingCart, Target } from 'lucide-react';\nimport { motion } from 'framer-motion';\n\ninterface MetricData {\n  id: string;\n  label: string;\n  value: number;\n  change: number;\n  trend: 'up' | 'down';\n}\n\ninterface ChartDataPoint {\n  date: string;\n  revenue: number;\n  users: number;\n  orders: number;\n}\n\ninterface TableRow {\n  id: string;\n  product: string;\n  sales: number;\n  revenue: number;\n  status: 'active' | 'pending' | 'inactive';\n}\n\nconst mockMetrics: MetricData[] = [\n  { id: '1', label: 'Total Revenue', value: 45231, change: 12.5, trend: 'up' },\n  { id: '2', label: 'Active Users', value: 2350, change: 8.2, trend: 'up' },\n  { id: '3', label: 'Total Orders', value: 1543, change: -3.1, trend: 'down' },\n  { id: '4', label: 'Conversion Rate', value: 3.24, change: 5.7, trend: 'up' }\n];\n\nconst mockChartData: ChartDataPoint[] = [\n  { date: '2024-01-01', revenue: 12000, users: 450, orders: 230 },\n  { date: '2024-01-02', revenue: 15000, users: 520, orders: 280 },\n  { date: '2024-01-03', revenue: 13500, users: 490, orders: 250 },\n  { date: '2024-01-04', revenue: 18000, users: 610, orders: 320 },\n  { date: '2024-01-05', revenue: 16500, users: 580, orders: 295 },\n  { date: '2024-01-06', revenue: 20000, users: 680, orders: 360 },\n  { date: '2024-01-07', revenue: 22000, users: 720, orders: 390 }\n];\n\nconst mockTableData: TableRow[] = [\n  { id: '1', product: 'Premium Plan', sales: 234, revenue: 23400, status: 'active' },\n  { id: '2', product: 'Basic Plan', sales: 567, revenue: 11340, status: 'active' },\n  { id: '3', product: 'Enterprise Plan', sales: 89, revenue: 17800, status: 'active' },\n  { id: '4', product: 'Starter Plan', sales: 432, revenue: 4320, status: 'pending' },\n  { id: '5', product: 'Pro Plan', sales: 156, revenue: 15600, status: 'inactive' }\n];\nconst mockTrafficData = [\n  { name: 'Organic Search', value: 4200, color: '#3b82f6' },\n  { name: 'Direct', value: 2800, color: '#10b981' },\n  { name: 'Social Media', value: 1900, color: '#f59e0b' },\n  { name: 'Referral', value: 1200, color: '#8b5cf6' },\n  { name: 'Email', value: 900, color: '#ec4899' }\n];\n\nconst getMetricIcon = (label: string) => {\n  switch (label) {\n    case 'Total Revenue':\n      return DollarSign;\n    case 'Active Users':\n      return Users;\n    case 'Total Orders':\n      return ShoppingCart;\n    case 'Conversion Rate':\n      return Target;\n    default:\n      return DollarSign;\n  }\n};\n\nconst formatMetricValue = (label: string, value: number) => {\n  if (label === 'Total Revenue') {\n    return `$${value.toLocaleString()}`;\n  } else if (label === 'Conversion Rate') {\n    return `${value}%`;\n  }\n  return value.toLocaleString();\n};\n\nexport default function AnalyticsDashboard() {\n  const [isDarkMode, setIsDarkMode] = useState(false);\n  const [metrics, setMetrics] = useState<MetricData[]>(mockMetrics);\n  const [chartData, setChartData] = useState<ChartDataPoint[]>(mockChartData);\n  const [tableData, setTableData] = useState<TableRow[]>(mockTableData);\n  const [isRefreshing, setIsRefreshing] = useState(false);\n  const [sortConfig, setSortConfig] = useState<{ key: keyof TableRow; direction: 'asc' | 'desc' } | null>(null);\n\n  const handleSort = useCallback((key: keyof TableRow) => {\n    setSortConfig(prevConfig => {\n      if (prevConfig?.key === key) {\n        return { key, direction: prevConfig.direction === 'asc' ? 'desc' : 'asc' };\n      }\n      return { key, direction: 'asc' };\n    });\n  }, []);\n\n  const sortedTableData = useCallback(() => {\n    if (!sortConfig) return tableData;\n    \n    return [...tableData].sort((a, b) => {\n      const aValue = a[sortConfig.key];\n      const bValue = b[sortConfig.key];\n      \n      if (typeof aValue === 'number' && typeof bValue === 'number') {\n        return sortConfig.direction === 'asc' ? aValue - bValue : bValue - aValue;\n      }\n      \n      if (typeof aValue === 'string' && typeof bValue === 'string') {\n        return sortConfig.direction === 'asc' \n          ? aValue.localeCompare(bValue) \n          : bValue.localeCompare(aValue);\n      }\n      \n      return 0;\n    });\n  }, [tableData, sortConfig]);\n\n  const formatCurrency = (value: number) => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0\n    }).format(value);\n  };\n\n  const formatNumber = (value: number) => {\n    return new Intl.NumberFormat('en-US').format(value);\n  };\n\n  const getStatusColor = (status: TableRow['status']) => {\n    switch (status) {\n      case 'active':\n        return 'bg-green-500/10 text-green-500 hover:bg-green-500/20';\n      case 'pending':\n        return 'bg-yellow-500/10 text-yellow-500 hover:bg-yellow-500/20';\n      case 'inactive':\n        return 'bg-gray-500/10 text-gray-500 hover:bg-gray-500/20';\n      default:\n        return 'bg-gray-500/10 text-gray-500 hover:bg-gray-500/20';\n    }\n  };\n\n  const toggleDarkMode = useCallback(() => {\n    setIsDarkMode(prev => !prev);\n  }, []);\n\n  const handleRefresh = useCallback(() => {\n    setIsRefreshing(true);\n    \n    setTimeout(() => {\n      setIsRefreshing(false);\n    }, 1000);\n    setIsRefreshing(true);\n    \n    setTimeout(() => {\n      // Generate updated metrics with random variations\n      const updatedMetrics = mockMetrics.map(metric => ({\n        ...metric,\n        value: metric.value + Math.floor(Math.random() * 200 - 100),\n        change: parseFloat((Math.random() * 20 - 5).toFixed(1)),\n        trend: Math.random() > 0.5 ? 'up' as const : 'down' as const\n      }));\n      \n      // Generate updated chart data with random variations\n      const updatedChartData = mockChartData.map(point => ({\n        ...point,\n        revenue: point.revenue + Math.floor(Math.random() * 4000 - 2000),\n        users: point.users + Math.floor(Math.random() * 100 - 50),\n        orders: point.orders + Math.floor(Math.random() * 50 - 25)\n      }));\n      \n      // Generate updated table data with random variations\n      const updatedTableData = mockTableData.map(row => ({\n        ...row,\n        sales: row.sales + Math.floor(Math.random() * 40 - 20),\n        revenue: row.revenue + Math.floor(Math.random() * 2000 - 1000)\n      }));\n      \n      setMetrics(updatedMetrics);\n      setChartData(updatedChartData);\n      setTableData(updatedTableData);\n      setIsRefreshing(false);\n    }, 1500);\n  }, []);\n\n  return (\n    <div className={`min-h-screen transition-colors duration-300 ${isDarkMode ? 'dark bg-gray-900' : 'bg-gray-50'}`}>\n      <div className=\"container mx-auto p-4 md:p-6 lg:p-8\">\n        <div className=\"flex flex-col md:flex-row md:items-center md:justify-between mb-8 gap-4\">\n          <div>\n            <h1 className={`text-3xl md:text-4xl font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n              Analytics Dashboard\n            </h1>\n            <p className={`mt-2 ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n              Real-time insights and performance metrics\n            </p>\n          </div>\n          \n          <div className=\"flex items-center gap-3\">\n            <Button\n              variant=\"outline\"\n              size=\"icon\"\n              onClick={toggleDarkMode}\n              className={isDarkMode ? 'border-gray-700 hover:bg-gray-800' : ''}\n            >\n              {isDarkMode ? <Sun className=\"h-5 w-5\" /> : <Moon className=\"h-5 w-5\" />}\n            </Button>\n            \n            <Button\n              variant=\"outline\"\n              onClick={handleRefresh}\n              disabled={isRefreshing}\n              className={isDarkMode ? 'border-gray-700 hover:bg-gray-800' : ''}\n            >\n              <RefreshCw className={`h-4 w-4 mr-2 ${isRefreshing ? 'animate-spin' : ''}`} />\n              Refresh\n            </Button>\n          </div>\n        </div>\n\n        <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 md:gap-6 mb-8\">\n          {metrics.map((metric, index) => {\n            const Icon = getMetricIcon(metric.label);\n            const isPositive = metric.trend === 'up';\n            const TrendIcon = isPositive ? TrendingUp : TrendingDown;\n            \n            return (\n              <motion.div\n                key={metric.id}\n                initial={{ opacity: 0, y: 20 }}\n                animate={{ opacity: 1, y: 0 }}\n                transition={{ duration: 0.4, delay: index * 0.1 }}\n              >\n                <Card className={`${isDarkMode ? 'bg-gray-800 border-gray-700' : 'bg-white'} hover:shadow-lg transition-shadow duration-300`}>\n                  <CardHeader className=\"flex flex-row items-center justify-between pb-2\">\n                    <CardTitle className={`text-sm font-medium ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                      {metric.label}\n                    </CardTitle>\n                    <div className={`p-2 rounded-lg ${isDarkMode ? 'bg-gray-700' : 'bg-gray-100'}`}>\n                      <Icon className={`h-4 w-4 ${isDarkMode ? 'text-gray-300' : 'text-gray-600'}`} />\n                    </div>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"flex items-end justify-between\">\n                      <div>\n                        <div className={`text-2xl md:text-3xl font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                          {formatMetricValue(metric.label, metric.value)}\n                        </div>\n                        <div className=\"flex items-center mt-2 gap-1\">\n                          <TrendIcon \n                            className={`h-4 w-4 ${isPositive ? 'text-green-500' : 'text-red-500'}`} \n                          />\n                          <span className={`text-sm font-medium ${isPositive ? 'text-green-500' : 'text-red-500'}`}>\n                            {Math.abs(metric.change)}%\n                          </span>\n                          <span className={`text-sm ${isDarkMode ? 'text-gray-400' : 'text-gray-500'}`}>\n                            vs last period\n                          </span>\n                        </div>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              </motion.div>\n            );\n          })}\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6 mb-8\">\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Revenue Overview</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Daily revenue trends for the past week\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"w-full h-[300px] md:h-[350px]\">\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <LineChart\n                    data={chartData}\n                    margin={{ top: 5, right: 10, left: -20, bottom: 5 }}\n                  >\n                    <CartesianGrid \n                      strokeDasharray=\"3 3\" \n                      stroke={isDarkMode ? '#374151' : '#e5e7eb'}\n                    />\n                    <XAxis \n                      dataKey=\"date\" \n                      stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                      fontSize={12}\n                      tickFormatter={(value) => new Date(value).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n                    />\n                    <YAxis \n                      stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                      fontSize={12}\n                      tickFormatter={(value) => `$${(value / 1000).toFixed(0)}k`}\n                    />\n                    <Tooltip \n                      contentStyle={{\n                        backgroundColor: isDarkMode ? '#1f2937' : '#ffffff',\n                        border: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\n                        borderRadius: '8px',\n                        color: isDarkMode ? '#ffffff' : '#000000'\n                      }}\n                      labelFormatter={(value) => new Date(value).toLocaleDateString('en-US', { month: 'long', day: 'numeric', year: 'numeric' })}\n                      formatter={(value: number) => [`$${value.toLocaleString()}`, 'Revenue']}\n                    />\n                    <Line \n                      type=\"monotone\" \n                      dataKey=\"revenue\" \n                      stroke=\"#3b82f6\" \n                      strokeWidth={2}\n                      dot={{ fill: '#3b82f6', r: 4 }}\n                      activeDot={{ r: 6, fill: '#2563eb' }}\n                    />\n                  </LineChart>\n                </ResponsiveContainer>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>User Activity</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Active users and engagement metrics\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"relative h-[300px] w-full\">\n                <svg width=\"100%\" height=\"100%\" viewBox=\"0 0 700 300\" preserveAspectRatio=\"none\" className=\"overflow-visible\">\n                  <defs>\n                    <linearGradient id=\"userGradient\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                      <stop offset=\"0%\" stopColor={isDarkMode ? \"#3b82f6\" : \"#60a5fa\"} stopOpacity=\"0.6\" />\n                      <stop offset=\"100%\" stopColor={isDarkMode ? \"#3b82f6\" : \"#60a5fa\"} stopOpacity=\"0.05\" />\n                    </linearGradient>\n                  </defs>\n                  \n                  {/* Grid lines */}\n                  {[0, 1, 2, 3, 4].map((i) => (\n                    <line\n                      key={i}\n                      x1=\"0\"\n                      y1={i * 75}\n                      x2=\"700\"\n                      y2={i * 75}\n                      stroke={isDarkMode ? '#374151' : '#e5e7eb'}\n                      strokeWidth=\"1\"\n                    />\n                  ))}\n                  \n                  {/* Area path */}\n                  <motion.path\n                    initial={{ opacity: 0 }}\n                    animate={{ opacity: 1 }}\n                    transition={{ duration: 0.8 }}\n                    d={`\n                      M 0,${300 - (chartData[0].users / 720) * 250}\n                      ${chartData.map((point, i) => {\n                        const x = (i / (chartData.length - 1)) * 700;\n                        const y = 300 - (point.users / 720) * 250;\n                        return `L ${x},${y}`;\n                      }).join(' ')}\n                      L 700,300\n                      L 0,300\n                      Z\n                    `}\n                    fill=\"url(#userGradient)\"\n                  />\n                  \n                  {/* Line path */}\n                  <motion.path\n                    initial={{ pathLength: 0 }}\n                    animate={{ pathLength: 1 }}\n                    transition={{ duration: 1.5, ease: \"easeInOut\" }}\n                    d={`\n                      M 0,${300 - (chartData[0].users / 720) * 250}\n                      ${chartData.map((point, i) => {\n                        const x = (i / (chartData.length - 1)) * 700;\n                        const y = 300 - (point.users / 720) * 250;\n                        return `L ${x},${y}`;\n                      }).join(' ')}\n                    `}\n                    fill=\"none\"\n                    stroke={isDarkMode ? \"#3b82f6\" : \"#2563eb\"}\n                    strokeWidth=\"3\"\n                    strokeLinecap=\"round\"\n                    strokeLinejoin=\"round\"\n                  />\n                  \n                  {/* Data points with hover effects */}\n                  {chartData.map((point, i) => {\n                    const x = (i / (chartData.length - 1)) * 700;\n                    const y = 300 - (point.users / 720) * 250;\n                    return (\n                      <g key={i}>\n                        <motion.circle\n                          initial={{ scale: 0 }}\n                          animate={{ scale: 1 }}\n                          transition={{ delay: i * 0.1, duration: 0.3 }}\n                          cx={x}\n                          cy={y}\n                          r=\"6\"\n                          fill={isDarkMode ? \"#1e293b\" : \"#ffffff\"}\n                          stroke={isDarkMode ? \"#3b82f6\" : \"#2563eb\"}\n                          strokeWidth=\"3\"\n                          className=\"cursor-pointer transition-all hover:r-8\"\n                          style={{ filter: 'drop-shadow(0 2px 4px rgba(0,0,0,0.1))' }}\n                        />\n                        <circle\n                          cx={x}\n                          cy={y}\n                          r=\"20\"\n                          fill=\"transparent\"\n                          className=\"cursor-pointer\"\n                        >\n                          <title>{`${new Date(point.date).toLocaleDateString()}: ${point.users} users`}</title>\n                        </circle>\n                      </g>\n                    );\n                  })}\n                </svg>\n                \n                {/* X-axis labels */}\n                <div className=\"flex justify-between mt-4 px-2\">\n                  {chartData.map((point, i) => (\n                    <span\n                      key={i}\n                      className={`text-xs ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}\n                    >\n                      {new Date(point.date).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n                    </span>\n                  ))}\n                </div>\n                \n                {/* Y-axis labels */}\n                <div className=\"absolute left-0 top-0 h-[300px] flex flex-col justify-between -ml-12\">\n                  {[720, 540, 360, 180, 0].map((value, i) => (\n                    <span\n                      key={i}\n                      className={`text-xs ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}\n                    >\n                      {value}\n                    </span>\n                  ))}\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6 mb-8\">\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Orders Distribution</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Order volume by category\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"h-[300px] w-full\">\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <BarChart data={chartData}>\n                    <CartesianGrid \n                      strokeDasharray=\"3 3\" \n                      stroke={isDarkMode ? '#374151' : '#e5e7eb'}\n                    />\n                    <XAxis \n                      dataKey=\"date\" \n                      stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                      fontSize={12}\n                      tickFormatter={(value) => new Date(value).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n                    />\n                    <YAxis \n                      stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                      fontSize={12}\n                    />\n                    <Tooltip \n                      contentStyle={{\n                        backgroundColor: isDarkMode ? '#1f2937' : '#ffffff',\n                        border: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\n                        borderRadius: '8px',\n                        color: isDarkMode ? '#ffffff' : '#000000'\n                      }}\n                      labelStyle={{ color: isDarkMode ? '#9ca3af' : '#6b7280' }}\n                    />\n                    <Bar \n                      dataKey=\"orders\" \n                      fill=\"#8b5cf6\" \n                      radius={[8, 8, 0, 0]}\n                      animationDuration={1000}\n                    />\n                  </BarChart>\n                </ResponsiveContainer>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className={`lg:col-span-2 ${isDarkMode ? 'bg-gray-800 border-gray-700' : ''}`}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Performance Comparison</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Multi-metric comparison over time\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"h-80 w-full\">\n                <svg viewBox=\"0 0 800 300\" className=\"w-full h-full\">\n                  {/* Grid lines */}\n                  {[0, 1, 2, 3, 4, 5].map((i) => (\n                    <line\n                      key={`grid-${i}`}\n                      x1=\"50\"\n                      y1={50 + i * 40}\n                      x2=\"750\"\n                      y2={50 + i * 40}\n                      stroke={isDarkMode ? '#374151' : '#e5e7eb'}\n                      strokeWidth=\"1\"\n                    />\n                  ))}\n                  \n                  {/* Revenue line (scaled to fit) */}\n                  <motion.polyline\n                    initial={{ pathLength: 0, opacity: 0 }}\n                    animate={{ pathLength: 1, opacity: 1 }}\n                    transition={{ duration: 1, ease: \"easeInOut\" }}\n                    points={chartData.map((point, i) => {\n                      const x = 50 + (i * 700) / (chartData.length - 1);\n                      const y = 250 - (point.revenue / 25000) * 200;\n                      return `${x},${y}`;\n                    }).join(' ')}\n                    fill=\"none\"\n                    stroke=\"#3b82f6\"\n                    strokeWidth=\"3\"\n                    strokeLinecap=\"round\"\n                    strokeLinejoin=\"round\"\n                  />\n                  \n                  {/* Users line (scaled to fit) */}\n                  <motion.polyline\n                    initial={{ pathLength: 0, opacity: 0 }}\n                    animate={{ pathLength: 1, opacity: 1 }}\n                    transition={{ duration: 1, delay: 0.2, ease: \"easeInOut\" }}\n                    points={chartData.map((point, i) => {\n                      const x = 50 + (i * 700) / (chartData.length - 1);\n                      const y = 250 - (point.users / 800) * 200;\n                      return `${x},${y}`;\n                    }).join(' ')}\n                    fill=\"none\"\n                    stroke=\"#10b981\"\n                    strokeWidth=\"3\"\n                    strokeLinecap=\"round\"\n                    strokeLinejoin=\"round\"\n                  />\n                  \n                  {/* Orders line (scaled to fit) */}\n                  <motion.polyline\n                    initial={{ pathLength: 0, opacity: 0 }}\n                    animate={{ pathLength: 1, opacity: 1 }}\n                    transition={{ duration: 1, delay: 0.4, ease: \"easeInOut\" }}\n                    points={chartData.map((point, i) => {\n                      const x = 50 + (i * 700) / (chartData.length - 1);\n                      const y = 250 - (point.orders / 450) * 200;\n                      return `${x},${y}`;\n                    }).join(' ')}\n                    fill=\"none\"\n                    stroke=\"#f59e0b\"\n                    strokeWidth=\"3\"\n                    strokeLinecap=\"round\"\n                    strokeLinejoin=\"round\"\n                  />\n                  \n                  {/* Data points for revenue */}\n                  {chartData.map((point, i) => {\n                    const x = 50 + (i * 700) / (chartData.length - 1);\n                    const y = 250 - (point.revenue / 25000) * 200;\n                    return (\n                      <motion.circle\n                        key={`revenue-point-${i}`}\n                        initial={{ scale: 0 }}\n                        animate={{ scale: 1 }}\n                        transition={{ duration: 0.3, delay: 1 + i * 0.1 }}\n                        cx={x}\n                        cy={y}\n                        r=\"4\"\n                        fill=\"#3b82f6\"\n                        className=\"cursor-pointer hover:r-6 transition-all\"\n                      />\n                    );\n                  })}\n                  \n                  {/* Data points for users */}\n                  {chartData.map((point, i) => {\n                    const x = 50 + (i * 700) / (chartData.length - 1);\n                    const y = 250 - (point.users / 800) * 200;\n                    return (\n                      <motion.circle\n                        key={`users-point-${i}`}\n                        initial={{ scale: 0 }}\n                        animate={{ scale: 1 }}\n                        transition={{ duration: 0.3, delay: 1.2 + i * 0.1 }}\n                        cx={x}\n                        cy={y}\n                        r=\"4\"\n                        fill=\"#10b981\"\n                        className=\"cursor-pointer hover:r-6 transition-all\"\n                      />\n                    );\n                  })}\n                  \n                  {/* Data points for orders */}\n                  {chartData.map((point, i) => {\n                    const x = 50 + (i * 700) / (chartData.length - 1);\n                    const y = 250 - (point.orders / 450) * 200;\n                    return (\n                      <motion.circle\n                        key={`orders-point-${i}`}\n                        initial={{ scale: 0 }}\n                        animate={{ scale: 1 }}\n                        transition={{ duration: 0.3, delay: 1.4 + i * 0.1 }}\n                        cx={x}\n                        cy={y}\n                        r=\"4\"\n                        fill=\"#f59e0b\"\n                        className=\"cursor-pointer hover:r-6 transition-all\"\n                      />\n                    );\n                  })}\n                  \n                  {/* X-axis labels */}\n                  {chartData.map((point, i) => {\n                    const x = 50 + (i * 700) / (chartData.length - 1);\n                    return (\n                      <text\n                        key={`label-${i}`}\n                        x={x}\n                        y=\"280\"\n                        textAnchor=\"middle\"\n                        className={`text-xs ${isDarkMode ? 'fill-gray-400' : 'fill-gray-600'}`}\n                      >\n                        {new Date(point.date).getDate()}/{new Date(point.date).getMonth() + 1}\n                      </text>\n                    );\n                  })}\n                </svg>\n                \n                {/* Legend */}\n                <div className=\"flex justify-center gap-6 mt-4\">\n                  <div className=\"flex items-center gap-2\">\n                    <div className=\"w-4 h-4 rounded-full bg-blue-500\"></div>\n                    <span className={`text-sm ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>\n                      Revenue\n                    </span>\n                  </div>\n                  <div className=\"flex items-center gap-2\">\n                    <div className=\"w-4 h-4 rounded-full bg-green-500\"></div>\n                    <span className={`text-sm ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>\n                      Users\n                    </span>\n                  </div>\n                  <div className=\"flex items-center gap-2\">\n                    <div className=\"w-4 h-4 rounded-full bg-amber-500\"></div>\n                    <span className={`text-sm ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>\n                      Orders\n                    </span>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n          <CardHeader>\n            <CardTitle className={isDarkMode ? 'text-white' : ''}>Top Products</CardTitle>\n            <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n              Best performing products by sales and revenue\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"overflow-x-auto\">\n              <table className=\"w-full\">\n                <thead>\n                  <tr className={`border-b ${isDarkMode ? 'border-gray-700' : 'border-gray-200'}`}>\n                    <th className={`text-left py-3 px-4 font-semibold ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>\n                      <button\n                        onClick={() => handleSort('product')}\n                        className=\"flex items-center gap-2 hover:opacity-70 transition-opacity\"\n                      >\n                        Product\n                        <ArrowUpDown className=\"h-4 w-4\" />\n                      </button>\n                    </th>\n                    <th className={`text-right py-3 px-4 font-semibold ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>\n                      <button\n                        onClick={() => handleSort('sales')}\n                        className=\"flex items-center gap-2 ml-auto hover:opacity-70 transition-opacity\"\n                      >\n                        Sales\n                        <ArrowUpDown className=\"h-4 w-4\" />\n                      </button>\n                    </th>\n                    <th className={`text-right py-3 px-4 font-semibold ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>\n                      <button\n                        onClick={() => handleSort('revenue')}\n                        className=\"flex items-center gap-2 ml-auto hover:opacity-70 transition-opacity\"\n                      >\n                        Revenue\n                        <ArrowUpDown className=\"h-4 w-4\" />\n                      </button>\n                    </th>\n                    <th className={`text-center py-3 px-4 font-semibold ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>\n                      <button\n                        onClick={() => handleSort('status')}\n                        className=\"flex items-center gap-2 mx-auto hover:opacity-70 transition-opacity\"\n                      >\n                        Status\n                        <ArrowUpDown className=\"h-4 w-4\" />\n                      </button>\n                    </th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {sortedTableData().map((row, index) => (\n                    <motion.tr\n                      key={row.id}\n                      initial={{ opacity: 0, y: 10 }}\n                      animate={{ opacity: 1, y: 0 }}\n                      transition={{ delay: index * 0.05 }}\n                      className={`border-b ${isDarkMode ? 'border-gray-700 hover:bg-gray-700/50' : 'border-gray-100 hover:bg-gray-50'} transition-colors`}\n                    >\n                      <td className={`py-4 px-4 font-medium ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                        {row.product}\n                      </td>\n                      <td className={`py-4 px-4 text-right ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>\n                        {formatNumber(row.sales)}\n                      </td>\n                      <td className={`py-4 px-4 text-right font-semibold ${isDarkMode ? 'text-green-400' : 'text-green-600'}`}>\n                        {formatCurrency(row.revenue)}\n                      </td>\n                      <td className=\"py-4 px-4 text-center\">\n                        <Badge \n                          variant=\"secondary\" \n                          className={`${getStatusColor(row.status)} capitalize`}\n                        >\n                          {row.status}\n                        </Badge>\n                      </td>\n                    </motion.tr>\n                  ))}\n                </tbody>\n              </table>\n            </div>\n          </CardContent>\n        </Card>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mt-8\">\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Conversion Funnel</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                User journey and drop-off rates\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {[\n                  { stage: 'Visitors', value: 10000, percentage: 100 },\n                  { stage: 'Sign Ups', value: 5000, percentage: 50 },\n                  { stage: 'Active Users', value: 2350, percentage: 23.5 },\n                  { stage: 'Paying Customers', value: 1543, percentage: 15.4 },\n                  { stage: 'Repeat Customers', value: 892, percentage: 8.9 }\n                ].map((item, index) => (\n                  <motion.div\n                    key={item.stage}\n                    initial={{ opacity: 0, x: -20 }}\n                    animate={{ opacity: 1, x: 0 }}\n                    transition={{ delay: index * 0.1 }}\n                    className=\"relative\"\n                  >\n                    <div className=\"flex items-center justify-between mb-1\">\n                      <span className={`text-sm font-medium ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>\n                        {item.stage}\n                      </span>\n                      <span className={`text-xs ${isDarkMode ? 'text-gray-400' : 'text-gray-500'}`}>\n                        {item.value.toLocaleString()} ({item.percentage}%)\n                      </span>\n                    </div>\n                    <div className=\"relative h-12 rounded-lg overflow-hidden bg-gradient-to-r from-blue-500 to-purple-500\"\n                      style={{ width: `${item.percentage}%` }}\n                    >\n                      <div className=\"absolute inset-0 bg-gradient-to-t from-black/20 to-transparent\" />\n                    </div>\n                  </motion.div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Traffic Sources</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Visitor sources breakdown\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"w-full h-[300px]\">\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <PieChart>\n                    <Pie\n                      data={mockTrafficData}\n                      cx=\"50%\"\n                      cy=\"50%\"\n                      innerRadius={60}\n                      outerRadius={90}\n                      paddingAngle={2}\n                      dataKey=\"value\"\n                    >\n                      {mockTrafficData.map((entry, index) => (\n                        <Cell key={`cell-${index}`} fill={entry.color} />\n                      ))}\n                    </Pie>\n                    <Tooltip\n                      contentStyle={{\n                        backgroundColor: isDarkMode ? '#1f2937' : '#ffffff',\n                        border: isDarkMode ? '1px solid #374151' : '1px solid #e5e7eb',\n                        borderRadius: '8px',\n                        color: isDarkMode ? '#ffffff' : '#000000'\n                      }}\n                      formatter={(value: number) => [`${value.toLocaleString()} visitors`, 'Traffic']}\n                    />\n                  </PieChart>\n                </ResponsiveContainer>\n              </div>\n              \n              <div className=\"mt-4 space-y-2\">\n                {mockTrafficData.map((source) => (\n                  <div key={source.name} className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center gap-2\">\n                      <div\n                        className=\"w-3 h-3 rounded-full\"\n                        style={{ backgroundColor: source.color }}\n                      />\n                      <span className={`text-sm ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>\n                        {source.name}\n                      </span>\n                    </div>\n                    <span className={`text-sm font-medium ${isDarkMode ? 'text-gray-200' : 'text-gray-900'}`}>\n                      {source.value.toLocaleString()}\n                    </span>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Recent Activity</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Latest system events\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"max-h-[400px] overflow-y-auto space-y-3 pr-2\">\n                {[\n                  { id: '1', type: 'sale', message: 'New order placed - Premium Plan', time: '2 minutes ago', icon: ShoppingCart, color: 'text-green-500' },\n                  { id: '2', type: 'user', message: 'New user registration', time: '15 minutes ago', icon: Users, color: 'text-blue-500' },\n                  { id: '3', type: 'revenue', message: 'Payment received - $234.00', time: '32 minutes ago', icon: DollarSign, color: 'text-emerald-500' },\n                  { id: '4', type: 'sale', message: 'Order completed - Basic Plan', time: '1 hour ago', icon: ShoppingCart, color: 'text-green-500' },\n                  { id: '5', type: 'target', message: 'Monthly goal 75% achieved', time: '2 hours ago', icon: Target, color: 'text-purple-500' },\n                  { id: '6', type: 'user', message: '5 new users registered', time: '3 hours ago', icon: Users, color: 'text-blue-500' },\n                  { id: '7', type: 'revenue', message: 'Payment received - $1,780.00', time: '4 hours ago', icon: DollarSign, color: 'text-emerald-500' },\n                  { id: '8', type: 'sale', message: 'New order placed - Enterprise Plan', time: '5 hours ago', icon: ShoppingCart, color: 'text-green-500' }\n                ].map((activity) => {\n                  const Icon = activity.icon;\n                  return (\n                    <motion.div\n                      key={activity.id}\n                      initial={{ opacity: 0, x: -20 }}\n                      animate={{ opacity: 1, x: 0 }}\n                      transition={{ duration: 0.3 }}\n                      className={`flex items-start gap-3 p-3 rounded-lg transition-colors ${\n                        isDarkMode ? 'hover:bg-gray-700/50' : 'hover:bg-gray-100'\n                      }`}\n                    >\n                      <div className={`mt-0.5 ${activity.color}`}>\n                        <Icon className=\"h-5 w-5\" />\n                      </div>\n                      <div className=\"flex-1 min-w-0\">\n                        <p className={`text-sm font-medium ${isDarkMode ? 'text-gray-200' : 'text-gray-900'}`}>\n                          {activity.message}\n                        </p>\n                        <p className={`text-xs mt-1 ${isDarkMode ? 'text-gray-500' : 'text-gray-500'}`}>\n                          {activity.time}\n                        </p>\n                      </div>\n                    </motion.div>\n                  );\n                })}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}",
    "error": null,
    "elapsed_time": 69.32596015930176,
    "success": true
  }
}