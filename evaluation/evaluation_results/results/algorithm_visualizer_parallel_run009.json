{
  "prompt_id": "algorithm_visualizer",
  "prompt_name": "Algorithm Visualizer",
  "mode": "parallel",
  "run_number": 9,
  "timestamp": "2025-10-14T13:07:24.998467",
  "response_time": 99.38397455215454,
  "total_tokens": null,
  "response_content": "import { useState, useCallback } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Slider } from '@/components/ui/slider';\nimport { Play, Pause, RotateCcw, Zap, BarChart3 } from 'lucide-react';\nimport { motion } from 'framer-motion';\n\ninterface ArrayElement {\n  value: number;\n  id: string;\n  isComparing?: boolean;\n  isSwapping?: boolean;\n  isSorted?: boolean;\n}\n\ninterface AlgorithmStep {\n  array: ArrayElement[];\n  comparingIndices: number[];\n  swappingIndices: number[];\n  sortedIndices: number[];\n}\n\ntype AlgorithmType = 'bubble' | 'quick' | 'merge' | 'insertion';\n\nconst NEON_COLORS = [\n  '#00ffff',\n  '#ff00ff', \n  '#00ff00',\n  '#ffff00',\n  '#ff0066',\n  '#00ffaa'\n];\n\nconst mockAlgorithms = [\n  { id: 'bubble', name: 'Bubble Sort', complexity: 'O(n\u00b2)' },\n  { id: 'quick', name: 'Quick Sort', complexity: 'O(n log n)' },\n  { id: 'merge', name: 'Merge Sort', complexity: 'O(n log n)' },\n  { id: 'insertion', name: 'Insertion Sort', complexity: 'O(n\u00b2)' }\n];\n\nconst useAnimationLoop = (\n  isPlaying: boolean,\n  steps: AlgorithmStep[],\n  currentStep: number,\n  speed: number[],\n  onStepChange: (step: number) => void,\n  onComplete: () => void\n) => {\n  const [animationId, setAnimationId] = useState<NodeJS.Timeout | null>(null);\n\n  const cleanup = useCallback(() => {\n    if (animationId) {\n      clearTimeout(animationId);\n      setAnimationId(null);\n    }\n  }, [animationId]);\n\n  const animate = useCallback(() => {\n    if (currentStep < steps.length - 1) {\n      const delay = 1000 - speed[0] * 9.5; // Convert speed (0-100) to delay (1000ms-50ms)\n      const id = setTimeout(() => {\n        onStepChange(currentStep + 1);\n      }, delay);\n      setAnimationId(id);\n    } else {\n      onComplete();\n    }\n  }, [currentStep, steps.length, speed, onStepChange, onComplete]);\n\n  // Run animation when playing\n  if (isPlaying && steps.length > 0) {\n    animate();\n  }\n\n  // Cleanup on unmount or when playing stops\n  return cleanup;\n};\nexport default function AlgorithmVisualizer() {\n  const [array, setArray] = useState<ArrayElement[]>([]);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [speed, setSpeed] = useState([50]);\n  const [arraySize, setArraySize] = useState([20]);\n  const [selectedAlgorithm, setSelectedAlgorithm] = useState<AlgorithmType>('bubble');\n  const [currentStep, setCurrentStep] = useState(0);\n  const [steps, setSteps] = useState<AlgorithmStep[]>([]);\n\n  const generateRandomArray = useCallback(() => {\n    const newArray: ArrayElement[] = Array.from({ length: arraySize[0] }, (_, i) => ({\n      value: Math.floor(Math.random() * 100) + 5,\n      id: `element-${i}-${Date.now()}`,\n      isComparing: false,\n      isSwapping: false,\n      isSorted: false\n    }));\n    setArray(newArray);\n    setSteps([]);\n    setCurrentStep(0);\n    setIsPlaying(false);\n  }, [arraySize]);\n\n  const resetVisualization = useCallback(() => {\n\n    setIsPlaying(false);\n    setCurrentStep(0);\n    setSteps([]);\n    generateRandomArray();\n  }, [generateRandomArray]);\n\n  const startVisualization = useCallback(() => {\n    if (steps.length === 0) return;\n    if (currentStep >= steps.length - 1) {\n      setCurrentStep(0);\n    }\n    setIsPlaying(true);\n  \n  }, [steps, speed, currentStep]);\n\n  const pauseVisualization = useCallback(() => {\n\n    setIsPlaying(false);\n  }, []);\n\n  const generateSortingSteps = useCallback((algorithm: AlgorithmType) => {\n    const arr = [...array];\n    const newSteps: AlgorithmStep[] = [];\n\n    const addStep = (\n      comparingIndices: number[] = [],\n      swappingIndices: number[] = [],\n      sortedIndices: number[] = []\n    ) => {\n      newSteps.push({\n        array: arr.map((el, idx) => ({\n          ...el,\n          isComparing: comparingIndices.includes(idx),\n          isSwapping: swappingIndices.includes(idx),\n          isSorted: sortedIndices.includes(idx)\n        })),\n        comparingIndices,\n        swappingIndices,\n        sortedIndices\n      });\n    };\n\n    const swap = (i: number, j: number) => {\n      [arr[i], arr[j]] = [arr[j], arr[i]];\n    };\n\n    switch (algorithm) {\n      case 'bubble': {\n        const sorted: number[] = [];\n        for (let i = 0; i < arr.length; i++) {\n          for (let j = 0; j < arr.length - i - 1; j++) {\n            addStep([j, j + 1], [], sorted);\n            if (arr[j].value > arr[j + 1].value) {\n              addStep([j, j + 1], [j, j + 1], sorted);\n              swap(j, j + 1);\n              addStep([], [], sorted);\n            }\n          }\n          sorted.push(arr.length - i - 1);\n        }\n        addStep([], [], Array.from({ length: arr.length }, (_, i) => i));\n        break;\n      }\n\n      case 'insertion': {\n        const sorted: number[] = [0];\n        addStep([], [], sorted);\n        for (let i = 1; i < arr.length; i++) {\n          let j = i;\n          addStep([j, j - 1], [], sorted);\n          while (j > 0 && arr[j].value < arr[j - 1].value) {\n            addStep([j, j - 1], [j, j - 1], sorted);\n            swap(j, j - 1);\n            j--;\n            if (j > 0) addStep([j, j - 1], [], sorted);\n          }\n          sorted.push(i);\n          addStep([], [], sorted);\n        }\n        addStep([], [], Array.from({ length: arr.length }, (_, i) => i));\n        break;\n      }\n\n      case 'quick': {\n        const sorted: number[] = [];\n        const quickSort = (low: number, high: number) => {\n          if (low < high) {\n            const pivotIdx = partition(low, high);\n            sorted.push(pivotIdx);\n            quickSort(low, pivotIdx - 1);\n            quickSort(pivotIdx + 1, high);\n          } else if (low === high) {\n            sorted.push(low);\n          }\n        };\n\n        const partition = (low: number, high: number): number => {\n          const pivot = arr[high].value;\n          let i = low - 1;\n          \n          for (let j = low; j < high; j++) {\n            addStep([j, high], [], sorted);\n            if (arr[j].value < pivot) {\n              i++;\n              if (i !== j) {\n                addStep([j, high], [i, j], sorted);\n                swap(i, j);\n              }\n            }\n          }\n          addStep([high], [i + 1, high], sorted);\n          swap(i + 1, high);\n          return i + 1;\n        };\n\n        quickSort(0, arr.length - 1);\n        addStep([], [], Array.from({ length: arr.length }, (_, i) => i));\n        break;\n      }\n\n      case 'merge': {\n        const sorted: number[] = [];\n        const mergeSort = (left: number, right: number) => {\n          if (left >= right) return;\n          \n          const mid = Math.floor((left + right) / 2);\n          mergeSort(left, mid);\n          mergeSort(mid + 1, right);\n          merge(left, mid, right);\n        };\n\n        const merge = (left: number, mid: number, right: number) => {\n          const leftArr = arr.slice(left, mid + 1);\n          const rightArr = arr.slice(mid + 1, right + 1);\n          \n          let i = 0, j = 0, k = left;\n          \n          while (i < leftArr.length && j < rightArr.length) {\n            addStep([left + i, mid + 1 + j], [], sorted);\n            if (leftArr[i].value <= rightArr[j].value) {\n              arr[k] = leftArr[i];\n              i++;\n            } else {\n              arr[k] = rightArr[j];\n              j++;\n            }\n            addStep([], [k], sorted);\n            k++;\n          }\n          \n          while (i < leftArr.length) {\n            arr[k] = leftArr[i];\n            addStep([], [k], sorted);\n            i++;\n            k++;\n          }\n          \n          while (j < rightArr.length) {\n            arr[k] = rightArr[j];\n            addStep([], [k], sorted);\n            j++;\n            k++;\n          }\n\n          for (let idx = left; idx <= right; idx++) {\n            if (!sorted.includes(idx)) sorted.push(idx);\n          }\n        };\n\n        mergeSort(0, arr.length - 1);\n        addStep([], [], Array.from({ length: arr.length }, (_, i) => i));\n        break;\n      }\n    }\n\n    setSteps(newSteps);\n    setCurrentStep(0);\n  }, [array]);\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-gray-900 via-purple-900 to-gray-900 p-8\">\n      <div className=\"max-w-7xl mx-auto space-y-8\">\n        <motion.div\n          initial={{ opacity: 0, y: -20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.8 }}\n          className=\"text-center space-y-4\"\n        >\n          <motion.h1\n            className=\"text-6xl font-bold bg-gradient-to-r from-cyan-400 via-purple-400 to-pink-400 bg-clip-text text-transparent\"\n            animate={{\n              textShadow: [\n                '0 0 20px rgba(0, 255, 255, 0.5)',\n                '0 0 40px rgba(255, 0, 255, 0.5)',\n                '0 0 20px rgba(0, 255, 255, 0.5)'\n              ]\n            }}\n            transition={{ duration: 2, repeat: Infinity }}\n          >\n            Algorithm Visualizer\n          </motion.h1>\n          \n          <div className=\"flex items-center justify-center gap-4\">\n            <motion.div\n              initial={{ scale: 0 }}\n              animate={{ scale: 1 }}\n              transition={{ delay: 0.3, type: 'spring' }}\n              className=\"flex items-center gap-2 px-6 py-3 bg-gray-800/50 backdrop-blur-sm rounded-full border border-cyan-500/30\"\n            >\n              <Zap className=\"w-5 h-5 text-cyan-400\" />\n              <span className=\"text-xl font-semibold text-cyan-300\">\n                {mockAlgorithms.find(a => a.id === selectedAlgorithm)?.name}\n              </span>\n            </motion.div>\n            \n            <motion.div\n              initial={{ scale: 0 }}\n              animate={{ scale: 1 }}\n              transition={{ delay: 0.5, type: 'spring' }}\n              className=\"relative px-4 py-2 bg-gradient-to-r from-purple-600/30 to-pink-600/30 backdrop-blur-sm rounded-lg border border-purple-400/50\"\n            >\n              <motion.div\n                className=\"absolute inset-0 bg-gradient-to-r from-purple-600/20 to-pink-600/20 rounded-lg blur-xl\"\n                animate={{\n                  opacity: [0.5, 1, 0.5]\n                }}\n                transition={{ duration: 2, repeat: Infinity }}\n              />\n              <div className=\"relative flex items-center gap-2\">\n                <BarChart3 className=\"w-4 h-4 text-purple-300\" />\n                <span className=\"text-sm font-mono text-purple-200\">\n                  {mockAlgorithms.find(a => a.id === selectedAlgorithm)?.complexity}\n                </span>\n              </div>\n            </motion.div>\n          </div>\n        </motion.div></parameter>\n</invoke>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-6\">\n          <div className=\"lg:col-span-1 space-y-6\">\n            <motion.div\n              initial={{ opacity: 0, x: -50 }}\n              animate={{ opacity: 1, x: 0 }}\n              className=\"bg-gray-900/50 backdrop-blur-lg border border-cyan-500/30 rounded-xl p-6 shadow-[0_0_30px_rgba(0,255,255,0.3)] hover:shadow-[0_0_50px_rgba(0,255,255,0.5)] transition-shadow duration-300\"\n            >\n              <div className=\"space-y-6\">\n                {/* Algorithm Selection */}\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center gap-2 text-cyan-400 mb-4\">\n                    <Zap className=\"w-5 h-5\" />\n                    <h3 className=\"font-bold text-lg\">Algorithm</h3>\n                  </div>\n                  <div className=\"grid grid-cols-1 gap-2\">\n                    {mockAlgorithms.map((algo) => (\n                      <motion.button\n                        key={algo.id}\n                        whileHover={{ scale: 1.02 }}\n                        whileTap={{ scale: 0.98 }}\n                        onClick={() => setSelectedAlgorithm(algo.id as AlgorithmType)}\n                        className={`p-3 rounded-lg border transition-all duration-300 text-left ${\n                          selectedAlgorithm === algo.id\n                            ? 'bg-cyan-500/20 border-cyan-400 shadow-[0_0_20px_rgba(0,255,255,0.4)]'\n                            : 'bg-gray-800/50 border-gray-700 hover:border-cyan-500/50'\n                        }`}\n                      >\n                        <div className=\"font-semibold text-white\">{algo.name}</div>\n                        <div className=\"text-xs text-gray-400 mt-1\">{algo.complexity}</div>\n                      </motion.button>\n                    ))}\n                  </div>\n                </div>\n\n                {/* Speed Control */}\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <label className=\"text-cyan-400 font-semibold flex items-center gap-2\">\n                      <BarChart3 className=\"w-4 h-4\" />\n                      Speed\n                    </label>\n                    <span className=\"text-white font-mono text-sm bg-cyan-500/20 px-2 py-1 rounded border border-cyan-500/30\">\n                      {speed[0]}%\n                    </span>\n                  </div>\n                  <Slider\n                    value={speed}\n                    onValueChange={setSpeed}\n                    min={10}\n                    max={100}\n                    step={10}\n                    className=\"cursor-pointer\"\n                    disabled={isPlaying}\n                  />\n                </div>\n\n                {/* Array Size Control */}\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <label className=\"text-cyan-400 font-semibold flex items-center gap-2\">\n                      <BarChart3 className=\"w-4 h-4\" />\n                      Array Size\n                    </label>\n                    <span className=\"text-white font-mono text-sm bg-cyan-500/20 px-2 py-1 rounded border border-cyan-500/30\">\n                      {arraySize[0]}\n                    </span>\n                  </div>\n                  <Slider\n                    value={arraySize}\n                    onValueChange={setArraySize}\n                    min={5}\n                    max={50}\n                    step={5}\n                    className=\"cursor-pointer\"\n                    disabled={isPlaying}\n                  />\n                </div>\n\n                {/* Control Buttons */}\n                <div className=\"space-y-3 pt-4 border-t border-cyan-500/20\">\n                  <Button\n                    onClick={isPlaying ? pauseVisualization : startVisualization}\n                    disabled={steps.length === 0 || currentStep >= steps.length}\n                    className=\"w-full bg-gradient-to-r from-cyan-500 to-blue-500 hover:from-cyan-400 hover:to-blue-400 text-white font-bold py-6 rounded-lg shadow-[0_0_20px_rgba(0,255,255,0.5)] hover:shadow-[0_0_30px_rgba(0,255,255,0.7)] transition-all duration-300\"\n                  >\n                    {isPlaying ? (\n                      <>\n                        <Pause className=\"w-5 h-5 mr-2\" />\n                        Pause\n                      </>\n                    ) : (\n                      <>\n                        <Play className=\"w-5 h-5 mr-2\" />\n                        {currentStep >= steps.length ? 'Completed' : 'Start'}\n                      </>\n                    )}\n                  </Button>\n\n                  <Button\n                    onClick={resetVisualization}\n                    variant=\"outline\"\n                    className=\"w-full border-2 border-purple-500/50 bg-purple-500/10 hover:bg-purple-500/20 text-purple-300 hover:text-purple-200 font-bold py-6 rounded-lg shadow-[0_0_15px_rgba(168,85,247,0.4)] hover:shadow-[0_0_25px_rgba(168,85,247,0.6)] transition-all duration-300\"\n                  >\n                    <RotateCcw className=\"w-5 h-5 mr-2\" />\n                    Reset\n                  </Button>\n\n                  <Button\n                    onClick={() => generateSortingSteps(selectedAlgorithm)}\n                    disabled={isPlaying || array.length === 0}\n                    className=\"w-full bg-gradient-to-r from-pink-500 to-purple-500 hover:from-pink-400 hover:to-purple-400 text-white font-bold py-6 rounded-lg shadow-[0_0_20px_rgba(236,72,153,0.5)] hover:shadow-[0_0_30px_rgba(236,72,153,0.7)] transition-all duration-300\"\n                  >\n                    <Zap className=\"w-5 h-5 mr-2\" />\n                    Generate Steps\n                  </Button>\n                </div>\n\n                {/* Stats Display */}\n                <div className=\"pt-4 border-t border-cyan-500/20 space-y-2\">\n                  <div className=\"flex justify-between text-sm\">\n                    <span className=\"text-gray-400\">Current Step:</span>\n                    <span className=\"text-cyan-400 font-mono font-bold\">\n                      {currentStep} / {steps.length}\n                    </span>\n                  </div>\n                  <div className=\"flex justify-between text-sm\">\n                    <span className=\"text-gray-400\">Array Length:</span>\n                    <span className=\"text-cyan-400 font-mono font-bold\">{array.length}</span>\n                  </div>\n                </div>\n              </div>\n            </motion.div>\n            \n            <div className=\"bg-gray-900/50 backdrop-blur-lg border border-cyan-500/30 rounded-xl p-6 shadow-2xl shadow-cyan-500/20\">\n              <div className=\"space-y-6\">\n                <div>\n                  <h3 className=\"text-sm font-semibold text-cyan-400 mb-3 flex items-center gap-2\">\n                    <Zap className=\"w-4 h-4\" />\n                    Algorithm\n                  </h3>\n                  <div className=\"grid grid-cols-1 gap-2\">\n                    {mockAlgorithms.map((algo) => (\n                      <motion.button\n                        key={algo.id}\n                        onClick={() => setSelectedAlgorithm(algo.id as AlgorithmType)}\n                        className={`relative p-3 rounded-lg border transition-all duration-300 text-left ${\n                          selectedAlgorithm === algo.id\n                            ? 'bg-cyan-500/20 border-cyan-400 shadow-lg shadow-cyan-500/50'\n                            : 'bg-gray-800/50 border-gray-700 hover:border-cyan-500/50 hover:shadow-md hover:shadow-cyan-500/30'\n                        }`}\n                        whileHover={{ scale: 1.02 }}\n                        whileTap={{ scale: 0.98 }}\n                      >\n                        <div className=\"flex flex-col gap-1\">\n                          <span className={`text-sm font-medium ${\n                            selectedAlgorithm === algo.id ? 'text-cyan-300' : 'text-gray-300'\n                          }`}>\n                            {algo.name}\n                          </span>\n                          <span className={`text-xs ${\n                            selectedAlgorithm === algo.id ? 'text-cyan-400/80' : 'text-gray-500'\n                          }`}>\n                            {algo.complexity}\n                          </span>\n                        </div>\n                        {selectedAlgorithm === algo.id && (\n                          <motion.div\n                            className=\"absolute inset-0 rounded-lg border-2 border-cyan-400\"\n                            layoutId=\"algorithmSelector\"\n                            transition={{ type: \"spring\", stiffness: 300, damping: 30 }}\n                          />\n                        )}\n                      </motion.button>\n                    ))}\n                  </div>\n                </div></parameter>\n</invoke>\n\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <label className=\"text-cyan-400 text-sm font-medium flex items-center gap-2\">\n                      <Zap className=\"w-4 h-4\" />\n                      Speed\n                    </label>\n                    <span className=\"text-cyan-300 text-xs\">{speed[0]}ms</span>\n                  </div>\n                  <Slider\n                    value={speed}\n                    onValueChange={setSpeed}\n                    min={10}\n                    max={200}\n                    step={10}\n                    className=\"[&_[role=slider]]:h-4 [&_[role=slider]]:w-4 [&_[role=slider]]:bg-cyan-400 [&_[role=slider]]:border-2 [&_[role=slider]]:border-cyan-300 [&_[role=slider]]:shadow-[0_0_15px_rgba(34,211,238,0.8)] [&_[role=slider]]:transition-shadow hover:[&_[role=slider]]:shadow-[0_0_25px_rgba(34,211,238,1)] [&_.relative]:h-2 [&_.relative]:bg-gray-800 [&_.relative]:rounded-full [&_.relative]:border [&_.relative]:border-cyan-500/30 [&_[role=slider]]:rounded-full\"\n                  /></parameter>\n</invoke>\n                </div>\n\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <label className=\"text-cyan-400 text-sm font-medium flex items-center gap-2\">\n                      <BarChart3 className=\"w-4 h-4\" />\n                      Array Size\n                    </label>\n                    <span className=\"text-cyan-300 text-xs\">{arraySize[0]}</span>\n                  </div>\n                  <Slider\n                    value={arraySize}\n                    onValueChange={setArraySize}\n                    min={5}\n                    max={50}\n                    step={1}\n                    className=\"[&_[role=slider]]:bg-gradient-to-r [&_[role=slider]]:from-purple-500 [&_[role=slider]]:to-pink-500 [&_[role=slider]]:border-2 [&_[role=slider]]:border-purple-300 [&_[role=slider]]:shadow-lg [&_[role=slider]]:shadow-purple-500/50 [&_[role=slider]]:transition-all [&_[role=slider]]:hover:shadow-purple-500/80 [&_[role=slider]]:hover:scale-110 [&>span]:bg-gradient-to-r [&>span]:from-purple-500/30 [&>span]:to-pink-500/30 [&>span]:h-2 [&>span]:rounded-full\"\n                  />\n                </div>\n\n                <div className=\"flex gap-3 pt-4\">\n                  <motion.button\n                    onClick={() => {\n                      if (isPlaying) {\n                        pauseVisualization();\n                      } else {\n                        if (steps.length === 0) {\n                          generateSortingSteps(selectedAlgorithm);\n                        }\n                        startVisualization();\n                      }\n                    }}\n                    disabled={array.length === 0}\n                    className=\"relative flex-1 group overflow-hidden rounded-lg disabled:opacity-50 disabled:cursor-not-allowed\"\n                    whileHover={{ scale: array.length === 0 ? 1 : 1.05 }}\n                    whileTap={{ scale: array.length === 0 ? 1 : 0.95 }}\n                  >\n                    <motion.div\n                      className=\"absolute inset-0 bg-gradient-to-r from-cyan-500 to-blue-500 opacity-100\"\n                      animate={{\n                        opacity: isPlaying ? [0.8, 1, 0.8] : 1\n                      }}\n                      transition={{ duration: 1.5, repeat: isPlaying ? Infinity : 0 }}\n                    />\n                    <motion.div\n                      className=\"absolute inset-0 bg-gradient-to-r from-cyan-400 to-blue-400 blur-xl opacity-60\"\n                      animate={{\n                        scale: isPlaying ? [1, 1.2, 1] : 1,\n                        opacity: isPlaying ? [0.6, 0.8, 0.6] : 0.6\n                      }}\n                      transition={{ duration: 1.5, repeat: isPlaying ? Infinity : 0 }}\n                    />\n                    <div className=\"relative flex items-center justify-center gap-2 px-6 py-3\">\n                      <motion.div\n                        animate={{\n                          rotate: isPlaying ? 0 : 0,\n                          scale: isPlaying ? 1 : 1\n                        }}\n                        transition={{ duration: 0.3 }}\n                      >\n                        {isPlaying ? (\n                          <Pause className=\"w-5 h-5 text-white\" />\n                        ) : (\n                          <Play className=\"w-5 h-5 text-white\" />\n                        )}\n                      </motion.div>\n                      <span className=\"font-bold text-white\">\n                        {isPlaying ? 'Pause' : 'Play'}\n                      </span>\n                    </div>\n                    <motion.div\n                      className=\"absolute inset-0 rounded-lg\"\n                      animate={{\n                        boxShadow: isPlaying\n                          ? [\n                              '0 0 20px rgba(6, 182, 212, 0.6)',\n                              '0 0 40px rgba(6, 182, 212, 0.8)',\n                              '0 0 20px rgba(6, 182, 212, 0.6)'\n                            ]\n                          : ['0 0 20px rgba(6, 182, 212, 0.5)']\n                      }}\n                      transition={{ duration: 1.5, repeat: isPlaying ? Infinity : 0 }}\n                    />\n                  </motion.button>\n                  <motion.button\n                    onClick={resetVisualization}\n                    whileHover={{ scale: 1.05 }}\n                    whileTap={{ scale: 0.95, rotate: 360 }}\n                    transition={{ \n                      rotate: { duration: 0.6, ease: \"easeInOut\" },\n                      scale: { duration: 0.2 }\n                    }}\n                    className=\"relative flex-1 px-6 py-3 bg-gradient-to-r from-pink-600/30 to-purple-600/30 backdrop-blur-sm rounded-lg border border-pink-500/50 text-white font-semibold overflow-hidden group hover:shadow-[0_0_30px_rgba(236,72,153,0.6)] transition-shadow duration-300\"\n                  >\n                    <motion.div\n                      className=\"absolute inset-0 bg-gradient-to-r from-pink-500/20 to-purple-500/20 blur-xl\"\n                      animate={{\n                        opacity: [0.5, 1, 0.5],\n                        scale: [1, 1.1, 1]\n                      }}\n                      transition={{ duration: 2, repeat: Infinity }}\n                    />\n                    <div className=\"relative flex items-center justify-center gap-2\">\n                      <motion.div\n                        whileHover={{ rotate: 180 }}\n                        transition={{ duration: 0.4 }}\n                      >\n                        <RotateCcw className=\"w-5 h-5\" />\n                      </motion.div>\n                      <span>Reset</span>\n                    </div>\n                    <motion.div\n                      className=\"absolute inset-0 bg-gradient-to-r from-pink-400/0 via-pink-400/30 to-pink-400/0\"\n                      initial={{ x: '-100%' }}\n                      whileHover={{ x: '100%' }}\n                      transition={{ duration: 0.6 }}\n                    />\n                  </motion.button>\n                </div>\n              </div>\n            </div>\n\n            <motion.div\n              initial={{ opacity: 0, x: -50 }}\n              animate={{ opacity: 1, x: 0 }}\n              transition={{ delay: 0.2 }}\n              className=\"bg-gray-900/50 backdrop-blur-lg border border-purple-500/30 rounded-xl p-6 shadow-[0_0_30px_rgba(168,85,247,0.3)] hover:shadow-[0_0_50px_rgba(168,85,247,0.5)] transition-shadow duration-300\"\n            >\n              <div className=\"space-y-4\">\n                <div className=\"flex items-center gap-2 text-purple-400 mb-4\">\n                  <BarChart3 className=\"w-5 h-5\" />\n                  <h3 className=\"font-bold text-lg\">Statistics</h3>\n                </div>\n\n                <div className=\"space-y-3\">\n                  {/* Progress */}\n                  <motion.div\n                    className=\"p-4 bg-gradient-to-br from-cyan-500/10 to-blue-500/10 rounded-lg border border-cyan-500/30\"\n                    whileHover={{ scale: 1.02 }}\n                    transition={{ type: \"spring\", stiffness: 300 }}\n                  >\n                    <div className=\"flex items-center justify-between mb-2\">\n                      <span className=\"text-sm text-cyan-300 font-medium\">Progress</span>\n                      <motion.span\n                        className=\"text-lg font-bold text-cyan-400 font-mono\"\n                        key={currentStep}\n                        initial={{ scale: 1.2, color: '#00ffff' }}\n                        animate={{ scale: 1, color: '#22d3ee' }}\n                        transition={{ duration: 0.3 }}\n                      >\n                        {steps.length > 0 ? Math.round((currentStep / (steps.length - 1)) * 100) : 0}%\n                      </motion.span>\n                    </div>\n                    <div className=\"relative h-2 bg-gray-800 rounded-full overflow-hidden border border-cyan-500/20\">\n                      <motion.div\n                        className=\"absolute inset-y-0 left-0 bg-gradient-to-r from-cyan-500 to-blue-500 rounded-full shadow-[0_0_10px_rgba(34,211,238,0.8)]\"\n                        initial={{ width: 0 }}\n                        animate={{ \n                          width: steps.length > 0 ? `${(currentStep / (steps.length - 1)) * 100}%` : '0%'\n                        }}\n                        transition={{ duration: 0.3, ease: \"easeOut\" }}\n                      />\n                    </div>\n                    <div className=\"flex items-center justify-between mt-2 text-xs text-cyan-400/70\">\n                      <span>Step {currentStep}</span>\n                      <span>of {steps.length > 0 ? steps.length - 1 : 0}</span>\n                    </div>\n                  </motion.div>\n\n                  {/* Comparisons */}\n                  <motion.div\n                    className=\"p-4 bg-gradient-to-br from-purple-500/10 to-pink-500/10 rounded-lg border border-purple-500/30\"\n                    whileHover={{ scale: 1.02 }}\n                    transition={{ type: \"spring\", stiffness: 300 }}\n                  >\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center gap-2\">\n                        <motion.div\n                          className=\"w-3 h-3 rounded-full bg-purple-400\"\n                          animate={{\n                            boxShadow: [\n                              '0 0 10px rgba(192,132,252,0.5)',\n                              '0 0 20px rgba(192,132,252,0.8)',\n                              '0 0 10px rgba(192,132,252,0.5)'\n                            ]\n                          }}\n                          transition={{ duration: 1.5, repeat: Infinity }}\n                        />\n                        <span className=\"text-sm text-purple-300 font-medium\">Comparisons</span>\n                      </div>\n                      <motion.span\n                        className=\"text-2xl font-bold text-purple-400 font-mono\"\n                        key={`comp-${currentStep}`}\n                        initial={{ scale: 1.3, opacity: 0.5 }}\n                        animate={{ scale: 1, opacity: 1 }}\n                        transition={{ duration: 0.2 }}\n                      >\n                        {steps.length > 0 && currentStep < steps.length \n                          ? steps.slice(0, currentStep + 1).filter(s => s.comparingIndices.length > 0).length\n                          : 0}\n                      </motion.span>\n                    </div>\n                  </motion.div>\n\n                  {/* Swaps */}\n                  <motion.div\n                    className=\"p-4 bg-gradient-to-br from-pink-500/10 to-red-500/10 rounded-lg border border-pink-500/30\"\n                    whileHover={{ scale: 1.02 }}\n                    transition={{ type: \"spring\", stiffness: 300 }}\n                  >\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center gap-2\">\n                        <motion.div\n                          className=\"w-3 h-3 rounded-full bg-pink-400\"\n                          animate={{\n                            boxShadow: [\n                              '0 0 10px rgba(244,114,182,0.5)',\n                              '0 0 20px rgba(244,114,182,0.8)',\n                              '0 0 10px rgba(244,114,182,0.5)'\n                            ],\n                            scale: [1, 1.2, 1]\n                          }}\n                          transition={{ duration: 1, repeat: Infinity }}\n                        />\n                        <span className=\"text-sm text-pink-300 font-medium\">Swaps</span>\n                      </div>\n                      <motion.span\n                        className=\"text-2xl font-bold text-pink-400 font-mono\"\n                        key={`swap-${currentStep}`}\n                        initial={{ scale: 1.3, opacity: 0.5 }}\n                        animate={{ scale: 1, opacity: 1 }}\n                        transition={{ duration: 0.2 }}\n                      >\n                        {steps.length > 0 && currentStep < steps.length\n                          ? steps.slice(0, currentStep + 1).filter(s => s.swappingIndices.length > 0).length\n                          : 0}\n                      </motion.span>\n                    </div>\n                  </motion.div>\n\n                  {/* Sorted Elements */}\n                  <motion.div\n                    className=\"p-4 bg-gradient-to-br from-green-500/10 to-emerald-500/10 rounded-lg border border-green-500/30\"\n                    whileHover={{ scale: 1.02 }}\n                    transition={{ type: \"spring\", stiffness: 300 }}\n                  >\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center gap-2\">\n                        <motion.div\n                          className=\"w-3 h-3 rounded-full bg-green-400\"\n                          animate={{\n                            boxShadow: [\n                              '0 0 10px rgba(74,222,128,0.5)',\n                              '0 0 20px rgba(74,222,128,0.8)',\n                              '0 0 10px rgba(74,222,128,0.5)'\n                            ]\n                          }}\n                          transition={{ duration: 2, repeat: Infinity }}\n                        />\n                        <span className=\"text-sm text-green-300 font-medium\">Sorted</span>\n                      </div>\n                      <motion.span\n                        className=\"text-2xl font-bold text-green-400 font-mono\"\n                        key={`sorted-${currentStep}`}\n                        initial={{ scale: 1.3, opacity: 0.5 }}\n                        animate={{ scale: 1, opacity: 1 }}\n                        transition={{ duration: 0.2 }}\n                      >\n                        {steps.length > 0 && currentStep < steps.length\n                          ? steps[currentStep].sortedIndices.length\n                          : 0}\n                      </motion.span>\n                    </div>\n                    <div className=\"mt-2 text-xs text-green-400/70\">\n                      {array.length > 0 && steps.length > 0 && currentStep < steps.length\n                        ? `${Math.round((steps[currentStep].sortedIndices.length / array.length) * 100)}% complete`\n                        : '0% complete'}\n                    </div>\n                  </motion.div>\n\n                  {/* Array Size Info */}\n                  <motion.div\n                    className=\"p-4 bg-gradient-to-br from-yellow-500/10 to-orange-500/10 rounded-lg border border-yellow-500/30\"\n                    whileHover={{ scale: 1.02 }}\n                    transition={{ type: \"spring\", stiffness: 300 }}\n                  >\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center gap-2\">\n                        <motion.div\n                          className=\"w-3 h-3 rounded-full bg-yellow-400\"\n                          animate={{\n                            boxShadow: [\n                              '0 0 10px rgba(250,204,21,0.5)',\n                              '0 0 20px rgba(250,204,21,0.8)',\n                              '0 0 10px rgba(250,204,21,0.5)'\n                            ]\n                          }}\n                          transition={{ duration: 1.8, repeat: Infinity }}\n                        />\n                        <span className=\"text-sm text-yellow-300 font-medium\">Array Size</span>\n                      </div>\n                      <span className=\"text-2xl font-bold text-yellow-400 font-mono\">\n                        {array.length}\n                      </span>\n                    </div>\n                  </motion.div>\n                </div>\n\n                {/* Status Indicator */}\n                <motion.div\n                  className=\"mt-4 p-3 rounded-lg border\"\n                  animate={{\n                    borderColor: isPlaying \n                      ? 'rgba(34,211,238,0.5)' \n                      : steps.length > 0 && currentStep === steps.length - 1\n                      ? 'rgba(74,222,128,0.5)'\n                      : 'rgba(156,163,175,0.3)',\n                    backgroundColor: isPlaying\n                      ? 'rgba(34,211,238,0.05)'\n                      : steps.length > 0 && currentStep === steps.length - 1\n                      ? 'rgba(74,222,128,0.05)'\n                      : 'rgba(156,163,175,0.05)'\n                  }}\n                  transition={{ duration: 0.3 }}\n                >\n                  <div className=\"flex items-center justify-center gap-2\">\n                    <motion.div\n                      className=\"w-2 h-2 rounded-full\"\n                      animate={{\n                        backgroundColor: isPlaying\n                          ? '#22d3ee'\n                          : steps.length > 0 && currentStep === steps.length - 1\n                          ? '#4ade80'\n                          : '#9ca3af',\n                        boxShadow: isPlaying\n                          ? '0 0 10px rgba(34,211,238,0.8)'\n                          : steps.length > 0 && currentStep === steps.length - 1\n                          ? '0 0 10px rgba(74,222,128,0.8)'\n                          : 'none'\n                      }}\n                      transition={{ duration: 0.3 }}\n                    />\n                    <span className={`text-sm font-medium ${\n                      isPlaying\n                        ? 'text-cyan-300'\n                        : steps.length > 0 && currentStep === steps.length - 1\n                        ? 'text-green-300'\n                        : 'text-gray-400'\n                    }`}>\n                      {isPlaying\n                        ? 'Sorting...'\n                        : steps.length > 0 && currentStep === steps.length - 1\n                        ? 'Complete!'\n                        : 'Ready'}\n                    </span>\n                  </div>\n                </motion.div>\n              </div>\n            </motion.div>\n          </div>\n\n          <div className=\"lg:col-span-3\">\n            <div className=\"bg-gray-900/50 backdrop-blur-lg border border-purple-500/30 rounded-xl p-8 shadow-2xl shadow-purple-500/20 min-h-[600px]\">\n              {array.length === 0 ? (\n                <motion.div\n                  initial={{ opacity: 0, scale: 0.8 }}\n                  animate={{ opacity: 1, scale: 1 }}\n                  className=\"absolute inset-0 flex flex-col items-center justify-center gap-6\"\n                >\n                  <motion.div\n                    animate={{\n                      rotate: [0, 360],\n                      scale: [1, 1.2, 1]\n                    }}\n                    transition={{\n                      duration: 3,\n                      repeat: Infinity,\n                      ease: \"easeInOut\"\n                    }}\n                  >\n                    <BarChart3 className=\"w-24 h-24 text-purple-400/50\" />\n                  </motion.div>\n                  <div className=\"text-center space-y-3\">\n                    <h3 className=\"text-2xl font-bold text-purple-300\">Ready to Visualize</h3>\n                    <p className=\"text-gray-400\">Generate an array to begin</p>\n                  </div>\n                  <motion.div\n                    whileHover={{ scale: 1.05 }}\n                    whileTap={{ scale: 0.95 }}\n                  >\n                    <Button\n                      onClick={generateRandomArray}\n                      className=\"bg-gradient-to-r from-purple-600 to-pink-600 hover:from-purple-500 hover:to-pink-500 text-white font-semibold px-8 py-6 text-lg shadow-[0_0_30px_rgba(168,85,247,0.5)] hover:shadow-[0_0_50px_rgba(168,85,247,0.8)] transition-all duration-300\"\n                    >\n                      <Zap className=\"w-5 h-5 mr-2\" />\n                      Generate Array\n                    </Button>\n                  </motion.div>\n                </motion.div>\n              ) : (\n                <>\n                  {/* Animated Bars */}\n                  <div className=\"relative w-full h-full flex items-end justify-center gap-1 px-4\">\n                    {(steps.length > 0 && currentStep < steps.length ? steps[currentStep].array : array).map((element, index) => {\n                      const currentStepData = steps.length > 0 && currentStep < steps.length ? steps[currentStep] : null;\n                      const isComparing = currentStepData?.comparingIndices.includes(index) || false;\n                      const isSwapping = currentStepData?.swappingIndices.includes(index) || false;\n                      const isSorted = currentStepData?.sortedIndices.includes(index) || false;\n                      \n                      const barColor = isSorted \n                        ? '#00ff00' \n                        : isSwapping \n                        ? '#ff0066' \n                        : isComparing \n                        ? '#ffff00' \n                        : NEON_COLORS[index % NEON_COLORS.length];\n\n                      return (\n                        <motion.div\n                          key={element.id}\n                          layout\n                          initial={{ height: 0, opacity: 0 }}\n                          animate={{\n                            height: `${element.value}%`,\n                            opacity: 1,\n                            scale: isSwapping ? 1.1 : isComparing ? 1.05 : 1,\n                          }}\n                          transition={{\n                            height: { type: \"spring\", stiffness: 300, damping: 30 },\n                            scale: { type: \"spring\", stiffness: 400, damping: 20 },\n                            layout: { type: \"spring\", stiffness: 300, damping: 30 }\n                          }}\n                          className=\"relative flex-1 min-w-[4px] max-w-[60px] rounded-t-lg\"\n                          style={{\n                            backgroundColor: barColor,\n                            boxShadow: `0 0 ${isSwapping ? '30px' : isComparing ? '20px' : '10px'} ${barColor}`,\n                          }}\n                        >\n                          {/* Glow effect */}\n                          <motion.div\n                            className=\"absolute inset-0 rounded-t-lg\"\n                            animate={{\n                              opacity: isSwapping ? [0.5, 1, 0.5] : isComparing ? [0.3, 0.7, 0.3] : 0.3\n                            }}\n                            transition={{\n                              duration: 0.5,\n                              repeat: isSwapping || isComparing ? Infinity : 0\n                            }}\n                            style={{\n                              background: `linear-gradient(to top, transparent, ${barColor})`,\n                              filter: 'blur(8px)'\n                            }}\n                          />\n                          \n                          {/* Value label */}\n                          {arraySize[0] <= 20 && (\n                            <motion.div\n                              initial={{ opacity: 0 }}\n                              animate={{ opacity: 1 }}\n                              className=\"absolute -top-8 left-1/2 -translate-x-1/2 text-xs font-mono font-bold whitespace-nowrap\"\n                              style={{ color: barColor }}\n                            >\n                              {element.value}\n                            </motion.div>\n                          )}\n\n                          {/* Swap trail effect */}\n                          {isSwapping && (\n                            <motion.div\n                              className=\"absolute inset-0 rounded-t-lg\"\n                              initial={{ opacity: 0, scale: 1 }}\n                              animate={{\n                                opacity: [0, 0.8, 0],\n                                scale: [1, 1.5, 2],\n                              }}\n                              transition={{\n                                duration: 0.6,\n                                repeat: Infinity,\n                                ease: \"easeOut\"\n                              }}\n                              style={{\n                                backgroundColor: barColor,\n                                filter: 'blur(10px)'\n                              }}\n                            />\n                          )}\n                        </motion.div>\n                      );\n                    })}\n                  </div>\n\n                  {/* Comparison Indicators */}\n                  {steps.length > 0 && currentStep < steps.length && steps[currentStep].comparingIndices.length > 0 && (\n                    <motion.div\n                      initial={{ opacity: 0, y: -20 }}\n                      animate={{ opacity: 1, y: 0 }}\n                      exit={{ opacity: 0, y: -20 }}\n                      className=\"absolute top-4 left-1/2 -translate-x-1/2 flex items-center gap-2 px-4 py-2 bg-yellow-500/20 backdrop-blur-sm rounded-full border border-yellow-400/50 shadow-[0_0_20px_rgba(255,255,0,0.5)]\"\n                    >\n                      <motion.div\n                        animate={{\n                          scale: [1, 1.2, 1],\n                          rotate: [0, 180, 360]\n                        }}\n                        transition={{\n                          duration: 1,\n                          repeat: Infinity,\n                          ease: \"easeInOut\"\n                        }}\n                      >\n                        <Zap className=\"w-4 h-4 text-yellow-300\" />\n                      </motion.div>\n                      <span className=\"text-sm font-semibold text-yellow-300\">\n                        Comparing indices: {steps[currentStep].comparingIndices.join(', ')}\n                      </span>\n                    </motion.div>\n                  )}\n\n                  {/* Swap Indicators */}\n                  {steps.length > 0 && currentStep < steps.length && steps[currentStep].swappingIndices.length > 0 && (\n                    <motion.div\n                      initial={{ opacity: 0, scale: 0.8 }}\n                      animate={{ opacity: 1, scale: 1 }}\n                      exit={{ opacity: 0, scale: 0.8 }}\n                      className=\"absolute top-16 left-1/2 -translate-x-1/2 flex items-center gap-2 px-4 py-2 bg-pink-500/20 backdrop-blur-sm rounded-full border border-pink-400/50 shadow-[0_0_20px_rgba(255,0,102,0.5)]\"\n                    >\n                      <motion.div\n                        animate={{\n                          rotate: [0, 360],\n                          scale: [1, 1.3, 1]\n                        }}\n                        transition={{\n                          duration: 0.8,\n                          repeat: Infinity,\n                          ease: \"easeInOut\"\n                        }}\n                      >\n                        <RotateCcw className=\"w-4 h-4 text-pink-300\" />\n                      </motion.div>\n                      <span className=\"text-sm font-semibold text-pink-300\">\n                        Swapping indices: {steps[currentStep].swappingIndices.join(', ')}\n                      </span>\n                    </motion.div>\n                  )}\n\n                  {/* Progress indicator */}\n                  {steps.length > 0 && (\n                    <motion.div\n                      initial={{ opacity: 0 }}\n                      animate={{ opacity: 1 }}\n                      className=\"absolute bottom-4 left-1/2 -translate-x-1/2 flex items-center gap-3 px-6 py-3 bg-gray-900/80 backdrop-blur-sm rounded-full border border-cyan-500/30\"\n                    >\n                      <span className=\"text-sm font-mono text-cyan-300\">\n                        Step: {currentStep + 1} / {steps.length}\n                      </span>\n                      <div className=\"w-32 h-2 bg-gray-800 rounded-full overflow-hidden border border-cyan-500/30\">\n                        <motion.div\n                          className=\"h-full bg-gradient-to-r from-cyan-500 to-purple-500\"\n                          initial={{ width: 0 }}\n                          animate={{ width: `${((currentStep + 1) / steps.length) * 100}%` }}\n                          transition={{ type: \"spring\", stiffness: 100, damping: 20 }}\n                        />\n                      </div>\n                    </motion.div>\n                  )}\n                </>\n              )}\n              \n              <div className=\"relative h-full flex items-end justify-center gap-1\">\n                {array.length === 0 ? (\n                  <motion.div\n                    initial={{ opacity: 0, scale: 0.8 }}\n                    animate={{ opacity: 1, scale: 1 }}\n                    className=\"absolute inset-0 flex items-center justify-center\"\n                  >\n                    <div className=\"text-center space-y-4\">\n                      <motion.div\n                        animate={{\n                          rotate: [0, 360],\n                          scale: [1, 1.2, 1]\n                        }}\n                        transition={{ duration: 3, repeat: Infinity }}\n                      >\n                        <BarChart3 className=\"w-16 h-16 text-cyan-400 mx-auto\" />\n                      </motion.div>\n                      <p className=\"text-cyan-300 text-lg font-semibold\">\n                        Generate an array to start visualizing\n                      </p>\n                      <p className=\"text-gray-400 text-sm\">\n                        Click the reset button to create a random array\n                      </p>\n                    </div>\n                  </motion.div>\n                ) : (\n                  array.map((element, index) => {\n                    const currentStepData = steps[currentStep];\n                    const isComparing = currentStepData?.comparingIndices.includes(index);\n                    const isSwapping = currentStepData?.swappingIndices.includes(index);\n                    const isSorted = currentStepData?.sortedIndices.includes(index);\n                    \n                    const maxValue = Math.max(...array.map(el => el.value));\n                    const heightPercentage = (element.value / maxValue) * 100;\n                    \n                    let barColor = NEON_COLORS[index % NEON_COLORS.length];\n                    let glowIntensity = 0.3;\n                    let scale = 1;\n                    \n                    if (isSorted) {\n                      barColor = '#00ff00';\n                      glowIntensity = 0.8;\n                    } else if (isSwapping) {\n                      barColor = '#ff0066';\n                      glowIntensity = 1;\n                      scale = 1.1;\n                    } else if (isComparing) {\n                      barColor = '#ffff00';\n                      glowIntensity = 0.7;\n                      scale = 1.05;\n                    }\n                    \n                    return (\n                      <motion.div\n                        key={element.id}\n                        layout\n                        initial={{ height: 0, opacity: 0 }}\n                        animate={{\n                          height: `${heightPercentage}%`,\n                          opacity: 1,\n                          scale: scale,\n                          backgroundColor: barColor\n                        }}\n                        transition={{\n                          height: { duration: 0.5, ease: \"easeOut\" },\n                          backgroundColor: { duration: 0.3 },\n                          scale: { duration: 0.2, type: \"spring\", stiffness: 300 }\n                        }}\n                        className=\"relative rounded-t-lg min-w-[8px] flex-1 max-w-[60px]\"\n                        style={{\n                          boxShadow: `\n                            0 0 ${20 * glowIntensity}px ${barColor},\n                            0 0 ${40 * glowIntensity}px ${barColor},\n                            inset 0 0 ${10 * glowIntensity}px rgba(255, 255, 255, 0.3)\n                          `,\n                          border: `1px solid ${barColor}`,\n                          background: `linear-gradient(to top, ${barColor}, ${barColor}dd)`\n                        }}\n                      >\n                        {/* Value label */}\n                        <motion.div\n                          initial={{ opacity: 0 }}\n                          animate={{ opacity: array.length <= 30 ? 1 : 0 }}\n                          className=\"absolute -top-6 left-1/2 -translate-x-1/2 text-xs font-mono font-bold whitespace-nowrap\"\n                          style={{\n                            color: barColor,\n                            textShadow: `0 0 10px ${barColor}`\n                          }}\n                        >\n                          {element.value}\n                        </motion.div>\n                        \n                        {/* Glow pulse effect for active states */}\n                        {(isComparing || isSwapping) && (\n                          <motion.div\n                            className=\"absolute inset-0 rounded-t-lg\"\n                            animate={{\n                              opacity: [0.5, 1, 0.5],\n                              scale: [1, 1.05, 1]\n                            }}\n                            transition={{\n                              duration: 0.6,\n                              repeat: Infinity,\n                              ease: \"easeInOut\"\n                            }}\n                            style={{\n                              background: `radial-gradient(circle, ${barColor}88 0%, transparent 70%)`,\n                              filter: 'blur(8px)'\n                            }}\n                          />\n                        )}\n                        \n                        {/* Sorted checkmark indicator */}\n                        {isSorted && (\n                          <motion.div\n                            initial={{ scale: 0, rotate: -180 }}\n                            animate={{ scale: 1, rotate: 0 }}\n                            transition={{ type: \"spring\", stiffness: 200, damping: 10 }}\n                            className=\"absolute -top-8 left-1/2 -translate-x-1/2 w-6 h-6 rounded-full bg-green-500 flex items-center justify-center\"\n                            style={{\n                              boxShadow: '0 0 20px #00ff00'\n                            }}\n                          >\n                            <svg\n                              className=\"w-4 h-4 text-gray-900\"\n                              fill=\"none\"\n                              strokeLinecap=\"round\"\n                              strokeLinejoin=\"round\"\n                              strokeWidth=\"3\"\n                              viewBox=\"0 0 24 24\"\n                              stroke=\"currentColor\"\n                            >\n                              <path d=\"M5 13l4 4L19 7\" />\n                            </svg>\n                          </motion.div>\n                        )}\n                        \n                        {/* Particle effect for swapping */}\n                        {isSwapping && (\n                          <>\n                            {[...Array(3)].map((_, i) => (\n                              <motion.div\n                                key={i}\n                                className=\"absolute w-1 h-1 rounded-full\"\n                                style={{ backgroundColor: barColor }}\n                                initial={{\n                                  top: '50%',\n                                  left: '50%',\n                                  opacity: 1\n                                }}\n                                animate={{\n                                  top: `${Math.random() * 100}%`,\n                                  left: `${Math.random() * 100}%`,\n                                  opacity: 0,\n                                  scale: [1, 2, 0]\n                                }}\n                                transition={{\n                                  duration: 0.8,\n                                  delay: i * 0.1,\n                                  repeat: Infinity\n                                }}\n                              />\n                            ))}\n                          </>\n                        )}\n                      </motion.div>\n                    );\n                  })\n                )}\n              </div>\n\n              {/* TODO:ComparisonIndicators Floating indicators showing which elements are being compared */}\n              \n                            {steps.length > 0 && currentStep < steps.length && steps[currentStep].swappingIndices.length === 2 && (\n                <>\n                  {steps[currentStep].swappingIndices.map((index, i) => {\n                    const barWidth = 100 / (steps[currentStep].array.length + 1);\n                    const xPosition = (index + 0.5) * barWidth;\n                    \n                    return (\n                      <motion.div\n                        key={`swap-trail-${index}-${currentStep}`}\n                        className=\"absolute bottom-0 pointer-events-none\"\n                        style={{\n                          left: `${xPosition}%`,\n                          width: `${barWidth * 0.8}%`,\n                          height: `${steps[currentStep].array[index].value}%`,\n                          transform: 'translateX(-50%)'\n                        }}\n                        initial={{ opacity: 0 }}\n                        animate={{ \n                          opacity: [0, 0.6, 0.4, 0],\n                          scale: [1, 1.1, 1.2, 1.3],\n                          filter: [\n                            'blur(0px)',\n                            'blur(4px)',\n                            'blur(8px)',\n                            'blur(12px)'\n                          ]\n                        }}\n                        transition={{ \n                          duration: 0.8,\n                          ease: \"easeOut\"\n                        }}\n                      >\n                        <div \n                          className=\"w-full h-full rounded-t-lg\"\n                          style={{\n                            background: `linear-gradient(to top, ${NEON_COLORS[index % NEON_COLORS.length]}40, ${NEON_COLORS[index % NEON_COLORS.length]}80)`,\n                            boxShadow: `0 0 30px ${NEON_COLORS[index % NEON_COLORS.length]}80`\n                          }}\n                        />\n                      </motion.div>\n                    );\n                  })}\n                  \n                  {/* Swap connection line with motion blur */}\n                  <motion.svg\n                    className=\"absolute inset-0 pointer-events-none\"\n                    style={{ width: '100%', height: '100%' }}\n                    initial={{ opacity: 0 }}\n                    animate={{ opacity: [0, 1, 0.7, 0] }}\n                    transition={{ duration: 0.6 }}\n                  >\n                    <motion.line\n                      x1={`${(steps[currentStep].swappingIndices[0] + 0.5) * (100 / (steps[currentStep].array.length + 1))}%`}\n                      y1=\"50%\"\n                      x2={`${(steps[currentStep].swappingIndices[1] + 0.5) * (100 / (steps[currentStep].array.length + 1))}%`}\n                      y2=\"50%\"\n                      stroke=\"#ff00ff\"\n                      strokeWidth=\"3\"\n                      strokeLinecap=\"round\"\n                      initial={{ pathLength: 0 }}\n                      animate={{ \n                        pathLength: [0, 1, 1],\n                        strokeWidth: [3, 5, 3]\n                      }}\n                      transition={{ duration: 0.5 }}\n                      style={{\n                        filter: 'blur(2px) drop-shadow(0 0 10px #ff00ff)',\n                      }}\n                    />\n                    <motion.line\n                      x1={`${(steps[currentStep].swappingIndices[0] + 0.5) * (100 / (steps[currentStep].array.length + 1))}%`}\n                      y1=\"50%\"\n                      x2={`${(steps[currentStep].swappingIndices[1] + 0.5) * (100 / (steps[currentStep].array.length + 1))}%`}\n                      y2=\"50%\"\n                      stroke=\"#00ffff\"\n                      strokeWidth=\"1\"\n                      strokeLinecap=\"round\"\n                      initial={{ pathLength: 0 }}\n                      animate={{ \n                        pathLength: [0, 1, 1]\n                      }}\n                      transition={{ duration: 0.5 }}\n                      style={{\n                        filter: 'drop-shadow(0 0 15px #00ffff)',\n                      }}\n                    />\n                  </motion.svg>\n\n                  {/* Particle burst effect at swap points */}\n                  {steps[currentStep].swappingIndices.map((index) => {\n                    const barWidth = 100 / (steps[currentStep].array.length + 1);\n                    const xPosition = (index + 0.5) * barWidth;\n                    \n                    return (\n                      <div key={`particles-${index}-${currentStep}`}>\n                        {[...Array(6)].map((_, particleIndex) => {\n                          const angle = (particleIndex * 60) * (Math.PI / 180);\n                          const distance = 30 + Math.random() * 20;\n                          \n                          return (\n                            <motion.div\n                              key={`particle-${index}-${particleIndex}`}\n                              className=\"absolute pointer-events-none rounded-full\"\n                              style={{\n                                left: `${xPosition}%`,\n                                bottom: `${steps[currentStep].array[index].value}%`,\n                                width: '6px',\n                                height: '6px',\n                                background: NEON_COLORS[particleIndex % NEON_COLORS.length],\n                                boxShadow: `0 0 10px ${NEON_COLORS[particleIndex % NEON_COLORS.length]}`\n                              }}\n                              initial={{ \n                                x: 0, \n                                y: 0, \n                                opacity: 1,\n                                scale: 1\n                              }}\n                              animate={{ \n                                x: Math.cos(angle) * distance,\n                                y: -Math.sin(angle) * distance,\n                                opacity: 0,\n                                scale: 0\n                              }}\n                              transition={{ \n                                duration: 0.6,\n                                ease: \"easeOut\"\n                              }}\n                            />\n                          );\n                        })}\n                      </div>\n                    );\n                  })}\n                </>\n              )}\n            </div>\n          </div>\n        </div>\n\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.8, delay: 0.4 }}\n          className=\"bg-gray-900/50 backdrop-blur-lg border border-cyan-500/30 rounded-xl p-6 shadow-[0_0_30px_rgba(0,255,255,0.2)]\"\n        >\n          <div className=\"flex items-center gap-2 mb-6\">\n            <BarChart3 className=\"w-5 h-5 text-cyan-400\" />\n            <h3 className=\"text-lg font-bold text-cyan-400\">Legend</h3>\n          </div>\n          \n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n            <motion.div\n              className=\"flex items-center gap-3 p-4 bg-gray-800/50 rounded-lg border border-gray-700/50 hover:border-cyan-500/50 transition-all duration-300\"\n              whileHover={{ scale: 1.05, boxShadow: '0 0 20px rgba(0, 255, 255, 0.3)' }}\n            >\n              <motion.div\n                className=\"w-6 h-12 bg-gradient-to-t from-cyan-500 to-cyan-300 rounded shadow-[0_0_15px_rgba(0,255,255,0.6)]\"\n                animate={{\n                  boxShadow: [\n                    '0 0 15px rgba(0, 255, 255, 0.6)',\n                    '0 0 25px rgba(0, 255, 255, 0.8)',\n                    '0 0 15px rgba(0, 255, 255, 0.6)'\n                  ]\n                }}\n                transition={{ duration: 2, repeat: Infinity }}\n              />\n              <div>\n                <div className=\"text-sm font-semibold text-white\">Default</div>\n                <div className=\"text-xs text-gray-400\">Unsorted</div>\n              </div>\n            </motion.div>\n\n            <motion.div\n              className=\"flex items-center gap-3 p-4 bg-gray-800/50 rounded-lg border border-gray-700/50 hover:border-yellow-500/50 transition-all duration-300\"\n              whileHover={{ scale: 1.05, boxShadow: '0 0 20px rgba(255, 255, 0, 0.3)' }}\n            >\n              <motion.div\n                className=\"w-6 h-12 bg-gradient-to-t from-yellow-500 to-yellow-300 rounded shadow-[0_0_15px_rgba(255,255,0,0.6)]\"\n                animate={{\n                  scale: [1, 1.1, 1],\n                  boxShadow: [\n                    '0 0 15px rgba(255, 255, 0, 0.6)',\n                    '0 0 30px rgba(255, 255, 0, 0.9)',\n                    '0 0 15px rgba(255, 255, 0, 0.6)'\n                  ]\n                }}\n                transition={{ duration: 1.5, repeat: Infinity }}\n              />\n              <div>\n                <div className=\"text-sm font-semibold text-white\">Comparing</div>\n                <div className=\"text-xs text-gray-400\">Active</div>\n              </div>\n            </motion.div>\n\n            <motion.div\n              className=\"flex items-center gap-3 p-4 bg-gray-800/50 rounded-lg border border-gray-700/50 hover:border-pink-500/50 transition-all duration-300\"\n              whileHover={{ scale: 1.05, boxShadow: '0 0 20px rgba(236, 72, 153, 0.3)' }}\n            >\n              <motion.div\n                className=\"w-6 h-12 bg-gradient-to-t from-pink-500 to-pink-300 rounded shadow-[0_0_15px_rgba(236,72,153,0.6)]\"\n                animate={{\n                  x: [-2, 2, -2],\n                  boxShadow: [\n                    '0 0 15px rgba(236, 72, 153, 0.6)',\n                    '0 0 35px rgba(236, 72, 153, 1)',\n                    '0 0 15px rgba(236, 72, 153, 0.6)'\n                  ]\n                }}\n                transition={{ duration: 0.8, repeat: Infinity }}\n              />\n              <div>\n                <div className=\"text-sm font-semibold text-white\">Swapping</div>\n                <div className=\"text-xs text-gray-400\">Moving</div>\n              </div>\n            </motion.div>\n\n            <motion.div\n              className=\"flex items-center gap-3 p-4 bg-gray-800/50 rounded-lg border border-gray-700/50 hover:border-green-500/50 transition-all duration-300\"\n              whileHover={{ scale: 1.05, boxShadow: '0 0 20px rgba(0, 255, 0, 0.3)' }}\n            >\n              <motion.div\n                className=\"w-6 h-12 bg-gradient-to-t from-green-500 to-green-300 rounded shadow-[0_0_15px_rgba(0,255,0,0.6)]\"\n                animate={{\n                  boxShadow: [\n                    '0 0 15px rgba(0, 255, 0, 0.6)',\n                    '0 0 20px rgba(0, 255, 0, 0.8)',\n                    '0 0 15px rgba(0, 255, 0, 0.6)'\n                  ]\n                }}\n                transition={{ duration: 2, repeat: Infinity }}\n              />\n              <div>\n                <div className=\"text-sm font-semibold text-white\">Sorted</div>\n                <div className=\"text-xs text-gray-400\">Complete</div>\n              </div>\n            </motion.div>\n          </div>\n\n          <motion.div\n            className=\"mt-6 p-4 bg-gradient-to-r from-purple-900/30 to-pink-900/30 rounded-lg border border-purple-500/30\"\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            transition={{ delay: 0.6 }}\n          >\n            <div className=\"flex items-start gap-3\">\n              <motion.div\n                animate={{\n                  rotate: [0, 360],\n                  scale: [1, 1.2, 1]\n                }}\n                transition={{ duration: 3, repeat: Infinity, ease: \"linear\" }}\n              >\n                <Zap className=\"w-5 h-5 text-purple-400 mt-0.5\" />\n              </motion.div>\n              <div>\n                <p className=\"text-sm text-purple-200 font-semibold mb-1\">Pro Tip</p>\n                <p className=\"text-xs text-purple-300/80\">\n                  Watch the neon glow effects as elements are compared and swapped. \n                  Adjust speed to see the algorithm in action at your own pace!\n                </p>\n              </div>\n            </div>\n          </motion.div>\n        </motion.div>\n      </div>\n    </div>\n  );\n}",
  "error": null,
  "overall_score": 45,
  "code_quality_score": 14,
  "architecture_score": 12,
  "performance_score": 11,
  "accessibility_score": 8,
  "metadata": {
    "document_id": "eval_room_6247e3e12cd9",
    "prompt_category": "creative",
    "prompt_complexity": 9.0
  },
  "raw_response": {
    "document_id": "eval_room_6247e3e12cd9",
    "mode": "parallel",
    "prompt": "Build a captivating algorithm visualizer with neon colored bars, smooth height transitions, glowing comparison indicators, trail effects during swaps, and a futuristic dashboard design with animated controls",
    "content": "import { useState, useCallback } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Slider } from '@/components/ui/slider';\nimport { Play, Pause, RotateCcw, Zap, BarChart3 } from 'lucide-react';\nimport { motion } from 'framer-motion';\n\ninterface ArrayElement {\n  value: number;\n  id: string;\n  isComparing?: boolean;\n  isSwapping?: boolean;\n  isSorted?: boolean;\n}\n\ninterface AlgorithmStep {\n  array: ArrayElement[];\n  comparingIndices: number[];\n  swappingIndices: number[];\n  sortedIndices: number[];\n}\n\ntype AlgorithmType = 'bubble' | 'quick' | 'merge' | 'insertion';\n\nconst NEON_COLORS = [\n  '#00ffff',\n  '#ff00ff', \n  '#00ff00',\n  '#ffff00',\n  '#ff0066',\n  '#00ffaa'\n];\n\nconst mockAlgorithms = [\n  { id: 'bubble', name: 'Bubble Sort', complexity: 'O(n\u00b2)' },\n  { id: 'quick', name: 'Quick Sort', complexity: 'O(n log n)' },\n  { id: 'merge', name: 'Merge Sort', complexity: 'O(n log n)' },\n  { id: 'insertion', name: 'Insertion Sort', complexity: 'O(n\u00b2)' }\n];\n\nconst useAnimationLoop = (\n  isPlaying: boolean,\n  steps: AlgorithmStep[],\n  currentStep: number,\n  speed: number[],\n  onStepChange: (step: number) => void,\n  onComplete: () => void\n) => {\n  const [animationId, setAnimationId] = useState<NodeJS.Timeout | null>(null);\n\n  const cleanup = useCallback(() => {\n    if (animationId) {\n      clearTimeout(animationId);\n      setAnimationId(null);\n    }\n  }, [animationId]);\n\n  const animate = useCallback(() => {\n    if (currentStep < steps.length - 1) {\n      const delay = 1000 - speed[0] * 9.5; // Convert speed (0-100) to delay (1000ms-50ms)\n      const id = setTimeout(() => {\n        onStepChange(currentStep + 1);\n      }, delay);\n      setAnimationId(id);\n    } else {\n      onComplete();\n    }\n  }, [currentStep, steps.length, speed, onStepChange, onComplete]);\n\n  // Run animation when playing\n  if (isPlaying && steps.length > 0) {\n    animate();\n  }\n\n  // Cleanup on unmount or when playing stops\n  return cleanup;\n};\nexport default function AlgorithmVisualizer() {\n  const [array, setArray] = useState<ArrayElement[]>([]);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [speed, setSpeed] = useState([50]);\n  const [arraySize, setArraySize] = useState([20]);\n  const [selectedAlgorithm, setSelectedAlgorithm] = useState<AlgorithmType>('bubble');\n  const [currentStep, setCurrentStep] = useState(0);\n  const [steps, setSteps] = useState<AlgorithmStep[]>([]);\n\n  const generateRandomArray = useCallback(() => {\n    const newArray: ArrayElement[] = Array.from({ length: arraySize[0] }, (_, i) => ({\n      value: Math.floor(Math.random() * 100) + 5,\n      id: `element-${i}-${Date.now()}`,\n      isComparing: false,\n      isSwapping: false,\n      isSorted: false\n    }));\n    setArray(newArray);\n    setSteps([]);\n    setCurrentStep(0);\n    setIsPlaying(false);\n  }, [arraySize]);\n\n  const resetVisualization = useCallback(() => {\n\n    setIsPlaying(false);\n    setCurrentStep(0);\n    setSteps([]);\n    generateRandomArray();\n  }, [generateRandomArray]);\n\n  const startVisualization = useCallback(() => {\n    if (steps.length === 0) return;\n    if (currentStep >= steps.length - 1) {\n      setCurrentStep(0);\n    }\n    setIsPlaying(true);\n  \n  }, [steps, speed, currentStep]);\n\n  const pauseVisualization = useCallback(() => {\n\n    setIsPlaying(false);\n  }, []);\n\n  const generateSortingSteps = useCallback((algorithm: AlgorithmType) => {\n    const arr = [...array];\n    const newSteps: AlgorithmStep[] = [];\n\n    const addStep = (\n      comparingIndices: number[] = [],\n      swappingIndices: number[] = [],\n      sortedIndices: number[] = []\n    ) => {\n      newSteps.push({\n        array: arr.map((el, idx) => ({\n          ...el,\n          isComparing: comparingIndices.includes(idx),\n          isSwapping: swappingIndices.includes(idx),\n          isSorted: sortedIndices.includes(idx)\n        })),\n        comparingIndices,\n        swappingIndices,\n        sortedIndices\n      });\n    };\n\n    const swap = (i: number, j: number) => {\n      [arr[i], arr[j]] = [arr[j], arr[i]];\n    };\n\n    switch (algorithm) {\n      case 'bubble': {\n        const sorted: number[] = [];\n        for (let i = 0; i < arr.length; i++) {\n          for (let j = 0; j < arr.length - i - 1; j++) {\n            addStep([j, j + 1], [], sorted);\n            if (arr[j].value > arr[j + 1].value) {\n              addStep([j, j + 1], [j, j + 1], sorted);\n              swap(j, j + 1);\n              addStep([], [], sorted);\n            }\n          }\n          sorted.push(arr.length - i - 1);\n        }\n        addStep([], [], Array.from({ length: arr.length }, (_, i) => i));\n        break;\n      }\n\n      case 'insertion': {\n        const sorted: number[] = [0];\n        addStep([], [], sorted);\n        for (let i = 1; i < arr.length; i++) {\n          let j = i;\n          addStep([j, j - 1], [], sorted);\n          while (j > 0 && arr[j].value < arr[j - 1].value) {\n            addStep([j, j - 1], [j, j - 1], sorted);\n            swap(j, j - 1);\n            j--;\n            if (j > 0) addStep([j, j - 1], [], sorted);\n          }\n          sorted.push(i);\n          addStep([], [], sorted);\n        }\n        addStep([], [], Array.from({ length: arr.length }, (_, i) => i));\n        break;\n      }\n\n      case 'quick': {\n        const sorted: number[] = [];\n        const quickSort = (low: number, high: number) => {\n          if (low < high) {\n            const pivotIdx = partition(low, high);\n            sorted.push(pivotIdx);\n            quickSort(low, pivotIdx - 1);\n            quickSort(pivotIdx + 1, high);\n          } else if (low === high) {\n            sorted.push(low);\n          }\n        };\n\n        const partition = (low: number, high: number): number => {\n          const pivot = arr[high].value;\n          let i = low - 1;\n          \n          for (let j = low; j < high; j++) {\n            addStep([j, high], [], sorted);\n            if (arr[j].value < pivot) {\n              i++;\n              if (i !== j) {\n                addStep([j, high], [i, j], sorted);\n                swap(i, j);\n              }\n            }\n          }\n          addStep([high], [i + 1, high], sorted);\n          swap(i + 1, high);\n          return i + 1;\n        };\n\n        quickSort(0, arr.length - 1);\n        addStep([], [], Array.from({ length: arr.length }, (_, i) => i));\n        break;\n      }\n\n      case 'merge': {\n        const sorted: number[] = [];\n        const mergeSort = (left: number, right: number) => {\n          if (left >= right) return;\n          \n          const mid = Math.floor((left + right) / 2);\n          mergeSort(left, mid);\n          mergeSort(mid + 1, right);\n          merge(left, mid, right);\n        };\n\n        const merge = (left: number, mid: number, right: number) => {\n          const leftArr = arr.slice(left, mid + 1);\n          const rightArr = arr.slice(mid + 1, right + 1);\n          \n          let i = 0, j = 0, k = left;\n          \n          while (i < leftArr.length && j < rightArr.length) {\n            addStep([left + i, mid + 1 + j], [], sorted);\n            if (leftArr[i].value <= rightArr[j].value) {\n              arr[k] = leftArr[i];\n              i++;\n            } else {\n              arr[k] = rightArr[j];\n              j++;\n            }\n            addStep([], [k], sorted);\n            k++;\n          }\n          \n          while (i < leftArr.length) {\n            arr[k] = leftArr[i];\n            addStep([], [k], sorted);\n            i++;\n            k++;\n          }\n          \n          while (j < rightArr.length) {\n            arr[k] = rightArr[j];\n            addStep([], [k], sorted);\n            j++;\n            k++;\n          }\n\n          for (let idx = left; idx <= right; idx++) {\n            if (!sorted.includes(idx)) sorted.push(idx);\n          }\n        };\n\n        mergeSort(0, arr.length - 1);\n        addStep([], [], Array.from({ length: arr.length }, (_, i) => i));\n        break;\n      }\n    }\n\n    setSteps(newSteps);\n    setCurrentStep(0);\n  }, [array]);\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-gray-900 via-purple-900 to-gray-900 p-8\">\n      <div className=\"max-w-7xl mx-auto space-y-8\">\n        <motion.div\n          initial={{ opacity: 0, y: -20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.8 }}\n          className=\"text-center space-y-4\"\n        >\n          <motion.h1\n            className=\"text-6xl font-bold bg-gradient-to-r from-cyan-400 via-purple-400 to-pink-400 bg-clip-text text-transparent\"\n            animate={{\n              textShadow: [\n                '0 0 20px rgba(0, 255, 255, 0.5)',\n                '0 0 40px rgba(255, 0, 255, 0.5)',\n                '0 0 20px rgba(0, 255, 255, 0.5)'\n              ]\n            }}\n            transition={{ duration: 2, repeat: Infinity }}\n          >\n            Algorithm Visualizer\n          </motion.h1>\n          \n          <div className=\"flex items-center justify-center gap-4\">\n            <motion.div\n              initial={{ scale: 0 }}\n              animate={{ scale: 1 }}\n              transition={{ delay: 0.3, type: 'spring' }}\n              className=\"flex items-center gap-2 px-6 py-3 bg-gray-800/50 backdrop-blur-sm rounded-full border border-cyan-500/30\"\n            >\n              <Zap className=\"w-5 h-5 text-cyan-400\" />\n              <span className=\"text-xl font-semibold text-cyan-300\">\n                {mockAlgorithms.find(a => a.id === selectedAlgorithm)?.name}\n              </span>\n            </motion.div>\n            \n            <motion.div\n              initial={{ scale: 0 }}\n              animate={{ scale: 1 }}\n              transition={{ delay: 0.5, type: 'spring' }}\n              className=\"relative px-4 py-2 bg-gradient-to-r from-purple-600/30 to-pink-600/30 backdrop-blur-sm rounded-lg border border-purple-400/50\"\n            >\n              <motion.div\n                className=\"absolute inset-0 bg-gradient-to-r from-purple-600/20 to-pink-600/20 rounded-lg blur-xl\"\n                animate={{\n                  opacity: [0.5, 1, 0.5]\n                }}\n                transition={{ duration: 2, repeat: Infinity }}\n              />\n              <div className=\"relative flex items-center gap-2\">\n                <BarChart3 className=\"w-4 h-4 text-purple-300\" />\n                <span className=\"text-sm font-mono text-purple-200\">\n                  {mockAlgorithms.find(a => a.id === selectedAlgorithm)?.complexity}\n                </span>\n              </div>\n            </motion.div>\n          </div>\n        </motion.div></parameter>\n</invoke>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-6\">\n          <div className=\"lg:col-span-1 space-y-6\">\n            <motion.div\n              initial={{ opacity: 0, x: -50 }}\n              animate={{ opacity: 1, x: 0 }}\n              className=\"bg-gray-900/50 backdrop-blur-lg border border-cyan-500/30 rounded-xl p-6 shadow-[0_0_30px_rgba(0,255,255,0.3)] hover:shadow-[0_0_50px_rgba(0,255,255,0.5)] transition-shadow duration-300\"\n            >\n              <div className=\"space-y-6\">\n                {/* Algorithm Selection */}\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center gap-2 text-cyan-400 mb-4\">\n                    <Zap className=\"w-5 h-5\" />\n                    <h3 className=\"font-bold text-lg\">Algorithm</h3>\n                  </div>\n                  <div className=\"grid grid-cols-1 gap-2\">\n                    {mockAlgorithms.map((algo) => (\n                      <motion.button\n                        key={algo.id}\n                        whileHover={{ scale: 1.02 }}\n                        whileTap={{ scale: 0.98 }}\n                        onClick={() => setSelectedAlgorithm(algo.id as AlgorithmType)}\n                        className={`p-3 rounded-lg border transition-all duration-300 text-left ${\n                          selectedAlgorithm === algo.id\n                            ? 'bg-cyan-500/20 border-cyan-400 shadow-[0_0_20px_rgba(0,255,255,0.4)]'\n                            : 'bg-gray-800/50 border-gray-700 hover:border-cyan-500/50'\n                        }`}\n                      >\n                        <div className=\"font-semibold text-white\">{algo.name}</div>\n                        <div className=\"text-xs text-gray-400 mt-1\">{algo.complexity}</div>\n                      </motion.button>\n                    ))}\n                  </div>\n                </div>\n\n                {/* Speed Control */}\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <label className=\"text-cyan-400 font-semibold flex items-center gap-2\">\n                      <BarChart3 className=\"w-4 h-4\" />\n                      Speed\n                    </label>\n                    <span className=\"text-white font-mono text-sm bg-cyan-500/20 px-2 py-1 rounded border border-cyan-500/30\">\n                      {speed[0]}%\n                    </span>\n                  </div>\n                  <Slider\n                    value={speed}\n                    onValueChange={setSpeed}\n                    min={10}\n                    max={100}\n                    step={10}\n                    className=\"cursor-pointer\"\n                    disabled={isPlaying}\n                  />\n                </div>\n\n                {/* Array Size Control */}\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <label className=\"text-cyan-400 font-semibold flex items-center gap-2\">\n                      <BarChart3 className=\"w-4 h-4\" />\n                      Array Size\n                    </label>\n                    <span className=\"text-white font-mono text-sm bg-cyan-500/20 px-2 py-1 rounded border border-cyan-500/30\">\n                      {arraySize[0]}\n                    </span>\n                  </div>\n                  <Slider\n                    value={arraySize}\n                    onValueChange={setArraySize}\n                    min={5}\n                    max={50}\n                    step={5}\n                    className=\"cursor-pointer\"\n                    disabled={isPlaying}\n                  />\n                </div>\n\n                {/* Control Buttons */}\n                <div className=\"space-y-3 pt-4 border-t border-cyan-500/20\">\n                  <Button\n                    onClick={isPlaying ? pauseVisualization : startVisualization}\n                    disabled={steps.length === 0 || currentStep >= steps.length}\n                    className=\"w-full bg-gradient-to-r from-cyan-500 to-blue-500 hover:from-cyan-400 hover:to-blue-400 text-white font-bold py-6 rounded-lg shadow-[0_0_20px_rgba(0,255,255,0.5)] hover:shadow-[0_0_30px_rgba(0,255,255,0.7)] transition-all duration-300\"\n                  >\n                    {isPlaying ? (\n                      <>\n                        <Pause className=\"w-5 h-5 mr-2\" />\n                        Pause\n                      </>\n                    ) : (\n                      <>\n                        <Play className=\"w-5 h-5 mr-2\" />\n                        {currentStep >= steps.length ? 'Completed' : 'Start'}\n                      </>\n                    )}\n                  </Button>\n\n                  <Button\n                    onClick={resetVisualization}\n                    variant=\"outline\"\n                    className=\"w-full border-2 border-purple-500/50 bg-purple-500/10 hover:bg-purple-500/20 text-purple-300 hover:text-purple-200 font-bold py-6 rounded-lg shadow-[0_0_15px_rgba(168,85,247,0.4)] hover:shadow-[0_0_25px_rgba(168,85,247,0.6)] transition-all duration-300\"\n                  >\n                    <RotateCcw className=\"w-5 h-5 mr-2\" />\n                    Reset\n                  </Button>\n\n                  <Button\n                    onClick={() => generateSortingSteps(selectedAlgorithm)}\n                    disabled={isPlaying || array.length === 0}\n                    className=\"w-full bg-gradient-to-r from-pink-500 to-purple-500 hover:from-pink-400 hover:to-purple-400 text-white font-bold py-6 rounded-lg shadow-[0_0_20px_rgba(236,72,153,0.5)] hover:shadow-[0_0_30px_rgba(236,72,153,0.7)] transition-all duration-300\"\n                  >\n                    <Zap className=\"w-5 h-5 mr-2\" />\n                    Generate Steps\n                  </Button>\n                </div>\n\n                {/* Stats Display */}\n                <div className=\"pt-4 border-t border-cyan-500/20 space-y-2\">\n                  <div className=\"flex justify-between text-sm\">\n                    <span className=\"text-gray-400\">Current Step:</span>\n                    <span className=\"text-cyan-400 font-mono font-bold\">\n                      {currentStep} / {steps.length}\n                    </span>\n                  </div>\n                  <div className=\"flex justify-between text-sm\">\n                    <span className=\"text-gray-400\">Array Length:</span>\n                    <span className=\"text-cyan-400 font-mono font-bold\">{array.length}</span>\n                  </div>\n                </div>\n              </div>\n            </motion.div>\n            \n            <div className=\"bg-gray-900/50 backdrop-blur-lg border border-cyan-500/30 rounded-xl p-6 shadow-2xl shadow-cyan-500/20\">\n              <div className=\"space-y-6\">\n                <div>\n                  <h3 className=\"text-sm font-semibold text-cyan-400 mb-3 flex items-center gap-2\">\n                    <Zap className=\"w-4 h-4\" />\n                    Algorithm\n                  </h3>\n                  <div className=\"grid grid-cols-1 gap-2\">\n                    {mockAlgorithms.map((algo) => (\n                      <motion.button\n                        key={algo.id}\n                        onClick={() => setSelectedAlgorithm(algo.id as AlgorithmType)}\n                        className={`relative p-3 rounded-lg border transition-all duration-300 text-left ${\n                          selectedAlgorithm === algo.id\n                            ? 'bg-cyan-500/20 border-cyan-400 shadow-lg shadow-cyan-500/50'\n                            : 'bg-gray-800/50 border-gray-700 hover:border-cyan-500/50 hover:shadow-md hover:shadow-cyan-500/30'\n                        }`}\n                        whileHover={{ scale: 1.02 }}\n                        whileTap={{ scale: 0.98 }}\n                      >\n                        <div className=\"flex flex-col gap-1\">\n                          <span className={`text-sm font-medium ${\n                            selectedAlgorithm === algo.id ? 'text-cyan-300' : 'text-gray-300'\n                          }`}>\n                            {algo.name}\n                          </span>\n                          <span className={`text-xs ${\n                            selectedAlgorithm === algo.id ? 'text-cyan-400/80' : 'text-gray-500'\n                          }`}>\n                            {algo.complexity}\n                          </span>\n                        </div>\n                        {selectedAlgorithm === algo.id && (\n                          <motion.div\n                            className=\"absolute inset-0 rounded-lg border-2 border-cyan-400\"\n                            layoutId=\"algorithmSelector\"\n                            transition={{ type: \"spring\", stiffness: 300, damping: 30 }}\n                          />\n                        )}\n                      </motion.button>\n                    ))}\n                  </div>\n                </div></parameter>\n</invoke>\n\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <label className=\"text-cyan-400 text-sm font-medium flex items-center gap-2\">\n                      <Zap className=\"w-4 h-4\" />\n                      Speed\n                    </label>\n                    <span className=\"text-cyan-300 text-xs\">{speed[0]}ms</span>\n                  </div>\n                  <Slider\n                    value={speed}\n                    onValueChange={setSpeed}\n                    min={10}\n                    max={200}\n                    step={10}\n                    className=\"[&_[role=slider]]:h-4 [&_[role=slider]]:w-4 [&_[role=slider]]:bg-cyan-400 [&_[role=slider]]:border-2 [&_[role=slider]]:border-cyan-300 [&_[role=slider]]:shadow-[0_0_15px_rgba(34,211,238,0.8)] [&_[role=slider]]:transition-shadow hover:[&_[role=slider]]:shadow-[0_0_25px_rgba(34,211,238,1)] [&_.relative]:h-2 [&_.relative]:bg-gray-800 [&_.relative]:rounded-full [&_.relative]:border [&_.relative]:border-cyan-500/30 [&_[role=slider]]:rounded-full\"\n                  /></parameter>\n</invoke>\n                </div>\n\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <label className=\"text-cyan-400 text-sm font-medium flex items-center gap-2\">\n                      <BarChart3 className=\"w-4 h-4\" />\n                      Array Size\n                    </label>\n                    <span className=\"text-cyan-300 text-xs\">{arraySize[0]}</span>\n                  </div>\n                  <Slider\n                    value={arraySize}\n                    onValueChange={setArraySize}\n                    min={5}\n                    max={50}\n                    step={1}\n                    className=\"[&_[role=slider]]:bg-gradient-to-r [&_[role=slider]]:from-purple-500 [&_[role=slider]]:to-pink-500 [&_[role=slider]]:border-2 [&_[role=slider]]:border-purple-300 [&_[role=slider]]:shadow-lg [&_[role=slider]]:shadow-purple-500/50 [&_[role=slider]]:transition-all [&_[role=slider]]:hover:shadow-purple-500/80 [&_[role=slider]]:hover:scale-110 [&>span]:bg-gradient-to-r [&>span]:from-purple-500/30 [&>span]:to-pink-500/30 [&>span]:h-2 [&>span]:rounded-full\"\n                  />\n                </div>\n\n                <div className=\"flex gap-3 pt-4\">\n                  <motion.button\n                    onClick={() => {\n                      if (isPlaying) {\n                        pauseVisualization();\n                      } else {\n                        if (steps.length === 0) {\n                          generateSortingSteps(selectedAlgorithm);\n                        }\n                        startVisualization();\n                      }\n                    }}\n                    disabled={array.length === 0}\n                    className=\"relative flex-1 group overflow-hidden rounded-lg disabled:opacity-50 disabled:cursor-not-allowed\"\n                    whileHover={{ scale: array.length === 0 ? 1 : 1.05 }}\n                    whileTap={{ scale: array.length === 0 ? 1 : 0.95 }}\n                  >\n                    <motion.div\n                      className=\"absolute inset-0 bg-gradient-to-r from-cyan-500 to-blue-500 opacity-100\"\n                      animate={{\n                        opacity: isPlaying ? [0.8, 1, 0.8] : 1\n                      }}\n                      transition={{ duration: 1.5, repeat: isPlaying ? Infinity : 0 }}\n                    />\n                    <motion.div\n                      className=\"absolute inset-0 bg-gradient-to-r from-cyan-400 to-blue-400 blur-xl opacity-60\"\n                      animate={{\n                        scale: isPlaying ? [1, 1.2, 1] : 1,\n                        opacity: isPlaying ? [0.6, 0.8, 0.6] : 0.6\n                      }}\n                      transition={{ duration: 1.5, repeat: isPlaying ? Infinity : 0 }}\n                    />\n                    <div className=\"relative flex items-center justify-center gap-2 px-6 py-3\">\n                      <motion.div\n                        animate={{\n                          rotate: isPlaying ? 0 : 0,\n                          scale: isPlaying ? 1 : 1\n                        }}\n                        transition={{ duration: 0.3 }}\n                      >\n                        {isPlaying ? (\n                          <Pause className=\"w-5 h-5 text-white\" />\n                        ) : (\n                          <Play className=\"w-5 h-5 text-white\" />\n                        )}\n                      </motion.div>\n                      <span className=\"font-bold text-white\">\n                        {isPlaying ? 'Pause' : 'Play'}\n                      </span>\n                    </div>\n                    <motion.div\n                      className=\"absolute inset-0 rounded-lg\"\n                      animate={{\n                        boxShadow: isPlaying\n                          ? [\n                              '0 0 20px rgba(6, 182, 212, 0.6)',\n                              '0 0 40px rgba(6, 182, 212, 0.8)',\n                              '0 0 20px rgba(6, 182, 212, 0.6)'\n                            ]\n                          : ['0 0 20px rgba(6, 182, 212, 0.5)']\n                      }}\n                      transition={{ duration: 1.5, repeat: isPlaying ? Infinity : 0 }}\n                    />\n                  </motion.button>\n                  <motion.button\n                    onClick={resetVisualization}\n                    whileHover={{ scale: 1.05 }}\n                    whileTap={{ scale: 0.95, rotate: 360 }}\n                    transition={{ \n                      rotate: { duration: 0.6, ease: \"easeInOut\" },\n                      scale: { duration: 0.2 }\n                    }}\n                    className=\"relative flex-1 px-6 py-3 bg-gradient-to-r from-pink-600/30 to-purple-600/30 backdrop-blur-sm rounded-lg border border-pink-500/50 text-white font-semibold overflow-hidden group hover:shadow-[0_0_30px_rgba(236,72,153,0.6)] transition-shadow duration-300\"\n                  >\n                    <motion.div\n                      className=\"absolute inset-0 bg-gradient-to-r from-pink-500/20 to-purple-500/20 blur-xl\"\n                      animate={{\n                        opacity: [0.5, 1, 0.5],\n                        scale: [1, 1.1, 1]\n                      }}\n                      transition={{ duration: 2, repeat: Infinity }}\n                    />\n                    <div className=\"relative flex items-center justify-center gap-2\">\n                      <motion.div\n                        whileHover={{ rotate: 180 }}\n                        transition={{ duration: 0.4 }}\n                      >\n                        <RotateCcw className=\"w-5 h-5\" />\n                      </motion.div>\n                      <span>Reset</span>\n                    </div>\n                    <motion.div\n                      className=\"absolute inset-0 bg-gradient-to-r from-pink-400/0 via-pink-400/30 to-pink-400/0\"\n                      initial={{ x: '-100%' }}\n                      whileHover={{ x: '100%' }}\n                      transition={{ duration: 0.6 }}\n                    />\n                  </motion.button>\n                </div>\n              </div>\n            </div>\n\n            <motion.div\n              initial={{ opacity: 0, x: -50 }}\n              animate={{ opacity: 1, x: 0 }}\n              transition={{ delay: 0.2 }}\n              className=\"bg-gray-900/50 backdrop-blur-lg border border-purple-500/30 rounded-xl p-6 shadow-[0_0_30px_rgba(168,85,247,0.3)] hover:shadow-[0_0_50px_rgba(168,85,247,0.5)] transition-shadow duration-300\"\n            >\n              <div className=\"space-y-4\">\n                <div className=\"flex items-center gap-2 text-purple-400 mb-4\">\n                  <BarChart3 className=\"w-5 h-5\" />\n                  <h3 className=\"font-bold text-lg\">Statistics</h3>\n                </div>\n\n                <div className=\"space-y-3\">\n                  {/* Progress */}\n                  <motion.div\n                    className=\"p-4 bg-gradient-to-br from-cyan-500/10 to-blue-500/10 rounded-lg border border-cyan-500/30\"\n                    whileHover={{ scale: 1.02 }}\n                    transition={{ type: \"spring\", stiffness: 300 }}\n                  >\n                    <div className=\"flex items-center justify-between mb-2\">\n                      <span className=\"text-sm text-cyan-300 font-medium\">Progress</span>\n                      <motion.span\n                        className=\"text-lg font-bold text-cyan-400 font-mono\"\n                        key={currentStep}\n                        initial={{ scale: 1.2, color: '#00ffff' }}\n                        animate={{ scale: 1, color: '#22d3ee' }}\n                        transition={{ duration: 0.3 }}\n                      >\n                        {steps.length > 0 ? Math.round((currentStep / (steps.length - 1)) * 100) : 0}%\n                      </motion.span>\n                    </div>\n                    <div className=\"relative h-2 bg-gray-800 rounded-full overflow-hidden border border-cyan-500/20\">\n                      <motion.div\n                        className=\"absolute inset-y-0 left-0 bg-gradient-to-r from-cyan-500 to-blue-500 rounded-full shadow-[0_0_10px_rgba(34,211,238,0.8)]\"\n                        initial={{ width: 0 }}\n                        animate={{ \n                          width: steps.length > 0 ? `${(currentStep / (steps.length - 1)) * 100}%` : '0%'\n                        }}\n                        transition={{ duration: 0.3, ease: \"easeOut\" }}\n                      />\n                    </div>\n                    <div className=\"flex items-center justify-between mt-2 text-xs text-cyan-400/70\">\n                      <span>Step {currentStep}</span>\n                      <span>of {steps.length > 0 ? steps.length - 1 : 0}</span>\n                    </div>\n                  </motion.div>\n\n                  {/* Comparisons */}\n                  <motion.div\n                    className=\"p-4 bg-gradient-to-br from-purple-500/10 to-pink-500/10 rounded-lg border border-purple-500/30\"\n                    whileHover={{ scale: 1.02 }}\n                    transition={{ type: \"spring\", stiffness: 300 }}\n                  >\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center gap-2\">\n                        <motion.div\n                          className=\"w-3 h-3 rounded-full bg-purple-400\"\n                          animate={{\n                            boxShadow: [\n                              '0 0 10px rgba(192,132,252,0.5)',\n                              '0 0 20px rgba(192,132,252,0.8)',\n                              '0 0 10px rgba(192,132,252,0.5)'\n                            ]\n                          }}\n                          transition={{ duration: 1.5, repeat: Infinity }}\n                        />\n                        <span className=\"text-sm text-purple-300 font-medium\">Comparisons</span>\n                      </div>\n                      <motion.span\n                        className=\"text-2xl font-bold text-purple-400 font-mono\"\n                        key={`comp-${currentStep}`}\n                        initial={{ scale: 1.3, opacity: 0.5 }}\n                        animate={{ scale: 1, opacity: 1 }}\n                        transition={{ duration: 0.2 }}\n                      >\n                        {steps.length > 0 && currentStep < steps.length \n                          ? steps.slice(0, currentStep + 1).filter(s => s.comparingIndices.length > 0).length\n                          : 0}\n                      </motion.span>\n                    </div>\n                  </motion.div>\n\n                  {/* Swaps */}\n                  <motion.div\n                    className=\"p-4 bg-gradient-to-br from-pink-500/10 to-red-500/10 rounded-lg border border-pink-500/30\"\n                    whileHover={{ scale: 1.02 }}\n                    transition={{ type: \"spring\", stiffness: 300 }}\n                  >\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center gap-2\">\n                        <motion.div\n                          className=\"w-3 h-3 rounded-full bg-pink-400\"\n                          animate={{\n                            boxShadow: [\n                              '0 0 10px rgba(244,114,182,0.5)',\n                              '0 0 20px rgba(244,114,182,0.8)',\n                              '0 0 10px rgba(244,114,182,0.5)'\n                            ],\n                            scale: [1, 1.2, 1]\n                          }}\n                          transition={{ duration: 1, repeat: Infinity }}\n                        />\n                        <span className=\"text-sm text-pink-300 font-medium\">Swaps</span>\n                      </div>\n                      <motion.span\n                        className=\"text-2xl font-bold text-pink-400 font-mono\"\n                        key={`swap-${currentStep}`}\n                        initial={{ scale: 1.3, opacity: 0.5 }}\n                        animate={{ scale: 1, opacity: 1 }}\n                        transition={{ duration: 0.2 }}\n                      >\n                        {steps.length > 0 && currentStep < steps.length\n                          ? steps.slice(0, currentStep + 1).filter(s => s.swappingIndices.length > 0).length\n                          : 0}\n                      </motion.span>\n                    </div>\n                  </motion.div>\n\n                  {/* Sorted Elements */}\n                  <motion.div\n                    className=\"p-4 bg-gradient-to-br from-green-500/10 to-emerald-500/10 rounded-lg border border-green-500/30\"\n                    whileHover={{ scale: 1.02 }}\n                    transition={{ type: \"spring\", stiffness: 300 }}\n                  >\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center gap-2\">\n                        <motion.div\n                          className=\"w-3 h-3 rounded-full bg-green-400\"\n                          animate={{\n                            boxShadow: [\n                              '0 0 10px rgba(74,222,128,0.5)',\n                              '0 0 20px rgba(74,222,128,0.8)',\n                              '0 0 10px rgba(74,222,128,0.5)'\n                            ]\n                          }}\n                          transition={{ duration: 2, repeat: Infinity }}\n                        />\n                        <span className=\"text-sm text-green-300 font-medium\">Sorted</span>\n                      </div>\n                      <motion.span\n                        className=\"text-2xl font-bold text-green-400 font-mono\"\n                        key={`sorted-${currentStep}`}\n                        initial={{ scale: 1.3, opacity: 0.5 }}\n                        animate={{ scale: 1, opacity: 1 }}\n                        transition={{ duration: 0.2 }}\n                      >\n                        {steps.length > 0 && currentStep < steps.length\n                          ? steps[currentStep].sortedIndices.length\n                          : 0}\n                      </motion.span>\n                    </div>\n                    <div className=\"mt-2 text-xs text-green-400/70\">\n                      {array.length > 0 && steps.length > 0 && currentStep < steps.length\n                        ? `${Math.round((steps[currentStep].sortedIndices.length / array.length) * 100)}% complete`\n                        : '0% complete'}\n                    </div>\n                  </motion.div>\n\n                  {/* Array Size Info */}\n                  <motion.div\n                    className=\"p-4 bg-gradient-to-br from-yellow-500/10 to-orange-500/10 rounded-lg border border-yellow-500/30\"\n                    whileHover={{ scale: 1.02 }}\n                    transition={{ type: \"spring\", stiffness: 300 }}\n                  >\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center gap-2\">\n                        <motion.div\n                          className=\"w-3 h-3 rounded-full bg-yellow-400\"\n                          animate={{\n                            boxShadow: [\n                              '0 0 10px rgba(250,204,21,0.5)',\n                              '0 0 20px rgba(250,204,21,0.8)',\n                              '0 0 10px rgba(250,204,21,0.5)'\n                            ]\n                          }}\n                          transition={{ duration: 1.8, repeat: Infinity }}\n                        />\n                        <span className=\"text-sm text-yellow-300 font-medium\">Array Size</span>\n                      </div>\n                      <span className=\"text-2xl font-bold text-yellow-400 font-mono\">\n                        {array.length}\n                      </span>\n                    </div>\n                  </motion.div>\n                </div>\n\n                {/* Status Indicator */}\n                <motion.div\n                  className=\"mt-4 p-3 rounded-lg border\"\n                  animate={{\n                    borderColor: isPlaying \n                      ? 'rgba(34,211,238,0.5)' \n                      : steps.length > 0 && currentStep === steps.length - 1\n                      ? 'rgba(74,222,128,0.5)'\n                      : 'rgba(156,163,175,0.3)',\n                    backgroundColor: isPlaying\n                      ? 'rgba(34,211,238,0.05)'\n                      : steps.length > 0 && currentStep === steps.length - 1\n                      ? 'rgba(74,222,128,0.05)'\n                      : 'rgba(156,163,175,0.05)'\n                  }}\n                  transition={{ duration: 0.3 }}\n                >\n                  <div className=\"flex items-center justify-center gap-2\">\n                    <motion.div\n                      className=\"w-2 h-2 rounded-full\"\n                      animate={{\n                        backgroundColor: isPlaying\n                          ? '#22d3ee'\n                          : steps.length > 0 && currentStep === steps.length - 1\n                          ? '#4ade80'\n                          : '#9ca3af',\n                        boxShadow: isPlaying\n                          ? '0 0 10px rgba(34,211,238,0.8)'\n                          : steps.length > 0 && currentStep === steps.length - 1\n                          ? '0 0 10px rgba(74,222,128,0.8)'\n                          : 'none'\n                      }}\n                      transition={{ duration: 0.3 }}\n                    />\n                    <span className={`text-sm font-medium ${\n                      isPlaying\n                        ? 'text-cyan-300'\n                        : steps.length > 0 && currentStep === steps.length - 1\n                        ? 'text-green-300'\n                        : 'text-gray-400'\n                    }`}>\n                      {isPlaying\n                        ? 'Sorting...'\n                        : steps.length > 0 && currentStep === steps.length - 1\n                        ? 'Complete!'\n                        : 'Ready'}\n                    </span>\n                  </div>\n                </motion.div>\n              </div>\n            </motion.div>\n          </div>\n\n          <div className=\"lg:col-span-3\">\n            <div className=\"bg-gray-900/50 backdrop-blur-lg border border-purple-500/30 rounded-xl p-8 shadow-2xl shadow-purple-500/20 min-h-[600px]\">\n              {array.length === 0 ? (\n                <motion.div\n                  initial={{ opacity: 0, scale: 0.8 }}\n                  animate={{ opacity: 1, scale: 1 }}\n                  className=\"absolute inset-0 flex flex-col items-center justify-center gap-6\"\n                >\n                  <motion.div\n                    animate={{\n                      rotate: [0, 360],\n                      scale: [1, 1.2, 1]\n                    }}\n                    transition={{\n                      duration: 3,\n                      repeat: Infinity,\n                      ease: \"easeInOut\"\n                    }}\n                  >\n                    <BarChart3 className=\"w-24 h-24 text-purple-400/50\" />\n                  </motion.div>\n                  <div className=\"text-center space-y-3\">\n                    <h3 className=\"text-2xl font-bold text-purple-300\">Ready to Visualize</h3>\n                    <p className=\"text-gray-400\">Generate an array to begin</p>\n                  </div>\n                  <motion.div\n                    whileHover={{ scale: 1.05 }}\n                    whileTap={{ scale: 0.95 }}\n                  >\n                    <Button\n                      onClick={generateRandomArray}\n                      className=\"bg-gradient-to-r from-purple-600 to-pink-600 hover:from-purple-500 hover:to-pink-500 text-white font-semibold px-8 py-6 text-lg shadow-[0_0_30px_rgba(168,85,247,0.5)] hover:shadow-[0_0_50px_rgba(168,85,247,0.8)] transition-all duration-300\"\n                    >\n                      <Zap className=\"w-5 h-5 mr-2\" />\n                      Generate Array\n                    </Button>\n                  </motion.div>\n                </motion.div>\n              ) : (\n                <>\n                  {/* Animated Bars */}\n                  <div className=\"relative w-full h-full flex items-end justify-center gap-1 px-4\">\n                    {(steps.length > 0 && currentStep < steps.length ? steps[currentStep].array : array).map((element, index) => {\n                      const currentStepData = steps.length > 0 && currentStep < steps.length ? steps[currentStep] : null;\n                      const isComparing = currentStepData?.comparingIndices.includes(index) || false;\n                      const isSwapping = currentStepData?.swappingIndices.includes(index) || false;\n                      const isSorted = currentStepData?.sortedIndices.includes(index) || false;\n                      \n                      const barColor = isSorted \n                        ? '#00ff00' \n                        : isSwapping \n                        ? '#ff0066' \n                        : isComparing \n                        ? '#ffff00' \n                        : NEON_COLORS[index % NEON_COLORS.length];\n\n                      return (\n                        <motion.div\n                          key={element.id}\n                          layout\n                          initial={{ height: 0, opacity: 0 }}\n                          animate={{\n                            height: `${element.value}%`,\n                            opacity: 1,\n                            scale: isSwapping ? 1.1 : isComparing ? 1.05 : 1,\n                          }}\n                          transition={{\n                            height: { type: \"spring\", stiffness: 300, damping: 30 },\n                            scale: { type: \"spring\", stiffness: 400, damping: 20 },\n                            layout: { type: \"spring\", stiffness: 300, damping: 30 }\n                          }}\n                          className=\"relative flex-1 min-w-[4px] max-w-[60px] rounded-t-lg\"\n                          style={{\n                            backgroundColor: barColor,\n                            boxShadow: `0 0 ${isSwapping ? '30px' : isComparing ? '20px' : '10px'} ${barColor}`,\n                          }}\n                        >\n                          {/* Glow effect */}\n                          <motion.div\n                            className=\"absolute inset-0 rounded-t-lg\"\n                            animate={{\n                              opacity: isSwapping ? [0.5, 1, 0.5] : isComparing ? [0.3, 0.7, 0.3] : 0.3\n                            }}\n                            transition={{\n                              duration: 0.5,\n                              repeat: isSwapping || isComparing ? Infinity : 0\n                            }}\n                            style={{\n                              background: `linear-gradient(to top, transparent, ${barColor})`,\n                              filter: 'blur(8px)'\n                            }}\n                          />\n                          \n                          {/* Value label */}\n                          {arraySize[0] <= 20 && (\n                            <motion.div\n                              initial={{ opacity: 0 }}\n                              animate={{ opacity: 1 }}\n                              className=\"absolute -top-8 left-1/2 -translate-x-1/2 text-xs font-mono font-bold whitespace-nowrap\"\n                              style={{ color: barColor }}\n                            >\n                              {element.value}\n                            </motion.div>\n                          )}\n\n                          {/* Swap trail effect */}\n                          {isSwapping && (\n                            <motion.div\n                              className=\"absolute inset-0 rounded-t-lg\"\n                              initial={{ opacity: 0, scale: 1 }}\n                              animate={{\n                                opacity: [0, 0.8, 0],\n                                scale: [1, 1.5, 2],\n                              }}\n                              transition={{\n                                duration: 0.6,\n                                repeat: Infinity,\n                                ease: \"easeOut\"\n                              }}\n                              style={{\n                                backgroundColor: barColor,\n                                filter: 'blur(10px)'\n                              }}\n                            />\n                          )}\n                        </motion.div>\n                      );\n                    })}\n                  </div>\n\n                  {/* Comparison Indicators */}\n                  {steps.length > 0 && currentStep < steps.length && steps[currentStep].comparingIndices.length > 0 && (\n                    <motion.div\n                      initial={{ opacity: 0, y: -20 }}\n                      animate={{ opacity: 1, y: 0 }}\n                      exit={{ opacity: 0, y: -20 }}\n                      className=\"absolute top-4 left-1/2 -translate-x-1/2 flex items-center gap-2 px-4 py-2 bg-yellow-500/20 backdrop-blur-sm rounded-full border border-yellow-400/50 shadow-[0_0_20px_rgba(255,255,0,0.5)]\"\n                    >\n                      <motion.div\n                        animate={{\n                          scale: [1, 1.2, 1],\n                          rotate: [0, 180, 360]\n                        }}\n                        transition={{\n                          duration: 1,\n                          repeat: Infinity,\n                          ease: \"easeInOut\"\n                        }}\n                      >\n                        <Zap className=\"w-4 h-4 text-yellow-300\" />\n                      </motion.div>\n                      <span className=\"text-sm font-semibold text-yellow-300\">\n                        Comparing indices: {steps[currentStep].comparingIndices.join(', ')}\n                      </span>\n                    </motion.div>\n                  )}\n\n                  {/* Swap Indicators */}\n                  {steps.length > 0 && currentStep < steps.length && steps[currentStep].swappingIndices.length > 0 && (\n                    <motion.div\n                      initial={{ opacity: 0, scale: 0.8 }}\n                      animate={{ opacity: 1, scale: 1 }}\n                      exit={{ opacity: 0, scale: 0.8 }}\n                      className=\"absolute top-16 left-1/2 -translate-x-1/2 flex items-center gap-2 px-4 py-2 bg-pink-500/20 backdrop-blur-sm rounded-full border border-pink-400/50 shadow-[0_0_20px_rgba(255,0,102,0.5)]\"\n                    >\n                      <motion.div\n                        animate={{\n                          rotate: [0, 360],\n                          scale: [1, 1.3, 1]\n                        }}\n                        transition={{\n                          duration: 0.8,\n                          repeat: Infinity,\n                          ease: \"easeInOut\"\n                        }}\n                      >\n                        <RotateCcw className=\"w-4 h-4 text-pink-300\" />\n                      </motion.div>\n                      <span className=\"text-sm font-semibold text-pink-300\">\n                        Swapping indices: {steps[currentStep].swappingIndices.join(', ')}\n                      </span>\n                    </motion.div>\n                  )}\n\n                  {/* Progress indicator */}\n                  {steps.length > 0 && (\n                    <motion.div\n                      initial={{ opacity: 0 }}\n                      animate={{ opacity: 1 }}\n                      className=\"absolute bottom-4 left-1/2 -translate-x-1/2 flex items-center gap-3 px-6 py-3 bg-gray-900/80 backdrop-blur-sm rounded-full border border-cyan-500/30\"\n                    >\n                      <span className=\"text-sm font-mono text-cyan-300\">\n                        Step: {currentStep + 1} / {steps.length}\n                      </span>\n                      <div className=\"w-32 h-2 bg-gray-800 rounded-full overflow-hidden border border-cyan-500/30\">\n                        <motion.div\n                          className=\"h-full bg-gradient-to-r from-cyan-500 to-purple-500\"\n                          initial={{ width: 0 }}\n                          animate={{ width: `${((currentStep + 1) / steps.length) * 100}%` }}\n                          transition={{ type: \"spring\", stiffness: 100, damping: 20 }}\n                        />\n                      </div>\n                    </motion.div>\n                  )}\n                </>\n              )}\n              \n              <div className=\"relative h-full flex items-end justify-center gap-1\">\n                {array.length === 0 ? (\n                  <motion.div\n                    initial={{ opacity: 0, scale: 0.8 }}\n                    animate={{ opacity: 1, scale: 1 }}\n                    className=\"absolute inset-0 flex items-center justify-center\"\n                  >\n                    <div className=\"text-center space-y-4\">\n                      <motion.div\n                        animate={{\n                          rotate: [0, 360],\n                          scale: [1, 1.2, 1]\n                        }}\n                        transition={{ duration: 3, repeat: Infinity }}\n                      >\n                        <BarChart3 className=\"w-16 h-16 text-cyan-400 mx-auto\" />\n                      </motion.div>\n                      <p className=\"text-cyan-300 text-lg font-semibold\">\n                        Generate an array to start visualizing\n                      </p>\n                      <p className=\"text-gray-400 text-sm\">\n                        Click the reset button to create a random array\n                      </p>\n                    </div>\n                  </motion.div>\n                ) : (\n                  array.map((element, index) => {\n                    const currentStepData = steps[currentStep];\n                    const isComparing = currentStepData?.comparingIndices.includes(index);\n                    const isSwapping = currentStepData?.swappingIndices.includes(index);\n                    const isSorted = currentStepData?.sortedIndices.includes(index);\n                    \n                    const maxValue = Math.max(...array.map(el => el.value));\n                    const heightPercentage = (element.value / maxValue) * 100;\n                    \n                    let barColor = NEON_COLORS[index % NEON_COLORS.length];\n                    let glowIntensity = 0.3;\n                    let scale = 1;\n                    \n                    if (isSorted) {\n                      barColor = '#00ff00';\n                      glowIntensity = 0.8;\n                    } else if (isSwapping) {\n                      barColor = '#ff0066';\n                      glowIntensity = 1;\n                      scale = 1.1;\n                    } else if (isComparing) {\n                      barColor = '#ffff00';\n                      glowIntensity = 0.7;\n                      scale = 1.05;\n                    }\n                    \n                    return (\n                      <motion.div\n                        key={element.id}\n                        layout\n                        initial={{ height: 0, opacity: 0 }}\n                        animate={{\n                          height: `${heightPercentage}%`,\n                          opacity: 1,\n                          scale: scale,\n                          backgroundColor: barColor\n                        }}\n                        transition={{\n                          height: { duration: 0.5, ease: \"easeOut\" },\n                          backgroundColor: { duration: 0.3 },\n                          scale: { duration: 0.2, type: \"spring\", stiffness: 300 }\n                        }}\n                        className=\"relative rounded-t-lg min-w-[8px] flex-1 max-w-[60px]\"\n                        style={{\n                          boxShadow: `\n                            0 0 ${20 * glowIntensity}px ${barColor},\n                            0 0 ${40 * glowIntensity}px ${barColor},\n                            inset 0 0 ${10 * glowIntensity}px rgba(255, 255, 255, 0.3)\n                          `,\n                          border: `1px solid ${barColor}`,\n                          background: `linear-gradient(to top, ${barColor}, ${barColor}dd)`\n                        }}\n                      >\n                        {/* Value label */}\n                        <motion.div\n                          initial={{ opacity: 0 }}\n                          animate={{ opacity: array.length <= 30 ? 1 : 0 }}\n                          className=\"absolute -top-6 left-1/2 -translate-x-1/2 text-xs font-mono font-bold whitespace-nowrap\"\n                          style={{\n                            color: barColor,\n                            textShadow: `0 0 10px ${barColor}`\n                          }}\n                        >\n                          {element.value}\n                        </motion.div>\n                        \n                        {/* Glow pulse effect for active states */}\n                        {(isComparing || isSwapping) && (\n                          <motion.div\n                            className=\"absolute inset-0 rounded-t-lg\"\n                            animate={{\n                              opacity: [0.5, 1, 0.5],\n                              scale: [1, 1.05, 1]\n                            }}\n                            transition={{\n                              duration: 0.6,\n                              repeat: Infinity,\n                              ease: \"easeInOut\"\n                            }}\n                            style={{\n                              background: `radial-gradient(circle, ${barColor}88 0%, transparent 70%)`,\n                              filter: 'blur(8px)'\n                            }}\n                          />\n                        )}\n                        \n                        {/* Sorted checkmark indicator */}\n                        {isSorted && (\n                          <motion.div\n                            initial={{ scale: 0, rotate: -180 }}\n                            animate={{ scale: 1, rotate: 0 }}\n                            transition={{ type: \"spring\", stiffness: 200, damping: 10 }}\n                            className=\"absolute -top-8 left-1/2 -translate-x-1/2 w-6 h-6 rounded-full bg-green-500 flex items-center justify-center\"\n                            style={{\n                              boxShadow: '0 0 20px #00ff00'\n                            }}\n                          >\n                            <svg\n                              className=\"w-4 h-4 text-gray-900\"\n                              fill=\"none\"\n                              strokeLinecap=\"round\"\n                              strokeLinejoin=\"round\"\n                              strokeWidth=\"3\"\n                              viewBox=\"0 0 24 24\"\n                              stroke=\"currentColor\"\n                            >\n                              <path d=\"M5 13l4 4L19 7\" />\n                            </svg>\n                          </motion.div>\n                        )}\n                        \n                        {/* Particle effect for swapping */}\n                        {isSwapping && (\n                          <>\n                            {[...Array(3)].map((_, i) => (\n                              <motion.div\n                                key={i}\n                                className=\"absolute w-1 h-1 rounded-full\"\n                                style={{ backgroundColor: barColor }}\n                                initial={{\n                                  top: '50%',\n                                  left: '50%',\n                                  opacity: 1\n                                }}\n                                animate={{\n                                  top: `${Math.random() * 100}%`,\n                                  left: `${Math.random() * 100}%`,\n                                  opacity: 0,\n                                  scale: [1, 2, 0]\n                                }}\n                                transition={{\n                                  duration: 0.8,\n                                  delay: i * 0.1,\n                                  repeat: Infinity\n                                }}\n                              />\n                            ))}\n                          </>\n                        )}\n                      </motion.div>\n                    );\n                  })\n                )}\n              </div>\n\n              {/* TODO:ComparisonIndicators Floating indicators showing which elements are being compared */}\n              \n                            {steps.length > 0 && currentStep < steps.length && steps[currentStep].swappingIndices.length === 2 && (\n                <>\n                  {steps[currentStep].swappingIndices.map((index, i) => {\n                    const barWidth = 100 / (steps[currentStep].array.length + 1);\n                    const xPosition = (index + 0.5) * barWidth;\n                    \n                    return (\n                      <motion.div\n                        key={`swap-trail-${index}-${currentStep}`}\n                        className=\"absolute bottom-0 pointer-events-none\"\n                        style={{\n                          left: `${xPosition}%`,\n                          width: `${barWidth * 0.8}%`,\n                          height: `${steps[currentStep].array[index].value}%`,\n                          transform: 'translateX(-50%)'\n                        }}\n                        initial={{ opacity: 0 }}\n                        animate={{ \n                          opacity: [0, 0.6, 0.4, 0],\n                          scale: [1, 1.1, 1.2, 1.3],\n                          filter: [\n                            'blur(0px)',\n                            'blur(4px)',\n                            'blur(8px)',\n                            'blur(12px)'\n                          ]\n                        }}\n                        transition={{ \n                          duration: 0.8,\n                          ease: \"easeOut\"\n                        }}\n                      >\n                        <div \n                          className=\"w-full h-full rounded-t-lg\"\n                          style={{\n                            background: `linear-gradient(to top, ${NEON_COLORS[index % NEON_COLORS.length]}40, ${NEON_COLORS[index % NEON_COLORS.length]}80)`,\n                            boxShadow: `0 0 30px ${NEON_COLORS[index % NEON_COLORS.length]}80`\n                          }}\n                        />\n                      </motion.div>\n                    );\n                  })}\n                  \n                  {/* Swap connection line with motion blur */}\n                  <motion.svg\n                    className=\"absolute inset-0 pointer-events-none\"\n                    style={{ width: '100%', height: '100%' }}\n                    initial={{ opacity: 0 }}\n                    animate={{ opacity: [0, 1, 0.7, 0] }}\n                    transition={{ duration: 0.6 }}\n                  >\n                    <motion.line\n                      x1={`${(steps[currentStep].swappingIndices[0] + 0.5) * (100 / (steps[currentStep].array.length + 1))}%`}\n                      y1=\"50%\"\n                      x2={`${(steps[currentStep].swappingIndices[1] + 0.5) * (100 / (steps[currentStep].array.length + 1))}%`}\n                      y2=\"50%\"\n                      stroke=\"#ff00ff\"\n                      strokeWidth=\"3\"\n                      strokeLinecap=\"round\"\n                      initial={{ pathLength: 0 }}\n                      animate={{ \n                        pathLength: [0, 1, 1],\n                        strokeWidth: [3, 5, 3]\n                      }}\n                      transition={{ duration: 0.5 }}\n                      style={{\n                        filter: 'blur(2px) drop-shadow(0 0 10px #ff00ff)',\n                      }}\n                    />\n                    <motion.line\n                      x1={`${(steps[currentStep].swappingIndices[0] + 0.5) * (100 / (steps[currentStep].array.length + 1))}%`}\n                      y1=\"50%\"\n                      x2={`${(steps[currentStep].swappingIndices[1] + 0.5) * (100 / (steps[currentStep].array.length + 1))}%`}\n                      y2=\"50%\"\n                      stroke=\"#00ffff\"\n                      strokeWidth=\"1\"\n                      strokeLinecap=\"round\"\n                      initial={{ pathLength: 0 }}\n                      animate={{ \n                        pathLength: [0, 1, 1]\n                      }}\n                      transition={{ duration: 0.5 }}\n                      style={{\n                        filter: 'drop-shadow(0 0 15px #00ffff)',\n                      }}\n                    />\n                  </motion.svg>\n\n                  {/* Particle burst effect at swap points */}\n                  {steps[currentStep].swappingIndices.map((index) => {\n                    const barWidth = 100 / (steps[currentStep].array.length + 1);\n                    const xPosition = (index + 0.5) * barWidth;\n                    \n                    return (\n                      <div key={`particles-${index}-${currentStep}`}>\n                        {[...Array(6)].map((_, particleIndex) => {\n                          const angle = (particleIndex * 60) * (Math.PI / 180);\n                          const distance = 30 + Math.random() * 20;\n                          \n                          return (\n                            <motion.div\n                              key={`particle-${index}-${particleIndex}`}\n                              className=\"absolute pointer-events-none rounded-full\"\n                              style={{\n                                left: `${xPosition}%`,\n                                bottom: `${steps[currentStep].array[index].value}%`,\n                                width: '6px',\n                                height: '6px',\n                                background: NEON_COLORS[particleIndex % NEON_COLORS.length],\n                                boxShadow: `0 0 10px ${NEON_COLORS[particleIndex % NEON_COLORS.length]}`\n                              }}\n                              initial={{ \n                                x: 0, \n                                y: 0, \n                                opacity: 1,\n                                scale: 1\n                              }}\n                              animate={{ \n                                x: Math.cos(angle) * distance,\n                                y: -Math.sin(angle) * distance,\n                                opacity: 0,\n                                scale: 0\n                              }}\n                              transition={{ \n                                duration: 0.6,\n                                ease: \"easeOut\"\n                              }}\n                            />\n                          );\n                        })}\n                      </div>\n                    );\n                  })}\n                </>\n              )}\n            </div>\n          </div>\n        </div>\n\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.8, delay: 0.4 }}\n          className=\"bg-gray-900/50 backdrop-blur-lg border border-cyan-500/30 rounded-xl p-6 shadow-[0_0_30px_rgba(0,255,255,0.2)]\"\n        >\n          <div className=\"flex items-center gap-2 mb-6\">\n            <BarChart3 className=\"w-5 h-5 text-cyan-400\" />\n            <h3 className=\"text-lg font-bold text-cyan-400\">Legend</h3>\n          </div>\n          \n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n            <motion.div\n              className=\"flex items-center gap-3 p-4 bg-gray-800/50 rounded-lg border border-gray-700/50 hover:border-cyan-500/50 transition-all duration-300\"\n              whileHover={{ scale: 1.05, boxShadow: '0 0 20px rgba(0, 255, 255, 0.3)' }}\n            >\n              <motion.div\n                className=\"w-6 h-12 bg-gradient-to-t from-cyan-500 to-cyan-300 rounded shadow-[0_0_15px_rgba(0,255,255,0.6)]\"\n                animate={{\n                  boxShadow: [\n                    '0 0 15px rgba(0, 255, 255, 0.6)',\n                    '0 0 25px rgba(0, 255, 255, 0.8)',\n                    '0 0 15px rgba(0, 255, 255, 0.6)'\n                  ]\n                }}\n                transition={{ duration: 2, repeat: Infinity }}\n              />\n              <div>\n                <div className=\"text-sm font-semibold text-white\">Default</div>\n                <div className=\"text-xs text-gray-400\">Unsorted</div>\n              </div>\n            </motion.div>\n\n            <motion.div\n              className=\"flex items-center gap-3 p-4 bg-gray-800/50 rounded-lg border border-gray-700/50 hover:border-yellow-500/50 transition-all duration-300\"\n              whileHover={{ scale: 1.05, boxShadow: '0 0 20px rgba(255, 255, 0, 0.3)' }}\n            >\n              <motion.div\n                className=\"w-6 h-12 bg-gradient-to-t from-yellow-500 to-yellow-300 rounded shadow-[0_0_15px_rgba(255,255,0,0.6)]\"\n                animate={{\n                  scale: [1, 1.1, 1],\n                  boxShadow: [\n                    '0 0 15px rgba(255, 255, 0, 0.6)',\n                    '0 0 30px rgba(255, 255, 0, 0.9)',\n                    '0 0 15px rgba(255, 255, 0, 0.6)'\n                  ]\n                }}\n                transition={{ duration: 1.5, repeat: Infinity }}\n              />\n              <div>\n                <div className=\"text-sm font-semibold text-white\">Comparing</div>\n                <div className=\"text-xs text-gray-400\">Active</div>\n              </div>\n            </motion.div>\n\n            <motion.div\n              className=\"flex items-center gap-3 p-4 bg-gray-800/50 rounded-lg border border-gray-700/50 hover:border-pink-500/50 transition-all duration-300\"\n              whileHover={{ scale: 1.05, boxShadow: '0 0 20px rgba(236, 72, 153, 0.3)' }}\n            >\n              <motion.div\n                className=\"w-6 h-12 bg-gradient-to-t from-pink-500 to-pink-300 rounded shadow-[0_0_15px_rgba(236,72,153,0.6)]\"\n                animate={{\n                  x: [-2, 2, -2],\n                  boxShadow: [\n                    '0 0 15px rgba(236, 72, 153, 0.6)',\n                    '0 0 35px rgba(236, 72, 153, 1)',\n                    '0 0 15px rgba(236, 72, 153, 0.6)'\n                  ]\n                }}\n                transition={{ duration: 0.8, repeat: Infinity }}\n              />\n              <div>\n                <div className=\"text-sm font-semibold text-white\">Swapping</div>\n                <div className=\"text-xs text-gray-400\">Moving</div>\n              </div>\n            </motion.div>\n\n            <motion.div\n              className=\"flex items-center gap-3 p-4 bg-gray-800/50 rounded-lg border border-gray-700/50 hover:border-green-500/50 transition-all duration-300\"\n              whileHover={{ scale: 1.05, boxShadow: '0 0 20px rgba(0, 255, 0, 0.3)' }}\n            >\n              <motion.div\n                className=\"w-6 h-12 bg-gradient-to-t from-green-500 to-green-300 rounded shadow-[0_0_15px_rgba(0,255,0,0.6)]\"\n                animate={{\n                  boxShadow: [\n                    '0 0 15px rgba(0, 255, 0, 0.6)',\n                    '0 0 20px rgba(0, 255, 0, 0.8)',\n                    '0 0 15px rgba(0, 255, 0, 0.6)'\n                  ]\n                }}\n                transition={{ duration: 2, repeat: Infinity }}\n              />\n              <div>\n                <div className=\"text-sm font-semibold text-white\">Sorted</div>\n                <div className=\"text-xs text-gray-400\">Complete</div>\n              </div>\n            </motion.div>\n          </div>\n\n          <motion.div\n            className=\"mt-6 p-4 bg-gradient-to-r from-purple-900/30 to-pink-900/30 rounded-lg border border-purple-500/30\"\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            transition={{ delay: 0.6 }}\n          >\n            <div className=\"flex items-start gap-3\">\n              <motion.div\n                animate={{\n                  rotate: [0, 360],\n                  scale: [1, 1.2, 1]\n                }}\n                transition={{ duration: 3, repeat: Infinity, ease: \"linear\" }}\n              >\n                <Zap className=\"w-5 h-5 text-purple-400 mt-0.5\" />\n              </motion.div>\n              <div>\n                <p className=\"text-sm text-purple-200 font-semibold mb-1\">Pro Tip</p>\n                <p className=\"text-xs text-purple-300/80\">\n                  Watch the neon glow effects as elements are compared and swapped. \n                  Adjust speed to see the algorithm in action at your own pace!\n                </p>\n              </div>\n            </div>\n          </motion.div>\n        </motion.div>\n      </div>\n    </div>\n  );\n}",
    "error": null,
    "elapsed_time": 99.38397455215454,
    "success": true
  }
}