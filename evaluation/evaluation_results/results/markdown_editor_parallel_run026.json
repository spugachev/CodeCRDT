{
  "prompt_id": "markdown_editor",
  "prompt_name": "Premium Markdown Editor",
  "mode": "parallel",
  "run_number": 26,
  "timestamp": "2025-10-14T05:57:02.391195",
  "response_time": 94.370614528656,
  "total_tokens": null,
  "response_content": "import { useState, useCallback } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Bold, Italic, Code, List, ListOrdered, Link, Image, Eye, EyeOff } from 'lucide-react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { useMemo } from 'react';\n\ninterface ToolbarButton {\n  id: string;\n  icon: any;\n  label: string;\n  action: string;\n}\n\nconst toolbarButtons: ToolbarButton[] = [\n  { id: 'bold', icon: Bold, label: 'Bold', action: '**text**' },\n  { id: 'italic', icon: Italic, label: 'Italic', action: '*text*' },\n  { id: 'code', icon: Code, label: 'Code', action: '`code`' },\n  { id: 'list', icon: List, label: 'Bullet List', action: '- item' },\n  { id: 'ordered', icon: ListOrdered, label: 'Numbered List', action: '1. item' },\n  { id: 'link', icon: Link, label: 'Link', action: '[text](url)' },\n  { id: 'image', icon: Image, label: 'Image', action: '![alt](url)' }\n];\n\nconst mockMarkdownContent = `# Welcome to Premium Markdown Editor\n\n## Features\n\nThis is a **bold** statement and this is *italic* text.\n\n### Code Blocks\n\n\\`\\`\\`javascript\nfunction greet(name) {\n  console.log(\\`Hello, \\${name}!\\`);\n  return true;\n}\n\\`\\`\\`\n\n\\`\\`\\`python\ndef calculate(x, y):\n    result = x + y\n    return result\n\\`\\`\\`\n\n### Lists\n\n- First item\n- Second item\n- Third item\n\n1. Numbered one\n2. Numbered two\n3. Numbered three\n\n### Inline Code\n\nUse \\`const variable = 'value'\\` for inline code.\n\n### Links and Images\n\n[Visit Example](https://example.com)\n\n> This is a blockquote with important information.\n\n---\n\n**End of document**\n`;\n\nconst calculateStats = (text: string) => {\n  const words = text.trim().split(/\\s+/).filter(word => word.length > 0).length;\n  const characters = text.length;\n  const readingTime = Math.ceil(words / 200); // Average reading speed: 200 words per minute\n  \n  return { words, characters, readingTime };\n};\n\n// Markdown parser component\nconst MarkdownPreview = ({ content }: { content: string }) => {\n  const parsedContent = useMemo(() => {\n    return parseMarkdown(content);\n  }, [content]);\n\n  return <div className=\"markdown-preview prose prose-invert max-w-none\">{parsedContent}</div>;\n};\n\n// Parse markdown to React elements\nconst parseMarkdown = (markdown: string): React.ReactNode[] => {\n  const lines = markdown.split('\\n');\n  const elements: React.ReactNode[] = [];\n  let i = 0;\n  let listItems: string[] = [];\n  let orderedListItems: string[] = [];\n  let codeBlock: { language: string; code: string[] } | null = null;\n  let blockquoteLines: string[] = [];\n\n  const flushList = () => {\n    if (listItems.length > 0) {\n      elements.push(\n        <ul key={`ul-${elements.length}`} className=\"list-disc list-inside space-y-1 my-4 text-gray-300\">\n          {listItems.map((item, idx) => (\n            <li key={idx} className=\"ml-4\">{parseInline(item)}</li>\n          ))}\n        </ul>\n      );\n      listItems = [];\n    }\n  };\n\n  const flushOrderedList = () => {\n    if (orderedListItems.length > 0) {\n      elements.push(\n        <ol key={`ol-${elements.length}`} className=\"list-decimal list-inside space-y-1 my-4 text-gray-300\">\n          {orderedListItems.map((item, idx) => (\n            <li key={idx} className=\"ml-4\">{parseInline(item)}</li>\n          ))}\n        </ol>\n      );\n      orderedListItems = [];\n    }\n  };\n\n  const flushBlockquote = () => {\n    if (blockquoteLines.length > 0) {\n      elements.push(\n        <blockquote key={`bq-${elements.length}`} className=\"border-l-4 border-blue-500 pl-4 py-2 my-4 italic text-gray-400 bg-[#161b22] rounded-r\">\n          {blockquoteLines.map((line, idx) => (\n            <p key={idx}>{parseInline(line)}</p>\n          ))}\n        </blockquote>\n      );\n      blockquoteLines = [];\n    }\n  };\n\n  while (i < lines.length) {\n    const line = lines[i];\n\n    // Code block detection\n    if (line.trim().startsWith('```')) {\n      flushList();\n      flushOrderedList();\n      flushBlockquote();\n      \n      const language = line.trim().substring(3).trim() || 'text';\n      const codeLines: string[] = [];\n      i++;\n      \n      while (i < lines.length && !lines[i].trim().startsWith('```')) {\n        codeLines.push(lines[i]);\n        i++;\n      }\n      \n      elements.push(\n        <div key={`code-${elements.length}`} className=\"my-4 rounded-lg overflow-hidden border border-[#30363d] bg-[#161b22]\">\n          <div className=\"flex items-center justify-between px-4 py-2 bg-[#0d1117] border-b border-[#30363d]\">\n            <span className=\"text-xs font-mono text-gray-400\">{language}</span>\n            <Code className=\"w-3 h-3 text-gray-500\" />\n          </div>\n          <pre className=\"p-4 overflow-x-auto\">\n            <code className=\"text-sm font-mono\">{highlightCode(codeLines.join('\\n'), language)}</code>\n          </pre>\n        </div>\n      );\n      i++;\n      continue;\n    }\n\n    // Blockquote\n    if (line.trim().startsWith('>')) {\n      flushList();\n      flushOrderedList();\n      blockquoteLines.push(line.trim().substring(1).trim());\n      i++;\n      continue;\n    } else if (blockquoteLines.length > 0) {\n      flushBlockquote();\n    }\n\n    // Horizontal rule\n    if (line.trim() === '---' || line.trim() === '***') {\n      flushList();\n      flushOrderedList();\n      elements.push(<hr key={`hr-${elements.length}`} className=\"my-6 border-[#30363d]\" />);\n      i++;\n      continue;\n    }\n\n    // Headers\n    if (line.startsWith('# ')) {\n      flushList();\n      flushOrderedList();\n      elements.push(<h1 key={`h1-${i}`} className=\"text-4xl font-bold mb-4 mt-6 text-blue-400\">{parseInline(line.substring(2))}</h1>);\n      i++;\n      continue;\n    }\n    if (line.startsWith('## ')) {\n      flushList();\n      flushOrderedList();\n      elements.push(<h2 key={`h2-${i}`} className=\"text-3xl font-bold mb-3 mt-5 text-purple-400\">{parseInline(line.substring(3))}</h2>);\n      i++;\n      continue;\n    }\n    if (line.startsWith('### ')) {\n      flushList();\n      flushOrderedList();\n      elements.push(<h3 key={`h3-${i}`} className=\"text-2xl font-semibold mb-3 mt-4 text-pink-400\">{parseInline(line.substring(4))}</h3>);\n      i++;\n      continue;\n    }\n\n    // Unordered list\n    if (line.trim().startsWith('- ')) {\n      flushOrderedList();\n      listItems.push(line.trim().substring(2));\n      i++;\n      continue;\n    } else if (listItems.length > 0) {\n      flushList();\n    }\n\n    // Ordered list\n    const orderedMatch = line.trim().match(/^\\d+\\.\\s+(.+)$/);\n    if (orderedMatch) {\n      flushList();\n      orderedListItems.push(orderedMatch[1]);\n      i++;\n      continue;\n    } else if (orderedListItems.length > 0) {\n      flushOrderedList();\n    }\n\n    // Empty line\n    if (line.trim() === '') {\n      flushList();\n      flushOrderedList();\n      i++;\n      continue;\n    }\n\n    // Paragraph\n    flushList();\n    flushOrderedList();\n    elements.push(<p key={`p-${i}`} className=\"mb-4 text-gray-300 leading-relaxed\">{parseInline(line)}</p>);\n    i++;\n  }\n\n  flushList();\n  flushOrderedList();\n  flushBlockquote();\n\n  return elements;\n};\n\n// Parse inline markdown (bold, italic, code, links, images)\nconst parseInline = (text: string): React.ReactNode[] => {\n  const elements: React.ReactNode[] = [];\n  let remaining = text;\n  let key = 0;\n\n  while (remaining.length > 0) {\n    // Bold **text**\n    const boldMatch = remaining.match(/^\\*\\*(.+?)\\*\\*/);\n    if (boldMatch) {\n      elements.push(<strong key={key++} className=\"font-bold text-blue-300\">{boldMatch[1]}</strong>);\n      remaining = remaining.substring(boldMatch[0].length);\n      continue;\n    }\n\n    // Italic *text*\n    const italicMatch = remaining.match(/^\\*(.+?)\\*/);\n    if (italicMatch) {\n      elements.push(<em key={key++} className=\"italic text-purple-300\">{italicMatch[1]}</em>);\n      remaining = remaining.substring(italicMatch[0].length);\n      continue;\n    }\n\n    // Inline code `code`\n    const codeMatch = remaining.match(/^`(.+?)`/);\n    if (codeMatch) {\n      elements.push(\n        <code key={key++} className=\"px-2 py-0.5 bg-[#161b22] border border-[#30363d] rounded text-sm font-mono text-pink-400\">\n          {codeMatch[1]}\n        </code>\n      );\n      remaining = remaining.substring(codeMatch[0].length);\n      continue;\n    }\n\n    // Links [text](url)\n    const linkMatch = remaining.match(/^\\[(.+?)\\]\\((.+?)\\)/);\n    if (linkMatch) {\n      elements.push(\n        <a key={key++} href={linkMatch[2]} className=\"text-blue-400 hover:text-blue-300 underline\" target=\"_blank\" rel=\"noopener noreferrer\">\n          {linkMatch[1]}\n        </a>\n      );\n      remaining = remaining.substring(linkMatch[0].length);\n      continue;\n    }\n\n    // Images ![alt](url)\n    const imageMatch = remaining.match(/^!\\[(.+?)\\]\\((.+?)\\)/);\n    if (imageMatch) {\n      elements.push(\n        <img key={key++} src={imageMatch[2]} alt={imageMatch[1]} className=\"max-w-full h-auto rounded-lg my-2 border border-[#30363d]\" />\n      );\n      remaining = remaining.substring(imageMatch[0].length);\n      continue;\n    }\n\n    // Regular text\n    elements.push(remaining[0]);\n    remaining = remaining.substring(1);\n  }\n\n  return elements;\n};\n\n// Syntax highlighting for code blocks\nconst highlightCode = (code: string, language: string): React.ReactNode[] => {\n  const lines = code.split('\\n');\n  \n  return lines.map((line, idx) => {\n    const highlighted = highlightLine(line, language);\n    return (\n      <div key={idx} className=\"leading-relaxed\">\n        {highlighted}\n      </div>\n    );\n  });\n};\n\nconst highlightLine = (line: string, language: string): React.ReactNode[] => {\n  const elements: React.ReactNode[] = [];\n  let remaining = line;\n  let key = 0;\n\n  // Keywords by language\n  const keywords: Record<string, string[]> = {\n    javascript: ['function', 'const', 'let', 'var', 'return', 'if', 'else', 'for', 'while', 'class', 'import', 'export', 'default', 'async', 'await', 'try', 'catch'],\n    python: ['def', 'return', 'if', 'else', 'elif', 'for', 'while', 'class', 'import', 'from', 'as', 'try', 'except', 'with', 'lambda', 'yield'],\n    typescript: ['function', 'const', 'let', 'var', 'return', 'if', 'else', 'for', 'while', 'class', 'import', 'export', 'default', 'interface', 'type', 'async', 'await'],\n  };\n\n  const langKeywords = keywords[language] || [];\n\n  while (remaining.length > 0) {\n    // String literals\n    const stringMatch = remaining.match(/^(['\"`]).*?\\1/);\n    if (stringMatch) {\n      elements.push(<span key={key++} className=\"text-green-400\">{stringMatch[0]}</span>);\n      remaining = remaining.substring(stringMatch[0].length);\n      continue;\n    }\n\n    // Template literals\n    const templateMatch = remaining.match(/^`[^`]*`/);\n    if (templateMatch) {\n      elements.push(<span key={key++} className=\"text-green-400\">{templateMatch[0]}</span>);\n      remaining = remaining.substring(templateMatch[0].length);\n      continue;\n    }\n\n    // Comments\n    const commentMatch = remaining.match(/^(\\/\\/.*|#.*)/);\n    if (commentMatch) {\n      elements.push(<span key={key++} className=\"text-gray-500 italic\">{commentMatch[0]}</span>);\n      remaining = remaining.substring(commentMatch[0].length);\n      continue;\n    }\n\n    // Numbers\n    const numberMatch = remaining.match(/^\\d+(\\.\\d+)?/);\n    if (numberMatch) {\n      elements.push(<span key={key++} className=\"text-orange-400\">{numberMatch[0]}</span>);\n      remaining = remaining.substring(numberMatch[0].length);\n      continue;\n    }\n\n    // Keywords\n    let keywordFound = false;\n    for (const keyword of langKeywords) {\n      if (remaining.startsWith(keyword) && (remaining.length === keyword.length || !/[a-zA-Z0-9_]/.test(remaining[keyword.length]))) {\n        elements.push(<span key={key++} className=\"text-purple-400 font-semibold\">{keyword}</span>);\n        remaining = remaining.substring(keyword.length);\n        keywordFound = true;\n        break;\n      }\n    }\n    if (keywordFound) continue;\n\n    // Function calls\n    const functionMatch = remaining.match(/^[a-zA-Z_][a-zA-Z0-9_]*(?=\\()/);\n    if (functionMatch) {\n      elements.push(<span key={key++} className=\"text-yellow-400\">{functionMatch[0]}</span>);\n      remaining = remaining.substring(functionMatch[0].length);\n      continue;\n    }\n\n    // Operators and punctuation\n    if (/^[+\\-*/%=<>!&|^~?:;,.()\\[\\]{}]/.test(remaining)) {\n      elements.push(<span key={key++} className=\"text-cyan-400\">{remaining[0]}</span>);\n      remaining = remaining.substring(1);\n      continue;\n    }\n\n    // Regular text\n    const textMatch = remaining.match(/^[a-zA-Z_][a-zA-Z0-9_]*/);\n    if (textMatch) {\n      elements.push(<span key={key++} className=\"text-gray-300\">{textMatch[0]}</span>);\n      remaining = remaining.substring(textMatch[0].length);\n      continue;\n    }\n\n    // Whitespace and other characters\n    elements.push(remaining[0]);\n    remaining = remaining.substring(1);\n  }\n\n  return elements;\n};\n\nexport default function MarkdownEditor() {\n  const [markdown, setMarkdown] = useState(mockMarkdownContent);\n  const [showPreview, setShowPreview] = useState(true);\n  const [cursorPosition, setCursorPosition] = useState(0);\n\n  const handleMarkdownChange = useCallback((e: React.ChangeEvent<HTMLTextAreaElement>) => {\n    setMarkdown(e.target.value);\n    setCursorPosition(e.target.selectionStart);\n  }, []);\n\n  const togglePreview = useCallback(() => {\n    setShowPreview(prev => !prev);\n  }, []);\n\n  const handleToolbarAction = useCallback((action: string) => {\n    const textareaElement = document.querySelector('textarea') as HTMLTextAreaElement;\n    if (!textareaElement) return;\n\n    const start = textareaElement.selectionStart;\n    const end = textareaElement.selectionEnd;\n    const selectedText = markdown.substring(start, end);\n    \n    let newText = '';\n    let cursorOffset = 0;\n\n    // Handle different markdown syntax patterns\n    if (action.includes('**text**')) {\n      newText = selectedText ? `**${selectedText}**` : '**text**';\n      cursorOffset = selectedText ? newText.length : 2;\n    } else if (action.includes('*text*')) {\n      newText = selectedText ? `*${selectedText}*` : '*text*';\n      cursorOffset = selectedText ? newText.length : 1;\n    } else if (action.includes('`code`')) {\n      newText = selectedText ? `\\`${selectedText}\\`` : '`code`';\n      cursorOffset = selectedText ? newText.length : 1;\n    } else if (action.includes('[text](url)')) {\n      newText = selectedText ? `[${selectedText}](url)` : '[text](url)';\n      cursorOffset = selectedText ? selectedText.length + 3 : 1;\n    } else if (action.includes('![alt](url)')) {\n      newText = selectedText ? `![${selectedText}](url)` : '![alt](url)';\n      cursorOffset = selectedText ? selectedText.length + 4 : 2;\n    } else if (action.includes('- item')) {\n      const lineStart = markdown.lastIndexOf('\\n', start - 1) + 1;\n      const isNewLine = start === lineStart || start === 0;\n      newText = isNewLine ? '- ' : '\\n- ';\n      cursorOffset = newText.length;\n    } else if (action.includes('1. item')) {\n      const lineStart = markdown.lastIndexOf('\\n', start - 1) + 1;\n      const isNewLine = start === lineStart || start === 0;\n      newText = isNewLine ? '1. ' : '\\n1. ';\n      cursorOffset = newText.length;\n    }\n\n    const newMarkdown = markdown.substring(0, start) + newText + markdown.substring(end);\n    setMarkdown(newMarkdown);\n\n    // Update cursor position after state update\n    setTimeout(() => {\n      textareaElement.focus();\n      const newCursorPos = start + cursorOffset;\n      textareaElement.setSelectionRange(newCursorPos, newCursorPos);\n      setCursorPosition(newCursorPos);\n    }, 0);</parameter>\n  }, [markdown, cursorPosition]);\n\n  return (\n    <div className=\"min-h-screen bg-[#0d1117] text-gray-100\">\n      <div className=\"container mx-auto px-4 py-6\">\n        {/* Header */}\n        <div className=\"mb-6 flex items-center justify-between\">\n          <h1 className=\"text-3xl font-bold bg-gradient-to-r from-blue-400 to-purple-500 bg-clip-text text-transparent\">\n            Premium Markdown Editor\n          </h1>\n          <Button\n            onClick={togglePreview}\n            variant=\"outline\"\n            className=\"bg-[#161b22] border-[#30363d] hover:bg-[#1f2937] text-gray-300\"\n          >\n            {showPreview ? <EyeOff className=\"w-4 h-4 mr-2\" /> : <Eye className=\"w-4 h-4 mr-2\" />}\n            {showPreview ? 'Hide Preview' : 'Show Preview'}\n          </Button>\n        </div>\n\n        {/* Floating Toolbar */}\n        <motion.div\n          initial={{ opacity: 0, y: -20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.5, ease: \"easeOut\" }}\n          className=\"mb-6 bg-[#161b22] border border-[#30363d] rounded-lg p-3 shadow-xl\"\n        >\n          <div className=\"flex flex-wrap gap-2 justify-center\">\n            {toolbarButtons.map((button, index) => (\n              <motion.div\n                key={button.id}\n                initial={{ opacity: 0, scale: 0.8 }}\n                animate={{ opacity: 1, scale: 1 }}\n                transition={{ delay: index * 0.05, duration: 0.3 }}\n                whileHover={{ scale: 1.1, y: -2 }}\n                whileTap={{ scale: 0.95 }}\n              >\n                <Button\n                  onClick={() => handleToolbarAction(button.action)}\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  className=\"bg-[#0d1117] border border-[#30363d] hover:bg-[#1f2937] hover:border-blue-500/50 text-gray-300 hover:text-blue-400 transition-all duration-200 group relative\"\n                  title={button.label}\n                >\n                  <button.icon className=\"w-4 h-4\" />\n                  <motion.span\n                    initial={{ opacity: 0, y: 10 }}\n                    whileHover={{ opacity: 1, y: 0 }}\n                    className=\"absolute -bottom-8 left-1/2 transform -translate-x-1/2 text-xs bg-[#1f2937] px-2 py-1 rounded border border-[#30363d] whitespace-nowrap pointer-events-none opacity-0 group-hover:opacity-100 transition-opacity duration-200\"\n                  >\n                    {button.label}\n                  </motion.span>\n                </Button>\n              </motion.div>\n            ))}\n          </div>\n        </motion.div>\n\n        {/* Editor Layout */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n          {/* Editor Panel */}\n          <motion.div\n            layout\n            className=\"relative\"\n          >\n            <div className=\"bg-[#0d1117] border border-[#30363d] rounded-lg overflow-hidden shadow-2xl\">\n              <div className=\"bg-[#161b22] px-4 py-3 border-b border-[#30363d] flex items-center justify-between\">\n                <span className=\"text-sm font-medium text-gray-400\">Editor</span>\n                <div className=\"flex gap-2\">\n                  <div className=\"w-3 h-3 rounded-full bg-red-500\"></div>\n                  <div className=\"w-3 h-3 rounded-full bg-yellow-500\"></div>\n                  <div className=\"w-3 h-3 rounded-full bg-green-500\"></div>\n                </div>\n              </div>\n              <textarea\n                value={markdown}\n                onChange={handleMarkdownChange}\n                className=\"w-full h-[600px] bg-[#0d1117] text-gray-100 p-6 font-mono text-sm resize-none focus:outline-none\"\n                placeholder=\"Start writing your markdown...\"\n                spellCheck={false}\n              />\n            </div>\n          </motion.div>\n\n          {/* Preview Panel */}\n          <AnimatePresence mode=\"wait\">\n            {showPreview && (\n              <motion.div\n                initial={{ opacity: 0, x: 20 }}\n                animate={{ opacity: 1, x: 0 }}\n                exit={{ opacity: 0, x: 20 }}\n                transition={{ duration: 0.3 }}\n                className=\"relative\"\n              >\n                <div className=\"bg-[#0d1117] border border-[#30363d] rounded-lg overflow-hidden shadow-2xl\">\n                  <div className=\"bg-[#161b22] px-4 py-3 border-b border-[#30363d]\">\n                    <span className=\"text-sm font-medium text-gray-400\">Preview</span>\n                  </div>\n                  <div className=\"p-6 h-[600px] overflow-y-auto\">\n                    <MarkdownPreview content={markdown} />\n                  </div>\n                </div>\n              </motion.div>\n            )}\n          </AnimatePresence>\n        </div>\n\n        {/* Stats Bar */}\n                <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.5, delay: 0.2 }}\n          className=\"mt-6 bg-[#161b22] border border-[#30363d] rounded-lg p-4 shadow-xl\"\n        >\n          <div className=\"flex flex-wrap gap-6 justify-center items-center text-sm\">\n            <div className=\"flex items-center gap-2\">\n              <span className=\"text-gray-400\">Words:</span>\n              <span className=\"font-semibold text-blue-400\">{calculateStats(markdown).words}</span>\n            </div>\n            <div className=\"w-px h-4 bg-[#30363d]\"></div>\n            <div className=\"flex items-center gap-2\">\n              <span className=\"text-gray-400\">Characters:</span>\n              <span className=\"font-semibold text-purple-400\">{calculateStats(markdown).characters}</span>\n            </div>\n            <div className=\"w-px h-4 bg-[#30363d]\"></div>\n            <div className=\"flex items-center gap-2\">\n              <span className=\"text-gray-400\">Reading Time:</span>\n              <span className=\"font-semibold text-green-400\">\n                {calculateStats(markdown).readingTime} min\n              </span>\n            </div>\n          </div>\n        </motion.div>\n      </div>\n    </div>\n  );\n}",
  "error": null,
  "overall_score": 53,
  "code_quality_score": 16,
  "architecture_score": 14,
  "performance_score": 12,
  "accessibility_score": 11,
  "metadata": {
    "document_id": "eval_room_43bdca8dee26",
    "prompt_category": "productivity",
    "prompt_complexity": 8.0
  },
  "raw_response": {
    "document_id": "eval_room_43bdca8dee26",
    "mode": "parallel",
    "prompt": "Create a premium markdown editor with dark theme, syntax highlighting with vibrant colors, smooth live preview transitions, floating toolbar with hover effects, and code block styling like VS Code",
    "content": "import { useState, useCallback } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Bold, Italic, Code, List, ListOrdered, Link, Image, Eye, EyeOff } from 'lucide-react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { useMemo } from 'react';\n\ninterface ToolbarButton {\n  id: string;\n  icon: any;\n  label: string;\n  action: string;\n}\n\nconst toolbarButtons: ToolbarButton[] = [\n  { id: 'bold', icon: Bold, label: 'Bold', action: '**text**' },\n  { id: 'italic', icon: Italic, label: 'Italic', action: '*text*' },\n  { id: 'code', icon: Code, label: 'Code', action: '`code`' },\n  { id: 'list', icon: List, label: 'Bullet List', action: '- item' },\n  { id: 'ordered', icon: ListOrdered, label: 'Numbered List', action: '1. item' },\n  { id: 'link', icon: Link, label: 'Link', action: '[text](url)' },\n  { id: 'image', icon: Image, label: 'Image', action: '![alt](url)' }\n];\n\nconst mockMarkdownContent = `# Welcome to Premium Markdown Editor\n\n## Features\n\nThis is a **bold** statement and this is *italic* text.\n\n### Code Blocks\n\n\\`\\`\\`javascript\nfunction greet(name) {\n  console.log(\\`Hello, \\${name}!\\`);\n  return true;\n}\n\\`\\`\\`\n\n\\`\\`\\`python\ndef calculate(x, y):\n    result = x + y\n    return result\n\\`\\`\\`\n\n### Lists\n\n- First item\n- Second item\n- Third item\n\n1. Numbered one\n2. Numbered two\n3. Numbered three\n\n### Inline Code\n\nUse \\`const variable = 'value'\\` for inline code.\n\n### Links and Images\n\n[Visit Example](https://example.com)\n\n> This is a blockquote with important information.\n\n---\n\n**End of document**\n`;\n\nconst calculateStats = (text: string) => {\n  const words = text.trim().split(/\\s+/).filter(word => word.length > 0).length;\n  const characters = text.length;\n  const readingTime = Math.ceil(words / 200); // Average reading speed: 200 words per minute\n  \n  return { words, characters, readingTime };\n};\n\n// Markdown parser component\nconst MarkdownPreview = ({ content }: { content: string }) => {\n  const parsedContent = useMemo(() => {\n    return parseMarkdown(content);\n  }, [content]);\n\n  return <div className=\"markdown-preview prose prose-invert max-w-none\">{parsedContent}</div>;\n};\n\n// Parse markdown to React elements\nconst parseMarkdown = (markdown: string): React.ReactNode[] => {\n  const lines = markdown.split('\\n');\n  const elements: React.ReactNode[] = [];\n  let i = 0;\n  let listItems: string[] = [];\n  let orderedListItems: string[] = [];\n  let codeBlock: { language: string; code: string[] } | null = null;\n  let blockquoteLines: string[] = [];\n\n  const flushList = () => {\n    if (listItems.length > 0) {\n      elements.push(\n        <ul key={`ul-${elements.length}`} className=\"list-disc list-inside space-y-1 my-4 text-gray-300\">\n          {listItems.map((item, idx) => (\n            <li key={idx} className=\"ml-4\">{parseInline(item)}</li>\n          ))}\n        </ul>\n      );\n      listItems = [];\n    }\n  };\n\n  const flushOrderedList = () => {\n    if (orderedListItems.length > 0) {\n      elements.push(\n        <ol key={`ol-${elements.length}`} className=\"list-decimal list-inside space-y-1 my-4 text-gray-300\">\n          {orderedListItems.map((item, idx) => (\n            <li key={idx} className=\"ml-4\">{parseInline(item)}</li>\n          ))}\n        </ol>\n      );\n      orderedListItems = [];\n    }\n  };\n\n  const flushBlockquote = () => {\n    if (blockquoteLines.length > 0) {\n      elements.push(\n        <blockquote key={`bq-${elements.length}`} className=\"border-l-4 border-blue-500 pl-4 py-2 my-4 italic text-gray-400 bg-[#161b22] rounded-r\">\n          {blockquoteLines.map((line, idx) => (\n            <p key={idx}>{parseInline(line)}</p>\n          ))}\n        </blockquote>\n      );\n      blockquoteLines = [];\n    }\n  };\n\n  while (i < lines.length) {\n    const line = lines[i];\n\n    // Code block detection\n    if (line.trim().startsWith('```')) {\n      flushList();\n      flushOrderedList();\n      flushBlockquote();\n      \n      const language = line.trim().substring(3).trim() || 'text';\n      const codeLines: string[] = [];\n      i++;\n      \n      while (i < lines.length && !lines[i].trim().startsWith('```')) {\n        codeLines.push(lines[i]);\n        i++;\n      }\n      \n      elements.push(\n        <div key={`code-${elements.length}`} className=\"my-4 rounded-lg overflow-hidden border border-[#30363d] bg-[#161b22]\">\n          <div className=\"flex items-center justify-between px-4 py-2 bg-[#0d1117] border-b border-[#30363d]\">\n            <span className=\"text-xs font-mono text-gray-400\">{language}</span>\n            <Code className=\"w-3 h-3 text-gray-500\" />\n          </div>\n          <pre className=\"p-4 overflow-x-auto\">\n            <code className=\"text-sm font-mono\">{highlightCode(codeLines.join('\\n'), language)}</code>\n          </pre>\n        </div>\n      );\n      i++;\n      continue;\n    }\n\n    // Blockquote\n    if (line.trim().startsWith('>')) {\n      flushList();\n      flushOrderedList();\n      blockquoteLines.push(line.trim().substring(1).trim());\n      i++;\n      continue;\n    } else if (blockquoteLines.length > 0) {\n      flushBlockquote();\n    }\n\n    // Horizontal rule\n    if (line.trim() === '---' || line.trim() === '***') {\n      flushList();\n      flushOrderedList();\n      elements.push(<hr key={`hr-${elements.length}`} className=\"my-6 border-[#30363d]\" />);\n      i++;\n      continue;\n    }\n\n    // Headers\n    if (line.startsWith('# ')) {\n      flushList();\n      flushOrderedList();\n      elements.push(<h1 key={`h1-${i}`} className=\"text-4xl font-bold mb-4 mt-6 text-blue-400\">{parseInline(line.substring(2))}</h1>);\n      i++;\n      continue;\n    }\n    if (line.startsWith('## ')) {\n      flushList();\n      flushOrderedList();\n      elements.push(<h2 key={`h2-${i}`} className=\"text-3xl font-bold mb-3 mt-5 text-purple-400\">{parseInline(line.substring(3))}</h2>);\n      i++;\n      continue;\n    }\n    if (line.startsWith('### ')) {\n      flushList();\n      flushOrderedList();\n      elements.push(<h3 key={`h3-${i}`} className=\"text-2xl font-semibold mb-3 mt-4 text-pink-400\">{parseInline(line.substring(4))}</h3>);\n      i++;\n      continue;\n    }\n\n    // Unordered list\n    if (line.trim().startsWith('- ')) {\n      flushOrderedList();\n      listItems.push(line.trim().substring(2));\n      i++;\n      continue;\n    } else if (listItems.length > 0) {\n      flushList();\n    }\n\n    // Ordered list\n    const orderedMatch = line.trim().match(/^\\d+\\.\\s+(.+)$/);\n    if (orderedMatch) {\n      flushList();\n      orderedListItems.push(orderedMatch[1]);\n      i++;\n      continue;\n    } else if (orderedListItems.length > 0) {\n      flushOrderedList();\n    }\n\n    // Empty line\n    if (line.trim() === '') {\n      flushList();\n      flushOrderedList();\n      i++;\n      continue;\n    }\n\n    // Paragraph\n    flushList();\n    flushOrderedList();\n    elements.push(<p key={`p-${i}`} className=\"mb-4 text-gray-300 leading-relaxed\">{parseInline(line)}</p>);\n    i++;\n  }\n\n  flushList();\n  flushOrderedList();\n  flushBlockquote();\n\n  return elements;\n};\n\n// Parse inline markdown (bold, italic, code, links, images)\nconst parseInline = (text: string): React.ReactNode[] => {\n  const elements: React.ReactNode[] = [];\n  let remaining = text;\n  let key = 0;\n\n  while (remaining.length > 0) {\n    // Bold **text**\n    const boldMatch = remaining.match(/^\\*\\*(.+?)\\*\\*/);\n    if (boldMatch) {\n      elements.push(<strong key={key++} className=\"font-bold text-blue-300\">{boldMatch[1]}</strong>);\n      remaining = remaining.substring(boldMatch[0].length);\n      continue;\n    }\n\n    // Italic *text*\n    const italicMatch = remaining.match(/^\\*(.+?)\\*/);\n    if (italicMatch) {\n      elements.push(<em key={key++} className=\"italic text-purple-300\">{italicMatch[1]}</em>);\n      remaining = remaining.substring(italicMatch[0].length);\n      continue;\n    }\n\n    // Inline code `code`\n    const codeMatch = remaining.match(/^`(.+?)`/);\n    if (codeMatch) {\n      elements.push(\n        <code key={key++} className=\"px-2 py-0.5 bg-[#161b22] border border-[#30363d] rounded text-sm font-mono text-pink-400\">\n          {codeMatch[1]}\n        </code>\n      );\n      remaining = remaining.substring(codeMatch[0].length);\n      continue;\n    }\n\n    // Links [text](url)\n    const linkMatch = remaining.match(/^\\[(.+?)\\]\\((.+?)\\)/);\n    if (linkMatch) {\n      elements.push(\n        <a key={key++} href={linkMatch[2]} className=\"text-blue-400 hover:text-blue-300 underline\" target=\"_blank\" rel=\"noopener noreferrer\">\n          {linkMatch[1]}\n        </a>\n      );\n      remaining = remaining.substring(linkMatch[0].length);\n      continue;\n    }\n\n    // Images ![alt](url)\n    const imageMatch = remaining.match(/^!\\[(.+?)\\]\\((.+?)\\)/);\n    if (imageMatch) {\n      elements.push(\n        <img key={key++} src={imageMatch[2]} alt={imageMatch[1]} className=\"max-w-full h-auto rounded-lg my-2 border border-[#30363d]\" />\n      );\n      remaining = remaining.substring(imageMatch[0].length);\n      continue;\n    }\n\n    // Regular text\n    elements.push(remaining[0]);\n    remaining = remaining.substring(1);\n  }\n\n  return elements;\n};\n\n// Syntax highlighting for code blocks\nconst highlightCode = (code: string, language: string): React.ReactNode[] => {\n  const lines = code.split('\\n');\n  \n  return lines.map((line, idx) => {\n    const highlighted = highlightLine(line, language);\n    return (\n      <div key={idx} className=\"leading-relaxed\">\n        {highlighted}\n      </div>\n    );\n  });\n};\n\nconst highlightLine = (line: string, language: string): React.ReactNode[] => {\n  const elements: React.ReactNode[] = [];\n  let remaining = line;\n  let key = 0;\n\n  // Keywords by language\n  const keywords: Record<string, string[]> = {\n    javascript: ['function', 'const', 'let', 'var', 'return', 'if', 'else', 'for', 'while', 'class', 'import', 'export', 'default', 'async', 'await', 'try', 'catch'],\n    python: ['def', 'return', 'if', 'else', 'elif', 'for', 'while', 'class', 'import', 'from', 'as', 'try', 'except', 'with', 'lambda', 'yield'],\n    typescript: ['function', 'const', 'let', 'var', 'return', 'if', 'else', 'for', 'while', 'class', 'import', 'export', 'default', 'interface', 'type', 'async', 'await'],\n  };\n\n  const langKeywords = keywords[language] || [];\n\n  while (remaining.length > 0) {\n    // String literals\n    const stringMatch = remaining.match(/^(['\"`]).*?\\1/);\n    if (stringMatch) {\n      elements.push(<span key={key++} className=\"text-green-400\">{stringMatch[0]}</span>);\n      remaining = remaining.substring(stringMatch[0].length);\n      continue;\n    }\n\n    // Template literals\n    const templateMatch = remaining.match(/^`[^`]*`/);\n    if (templateMatch) {\n      elements.push(<span key={key++} className=\"text-green-400\">{templateMatch[0]}</span>);\n      remaining = remaining.substring(templateMatch[0].length);\n      continue;\n    }\n\n    // Comments\n    const commentMatch = remaining.match(/^(\\/\\/.*|#.*)/);\n    if (commentMatch) {\n      elements.push(<span key={key++} className=\"text-gray-500 italic\">{commentMatch[0]}</span>);\n      remaining = remaining.substring(commentMatch[0].length);\n      continue;\n    }\n\n    // Numbers\n    const numberMatch = remaining.match(/^\\d+(\\.\\d+)?/);\n    if (numberMatch) {\n      elements.push(<span key={key++} className=\"text-orange-400\">{numberMatch[0]}</span>);\n      remaining = remaining.substring(numberMatch[0].length);\n      continue;\n    }\n\n    // Keywords\n    let keywordFound = false;\n    for (const keyword of langKeywords) {\n      if (remaining.startsWith(keyword) && (remaining.length === keyword.length || !/[a-zA-Z0-9_]/.test(remaining[keyword.length]))) {\n        elements.push(<span key={key++} className=\"text-purple-400 font-semibold\">{keyword}</span>);\n        remaining = remaining.substring(keyword.length);\n        keywordFound = true;\n        break;\n      }\n    }\n    if (keywordFound) continue;\n\n    // Function calls\n    const functionMatch = remaining.match(/^[a-zA-Z_][a-zA-Z0-9_]*(?=\\()/);\n    if (functionMatch) {\n      elements.push(<span key={key++} className=\"text-yellow-400\">{functionMatch[0]}</span>);\n      remaining = remaining.substring(functionMatch[0].length);\n      continue;\n    }\n\n    // Operators and punctuation\n    if (/^[+\\-*/%=<>!&|^~?:;,.()\\[\\]{}]/.test(remaining)) {\n      elements.push(<span key={key++} className=\"text-cyan-400\">{remaining[0]}</span>);\n      remaining = remaining.substring(1);\n      continue;\n    }\n\n    // Regular text\n    const textMatch = remaining.match(/^[a-zA-Z_][a-zA-Z0-9_]*/);\n    if (textMatch) {\n      elements.push(<span key={key++} className=\"text-gray-300\">{textMatch[0]}</span>);\n      remaining = remaining.substring(textMatch[0].length);\n      continue;\n    }\n\n    // Whitespace and other characters\n    elements.push(remaining[0]);\n    remaining = remaining.substring(1);\n  }\n\n  return elements;\n};\n\nexport default function MarkdownEditor() {\n  const [markdown, setMarkdown] = useState(mockMarkdownContent);\n  const [showPreview, setShowPreview] = useState(true);\n  const [cursorPosition, setCursorPosition] = useState(0);\n\n  const handleMarkdownChange = useCallback((e: React.ChangeEvent<HTMLTextAreaElement>) => {\n    setMarkdown(e.target.value);\n    setCursorPosition(e.target.selectionStart);\n  }, []);\n\n  const togglePreview = useCallback(() => {\n    setShowPreview(prev => !prev);\n  }, []);\n\n  const handleToolbarAction = useCallback((action: string) => {\n    const textareaElement = document.querySelector('textarea') as HTMLTextAreaElement;\n    if (!textareaElement) return;\n\n    const start = textareaElement.selectionStart;\n    const end = textareaElement.selectionEnd;\n    const selectedText = markdown.substring(start, end);\n    \n    let newText = '';\n    let cursorOffset = 0;\n\n    // Handle different markdown syntax patterns\n    if (action.includes('**text**')) {\n      newText = selectedText ? `**${selectedText}**` : '**text**';\n      cursorOffset = selectedText ? newText.length : 2;\n    } else if (action.includes('*text*')) {\n      newText = selectedText ? `*${selectedText}*` : '*text*';\n      cursorOffset = selectedText ? newText.length : 1;\n    } else if (action.includes('`code`')) {\n      newText = selectedText ? `\\`${selectedText}\\`` : '`code`';\n      cursorOffset = selectedText ? newText.length : 1;\n    } else if (action.includes('[text](url)')) {\n      newText = selectedText ? `[${selectedText}](url)` : '[text](url)';\n      cursorOffset = selectedText ? selectedText.length + 3 : 1;\n    } else if (action.includes('![alt](url)')) {\n      newText = selectedText ? `![${selectedText}](url)` : '![alt](url)';\n      cursorOffset = selectedText ? selectedText.length + 4 : 2;\n    } else if (action.includes('- item')) {\n      const lineStart = markdown.lastIndexOf('\\n', start - 1) + 1;\n      const isNewLine = start === lineStart || start === 0;\n      newText = isNewLine ? '- ' : '\\n- ';\n      cursorOffset = newText.length;\n    } else if (action.includes('1. item')) {\n      const lineStart = markdown.lastIndexOf('\\n', start - 1) + 1;\n      const isNewLine = start === lineStart || start === 0;\n      newText = isNewLine ? '1. ' : '\\n1. ';\n      cursorOffset = newText.length;\n    }\n\n    const newMarkdown = markdown.substring(0, start) + newText + markdown.substring(end);\n    setMarkdown(newMarkdown);\n\n    // Update cursor position after state update\n    setTimeout(() => {\n      textareaElement.focus();\n      const newCursorPos = start + cursorOffset;\n      textareaElement.setSelectionRange(newCursorPos, newCursorPos);\n      setCursorPosition(newCursorPos);\n    }, 0);</parameter>\n  }, [markdown, cursorPosition]);\n\n  return (\n    <div className=\"min-h-screen bg-[#0d1117] text-gray-100\">\n      <div className=\"container mx-auto px-4 py-6\">\n        {/* Header */}\n        <div className=\"mb-6 flex items-center justify-between\">\n          <h1 className=\"text-3xl font-bold bg-gradient-to-r from-blue-400 to-purple-500 bg-clip-text text-transparent\">\n            Premium Markdown Editor\n          </h1>\n          <Button\n            onClick={togglePreview}\n            variant=\"outline\"\n            className=\"bg-[#161b22] border-[#30363d] hover:bg-[#1f2937] text-gray-300\"\n          >\n            {showPreview ? <EyeOff className=\"w-4 h-4 mr-2\" /> : <Eye className=\"w-4 h-4 mr-2\" />}\n            {showPreview ? 'Hide Preview' : 'Show Preview'}\n          </Button>\n        </div>\n\n        {/* Floating Toolbar */}\n        <motion.div\n          initial={{ opacity: 0, y: -20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.5, ease: \"easeOut\" }}\n          className=\"mb-6 bg-[#161b22] border border-[#30363d] rounded-lg p-3 shadow-xl\"\n        >\n          <div className=\"flex flex-wrap gap-2 justify-center\">\n            {toolbarButtons.map((button, index) => (\n              <motion.div\n                key={button.id}\n                initial={{ opacity: 0, scale: 0.8 }}\n                animate={{ opacity: 1, scale: 1 }}\n                transition={{ delay: index * 0.05, duration: 0.3 }}\n                whileHover={{ scale: 1.1, y: -2 }}\n                whileTap={{ scale: 0.95 }}\n              >\n                <Button\n                  onClick={() => handleToolbarAction(button.action)}\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  className=\"bg-[#0d1117] border border-[#30363d] hover:bg-[#1f2937] hover:border-blue-500/50 text-gray-300 hover:text-blue-400 transition-all duration-200 group relative\"\n                  title={button.label}\n                >\n                  <button.icon className=\"w-4 h-4\" />\n                  <motion.span\n                    initial={{ opacity: 0, y: 10 }}\n                    whileHover={{ opacity: 1, y: 0 }}\n                    className=\"absolute -bottom-8 left-1/2 transform -translate-x-1/2 text-xs bg-[#1f2937] px-2 py-1 rounded border border-[#30363d] whitespace-nowrap pointer-events-none opacity-0 group-hover:opacity-100 transition-opacity duration-200\"\n                  >\n                    {button.label}\n                  </motion.span>\n                </Button>\n              </motion.div>\n            ))}\n          </div>\n        </motion.div>\n\n        {/* Editor Layout */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n          {/* Editor Panel */}\n          <motion.div\n            layout\n            className=\"relative\"\n          >\n            <div className=\"bg-[#0d1117] border border-[#30363d] rounded-lg overflow-hidden shadow-2xl\">\n              <div className=\"bg-[#161b22] px-4 py-3 border-b border-[#30363d] flex items-center justify-between\">\n                <span className=\"text-sm font-medium text-gray-400\">Editor</span>\n                <div className=\"flex gap-2\">\n                  <div className=\"w-3 h-3 rounded-full bg-red-500\"></div>\n                  <div className=\"w-3 h-3 rounded-full bg-yellow-500\"></div>\n                  <div className=\"w-3 h-3 rounded-full bg-green-500\"></div>\n                </div>\n              </div>\n              <textarea\n                value={markdown}\n                onChange={handleMarkdownChange}\n                className=\"w-full h-[600px] bg-[#0d1117] text-gray-100 p-6 font-mono text-sm resize-none focus:outline-none\"\n                placeholder=\"Start writing your markdown...\"\n                spellCheck={false}\n              />\n            </div>\n          </motion.div>\n\n          {/* Preview Panel */}\n          <AnimatePresence mode=\"wait\">\n            {showPreview && (\n              <motion.div\n                initial={{ opacity: 0, x: 20 }}\n                animate={{ opacity: 1, x: 0 }}\n                exit={{ opacity: 0, x: 20 }}\n                transition={{ duration: 0.3 }}\n                className=\"relative\"\n              >\n                <div className=\"bg-[#0d1117] border border-[#30363d] rounded-lg overflow-hidden shadow-2xl\">\n                  <div className=\"bg-[#161b22] px-4 py-3 border-b border-[#30363d]\">\n                    <span className=\"text-sm font-medium text-gray-400\">Preview</span>\n                  </div>\n                  <div className=\"p-6 h-[600px] overflow-y-auto\">\n                    <MarkdownPreview content={markdown} />\n                  </div>\n                </div>\n              </motion.div>\n            )}\n          </AnimatePresence>\n        </div>\n\n        {/* Stats Bar */}\n                <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.5, delay: 0.2 }}\n          className=\"mt-6 bg-[#161b22] border border-[#30363d] rounded-lg p-4 shadow-xl\"\n        >\n          <div className=\"flex flex-wrap gap-6 justify-center items-center text-sm\">\n            <div className=\"flex items-center gap-2\">\n              <span className=\"text-gray-400\">Words:</span>\n              <span className=\"font-semibold text-blue-400\">{calculateStats(markdown).words}</span>\n            </div>\n            <div className=\"w-px h-4 bg-[#30363d]\"></div>\n            <div className=\"flex items-center gap-2\">\n              <span className=\"text-gray-400\">Characters:</span>\n              <span className=\"font-semibold text-purple-400\">{calculateStats(markdown).characters}</span>\n            </div>\n            <div className=\"w-px h-4 bg-[#30363d]\"></div>\n            <div className=\"flex items-center gap-2\">\n              <span className=\"text-gray-400\">Reading Time:</span>\n              <span className=\"font-semibold text-green-400\">\n                {calculateStats(markdown).readingTime} min\n              </span>\n            </div>\n          </div>\n        </motion.div>\n      </div>\n    </div>\n  );\n}",
    "error": null,
    "elapsed_time": 94.370614528656,
    "success": true
  }
}