{
  "prompt_id": "algorithm_visualizer",
  "prompt_name": "Algorithm Visualizer",
  "mode": "parallel",
  "run_number": 46,
  "timestamp": "2025-10-13T18:54:39.317670",
  "response_time": 74.3503315448761,
  "total_tokens": null,
  "response_content": "import { useState, useCallback } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Slider } from '@/components/ui/slider';\nimport { Play, Pause, RotateCcw, Zap, BarChart3 } from 'lucide-react';\nimport { motion } from 'framer-motion';\nimport { useEffect, useRef } from 'react';\n\ninterface ArrayElement {\n  value: number;\n  id: string;\n  isComparing?: boolean;\n  isSwapping?: boolean;\n  isSorted?: boolean;\n}\n\ninterface AlgorithmStep {\n  array: ArrayElement[];\n  comparingIndices: number[];\n  swappingIndices: number[];\n  sortedIndices: number[];\n}\n\ntype AlgorithmType = 'bubble' | 'quick' | 'merge' | 'insertion';\n\nconst NEON_COLORS = [\n  '#00ffff',\n  '#ff00ff', \n  '#00ff00',\n  '#ffff00',\n  '#ff0066',\n  '#00ffaa'\n];\n\nconst mockAlgorithms = [\n  { id: 'bubble', name: 'Bubble Sort', complexity: 'O(n\u00b2)' },\n  { id: 'quick', name: 'Quick Sort', complexity: 'O(n log n)' },\n  { id: 'merge', name: 'Merge Sort', complexity: 'O(n log n)' },\n  { id: 'insertion', name: 'Insertion Sort', complexity: 'O(n\u00b2)' }\n];\n\nexport default function AlgorithmVisualizer() {\n  const [array, setArray] = useState<ArrayElement[]>([]);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [speed, setSpeed] = useState([50]);\n  const [arraySize, setArraySize] = useState([20]);\n  const [selectedAlgorithm, setSelectedAlgorithm] = useState<AlgorithmType>('bubble');\n  const [currentStep, setCurrentStep] = useState(0);\n  const [steps, setSteps] = useState<AlgorithmStep[]>([]);\n  const [comparisons, setComparisons] = useState(0);\n  const [swaps, setSwaps] = useState(0);\n\n  const generateRandomArray = useCallback(() => {\n    const newArray: ArrayElement[] = Array.from({ length: arraySize[0] }, (_, index) => ({\n      value: Math.floor(Math.random() * 100) + 5,\n      id: `element-${index}-${Date.now()}`,\n      isComparing: false,\n      isSwapping: false,\n      isSorted: false\n    }));\n    \n    setArray(newArray);\n    setSteps([]);\n    setCurrentStep(0);\n    setComparisons(0);\n    setSwaps(0);\n    setIsPlaying(false);\n  }, [arraySize]);\n\n  const resetVisualization = useCallback(() => {\n    setIsPlaying(false);\n    setCurrentStep(0);\n    setSteps([]);\n    setComparisons(0);\n    setSwaps(0);\n    generateRandomArray();\n  }, [generateRandomArray]);\n\n  const handlePlayPause = useCallback(() => {\n\n    if (!steps.length) {\n      // Generate steps if not already generated\n      generateSteps(selectedAlgorithm);\n      return;\n    }\n\n    setIsPlaying(!isPlaying);\n  }, [isPlaying, steps, selectedAlgorithm]);\n\n  // Effect to handle step-by-step animation\n  useEffect(() => {\n    if (!isPlaying || currentStep >= steps.length) {\n      if (currentStep >= steps.length && steps.length > 0) {\n        setIsPlaying(false);\n      }\n      return;\n    }\n\n    const delay = 1000 - speed[0] * 9.5; // Convert speed slider to delay (50ms - 1000ms)\n    const timer = setTimeout(() => {\n      const step = steps[currentStep];\n      setArray(step.array);\n      setCurrentStep(prev => prev + 1);\n      \n      // Update statistics\n      if (step.comparingIndices.length > 0) {\n        setComparisons(prev => prev + 1);\n      }\n      if (step.swappingIndices.length > 0) {\n        setSwaps(prev => prev + 1);\n      }\n    }, delay);\n\n    return () => clearTimeout(timer);\n  }, [isPlaying, currentStep, steps, speed]);\n\n  const generateSteps = useCallback((algorithm: AlgorithmType) => {\n</parameter> currentStep, steps, speed]);\n\n  const generateSteps = useCallback((algorithm: AlgorithmType) => {\n    const allSteps: AlgorithmStep[] = [];\n    let comparisonCount = 0;\n    let swapCount = 0;\n    const arr = [...array];\n\n    const recordStep = (comparingIndices: number[] = [], swappingIndices: number[] = [], sortedIndices: number[] = []) => {\n      allSteps.push({\n        array: arr.map((el, idx) => ({\n          ...el,\n          isComparing: comparingIndices.includes(idx),\n          isSwapping: swappingIndices.includes(idx),\n          isSorted: sortedIndices.includes(idx)\n        })),\n        comparingIndices,\n        swappingIndices,\n        sortedIndices\n      });\n    };\n\n    const swap = (i: number, j: number, sortedIndices: number[] = []) => {\n      recordStep([i, j], [], sortedIndices);\n      comparisonCount++;\n      [arr[i], arr[j]] = [arr[j], arr[i]];\n      recordStep([], [i, j], sortedIndices);\n      swapCount++;\n    };\n\n    const compare = (i: number, j: number, sortedIndices: number[] = []) => {\n      recordStep([i, j], [], sortedIndices);\n      comparisonCount++;\n    };\n\n    if (algorithm === 'bubble') {\n      const sortedIndices: number[] = [];\n      for (let i = 0; i < arr.length; i++) {\n        for (let j = 0; j < arr.length - i - 1; j++) {\n          compare(j, j + 1, sortedIndices);\n          if (arr[j].value > arr[j + 1].value) {\n            swap(j, j + 1, sortedIndices);\n          }\n        }\n        sortedIndices.push(arr.length - i - 1);\n        recordStep([], [], sortedIndices);\n      }\n    } else if (algorithm === 'quick') {\n      const sortedIndices: number[] = [];\n      \n      const partition = (low: number, high: number): number => {\n        const pivot = arr[high].value;\n        let i = low - 1;\n        \n        for (let j = low; j < high; j++) {\n          compare(j, high, sortedIndices);\n          if (arr[j].value < pivot) {\n            i++;\n            if (i !== j) {\n              swap(i, j, sortedIndices);\n            }\n          }\n        }\n        if (i + 1 !== high) {\n          swap(i + 1, high, sortedIndices);\n        }\n        sortedIndices.push(i + 1);\n        return i + 1;\n      };\n\n      const quickSortHelper = (low: number, high: number) => {\n        if (low < high) {\n          const pi = partition(low, high);\n          quickSortHelper(low, pi - 1);\n          quickSortHelper(pi + 1, high);\n        } else if (low === high) {\n          sortedIndices.push(low);\n        }\n      };\n\n      quickSortHelper(0, arr.length - 1);\n      recordStep([], [], sortedIndices);\n    } else if (algorithm === 'merge') {\n      const sortedIndices: number[] = [];\n      \n      const merge = (left: number, mid: number, right: number) => {\n        const leftArr = arr.slice(left, mid + 1);\n        const rightArr = arr.slice(mid + 1, right + 1);\n        let i = 0, j = 0, k = left;\n\n        while (i < leftArr.length && j < rightArr.length) {\n          compare(left + i, mid + 1 + j, sortedIndices);\n          if (leftArr[i].value <= rightArr[j].value) {\n            arr[k] = leftArr[i];\n            i++;\n          } else {\n            arr[k] = rightArr[j];\n            j++;\n          }\n          recordStep([], [k], sortedIndices);\n          k++;\n        }\n\n        while (i < leftArr.length) {\n          arr[k] = leftArr[i];\n          recordStep([], [k], sortedIndices);\n          i++;\n          k++;\n        }\n\n        while (j < rightArr.length) {\n          arr[k] = rightArr[j];\n          recordStep([], [k], sortedIndices);\n          j++;\n          k++;\n        }\n      };\n\n      const mergeSortHelper = (left: number, right: number) => {\n        if (left < right) {\n          const mid = Math.floor((left + right) / 2);\n          mergeSortHelper(left, mid);\n          mergeSortHelper(mid + 1, right);\n          merge(left, mid, right);\n        }\n      };\n\n      mergeSortHelper(0, arr.length - 1);\n      for (let i = 0; i < arr.length; i++) {\n        sortedIndices.push(i);\n      }\n      recordStep([], [], sortedIndices);\n    } else if (algorithm === 'insertion') {\n      const sortedIndices: number[] = [0];\n      recordStep([], [], sortedIndices);\n      \n      for (let i = 1; i < arr.length; i++) {\n        const key = arr[i];\n        let j = i - 1;\n        \n        while (j >= 0) {\n          compare(j, i, sortedIndices);\n          if (arr[j].value > key.value) {\n            arr[j + 1] = arr[j];\n            recordStep([], [j + 1], sortedIndices);\n            j--;\n          } else {\n            break;\n          }\n        }\n        arr[j + 1] = key;\n        recordStep([], [j + 1], sortedIndices);\n        sortedIndices.push(i);\n        recordStep([], [], sortedIndices);\n      }\n    }\n\n    setSteps(allSteps);\n    setComparisons(comparisonCount);\n    setSwaps(swapCount);\n    setCurrentStep(0);\n  }, [array]);\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-gray-900 via-purple-900 to-gray-900 p-8\">\n      <div className=\"max-w-7xl mx-auto space-y-8\">\n        <motion.div\n          initial={{ opacity: 0, y: -20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.8 }}\n          className=\"text-center space-y-6\"\n        >\n          <motion.h1\n            className=\"text-6xl font-bold bg-gradient-to-r from-cyan-400 via-purple-400 to-pink-400 bg-clip-text text-transparent\"\n            animate={{\n              textShadow: [\n                '0 0 20px rgba(0, 255, 255, 0.5)',\n                '0 0 40px rgba(255, 0, 255, 0.5)',\n                '0 0 20px rgba(0, 255, 255, 0.5)'\n              ]\n            }}\n            transition={{ duration: 2, repeat: Infinity }}\n          >\n            Algorithm Visualizer\n          </motion.h1>\n\n          <div className=\"flex flex-wrap justify-center gap-4\">\n            {mockAlgorithms.map((algo) => (\n              <motion.div\n                key={algo.id}\n                whileHover={{ scale: 1.05 }}\n                whileTap={{ scale: 0.95 }}\n              >\n                <Button\n                  onClick={() => setSelectedAlgorithm(algo.id as AlgorithmType)}\n                  variant={selectedAlgorithm === algo.id ? 'default' : 'outline'}\n                  className={`relative overflow-hidden transition-all duration-300 ${\n                    selectedAlgorithm === algo.id\n                      ? 'bg-gradient-to-r from-cyan-500 to-purple-500 text-white border-0 shadow-lg shadow-cyan-500/50'\n                      : 'bg-gray-800/50 border-cyan-500/30 text-cyan-300 hover:bg-gray-700/50 hover:border-cyan-400'\n                  }`}\n                >\n                  <span className=\"relative z-10 flex flex-col items-start\">\n                    <span className=\"font-semibold\">{algo.name}</span>\n                    <span className=\"text-xs opacity-75\">{algo.complexity}</span>\n                  </span>\n                  {selectedAlgorithm === algo.id && (\n                    <motion.div\n                      layoutId=\"algorithmSelector\"\n                      className=\"absolute inset-0 bg-gradient-to-r from-cyan-500 to-purple-500\"\n                      transition={{ type: 'spring', bounce: 0.2, duration: 0.6 }}\n                    />\n                  )}\n                </Button>\n              </motion.div>\n            ))}\n          </div>\n        </motion.div></parameter>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ delay: 0.1 }}\n            className=\"relative bg-gray-900/50 backdrop-blur-sm border border-cyan-500/30 rounded-lg p-6 overflow-hidden group hover:border-cyan-500/60 transition-all\"\n          >\n            <div className=\"absolute inset-0 bg-gradient-to-br from-cyan-500/10 to-transparent opacity-0 group-hover:opacity-100 transition-opacity\" />\n            <div className=\"relative z-10\">\n              <div className=\"flex items-center gap-2 mb-2\">\n                <BarChart3 className=\"w-5 h-5 text-cyan-400\" />\n                <span className=\"text-cyan-400 text-sm font-medium\">Comparisons</span>\n              </div>\n              <motion.div\n                key={comparisons}\n                initial={{ scale: 1.2, color: '#00ffff' }}\n                animate={{ scale: 1, color: '#ffffff' }}\n                className=\"text-3xl font-bold text-white\"\n              >\n                {comparisons}\n              </motion.div>\n            </div>\n            <div className=\"absolute -bottom-2 -right-2 w-24 h-24 bg-cyan-500/20 rounded-full blur-2xl\" />\n          </motion.div>\n\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ delay: 0.2 }}\n            className=\"relative bg-gray-900/50 backdrop-blur-sm border border-purple-500/30 rounded-lg p-6 overflow-hidden group hover:border-purple-500/60 transition-all\"\n          >\n            <div className=\"absolute inset-0 bg-gradient-to-br from-purple-500/10 to-transparent opacity-0 group-hover:opacity-100 transition-opacity\" />\n            <div className=\"relative z-10\">\n              <div className=\"flex items-center gap-2 mb-2\">\n                <Zap className=\"w-5 h-5 text-purple-400\" />\n                <span className=\"text-purple-400 text-sm font-medium\">Swaps</span>\n              </div>\n              <motion.div\n                key={swaps}\n                initial={{ scale: 1.2, color: '#ff00ff' }}\n                animate={{ scale: 1, color: '#ffffff' }}\n                className=\"text-3xl font-bold text-white\"\n              >\n                {swaps}\n              </motion.div>\n            </div>\n            <div className=\"absolute -bottom-2 -right-2 w-24 h-24 bg-purple-500/20 rounded-full blur-2xl\" />\n          </motion.div>\n\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ delay: 0.3 }}\n            className=\"relative bg-gray-900/50 backdrop-blur-sm border border-green-500/30 rounded-lg p-6 overflow-hidden group hover:border-green-500/60 transition-all\"\n          >\n            <div className=\"absolute inset-0 bg-gradient-to-br from-green-500/10 to-transparent opacity-0 group-hover:opacity-100 transition-opacity\" />\n            <div className=\"relative z-10\">\n              <div className=\"flex items-center gap-2 mb-2\">\n                <BarChart3 className=\"w-5 h-5 text-green-400\" />\n                <span className=\"text-green-400 text-sm font-medium\">Algorithm</span>\n              </div>\n              <div className=\"text-xl font-bold text-white\">\n                {mockAlgorithms.find(a => a.id === selectedAlgorithm)?.name || 'None'}\n              </div>\n            </div>\n            <div className=\"absolute -bottom-2 -right-2 w-24 h-24 bg-green-500/20 rounded-full blur-2xl\" />\n          </motion.div>\n\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ delay: 0.4 }}\n            className=\"relative bg-gray-900/50 backdrop-blur-sm border border-yellow-500/30 rounded-lg p-6 overflow-hidden group hover:border-yellow-500/60 transition-all\"\n          >\n            <div className=\"absolute inset-0 bg-gradient-to-br from-yellow-500/10 to-transparent opacity-0 group-hover:opacity-100 transition-opacity\" />\n            <div className=\"relative z-10\">\n              <div className=\"flex items-center gap-2 mb-2\">\n                <Zap className=\"w-5 h-5 text-yellow-400\" />\n                <span className=\"text-yellow-400 text-sm font-medium\">Complexity</span>\n              </div>\n              <div className=\"text-2xl font-bold text-white font-mono\">\n                {mockAlgorithms.find(a => a.id === selectedAlgorithm)?.complexity || 'N/A'}\n              </div>\n            </div>\n            <div className=\"absolute -bottom-2 -right-2 w-24 h-24 bg-yellow-500/20 rounded-full blur-2xl\" />\n          </motion.div>\n        </div>\n\n        <div className=\"relative\">\n          <div className=\"bg-gray-900/50 backdrop-blur-sm rounded-2xl border border-purple-500/30 p-8 min-h-[500px] relative overflow-hidden\">\n            {/* Animated background grid */}\n            <div className=\"absolute inset-0 opacity-10\">\n              <div className=\"absolute inset-0\" style={{\n                backgroundImage: 'linear-gradient(#00ffff 1px, transparent 1px), linear-gradient(90deg, #00ffff 1px, transparent 1px)',\n                backgroundSize: '50px 50px'\n              }} />\n            </div>\n\n            {/* Visualization area */}\n            <div className=\"relative h-[400px] flex items-end justify-center gap-1 px-4\">\n              {array.length === 0 ? (\n                <div className=\"absolute inset-0 flex items-center justify-center\">\n                  <motion.div\n                    initial={{ opacity: 0, scale: 0.8 }}\n                    animate={{ opacity: 1, scale: 1 }}\n                    className=\"text-center space-y-4\"\n                  >\n                    <BarChart3 className=\"w-16 h-16 mx-auto text-cyan-400\" />\n                    <p className=\"text-cyan-400 text-lg font-semibold\">\n                      Generate an array to start visualizing\n                    </p>\n                  </motion.div>\n                </div>\n              ) : (\n                array.map((element, index) => {\n                  const maxValue = Math.max(...array.map(el => el.value));\n                  const heightPercentage = (element.value / maxValue) * 100;\n                  const isComparing = element.isComparing;\n                  const isSwapping = element.isSwapping;\n                  const isSorted = element.isSorted;\n\n                  let barColor = NEON_COLORS[index % NEON_COLORS.length];\n                  let glowColor = barColor;\n\n                  if (isSorted) {\n                    barColor = '#00ff00';\n                    glowColor = '#00ff00';\n                  } else if (isSwapping) {\n                    barColor = '#ff0066';\n                    glowColor = '#ff0066';\n                  } else if (isComparing) {\n                    barColor = '#ffff00';\n                    glowColor = '#ffff00';\n                  }\n\n                  return (\n                    <motion.div\n                      key={element.id}\n                      className=\"relative flex-1 min-w-[4px] max-w-[60px]\"\n                      initial={{ height: 0, opacity: 0 }}\n                      animate={{\n                        height: `${heightPercentage}%`,\n                        opacity: 1,\n                        scale: isSwapping ? 1.1 : isComparing ? 1.05 : 1,\n                      }}\n                      transition={{\n                        height: { duration: 0.3, ease: \"easeOut\" },\n                        scale: { duration: 0.2 },\n                        opacity: { duration: 0.3 }\n                      }}\n                      style={{\n                        backgroundColor: barColor,\n                        boxShadow: `0 0 ${isSwapping ? '30px' : isComparing ? '20px' : '10px'} ${glowColor}`,\n                      }}\n                    >\n                      {/* Trail effect for swapping */}\n                      {isSwapping && (\n                        <motion.div\n                          className=\"absolute inset-0\"\n                          initial={{ opacity: 0.8, scale: 1 }}\n                          animate={{ opacity: 0, scale: 1.5 }}\n                          transition={{ duration: 0.5, repeat: Infinity }}\n                          style={{\n                            backgroundColor: barColor,\n                            filter: 'blur(8px)',\n                          }}\n                        />\n                      )}\n\n                      {/* Pulse effect for comparing */}\n                      {isComparing && (\n                        <motion.div\n                          className=\"absolute inset-0\"\n                          animate={{ opacity: [0.5, 0, 0.5] }}\n                          transition={{ duration: 0.8, repeat: Infinity }}\n                          style={{\n                            backgroundColor: glowColor,\n                            filter: 'blur(6px)',\n                          }}\n                        />\n                      )}\n\n                      {/* Value label */}\n                      {array.length <= 30 && (\n                        <motion.div\n                          className=\"absolute -bottom-6 left-1/2 transform -translate-x-1/2 text-xs font-mono text-cyan-300\"\n                          initial={{ opacity: 0 }}\n                          animate={{ opacity: 0.7 }}\n                        >\n                          {element.value}\n                        </motion.div>\n                      )}\n                    </motion.div>\n                  );\n                })\n              )}\n            </div>\n          </div>\n        </div>\n\n                <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.6, delay: 0.4 }}\n          className=\"bg-gray-800/50 backdrop-blur-xl rounded-2xl p-6 border border-cyan-500/30 shadow-2xl\"\n        >\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            {/* Play/Pause and Reset Controls */}\n            <div className=\"space-y-4\">\n              <h3 className=\"text-cyan-400 font-semibold text-sm uppercase tracking-wider mb-3\">\n                Controls\n              </h3>\n              <div className=\"flex gap-3\">\n                <Button\n                  onClick={handlePlayPause}\n                  disabled={steps.length === 0}\n                  className=\"flex-1 bg-gradient-to-r from-cyan-500 to-blue-500 hover:from-cyan-400 hover:to-blue-400 text-white font-bold py-6 rounded-xl shadow-lg hover:shadow-cyan-500/50 transition-all duration-300 disabled:opacity-50 disabled:cursor-not-allowed\"\n                >\n                  {isPlaying ? (\n                    <>\n                      <Pause className=\"mr-2 h-5 w-5\" />\n                      Pause\n                    </>\n                  ) : (\n                    <>\n                      <Play className=\"mr-2 h-5 w-5\" />\n                      Play\n                    </>\n                  )}\n                </Button>\n                <Button\n                  onClick={resetVisualization}\n                  className=\"bg-gradient-to-r from-purple-500 to-pink-500 hover:from-purple-400 hover:to-pink-400 text-white font-bold py-6 px-6 rounded-xl shadow-lg hover:shadow-purple-500/50 transition-all duration-300\"\n                >\n                  <RotateCcw className=\"h-5 w-5\" />\n                </Button>\n              </div>\n            </div>\n\n            {/* Speed Control */}\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center justify-between\">\n                <h3 className=\"text-cyan-400 font-semibold text-sm uppercase tracking-wider\">\n                  <Zap className=\"inline h-4 w-4 mr-1\" />\n                  Speed\n                </h3>\n                <span className=\"text-cyan-300 font-mono text-sm\">\n                  {speed[0]}ms\n                </span>\n              </div>\n              <Slider\n                value={speed}\n                onValueChange={setSpeed}\n                min={10}\n                max={200}\n                step={10}\n                className=\"cursor-pointer\"\n              />\n              <div className=\"flex justify-between text-xs text-gray-400\">\n                <span>Fast</span>\n                <span>Slow</span>\n              </div>\n            </div>\n\n            {/* Array Size Control */}\n            <div className=\"space-y-4 md:col-span-2\">\n              <div className=\"flex items-center justify-between\">\n                <h3 className=\"text-cyan-400 font-semibold text-sm uppercase tracking-wider\">\n                  <BarChart3 className=\"inline h-4 w-4 mr-1\" />\n                  Array Size\n                </h3>\n                <span className=\"text-cyan-300 font-mono text-sm\">\n                  {arraySize[0]} elements\n                </span>\n              </div>\n              <Slider\n                value={arraySize}\n                onValueChange={setArraySize}\n                min={5}\n                max={100}\n                step={5}\n                disabled={isPlaying}\n                className=\"cursor-pointer\"\n              />\n              <div className=\"flex justify-between text-xs text-gray-400\">\n                <span>5</span>\n                <span>100</span>\n              </div>\n            </div>\n          </div>\n        </motion.div>\n\n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n          {mockAlgorithms.map((algo) => (\n            <motion.div\n              key={algo.id}\n              whileHover={{ scale: 1.05, y: -5 }}\n              whileTap={{ scale: 0.95 }}\n              onClick={() => setSelectedAlgorithm(algo.id as AlgorithmType)}\n              className={`relative cursor-pointer rounded-xl p-6 backdrop-blur-sm transition-all duration-300 ${\n                selectedAlgorithm === algo.id\n                  ? 'bg-cyan-500/20 border-2 border-cyan-400 shadow-[0_0_30px_rgba(34,211,238,0.6)]'\n                  : 'bg-white/5 border-2 border-white/10 hover:border-purple-400/50 hover:shadow-[0_0_20px_rgba(168,85,247,0.4)]'\n              }`}\n            >\n              {selectedAlgorithm === algo.id && (\n                <motion.div\n                  layoutId=\"selectedGlow\"\n                  className=\"absolute inset-0 bg-gradient-to-br from-cyan-500/20 to-purple-500/20 rounded-xl\"\n                  transition={{ type: 'spring', bounce: 0.2, duration: 0.6 }}\n                />\n              )}\n              <div className=\"relative z-10 space-y-3\">\n                <div className=\"flex items-center justify-between\">\n                  <BarChart3 \n                    className={`w-8 h-8 ${\n                      selectedAlgorithm === algo.id ? 'text-cyan-400' : 'text-purple-400'\n                    }`} \n                  />\n                  {selectedAlgorithm === algo.id && (\n                    <motion.div\n                      initial={{ scale: 0 }}\n                      animate={{ scale: 1 }}\n                      className=\"w-3 h-3 rounded-full bg-cyan-400 shadow-[0_0_10px_rgba(34,211,238,0.8)]\"\n                    />\n                  )}\n                </div>\n                <h3 className={`text-lg font-bold ${\n                  selectedAlgorithm === algo.id ? 'text-cyan-300' : 'text-white'\n                }`}>\n                  {algo.name}\n                </h3>\n                <p className={`text-sm font-mono ${\n                  selectedAlgorithm === algo.id ? 'text-cyan-400' : 'text-purple-300'\n                }`}>\n                  {algo.complexity}\n                </p>\n              </div>\n            </motion.div>\n          ))}\n        </div>\n\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.6, delay: 0.4 }}\n          className=\"bg-gray-900/50 backdrop-blur-xl border border-cyan-500/30 rounded-2xl p-6 shadow-2xl\"\n        >\n          <div className=\"flex items-center gap-3 mb-4\">\n            <BarChart3 className=\"w-5 h-5 text-cyan-400\" />\n            <h3 className=\"text-lg font-semibold text-white\">Legend</h3>\n          </div>\n          \n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n            <div className=\"flex items-center gap-3\">\n              <div className=\"w-8 h-8 rounded-lg bg-cyan-500/20 border-2 border-cyan-400 shadow-[0_0_15px_rgba(0,255,255,0.5)]\" />\n              <div>\n                <div className=\"text-sm font-medium text-white\">Comparing</div>\n                <div className=\"text-xs text-gray-400\">Active comparison</div>\n              </div>\n            </div>\n            \n            <div className=\"flex items-center gap-3\">\n              <div className=\"w-8 h-8 rounded-lg bg-purple-500/20 border-2 border-purple-400 shadow-[0_0_15px_rgba(168,85,247,0.5)]\" />\n              <div>\n                <div className=\"text-sm font-medium text-white\">Swapping</div>\n                <div className=\"text-xs text-gray-400\">Elements swapping</div>\n              </div>\n            </div>\n            \n            <div className=\"flex items-center gap-3\">\n              <div className=\"w-8 h-8 rounded-lg bg-green-500/20 border-2 border-green-400 shadow-[0_0_15px_rgba(34,197,94,0.5)]\" />\n              <div>\n                <div className=\"text-sm font-medium text-white\">Sorted</div>\n                <div className=\"text-xs text-gray-400\">In final position</div>\n              </div>\n            </div>\n            \n            <div className=\"flex items-center gap-3\">\n              <div className=\"w-8 h-8 rounded-lg bg-gray-700/50 border-2 border-gray-500\" />\n              <div>\n                <div className=\"text-sm font-medium text-white\">Unsorted</div>\n                <div className=\"text-xs text-gray-400\">Awaiting sort</div>\n              </div>\n            </div>\n          </div>\n        </motion.div>\n      </div>\n    </div>\n  );\n}",
  "error": null,
  "overall_score": 59,
  "code_quality_score": 18,
  "architecture_score": 15,
  "performance_score": 14,
  "accessibility_score": 12,
  "metadata": {
    "document_id": "eval_room_68829a4e88ff",
    "prompt_category": "creative",
    "prompt_complexity": 9.0
  },
  "raw_response": {
    "document_id": "eval_room_68829a4e88ff",
    "mode": "parallel",
    "prompt": "Build a captivating algorithm visualizer with neon colored bars, smooth height transitions, glowing comparison indicators, trail effects during swaps, and a futuristic dashboard design with animated controls",
    "content": "import { useState, useCallback } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Slider } from '@/components/ui/slider';\nimport { Play, Pause, RotateCcw, Zap, BarChart3 } from 'lucide-react';\nimport { motion } from 'framer-motion';\nimport { useEffect, useRef } from 'react';\n\ninterface ArrayElement {\n  value: number;\n  id: string;\n  isComparing?: boolean;\n  isSwapping?: boolean;\n  isSorted?: boolean;\n}\n\ninterface AlgorithmStep {\n  array: ArrayElement[];\n  comparingIndices: number[];\n  swappingIndices: number[];\n  sortedIndices: number[];\n}\n\ntype AlgorithmType = 'bubble' | 'quick' | 'merge' | 'insertion';\n\nconst NEON_COLORS = [\n  '#00ffff',\n  '#ff00ff', \n  '#00ff00',\n  '#ffff00',\n  '#ff0066',\n  '#00ffaa'\n];\n\nconst mockAlgorithms = [\n  { id: 'bubble', name: 'Bubble Sort', complexity: 'O(n\u00b2)' },\n  { id: 'quick', name: 'Quick Sort', complexity: 'O(n log n)' },\n  { id: 'merge', name: 'Merge Sort', complexity: 'O(n log n)' },\n  { id: 'insertion', name: 'Insertion Sort', complexity: 'O(n\u00b2)' }\n];\n\nexport default function AlgorithmVisualizer() {\n  const [array, setArray] = useState<ArrayElement[]>([]);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [speed, setSpeed] = useState([50]);\n  const [arraySize, setArraySize] = useState([20]);\n  const [selectedAlgorithm, setSelectedAlgorithm] = useState<AlgorithmType>('bubble');\n  const [currentStep, setCurrentStep] = useState(0);\n  const [steps, setSteps] = useState<AlgorithmStep[]>([]);\n  const [comparisons, setComparisons] = useState(0);\n  const [swaps, setSwaps] = useState(0);\n\n  const generateRandomArray = useCallback(() => {\n    const newArray: ArrayElement[] = Array.from({ length: arraySize[0] }, (_, index) => ({\n      value: Math.floor(Math.random() * 100) + 5,\n      id: `element-${index}-${Date.now()}`,\n      isComparing: false,\n      isSwapping: false,\n      isSorted: false\n    }));\n    \n    setArray(newArray);\n    setSteps([]);\n    setCurrentStep(0);\n    setComparisons(0);\n    setSwaps(0);\n    setIsPlaying(false);\n  }, [arraySize]);\n\n  const resetVisualization = useCallback(() => {\n    setIsPlaying(false);\n    setCurrentStep(0);\n    setSteps([]);\n    setComparisons(0);\n    setSwaps(0);\n    generateRandomArray();\n  }, [generateRandomArray]);\n\n  const handlePlayPause = useCallback(() => {\n\n    if (!steps.length) {\n      // Generate steps if not already generated\n      generateSteps(selectedAlgorithm);\n      return;\n    }\n\n    setIsPlaying(!isPlaying);\n  }, [isPlaying, steps, selectedAlgorithm]);\n\n  // Effect to handle step-by-step animation\n  useEffect(() => {\n    if (!isPlaying || currentStep >= steps.length) {\n      if (currentStep >= steps.length && steps.length > 0) {\n        setIsPlaying(false);\n      }\n      return;\n    }\n\n    const delay = 1000 - speed[0] * 9.5; // Convert speed slider to delay (50ms - 1000ms)\n    const timer = setTimeout(() => {\n      const step = steps[currentStep];\n      setArray(step.array);\n      setCurrentStep(prev => prev + 1);\n      \n      // Update statistics\n      if (step.comparingIndices.length > 0) {\n        setComparisons(prev => prev + 1);\n      }\n      if (step.swappingIndices.length > 0) {\n        setSwaps(prev => prev + 1);\n      }\n    }, delay);\n\n    return () => clearTimeout(timer);\n  }, [isPlaying, currentStep, steps, speed]);\n\n  const generateSteps = useCallback((algorithm: AlgorithmType) => {\n</parameter> currentStep, steps, speed]);\n\n  const generateSteps = useCallback((algorithm: AlgorithmType) => {\n    const allSteps: AlgorithmStep[] = [];\n    let comparisonCount = 0;\n    let swapCount = 0;\n    const arr = [...array];\n\n    const recordStep = (comparingIndices: number[] = [], swappingIndices: number[] = [], sortedIndices: number[] = []) => {\n      allSteps.push({\n        array: arr.map((el, idx) => ({\n          ...el,\n          isComparing: comparingIndices.includes(idx),\n          isSwapping: swappingIndices.includes(idx),\n          isSorted: sortedIndices.includes(idx)\n        })),\n        comparingIndices,\n        swappingIndices,\n        sortedIndices\n      });\n    };\n\n    const swap = (i: number, j: number, sortedIndices: number[] = []) => {\n      recordStep([i, j], [], sortedIndices);\n      comparisonCount++;\n      [arr[i], arr[j]] = [arr[j], arr[i]];\n      recordStep([], [i, j], sortedIndices);\n      swapCount++;\n    };\n\n    const compare = (i: number, j: number, sortedIndices: number[] = []) => {\n      recordStep([i, j], [], sortedIndices);\n      comparisonCount++;\n    };\n\n    if (algorithm === 'bubble') {\n      const sortedIndices: number[] = [];\n      for (let i = 0; i < arr.length; i++) {\n        for (let j = 0; j < arr.length - i - 1; j++) {\n          compare(j, j + 1, sortedIndices);\n          if (arr[j].value > arr[j + 1].value) {\n            swap(j, j + 1, sortedIndices);\n          }\n        }\n        sortedIndices.push(arr.length - i - 1);\n        recordStep([], [], sortedIndices);\n      }\n    } else if (algorithm === 'quick') {\n      const sortedIndices: number[] = [];\n      \n      const partition = (low: number, high: number): number => {\n        const pivot = arr[high].value;\n        let i = low - 1;\n        \n        for (let j = low; j < high; j++) {\n          compare(j, high, sortedIndices);\n          if (arr[j].value < pivot) {\n            i++;\n            if (i !== j) {\n              swap(i, j, sortedIndices);\n            }\n          }\n        }\n        if (i + 1 !== high) {\n          swap(i + 1, high, sortedIndices);\n        }\n        sortedIndices.push(i + 1);\n        return i + 1;\n      };\n\n      const quickSortHelper = (low: number, high: number) => {\n        if (low < high) {\n          const pi = partition(low, high);\n          quickSortHelper(low, pi - 1);\n          quickSortHelper(pi + 1, high);\n        } else if (low === high) {\n          sortedIndices.push(low);\n        }\n      };\n\n      quickSortHelper(0, arr.length - 1);\n      recordStep([], [], sortedIndices);\n    } else if (algorithm === 'merge') {\n      const sortedIndices: number[] = [];\n      \n      const merge = (left: number, mid: number, right: number) => {\n        const leftArr = arr.slice(left, mid + 1);\n        const rightArr = arr.slice(mid + 1, right + 1);\n        let i = 0, j = 0, k = left;\n\n        while (i < leftArr.length && j < rightArr.length) {\n          compare(left + i, mid + 1 + j, sortedIndices);\n          if (leftArr[i].value <= rightArr[j].value) {\n            arr[k] = leftArr[i];\n            i++;\n          } else {\n            arr[k] = rightArr[j];\n            j++;\n          }\n          recordStep([], [k], sortedIndices);\n          k++;\n        }\n\n        while (i < leftArr.length) {\n          arr[k] = leftArr[i];\n          recordStep([], [k], sortedIndices);\n          i++;\n          k++;\n        }\n\n        while (j < rightArr.length) {\n          arr[k] = rightArr[j];\n          recordStep([], [k], sortedIndices);\n          j++;\n          k++;\n        }\n      };\n\n      const mergeSortHelper = (left: number, right: number) => {\n        if (left < right) {\n          const mid = Math.floor((left + right) / 2);\n          mergeSortHelper(left, mid);\n          mergeSortHelper(mid + 1, right);\n          merge(left, mid, right);\n        }\n      };\n\n      mergeSortHelper(0, arr.length - 1);\n      for (let i = 0; i < arr.length; i++) {\n        sortedIndices.push(i);\n      }\n      recordStep([], [], sortedIndices);\n    } else if (algorithm === 'insertion') {\n      const sortedIndices: number[] = [0];\n      recordStep([], [], sortedIndices);\n      \n      for (let i = 1; i < arr.length; i++) {\n        const key = arr[i];\n        let j = i - 1;\n        \n        while (j >= 0) {\n          compare(j, i, sortedIndices);\n          if (arr[j].value > key.value) {\n            arr[j + 1] = arr[j];\n            recordStep([], [j + 1], sortedIndices);\n            j--;\n          } else {\n            break;\n          }\n        }\n        arr[j + 1] = key;\n        recordStep([], [j + 1], sortedIndices);\n        sortedIndices.push(i);\n        recordStep([], [], sortedIndices);\n      }\n    }\n\n    setSteps(allSteps);\n    setComparisons(comparisonCount);\n    setSwaps(swapCount);\n    setCurrentStep(0);\n  }, [array]);\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-gray-900 via-purple-900 to-gray-900 p-8\">\n      <div className=\"max-w-7xl mx-auto space-y-8\">\n        <motion.div\n          initial={{ opacity: 0, y: -20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.8 }}\n          className=\"text-center space-y-6\"\n        >\n          <motion.h1\n            className=\"text-6xl font-bold bg-gradient-to-r from-cyan-400 via-purple-400 to-pink-400 bg-clip-text text-transparent\"\n            animate={{\n              textShadow: [\n                '0 0 20px rgba(0, 255, 255, 0.5)',\n                '0 0 40px rgba(255, 0, 255, 0.5)',\n                '0 0 20px rgba(0, 255, 255, 0.5)'\n              ]\n            }}\n            transition={{ duration: 2, repeat: Infinity }}\n          >\n            Algorithm Visualizer\n          </motion.h1>\n\n          <div className=\"flex flex-wrap justify-center gap-4\">\n            {mockAlgorithms.map((algo) => (\n              <motion.div\n                key={algo.id}\n                whileHover={{ scale: 1.05 }}\n                whileTap={{ scale: 0.95 }}\n              >\n                <Button\n                  onClick={() => setSelectedAlgorithm(algo.id as AlgorithmType)}\n                  variant={selectedAlgorithm === algo.id ? 'default' : 'outline'}\n                  className={`relative overflow-hidden transition-all duration-300 ${\n                    selectedAlgorithm === algo.id\n                      ? 'bg-gradient-to-r from-cyan-500 to-purple-500 text-white border-0 shadow-lg shadow-cyan-500/50'\n                      : 'bg-gray-800/50 border-cyan-500/30 text-cyan-300 hover:bg-gray-700/50 hover:border-cyan-400'\n                  }`}\n                >\n                  <span className=\"relative z-10 flex flex-col items-start\">\n                    <span className=\"font-semibold\">{algo.name}</span>\n                    <span className=\"text-xs opacity-75\">{algo.complexity}</span>\n                  </span>\n                  {selectedAlgorithm === algo.id && (\n                    <motion.div\n                      layoutId=\"algorithmSelector\"\n                      className=\"absolute inset-0 bg-gradient-to-r from-cyan-500 to-purple-500\"\n                      transition={{ type: 'spring', bounce: 0.2, duration: 0.6 }}\n                    />\n                  )}\n                </Button>\n              </motion.div>\n            ))}\n          </div>\n        </motion.div></parameter>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ delay: 0.1 }}\n            className=\"relative bg-gray-900/50 backdrop-blur-sm border border-cyan-500/30 rounded-lg p-6 overflow-hidden group hover:border-cyan-500/60 transition-all\"\n          >\n            <div className=\"absolute inset-0 bg-gradient-to-br from-cyan-500/10 to-transparent opacity-0 group-hover:opacity-100 transition-opacity\" />\n            <div className=\"relative z-10\">\n              <div className=\"flex items-center gap-2 mb-2\">\n                <BarChart3 className=\"w-5 h-5 text-cyan-400\" />\n                <span className=\"text-cyan-400 text-sm font-medium\">Comparisons</span>\n              </div>\n              <motion.div\n                key={comparisons}\n                initial={{ scale: 1.2, color: '#00ffff' }}\n                animate={{ scale: 1, color: '#ffffff' }}\n                className=\"text-3xl font-bold text-white\"\n              >\n                {comparisons}\n              </motion.div>\n            </div>\n            <div className=\"absolute -bottom-2 -right-2 w-24 h-24 bg-cyan-500/20 rounded-full blur-2xl\" />\n          </motion.div>\n\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ delay: 0.2 }}\n            className=\"relative bg-gray-900/50 backdrop-blur-sm border border-purple-500/30 rounded-lg p-6 overflow-hidden group hover:border-purple-500/60 transition-all\"\n          >\n            <div className=\"absolute inset-0 bg-gradient-to-br from-purple-500/10 to-transparent opacity-0 group-hover:opacity-100 transition-opacity\" />\n            <div className=\"relative z-10\">\n              <div className=\"flex items-center gap-2 mb-2\">\n                <Zap className=\"w-5 h-5 text-purple-400\" />\n                <span className=\"text-purple-400 text-sm font-medium\">Swaps</span>\n              </div>\n              <motion.div\n                key={swaps}\n                initial={{ scale: 1.2, color: '#ff00ff' }}\n                animate={{ scale: 1, color: '#ffffff' }}\n                className=\"text-3xl font-bold text-white\"\n              >\n                {swaps}\n              </motion.div>\n            </div>\n            <div className=\"absolute -bottom-2 -right-2 w-24 h-24 bg-purple-500/20 rounded-full blur-2xl\" />\n          </motion.div>\n\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ delay: 0.3 }}\n            className=\"relative bg-gray-900/50 backdrop-blur-sm border border-green-500/30 rounded-lg p-6 overflow-hidden group hover:border-green-500/60 transition-all\"\n          >\n            <div className=\"absolute inset-0 bg-gradient-to-br from-green-500/10 to-transparent opacity-0 group-hover:opacity-100 transition-opacity\" />\n            <div className=\"relative z-10\">\n              <div className=\"flex items-center gap-2 mb-2\">\n                <BarChart3 className=\"w-5 h-5 text-green-400\" />\n                <span className=\"text-green-400 text-sm font-medium\">Algorithm</span>\n              </div>\n              <div className=\"text-xl font-bold text-white\">\n                {mockAlgorithms.find(a => a.id === selectedAlgorithm)?.name || 'None'}\n              </div>\n            </div>\n            <div className=\"absolute -bottom-2 -right-2 w-24 h-24 bg-green-500/20 rounded-full blur-2xl\" />\n          </motion.div>\n\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ delay: 0.4 }}\n            className=\"relative bg-gray-900/50 backdrop-blur-sm border border-yellow-500/30 rounded-lg p-6 overflow-hidden group hover:border-yellow-500/60 transition-all\"\n          >\n            <div className=\"absolute inset-0 bg-gradient-to-br from-yellow-500/10 to-transparent opacity-0 group-hover:opacity-100 transition-opacity\" />\n            <div className=\"relative z-10\">\n              <div className=\"flex items-center gap-2 mb-2\">\n                <Zap className=\"w-5 h-5 text-yellow-400\" />\n                <span className=\"text-yellow-400 text-sm font-medium\">Complexity</span>\n              </div>\n              <div className=\"text-2xl font-bold text-white font-mono\">\n                {mockAlgorithms.find(a => a.id === selectedAlgorithm)?.complexity || 'N/A'}\n              </div>\n            </div>\n            <div className=\"absolute -bottom-2 -right-2 w-24 h-24 bg-yellow-500/20 rounded-full blur-2xl\" />\n          </motion.div>\n        </div>\n\n        <div className=\"relative\">\n          <div className=\"bg-gray-900/50 backdrop-blur-sm rounded-2xl border border-purple-500/30 p-8 min-h-[500px] relative overflow-hidden\">\n            {/* Animated background grid */}\n            <div className=\"absolute inset-0 opacity-10\">\n              <div className=\"absolute inset-0\" style={{\n                backgroundImage: 'linear-gradient(#00ffff 1px, transparent 1px), linear-gradient(90deg, #00ffff 1px, transparent 1px)',\n                backgroundSize: '50px 50px'\n              }} />\n            </div>\n\n            {/* Visualization area */}\n            <div className=\"relative h-[400px] flex items-end justify-center gap-1 px-4\">\n              {array.length === 0 ? (\n                <div className=\"absolute inset-0 flex items-center justify-center\">\n                  <motion.div\n                    initial={{ opacity: 0, scale: 0.8 }}\n                    animate={{ opacity: 1, scale: 1 }}\n                    className=\"text-center space-y-4\"\n                  >\n                    <BarChart3 className=\"w-16 h-16 mx-auto text-cyan-400\" />\n                    <p className=\"text-cyan-400 text-lg font-semibold\">\n                      Generate an array to start visualizing\n                    </p>\n                  </motion.div>\n                </div>\n              ) : (\n                array.map((element, index) => {\n                  const maxValue = Math.max(...array.map(el => el.value));\n                  const heightPercentage = (element.value / maxValue) * 100;\n                  const isComparing = element.isComparing;\n                  const isSwapping = element.isSwapping;\n                  const isSorted = element.isSorted;\n\n                  let barColor = NEON_COLORS[index % NEON_COLORS.length];\n                  let glowColor = barColor;\n\n                  if (isSorted) {\n                    barColor = '#00ff00';\n                    glowColor = '#00ff00';\n                  } else if (isSwapping) {\n                    barColor = '#ff0066';\n                    glowColor = '#ff0066';\n                  } else if (isComparing) {\n                    barColor = '#ffff00';\n                    glowColor = '#ffff00';\n                  }\n\n                  return (\n                    <motion.div\n                      key={element.id}\n                      className=\"relative flex-1 min-w-[4px] max-w-[60px]\"\n                      initial={{ height: 0, opacity: 0 }}\n                      animate={{\n                        height: `${heightPercentage}%`,\n                        opacity: 1,\n                        scale: isSwapping ? 1.1 : isComparing ? 1.05 : 1,\n                      }}\n                      transition={{\n                        height: { duration: 0.3, ease: \"easeOut\" },\n                        scale: { duration: 0.2 },\n                        opacity: { duration: 0.3 }\n                      }}\n                      style={{\n                        backgroundColor: barColor,\n                        boxShadow: `0 0 ${isSwapping ? '30px' : isComparing ? '20px' : '10px'} ${glowColor}`,\n                      }}\n                    >\n                      {/* Trail effect for swapping */}\n                      {isSwapping && (\n                        <motion.div\n                          className=\"absolute inset-0\"\n                          initial={{ opacity: 0.8, scale: 1 }}\n                          animate={{ opacity: 0, scale: 1.5 }}\n                          transition={{ duration: 0.5, repeat: Infinity }}\n                          style={{\n                            backgroundColor: barColor,\n                            filter: 'blur(8px)',\n                          }}\n                        />\n                      )}\n\n                      {/* Pulse effect for comparing */}\n                      {isComparing && (\n                        <motion.div\n                          className=\"absolute inset-0\"\n                          animate={{ opacity: [0.5, 0, 0.5] }}\n                          transition={{ duration: 0.8, repeat: Infinity }}\n                          style={{\n                            backgroundColor: glowColor,\n                            filter: 'blur(6px)',\n                          }}\n                        />\n                      )}\n\n                      {/* Value label */}\n                      {array.length <= 30 && (\n                        <motion.div\n                          className=\"absolute -bottom-6 left-1/2 transform -translate-x-1/2 text-xs font-mono text-cyan-300\"\n                          initial={{ opacity: 0 }}\n                          animate={{ opacity: 0.7 }}\n                        >\n                          {element.value}\n                        </motion.div>\n                      )}\n                    </motion.div>\n                  );\n                })\n              )}\n            </div>\n          </div>\n        </div>\n\n                <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.6, delay: 0.4 }}\n          className=\"bg-gray-800/50 backdrop-blur-xl rounded-2xl p-6 border border-cyan-500/30 shadow-2xl\"\n        >\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            {/* Play/Pause and Reset Controls */}\n            <div className=\"space-y-4\">\n              <h3 className=\"text-cyan-400 font-semibold text-sm uppercase tracking-wider mb-3\">\n                Controls\n              </h3>\n              <div className=\"flex gap-3\">\n                <Button\n                  onClick={handlePlayPause}\n                  disabled={steps.length === 0}\n                  className=\"flex-1 bg-gradient-to-r from-cyan-500 to-blue-500 hover:from-cyan-400 hover:to-blue-400 text-white font-bold py-6 rounded-xl shadow-lg hover:shadow-cyan-500/50 transition-all duration-300 disabled:opacity-50 disabled:cursor-not-allowed\"\n                >\n                  {isPlaying ? (\n                    <>\n                      <Pause className=\"mr-2 h-5 w-5\" />\n                      Pause\n                    </>\n                  ) : (\n                    <>\n                      <Play className=\"mr-2 h-5 w-5\" />\n                      Play\n                    </>\n                  )}\n                </Button>\n                <Button\n                  onClick={resetVisualization}\n                  className=\"bg-gradient-to-r from-purple-500 to-pink-500 hover:from-purple-400 hover:to-pink-400 text-white font-bold py-6 px-6 rounded-xl shadow-lg hover:shadow-purple-500/50 transition-all duration-300\"\n                >\n                  <RotateCcw className=\"h-5 w-5\" />\n                </Button>\n              </div>\n            </div>\n\n            {/* Speed Control */}\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center justify-between\">\n                <h3 className=\"text-cyan-400 font-semibold text-sm uppercase tracking-wider\">\n                  <Zap className=\"inline h-4 w-4 mr-1\" />\n                  Speed\n                </h3>\n                <span className=\"text-cyan-300 font-mono text-sm\">\n                  {speed[0]}ms\n                </span>\n              </div>\n              <Slider\n                value={speed}\n                onValueChange={setSpeed}\n                min={10}\n                max={200}\n                step={10}\n                className=\"cursor-pointer\"\n              />\n              <div className=\"flex justify-between text-xs text-gray-400\">\n                <span>Fast</span>\n                <span>Slow</span>\n              </div>\n            </div>\n\n            {/* Array Size Control */}\n            <div className=\"space-y-4 md:col-span-2\">\n              <div className=\"flex items-center justify-between\">\n                <h3 className=\"text-cyan-400 font-semibold text-sm uppercase tracking-wider\">\n                  <BarChart3 className=\"inline h-4 w-4 mr-1\" />\n                  Array Size\n                </h3>\n                <span className=\"text-cyan-300 font-mono text-sm\">\n                  {arraySize[0]} elements\n                </span>\n              </div>\n              <Slider\n                value={arraySize}\n                onValueChange={setArraySize}\n                min={5}\n                max={100}\n                step={5}\n                disabled={isPlaying}\n                className=\"cursor-pointer\"\n              />\n              <div className=\"flex justify-between text-xs text-gray-400\">\n                <span>5</span>\n                <span>100</span>\n              </div>\n            </div>\n          </div>\n        </motion.div>\n\n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n          {mockAlgorithms.map((algo) => (\n            <motion.div\n              key={algo.id}\n              whileHover={{ scale: 1.05, y: -5 }}\n              whileTap={{ scale: 0.95 }}\n              onClick={() => setSelectedAlgorithm(algo.id as AlgorithmType)}\n              className={`relative cursor-pointer rounded-xl p-6 backdrop-blur-sm transition-all duration-300 ${\n                selectedAlgorithm === algo.id\n                  ? 'bg-cyan-500/20 border-2 border-cyan-400 shadow-[0_0_30px_rgba(34,211,238,0.6)]'\n                  : 'bg-white/5 border-2 border-white/10 hover:border-purple-400/50 hover:shadow-[0_0_20px_rgba(168,85,247,0.4)]'\n              }`}\n            >\n              {selectedAlgorithm === algo.id && (\n                <motion.div\n                  layoutId=\"selectedGlow\"\n                  className=\"absolute inset-0 bg-gradient-to-br from-cyan-500/20 to-purple-500/20 rounded-xl\"\n                  transition={{ type: 'spring', bounce: 0.2, duration: 0.6 }}\n                />\n              )}\n              <div className=\"relative z-10 space-y-3\">\n                <div className=\"flex items-center justify-between\">\n                  <BarChart3 \n                    className={`w-8 h-8 ${\n                      selectedAlgorithm === algo.id ? 'text-cyan-400' : 'text-purple-400'\n                    }`} \n                  />\n                  {selectedAlgorithm === algo.id && (\n                    <motion.div\n                      initial={{ scale: 0 }}\n                      animate={{ scale: 1 }}\n                      className=\"w-3 h-3 rounded-full bg-cyan-400 shadow-[0_0_10px_rgba(34,211,238,0.8)]\"\n                    />\n                  )}\n                </div>\n                <h3 className={`text-lg font-bold ${\n                  selectedAlgorithm === algo.id ? 'text-cyan-300' : 'text-white'\n                }`}>\n                  {algo.name}\n                </h3>\n                <p className={`text-sm font-mono ${\n                  selectedAlgorithm === algo.id ? 'text-cyan-400' : 'text-purple-300'\n                }`}>\n                  {algo.complexity}\n                </p>\n              </div>\n            </motion.div>\n          ))}\n        </div>\n\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.6, delay: 0.4 }}\n          className=\"bg-gray-900/50 backdrop-blur-xl border border-cyan-500/30 rounded-2xl p-6 shadow-2xl\"\n        >\n          <div className=\"flex items-center gap-3 mb-4\">\n            <BarChart3 className=\"w-5 h-5 text-cyan-400\" />\n            <h3 className=\"text-lg font-semibold text-white\">Legend</h3>\n          </div>\n          \n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n            <div className=\"flex items-center gap-3\">\n              <div className=\"w-8 h-8 rounded-lg bg-cyan-500/20 border-2 border-cyan-400 shadow-[0_0_15px_rgba(0,255,255,0.5)]\" />\n              <div>\n                <div className=\"text-sm font-medium text-white\">Comparing</div>\n                <div className=\"text-xs text-gray-400\">Active comparison</div>\n              </div>\n            </div>\n            \n            <div className=\"flex items-center gap-3\">\n              <div className=\"w-8 h-8 rounded-lg bg-purple-500/20 border-2 border-purple-400 shadow-[0_0_15px_rgba(168,85,247,0.5)]\" />\n              <div>\n                <div className=\"text-sm font-medium text-white\">Swapping</div>\n                <div className=\"text-xs text-gray-400\">Elements swapping</div>\n              </div>\n            </div>\n            \n            <div className=\"flex items-center gap-3\">\n              <div className=\"w-8 h-8 rounded-lg bg-green-500/20 border-2 border-green-400 shadow-[0_0_15px_rgba(34,197,94,0.5)]\" />\n              <div>\n                <div className=\"text-sm font-medium text-white\">Sorted</div>\n                <div className=\"text-xs text-gray-400\">In final position</div>\n              </div>\n            </div>\n            \n            <div className=\"flex items-center gap-3\">\n              <div className=\"w-8 h-8 rounded-lg bg-gray-700/50 border-2 border-gray-500\" />\n              <div>\n                <div className=\"text-sm font-medium text-white\">Unsorted</div>\n                <div className=\"text-xs text-gray-400\">Awaiting sort</div>\n              </div>\n            </div>\n          </div>\n        </motion.div>\n      </div>\n    </div>\n  );\n}",
    "error": null,
    "elapsed_time": 74.3503315448761,
    "success": true
  }
}