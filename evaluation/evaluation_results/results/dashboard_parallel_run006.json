{
  "prompt_id": "dashboard",
  "prompt_name": "Analytics Dashboard",
  "mode": "parallel",
  "run_number": 6,
  "timestamp": "2025-10-13T23:48:16.211513",
  "response_time": 79.34771132469177,
  "total_tokens": null,
  "response_content": "import { useState, useCallback } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Moon, Sun, RefreshCw } from 'lucide-react';\nimport { Activity, Wifi, Database } from 'lucide-react';\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\nimport { PieChart, Pie, Cell, ResponsiveContainer, Legend, Tooltip as RechartsTooltip } from 'recharts';\nimport { motion } from 'framer-motion';\neChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';\nimport { TrendingUp, TrendingDown, DollarSign, Users, ShoppingCart, Target } from 'lucide-react'\nimport { Badge } from '@/components/ui/badge';\nimport { ChevronUp, ChevronDown, ChevronsUpDown } from 'lucide-react';\n;\n\ninterface MetricData {\n  id: string;\n  label: string;\n  value: number;\n  change: number;\n  trend: 'up' | 'down';\n}\n\ninterface ChartDataPoint {\n  date: string;\n  revenue: number;\n  users: number;\n  orders: number;\n}\n\ninterface TableRow {\n  id: string;\n  product: string;\n  sales: number;\n  revenue: number;\n  status: 'active' | 'pending' | 'inactive';\n}\n\nconst mockMetrics: MetricData[] = [\n  { id: '1', label: 'Total Revenue', value: 45231, change: 12.5, trend: 'up' },\n  { id: '2', label: 'Active Users', value: 2350, change: 8.2, trend: 'up' },\n  { id: '3', label: 'Total Orders', value: 1543, change: -3.1, trend: 'down' },\n  { id: '4', label: 'Conversion Rate', value: 3.24, change: 5.7, trend: 'up' }\n];\n\nconst mockChartData: ChartDataPoint[] = [\n  { date: '2024-01-01', revenue: 12000, users: 450, orders: 230 },\n  { date: '2024-01-02', revenue: 15000, users: 520, orders: 280 },\n  { date: '2024-01-03', revenue: 13500, users: 490, orders: 250 },\n  { date: '2024-01-04', revenue: 18000, users: 610, orders: 320 },\n  { date: '2024-01-05', revenue: 16500, users: 580, orders: 295 },\n  { date: '2024-01-06', revenue: 20000, users: 680, orders: 350 },\n  { date: '2024-01-07', revenue: 22000, users: 720, orders: 380 }\n];\n\nconst mockTableData: TableRow[] = [\n  { id: '1', product: 'Premium Plan', sales: 234, revenue: 23400, status: 'active' },\n  { id: '2', product: 'Basic Plan', sales: 567, revenue: 11340, status: 'active' },\n  { id: '3', product: 'Enterprise Plan', sales: 89, revenue: 17800, status: 'active' },\n  { id: '4', product: 'Starter Plan', sales: 432, revenue: 4320, status: 'pending' },\n  { id: '5', product: 'Pro Plan', sales: 156, revenue: 15600, status: 'active' }\n];\nconst mockPieData = [\n  { name: 'Premium Plan', value: 234, color: '#3b82f6' },\n  { name: 'Basic Plan', value: 567, color: '#10b981' },\n  { name: 'Enterprise Plan', value: 89, color: '#f59e0b' },\n  { name: 'Starter Plan', value: 432, color: '#8b5cf6' },\n  { name: 'Pro Plan', value: 156, color: '#ec4899' }\n];\n\ntype SortField = 'product' | 'sales' | 'revenue' | 'status';\ntype SortDirection = 'asc' | 'desc' | null;\n\nconst fadeInUpKeyframes = `\n  @keyframes fadeInUp {\n    from {\n      opacity: 0;\n      transform: translateY(20px);\n    }\n    to {\n      opacity: 1;\n      transform: translateY(0);\n    }\n  }\n`;\nexport default function AnalyticsDashboard() {\n  const [lastUpdate, setLastUpdate] = useState(new Date());\n  const [systemStatus, setSystemStatus] = useState<'online' | 'syncing' | 'connected'>('online');\n  const [isDarkMode, setIsDarkMode] = useState(false);\n  const [metrics, setMetrics] = useState<MetricData[]>(mockMetrics);\n  const [chartData, setChartData] = useState<ChartDataPoint[]>(mockChartData);\n  const [tableData, setTableData] = useState<TableRow[]>(mockTableData);\n  const [isRefreshing, setIsRefreshing] = useState(false);\n  const [sortField, setSortField] = useState<SortField | null>(null);\n  const [sortDirection, setSortDirection] = useState<SortDirection>(null);\n  const [currentPage, setCurrentPage] = useState(1);\n  const itemsPerPage = 3;\n  \n  // Update timestamp periodically\n  useState(() => {\n    const interval = setInterval(() => {\n      setLastUpdate(new Date());\n      // Cycle through statuses for demo\n      setSystemStatus(prev => {\n        if (prev === 'online') return 'syncing';\n        if (prev === 'syncing') return 'connected';\n        return 'online';\n      });\n    }, 5000);\n    return () => clearInterval(interval);\n  });\n\n  const formatTimestamp = (date: Date) => {\n    return date.toLocaleTimeString('en-US', { \n      hour: '2-digit', \n      minute: '2-digit', \n      second: '2-digit' \n    });\n  };\n\n  const realtimeIndicators = [\n    {\n      id: '1',\n      label: 'System Status',\n      status: systemStatus,\n      icon: Activity,\n      color: systemStatus === 'online' ? 'text-green-500' : systemStatus === 'syncing' ? 'text-blue-500' : 'text-purple-500',\n      bgColor: systemStatus === 'online' ? 'bg-green-500/10' : systemStatus === 'syncing' ? 'bg-blue-500/10' : 'bg-purple-500/10'\n    },\n    {\n      id: '2',\n      label: 'Data Stream',\n      status: 'active',\n      icon: Wifi,\n      color: 'text-green-500',\n      bgColor: 'bg-green-500/10'\n    },\n    {\n      id: '3',\n      label: 'Database',\n      status: 'connected',\n      icon: Database,\n      color: 'text-blue-500',\n      bgColor: 'bg-blue-500/10'\n    }\n  ];\n  const [pieData] = useState(mockPieData);\n  const maxUsers = Math.max(...chartData.map(d => d.users));\n  const minUsers = Math.min(...chartData.map(d => d.users));\n\n  const toggleDarkMode = useCallback(() => {\n    setIsDarkMode(prev => !prev);\n  }, []);\n\n  const handleSort = useCallback((field: SortField) => {\n    if (sortField === field) {\n      if (sortDirection === 'asc') {\n        setSortDirection('desc');\n      } else if (sortDirection === 'desc') {\n        setSortDirection(null);\n        setSortField(null);\n      }\n    } else {\n      setSortField(field);\n      setSortDirection('asc');\n    }\n    setCurrentPage(1);\n  }, [sortField, sortDirection]);\n\n  const sortedTableData = useCallback(() => {\n    if (!sortField || !sortDirection) return tableData;\n\n    return [...tableData].sort((a, b) => {\n      let aValue = a[sortField];\n      let bValue = b[sortField];\n\n      if (typeof aValue === 'string') {\n        aValue = aValue.toLowerCase();\n        bValue = (bValue as string).toLowerCase();\n      }\n\n      if (aValue < bValue) return sortDirection === 'asc' ? -1 : 1;\n      if (aValue > bValue) return sortDirection === 'asc' ? 1 : -1;\n      return 0;\n    });\n  }, [tableData, sortField, sortDirection])();\n\n  const totalPages = Math.ceil(sortedTableData.length / itemsPerPage);\n  const paginatedData = sortedTableData.slice(\n    (currentPage - 1) * itemsPerPage,\n    currentPage * itemsPerPage\n  );\n\n  const getSortIcon = (field: SortField) => {\n    if (sortField !== field) {\n      return <ChevronsUpDown className=\"h-4 w-4 ml-1 inline\" />;\n    }\n    if (sortDirection === 'asc') {\n      return <ChevronUp className=\"h-4 w-4 ml-1 inline\" />;\n    }\n    return <ChevronDown className=\"h-4 w-4 ml-1 inline\" />;\n  };\n\n  const getStatusBadge = (status: TableRow['status']) => {\n    const variants = {\n      active: 'default',\n      pending: 'secondary',\n      inactive: 'outline'\n    } as const;\n\n    const colors = {\n      active: isDarkMode ? 'bg-green-900 text-green-300' : 'bg-green-100 text-green-800',\n      pending: isDarkMode ? 'bg-yellow-900 text-yellow-300' : 'bg-yellow-100 text-yellow-800',\n      inactive: isDarkMode ? 'bg-gray-700 text-gray-300' : 'bg-gray-100 text-gray-800'\n    };\n\n    return (\n      <Badge className={colors[status]}>\n        {status.charAt(0).toUpperCase() + status.slice(1)}\n      </Badge>\n    );\n  };\n\nconst CustomBarTooltip = ({ active, payload, label }: any) => {\n    if (active && payload && payload.length) {\n      return (\n        <div className={`p-3 rounded-lg shadow-lg border ${isDarkMode ? 'bg-gray-800 border-gray-700' : 'bg-white border-gray-200'}`}>\n          <p className={`font-semibold mb-2 ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>{label}</p>\n          {payload.map((entry: any, index: number) => (\n            <p key={index} className=\"text-sm\" style={{ color: entry.color }}>\n              {entry.name}: {entry.name === 'Revenue' ? `$${entry.value.toLocaleString()}` : entry.value.toLocaleString()}\n            </p>\n          ))}\n        </div>\n      );\n    }\n    return null;\n  };\n\n  const handleRefresh = useCallback(() => {\n    setIsRefreshing(true);\n    \n    setTimeout(() => {\n      // Generate updated metrics with random variations\n      const updatedMetrics = mockMetrics.map(metric => ({\n        ...metric,\n        value: metric.value + Math.floor(Math.random() * 200 - 100),\n        change: parseFloat((Math.random() * 20 - 5).toFixed(1)),\n        trend: Math.random() > 0.5 ? 'up' as const : 'down' as const\n      }));\n\n      // Generate updated chart data with random variations\n      const updatedChartData = mockChartData.map(point => ({\n        ...point,\n        revenue: point.revenue + Math.floor(Math.random() * 4000 - 2000),\n        users: point.users + Math.floor(Math.random() * 100 - 50),\n        orders: point.orders + Math.floor(Math.random() * 50 - 25)\n      }));\n\n      // Generate updated table data with random variations\n      const updatedTableData = mockTableData.map(row => ({\n        ...row,\n        sales: row.sales + Math.floor(Math.random() * 40 - 20),\n        revenue: row.revenue + Math.floor(Math.random() * 2000 - 1000),\n        status: ['active', 'pending', 'inactive'][Math.floor(Math.random() * 3)] as 'active' | 'pending' | 'inactive'\n      }));\n\n      setMetrics(updatedMetrics);\n      setChartData(updatedChartData);\n      setTableData(updatedTableData);\n      setIsRefreshing(false);\n    }, 1500);\n  }, []);\n\n  return (\n    <div className={`min-h-screen ${isDarkMode ? 'dark bg-gray-900' : 'bg-gray-50'}`}>\n      <style>{fadeInUpKeyframes}</style>\n      <div className=\"container mx-auto p-4 md:p-6 lg:p-8\">\n        <div className=\"flex flex-col md:flex-row justify-between items-start md:items-center gap-4 mb-8\">\n          <div>\n            <h1 className={`text-3xl md:text-4xl font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n              Analytics Dashboard\n            </h1>\n            <p className={`mt-2 ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n              Real-time insights and performance metrics\n            </p>\n          </div>\n          \n          <div className=\"flex gap-2\">\n            <Button\n              variant=\"outline\"\n              size=\"icon\"\n              onClick={toggleDarkMode}\n              className={isDarkMode ? 'border-gray-700' : ''}\n            >\n              {isDarkMode ? <Sun className=\"h-5 w-5\" /> : <Moon className=\"h-5 w-5\" />}\n            </Button>\n            \n            <Button\n              variant=\"outline\"\n              onClick={handleRefresh}\n              disabled={isRefreshing}\n              className={isDarkMode ? 'border-gray-700' : ''}\n            >\n              <RefreshCw className={`h-4 w-4 mr-2 ${isRefreshing ? 'animate-spin' : ''}`} />\n              Refresh\n            </Button>\n          </div>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 md:gap-6 mb-8\">\n          {metrics.map((metric, index) => {\n            const Icon = \n              metric.label === 'Total Revenue' ? DollarSign :\n              metric.label === 'Active Users' ? Users :\n              metric.label === 'Total Orders' ? ShoppingCart :\n              Target;\n            \n            const TrendIcon = metric.trend === 'up' ? TrendingUp : TrendingDown;\n            const trendColor = metric.trend === 'up' ? 'text-green-500' : 'text-red-500';\n            const trendBgColor = metric.trend === 'up' \n              ? (isDarkMode ? 'bg-green-500/10' : 'bg-green-50')\n              : (isDarkMode ? 'bg-red-500/10' : 'bg-red-50');\n\n            return (\n              <Card \n                key={metric.id}\n                className={`transition-all duration-300 hover:shadow-lg hover:-translate-y-1 ${\n                  isDarkMode ? 'bg-gray-800 border-gray-700' : 'bg-white'\n                }`}\n                style={{\n                  animationDelay: `${index * 100}ms`,\n                  animation: 'fadeInUp 0.5s ease-out forwards',\n                  opacity: 0\n                }}\n              >\n                <CardHeader className=\"flex flex-row items-center justify-between pb-2\">\n                  <CardTitle className={`text-sm font-medium ${\n                    isDarkMode ? 'text-gray-400' : 'text-gray-600'\n                  }`}>\n                    {metric.label}\n                  </CardTitle>\n                  <div className={`p-2 rounded-lg ${\n                    isDarkMode ? 'bg-gray-700' : 'bg-gray-100'\n                  }`}>\n                    <Icon className={`h-4 w-4 ${\n                      isDarkMode ? 'text-gray-300' : 'text-gray-600'\n                    }`} />\n                  </div>\n                </CardHeader>\n                <CardContent>\n                  <div className={`text-2xl font-bold ${\n                    isDarkMode ? 'text-white' : 'text-gray-900'\n                  }`}>\n                    {metric.label.includes('Revenue') || metric.label.includes('Rate')\n                      ? metric.label.includes('Rate')\n                        ? `${metric.value}%`\n                        : `$${metric.value.toLocaleString()}`\n                      : metric.value.toLocaleString()}\n                  </div>\n                  <div className=\"flex items-center gap-1 mt-2\">\n                    <div className={`flex items-center gap-1 px-2 py-1 rounded-full ${trendBgColor}`}>\n                      <TrendIcon className={`h-3 w-3 ${trendColor}`} />\n                      <span className={`text-xs font-medium ${trendColor}`}>\n                        {Math.abs(metric.change)}%\n                      </span>\n                    </div>\n                    <span className={`text-xs ${\n                      isDarkMode ? 'text-gray-500' : 'text-gray-500'\n                    }`}>\n                      vs last period\n                    </span>\n                  </div>\n                </CardContent>\n              </Card>\n            );\n          })}\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-4 md:gap-6 mb-8\">\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Revenue Overview</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Daily revenue trends\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <ResponsiveContainer width=\"100%\" height={300}>\n                <LineChart data={chartData}>\n                  <CartesianGrid \n                    strokeDasharray=\"3 3\" \n                    stroke={isDarkMode ? '#374151' : '#e5e7eb'} \n                  />\n                  <XAxis \n                    dataKey=\"date\" \n                    stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                    tick={{ fill: isDarkMode ? '#9ca3af' : '#6b7280' }}\n                    tickFormatter={(value) => new Date(value).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n                  />\n                  <YAxis \n                    stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                    tick={{ fill: isDarkMode ? '#9ca3af' : '#6b7280' }}\n                    tickFormatter={(value) => `$${(value / 1000).toFixed(0)}k`}\n                  />\n                  <Tooltip \n                    contentStyle={{\n                      backgroundColor: isDarkMode ? '#1f2937' : '#ffffff',\n                      border: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\n                      borderRadius: '6px',\n                      color: isDarkMode ? '#ffffff' : '#000000'\n                    }}\n                    labelFormatter={(value) => new Date(value).toLocaleDateString('en-US', { month: 'long', day: 'numeric', year: 'numeric' })}\n                    formatter={(value: number) => [`$${value.toLocaleString()}`, 'Revenue']}\n                  />\n                  <Line \n                    type=\"monotone\" \n                    dataKey=\"revenue\" \n                    stroke=\"#3b82f6\" \n                    strokeWidth={2}\n                    dot={{ fill: '#3b82f6', r: 4 }}\n                    activeDot={{ r: 6 }}\n                  />\n                </LineChart>\n              </ResponsiveContainer>\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>User Growth</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Active users over time\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"relative h-64 w-full\">\n                <svg className=\"w-full h-full\" viewBox=\"0 0 700 256\" preserveAspectRatio=\"none\">\n                  <defs>\n                    <linearGradient id=\"userGradient\" x1=\"0%\" y1=\"0%\" x2=\"0%\" y2=\"100%\">\n                      <stop offset=\"0%\" stopColor=\"#3b82f6\" stopOpacity=\"0.4\" />\n                      <stop offset=\"100%\" stopColor=\"#3b82f6\" stopOpacity=\"0.05\" />\n                    </linearGradient>\n                  </defs>\n                  \n                  <motion.path\n                    d={`\n                      M 0,${256 - ((chartData[0].users - minUsers) / (maxUsers - minUsers)) * 200}\n                      ${chartData.map((point, i) => {\n                        const x = (i / (chartData.length - 1)) * 700;\n                        const y = 256 - ((point.users - minUsers) / (maxUsers - minUsers)) * 200;\n                        return `L ${x},${y}`;\n                      }).join(' ')}\n                      L 700,256\n                      L 0,256\n                      Z\n                    `}\n                    fill=\"url(#userGradient)\"\n                    initial={{ opacity: 0 }}\n                    animate={{ opacity: 1 }}\n                    transition={{ duration: 0.8, ease: \"easeOut\" }}\n                  />\n                  \n                  <motion.path\n                    d={`\n                      M 0,${256 - ((chartData[0].users - minUsers) / (maxUsers - minUsers)) * 200}\n                      ${chartData.map((point, i) => {\n                        const x = (i / (chartData.length - 1)) * 700;\n                        const y = 256 - ((point.users - minUsers) / (maxUsers - minUsers)) * 200;\n                        return `L ${x},${y}`;\n                      }).join(' ')}\n                    `}\n                    fill=\"none\"\n                    stroke=\"#3b82f6\"\n                    strokeWidth=\"3\"\n                    strokeLinecap=\"round\"\n                    strokeLinejoin=\"round\"\n                    initial={{ pathLength: 0 }}\n                    animate={{ pathLength: 1 }}\n                    transition={{ duration: 1.5, ease: \"easeInOut\" }}\n                  />\n                  \n                  {chartData.map((point, i) => {\n                    const x = (i / (chartData.length - 1)) * 700;\n                    const y = 256 - ((point.users - minUsers) / (maxUsers - minUsers)) * 200;\n                    return (\n                      <motion.g key={i}>\n                        <motion.circle\n                          cx={x}\n                          cy={y}\n                          r=\"5\"\n                          fill=\"#3b82f6\"\n                          initial={{ scale: 0 }}\n                          animate={{ scale: 1 }}\n                          transition={{ duration: 0.3, delay: 0.1 * i }}\n                        />\n                        <motion.circle\n                          cx={x}\n                          cy={y}\n                          r=\"8\"\n                          fill=\"none\"\n                          stroke=\"#3b82f6\"\n                          strokeWidth=\"2\"\n                          opacity=\"0\"\n                          whileHover={{ opacity: 1, scale: 1.5 }}\n                        />\n                      </motion.g>\n                    );\n                  })}\n                </svg>\n                \n                <div className=\"flex justify-between mt-4 px-2\">\n                  {chartData.map((point, i) => (\n                    <motion.div\n                      key={i}\n                      className=\"text-center\"\n                      initial={{ opacity: 0, y: 10 }}\n                      animate={{ opacity: 1, y: 0 }}\n                      transition={{ duration: 0.5, delay: 0.1 * i }}\n                    >\n                      <div className={`text-xs ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                        {new Date(point.date).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n                      </div>\n                      <div className={`text-sm font-semibold mt-1 ${isDarkMode ? 'text-blue-400' : 'text-blue-600'}`}>\n                        {point.users}\n                      </div>\n                    </motion.div>\n                  ))}\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-4 md:gap-6 mb-8\">\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Orders Distribution</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                By product category\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <ResponsiveContainer width=\"100%\" height={300}>\n                <PieChart>\n                  <Pie\n                    data={pieData}\n                    cx=\"50%\"\n                    cy=\"50%\"\n                    labelLine={false}\n                    label={({ name, percent }) => `${name}: ${(percent * 100).toFixed(0)}%`}\n                    outerRadius={80}\n                    fill=\"#8884d8\"\n                    dataKey=\"value\"\n                    animationBegin={0}\n                    animationDuration={800}\n                  >\n                    {pieData.map((entry, index) => (\n                      <Cell key={`cell-${index}`} fill={entry.color} />\n                    ))}\n                  </Pie>\n                  <RechartsTooltip\n                    contentStyle={{\n                      backgroundColor: isDarkMode ? '#1f2937' : '#ffffff',\n                      border: isDarkMode ? '1px solid #374151' : '1px solid #e5e7eb',\n                      borderRadius: '6px',\n                      color: isDarkMode ? '#ffffff' : '#000000'\n                    }}\n                  />\n                  <Legend\n                    verticalAlign=\"bottom\"\n                    height={36}\n                    iconType=\"circle\"\n                    wrapperStyle={{\n                      color: isDarkMode ? '#9ca3af' : '#6b7280'\n                    }}\n                  />\n                </PieChart>\n              </ResponsiveContainer>\n            </CardContent>\n          </Card>\n\n          <Card className={`lg:col-span-2 ${isDarkMode ? 'bg-gray-800 border-gray-700' : ''}`}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Performance Metrics</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Combined view of key indicators\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <ResponsiveContainer width=\"100%\" height={300}>\n                <BarChart data={chartData}>\n                  <CartesianGrid strokeDasharray=\"3 3\" stroke={isDarkMode ? '#374151' : '#e5e7eb'} />\n                  <XAxis \n                    dataKey=\"date\" \n                    stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                    tick={{ fill: isDarkMode ? '#9ca3af' : '#6b7280', fontSize: 12 }}\n                    tickFormatter={(value) => new Date(value).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n                  />\n                  <YAxis \n                    stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                    tick={{ fill: isDarkMode ? '#9ca3af' : '#6b7280', fontSize: 12 }}\n                  />\n                  <Tooltip content={<CustomBarTooltip />} />\n                  <Legend \n                    wrapperStyle={{ \n                      paddingTop: '20px',\n                      color: isDarkMode ? '#e5e7eb' : '#374151'\n                    }}\n                  />\n                  <Bar \n                    dataKey=\"revenue\" \n                    name=\"Revenue\"\n                    fill=\"#3b82f6\" \n                    radius={[4, 4, 0, 0]}\n                    animationDuration={800}\n                  />\n                  <Bar \n                    dataKey=\"users\" \n                    name=\"Users\"\n                    fill=\"#10b981\" \n                    radius={[4, 4, 0, 0]}\n                    animationDuration={800}\n                  />\n                  <Bar \n                    dataKey=\"orders\" \n                    name=\"Orders\"\n                    fill=\"#f59e0b\" \n                    radius={[4, 4, 0, 0]}\n                    animationDuration={800}\n                  />\n                </BarChart>\n              </ResponsiveContainer>\n            </CardContent>\n          </Card>\n        </div>\n\n        <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n          <CardHeader>\n            <CardTitle className={isDarkMode ? 'text-white' : ''}>Top Products</CardTitle>\n            <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n              Best performing products by revenue\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"overflow-x-auto\">\n              <table className=\"w-full\">\n                <thead>\n                  <tr className={`border-b ${isDarkMode ? 'border-gray-700' : 'border-gray-200'}`}>\n                    <th \n                      className={`text-left p-3 font-semibold cursor-pointer hover:bg-opacity-50 ${\n                        isDarkMode ? 'text-gray-300 hover:bg-gray-700' : 'text-gray-700 hover:bg-gray-100'\n                      }`}\n                      onClick={() => handleSort('product')}\n                    >\n                      Product {getSortIcon('product')}\n                    </th>\n                    <th \n                      className={`text-right p-3 font-semibold cursor-pointer hover:bg-opacity-50 ${\n                        isDarkMode ? 'text-gray-300 hover:bg-gray-700' : 'text-gray-700 hover:bg-gray-100'\n                      }`}\n                      onClick={() => handleSort('sales')}\n                    >\n                      Sales {getSortIcon('sales')}\n                    </th>\n                    <th \n                      className={`text-right p-3 font-semibold cursor-pointer hover:bg-opacity-50 ${\n                        isDarkMode ? 'text-gray-300 hover:bg-gray-700' : 'text-gray-700 hover:bg-gray-100'\n                      }`}\n                      onClick={() => handleSort('revenue')}\n                    >\n                      Revenue {getSortIcon('revenue')}\n                    </th>\n                    <th \n                      className={`text-center p-3 font-semibold cursor-pointer hover:bg-opacity-50 ${\n                        isDarkMode ? 'text-gray-300 hover:bg-gray-700' : 'text-gray-700 hover:bg-gray-100'\n                      }`}\n                      onClick={() => handleSort('status')}\n                    >\n                      Status {getSortIcon('status')}\n                    </th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {paginatedData.map((row, index) => (\n                    <tr \n                      key={row.id}\n                      className={`border-b transition-colors ${\n                        isDarkMode \n                          ? 'border-gray-700 hover:bg-gray-700' \n                          : 'border-gray-100 hover:bg-gray-50'\n                      }`}\n                    >\n                      <td className={`p-3 font-medium ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                        {row.product}\n                      </td>\n                      <td className={`p-3 text-right ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>\n                        {row.sales.toLocaleString()}\n                      </td>\n                      <td className={`p-3 text-right font-semibold ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>\n                        ${row.revenue.toLocaleString()}\n                      </td>\n                      <td className=\"p-3 text-center\">\n                        {getStatusBadge(row.status)}\n                      </td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            </div>\n\n            {totalPages > 1 && (\n              <div className=\"flex flex-col sm:flex-row justify-between items-center gap-4 mt-6 pt-4 border-t border-gray-200 dark:border-gray-700\">\n                <div className={`text-sm ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                  Showing {(currentPage - 1) * itemsPerPage + 1} to {Math.min(currentPage * itemsPerPage, sortedTableData.length)} of {sortedTableData.length} products\n                </div>\n                \n                <div className=\"flex gap-2\">\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => setCurrentPage(prev => Math.max(1, prev - 1))}\n                    disabled={currentPage === 1}\n                    className={isDarkMode ? 'border-gray-700' : ''}\n                  >\n                    Previous\n                  </Button>\n                  \n                  <div className=\"flex gap-1\">\n                    {Array.from({ length: totalPages }, (_, i) => i + 1).map(page => (\n                      <Button\n                        key={page}\n                        variant={currentPage === page ? 'default' : 'outline'}\n                        size=\"sm\"\n                        onClick={() => setCurrentPage(page)}\n                        className={`w-10 ${isDarkMode && currentPage !== page ? 'border-gray-700' : ''}`}\n                      >\n                        {page}\n                      </Button>\n                    ))}\n                  </div>\n                  \n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => setCurrentPage(prev => Math.min(totalPages, prev + 1))}\n                    disabled={currentPage === totalPages}\n                    className={isDarkMode ? 'border-gray-700' : ''}\n                  >\n                    Next\n                  </Button>\n                </div>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 md:gap-6 mt-8\">\n          {realtimeIndicators.map((indicator) => {\n            const IconComponent = indicator.icon;\n            return (\n              <Card \n                key={indicator.id} \n                className={`${isDarkMode ? 'bg-gray-800 border-gray-700' : ''} relative overflow-hidden`}\n              >\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center gap-3\">\n                      <div className={`relative ${indicator.bgColor} p-3 rounded-lg`}>\n                        <IconComponent className={`h-5 w-5 ${indicator.color}`} />\n                        {/* Pulse animation */}\n                        <span className={`absolute inset-0 rounded-lg ${indicator.bgColor} animate-ping opacity-75`}></span>\n                      </div>\n                      <div>\n                        <p className={`text-sm font-medium ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                          {indicator.label}\n                        </p>\n                        <p className={`text-lg font-semibold ${isDarkMode ? 'text-white' : 'text-gray-900'} capitalize`}>\n                          {indicator.status}\n                        </p>\n                      </div>\n                    </div>\n                    <div className={`flex items-center gap-2 ${indicator.color}`}>\n                      <div className=\"relative\">\n                        <div className={`w-2 h-2 rounded-full ${indicator.color.replace('text-', 'bg-')}`}></div>\n                        <div className={`absolute inset-0 w-2 h-2 rounded-full ${indicator.color.replace('text-', 'bg-')} animate-ping`}></div>\n                      </div>\n                      <span className=\"text-xs font-medium\">Live</span>\n                    </div>\n                  </div>\n                  <div className={`mt-4 pt-4 border-t ${isDarkMode ? 'border-gray-700' : 'border-gray-200'}`}>\n                    <div className=\"flex items-center justify-between\">\n                      <span className={`text-xs ${isDarkMode ? 'text-gray-500' : 'text-gray-500'}`}>\n                        Last updated\n                      </span>\n                      <span className={`text-xs font-mono ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                        {formatTimestamp(lastUpdate)}\n                      </span>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            );\n          })}\n        </div>\n      </div>\n    </div>\n  );\n}",
  "error": null,
  "overall_score": 44,
  "code_quality_score": 12,
  "architecture_score": 10,
  "performance_score": 8,
  "accessibility_score": 14,
  "metadata": {
    "document_id": "eval_room_bc9d61431e2a",
    "prompt_category": "intermediate",
    "prompt_complexity": 6.0
  },
  "raw_response": {
    "document_id": "eval_room_bc9d61431e2a",
    "mode": "parallel",
    "prompt": "Generate an analytics dashboard page with charts, data tables, real-time updates, dark mode, and responsive design",
    "content": "import { useState, useCallback } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Moon, Sun, RefreshCw } from 'lucide-react';\nimport { Activity, Wifi, Database } from 'lucide-react';\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\nimport { PieChart, Pie, Cell, ResponsiveContainer, Legend, Tooltip as RechartsTooltip } from 'recharts';\nimport { motion } from 'framer-motion';\neChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';\nimport { TrendingUp, TrendingDown, DollarSign, Users, ShoppingCart, Target } from 'lucide-react'\nimport { Badge } from '@/components/ui/badge';\nimport { ChevronUp, ChevronDown, ChevronsUpDown } from 'lucide-react';\n;\n\ninterface MetricData {\n  id: string;\n  label: string;\n  value: number;\n  change: number;\n  trend: 'up' | 'down';\n}\n\ninterface ChartDataPoint {\n  date: string;\n  revenue: number;\n  users: number;\n  orders: number;\n}\n\ninterface TableRow {\n  id: string;\n  product: string;\n  sales: number;\n  revenue: number;\n  status: 'active' | 'pending' | 'inactive';\n}\n\nconst mockMetrics: MetricData[] = [\n  { id: '1', label: 'Total Revenue', value: 45231, change: 12.5, trend: 'up' },\n  { id: '2', label: 'Active Users', value: 2350, change: 8.2, trend: 'up' },\n  { id: '3', label: 'Total Orders', value: 1543, change: -3.1, trend: 'down' },\n  { id: '4', label: 'Conversion Rate', value: 3.24, change: 5.7, trend: 'up' }\n];\n\nconst mockChartData: ChartDataPoint[] = [\n  { date: '2024-01-01', revenue: 12000, users: 450, orders: 230 },\n  { date: '2024-01-02', revenue: 15000, users: 520, orders: 280 },\n  { date: '2024-01-03', revenue: 13500, users: 490, orders: 250 },\n  { date: '2024-01-04', revenue: 18000, users: 610, orders: 320 },\n  { date: '2024-01-05', revenue: 16500, users: 580, orders: 295 },\n  { date: '2024-01-06', revenue: 20000, users: 680, orders: 350 },\n  { date: '2024-01-07', revenue: 22000, users: 720, orders: 380 }\n];\n\nconst mockTableData: TableRow[] = [\n  { id: '1', product: 'Premium Plan', sales: 234, revenue: 23400, status: 'active' },\n  { id: '2', product: 'Basic Plan', sales: 567, revenue: 11340, status: 'active' },\n  { id: '3', product: 'Enterprise Plan', sales: 89, revenue: 17800, status: 'active' },\n  { id: '4', product: 'Starter Plan', sales: 432, revenue: 4320, status: 'pending' },\n  { id: '5', product: 'Pro Plan', sales: 156, revenue: 15600, status: 'active' }\n];\nconst mockPieData = [\n  { name: 'Premium Plan', value: 234, color: '#3b82f6' },\n  { name: 'Basic Plan', value: 567, color: '#10b981' },\n  { name: 'Enterprise Plan', value: 89, color: '#f59e0b' },\n  { name: 'Starter Plan', value: 432, color: '#8b5cf6' },\n  { name: 'Pro Plan', value: 156, color: '#ec4899' }\n];\n\ntype SortField = 'product' | 'sales' | 'revenue' | 'status';\ntype SortDirection = 'asc' | 'desc' | null;\n\nconst fadeInUpKeyframes = `\n  @keyframes fadeInUp {\n    from {\n      opacity: 0;\n      transform: translateY(20px);\n    }\n    to {\n      opacity: 1;\n      transform: translateY(0);\n    }\n  }\n`;\nexport default function AnalyticsDashboard() {\n  const [lastUpdate, setLastUpdate] = useState(new Date());\n  const [systemStatus, setSystemStatus] = useState<'online' | 'syncing' | 'connected'>('online');\n  const [isDarkMode, setIsDarkMode] = useState(false);\n  const [metrics, setMetrics] = useState<MetricData[]>(mockMetrics);\n  const [chartData, setChartData] = useState<ChartDataPoint[]>(mockChartData);\n  const [tableData, setTableData] = useState<TableRow[]>(mockTableData);\n  const [isRefreshing, setIsRefreshing] = useState(false);\n  const [sortField, setSortField] = useState<SortField | null>(null);\n  const [sortDirection, setSortDirection] = useState<SortDirection>(null);\n  const [currentPage, setCurrentPage] = useState(1);\n  const itemsPerPage = 3;\n  \n  // Update timestamp periodically\n  useState(() => {\n    const interval = setInterval(() => {\n      setLastUpdate(new Date());\n      // Cycle through statuses for demo\n      setSystemStatus(prev => {\n        if (prev === 'online') return 'syncing';\n        if (prev === 'syncing') return 'connected';\n        return 'online';\n      });\n    }, 5000);\n    return () => clearInterval(interval);\n  });\n\n  const formatTimestamp = (date: Date) => {\n    return date.toLocaleTimeString('en-US', { \n      hour: '2-digit', \n      minute: '2-digit', \n      second: '2-digit' \n    });\n  };\n\n  const realtimeIndicators = [\n    {\n      id: '1',\n      label: 'System Status',\n      status: systemStatus,\n      icon: Activity,\n      color: systemStatus === 'online' ? 'text-green-500' : systemStatus === 'syncing' ? 'text-blue-500' : 'text-purple-500',\n      bgColor: systemStatus === 'online' ? 'bg-green-500/10' : systemStatus === 'syncing' ? 'bg-blue-500/10' : 'bg-purple-500/10'\n    },\n    {\n      id: '2',\n      label: 'Data Stream',\n      status: 'active',\n      icon: Wifi,\n      color: 'text-green-500',\n      bgColor: 'bg-green-500/10'\n    },\n    {\n      id: '3',\n      label: 'Database',\n      status: 'connected',\n      icon: Database,\n      color: 'text-blue-500',\n      bgColor: 'bg-blue-500/10'\n    }\n  ];\n  const [pieData] = useState(mockPieData);\n  const maxUsers = Math.max(...chartData.map(d => d.users));\n  const minUsers = Math.min(...chartData.map(d => d.users));\n\n  const toggleDarkMode = useCallback(() => {\n    setIsDarkMode(prev => !prev);\n  }, []);\n\n  const handleSort = useCallback((field: SortField) => {\n    if (sortField === field) {\n      if (sortDirection === 'asc') {\n        setSortDirection('desc');\n      } else if (sortDirection === 'desc') {\n        setSortDirection(null);\n        setSortField(null);\n      }\n    } else {\n      setSortField(field);\n      setSortDirection('asc');\n    }\n    setCurrentPage(1);\n  }, [sortField, sortDirection]);\n\n  const sortedTableData = useCallback(() => {\n    if (!sortField || !sortDirection) return tableData;\n\n    return [...tableData].sort((a, b) => {\n      let aValue = a[sortField];\n      let bValue = b[sortField];\n\n      if (typeof aValue === 'string') {\n        aValue = aValue.toLowerCase();\n        bValue = (bValue as string).toLowerCase();\n      }\n\n      if (aValue < bValue) return sortDirection === 'asc' ? -1 : 1;\n      if (aValue > bValue) return sortDirection === 'asc' ? 1 : -1;\n      return 0;\n    });\n  }, [tableData, sortField, sortDirection])();\n\n  const totalPages = Math.ceil(sortedTableData.length / itemsPerPage);\n  const paginatedData = sortedTableData.slice(\n    (currentPage - 1) * itemsPerPage,\n    currentPage * itemsPerPage\n  );\n\n  const getSortIcon = (field: SortField) => {\n    if (sortField !== field) {\n      return <ChevronsUpDown className=\"h-4 w-4 ml-1 inline\" />;\n    }\n    if (sortDirection === 'asc') {\n      return <ChevronUp className=\"h-4 w-4 ml-1 inline\" />;\n    }\n    return <ChevronDown className=\"h-4 w-4 ml-1 inline\" />;\n  };\n\n  const getStatusBadge = (status: TableRow['status']) => {\n    const variants = {\n      active: 'default',\n      pending: 'secondary',\n      inactive: 'outline'\n    } as const;\n\n    const colors = {\n      active: isDarkMode ? 'bg-green-900 text-green-300' : 'bg-green-100 text-green-800',\n      pending: isDarkMode ? 'bg-yellow-900 text-yellow-300' : 'bg-yellow-100 text-yellow-800',\n      inactive: isDarkMode ? 'bg-gray-700 text-gray-300' : 'bg-gray-100 text-gray-800'\n    };\n\n    return (\n      <Badge className={colors[status]}>\n        {status.charAt(0).toUpperCase() + status.slice(1)}\n      </Badge>\n    );\n  };\n\nconst CustomBarTooltip = ({ active, payload, label }: any) => {\n    if (active && payload && payload.length) {\n      return (\n        <div className={`p-3 rounded-lg shadow-lg border ${isDarkMode ? 'bg-gray-800 border-gray-700' : 'bg-white border-gray-200'}`}>\n          <p className={`font-semibold mb-2 ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>{label}</p>\n          {payload.map((entry: any, index: number) => (\n            <p key={index} className=\"text-sm\" style={{ color: entry.color }}>\n              {entry.name}: {entry.name === 'Revenue' ? `$${entry.value.toLocaleString()}` : entry.value.toLocaleString()}\n            </p>\n          ))}\n        </div>\n      );\n    }\n    return null;\n  };\n\n  const handleRefresh = useCallback(() => {\n    setIsRefreshing(true);\n    \n    setTimeout(() => {\n      // Generate updated metrics with random variations\n      const updatedMetrics = mockMetrics.map(metric => ({\n        ...metric,\n        value: metric.value + Math.floor(Math.random() * 200 - 100),\n        change: parseFloat((Math.random() * 20 - 5).toFixed(1)),\n        trend: Math.random() > 0.5 ? 'up' as const : 'down' as const\n      }));\n\n      // Generate updated chart data with random variations\n      const updatedChartData = mockChartData.map(point => ({\n        ...point,\n        revenue: point.revenue + Math.floor(Math.random() * 4000 - 2000),\n        users: point.users + Math.floor(Math.random() * 100 - 50),\n        orders: point.orders + Math.floor(Math.random() * 50 - 25)\n      }));\n\n      // Generate updated table data with random variations\n      const updatedTableData = mockTableData.map(row => ({\n        ...row,\n        sales: row.sales + Math.floor(Math.random() * 40 - 20),\n        revenue: row.revenue + Math.floor(Math.random() * 2000 - 1000),\n        status: ['active', 'pending', 'inactive'][Math.floor(Math.random() * 3)] as 'active' | 'pending' | 'inactive'\n      }));\n\n      setMetrics(updatedMetrics);\n      setChartData(updatedChartData);\n      setTableData(updatedTableData);\n      setIsRefreshing(false);\n    }, 1500);\n  }, []);\n\n  return (\n    <div className={`min-h-screen ${isDarkMode ? 'dark bg-gray-900' : 'bg-gray-50'}`}>\n      <style>{fadeInUpKeyframes}</style>\n      <div className=\"container mx-auto p-4 md:p-6 lg:p-8\">\n        <div className=\"flex flex-col md:flex-row justify-between items-start md:items-center gap-4 mb-8\">\n          <div>\n            <h1 className={`text-3xl md:text-4xl font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n              Analytics Dashboard\n            </h1>\n            <p className={`mt-2 ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n              Real-time insights and performance metrics\n            </p>\n          </div>\n          \n          <div className=\"flex gap-2\">\n            <Button\n              variant=\"outline\"\n              size=\"icon\"\n              onClick={toggleDarkMode}\n              className={isDarkMode ? 'border-gray-700' : ''}\n            >\n              {isDarkMode ? <Sun className=\"h-5 w-5\" /> : <Moon className=\"h-5 w-5\" />}\n            </Button>\n            \n            <Button\n              variant=\"outline\"\n              onClick={handleRefresh}\n              disabled={isRefreshing}\n              className={isDarkMode ? 'border-gray-700' : ''}\n            >\n              <RefreshCw className={`h-4 w-4 mr-2 ${isRefreshing ? 'animate-spin' : ''}`} />\n              Refresh\n            </Button>\n          </div>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 md:gap-6 mb-8\">\n          {metrics.map((metric, index) => {\n            const Icon = \n              metric.label === 'Total Revenue' ? DollarSign :\n              metric.label === 'Active Users' ? Users :\n              metric.label === 'Total Orders' ? ShoppingCart :\n              Target;\n            \n            const TrendIcon = metric.trend === 'up' ? TrendingUp : TrendingDown;\n            const trendColor = metric.trend === 'up' ? 'text-green-500' : 'text-red-500';\n            const trendBgColor = metric.trend === 'up' \n              ? (isDarkMode ? 'bg-green-500/10' : 'bg-green-50')\n              : (isDarkMode ? 'bg-red-500/10' : 'bg-red-50');\n\n            return (\n              <Card \n                key={metric.id}\n                className={`transition-all duration-300 hover:shadow-lg hover:-translate-y-1 ${\n                  isDarkMode ? 'bg-gray-800 border-gray-700' : 'bg-white'\n                }`}\n                style={{\n                  animationDelay: `${index * 100}ms`,\n                  animation: 'fadeInUp 0.5s ease-out forwards',\n                  opacity: 0\n                }}\n              >\n                <CardHeader className=\"flex flex-row items-center justify-between pb-2\">\n                  <CardTitle className={`text-sm font-medium ${\n                    isDarkMode ? 'text-gray-400' : 'text-gray-600'\n                  }`}>\n                    {metric.label}\n                  </CardTitle>\n                  <div className={`p-2 rounded-lg ${\n                    isDarkMode ? 'bg-gray-700' : 'bg-gray-100'\n                  }`}>\n                    <Icon className={`h-4 w-4 ${\n                      isDarkMode ? 'text-gray-300' : 'text-gray-600'\n                    }`} />\n                  </div>\n                </CardHeader>\n                <CardContent>\n                  <div className={`text-2xl font-bold ${\n                    isDarkMode ? 'text-white' : 'text-gray-900'\n                  }`}>\n                    {metric.label.includes('Revenue') || metric.label.includes('Rate')\n                      ? metric.label.includes('Rate')\n                        ? `${metric.value}%`\n                        : `$${metric.value.toLocaleString()}`\n                      : metric.value.toLocaleString()}\n                  </div>\n                  <div className=\"flex items-center gap-1 mt-2\">\n                    <div className={`flex items-center gap-1 px-2 py-1 rounded-full ${trendBgColor}`}>\n                      <TrendIcon className={`h-3 w-3 ${trendColor}`} />\n                      <span className={`text-xs font-medium ${trendColor}`}>\n                        {Math.abs(metric.change)}%\n                      </span>\n                    </div>\n                    <span className={`text-xs ${\n                      isDarkMode ? 'text-gray-500' : 'text-gray-500'\n                    }`}>\n                      vs last period\n                    </span>\n                  </div>\n                </CardContent>\n              </Card>\n            );\n          })}\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-4 md:gap-6 mb-8\">\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Revenue Overview</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Daily revenue trends\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <ResponsiveContainer width=\"100%\" height={300}>\n                <LineChart data={chartData}>\n                  <CartesianGrid \n                    strokeDasharray=\"3 3\" \n                    stroke={isDarkMode ? '#374151' : '#e5e7eb'} \n                  />\n                  <XAxis \n                    dataKey=\"date\" \n                    stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                    tick={{ fill: isDarkMode ? '#9ca3af' : '#6b7280' }}\n                    tickFormatter={(value) => new Date(value).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n                  />\n                  <YAxis \n                    stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                    tick={{ fill: isDarkMode ? '#9ca3af' : '#6b7280' }}\n                    tickFormatter={(value) => `$${(value / 1000).toFixed(0)}k`}\n                  />\n                  <Tooltip \n                    contentStyle={{\n                      backgroundColor: isDarkMode ? '#1f2937' : '#ffffff',\n                      border: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\n                      borderRadius: '6px',\n                      color: isDarkMode ? '#ffffff' : '#000000'\n                    }}\n                    labelFormatter={(value) => new Date(value).toLocaleDateString('en-US', { month: 'long', day: 'numeric', year: 'numeric' })}\n                    formatter={(value: number) => [`$${value.toLocaleString()}`, 'Revenue']}\n                  />\n                  <Line \n                    type=\"monotone\" \n                    dataKey=\"revenue\" \n                    stroke=\"#3b82f6\" \n                    strokeWidth={2}\n                    dot={{ fill: '#3b82f6', r: 4 }}\n                    activeDot={{ r: 6 }}\n                  />\n                </LineChart>\n              </ResponsiveContainer>\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>User Growth</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Active users over time\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"relative h-64 w-full\">\n                <svg className=\"w-full h-full\" viewBox=\"0 0 700 256\" preserveAspectRatio=\"none\">\n                  <defs>\n                    <linearGradient id=\"userGradient\" x1=\"0%\" y1=\"0%\" x2=\"0%\" y2=\"100%\">\n                      <stop offset=\"0%\" stopColor=\"#3b82f6\" stopOpacity=\"0.4\" />\n                      <stop offset=\"100%\" stopColor=\"#3b82f6\" stopOpacity=\"0.05\" />\n                    </linearGradient>\n                  </defs>\n                  \n                  <motion.path\n                    d={`\n                      M 0,${256 - ((chartData[0].users - minUsers) / (maxUsers - minUsers)) * 200}\n                      ${chartData.map((point, i) => {\n                        const x = (i / (chartData.length - 1)) * 700;\n                        const y = 256 - ((point.users - minUsers) / (maxUsers - minUsers)) * 200;\n                        return `L ${x},${y}`;\n                      }).join(' ')}\n                      L 700,256\n                      L 0,256\n                      Z\n                    `}\n                    fill=\"url(#userGradient)\"\n                    initial={{ opacity: 0 }}\n                    animate={{ opacity: 1 }}\n                    transition={{ duration: 0.8, ease: \"easeOut\" }}\n                  />\n                  \n                  <motion.path\n                    d={`\n                      M 0,${256 - ((chartData[0].users - minUsers) / (maxUsers - minUsers)) * 200}\n                      ${chartData.map((point, i) => {\n                        const x = (i / (chartData.length - 1)) * 700;\n                        const y = 256 - ((point.users - minUsers) / (maxUsers - minUsers)) * 200;\n                        return `L ${x},${y}`;\n                      }).join(' ')}\n                    `}\n                    fill=\"none\"\n                    stroke=\"#3b82f6\"\n                    strokeWidth=\"3\"\n                    strokeLinecap=\"round\"\n                    strokeLinejoin=\"round\"\n                    initial={{ pathLength: 0 }}\n                    animate={{ pathLength: 1 }}\n                    transition={{ duration: 1.5, ease: \"easeInOut\" }}\n                  />\n                  \n                  {chartData.map((point, i) => {\n                    const x = (i / (chartData.length - 1)) * 700;\n                    const y = 256 - ((point.users - minUsers) / (maxUsers - minUsers)) * 200;\n                    return (\n                      <motion.g key={i}>\n                        <motion.circle\n                          cx={x}\n                          cy={y}\n                          r=\"5\"\n                          fill=\"#3b82f6\"\n                          initial={{ scale: 0 }}\n                          animate={{ scale: 1 }}\n                          transition={{ duration: 0.3, delay: 0.1 * i }}\n                        />\n                        <motion.circle\n                          cx={x}\n                          cy={y}\n                          r=\"8\"\n                          fill=\"none\"\n                          stroke=\"#3b82f6\"\n                          strokeWidth=\"2\"\n                          opacity=\"0\"\n                          whileHover={{ opacity: 1, scale: 1.5 }}\n                        />\n                      </motion.g>\n                    );\n                  })}\n                </svg>\n                \n                <div className=\"flex justify-between mt-4 px-2\">\n                  {chartData.map((point, i) => (\n                    <motion.div\n                      key={i}\n                      className=\"text-center\"\n                      initial={{ opacity: 0, y: 10 }}\n                      animate={{ opacity: 1, y: 0 }}\n                      transition={{ duration: 0.5, delay: 0.1 * i }}\n                    >\n                      <div className={`text-xs ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                        {new Date(point.date).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n                      </div>\n                      <div className={`text-sm font-semibold mt-1 ${isDarkMode ? 'text-blue-400' : 'text-blue-600'}`}>\n                        {point.users}\n                      </div>\n                    </motion.div>\n                  ))}\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-4 md:gap-6 mb-8\">\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Orders Distribution</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                By product category\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <ResponsiveContainer width=\"100%\" height={300}>\n                <PieChart>\n                  <Pie\n                    data={pieData}\n                    cx=\"50%\"\n                    cy=\"50%\"\n                    labelLine={false}\n                    label={({ name, percent }) => `${name}: ${(percent * 100).toFixed(0)}%`}\n                    outerRadius={80}\n                    fill=\"#8884d8\"\n                    dataKey=\"value\"\n                    animationBegin={0}\n                    animationDuration={800}\n                  >\n                    {pieData.map((entry, index) => (\n                      <Cell key={`cell-${index}`} fill={entry.color} />\n                    ))}\n                  </Pie>\n                  <RechartsTooltip\n                    contentStyle={{\n                      backgroundColor: isDarkMode ? '#1f2937' : '#ffffff',\n                      border: isDarkMode ? '1px solid #374151' : '1px solid #e5e7eb',\n                      borderRadius: '6px',\n                      color: isDarkMode ? '#ffffff' : '#000000'\n                    }}\n                  />\n                  <Legend\n                    verticalAlign=\"bottom\"\n                    height={36}\n                    iconType=\"circle\"\n                    wrapperStyle={{\n                      color: isDarkMode ? '#9ca3af' : '#6b7280'\n                    }}\n                  />\n                </PieChart>\n              </ResponsiveContainer>\n            </CardContent>\n          </Card>\n\n          <Card className={`lg:col-span-2 ${isDarkMode ? 'bg-gray-800 border-gray-700' : ''}`}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Performance Metrics</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Combined view of key indicators\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <ResponsiveContainer width=\"100%\" height={300}>\n                <BarChart data={chartData}>\n                  <CartesianGrid strokeDasharray=\"3 3\" stroke={isDarkMode ? '#374151' : '#e5e7eb'} />\n                  <XAxis \n                    dataKey=\"date\" \n                    stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                    tick={{ fill: isDarkMode ? '#9ca3af' : '#6b7280', fontSize: 12 }}\n                    tickFormatter={(value) => new Date(value).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n                  />\n                  <YAxis \n                    stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                    tick={{ fill: isDarkMode ? '#9ca3af' : '#6b7280', fontSize: 12 }}\n                  />\n                  <Tooltip content={<CustomBarTooltip />} />\n                  <Legend \n                    wrapperStyle={{ \n                      paddingTop: '20px',\n                      color: isDarkMode ? '#e5e7eb' : '#374151'\n                    }}\n                  />\n                  <Bar \n                    dataKey=\"revenue\" \n                    name=\"Revenue\"\n                    fill=\"#3b82f6\" \n                    radius={[4, 4, 0, 0]}\n                    animationDuration={800}\n                  />\n                  <Bar \n                    dataKey=\"users\" \n                    name=\"Users\"\n                    fill=\"#10b981\" \n                    radius={[4, 4, 0, 0]}\n                    animationDuration={800}\n                  />\n                  <Bar \n                    dataKey=\"orders\" \n                    name=\"Orders\"\n                    fill=\"#f59e0b\" \n                    radius={[4, 4, 0, 0]}\n                    animationDuration={800}\n                  />\n                </BarChart>\n              </ResponsiveContainer>\n            </CardContent>\n          </Card>\n        </div>\n\n        <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n          <CardHeader>\n            <CardTitle className={isDarkMode ? 'text-white' : ''}>Top Products</CardTitle>\n            <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n              Best performing products by revenue\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"overflow-x-auto\">\n              <table className=\"w-full\">\n                <thead>\n                  <tr className={`border-b ${isDarkMode ? 'border-gray-700' : 'border-gray-200'}`}>\n                    <th \n                      className={`text-left p-3 font-semibold cursor-pointer hover:bg-opacity-50 ${\n                        isDarkMode ? 'text-gray-300 hover:bg-gray-700' : 'text-gray-700 hover:bg-gray-100'\n                      }`}\n                      onClick={() => handleSort('product')}\n                    >\n                      Product {getSortIcon('product')}\n                    </th>\n                    <th \n                      className={`text-right p-3 font-semibold cursor-pointer hover:bg-opacity-50 ${\n                        isDarkMode ? 'text-gray-300 hover:bg-gray-700' : 'text-gray-700 hover:bg-gray-100'\n                      }`}\n                      onClick={() => handleSort('sales')}\n                    >\n                      Sales {getSortIcon('sales')}\n                    </th>\n                    <th \n                      className={`text-right p-3 font-semibold cursor-pointer hover:bg-opacity-50 ${\n                        isDarkMode ? 'text-gray-300 hover:bg-gray-700' : 'text-gray-700 hover:bg-gray-100'\n                      }`}\n                      onClick={() => handleSort('revenue')}\n                    >\n                      Revenue {getSortIcon('revenue')}\n                    </th>\n                    <th \n                      className={`text-center p-3 font-semibold cursor-pointer hover:bg-opacity-50 ${\n                        isDarkMode ? 'text-gray-300 hover:bg-gray-700' : 'text-gray-700 hover:bg-gray-100'\n                      }`}\n                      onClick={() => handleSort('status')}\n                    >\n                      Status {getSortIcon('status')}\n                    </th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {paginatedData.map((row, index) => (\n                    <tr \n                      key={row.id}\n                      className={`border-b transition-colors ${\n                        isDarkMode \n                          ? 'border-gray-700 hover:bg-gray-700' \n                          : 'border-gray-100 hover:bg-gray-50'\n                      }`}\n                    >\n                      <td className={`p-3 font-medium ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                        {row.product}\n                      </td>\n                      <td className={`p-3 text-right ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>\n                        {row.sales.toLocaleString()}\n                      </td>\n                      <td className={`p-3 text-right font-semibold ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>\n                        ${row.revenue.toLocaleString()}\n                      </td>\n                      <td className=\"p-3 text-center\">\n                        {getStatusBadge(row.status)}\n                      </td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            </div>\n\n            {totalPages > 1 && (\n              <div className=\"flex flex-col sm:flex-row justify-between items-center gap-4 mt-6 pt-4 border-t border-gray-200 dark:border-gray-700\">\n                <div className={`text-sm ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                  Showing {(currentPage - 1) * itemsPerPage + 1} to {Math.min(currentPage * itemsPerPage, sortedTableData.length)} of {sortedTableData.length} products\n                </div>\n                \n                <div className=\"flex gap-2\">\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => setCurrentPage(prev => Math.max(1, prev - 1))}\n                    disabled={currentPage === 1}\n                    className={isDarkMode ? 'border-gray-700' : ''}\n                  >\n                    Previous\n                  </Button>\n                  \n                  <div className=\"flex gap-1\">\n                    {Array.from({ length: totalPages }, (_, i) => i + 1).map(page => (\n                      <Button\n                        key={page}\n                        variant={currentPage === page ? 'default' : 'outline'}\n                        size=\"sm\"\n                        onClick={() => setCurrentPage(page)}\n                        className={`w-10 ${isDarkMode && currentPage !== page ? 'border-gray-700' : ''}`}\n                      >\n                        {page}\n                      </Button>\n                    ))}\n                  </div>\n                  \n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => setCurrentPage(prev => Math.min(totalPages, prev + 1))}\n                    disabled={currentPage === totalPages}\n                    className={isDarkMode ? 'border-gray-700' : ''}\n                  >\n                    Next\n                  </Button>\n                </div>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 md:gap-6 mt-8\">\n          {realtimeIndicators.map((indicator) => {\n            const IconComponent = indicator.icon;\n            return (\n              <Card \n                key={indicator.id} \n                className={`${isDarkMode ? 'bg-gray-800 border-gray-700' : ''} relative overflow-hidden`}\n              >\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center gap-3\">\n                      <div className={`relative ${indicator.bgColor} p-3 rounded-lg`}>\n                        <IconComponent className={`h-5 w-5 ${indicator.color}`} />\n                        {/* Pulse animation */}\n                        <span className={`absolute inset-0 rounded-lg ${indicator.bgColor} animate-ping opacity-75`}></span>\n                      </div>\n                      <div>\n                        <p className={`text-sm font-medium ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                          {indicator.label}\n                        </p>\n                        <p className={`text-lg font-semibold ${isDarkMode ? 'text-white' : 'text-gray-900'} capitalize`}>\n                          {indicator.status}\n                        </p>\n                      </div>\n                    </div>\n                    <div className={`flex items-center gap-2 ${indicator.color}`}>\n                      <div className=\"relative\">\n                        <div className={`w-2 h-2 rounded-full ${indicator.color.replace('text-', 'bg-')}`}></div>\n                        <div className={`absolute inset-0 w-2 h-2 rounded-full ${indicator.color.replace('text-', 'bg-')} animate-ping`}></div>\n                      </div>\n                      <span className=\"text-xs font-medium\">Live</span>\n                    </div>\n                  </div>\n                  <div className={`mt-4 pt-4 border-t ${isDarkMode ? 'border-gray-700' : 'border-gray-200'}`}>\n                    <div className=\"flex items-center justify-between\">\n                      <span className={`text-xs ${isDarkMode ? 'text-gray-500' : 'text-gray-500'}`}>\n                        Last updated\n                      </span>\n                      <span className={`text-xs font-mono ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                        {formatTimestamp(lastUpdate)}\n                      </span>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            );\n          })}\n        </div>\n      </div>\n    </div>\n  );\n}",
    "error": null,
    "elapsed_time": 79.34771132469177,
    "success": true
  }
}