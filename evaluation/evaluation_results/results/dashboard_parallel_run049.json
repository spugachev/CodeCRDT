{
  "prompt_id": "dashboard",
  "prompt_name": "Analytics Dashboard",
  "mode": "parallel",
  "run_number": 49,
  "timestamp": "2025-10-14T09:53:14.605229",
  "response_time": 334.6965956687927,
  "total_tokens": null,
  "response_content": ": ''}>\n                Breakdown by category\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"h-[300px] w-full\">\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <PieChart>\n                    <Pie\n                      data={mockPieData}\n                      cx=\"50%\"\n                      cy=\"50%\"\n                      labelLine={false}\n                      label={({ name, percent }) => `${name} ${(percent * 100).toFixed(0)}%`}\n                      outerRadius={80}\n                      fill=\"#8884d8\"\n                      dataKey=\"value\"\n                    >\n                      {mockPieData.map((entry, index) => (\n                        <Cell key={`cell-${index}`} fill={entry.color} />\n                      ))}\n                    </Pie>\n                    <Tooltip \n                      contentStyle={{\n                        backgroundColor: isDarkMode ? '#1f2937' : '#ffffff',\n                        border: isDarkMode ? '1px solid #374151' : '1px solid #e5e7eb',\n                        borderRadius: '6px',\n                        color: isDarkMode ? '#ffffff' : '#000000'\n                      }}\n                    />\n                    <Legend \n                      verticalAlign=\"bottom\" \n                      height={36}\n                      iconType=\"circle\"\n                      formatter={(value) => (\n                        <span className={isDarkMode ? 'text-gray-300' : 'text-gray-700'}>\n                          {value}\n                        </span>\n                      )}\n                    />\n                  </PieChart>\n                </ResponsiveContainer>\n              </div>nd and percentages */}\n            </CardContent>\n          </Card>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-4 md:gap-6 mb-8\">\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Performance Metrics</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Key performance indicators\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {[\n                  { label: 'Customer Satisfaction', value: 92, max: 100, color: 'bg-green-500' },\n                  { label: 'Response Time', value: 78, max: 100, color: 'bg-blue-500' },\n                  { label: 'Task Completion', value: 85, max: 100, color: 'bg-purple-500' },\n                  { label: 'System Uptime', value: 99, max: 100, color: 'bg-emerald-500' }\n                ].map((metric, index) => (\n                  <div key={index} className=\"space-y-2\">\n                    <div className=\"flex justify-between items-center\">\n                      <span className={`text-sm font-medium ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>\n                        {metric.label}\n                      </span>\n                      <span className={`text-sm font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                        {metric.value}%\n                      </span>\n                    </div>\n                    <div className={`w-full h-3 rounded-full overflow-hidden ${isDarkMode ? 'bg-gray-700' : 'bg-gray-200'}`}>\n                      <div\n                        className={`h-full ${metric.color} transition-all duration-500 ease-out`}\n                        style={{ width: `${(metric.value / metric.max) * 100}%` }}\n                      />\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Activity Timeline</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Recent activity and events\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {mockActivityData.map((event, index) => {\n                  const getIcon = () => {\n                    switch (event.icon) {\n                      case 'check':\n                        return <CheckCircle className=\"h-5 w-5\" />;\n                      case 'clock':\n                        return <Clock className=\"h-5 w-5\" />;\n                      case 'alert':\n                        return <AlertCircle className=\"h-5 w-5\" />;\n                      case 'user':\n                        return <UserPlus className=\"h-5 w-5\" />;\n                      case 'file':\n                        return <FileText className=\"h-5 w-5\" />;\n                      case 'settings':\n                        return <Settings className=\"h-5 w-5\" />;\n                      default:\n                        return <Clock className=\"h-5 w-5\" />;\n                    }\n                  };\n\n                  const getIconColor = () => {\n                    switch (event.type) {\n                      case 'success':\n                        return 'text-green-500 bg-green-100 dark:bg-green-900/30';\n                      case 'pending':\n                        return 'text-blue-500 bg-blue-100 dark:bg-blue-900/30';\n                      case 'warning':\n                        return 'text-orange-500 bg-orange-100 dark:bg-orange-900/30';\n                      case 'info':\n                        return 'text-purple-500 bg-purple-100 dark:bg-purple-900/30';\n                      default:\n                        return 'text-gray-500 bg-gray-100 dark:bg-gray-800';\n                    }\n                  };\n\n                  const formatTimestamp = (timestamp: string) => {\n                    const date = new Date(timestamp);\n                    const now = new Date();\n                    const diffMs = now.getTime() - date.getTime();\n                    const diffMins = Math.floor(diffMs / 60000);\n                    const diffHours = Math.floor(diffMs / 3600000);\n                    const diffDays = Math.floor(diffMs / 86400000);\n\n                    if (diffMins < 60) {\n                      return `${diffMins}m ago`;\n                    } else if (diffHours < 24) {\n                      return `${diffHours}h ago`;\n                    } else {\n                      return `${diffDays}d ago`;\n                    }\n                  };\n\n                  return (\n                    <div key={event.id} className=\"flex gap-3 relative\">\n                      {index !== mockActivityData.length - 1 && (\n                        <div\n                          className={`absolute left-5 top-10 w-0.5 h-full ${\n                            isDarkMode ? 'bg-gray-700' : 'bg-gray-200'\n                          }`}\n                        />\n                      )}\n                      <div\n                        className={`flex-shrink-0 w-10 h-10 rounded-full flex items-center justify-center ${getIconColor()} relative z-10`}\n                      >\n                        {getIcon()}\n                      </div>\n                      <div className=\"flex-1 pt-1\">\n                        <div className=\"flex items-start justify-between gap-2\">\n                          <div>\n                            <h4\n                              className={`font-semibold text-sm ${\n                                isDarkMode ? 'text-white' : 'text-gray-900'\n                              }`}\n                            >\n                              {event.title}\n                            </h4>\n                            <p\n                              className={`text-sm mt-0.5 ${\n                                isDarkMode ? 'text-gray-400' : 'text-gray-600'\n                              }`}\n                            >\n                              {event.description}\n                            </p>\n                          </div>\n                          <span\n                            className={`text-xs whitespace-nowrap ${\n                              isDarkMode ? 'text-gray-500' : 'text-gray-500'\n                            }`}\n                          >\n                            {formatTimestamp(event.timestamp)}\n                          </span>\n                        </div>\n                      </div>\n                    </div>\n                  );\n                })}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n          <CardHeader>\n            <div className=\"flex flex-col md:flex-row justify-between items-start md:items-center gap-4\">\n              <div>\n                <CardTitle className={isDarkMode ? 'text-white' : ''}>Recent Projects</CardTitle>\n                <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                  Overview of project status and values\n                </CardDescription>\n              </div>\n              <div className=\"flex flex-col sm:flex-row gap-3\">\n                <div className=\"relative flex-1\">\n                  <Search className={`absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 ${isDarkMode ? 'text-gray-400' : 'text-gray-500'}`} />\n                  <Input\n                    type=\"text\"\n                    placeholder=\"Search projects...\"\n                    value={searchQuery}\n                    onChange={(e) => setSearchQuery(e.target.value)}\n                    className={`pl-10 ${isDarkMode ? 'bg-gray-700 border-gray-600 text-white placeholder:text-gray-400' : ''}`}\n                  />\n                </div>\n                <Select value={statusFilter} onValueChange={(value: 'all' | 'active' | 'pending' | 'completed') => setStatusFilter(value)}>\n                  <SelectTrigger className={`w-full sm:w-[180px] ${isDarkMode ? 'bg-gray-700 border-gray-600 text-white' : ''}`}>\n                    <SelectValue placeholder=\"Filter by status\" />\n                  </SelectTrigger>\n                  <SelectContent className={isDarkMode ? 'bg-gray-700 border-gray-600' : ''}>\n                    <SelectItem value=\"all\" className={isDarkMode ? 'text-white focus:bg-gray-600' : ''}>All Status</SelectItem>\n                    <SelectItem value=\"active\" className={isDarkMode ? 'text-white focus:bg-gray-600' : ''}>Active</SelectItem>\n                    <SelectItem value=\"pending\" className={isDarkMode ? 'text-white focus:bg-gray-600' : ''}>Pending</SelectItem>\n                    <SelectItem value=\"completed\" className={isDarkMode ? 'text-white focus:bg-gray-600' : ''}>Completed</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              <div className=\"overflow-x-auto\">\n                <Table>\n                  <TableHeader>\n                    <TableRow className={isDarkMode ? 'border-gray-700' : ''}>\n                      <TableHead className={isDarkMode ? 'text-gray-300' : ''}>\n                        <button\n                          onClick={() => handleSort('name')}\n                          className=\"flex items-center gap-1 hover:text-primary transition-colors\"\n                        >\n                          Project Name\n                          {sortConfig?.key === 'name' ? (\n                            sortConfig.direction === 'asc' ? (\n                              <ChevronUp className=\"h-4 w-4\" />\n                            ) : (\n                              <ChevronDown className=\"h-4 w-4\" />\n                            )\n                          ) : (\n                            <ChevronsUpDown className=\"h-4 w-4 opacity-50\" />\n                          )}\n                        </button>\n                      </TableHead>\n                      <TableHead className={isDarkMode ? 'text-gray-300' : ''}>\n                        <button\n                          onClick={() => handleSort('status')}\n                          className=\"flex items-center gap-1 hover:text-primary transition-colors\"\n                        >\n                          Status\n                          {sortConfig?.key === 'status' ? (\n                            sortConfig.direction === 'asc' ? (\n                              <ChevronUp className=\"h-4 w-4\" />\n                            ) : (\n                              <ChevronDown className=\"h-4 w-4\" />\n                            )\n                          ) : (\n                            <ChevronsUpDown className=\"h-4 w-4 opacity-50\" />\n                          )}\n                        </button>\n                      </TableHead>\n                      <TableHead className={isDarkMode ? 'text-gray-300' : ''}>\n                        <button\n                          onClick={() => handleSort('value')}\n                          className=\"flex items-center gap-1 hover:text-primary transition-colors\"\n                        >\n                          Value\n                          {sortConfig?.key === 'value' ? (\n                            sortConfig.direction === 'asc' ? (\n                              <ChevronUp className=\"h-4 w-4\" />\n                            ) : (\n                              <ChevronDown className=\"h-4 w-4\" />\n                            )\n                          ) : (\n                            <ChevronsUpDown className=\"h-4 w-4 opacity-50\" />\n                          )}\n                        </button>\n                      </TableHead>\n                      <TableHead className={isDarkMode ? 'text-gray-300' : ''}>\n                        <button\n                          onClick={() => handleSort('date')}\n                          className=\"flex items-center gap-1 hover:text-primary transition-colors\"\n                        >\n                          Date\n                          {sortConfig?.key === 'date' ? (\n                            sortConfig.direction === 'asc' ? (\n                              <ChevronUp className=\"h-4 w-4\" />\n                            ) : (\n                              <ChevronDown className=\"h-4 w-4\" />\n                            )\n                          ) : (\n                            <ChevronsUpDown className=\"h-4 w-4 opacity-50\" />\n                          )}\n                        </button>\n                      </TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {paginatedData().length === 0 ? (\n                      <TableRow>\n                        <TableCell colSpan={4} className=\"text-center py-8\">\n                          <p className={isDarkMode ? 'text-gray-400' : 'text-gray-500'}>\n                            No projects found\n                          </p>\n                        </TableCell>\n                      </TableRow>\n                    ) : (\n                      paginatedData().map((row) => (\n                        <TableRow \n                          key={row.id}\n                          className={isDarkMode ? 'border-gray-700 hover:bg-gray-750' : 'hover:bg-gray-50'}\n                        >\n                          <TableCell className={isDarkMode ? 'text-gray-200' : ''}>\n                            {row.name}\n                          </TableCell>\n                          <TableCell>\n                            <Badge\n                              variant={\n                                row.status === 'active' \n                                  ? 'default' \n                                  : row.status === 'completed' \n                                  ? 'secondary' \n                                  : 'outline'\n                              }\n                              className={\n                                row.status === 'active'\n                                  ? 'bg-green-500 hover:bg-green-600'\n                                  : row.status === 'completed'\n                                  ? 'bg-blue-500 hover:bg-blue-600'\n                                  : isDarkMode\n                                  ? 'border-yellow-500 text-yellow-500'\n                                  : 'border-yellow-600 text-yellow-600'\n                              }\n                            >\n                              {row.status.charAt(0).toUpperCase() + row.status.slice(1)}\n                            </Badge>\n                          </TableCell>\n                          <TableCell className={isDarkMode ? 'text-gray-200' : ''}>\n                            ${row.value.toLocaleString()}\n                          </TableCell>\n                          <TableCell className={isDarkMode ? 'text-gray-400' : 'text-gray-600'}>\n                            {new Date(row.date).toLocaleDateString('en-US', {\n                              year: 'numeric',\n                              month: 'short',\n                              day: 'numeric'\n                            })}\n                          </TableCell>\n                        </TableRow>\n                      ))\n                    )}\n                  </TableBody>\n                </Table>\n              </div>\n\n              {totalPages > 1 && (\n                <div className=\"flex items-center justify-between\">\n                  <p className={`text-sm ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                    Showing {((currentPage - 1) * itemsPerPage) + 1} to {Math.min(currentPage * itemsPerPage, filteredAndSortedData().length)} of {filteredAndSortedData().length} results\n                  </p>\n                  <div className=\"flex items-center gap-2\">\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => setCurrentPage(prev => Math.max(1, prev - 1))}\n                      disabled={currentPage === 1}\n                      className={isDarkMode ? 'border-gray-600 text-gray-300 hover:bg-gray-700' : ''}\n                    >\n                      Previous\n                    </Button>\n                    <div className=\"flex items-center gap-1\">\n                      {Array.from({ length: totalPages }, (_, i) => i + 1).map(page => (\n                        <Button\n                          key={page}\n                          variant={currentPage === page ? 'default' : 'outline'}\n                          size=\"sm\"\n                          onClick={() => setCurrentPage(page)}\n                          className={\n                            currentPage === page \n                              ? '' \n                              : isDarkMode \n                              ? 'border-gray-600 text-gray-300 hover:bg-gray-700' \n                              : ''\n                          }\n                        >\n                          {page}\n                        </Button>\n                      ))}\n                    </div>\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => setCurrentPage(prev => Math.min(totalPages, prev + 1))}\n                      disabled={currentPage === totalPages}\n                      className={isDarkMode ? 'border-gray-600 text-gray-300 hover:bg-gray-700' : ''}\n                    >\n                      Next\n                    </Button>\n                  </div>\n                </div>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\nimport { useState, useCallback } from 'react';\nimport { Badge } from '@/components/ui/badge';\nimport { Input } from '@/components/ui/input';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\nimport { ChevronUp, ChevronDown, ChevronsUpDown } from 'lucide-react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Moon, Sun } from 'lucide-react';\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nimport { CheckCircle, Clock, AlertCircle, UserPlus, FileText, Settings } from 'lucide-react';\n\n\n\nimport { PieChart, Pie, Cell, ResponsiveContainer, Legend, Tooltip } from 'recharts';\nimport { Input } from '@/components/ui/input';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Search } from 'lucide-react';\nimport { motion } from 'framer-motion';\nimport { TrendingUp, TrendingDown } from 'lucide-react';\nimport { motion } from 'framer-motion';\nimport { RefreshCw } from 'lucide-react';\n\ninterface MetricData {\n  id: string;\n  label: string;\n  value: number;\n  change: number;\n  trend: 'up' | 'down';\n}\n\ninterface ChartDataPoint {\n  timestamp: string;\n  value: number;\n  category: string;\n}\n\ninterface TableRow {\n  id: string;\n  name: string;\n  status: 'active' | 'pending' | 'completed';\n  value: number;\n  date: string;\n}\n\ninterface ActivityEvent {\n  id: string;\n  type: 'success' | 'pending' | 'warning' | 'info';\n  title: string;\n  description: string;\n  timestamp: string;\n  icon: 'check' | 'clock' | 'alert' | 'user' | 'file' | 'settings';\n}\n\nconst mockMetrics: MetricData[] = [\n  { id: '1', label: 'Total Revenue', value: 45231, change: 12.5, trend: 'up' },\n  { id: '2', label: 'Active Users', value: 2350, change: 8.2, trend: 'up' },\n  { id: '3', label: 'Conversion Rate', value: 3.24, change: -2.1, trend: 'down' },\n  { id: '4', label: 'Avg Session', value: 4.8, change: 5.3, trend: 'up' }\n];\n\nconst mockChartData: ChartDataPoint[] = [\n  { timestamp: '2024-01-01', value: 4200, category: 'Sales' },\n  { timestamp: '2024-01-02', value: 3800, category: 'Sales' },\n  { timestamp: '2024-01-03', value: 5100, category: 'Sales' },\n  { timestamp: '2024-01-04', value: 4600, category: 'Sales' },\n  { timestamp: '2024-01-05', value: 5400, category: 'Sales' },\n  { timestamp: '2024-01-06', value: 6200, category: 'Sales' },\n  { timestamp: '2024-01-07', value: 5800, category: 'Sales' }\n];\n\nconst mockTableData: TableRow[] = [\n  { id: '1', name: 'Project Alpha', status: 'active', value: 12500, date: '2024-01-15' },\n  { id: '2', name: 'Project Beta', status: 'completed', value: 8900, date: '2024-01-14' },\n  { id: '3', name: 'Project Gamma', status: 'pending', value: 15200, date: '2024-01-13' },\n  { id: '4', name: 'Project Delta', status: 'active', value: 9800, date: '2024-01-12' },\n  { id: '5', name: 'Project Epsilon', status: 'completed', value: 11300, date: '2024-01-11' }\n];\ninterface PieChartData {\n  name: string;\n  value: number;\n  color: string;\n}\n\nconst mockPieData: PieChartData[] = [\n  { name: 'Sales', value: 35, color: '#3b82f6' },\n  { name: 'Marketing', value: 25, color: '#8b5cf6' },\n  { name: 'Operations', value: 20, color: '#10b981' },\n  { name: 'Support', value: 15, color: '#f59e0b' },\n  { name: 'Other', value: 5, color: '#6b7280' }\n];\n\nconst mockActivityData: ActivityEvent[] = [\n  {\n    id: '1',\n    type: 'success',\n    title: 'Project Completed',\n    description: 'Project Beta has been successfully completed',\n    timestamp: '2024-01-15T10:30:00',\n    icon: 'check'\n  },\n  {\n    id: '2',\n    type: 'info',\n    title: 'New User Registered',\n    description: 'John Doe joined the platform',\n    timestamp: '2024-01-15T09:15:00',\n    icon: 'user'\n  },\n  {\n    id: '3',\n    type: 'pending',\n    title: 'Report Generation',\n    description: 'Monthly analytics report is being generated',\n    timestamp: '2024-01-15T08:45:00',\n    icon: 'file'\n  },\n  {\n    id: '4',\n    type: 'warning',\n    title: 'System Alert',\n    description: 'Server load exceeded 80% threshold',\n    timestamp: '2024-01-15T07:20:00',\n    icon: 'alert'\n  },\n  {\n    id: '5',\n    type: 'info',\n    title: 'Settings Updated',\n    description: 'Dashboard preferences have been modified',\n    timestamp: '2024-01-14T16:30:00',\n    icon: 'settings'\n  }\n];\n\nconst LineChart = ({ data, isDarkMode }: { data: ChartDataPoint[], isDarkMode: boolean }) => {\n  const [hoveredPoint, setHoveredPoint] = useState<number | null>(null);\n  const [tooltipPosition, setTooltipPosition] = useState({ x: 0, y: 0 });\n\n  const width = 100; // percentage\n  const height = 300;\n  const padding = { top: 20, right: 20, bottom: 40, left: 50 };\n\n  const maxValue = Math.max(...data.map(d => d.value));\n  const minValue = Math.min(...data.map(d => d.value));\n  const valueRange = maxValue - minValue;\n\n  const chartWidth = width - padding.left - padding.right;\n  const chartHeight = height - padding.top - padding.bottom;\n\n  const getX = (index: number) => {\n    return (index / (data.length - 1)) * chartWidth;\n  };\n\n  const getY = (value: number) => {\n    return chartHeight - ((value - minValue) / valueRange) * chartHeight;\n  };\n\n  const pathData = data.map((point, index) => {\n    const x = getX(index);\n    const y = getY(point.value);\n    return `${index === 0 ? 'M' : 'L'} ${x} ${y}`;\n  }).join(' ');\n\n  const gradientPathData = `${pathData} L ${getX(data.length - 1)} ${chartHeight} L 0 ${chartHeight} Z`;\n\n  const handlePointHover = (index: number, event: React.MouseEvent) => {\n    setHoveredPoint(index);\n    const rect = event.currentTarget.getBoundingClientRect();\n    setTooltipPosition({ x: event.clientX - rect.left, y: event.clientY - rect.top });\n  };\n\n  return (\n    <div className=\"relative w-full\" style={{ height: `${height}px` }}>\n      <svg\n        viewBox={`0 0 ${width} ${height}`}\n        preserveAspectRatio=\"none\"\n        className=\"w-full h-full\"\n      >\n        <defs>\n          <linearGradient id=\"chartGradient\" x1=\"0%\" y1=\"0%\" x2=\"0%\" y2=\"100%\">\n            <stop offset=\"0%\" stopColor={isDarkMode ? '#3b82f6' : '#60a5fa'} stopOpacity=\"0.4\" />\n            <stop offset=\"100%\" stopColor={isDarkMode ? '#3b82f6' : '#60a5fa'} stopOpacity=\"0.05\" />\n          </linearGradient>\n        </defs>\n\n        <g transform={`translate(${padding.left}, ${padding.top})`}>\n          {/* Grid lines */}\n          {[0, 1, 2, 3, 4].map((i) => {\n            const y = (chartHeight / 4) * i;\n            return (\n              <line\n                key={i}\n                x1=\"0\"\n                y1={y}\n                x2={chartWidth}\n                y2={y}\n                stroke={isDarkMode ? '#374151' : '#e5e7eb'}\n                strokeWidth=\"1\"\n              />\n            );\n          })}\n\n          {/* Gradient area */}\n          <motion.path\n            d={gradientPathData}\n            fill=\"url(#chartGradient)\"\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            transition={{ duration: 0.5 }}\n          />\n\n          {/* Line */}\n          <motion.path\n            d={pathData}\n            fill=\"none\"\n            stroke={isDarkMode ? '#3b82f6' : '#2563eb'}\n            strokeWidth=\"2.5\"\n            strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n            initial={{ pathLength: 0 }}\n            animate={{ pathLength: 1 }}\n            transition={{ duration: 1, ease: \"easeInOut\" }}\n          />\n\n          {/* Data points */}\n          {data.map((point, index) => {\n            const x = getX(index);\n            const y = getY(point.value);\n            return (\n              <motion.circle\n                key={index}\n                cx={x}\n                cy={y}\n                r={hoveredPoint === index ? 6 : 4}\n                fill={isDarkMode ? '#3b82f6' : '#2563eb'}\n                stroke={isDarkMode ? '#1f2937' : '#ffffff'}\n                strokeWidth=\"2\"\n                initial={{ scale: 0 }}\n                animate={{ scale: 1 }}\n                transition={{ duration: 0.3, delay: index * 0.05 }}\n                onMouseEnter={(e) => handlePointHover(index, e)}\n                onMouseLeave={() => setHoveredPoint(null)}\n                className=\"cursor-pointer\"\n                style={{ pointerEvents: 'all' }}\n              />\n            );\n          })}\n\n          {/* Y-axis labels */}\n          {[0, 1, 2, 3, 4].map((i) => {\n            const y = (chartHeight / 4) * i;\n            const value = maxValue - (valueRange / 4) * i;\n            return (\n              <text\n                key={i}\n                x=\"-10\"\n                y={y}\n                textAnchor=\"end\"\n                dominantBaseline=\"middle\"\n                className={`text-xs ${isDarkMode ? 'fill-gray-400' : 'fill-gray-600'}`}\n              >\n                {value.toFixed(0)}\n              </text>\n            );\n          })}\n\n          {/* X-axis labels */}\n          {data.map((point, index) => {\n            if (index % Math.ceil(data.length / 6) === 0 || index === data.length - 1) {\n              const x = getX(index);\n              const date = new Date(point.timestamp);\n              const label = `${date.getMonth() + 1}/${date.getDate()}`;\n              return (\n                <text\n                  key={index}\n                  x={x}\n                  y={chartHeight + 20}\n                  textAnchor=\"middle\"\n                  className={`text-xs ${isDarkMode ? 'fill-gray-400' : 'fill-gray-600'}`}\n                >\n                  {label}\n                </text>\n              );\n            }\n            return null;\n          })}\n        </g>\n      </svg>\n\n      {/* Tooltip */}\n      {hoveredPoint !== null && (\n        <motion.div\n          initial={{ opacity: 0, scale: 0.8 }}\n          animate={{ opacity: 1, scale: 1 }}\n          className={`absolute pointer-events-none z-10 px-3 py-2 rounded-lg shadow-lg ${\n            isDarkMode ? 'bg-gray-700 border border-gray-600' : 'bg-white border border-gray-200'\n          }`}\n          style={{\n            left: `${tooltipPosition.x}px`,\n            top: `${tooltipPosition.y - 60}px`,\n            transform: 'translateX(-50%)'\n          }}\n        >\n          <div className={`text-xs font-semibold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n            ${data[hoveredPoint].value.toLocaleString()}\n          </div>\n          <div className={`text-xs ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n            {new Date(data[hoveredPoint].timestamp).toLocaleDateString()}\n          </div>\n        </motion.div>\n      )}\n    </div>\n  );\n};\n\nexport default function AnalyticsDashboard() {\n  const [isDarkMode, setIsDarkMode] = useState(false);\n  const [isRefreshing, setIsRefreshing] = useState(false);\n  const [metrics, setMetrics] = useState<MetricData[]>(mockMetrics);\n  const [chartData, setChartData] = useState<ChartDataPoint[]>(mockChartData);\n  const [tableData, setTableData] = useState<TableRow[]>(mockTableData);\n  const [selectedTimeRange, setSelectedTimeRange] = useState<'7d' | '30d' | '90d'>('7d');\n  const [searchQuery, setSearchQuery] = useState('');\n  const [statusFilter, setStatusFilter] = useState<'all' | 'active' | 'pending' | 'completed'>('all');\n\n  const toggleDarkMode = useCallback(() => {\n    setIsDarkMode(prev => !prev);\n  }, []);\n\n  const handleTimeRangeChange = useCallback((range: '7d' | '30d' | '90d') => {\n    setSelectedTimeRange(range);\n        // Simulate filtering chart data based on time range\n    const daysMap = { '7d': 7, '30d': 30, '90d': 90 };\n    const days = daysMap[range];\n    \n    // Generate mock data for the selected time range\n    const today = new Date('2024-01-07');\n    const filteredData: ChartDataPoint[] = [];\n    \n    for (let i = days - 1; i >= 0; i--) {\n      const date = new Date(today);\n      date.setDate(date.getDate() - i);\n      const timestamp = date.toISOString().split('T')[0];\n      const baseValue = 4000 + Math.random() * 2000;\n      filteredData.push({\n        timestamp,\n        value: Math.round(baseValue),\n        category: 'Sales'\n      });\n    }\n    \n    setChartData(filteredData);</parameter>\n  }, []);\n\n  const [searchQuery, setSearchQuery] = useState('');\n  const [statusFilter, setStatusFilter] = useState<'all' | 'active' | 'pending' | 'completed'>('all');\n  const [sortConfig, setSortConfig] = useState<{ key: keyof TableRow; direction: 'asc' | 'desc' } | null>(null);\n  const [currentPage, setCurrentPage] = useState(1);\n  const itemsPerPage = 5;\n\n  const handleSort = useCallback((key: keyof TableRow) => {\n    setSortConfig(prevConfig => {\n      if (prevConfig?.key === key) {\n        if (prevConfig.direction === 'asc') {\n          return { key, direction: 'desc' };\n        } else {\n          return null;\n        }\n      }\n      return { key, direction: 'asc' };\n    });\n  }, []);\n\n  const filteredAndSortedData = useCallback(() => {\n    let filtered = tableData.filter(row => {\n      const matchesSearch = row.name.toLowerCase().includes(searchQuery.toLowerCase());\n      const matchesStatus = statusFilter === 'all' || row.status === statusFilter;\n      return matchesSearch && matchesStatus;\n    });\n\n    if (sortConfig) {\n      filtered.sort((a, b) => {\n        const aValue = a[sortConfig.key];\n        const bValue = b[sortConfig.key];\n        \n        if (typeof aValue === 'string' && typeof bValue === 'string') {\n          return sortConfig.direction === 'asc' \n            ? aValue.localeCompare(bValue)\n            : bValue.localeCompare(aValue);\n        }\n        \n        if (typeof aValue === 'number' && typeof bValue === 'number') {\n          return sortConfig.direction === 'asc' \n            ? aValue - bValue\n            : bValue - aValue;\n        }\n        \n        return 0;\n      });\n    }\n\n    return filtered;\n  }, [tableData, searchQuery, statusFilter, sortConfig]);\n\n  const paginatedData = useCallback(() => {\n    const data = filteredAndSortedData();\n    const startIndex = (currentPage - 1) * itemsPerPage;\n    const endIndex = startIndex + itemsPerPage;\n    return data.slice(startIndex, endIndex);\n  }, [filteredAndSortedData, currentPage]);\n\n  const totalPages = Math.ceil(filteredAndSortedData().length / itemsPerPage);\n\n  const handleRefreshData = useCallback(() => {\n    setTimeout(() => {\n      // Update metrics with random changes\n      setMetrics(prevMetrics =>\n        prevMetrics.map(metric => ({\n          ...metric,\n          value: metric.value + (Math.random() - 0.5) * metric.value * 0.1,\n          change: (Math.random() - 0.5) * 20,\n          trend: Math.random() > 0.5 ? 'up' : 'down'\n        }))\n      );\n\n      // Update chart data with new data point\n      setChartData(prevData => {\n        const lastPoint = prevData[prevData.length - 1];\n        const newTimestamp = new Date(lastPoint.timestamp);\n        newTimestamp.setDate(newTimestamp.getDate() + 1);\n        \n        const newPoint: ChartDataPoint = {\n          timestamp: newTimestamp.toISOString().split('T')[0],\n          value: Math.floor(Math.random() * 3000) + 3500,\n          category: 'Sales'\n        };\n        \n        return [...prevData.slice(1), newPoint];\n      });\n\n      // Update table data with random value changes\n      setTableData(prevData =>\n        prevData.map(row => ({\n          ...row,\n          value: row.value + (Math.random() - 0.5) * row.value * 0.15\n        }))\n      );\n    }, 500);\n  }, []);\n\n  return (\n    <div className={`min-h-screen transition-colors duration-300 ${isDarkMode ? 'dark bg-gray-900' : 'bg-gray-50'}`}>\n      <div className=\"container mx-auto p-4 md:p-6 lg:p-8\">\n        <div className=\"flex flex-col md:flex-row justify-between items-start md:items-center gap-4 mb-8\">\n          <div>\n            <h1 className={`text-3xl md:text-4xl font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n              Analytics Dashboard\n            </h1>\n            <p className={`mt-2 ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n              Real-time insights and performance metrics\n            </p>\n          </div>\n          \n          <div className=\"flex items-center gap-4\">\n            <div className=\"flex items-center gap-2\">\n              <Button\n                variant={selectedTimeRange === '7d' ? 'default' : 'outline'}\n                size=\"sm\"\n                onClick={() => handleTimeRangeChange('7d')}\n                className={selectedTimeRange === '7d' ? '' : isDarkMode ? 'text-gray-300 border-gray-600 hover:bg-gray-800' : ''}\n              >\n                7 Days\n              </Button>\n              <Button\n                variant={selectedTimeRange === '30d' ? 'default' : 'outline'}\n                size=\"sm\"\n                onClick={() => handleTimeRangeChange('30d')}\n                className={selectedTimeRange === '30d' ? '' : isDarkMode ? 'text-gray-300 border-gray-600 hover:bg-gray-800' : ''}\n              >\n                30 Days\n              </Button>\n              <Button\n                variant={selectedTimeRange === '90d' ? 'default' : 'outline'}\n                size=\"sm\"\n                onClick={() => handleTimeRangeChange('90d')}\n                className={selectedTimeRange === '90d' ? '' : isDarkMode ? 'text-gray-300 border-gray-600 hover:bg-gray-800' : ''}\n              >\n                90 Days\n              </Button>\n            </div>\n            \n            <Button\n              variant=\"outline\"\n              size=\"icon\"\n              onClick={toggleDarkMode}\n              className={isDarkMode ? 'border-gray-700' : ''}\n            >\n              {isDarkMode ? <Sun className=\"h-5 w-5\" /> : <Moon className=\"h-5 w-5\" />}\n            </Button>\n            \n            \n            <Button\n              variant=\"outline\"\n              onClick={handleRefreshData}\n              disabled={isRefreshing}\n              className={isDarkMode ? 'border-gray-700' : ''}\n            >\n              <RefreshCw className={`h-4 w-4 mr-2 ${isRefreshing ? 'animate-spin' : ''}`} />\n              {isRefreshing ? 'Refreshing...' : 'Refresh'}\n            </Button>\n          </div>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 md:gap-6 mb-8\">\n          {metrics.map((metric, index) => (\n            <motion.div\n              key={metric.id}\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ duration: 0.4, delay: index * 0.1 }}\n            >\n              <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : 'bg-white'}>\n                <CardHeader className=\"pb-2\">\n                  <CardDescription className={isDarkMode ? 'text-gray-400' : 'text-gray-600'}>\n                    {metric.label}\n                  </CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"flex items-end justify-between\">\n                    <div>\n                      <motion.div\n                        initial={{ scale: 0.5 }}\n                        animate={{ scale: 1 }}\n                        transition={{ duration: 0.5, delay: index * 0.1 + 0.2 }}\n                        className={`text-2xl md:text-3xl font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}\n                      >\n                        {metric.label.includes('Rate') || metric.label.includes('Session') \n                          ? `${metric.value}%` \n                          : metric.value.toLocaleString()}\n                      </motion.div>\n                      <div className=\"flex items-center gap-1 mt-2\">\n                        {metric.trend === 'up' ? (\n                          <TrendingUp className=\"h-4 w-4 text-green-500\" />\n                        ) : (\n                          <TrendingDown className=\"h-4 w-4 text-red-500\" />\n                        )}\n                        <span className={`text-sm font-medium ${\n                          metric.trend === 'up' ? 'text-green-500' : 'text-red-500'\n                        }`}>\n                          {metric.change > 0 ? '+' : ''}{metric.change}%\n                        </span>\n                        <span className={`text-sm ${isDarkMode ? 'text-gray-400' : 'text-gray-500'}`}>\n                          vs last period\n                        </span>\n                      </div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </motion.div>\n          ))}\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-4 md:gap-6 mb-8\">\n          <Card className={`lg:col-span-2 ${isDarkMode ? 'bg-gray-800 border-gray-700' : ''}`}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Revenue Trend</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Daily revenue over selected period\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <LineChart data={chartData} isDarkMode={isDarkMode} />\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Category Distribution</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' ",
  "error": null,
  "overall_score": 44,
  "code_quality_score": 12,
  "architecture_score": 10,
  "performance_score": 8,
  "accessibility_score": 14,
  "metadata": {
    "document_id": "eval_room_1d66cad4b2c3",
    "prompt_category": "intermediate",
    "prompt_complexity": 6.0
  },
  "raw_response": {
    "document_id": "eval_room_1d66cad4b2c3",
    "mode": "parallel",
    "prompt": "Generate an analytics dashboard page with charts, data tables, real-time updates, dark mode, and responsive design",
    "content": ": ''}>\n                Breakdown by category\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"h-[300px] w-full\">\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <PieChart>\n                    <Pie\n                      data={mockPieData}\n                      cx=\"50%\"\n                      cy=\"50%\"\n                      labelLine={false}\n                      label={({ name, percent }) => `${name} ${(percent * 100).toFixed(0)}%`}\n                      outerRadius={80}\n                      fill=\"#8884d8\"\n                      dataKey=\"value\"\n                    >\n                      {mockPieData.map((entry, index) => (\n                        <Cell key={`cell-${index}`} fill={entry.color} />\n                      ))}\n                    </Pie>\n                    <Tooltip \n                      contentStyle={{\n                        backgroundColor: isDarkMode ? '#1f2937' : '#ffffff',\n                        border: isDarkMode ? '1px solid #374151' : '1px solid #e5e7eb',\n                        borderRadius: '6px',\n                        color: isDarkMode ? '#ffffff' : '#000000'\n                      }}\n                    />\n                    <Legend \n                      verticalAlign=\"bottom\" \n                      height={36}\n                      iconType=\"circle\"\n                      formatter={(value) => (\n                        <span className={isDarkMode ? 'text-gray-300' : 'text-gray-700'}>\n                          {value}\n                        </span>\n                      )}\n                    />\n                  </PieChart>\n                </ResponsiveContainer>\n              </div>nd and percentages */}\n            </CardContent>\n          </Card>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-4 md:gap-6 mb-8\">\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Performance Metrics</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Key performance indicators\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {[\n                  { label: 'Customer Satisfaction', value: 92, max: 100, color: 'bg-green-500' },\n                  { label: 'Response Time', value: 78, max: 100, color: 'bg-blue-500' },\n                  { label: 'Task Completion', value: 85, max: 100, color: 'bg-purple-500' },\n                  { label: 'System Uptime', value: 99, max: 100, color: 'bg-emerald-500' }\n                ].map((metric, index) => (\n                  <div key={index} className=\"space-y-2\">\n                    <div className=\"flex justify-between items-center\">\n                      <span className={`text-sm font-medium ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>\n                        {metric.label}\n                      </span>\n                      <span className={`text-sm font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                        {metric.value}%\n                      </span>\n                    </div>\n                    <div className={`w-full h-3 rounded-full overflow-hidden ${isDarkMode ? 'bg-gray-700' : 'bg-gray-200'}`}>\n                      <div\n                        className={`h-full ${metric.color} transition-all duration-500 ease-out`}\n                        style={{ width: `${(metric.value / metric.max) * 100}%` }}\n                      />\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Activity Timeline</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Recent activity and events\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {mockActivityData.map((event, index) => {\n                  const getIcon = () => {\n                    switch (event.icon) {\n                      case 'check':\n                        return <CheckCircle className=\"h-5 w-5\" />;\n                      case 'clock':\n                        return <Clock className=\"h-5 w-5\" />;\n                      case 'alert':\n                        return <AlertCircle className=\"h-5 w-5\" />;\n                      case 'user':\n                        return <UserPlus className=\"h-5 w-5\" />;\n                      case 'file':\n                        return <FileText className=\"h-5 w-5\" />;\n                      case 'settings':\n                        return <Settings className=\"h-5 w-5\" />;\n                      default:\n                        return <Clock className=\"h-5 w-5\" />;\n                    }\n                  };\n\n                  const getIconColor = () => {\n                    switch (event.type) {\n                      case 'success':\n                        return 'text-green-500 bg-green-100 dark:bg-green-900/30';\n                      case 'pending':\n                        return 'text-blue-500 bg-blue-100 dark:bg-blue-900/30';\n                      case 'warning':\n                        return 'text-orange-500 bg-orange-100 dark:bg-orange-900/30';\n                      case 'info':\n                        return 'text-purple-500 bg-purple-100 dark:bg-purple-900/30';\n                      default:\n                        return 'text-gray-500 bg-gray-100 dark:bg-gray-800';\n                    }\n                  };\n\n                  const formatTimestamp = (timestamp: string) => {\n                    const date = new Date(timestamp);\n                    const now = new Date();\n                    const diffMs = now.getTime() - date.getTime();\n                    const diffMins = Math.floor(diffMs / 60000);\n                    const diffHours = Math.floor(diffMs / 3600000);\n                    const diffDays = Math.floor(diffMs / 86400000);\n\n                    if (diffMins < 60) {\n                      return `${diffMins}m ago`;\n                    } else if (diffHours < 24) {\n                      return `${diffHours}h ago`;\n                    } else {\n                      return `${diffDays}d ago`;\n                    }\n                  };\n\n                  return (\n                    <div key={event.id} className=\"flex gap-3 relative\">\n                      {index !== mockActivityData.length - 1 && (\n                        <div\n                          className={`absolute left-5 top-10 w-0.5 h-full ${\n                            isDarkMode ? 'bg-gray-700' : 'bg-gray-200'\n                          }`}\n                        />\n                      )}\n                      <div\n                        className={`flex-shrink-0 w-10 h-10 rounded-full flex items-center justify-center ${getIconColor()} relative z-10`}\n                      >\n                        {getIcon()}\n                      </div>\n                      <div className=\"flex-1 pt-1\">\n                        <div className=\"flex items-start justify-between gap-2\">\n                          <div>\n                            <h4\n                              className={`font-semibold text-sm ${\n                                isDarkMode ? 'text-white' : 'text-gray-900'\n                              }`}\n                            >\n                              {event.title}\n                            </h4>\n                            <p\n                              className={`text-sm mt-0.5 ${\n                                isDarkMode ? 'text-gray-400' : 'text-gray-600'\n                              }`}\n                            >\n                              {event.description}\n                            </p>\n                          </div>\n                          <span\n                            className={`text-xs whitespace-nowrap ${\n                              isDarkMode ? 'text-gray-500' : 'text-gray-500'\n                            }`}\n                          >\n                            {formatTimestamp(event.timestamp)}\n                          </span>\n                        </div>\n                      </div>\n                    </div>\n                  );\n                })}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n          <CardHeader>\n            <div className=\"flex flex-col md:flex-row justify-between items-start md:items-center gap-4\">\n              <div>\n                <CardTitle className={isDarkMode ? 'text-white' : ''}>Recent Projects</CardTitle>\n                <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                  Overview of project status and values\n                </CardDescription>\n              </div>\n              <div className=\"flex flex-col sm:flex-row gap-3\">\n                <div className=\"relative flex-1\">\n                  <Search className={`absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 ${isDarkMode ? 'text-gray-400' : 'text-gray-500'}`} />\n                  <Input\n                    type=\"text\"\n                    placeholder=\"Search projects...\"\n                    value={searchQuery}\n                    onChange={(e) => setSearchQuery(e.target.value)}\n                    className={`pl-10 ${isDarkMode ? 'bg-gray-700 border-gray-600 text-white placeholder:text-gray-400' : ''}`}\n                  />\n                </div>\n                <Select value={statusFilter} onValueChange={(value: 'all' | 'active' | 'pending' | 'completed') => setStatusFilter(value)}>\n                  <SelectTrigger className={`w-full sm:w-[180px] ${isDarkMode ? 'bg-gray-700 border-gray-600 text-white' : ''}`}>\n                    <SelectValue placeholder=\"Filter by status\" />\n                  </SelectTrigger>\n                  <SelectContent className={isDarkMode ? 'bg-gray-700 border-gray-600' : ''}>\n                    <SelectItem value=\"all\" className={isDarkMode ? 'text-white focus:bg-gray-600' : ''}>All Status</SelectItem>\n                    <SelectItem value=\"active\" className={isDarkMode ? 'text-white focus:bg-gray-600' : ''}>Active</SelectItem>\n                    <SelectItem value=\"pending\" className={isDarkMode ? 'text-white focus:bg-gray-600' : ''}>Pending</SelectItem>\n                    <SelectItem value=\"completed\" className={isDarkMode ? 'text-white focus:bg-gray-600' : ''}>Completed</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              <div className=\"overflow-x-auto\">\n                <Table>\n                  <TableHeader>\n                    <TableRow className={isDarkMode ? 'border-gray-700' : ''}>\n                      <TableHead className={isDarkMode ? 'text-gray-300' : ''}>\n                        <button\n                          onClick={() => handleSort('name')}\n                          className=\"flex items-center gap-1 hover:text-primary transition-colors\"\n                        >\n                          Project Name\n                          {sortConfig?.key === 'name' ? (\n                            sortConfig.direction === 'asc' ? (\n                              <ChevronUp className=\"h-4 w-4\" />\n                            ) : (\n                              <ChevronDown className=\"h-4 w-4\" />\n                            )\n                          ) : (\n                            <ChevronsUpDown className=\"h-4 w-4 opacity-50\" />\n                          )}\n                        </button>\n                      </TableHead>\n                      <TableHead className={isDarkMode ? 'text-gray-300' : ''}>\n                        <button\n                          onClick={() => handleSort('status')}\n                          className=\"flex items-center gap-1 hover:text-primary transition-colors\"\n                        >\n                          Status\n                          {sortConfig?.key === 'status' ? (\n                            sortConfig.direction === 'asc' ? (\n                              <ChevronUp className=\"h-4 w-4\" />\n                            ) : (\n                              <ChevronDown className=\"h-4 w-4\" />\n                            )\n                          ) : (\n                            <ChevronsUpDown className=\"h-4 w-4 opacity-50\" />\n                          )}\n                        </button>\n                      </TableHead>\n                      <TableHead className={isDarkMode ? 'text-gray-300' : ''}>\n                        <button\n                          onClick={() => handleSort('value')}\n                          className=\"flex items-center gap-1 hover:text-primary transition-colors\"\n                        >\n                          Value\n                          {sortConfig?.key === 'value' ? (\n                            sortConfig.direction === 'asc' ? (\n                              <ChevronUp className=\"h-4 w-4\" />\n                            ) : (\n                              <ChevronDown className=\"h-4 w-4\" />\n                            )\n                          ) : (\n                            <ChevronsUpDown className=\"h-4 w-4 opacity-50\" />\n                          )}\n                        </button>\n                      </TableHead>\n                      <TableHead className={isDarkMode ? 'text-gray-300' : ''}>\n                        <button\n                          onClick={() => handleSort('date')}\n                          className=\"flex items-center gap-1 hover:text-primary transition-colors\"\n                        >\n                          Date\n                          {sortConfig?.key === 'date' ? (\n                            sortConfig.direction === 'asc' ? (\n                              <ChevronUp className=\"h-4 w-4\" />\n                            ) : (\n                              <ChevronDown className=\"h-4 w-4\" />\n                            )\n                          ) : (\n                            <ChevronsUpDown className=\"h-4 w-4 opacity-50\" />\n                          )}\n                        </button>\n                      </TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {paginatedData().length === 0 ? (\n                      <TableRow>\n                        <TableCell colSpan={4} className=\"text-center py-8\">\n                          <p className={isDarkMode ? 'text-gray-400' : 'text-gray-500'}>\n                            No projects found\n                          </p>\n                        </TableCell>\n                      </TableRow>\n                    ) : (\n                      paginatedData().map((row) => (\n                        <TableRow \n                          key={row.id}\n                          className={isDarkMode ? 'border-gray-700 hover:bg-gray-750' : 'hover:bg-gray-50'}\n                        >\n                          <TableCell className={isDarkMode ? 'text-gray-200' : ''}>\n                            {row.name}\n                          </TableCell>\n                          <TableCell>\n                            <Badge\n                              variant={\n                                row.status === 'active' \n                                  ? 'default' \n                                  : row.status === 'completed' \n                                  ? 'secondary' \n                                  : 'outline'\n                              }\n                              className={\n                                row.status === 'active'\n                                  ? 'bg-green-500 hover:bg-green-600'\n                                  : row.status === 'completed'\n                                  ? 'bg-blue-500 hover:bg-blue-600'\n                                  : isDarkMode\n                                  ? 'border-yellow-500 text-yellow-500'\n                                  : 'border-yellow-600 text-yellow-600'\n                              }\n                            >\n                              {row.status.charAt(0).toUpperCase() + row.status.slice(1)}\n                            </Badge>\n                          </TableCell>\n                          <TableCell className={isDarkMode ? 'text-gray-200' : ''}>\n                            ${row.value.toLocaleString()}\n                          </TableCell>\n                          <TableCell className={isDarkMode ? 'text-gray-400' : 'text-gray-600'}>\n                            {new Date(row.date).toLocaleDateString('en-US', {\n                              year: 'numeric',\n                              month: 'short',\n                              day: 'numeric'\n                            })}\n                          </TableCell>\n                        </TableRow>\n                      ))\n                    )}\n                  </TableBody>\n                </Table>\n              </div>\n\n              {totalPages > 1 && (\n                <div className=\"flex items-center justify-between\">\n                  <p className={`text-sm ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                    Showing {((currentPage - 1) * itemsPerPage) + 1} to {Math.min(currentPage * itemsPerPage, filteredAndSortedData().length)} of {filteredAndSortedData().length} results\n                  </p>\n                  <div className=\"flex items-center gap-2\">\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => setCurrentPage(prev => Math.max(1, prev - 1))}\n                      disabled={currentPage === 1}\n                      className={isDarkMode ? 'border-gray-600 text-gray-300 hover:bg-gray-700' : ''}\n                    >\n                      Previous\n                    </Button>\n                    <div className=\"flex items-center gap-1\">\n                      {Array.from({ length: totalPages }, (_, i) => i + 1).map(page => (\n                        <Button\n                          key={page}\n                          variant={currentPage === page ? 'default' : 'outline'}\n                          size=\"sm\"\n                          onClick={() => setCurrentPage(page)}\n                          className={\n                            currentPage === page \n                              ? '' \n                              : isDarkMode \n                              ? 'border-gray-600 text-gray-300 hover:bg-gray-700' \n                              : ''\n                          }\n                        >\n                          {page}\n                        </Button>\n                      ))}\n                    </div>\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => setCurrentPage(prev => Math.min(totalPages, prev + 1))}\n                      disabled={currentPage === totalPages}\n                      className={isDarkMode ? 'border-gray-600 text-gray-300 hover:bg-gray-700' : ''}\n                    >\n                      Next\n                    </Button>\n                  </div>\n                </div>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\nimport { useState, useCallback } from 'react';\nimport { Badge } from '@/components/ui/badge';\nimport { Input } from '@/components/ui/input';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\nimport { ChevronUp, ChevronDown, ChevronsUpDown } from 'lucide-react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Moon, Sun } from 'lucide-react';\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nimport { CheckCircle, Clock, AlertCircle, UserPlus, FileText, Settings } from 'lucide-react';\n\n\n\nimport { PieChart, Pie, Cell, ResponsiveContainer, Legend, Tooltip } from 'recharts';\nimport { Input } from '@/components/ui/input';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Search } from 'lucide-react';\nimport { motion } from 'framer-motion';\nimport { TrendingUp, TrendingDown } from 'lucide-react';\nimport { motion } from 'framer-motion';\nimport { RefreshCw } from 'lucide-react';\n\ninterface MetricData {\n  id: string;\n  label: string;\n  value: number;\n  change: number;\n  trend: 'up' | 'down';\n}\n\ninterface ChartDataPoint {\n  timestamp: string;\n  value: number;\n  category: string;\n}\n\ninterface TableRow {\n  id: string;\n  name: string;\n  status: 'active' | 'pending' | 'completed';\n  value: number;\n  date: string;\n}\n\ninterface ActivityEvent {\n  id: string;\n  type: 'success' | 'pending' | 'warning' | 'info';\n  title: string;\n  description: string;\n  timestamp: string;\n  icon: 'check' | 'clock' | 'alert' | 'user' | 'file' | 'settings';\n}\n\nconst mockMetrics: MetricData[] = [\n  { id: '1', label: 'Total Revenue', value: 45231, change: 12.5, trend: 'up' },\n  { id: '2', label: 'Active Users', value: 2350, change: 8.2, trend: 'up' },\n  { id: '3', label: 'Conversion Rate', value: 3.24, change: -2.1, trend: 'down' },\n  { id: '4', label: 'Avg Session', value: 4.8, change: 5.3, trend: 'up' }\n];\n\nconst mockChartData: ChartDataPoint[] = [\n  { timestamp: '2024-01-01', value: 4200, category: 'Sales' },\n  { timestamp: '2024-01-02', value: 3800, category: 'Sales' },\n  { timestamp: '2024-01-03', value: 5100, category: 'Sales' },\n  { timestamp: '2024-01-04', value: 4600, category: 'Sales' },\n  { timestamp: '2024-01-05', value: 5400, category: 'Sales' },\n  { timestamp: '2024-01-06', value: 6200, category: 'Sales' },\n  { timestamp: '2024-01-07', value: 5800, category: 'Sales' }\n];\n\nconst mockTableData: TableRow[] = [\n  { id: '1', name: 'Project Alpha', status: 'active', value: 12500, date: '2024-01-15' },\n  { id: '2', name: 'Project Beta', status: 'completed', value: 8900, date: '2024-01-14' },\n  { id: '3', name: 'Project Gamma', status: 'pending', value: 15200, date: '2024-01-13' },\n  { id: '4', name: 'Project Delta', status: 'active', value: 9800, date: '2024-01-12' },\n  { id: '5', name: 'Project Epsilon', status: 'completed', value: 11300, date: '2024-01-11' }\n];\ninterface PieChartData {\n  name: string;\n  value: number;\n  color: string;\n}\n\nconst mockPieData: PieChartData[] = [\n  { name: 'Sales', value: 35, color: '#3b82f6' },\n  { name: 'Marketing', value: 25, color: '#8b5cf6' },\n  { name: 'Operations', value: 20, color: '#10b981' },\n  { name: 'Support', value: 15, color: '#f59e0b' },\n  { name: 'Other', value: 5, color: '#6b7280' }\n];\n\nconst mockActivityData: ActivityEvent[] = [\n  {\n    id: '1',\n    type: 'success',\n    title: 'Project Completed',\n    description: 'Project Beta has been successfully completed',\n    timestamp: '2024-01-15T10:30:00',\n    icon: 'check'\n  },\n  {\n    id: '2',\n    type: 'info',\n    title: 'New User Registered',\n    description: 'John Doe joined the platform',\n    timestamp: '2024-01-15T09:15:00',\n    icon: 'user'\n  },\n  {\n    id: '3',\n    type: 'pending',\n    title: 'Report Generation',\n    description: 'Monthly analytics report is being generated',\n    timestamp: '2024-01-15T08:45:00',\n    icon: 'file'\n  },\n  {\n    id: '4',\n    type: 'warning',\n    title: 'System Alert',\n    description: 'Server load exceeded 80% threshold',\n    timestamp: '2024-01-15T07:20:00',\n    icon: 'alert'\n  },\n  {\n    id: '5',\n    type: 'info',\n    title: 'Settings Updated',\n    description: 'Dashboard preferences have been modified',\n    timestamp: '2024-01-14T16:30:00',\n    icon: 'settings'\n  }\n];\n\nconst LineChart = ({ data, isDarkMode }: { data: ChartDataPoint[], isDarkMode: boolean }) => {\n  const [hoveredPoint, setHoveredPoint] = useState<number | null>(null);\n  const [tooltipPosition, setTooltipPosition] = useState({ x: 0, y: 0 });\n\n  const width = 100; // percentage\n  const height = 300;\n  const padding = { top: 20, right: 20, bottom: 40, left: 50 };\n\n  const maxValue = Math.max(...data.map(d => d.value));\n  const minValue = Math.min(...data.map(d => d.value));\n  const valueRange = maxValue - minValue;\n\n  const chartWidth = width - padding.left - padding.right;\n  const chartHeight = height - padding.top - padding.bottom;\n\n  const getX = (index: number) => {\n    return (index / (data.length - 1)) * chartWidth;\n  };\n\n  const getY = (value: number) => {\n    return chartHeight - ((value - minValue) / valueRange) * chartHeight;\n  };\n\n  const pathData = data.map((point, index) => {\n    const x = getX(index);\n    const y = getY(point.value);\n    return `${index === 0 ? 'M' : 'L'} ${x} ${y}`;\n  }).join(' ');\n\n  const gradientPathData = `${pathData} L ${getX(data.length - 1)} ${chartHeight} L 0 ${chartHeight} Z`;\n\n  const handlePointHover = (index: number, event: React.MouseEvent) => {\n    setHoveredPoint(index);\n    const rect = event.currentTarget.getBoundingClientRect();\n    setTooltipPosition({ x: event.clientX - rect.left, y: event.clientY - rect.top });\n  };\n\n  return (\n    <div className=\"relative w-full\" style={{ height: `${height}px` }}>\n      <svg\n        viewBox={`0 0 ${width} ${height}`}\n        preserveAspectRatio=\"none\"\n        className=\"w-full h-full\"\n      >\n        <defs>\n          <linearGradient id=\"chartGradient\" x1=\"0%\" y1=\"0%\" x2=\"0%\" y2=\"100%\">\n            <stop offset=\"0%\" stopColor={isDarkMode ? '#3b82f6' : '#60a5fa'} stopOpacity=\"0.4\" />\n            <stop offset=\"100%\" stopColor={isDarkMode ? '#3b82f6' : '#60a5fa'} stopOpacity=\"0.05\" />\n          </linearGradient>\n        </defs>\n\n        <g transform={`translate(${padding.left}, ${padding.top})`}>\n          {/* Grid lines */}\n          {[0, 1, 2, 3, 4].map((i) => {\n            const y = (chartHeight / 4) * i;\n            return (\n              <line\n                key={i}\n                x1=\"0\"\n                y1={y}\n                x2={chartWidth}\n                y2={y}\n                stroke={isDarkMode ? '#374151' : '#e5e7eb'}\n                strokeWidth=\"1\"\n              />\n            );\n          })}\n\n          {/* Gradient area */}\n          <motion.path\n            d={gradientPathData}\n            fill=\"url(#chartGradient)\"\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            transition={{ duration: 0.5 }}\n          />\n\n          {/* Line */}\n          <motion.path\n            d={pathData}\n            fill=\"none\"\n            stroke={isDarkMode ? '#3b82f6' : '#2563eb'}\n            strokeWidth=\"2.5\"\n            strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n            initial={{ pathLength: 0 }}\n            animate={{ pathLength: 1 }}\n            transition={{ duration: 1, ease: \"easeInOut\" }}\n          />\n\n          {/* Data points */}\n          {data.map((point, index) => {\n            const x = getX(index);\n            const y = getY(point.value);\n            return (\n              <motion.circle\n                key={index}\n                cx={x}\n                cy={y}\n                r={hoveredPoint === index ? 6 : 4}\n                fill={isDarkMode ? '#3b82f6' : '#2563eb'}\n                stroke={isDarkMode ? '#1f2937' : '#ffffff'}\n                strokeWidth=\"2\"\n                initial={{ scale: 0 }}\n                animate={{ scale: 1 }}\n                transition={{ duration: 0.3, delay: index * 0.05 }}\n                onMouseEnter={(e) => handlePointHover(index, e)}\n                onMouseLeave={() => setHoveredPoint(null)}\n                className=\"cursor-pointer\"\n                style={{ pointerEvents: 'all' }}\n              />\n            );\n          })}\n\n          {/* Y-axis labels */}\n          {[0, 1, 2, 3, 4].map((i) => {\n            const y = (chartHeight / 4) * i;\n            const value = maxValue - (valueRange / 4) * i;\n            return (\n              <text\n                key={i}\n                x=\"-10\"\n                y={y}\n                textAnchor=\"end\"\n                dominantBaseline=\"middle\"\n                className={`text-xs ${isDarkMode ? 'fill-gray-400' : 'fill-gray-600'}`}\n              >\n                {value.toFixed(0)}\n              </text>\n            );\n          })}\n\n          {/* X-axis labels */}\n          {data.map((point, index) => {\n            if (index % Math.ceil(data.length / 6) === 0 || index === data.length - 1) {\n              const x = getX(index);\n              const date = new Date(point.timestamp);\n              const label = `${date.getMonth() + 1}/${date.getDate()}`;\n              return (\n                <text\n                  key={index}\n                  x={x}\n                  y={chartHeight + 20}\n                  textAnchor=\"middle\"\n                  className={`text-xs ${isDarkMode ? 'fill-gray-400' : 'fill-gray-600'}`}\n                >\n                  {label}\n                </text>\n              );\n            }\n            return null;\n          })}\n        </g>\n      </svg>\n\n      {/* Tooltip */}\n      {hoveredPoint !== null && (\n        <motion.div\n          initial={{ opacity: 0, scale: 0.8 }}\n          animate={{ opacity: 1, scale: 1 }}\n          className={`absolute pointer-events-none z-10 px-3 py-2 rounded-lg shadow-lg ${\n            isDarkMode ? 'bg-gray-700 border border-gray-600' : 'bg-white border border-gray-200'\n          }`}\n          style={{\n            left: `${tooltipPosition.x}px`,\n            top: `${tooltipPosition.y - 60}px`,\n            transform: 'translateX(-50%)'\n          }}\n        >\n          <div className={`text-xs font-semibold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n            ${data[hoveredPoint].value.toLocaleString()}\n          </div>\n          <div className={`text-xs ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n            {new Date(data[hoveredPoint].timestamp).toLocaleDateString()}\n          </div>\n        </motion.div>\n      )}\n    </div>\n  );\n};\n\nexport default function AnalyticsDashboard() {\n  const [isDarkMode, setIsDarkMode] = useState(false);\n  const [isRefreshing, setIsRefreshing] = useState(false);\n  const [metrics, setMetrics] = useState<MetricData[]>(mockMetrics);\n  const [chartData, setChartData] = useState<ChartDataPoint[]>(mockChartData);\n  const [tableData, setTableData] = useState<TableRow[]>(mockTableData);\n  const [selectedTimeRange, setSelectedTimeRange] = useState<'7d' | '30d' | '90d'>('7d');\n  const [searchQuery, setSearchQuery] = useState('');\n  const [statusFilter, setStatusFilter] = useState<'all' | 'active' | 'pending' | 'completed'>('all');\n\n  const toggleDarkMode = useCallback(() => {\n    setIsDarkMode(prev => !prev);\n  }, []);\n\n  const handleTimeRangeChange = useCallback((range: '7d' | '30d' | '90d') => {\n    setSelectedTimeRange(range);\n        // Simulate filtering chart data based on time range\n    const daysMap = { '7d': 7, '30d': 30, '90d': 90 };\n    const days = daysMap[range];\n    \n    // Generate mock data for the selected time range\n    const today = new Date('2024-01-07');\n    const filteredData: ChartDataPoint[] = [];\n    \n    for (let i = days - 1; i >= 0; i--) {\n      const date = new Date(today);\n      date.setDate(date.getDate() - i);\n      const timestamp = date.toISOString().split('T')[0];\n      const baseValue = 4000 + Math.random() * 2000;\n      filteredData.push({\n        timestamp,\n        value: Math.round(baseValue),\n        category: 'Sales'\n      });\n    }\n    \n    setChartData(filteredData);</parameter>\n  }, []);\n\n  const [searchQuery, setSearchQuery] = useState('');\n  const [statusFilter, setStatusFilter] = useState<'all' | 'active' | 'pending' | 'completed'>('all');\n  const [sortConfig, setSortConfig] = useState<{ key: keyof TableRow; direction: 'asc' | 'desc' } | null>(null);\n  const [currentPage, setCurrentPage] = useState(1);\n  const itemsPerPage = 5;\n\n  const handleSort = useCallback((key: keyof TableRow) => {\n    setSortConfig(prevConfig => {\n      if (prevConfig?.key === key) {\n        if (prevConfig.direction === 'asc') {\n          return { key, direction: 'desc' };\n        } else {\n          return null;\n        }\n      }\n      return { key, direction: 'asc' };\n    });\n  }, []);\n\n  const filteredAndSortedData = useCallback(() => {\n    let filtered = tableData.filter(row => {\n      const matchesSearch = row.name.toLowerCase().includes(searchQuery.toLowerCase());\n      const matchesStatus = statusFilter === 'all' || row.status === statusFilter;\n      return matchesSearch && matchesStatus;\n    });\n\n    if (sortConfig) {\n      filtered.sort((a, b) => {\n        const aValue = a[sortConfig.key];\n        const bValue = b[sortConfig.key];\n        \n        if (typeof aValue === 'string' && typeof bValue === 'string') {\n          return sortConfig.direction === 'asc' \n            ? aValue.localeCompare(bValue)\n            : bValue.localeCompare(aValue);\n        }\n        \n        if (typeof aValue === 'number' && typeof bValue === 'number') {\n          return sortConfig.direction === 'asc' \n            ? aValue - bValue\n            : bValue - aValue;\n        }\n        \n        return 0;\n      });\n    }\n\n    return filtered;\n  }, [tableData, searchQuery, statusFilter, sortConfig]);\n\n  const paginatedData = useCallback(() => {\n    const data = filteredAndSortedData();\n    const startIndex = (currentPage - 1) * itemsPerPage;\n    const endIndex = startIndex + itemsPerPage;\n    return data.slice(startIndex, endIndex);\n  }, [filteredAndSortedData, currentPage]);\n\n  const totalPages = Math.ceil(filteredAndSortedData().length / itemsPerPage);\n\n  const handleRefreshData = useCallback(() => {\n    setTimeout(() => {\n      // Update metrics with random changes\n      setMetrics(prevMetrics =>\n        prevMetrics.map(metric => ({\n          ...metric,\n          value: metric.value + (Math.random() - 0.5) * metric.value * 0.1,\n          change: (Math.random() - 0.5) * 20,\n          trend: Math.random() > 0.5 ? 'up' : 'down'\n        }))\n      );\n\n      // Update chart data with new data point\n      setChartData(prevData => {\n        const lastPoint = prevData[prevData.length - 1];\n        const newTimestamp = new Date(lastPoint.timestamp);\n        newTimestamp.setDate(newTimestamp.getDate() + 1);\n        \n        const newPoint: ChartDataPoint = {\n          timestamp: newTimestamp.toISOString().split('T')[0],\n          value: Math.floor(Math.random() * 3000) + 3500,\n          category: 'Sales'\n        };\n        \n        return [...prevData.slice(1), newPoint];\n      });\n\n      // Update table data with random value changes\n      setTableData(prevData =>\n        prevData.map(row => ({\n          ...row,\n          value: row.value + (Math.random() - 0.5) * row.value * 0.15\n        }))\n      );\n    }, 500);\n  }, []);\n\n  return (\n    <div className={`min-h-screen transition-colors duration-300 ${isDarkMode ? 'dark bg-gray-900' : 'bg-gray-50'}`}>\n      <div className=\"container mx-auto p-4 md:p-6 lg:p-8\">\n        <div className=\"flex flex-col md:flex-row justify-between items-start md:items-center gap-4 mb-8\">\n          <div>\n            <h1 className={`text-3xl md:text-4xl font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n              Analytics Dashboard\n            </h1>\n            <p className={`mt-2 ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n              Real-time insights and performance metrics\n            </p>\n          </div>\n          \n          <div className=\"flex items-center gap-4\">\n            <div className=\"flex items-center gap-2\">\n              <Button\n                variant={selectedTimeRange === '7d' ? 'default' : 'outline'}\n                size=\"sm\"\n                onClick={() => handleTimeRangeChange('7d')}\n                className={selectedTimeRange === '7d' ? '' : isDarkMode ? 'text-gray-300 border-gray-600 hover:bg-gray-800' : ''}\n              >\n                7 Days\n              </Button>\n              <Button\n                variant={selectedTimeRange === '30d' ? 'default' : 'outline'}\n                size=\"sm\"\n                onClick={() => handleTimeRangeChange('30d')}\n                className={selectedTimeRange === '30d' ? '' : isDarkMode ? 'text-gray-300 border-gray-600 hover:bg-gray-800' : ''}\n              >\n                30 Days\n              </Button>\n              <Button\n                variant={selectedTimeRange === '90d' ? 'default' : 'outline'}\n                size=\"sm\"\n                onClick={() => handleTimeRangeChange('90d')}\n                className={selectedTimeRange === '90d' ? '' : isDarkMode ? 'text-gray-300 border-gray-600 hover:bg-gray-800' : ''}\n              >\n                90 Days\n              </Button>\n            </div>\n            \n            <Button\n              variant=\"outline\"\n              size=\"icon\"\n              onClick={toggleDarkMode}\n              className={isDarkMode ? 'border-gray-700' : ''}\n            >\n              {isDarkMode ? <Sun className=\"h-5 w-5\" /> : <Moon className=\"h-5 w-5\" />}\n            </Button>\n            \n            \n            <Button\n              variant=\"outline\"\n              onClick={handleRefreshData}\n              disabled={isRefreshing}\n              className={isDarkMode ? 'border-gray-700' : ''}\n            >\n              <RefreshCw className={`h-4 w-4 mr-2 ${isRefreshing ? 'animate-spin' : ''}`} />\n              {isRefreshing ? 'Refreshing...' : 'Refresh'}\n            </Button>\n          </div>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 md:gap-6 mb-8\">\n          {metrics.map((metric, index) => (\n            <motion.div\n              key={metric.id}\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ duration: 0.4, delay: index * 0.1 }}\n            >\n              <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : 'bg-white'}>\n                <CardHeader className=\"pb-2\">\n                  <CardDescription className={isDarkMode ? 'text-gray-400' : 'text-gray-600'}>\n                    {metric.label}\n                  </CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"flex items-end justify-between\">\n                    <div>\n                      <motion.div\n                        initial={{ scale: 0.5 }}\n                        animate={{ scale: 1 }}\n                        transition={{ duration: 0.5, delay: index * 0.1 + 0.2 }}\n                        className={`text-2xl md:text-3xl font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}\n                      >\n                        {metric.label.includes('Rate') || metric.label.includes('Session') \n                          ? `${metric.value}%` \n                          : metric.value.toLocaleString()}\n                      </motion.div>\n                      <div className=\"flex items-center gap-1 mt-2\">\n                        {metric.trend === 'up' ? (\n                          <TrendingUp className=\"h-4 w-4 text-green-500\" />\n                        ) : (\n                          <TrendingDown className=\"h-4 w-4 text-red-500\" />\n                        )}\n                        <span className={`text-sm font-medium ${\n                          metric.trend === 'up' ? 'text-green-500' : 'text-red-500'\n                        }`}>\n                          {metric.change > 0 ? '+' : ''}{metric.change}%\n                        </span>\n                        <span className={`text-sm ${isDarkMode ? 'text-gray-400' : 'text-gray-500'}`}>\n                          vs last period\n                        </span>\n                      </div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </motion.div>\n          ))}\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-4 md:gap-6 mb-8\">\n          <Card className={`lg:col-span-2 ${isDarkMode ? 'bg-gray-800 border-gray-700' : ''}`}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Revenue Trend</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Daily revenue over selected period\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <LineChart data={chartData} isDarkMode={isDarkMode} />\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Category Distribution</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' ",
    "error": null,
    "elapsed_time": 334.6965956687927,
    "success": true
  }
}