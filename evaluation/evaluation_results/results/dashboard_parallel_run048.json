{
  "prompt_id": "dashboard",
  "prompt_name": "Analytics Dashboard",
  "mode": "parallel",
  "run_number": 48,
  "timestamp": "2025-10-13T19:59:52.231639",
  "response_time": 84.36011075973511,
  "total_tokens": null,
  "response_content": "import { useState, useCallback } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Moon, Sun, RefreshCw } from 'lucide-react';\nimport { ArrowUpDown, ArrowUp, ArrowDown } from 'lucide-react';\nimport { Badge } from '@/components/ui/badge';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\n\n\n\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\n\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';\nimport { motion } from 'framer-motion';\nimport { TrendingUp, TrendingDown, DollarSign, Users, ShoppingCart, Target } from 'lucide-react';\nimport { motion } from 'framer-motion';\nhoppingCart, Target } from 'lucide-react';\nimport { motion } from 'framer-motion';\n\ninterface MetricData {\n  id: string;\n  label: string;\n  value: number;\n  change: number;\n  trend: 'up' | 'down';\n}\n\ninterface ChartDataPoint {\n  date: string;\n  revenue: number;\n  users: number;\n  orders: number;\n}\n\ninterface TableRow {\n  id: string;\n  product: string;\n  sales: number;\n  revenue: number;\n  status: 'active' | 'pending' | 'inactive';\n}\ninterface ActivityEvent {\n  id: string;\n  type: 'sale' | 'user' | 'system' | 'alert';\n  message: string;\n  timestamp: string;\n}\n\nconst mockActivityData: ActivityEvent[] = [\n  { id: '1', type: 'sale', message: 'New order #1234 - Premium Plan', timestamp: '2 minutes ago' },\n  { id: '2', type: 'user', message: 'New user registration: john@example.com', timestamp: '5 minutes ago' },\n  { id: '3', type: 'system', message: 'Database backup completed successfully', timestamp: '12 minutes ago' },\n  { id: '4', type: 'sale', message: 'Payment received: $299.00', timestamp: '18 minutes ago' },\n  { id: '5', type: 'alert', message: 'Server CPU usage above 80%', timestamp: '25 minutes ago' },\n  { id: '6', type: 'user', message: 'User upgraded to Enterprise Plan', timestamp: '32 minutes ago' },\n  { id: '7', type: 'sale', message: 'New order #1233 - Basic Plan', timestamp: '45 minutes ago' },\n  { id: '8', type: 'system', message: 'Security scan completed', timestamp: '1 hour ago' }\n];\n\nconst mockMetrics: MetricData[] = [\n  { id: '1', label: 'Total Revenue', value: 45231, change: 12.5, trend: 'up' },\n  { id: '2', label: 'Active Users', value: 2350, change: 8.2, trend: 'up' },\n  { id: '3', label: 'Total Orders', value: 1543, change: -3.1, trend: 'down' },\n  { id: '4', label: 'Conversion Rate', value: 3.24, change: 5.7, trend: 'up' }\n];\n\nconst mockChartData: ChartDataPoint[] = [\n  { date: '2024-01-01', revenue: 12000, users: 450, orders: 230 },\n  { date: '2024-01-02', revenue: 15000, users: 520, orders: 280 },\n  { date: '2024-01-03', revenue: 13500, users: 490, orders: 250 },\n  { date: '2024-01-04', revenue: 18000, users: 610, orders: 320 },\n  { date: '2024-01-05', revenue: 16500, users: 580, orders: 295 },\n  { date: '2024-01-06', revenue: 20000, users: 680, orders: 360 },\n  { date: '2024-01-07', revenue: 22000, users: 720, orders: 390 }\n];\n\nconst mockTableData: TableRow[] = [\n  { id: '1', product: 'Premium Plan', sales: 234, revenue: 23400, status: 'active' },\n  { id: '2', product: 'Basic Plan', sales: 567, revenue: 11340, status: 'active' },\n  { id: '3', product: 'Enterprise Plan', sales: 89, revenue: 17800, status: 'active' },\n  { id: '4', product: 'Starter Plan', sales: 432, revenue: 4320, status: 'pending' },\n  { id: '5', product: 'Pro Plan', sales: 156, revenue: 15600, status: 'inactive' }\n];\ninterface FunnelStage {\n  stage: string;\n  value: number;\n  color: string;\n}\n\nconst mockFunnelData: FunnelStage[] = [\n  { stage: 'Visitors', value: 10000, color: '#3b82f6' },\n  { stage: 'Sign Ups', value: 6500, color: '#8b5cf6' },\n  { stage: 'Active Users', value: 4200, color: '#ec4899' },\n  { stage: 'Paid Users', value: 2350, color: '#f59e0b' },\n  { stage: 'Retained', value: 1890, color: '#10b981' }\n];\nconst ActivityFeed = ({ isDarkMode }: { isDarkMode: boolean }) => {\n  const getEventIcon = (type: ActivityEvent['type']) => {\n    switch (type) {\n      case 'sale':\n        return <ShoppingCart className=\"h-4 w-4\" />;\n      case 'user':\n        return <Users className=\"h-4 w-4\" />;\n      case 'system':\n        return <Target className=\"h-4 w-4\" />;\n      case 'alert':\n        return <TrendingUp className=\"h-4 w-4\" />;\n    }\n  };\n\n  const getEventColor = (type: ActivityEvent['type']) => {\n    switch (type) {\n      case 'sale':\n        return 'bg-green-100 text-green-600 dark:bg-green-900/30 dark:text-green-400';\n      case 'user':\n        return 'bg-blue-100 text-blue-600 dark:bg-blue-900/30 dark:text-blue-400';\n      case 'system':\n        return 'bg-gray-100 text-gray-600 dark:bg-gray-700 dark:text-gray-400';\n      case 'alert':\n        return 'bg-orange-100 text-orange-600 dark:bg-orange-900/30 dark:text-orange-400';\n    }\n  };\n\n  return (\n    <div className=\"space-y-3 max-h-[400px] overflow-y-auto pr-2 scrollbar-thin\">\n      {mockActivityData.map((event, index) => (\n        <motion.div\n          key={event.id}\n          initial={{ opacity: 0, x: -20 }}\n          animate={{ opacity: 1, x: 0 }}\n          transition={{ delay: index * 0.05 }}\n          className={`flex items-start gap-3 p-3 rounded-lg transition-colors ${\n            isDarkMode ? 'hover:bg-gray-700/50' : 'hover:bg-gray-50'\n          }`}\n        >\n          <div className={`p-2 rounded-full ${getEventColor(event.type)}`}>\n            {getEventIcon(event.type)}\n          </div>\n          <div className=\"flex-1 min-w-0\">\n            <p className={`text-sm font-medium ${isDarkMode ? 'text-gray-200' : 'text-gray-900'}`}>\n              {event.message}\n            </p>\n            <p className={`text-xs mt-1 ${isDarkMode ? 'text-gray-500' : 'text-gray-500'}`}>\n              {event.timestamp}\n            </p>\n          </div>\n        </motion.div>\n      ))}\n    </div>\n  );\n};\nconst mockTrafficData = [\n  { source: 'Organic Search', visitors: 4250, percentage: 42.5, color: '#3b82f6' },\n  { source: 'Direct', visitors: 2800, percentage: 28.0, color: '#8b5cf6' },\n  { source: 'Social Media', visitors: 1500, percentage: 15.0, color: '#ec4899' },\n  { source: 'Referral', visitors: 950, percentage: 9.5, color: '#10b981' },\n  { source: 'Email', visitors: 500, percentage: 5.0, color: '#f59e0b' }\n];\n\nconst RevenueChart = ({ data, isDarkMode }: { data: ChartDataPoint[], isDarkMode: boolean }) => {\n  const [hoveredPoint, setHoveredPoint] = useState<number | null>(null);\n  \n  const maxRevenue = Math.max(...data.map(d => d.revenue));\n  const minRevenue = Math.min(...data.map(d => d.revenue));\n  const revenueRange = maxRevenue - minRevenue;\n  \n  const chartHeight = 250;\n  const chartPadding = { top: 20, right: 20, bottom: 40, left: 60 };\n  const chartWidth = 600;\n  \n  const getX = (index: number) => {\n    const availableWidth = chartWidth - chartPadding.left - chartPadding.right;\n    return chartPadding.left + (index / (data.length - 1)) * availableWidth;\n  };\n  \n  const getY = (value: number) => {\n    const availableHeight = chartHeight - chartPadding.top - chartPadding.bottom;\n    const normalized = (value - minRevenue) / revenueRange;\n    return chartHeight - chartPadding.bottom - (normalized * availableHeight);\n  };\n  \n  const pathData = data.map((point, index) => {\n    const x = getX(index);\n    const y = getY(point.revenue);\n    return index === 0 ? `M ${x} ${y}` : `L ${x} ${y}`;\n  }).join(' ');\n  \n  const formatCurrency = (value: number) => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0\n    }).format(value);\n  };\n  \n  const formatDate = (dateStr: string) => {\n    const date = new Date(dateStr);\n    return date.toLocaleDateString('en-US', { month: 'short', day: 'numeric' });\n  };\n  \n  return (\n    <div className=\"w-full overflow-x-auto\">\n      <svg \n        viewBox={`0 0 ${chartWidth} ${chartHeight}`}\n        className=\"w-full h-auto\"\n        style={{ minWidth: '300px' }}\n      >\n        {/* Grid lines */}\n        {[0, 0.25, 0.5, 0.75, 1].map((ratio, i) => {\n          const y = chartHeight - chartPadding.bottom - (ratio * (chartHeight - chartPadding.top - chartPadding.bottom));\n          const value = minRevenue + (ratio * revenueRange);\n          return (\n            <g key={i}>\n              <line\n                x1={chartPadding.left}\n                y1={y}\n                x2={chartWidth - chartPadding.right}\n                y2={y}\n                stroke={isDarkMode ? '#374151' : '#e5e7eb'}\n                strokeWidth=\"1\"\n              />\n              <text\n                x={chartPadding.left - 10}\n                y={y + 4}\n                textAnchor=\"end\"\n                className={`text-xs ${isDarkMode ? 'fill-gray-400' : 'fill-gray-600'}`}\n              >\n                {formatCurrency(value)}\n              </text>\n            </g>\n          );\n        })}\n        \n        {/* Area under the line */}\n        <defs>\n          <linearGradient id=\"revenueGradient\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n            <stop offset=\"0%\" stopColor=\"#3b82f6\" stopOpacity=\"0.3\" />\n            <stop offset=\"100%\" stopColor=\"#3b82f6\" stopOpacity=\"0\" />\n          </linearGradient>\n        </defs>\n        <path\n          d={`${pathData} L ${getX(data.length - 1)} ${chartHeight - chartPadding.bottom} L ${getX(0)} ${chartHeight - chartPadding.bottom} Z`}\n          fill=\"url(#revenueGradient)\"\n        />\n        \n        {/* Line */}\n        <path\n          d={pathData}\n          fill=\"none\"\n          stroke=\"#3b82f6\"\n          strokeWidth=\"3\"\n          strokeLinecap=\"round\"\n          strokeLinejoin=\"round\"\n        />\n        \n        {/* Data points */}\n        {data.map((point, index) => {\n          const x = getX(index);\n          const y = getY(point.revenue);\n          const isHovered = hoveredPoint === index;\n          \n          return (\n            <g key={index}>\n              <circle\n                cx={x}\n                cy={y}\n                r={isHovered ? 6 : 4}\n                fill=\"#3b82f6\"\n                stroke={isDarkMode ? '#1f2937' : '#ffffff'}\n                strokeWidth=\"2\"\n                className=\"cursor-pointer transition-all duration-200\"\n                onMouseEnter={() => setHoveredPoint(index)}\n                onMouseLeave={() => setHoveredPoint(null)}\n              />\n              \n              {/* Tooltip */}\n              {isHovered && (\n                <g>\n                  <rect\n                    x={x - 60}\n                    y={y - 60}\n                    width=\"120\"\n                    height=\"50\"\n                    rx=\"6\"\n                    fill={isDarkMode ? '#1f2937' : '#ffffff'}\n                    stroke={isDarkMode ? '#374151' : '#e5e7eb'}\n                    strokeWidth=\"1\"\n                    filter=\"drop-shadow(0 4px 6px rgba(0, 0, 0, 0.1))\"\n                  />\n                  <text\n                    x={x}\n                    y={y - 40}\n                    textAnchor=\"middle\"\n                    className={`text-xs font-medium ${isDarkMode ? 'fill-gray-300' : 'fill-gray-600'}`}\n                  >\n                    {formatDate(point.date)}\n                  </text>\n                  <text\n                    x={x}\n                    y={y - 22}\n                    textAnchor=\"middle\"\n                    className={`text-sm font-bold ${isDarkMode ? 'fill-white' : 'fill-gray-900'}`}\n                  >\n                    {formatCurrency(point.revenue)}\n                  </text>\n                </g>\n              )}\n            </g>\n          );\n        })}\n        \n        {/* X-axis labels */}\n        {data.map((point, index) => {\n          if (index % Math.ceil(data.length / 4) === 0 || index === data.length - 1) {\n            const x = getX(index);\n            return (\n              <text\n                key={index}\n                x={x}\n                y={chartHeight - chartPadding.bottom + 20}\n                textAnchor=\"middle\"\n                className={`text-xs ${isDarkMode ? 'fill-gray-400' : 'fill-gray-600'}`}\n              >\n                {formatDate(point.date)}\n              </text>\n            );\n          }\n          return null;\n        })}\n      </svg>\n      \n      <div className=\"flex items-center justify-center mt-4 gap-2\">\n        <TrendingUp className=\"h-4 w-4 text-green-500\" />\n        <span className={`text-sm ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>\n          +{((data[data.length - 1].revenue - data[0].revenue) / data[0].revenue * 100).toFixed(1)}% from start of period\n        </span>\n      </div>\n    </div>\n  );\n};\n\nconst UserAreaChart = ({ data, isDarkMode }: { data: ChartDataPoint[], isDarkMode: boolean }) => {\n  const [hoveredPoint, setHoveredPoint] = useState<number | null>(null);\n  \n  const width = 600;\n  const height = 300;\n  const padding = { top: 20, right: 20, bottom: 40, left: 50 };\n  \n  const chartWidth = width - padding.left - padding.right;\n  const chartHeight = height - padding.top - padding.bottom;\n  \n  const maxUsers = Math.max(...data.map(d => d.users));\n  const minUsers = Math.min(...data.map(d => d.users));\n  \n  const getX = (index: number) => (index / (data.length - 1)) * chartWidth;\n  const getY = (value: number) => chartHeight - ((value - minUsers) / (maxUsers - minUsers)) * chartHeight;\n  \n  const pathData = data.map((point, index) => {\n    const x = getX(index);\n    const y = getY(point.users);\n    return `${index === 0 ? 'M' : 'L'} ${x} ${y}`;\n  }).join(' ');\n  \n  const areaPath = `${pathData} L ${chartWidth} ${chartHeight} L 0 ${chartHeight} Z`;\n  \n  return (\n    <div className=\"w-full overflow-x-auto\">\n      <svg \n        viewBox={`0 0 ${width} ${height}`} \n        className=\"w-full h-auto\"\n        style={{ minWidth: '300px' }}\n      >\n        <defs>\n          <linearGradient id=\"userGradient\" x1=\"0%\" y1=\"0%\" x2=\"0%\" y2=\"100%\">\n            <stop offset=\"0%\" stopColor=\"#3b82f6\" stopOpacity=\"0.6\" />\n            <stop offset=\"100%\" stopColor=\"#3b82f6\" stopOpacity=\"0.05\" />\n          </linearGradient>\n        </defs>\n        \n        <g transform={`translate(${padding.left}, ${padding.top})`}>\n          {/* Grid lines */}\n          {[0, 1, 2, 3, 4].map((i) => {\n            const y = (chartHeight / 4) * i;\n            const value = Math.round(maxUsers - ((maxUsers - minUsers) / 4) * i);\n            return (\n              <g key={i}>\n                <line\n                  x1=\"0\"\n                  y1={y}\n                  x2={chartWidth}\n                  y2={y}\n                  stroke={isDarkMode ? '#374151' : '#e5e7eb'}\n                  strokeWidth=\"1\"\n                  strokeDasharray=\"4 4\"\n                />\n                <text\n                  x=\"-10\"\n                  y={y + 4}\n                  textAnchor=\"end\"\n                  className={`text-xs ${isDarkMode ? 'fill-gray-400' : 'fill-gray-600'}`}\n                >\n                  {value}\n                </text>\n              </g>\n            );\n          })}\n          \n          {/* Area fill with gradient */}\n          <motion.path\n            d={areaPath}\n            fill=\"url(#userGradient)\"\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            transition={{ duration: 0.8 }}\n          />\n          \n          {/* Line stroke */}\n          <motion.path\n            d={pathData}\n            fill=\"none\"\n            stroke=\"#3b82f6\"\n            strokeWidth=\"3\"\n            strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n            initial={{ pathLength: 0 }}\n            animate={{ pathLength: 1 }}\n            transition={{ duration: 1.2, ease: \"easeInOut\" }}\n          />\n          \n          {/* Data points */}\n          {data.map((point, index) => {\n            const x = getX(index);\n            const y = getY(point.users);\n            const isHovered = hoveredPoint === index;\n            \n            return (\n              <g key={index}>\n                <motion.circle\n                  cx={x}\n                  cy={y}\n                  r={isHovered ? 6 : 4}\n                  fill=\"#3b82f6\"\n                  stroke={isDarkMode ? '#1f2937' : '#ffffff'}\n                  strokeWidth=\"2\"\n                  style={{ cursor: 'pointer' }}\n                  onMouseEnter={() => setHoveredPoint(index)}\n                  onMouseLeave={() => setHoveredPoint(null)}\n                  initial={{ scale: 0 }}\n                  animate={{ scale: 1 }}\n                  transition={{ delay: index * 0.1, duration: 0.3 }}\n                  whileHover={{ scale: 1.3 }}\n                />\n                \n                {/* Tooltip */}\n                {isHovered && (\n                  <g>\n                    <motion.rect\n                      x={x - 60}\n                      y={y - 60}\n                      width=\"120\"\n                      height=\"50\"\n                      rx=\"6\"\n                      fill={isDarkMode ? '#1f2937' : '#ffffff'}\n                      stroke={isDarkMode ? '#374151' : '#e5e7eb'}\n                      strokeWidth=\"1\"\n                      initial={{ opacity: 0, y: y - 50 }}\n                      animate={{ opacity: 1, y: y - 60 }}\n                      transition={{ duration: 0.2 }}\n                      style={{ filter: 'drop-shadow(0 4px 6px rgba(0, 0, 0, 0.1))' }}\n                    />\n                    <motion.text\n                      x={x}\n                      y={y - 42}\n                      textAnchor=\"middle\"\n                      className={`text-xs font-semibold ${isDarkMode ? 'fill-gray-300' : 'fill-gray-700'}`}\n                      initial={{ opacity: 0 }}\n                      animate={{ opacity: 1 }}\n                      transition={{ delay: 0.1 }}\n                    >\n                      {new Date(point.date).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n                    </motion.text>\n                    <motion.text\n                      x={x}\n                      y={y - 25}\n                      textAnchor=\"middle\"\n                      className={`text-sm font-bold ${isDarkMode ? 'fill-blue-400' : 'fill-blue-600'}`}\n                      initial={{ opacity: 0 }}\n                      animate={{ opacity: 1 }}\n                      transition={{ delay: 0.15 }}\n                    >\n                      {point.users.toLocaleString()} users\n                    </motion.text>\n                  </g>\n                )}\n              </g>\n            );\n          })}\n          \n          {/* X-axis labels */}\n          {data.map((point, index) => {\n            if (index % Math.ceil(data.length / 4) === 0 || index === data.length - 1) {\n              const x = getX(index);\n              return (\n                <text\n                  key={`label-${index}`}\n                  x={x}\n                  y={chartHeight + 25}\n                  textAnchor=\"middle\"\n                  className={`text-xs ${isDarkMode ? 'fill-gray-400' : 'fill-gray-600'}`}\n                >\n                  {new Date(point.date).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n                </text>\n              );\n            }\n            return null;\n          })}\n        </g>\n      </svg>\n    </div>\n  );\n};\n\nexport default function AnalyticsDashboard() {\n  const [sortColumn, setSortColumn] = useState<keyof TableRow | null>(null);\n  const [sortDirection, setSortDirection] = useState<'asc' | 'desc'>('asc');\n\n  const handleSort = useCallback((column: keyof TableRow) => {\n    if (sortColumn === column) {\n      setSortDirection(prev => prev === 'asc' ? 'desc' : 'asc');\n    } else {\n      setSortColumn(column);\n      setSortDirection('asc');\n    }\n  }, [sortColumn]);\n\n  const sortedTableData = useCallback(() => {\n    if (!sortColumn) return tableData;\n    \n    return [...tableData].sort((a, b) => {\n      const aValue = a[sortColumn];\n      const bValue = b[sortColumn];\n      \n      if (typeof aValue === 'number' && typeof bValue === 'number') {\n        return sortDirection === 'asc' ? aValue - bValue : bValue - aValue;\n      }\n      \n      if (typeof aValue === 'string' && typeof bValue === 'string') {\n        return sortDirection === 'asc' \n          ? aValue.localeCompare(bValue)\n          : bValue.localeCompare(aValue);\n      }\n      \n      return 0;\n    });\n  }, [tableData, sortColumn, sortDirection]);\n\n  const getStatusBadgeVariant = (status: TableRow['status']) => {\n    switch (status) {\n      case 'active':\n        return 'default';\n      case 'pending':\n        return 'secondary';\n      case 'inactive':\n        return 'outline';\n      default:\n        return 'default';\n    }\n  };\n\n  const formatCurrency = (value: number) => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0\n    }).format(value);\n  };\n\n  const formatNumber = (value: number) => {\n    return new Intl.NumberFormat('en-US').format(value);\n  };\n  const [isDarkMode, setIsDarkMode] = useState(false);\n  const [metrics, setMetrics] = useState<MetricData[]>(mockMetrics);\n  const [chartData, setChartData] = useState<ChartDataPoint[]>(mockChartData);\n  const [tableData, setTableData] = useState<TableRow[]>(mockTableData);\n  const [isRefreshing, setIsRefreshing] = useState(false);\n\n  const toggleDarkMode = useCallback(() => {\n    setIsDarkMode(prev => !prev);\n  }, []);\n\n  const handleRefresh = useCallback(() => {\n    setIsRefreshing(true);\n    \n    setTimeout(() => {\n      // Generate updated mock metrics with random variations\n      const updatedMetrics = mockMetrics.map(metric => ({\n        ...metric,\n        value: metric.value + Math.floor(Math.random() * 200 - 100),\n        change: parseFloat((Math.random() * 20 - 5).toFixed(1)),\n        trend: Math.random() > 0.5 ? 'up' as const : 'down' as const\n      }));\n      \n      // Generate updated chart data with random variations\n      const updatedChartData = mockChartData.map(point => ({\n        ...point,\n        revenue: point.revenue + Math.floor(Math.random() * 4000 - 2000),\n        users: point.users + Math.floor(Math.random() * 100 - 50),\n        orders: point.orders + Math.floor(Math.random() * 50 - 25)\n      }));\n      \n      // Generate updated table data with random variations\n      const updatedTableData = mockTableData.map(row => ({\n        ...row,\n        sales: row.sales + Math.floor(Math.random() * 40 - 20),\n        revenue: row.revenue + Math.floor(Math.random() * 2000 - 1000)\n      }));\n      \n      setMetrics(updatedMetrics);\n      setChartData(updatedChartData);\n      setTableData(updatedTableData);\n      setIsRefreshing(false);\n    }, 1500);\n  }, []);\n\n  return (\n    <div className={`min-h-screen transition-colors duration-300 ${isDarkMode ? 'dark bg-gray-900' : 'bg-gray-50'}`}>\n      <div className=\"container mx-auto p-4 md:p-6 lg:p-8\">\n        <div className=\"flex flex-col md:flex-row md:items-center md:justify-between mb-8 gap-4\">\n          <div>\n            <h1 className={`text-3xl md:text-4xl font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n              Analytics Dashboard\n            </h1>\n            <p className={`mt-2 ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n              Real-time insights and performance metrics\n            </p>\n          </div>\n          \n          <div className=\"flex items-center gap-3\">\n            <Button\n              variant=\"outline\"\n              size=\"icon\"\n              onClick={toggleDarkMode}\n              className={isDarkMode ? 'border-gray-700 hover:bg-gray-800' : ''}\n            >\n              {isDarkMode ? <Sun className=\"h-5 w-5\" /> : <Moon className=\"h-5 w-5\" />}\n            </Button>\n            \n            <Button\n              variant=\"outline\"\n              onClick={handleRefresh}\n              disabled={isRefreshing}\n              className={isDarkMode ? 'border-gray-700 hover:bg-gray-800' : ''}\n            >\n              <RefreshCw className={`h-4 w-4 mr-2 ${isRefreshing ? 'animate-spin' : ''}`} />\n              Refresh\n            </Button>\n          </div>\n        </div>\n\n        <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 md:gap-6 mb-8\">\n          {metrics.map((metric, index) => {\n            const Icon = metric.label.includes('Revenue') ? DollarSign :\n                        metric.label.includes('Users') ? Users :\n                        metric.label.includes('Orders') ? ShoppingCart :\n                        Target;\n            \n            const TrendIcon = metric.trend === 'up' ? TrendingUp : TrendingDown;\n            const trendColor = metric.trend === 'up' ? 'text-green-500' : 'text-red-500';\n            const trendBgColor = metric.trend === 'up' ? 'bg-green-50 dark:bg-green-900/20' : 'bg-red-50 dark:bg-red-900/20';\n\n            return (\n              <motion.div\n                key={metric.id}\n                initial={{ opacity: 0, y: 20 }}\n                animate={{ opacity: 1, y: 0 }}\n                transition={{ duration: 0.4, delay: index * 0.1 }}\n              >\n                <Card className={`${isDarkMode ? 'bg-gray-800 border-gray-700' : 'bg-white'} hover:shadow-lg transition-shadow duration-300`}>\n                  <CardHeader className=\"flex flex-row items-center justify-between pb-2\">\n                    <CardTitle className={`text-sm font-medium ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                      {metric.label}\n                    </CardTitle>\n                    <div className={`p-2 rounded-lg ${isDarkMode ? 'bg-gray-700' : 'bg-gray-100'}`}>\n                      <Icon className={`h-4 w-4 ${isDarkMode ? 'text-gray-300' : 'text-gray-600'}`} />\n                    </div>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"flex items-end justify-between\">\n                      <div>\n                        <div className={`text-2xl md:text-3xl font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                          {metric.label.includes('Revenue') ? `$${metric.value.toLocaleString()}` :\n                           metric.label.includes('Rate') ? `${metric.value}%` :\n                           metric.value.toLocaleString()}\n                        </div>\n                        <div className={`flex items-center gap-1 mt-2 px-2 py-1 rounded-md ${trendBgColor} w-fit`}>\n                          <TrendIcon className={`h-3 w-3 ${trendColor}`} />\n                          <span className={`text-xs font-medium ${trendColor}`}>\n                            {Math.abs(metric.change)}%\n                          </span>\n                        </div>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              </motion.div>\n            );\n          })}\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6 mb-8\">\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Revenue Overview</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Daily revenue trends for the past week\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <RevenueChart data={chartData} isDarkMode={isDarkMode} />\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>User Activity</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Active users and engagement metrics\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <UserAreaChart data={chartData} isDarkMode={isDarkMode} />\n            </CardContent>\n          </Card>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6 mb-8\">\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Orders Distribution</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Order volume by category\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"h-[300px] w-full\">\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <BarChart data={chartData}>\n                    <CartesianGrid \n                      strokeDasharray=\"3 3\" \n                      stroke={isDarkMode ? '#374151' : '#e5e7eb'}\n                    />\n                    <XAxis \n                      dataKey=\"date\" \n                      stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                      fontSize={12}\n                      tickFormatter={(value) => new Date(value).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n                    />\n                    <YAxis \n                      stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                      fontSize={12}\n                    />\n                    <Tooltip \n                      contentStyle={{\n                        backgroundColor: isDarkMode ? '#1f2937' : '#ffffff',\n                        border: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\n                        borderRadius: '8px',\n                        color: isDarkMode ? '#ffffff' : '#000000'\n                      }}\n                      labelStyle={{ color: isDarkMode ? '#9ca3af' : '#6b7280' }}\n                    />\n                    <Bar \n                      dataKey=\"orders\" \n                      fill=\"#3b82f6\" \n                      radius={[8, 8, 0, 0]}\n                    />\n                  </BarChart>\n                </ResponsiveContainer>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className={`lg:col-span-2 ${isDarkMode ? 'bg-gray-800 border-gray-700' : ''}`}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Performance Comparison</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Multi-metric comparison over time\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"h-[300px] w-full\">\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <LineChart\n                    data={chartData}\n                    margin={{ top: 5, right: 30, left: 20, bottom: 5 }}\n                  >\n                    <CartesianGrid \n                      strokeDasharray=\"3 3\" \n                      stroke={isDarkMode ? '#374151' : '#e5e7eb'}\n                    />\n                    <XAxis \n                      dataKey=\"date\" \n                      stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                      tick={{ fill: isDarkMode ? '#9ca3af' : '#6b7280' }}\n                      tickFormatter={(value) => new Date(value).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n                    />\n                    <YAxis \n                      stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                      tick={{ fill: isDarkMode ? '#9ca3af' : '#6b7280' }}\n                    />\n                    <Tooltip \n                      contentStyle={{\n                        backgroundColor: isDarkMode ? '#1f2937' : '#ffffff',\n                        border: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\n                        borderRadius: '8px',\n                        color: isDarkMode ? '#ffffff' : '#000000'\n                      }}\n                      labelFormatter={(value) => new Date(value).toLocaleDateString('en-US', { month: 'long', day: 'numeric', year: 'numeric' })}\n                      formatter={(value: number, name: string) => {\n                        if (name === 'revenue') return [`$${value.toLocaleString()}`, 'Revenue'];\n                        if (name === 'users') return [value.toLocaleString(), 'Users'];\n                        if (name === 'orders') return [value.toLocaleString(), 'Orders'];\n                        return [value, name];\n                      }}\n                    />\n                    <Legend \n                      wrapperStyle={{\n                        color: isDarkMode ? '#9ca3af' : '#6b7280'\n                      }}\n                      formatter={(value) => {\n                        if (value === 'revenue') return 'Revenue';\n                        if (value === 'users') return 'Users';\n                        if (value === 'orders') return 'Orders';\n                        return value;\n                      }}\n                    />\n                    <Line \n                      type=\"monotone\" \n                      dataKey=\"revenue\" \n                      stroke=\"#3b82f6\" \n                      strokeWidth={2}\n                      dot={{ fill: '#3b82f6', r: 4 }}\n                      activeDot={{ r: 6 }}\n                    />\n                    <Line \n                      type=\"monotone\" \n                      dataKey=\"users\" \n                      stroke=\"#10b981\" \n                      strokeWidth={2}\n                      dot={{ fill: '#10b981', r: 4 }}\n                      activeDot={{ r: 6 }}\n                    />\n                    <Line \n                      type=\"monotone\" \n                      dataKey=\"orders\" \n                      stroke=\"#f59e0b\" \n                      strokeWidth={2}\n                      dot={{ fill: '#f59e0b', r: 4 }}\n                      activeDot={{ r: 6 }}\n                    />\n                  </LineChart>\n                </ResponsiveContainer>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n          <CardHeader>\n            <CardTitle className={isDarkMode ? 'text-white' : ''}>Top Products</CardTitle>\n            <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n              Best performing products by sales and revenue\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"overflow-x-auto\">\n              <Table>\n                <TableHeader>\n                  <TableRow className={isDarkMode ? 'border-gray-700' : ''}>\n                    <TableHead className={isDarkMode ? 'text-gray-300' : ''}>\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => handleSort('product')}\n                        className={`font-semibold ${isDarkMode ? 'hover:bg-gray-700' : ''}`}\n                      >\n                        Product\n                        {sortColumn === 'product' && (\n                          sortDirection === 'asc' ? <ArrowUp className=\"ml-2 h-4 w-4\" /> : <ArrowDown className=\"ml-2 h-4 w-4\" />\n                        )}\n                        {sortColumn !== 'product' && <ArrowUpDown className=\"ml-2 h-4 w-4 opacity-50\" />}\n                      </Button>\n                    </TableHead>\n                    <TableHead className={isDarkMode ? 'text-gray-300' : ''}>\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => handleSort('sales')}\n                        className={`font-semibold ${isDarkMode ? 'hover:bg-gray-700' : ''}`}\n                      >\n                        Sales\n                        {sortColumn === 'sales' && (\n                          sortDirection === 'asc' ? <ArrowUp className=\"ml-2 h-4 w-4\" /> : <ArrowDown className=\"ml-2 h-4 w-4\" />\n                        )}\n                        {sortColumn !== 'sales' && <ArrowUpDown className=\"ml-2 h-4 w-4 opacity-50\" />}\n                      </Button>\n                    </TableHead>\n                    <TableHead className={isDarkMode ? 'text-gray-300' : ''}>\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => handleSort('revenue')}\n                        className={`font-semibold ${isDarkMode ? 'hover:bg-gray-700' : ''}`}\n                      >\n                        Revenue\n                        {sortColumn === 'revenue' && (\n                          sortDirection === 'asc' ? <ArrowUp className=\"ml-2 h-4 w-4\" /> : <ArrowDown className=\"ml-2 h-4 w-4\" />\n                        )}\n                        {sortColumn !== 'revenue' && <ArrowUpDown className=\"ml-2 h-4 w-4 opacity-50\" />}\n                      </Button>\n                    </TableHead>\n                    <TableHead className={isDarkMode ? 'text-gray-300' : ''}>\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => handleSort('status')}\n                        className={`font-semibold ${isDarkMode ? 'hover:bg-gray-700' : ''}`}\n                      >\n                        Status\n                        {sortColumn === 'status' && (\n                          sortDirection === 'asc' ? <ArrowUp className=\"ml-2 h-4 w-4\" /> : <ArrowDown className=\"ml-2 h-4 w-4\" />\n                        )}\n                        {sortColumn !== 'status' && <ArrowUpDown className=\"ml-2 h-4 w-4 opacity-50\" />}\n                      </Button>\n                    </TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {sortedTableData().map((row) => (\n                    <TableRow \n                      key={row.id}\n                      className={`${isDarkMode ? 'border-gray-700 hover:bg-gray-750' : 'hover:bg-gray-50'} transition-colors`}\n                    >\n                      <TableCell className={`font-medium ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                        {row.product}\n                      </TableCell>\n                      <TableCell className={isDarkMode ? 'text-gray-300' : 'text-gray-700'}>\n                        {formatNumber(row.sales)}\n                      </TableCell>\n                      <TableCell className={`font-semibold ${isDarkMode ? 'text-green-400' : 'text-green-600'}`}>\n                        {formatCurrency(row.revenue)}\n                      </TableCell>\n                      <TableCell>\n                        <Badge \n                          variant={getStatusBadgeVariant(row.status)}\n                          className={`capitalize ${\n                            row.status === 'active' \n                              ? isDarkMode ? 'bg-green-600 text-white' : 'bg-green-500 text-white'\n                              : row.status === 'pending'\n                              ? isDarkMode ? 'bg-yellow-600 text-white' : 'bg-yellow-500 text-white'\n                              : isDarkMode ? 'bg-gray-600 text-white' : 'bg-gray-400 text-white'\n                          }`}\n                        >\n                          {row.status}\n                        </Badge>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </div>\n          </CardContent>\n        </Card>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mt-8\">\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Conversion Funnel</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                User journey and drop-off rates\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {mockFunnelData.map((stage, index) => {\n                  const percentage = index === 0 ? 100 : ((stage.value / mockFunnelData[0].value) * 100).toFixed(1);\n                  const width = index === 0 ? 100 : (stage.value / mockFunnelData[0].value) * 100;\n                  const conversionRate = index > 0 ? ((stage.value / mockFunnelData[index - 1].value) * 100).toFixed(1) : null;\n                  \n                  return (\n                    <motion.div\n                      key={stage.stage}\n                      initial={{ opacity: 0, x: -20 }}\n                      animate={{ opacity: 1, x: 0 }}\n                      transition={{ delay: index * 0.1 }}\n                      className=\"relative\"\n                    >\n                      <div className=\"flex items-center justify-between mb-2\">\n                        <div className=\"flex items-center gap-2\">\n                          <span className={`text-sm font-medium ${isDarkMode ? 'text-gray-200' : 'text-gray-700'}`}>\n                            {stage.stage}\n                          </span>\n                          {conversionRate && (\n                            <span className={`text-xs ${isDarkMode ? 'text-gray-400' : 'text-gray-500'}`}>\n                              ({conversionRate}% conversion)\n                            </span>\n                          )}\n                        </div>\n                        <div className=\"flex items-center gap-3\">\n                          <span className={`text-sm font-semibold ${isDarkMode ? 'text-gray-300' : 'text-gray-600'}`}>\n                            {stage.value.toLocaleString()}\n                          </span>\n                          <span className={`text-xs ${isDarkMode ? 'text-gray-400' : 'text-gray-500'}`}>\n                            {percentage}%\n                          </span>\n                        </div>\n                      </div>\n                      <div className={`h-12 rounded-lg overflow-hidden ${isDarkMode ? 'bg-gray-700' : 'bg-gray-200'}`}>\n                        <motion.div\n                          initial={{ width: 0 }}\n                          animate={{ width: `${width}%` }}\n                          transition={{ duration: 0.8, delay: index * 0.1, ease: \"easeOut\" }}\n                          className=\"h-full flex items-center justify-center rounded-lg\"\n                          style={{ backgroundColor: stage.color }}\n                        >\n                          <Target className=\"h-5 w-5 text-white opacity-80\" />\n                        </motion.div>\n                      </div>\n                    </motion.div>\n                  );\n                })}\n                \n                <div className={`mt-6 p-4 rounded-lg ${isDarkMode ? 'bg-gray-700' : 'bg-gray-100'}`}>\n                  <div className=\"flex items-center justify-between\">\n                    <span className={`text-sm font-medium ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>\n                      Overall Conversion Rate\n                    </span>\n                    <span className={`text-lg font-bold ${isDarkMode ? 'text-green-400' : 'text-green-600'}`}>\n                      {((mockFunnelData[mockFunnelData.length - 1].value / mockFunnelData[0].value) * 100).toFixed(1)}%\n                    </span>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Traffic Sources</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Visitor sources breakdown\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-6\">\n                <div className=\"relative w-full aspect-square max-w-[240px] mx-auto\">\n                  <svg viewBox=\"0 0 200 200\" className=\"transform -rotate-90\">\n                    {mockTrafficData.reduce((acc, item, index) => {\n                      const total = mockTrafficData.reduce((sum, d) => sum + d.visitors, 0);\n                      const percentage = (item.visitors / total) * 100;\n                      const angle = (percentage / 100) * 360;\n                      const startAngle = acc.currentAngle;\n                      const endAngle = startAngle + angle;\n                      \n                      const startRad = (startAngle * Math.PI) / 180;\n                      const endRad = (endAngle * Math.PI) / 180;\n                      \n                      const innerRadius = 60;\n                      const outerRadius = 90;\n                      \n                      const x1 = 100 + outerRadius * Math.cos(startRad);\n                      const y1 = 100 + outerRadius * Math.sin(startRad);\n                      const x2 = 100 + outerRadius * Math.cos(endRad);\n                      const y2 = 100 + outerRadius * Math.sin(endRad);\n                      const x3 = 100 + innerRadius * Math.cos(endRad);\n                      const y3 = 100 + innerRadius * Math.sin(endRad);\n                      const x4 = 100 + innerRadius * Math.cos(startRad);\n                      const y4 = 100 + innerRadius * Math.sin(startRad);\n                      \n                      const largeArc = angle > 180 ? 1 : 0;\n                      \n                      const pathData = [\n                        `M ${x1} ${y1}`,\n                        `A ${outerRadius} ${outerRadius} 0 ${largeArc} 1 ${x2} ${y2}`,\n                        `L ${x3} ${y3}`,\n                        `A ${innerRadius} ${innerRadius} 0 ${largeArc} 0 ${x4} ${y4}`,\n                        'Z'\n                      ].join(' ');\n                      \n                      acc.paths.push(\n                        <motion.path\n                          key={item.source}\n                          d={pathData}\n                          fill={item.color}\n                          initial={{ opacity: 0, scale: 0.8 }}\n                          animate={{ opacity: 1, scale: 1 }}\n                          transition={{ duration: 0.5, delay: index * 0.1 }}\n                          className=\"hover:opacity-80 transition-opacity cursor-pointer\"\n                        />\n                      );\n                      \n                      acc.currentAngle = endAngle;\n                      return acc;\n                    }, { paths: [] as JSX.Element[], currentAngle: 0 }).paths}\n                  </svg>\n                  \n                  <div className=\"absolute inset-0 flex items-center justify-center\">\n                    <div className=\"text-center\">\n                      <div className={`text-2xl font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                        {mockTrafficData.reduce((sum, d) => sum + d.visitors, 0).toLocaleString()}\n                      </div>\n                      <div className={`text-xs ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                        Total Visitors\n                      </div>\n                    </div>\n                  </div>\n                </div>\n                \n                <div className=\"space-y-3\">\n                  {mockTrafficData.map((item, index) => (\n                    <motion.div\n                      key={item.source}\n                      initial={{ opacity: 0, x: -20 }}\n                      animate={{ opacity: 1, x: 0 }}\n                      transition={{ duration: 0.3, delay: index * 0.1 }}\n                      className=\"flex items-center justify-between\"\n                    >\n                      <div className=\"flex items-center gap-2\">\n                        <div\n                          className=\"w-3 h-3 rounded-full\"\n                          style={{ backgroundColor: item.color }}\n                        />\n                        <span className={`text-sm ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>\n                          {item.source}\n                        </span>\n                      </div>\n                      <div className=\"flex items-center gap-3\">\n                        <span className={`text-sm font-medium ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                          {item.visitors.toLocaleString()}\n                        </span>\n                        <span className={`text-xs ${isDarkMode ? 'text-gray-400' : 'text-gray-500'}`}>\n                          {item.percentage}%\n                        </span>\n                      </div>\n                    </motion.div>\n                  ))}\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Recent Activity</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Latest system events\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <ActivityFeed isDarkMode={isDarkMode} />\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}",
  "error": null,
  "overall_score": 50,
  "code_quality_score": 12,
  "architecture_score": 14,
  "performance_score": 11,
  "accessibility_score": 13,
  "metadata": {
    "document_id": "eval_room_a5f749e23b07",
    "prompt_category": "intermediate",
    "prompt_complexity": 6.0
  },
  "raw_response": {
    "document_id": "eval_room_a5f749e23b07",
    "mode": "parallel",
    "prompt": "Generate an analytics dashboard page with charts, data tables, real-time updates, dark mode, and responsive design",
    "content": "import { useState, useCallback } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Moon, Sun, RefreshCw } from 'lucide-react';\nimport { ArrowUpDown, ArrowUp, ArrowDown } from 'lucide-react';\nimport { Badge } from '@/components/ui/badge';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\n\n\n\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\n\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';\nimport { motion } from 'framer-motion';\nimport { TrendingUp, TrendingDown, DollarSign, Users, ShoppingCart, Target } from 'lucide-react';\nimport { motion } from 'framer-motion';\nhoppingCart, Target } from 'lucide-react';\nimport { motion } from 'framer-motion';\n\ninterface MetricData {\n  id: string;\n  label: string;\n  value: number;\n  change: number;\n  trend: 'up' | 'down';\n}\n\ninterface ChartDataPoint {\n  date: string;\n  revenue: number;\n  users: number;\n  orders: number;\n}\n\ninterface TableRow {\n  id: string;\n  product: string;\n  sales: number;\n  revenue: number;\n  status: 'active' | 'pending' | 'inactive';\n}\ninterface ActivityEvent {\n  id: string;\n  type: 'sale' | 'user' | 'system' | 'alert';\n  message: string;\n  timestamp: string;\n}\n\nconst mockActivityData: ActivityEvent[] = [\n  { id: '1', type: 'sale', message: 'New order #1234 - Premium Plan', timestamp: '2 minutes ago' },\n  { id: '2', type: 'user', message: 'New user registration: john@example.com', timestamp: '5 minutes ago' },\n  { id: '3', type: 'system', message: 'Database backup completed successfully', timestamp: '12 minutes ago' },\n  { id: '4', type: 'sale', message: 'Payment received: $299.00', timestamp: '18 minutes ago' },\n  { id: '5', type: 'alert', message: 'Server CPU usage above 80%', timestamp: '25 minutes ago' },\n  { id: '6', type: 'user', message: 'User upgraded to Enterprise Plan', timestamp: '32 minutes ago' },\n  { id: '7', type: 'sale', message: 'New order #1233 - Basic Plan', timestamp: '45 minutes ago' },\n  { id: '8', type: 'system', message: 'Security scan completed', timestamp: '1 hour ago' }\n];\n\nconst mockMetrics: MetricData[] = [\n  { id: '1', label: 'Total Revenue', value: 45231, change: 12.5, trend: 'up' },\n  { id: '2', label: 'Active Users', value: 2350, change: 8.2, trend: 'up' },\n  { id: '3', label: 'Total Orders', value: 1543, change: -3.1, trend: 'down' },\n  { id: '4', label: 'Conversion Rate', value: 3.24, change: 5.7, trend: 'up' }\n];\n\nconst mockChartData: ChartDataPoint[] = [\n  { date: '2024-01-01', revenue: 12000, users: 450, orders: 230 },\n  { date: '2024-01-02', revenue: 15000, users: 520, orders: 280 },\n  { date: '2024-01-03', revenue: 13500, users: 490, orders: 250 },\n  { date: '2024-01-04', revenue: 18000, users: 610, orders: 320 },\n  { date: '2024-01-05', revenue: 16500, users: 580, orders: 295 },\n  { date: '2024-01-06', revenue: 20000, users: 680, orders: 360 },\n  { date: '2024-01-07', revenue: 22000, users: 720, orders: 390 }\n];\n\nconst mockTableData: TableRow[] = [\n  { id: '1', product: 'Premium Plan', sales: 234, revenue: 23400, status: 'active' },\n  { id: '2', product: 'Basic Plan', sales: 567, revenue: 11340, status: 'active' },\n  { id: '3', product: 'Enterprise Plan', sales: 89, revenue: 17800, status: 'active' },\n  { id: '4', product: 'Starter Plan', sales: 432, revenue: 4320, status: 'pending' },\n  { id: '5', product: 'Pro Plan', sales: 156, revenue: 15600, status: 'inactive' }\n];\ninterface FunnelStage {\n  stage: string;\n  value: number;\n  color: string;\n}\n\nconst mockFunnelData: FunnelStage[] = [\n  { stage: 'Visitors', value: 10000, color: '#3b82f6' },\n  { stage: 'Sign Ups', value: 6500, color: '#8b5cf6' },\n  { stage: 'Active Users', value: 4200, color: '#ec4899' },\n  { stage: 'Paid Users', value: 2350, color: '#f59e0b' },\n  { stage: 'Retained', value: 1890, color: '#10b981' }\n];\nconst ActivityFeed = ({ isDarkMode }: { isDarkMode: boolean }) => {\n  const getEventIcon = (type: ActivityEvent['type']) => {\n    switch (type) {\n      case 'sale':\n        return <ShoppingCart className=\"h-4 w-4\" />;\n      case 'user':\n        return <Users className=\"h-4 w-4\" />;\n      case 'system':\n        return <Target className=\"h-4 w-4\" />;\n      case 'alert':\n        return <TrendingUp className=\"h-4 w-4\" />;\n    }\n  };\n\n  const getEventColor = (type: ActivityEvent['type']) => {\n    switch (type) {\n      case 'sale':\n        return 'bg-green-100 text-green-600 dark:bg-green-900/30 dark:text-green-400';\n      case 'user':\n        return 'bg-blue-100 text-blue-600 dark:bg-blue-900/30 dark:text-blue-400';\n      case 'system':\n        return 'bg-gray-100 text-gray-600 dark:bg-gray-700 dark:text-gray-400';\n      case 'alert':\n        return 'bg-orange-100 text-orange-600 dark:bg-orange-900/30 dark:text-orange-400';\n    }\n  };\n\n  return (\n    <div className=\"space-y-3 max-h-[400px] overflow-y-auto pr-2 scrollbar-thin\">\n      {mockActivityData.map((event, index) => (\n        <motion.div\n          key={event.id}\n          initial={{ opacity: 0, x: -20 }}\n          animate={{ opacity: 1, x: 0 }}\n          transition={{ delay: index * 0.05 }}\n          className={`flex items-start gap-3 p-3 rounded-lg transition-colors ${\n            isDarkMode ? 'hover:bg-gray-700/50' : 'hover:bg-gray-50'\n          }`}\n        >\n          <div className={`p-2 rounded-full ${getEventColor(event.type)}`}>\n            {getEventIcon(event.type)}\n          </div>\n          <div className=\"flex-1 min-w-0\">\n            <p className={`text-sm font-medium ${isDarkMode ? 'text-gray-200' : 'text-gray-900'}`}>\n              {event.message}\n            </p>\n            <p className={`text-xs mt-1 ${isDarkMode ? 'text-gray-500' : 'text-gray-500'}`}>\n              {event.timestamp}\n            </p>\n          </div>\n        </motion.div>\n      ))}\n    </div>\n  );\n};\nconst mockTrafficData = [\n  { source: 'Organic Search', visitors: 4250, percentage: 42.5, color: '#3b82f6' },\n  { source: 'Direct', visitors: 2800, percentage: 28.0, color: '#8b5cf6' },\n  { source: 'Social Media', visitors: 1500, percentage: 15.0, color: '#ec4899' },\n  { source: 'Referral', visitors: 950, percentage: 9.5, color: '#10b981' },\n  { source: 'Email', visitors: 500, percentage: 5.0, color: '#f59e0b' }\n];\n\nconst RevenueChart = ({ data, isDarkMode }: { data: ChartDataPoint[], isDarkMode: boolean }) => {\n  const [hoveredPoint, setHoveredPoint] = useState<number | null>(null);\n  \n  const maxRevenue = Math.max(...data.map(d => d.revenue));\n  const minRevenue = Math.min(...data.map(d => d.revenue));\n  const revenueRange = maxRevenue - minRevenue;\n  \n  const chartHeight = 250;\n  const chartPadding = { top: 20, right: 20, bottom: 40, left: 60 };\n  const chartWidth = 600;\n  \n  const getX = (index: number) => {\n    const availableWidth = chartWidth - chartPadding.left - chartPadding.right;\n    return chartPadding.left + (index / (data.length - 1)) * availableWidth;\n  };\n  \n  const getY = (value: number) => {\n    const availableHeight = chartHeight - chartPadding.top - chartPadding.bottom;\n    const normalized = (value - minRevenue) / revenueRange;\n    return chartHeight - chartPadding.bottom - (normalized * availableHeight);\n  };\n  \n  const pathData = data.map((point, index) => {\n    const x = getX(index);\n    const y = getY(point.revenue);\n    return index === 0 ? `M ${x} ${y}` : `L ${x} ${y}`;\n  }).join(' ');\n  \n  const formatCurrency = (value: number) => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0\n    }).format(value);\n  };\n  \n  const formatDate = (dateStr: string) => {\n    const date = new Date(dateStr);\n    return date.toLocaleDateString('en-US', { month: 'short', day: 'numeric' });\n  };\n  \n  return (\n    <div className=\"w-full overflow-x-auto\">\n      <svg \n        viewBox={`0 0 ${chartWidth} ${chartHeight}`}\n        className=\"w-full h-auto\"\n        style={{ minWidth: '300px' }}\n      >\n        {/* Grid lines */}\n        {[0, 0.25, 0.5, 0.75, 1].map((ratio, i) => {\n          const y = chartHeight - chartPadding.bottom - (ratio * (chartHeight - chartPadding.top - chartPadding.bottom));\n          const value = minRevenue + (ratio * revenueRange);\n          return (\n            <g key={i}>\n              <line\n                x1={chartPadding.left}\n                y1={y}\n                x2={chartWidth - chartPadding.right}\n                y2={y}\n                stroke={isDarkMode ? '#374151' : '#e5e7eb'}\n                strokeWidth=\"1\"\n              />\n              <text\n                x={chartPadding.left - 10}\n                y={y + 4}\n                textAnchor=\"end\"\n                className={`text-xs ${isDarkMode ? 'fill-gray-400' : 'fill-gray-600'}`}\n              >\n                {formatCurrency(value)}\n              </text>\n            </g>\n          );\n        })}\n        \n        {/* Area under the line */}\n        <defs>\n          <linearGradient id=\"revenueGradient\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n            <stop offset=\"0%\" stopColor=\"#3b82f6\" stopOpacity=\"0.3\" />\n            <stop offset=\"100%\" stopColor=\"#3b82f6\" stopOpacity=\"0\" />\n          </linearGradient>\n        </defs>\n        <path\n          d={`${pathData} L ${getX(data.length - 1)} ${chartHeight - chartPadding.bottom} L ${getX(0)} ${chartHeight - chartPadding.bottom} Z`}\n          fill=\"url(#revenueGradient)\"\n        />\n        \n        {/* Line */}\n        <path\n          d={pathData}\n          fill=\"none\"\n          stroke=\"#3b82f6\"\n          strokeWidth=\"3\"\n          strokeLinecap=\"round\"\n          strokeLinejoin=\"round\"\n        />\n        \n        {/* Data points */}\n        {data.map((point, index) => {\n          const x = getX(index);\n          const y = getY(point.revenue);\n          const isHovered = hoveredPoint === index;\n          \n          return (\n            <g key={index}>\n              <circle\n                cx={x}\n                cy={y}\n                r={isHovered ? 6 : 4}\n                fill=\"#3b82f6\"\n                stroke={isDarkMode ? '#1f2937' : '#ffffff'}\n                strokeWidth=\"2\"\n                className=\"cursor-pointer transition-all duration-200\"\n                onMouseEnter={() => setHoveredPoint(index)}\n                onMouseLeave={() => setHoveredPoint(null)}\n              />\n              \n              {/* Tooltip */}\n              {isHovered && (\n                <g>\n                  <rect\n                    x={x - 60}\n                    y={y - 60}\n                    width=\"120\"\n                    height=\"50\"\n                    rx=\"6\"\n                    fill={isDarkMode ? '#1f2937' : '#ffffff'}\n                    stroke={isDarkMode ? '#374151' : '#e5e7eb'}\n                    strokeWidth=\"1\"\n                    filter=\"drop-shadow(0 4px 6px rgba(0, 0, 0, 0.1))\"\n                  />\n                  <text\n                    x={x}\n                    y={y - 40}\n                    textAnchor=\"middle\"\n                    className={`text-xs font-medium ${isDarkMode ? 'fill-gray-300' : 'fill-gray-600'}`}\n                  >\n                    {formatDate(point.date)}\n                  </text>\n                  <text\n                    x={x}\n                    y={y - 22}\n                    textAnchor=\"middle\"\n                    className={`text-sm font-bold ${isDarkMode ? 'fill-white' : 'fill-gray-900'}`}\n                  >\n                    {formatCurrency(point.revenue)}\n                  </text>\n                </g>\n              )}\n            </g>\n          );\n        })}\n        \n        {/* X-axis labels */}\n        {data.map((point, index) => {\n          if (index % Math.ceil(data.length / 4) === 0 || index === data.length - 1) {\n            const x = getX(index);\n            return (\n              <text\n                key={index}\n                x={x}\n                y={chartHeight - chartPadding.bottom + 20}\n                textAnchor=\"middle\"\n                className={`text-xs ${isDarkMode ? 'fill-gray-400' : 'fill-gray-600'}`}\n              >\n                {formatDate(point.date)}\n              </text>\n            );\n          }\n          return null;\n        })}\n      </svg>\n      \n      <div className=\"flex items-center justify-center mt-4 gap-2\">\n        <TrendingUp className=\"h-4 w-4 text-green-500\" />\n        <span className={`text-sm ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>\n          +{((data[data.length - 1].revenue - data[0].revenue) / data[0].revenue * 100).toFixed(1)}% from start of period\n        </span>\n      </div>\n    </div>\n  );\n};\n\nconst UserAreaChart = ({ data, isDarkMode }: { data: ChartDataPoint[], isDarkMode: boolean }) => {\n  const [hoveredPoint, setHoveredPoint] = useState<number | null>(null);\n  \n  const width = 600;\n  const height = 300;\n  const padding = { top: 20, right: 20, bottom: 40, left: 50 };\n  \n  const chartWidth = width - padding.left - padding.right;\n  const chartHeight = height - padding.top - padding.bottom;\n  \n  const maxUsers = Math.max(...data.map(d => d.users));\n  const minUsers = Math.min(...data.map(d => d.users));\n  \n  const getX = (index: number) => (index / (data.length - 1)) * chartWidth;\n  const getY = (value: number) => chartHeight - ((value - minUsers) / (maxUsers - minUsers)) * chartHeight;\n  \n  const pathData = data.map((point, index) => {\n    const x = getX(index);\n    const y = getY(point.users);\n    return `${index === 0 ? 'M' : 'L'} ${x} ${y}`;\n  }).join(' ');\n  \n  const areaPath = `${pathData} L ${chartWidth} ${chartHeight} L 0 ${chartHeight} Z`;\n  \n  return (\n    <div className=\"w-full overflow-x-auto\">\n      <svg \n        viewBox={`0 0 ${width} ${height}`} \n        className=\"w-full h-auto\"\n        style={{ minWidth: '300px' }}\n      >\n        <defs>\n          <linearGradient id=\"userGradient\" x1=\"0%\" y1=\"0%\" x2=\"0%\" y2=\"100%\">\n            <stop offset=\"0%\" stopColor=\"#3b82f6\" stopOpacity=\"0.6\" />\n            <stop offset=\"100%\" stopColor=\"#3b82f6\" stopOpacity=\"0.05\" />\n          </linearGradient>\n        </defs>\n        \n        <g transform={`translate(${padding.left}, ${padding.top})`}>\n          {/* Grid lines */}\n          {[0, 1, 2, 3, 4].map((i) => {\n            const y = (chartHeight / 4) * i;\n            const value = Math.round(maxUsers - ((maxUsers - minUsers) / 4) * i);\n            return (\n              <g key={i}>\n                <line\n                  x1=\"0\"\n                  y1={y}\n                  x2={chartWidth}\n                  y2={y}\n                  stroke={isDarkMode ? '#374151' : '#e5e7eb'}\n                  strokeWidth=\"1\"\n                  strokeDasharray=\"4 4\"\n                />\n                <text\n                  x=\"-10\"\n                  y={y + 4}\n                  textAnchor=\"end\"\n                  className={`text-xs ${isDarkMode ? 'fill-gray-400' : 'fill-gray-600'}`}\n                >\n                  {value}\n                </text>\n              </g>\n            );\n          })}\n          \n          {/* Area fill with gradient */}\n          <motion.path\n            d={areaPath}\n            fill=\"url(#userGradient)\"\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            transition={{ duration: 0.8 }}\n          />\n          \n          {/* Line stroke */}\n          <motion.path\n            d={pathData}\n            fill=\"none\"\n            stroke=\"#3b82f6\"\n            strokeWidth=\"3\"\n            strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n            initial={{ pathLength: 0 }}\n            animate={{ pathLength: 1 }}\n            transition={{ duration: 1.2, ease: \"easeInOut\" }}\n          />\n          \n          {/* Data points */}\n          {data.map((point, index) => {\n            const x = getX(index);\n            const y = getY(point.users);\n            const isHovered = hoveredPoint === index;\n            \n            return (\n              <g key={index}>\n                <motion.circle\n                  cx={x}\n                  cy={y}\n                  r={isHovered ? 6 : 4}\n                  fill=\"#3b82f6\"\n                  stroke={isDarkMode ? '#1f2937' : '#ffffff'}\n                  strokeWidth=\"2\"\n                  style={{ cursor: 'pointer' }}\n                  onMouseEnter={() => setHoveredPoint(index)}\n                  onMouseLeave={() => setHoveredPoint(null)}\n                  initial={{ scale: 0 }}\n                  animate={{ scale: 1 }}\n                  transition={{ delay: index * 0.1, duration: 0.3 }}\n                  whileHover={{ scale: 1.3 }}\n                />\n                \n                {/* Tooltip */}\n                {isHovered && (\n                  <g>\n                    <motion.rect\n                      x={x - 60}\n                      y={y - 60}\n                      width=\"120\"\n                      height=\"50\"\n                      rx=\"6\"\n                      fill={isDarkMode ? '#1f2937' : '#ffffff'}\n                      stroke={isDarkMode ? '#374151' : '#e5e7eb'}\n                      strokeWidth=\"1\"\n                      initial={{ opacity: 0, y: y - 50 }}\n                      animate={{ opacity: 1, y: y - 60 }}\n                      transition={{ duration: 0.2 }}\n                      style={{ filter: 'drop-shadow(0 4px 6px rgba(0, 0, 0, 0.1))' }}\n                    />\n                    <motion.text\n                      x={x}\n                      y={y - 42}\n                      textAnchor=\"middle\"\n                      className={`text-xs font-semibold ${isDarkMode ? 'fill-gray-300' : 'fill-gray-700'}`}\n                      initial={{ opacity: 0 }}\n                      animate={{ opacity: 1 }}\n                      transition={{ delay: 0.1 }}\n                    >\n                      {new Date(point.date).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n                    </motion.text>\n                    <motion.text\n                      x={x}\n                      y={y - 25}\n                      textAnchor=\"middle\"\n                      className={`text-sm font-bold ${isDarkMode ? 'fill-blue-400' : 'fill-blue-600'}`}\n                      initial={{ opacity: 0 }}\n                      animate={{ opacity: 1 }}\n                      transition={{ delay: 0.15 }}\n                    >\n                      {point.users.toLocaleString()} users\n                    </motion.text>\n                  </g>\n                )}\n              </g>\n            );\n          })}\n          \n          {/* X-axis labels */}\n          {data.map((point, index) => {\n            if (index % Math.ceil(data.length / 4) === 0 || index === data.length - 1) {\n              const x = getX(index);\n              return (\n                <text\n                  key={`label-${index}`}\n                  x={x}\n                  y={chartHeight + 25}\n                  textAnchor=\"middle\"\n                  className={`text-xs ${isDarkMode ? 'fill-gray-400' : 'fill-gray-600'}`}\n                >\n                  {new Date(point.date).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n                </text>\n              );\n            }\n            return null;\n          })}\n        </g>\n      </svg>\n    </div>\n  );\n};\n\nexport default function AnalyticsDashboard() {\n  const [sortColumn, setSortColumn] = useState<keyof TableRow | null>(null);\n  const [sortDirection, setSortDirection] = useState<'asc' | 'desc'>('asc');\n\n  const handleSort = useCallback((column: keyof TableRow) => {\n    if (sortColumn === column) {\n      setSortDirection(prev => prev === 'asc' ? 'desc' : 'asc');\n    } else {\n      setSortColumn(column);\n      setSortDirection('asc');\n    }\n  }, [sortColumn]);\n\n  const sortedTableData = useCallback(() => {\n    if (!sortColumn) return tableData;\n    \n    return [...tableData].sort((a, b) => {\n      const aValue = a[sortColumn];\n      const bValue = b[sortColumn];\n      \n      if (typeof aValue === 'number' && typeof bValue === 'number') {\n        return sortDirection === 'asc' ? aValue - bValue : bValue - aValue;\n      }\n      \n      if (typeof aValue === 'string' && typeof bValue === 'string') {\n        return sortDirection === 'asc' \n          ? aValue.localeCompare(bValue)\n          : bValue.localeCompare(aValue);\n      }\n      \n      return 0;\n    });\n  }, [tableData, sortColumn, sortDirection]);\n\n  const getStatusBadgeVariant = (status: TableRow['status']) => {\n    switch (status) {\n      case 'active':\n        return 'default';\n      case 'pending':\n        return 'secondary';\n      case 'inactive':\n        return 'outline';\n      default:\n        return 'default';\n    }\n  };\n\n  const formatCurrency = (value: number) => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0\n    }).format(value);\n  };\n\n  const formatNumber = (value: number) => {\n    return new Intl.NumberFormat('en-US').format(value);\n  };\n  const [isDarkMode, setIsDarkMode] = useState(false);\n  const [metrics, setMetrics] = useState<MetricData[]>(mockMetrics);\n  const [chartData, setChartData] = useState<ChartDataPoint[]>(mockChartData);\n  const [tableData, setTableData] = useState<TableRow[]>(mockTableData);\n  const [isRefreshing, setIsRefreshing] = useState(false);\n\n  const toggleDarkMode = useCallback(() => {\n    setIsDarkMode(prev => !prev);\n  }, []);\n\n  const handleRefresh = useCallback(() => {\n    setIsRefreshing(true);\n    \n    setTimeout(() => {\n      // Generate updated mock metrics with random variations\n      const updatedMetrics = mockMetrics.map(metric => ({\n        ...metric,\n        value: metric.value + Math.floor(Math.random() * 200 - 100),\n        change: parseFloat((Math.random() * 20 - 5).toFixed(1)),\n        trend: Math.random() > 0.5 ? 'up' as const : 'down' as const\n      }));\n      \n      // Generate updated chart data with random variations\n      const updatedChartData = mockChartData.map(point => ({\n        ...point,\n        revenue: point.revenue + Math.floor(Math.random() * 4000 - 2000),\n        users: point.users + Math.floor(Math.random() * 100 - 50),\n        orders: point.orders + Math.floor(Math.random() * 50 - 25)\n      }));\n      \n      // Generate updated table data with random variations\n      const updatedTableData = mockTableData.map(row => ({\n        ...row,\n        sales: row.sales + Math.floor(Math.random() * 40 - 20),\n        revenue: row.revenue + Math.floor(Math.random() * 2000 - 1000)\n      }));\n      \n      setMetrics(updatedMetrics);\n      setChartData(updatedChartData);\n      setTableData(updatedTableData);\n      setIsRefreshing(false);\n    }, 1500);\n  }, []);\n\n  return (\n    <div className={`min-h-screen transition-colors duration-300 ${isDarkMode ? 'dark bg-gray-900' : 'bg-gray-50'}`}>\n      <div className=\"container mx-auto p-4 md:p-6 lg:p-8\">\n        <div className=\"flex flex-col md:flex-row md:items-center md:justify-between mb-8 gap-4\">\n          <div>\n            <h1 className={`text-3xl md:text-4xl font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n              Analytics Dashboard\n            </h1>\n            <p className={`mt-2 ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n              Real-time insights and performance metrics\n            </p>\n          </div>\n          \n          <div className=\"flex items-center gap-3\">\n            <Button\n              variant=\"outline\"\n              size=\"icon\"\n              onClick={toggleDarkMode}\n              className={isDarkMode ? 'border-gray-700 hover:bg-gray-800' : ''}\n            >\n              {isDarkMode ? <Sun className=\"h-5 w-5\" /> : <Moon className=\"h-5 w-5\" />}\n            </Button>\n            \n            <Button\n              variant=\"outline\"\n              onClick={handleRefresh}\n              disabled={isRefreshing}\n              className={isDarkMode ? 'border-gray-700 hover:bg-gray-800' : ''}\n            >\n              <RefreshCw className={`h-4 w-4 mr-2 ${isRefreshing ? 'animate-spin' : ''}`} />\n              Refresh\n            </Button>\n          </div>\n        </div>\n\n        <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 md:gap-6 mb-8\">\n          {metrics.map((metric, index) => {\n            const Icon = metric.label.includes('Revenue') ? DollarSign :\n                        metric.label.includes('Users') ? Users :\n                        metric.label.includes('Orders') ? ShoppingCart :\n                        Target;\n            \n            const TrendIcon = metric.trend === 'up' ? TrendingUp : TrendingDown;\n            const trendColor = metric.trend === 'up' ? 'text-green-500' : 'text-red-500';\n            const trendBgColor = metric.trend === 'up' ? 'bg-green-50 dark:bg-green-900/20' : 'bg-red-50 dark:bg-red-900/20';\n\n            return (\n              <motion.div\n                key={metric.id}\n                initial={{ opacity: 0, y: 20 }}\n                animate={{ opacity: 1, y: 0 }}\n                transition={{ duration: 0.4, delay: index * 0.1 }}\n              >\n                <Card className={`${isDarkMode ? 'bg-gray-800 border-gray-700' : 'bg-white'} hover:shadow-lg transition-shadow duration-300`}>\n                  <CardHeader className=\"flex flex-row items-center justify-between pb-2\">\n                    <CardTitle className={`text-sm font-medium ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                      {metric.label}\n                    </CardTitle>\n                    <div className={`p-2 rounded-lg ${isDarkMode ? 'bg-gray-700' : 'bg-gray-100'}`}>\n                      <Icon className={`h-4 w-4 ${isDarkMode ? 'text-gray-300' : 'text-gray-600'}`} />\n                    </div>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"flex items-end justify-between\">\n                      <div>\n                        <div className={`text-2xl md:text-3xl font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                          {metric.label.includes('Revenue') ? `$${metric.value.toLocaleString()}` :\n                           metric.label.includes('Rate') ? `${metric.value}%` :\n                           metric.value.toLocaleString()}\n                        </div>\n                        <div className={`flex items-center gap-1 mt-2 px-2 py-1 rounded-md ${trendBgColor} w-fit`}>\n                          <TrendIcon className={`h-3 w-3 ${trendColor}`} />\n                          <span className={`text-xs font-medium ${trendColor}`}>\n                            {Math.abs(metric.change)}%\n                          </span>\n                        </div>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              </motion.div>\n            );\n          })}\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6 mb-8\">\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Revenue Overview</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Daily revenue trends for the past week\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <RevenueChart data={chartData} isDarkMode={isDarkMode} />\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>User Activity</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Active users and engagement metrics\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <UserAreaChart data={chartData} isDarkMode={isDarkMode} />\n            </CardContent>\n          </Card>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6 mb-8\">\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Orders Distribution</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Order volume by category\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"h-[300px] w-full\">\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <BarChart data={chartData}>\n                    <CartesianGrid \n                      strokeDasharray=\"3 3\" \n                      stroke={isDarkMode ? '#374151' : '#e5e7eb'}\n                    />\n                    <XAxis \n                      dataKey=\"date\" \n                      stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                      fontSize={12}\n                      tickFormatter={(value) => new Date(value).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n                    />\n                    <YAxis \n                      stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                      fontSize={12}\n                    />\n                    <Tooltip \n                      contentStyle={{\n                        backgroundColor: isDarkMode ? '#1f2937' : '#ffffff',\n                        border: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\n                        borderRadius: '8px',\n                        color: isDarkMode ? '#ffffff' : '#000000'\n                      }}\n                      labelStyle={{ color: isDarkMode ? '#9ca3af' : '#6b7280' }}\n                    />\n                    <Bar \n                      dataKey=\"orders\" \n                      fill=\"#3b82f6\" \n                      radius={[8, 8, 0, 0]}\n                    />\n                  </BarChart>\n                </ResponsiveContainer>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className={`lg:col-span-2 ${isDarkMode ? 'bg-gray-800 border-gray-700' : ''}`}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Performance Comparison</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Multi-metric comparison over time\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"h-[300px] w-full\">\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <LineChart\n                    data={chartData}\n                    margin={{ top: 5, right: 30, left: 20, bottom: 5 }}\n                  >\n                    <CartesianGrid \n                      strokeDasharray=\"3 3\" \n                      stroke={isDarkMode ? '#374151' : '#e5e7eb'}\n                    />\n                    <XAxis \n                      dataKey=\"date\" \n                      stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                      tick={{ fill: isDarkMode ? '#9ca3af' : '#6b7280' }}\n                      tickFormatter={(value) => new Date(value).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n                    />\n                    <YAxis \n                      stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                      tick={{ fill: isDarkMode ? '#9ca3af' : '#6b7280' }}\n                    />\n                    <Tooltip \n                      contentStyle={{\n                        backgroundColor: isDarkMode ? '#1f2937' : '#ffffff',\n                        border: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\n                        borderRadius: '8px',\n                        color: isDarkMode ? '#ffffff' : '#000000'\n                      }}\n                      labelFormatter={(value) => new Date(value).toLocaleDateString('en-US', { month: 'long', day: 'numeric', year: 'numeric' })}\n                      formatter={(value: number, name: string) => {\n                        if (name === 'revenue') return [`$${value.toLocaleString()}`, 'Revenue'];\n                        if (name === 'users') return [value.toLocaleString(), 'Users'];\n                        if (name === 'orders') return [value.toLocaleString(), 'Orders'];\n                        return [value, name];\n                      }}\n                    />\n                    <Legend \n                      wrapperStyle={{\n                        color: isDarkMode ? '#9ca3af' : '#6b7280'\n                      }}\n                      formatter={(value) => {\n                        if (value === 'revenue') return 'Revenue';\n                        if (value === 'users') return 'Users';\n                        if (value === 'orders') return 'Orders';\n                        return value;\n                      }}\n                    />\n                    <Line \n                      type=\"monotone\" \n                      dataKey=\"revenue\" \n                      stroke=\"#3b82f6\" \n                      strokeWidth={2}\n                      dot={{ fill: '#3b82f6', r: 4 }}\n                      activeDot={{ r: 6 }}\n                    />\n                    <Line \n                      type=\"monotone\" \n                      dataKey=\"users\" \n                      stroke=\"#10b981\" \n                      strokeWidth={2}\n                      dot={{ fill: '#10b981', r: 4 }}\n                      activeDot={{ r: 6 }}\n                    />\n                    <Line \n                      type=\"monotone\" \n                      dataKey=\"orders\" \n                      stroke=\"#f59e0b\" \n                      strokeWidth={2}\n                      dot={{ fill: '#f59e0b', r: 4 }}\n                      activeDot={{ r: 6 }}\n                    />\n                  </LineChart>\n                </ResponsiveContainer>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n          <CardHeader>\n            <CardTitle className={isDarkMode ? 'text-white' : ''}>Top Products</CardTitle>\n            <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n              Best performing products by sales and revenue\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"overflow-x-auto\">\n              <Table>\n                <TableHeader>\n                  <TableRow className={isDarkMode ? 'border-gray-700' : ''}>\n                    <TableHead className={isDarkMode ? 'text-gray-300' : ''}>\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => handleSort('product')}\n                        className={`font-semibold ${isDarkMode ? 'hover:bg-gray-700' : ''}`}\n                      >\n                        Product\n                        {sortColumn === 'product' && (\n                          sortDirection === 'asc' ? <ArrowUp className=\"ml-2 h-4 w-4\" /> : <ArrowDown className=\"ml-2 h-4 w-4\" />\n                        )}\n                        {sortColumn !== 'product' && <ArrowUpDown className=\"ml-2 h-4 w-4 opacity-50\" />}\n                      </Button>\n                    </TableHead>\n                    <TableHead className={isDarkMode ? 'text-gray-300' : ''}>\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => handleSort('sales')}\n                        className={`font-semibold ${isDarkMode ? 'hover:bg-gray-700' : ''}`}\n                      >\n                        Sales\n                        {sortColumn === 'sales' && (\n                          sortDirection === 'asc' ? <ArrowUp className=\"ml-2 h-4 w-4\" /> : <ArrowDown className=\"ml-2 h-4 w-4\" />\n                        )}\n                        {sortColumn !== 'sales' && <ArrowUpDown className=\"ml-2 h-4 w-4 opacity-50\" />}\n                      </Button>\n                    </TableHead>\n                    <TableHead className={isDarkMode ? 'text-gray-300' : ''}>\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => handleSort('revenue')}\n                        className={`font-semibold ${isDarkMode ? 'hover:bg-gray-700' : ''}`}\n                      >\n                        Revenue\n                        {sortColumn === 'revenue' && (\n                          sortDirection === 'asc' ? <ArrowUp className=\"ml-2 h-4 w-4\" /> : <ArrowDown className=\"ml-2 h-4 w-4\" />\n                        )}\n                        {sortColumn !== 'revenue' && <ArrowUpDown className=\"ml-2 h-4 w-4 opacity-50\" />}\n                      </Button>\n                    </TableHead>\n                    <TableHead className={isDarkMode ? 'text-gray-300' : ''}>\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => handleSort('status')}\n                        className={`font-semibold ${isDarkMode ? 'hover:bg-gray-700' : ''}`}\n                      >\n                        Status\n                        {sortColumn === 'status' && (\n                          sortDirection === 'asc' ? <ArrowUp className=\"ml-2 h-4 w-4\" /> : <ArrowDown className=\"ml-2 h-4 w-4\" />\n                        )}\n                        {sortColumn !== 'status' && <ArrowUpDown className=\"ml-2 h-4 w-4 opacity-50\" />}\n                      </Button>\n                    </TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {sortedTableData().map((row) => (\n                    <TableRow \n                      key={row.id}\n                      className={`${isDarkMode ? 'border-gray-700 hover:bg-gray-750' : 'hover:bg-gray-50'} transition-colors`}\n                    >\n                      <TableCell className={`font-medium ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                        {row.product}\n                      </TableCell>\n                      <TableCell className={isDarkMode ? 'text-gray-300' : 'text-gray-700'}>\n                        {formatNumber(row.sales)}\n                      </TableCell>\n                      <TableCell className={`font-semibold ${isDarkMode ? 'text-green-400' : 'text-green-600'}`}>\n                        {formatCurrency(row.revenue)}\n                      </TableCell>\n                      <TableCell>\n                        <Badge \n                          variant={getStatusBadgeVariant(row.status)}\n                          className={`capitalize ${\n                            row.status === 'active' \n                              ? isDarkMode ? 'bg-green-600 text-white' : 'bg-green-500 text-white'\n                              : row.status === 'pending'\n                              ? isDarkMode ? 'bg-yellow-600 text-white' : 'bg-yellow-500 text-white'\n                              : isDarkMode ? 'bg-gray-600 text-white' : 'bg-gray-400 text-white'\n                          }`}\n                        >\n                          {row.status}\n                        </Badge>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </div>\n          </CardContent>\n        </Card>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mt-8\">\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Conversion Funnel</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                User journey and drop-off rates\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {mockFunnelData.map((stage, index) => {\n                  const percentage = index === 0 ? 100 : ((stage.value / mockFunnelData[0].value) * 100).toFixed(1);\n                  const width = index === 0 ? 100 : (stage.value / mockFunnelData[0].value) * 100;\n                  const conversionRate = index > 0 ? ((stage.value / mockFunnelData[index - 1].value) * 100).toFixed(1) : null;\n                  \n                  return (\n                    <motion.div\n                      key={stage.stage}\n                      initial={{ opacity: 0, x: -20 }}\n                      animate={{ opacity: 1, x: 0 }}\n                      transition={{ delay: index * 0.1 }}\n                      className=\"relative\"\n                    >\n                      <div className=\"flex items-center justify-between mb-2\">\n                        <div className=\"flex items-center gap-2\">\n                          <span className={`text-sm font-medium ${isDarkMode ? 'text-gray-200' : 'text-gray-700'}`}>\n                            {stage.stage}\n                          </span>\n                          {conversionRate && (\n                            <span className={`text-xs ${isDarkMode ? 'text-gray-400' : 'text-gray-500'}`}>\n                              ({conversionRate}% conversion)\n                            </span>\n                          )}\n                        </div>\n                        <div className=\"flex items-center gap-3\">\n                          <span className={`text-sm font-semibold ${isDarkMode ? 'text-gray-300' : 'text-gray-600'}`}>\n                            {stage.value.toLocaleString()}\n                          </span>\n                          <span className={`text-xs ${isDarkMode ? 'text-gray-400' : 'text-gray-500'}`}>\n                            {percentage}%\n                          </span>\n                        </div>\n                      </div>\n                      <div className={`h-12 rounded-lg overflow-hidden ${isDarkMode ? 'bg-gray-700' : 'bg-gray-200'}`}>\n                        <motion.div\n                          initial={{ width: 0 }}\n                          animate={{ width: `${width}%` }}\n                          transition={{ duration: 0.8, delay: index * 0.1, ease: \"easeOut\" }}\n                          className=\"h-full flex items-center justify-center rounded-lg\"\n                          style={{ backgroundColor: stage.color }}\n                        >\n                          <Target className=\"h-5 w-5 text-white opacity-80\" />\n                        </motion.div>\n                      </div>\n                    </motion.div>\n                  );\n                })}\n                \n                <div className={`mt-6 p-4 rounded-lg ${isDarkMode ? 'bg-gray-700' : 'bg-gray-100'}`}>\n                  <div className=\"flex items-center justify-between\">\n                    <span className={`text-sm font-medium ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>\n                      Overall Conversion Rate\n                    </span>\n                    <span className={`text-lg font-bold ${isDarkMode ? 'text-green-400' : 'text-green-600'}`}>\n                      {((mockFunnelData[mockFunnelData.length - 1].value / mockFunnelData[0].value) * 100).toFixed(1)}%\n                    </span>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Traffic Sources</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Visitor sources breakdown\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-6\">\n                <div className=\"relative w-full aspect-square max-w-[240px] mx-auto\">\n                  <svg viewBox=\"0 0 200 200\" className=\"transform -rotate-90\">\n                    {mockTrafficData.reduce((acc, item, index) => {\n                      const total = mockTrafficData.reduce((sum, d) => sum + d.visitors, 0);\n                      const percentage = (item.visitors / total) * 100;\n                      const angle = (percentage / 100) * 360;\n                      const startAngle = acc.currentAngle;\n                      const endAngle = startAngle + angle;\n                      \n                      const startRad = (startAngle * Math.PI) / 180;\n                      const endRad = (endAngle * Math.PI) / 180;\n                      \n                      const innerRadius = 60;\n                      const outerRadius = 90;\n                      \n                      const x1 = 100 + outerRadius * Math.cos(startRad);\n                      const y1 = 100 + outerRadius * Math.sin(startRad);\n                      const x2 = 100 + outerRadius * Math.cos(endRad);\n                      const y2 = 100 + outerRadius * Math.sin(endRad);\n                      const x3 = 100 + innerRadius * Math.cos(endRad);\n                      const y3 = 100 + innerRadius * Math.sin(endRad);\n                      const x4 = 100 + innerRadius * Math.cos(startRad);\n                      const y4 = 100 + innerRadius * Math.sin(startRad);\n                      \n                      const largeArc = angle > 180 ? 1 : 0;\n                      \n                      const pathData = [\n                        `M ${x1} ${y1}`,\n                        `A ${outerRadius} ${outerRadius} 0 ${largeArc} 1 ${x2} ${y2}`,\n                        `L ${x3} ${y3}`,\n                        `A ${innerRadius} ${innerRadius} 0 ${largeArc} 0 ${x4} ${y4}`,\n                        'Z'\n                      ].join(' ');\n                      \n                      acc.paths.push(\n                        <motion.path\n                          key={item.source}\n                          d={pathData}\n                          fill={item.color}\n                          initial={{ opacity: 0, scale: 0.8 }}\n                          animate={{ opacity: 1, scale: 1 }}\n                          transition={{ duration: 0.5, delay: index * 0.1 }}\n                          className=\"hover:opacity-80 transition-opacity cursor-pointer\"\n                        />\n                      );\n                      \n                      acc.currentAngle = endAngle;\n                      return acc;\n                    }, { paths: [] as JSX.Element[], currentAngle: 0 }).paths}\n                  </svg>\n                  \n                  <div className=\"absolute inset-0 flex items-center justify-center\">\n                    <div className=\"text-center\">\n                      <div className={`text-2xl font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                        {mockTrafficData.reduce((sum, d) => sum + d.visitors, 0).toLocaleString()}\n                      </div>\n                      <div className={`text-xs ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                        Total Visitors\n                      </div>\n                    </div>\n                  </div>\n                </div>\n                \n                <div className=\"space-y-3\">\n                  {mockTrafficData.map((item, index) => (\n                    <motion.div\n                      key={item.source}\n                      initial={{ opacity: 0, x: -20 }}\n                      animate={{ opacity: 1, x: 0 }}\n                      transition={{ duration: 0.3, delay: index * 0.1 }}\n                      className=\"flex items-center justify-between\"\n                    >\n                      <div className=\"flex items-center gap-2\">\n                        <div\n                          className=\"w-3 h-3 rounded-full\"\n                          style={{ backgroundColor: item.color }}\n                        />\n                        <span className={`text-sm ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>\n                          {item.source}\n                        </span>\n                      </div>\n                      <div className=\"flex items-center gap-3\">\n                        <span className={`text-sm font-medium ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                          {item.visitors.toLocaleString()}\n                        </span>\n                        <span className={`text-xs ${isDarkMode ? 'text-gray-400' : 'text-gray-500'}`}>\n                          {item.percentage}%\n                        </span>\n                      </div>\n                    </motion.div>\n                  ))}\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Recent Activity</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Latest system events\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <ActivityFeed isDarkMode={isDarkMode} />\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}",
    "error": null,
    "elapsed_time": 84.36011075973511,
    "success": true
  }
}