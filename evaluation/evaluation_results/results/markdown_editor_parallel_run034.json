{
  "prompt_id": "markdown_editor",
  "prompt_name": "Premium Markdown Editor",
  "mode": "parallel",
  "run_number": 34,
  "timestamp": "2025-10-14T09:04:09.829073",
  "response_time": 59.31501626968384,
  "total_tokens": null,
  "response_content": "import { useState, useCallback } from 'react';\nimport React from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Bold, Italic, Code, List, ListOrdered, Link, Image, Eye, EyeOff } from 'lucide-react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport ReactMarkdown from 'react-markdown';\nimport { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';\nimport { vscDarkPlus } from 'react-syntax-highlighter/dist/esm/styles/prism';\n\ninterface ToolbarButton {\n  id: string;\n  icon: any;\n  label: string;\n  action: string;\n}\n\nconst toolbarButtons: ToolbarButton[] = [\n  { id: 'bold', icon: Bold, label: 'Bold', action: '**text**' },\n  { id: 'italic', icon: Italic, label: 'Italic', action: '*text*' },\n  { id: 'code', icon: Code, label: 'Code', action: '`code`' },\n  { id: 'list', icon: List, label: 'Bullet List', action: '- item' },\n  { id: 'ordered', icon: ListOrdered, label: 'Numbered List', action: '1. item' },\n  { id: 'link', icon: Link, label: 'Link', action: '[text](url)' },\n  { id: 'image', icon: Image, label: 'Image', action: '![alt](url)' }\n];\n\nconst mockMarkdownContent = `# Welcome to Premium Markdown Editor\n\n## Features\n\nThis is a **bold** statement and this is *italic* text.\n\n### Code Blocks\n\n\\`\\`\\`javascript\nfunction greet(name) {\n  console.log(\\`Hello, \\${name}!\\`);\n  return true;\n}\n\\`\\`\\`\n\n\\`\\`\\`python\ndef calculate(x, y):\n    result = x + y\n    return result\n\\`\\`\\`\n\n### Lists\n\n- First item\n- Second item\n- Third item\n\n1. Numbered one\n2. Numbered two\n3. Numbered three\n\n### Inline Code\n\nUse \\`const variable = 'value'\\` for inline code.\n\n### Links and Images\n\n[Visit Example](https://example.com)\n\n> This is a blockquote with important information.\n\n---\n\n**End of document**\n`;\n\nconst MarkdownPreview = ({ content }: { content: string }) => {\n  return (\n    <ReactMarkdown\n      className=\"prose prose-invert max-w-none\"\n      components={{\n        h1: ({ children }) => (\n          <h1 className=\"text-4xl font-bold mb-4 mt-6 text-blue-400 border-b border-gray-700 pb-2\">\n            {children}\n          </h1>\n        ),\n        h2: ({ children }) => (\n          <h2 className=\"text-3xl font-bold mb-3 mt-5 text-purple-400\">\n            {children}\n          </h2>\n        ),\n        h3: ({ children }) => (\n          <h3 className=\"text-2xl font-bold mb-2 mt-4 text-green-400\">\n            {children}\n          </h3>\n        ),\n        p: ({ children }) => (\n          <p className=\"mb-4 text-gray-300 leading-relaxed\">\n            {children}\n          </p>\n        ),\n        strong: ({ children }) => (\n          <strong className=\"font-bold text-yellow-400\">\n            {children}\n          </strong>\n        ),\n        em: ({ children }) => (\n          <em className=\"italic text-pink-400\">\n            {children}\n          </em>\n        ),\n        code: ({ inline, className, children, ...props }: any) => {\n          const match = /language-(\\w+)/.exec(className || '');\n          const language = match ? match[1] : '';\n          \n          return !inline && language ? (\n            <div className=\"my-4 rounded-lg overflow-hidden border border-gray-700 shadow-lg\">\n              <div className=\"bg-[#2d2d2d] px-4 py-2 border-b border-gray-700 flex items-center justify-between\">\n                <span className=\"text-xs font-mono text-gray-400 uppercase\">{language}</span>\n                <div className=\"flex gap-1.5\">\n                  <div className=\"w-2.5 h-2.5 rounded-full bg-red-500\"></div>\n                  <div className=\"w-2.5 h-2.5 rounded-full bg-yellow-500\"></div>\n                  <div className=\"w-2.5 h-2.5 rounded-full bg-green-500\"></div>\n                </div>\n              </div>\n              <SyntaxHighlighter\n                style={vscDarkPlus}\n                language={language}\n                PreTag=\"div\"\n                customStyle={{\n                  margin: 0,\n                  padding: '1.5rem',\n                  background: '#1e1e1e',\n                  fontSize: '0.875rem',\n                  lineHeight: '1.5'\n                }}\n                {...props}\n              >\n                {String(children).replace(/\\n$/, '')}\n              </SyntaxHighlighter>\n            </div>\n          ) : (\n            <code className=\"bg-[#2d2d2d] text-orange-400 px-2 py-1 rounded text-sm font-mono border border-gray-700\">\n              {children}\n            </code>\n          );\n        },\n        ul: ({ children }) => (\n          <ul className=\"list-disc list-inside mb-4 space-y-2 text-gray-300\">\n            {children}\n          </ul>\n        ),\n        ol: ({ children }) => (\n          <ol className=\"list-decimal list-inside mb-4 space-y-2 text-gray-300\">\n            {children}\n          </ol>\n        ),\n        li: ({ children }) => (\n          <li className=\"ml-4 text-gray-300\">\n            {children}\n          </li>\n        ),\n        a: ({ href, children }) => (\n          <a\n            href={href}\n            className=\"text-blue-400 hover:text-blue-300 underline transition-colors\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            {children}\n          </a>\n        ),\n        blockquote: ({ children }) => (\n          <blockquote className=\"border-l-4 border-purple-500 pl-4 py-2 my-4 bg-[#2d2d2d] rounded-r text-gray-300 italic\">\n            {children}\n          </blockquote>\n        ),\n        hr: () => (\n          <hr className=\"my-6 border-gray-700\" />\n        ),\n        img: ({ src, alt }) => (\n          <img\n            src={src}\n            alt={alt}\n            className=\"max-w-full h-auto rounded-lg border border-gray-700 my-4\"\n          />\n        )\n      }}\n    >\n      {content}\n    </ReactMarkdown>\n  );\n};\n\nexport default function MarkdownEditor() {\n  const [markdown, setMarkdown] = useState(mockMarkdownContent);\n  const [showPreview, setShowPreview] = useState(true);\n  const [cursorPosition, setCursorPosition] = useState(0);\n\n  const handleMarkdownChange = useCallback((e: React.ChangeEvent<HTMLTextAreaElement>) => {\n    setMarkdown(e.target.value);\n    setCursorPosition(e.target.selectionStart);\n  }, []);\n\n  const togglePreview = useCallback(() => {\n    setShowPreview(prev => !prev);\n  }, []);\n\nconst textareaRef = React.useRef<HTMLTextAreaElement>(null);\n\n  const handleToolbarAction = useCallback((action: string) => {\n    const textareaRef = document.querySelector('textarea') as HTMLTextAreaElement;\n    if (!textareaRef) return;\n\n    const start = textareaRef.selectionStart;\n    const end = textareaRef.selectionEnd;\n    const selectedText = markdown.substring(start, end);\n    const beforeText = markdown.substring(0, start);\n    const afterText = markdown.substring(end);\n\n    let newText = '';\n    let newCursorPosition = start;\n\n    // Handle different markdown syntax patterns\n    if (action.includes('**text**')) {\n      // Bold\n      if (selectedText) {\n        newText = `${beforeText}**${selectedText}**${afterText}`;\n        newCursorPosition = start + selectedText.length + 4;\n      } else {\n        newText = `${beforeText}**text**${afterText}`;\n        newCursorPosition = start + 2;\n      }\n    } else if (action.includes('*text*')) {\n      // Italic\n      if (selectedText) {\n        newText = `${beforeText}*${selectedText}*${afterText}`;\n        newCursorPosition = start + selectedText.length + 2;\n      } else {\n        newText = `${beforeText}*text*${afterText}`;\n        newCursorPosition = start + 1;\n      }\n    } else if (action.includes('`code`')) {\n      // Inline code\n      if (selectedText) {\n        newText = `${beforeText}\\`${selectedText}\\`${afterText}`;\n        newCursorPosition = start + selectedText.length + 2;\n      } else {\n        newText = `${beforeText}\\`code\\`${afterText}`;\n        newCursorPosition = start + 1;\n      }\n    } else if (action.includes('[text](url)')) {\n      // Link\n      if (selectedText) {\n        newText = `${beforeText}[${selectedText}](url)${afterText}`;\n        newCursorPosition = start + selectedText.length + 3;\n      } else {\n        newText = `${beforeText}[text](url)${afterText}`;\n        newCursorPosition = start + 1;\n      }\n    } else if (action.includes('![alt](url)')) {\n      // Image\n      if (selectedText) {\n        newText = `${beforeText}![${selectedText}](url)${afterText}`;\n        newCursorPosition = start + selectedText.length + 4;\n      } else {\n        newText = `${beforeText}![alt](url)${afterText}`;\n        newCursorPosition = start + 2;\n      }\n    } else if (action.includes('- item')) {\n      // Bullet list\n      const lineStart = markdown.lastIndexOf('\\n', start - 1) + 1;\n      newText = `${beforeText}\\n- item${afterText}`;\n      newCursorPosition = start + 3;\n    } else if (action.includes('1. item')) {\n      // Numbered list\n      const lineStart = markdown.lastIndexOf('\\n', start - 1) + 1;\n      newText = `${beforeText}\\n1. item${afterText}`;\n      newCursorPosition = start + 4;\n    } else {\n      return;\n    }\n\n    setMarkdown(newText);\n    setCursorPosition(newCursorPosition);\n\n    // Set cursor position after state update\n    setTimeout(() => {\n      textareaRef.focus();\n      textareaRef.setSelectionRange(newCursorPosition, newCursorPosition);\n    }, 0);\n  }, [markdown, cursorPosition]);\n\n  return (\n    <div className=\"min-h-screen bg-[#1e1e1e] text-gray-100\">\n      <div className=\"container mx-auto px-4 py-6\">\n        {/* Header */}\n        <div className=\"mb-6 flex items-center justify-between\">\n          <h1 className=\"text-3xl font-bold bg-gradient-to-r from-blue-400 to-purple-500 bg-clip-text text-transparent\">\n            Premium Markdown Editor\n          </h1>\n          <Button\n            onClick={togglePreview}\n            variant=\"outline\"\n            className=\"bg-[#2d2d2d] border-gray-700 hover:bg-[#3d3d3d] text-gray-100\"\n          >\n            {showPreview ? <EyeOff className=\"w-4 h-4 mr-2\" /> : <Eye className=\"w-4 h-4 mr-2\" />}\n            {showPreview ? 'Hide Preview' : 'Show Preview'}\n          </Button>\n        </div>\n\n        <motion.div\n          initial={{ opacity: 0, y: -20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.3 }}\n          className=\"mb-6 bg-[#2d2d2d] border border-gray-700 rounded-lg p-3 shadow-lg\"\n        >\n          <div className=\"flex flex-wrap gap-2\">\n            {toolbarButtons.map((button) => {\n              const Icon = button.icon;\n              return (\n                <motion.div\n                  key={button.id}\n                  whileHover={{ scale: 1.1, y: -2 }}\n                  whileTap={{ scale: 0.95 }}\n                  transition={{ type: \"spring\", stiffness: 400, damping: 17 }}\n                >\n                  <Button\n                    onClick={() => handleToolbarAction(button.action)}\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    className=\"bg-[#3d3d3d] hover:bg-[#4d4d4d] border border-gray-600 hover:border-blue-500 text-gray-100 transition-all duration-200 group relative\"\n                    title={button.label}\n                  >\n                    <Icon className=\"w-4 h-4 group-hover:text-blue-400 transition-colors\" />\n                    <motion.span\n                      initial={{ opacity: 0, y: 10 }}\n                      whileHover={{ opacity: 1, y: 0 }}\n                      className=\"absolute -bottom-8 left-1/2 transform -translate-x-1/2 text-xs bg-gray-900 px-2 py-1 rounded whitespace-nowrap pointer-events-none opacity-0 group-hover:opacity-100 transition-opacity\"\n                    >\n                      {button.label}\n                    </motion.span>\n                  </Button>\n                </motion.div>\n              );\n            })}\n          </div>\n        </motion.div>\n\n        {/* Editor Layout */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n          {/* Editor Panel */}\n          <motion.div\n            layout\n            className=\"relative\"\n            initial={{ opacity: 0, x: -20 }}\n            animate={{ opacity: 1, x: 0 }}\n            transition={{ duration: 0.3 }}\n          >\n            <div className=\"bg-[#1e1e1e] border border-gray-800 rounded-lg overflow-hidden shadow-2xl\">\n              <div className=\"bg-[#2d2d2d] px-4 py-2 border-b border-gray-800 flex items-center justify-between\">\n                <span className=\"text-sm font-medium text-gray-400\">Editor</span>\n                <div className=\"flex gap-2\">\n                  <div className=\"w-3 h-3 rounded-full bg-red-500\"></div>\n                  <div className=\"w-3 h-3 rounded-full bg-yellow-500\"></div>\n                  <div className=\"w-3 h-3 rounded-full bg-green-500\"></div>\n                </div>\n              </div>\n              <textarea\n                value={markdown}\n                onChange={handleMarkdownChange}\n                className=\"w-full h-[600px] bg-[#1e1e1e] text-gray-100 p-6 font-mono text-sm resize-none focus:outline-none focus:ring-2 focus:ring-blue-500/50\"\n                placeholder=\"Start typing your markdown...\"\n                spellCheck={false}\n              />\n            </div>\n          </motion.div>\n\n          {/* Preview Panel */}\n          <AnimatePresence mode=\"wait\">\n            {showPreview && (\n              <motion.div\n                key=\"preview\"\n                initial={{ opacity: 0, x: 20 }}\n                animate={{ opacity: 1, x: 0 }}\n                exit={{ opacity: 0, x: 20 }}\n                transition={{ duration: 0.3 }}\n                className=\"relative\"\n              >\n                <div className=\"bg-[#1e1e1e] border border-gray-800 rounded-lg overflow-hidden shadow-2xl\">\n                  <div className=\"bg-[#2d2d2d] px-4 py-2 border-b border-gray-800\">\n                    <span className=\"text-sm font-medium text-gray-400\">Preview</span>\n                  </div>\n                  <div className=\"p-6 h-[600px] overflow-y-auto\">\n                    <MarkdownPreview content={markdown} />\n                  </div>\n                </div>\n              </motion.div>\n            )}\n          </AnimatePresence>\n        </div>\n\n        {/* Stats Bar */}\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ delay: 0.2 }}\n          className=\"mt-6 bg-[#2d2d2d] border border-gray-800 rounded-lg p-4\"\n        >\n          <div className=\"flex flex-wrap items-center justify-between gap-4\">\n            <div className=\"flex items-center gap-6\">\n              <div className=\"flex items-center gap-2\">\n                <span className=\"text-xs text-gray-500 uppercase tracking-wider\">Words</span>\n                <span className=\"text-lg font-semibold text-blue-400\">\n                  {markdown.trim().split(/\\s+/).filter(word => word.length > 0).length}\n                </span>\n              </div>\n              <div className=\"w-px h-6 bg-gray-700\"></div>\n              <div className=\"flex items-center gap-2\">\n                <span className=\"text-xs text-gray-500 uppercase tracking-wider\">Characters</span>\n                <span className=\"text-lg font-semibold text-purple-400\">\n                  {markdown.length}\n                </span>\n              </div>\n              <div className=\"w-px h-6 bg-gray-700\"></div>\n              <div className=\"flex items-center gap-2\">\n                <span className=\"text-xs text-gray-500 uppercase tracking-wider\">Lines</span>\n                <span className=\"text-lg font-semibold text-green-400\">\n                  {markdown.split('\\n').length}\n                </span>\n              </div>\n              <div className=\"w-px h-6 bg-gray-700\"></div>\n              <div className=\"flex items-center gap-2\">\n                <span className=\"text-xs text-gray-500 uppercase tracking-wider\">Reading Time</span>\n                <span className=\"text-lg font-semibold text-orange-400\">\n                  {Math.ceil(markdown.trim().split(/\\s+/).filter(word => word.length > 0).length / 200)} min\n                </span>\n              </div>\n            </div>\n            <div className=\"text-xs text-gray-500\">\n              Cursor: {cursorPosition}\n            </div>\n          </div>\n        </motion.div>\n      </div>\n    </div>\n  );\n}",
  "error": null,
  "overall_score": 59,
  "code_quality_score": 17,
  "architecture_score": 14,
  "performance_score": 16,
  "accessibility_score": 12,
  "metadata": {
    "document_id": "eval_room_25265a2644f1",
    "prompt_category": "productivity",
    "prompt_complexity": 8.0
  },
  "raw_response": {
    "document_id": "eval_room_25265a2644f1",
    "mode": "parallel",
    "prompt": "Create a premium markdown editor with dark theme, syntax highlighting with vibrant colors, smooth live preview transitions, floating toolbar with hover effects, and code block styling like VS Code",
    "content": "import { useState, useCallback } from 'react';\nimport React from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Bold, Italic, Code, List, ListOrdered, Link, Image, Eye, EyeOff } from 'lucide-react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport ReactMarkdown from 'react-markdown';\nimport { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';\nimport { vscDarkPlus } from 'react-syntax-highlighter/dist/esm/styles/prism';\n\ninterface ToolbarButton {\n  id: string;\n  icon: any;\n  label: string;\n  action: string;\n}\n\nconst toolbarButtons: ToolbarButton[] = [\n  { id: 'bold', icon: Bold, label: 'Bold', action: '**text**' },\n  { id: 'italic', icon: Italic, label: 'Italic', action: '*text*' },\n  { id: 'code', icon: Code, label: 'Code', action: '`code`' },\n  { id: 'list', icon: List, label: 'Bullet List', action: '- item' },\n  { id: 'ordered', icon: ListOrdered, label: 'Numbered List', action: '1. item' },\n  { id: 'link', icon: Link, label: 'Link', action: '[text](url)' },\n  { id: 'image', icon: Image, label: 'Image', action: '![alt](url)' }\n];\n\nconst mockMarkdownContent = `# Welcome to Premium Markdown Editor\n\n## Features\n\nThis is a **bold** statement and this is *italic* text.\n\n### Code Blocks\n\n\\`\\`\\`javascript\nfunction greet(name) {\n  console.log(\\`Hello, \\${name}!\\`);\n  return true;\n}\n\\`\\`\\`\n\n\\`\\`\\`python\ndef calculate(x, y):\n    result = x + y\n    return result\n\\`\\`\\`\n\n### Lists\n\n- First item\n- Second item\n- Third item\n\n1. Numbered one\n2. Numbered two\n3. Numbered three\n\n### Inline Code\n\nUse \\`const variable = 'value'\\` for inline code.\n\n### Links and Images\n\n[Visit Example](https://example.com)\n\n> This is a blockquote with important information.\n\n---\n\n**End of document**\n`;\n\nconst MarkdownPreview = ({ content }: { content: string }) => {\n  return (\n    <ReactMarkdown\n      className=\"prose prose-invert max-w-none\"\n      components={{\n        h1: ({ children }) => (\n          <h1 className=\"text-4xl font-bold mb-4 mt-6 text-blue-400 border-b border-gray-700 pb-2\">\n            {children}\n          </h1>\n        ),\n        h2: ({ children }) => (\n          <h2 className=\"text-3xl font-bold mb-3 mt-5 text-purple-400\">\n            {children}\n          </h2>\n        ),\n        h3: ({ children }) => (\n          <h3 className=\"text-2xl font-bold mb-2 mt-4 text-green-400\">\n            {children}\n          </h3>\n        ),\n        p: ({ children }) => (\n          <p className=\"mb-4 text-gray-300 leading-relaxed\">\n            {children}\n          </p>\n        ),\n        strong: ({ children }) => (\n          <strong className=\"font-bold text-yellow-400\">\n            {children}\n          </strong>\n        ),\n        em: ({ children }) => (\n          <em className=\"italic text-pink-400\">\n            {children}\n          </em>\n        ),\n        code: ({ inline, className, children, ...props }: any) => {\n          const match = /language-(\\w+)/.exec(className || '');\n          const language = match ? match[1] : '';\n          \n          return !inline && language ? (\n            <div className=\"my-4 rounded-lg overflow-hidden border border-gray-700 shadow-lg\">\n              <div className=\"bg-[#2d2d2d] px-4 py-2 border-b border-gray-700 flex items-center justify-between\">\n                <span className=\"text-xs font-mono text-gray-400 uppercase\">{language}</span>\n                <div className=\"flex gap-1.5\">\n                  <div className=\"w-2.5 h-2.5 rounded-full bg-red-500\"></div>\n                  <div className=\"w-2.5 h-2.5 rounded-full bg-yellow-500\"></div>\n                  <div className=\"w-2.5 h-2.5 rounded-full bg-green-500\"></div>\n                </div>\n              </div>\n              <SyntaxHighlighter\n                style={vscDarkPlus}\n                language={language}\n                PreTag=\"div\"\n                customStyle={{\n                  margin: 0,\n                  padding: '1.5rem',\n                  background: '#1e1e1e',\n                  fontSize: '0.875rem',\n                  lineHeight: '1.5'\n                }}\n                {...props}\n              >\n                {String(children).replace(/\\n$/, '')}\n              </SyntaxHighlighter>\n            </div>\n          ) : (\n            <code className=\"bg-[#2d2d2d] text-orange-400 px-2 py-1 rounded text-sm font-mono border border-gray-700\">\n              {children}\n            </code>\n          );\n        },\n        ul: ({ children }) => (\n          <ul className=\"list-disc list-inside mb-4 space-y-2 text-gray-300\">\n            {children}\n          </ul>\n        ),\n        ol: ({ children }) => (\n          <ol className=\"list-decimal list-inside mb-4 space-y-2 text-gray-300\">\n            {children}\n          </ol>\n        ),\n        li: ({ children }) => (\n          <li className=\"ml-4 text-gray-300\">\n            {children}\n          </li>\n        ),\n        a: ({ href, children }) => (\n          <a\n            href={href}\n            className=\"text-blue-400 hover:text-blue-300 underline transition-colors\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            {children}\n          </a>\n        ),\n        blockquote: ({ children }) => (\n          <blockquote className=\"border-l-4 border-purple-500 pl-4 py-2 my-4 bg-[#2d2d2d] rounded-r text-gray-300 italic\">\n            {children}\n          </blockquote>\n        ),\n        hr: () => (\n          <hr className=\"my-6 border-gray-700\" />\n        ),\n        img: ({ src, alt }) => (\n          <img\n            src={src}\n            alt={alt}\n            className=\"max-w-full h-auto rounded-lg border border-gray-700 my-4\"\n          />\n        )\n      }}\n    >\n      {content}\n    </ReactMarkdown>\n  );\n};\n\nexport default function MarkdownEditor() {\n  const [markdown, setMarkdown] = useState(mockMarkdownContent);\n  const [showPreview, setShowPreview] = useState(true);\n  const [cursorPosition, setCursorPosition] = useState(0);\n\n  const handleMarkdownChange = useCallback((e: React.ChangeEvent<HTMLTextAreaElement>) => {\n    setMarkdown(e.target.value);\n    setCursorPosition(e.target.selectionStart);\n  }, []);\n\n  const togglePreview = useCallback(() => {\n    setShowPreview(prev => !prev);\n  }, []);\n\nconst textareaRef = React.useRef<HTMLTextAreaElement>(null);\n\n  const handleToolbarAction = useCallback((action: string) => {\n    const textareaRef = document.querySelector('textarea') as HTMLTextAreaElement;\n    if (!textareaRef) return;\n\n    const start = textareaRef.selectionStart;\n    const end = textareaRef.selectionEnd;\n    const selectedText = markdown.substring(start, end);\n    const beforeText = markdown.substring(0, start);\n    const afterText = markdown.substring(end);\n\n    let newText = '';\n    let newCursorPosition = start;\n\n    // Handle different markdown syntax patterns\n    if (action.includes('**text**')) {\n      // Bold\n      if (selectedText) {\n        newText = `${beforeText}**${selectedText}**${afterText}`;\n        newCursorPosition = start + selectedText.length + 4;\n      } else {\n        newText = `${beforeText}**text**${afterText}`;\n        newCursorPosition = start + 2;\n      }\n    } else if (action.includes('*text*')) {\n      // Italic\n      if (selectedText) {\n        newText = `${beforeText}*${selectedText}*${afterText}`;\n        newCursorPosition = start + selectedText.length + 2;\n      } else {\n        newText = `${beforeText}*text*${afterText}`;\n        newCursorPosition = start + 1;\n      }\n    } else if (action.includes('`code`')) {\n      // Inline code\n      if (selectedText) {\n        newText = `${beforeText}\\`${selectedText}\\`${afterText}`;\n        newCursorPosition = start + selectedText.length + 2;\n      } else {\n        newText = `${beforeText}\\`code\\`${afterText}`;\n        newCursorPosition = start + 1;\n      }\n    } else if (action.includes('[text](url)')) {\n      // Link\n      if (selectedText) {\n        newText = `${beforeText}[${selectedText}](url)${afterText}`;\n        newCursorPosition = start + selectedText.length + 3;\n      } else {\n        newText = `${beforeText}[text](url)${afterText}`;\n        newCursorPosition = start + 1;\n      }\n    } else if (action.includes('![alt](url)')) {\n      // Image\n      if (selectedText) {\n        newText = `${beforeText}![${selectedText}](url)${afterText}`;\n        newCursorPosition = start + selectedText.length + 4;\n      } else {\n        newText = `${beforeText}![alt](url)${afterText}`;\n        newCursorPosition = start + 2;\n      }\n    } else if (action.includes('- item')) {\n      // Bullet list\n      const lineStart = markdown.lastIndexOf('\\n', start - 1) + 1;\n      newText = `${beforeText}\\n- item${afterText}`;\n      newCursorPosition = start + 3;\n    } else if (action.includes('1. item')) {\n      // Numbered list\n      const lineStart = markdown.lastIndexOf('\\n', start - 1) + 1;\n      newText = `${beforeText}\\n1. item${afterText}`;\n      newCursorPosition = start + 4;\n    } else {\n      return;\n    }\n\n    setMarkdown(newText);\n    setCursorPosition(newCursorPosition);\n\n    // Set cursor position after state update\n    setTimeout(() => {\n      textareaRef.focus();\n      textareaRef.setSelectionRange(newCursorPosition, newCursorPosition);\n    }, 0);\n  }, [markdown, cursorPosition]);\n\n  return (\n    <div className=\"min-h-screen bg-[#1e1e1e] text-gray-100\">\n      <div className=\"container mx-auto px-4 py-6\">\n        {/* Header */}\n        <div className=\"mb-6 flex items-center justify-between\">\n          <h1 className=\"text-3xl font-bold bg-gradient-to-r from-blue-400 to-purple-500 bg-clip-text text-transparent\">\n            Premium Markdown Editor\n          </h1>\n          <Button\n            onClick={togglePreview}\n            variant=\"outline\"\n            className=\"bg-[#2d2d2d] border-gray-700 hover:bg-[#3d3d3d] text-gray-100\"\n          >\n            {showPreview ? <EyeOff className=\"w-4 h-4 mr-2\" /> : <Eye className=\"w-4 h-4 mr-2\" />}\n            {showPreview ? 'Hide Preview' : 'Show Preview'}\n          </Button>\n        </div>\n\n        <motion.div\n          initial={{ opacity: 0, y: -20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.3 }}\n          className=\"mb-6 bg-[#2d2d2d] border border-gray-700 rounded-lg p-3 shadow-lg\"\n        >\n          <div className=\"flex flex-wrap gap-2\">\n            {toolbarButtons.map((button) => {\n              const Icon = button.icon;\n              return (\n                <motion.div\n                  key={button.id}\n                  whileHover={{ scale: 1.1, y: -2 }}\n                  whileTap={{ scale: 0.95 }}\n                  transition={{ type: \"spring\", stiffness: 400, damping: 17 }}\n                >\n                  <Button\n                    onClick={() => handleToolbarAction(button.action)}\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    className=\"bg-[#3d3d3d] hover:bg-[#4d4d4d] border border-gray-600 hover:border-blue-500 text-gray-100 transition-all duration-200 group relative\"\n                    title={button.label}\n                  >\n                    <Icon className=\"w-4 h-4 group-hover:text-blue-400 transition-colors\" />\n                    <motion.span\n                      initial={{ opacity: 0, y: 10 }}\n                      whileHover={{ opacity: 1, y: 0 }}\n                      className=\"absolute -bottom-8 left-1/2 transform -translate-x-1/2 text-xs bg-gray-900 px-2 py-1 rounded whitespace-nowrap pointer-events-none opacity-0 group-hover:opacity-100 transition-opacity\"\n                    >\n                      {button.label}\n                    </motion.span>\n                  </Button>\n                </motion.div>\n              );\n            })}\n          </div>\n        </motion.div>\n\n        {/* Editor Layout */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n          {/* Editor Panel */}\n          <motion.div\n            layout\n            className=\"relative\"\n            initial={{ opacity: 0, x: -20 }}\n            animate={{ opacity: 1, x: 0 }}\n            transition={{ duration: 0.3 }}\n          >\n            <div className=\"bg-[#1e1e1e] border border-gray-800 rounded-lg overflow-hidden shadow-2xl\">\n              <div className=\"bg-[#2d2d2d] px-4 py-2 border-b border-gray-800 flex items-center justify-between\">\n                <span className=\"text-sm font-medium text-gray-400\">Editor</span>\n                <div className=\"flex gap-2\">\n                  <div className=\"w-3 h-3 rounded-full bg-red-500\"></div>\n                  <div className=\"w-3 h-3 rounded-full bg-yellow-500\"></div>\n                  <div className=\"w-3 h-3 rounded-full bg-green-500\"></div>\n                </div>\n              </div>\n              <textarea\n                value={markdown}\n                onChange={handleMarkdownChange}\n                className=\"w-full h-[600px] bg-[#1e1e1e] text-gray-100 p-6 font-mono text-sm resize-none focus:outline-none focus:ring-2 focus:ring-blue-500/50\"\n                placeholder=\"Start typing your markdown...\"\n                spellCheck={false}\n              />\n            </div>\n          </motion.div>\n\n          {/* Preview Panel */}\n          <AnimatePresence mode=\"wait\">\n            {showPreview && (\n              <motion.div\n                key=\"preview\"\n                initial={{ opacity: 0, x: 20 }}\n                animate={{ opacity: 1, x: 0 }}\n                exit={{ opacity: 0, x: 20 }}\n                transition={{ duration: 0.3 }}\n                className=\"relative\"\n              >\n                <div className=\"bg-[#1e1e1e] border border-gray-800 rounded-lg overflow-hidden shadow-2xl\">\n                  <div className=\"bg-[#2d2d2d] px-4 py-2 border-b border-gray-800\">\n                    <span className=\"text-sm font-medium text-gray-400\">Preview</span>\n                  </div>\n                  <div className=\"p-6 h-[600px] overflow-y-auto\">\n                    <MarkdownPreview content={markdown} />\n                  </div>\n                </div>\n              </motion.div>\n            )}\n          </AnimatePresence>\n        </div>\n\n        {/* Stats Bar */}\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ delay: 0.2 }}\n          className=\"mt-6 bg-[#2d2d2d] border border-gray-800 rounded-lg p-4\"\n        >\n          <div className=\"flex flex-wrap items-center justify-between gap-4\">\n            <div className=\"flex items-center gap-6\">\n              <div className=\"flex items-center gap-2\">\n                <span className=\"text-xs text-gray-500 uppercase tracking-wider\">Words</span>\n                <span className=\"text-lg font-semibold text-blue-400\">\n                  {markdown.trim().split(/\\s+/).filter(word => word.length > 0).length}\n                </span>\n              </div>\n              <div className=\"w-px h-6 bg-gray-700\"></div>\n              <div className=\"flex items-center gap-2\">\n                <span className=\"text-xs text-gray-500 uppercase tracking-wider\">Characters</span>\n                <span className=\"text-lg font-semibold text-purple-400\">\n                  {markdown.length}\n                </span>\n              </div>\n              <div className=\"w-px h-6 bg-gray-700\"></div>\n              <div className=\"flex items-center gap-2\">\n                <span className=\"text-xs text-gray-500 uppercase tracking-wider\">Lines</span>\n                <span className=\"text-lg font-semibold text-green-400\">\n                  {markdown.split('\\n').length}\n                </span>\n              </div>\n              <div className=\"w-px h-6 bg-gray-700\"></div>\n              <div className=\"flex items-center gap-2\">\n                <span className=\"text-xs text-gray-500 uppercase tracking-wider\">Reading Time</span>\n                <span className=\"text-lg font-semibold text-orange-400\">\n                  {Math.ceil(markdown.trim().split(/\\s+/).filter(word => word.length > 0).length / 200)} min\n                </span>\n              </div>\n            </div>\n            <div className=\"text-xs text-gray-500\">\n              Cursor: {cursorPosition}\n            </div>\n          </div>\n        </motion.div>\n      </div>\n    </div>\n  );\n}",
    "error": null,
    "elapsed_time": 59.31501626968384,
    "success": true
  }
}