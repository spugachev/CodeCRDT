{
  "prompt_id": "dashboard",
  "prompt_name": "Analytics Dashboard",
  "mode": "parallel",
  "run_number": 31,
  "timestamp": "2025-10-14T02:40:01.506259",
  "response_time": 99.37726879119873,
  "total_tokens": null,
  "response_content": "table table with product data, status badges, pagination, and responsive design */}\n          </CardContent>\n        </Card>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 md:gap-6 mt-8\">\n          {realtimeUpdates.map((update, index) => {\n            const getUpdateIcon = () => {\n              switch (update.type) {\n                case 'success':\n                  return <Zap className=\"h-5 w-5 text-green-500\" />;\n                case 'warning':\n                  return <Activity className=\"h-5 w-5 text-yellow-500\" />;\n                case 'info':\n                  return <Clock className=\"h-5 w-5 text-blue-500\" />;\n              }\n            };\n\n            const getBorderColor = () => {\n              switch (update.type) {\n                case 'success':\n                  return 'border-l-green-500';\n                case 'warning':\n                  return 'border-l-yellow-500';\n                case 'info':\n                  return 'border-l-blue-500';\n              }\n            };\n\n            return (\n              <motion.div\n                key={update.id}\n                initial={{ opacity: 0, y: 20 }}\n                animate={{ opacity: 1, y: 0 }}\n                transition={{ duration: 0.3, delay: index * 0.1 }}\n              >\n                <Card className={`${isDarkMode ? 'bg-gray-800 border-gray-700' : ''} border-l-4 ${getBorderColor()} relative overflow-hidden`}>\n                  <CardContent className=\"p-4\">\n                    <div className=\"flex items-start gap-3\">\n                      <div className=\"relative\">\n                        <motion.div\n                          animate={{\n                            scale: [1, 1.2, 1],\n                            opacity: [1, 0.5, 1]\n                          }}\n                          transition={{\n                            duration: 2,\n                            repeat: Infinity,\n                            ease: \"easeInOut\"\n                          }}\n                          className=\"absolute inset-0 rounded-full bg-current opacity-20\"\n                        />\n                        {getUpdateIcon()}\n                      </div>\n                      \n                      <div className=\"flex-1 min-w-0\">\n                        <h3 className={`font-semibold text-sm ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                          {update.title}\n                        </h3>\n                        <p className={`text-xs mt-1 ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                          {update.description}\n                        </p>\n                        <div className=\"flex items-center gap-1 mt-2\">\n                          <Clock className={`h-3 w-3 ${isDarkMode ? 'text-gray-500' : 'text-gray-400'}`} />\n                          <span className={`text-xs ${isDarkMode ? 'text-gray-500' : 'text-gray-400'}`}>\n                            {getTimeAgo(update.timestamp)}\n                          </span>\n                        </div>\n                      </div>\n\n                      <motion.div\n                        animate={{\n                          scale: [1, 1.5, 1],\n                          opacity: [0.5, 1, 0.5]\n                        }}\n                        transition={{\n                          duration: 1.5,\n                          repeat: Infinity,\n                          ease: \"easeInOut\"\n                        }}\n                        className={`w-2 h-2 rounded-full ${\n                          update.type === 'success' ? 'bg-green-500' :\n                          update.type === 'warning' ? 'bg-yellow-500' :\n                          'bg-blue-500'\n                        }`}\n                      />\n                    </div>\n                  </CardContent>\n                </Card>\n              </motion.div>\n            );\n          })}\n        </div>\n      </div>\n    </div>\n  );\n}import { useState, useCallback } from 'react';\nimport { motion } from 'framer-motion';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Moon, Sun, RefreshCw } from 'lucide-react';\n\nimport { motion } from 'framer-motion';\nimport { useEffect } from 'react';\nimport { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip';\n\nimport { TrendingUp, TrendingDown, DollarSign, Users, ShoppingCart, Target } from 'lucide-react';\nimport { Activity, Zap, Clock } from 'lucide-react';\nimport { motion } from 'framer-motion';\n\ninterface MetricData {\n  id: string;\n  label: string;\n  value: number;\n  change: number;\n  trend: 'up' | 'down';\n}\n\ninterface ChartDataPoint {\n  date: string;\n  revenue: number;\n  users: number;\n  orders: number;\n}\n\ninterface TableRow {\n  id: string;\n  product: string;\n  sales: number;\n  revenue: number;\n  status: 'active' | 'pending' | 'inactive';\n}\n\ninterface RealtimeUpdate {\n  id: string;\n  title: string;\n  description: string;\n  timestamp: Date;\n  type: 'success' | 'warning' | 'info';\n}\n\nconst mockMetrics: MetricData[] = [\n  { id: '1', label: 'Total Revenue', value: 45231, change: 12.5, trend: 'up' },\n  { id: '2', label: 'Active Users', value: 2350, change: 8.2, trend: 'up' },\n  { id: '3', label: 'Total Orders', value: 1543, change: -3.1, trend: 'down' },\n  { id: '4', label: 'Conversion Rate', value: 3.24, change: 5.7, trend: 'up' }\n];\n\nconst mockChartData: ChartDataPoint[] = [\n  { date: '2024-01-01', revenue: 12000, users: 450, orders: 230 },\n  { date: '2024-01-02', revenue: 15000, users: 520, orders: 280 },\n  { date: '2024-01-03', revenue: 13500, users: 490, orders: 250 },\n  { date: '2024-01-04', revenue: 18000, users: 610, orders: 320 },\n  { date: '2024-01-05', revenue: 16500, users: 580, orders: 295 },\n  { date: '2024-01-06', revenue: 20000, users: 680, orders: 350 },\n  { date: '2024-01-07', revenue: 22000, users: 720, orders: 380 }\n];\n\nconst mockTableData: TableRow[] = [\n  { id: '1', product: 'Premium Plan', sales: 234, revenue: 23400, status: 'active' },\n  { id: '2', product: 'Basic Plan', sales: 567, revenue: 11340, status: 'active' },\n  { id: '3', product: 'Enterprise Plan', sales: 89, revenue: 17800, status: 'active' },\n  { id: '4', product: 'Starter Plan', sales: 432, revenue: 4320, status: 'pending' },\n  { id: '5', product: 'Pro Plan', sales: 156, revenue: 15600, status: 'active' }\n];\n\nconst mockRealtimeUpdates: RealtimeUpdate[] = [\n  {\n    id: '1',\n    title: 'New Order Received',\n    description: 'Premium Plan subscription from Enterprise Corp',\n    timestamp: new Date(Date.now() - 2 * 60 * 1000),\n    type: 'success'\n  },\n  {\n    id: '2',\n    title: 'High Traffic Alert',\n    description: 'User activity increased by 45% in the last hour',\n    timestamp: new Date(Date.now() - 5 * 60 * 1000),\n    type: 'warning'\n  },\n  {\n    id: '3',\n    title: 'System Update',\n    description: 'Dashboard metrics refreshed successfully',\n    timestamp: new Date(Date.now() - 8 * 60 * 1000),\n    type: 'info'\n  }\n];\n\nconst pieChartColors = ['#3b82f6', '#8b5cf6', '#ec4899', '#f59e0b', '#10b981'];\n\nconst generatePieChartData = (data: TableRow[]): PieChartData[] => {\n  return data.map((row, index) => ({\n    label: row.product,\n    value: row.sales,\n    color: pieChartColors[index % pieChartColors.length]\n  }));\n};\n\nconst PieChart = ({ data, isDark }: { data: PieChartData[]; isDark: boolean }) => {\n  const [hoveredIndex, setHoveredIndex] = useState<number | null>(null);\n  \n  const total = data.reduce((sum, item) => sum + item.value, 0);\n  const size = 200;\n  const center = size / 2;\n  const radius = size / 2 - 10;\n  \n  let currentAngle = -90;\n  \n  const slices = data.map((item, index) => {\n    const percentage = (item.value / total) * 100;\n    const angle = (item.value / total) * 360;\n    const startAngle = currentAngle;\n    const endAngle = currentAngle + angle;\n    \n    const startRad = (startAngle * Math.PI) / 180;\n    const endRad = (endAngle * Math.PI) / 180;\n    \n    const x1 = center + radius * Math.cos(startRad);\n    const y1 = center + radius * Math.sin(startRad);\n    const x2 = center + radius * Math.cos(endRad);\n    const y2 = center + radius * Math.sin(endRad);\n    \n    const largeArc = angle > 180 ? 1 : 0;\n    \n    const path = `M ${center} ${center} L ${x1} ${y1} A ${radius} ${radius} 0 ${largeArc} 1 ${x2} ${y2} Z`;\n    \n    currentAngle = endAngle;\n    \n    return {\n      path,\n      color: item.color,\n      percentage,\n      label: item.label,\n      value: item.value\n    };\n  });\n  \n  return (\n    <div className=\"flex flex-col items-center gap-6\">\n      <div className=\"relative\">\n        <svg width={size} height={size} viewBox={`0 0 ${size} ${size}`}>\n          {slices.map((slice, index) => (\n            <motion.path\n              key={index}\n              d={slice.path}\n              fill={slice.color}\n              stroke={isDark ? '#1f2937' : '#ffffff'}\n              strokeWidth={2}\n              initial={{ opacity: 0, scale: 0 }}\n              animate={{ \n                opacity: hoveredIndex === null || hoveredIndex === index ? 1 : 0.6,\n                scale: hoveredIndex === index ? 1.05 : 1\n              }}\n              transition={{ duration: 0.3, delay: index * 0.1 }}\n              onMouseEnter={() => setHoveredIndex(index)}\n              onMouseLeave={() => setHoveredIndex(null)}\n              style={{ cursor: 'pointer', transformOrigin: `${center}px ${center}px` }}\n            />\n          ))}\n        </svg>\n        \n        {hoveredIndex !== null && (\n          <motion.div\n            initial={{ opacity: 0, scale: 0.8 }}\n            animate={{ opacity: 1, scale: 1 }}\n            className={`absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 text-center pointer-events-none`}\n          >\n            <div className={`text-2xl font-bold ${isDark ? 'text-white' : 'text-gray-900'}`}>\n              {slices[hoveredIndex].percentage.toFixed(1)}%\n            </div>\n            <div className={`text-xs ${isDark ? 'text-gray-400' : 'text-gray-600'}`}>\n              {slices[hoveredIndex].value} orders\n            </div>\n          </motion.div>\n        )}\n      </div>\n      \n      <div className=\"w-full space-y-2\">\n        {slices.map((slice, index) => (\n          <motion.div\n            key={index}\n            initial={{ opacity: 0, x: -20 }}\n            animate={{ opacity: 1, x: 0 }}\n            transition={{ delay: index * 0.1 }}\n            className={`flex items-center justify-between p-2 rounded-lg transition-colors ${\n              hoveredIndex === index ? (isDark ? 'bg-gray-700' : 'bg-gray-100') : ''\n            }`}\n            onMouseEnter={() => setHoveredIndex(index)}\n            onMouseLeave={() => setHoveredIndex(null)}\n            style={{ cursor: 'pointer' }}\n          >\n            <div className=\"flex items-center gap-2\">\n              <div\n                className=\"w-3 h-3 rounded-full\"\n                style={{ backgroundColor: slice.color }}\n              />\n              <span className={`text-sm ${isDark ? 'text-gray-300' : 'text-gray-700'}`}>\n                {slice.label}\n              </span>\n            </div>\n            <div className=\"flex items-center gap-3\">\n              <span className={`text-sm font-medium ${isDark ? 'text-gray-400' : 'text-gray-600'}`}>\n                {slice.value}\n              </span>\n              <span className={`text-xs ${isDark ? 'text-gray-500' : 'text-gray-500'}`}>\n                {slice.percentage.toFixed(1)}%\n              </span>\n            </div>\n          </motion.div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nconst UserChart = ({ data, isDarkMode }: { data: ChartDataPoint[], isDarkMode: boolean }) => {\n  const maxUsers = Math.max(...data.map(d => d.users));\n  const minUsers = Math.min(...data.map(d => d.users));\n  const range = maxUsers - minUsers;\n  const padding = range * 0.2;\n  const chartMax = maxUsers + padding;\n  const chartMin = Math.max(0, minUsers - padding);\n  const chartRange = chartMax - chartMin;\n\n  const width = 100;\n  const height = 100;\n\n  // Create SVG path for area chart\n  const points = data.map((point, index) => {\n    const x = (index / (data.length - 1)) * width;\n    const normalizedValue = ((point.users - chartMin) / chartRange);\n    const y = height - (normalizedValue * height);\n    return { x, y, value: point.users };\n  });\n\n  const linePath = points.map((p, i) => \n    `${i === 0 ? 'M' : 'L'} ${p.x} ${p.y}`\n  ).join(' ');\n\n  const areaPath = `${linePath} L ${width} ${height} L 0 ${height} Z`;\n\n  const formatDate = (dateStr: string) => {\n    const date = new Date(dateStr);\n    return date.toLocaleDateString('en-US', { month: 'short', day: 'numeric' });\n  };\n\n  return (\n    <div className=\"w-full h-64 relative\">\n      <svg\n        viewBox={`0 0 ${width} ${height}`}\n        className=\"w-full h-full\"\n        preserveAspectRatio=\"none\"\n      >\n        <defs>\n          <linearGradient id=\"userGradient\" x1=\"0%\" y1=\"0%\" x2=\"0%\" y2=\"100%\">\n            <stop offset=\"0%\" stopColor=\"#3b82f6\" stopOpacity=\"0.6\" />\n            <stop offset=\"50%\" stopColor=\"#3b82f6\" stopOpacity=\"0.3\" />\n            <stop offset=\"100%\" stopColor=\"#3b82f6\" stopOpacity=\"0.05\" />\n          </linearGradient>\n        </defs>\n\n        {/* Animated area fill */}\n        <motion.path\n          d={areaPath}\n          fill=\"url(#userGradient)\"\n          initial={{ opacity: 0 }}\n          animate={{ opacity: 1 }}\n          transition={{ duration: 0.8, ease: \"easeOut\" }}\n        />\n\n        {/* Animated line stroke */}\n        <motion.path\n          d={linePath}\n          fill=\"none\"\n          stroke=\"#3b82f6\"\n          strokeWidth=\"0.5\"\n          initial={{ pathLength: 0 }}\n          animate={{ pathLength: 1 }}\n          transition={{ duration: 1.5, ease: \"easeInOut\" }}\n        />\n\n        {/* Data points */}\n        {points.map((point, index) => (\n          <motion.g key={index}>\n            <motion.circle\n              cx={point.x}\n              cy={point.y}\n              r=\"1\"\n              fill=\"#3b82f6\"\n              initial={{ scale: 0, opacity: 0 }}\n              animate={{ scale: 1, opacity: 1 }}\n              transition={{ delay: index * 0.1, duration: 0.3 }}\n            />\n          </motion.g>\n        ))}\n      </svg>\n\n      {/* X-axis labels */}\n      <div className=\"flex justify-between mt-2 px-1\">\n        {data.map((point, index) => (\n          index % Math.ceil(data.length / 4) === 0 || index === data.length - 1 ? (\n            <motion.span\n              key={index}\n              className={`text-xs ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}\n              initial={{ opacity: 0, y: -10 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ delay: 0.5 + index * 0.1 }}\n            >\n              {formatDate(point.date)}\n            </motion.span>\n          ) : null\n        ))}\n      </div>\n\n      {/* Y-axis reference */}\n      <div className=\"absolute left-0 top-0 bottom-8 flex flex-col justify-between\">\n        <motion.span\n          className={`text-xs ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}\n          initial={{ opacity: 0, x: -10 }}\n          animate={{ opacity: 1, x: 0 }}\n          transition={{ delay: 0.3 }}\n        >\n          {Math.round(chartMax)}\n        </motion.span>\n        <motion.span\n          className={`text-xs ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}\n          initial={{ opacity: 0, x: -10 }}\n          animate={{ opacity: 1, x: 0 }}\n          transition={{ delay: 0.4 }}\n        >\n          {Math.round((chartMax + chartMin) / 2)}\n        </motion.span>\n        <motion.span\n          className={`text-xs ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}\n          initial={{ opacity: 0, x: -10 }}\n          animate={{ opacity: 1, x: 0 }}\n          transition={{ delay: 0.5 }}\n        >\n          {Math.round(chartMin)}\n        </motion.span>\n      </div>\n\n      {/* Hover tooltip area */}\n      <div className=\"absolute inset-0 flex\">\n        {points.map((point, index) => (\n          <motion.div\n            key={index}\n            className=\"flex-1 group relative cursor-pointer\"\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            transition={{ delay: 1 + index * 0.05 }}\n          >\n            <div className=\"absolute bottom-full left-1/2 transform -translate-x-1/2 mb-2 opacity-0 group-hover:opacity-100 transition-opacity pointer-events-none z-10\">\n              <div className={`px-3 py-2 rounded-lg shadow-lg ${isDarkMode ? 'bg-gray-700 text-white' : 'bg-white text-gray-900'} border ${isDarkMode ? 'border-gray-600' : 'border-gray-200'}`}>\n                <div className=\"text-xs font-semibold\">{point.value.toLocaleString()} users</div>\n                <div className={`text-xs ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                  {formatDate(data[index].date)}\n                </div>\n              </div>\n            </div>\n          </motion.div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default function AnalyticsDashboard() {\n  const [isDarkMode, setIsDarkMode] = useState(false);\n  const [metrics, setMetrics] = useState<MetricData[]>(mockMetrics);\n  const [chartData, setChartData] = useState<ChartDataPoint[]>(mockChartData);\n  const [tableData, setTableData] = useState<TableRow[]>(mockTableData);\n  const [isRefreshing, setIsRefreshing] = useState(false);\n  const [realtimeUpdates, setRealtimeUpdates] = useState<RealtimeUpdate[]>(mockRealtimeUpdates);\n  const [lastUpdateTime, setLastUpdateTime] = useState<Date>(new Date());\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      const updateTypes: Array<'success' | 'warning' | 'info'> = ['success', 'warning', 'info'];\n      const titles = [\n        'New Order Received',\n        'User Milestone Reached',\n        'Revenue Target Hit',\n        'High Traffic Alert',\n        'System Update',\n        'Performance Optimized'\n      ];\n      const descriptions = [\n        'Premium Plan subscription from Tech Startup',\n        'Active users exceeded 2,500 milestone',\n        'Monthly revenue goal achieved',\n        'User activity spike detected',\n        'Real-time data synchronized',\n        'Dashboard response time improved'\n      ];\n\n      const newUpdate: RealtimeUpdate = {\n        id: Date.now().toString(),\n        title: titles[Math.floor(Math.random() * titles.length)],\n        description: descriptions[Math.floor(Math.random() * descriptions.length)],\n        timestamp: new Date(),\n        type: updateTypes[Math.floor(Math.random() * updateTypes.length)]\n      };\n\n      setRealtimeUpdates(prev => [newUpdate, ...prev.slice(0, 2)]);\n      setLastUpdateTime(new Date());\n    }, 10000);\n\n    return () => clearInterval(interval);\n  }, []);\n\n  const getTimeAgo = (timestamp: Date) => {\n    const seconds = Math.floor((Date.now() - timestamp.getTime()) / 1000);\n    if (seconds < 60) return `${seconds}s ago`;\n    const minutes = Math.floor(seconds / 60);\n    if (minutes < 60) return `${minutes}m ago`;\n    const hours = Math.floor(minutes / 60);\n    return `${hours}h ago`;\n  };\n\n  const toggleDarkMode = useCallback(() => {\n    setIsDarkMode(prev => !prev);\n  }, []);\n\n  const getMaxValue = useCallback((data: ChartDataPoint[]) => {\n    const maxRevenue = Math.max(...data.map(d => d.revenue));\n    const maxUsers = Math.max(...data.map(d => d.users));\n    const maxOrders = Math.max(...data.map(d => d.orders));\n    return Math.max(maxRevenue, maxUsers, maxOrders);\n  }, []);\n\n  const handleRefresh = useCallback(() => {\n    setIsRefreshing(true);\n    \n    setTimeout(() => {\n      // Generate updated mock metrics with random variations\n      const updatedMetrics = mockMetrics.map(metric => ({\n        ...metric,\n        value: metric.value + Math.floor(Math.random() * 200 - 100),\n        change: parseFloat((Math.random() * 20 - 5).toFixed(1)),\n        trend: Math.random() > 0.5 ? 'up' as const : 'down' as const\n      }));\n\n      // Generate updated chart data with random variations\n      const updatedChartData = mockChartData.map(point => ({\n        ...point,\n        revenue: point.revenue + Math.floor(Math.random() * 4000 - 2000),\n        users: point.users + Math.floor(Math.random() * 100 - 50),\n        orders: point.orders + Math.floor(Math.random() * 50 - 25)\n      }));\n\n      // Generate updated table data with random variations\n      const updatedTableData = mockTableData.map(row => ({\n        ...row,\n        sales: row.sales + Math.floor(Math.random() * 40 - 20),\n        revenue: row.revenue + Math.floor(Math.random() * 2000 - 1000),\n        status: ['active', 'pending', 'inactive'][Math.floor(Math.random() * 3)] as 'active' | 'pending' | 'inactive'\n      }));\n\n      setMetrics(updatedMetrics);\n      setChartData(updatedChartData);\n      setTableData(updatedTableData);\n      setIsRefreshing(false);\n    }, 1500)</parameter>\n</invoke>\n  }, []);\n\n  return (\n    <div className={`min-h-screen ${isDarkMode ? 'dark bg-gray-900' : 'bg-gray-50'}`}>\n      <div className=\"container mx-auto p-4 md:p-6 lg:p-8\">\n        <div className=\"flex flex-col md:flex-row justify-between items-start md:items-center gap-4 mb-8\">\n          <div>\n            <h1 className={`text-3xl md:text-4xl font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n              Analytics Dashboard\n            </h1>\n            <p className={`mt-2 ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n              Real-time insights and performance metrics\n            </p>\n          </div>\n          \n          <div className=\"flex gap-2\">\n            <Button\n              variant=\"outline\"\n              size=\"icon\"\n              onClick={toggleDarkMode}\n              className={isDarkMode ? 'border-gray-700' : ''}\n            >\n              {isDarkMode ? <Sun className=\"h-5 w-5\" /> : <Moon className=\"h-5 w-5\" />}\n            </Button>\n            \n            <Button\n              variant=\"outline\"\n              onClick={handleRefresh}\n              disabled={isRefreshing}\n              className={isDarkMode ? 'border-gray-700' : ''}\n            >\n              <RefreshCw className={`h-4 w-4 mr-2 ${isRefreshing ? 'animate-spin' : ''}`} />\n              Refresh\n            </Button>\n          </div>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 md:gap-6 mb-8\">\n          {metrics.map((metric, index) => {\n            const getIcon = () => {\n              switch (metric.label) {\n                case 'Total Revenue':\n                  return <DollarSign className=\"h-5 w-5\" />;\n                case 'Active Users':\n                  return <Users className=\"h-5 w-5\" />;\n                case 'Total Orders':\n                  return <ShoppingCart className=\"h-5 w-5\" />;\n                case 'Conversion Rate':\n                  return <Target className=\"h-5 w-5\" />;\n                default:\n                  return <TrendingUp className=\"h-5 w-5\" />;\n              }\n            };\n\n            const formatValue = (value: number, label: string) => {\n              if (label === 'Total Revenue') return `$${value.toLocaleString()}`;\n              if (label === 'Conversion Rate') return `${value}%`;\n              return value.toLocaleString();\n            };\n\n            return (\n              <motion.div\n                key={metric.id}\n                initial={{ opacity: 0, y: 20 }}\n                animate={{ opacity: 1, y: 0 }}\n                transition={{ duration: 0.3, delay: index * 0.1 }}\n              >\n                <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n                  <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                    <CardTitle className={`text-sm font-medium ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                      {metric.label}\n                    </CardTitle>\n                    <div className={`p-2 rounded-lg ${\n                      isDarkMode ? 'bg-gray-700 text-gray-300' : 'bg-gray-100 text-gray-600'\n                    }`}>\n                      {getIcon()}\n                    </div>\n                  </CardHeader>\n                  <CardContent>\n                    <div className={`text-2xl font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                      {formatValue(metric.value, metric.label)}\n                    </div>\n                    <div className=\"flex items-center mt-2\">\n                      {metric.trend === 'up' ? (\n                        <TrendingUp className=\"h-4 w-4 text-green-500 mr-1\" />\n                      ) : (\n                        <TrendingDown className=\"h-4 w-4 text-red-500 mr-1\" />\n                      )}\n                      <span className={`text-sm font-medium ${\n                        metric.trend === 'up' ? 'text-green-500' : 'text-red-500'\n                      }`}>\n                        {metric.change > 0 ? '+' : ''}{metric.change}%\n                      </span>\n                      <span className={`text-sm ml-2 ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                        vs last period\n                      </span>\n                    </div>\n                  </CardContent>\n                </Card>\n              </motion.div>\n            );\n          })}\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-4 md:gap-6 mb-8\">\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Revenue Overview</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Daily revenue trends\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"w-full h-[300px] relative\">\n                <svg className=\"w-full h-full\" viewBox=\"0 0 700 300\" preserveAspectRatio=\"none\">\n                  {/* Grid lines */}\n                  <g className=\"grid-lines\">\n                    {[0, 1, 2, 3, 4].map((i) => (\n                      <line\n                        key={i}\n                        x1=\"0\"\n                        y1={i * 60 + 30}\n                        x2=\"700\"\n                        y2={i * 60 + 30}\n                        stroke={isDarkMode ? '#374151' : '#e5e7eb'}\n                        strokeWidth=\"1\"\n                      />\n                    ))}\n                  </g>\n\n                  {/* Revenue line */}\n                  <motion.path\n                    d={(() => {\n                      const maxRevenue = Math.max(...chartData.map(d => d.revenue));\n                      const points = chartData.map((d, i) => {\n                        const x = (i / (chartData.length - 1)) * 700;\n                        const y = 270 - (d.revenue / maxRevenue) * 240;\n                        return `${i === 0 ? 'M' : 'L'} ${x} ${y}`;\n                      }).join(' ');\n                      return points;\n                    })()}\n                    fill=\"none\"\n                    stroke={isDarkMode ? '#60a5fa' : '#3b82f6'}\n                    strokeWidth=\"3\"\n                    strokeLinecap=\"round\"\n                    strokeLinejoin=\"round\"\n                    initial={{ pathLength: 0, opacity: 0 }}\n                    animate={{ pathLength: 1, opacity: 1 }}\n                    transition={{ duration: 1.5, ease: \"easeInOut\" }}\n                  />\n\n                  {/* Data points */}\n                  {chartData.map((d, i) => {\n                    const maxRevenue = Math.max(...chartData.map(d => d.revenue));\n                    const x = (i / (chartData.length - 1)) * 700;\n                    const y = 270 - (d.revenue / maxRevenue) * 240;\n                    return (\n                      <g key={i}>\n                        <motion.circle\n                          cx={x}\n                          cy={y}\n                          r=\"5\"\n                          fill={isDarkMode ? '#60a5fa' : '#3b82f6'}\n                          initial={{ scale: 0 }}\n                          animate={{ scale: 1 }}\n                          transition={{ delay: i * 0.1, duration: 0.3 }}\n                          className=\"cursor-pointer hover:r-7 transition-all\"\n                        />\n                        <title>{`${d.date}: $${d.revenue.toLocaleString()}`}</title>\n                      </g>\n                    );\n                  })}\n                </svg>\n\n                {/* X-axis labels */}\n                <div className=\"flex justify-between mt-2 px-1\">\n                  {chartData.map((d, i) => (\n                    <span\n                      key={i}\n                      className={`text-xs ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}\n                    >\n                      {new Date(d.date).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n                    </span>\n                  ))}\n                </div>\n\n                {/* Y-axis labels */}\n                <div className=\"absolute left-0 top-0 h-[300px] flex flex-col justify-between -ml-12\">\n                  {[0, 1, 2, 3, 4].map((i) => {\n                    const maxRevenue = Math.max(...chartData.map(d => d.revenue));\n                    const value = maxRevenue - (i * maxRevenue / 4);\n                    return (\n                      <span\n                        key={i}\n                        className={`text-xs ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}\n                      >\n                        ${(value / 1000).toFixed(0)}k\n                      </span>\n                    );\n                  })}\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>User Growth</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Active users over time\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <UserChart data={chartData} isDarkMode={isDarkMode} />\n            </CardContent>\n          </Card>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-4 md:gap-6 mb-8\">\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Orders Distribution</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                By product category\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <PieChart data={generatePieChartData(tableData)} isDark={isDarkMode} />\n            </CardContent>\n          </Card>\n\n          <Card className={`lg:col-span-2 ${isDarkMode ? 'bg-gray-800 border-gray-700' : ''}`}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Performance Metrics</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Combined view of key indicators\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-6\">\n                <div className=\"flex flex-wrap gap-4 justify-center\">\n                  <div className=\"flex items-center gap-2\">\n                    <div className=\"w-4 h-4 bg-blue-500 rounded\"></div>\n                    <span className={`text-sm ${isDarkMode ? 'text-gray-300' : 'text-gray-600'}`}>Revenue</span>\n                  </div>\n                  <div className=\"flex items-center gap-2\">\n                    <div className=\"w-4 h-4 bg-green-500 rounded\"></div>\n                    <span className={`text-sm ${isDarkMode ? 'text-gray-300' : 'text-gray-600'}`}>Users</span>\n                  </div>\n                  <div className=\"flex items-center gap-2\">\n                    <div className=\"w-4 h-4 bg-purple-500 rounded\"></div>\n                    <span className={`text-sm ${isDarkMode ? 'text-gray-300' : 'text-gray-600'}`}>Orders</span>\n                  </div>\n                </div>\n\n                <div className=\"relative h-80\">\n                  <div className=\"absolute inset-0 flex items-end justify-around gap-2 px-4\">\n                    {chartData.map((dataPoint, index) => {\n                      const maxValue = getMaxValue(chartData);\n                      const revenueHeight = (dataPoint.revenue / maxValue) * 100;\n                      const usersHeight = (dataPoint.users / maxValue) * 100;\n                      const ordersHeight = (dataPoint.orders / maxValue) * 100;\n\n                      return (\n                        <div key={dataPoint.date} className=\"flex-1 flex flex-col items-center gap-2\">\n                          <div className=\"w-full flex items-end justify-center gap-1 h-64\">\n                            <TooltipProvider>\n                              <Tooltip>\n                                <TooltipTrigger asChild>\n                                  <motion.div\n                                    initial={{ height: 0 }}\n                                    animate={{ height: `${revenueHeight}%` }}\n                                    transition={{ duration: 0.5, delay: index * 0.1 }}\n                                    className=\"flex-1 bg-blue-500 rounded-t hover:bg-blue-600 transition-colors cursor-pointer\"\n                                    style={{ minHeight: '4px' }}\n                                  />\n                                </TooltipTrigger>\n                                <TooltipContent>\n                                  <p className=\"font-semibold\">Revenue</p>\n                                  <p>${dataPoint.revenue.toLocaleString()}</p>\n                                </TooltipContent>\n                              </Tooltip>\n                            </TooltipProvider>\n\n                            <TooltipProvider>\n                              <Tooltip>\n                                <TooltipTrigger asChild>\n                                  <motion.div\n                                    initial={{ height: 0 }}\n                                    animate={{ height: `${usersHeight}%` }}\n                                    transition={{ duration: 0.5, delay: index * 0.1 + 0.05 }}\n                                    className=\"flex-1 bg-green-500 rounded-t hover:bg-green-600 transition-colors cursor-pointer\"\n                                    style={{ minHeight: '4px' }}\n                                  />\n                                </TooltipTrigger>\n                                <TooltipContent>\n                                  <p className=\"font-semibold\">Users</p>\n                                  <p>{dataPoint.users.toLocaleString()}</p>\n                                </TooltipContent>\n                              </Tooltip>\n                            </TooltipProvider>\n\n                            <TooltipProvider>\n                              <Tooltip>\n                                <TooltipTrigger asChild>\n                                  <motion.div\n                                    initial={{ height: 0 }}\n                                    animate={{ height: `${ordersHeight}%` }}\n                                    transition={{ duration: 0.5, delay: index * 0.1 + 0.1 }}\n                                    className=\"flex-1 bg-purple-500 rounded-t hover:bg-purple-600 transition-colors cursor-pointer\"\n                                    style={{ minHeight: '4px' }}\n                                  />\n                                </TooltipTrigger>\n                                <TooltipContent>\n                                  <p className=\"font-semibold\">Orders</p>\n                                  <p>{dataPoint.orders.toLocaleString()}</p>\n                                </TooltipContent>\n                              </Tooltip>\n                            </TooltipProvider>\n                          </div>\n                          \n                          <span className={`text-xs ${isDarkMode ? 'text-gray-400' : 'text-gray-500'}`}>\n                            {new Date(dataPoint.date).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n                          </span>\n                        </div>\n                      );\n                    })}\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n          <CardHeader>\n            <CardTitle className={isDarkMode ? 'text-white' : ''}>Top Products</CardTitle>\n            <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n              Best performing products by revenue\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            {/* TODO:DataTable Render sor",
  "error": null,
  "overall_score": 41,
  "code_quality_score": 12,
  "architecture_score": 10,
  "performance_score": 8,
  "accessibility_score": 11,
  "metadata": {
    "document_id": "eval_room_92954ca27891",
    "prompt_category": "intermediate",
    "prompt_complexity": 6.0
  },
  "raw_response": {
    "document_id": "eval_room_92954ca27891",
    "mode": "parallel",
    "prompt": "Generate an analytics dashboard page with charts, data tables, real-time updates, dark mode, and responsive design",
    "content": "table table with product data, status badges, pagination, and responsive design */}\n          </CardContent>\n        </Card>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 md:gap-6 mt-8\">\n          {realtimeUpdates.map((update, index) => {\n            const getUpdateIcon = () => {\n              switch (update.type) {\n                case 'success':\n                  return <Zap className=\"h-5 w-5 text-green-500\" />;\n                case 'warning':\n                  return <Activity className=\"h-5 w-5 text-yellow-500\" />;\n                case 'info':\n                  return <Clock className=\"h-5 w-5 text-blue-500\" />;\n              }\n            };\n\n            const getBorderColor = () => {\n              switch (update.type) {\n                case 'success':\n                  return 'border-l-green-500';\n                case 'warning':\n                  return 'border-l-yellow-500';\n                case 'info':\n                  return 'border-l-blue-500';\n              }\n            };\n\n            return (\n              <motion.div\n                key={update.id}\n                initial={{ opacity: 0, y: 20 }}\n                animate={{ opacity: 1, y: 0 }}\n                transition={{ duration: 0.3, delay: index * 0.1 }}\n              >\n                <Card className={`${isDarkMode ? 'bg-gray-800 border-gray-700' : ''} border-l-4 ${getBorderColor()} relative overflow-hidden`}>\n                  <CardContent className=\"p-4\">\n                    <div className=\"flex items-start gap-3\">\n                      <div className=\"relative\">\n                        <motion.div\n                          animate={{\n                            scale: [1, 1.2, 1],\n                            opacity: [1, 0.5, 1]\n                          }}\n                          transition={{\n                            duration: 2,\n                            repeat: Infinity,\n                            ease: \"easeInOut\"\n                          }}\n                          className=\"absolute inset-0 rounded-full bg-current opacity-20\"\n                        />\n                        {getUpdateIcon()}\n                      </div>\n                      \n                      <div className=\"flex-1 min-w-0\">\n                        <h3 className={`font-semibold text-sm ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                          {update.title}\n                        </h3>\n                        <p className={`text-xs mt-1 ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                          {update.description}\n                        </p>\n                        <div className=\"flex items-center gap-1 mt-2\">\n                          <Clock className={`h-3 w-3 ${isDarkMode ? 'text-gray-500' : 'text-gray-400'}`} />\n                          <span className={`text-xs ${isDarkMode ? 'text-gray-500' : 'text-gray-400'}`}>\n                            {getTimeAgo(update.timestamp)}\n                          </span>\n                        </div>\n                      </div>\n\n                      <motion.div\n                        animate={{\n                          scale: [1, 1.5, 1],\n                          opacity: [0.5, 1, 0.5]\n                        }}\n                        transition={{\n                          duration: 1.5,\n                          repeat: Infinity,\n                          ease: \"easeInOut\"\n                        }}\n                        className={`w-2 h-2 rounded-full ${\n                          update.type === 'success' ? 'bg-green-500' :\n                          update.type === 'warning' ? 'bg-yellow-500' :\n                          'bg-blue-500'\n                        }`}\n                      />\n                    </div>\n                  </CardContent>\n                </Card>\n              </motion.div>\n            );\n          })}\n        </div>\n      </div>\n    </div>\n  );\n}import { useState, useCallback } from 'react';\nimport { motion } from 'framer-motion';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Moon, Sun, RefreshCw } from 'lucide-react';\n\nimport { motion } from 'framer-motion';\nimport { useEffect } from 'react';\nimport { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip';\n\nimport { TrendingUp, TrendingDown, DollarSign, Users, ShoppingCart, Target } from 'lucide-react';\nimport { Activity, Zap, Clock } from 'lucide-react';\nimport { motion } from 'framer-motion';\n\ninterface MetricData {\n  id: string;\n  label: string;\n  value: number;\n  change: number;\n  trend: 'up' | 'down';\n}\n\ninterface ChartDataPoint {\n  date: string;\n  revenue: number;\n  users: number;\n  orders: number;\n}\n\ninterface TableRow {\n  id: string;\n  product: string;\n  sales: number;\n  revenue: number;\n  status: 'active' | 'pending' | 'inactive';\n}\n\ninterface RealtimeUpdate {\n  id: string;\n  title: string;\n  description: string;\n  timestamp: Date;\n  type: 'success' | 'warning' | 'info';\n}\n\nconst mockMetrics: MetricData[] = [\n  { id: '1', label: 'Total Revenue', value: 45231, change: 12.5, trend: 'up' },\n  { id: '2', label: 'Active Users', value: 2350, change: 8.2, trend: 'up' },\n  { id: '3', label: 'Total Orders', value: 1543, change: -3.1, trend: 'down' },\n  { id: '4', label: 'Conversion Rate', value: 3.24, change: 5.7, trend: 'up' }\n];\n\nconst mockChartData: ChartDataPoint[] = [\n  { date: '2024-01-01', revenue: 12000, users: 450, orders: 230 },\n  { date: '2024-01-02', revenue: 15000, users: 520, orders: 280 },\n  { date: '2024-01-03', revenue: 13500, users: 490, orders: 250 },\n  { date: '2024-01-04', revenue: 18000, users: 610, orders: 320 },\n  { date: '2024-01-05', revenue: 16500, users: 580, orders: 295 },\n  { date: '2024-01-06', revenue: 20000, users: 680, orders: 350 },\n  { date: '2024-01-07', revenue: 22000, users: 720, orders: 380 }\n];\n\nconst mockTableData: TableRow[] = [\n  { id: '1', product: 'Premium Plan', sales: 234, revenue: 23400, status: 'active' },\n  { id: '2', product: 'Basic Plan', sales: 567, revenue: 11340, status: 'active' },\n  { id: '3', product: 'Enterprise Plan', sales: 89, revenue: 17800, status: 'active' },\n  { id: '4', product: 'Starter Plan', sales: 432, revenue: 4320, status: 'pending' },\n  { id: '5', product: 'Pro Plan', sales: 156, revenue: 15600, status: 'active' }\n];\n\nconst mockRealtimeUpdates: RealtimeUpdate[] = [\n  {\n    id: '1',\n    title: 'New Order Received',\n    description: 'Premium Plan subscription from Enterprise Corp',\n    timestamp: new Date(Date.now() - 2 * 60 * 1000),\n    type: 'success'\n  },\n  {\n    id: '2',\n    title: 'High Traffic Alert',\n    description: 'User activity increased by 45% in the last hour',\n    timestamp: new Date(Date.now() - 5 * 60 * 1000),\n    type: 'warning'\n  },\n  {\n    id: '3',\n    title: 'System Update',\n    description: 'Dashboard metrics refreshed successfully',\n    timestamp: new Date(Date.now() - 8 * 60 * 1000),\n    type: 'info'\n  }\n];\n\nconst pieChartColors = ['#3b82f6', '#8b5cf6', '#ec4899', '#f59e0b', '#10b981'];\n\nconst generatePieChartData = (data: TableRow[]): PieChartData[] => {\n  return data.map((row, index) => ({\n    label: row.product,\n    value: row.sales,\n    color: pieChartColors[index % pieChartColors.length]\n  }));\n};\n\nconst PieChart = ({ data, isDark }: { data: PieChartData[]; isDark: boolean }) => {\n  const [hoveredIndex, setHoveredIndex] = useState<number | null>(null);\n  \n  const total = data.reduce((sum, item) => sum + item.value, 0);\n  const size = 200;\n  const center = size / 2;\n  const radius = size / 2 - 10;\n  \n  let currentAngle = -90;\n  \n  const slices = data.map((item, index) => {\n    const percentage = (item.value / total) * 100;\n    const angle = (item.value / total) * 360;\n    const startAngle = currentAngle;\n    const endAngle = currentAngle + angle;\n    \n    const startRad = (startAngle * Math.PI) / 180;\n    const endRad = (endAngle * Math.PI) / 180;\n    \n    const x1 = center + radius * Math.cos(startRad);\n    const y1 = center + radius * Math.sin(startRad);\n    const x2 = center + radius * Math.cos(endRad);\n    const y2 = center + radius * Math.sin(endRad);\n    \n    const largeArc = angle > 180 ? 1 : 0;\n    \n    const path = `M ${center} ${center} L ${x1} ${y1} A ${radius} ${radius} 0 ${largeArc} 1 ${x2} ${y2} Z`;\n    \n    currentAngle = endAngle;\n    \n    return {\n      path,\n      color: item.color,\n      percentage,\n      label: item.label,\n      value: item.value\n    };\n  });\n  \n  return (\n    <div className=\"flex flex-col items-center gap-6\">\n      <div className=\"relative\">\n        <svg width={size} height={size} viewBox={`0 0 ${size} ${size}`}>\n          {slices.map((slice, index) => (\n            <motion.path\n              key={index}\n              d={slice.path}\n              fill={slice.color}\n              stroke={isDark ? '#1f2937' : '#ffffff'}\n              strokeWidth={2}\n              initial={{ opacity: 0, scale: 0 }}\n              animate={{ \n                opacity: hoveredIndex === null || hoveredIndex === index ? 1 : 0.6,\n                scale: hoveredIndex === index ? 1.05 : 1\n              }}\n              transition={{ duration: 0.3, delay: index * 0.1 }}\n              onMouseEnter={() => setHoveredIndex(index)}\n              onMouseLeave={() => setHoveredIndex(null)}\n              style={{ cursor: 'pointer', transformOrigin: `${center}px ${center}px` }}\n            />\n          ))}\n        </svg>\n        \n        {hoveredIndex !== null && (\n          <motion.div\n            initial={{ opacity: 0, scale: 0.8 }}\n            animate={{ opacity: 1, scale: 1 }}\n            className={`absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 text-center pointer-events-none`}\n          >\n            <div className={`text-2xl font-bold ${isDark ? 'text-white' : 'text-gray-900'}`}>\n              {slices[hoveredIndex].percentage.toFixed(1)}%\n            </div>\n            <div className={`text-xs ${isDark ? 'text-gray-400' : 'text-gray-600'}`}>\n              {slices[hoveredIndex].value} orders\n            </div>\n          </motion.div>\n        )}\n      </div>\n      \n      <div className=\"w-full space-y-2\">\n        {slices.map((slice, index) => (\n          <motion.div\n            key={index}\n            initial={{ opacity: 0, x: -20 }}\n            animate={{ opacity: 1, x: 0 }}\n            transition={{ delay: index * 0.1 }}\n            className={`flex items-center justify-between p-2 rounded-lg transition-colors ${\n              hoveredIndex === index ? (isDark ? 'bg-gray-700' : 'bg-gray-100') : ''\n            }`}\n            onMouseEnter={() => setHoveredIndex(index)}\n            onMouseLeave={() => setHoveredIndex(null)}\n            style={{ cursor: 'pointer' }}\n          >\n            <div className=\"flex items-center gap-2\">\n              <div\n                className=\"w-3 h-3 rounded-full\"\n                style={{ backgroundColor: slice.color }}\n              />\n              <span className={`text-sm ${isDark ? 'text-gray-300' : 'text-gray-700'}`}>\n                {slice.label}\n              </span>\n            </div>\n            <div className=\"flex items-center gap-3\">\n              <span className={`text-sm font-medium ${isDark ? 'text-gray-400' : 'text-gray-600'}`}>\n                {slice.value}\n              </span>\n              <span className={`text-xs ${isDark ? 'text-gray-500' : 'text-gray-500'}`}>\n                {slice.percentage.toFixed(1)}%\n              </span>\n            </div>\n          </motion.div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nconst UserChart = ({ data, isDarkMode }: { data: ChartDataPoint[], isDarkMode: boolean }) => {\n  const maxUsers = Math.max(...data.map(d => d.users));\n  const minUsers = Math.min(...data.map(d => d.users));\n  const range = maxUsers - minUsers;\n  const padding = range * 0.2;\n  const chartMax = maxUsers + padding;\n  const chartMin = Math.max(0, minUsers - padding);\n  const chartRange = chartMax - chartMin;\n\n  const width = 100;\n  const height = 100;\n\n  // Create SVG path for area chart\n  const points = data.map((point, index) => {\n    const x = (index / (data.length - 1)) * width;\n    const normalizedValue = ((point.users - chartMin) / chartRange);\n    const y = height - (normalizedValue * height);\n    return { x, y, value: point.users };\n  });\n\n  const linePath = points.map((p, i) => \n    `${i === 0 ? 'M' : 'L'} ${p.x} ${p.y}`\n  ).join(' ');\n\n  const areaPath = `${linePath} L ${width} ${height} L 0 ${height} Z`;\n\n  const formatDate = (dateStr: string) => {\n    const date = new Date(dateStr);\n    return date.toLocaleDateString('en-US', { month: 'short', day: 'numeric' });\n  };\n\n  return (\n    <div className=\"w-full h-64 relative\">\n      <svg\n        viewBox={`0 0 ${width} ${height}`}\n        className=\"w-full h-full\"\n        preserveAspectRatio=\"none\"\n      >\n        <defs>\n          <linearGradient id=\"userGradient\" x1=\"0%\" y1=\"0%\" x2=\"0%\" y2=\"100%\">\n            <stop offset=\"0%\" stopColor=\"#3b82f6\" stopOpacity=\"0.6\" />\n            <stop offset=\"50%\" stopColor=\"#3b82f6\" stopOpacity=\"0.3\" />\n            <stop offset=\"100%\" stopColor=\"#3b82f6\" stopOpacity=\"0.05\" />\n          </linearGradient>\n        </defs>\n\n        {/* Animated area fill */}\n        <motion.path\n          d={areaPath}\n          fill=\"url(#userGradient)\"\n          initial={{ opacity: 0 }}\n          animate={{ opacity: 1 }}\n          transition={{ duration: 0.8, ease: \"easeOut\" }}\n        />\n\n        {/* Animated line stroke */}\n        <motion.path\n          d={linePath}\n          fill=\"none\"\n          stroke=\"#3b82f6\"\n          strokeWidth=\"0.5\"\n          initial={{ pathLength: 0 }}\n          animate={{ pathLength: 1 }}\n          transition={{ duration: 1.5, ease: \"easeInOut\" }}\n        />\n\n        {/* Data points */}\n        {points.map((point, index) => (\n          <motion.g key={index}>\n            <motion.circle\n              cx={point.x}\n              cy={point.y}\n              r=\"1\"\n              fill=\"#3b82f6\"\n              initial={{ scale: 0, opacity: 0 }}\n              animate={{ scale: 1, opacity: 1 }}\n              transition={{ delay: index * 0.1, duration: 0.3 }}\n            />\n          </motion.g>\n        ))}\n      </svg>\n\n      {/* X-axis labels */}\n      <div className=\"flex justify-between mt-2 px-1\">\n        {data.map((point, index) => (\n          index % Math.ceil(data.length / 4) === 0 || index === data.length - 1 ? (\n            <motion.span\n              key={index}\n              className={`text-xs ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}\n              initial={{ opacity: 0, y: -10 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ delay: 0.5 + index * 0.1 }}\n            >\n              {formatDate(point.date)}\n            </motion.span>\n          ) : null\n        ))}\n      </div>\n\n      {/* Y-axis reference */}\n      <div className=\"absolute left-0 top-0 bottom-8 flex flex-col justify-between\">\n        <motion.span\n          className={`text-xs ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}\n          initial={{ opacity: 0, x: -10 }}\n          animate={{ opacity: 1, x: 0 }}\n          transition={{ delay: 0.3 }}\n        >\n          {Math.round(chartMax)}\n        </motion.span>\n        <motion.span\n          className={`text-xs ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}\n          initial={{ opacity: 0, x: -10 }}\n          animate={{ opacity: 1, x: 0 }}\n          transition={{ delay: 0.4 }}\n        >\n          {Math.round((chartMax + chartMin) / 2)}\n        </motion.span>\n        <motion.span\n          className={`text-xs ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}\n          initial={{ opacity: 0, x: -10 }}\n          animate={{ opacity: 1, x: 0 }}\n          transition={{ delay: 0.5 }}\n        >\n          {Math.round(chartMin)}\n        </motion.span>\n      </div>\n\n      {/* Hover tooltip area */}\n      <div className=\"absolute inset-0 flex\">\n        {points.map((point, index) => (\n          <motion.div\n            key={index}\n            className=\"flex-1 group relative cursor-pointer\"\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            transition={{ delay: 1 + index * 0.05 }}\n          >\n            <div className=\"absolute bottom-full left-1/2 transform -translate-x-1/2 mb-2 opacity-0 group-hover:opacity-100 transition-opacity pointer-events-none z-10\">\n              <div className={`px-3 py-2 rounded-lg shadow-lg ${isDarkMode ? 'bg-gray-700 text-white' : 'bg-white text-gray-900'} border ${isDarkMode ? 'border-gray-600' : 'border-gray-200'}`}>\n                <div className=\"text-xs font-semibold\">{point.value.toLocaleString()} users</div>\n                <div className={`text-xs ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                  {formatDate(data[index].date)}\n                </div>\n              </div>\n            </div>\n          </motion.div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default function AnalyticsDashboard() {\n  const [isDarkMode, setIsDarkMode] = useState(false);\n  const [metrics, setMetrics] = useState<MetricData[]>(mockMetrics);\n  const [chartData, setChartData] = useState<ChartDataPoint[]>(mockChartData);\n  const [tableData, setTableData] = useState<TableRow[]>(mockTableData);\n  const [isRefreshing, setIsRefreshing] = useState(false);\n  const [realtimeUpdates, setRealtimeUpdates] = useState<RealtimeUpdate[]>(mockRealtimeUpdates);\n  const [lastUpdateTime, setLastUpdateTime] = useState<Date>(new Date());\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      const updateTypes: Array<'success' | 'warning' | 'info'> = ['success', 'warning', 'info'];\n      const titles = [\n        'New Order Received',\n        'User Milestone Reached',\n        'Revenue Target Hit',\n        'High Traffic Alert',\n        'System Update',\n        'Performance Optimized'\n      ];\n      const descriptions = [\n        'Premium Plan subscription from Tech Startup',\n        'Active users exceeded 2,500 milestone',\n        'Monthly revenue goal achieved',\n        'User activity spike detected',\n        'Real-time data synchronized',\n        'Dashboard response time improved'\n      ];\n\n      const newUpdate: RealtimeUpdate = {\n        id: Date.now().toString(),\n        title: titles[Math.floor(Math.random() * titles.length)],\n        description: descriptions[Math.floor(Math.random() * descriptions.length)],\n        timestamp: new Date(),\n        type: updateTypes[Math.floor(Math.random() * updateTypes.length)]\n      };\n\n      setRealtimeUpdates(prev => [newUpdate, ...prev.slice(0, 2)]);\n      setLastUpdateTime(new Date());\n    }, 10000);\n\n    return () => clearInterval(interval);\n  }, []);\n\n  const getTimeAgo = (timestamp: Date) => {\n    const seconds = Math.floor((Date.now() - timestamp.getTime()) / 1000);\n    if (seconds < 60) return `${seconds}s ago`;\n    const minutes = Math.floor(seconds / 60);\n    if (minutes < 60) return `${minutes}m ago`;\n    const hours = Math.floor(minutes / 60);\n    return `${hours}h ago`;\n  };\n\n  const toggleDarkMode = useCallback(() => {\n    setIsDarkMode(prev => !prev);\n  }, []);\n\n  const getMaxValue = useCallback((data: ChartDataPoint[]) => {\n    const maxRevenue = Math.max(...data.map(d => d.revenue));\n    const maxUsers = Math.max(...data.map(d => d.users));\n    const maxOrders = Math.max(...data.map(d => d.orders));\n    return Math.max(maxRevenue, maxUsers, maxOrders);\n  }, []);\n\n  const handleRefresh = useCallback(() => {\n    setIsRefreshing(true);\n    \n    setTimeout(() => {\n      // Generate updated mock metrics with random variations\n      const updatedMetrics = mockMetrics.map(metric => ({\n        ...metric,\n        value: metric.value + Math.floor(Math.random() * 200 - 100),\n        change: parseFloat((Math.random() * 20 - 5).toFixed(1)),\n        trend: Math.random() > 0.5 ? 'up' as const : 'down' as const\n      }));\n\n      // Generate updated chart data with random variations\n      const updatedChartData = mockChartData.map(point => ({\n        ...point,\n        revenue: point.revenue + Math.floor(Math.random() * 4000 - 2000),\n        users: point.users + Math.floor(Math.random() * 100 - 50),\n        orders: point.orders + Math.floor(Math.random() * 50 - 25)\n      }));\n\n      // Generate updated table data with random variations\n      const updatedTableData = mockTableData.map(row => ({\n        ...row,\n        sales: row.sales + Math.floor(Math.random() * 40 - 20),\n        revenue: row.revenue + Math.floor(Math.random() * 2000 - 1000),\n        status: ['active', 'pending', 'inactive'][Math.floor(Math.random() * 3)] as 'active' | 'pending' | 'inactive'\n      }));\n\n      setMetrics(updatedMetrics);\n      setChartData(updatedChartData);\n      setTableData(updatedTableData);\n      setIsRefreshing(false);\n    }, 1500)</parameter>\n</invoke>\n  }, []);\n\n  return (\n    <div className={`min-h-screen ${isDarkMode ? 'dark bg-gray-900' : 'bg-gray-50'}`}>\n      <div className=\"container mx-auto p-4 md:p-6 lg:p-8\">\n        <div className=\"flex flex-col md:flex-row justify-between items-start md:items-center gap-4 mb-8\">\n          <div>\n            <h1 className={`text-3xl md:text-4xl font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n              Analytics Dashboard\n            </h1>\n            <p className={`mt-2 ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n              Real-time insights and performance metrics\n            </p>\n          </div>\n          \n          <div className=\"flex gap-2\">\n            <Button\n              variant=\"outline\"\n              size=\"icon\"\n              onClick={toggleDarkMode}\n              className={isDarkMode ? 'border-gray-700' : ''}\n            >\n              {isDarkMode ? <Sun className=\"h-5 w-5\" /> : <Moon className=\"h-5 w-5\" />}\n            </Button>\n            \n            <Button\n              variant=\"outline\"\n              onClick={handleRefresh}\n              disabled={isRefreshing}\n              className={isDarkMode ? 'border-gray-700' : ''}\n            >\n              <RefreshCw className={`h-4 w-4 mr-2 ${isRefreshing ? 'animate-spin' : ''}`} />\n              Refresh\n            </Button>\n          </div>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 md:gap-6 mb-8\">\n          {metrics.map((metric, index) => {\n            const getIcon = () => {\n              switch (metric.label) {\n                case 'Total Revenue':\n                  return <DollarSign className=\"h-5 w-5\" />;\n                case 'Active Users':\n                  return <Users className=\"h-5 w-5\" />;\n                case 'Total Orders':\n                  return <ShoppingCart className=\"h-5 w-5\" />;\n                case 'Conversion Rate':\n                  return <Target className=\"h-5 w-5\" />;\n                default:\n                  return <TrendingUp className=\"h-5 w-5\" />;\n              }\n            };\n\n            const formatValue = (value: number, label: string) => {\n              if (label === 'Total Revenue') return `$${value.toLocaleString()}`;\n              if (label === 'Conversion Rate') return `${value}%`;\n              return value.toLocaleString();\n            };\n\n            return (\n              <motion.div\n                key={metric.id}\n                initial={{ opacity: 0, y: 20 }}\n                animate={{ opacity: 1, y: 0 }}\n                transition={{ duration: 0.3, delay: index * 0.1 }}\n              >\n                <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n                  <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                    <CardTitle className={`text-sm font-medium ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                      {metric.label}\n                    </CardTitle>\n                    <div className={`p-2 rounded-lg ${\n                      isDarkMode ? 'bg-gray-700 text-gray-300' : 'bg-gray-100 text-gray-600'\n                    }`}>\n                      {getIcon()}\n                    </div>\n                  </CardHeader>\n                  <CardContent>\n                    <div className={`text-2xl font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                      {formatValue(metric.value, metric.label)}\n                    </div>\n                    <div className=\"flex items-center mt-2\">\n                      {metric.trend === 'up' ? (\n                        <TrendingUp className=\"h-4 w-4 text-green-500 mr-1\" />\n                      ) : (\n                        <TrendingDown className=\"h-4 w-4 text-red-500 mr-1\" />\n                      )}\n                      <span className={`text-sm font-medium ${\n                        metric.trend === 'up' ? 'text-green-500' : 'text-red-500'\n                      }`}>\n                        {metric.change > 0 ? '+' : ''}{metric.change}%\n                      </span>\n                      <span className={`text-sm ml-2 ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                        vs last period\n                      </span>\n                    </div>\n                  </CardContent>\n                </Card>\n              </motion.div>\n            );\n          })}\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-4 md:gap-6 mb-8\">\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Revenue Overview</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Daily revenue trends\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"w-full h-[300px] relative\">\n                <svg className=\"w-full h-full\" viewBox=\"0 0 700 300\" preserveAspectRatio=\"none\">\n                  {/* Grid lines */}\n                  <g className=\"grid-lines\">\n                    {[0, 1, 2, 3, 4].map((i) => (\n                      <line\n                        key={i}\n                        x1=\"0\"\n                        y1={i * 60 + 30}\n                        x2=\"700\"\n                        y2={i * 60 + 30}\n                        stroke={isDarkMode ? '#374151' : '#e5e7eb'}\n                        strokeWidth=\"1\"\n                      />\n                    ))}\n                  </g>\n\n                  {/* Revenue line */}\n                  <motion.path\n                    d={(() => {\n                      const maxRevenue = Math.max(...chartData.map(d => d.revenue));\n                      const points = chartData.map((d, i) => {\n                        const x = (i / (chartData.length - 1)) * 700;\n                        const y = 270 - (d.revenue / maxRevenue) * 240;\n                        return `${i === 0 ? 'M' : 'L'} ${x} ${y}`;\n                      }).join(' ');\n                      return points;\n                    })()}\n                    fill=\"none\"\n                    stroke={isDarkMode ? '#60a5fa' : '#3b82f6'}\n                    strokeWidth=\"3\"\n                    strokeLinecap=\"round\"\n                    strokeLinejoin=\"round\"\n                    initial={{ pathLength: 0, opacity: 0 }}\n                    animate={{ pathLength: 1, opacity: 1 }}\n                    transition={{ duration: 1.5, ease: \"easeInOut\" }}\n                  />\n\n                  {/* Data points */}\n                  {chartData.map((d, i) => {\n                    const maxRevenue = Math.max(...chartData.map(d => d.revenue));\n                    const x = (i / (chartData.length - 1)) * 700;\n                    const y = 270 - (d.revenue / maxRevenue) * 240;\n                    return (\n                      <g key={i}>\n                        <motion.circle\n                          cx={x}\n                          cy={y}\n                          r=\"5\"\n                          fill={isDarkMode ? '#60a5fa' : '#3b82f6'}\n                          initial={{ scale: 0 }}\n                          animate={{ scale: 1 }}\n                          transition={{ delay: i * 0.1, duration: 0.3 }}\n                          className=\"cursor-pointer hover:r-7 transition-all\"\n                        />\n                        <title>{`${d.date}: $${d.revenue.toLocaleString()}`}</title>\n                      </g>\n                    );\n                  })}\n                </svg>\n\n                {/* X-axis labels */}\n                <div className=\"flex justify-between mt-2 px-1\">\n                  {chartData.map((d, i) => (\n                    <span\n                      key={i}\n                      className={`text-xs ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}\n                    >\n                      {new Date(d.date).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n                    </span>\n                  ))}\n                </div>\n\n                {/* Y-axis labels */}\n                <div className=\"absolute left-0 top-0 h-[300px] flex flex-col justify-between -ml-12\">\n                  {[0, 1, 2, 3, 4].map((i) => {\n                    const maxRevenue = Math.max(...chartData.map(d => d.revenue));\n                    const value = maxRevenue - (i * maxRevenue / 4);\n                    return (\n                      <span\n                        key={i}\n                        className={`text-xs ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}\n                      >\n                        ${(value / 1000).toFixed(0)}k\n                      </span>\n                    );\n                  })}\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>User Growth</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Active users over time\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <UserChart data={chartData} isDarkMode={isDarkMode} />\n            </CardContent>\n          </Card>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-4 md:gap-6 mb-8\">\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Orders Distribution</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                By product category\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <PieChart data={generatePieChartData(tableData)} isDark={isDarkMode} />\n            </CardContent>\n          </Card>\n\n          <Card className={`lg:col-span-2 ${isDarkMode ? 'bg-gray-800 border-gray-700' : ''}`}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Performance Metrics</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Combined view of key indicators\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-6\">\n                <div className=\"flex flex-wrap gap-4 justify-center\">\n                  <div className=\"flex items-center gap-2\">\n                    <div className=\"w-4 h-4 bg-blue-500 rounded\"></div>\n                    <span className={`text-sm ${isDarkMode ? 'text-gray-300' : 'text-gray-600'}`}>Revenue</span>\n                  </div>\n                  <div className=\"flex items-center gap-2\">\n                    <div className=\"w-4 h-4 bg-green-500 rounded\"></div>\n                    <span className={`text-sm ${isDarkMode ? 'text-gray-300' : 'text-gray-600'}`}>Users</span>\n                  </div>\n                  <div className=\"flex items-center gap-2\">\n                    <div className=\"w-4 h-4 bg-purple-500 rounded\"></div>\n                    <span className={`text-sm ${isDarkMode ? 'text-gray-300' : 'text-gray-600'}`}>Orders</span>\n                  </div>\n                </div>\n\n                <div className=\"relative h-80\">\n                  <div className=\"absolute inset-0 flex items-end justify-around gap-2 px-4\">\n                    {chartData.map((dataPoint, index) => {\n                      const maxValue = getMaxValue(chartData);\n                      const revenueHeight = (dataPoint.revenue / maxValue) * 100;\n                      const usersHeight = (dataPoint.users / maxValue) * 100;\n                      const ordersHeight = (dataPoint.orders / maxValue) * 100;\n\n                      return (\n                        <div key={dataPoint.date} className=\"flex-1 flex flex-col items-center gap-2\">\n                          <div className=\"w-full flex items-end justify-center gap-1 h-64\">\n                            <TooltipProvider>\n                              <Tooltip>\n                                <TooltipTrigger asChild>\n                                  <motion.div\n                                    initial={{ height: 0 }}\n                                    animate={{ height: `${revenueHeight}%` }}\n                                    transition={{ duration: 0.5, delay: index * 0.1 }}\n                                    className=\"flex-1 bg-blue-500 rounded-t hover:bg-blue-600 transition-colors cursor-pointer\"\n                                    style={{ minHeight: '4px' }}\n                                  />\n                                </TooltipTrigger>\n                                <TooltipContent>\n                                  <p className=\"font-semibold\">Revenue</p>\n                                  <p>${dataPoint.revenue.toLocaleString()}</p>\n                                </TooltipContent>\n                              </Tooltip>\n                            </TooltipProvider>\n\n                            <TooltipProvider>\n                              <Tooltip>\n                                <TooltipTrigger asChild>\n                                  <motion.div\n                                    initial={{ height: 0 }}\n                                    animate={{ height: `${usersHeight}%` }}\n                                    transition={{ duration: 0.5, delay: index * 0.1 + 0.05 }}\n                                    className=\"flex-1 bg-green-500 rounded-t hover:bg-green-600 transition-colors cursor-pointer\"\n                                    style={{ minHeight: '4px' }}\n                                  />\n                                </TooltipTrigger>\n                                <TooltipContent>\n                                  <p className=\"font-semibold\">Users</p>\n                                  <p>{dataPoint.users.toLocaleString()}</p>\n                                </TooltipContent>\n                              </Tooltip>\n                            </TooltipProvider>\n\n                            <TooltipProvider>\n                              <Tooltip>\n                                <TooltipTrigger asChild>\n                                  <motion.div\n                                    initial={{ height: 0 }}\n                                    animate={{ height: `${ordersHeight}%` }}\n                                    transition={{ duration: 0.5, delay: index * 0.1 + 0.1 }}\n                                    className=\"flex-1 bg-purple-500 rounded-t hover:bg-purple-600 transition-colors cursor-pointer\"\n                                    style={{ minHeight: '4px' }}\n                                  />\n                                </TooltipTrigger>\n                                <TooltipContent>\n                                  <p className=\"font-semibold\">Orders</p>\n                                  <p>{dataPoint.orders.toLocaleString()}</p>\n                                </TooltipContent>\n                              </Tooltip>\n                            </TooltipProvider>\n                          </div>\n                          \n                          <span className={`text-xs ${isDarkMode ? 'text-gray-400' : 'text-gray-500'}`}>\n                            {new Date(dataPoint.date).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n                          </span>\n                        </div>\n                      );\n                    })}\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n          <CardHeader>\n            <CardTitle className={isDarkMode ? 'text-white' : ''}>Top Products</CardTitle>\n            <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n              Best performing products by revenue\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            {/* TODO:DataTable Render sor",
    "error": null,
    "elapsed_time": 99.37726879119873,
    "success": true
  }
}