{
  "prompt_id": "algorithm_visualizer",
  "prompt_name": "Algorithm Visualizer",
  "mode": "parallel",
  "run_number": 32,
  "timestamp": "2025-10-13T19:06:15.699818",
  "response_time": 99.3981864452362,
  "total_tokens": null,
  "response_content": "import { useState, useCallback } from 'react';\nimport { useEffect } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Slider } from '@/components/ui/slider';\nimport { Play, Pause, RotateCcw, Zap, BarChart3 } from 'lucide-react';\nimport { motion } from 'framer-motion';\n\ninterface ArrayElement {\n  value: number;\n  id: string;\n  isComparing?: boolean;\n  isSwapping?: boolean;\n  isSorted?: boolean;\n}\n\ninterface AlgorithmStep {\n  array: ArrayElement[];\n  comparingIndices: number[];\n  swappingIndices: number[];\n  sortedIndices: number[];\n}\n\ntype AlgorithmType = 'bubble' | 'quick' | 'merge' | 'insertion';\n\nconst NEON_COLORS = [\n  '#00ffff',\n  '#ff00ff', \n  '#00ff00',\n  '#ffff00',\n  '#ff0066',\n  '#00ffaa'\n];\n\nconst mockAlgorithms = [\n  { id: 'bubble', name: 'Bubble Sort', complexity: 'O(n\u00b2)' },\n  { id: 'quick', name: 'Quick Sort', complexity: 'O(n log n)' },\n  { id: 'merge', name: 'Merge Sort', complexity: 'O(n log n)' },\n  { id: 'insertion', name: 'Insertion Sort', complexity: 'O(n\u00b2)' }\n];\n\nexport default function AlgorithmVisualizer() {\n  const [array, setArray] = useState<ArrayElement[]>([]);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [speed, setSpeed] = useState([50]);\n  const [arraySize, setArraySize] = useState([20]);\n  const [selectedAlgorithm, setSelectedAlgorithm] = useState<AlgorithmType>('bubble');\n  const [currentStep, setCurrentStep] = useState(0);\n  const [steps, setSteps] = useState<AlgorithmStep[]>([]);\n\n\n  const generateRandomArray = useCallback(() => {\n    const newArray: ArrayElement[] = Array.from({ length: arraySize[0] }, (_, index) => ({\n      value: Math.floor(Math.random() * 100) + 5,\n      id: `element-${index}-${Date.now()}`,\n      isComparing: false,\n      isSwapping: false,\n      isSorted: false\n    }));\n    setArray(newArray);\n    setSteps([]);\n    setCurrentStep(0);\n    setIsPlaying(false);\n  }, [arraySize]);\n\n  const resetVisualization = useCallback(() => {\n\n    setIsPlaying(false);\n    setCurrentStep(0);\n    setSteps([]);\n    generateRandomArray();\n  }, [generateRandomArray]);\neRandomArray]);\n\n  useEffect(() => {\n    if (!isPlaying) return;\n\n    const delay = 1000 - (speed[0] * 9.5);\n    const timer = setTimeout(() => {\n      animateSteps();\n    }, delay);\n\n    return () => clearTimeout(timer);\n  }, [isPlaying, speed, animateSteps]);\n\n  const animateSteps = useCallback(() => {\n    if (currentStep >= steps.length) {\n      setIsPlaying(false);\n      return;\n    }\n\n    const step = steps[currentStep];\n    setArray(step.array);\n    setCurrentStep(prev => prev + 1);\n  }, [currentStep, steps]);\n\n  const startVisualization = useCallback(() => {\n    if (steps.length === 0 || currentStep >= steps.length) return;\n    setIsPlaying(true);\n  }, [steps, speed, currentStep]);\n\n  const pauseVisualization = useCallback(() => {    setIsPlaying(false);\n\n    /* TODO:PauseAnimation Set isPlaying false, preserve current step */\n  }, []);\n\n  const generateSortingSteps = useCallback((algorithm: AlgorithmType) => {\n    if (array.length === 0) return;\n\n    const newSteps: AlgorithmStep[] = [];\n    const arr = [...array];\n\n    const addStep = (\n      comparingIndices: number[] = [],\n      swappingIndices: number[] = [],\n      sortedIndices: number[] = []\n    ) => {\n      newSteps.push({\n        array: arr.map((el, idx) => ({\n          ...el,\n          isComparing: comparingIndices.includes(idx),\n          isSwapping: swappingIndices.includes(idx),\n          isSorted: sortedIndices.includes(idx)\n        })),\n        comparingIndices,\n        swappingIndices,\n        sortedIndices\n      });\n    };\n\n    const swap = (i: number, j: number) => {\n      const temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n    };\n\n    switch (algorithm) {\n      case 'bubble': {\n        const sorted: number[] = [];\n        for (let i = 0; i < arr.length - 1; i++) {\n          for (let j = 0; j < arr.length - i - 1; j++) {\n            addStep([j, j + 1], [], sorted);\n            if (arr[j].value > arr[j + 1].value) {\n              addStep([j, j + 1], [j, j + 1], sorted);\n              swap(j, j + 1);\n              addStep([], [], sorted);\n            }\n          }\n          sorted.push(arr.length - i - 1);\n          addStep([], [], sorted);\n        }\n        sorted.push(0);\n        addStep([], [], sorted);\n        break;\n      }\n\n      case 'insertion': {\n        const sorted: number[] = [0];\n        addStep([], [], sorted);\n        for (let i = 1; i < arr.length; i++) {\n          let j = i;\n          addStep([j, j - 1], [], sorted);\n          while (j > 0 && arr[j].value < arr[j - 1].value) {\n            addStep([j, j - 1], [j, j - 1], sorted);\n            swap(j, j - 1);\n            j--;\n            addStep([j, j + 1], [], sorted);\n          }\n          sorted.push(i);\n          addStep([], [], sorted);\n        }\n        break;\n      }\n\n      case 'quick': {\n        const sorted: number[] = [];\n        const quickSort = (low: number, high: number) => {\n          if (low < high) {\n            const pivotIndex = partition(low, high);\n            sorted.push(pivotIndex);\n            addStep([], [], sorted);\n            quickSort(low, pivotIndex - 1);\n            quickSort(pivotIndex + 1, high);\n          } else if (low === high) {\n            sorted.push(low);\n            addStep([], [], sorted);\n          }\n        };\n\n        const partition = (low: number, high: number): number => {\n          const pivot = arr[high].value;\n          let i = low - 1;\n\n          for (let j = low; j < high; j++) {\n            addStep([j, high], [], sorted);\n            if (arr[j].value < pivot) {\n              i++;\n              if (i !== j) {\n                addStep([i, j], [i, j], sorted);\n                swap(i, j);\n              }\n            }\n          }\n          addStep([i + 1, high], [i + 1, high], sorted);\n          swap(i + 1, high);\n          return i + 1;\n        };\n\n        quickSort(0, arr.length - 1);\n        break;\n      }\n\n      case 'merge': {\n        const sorted: number[] = [];\n        const mergeSort = (left: number, right: number) => {\n          if (left >= right) {\n            return;\n          }\n\n          const mid = Math.floor((left + right) / 2);\n          mergeSort(left, mid);\n          mergeSort(mid + 1, right);\n          merge(left, mid, right);\n        };\n\n        const merge = (left: number, mid: number, right: number) => {\n          const leftArr = arr.slice(left, mid + 1);\n          const rightArr = arr.slice(mid + 1, right + 1);\n\n          let i = 0, j = 0, k = left;\n\n          while (i < leftArr.length && j < rightArr.length) {\n            addStep([left + i, mid + 1 + j], [], sorted);\n            if (leftArr[i].value <= rightArr[j].value) {\n              arr[k] = leftArr[i];\n              i++;\n            } else {\n              arr[k] = rightArr[j];\n              j++;\n            }\n            k++;\n            addStep([], [k - 1], sorted);\n          }\n\n          while (i < leftArr.length) {\n            arr[k] = leftArr[i];\n            addStep([], [k], sorted);\n            i++;\n            k++;\n          }\n\n          while (j < rightArr.length) {\n            arr[k] = rightArr[j];\n            addStep([], [k], sorted);\n            j++;\n            k++;\n          }\n\n          for (let idx = left; idx <= right; idx++) {\n            if (!sorted.includes(idx)) {\n              sorted.push(idx);\n            }\n          }\n          addStep([], [], sorted);\n        };\n\n        mergeSort(0, arr.length - 1);\n        break;\n      }\n    }\n\n    setSteps(newSteps);\n    setCurrentStep(0);\n  }, [array]);\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-gray-900 via-purple-900 to-gray-900 p-8\">\n      <div className=\"max-w-7xl mx-auto space-y-8\">\n        <motion.div\n          initial={{ opacity: 0, y: -20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.8 }}\n          className=\"text-center space-y-4\"\n        >\n          <motion.h1\n            className=\"text-6xl font-bold bg-gradient-to-r from-cyan-400 via-purple-400 to-pink-400 bg-clip-text text-transparent\"\n            animate={{\n              textShadow: [\n                '0 0 20px rgba(0, 255, 255, 0.5)',\n                '0 0 40px rgba(255, 0, 255, 0.5)',\n                '0 0 20px rgba(0, 255, 255, 0.5)'\n              ]\n            }}\n            transition={{ duration: 2, repeat: Infinity }}\n          >\n            Algorithm Visualizer\n          </motion.h1>\n          \n          <div className=\"flex items-center justify-center gap-4\">\n            <motion.div\n              initial={{ scale: 0 }}\n              animate={{ scale: 1 }}\n              transition={{ delay: 0.3, type: 'spring' }}\n              className=\"px-6 py-2 bg-purple-500/20 border border-purple-400/50 rounded-full backdrop-blur-sm\"\n            >\n              <span className=\"text-2xl font-semibold text-purple-300\">\n                {mockAlgorithms.find(a => a.id === selectedAlgorithm)?.name || 'Bubble Sort'}\n              </span>\n            </motion.div>\n            \n            <motion.div\n              initial={{ scale: 0 }}\n              animate={{ scale: 1 }}\n              transition={{ delay: 0.5, type: 'spring' }}\n              className=\"px-4 py-2 bg-cyan-500/20 border border-cyan-400/50 rounded-full backdrop-blur-sm relative overflow-hidden\"\n            >\n              <motion.div\n                className=\"absolute inset-0 bg-gradient-to-r from-transparent via-cyan-400/20 to-transparent\"\n                animate={{ x: ['-100%', '200%'] }}\n                transition={{ duration: 2, repeat: Infinity, ease: 'linear' }}\n              />\n              <div className=\"relative flex items-center gap-2\">\n                <Zap className=\"w-4 h-4 text-cyan-400\" />\n                <span className=\"text-lg font-mono text-cyan-300\">\n                  {mockAlgorithms.find(a => a.id === selectedAlgorithm)?.complexity || 'O(n\u00b2)'}\n                </span>\n              </div>\n            </motion.div>\n          </div>\n        </motion.div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-6\">\n          <div className=\"lg:col-span-1 space-y-6\">\n            <motion.div\n              initial={{ opacity: 0, x: -50 }}\n              animate={{ opacity: 1, x: 0 }}\n              className=\"bg-gray-900/50 backdrop-blur-lg border border-cyan-500/30 rounded-xl p-6 shadow-[0_0_30px_rgba(0,255,255,0.3)] hover:shadow-[0_0_50px_rgba(0,255,255,0.5)] transition-shadow duration-300\"\n            >\n              <div className=\"space-y-6\">\n                {/* Algorithm Selection */}\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center gap-2 text-cyan-400 mb-4\">\n                    <Zap className=\"w-5 h-5\" />\n                    <h3 className=\"font-bold text-lg\">Algorithm</h3>\n                  </div>\n                  <div className=\"grid grid-cols-1 gap-2\">\n                    {mockAlgorithms.map((algo) => (\n                      <motion.button\n                        key={algo.id}\n                        whileHover={{ scale: 1.02 }}\n                        whileTap={{ scale: 0.98 }}\n                        onClick={() => setSelectedAlgorithm(algo.id as AlgorithmType)}\n                        className={`p-3 rounded-lg border transition-all duration-300 text-left ${\n                          selectedAlgorithm === algo.id\n                            ? 'bg-cyan-500/20 border-cyan-400 shadow-[0_0_20px_rgba(0,255,255,0.4)]'\n                            : 'bg-gray-800/50 border-gray-700 hover:border-cyan-500/50'\n                        }`}\n                      >\n                        <div className=\"font-semibold text-white\">{algo.name}</div>\n                        <div className=\"text-xs text-gray-400 mt-1\">{algo.complexity}</div>\n                      </motion.button>\n                    ))}\n                  </div>\n                </div>\n\n                {/* Speed Control */}\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <label className=\"text-cyan-400 font-semibold flex items-center gap-2\">\n                      <BarChart3 className=\"w-4 h-4\" />\n                      Speed\n                    </label>\n                    <span className=\"text-white font-mono text-sm bg-cyan-500/20 px-2 py-1 rounded border border-cyan-500/30\">\n                      {speed[0]}%\n                    </span>\n                  </div>\n                  <Slider\n                    value={speed}\n                    onValueChange={setSpeed}\n                    min={10}\n                    max={100}\n                    step={10}\n                    className=\"[&_[role=slider]]:bg-cyan-400 [&_[role=slider]]:border-cyan-300 [&_[role=slider]]:shadow-[0_0_10px_rgba(0,255,255,0.6)]\"\n                  />\n                </div>\n\n                {/* Array Size Control */}\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <label className=\"text-cyan-400 font-semibold flex items-center gap-2\">\n                      <BarChart3 className=\"w-4 h-4\" />\n                      Array Size\n                    </label>\n                    <span className=\"text-white font-mono text-sm bg-cyan-500/20 px-2 py-1 rounded border border-cyan-500/30\">\n                      {arraySize[0]}\n                    </span>\n                  </div>\n                  <Slider\n                    value={arraySize}\n                    onValueChange={setArraySize}\n                    min={5}\n                    max={50}\n                    step={5}\n                    disabled={isPlaying}\n                    className=\"[&_[role=slider]]:bg-cyan-400 [&_[role=slider]]:border-cyan-300 [&_[role=slider]]:shadow-[0_0_10px_rgba(0,255,255,0.6)]\"\n                  />\n                </div>\n\n                {/* Control Buttons */}\n                <div className=\"space-y-3 pt-4 border-t border-cyan-500/20\">\n                  <Button\n                    onClick={isPlaying ? pauseVisualization : startVisualization}\n                    disabled={steps.length === 0}\n                    className=\"w-full bg-gradient-to-r from-cyan-500 to-blue-500 hover:from-cyan-400 hover:to-blue-400 text-white font-bold py-6 rounded-lg shadow-[0_0_20px_rgba(0,255,255,0.4)] hover:shadow-[0_0_30px_rgba(0,255,255,0.6)] transition-all duration-300 disabled:opacity-50 disabled:cursor-not-allowed\"\n                  >\n                    {isPlaying ? (\n                      <>\n                        <Pause className=\"w-5 h-5 mr-2\" />\n                        Pause\n                      </>\n                    ) : (\n                      <>\n                        <Play className=\"w-5 h-5 mr-2\" />\n                        Play\n                      </>\n                    )}\n                  </Button>\n\n                  <Button\n                    onClick={resetVisualization}\n                    variant=\"outline\"\n                    className=\"w-full border-2 border-purple-500/50 bg-purple-500/10 hover:bg-purple-500/20 text-purple-300 hover:text-purple-200 font-bold py-6 rounded-lg shadow-[0_0_15px_rgba(168,85,247,0.3)] hover:shadow-[0_0_25px_rgba(168,85,247,0.5)] transition-all duration-300\"\n                  >\n                    <RotateCcw className=\"w-5 h-5 mr-2\" />\n                    Reset\n                  </Button>\n\n                  <Button\n                    onClick={() => generateSortingSteps(selectedAlgorithm)}\n                    disabled={isPlaying || array.length === 0}\n                    className=\"w-full bg-gradient-to-r from-pink-500 to-purple-500 hover:from-pink-400 hover:to-purple-400 text-white font-bold py-6 rounded-lg shadow-[0_0_20px_rgba(236,72,153,0.4)] hover:shadow-[0_0_30px_rgba(236,72,153,0.6)] transition-all duration-300 disabled:opacity-50 disabled:cursor-not-allowed\"\n                  >\n                    <Zap className=\"w-5 h-5 mr-2\" />\n                    Generate Steps\n                  </Button>\n                </div>\n\n                {/* Stats Display */}\n                <div className=\"pt-4 border-t border-cyan-500/20 space-y-2\">\n                  <div className=\"flex justify-between text-sm\">\n                    <span className=\"text-gray-400\">Current Step:</span>\n                    <span className=\"text-cyan-400 font-mono\">{currentStep} / {steps.length}</span>\n                  </div>\n                  <div className=\"flex justify-between text-sm\">\n                    <span className=\"text-gray-400\">Array Length:</span>\n                    <span className=\"text-cyan-400 font-mono\">{array.length}</span>\n                  </div>\n                </div>\n              </div>\n            </motion.div>\n            \n            <div className=\"bg-gray-900/50 backdrop-blur-lg border border-cyan-500/30 rounded-xl p-6 shadow-2xl shadow-cyan-500/20\">\n              <div className=\"space-y-6\">\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center gap-2 text-cyan-400\">\n                    <Zap className=\"w-4 h-4\" />\n                    <span className=\"text-sm font-semibold tracking-wider\">ALGORITHM</span>\n                  </div>\n                  <div className=\"grid grid-cols-1 gap-3\">\n                    {mockAlgorithms.map((algo) => (\n                      <motion.button\n                        key={algo.id}\n                        onClick={() => setSelectedAlgorithm(algo.id as AlgorithmType)}\n                        className={`relative p-4 rounded-lg border-2 transition-all duration-300 text-left ${\n                          selectedAlgorithm === algo.id\n                            ? 'border-cyan-400 bg-cyan-500/20 shadow-lg shadow-cyan-500/50'\n                            : 'border-gray-700 bg-gray-800/50 hover:border-cyan-500/50 hover:shadow-md hover:shadow-cyan-500/30'\n                        }`}\n                        whileHover={{ scale: 1.02 }}\n                        whileTap={{ scale: 0.98 }}\n                      >\n                        <div className=\"space-y-1\">\n                          <div className={`font-semibold ${\n                            selectedAlgorithm === algo.id ? 'text-cyan-300' : 'text-gray-300'\n                          }`}>\n                            {algo.name}\n                          </div>\n                          <div className={`text-xs font-mono ${\n                            selectedAlgorithm === algo.id ? 'text-cyan-400' : 'text-gray-500'\n                          }`}>\n                            {algo.complexity}\n                          </div>\n                        </div>\n                        {selectedAlgorithm === algo.id && (\n                          <motion.div\n                            className=\"absolute inset-0 rounded-lg border-2 border-cyan-400\"\n                            initial={{ opacity: 0 }}\n                            animate={{ opacity: [0.5, 1, 0.5] }}\n                            transition={{ duration: 2, repeat: Infinity }}\n                          />\n                        )}\n                      </motion.button>\n                    ))}\n                  </div>\n                </div></parameter>\n</invoke>\n\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <label className=\"text-cyan-400 text-sm font-medium flex items-center gap-2\">\n                      <Zap className=\"w-4 h-4\" />\n                      Speed\n                    </label>\n                    <span className=\"text-cyan-300 text-xs\">{speed[0]}ms</span>\n                  </div>\n                  <Slider\n                    value={speed}\n                    onValueChange={setSpeed}\n                    min={10}\n                    max={200}\n                    step={10}\n                    className=\"[&_[role=slider]]:bg-cyan-400 [&_[role=slider]]:border-cyan-300 [&_[role=slider]]:shadow-[0_0_15px_rgba(34,211,238,0.8)] [&_[role=slider]]:hover:shadow-[0_0_25px_rgba(34,211,238,1)] [&_[role=slider]]:transition-shadow [&_.relative]:bg-gray-700/50 [&_.relative]:border [&_.relative]:border-cyan-500/30 [&_.bg-primary]:bg-gradient-to-r [&_.bg-primary]:from-cyan-500 [&_.bg-primary]:to-purple-500 [&_.bg-primary]:shadow-[0_0_10px_rgba(34,211,238,0.5)]\"\n                  />\n                </div>\n\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <label className=\"text-cyan-400 text-sm font-medium flex items-center gap-2\">\n                      <BarChart3 className=\"w-4 h-4\" />\n                      Array Size\n                    </label>\n                    <span className=\"text-cyan-300 text-xs\">{arraySize[0]}</span>\n                  </div>\n                  <Slider\n                    value={arraySize}\n                    onValueChange={setArraySize}\n                    min={5}\n                    max={100}\n                    step={1}\n                    className=\"[&_[role=slider]]:bg-gradient-to-r [&_[role=slider]]:from-purple-500 [&_[role=slider]]:to-pink-500 [&_[role=slider]]:border-2 [&_[role=slider]]:border-purple-300 [&_[role=slider]]:shadow-lg [&_[role=slider]]:shadow-purple-500/50 [&_[role=slider]]:transition-all [&_[role=slider]]:hover:shadow-purple-400/70 [&_[role=slider]]:hover:scale-110 [&>span]:bg-gradient-to-r [&>span]:from-purple-500/30 [&>span]:to-pink-500/30 [&>span]:h-2 [&>span]:rounded-full\"\n                    disabled={isPlaying}\n                  /></parameter>\n</invoke>\n                </div>\n\n                <div className=\"flex gap-3 pt-4\">\n                  <Button\n                    onClick={isPlaying ? pauseVisualization : startVisualization}\n                    disabled={array.length === 0 || (steps.length === 0 && !isPlaying)}\n                    className=\"flex-1 relative overflow-hidden group bg-gradient-to-r from-cyan-500 to-blue-500 hover:from-cyan-400 hover:to-blue-400 border-0 shadow-lg shadow-cyan-500/50 hover:shadow-cyan-400/70 transition-all duration-300\"\n                  >\n                    <motion.div\n                      className=\"flex items-center justify-center gap-2\"\n                      initial={false}\n                      animate={{ scale: isPlaying ? 1 : 1 }}\n                      whileTap={{ scale: 0.95 }}\n                    >\n                      <motion.div\n                        initial={false}\n                        animate={{ \n                          rotate: isPlaying ? 0 : 0,\n                          scale: isPlaying ? 1 : 1\n                        }}\n                        transition={{ duration: 0.3, ease: \"easeInOut\" }}\n                      >\n                        {isPlaying ? (\n                          <Pause className=\"w-4 h-4\" />\n                        ) : (\n                          <Play className=\"w-4 h-4\" />\n                        )}\n                      </motion.div>\n                      <span className=\"font-semibold\">\n                        {isPlaying ? 'Pause' : 'Play'}\n                      </span>\n                    </motion.div>\n                    <motion.div\n                      className=\"absolute inset-0 bg-gradient-to-r from-white/0 via-white/20 to-white/0\"\n                      initial={{ x: '-100%' }}\n                      animate={{ x: '100%' }}\n                      transition={{\n                        repeat: Infinity,\n                        duration: 2,\n                        ease: \"linear\"\n                      }}\n                    />\n                  </Button>\n                  <Button\n                    onClick={isPlaying ? pauseVisualization : startVisualization}\n                    className=\"flex-1 bg-gradient-to-r from-cyan-500 to-blue-500 hover:from-cyan-400 hover:to-blue-400 text-white font-semibold shadow-lg shadow-cyan-500/50 hover:shadow-cyan-400/70 transition-all duration-300 border-0\"\n                    disabled={array.length === 0 || (steps.length === 0 && !isPlaying)}\n                  >\n                    {isPlaying ? (\n                      <>\n                        <Pause className=\"w-4 h-4 mr-2\" />\n                        Pause\n                      </>\n                    ) : (\n                      <>\n                        <Play className=\"w-4 h-4 mr-2\" />\n                        {currentStep > 0 ? 'Resume' : 'Start'}\n                      </>\n                    )}\n                  </Button>\n                  \n                  <motion.div whileTap={{ rotate: 360 }} transition={{ duration: 0.6 }}>\n                    <Button\n                      onClick={resetVisualization}\n                      className=\"flex-1 bg-gradient-to-r from-purple-500 to-pink-500 hover:from-purple-400 hover:to-pink-400 text-white font-semibold shadow-lg shadow-purple-500/50 hover:shadow-purple-400/70 transition-all duration-300 border-0 relative overflow-hidden group\"\n                    >\n                      <motion.div\n                        className=\"absolute inset-0 bg-gradient-to-r from-purple-400 to-pink-400 opacity-0 group-hover:opacity-100 transition-opacity duration-300\"\n                        animate={{\n                          scale: [1, 1.2, 1],\n                          opacity: [0.5, 0.8, 0.5]\n                        }}\n                        transition={{\n                          duration: 2,\n                          repeat: Infinity,\n                          ease: \"easeInOut\"\n                        }}\n                      />\n                      <span className=\"relative z-10 flex items-center\">\n                        <RotateCcw className=\"w-4 h-4 mr-2\" />\n                        Reset\n                      </span>\n                    </Button>\n                  </motion.div>\n                </div>\n              </div>\n            </div>\n\n            {/* TODO:StatsPanel Real-time statistics panel showing comparisons, swaps, and progress */}\n          </div>\n\n          <div className=\"lg:col-span-3\">\n            <div className=\"bg-gray-900/50 backdrop-blur-lg border border-purple-500/30 rounded-xl p-8 shadow-2xl shadow-purple-500/20 min-h-[600px]\">\n              {array.length === 0 ? (\n                <motion.div\n                  initial={{ opacity: 0, scale: 0.8 }}\n                  animate={{ opacity: 1, scale: 1 }}\n                  className=\"absolute inset-0 flex flex-col items-center justify-center gap-6\"\n                >\n                  <motion.div\n                    animate={{\n                      rotate: [0, 360],\n                      scale: [1, 1.2, 1]\n                    }}\n                    transition={{\n                      duration: 3,\n                      repeat: Infinity,\n                      ease: \"easeInOut\"\n                    }}\n                  >\n                    <BarChart3 className=\"w-24 h-24 text-cyan-400\" style={{\n                      filter: 'drop-shadow(0 0 20px rgba(34, 211, 238, 0.8))'\n                    }} />\n                  </motion.div>\n                  <div className=\"text-center space-y-2\">\n                    <p className=\"text-2xl font-bold text-cyan-300\">Generate an array to begin</p>\n                    <p className=\"text-gray-400\">Click \"Generate Array\" to start visualizing</p>\n                  </div>\n                </motion.div>\n              ) : (\n                <div className=\"relative w-full h-full flex items-end justify-center gap-1 px-4\">\n                  {/* Comparison Indicators */}\n                  {steps.length > 0 && currentStep < steps.length && steps[currentStep].comparingIndices.length > 0 && (\n                    <motion.div\n                      className=\"absolute top-0 left-0 right-0 flex items-center justify-center\"\n                      initial={{ opacity: 0, y: -20 }}\n                      animate={{ opacity: 1, y: 0 }}\n                      exit={{ opacity: 0 }}\n                    >\n                      <div className=\"px-4 py-2 bg-yellow-500/20 border border-yellow-400/50 rounded-full backdrop-blur-sm\">\n                        <span className=\"text-yellow-300 text-sm font-semibold\">\n                          Comparing indices: {steps[currentStep].comparingIndices.join(', ')}\n                        </span>\n                      </div>\n                    </motion.div>\n                  )}\n\n                  {/* Swap Indicators */}\n                  {steps.length > 0 && currentStep < steps.length && steps[currentStep].swappingIndices.length > 0 && (\n                    <motion.div\n                      className=\"absolute top-12 left-0 right-0 flex items-center justify-center\"\n                      initial={{ opacity: 0, scale: 0.8 }}\n                      animate={{ opacity: 1, scale: 1 }}\n                      exit={{ opacity: 0 }}\n                    >\n                      <motion.div\n                        className=\"px-4 py-2 bg-pink-500/20 border border-pink-400/50 rounded-full backdrop-blur-sm\"\n                        animate={{\n                          boxShadow: [\n                            '0 0 20px rgba(236, 72, 153, 0.5)',\n                            '0 0 40px rgba(236, 72, 153, 0.8)',\n                            '0 0 20px rgba(236, 72, 153, 0.5)'\n                          ]\n                        }}\n                        transition={{ duration: 0.5, repeat: Infinity }}\n                      >\n                        <span className=\"text-pink-300 text-sm font-semibold\">\n                          Swapping indices: {steps[currentStep].swappingIndices.join(', ')}\n                        </span>\n                      </motion.div>\n                    </motion.div>\n                  )}\n\n                  {/* Animated Bars */}\n                  {(steps.length > 0 && currentStep < steps.length ? steps[currentStep].array : array).map((element, index) => {\n                    const maxValue = Math.max(...array.map(el => el.value));\n                    const heightPercentage = (element.value / maxValue) * 100;\n                    const barWidth = Math.max(8, Math.min(60, 800 / array.length));\n                    \n                    let barColor = NEON_COLORS[index % NEON_COLORS.length];\n                    let glowIntensity = 0.3;\n                    let shouldPulse = false;\n\n                    if (element.isSorted) {\n                      barColor = '#00ff00';\n                      glowIntensity = 0.6;\n                    } else if (element.isSwapping) {\n                      barColor = '#ff0066';\n                      glowIntensity = 1;\n                      shouldPulse = true;\n                    } else if (element.isComparing) {\n                      barColor = '#ffff00';\n                      glowIntensity = 0.8;\n                      shouldPulse = true;\n                    }\n\n                    return (\n                      <motion.div\n                        key={element.id}\n                        className=\"relative flex flex-col items-center justify-end\"\n                        style={{ width: barWidth }}\n                        initial={{ opacity: 0, y: 50 }}\n                        animate={{ opacity: 1, y: 0 }}\n                        transition={{ delay: index * 0.02 }}\n                      >\n                        {/* Swap Trail Effect */}\n                        {element.isSwapping && (\n                          <>\n                            <motion.div\n                              className=\"absolute inset-0 rounded-t-lg\"\n                              style={{\n                                background: `linear-gradient(to top, ${barColor}, transparent)`,\n                                filter: 'blur(20px)'\n                              }}\n                              animate={{\n                                opacity: [0.3, 0.8, 0.3],\n                                scale: [1, 1.3, 1]\n                              }}\n                              transition={{\n                                duration: 0.6,\n                                repeat: Infinity\n                              }}\n                            />\n                            {[...Array(3)].map((_, i) => (\n                              <motion.div\n                                key={i}\n                                className=\"absolute w-2 h-2 rounded-full\"\n                                style={{\n                                  backgroundColor: barColor,\n                                  boxShadow: `0 0 10px ${barColor}`\n                                }}\n                                initial={{ y: 0, opacity: 1 }}\n                                animate={{\n                                  y: [-20, -60],\n                                  opacity: [1, 0],\n                                  scale: [1, 0.5]\n                                }}\n                                transition={{\n                                  duration: 0.8,\n                                  repeat: Infinity,\n                                  delay: i * 0.2\n                                }}\n                              />\n                            ))}\n                          </>\n                        )}\n\n                        {/* Main Bar */}\n                        <motion.div\n                          className=\"w-full rounded-t-lg relative overflow-hidden\"\n                          style={{\n                            backgroundColor: barColor,\n                            boxShadow: `0 0 ${glowIntensity * 30}px ${barColor}, inset 0 0 ${glowIntensity * 20}px rgba(255, 255, 255, 0.3)`\n                          }}\n                          animate={{\n                            height: `${heightPercentage}%`,\n                            boxShadow: shouldPulse\n                              ? [\n                                  `0 0 ${glowIntensity * 30}px ${barColor}, inset 0 0 ${glowIntensity * 20}px rgba(255, 255, 255, 0.3)`,\n                                  `0 0 ${glowIntensity * 50}px ${barColor}, inset 0 0 ${glowIntensity * 30}px rgba(255, 255, 255, 0.5)`,\n                                  `0 0 ${glowIntensity * 30}px ${barColor}, inset 0 0 ${glowIntensity * 20}px rgba(255, 255, 255, 0.3)`\n                                ]\n                              : `0 0 ${glowIntensity * 30}px ${barColor}, inset 0 0 ${glowIntensity * 20}px rgba(255, 255, 255, 0.3)`\n                          }}\n                          transition={{\n                            height: { duration: 0.5, ease: \"easeInOut\" },\n                            boxShadow: shouldPulse ? { duration: 0.5, repeat: Infinity } : { duration: 0.3 }\n                          }}\n                        >\n                          {/* Shimmer Effect */}\n                          <motion.div\n                            className=\"absolute inset-0 bg-gradient-to-r from-transparent via-white/30 to-transparent\"\n                            animate={{\n                              x: ['-100%', '200%']\n                            }}\n                            transition={{\n                              duration: 2,\n                              repeat: Infinity,\n                              ease: \"linear\"\n                            }}\n                          />\n\n                          {/* Value Label */}\n                          {barWidth > 20 && (\n                            <motion.div\n                              className=\"absolute inset-0 flex items-center justify-center\"\n                              initial={{ opacity: 0 }}\n                              animate={{ opacity: 1 }}\n                              transition={{ delay: 0.3 }}\n                            >\n                              <span\n                                className=\"text-xs font-bold\"\n                                style={{\n                                  color: 'rgba(0, 0, 0, 0.8)',\n                                  textShadow: '0 0 5px rgba(255, 255, 255, 0.8)',\n                                  writingMode: heightPercentage < 20 ? 'horizontal-tb' : 'horizontal-tb'\n                                }}\n                              >\n                                {element.value}\n                              </span>\n                            </motion.div>\n                          )}\n                        </motion.div>\n\n                        {/* Comparison Indicator */}\n                        {element.isComparing && (\n                          <motion.div\n                            className=\"absolute -top-8 left-1/2 transform -translate-x-1/2\"\n                            initial={{ opacity: 0, y: 10 }}\n                            animate={{ opacity: 1, y: 0 }}\n                            exit={{ opacity: 0 }}\n                          >\n                            <motion.div\n                              animate={{\n                                y: [0, -5, 0]\n                              }}\n                              transition={{\n                                duration: 0.6,\n                                repeat: Infinity\n                              }}\n                            >\n                              <div className=\"w-0 h-0 border-l-4 border-r-4 border-b-8 border-l-transparent border-r-transparent border-b-yellow-400\"\n                                style={{\n                                  filter: 'drop-shadow(0 0 8px rgba(250, 204, 21, 0.8))'\n                                }}\n                              />\n                            </motion.div>\n                          </motion.div>\n                        )}\n\n                        {/* Sorted Checkmark */}\n                        {element.isSorted && (\n                          <motion.div\n                            className=\"absolute -top-6 left-1/2 transform -translate-x-1/2\"\n                            initial={{ scale: 0, rotate: -180 }}\n                            animate={{ scale: 1, rotate: 0 }}\n                            transition={{ type: \"spring\", stiffness: 200 }}\n                          >\n                            <div className=\"w-5 h-5 rounded-full bg-green-500 flex items-center justify-center\"\n                              style={{\n                                boxShadow: '0 0 15px rgba(34, 197, 94, 0.8)'\n                              }}\n                            >\n                              <svg className=\"w-3 h-3 text-white\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={3} d=\"M5 13l4 4L19 7\" />\n                              </svg>\n                            </div>\n                          </motion.div>\n                        )}\n                      </motion.div>\n                    );\n                  })}\n                </div>\n              )}\n              \n              <div className=\"relative h-full flex items-end justify-center gap-1\">\n                {array.length === 0 ? (\n                  <motion.div\n                    initial={{ opacity: 0, scale: 0.8 }}\n                    animate={{ opacity: 1, scale: 1 }}\n                    className=\"absolute inset-0 flex flex-col items-center justify-center gap-6\"\n                  >\n                    <motion.div\n                      animate={{\n                        rotate: [0, 360],\n                        scale: [1, 1.2, 1]\n                      }}\n                      transition={{\n                        duration: 3,\n                        repeat: Infinity,\n                        ease: \"easeInOut\"\n                      }}\n                    >\n                      <BarChart3 className=\"w-24 h-24 text-purple-400/50\" />\n                    </motion.div>\n                    <div className=\"text-center space-y-2\">\n                      <p className=\"text-2xl font-semibold text-purple-300\">\n                        Generate an array to begin\n                      </p>\n                      <p className=\"text-sm text-gray-400\">\n                        Click the generate button to create a random array\n                      </p>\n                    </div>\n                  </motion.div>\n                ) : (\n                  array.map((element, index) => {\n                    const maxValue = Math.max(...array.map(el => el.value));\n                    const heightPercentage = (element.value / maxValue) * 100;\n                    const colorIndex = index % NEON_COLORS.length;\n                    const baseColor = NEON_COLORS[colorIndex];\n\n                    return (\n                      <motion.div\n                        key={element.id}\n                        layout\n                        initial={{ height: 0, opacity: 0 }}\n                        animate={{\n                          height: `${heightPercentage}%`,\n                          opacity: 1,\n                          scale: element.isSwapping ? 1.1 : 1,\n                          y: element.isSwapping ? -20 : 0\n                        }}\n                        transition={{\n                          height: { duration: 0.5, ease: \"easeOut\" },\n                          scale: { duration: 0.3 },\n                          y: { duration: 0.3 },\n                          layout: { duration: 0.5, ease: \"easeInOut\" }\n                        }}\n                        className=\"relative flex-1 min-w-[4px] max-w-[60px] rounded-t-lg\"\n                        style={{\n                          background: element.isSorted\n                            ? `linear-gradient(to top, #00ff00, #00ff00)`\n                            : element.isSwapping\n                            ? `linear-gradient(to top, #ff0066, #ff00ff)`\n                            : element.isComparing\n                            ? `linear-gradient(to top, #ffff00, #ffa500)`\n                            : `linear-gradient(to top, ${baseColor}, ${baseColor}dd)`,\n                          boxShadow: element.isSorted\n                            ? `0 0 30px rgba(0, 255, 0, 0.8), 0 0 60px rgba(0, 255, 0, 0.4), inset 0 0 20px rgba(0, 255, 0, 0.3)`\n                            : element.isSwapping\n                            ? `0 0 40px rgba(255, 0, 102, 0.9), 0 0 80px rgba(255, 0, 255, 0.5), inset 0 0 30px rgba(255, 0, 102, 0.4)`\n                            : element.isComparing\n                            ? `0 0 35px rgba(255, 255, 0, 0.8), 0 0 70px rgba(255, 165, 0, 0.4), inset 0 0 25px rgba(255, 255, 0, 0.3)`\n                            : `0 0 20px ${baseColor}80, 0 0 40px ${baseColor}40, inset 0 0 15px ${baseColor}30`,\n                          border: element.isSorted\n                            ? '2px solid rgba(0, 255, 0, 0.6)'\n                            : element.isSwapping\n                            ? '2px solid rgba(255, 0, 102, 0.8)'\n                            : element.isComparing\n                            ? '2px solid rgba(255, 255, 0, 0.7)'\n                            : `1px solid ${baseColor}60`\n                        }}\n                      >\n                        {/* Glow overlay effect */}\n                        <motion.div\n                          className=\"absolute inset-0 rounded-t-lg\"\n                          animate={{\n                            opacity: element.isSwapping || element.isComparing ? [0.3, 0.7, 0.3] : 0.2\n                          }}\n                          transition={{\n                            duration: 0.8,\n                            repeat: element.isSwapping || element.isComparing ? Infinity : 0\n                          }}\n                          style={{\n                            background: `linear-gradient(to top, transparent, ${\n                              element.isSorted\n                                ? 'rgba(0, 255, 0, 0.4)'\n                                : element.isSwapping\n                                ? 'rgba(255, 0, 255, 0.5)'\n                                : element.isComparing\n                                ? 'rgba(255, 255, 0, 0.5)'\n                                : `${baseColor}40`\n                            })`\n                          }}\n                        />\n\n                        {/* Swap trail effect */}\n                        {element.isSwapping && (\n                          <>\n                            <motion.div\n                              className=\"absolute -top-8 left-1/2 -translate-x-1/2\"\n                              initial={{ opacity: 0, scale: 0 }}\n                              animate={{ opacity: [0, 1, 0], scale: [0.5, 1.5, 2] }}\n                              transition={{ duration: 0.6, repeat: Infinity }}\n                            >\n                              <div className=\"w-4 h-4 rounded-full bg-pink-500 blur-sm\" />\n                            </motion.div>\n                            <motion.div\n                              className=\"absolute inset-0 rounded-t-lg\"\n                              animate={{\n                                boxShadow: [\n                                  '0 0 20px rgba(255, 0, 102, 0.8)',\n                                  '0 0 60px rgba(255, 0, 255, 1)',\n                                  '0 0 20px rgba(255, 0, 102, 0.8)'\n                                ]\n                              }}\n                              transition={{ duration: 0.5, repeat: Infinity }}\n                            />\n                          </>\n                        )}\n\n                        {/* Comparison indicator */}\n                        {element.isComparing && (\n                          <motion.div\n                            className=\"absolute -top-6 left-1/2 -translate-x-1/2\"\n                            animate={{\n                              y: [-5, 5, -5],\n                              opacity: [0.7, 1, 0.7]\n                            }}\n                            transition={{ duration: 0.8, repeat: Infinity }}\n                          >\n                            <div className=\"w-0 h-0 border-l-[6px] border-l-transparent border-r-[6px] border-r-transparent border-t-[10px] border-t-yellow-400 drop-shadow-[0_0_8px_rgba(255,255,0,0.8)]\" />\n                          </motion.div>\n                        )}\n\n                        {/* Value label */}\n                        {array.length <= 50 && (\n                          <motion.div\n                            className=\"absolute -bottom-6 left-1/2 -translate-x-1/2 text-xs font-mono font-bold whitespace-nowrap\"\n                            initial={{ opacity: 0 }}\n                            animate={{ opacity: 0.8 }}\n                            style={{\n                              color: element.isSorted\n                                ? '#00ff00'\n                                : element.isSwapping\n                                ? '#ff00ff'\n                                : element.isComparing\n                                ? '#ffff00'\n                                : baseColor,\n                              textShadow: `0 0 10px ${\n                                element.isSorted\n                                  ? 'rgba(0, 255, 0, 0.8)'\n                                  : element.isSwapping\n                                  ? 'rgba(255, 0, 255, 0.8)'\n                                  : element.isComparing\n                                  ? 'rgba(255, 255, 0, 0.8)'\n                                  : `${baseColor}80`\n                              }`\n                            }}\n                          >\n                            {element.value}\n                          </motion.div>\n                        )}\n\n                        {/* Sorted checkmark */}\n                        {element.isSorted && (\n                          <motion.div\n                            className=\"absolute top-2 left-1/2 -translate-x-1/2\"\n                            initial={{ scale: 0, rotate: -180 }}\n                            animate={{ scale: 1, rotate: 0 }}\n                            transition={{ type: \"spring\", stiffness: 200, damping: 10 }}\n                          >\n                            <div className=\"w-3 h-3 rounded-full bg-green-400 flex items-center justify-center shadow-[0_0_15px_rgba(0,255,0,0.8)]\">\n                              <div className=\"w-1.5 h-1.5 border-b-2 border-r-2 border-gray-900 rotate-45 translate-y-[-1px]\" />\n                            </div>\n                          </motion.div>\n                        )}\n                      </motion.div>\n                    );\n                  })\n                )}\n              </div>\n            </div>\n\n            <motion.div\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ delay: 0.3 }}\n              className=\"mt-6 space-y-3\"\n            >\n              <div className=\"flex items-center justify-between text-sm\">\n                <span className=\"text-cyan-400 font-semibold flex items-center gap-2\">\n                  <BarChart3 className=\"w-4 h-4\" />\n                  Sorting Progress\n                </span>\n                <motion.span\n                  key={currentStep}\n                  initial={{ scale: 1.2, color: '#00ffff' }}\n                  animate={{ scale: 1, color: '#a5f3fc' }}\n                  className=\"text-cyan-300 font-mono font-bold\"\n                >\n                  {steps.length > 0 ? Math.round((currentStep / steps.length) * 100) : 0}%\n                </motion.span>\n              </div>\n              \n              <div className=\"relative h-4 bg-gray-800/50 rounded-full border border-cyan-500/30 overflow-hidden shadow-inner\">\n                <motion.div\n                  className=\"absolute inset-y-0 left-0 bg-gradient-to-r from-cyan-500 via-purple-500 to-pink-500 rounded-full shadow-[0_0_20px_rgba(0,255,255,0.6)]\"\n                  initial={{ width: '0%' }}\n                  animate={{ \n                    width: steps.length > 0 ? `${(currentStep / steps.length) * 100}%` : '0%'\n                  }}\n                  transition={{ duration: 0.3, ease: 'easeOut' }}\n                >\n                  <motion.div\n                    className=\"absolute inset-0 bg-gradient-to-r from-transparent via-white/30 to-transparent\"\n                    animate={{ x: ['-100%', '200%'] }}\n                    transition={{ \n                      duration: 1.5, \n                      repeat: Infinity, \n                      ease: 'linear',\n                      repeatDelay: 0\n                    }}\n                  />\n                </motion.div>\n                \n                {steps.length > 0 && currentStep > 0 && (\n                  <motion.div\n                    className=\"absolute inset-y-0 left-0 pointer-events-none\"\n                    style={{ width: `${(currentStep / steps.length) * 100}%` }}\n                  >\n                    <motion.div\n                      className=\"absolute right-0 top-1/2 -translate-y-1/2 w-3 h-3 bg-cyan-400 rounded-full shadow-[0_0_15px_rgba(0,255,255,0.8)]\"\n                      animate={{\n                        scale: [1, 1.3, 1],\n                        boxShadow: [\n                          '0 0 15px rgba(0,255,255,0.8)',\n                          '0 0 25px rgba(0,255,255,1)',\n                          '0 0 15px rgba(0,255,255,0.8)'\n                        ]\n                      }}\n                      transition={{ duration: 1, repeat: Infinity }}\n                    />\n                  </motion.div>\n                )}\n              </div>\n              \n              <div className=\"flex justify-between text-xs text-gray-400 font-mono\">\n                <span>Step {currentStep} / {steps.length}</span>\n                {steps.length > 0 && currentStep >= steps.length && (\n                  <motion.span\n                    initial={{ opacity: 0, scale: 0.8 }}\n                    animate={{ opacity: 1, scale: 1 }}\n                    className=\"text-green-400 font-semibold flex items-center gap-1\"\n                  >\n                    <motion.span\n                      animate={{ rotate: 360 }}\n                      transition={{ duration: 0.5 }}\n                    >\n                      \u2713\n                    </motion.span>\n                    Complete\n                  </motion.span>\n                )}\n              </div>\n            </motion.div>\n          </div>\n        </div>\n\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.8, delay: 0.4 }}\n          className=\"bg-gray-900/50 backdrop-blur-lg border border-cyan-500/30 rounded-xl p-6 shadow-2xl shadow-cyan-500/20\"\n        >\n          <div className=\"flex items-center gap-2 text-cyan-400 mb-6\">\n            <BarChart3 className=\"w-5 h-5\" />\n            <h3 className=\"font-bold text-lg\">Legend</h3>\n          </div>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n            {/* Comparing State */}\n            <motion.div\n              className=\"relative p-4 rounded-lg bg-gray-800/50 border border-yellow-500/50 overflow-hidden group hover:border-yellow-400 transition-all duration-300\"\n              whileHover={{ scale: 1.05 }}\n            >\n              <motion.div\n                className=\"absolute inset-0 bg-gradient-to-r from-yellow-500/0 via-yellow-500/20 to-yellow-500/0\"\n                animate={{ x: ['-100%', '200%'] }}\n                transition={{ duration: 2, repeat: Infinity, ease: 'linear' }}\n              />\n              <div className=\"relative space-y-3\">\n                <motion.div\n                  className=\"w-full h-16 bg-gradient-to-t from-yellow-500 to-yellow-300 rounded-lg\"\n                  animate={{\n                    boxShadow: [\n                      '0 0 20px rgba(234, 179, 8, 0.6)',\n                      '0 0 40px rgba(234, 179, 8, 0.8)',\n                      '0 0 20px rgba(234, 179, 8, 0.6)'\n                    ]\n                  }}\n                  transition={{ duration: 1.5, repeat: Infinity }}\n                />\n                <div className=\"text-center\">\n                  <div className=\"text-yellow-300 font-semibold text-sm\">Comparing</div>\n                  <div className=\"text-gray-400 text-xs mt-1\">Elements being compared</div>\n                </div>\n              </div>\n            </motion.div>\n\n            {/* Swapping State */}\n            <motion.div\n              className=\"relative p-4 rounded-lg bg-gray-800/50 border border-red-500/50 overflow-hidden group hover:border-red-400 transition-all duration-300\"\n              whileHover={{ scale: 1.05 }}\n            >\n              <motion.div\n                className=\"absolute inset-0 bg-gradient-to-r from-red-500/0 via-red-500/20 to-red-500/0\"\n                animate={{ x: ['-100%', '200%'] }}\n                transition={{ duration: 2, repeat: Infinity, ease: 'linear', delay: 0.5 }}\n              />\n              <div className=\"relative space-y-3\">\n                <motion.div\n                  className=\"w-full h-16 bg-gradient-to-t from-red-500 to-red-300 rounded-lg\"\n                  animate={{\n                    boxShadow: [\n                      '0 0 20px rgba(239, 68, 68, 0.6)',\n                      '0 0 40px rgba(239, 68, 68, 0.8)',\n                      '0 0 20px rgba(239, 68, 68, 0.6)'\n                    ],\n                    scale: [1, 1.05, 1]\n                  }}\n                  transition={{ duration: 1.5, repeat: Infinity }}\n                />\n                <div className=\"text-center\">\n                  <div className=\"text-red-300 font-semibold text-sm\">Swapping</div>\n                  <div className=\"text-gray-400 text-xs mt-1\">Elements being swapped</div>\n                </div>\n              </div>\n            </motion.div>\n\n            {/* Sorted State */}\n            <motion.div\n              className=\"relative p-4 rounded-lg bg-gray-800/50 border border-green-500/50 overflow-hidden group hover:border-green-400 transition-all duration-300\"\n              whileHover={{ scale: 1.05 }}\n            >\n              <motion.div\n                className=\"absolute inset-0 bg-gradient-to-r from-green-500/0 via-green-500/20 to-green-500/0\"\n                animate={{ x: ['-100%', '200%'] }}\n                transition={{ duration: 2, repeat: Infinity, ease: 'linear', delay: 1 }}\n              />\n              <div className=\"relative space-y-3\">\n                <motion.div\n                  className=\"w-full h-16 bg-gradient-to-t from-green-500 to-green-300 rounded-lg\"\n                  animate={{\n                    boxShadow: [\n                      '0 0 20px rgba(34, 197, 94, 0.6)',\n                      '0 0 40px rgba(34, 197, 94, 0.8)',\n                      '0 0 20px rgba(34, 197, 94, 0.6)'\n                    ]\n                  }}\n                  transition={{ duration: 1.5, repeat: Infinity }}\n                />\n                <div className=\"text-center\">\n                  <div className=\"text-green-300 font-semibold text-sm\">Sorted</div>\n                  <div className=\"text-gray-400 text-xs mt-1\">In final position</div>\n                </div>\n              </div>\n            </motion.div>\n\n            {/* Unsorted State */}\n            <motion.div\n              className=\"relative p-4 rounded-lg bg-gray-800/50 border border-cyan-500/50 overflow-hidden group hover:border-cyan-400 transition-all duration-300\"\n              whileHover={{ scale: 1.05 }}\n            >\n              <motion.div\n                className=\"absolute inset-0 bg-gradient-to-r from-cyan-500/0 via-cyan-500/20 to-cyan-500/0\"\n                animate={{ x: ['-100%', '200%'] }}\n                transition={{ duration: 2, repeat: Infinity, ease: 'linear', delay: 1.5 }}\n              />\n              <div className=\"relative space-y-3\">\n                <motion.div\n                  className=\"w-full h-16 bg-gradient-to-t from-cyan-500 to-cyan-300 rounded-lg\"\n                  animate={{\n                    boxShadow: [\n                      '0 0 20px rgba(6, 182, 212, 0.6)',\n                      '0 0 40px rgba(6, 182, 212, 0.8)',\n                      '0 0 20px rgba(6, 182, 212, 0.6)'\n                    ]\n                  }}\n                  transition={{ duration: 1.5, repeat: Infinity }}\n                />\n                <div className=\"text-center\">\n                  <div className=\"text-cyan-300 font-semibold text-sm\">Unsorted</div>\n                  <div className=\"text-gray-400 text-xs mt-1\">Awaiting sort</div>\n                </div>\n              </div>\n            </motion.div>\n          </div>\n\n          {/* Additional Info */}\n          <motion.div\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            transition={{ delay: 0.6 }}\n            className=\"mt-6 pt-6 border-t border-cyan-500/20\"\n          >\n            <div className=\"flex items-center justify-center gap-6 text-sm\">\n              <div className=\"flex items-center gap-2\">\n                <motion.div\n                  className=\"w-3 h-3 rounded-full bg-purple-500\"\n                  animate={{\n                    boxShadow: [\n                      '0 0 10px rgba(168, 85, 247, 0.6)',\n                      '0 0 20px rgba(168, 85, 247, 0.8)',\n                      '0 0 10px rgba(168, 85, 247, 0.6)'\n                    ]\n                  }}\n                  transition={{ duration: 2, repeat: Infinity }}\n                />\n                <span className=\"text-gray-400\">Neon glow indicates active state</span>\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <motion.div\n                  className=\"w-3 h-3 rounded-full bg-pink-500\"\n                  animate={{\n                    scale: [1, 1.2, 1]\n                  }}\n                  transition={{ duration: 1.5, repeat: Infinity }}\n                />\n                <span className=\"text-gray-400\">Pulse effect during operations</span>\n              </div>\n            </div>\n          </motion.div>\n        </motion.div>\n      </div>\n    </div>\n  );\n}",
  "error": null,
  "overall_score": 41,
  "code_quality_score": 12,
  "architecture_score": 10,
  "performance_score": 8,
  "accessibility_score": 11,
  "metadata": {
    "document_id": "eval_room_84d2452dbd12",
    "prompt_category": "creative",
    "prompt_complexity": 9.0
  },
  "raw_response": {
    "document_id": "eval_room_84d2452dbd12",
    "mode": "parallel",
    "prompt": "Build a captivating algorithm visualizer with neon colored bars, smooth height transitions, glowing comparison indicators, trail effects during swaps, and a futuristic dashboard design with animated controls",
    "content": "import { useState, useCallback } from 'react';\nimport { useEffect } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Slider } from '@/components/ui/slider';\nimport { Play, Pause, RotateCcw, Zap, BarChart3 } from 'lucide-react';\nimport { motion } from 'framer-motion';\n\ninterface ArrayElement {\n  value: number;\n  id: string;\n  isComparing?: boolean;\n  isSwapping?: boolean;\n  isSorted?: boolean;\n}\n\ninterface AlgorithmStep {\n  array: ArrayElement[];\n  comparingIndices: number[];\n  swappingIndices: number[];\n  sortedIndices: number[];\n}\n\ntype AlgorithmType = 'bubble' | 'quick' | 'merge' | 'insertion';\n\nconst NEON_COLORS = [\n  '#00ffff',\n  '#ff00ff', \n  '#00ff00',\n  '#ffff00',\n  '#ff0066',\n  '#00ffaa'\n];\n\nconst mockAlgorithms = [\n  { id: 'bubble', name: 'Bubble Sort', complexity: 'O(n\u00b2)' },\n  { id: 'quick', name: 'Quick Sort', complexity: 'O(n log n)' },\n  { id: 'merge', name: 'Merge Sort', complexity: 'O(n log n)' },\n  { id: 'insertion', name: 'Insertion Sort', complexity: 'O(n\u00b2)' }\n];\n\nexport default function AlgorithmVisualizer() {\n  const [array, setArray] = useState<ArrayElement[]>([]);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [speed, setSpeed] = useState([50]);\n  const [arraySize, setArraySize] = useState([20]);\n  const [selectedAlgorithm, setSelectedAlgorithm] = useState<AlgorithmType>('bubble');\n  const [currentStep, setCurrentStep] = useState(0);\n  const [steps, setSteps] = useState<AlgorithmStep[]>([]);\n\n\n  const generateRandomArray = useCallback(() => {\n    const newArray: ArrayElement[] = Array.from({ length: arraySize[0] }, (_, index) => ({\n      value: Math.floor(Math.random() * 100) + 5,\n      id: `element-${index}-${Date.now()}`,\n      isComparing: false,\n      isSwapping: false,\n      isSorted: false\n    }));\n    setArray(newArray);\n    setSteps([]);\n    setCurrentStep(0);\n    setIsPlaying(false);\n  }, [arraySize]);\n\n  const resetVisualization = useCallback(() => {\n\n    setIsPlaying(false);\n    setCurrentStep(0);\n    setSteps([]);\n    generateRandomArray();\n  }, [generateRandomArray]);\neRandomArray]);\n\n  useEffect(() => {\n    if (!isPlaying) return;\n\n    const delay = 1000 - (speed[0] * 9.5);\n    const timer = setTimeout(() => {\n      animateSteps();\n    }, delay);\n\n    return () => clearTimeout(timer);\n  }, [isPlaying, speed, animateSteps]);\n\n  const animateSteps = useCallback(() => {\n    if (currentStep >= steps.length) {\n      setIsPlaying(false);\n      return;\n    }\n\n    const step = steps[currentStep];\n    setArray(step.array);\n    setCurrentStep(prev => prev + 1);\n  }, [currentStep, steps]);\n\n  const startVisualization = useCallback(() => {\n    if (steps.length === 0 || currentStep >= steps.length) return;\n    setIsPlaying(true);\n  }, [steps, speed, currentStep]);\n\n  const pauseVisualization = useCallback(() => {    setIsPlaying(false);\n\n    /* TODO:PauseAnimation Set isPlaying false, preserve current step */\n  }, []);\n\n  const generateSortingSteps = useCallback((algorithm: AlgorithmType) => {\n    if (array.length === 0) return;\n\n    const newSteps: AlgorithmStep[] = [];\n    const arr = [...array];\n\n    const addStep = (\n      comparingIndices: number[] = [],\n      swappingIndices: number[] = [],\n      sortedIndices: number[] = []\n    ) => {\n      newSteps.push({\n        array: arr.map((el, idx) => ({\n          ...el,\n          isComparing: comparingIndices.includes(idx),\n          isSwapping: swappingIndices.includes(idx),\n          isSorted: sortedIndices.includes(idx)\n        })),\n        comparingIndices,\n        swappingIndices,\n        sortedIndices\n      });\n    };\n\n    const swap = (i: number, j: number) => {\n      const temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n    };\n\n    switch (algorithm) {\n      case 'bubble': {\n        const sorted: number[] = [];\n        for (let i = 0; i < arr.length - 1; i++) {\n          for (let j = 0; j < arr.length - i - 1; j++) {\n            addStep([j, j + 1], [], sorted);\n            if (arr[j].value > arr[j + 1].value) {\n              addStep([j, j + 1], [j, j + 1], sorted);\n              swap(j, j + 1);\n              addStep([], [], sorted);\n            }\n          }\n          sorted.push(arr.length - i - 1);\n          addStep([], [], sorted);\n        }\n        sorted.push(0);\n        addStep([], [], sorted);\n        break;\n      }\n\n      case 'insertion': {\n        const sorted: number[] = [0];\n        addStep([], [], sorted);\n        for (let i = 1; i < arr.length; i++) {\n          let j = i;\n          addStep([j, j - 1], [], sorted);\n          while (j > 0 && arr[j].value < arr[j - 1].value) {\n            addStep([j, j - 1], [j, j - 1], sorted);\n            swap(j, j - 1);\n            j--;\n            addStep([j, j + 1], [], sorted);\n          }\n          sorted.push(i);\n          addStep([], [], sorted);\n        }\n        break;\n      }\n\n      case 'quick': {\n        const sorted: number[] = [];\n        const quickSort = (low: number, high: number) => {\n          if (low < high) {\n            const pivotIndex = partition(low, high);\n            sorted.push(pivotIndex);\n            addStep([], [], sorted);\n            quickSort(low, pivotIndex - 1);\n            quickSort(pivotIndex + 1, high);\n          } else if (low === high) {\n            sorted.push(low);\n            addStep([], [], sorted);\n          }\n        };\n\n        const partition = (low: number, high: number): number => {\n          const pivot = arr[high].value;\n          let i = low - 1;\n\n          for (let j = low; j < high; j++) {\n            addStep([j, high], [], sorted);\n            if (arr[j].value < pivot) {\n              i++;\n              if (i !== j) {\n                addStep([i, j], [i, j], sorted);\n                swap(i, j);\n              }\n            }\n          }\n          addStep([i + 1, high], [i + 1, high], sorted);\n          swap(i + 1, high);\n          return i + 1;\n        };\n\n        quickSort(0, arr.length - 1);\n        break;\n      }\n\n      case 'merge': {\n        const sorted: number[] = [];\n        const mergeSort = (left: number, right: number) => {\n          if (left >= right) {\n            return;\n          }\n\n          const mid = Math.floor((left + right) / 2);\n          mergeSort(left, mid);\n          mergeSort(mid + 1, right);\n          merge(left, mid, right);\n        };\n\n        const merge = (left: number, mid: number, right: number) => {\n          const leftArr = arr.slice(left, mid + 1);\n          const rightArr = arr.slice(mid + 1, right + 1);\n\n          let i = 0, j = 0, k = left;\n\n          while (i < leftArr.length && j < rightArr.length) {\n            addStep([left + i, mid + 1 + j], [], sorted);\n            if (leftArr[i].value <= rightArr[j].value) {\n              arr[k] = leftArr[i];\n              i++;\n            } else {\n              arr[k] = rightArr[j];\n              j++;\n            }\n            k++;\n            addStep([], [k - 1], sorted);\n          }\n\n          while (i < leftArr.length) {\n            arr[k] = leftArr[i];\n            addStep([], [k], sorted);\n            i++;\n            k++;\n          }\n\n          while (j < rightArr.length) {\n            arr[k] = rightArr[j];\n            addStep([], [k], sorted);\n            j++;\n            k++;\n          }\n\n          for (let idx = left; idx <= right; idx++) {\n            if (!sorted.includes(idx)) {\n              sorted.push(idx);\n            }\n          }\n          addStep([], [], sorted);\n        };\n\n        mergeSort(0, arr.length - 1);\n        break;\n      }\n    }\n\n    setSteps(newSteps);\n    setCurrentStep(0);\n  }, [array]);\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-gray-900 via-purple-900 to-gray-900 p-8\">\n      <div className=\"max-w-7xl mx-auto space-y-8\">\n        <motion.div\n          initial={{ opacity: 0, y: -20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.8 }}\n          className=\"text-center space-y-4\"\n        >\n          <motion.h1\n            className=\"text-6xl font-bold bg-gradient-to-r from-cyan-400 via-purple-400 to-pink-400 bg-clip-text text-transparent\"\n            animate={{\n              textShadow: [\n                '0 0 20px rgba(0, 255, 255, 0.5)',\n                '0 0 40px rgba(255, 0, 255, 0.5)',\n                '0 0 20px rgba(0, 255, 255, 0.5)'\n              ]\n            }}\n            transition={{ duration: 2, repeat: Infinity }}\n          >\n            Algorithm Visualizer\n          </motion.h1>\n          \n          <div className=\"flex items-center justify-center gap-4\">\n            <motion.div\n              initial={{ scale: 0 }}\n              animate={{ scale: 1 }}\n              transition={{ delay: 0.3, type: 'spring' }}\n              className=\"px-6 py-2 bg-purple-500/20 border border-purple-400/50 rounded-full backdrop-blur-sm\"\n            >\n              <span className=\"text-2xl font-semibold text-purple-300\">\n                {mockAlgorithms.find(a => a.id === selectedAlgorithm)?.name || 'Bubble Sort'}\n              </span>\n            </motion.div>\n            \n            <motion.div\n              initial={{ scale: 0 }}\n              animate={{ scale: 1 }}\n              transition={{ delay: 0.5, type: 'spring' }}\n              className=\"px-4 py-2 bg-cyan-500/20 border border-cyan-400/50 rounded-full backdrop-blur-sm relative overflow-hidden\"\n            >\n              <motion.div\n                className=\"absolute inset-0 bg-gradient-to-r from-transparent via-cyan-400/20 to-transparent\"\n                animate={{ x: ['-100%', '200%'] }}\n                transition={{ duration: 2, repeat: Infinity, ease: 'linear' }}\n              />\n              <div className=\"relative flex items-center gap-2\">\n                <Zap className=\"w-4 h-4 text-cyan-400\" />\n                <span className=\"text-lg font-mono text-cyan-300\">\n                  {mockAlgorithms.find(a => a.id === selectedAlgorithm)?.complexity || 'O(n\u00b2)'}\n                </span>\n              </div>\n            </motion.div>\n          </div>\n        </motion.div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-6\">\n          <div className=\"lg:col-span-1 space-y-6\">\n            <motion.div\n              initial={{ opacity: 0, x: -50 }}\n              animate={{ opacity: 1, x: 0 }}\n              className=\"bg-gray-900/50 backdrop-blur-lg border border-cyan-500/30 rounded-xl p-6 shadow-[0_0_30px_rgba(0,255,255,0.3)] hover:shadow-[0_0_50px_rgba(0,255,255,0.5)] transition-shadow duration-300\"\n            >\n              <div className=\"space-y-6\">\n                {/* Algorithm Selection */}\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center gap-2 text-cyan-400 mb-4\">\n                    <Zap className=\"w-5 h-5\" />\n                    <h3 className=\"font-bold text-lg\">Algorithm</h3>\n                  </div>\n                  <div className=\"grid grid-cols-1 gap-2\">\n                    {mockAlgorithms.map((algo) => (\n                      <motion.button\n                        key={algo.id}\n                        whileHover={{ scale: 1.02 }}\n                        whileTap={{ scale: 0.98 }}\n                        onClick={() => setSelectedAlgorithm(algo.id as AlgorithmType)}\n                        className={`p-3 rounded-lg border transition-all duration-300 text-left ${\n                          selectedAlgorithm === algo.id\n                            ? 'bg-cyan-500/20 border-cyan-400 shadow-[0_0_20px_rgba(0,255,255,0.4)]'\n                            : 'bg-gray-800/50 border-gray-700 hover:border-cyan-500/50'\n                        }`}\n                      >\n                        <div className=\"font-semibold text-white\">{algo.name}</div>\n                        <div className=\"text-xs text-gray-400 mt-1\">{algo.complexity}</div>\n                      </motion.button>\n                    ))}\n                  </div>\n                </div>\n\n                {/* Speed Control */}\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <label className=\"text-cyan-400 font-semibold flex items-center gap-2\">\n                      <BarChart3 className=\"w-4 h-4\" />\n                      Speed\n                    </label>\n                    <span className=\"text-white font-mono text-sm bg-cyan-500/20 px-2 py-1 rounded border border-cyan-500/30\">\n                      {speed[0]}%\n                    </span>\n                  </div>\n                  <Slider\n                    value={speed}\n                    onValueChange={setSpeed}\n                    min={10}\n                    max={100}\n                    step={10}\n                    className=\"[&_[role=slider]]:bg-cyan-400 [&_[role=slider]]:border-cyan-300 [&_[role=slider]]:shadow-[0_0_10px_rgba(0,255,255,0.6)]\"\n                  />\n                </div>\n\n                {/* Array Size Control */}\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <label className=\"text-cyan-400 font-semibold flex items-center gap-2\">\n                      <BarChart3 className=\"w-4 h-4\" />\n                      Array Size\n                    </label>\n                    <span className=\"text-white font-mono text-sm bg-cyan-500/20 px-2 py-1 rounded border border-cyan-500/30\">\n                      {arraySize[0]}\n                    </span>\n                  </div>\n                  <Slider\n                    value={arraySize}\n                    onValueChange={setArraySize}\n                    min={5}\n                    max={50}\n                    step={5}\n                    disabled={isPlaying}\n                    className=\"[&_[role=slider]]:bg-cyan-400 [&_[role=slider]]:border-cyan-300 [&_[role=slider]]:shadow-[0_0_10px_rgba(0,255,255,0.6)]\"\n                  />\n                </div>\n\n                {/* Control Buttons */}\n                <div className=\"space-y-3 pt-4 border-t border-cyan-500/20\">\n                  <Button\n                    onClick={isPlaying ? pauseVisualization : startVisualization}\n                    disabled={steps.length === 0}\n                    className=\"w-full bg-gradient-to-r from-cyan-500 to-blue-500 hover:from-cyan-400 hover:to-blue-400 text-white font-bold py-6 rounded-lg shadow-[0_0_20px_rgba(0,255,255,0.4)] hover:shadow-[0_0_30px_rgba(0,255,255,0.6)] transition-all duration-300 disabled:opacity-50 disabled:cursor-not-allowed\"\n                  >\n                    {isPlaying ? (\n                      <>\n                        <Pause className=\"w-5 h-5 mr-2\" />\n                        Pause\n                      </>\n                    ) : (\n                      <>\n                        <Play className=\"w-5 h-5 mr-2\" />\n                        Play\n                      </>\n                    )}\n                  </Button>\n\n                  <Button\n                    onClick={resetVisualization}\n                    variant=\"outline\"\n                    className=\"w-full border-2 border-purple-500/50 bg-purple-500/10 hover:bg-purple-500/20 text-purple-300 hover:text-purple-200 font-bold py-6 rounded-lg shadow-[0_0_15px_rgba(168,85,247,0.3)] hover:shadow-[0_0_25px_rgba(168,85,247,0.5)] transition-all duration-300\"\n                  >\n                    <RotateCcw className=\"w-5 h-5 mr-2\" />\n                    Reset\n                  </Button>\n\n                  <Button\n                    onClick={() => generateSortingSteps(selectedAlgorithm)}\n                    disabled={isPlaying || array.length === 0}\n                    className=\"w-full bg-gradient-to-r from-pink-500 to-purple-500 hover:from-pink-400 hover:to-purple-400 text-white font-bold py-6 rounded-lg shadow-[0_0_20px_rgba(236,72,153,0.4)] hover:shadow-[0_0_30px_rgba(236,72,153,0.6)] transition-all duration-300 disabled:opacity-50 disabled:cursor-not-allowed\"\n                  >\n                    <Zap className=\"w-5 h-5 mr-2\" />\n                    Generate Steps\n                  </Button>\n                </div>\n\n                {/* Stats Display */}\n                <div className=\"pt-4 border-t border-cyan-500/20 space-y-2\">\n                  <div className=\"flex justify-between text-sm\">\n                    <span className=\"text-gray-400\">Current Step:</span>\n                    <span className=\"text-cyan-400 font-mono\">{currentStep} / {steps.length}</span>\n                  </div>\n                  <div className=\"flex justify-between text-sm\">\n                    <span className=\"text-gray-400\">Array Length:</span>\n                    <span className=\"text-cyan-400 font-mono\">{array.length}</span>\n                  </div>\n                </div>\n              </div>\n            </motion.div>\n            \n            <div className=\"bg-gray-900/50 backdrop-blur-lg border border-cyan-500/30 rounded-xl p-6 shadow-2xl shadow-cyan-500/20\">\n              <div className=\"space-y-6\">\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center gap-2 text-cyan-400\">\n                    <Zap className=\"w-4 h-4\" />\n                    <span className=\"text-sm font-semibold tracking-wider\">ALGORITHM</span>\n                  </div>\n                  <div className=\"grid grid-cols-1 gap-3\">\n                    {mockAlgorithms.map((algo) => (\n                      <motion.button\n                        key={algo.id}\n                        onClick={() => setSelectedAlgorithm(algo.id as AlgorithmType)}\n                        className={`relative p-4 rounded-lg border-2 transition-all duration-300 text-left ${\n                          selectedAlgorithm === algo.id\n                            ? 'border-cyan-400 bg-cyan-500/20 shadow-lg shadow-cyan-500/50'\n                            : 'border-gray-700 bg-gray-800/50 hover:border-cyan-500/50 hover:shadow-md hover:shadow-cyan-500/30'\n                        }`}\n                        whileHover={{ scale: 1.02 }}\n                        whileTap={{ scale: 0.98 }}\n                      >\n                        <div className=\"space-y-1\">\n                          <div className={`font-semibold ${\n                            selectedAlgorithm === algo.id ? 'text-cyan-300' : 'text-gray-300'\n                          }`}>\n                            {algo.name}\n                          </div>\n                          <div className={`text-xs font-mono ${\n                            selectedAlgorithm === algo.id ? 'text-cyan-400' : 'text-gray-500'\n                          }`}>\n                            {algo.complexity}\n                          </div>\n                        </div>\n                        {selectedAlgorithm === algo.id && (\n                          <motion.div\n                            className=\"absolute inset-0 rounded-lg border-2 border-cyan-400\"\n                            initial={{ opacity: 0 }}\n                            animate={{ opacity: [0.5, 1, 0.5] }}\n                            transition={{ duration: 2, repeat: Infinity }}\n                          />\n                        )}\n                      </motion.button>\n                    ))}\n                  </div>\n                </div></parameter>\n</invoke>\n\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <label className=\"text-cyan-400 text-sm font-medium flex items-center gap-2\">\n                      <Zap className=\"w-4 h-4\" />\n                      Speed\n                    </label>\n                    <span className=\"text-cyan-300 text-xs\">{speed[0]}ms</span>\n                  </div>\n                  <Slider\n                    value={speed}\n                    onValueChange={setSpeed}\n                    min={10}\n                    max={200}\n                    step={10}\n                    className=\"[&_[role=slider]]:bg-cyan-400 [&_[role=slider]]:border-cyan-300 [&_[role=slider]]:shadow-[0_0_15px_rgba(34,211,238,0.8)] [&_[role=slider]]:hover:shadow-[0_0_25px_rgba(34,211,238,1)] [&_[role=slider]]:transition-shadow [&_.relative]:bg-gray-700/50 [&_.relative]:border [&_.relative]:border-cyan-500/30 [&_.bg-primary]:bg-gradient-to-r [&_.bg-primary]:from-cyan-500 [&_.bg-primary]:to-purple-500 [&_.bg-primary]:shadow-[0_0_10px_rgba(34,211,238,0.5)]\"\n                  />\n                </div>\n\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <label className=\"text-cyan-400 text-sm font-medium flex items-center gap-2\">\n                      <BarChart3 className=\"w-4 h-4\" />\n                      Array Size\n                    </label>\n                    <span className=\"text-cyan-300 text-xs\">{arraySize[0]}</span>\n                  </div>\n                  <Slider\n                    value={arraySize}\n                    onValueChange={setArraySize}\n                    min={5}\n                    max={100}\n                    step={1}\n                    className=\"[&_[role=slider]]:bg-gradient-to-r [&_[role=slider]]:from-purple-500 [&_[role=slider]]:to-pink-500 [&_[role=slider]]:border-2 [&_[role=slider]]:border-purple-300 [&_[role=slider]]:shadow-lg [&_[role=slider]]:shadow-purple-500/50 [&_[role=slider]]:transition-all [&_[role=slider]]:hover:shadow-purple-400/70 [&_[role=slider]]:hover:scale-110 [&>span]:bg-gradient-to-r [&>span]:from-purple-500/30 [&>span]:to-pink-500/30 [&>span]:h-2 [&>span]:rounded-full\"\n                    disabled={isPlaying}\n                  /></parameter>\n</invoke>\n                </div>\n\n                <div className=\"flex gap-3 pt-4\">\n                  <Button\n                    onClick={isPlaying ? pauseVisualization : startVisualization}\n                    disabled={array.length === 0 || (steps.length === 0 && !isPlaying)}\n                    className=\"flex-1 relative overflow-hidden group bg-gradient-to-r from-cyan-500 to-blue-500 hover:from-cyan-400 hover:to-blue-400 border-0 shadow-lg shadow-cyan-500/50 hover:shadow-cyan-400/70 transition-all duration-300\"\n                  >\n                    <motion.div\n                      className=\"flex items-center justify-center gap-2\"\n                      initial={false}\n                      animate={{ scale: isPlaying ? 1 : 1 }}\n                      whileTap={{ scale: 0.95 }}\n                    >\n                      <motion.div\n                        initial={false}\n                        animate={{ \n                          rotate: isPlaying ? 0 : 0,\n                          scale: isPlaying ? 1 : 1\n                        }}\n                        transition={{ duration: 0.3, ease: \"easeInOut\" }}\n                      >\n                        {isPlaying ? (\n                          <Pause className=\"w-4 h-4\" />\n                        ) : (\n                          <Play className=\"w-4 h-4\" />\n                        )}\n                      </motion.div>\n                      <span className=\"font-semibold\">\n                        {isPlaying ? 'Pause' : 'Play'}\n                      </span>\n                    </motion.div>\n                    <motion.div\n                      className=\"absolute inset-0 bg-gradient-to-r from-white/0 via-white/20 to-white/0\"\n                      initial={{ x: '-100%' }}\n                      animate={{ x: '100%' }}\n                      transition={{\n                        repeat: Infinity,\n                        duration: 2,\n                        ease: \"linear\"\n                      }}\n                    />\n                  </Button>\n                  <Button\n                    onClick={isPlaying ? pauseVisualization : startVisualization}\n                    className=\"flex-1 bg-gradient-to-r from-cyan-500 to-blue-500 hover:from-cyan-400 hover:to-blue-400 text-white font-semibold shadow-lg shadow-cyan-500/50 hover:shadow-cyan-400/70 transition-all duration-300 border-0\"\n                    disabled={array.length === 0 || (steps.length === 0 && !isPlaying)}\n                  >\n                    {isPlaying ? (\n                      <>\n                        <Pause className=\"w-4 h-4 mr-2\" />\n                        Pause\n                      </>\n                    ) : (\n                      <>\n                        <Play className=\"w-4 h-4 mr-2\" />\n                        {currentStep > 0 ? 'Resume' : 'Start'}\n                      </>\n                    )}\n                  </Button>\n                  \n                  <motion.div whileTap={{ rotate: 360 }} transition={{ duration: 0.6 }}>\n                    <Button\n                      onClick={resetVisualization}\n                      className=\"flex-1 bg-gradient-to-r from-purple-500 to-pink-500 hover:from-purple-400 hover:to-pink-400 text-white font-semibold shadow-lg shadow-purple-500/50 hover:shadow-purple-400/70 transition-all duration-300 border-0 relative overflow-hidden group\"\n                    >\n                      <motion.div\n                        className=\"absolute inset-0 bg-gradient-to-r from-purple-400 to-pink-400 opacity-0 group-hover:opacity-100 transition-opacity duration-300\"\n                        animate={{\n                          scale: [1, 1.2, 1],\n                          opacity: [0.5, 0.8, 0.5]\n                        }}\n                        transition={{\n                          duration: 2,\n                          repeat: Infinity,\n                          ease: \"easeInOut\"\n                        }}\n                      />\n                      <span className=\"relative z-10 flex items-center\">\n                        <RotateCcw className=\"w-4 h-4 mr-2\" />\n                        Reset\n                      </span>\n                    </Button>\n                  </motion.div>\n                </div>\n              </div>\n            </div>\n\n            {/* TODO:StatsPanel Real-time statistics panel showing comparisons, swaps, and progress */}\n          </div>\n\n          <div className=\"lg:col-span-3\">\n            <div className=\"bg-gray-900/50 backdrop-blur-lg border border-purple-500/30 rounded-xl p-8 shadow-2xl shadow-purple-500/20 min-h-[600px]\">\n              {array.length === 0 ? (\n                <motion.div\n                  initial={{ opacity: 0, scale: 0.8 }}\n                  animate={{ opacity: 1, scale: 1 }}\n                  className=\"absolute inset-0 flex flex-col items-center justify-center gap-6\"\n                >\n                  <motion.div\n                    animate={{\n                      rotate: [0, 360],\n                      scale: [1, 1.2, 1]\n                    }}\n                    transition={{\n                      duration: 3,\n                      repeat: Infinity,\n                      ease: \"easeInOut\"\n                    }}\n                  >\n                    <BarChart3 className=\"w-24 h-24 text-cyan-400\" style={{\n                      filter: 'drop-shadow(0 0 20px rgba(34, 211, 238, 0.8))'\n                    }} />\n                  </motion.div>\n                  <div className=\"text-center space-y-2\">\n                    <p className=\"text-2xl font-bold text-cyan-300\">Generate an array to begin</p>\n                    <p className=\"text-gray-400\">Click \"Generate Array\" to start visualizing</p>\n                  </div>\n                </motion.div>\n              ) : (\n                <div className=\"relative w-full h-full flex items-end justify-center gap-1 px-4\">\n                  {/* Comparison Indicators */}\n                  {steps.length > 0 && currentStep < steps.length && steps[currentStep].comparingIndices.length > 0 && (\n                    <motion.div\n                      className=\"absolute top-0 left-0 right-0 flex items-center justify-center\"\n                      initial={{ opacity: 0, y: -20 }}\n                      animate={{ opacity: 1, y: 0 }}\n                      exit={{ opacity: 0 }}\n                    >\n                      <div className=\"px-4 py-2 bg-yellow-500/20 border border-yellow-400/50 rounded-full backdrop-blur-sm\">\n                        <span className=\"text-yellow-300 text-sm font-semibold\">\n                          Comparing indices: {steps[currentStep].comparingIndices.join(', ')}\n                        </span>\n                      </div>\n                    </motion.div>\n                  )}\n\n                  {/* Swap Indicators */}\n                  {steps.length > 0 && currentStep < steps.length && steps[currentStep].swappingIndices.length > 0 && (\n                    <motion.div\n                      className=\"absolute top-12 left-0 right-0 flex items-center justify-center\"\n                      initial={{ opacity: 0, scale: 0.8 }}\n                      animate={{ opacity: 1, scale: 1 }}\n                      exit={{ opacity: 0 }}\n                    >\n                      <motion.div\n                        className=\"px-4 py-2 bg-pink-500/20 border border-pink-400/50 rounded-full backdrop-blur-sm\"\n                        animate={{\n                          boxShadow: [\n                            '0 0 20px rgba(236, 72, 153, 0.5)',\n                            '0 0 40px rgba(236, 72, 153, 0.8)',\n                            '0 0 20px rgba(236, 72, 153, 0.5)'\n                          ]\n                        }}\n                        transition={{ duration: 0.5, repeat: Infinity }}\n                      >\n                        <span className=\"text-pink-300 text-sm font-semibold\">\n                          Swapping indices: {steps[currentStep].swappingIndices.join(', ')}\n                        </span>\n                      </motion.div>\n                    </motion.div>\n                  )}\n\n                  {/* Animated Bars */}\n                  {(steps.length > 0 && currentStep < steps.length ? steps[currentStep].array : array).map((element, index) => {\n                    const maxValue = Math.max(...array.map(el => el.value));\n                    const heightPercentage = (element.value / maxValue) * 100;\n                    const barWidth = Math.max(8, Math.min(60, 800 / array.length));\n                    \n                    let barColor = NEON_COLORS[index % NEON_COLORS.length];\n                    let glowIntensity = 0.3;\n                    let shouldPulse = false;\n\n                    if (element.isSorted) {\n                      barColor = '#00ff00';\n                      glowIntensity = 0.6;\n                    } else if (element.isSwapping) {\n                      barColor = '#ff0066';\n                      glowIntensity = 1;\n                      shouldPulse = true;\n                    } else if (element.isComparing) {\n                      barColor = '#ffff00';\n                      glowIntensity = 0.8;\n                      shouldPulse = true;\n                    }\n\n                    return (\n                      <motion.div\n                        key={element.id}\n                        className=\"relative flex flex-col items-center justify-end\"\n                        style={{ width: barWidth }}\n                        initial={{ opacity: 0, y: 50 }}\n                        animate={{ opacity: 1, y: 0 }}\n                        transition={{ delay: index * 0.02 }}\n                      >\n                        {/* Swap Trail Effect */}\n                        {element.isSwapping && (\n                          <>\n                            <motion.div\n                              className=\"absolute inset-0 rounded-t-lg\"\n                              style={{\n                                background: `linear-gradient(to top, ${barColor}, transparent)`,\n                                filter: 'blur(20px)'\n                              }}\n                              animate={{\n                                opacity: [0.3, 0.8, 0.3],\n                                scale: [1, 1.3, 1]\n                              }}\n                              transition={{\n                                duration: 0.6,\n                                repeat: Infinity\n                              }}\n                            />\n                            {[...Array(3)].map((_, i) => (\n                              <motion.div\n                                key={i}\n                                className=\"absolute w-2 h-2 rounded-full\"\n                                style={{\n                                  backgroundColor: barColor,\n                                  boxShadow: `0 0 10px ${barColor}`\n                                }}\n                                initial={{ y: 0, opacity: 1 }}\n                                animate={{\n                                  y: [-20, -60],\n                                  opacity: [1, 0],\n                                  scale: [1, 0.5]\n                                }}\n                                transition={{\n                                  duration: 0.8,\n                                  repeat: Infinity,\n                                  delay: i * 0.2\n                                }}\n                              />\n                            ))}\n                          </>\n                        )}\n\n                        {/* Main Bar */}\n                        <motion.div\n                          className=\"w-full rounded-t-lg relative overflow-hidden\"\n                          style={{\n                            backgroundColor: barColor,\n                            boxShadow: `0 0 ${glowIntensity * 30}px ${barColor}, inset 0 0 ${glowIntensity * 20}px rgba(255, 255, 255, 0.3)`\n                          }}\n                          animate={{\n                            height: `${heightPercentage}%`,\n                            boxShadow: shouldPulse\n                              ? [\n                                  `0 0 ${glowIntensity * 30}px ${barColor}, inset 0 0 ${glowIntensity * 20}px rgba(255, 255, 255, 0.3)`,\n                                  `0 0 ${glowIntensity * 50}px ${barColor}, inset 0 0 ${glowIntensity * 30}px rgba(255, 255, 255, 0.5)`,\n                                  `0 0 ${glowIntensity * 30}px ${barColor}, inset 0 0 ${glowIntensity * 20}px rgba(255, 255, 255, 0.3)`\n                                ]\n                              : `0 0 ${glowIntensity * 30}px ${barColor}, inset 0 0 ${glowIntensity * 20}px rgba(255, 255, 255, 0.3)`\n                          }}\n                          transition={{\n                            height: { duration: 0.5, ease: \"easeInOut\" },\n                            boxShadow: shouldPulse ? { duration: 0.5, repeat: Infinity } : { duration: 0.3 }\n                          }}\n                        >\n                          {/* Shimmer Effect */}\n                          <motion.div\n                            className=\"absolute inset-0 bg-gradient-to-r from-transparent via-white/30 to-transparent\"\n                            animate={{\n                              x: ['-100%', '200%']\n                            }}\n                            transition={{\n                              duration: 2,\n                              repeat: Infinity,\n                              ease: \"linear\"\n                            }}\n                          />\n\n                          {/* Value Label */}\n                          {barWidth > 20 && (\n                            <motion.div\n                              className=\"absolute inset-0 flex items-center justify-center\"\n                              initial={{ opacity: 0 }}\n                              animate={{ opacity: 1 }}\n                              transition={{ delay: 0.3 }}\n                            >\n                              <span\n                                className=\"text-xs font-bold\"\n                                style={{\n                                  color: 'rgba(0, 0, 0, 0.8)',\n                                  textShadow: '0 0 5px rgba(255, 255, 255, 0.8)',\n                                  writingMode: heightPercentage < 20 ? 'horizontal-tb' : 'horizontal-tb'\n                                }}\n                              >\n                                {element.value}\n                              </span>\n                            </motion.div>\n                          )}\n                        </motion.div>\n\n                        {/* Comparison Indicator */}\n                        {element.isComparing && (\n                          <motion.div\n                            className=\"absolute -top-8 left-1/2 transform -translate-x-1/2\"\n                            initial={{ opacity: 0, y: 10 }}\n                            animate={{ opacity: 1, y: 0 }}\n                            exit={{ opacity: 0 }}\n                          >\n                            <motion.div\n                              animate={{\n                                y: [0, -5, 0]\n                              }}\n                              transition={{\n                                duration: 0.6,\n                                repeat: Infinity\n                              }}\n                            >\n                              <div className=\"w-0 h-0 border-l-4 border-r-4 border-b-8 border-l-transparent border-r-transparent border-b-yellow-400\"\n                                style={{\n                                  filter: 'drop-shadow(0 0 8px rgba(250, 204, 21, 0.8))'\n                                }}\n                              />\n                            </motion.div>\n                          </motion.div>\n                        )}\n\n                        {/* Sorted Checkmark */}\n                        {element.isSorted && (\n                          <motion.div\n                            className=\"absolute -top-6 left-1/2 transform -translate-x-1/2\"\n                            initial={{ scale: 0, rotate: -180 }}\n                            animate={{ scale: 1, rotate: 0 }}\n                            transition={{ type: \"spring\", stiffness: 200 }}\n                          >\n                            <div className=\"w-5 h-5 rounded-full bg-green-500 flex items-center justify-center\"\n                              style={{\n                                boxShadow: '0 0 15px rgba(34, 197, 94, 0.8)'\n                              }}\n                            >\n                              <svg className=\"w-3 h-3 text-white\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={3} d=\"M5 13l4 4L19 7\" />\n                              </svg>\n                            </div>\n                          </motion.div>\n                        )}\n                      </motion.div>\n                    );\n                  })}\n                </div>\n              )}\n              \n              <div className=\"relative h-full flex items-end justify-center gap-1\">\n                {array.length === 0 ? (\n                  <motion.div\n                    initial={{ opacity: 0, scale: 0.8 }}\n                    animate={{ opacity: 1, scale: 1 }}\n                    className=\"absolute inset-0 flex flex-col items-center justify-center gap-6\"\n                  >\n                    <motion.div\n                      animate={{\n                        rotate: [0, 360],\n                        scale: [1, 1.2, 1]\n                      }}\n                      transition={{\n                        duration: 3,\n                        repeat: Infinity,\n                        ease: \"easeInOut\"\n                      }}\n                    >\n                      <BarChart3 className=\"w-24 h-24 text-purple-400/50\" />\n                    </motion.div>\n                    <div className=\"text-center space-y-2\">\n                      <p className=\"text-2xl font-semibold text-purple-300\">\n                        Generate an array to begin\n                      </p>\n                      <p className=\"text-sm text-gray-400\">\n                        Click the generate button to create a random array\n                      </p>\n                    </div>\n                  </motion.div>\n                ) : (\n                  array.map((element, index) => {\n                    const maxValue = Math.max(...array.map(el => el.value));\n                    const heightPercentage = (element.value / maxValue) * 100;\n                    const colorIndex = index % NEON_COLORS.length;\n                    const baseColor = NEON_COLORS[colorIndex];\n\n                    return (\n                      <motion.div\n                        key={element.id}\n                        layout\n                        initial={{ height: 0, opacity: 0 }}\n                        animate={{\n                          height: `${heightPercentage}%`,\n                          opacity: 1,\n                          scale: element.isSwapping ? 1.1 : 1,\n                          y: element.isSwapping ? -20 : 0\n                        }}\n                        transition={{\n                          height: { duration: 0.5, ease: \"easeOut\" },\n                          scale: { duration: 0.3 },\n                          y: { duration: 0.3 },\n                          layout: { duration: 0.5, ease: \"easeInOut\" }\n                        }}\n                        className=\"relative flex-1 min-w-[4px] max-w-[60px] rounded-t-lg\"\n                        style={{\n                          background: element.isSorted\n                            ? `linear-gradient(to top, #00ff00, #00ff00)`\n                            : element.isSwapping\n                            ? `linear-gradient(to top, #ff0066, #ff00ff)`\n                            : element.isComparing\n                            ? `linear-gradient(to top, #ffff00, #ffa500)`\n                            : `linear-gradient(to top, ${baseColor}, ${baseColor}dd)`,\n                          boxShadow: element.isSorted\n                            ? `0 0 30px rgba(0, 255, 0, 0.8), 0 0 60px rgba(0, 255, 0, 0.4), inset 0 0 20px rgba(0, 255, 0, 0.3)`\n                            : element.isSwapping\n                            ? `0 0 40px rgba(255, 0, 102, 0.9), 0 0 80px rgba(255, 0, 255, 0.5), inset 0 0 30px rgba(255, 0, 102, 0.4)`\n                            : element.isComparing\n                            ? `0 0 35px rgba(255, 255, 0, 0.8), 0 0 70px rgba(255, 165, 0, 0.4), inset 0 0 25px rgba(255, 255, 0, 0.3)`\n                            : `0 0 20px ${baseColor}80, 0 0 40px ${baseColor}40, inset 0 0 15px ${baseColor}30`,\n                          border: element.isSorted\n                            ? '2px solid rgba(0, 255, 0, 0.6)'\n                            : element.isSwapping\n                            ? '2px solid rgba(255, 0, 102, 0.8)'\n                            : element.isComparing\n                            ? '2px solid rgba(255, 255, 0, 0.7)'\n                            : `1px solid ${baseColor}60`\n                        }}\n                      >\n                        {/* Glow overlay effect */}\n                        <motion.div\n                          className=\"absolute inset-0 rounded-t-lg\"\n                          animate={{\n                            opacity: element.isSwapping || element.isComparing ? [0.3, 0.7, 0.3] : 0.2\n                          }}\n                          transition={{\n                            duration: 0.8,\n                            repeat: element.isSwapping || element.isComparing ? Infinity : 0\n                          }}\n                          style={{\n                            background: `linear-gradient(to top, transparent, ${\n                              element.isSorted\n                                ? 'rgba(0, 255, 0, 0.4)'\n                                : element.isSwapping\n                                ? 'rgba(255, 0, 255, 0.5)'\n                                : element.isComparing\n                                ? 'rgba(255, 255, 0, 0.5)'\n                                : `${baseColor}40`\n                            })`\n                          }}\n                        />\n\n                        {/* Swap trail effect */}\n                        {element.isSwapping && (\n                          <>\n                            <motion.div\n                              className=\"absolute -top-8 left-1/2 -translate-x-1/2\"\n                              initial={{ opacity: 0, scale: 0 }}\n                              animate={{ opacity: [0, 1, 0], scale: [0.5, 1.5, 2] }}\n                              transition={{ duration: 0.6, repeat: Infinity }}\n                            >\n                              <div className=\"w-4 h-4 rounded-full bg-pink-500 blur-sm\" />\n                            </motion.div>\n                            <motion.div\n                              className=\"absolute inset-0 rounded-t-lg\"\n                              animate={{\n                                boxShadow: [\n                                  '0 0 20px rgba(255, 0, 102, 0.8)',\n                                  '0 0 60px rgba(255, 0, 255, 1)',\n                                  '0 0 20px rgba(255, 0, 102, 0.8)'\n                                ]\n                              }}\n                              transition={{ duration: 0.5, repeat: Infinity }}\n                            />\n                          </>\n                        )}\n\n                        {/* Comparison indicator */}\n                        {element.isComparing && (\n                          <motion.div\n                            className=\"absolute -top-6 left-1/2 -translate-x-1/2\"\n                            animate={{\n                              y: [-5, 5, -5],\n                              opacity: [0.7, 1, 0.7]\n                            }}\n                            transition={{ duration: 0.8, repeat: Infinity }}\n                          >\n                            <div className=\"w-0 h-0 border-l-[6px] border-l-transparent border-r-[6px] border-r-transparent border-t-[10px] border-t-yellow-400 drop-shadow-[0_0_8px_rgba(255,255,0,0.8)]\" />\n                          </motion.div>\n                        )}\n\n                        {/* Value label */}\n                        {array.length <= 50 && (\n                          <motion.div\n                            className=\"absolute -bottom-6 left-1/2 -translate-x-1/2 text-xs font-mono font-bold whitespace-nowrap\"\n                            initial={{ opacity: 0 }}\n                            animate={{ opacity: 0.8 }}\n                            style={{\n                              color: element.isSorted\n                                ? '#00ff00'\n                                : element.isSwapping\n                                ? '#ff00ff'\n                                : element.isComparing\n                                ? '#ffff00'\n                                : baseColor,\n                              textShadow: `0 0 10px ${\n                                element.isSorted\n                                  ? 'rgba(0, 255, 0, 0.8)'\n                                  : element.isSwapping\n                                  ? 'rgba(255, 0, 255, 0.8)'\n                                  : element.isComparing\n                                  ? 'rgba(255, 255, 0, 0.8)'\n                                  : `${baseColor}80`\n                              }`\n                            }}\n                          >\n                            {element.value}\n                          </motion.div>\n                        )}\n\n                        {/* Sorted checkmark */}\n                        {element.isSorted && (\n                          <motion.div\n                            className=\"absolute top-2 left-1/2 -translate-x-1/2\"\n                            initial={{ scale: 0, rotate: -180 }}\n                            animate={{ scale: 1, rotate: 0 }}\n                            transition={{ type: \"spring\", stiffness: 200, damping: 10 }}\n                          >\n                            <div className=\"w-3 h-3 rounded-full bg-green-400 flex items-center justify-center shadow-[0_0_15px_rgba(0,255,0,0.8)]\">\n                              <div className=\"w-1.5 h-1.5 border-b-2 border-r-2 border-gray-900 rotate-45 translate-y-[-1px]\" />\n                            </div>\n                          </motion.div>\n                        )}\n                      </motion.div>\n                    );\n                  })\n                )}\n              </div>\n            </div>\n\n            <motion.div\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ delay: 0.3 }}\n              className=\"mt-6 space-y-3\"\n            >\n              <div className=\"flex items-center justify-between text-sm\">\n                <span className=\"text-cyan-400 font-semibold flex items-center gap-2\">\n                  <BarChart3 className=\"w-4 h-4\" />\n                  Sorting Progress\n                </span>\n                <motion.span\n                  key={currentStep}\n                  initial={{ scale: 1.2, color: '#00ffff' }}\n                  animate={{ scale: 1, color: '#a5f3fc' }}\n                  className=\"text-cyan-300 font-mono font-bold\"\n                >\n                  {steps.length > 0 ? Math.round((currentStep / steps.length) * 100) : 0}%\n                </motion.span>\n              </div>\n              \n              <div className=\"relative h-4 bg-gray-800/50 rounded-full border border-cyan-500/30 overflow-hidden shadow-inner\">\n                <motion.div\n                  className=\"absolute inset-y-0 left-0 bg-gradient-to-r from-cyan-500 via-purple-500 to-pink-500 rounded-full shadow-[0_0_20px_rgba(0,255,255,0.6)]\"\n                  initial={{ width: '0%' }}\n                  animate={{ \n                    width: steps.length > 0 ? `${(currentStep / steps.length) * 100}%` : '0%'\n                  }}\n                  transition={{ duration: 0.3, ease: 'easeOut' }}\n                >\n                  <motion.div\n                    className=\"absolute inset-0 bg-gradient-to-r from-transparent via-white/30 to-transparent\"\n                    animate={{ x: ['-100%', '200%'] }}\n                    transition={{ \n                      duration: 1.5, \n                      repeat: Infinity, \n                      ease: 'linear',\n                      repeatDelay: 0\n                    }}\n                  />\n                </motion.div>\n                \n                {steps.length > 0 && currentStep > 0 && (\n                  <motion.div\n                    className=\"absolute inset-y-0 left-0 pointer-events-none\"\n                    style={{ width: `${(currentStep / steps.length) * 100}%` }}\n                  >\n                    <motion.div\n                      className=\"absolute right-0 top-1/2 -translate-y-1/2 w-3 h-3 bg-cyan-400 rounded-full shadow-[0_0_15px_rgba(0,255,255,0.8)]\"\n                      animate={{\n                        scale: [1, 1.3, 1],\n                        boxShadow: [\n                          '0 0 15px rgba(0,255,255,0.8)',\n                          '0 0 25px rgba(0,255,255,1)',\n                          '0 0 15px rgba(0,255,255,0.8)'\n                        ]\n                      }}\n                      transition={{ duration: 1, repeat: Infinity }}\n                    />\n                  </motion.div>\n                )}\n              </div>\n              \n              <div className=\"flex justify-between text-xs text-gray-400 font-mono\">\n                <span>Step {currentStep} / {steps.length}</span>\n                {steps.length > 0 && currentStep >= steps.length && (\n                  <motion.span\n                    initial={{ opacity: 0, scale: 0.8 }}\n                    animate={{ opacity: 1, scale: 1 }}\n                    className=\"text-green-400 font-semibold flex items-center gap-1\"\n                  >\n                    <motion.span\n                      animate={{ rotate: 360 }}\n                      transition={{ duration: 0.5 }}\n                    >\n                      \u2713\n                    </motion.span>\n                    Complete\n                  </motion.span>\n                )}\n              </div>\n            </motion.div>\n          </div>\n        </div>\n\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.8, delay: 0.4 }}\n          className=\"bg-gray-900/50 backdrop-blur-lg border border-cyan-500/30 rounded-xl p-6 shadow-2xl shadow-cyan-500/20\"\n        >\n          <div className=\"flex items-center gap-2 text-cyan-400 mb-6\">\n            <BarChart3 className=\"w-5 h-5\" />\n            <h3 className=\"font-bold text-lg\">Legend</h3>\n          </div>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n            {/* Comparing State */}\n            <motion.div\n              className=\"relative p-4 rounded-lg bg-gray-800/50 border border-yellow-500/50 overflow-hidden group hover:border-yellow-400 transition-all duration-300\"\n              whileHover={{ scale: 1.05 }}\n            >\n              <motion.div\n                className=\"absolute inset-0 bg-gradient-to-r from-yellow-500/0 via-yellow-500/20 to-yellow-500/0\"\n                animate={{ x: ['-100%', '200%'] }}\n                transition={{ duration: 2, repeat: Infinity, ease: 'linear' }}\n              />\n              <div className=\"relative space-y-3\">\n                <motion.div\n                  className=\"w-full h-16 bg-gradient-to-t from-yellow-500 to-yellow-300 rounded-lg\"\n                  animate={{\n                    boxShadow: [\n                      '0 0 20px rgba(234, 179, 8, 0.6)',\n                      '0 0 40px rgba(234, 179, 8, 0.8)',\n                      '0 0 20px rgba(234, 179, 8, 0.6)'\n                    ]\n                  }}\n                  transition={{ duration: 1.5, repeat: Infinity }}\n                />\n                <div className=\"text-center\">\n                  <div className=\"text-yellow-300 font-semibold text-sm\">Comparing</div>\n                  <div className=\"text-gray-400 text-xs mt-1\">Elements being compared</div>\n                </div>\n              </div>\n            </motion.div>\n\n            {/* Swapping State */}\n            <motion.div\n              className=\"relative p-4 rounded-lg bg-gray-800/50 border border-red-500/50 overflow-hidden group hover:border-red-400 transition-all duration-300\"\n              whileHover={{ scale: 1.05 }}\n            >\n              <motion.div\n                className=\"absolute inset-0 bg-gradient-to-r from-red-500/0 via-red-500/20 to-red-500/0\"\n                animate={{ x: ['-100%', '200%'] }}\n                transition={{ duration: 2, repeat: Infinity, ease: 'linear', delay: 0.5 }}\n              />\n              <div className=\"relative space-y-3\">\n                <motion.div\n                  className=\"w-full h-16 bg-gradient-to-t from-red-500 to-red-300 rounded-lg\"\n                  animate={{\n                    boxShadow: [\n                      '0 0 20px rgba(239, 68, 68, 0.6)',\n                      '0 0 40px rgba(239, 68, 68, 0.8)',\n                      '0 0 20px rgba(239, 68, 68, 0.6)'\n                    ],\n                    scale: [1, 1.05, 1]\n                  }}\n                  transition={{ duration: 1.5, repeat: Infinity }}\n                />\n                <div className=\"text-center\">\n                  <div className=\"text-red-300 font-semibold text-sm\">Swapping</div>\n                  <div className=\"text-gray-400 text-xs mt-1\">Elements being swapped</div>\n                </div>\n              </div>\n            </motion.div>\n\n            {/* Sorted State */}\n            <motion.div\n              className=\"relative p-4 rounded-lg bg-gray-800/50 border border-green-500/50 overflow-hidden group hover:border-green-400 transition-all duration-300\"\n              whileHover={{ scale: 1.05 }}\n            >\n              <motion.div\n                className=\"absolute inset-0 bg-gradient-to-r from-green-500/0 via-green-500/20 to-green-500/0\"\n                animate={{ x: ['-100%', '200%'] }}\n                transition={{ duration: 2, repeat: Infinity, ease: 'linear', delay: 1 }}\n              />\n              <div className=\"relative space-y-3\">\n                <motion.div\n                  className=\"w-full h-16 bg-gradient-to-t from-green-500 to-green-300 rounded-lg\"\n                  animate={{\n                    boxShadow: [\n                      '0 0 20px rgba(34, 197, 94, 0.6)',\n                      '0 0 40px rgba(34, 197, 94, 0.8)',\n                      '0 0 20px rgba(34, 197, 94, 0.6)'\n                    ]\n                  }}\n                  transition={{ duration: 1.5, repeat: Infinity }}\n                />\n                <div className=\"text-center\">\n                  <div className=\"text-green-300 font-semibold text-sm\">Sorted</div>\n                  <div className=\"text-gray-400 text-xs mt-1\">In final position</div>\n                </div>\n              </div>\n            </motion.div>\n\n            {/* Unsorted State */}\n            <motion.div\n              className=\"relative p-4 rounded-lg bg-gray-800/50 border border-cyan-500/50 overflow-hidden group hover:border-cyan-400 transition-all duration-300\"\n              whileHover={{ scale: 1.05 }}\n            >\n              <motion.div\n                className=\"absolute inset-0 bg-gradient-to-r from-cyan-500/0 via-cyan-500/20 to-cyan-500/0\"\n                animate={{ x: ['-100%', '200%'] }}\n                transition={{ duration: 2, repeat: Infinity, ease: 'linear', delay: 1.5 }}\n              />\n              <div className=\"relative space-y-3\">\n                <motion.div\n                  className=\"w-full h-16 bg-gradient-to-t from-cyan-500 to-cyan-300 rounded-lg\"\n                  animate={{\n                    boxShadow: [\n                      '0 0 20px rgba(6, 182, 212, 0.6)',\n                      '0 0 40px rgba(6, 182, 212, 0.8)',\n                      '0 0 20px rgba(6, 182, 212, 0.6)'\n                    ]\n                  }}\n                  transition={{ duration: 1.5, repeat: Infinity }}\n                />\n                <div className=\"text-center\">\n                  <div className=\"text-cyan-300 font-semibold text-sm\">Unsorted</div>\n                  <div className=\"text-gray-400 text-xs mt-1\">Awaiting sort</div>\n                </div>\n              </div>\n            </motion.div>\n          </div>\n\n          {/* Additional Info */}\n          <motion.div\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            transition={{ delay: 0.6 }}\n            className=\"mt-6 pt-6 border-t border-cyan-500/20\"\n          >\n            <div className=\"flex items-center justify-center gap-6 text-sm\">\n              <div className=\"flex items-center gap-2\">\n                <motion.div\n                  className=\"w-3 h-3 rounded-full bg-purple-500\"\n                  animate={{\n                    boxShadow: [\n                      '0 0 10px rgba(168, 85, 247, 0.6)',\n                      '0 0 20px rgba(168, 85, 247, 0.8)',\n                      '0 0 10px rgba(168, 85, 247, 0.6)'\n                    ]\n                  }}\n                  transition={{ duration: 2, repeat: Infinity }}\n                />\n                <span className=\"text-gray-400\">Neon glow indicates active state</span>\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <motion.div\n                  className=\"w-3 h-3 rounded-full bg-pink-500\"\n                  animate={{\n                    scale: [1, 1.2, 1]\n                  }}\n                  transition={{ duration: 1.5, repeat: Infinity }}\n                />\n                <span className=\"text-gray-400\">Pulse effect during operations</span>\n              </div>\n            </div>\n          </motion.div>\n        </motion.div>\n      </div>\n    </div>\n  );\n}",
    "error": null,
    "elapsed_time": 99.3981864452362,
    "success": true
  }
}