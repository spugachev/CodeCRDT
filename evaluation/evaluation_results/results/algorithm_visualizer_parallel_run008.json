{
  "prompt_id": "algorithm_visualizer",
  "prompt_name": "Algorithm Visualizer",
  "mode": "parallel",
  "run_number": 8,
  "timestamp": "2025-10-14T04:34:33.019803",
  "response_time": 114.3995590209961,
  "total_tokens": null,
  "response_content": "import { useState, useCallback, useEffect } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Slider } from '@/components/ui/slider';\nimport { Play, Pause, RotateCcw, Zap, BarChart3 } from 'lucide-react';\nimport { Activity, TrendingUp, Shuffle } from 'lucide-react';\nimport { motion } from 'framer-motion';\n\ninterface ArrayElement {\n  value: number;\n  id: string;\n  isComparing?: boolean;\n  isSwapping?: boolean;\n  isSorted?: boolean;\n}\n\ninterface AlgorithmStep {\n  array: ArrayElement[];\n  comparingIndices: number[];\n  swappingIndices: number[];\n  sortedIndices: number[];\n}\n\ntype AlgorithmType = 'bubble' | 'quick' | 'merge' | 'insertion';\n\nconst NEON_COLORS = [\n  '#00ffff',\n  '#ff00ff', \n  '#00ff00',\n  '#ffff00',\n  '#ff0066',\n  '#00ffaa'\n];\n\nconst mockAlgorithms = [\n  { id: 'bubble', name: 'Bubble Sort', complexity: 'O(n\u00b2)' },\n  { id: 'quick', name: 'Quick Sort', complexity: 'O(n log n)' },\n  { id: 'merge', name: 'Merge Sort', complexity: 'O(n log n)' },\n  { id: 'insertion', name: 'Insertion Sort', complexity: 'O(n\u00b2)' }\n];\n\nexport default function AlgorithmVisualizer() {\n  const [array, setArray] = useState<ArrayElement[]>([]);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [speed, setSpeed] = useState([50]);\n  const [arraySize, setArraySize] = useState([20]);\n  const [selectedAlgorithm, setSelectedAlgorithm] = useState<AlgorithmType>('bubble');\n  const [currentStep, setCurrentStep] = useState(0);\n  const [steps, setSteps] = useState<AlgorithmStep[]>([]);\n  const [comparisons, setComparisons] = useState(0);\n  const [swaps, setSwaps] = useState(0);\n  const [progress, setProgress] = useState(0);\n\n  const generateRandomArray = useCallback(() => {\n    const newArray: ArrayElement[] = Array.from({ length: arraySize[0] }, (_, index) => ({\n      value: Math.floor(Math.random() * 100) + 5,\n      id: `element-${Date.now()}-${index}`,\n      isComparing: false,\n      isSwapping: false,\n      isSorted: false\n    }));\n    setArray(newArray);\n    setSteps([]);\n    setCurrentStep(0);\n    setIsPlaying(false);\n  }, [arraySize]);\n\n  const resetVisualization = useCallback(() => {\n\n    setIsPlaying(false);\n    setCurrentStep(0);\n    setSteps([]);\n    generateRandomArray();\n  }, [generateRandomArray]);\n\n  // Animation effect for step-by-step visualization\n  const animateSteps = useCallback(() => {\n    if (currentStep >= steps.length) {\n      setIsPlaying(false);\n      return;\n    }\n\n    const step = steps[currentStep];\n    setArray(step.array);\n    setCurrentStep(prev => prev + 1);\n  }, [currentStep, steps]);\n\n  // Effect to handle animation timing\n  React.useEffect(() => {\n    if (!isPlaying || steps.length === 0) return;\n\n    const delay = 1000 - speed[0] * 9.5; // Convert speed (0-100) to delay (1000ms-50ms)\n    const timer = setTimeout(animateSteps, delay);\n\n    return () => clearTimeout(timer);\n  }, [isPlaying, animateSteps, speed]);\n  const startVisualization = useCallback(() => {\n    if (steps.length === 0) return;\n    if (currentStep >= steps.length) {\n      setCurrentStep(0);\n    }\n    setIsPlaying(true);\n    \n  }, [steps, speed, currentStep]);\n\n  const pauseVisualization = useCallback(() => {\n    setIsPlaying(false);\n  }, []);\n\n  const generateSortingSteps = useCallback((algorithm: AlgorithmType) => {\n        if (array.length === 0) return;\n\n    const steps: AlgorithmStep[] = [];\n    const arr = array.map(el => ({ ...el }));\n\n    const addStep = (\n      currentArray: ArrayElement[],\n      comparing: number[] = [],\n      swapping: number[] = [],\n      sorted: number[] = []\n    ) => {\n      steps.push({\n        array: currentArray.map(el => ({ ...el })),\n        comparingIndices: [...comparing],\n        swappingIndices: [...swapping],\n        sortedIndices: [...sorted]\n      });\n    };\n\n    if (algorithm === 'bubble') {\n      const sortedIndices: number[] = [];\n      for (let i = 0; i < arr.length; i++) {\n        for (let j = 0; j < arr.length - i - 1; j++) {\n          addStep(arr, [j, j + 1], [], sortedIndices);\n          \n          if (arr[j].value > arr[j + 1].value) {\n            addStep(arr, [], [j, j + 1], sortedIndices);\n            [arr[j], arr[j + 1]] = [arr[j + 1], arr[j]];\n            addStep(arr, [], [], sortedIndices);\n          }\n        }\n        sortedIndices.push(arr.length - i - 1);\n        addStep(arr, [], [], sortedIndices);\n      }\n    } else if (algorithm === 'quick') {\n      const sortedIndices: number[] = [];\n      \n      const partition = (low: number, high: number): number => {\n        const pivot = arr[high].value;\n        let i = low - 1;\n\n        addStep(arr, [high], [], sortedIndices);\n\n        for (let j = low; j < high; j++) {\n          addStep(arr, [j, high], [], sortedIndices);\n          \n          if (arr[j].value < pivot) {\n            i++;\n            if (i !== j) {\n              addStep(arr, [], [i, j], sortedIndices);\n              [arr[i], arr[j]] = [arr[j], arr[i]];\n              addStep(arr, [], [], sortedIndices);\n            }\n          }\n        }\n\n        addStep(arr, [], [i + 1, high], sortedIndices);\n        [arr[i + 1], arr[high]] = [arr[high], arr[i + 1]];\n        addStep(arr, [], [], sortedIndices);\n        \n        return i + 1;\n      };\n\n      const quickSort = (low: number, high: number) => {\n        if (low < high) {\n          const pi = partition(low, high);\n          sortedIndices.push(pi);\n          quickSort(low, pi - 1);\n          quickSort(pi + 1, high);\n        } else if (low === high) {\n          sortedIndices.push(low);\n          addStep(arr, [], [], sortedIndices);\n        }\n      };\n\n      quickSort(0, arr.length - 1);\n    } else if (algorithm === 'merge') {\n      const sortedIndices: number[] = [];\n\n      const merge = (left: number, mid: number, right: number) => {\n        const leftArr = arr.slice(left, mid + 1);\n        const rightArr = arr.slice(mid + 1, right + 1);\n        \n        let i = 0, j = 0, k = left;\n\n        while (i < leftArr.length && j < rightArr.length) {\n          addStep(arr, [left + i, mid + 1 + j], [], sortedIndices);\n          \n          if (leftArr[i].value <= rightArr[j].value) {\n            arr[k] = leftArr[i];\n            i++;\n          } else {\n            arr[k] = rightArr[j];\n            j++;\n          }\n          addStep(arr, [], [k], sortedIndices);\n          k++;\n        }\n\n        while (i < leftArr.length) {\n          arr[k] = leftArr[i];\n          addStep(arr, [], [k], sortedIndices);\n          i++;\n          k++;\n        }\n\n        while (j < rightArr.length) {\n          arr[k] = rightArr[j];\n          addStep(arr, [], [k], sortedIndices);\n          j++;\n          k++;\n        }\n\n        for (let idx = left; idx <= right; idx++) {\n          if (!sortedIndices.includes(idx)) {\n            sortedIndices.push(idx);\n          }\n        }\n        addStep(arr, [], [], sortedIndices);\n      };\n\n      const mergeSort = (left: number, right: number) => {\n        if (left < right) {\n          const mid = Math.floor((left + right) / 2);\n          mergeSort(left, mid);\n          mergeSort(mid + 1, right);\n          merge(left, mid, right);\n        }\n      };\n\n      mergeSort(0, arr.length - 1);\n    } else if (algorithm === 'insertion') {\n      const sortedIndices: number[] = [0];\n      addStep(arr, [], [], sortedIndices);\n\n      for (let i = 1; i < arr.length; i++) {\n        const key = arr[i];\n        let j = i - 1;\n\n        addStep(arr, [i], [], sortedIndices);\n\n        while (j >= 0 && arr[j].value > key.value) {\n          addStep(arr, [j, j + 1], [], sortedIndices);\n          addStep(arr, [], [j, j + 1], sortedIndices);\n          arr[j + 1] = arr[j];\n          addStep(arr, [], [], sortedIndices);\n          j--;\n        }\n\n        arr[j + 1] = key;\n        sortedIndices.push(i);\n        addStep(arr, [], [], sortedIndices);\n      }\n    }\n\n    setSteps(steps);\n    setCurrentStep(0);\n  }, [array]);\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-gray-900 via-purple-900 to-gray-900 p-8\">\n      <div className=\"max-w-7xl mx-auto space-y-8\">\n        <motion.div\n          initial={{ opacity: 0, y: -20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.8 }}\n          className=\"text-center space-y-4\"\n        >\n          <motion.h1\n            className=\"text-6xl font-bold bg-gradient-to-r from-cyan-400 via-purple-400 to-pink-400 bg-clip-text text-transparent\"\n            animate={{\n              textShadow: [\n                '0 0 20px rgba(0, 255, 255, 0.5)',\n                '0 0 40px rgba(255, 0, 255, 0.5)',\n                '0 0 20px rgba(0, 255, 255, 0.5)'\n              ]\n            }}\n            transition={{ duration: 2, repeat: Infinity }}\n          >\n            Algorithm Visualizer\n          </motion.h1>\n          \n          <div className=\"flex items-center justify-center gap-4\">\n            <motion.div\n              initial={{ scale: 0 }}\n              animate={{ scale: 1 }}\n              transition={{ delay: 0.3, type: 'spring' }}\n              className=\"flex items-center gap-2 px-6 py-3 bg-gray-800/50 backdrop-blur-sm rounded-full border border-cyan-500/30\"\n            >\n              <Zap className=\"w-5 h-5 text-cyan-400\" />\n              <span className=\"text-xl font-semibold text-cyan-300\">\n                {mockAlgorithms.find(a => a.id === selectedAlgorithm)?.name}\n              </span>\n            </motion.div>\n            \n            <motion.div\n              initial={{ scale: 0 }}\n              animate={{ scale: 1 }}\n              transition={{ delay: 0.5, type: 'spring' }}\n              className=\"flex items-center gap-2 px-4 py-2 bg-purple-900/50 backdrop-blur-sm rounded-full border border-purple-500/50\"\n              style={{\n                boxShadow: '0 0 20px rgba(168, 85, 247, 0.4)'\n              }}\n            >\n              <BarChart3 className=\"w-4 h-4 text-purple-300\" />\n              <span className=\"text-sm font-mono text-purple-200\">\n                {mockAlgorithms.find(a => a.id === selectedAlgorithm)?.complexity}\n              </span>\n            </motion.div>\n          </div>\n        </motion.div></parameter>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-6\">\n          <div className=\"lg:col-span-1 space-y-6\">\n            <motion.div\n              initial={{ opacity: 0, x: -50 }}\n              animate={{ opacity: 1, x: 0 }}\n              transition={{ duration: 0.6 }}\n              className=\"bg-gray-900/50 backdrop-blur-lg border border-cyan-500/30 rounded-xl p-6 shadow-[0_0_30px_rgba(0,255,255,0.3)] hover:shadow-[0_0_50px_rgba(0,255,255,0.5)] transition-all duration-300\"\n            >\n              <div className=\"space-y-6\">\n                {/* Algorithm Selection */}\n                <div className=\"space-y-3\">\n                  <h3 className=\"text-cyan-400 font-semibold text-sm uppercase tracking-wider flex items-center gap-2\">\n                    <Zap className=\"w-4 h-4\" />\n                    Algorithm\n                  </h3>\n                  <div className=\"space-y-2\">\n                    {mockAlgorithms.map((algo) => (\n                      <button\n                        key={algo.id}\n                        onClick={() => setSelectedAlgorithm(algo.id as AlgorithmType)}\n                        disabled={isPlaying}\n                        className={`w-full text-left px-4 py-3 rounded-lg border transition-all duration-300 ${\n                          selectedAlgorithm === algo.id\n                            ? 'bg-cyan-500/20 border-cyan-400 shadow-[0_0_20px_rgba(0,255,255,0.4)] text-cyan-300'\n                            : 'bg-gray-800/50 border-gray-700 hover:border-cyan-500/50 text-gray-400 hover:text-cyan-300'\n                        } disabled:opacity-50 disabled:cursor-not-allowed`}\n                      >\n                        <div className=\"font-medium\">{algo.name}</div>\n                        <div className=\"text-xs opacity-70\">{algo.complexity}</div>\n                      </button>\n                    ))}\n                  </div>\n                </div>\n\n                {/* Speed Control */}\n                <div className=\"space-y-3\">\n                  <h3 className=\"text-purple-400 font-semibold text-sm uppercase tracking-wider flex items-center gap-2\">\n                    <Zap className=\"w-4 h-4\" />\n                    Speed\n                  </h3>\n                  <div className=\"space-y-2\">\n                    <Slider\n                      value={speed}\n                      onValueChange={setSpeed}\n                      min={10}\n                      max={100}\n                      step={10}\n                      className=\"cursor-pointer\"\n                      disabled={isPlaying}\n                    />\n                    <div className=\"flex justify-between text-xs text-gray-500\">\n                      <span>Slow</span>\n                      <span className=\"text-purple-400 font-semibold\">{speed[0]}%</span>\n                      <span>Fast</span>\n                    </div>\n                  </div>\n                </div>\n\n                {/* Array Size Control */}\n                <div className=\"space-y-3\">\n                  <h3 className=\"text-pink-400 font-semibold text-sm uppercase tracking-wider flex items-center gap-2\">\n                    <BarChart3 className=\"w-4 h-4\" />\n                    Array Size\n                  </h3>\n                  <div className=\"space-y-2\">\n                    <Slider\n                      value={arraySize}\n                      onValueChange={setArraySize}\n                      min={5}\n                      max={50}\n                      step={5}\n                      className=\"cursor-pointer\"\n                      disabled={isPlaying}\n                    />\n                    <div className=\"flex justify-between text-xs text-gray-500\">\n                      <span>5</span>\n                      <span className=\"text-pink-400 font-semibold\">{arraySize[0]}</span>\n                      <span>50</span>\n                    </div>\n                  </div>\n                </div>\n\n                {/* Control Buttons */}\n                <div className=\"space-y-3 pt-4 border-t border-gray-700/50\">\n                  <Button\n                    onClick={isPlaying ? pauseVisualization : startVisualization}\n                    disabled={steps.length === 0 || (currentStep >= steps.length && !isPlaying)}\n                    className=\"w-full bg-gradient-to-r from-cyan-500 to-blue-500 hover:from-cyan-400 hover:to-blue-400 text-white font-semibold py-6 rounded-lg shadow-[0_0_20px_rgba(0,255,255,0.5)] hover:shadow-[0_0_30px_rgba(0,255,255,0.7)] transition-all duration-300 disabled:opacity-50 disabled:cursor-not-allowed\"\n                  >\n                    {isPlaying ? (\n                      <>\n                        <Pause className=\"w-5 h-5 mr-2\" />\n                        Pause\n                      </>\n                    ) : (\n                      <>\n                        <Play className=\"w-5 h-5 mr-2\" />\n                        {currentStep >= steps.length ? 'Start' : 'Resume'}\n                      </>\n                    )}\n                  </Button>\n\n                  <Button\n                    onClick={resetVisualization}\n                    disabled={isPlaying}\n                    className=\"w-full bg-gradient-to-r from-purple-500 to-pink-500 hover:from-purple-400 hover:to-pink-400 text-white font-semibold py-6 rounded-lg shadow-[0_0_20px_rgba(255,0,255,0.5)] hover:shadow-[0_0_30px_rgba(255,0,255,0.7)] transition-all duration-300 disabled:opacity-50 disabled:cursor-not-allowed\"\n                  >\n                    <RotateCcw className=\"w-5 h-5 mr-2\" />\n                    Reset\n                  </Button>\n\n                  <Button\n                    onClick={() => {\n                      generateRandomArray();\n                      generateSortingSteps(selectedAlgorithm);\n                    }}\n                    disabled={isPlaying}\n                    className=\"w-full bg-gradient-to-r from-green-500 to-emerald-500 hover:from-green-400 hover:to-emerald-400 text-white font-semibold py-6 rounded-lg shadow-[0_0_20px_rgba(0,255,170,0.5)] hover:shadow-[0_0_30px_rgba(0,255,170,0.7)] transition-all duration-300 disabled:opacity-50 disabled:cursor-not-allowed\"\n                  >\n                    <BarChart3 className=\"w-5 h-5 mr-2\" />\n                    Generate New\n                  </Button>\n                </div>\n\n                {/* Progress Indicator */}\n                {steps.length > 0 && (\n                  <div className=\"space-y-2 pt-4 border-t border-gray-700/50\">\n                    <div className=\"flex justify-between text-xs text-gray-400\">\n                      <span>Progress</span>\n                      <span className=\"text-cyan-400 font-semibold\">\n                        {currentStep} / {steps.length}\n                      </span>\n                    </div>\n                    <div className=\"w-full h-2 bg-gray-800 rounded-full overflow-hidden\">\n                      <motion.div\n                        className=\"h-full bg-gradient-to-r from-cyan-500 via-purple-500 to-pink-500\"\n                        initial={{ width: 0 }}\n                        animate={{ width: `${(currentStep / steps.length) * 100}%` }}\n                        transition={{ duration: 0.3 }}\n                      />\n                    </div>\n                  </div>\n                )}\n              </div>\n            </motion.div>\n            \n            <div className=\"bg-gray-900/50 backdrop-blur-lg border border-cyan-500/30 rounded-xl p-6 shadow-2xl shadow-cyan-500/20\">\n              <div className=\"space-y-6\">\n                <div>\n                  <h3 className=\"text-sm font-semibold text-cyan-400 mb-3 flex items-center gap-2\">\n                    <Zap className=\"w-4 h-4\" />\n                    Algorithm\n                  </h3>\n                  <div className=\"grid grid-cols-1 gap-2\">\n                    {mockAlgorithms.map((algo) => (\n                      <motion.button\n                        key={algo.id}\n                        onClick={() => setSelectedAlgorithm(algo.id as AlgorithmType)}\n                        className={`relative p-3 rounded-lg border transition-all duration-300 text-left ${\n                          selectedAlgorithm === algo.id\n                            ? 'bg-cyan-500/20 border-cyan-400 shadow-lg shadow-cyan-500/50'\n                            : 'bg-gray-800/50 border-gray-700 hover:border-cyan-500/50 hover:shadow-md hover:shadow-cyan-500/30'\n                        }`}\n                        whileHover={{ scale: 1.02 }}\n                        whileTap={{ scale: 0.98 }}\n                      >\n                        <div className=\"flex flex-col gap-1\">\n                          <span className={`text-sm font-medium ${\n                            selectedAlgorithm === algo.id ? 'text-cyan-300' : 'text-gray-300'\n                          }`}>\n                            {algo.name}\n                          </span>\n                          <span className={`text-xs ${\n                            selectedAlgorithm === algo.id ? 'text-cyan-400/80' : 'text-gray-500'\n                          }`}>\n                            {algo.complexity}\n                          </span>\n                        </div>\n                        {selectedAlgorithm === algo.id && (\n                          <motion.div\n                            className=\"absolute inset-0 rounded-lg border-2 border-cyan-400\"\n                            layoutId=\"algorithmSelector\"\n                            transition={{ type: \"spring\", stiffness: 300, damping: 30 }}\n                          />\n                        )}\n                      </motion.button>\n                    ))}\n                  </div>\n                </div></parameter>\n</invoke>\n\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <label className=\"text-cyan-400 text-sm font-medium flex items-center gap-2\">\n                      <Zap className=\"w-4 h-4\" />\n                      Speed\n                    </label>\n                    <span className=\"text-cyan-300 text-xs\">{speed[0]}ms</span>\n                  </div>\n                  <Slider\n                    value={speed}\n                    onValueChange={setSpeed}\n                    min={10}\n                    max={200}\n                    step={10}\n                    className=\"[&_[role=slider]]:bg-cyan-400 [&_[role=slider]]:border-cyan-300 [&_[role=slider]]:shadow-[0_0_15px_rgba(34,211,238,0.8)] [&_[role=slider]]:hover:shadow-[0_0_25px_rgba(34,211,238,1)] [&_[role=slider]]:transition-shadow [&_.relative]:bg-gray-700/50 [&_.relative]:border [&_.relative]:border-cyan-500/30 [&_.bg-primary]:bg-gradient-to-r [&_.bg-primary]:from-cyan-500 [&_.bg-primary]:to-purple-500 [&_.bg-primary]:shadow-[0_0_10px_rgba(34,211,238,0.5)]\"\n                  />\n                </div>\n\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <label className=\"text-cyan-400 text-sm font-medium flex items-center gap-2\">\n                      <BarChart3 className=\"w-4 h-4\" />\n                      Array Size\n                    </label>\n                    <span className=\"text-cyan-300 text-xs\">{arraySize[0]}</span>\n                  </div>\n                  <Slider\n                    value={arraySize}\n                    onValueChange={setArraySize}\n                    min={5}\n                    max={100}\n                    step={5}\n                    className=\"[&_[role=slider]]:bg-gradient-to-r [&_[role=slider]]:from-purple-500 [&_[role=slider]]:to-pink-500 [&_[role=slider]]:border-2 [&_[role=slider]]:border-purple-300 [&_[role=slider]]:shadow-lg [&_[role=slider]]:shadow-purple-500/50 [&_[role=slider]]:transition-all [&_[role=slider]]:hover:shadow-purple-500/80 [&_[role=slider]]:hover:scale-110 [&>span]:bg-gradient-to-r [&>span]:from-purple-500/30 [&>span]:to-pink-500/30 [&>span]:h-2 [&>span]:rounded-full\"\n                  />\n                </div>\n\n                <div className=\"flex gap-3 pt-4\">\n                  <motion.button\n                    onClick={isPlaying ? pauseVisualization : startVisualization}\n                    disabled={array.length === 0 || (steps.length === 0 && !isPlaying)}\n                    whileHover={{ scale: 1.05 }}\n                    whileTap={{ scale: 0.95 }}\n                    className=\"flex-1 relative group overflow-hidden rounded-lg bg-gradient-to-r from-cyan-500 to-purple-500 p-[2px] disabled:opacity-50 disabled:cursor-not-allowed\"\n                  >\n                    <div className=\"relative bg-gray-900 rounded-lg px-6 py-3 flex items-center justify-center gap-2 group-hover:bg-gray-900/80 transition-all duration-300\">\n                      <motion.div\n                        animate={{\n                          rotate: isPlaying ? 0 : 0,\n                          scale: isPlaying ? 1 : 1\n                        }}\n                        transition={{ duration: 0.3 }}\n                      >\n                        {isPlaying ? (\n                          <Pause className=\"w-5 h-5 text-cyan-400\" />\n                        ) : (\n                          <Play className=\"w-5 h-5 text-cyan-400\" />\n                        )}\n                      </motion.div>\n                      <span className=\"font-semibold text-cyan-300\">\n                        {isPlaying ? 'Pause' : 'Play'}\n                      </span>\n                      \n                      <motion.div\n                        className=\"absolute inset-0 bg-gradient-to-r from-cyan-500/20 to-purple-500/20 rounded-lg\"\n                        animate={{\n                          opacity: [0.5, 1, 0.5],\n                          scale: [1, 1.02, 1]\n                        }}\n                        transition={{\n                          duration: 2,\n                          repeat: Infinity,\n                          ease: \"easeInOut\"\n                        }}\n                      />\n                    </div>\n                    \n                    <motion.div\n                      className=\"absolute inset-0 rounded-lg opacity-0 group-hover:opacity-100 transition-opacity duration-300\"\n                      style={{\n                        boxShadow: '0 0 20px rgba(0, 255, 255, 0.6), 0 0 40px rgba(168, 85, 247, 0.4)'\n                      }}\n                    />\n                  </motion.button>\n                  <motion.div className=\"flex gap-3\">\n                    <Button\n                      onClick={isPlaying ? pauseVisualization : startVisualization}\n                      disabled={array.length === 0 || (steps.length === 0 && !isPlaying)}\n                      className=\"flex-1 bg-gradient-to-r from-cyan-500 to-blue-500 hover:from-cyan-400 hover:to-blue-400 text-white font-semibold shadow-lg shadow-cyan-500/50 hover:shadow-cyan-500/80 transition-all duration-300 border-0\"\n                      whileHover={{ scale: 1.05 }}\n                      whileTap={{ scale: 0.95 }}\n                    >\n                      {isPlaying ? (\n                        <>\n                          <Pause className=\"w-4 h-4 mr-2\" />\n                          Pause\n                        </>\n                      ) : (\n                        <>\n                          <Play className=\"w-4 h-4 mr-2\" />\n                          {currentStep > 0 ? 'Resume' : 'Start'}\n                        </>\n                      )}\n                    </Button>\n                    \n                    <motion.div whileHover={{ rotate: 180 }} transition={{ duration: 0.5 }}>\n                      <Button\n                        onClick={resetVisualization}\n                        disabled={isPlaying}\n                        className=\"bg-gradient-to-r from-purple-500 to-pink-500 hover:from-purple-400 hover:to-pink-400 text-white font-semibold shadow-lg shadow-purple-500/50 hover:shadow-purple-500/80 transition-all duration-300 border-0\"\n                        whileTap={{ scale: 0.9 }}\n                      >\n                        <RotateCcw className=\"w-4 h-4\" />\n                      </Button>\n                    </motion.div>\n                    \n                    <Button\n                      onClick={generateRandomArray}\n                      disabled={isPlaying}\n                      className=\"flex-1 bg-gradient-to-r from-pink-500 to-rose-500 hover:from-pink-400 hover:to-rose-400 text-white font-semibold shadow-lg shadow-pink-500/50 hover:shadow-pink-500/80 transition-all duration-300 border-0\"\n                      whileHover={{ scale: 1.05 }}\n                      whileTap={{ scale: 0.95 }}\n                    >\n                      <Zap className=\"w-4 h-4 mr-2\" />\n                      Generate\n                    </Button>\n                  </motion.div>\n                </div>\n              </div>\n            </div>\n\n            <motion.div\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ duration: 0.6, delay: 0.2 }}\n              className=\"bg-gray-900/50 backdrop-blur-lg border border-purple-500/30 rounded-xl p-6 shadow-[0_0_30px_rgba(168,85,247,0.3)] hover:shadow-[0_0_50px_rgba(168,85,247,0.5)] transition-all duration-300\"\n            >\n              <h3 className=\"text-purple-400 font-semibold text-sm uppercase tracking-wider flex items-center gap-2 mb-4\">\n                <Activity className=\"w-4 h-4\" />\n                Statistics\n              </h3>\n              \n              <div className=\"space-y-4\">\n                {/* Comparisons */}\n                <motion.div\n                  className=\"bg-gradient-to-r from-cyan-900/30 to-cyan-800/20 border border-cyan-500/40 rounded-lg p-4 shadow-[0_0_15px_rgba(6,182,212,0.2)]\"\n                  whileHover={{ scale: 1.02, boxShadow: '0 0 25px rgba(6,182,212,0.4)' }}\n                  transition={{ type: 'spring', stiffness: 300 }}\n                >\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center gap-3\">\n                      <div className=\"p-2 bg-cyan-500/20 rounded-lg border border-cyan-400/50 shadow-[0_0_10px_rgba(6,182,212,0.5)]\">\n                        <TrendingUp className=\"w-5 h-5 text-cyan-400\" />\n                      </div>\n                      <div>\n                        <div className=\"text-xs text-cyan-300/70 uppercase tracking-wide\">Comparisons</div>\n                        <motion.div\n                          key={comparisons}\n                          initial={{ scale: 1.3, color: '#22d3ee' }}\n                          animate={{ scale: 1, color: '#67e8f9' }}\n                          className=\"text-2xl font-bold text-cyan-300 font-mono\"\n                        >\n                          {comparisons}\n                        </motion.div>\n                      </div>\n                    </div>\n                  </div>\n                </motion.div>\n\n                {/* Swaps */}\n                <motion.div\n                  className=\"bg-gradient-to-r from-purple-900/30 to-purple-800/20 border border-purple-500/40 rounded-lg p-4 shadow-[0_0_15px_rgba(168,85,247,0.2)]\"\n                  whileHover={{ scale: 1.02, boxShadow: '0 0 25px rgba(168,85,247,0.4)' }}\n                  transition={{ type: 'spring', stiffness: 300 }}\n                >\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center gap-3\">\n                      <div className=\"p-2 bg-purple-500/20 rounded-lg border border-purple-400/50 shadow-[0_0_10px_rgba(168,85,247,0.5)]\">\n                        <Shuffle className=\"w-5 h-5 text-purple-400\" />\n                      </div>\n                      <div>\n                        <div className=\"text-xs text-purple-300/70 uppercase tracking-wide\">Swaps</div>\n                        <motion.div\n                          key={swaps}\n                          initial={{ scale: 1.3, color: '#a855f7' }}\n                          animate={{ scale: 1, color: '#c084fc' }}\n                          className=\"text-2xl font-bold text-purple-300 font-mono\"\n                        >\n                          {swaps}\n                        </motion.div>\n                      </div>\n                    </div>\n                  </div>\n                </motion.div>\n\n                {/* Progress */}\n                <motion.div\n                  className=\"bg-gradient-to-r from-pink-900/30 to-pink-800/20 border border-pink-500/40 rounded-lg p-4 shadow-[0_0_15px_rgba(236,72,153,0.2)]\"\n                  whileHover={{ scale: 1.02, boxShadow: '0 0 25px rgba(236,72,153,0.4)' }}\n                  transition={{ type: 'spring', stiffness: 300 }}\n                >\n                  <div className=\"space-y-3\">\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center gap-3\">\n                        <div className=\"p-2 bg-pink-500/20 rounded-lg border border-pink-400/50 shadow-[0_0_10px_rgba(236,72,153,0.5)]\">\n                          <BarChart3 className=\"w-5 h-5 text-pink-400\" />\n                        </div>\n                        <div>\n                          <div className=\"text-xs text-pink-300/70 uppercase tracking-wide\">Progress</div>\n                          <motion.div\n                            key={progress}\n                            initial={{ scale: 1.3, color: '#ec4899' }}\n                            animate={{ scale: 1, color: '#f9a8d4' }}\n                            className=\"text-2xl font-bold text-pink-300 font-mono\"\n                          >\n                            {progress}%\n                          </motion.div>\n                        </div>\n                      </div>\n                    </div>\n                    \n                    {/* Progress Bar */}\n                    <div className=\"relative h-2 bg-gray-800/50 rounded-full overflow-hidden border border-pink-500/30\">\n                      <motion.div\n                        className=\"absolute inset-y-0 left-0 bg-gradient-to-r from-pink-500 via-purple-500 to-cyan-500 rounded-full shadow-[0_0_15px_rgba(236,72,153,0.8)]\"\n                        initial={{ width: 0 }}\n                        animate={{ width: `${progress}%` }}\n                        transition={{ duration: 0.5, ease: 'easeOut' }}\n                      />\n                      <motion.div\n                        className=\"absolute inset-y-0 left-0 bg-gradient-to-r from-transparent via-white/30 to-transparent\"\n                        animate={{\n                          x: ['-100%', '200%']\n                        }}\n                        transition={{\n                          duration: 1.5,\n                          repeat: Infinity,\n                          ease: 'linear'\n                        }}\n                        style={{ width: '50%' }}\n                      />\n                    </div>\n                  </div>\n                </motion.div>\n\n                {/* Status Indicator */}\n                <motion.div\n                  className=\"flex items-center justify-center gap-2 p-3 bg-gray-800/50 rounded-lg border border-gray-700\"\n                  animate={{\n                    borderColor: isPlaying \n                      ? ['rgba(6,182,212,0.5)', 'rgba(168,85,247,0.5)', 'rgba(6,182,212,0.5)']\n                      : 'rgba(75,85,99,1)'\n                  }}\n                  transition={{ duration: 2, repeat: Infinity }}\n                >\n                  <motion.div\n                    className={`w-2 h-2 rounded-full ${isPlaying ? 'bg-cyan-400' : 'bg-gray-500'}`}\n                    animate={{\n                      boxShadow: isPlaying\n                        ? [\n                            '0 0 5px rgba(6,182,212,0.8)',\n                            '0 0 15px rgba(6,182,212,1)',\n                            '0 0 5px rgba(6,182,212,0.8)'\n                          ]\n                        : '0 0 0px rgba(75,85,99,0)'\n                    }}\n                    transition={{ duration: 1, repeat: Infinity }}\n                  />\n                  <span className={`text-xs font-medium ${isPlaying ? 'text-cyan-300' : 'text-gray-400'}`}>\n                    {isPlaying ? 'Sorting...' : 'Ready'}\n                  </span>\n                </motion.div>\n              </div>\n            </motion.div>\n          </div>\n\n          <div className=\"lg:col-span-3\">\n            <div className=\"bg-gray-900/50 backdrop-blur-lg border border-purple-500/30 rounded-xl p-8 shadow-2xl shadow-purple-500/20 min-h-[600px]\">\n                            {array.length === 0 ? (\n                <motion.div\n                  initial={{ opacity: 0, scale: 0.8 }}\n                  animate={{ opacity: 1, scale: 1 }}\n                  className=\"absolute inset-0 flex flex-col items-center justify-center gap-6\"\n                >\n                  <motion.div\n                    animate={{\n                      rotate: [0, 360],\n                      scale: [1, 1.2, 1]\n                    }}\n                    transition={{\n                      duration: 3,\n                      repeat: Infinity,\n                      ease: \"easeInOut\"\n                    }}\n                  >\n                    <BarChart3 className=\"w-24 h-24 text-cyan-400/50\" />\n                  </motion.div>\n                  <div className=\"text-center space-y-2\">\n                    <p className=\"text-2xl font-semibold text-cyan-300\">\n                      Generate an array to begin\n                    </p>\n                    <p className=\"text-gray-500\">\n                      Click the reset button to create a random array\n                    </p>\n                  </div>\n                </motion.div>\n              ) : (\n                <div className=\"relative w-full h-[500px] flex items-end justify-center gap-1 px-4\">\n                  {array.map((element, index) => {\n                    const isComparing = steps[currentStep]?.comparingIndices.includes(index);\n                    const isSwapping = steps[currentStep]?.swappingIndices.includes(index);\n                    const isSorted = steps[currentStep]?.sortedIndices.includes(index);\n                    \n                    const maxValue = Math.max(...array.map(el => el.value));\n                    const heightPercentage = (element.value / maxValue) * 100;\n                    \n                    let barColor = NEON_COLORS[index % NEON_COLORS.length];\n                    let glowColor = barColor;\n                    let glowIntensity = 0.3;\n                    \n                    if (isSorted) {\n                      barColor = '#00ff00';\n                      glowColor = '#00ff00';\n                      glowIntensity = 0.8;\n                    } else if (isSwapping) {\n                      barColor = '#ff0066';\n                      glowColor = '#ff0066';\n                      glowIntensity = 1;\n                    } else if (isComparing) {\n                      barColor = '#ffff00';\n                      glowColor = '#ffff00';\n                      glowIntensity = 0.7;\n                    }\n                    \n                    return (\n                      <motion.div\n                        key={element.id}\n                        className=\"relative flex-1 min-w-[4px] max-w-[60px] rounded-t-lg\"\n                        initial={{ height: 0, opacity: 0 }}\n                        animate={{\n                          height: `${heightPercentage}%`,\n                          opacity: 1,\n                          backgroundColor: barColor,\n                          boxShadow: [\n                            `0 0 ${glowIntensity * 20}px ${glowColor}`,\n                            `0 0 ${glowIntensity * 40}px ${glowColor}`,\n                            `0 0 ${glowIntensity * 20}px ${glowColor}`\n                          ],\n                          scale: isSwapping ? [1, 1.1, 1] : isComparing ? 1.05 : 1,\n                          y: isSwapping ? [-10, 0] : 0\n                        }}\n                        transition={{\n                          height: { duration: 0.3, ease: \"easeOut\" },\n                          backgroundColor: { duration: 0.2 },\n                          boxShadow: { duration: 0.5, repeat: isComparing || isSwapping ? Infinity : 0 },\n                          scale: { duration: 0.3 },\n                          y: { duration: 0.4, ease: \"easeInOut\" }\n                        }}\n                        style={{\n                          background: `linear-gradient(to top, ${barColor}, ${barColor}dd)`,\n                          border: `1px solid ${barColor}`,\n                        }}\n                      >\n                        {/* Value label */}\n                        <motion.div\n                          className=\"absolute -top-8 left-1/2 transform -translate-x-1/2 text-xs font-mono font-semibold whitespace-nowrap\"\n                          initial={{ opacity: 0 }}\n                          animate={{\n                            opacity: isComparing || isSwapping || isSorted ? 1 : 0.5,\n                            scale: isComparing || isSwapping ? [1, 1.2, 1] : 1,\n                            color: barColor\n                          }}\n                          transition={{\n                            scale: { duration: 0.3, repeat: isComparing || isSwapping ? Infinity : 0 }\n                          }}\n                        >\n                          {element.value}\n                        </motion.div>\n                        \n                        {/* Comparison indicator */}\n                        {isComparing && (\n                          <motion.div\n                            className=\"absolute -top-12 left-1/2 transform -translate-x-1/2\"\n                            initial={{ opacity: 0, y: 10 }}\n                            animate={{\n                              opacity: [0.5, 1, 0.5],\n                              y: [0, -5, 0]\n                            }}\n                            transition={{\n                              duration: 0.8,\n                              repeat: Infinity,\n                              ease: \"easeInOut\"\n                            }}\n                          >\n                            <div className=\"w-3 h-3 rounded-full bg-yellow-400 shadow-[0_0_15px_rgba(255,255,0,0.8)]\" />\n                          </motion.div>\n                        )}\n                        \n                        {/* Swap indicator */}\n                        {isSwapping && (\n                          <motion.div\n                            className=\"absolute -top-16 left-1/2 transform -translate-x-1/2\"\n                            initial={{ opacity: 0, scale: 0 }}\n                            animate={{\n                              opacity: [0, 1, 0],\n                              scale: [0.5, 1.5, 0.5],\n                              rotate: [0, 180, 360]\n                            }}\n                            transition={{\n                              duration: 0.6,\n                              repeat: Infinity,\n                              ease: \"easeOut\"\n                            }}\n                          >\n                            <Zap className=\"w-4 h-4 text-pink-400\" />\n                          </motion.div>\n                        )}\n                        \n                        {/* Sorted checkmark */}\n                        {isSorted && (\n                          <motion.div\n                            className=\"absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2\"\n                            initial={{ opacity: 0, scale: 0, rotate: -180 }}\n                            animate={{\n                              opacity: 1,\n                              scale: 1,\n                              rotate: 0\n                            }}\n                            transition={{\n                              type: \"spring\",\n                              stiffness: 200,\n                              damping: 10\n                            }}\n                          >\n                            <div className=\"w-6 h-6 rounded-full bg-green-500/30 backdrop-blur-sm flex items-center justify-center\">\n                              <svg\n                                className=\"w-4 h-4 text-green-300\"\n                                fill=\"none\"\n                                strokeLinecap=\"round\"\n                                strokeLinejoin=\"round\"\n                                strokeWidth=\"3\"\n                                viewBox=\"0 0 24 24\"\n                                stroke=\"currentColor\"\n                              >\n                                <path d=\"M5 13l4 4L19 7\" />\n                              </svg>\n                            </div>\n                          </motion.div>\n                        )}\n                        \n                        {/* Swap trail effect */}\n                        {isSwapping && (\n                          <>\n                            <motion.div\n                              className=\"absolute inset-0 rounded-t-lg\"\n                              initial={{ opacity: 0 }}\n                              animate={{\n                                opacity: [0, 0.5, 0],\n                                scale: [1, 1.2, 1.4]\n                              }}\n                              transition={{\n                                duration: 0.6,\n                                repeat: Infinity,\n                                ease: \"easeOut\"\n                              }}\n                              style={{\n                                background: `radial-gradient(circle, ${barColor}80, transparent)`,\n                                filter: 'blur(8px)'\n                              }}\n                            />\n                            <motion.div\n                              className=\"absolute -inset-2 rounded-t-lg\"\n                              animate={{\n                                opacity: [0.3, 0.6, 0.3],\n                              }}\n                              transition={{\n                                duration: 0.4,\n                                repeat: Infinity,\n                                ease: \"easeInOut\"\n                              }}\n                              style={{\n                                background: `radial-gradient(circle at center, ${barColor}40, transparent 70%)`,\n                                filter: 'blur(12px)'\n                              }}\n                            />\n                          </>\n                        )}\n                      </motion.div>\n                    );\n                  })}\n                  \n                  {/* Comparison connection line */}\n                  {steps[currentStep]?.comparingIndices.length === 2 && (\n                    <motion.svg\n                      className=\"absolute inset-0 pointer-events-none\"\n                      initial={{ opacity: 0 }}\n                      animate={{ opacity: 1 }}\n                      exit={{ opacity: 0 }}\n                    >\n                      <motion.line\n                        x1={`${(steps[currentStep].comparingIndices[0] / array.length) * 100}%`}\n                        y1=\"20%\"\n                        x2={`${(steps[currentStep].comparingIndices[1] / array.length) * 100}%`}\n                        y2=\"20%\"\n                        stroke=\"#ffff00\"\n                        strokeWidth=\"2\"\n                        strokeDasharray=\"5,5\"\n                        initial={{ pathLength: 0 }}\n                        animate={{\n                          pathLength: [0, 1, 0],\n                          opacity: [0.3, 0.8, 0.3]\n                        }}\n                        transition={{\n                          duration: 1,\n                          repeat: Infinity,\n                          ease: \"easeInOut\"\n                        }}\n                        style={{\n                          filter: 'drop-shadow(0 0 8px rgba(255, 255, 0, 0.8))'\n                        }}\n                      />\n                    </motion.svg>\n                  )}\n                </div>\n              )}\n              \n              <div className=\"relative h-full flex items-end justify-center gap-1\">\n                {array.length === 0 ? (\n                  <div className=\"absolute inset-0 flex items-center justify-center\">\n                    <motion.div\n                      initial={{ opacity: 0, scale: 0.8 }}\n                      animate={{ opacity: 1, scale: 1 }}\n                      transition={{ duration: 0.5 }}\n                      className=\"text-center space-y-4\"\n                    >\n                      <motion.div\n                        animate={{\n                          rotate: [0, 360],\n                        }}\n                        transition={{ duration: 3, repeat: Infinity, ease: \"linear\" }}\n                      >\n                        <BarChart3 className=\"w-16 h-16 text-cyan-400 mx-auto\" />\n                      </motion.div>\n                      <p className=\"text-gray-400 text-lg\">Generate an array to start visualizing</p>\n                    </motion.div>\n                  </div>\n                ) : (\n                  array.map((element, index) => {\n                    const isComparing = steps[currentStep]?.comparingIndices.includes(index);\n                    const isSwapping = steps[currentStep]?.swappingIndices.includes(index);\n                    const isSorted = steps[currentStep]?.sortedIndices.includes(index);\n                    \n                    const maxValue = Math.max(...array.map(el => el.value));\n                    const heightPercentage = (element.value / maxValue) * 100;\n                    \n                    let barColor = NEON_COLORS[index % NEON_COLORS.length];\n                    let glowIntensity = 0.3;\n                    let scale = 1;\n                    \n                    if (isSorted) {\n                      barColor = '#00ff00';\n                      glowIntensity = 0.8;\n                    } else if (isSwapping) {\n                      barColor = '#ff0066';\n                      glowIntensity = 1;\n                      scale = 1.1;\n                    } else if (isComparing) {\n                      barColor = '#ffff00';\n                      glowIntensity = 0.7;\n                      scale = 1.05;\n                    }\n                    \n                    return (\n                      <motion.div\n                        key={element.id}\n                        layout\n                        initial={{ height: 0, opacity: 0 }}\n                        animate={{\n                          height: `${heightPercentage}%`,\n                          opacity: 1,\n                          scale: scale,\n                          backgroundColor: barColor,\n                        }}\n                        transition={{\n                          height: { duration: 0.5, ease: \"easeOut\" },\n                          backgroundColor: { duration: 0.3 },\n                          scale: { duration: 0.2, type: \"spring\", stiffness: 300 },\n                          layout: { duration: 0.4, ease: \"easeInOut\" }\n                        }}\n                        className=\"relative rounded-t-lg\"\n                        style={{\n                          flex: 1,\n                          minWidth: array.length > 40 ? '8px' : '16px',\n                          maxWidth: array.length > 40 ? '20px' : '40px',\n                          boxShadow: `0 0 ${20 * glowIntensity}px ${barColor}, 0 0 ${40 * glowIntensity}px ${barColor}`,\n                          border: `1px solid ${barColor}`,\n                        }}\n                      >\n                        {/* Value label for larger bars */}\n                        {array.length <= 20 && (\n                          <motion.div\n                            initial={{ opacity: 0 }}\n                            animate={{ opacity: 1 }}\n                            className=\"absolute -top-6 left-1/2 transform -translate-x-1/2 text-xs font-mono font-semibold whitespace-nowrap\"\n                            style={{\n                              color: barColor,\n                              textShadow: `0 0 10px ${barColor}`,\n                            }}\n                          >\n                            {element.value}\n                          </motion.div>\n                        )}\n                        \n                        {/* Swap trail effect */}\n                        {isSwapping && (\n                          <motion.div\n                            className=\"absolute inset-0 rounded-t-lg\"\n                            initial={{ opacity: 0 }}\n                            animate={{\n                              opacity: [0, 1, 0],\n                              scale: [1, 1.3, 1.5],\n                            }}\n                            transition={{\n                              duration: 0.6,\n                              repeat: Infinity,\n                              ease: \"easeOut\"\n                            }}\n                            style={{\n                              background: `radial-gradient(circle, ${barColor}40, transparent)`,\n                              filter: 'blur(8px)',\n                            }}\n                          />\n                        )}\n                        \n                        {/* Comparison pulse effect */}\n                        {isComparing && (\n                          <motion.div\n                            className=\"absolute -inset-1 rounded-t-lg\"\n                            animate={{\n                              opacity: [0.5, 1, 0.5],\n                            }}\n                            transition={{\n                              duration: 0.8,\n                              repeat: Infinity,\n                              ease: \"easeInOut\"\n                            }}\n                            style={{\n                              border: `2px solid ${barColor}`,\n                              boxShadow: `0 0 20px ${barColor}`,\n                            }}\n                          />\n                        )}\n                        \n                        {/* Sorted checkmark indicator */}\n                        {isSorted && array.length <= 30 && (\n                          <motion.div\n                            initial={{ scale: 0, rotate: -180 }}\n                            animate={{ scale: 1, rotate: 0 }}\n                            transition={{ type: \"spring\", stiffness: 200, damping: 10 }}\n                            className=\"absolute -top-8 left-1/2 transform -translate-x-1/2\"\n                          >\n                            <div\n                              className=\"w-6 h-6 rounded-full flex items-center justify-center text-xs font-bold\"\n                              style={{\n                                backgroundColor: '#00ff0040',\n                                border: '2px solid #00ff00',\n                                boxShadow: '0 0 15px #00ff00',\n                                color: '#00ff00',\n                              }}\n                            >\n                              \u2713\n                            </div>\n                          </motion.div>\n                        )}\n                        \n                        {/* Gradient overlay for depth */}\n                        <div\n                          className=\"absolute inset-0 rounded-t-lg\"\n                          style={{\n                            background: `linear-gradient(to top, ${barColor}00, ${barColor}40)`,\n                            pointerEvents: 'none',\n                          }}\n                        />\n                      </motion.div>\n                    );\n                  })\n                )}\n              </div>\n            </div>\n\n                        <motion.div\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ duration: 0.6, delay: 0.2 }}\n              className=\"mt-6 bg-gray-900/50 backdrop-blur-lg border border-purple-500/30 rounded-xl p-6 shadow-2xl shadow-purple-500/20\"\n            >\n              <div className=\"space-y-3\">\n                <div className=\"flex items-center justify-between\">\n                  <h3 className=\"text-purple-400 font-semibold text-sm uppercase tracking-wider flex items-center gap-2\">\n                    <BarChart3 className=\"w-4 h-4\" />\n                    Sorting Progress\n                  </h3>\n                  <motion.span\n                    className=\"text-2xl font-bold bg-gradient-to-r from-cyan-400 via-purple-400 to-pink-400 bg-clip-text text-transparent\"\n                    key={currentStep}\n                    initial={{ scale: 1.2, opacity: 0 }}\n                    animate={{ scale: 1, opacity: 1 }}\n                    transition={{ duration: 0.3 }}\n                  >\n                    {steps.length > 0 ? Math.round((currentStep / steps.length) * 100) : 0}%\n                  </motion.span>\n                </div>\n\n                <div className=\"relative w-full h-4 bg-gray-800/80 rounded-full overflow-hidden border border-gray-700/50\">\n                  <motion.div\n                    className=\"absolute inset-0 bg-gradient-to-r from-cyan-500 via-purple-500 to-pink-500\"\n                    initial={{ width: 0 }}\n                    animate={{ \n                      width: steps.length > 0 ? `${(currentStep / steps.length) * 100}%` : '0%'\n                    }}\n                    transition={{ \n                      duration: 0.5,\n                      ease: \"easeOut\"\n                    }}\n                    style={{\n                      boxShadow: '0 0 20px rgba(168, 85, 247, 0.8), 0 0 40px rgba(0, 255, 255, 0.6)'\n                    }}\n                  />\n                  \n                  <motion.div\n                    className=\"absolute inset-0 bg-gradient-to-r from-transparent via-white/30 to-transparent\"\n                    animate={{\n                      x: ['-100%', '200%']\n                    }}\n                    transition={{\n                      duration: 2,\n                      repeat: Infinity,\n                      ease: \"linear\"\n                    }}\n                    style={{\n                      width: '50%'\n                    }}\n                  />\n                </div>\n\n                <div className=\"flex justify-between text-xs text-gray-500\">\n                  <span>Step: {currentStep}</span>\n                  <span>Total: {steps.length}</span>\n                </div>\n\n                {currentStep >= steps.length && steps.length > 0 && (\n                  <motion.div\n                    initial={{ opacity: 0, scale: 0.8 }}\n                    animate={{ opacity: 1, scale: 1 }}\n                    transition={{ duration: 0.5 }}\n                    className=\"text-center py-2\"\n                  >\n                    <span className=\"text-green-400 font-semibold text-sm flex items-center justify-center gap-2\">\n                      <motion.span\n                        animate={{\n                          scale: [1, 1.2, 1],\n                          rotate: [0, 360]\n                        }}\n                        transition={{\n                          duration: 0.6,\n                          ease: \"easeInOut\"\n                        }}\n                      >\n                        \u2713\n                      </motion.span>\n                      Sorting Complete!\n                    </span>\n                  </motion.div>\n                )}\n              </div>\n            </motion.div>\n          </div>\n        </div>\n\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.8, delay: 0.4 }}\n          className=\"bg-gray-900/50 backdrop-blur-lg border border-cyan-500/30 rounded-xl p-6 shadow-[0_0_30px_rgba(0,255,255,0.2)]\"\n        >\n          <h3 className=\"text-cyan-400 font-semibold text-sm uppercase tracking-wider mb-4 flex items-center gap-2\">\n            <BarChart3 className=\"w-4 h-4\" />\n            Legend\n          </h3>\n          \n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n            <motion.div\n              whileHover={{ scale: 1.05 }}\n              className=\"flex items-center gap-3 p-3 bg-gray-800/50 rounded-lg border border-gray-700/50 hover:border-cyan-500/50 transition-all duration-300\"\n            >\n              <motion.div\n                className=\"w-6 h-6 rounded bg-gradient-to-br from-cyan-400 to-cyan-600 border-2 border-cyan-300\"\n                animate={{\n                  boxShadow: [\n                    '0 0 10px rgba(34, 211, 238, 0.5)',\n                    '0 0 20px rgba(34, 211, 238, 0.8)',\n                    '0 0 10px rgba(34, 211, 238, 0.5)'\n                  ]\n                }}\n                transition={{ duration: 2, repeat: Infinity }}\n              />\n              <div>\n                <div className=\"text-cyan-300 font-medium text-sm\">Comparing</div>\n                <div className=\"text-gray-500 text-xs\">Active comparison</div>\n              </div>\n            </motion.div>\n\n            <motion.div\n              whileHover={{ scale: 1.05 }}\n              className=\"flex items-center gap-3 p-3 bg-gray-800/50 rounded-lg border border-gray-700/50 hover:border-purple-500/50 transition-all duration-300\"\n            >\n              <motion.div\n                className=\"w-6 h-6 rounded bg-gradient-to-br from-purple-400 to-purple-600 border-2 border-purple-300\"\n                animate={{\n                  boxShadow: [\n                    '0 0 10px rgba(168, 85, 247, 0.5)',\n                    '0 0 20px rgba(168, 85, 247, 0.8)',\n                    '0 0 10px rgba(168, 85, 247, 0.5)'\n                  ]\n                }}\n                transition={{ duration: 2, repeat: Infinity, delay: 0.5 }}\n              />\n              <div>\n                <div className=\"text-purple-300 font-medium text-sm\">Swapping</div>\n                <div className=\"text-gray-500 text-xs\">Elements swapping</div>\n              </div>\n            </motion.div>\n\n            <motion.div\n              whileHover={{ scale: 1.05 }}\n              className=\"flex items-center gap-3 p-3 bg-gray-800/50 rounded-lg border border-gray-700/50 hover:border-green-500/50 transition-all duration-300\"\n            >\n              <motion.div\n                className=\"w-6 h-6 rounded bg-gradient-to-br from-green-400 to-green-600 border-2 border-green-300\"\n                animate={{\n                  boxShadow: [\n                    '0 0 10px rgba(34, 197, 94, 0.5)',\n                    '0 0 20px rgba(34, 197, 94, 0.8)',\n                    '0 0 10px rgba(34, 197, 94, 0.5)'\n                  ]\n                }}\n                transition={{ duration: 2, repeat: Infinity, delay: 1 }}\n              />\n              <div>\n                <div className=\"text-green-300 font-medium text-sm\">Sorted</div>\n                <div className=\"text-gray-500 text-xs\">In final position</div>\n              </div>\n            </motion.div>\n\n            <motion.div\n              whileHover={{ scale: 1.05 }}\n              className=\"flex items-center gap-3 p-3 bg-gray-800/50 rounded-lg border border-gray-700/50 hover:border-gray-500/50 transition-all duration-300\"\n            >\n              <div className=\"w-6 h-6 rounded bg-gradient-to-br from-gray-500 to-gray-700 border-2 border-gray-400\" />\n              <div>\n                <div className=\"text-gray-300 font-medium text-sm\">Unsorted</div>\n                <div className=\"text-gray-500 text-xs\">Awaiting sort</div>\n              </div>\n            </motion.div>\n          </div>\n        </motion.div>\n      </div>\n    </div>\n  );\n}",
  "error": null,
  "overall_score": 44,
  "code_quality_score": 12,
  "architecture_score": 10,
  "performance_score": 14,
  "accessibility_score": 8,
  "metadata": {
    "document_id": "eval_room_c13a315dd049",
    "prompt_category": "creative",
    "prompt_complexity": 9.0
  },
  "raw_response": {
    "document_id": "eval_room_c13a315dd049",
    "mode": "parallel",
    "prompt": "Build a captivating algorithm visualizer with neon colored bars, smooth height transitions, glowing comparison indicators, trail effects during swaps, and a futuristic dashboard design with animated controls",
    "content": "import { useState, useCallback, useEffect } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Slider } from '@/components/ui/slider';\nimport { Play, Pause, RotateCcw, Zap, BarChart3 } from 'lucide-react';\nimport { Activity, TrendingUp, Shuffle } from 'lucide-react';\nimport { motion } from 'framer-motion';\n\ninterface ArrayElement {\n  value: number;\n  id: string;\n  isComparing?: boolean;\n  isSwapping?: boolean;\n  isSorted?: boolean;\n}\n\ninterface AlgorithmStep {\n  array: ArrayElement[];\n  comparingIndices: number[];\n  swappingIndices: number[];\n  sortedIndices: number[];\n}\n\ntype AlgorithmType = 'bubble' | 'quick' | 'merge' | 'insertion';\n\nconst NEON_COLORS = [\n  '#00ffff',\n  '#ff00ff', \n  '#00ff00',\n  '#ffff00',\n  '#ff0066',\n  '#00ffaa'\n];\n\nconst mockAlgorithms = [\n  { id: 'bubble', name: 'Bubble Sort', complexity: 'O(n\u00b2)' },\n  { id: 'quick', name: 'Quick Sort', complexity: 'O(n log n)' },\n  { id: 'merge', name: 'Merge Sort', complexity: 'O(n log n)' },\n  { id: 'insertion', name: 'Insertion Sort', complexity: 'O(n\u00b2)' }\n];\n\nexport default function AlgorithmVisualizer() {\n  const [array, setArray] = useState<ArrayElement[]>([]);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [speed, setSpeed] = useState([50]);\n  const [arraySize, setArraySize] = useState([20]);\n  const [selectedAlgorithm, setSelectedAlgorithm] = useState<AlgorithmType>('bubble');\n  const [currentStep, setCurrentStep] = useState(0);\n  const [steps, setSteps] = useState<AlgorithmStep[]>([]);\n  const [comparisons, setComparisons] = useState(0);\n  const [swaps, setSwaps] = useState(0);\n  const [progress, setProgress] = useState(0);\n\n  const generateRandomArray = useCallback(() => {\n    const newArray: ArrayElement[] = Array.from({ length: arraySize[0] }, (_, index) => ({\n      value: Math.floor(Math.random() * 100) + 5,\n      id: `element-${Date.now()}-${index}`,\n      isComparing: false,\n      isSwapping: false,\n      isSorted: false\n    }));\n    setArray(newArray);\n    setSteps([]);\n    setCurrentStep(0);\n    setIsPlaying(false);\n  }, [arraySize]);\n\n  const resetVisualization = useCallback(() => {\n\n    setIsPlaying(false);\n    setCurrentStep(0);\n    setSteps([]);\n    generateRandomArray();\n  }, [generateRandomArray]);\n\n  // Animation effect for step-by-step visualization\n  const animateSteps = useCallback(() => {\n    if (currentStep >= steps.length) {\n      setIsPlaying(false);\n      return;\n    }\n\n    const step = steps[currentStep];\n    setArray(step.array);\n    setCurrentStep(prev => prev + 1);\n  }, [currentStep, steps]);\n\n  // Effect to handle animation timing\n  React.useEffect(() => {\n    if (!isPlaying || steps.length === 0) return;\n\n    const delay = 1000 - speed[0] * 9.5; // Convert speed (0-100) to delay (1000ms-50ms)\n    const timer = setTimeout(animateSteps, delay);\n\n    return () => clearTimeout(timer);\n  }, [isPlaying, animateSteps, speed]);\n  const startVisualization = useCallback(() => {\n    if (steps.length === 0) return;\n    if (currentStep >= steps.length) {\n      setCurrentStep(0);\n    }\n    setIsPlaying(true);\n    \n  }, [steps, speed, currentStep]);\n\n  const pauseVisualization = useCallback(() => {\n    setIsPlaying(false);\n  }, []);\n\n  const generateSortingSteps = useCallback((algorithm: AlgorithmType) => {\n        if (array.length === 0) return;\n\n    const steps: AlgorithmStep[] = [];\n    const arr = array.map(el => ({ ...el }));\n\n    const addStep = (\n      currentArray: ArrayElement[],\n      comparing: number[] = [],\n      swapping: number[] = [],\n      sorted: number[] = []\n    ) => {\n      steps.push({\n        array: currentArray.map(el => ({ ...el })),\n        comparingIndices: [...comparing],\n        swappingIndices: [...swapping],\n        sortedIndices: [...sorted]\n      });\n    };\n\n    if (algorithm === 'bubble') {\n      const sortedIndices: number[] = [];\n      for (let i = 0; i < arr.length; i++) {\n        for (let j = 0; j < arr.length - i - 1; j++) {\n          addStep(arr, [j, j + 1], [], sortedIndices);\n          \n          if (arr[j].value > arr[j + 1].value) {\n            addStep(arr, [], [j, j + 1], sortedIndices);\n            [arr[j], arr[j + 1]] = [arr[j + 1], arr[j]];\n            addStep(arr, [], [], sortedIndices);\n          }\n        }\n        sortedIndices.push(arr.length - i - 1);\n        addStep(arr, [], [], sortedIndices);\n      }\n    } else if (algorithm === 'quick') {\n      const sortedIndices: number[] = [];\n      \n      const partition = (low: number, high: number): number => {\n        const pivot = arr[high].value;\n        let i = low - 1;\n\n        addStep(arr, [high], [], sortedIndices);\n\n        for (let j = low; j < high; j++) {\n          addStep(arr, [j, high], [], sortedIndices);\n          \n          if (arr[j].value < pivot) {\n            i++;\n            if (i !== j) {\n              addStep(arr, [], [i, j], sortedIndices);\n              [arr[i], arr[j]] = [arr[j], arr[i]];\n              addStep(arr, [], [], sortedIndices);\n            }\n          }\n        }\n\n        addStep(arr, [], [i + 1, high], sortedIndices);\n        [arr[i + 1], arr[high]] = [arr[high], arr[i + 1]];\n        addStep(arr, [], [], sortedIndices);\n        \n        return i + 1;\n      };\n\n      const quickSort = (low: number, high: number) => {\n        if (low < high) {\n          const pi = partition(low, high);\n          sortedIndices.push(pi);\n          quickSort(low, pi - 1);\n          quickSort(pi + 1, high);\n        } else if (low === high) {\n          sortedIndices.push(low);\n          addStep(arr, [], [], sortedIndices);\n        }\n      };\n\n      quickSort(0, arr.length - 1);\n    } else if (algorithm === 'merge') {\n      const sortedIndices: number[] = [];\n\n      const merge = (left: number, mid: number, right: number) => {\n        const leftArr = arr.slice(left, mid + 1);\n        const rightArr = arr.slice(mid + 1, right + 1);\n        \n        let i = 0, j = 0, k = left;\n\n        while (i < leftArr.length && j < rightArr.length) {\n          addStep(arr, [left + i, mid + 1 + j], [], sortedIndices);\n          \n          if (leftArr[i].value <= rightArr[j].value) {\n            arr[k] = leftArr[i];\n            i++;\n          } else {\n            arr[k] = rightArr[j];\n            j++;\n          }\n          addStep(arr, [], [k], sortedIndices);\n          k++;\n        }\n\n        while (i < leftArr.length) {\n          arr[k] = leftArr[i];\n          addStep(arr, [], [k], sortedIndices);\n          i++;\n          k++;\n        }\n\n        while (j < rightArr.length) {\n          arr[k] = rightArr[j];\n          addStep(arr, [], [k], sortedIndices);\n          j++;\n          k++;\n        }\n\n        for (let idx = left; idx <= right; idx++) {\n          if (!sortedIndices.includes(idx)) {\n            sortedIndices.push(idx);\n          }\n        }\n        addStep(arr, [], [], sortedIndices);\n      };\n\n      const mergeSort = (left: number, right: number) => {\n        if (left < right) {\n          const mid = Math.floor((left + right) / 2);\n          mergeSort(left, mid);\n          mergeSort(mid + 1, right);\n          merge(left, mid, right);\n        }\n      };\n\n      mergeSort(0, arr.length - 1);\n    } else if (algorithm === 'insertion') {\n      const sortedIndices: number[] = [0];\n      addStep(arr, [], [], sortedIndices);\n\n      for (let i = 1; i < arr.length; i++) {\n        const key = arr[i];\n        let j = i - 1;\n\n        addStep(arr, [i], [], sortedIndices);\n\n        while (j >= 0 && arr[j].value > key.value) {\n          addStep(arr, [j, j + 1], [], sortedIndices);\n          addStep(arr, [], [j, j + 1], sortedIndices);\n          arr[j + 1] = arr[j];\n          addStep(arr, [], [], sortedIndices);\n          j--;\n        }\n\n        arr[j + 1] = key;\n        sortedIndices.push(i);\n        addStep(arr, [], [], sortedIndices);\n      }\n    }\n\n    setSteps(steps);\n    setCurrentStep(0);\n  }, [array]);\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-gray-900 via-purple-900 to-gray-900 p-8\">\n      <div className=\"max-w-7xl mx-auto space-y-8\">\n        <motion.div\n          initial={{ opacity: 0, y: -20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.8 }}\n          className=\"text-center space-y-4\"\n        >\n          <motion.h1\n            className=\"text-6xl font-bold bg-gradient-to-r from-cyan-400 via-purple-400 to-pink-400 bg-clip-text text-transparent\"\n            animate={{\n              textShadow: [\n                '0 0 20px rgba(0, 255, 255, 0.5)',\n                '0 0 40px rgba(255, 0, 255, 0.5)',\n                '0 0 20px rgba(0, 255, 255, 0.5)'\n              ]\n            }}\n            transition={{ duration: 2, repeat: Infinity }}\n          >\n            Algorithm Visualizer\n          </motion.h1>\n          \n          <div className=\"flex items-center justify-center gap-4\">\n            <motion.div\n              initial={{ scale: 0 }}\n              animate={{ scale: 1 }}\n              transition={{ delay: 0.3, type: 'spring' }}\n              className=\"flex items-center gap-2 px-6 py-3 bg-gray-800/50 backdrop-blur-sm rounded-full border border-cyan-500/30\"\n            >\n              <Zap className=\"w-5 h-5 text-cyan-400\" />\n              <span className=\"text-xl font-semibold text-cyan-300\">\n                {mockAlgorithms.find(a => a.id === selectedAlgorithm)?.name}\n              </span>\n            </motion.div>\n            \n            <motion.div\n              initial={{ scale: 0 }}\n              animate={{ scale: 1 }}\n              transition={{ delay: 0.5, type: 'spring' }}\n              className=\"flex items-center gap-2 px-4 py-2 bg-purple-900/50 backdrop-blur-sm rounded-full border border-purple-500/50\"\n              style={{\n                boxShadow: '0 0 20px rgba(168, 85, 247, 0.4)'\n              }}\n            >\n              <BarChart3 className=\"w-4 h-4 text-purple-300\" />\n              <span className=\"text-sm font-mono text-purple-200\">\n                {mockAlgorithms.find(a => a.id === selectedAlgorithm)?.complexity}\n              </span>\n            </motion.div>\n          </div>\n        </motion.div></parameter>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-6\">\n          <div className=\"lg:col-span-1 space-y-6\">\n            <motion.div\n              initial={{ opacity: 0, x: -50 }}\n              animate={{ opacity: 1, x: 0 }}\n              transition={{ duration: 0.6 }}\n              className=\"bg-gray-900/50 backdrop-blur-lg border border-cyan-500/30 rounded-xl p-6 shadow-[0_0_30px_rgba(0,255,255,0.3)] hover:shadow-[0_0_50px_rgba(0,255,255,0.5)] transition-all duration-300\"\n            >\n              <div className=\"space-y-6\">\n                {/* Algorithm Selection */}\n                <div className=\"space-y-3\">\n                  <h3 className=\"text-cyan-400 font-semibold text-sm uppercase tracking-wider flex items-center gap-2\">\n                    <Zap className=\"w-4 h-4\" />\n                    Algorithm\n                  </h3>\n                  <div className=\"space-y-2\">\n                    {mockAlgorithms.map((algo) => (\n                      <button\n                        key={algo.id}\n                        onClick={() => setSelectedAlgorithm(algo.id as AlgorithmType)}\n                        disabled={isPlaying}\n                        className={`w-full text-left px-4 py-3 rounded-lg border transition-all duration-300 ${\n                          selectedAlgorithm === algo.id\n                            ? 'bg-cyan-500/20 border-cyan-400 shadow-[0_0_20px_rgba(0,255,255,0.4)] text-cyan-300'\n                            : 'bg-gray-800/50 border-gray-700 hover:border-cyan-500/50 text-gray-400 hover:text-cyan-300'\n                        } disabled:opacity-50 disabled:cursor-not-allowed`}\n                      >\n                        <div className=\"font-medium\">{algo.name}</div>\n                        <div className=\"text-xs opacity-70\">{algo.complexity}</div>\n                      </button>\n                    ))}\n                  </div>\n                </div>\n\n                {/* Speed Control */}\n                <div className=\"space-y-3\">\n                  <h3 className=\"text-purple-400 font-semibold text-sm uppercase tracking-wider flex items-center gap-2\">\n                    <Zap className=\"w-4 h-4\" />\n                    Speed\n                  </h3>\n                  <div className=\"space-y-2\">\n                    <Slider\n                      value={speed}\n                      onValueChange={setSpeed}\n                      min={10}\n                      max={100}\n                      step={10}\n                      className=\"cursor-pointer\"\n                      disabled={isPlaying}\n                    />\n                    <div className=\"flex justify-between text-xs text-gray-500\">\n                      <span>Slow</span>\n                      <span className=\"text-purple-400 font-semibold\">{speed[0]}%</span>\n                      <span>Fast</span>\n                    </div>\n                  </div>\n                </div>\n\n                {/* Array Size Control */}\n                <div className=\"space-y-3\">\n                  <h3 className=\"text-pink-400 font-semibold text-sm uppercase tracking-wider flex items-center gap-2\">\n                    <BarChart3 className=\"w-4 h-4\" />\n                    Array Size\n                  </h3>\n                  <div className=\"space-y-2\">\n                    <Slider\n                      value={arraySize}\n                      onValueChange={setArraySize}\n                      min={5}\n                      max={50}\n                      step={5}\n                      className=\"cursor-pointer\"\n                      disabled={isPlaying}\n                    />\n                    <div className=\"flex justify-between text-xs text-gray-500\">\n                      <span>5</span>\n                      <span className=\"text-pink-400 font-semibold\">{arraySize[0]}</span>\n                      <span>50</span>\n                    </div>\n                  </div>\n                </div>\n\n                {/* Control Buttons */}\n                <div className=\"space-y-3 pt-4 border-t border-gray-700/50\">\n                  <Button\n                    onClick={isPlaying ? pauseVisualization : startVisualization}\n                    disabled={steps.length === 0 || (currentStep >= steps.length && !isPlaying)}\n                    className=\"w-full bg-gradient-to-r from-cyan-500 to-blue-500 hover:from-cyan-400 hover:to-blue-400 text-white font-semibold py-6 rounded-lg shadow-[0_0_20px_rgba(0,255,255,0.5)] hover:shadow-[0_0_30px_rgba(0,255,255,0.7)] transition-all duration-300 disabled:opacity-50 disabled:cursor-not-allowed\"\n                  >\n                    {isPlaying ? (\n                      <>\n                        <Pause className=\"w-5 h-5 mr-2\" />\n                        Pause\n                      </>\n                    ) : (\n                      <>\n                        <Play className=\"w-5 h-5 mr-2\" />\n                        {currentStep >= steps.length ? 'Start' : 'Resume'}\n                      </>\n                    )}\n                  </Button>\n\n                  <Button\n                    onClick={resetVisualization}\n                    disabled={isPlaying}\n                    className=\"w-full bg-gradient-to-r from-purple-500 to-pink-500 hover:from-purple-400 hover:to-pink-400 text-white font-semibold py-6 rounded-lg shadow-[0_0_20px_rgba(255,0,255,0.5)] hover:shadow-[0_0_30px_rgba(255,0,255,0.7)] transition-all duration-300 disabled:opacity-50 disabled:cursor-not-allowed\"\n                  >\n                    <RotateCcw className=\"w-5 h-5 mr-2\" />\n                    Reset\n                  </Button>\n\n                  <Button\n                    onClick={() => {\n                      generateRandomArray();\n                      generateSortingSteps(selectedAlgorithm);\n                    }}\n                    disabled={isPlaying}\n                    className=\"w-full bg-gradient-to-r from-green-500 to-emerald-500 hover:from-green-400 hover:to-emerald-400 text-white font-semibold py-6 rounded-lg shadow-[0_0_20px_rgba(0,255,170,0.5)] hover:shadow-[0_0_30px_rgba(0,255,170,0.7)] transition-all duration-300 disabled:opacity-50 disabled:cursor-not-allowed\"\n                  >\n                    <BarChart3 className=\"w-5 h-5 mr-2\" />\n                    Generate New\n                  </Button>\n                </div>\n\n                {/* Progress Indicator */}\n                {steps.length > 0 && (\n                  <div className=\"space-y-2 pt-4 border-t border-gray-700/50\">\n                    <div className=\"flex justify-between text-xs text-gray-400\">\n                      <span>Progress</span>\n                      <span className=\"text-cyan-400 font-semibold\">\n                        {currentStep} / {steps.length}\n                      </span>\n                    </div>\n                    <div className=\"w-full h-2 bg-gray-800 rounded-full overflow-hidden\">\n                      <motion.div\n                        className=\"h-full bg-gradient-to-r from-cyan-500 via-purple-500 to-pink-500\"\n                        initial={{ width: 0 }}\n                        animate={{ width: `${(currentStep / steps.length) * 100}%` }}\n                        transition={{ duration: 0.3 }}\n                      />\n                    </div>\n                  </div>\n                )}\n              </div>\n            </motion.div>\n            \n            <div className=\"bg-gray-900/50 backdrop-blur-lg border border-cyan-500/30 rounded-xl p-6 shadow-2xl shadow-cyan-500/20\">\n              <div className=\"space-y-6\">\n                <div>\n                  <h3 className=\"text-sm font-semibold text-cyan-400 mb-3 flex items-center gap-2\">\n                    <Zap className=\"w-4 h-4\" />\n                    Algorithm\n                  </h3>\n                  <div className=\"grid grid-cols-1 gap-2\">\n                    {mockAlgorithms.map((algo) => (\n                      <motion.button\n                        key={algo.id}\n                        onClick={() => setSelectedAlgorithm(algo.id as AlgorithmType)}\n                        className={`relative p-3 rounded-lg border transition-all duration-300 text-left ${\n                          selectedAlgorithm === algo.id\n                            ? 'bg-cyan-500/20 border-cyan-400 shadow-lg shadow-cyan-500/50'\n                            : 'bg-gray-800/50 border-gray-700 hover:border-cyan-500/50 hover:shadow-md hover:shadow-cyan-500/30'\n                        }`}\n                        whileHover={{ scale: 1.02 }}\n                        whileTap={{ scale: 0.98 }}\n                      >\n                        <div className=\"flex flex-col gap-1\">\n                          <span className={`text-sm font-medium ${\n                            selectedAlgorithm === algo.id ? 'text-cyan-300' : 'text-gray-300'\n                          }`}>\n                            {algo.name}\n                          </span>\n                          <span className={`text-xs ${\n                            selectedAlgorithm === algo.id ? 'text-cyan-400/80' : 'text-gray-500'\n                          }`}>\n                            {algo.complexity}\n                          </span>\n                        </div>\n                        {selectedAlgorithm === algo.id && (\n                          <motion.div\n                            className=\"absolute inset-0 rounded-lg border-2 border-cyan-400\"\n                            layoutId=\"algorithmSelector\"\n                            transition={{ type: \"spring\", stiffness: 300, damping: 30 }}\n                          />\n                        )}\n                      </motion.button>\n                    ))}\n                  </div>\n                </div></parameter>\n</invoke>\n\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <label className=\"text-cyan-400 text-sm font-medium flex items-center gap-2\">\n                      <Zap className=\"w-4 h-4\" />\n                      Speed\n                    </label>\n                    <span className=\"text-cyan-300 text-xs\">{speed[0]}ms</span>\n                  </div>\n                  <Slider\n                    value={speed}\n                    onValueChange={setSpeed}\n                    min={10}\n                    max={200}\n                    step={10}\n                    className=\"[&_[role=slider]]:bg-cyan-400 [&_[role=slider]]:border-cyan-300 [&_[role=slider]]:shadow-[0_0_15px_rgba(34,211,238,0.8)] [&_[role=slider]]:hover:shadow-[0_0_25px_rgba(34,211,238,1)] [&_[role=slider]]:transition-shadow [&_.relative]:bg-gray-700/50 [&_.relative]:border [&_.relative]:border-cyan-500/30 [&_.bg-primary]:bg-gradient-to-r [&_.bg-primary]:from-cyan-500 [&_.bg-primary]:to-purple-500 [&_.bg-primary]:shadow-[0_0_10px_rgba(34,211,238,0.5)]\"\n                  />\n                </div>\n\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <label className=\"text-cyan-400 text-sm font-medium flex items-center gap-2\">\n                      <BarChart3 className=\"w-4 h-4\" />\n                      Array Size\n                    </label>\n                    <span className=\"text-cyan-300 text-xs\">{arraySize[0]}</span>\n                  </div>\n                  <Slider\n                    value={arraySize}\n                    onValueChange={setArraySize}\n                    min={5}\n                    max={100}\n                    step={5}\n                    className=\"[&_[role=slider]]:bg-gradient-to-r [&_[role=slider]]:from-purple-500 [&_[role=slider]]:to-pink-500 [&_[role=slider]]:border-2 [&_[role=slider]]:border-purple-300 [&_[role=slider]]:shadow-lg [&_[role=slider]]:shadow-purple-500/50 [&_[role=slider]]:transition-all [&_[role=slider]]:hover:shadow-purple-500/80 [&_[role=slider]]:hover:scale-110 [&>span]:bg-gradient-to-r [&>span]:from-purple-500/30 [&>span]:to-pink-500/30 [&>span]:h-2 [&>span]:rounded-full\"\n                  />\n                </div>\n\n                <div className=\"flex gap-3 pt-4\">\n                  <motion.button\n                    onClick={isPlaying ? pauseVisualization : startVisualization}\n                    disabled={array.length === 0 || (steps.length === 0 && !isPlaying)}\n                    whileHover={{ scale: 1.05 }}\n                    whileTap={{ scale: 0.95 }}\n                    className=\"flex-1 relative group overflow-hidden rounded-lg bg-gradient-to-r from-cyan-500 to-purple-500 p-[2px] disabled:opacity-50 disabled:cursor-not-allowed\"\n                  >\n                    <div className=\"relative bg-gray-900 rounded-lg px-6 py-3 flex items-center justify-center gap-2 group-hover:bg-gray-900/80 transition-all duration-300\">\n                      <motion.div\n                        animate={{\n                          rotate: isPlaying ? 0 : 0,\n                          scale: isPlaying ? 1 : 1\n                        }}\n                        transition={{ duration: 0.3 }}\n                      >\n                        {isPlaying ? (\n                          <Pause className=\"w-5 h-5 text-cyan-400\" />\n                        ) : (\n                          <Play className=\"w-5 h-5 text-cyan-400\" />\n                        )}\n                      </motion.div>\n                      <span className=\"font-semibold text-cyan-300\">\n                        {isPlaying ? 'Pause' : 'Play'}\n                      </span>\n                      \n                      <motion.div\n                        className=\"absolute inset-0 bg-gradient-to-r from-cyan-500/20 to-purple-500/20 rounded-lg\"\n                        animate={{\n                          opacity: [0.5, 1, 0.5],\n                          scale: [1, 1.02, 1]\n                        }}\n                        transition={{\n                          duration: 2,\n                          repeat: Infinity,\n                          ease: \"easeInOut\"\n                        }}\n                      />\n                    </div>\n                    \n                    <motion.div\n                      className=\"absolute inset-0 rounded-lg opacity-0 group-hover:opacity-100 transition-opacity duration-300\"\n                      style={{\n                        boxShadow: '0 0 20px rgba(0, 255, 255, 0.6), 0 0 40px rgba(168, 85, 247, 0.4)'\n                      }}\n                    />\n                  </motion.button>\n                  <motion.div className=\"flex gap-3\">\n                    <Button\n                      onClick={isPlaying ? pauseVisualization : startVisualization}\n                      disabled={array.length === 0 || (steps.length === 0 && !isPlaying)}\n                      className=\"flex-1 bg-gradient-to-r from-cyan-500 to-blue-500 hover:from-cyan-400 hover:to-blue-400 text-white font-semibold shadow-lg shadow-cyan-500/50 hover:shadow-cyan-500/80 transition-all duration-300 border-0\"\n                      whileHover={{ scale: 1.05 }}\n                      whileTap={{ scale: 0.95 }}\n                    >\n                      {isPlaying ? (\n                        <>\n                          <Pause className=\"w-4 h-4 mr-2\" />\n                          Pause\n                        </>\n                      ) : (\n                        <>\n                          <Play className=\"w-4 h-4 mr-2\" />\n                          {currentStep > 0 ? 'Resume' : 'Start'}\n                        </>\n                      )}\n                    </Button>\n                    \n                    <motion.div whileHover={{ rotate: 180 }} transition={{ duration: 0.5 }}>\n                      <Button\n                        onClick={resetVisualization}\n                        disabled={isPlaying}\n                        className=\"bg-gradient-to-r from-purple-500 to-pink-500 hover:from-purple-400 hover:to-pink-400 text-white font-semibold shadow-lg shadow-purple-500/50 hover:shadow-purple-500/80 transition-all duration-300 border-0\"\n                        whileTap={{ scale: 0.9 }}\n                      >\n                        <RotateCcw className=\"w-4 h-4\" />\n                      </Button>\n                    </motion.div>\n                    \n                    <Button\n                      onClick={generateRandomArray}\n                      disabled={isPlaying}\n                      className=\"flex-1 bg-gradient-to-r from-pink-500 to-rose-500 hover:from-pink-400 hover:to-rose-400 text-white font-semibold shadow-lg shadow-pink-500/50 hover:shadow-pink-500/80 transition-all duration-300 border-0\"\n                      whileHover={{ scale: 1.05 }}\n                      whileTap={{ scale: 0.95 }}\n                    >\n                      <Zap className=\"w-4 h-4 mr-2\" />\n                      Generate\n                    </Button>\n                  </motion.div>\n                </div>\n              </div>\n            </div>\n\n            <motion.div\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ duration: 0.6, delay: 0.2 }}\n              className=\"bg-gray-900/50 backdrop-blur-lg border border-purple-500/30 rounded-xl p-6 shadow-[0_0_30px_rgba(168,85,247,0.3)] hover:shadow-[0_0_50px_rgba(168,85,247,0.5)] transition-all duration-300\"\n            >\n              <h3 className=\"text-purple-400 font-semibold text-sm uppercase tracking-wider flex items-center gap-2 mb-4\">\n                <Activity className=\"w-4 h-4\" />\n                Statistics\n              </h3>\n              \n              <div className=\"space-y-4\">\n                {/* Comparisons */}\n                <motion.div\n                  className=\"bg-gradient-to-r from-cyan-900/30 to-cyan-800/20 border border-cyan-500/40 rounded-lg p-4 shadow-[0_0_15px_rgba(6,182,212,0.2)]\"\n                  whileHover={{ scale: 1.02, boxShadow: '0 0 25px rgba(6,182,212,0.4)' }}\n                  transition={{ type: 'spring', stiffness: 300 }}\n                >\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center gap-3\">\n                      <div className=\"p-2 bg-cyan-500/20 rounded-lg border border-cyan-400/50 shadow-[0_0_10px_rgba(6,182,212,0.5)]\">\n                        <TrendingUp className=\"w-5 h-5 text-cyan-400\" />\n                      </div>\n                      <div>\n                        <div className=\"text-xs text-cyan-300/70 uppercase tracking-wide\">Comparisons</div>\n                        <motion.div\n                          key={comparisons}\n                          initial={{ scale: 1.3, color: '#22d3ee' }}\n                          animate={{ scale: 1, color: '#67e8f9' }}\n                          className=\"text-2xl font-bold text-cyan-300 font-mono\"\n                        >\n                          {comparisons}\n                        </motion.div>\n                      </div>\n                    </div>\n                  </div>\n                </motion.div>\n\n                {/* Swaps */}\n                <motion.div\n                  className=\"bg-gradient-to-r from-purple-900/30 to-purple-800/20 border border-purple-500/40 rounded-lg p-4 shadow-[0_0_15px_rgba(168,85,247,0.2)]\"\n                  whileHover={{ scale: 1.02, boxShadow: '0 0 25px rgba(168,85,247,0.4)' }}\n                  transition={{ type: 'spring', stiffness: 300 }}\n                >\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center gap-3\">\n                      <div className=\"p-2 bg-purple-500/20 rounded-lg border border-purple-400/50 shadow-[0_0_10px_rgba(168,85,247,0.5)]\">\n                        <Shuffle className=\"w-5 h-5 text-purple-400\" />\n                      </div>\n                      <div>\n                        <div className=\"text-xs text-purple-300/70 uppercase tracking-wide\">Swaps</div>\n                        <motion.div\n                          key={swaps}\n                          initial={{ scale: 1.3, color: '#a855f7' }}\n                          animate={{ scale: 1, color: '#c084fc' }}\n                          className=\"text-2xl font-bold text-purple-300 font-mono\"\n                        >\n                          {swaps}\n                        </motion.div>\n                      </div>\n                    </div>\n                  </div>\n                </motion.div>\n\n                {/* Progress */}\n                <motion.div\n                  className=\"bg-gradient-to-r from-pink-900/30 to-pink-800/20 border border-pink-500/40 rounded-lg p-4 shadow-[0_0_15px_rgba(236,72,153,0.2)]\"\n                  whileHover={{ scale: 1.02, boxShadow: '0 0 25px rgba(236,72,153,0.4)' }}\n                  transition={{ type: 'spring', stiffness: 300 }}\n                >\n                  <div className=\"space-y-3\">\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center gap-3\">\n                        <div className=\"p-2 bg-pink-500/20 rounded-lg border border-pink-400/50 shadow-[0_0_10px_rgba(236,72,153,0.5)]\">\n                          <BarChart3 className=\"w-5 h-5 text-pink-400\" />\n                        </div>\n                        <div>\n                          <div className=\"text-xs text-pink-300/70 uppercase tracking-wide\">Progress</div>\n                          <motion.div\n                            key={progress}\n                            initial={{ scale: 1.3, color: '#ec4899' }}\n                            animate={{ scale: 1, color: '#f9a8d4' }}\n                            className=\"text-2xl font-bold text-pink-300 font-mono\"\n                          >\n                            {progress}%\n                          </motion.div>\n                        </div>\n                      </div>\n                    </div>\n                    \n                    {/* Progress Bar */}\n                    <div className=\"relative h-2 bg-gray-800/50 rounded-full overflow-hidden border border-pink-500/30\">\n                      <motion.div\n                        className=\"absolute inset-y-0 left-0 bg-gradient-to-r from-pink-500 via-purple-500 to-cyan-500 rounded-full shadow-[0_0_15px_rgba(236,72,153,0.8)]\"\n                        initial={{ width: 0 }}\n                        animate={{ width: `${progress}%` }}\n                        transition={{ duration: 0.5, ease: 'easeOut' }}\n                      />\n                      <motion.div\n                        className=\"absolute inset-y-0 left-0 bg-gradient-to-r from-transparent via-white/30 to-transparent\"\n                        animate={{\n                          x: ['-100%', '200%']\n                        }}\n                        transition={{\n                          duration: 1.5,\n                          repeat: Infinity,\n                          ease: 'linear'\n                        }}\n                        style={{ width: '50%' }}\n                      />\n                    </div>\n                  </div>\n                </motion.div>\n\n                {/* Status Indicator */}\n                <motion.div\n                  className=\"flex items-center justify-center gap-2 p-3 bg-gray-800/50 rounded-lg border border-gray-700\"\n                  animate={{\n                    borderColor: isPlaying \n                      ? ['rgba(6,182,212,0.5)', 'rgba(168,85,247,0.5)', 'rgba(6,182,212,0.5)']\n                      : 'rgba(75,85,99,1)'\n                  }}\n                  transition={{ duration: 2, repeat: Infinity }}\n                >\n                  <motion.div\n                    className={`w-2 h-2 rounded-full ${isPlaying ? 'bg-cyan-400' : 'bg-gray-500'}`}\n                    animate={{\n                      boxShadow: isPlaying\n                        ? [\n                            '0 0 5px rgba(6,182,212,0.8)',\n                            '0 0 15px rgba(6,182,212,1)',\n                            '0 0 5px rgba(6,182,212,0.8)'\n                          ]\n                        : '0 0 0px rgba(75,85,99,0)'\n                    }}\n                    transition={{ duration: 1, repeat: Infinity }}\n                  />\n                  <span className={`text-xs font-medium ${isPlaying ? 'text-cyan-300' : 'text-gray-400'}`}>\n                    {isPlaying ? 'Sorting...' : 'Ready'}\n                  </span>\n                </motion.div>\n              </div>\n            </motion.div>\n          </div>\n\n          <div className=\"lg:col-span-3\">\n            <div className=\"bg-gray-900/50 backdrop-blur-lg border border-purple-500/30 rounded-xl p-8 shadow-2xl shadow-purple-500/20 min-h-[600px]\">\n                            {array.length === 0 ? (\n                <motion.div\n                  initial={{ opacity: 0, scale: 0.8 }}\n                  animate={{ opacity: 1, scale: 1 }}\n                  className=\"absolute inset-0 flex flex-col items-center justify-center gap-6\"\n                >\n                  <motion.div\n                    animate={{\n                      rotate: [0, 360],\n                      scale: [1, 1.2, 1]\n                    }}\n                    transition={{\n                      duration: 3,\n                      repeat: Infinity,\n                      ease: \"easeInOut\"\n                    }}\n                  >\n                    <BarChart3 className=\"w-24 h-24 text-cyan-400/50\" />\n                  </motion.div>\n                  <div className=\"text-center space-y-2\">\n                    <p className=\"text-2xl font-semibold text-cyan-300\">\n                      Generate an array to begin\n                    </p>\n                    <p className=\"text-gray-500\">\n                      Click the reset button to create a random array\n                    </p>\n                  </div>\n                </motion.div>\n              ) : (\n                <div className=\"relative w-full h-[500px] flex items-end justify-center gap-1 px-4\">\n                  {array.map((element, index) => {\n                    const isComparing = steps[currentStep]?.comparingIndices.includes(index);\n                    const isSwapping = steps[currentStep]?.swappingIndices.includes(index);\n                    const isSorted = steps[currentStep]?.sortedIndices.includes(index);\n                    \n                    const maxValue = Math.max(...array.map(el => el.value));\n                    const heightPercentage = (element.value / maxValue) * 100;\n                    \n                    let barColor = NEON_COLORS[index % NEON_COLORS.length];\n                    let glowColor = barColor;\n                    let glowIntensity = 0.3;\n                    \n                    if (isSorted) {\n                      barColor = '#00ff00';\n                      glowColor = '#00ff00';\n                      glowIntensity = 0.8;\n                    } else if (isSwapping) {\n                      barColor = '#ff0066';\n                      glowColor = '#ff0066';\n                      glowIntensity = 1;\n                    } else if (isComparing) {\n                      barColor = '#ffff00';\n                      glowColor = '#ffff00';\n                      glowIntensity = 0.7;\n                    }\n                    \n                    return (\n                      <motion.div\n                        key={element.id}\n                        className=\"relative flex-1 min-w-[4px] max-w-[60px] rounded-t-lg\"\n                        initial={{ height: 0, opacity: 0 }}\n                        animate={{\n                          height: `${heightPercentage}%`,\n                          opacity: 1,\n                          backgroundColor: barColor,\n                          boxShadow: [\n                            `0 0 ${glowIntensity * 20}px ${glowColor}`,\n                            `0 0 ${glowIntensity * 40}px ${glowColor}`,\n                            `0 0 ${glowIntensity * 20}px ${glowColor}`\n                          ],\n                          scale: isSwapping ? [1, 1.1, 1] : isComparing ? 1.05 : 1,\n                          y: isSwapping ? [-10, 0] : 0\n                        }}\n                        transition={{\n                          height: { duration: 0.3, ease: \"easeOut\" },\n                          backgroundColor: { duration: 0.2 },\n                          boxShadow: { duration: 0.5, repeat: isComparing || isSwapping ? Infinity : 0 },\n                          scale: { duration: 0.3 },\n                          y: { duration: 0.4, ease: \"easeInOut\" }\n                        }}\n                        style={{\n                          background: `linear-gradient(to top, ${barColor}, ${barColor}dd)`,\n                          border: `1px solid ${barColor}`,\n                        }}\n                      >\n                        {/* Value label */}\n                        <motion.div\n                          className=\"absolute -top-8 left-1/2 transform -translate-x-1/2 text-xs font-mono font-semibold whitespace-nowrap\"\n                          initial={{ opacity: 0 }}\n                          animate={{\n                            opacity: isComparing || isSwapping || isSorted ? 1 : 0.5,\n                            scale: isComparing || isSwapping ? [1, 1.2, 1] : 1,\n                            color: barColor\n                          }}\n                          transition={{\n                            scale: { duration: 0.3, repeat: isComparing || isSwapping ? Infinity : 0 }\n                          }}\n                        >\n                          {element.value}\n                        </motion.div>\n                        \n                        {/* Comparison indicator */}\n                        {isComparing && (\n                          <motion.div\n                            className=\"absolute -top-12 left-1/2 transform -translate-x-1/2\"\n                            initial={{ opacity: 0, y: 10 }}\n                            animate={{\n                              opacity: [0.5, 1, 0.5],\n                              y: [0, -5, 0]\n                            }}\n                            transition={{\n                              duration: 0.8,\n                              repeat: Infinity,\n                              ease: \"easeInOut\"\n                            }}\n                          >\n                            <div className=\"w-3 h-3 rounded-full bg-yellow-400 shadow-[0_0_15px_rgba(255,255,0,0.8)]\" />\n                          </motion.div>\n                        )}\n                        \n                        {/* Swap indicator */}\n                        {isSwapping && (\n                          <motion.div\n                            className=\"absolute -top-16 left-1/2 transform -translate-x-1/2\"\n                            initial={{ opacity: 0, scale: 0 }}\n                            animate={{\n                              opacity: [0, 1, 0],\n                              scale: [0.5, 1.5, 0.5],\n                              rotate: [0, 180, 360]\n                            }}\n                            transition={{\n                              duration: 0.6,\n                              repeat: Infinity,\n                              ease: \"easeOut\"\n                            }}\n                          >\n                            <Zap className=\"w-4 h-4 text-pink-400\" />\n                          </motion.div>\n                        )}\n                        \n                        {/* Sorted checkmark */}\n                        {isSorted && (\n                          <motion.div\n                            className=\"absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2\"\n                            initial={{ opacity: 0, scale: 0, rotate: -180 }}\n                            animate={{\n                              opacity: 1,\n                              scale: 1,\n                              rotate: 0\n                            }}\n                            transition={{\n                              type: \"spring\",\n                              stiffness: 200,\n                              damping: 10\n                            }}\n                          >\n                            <div className=\"w-6 h-6 rounded-full bg-green-500/30 backdrop-blur-sm flex items-center justify-center\">\n                              <svg\n                                className=\"w-4 h-4 text-green-300\"\n                                fill=\"none\"\n                                strokeLinecap=\"round\"\n                                strokeLinejoin=\"round\"\n                                strokeWidth=\"3\"\n                                viewBox=\"0 0 24 24\"\n                                stroke=\"currentColor\"\n                              >\n                                <path d=\"M5 13l4 4L19 7\" />\n                              </svg>\n                            </div>\n                          </motion.div>\n                        )}\n                        \n                        {/* Swap trail effect */}\n                        {isSwapping && (\n                          <>\n                            <motion.div\n                              className=\"absolute inset-0 rounded-t-lg\"\n                              initial={{ opacity: 0 }}\n                              animate={{\n                                opacity: [0, 0.5, 0],\n                                scale: [1, 1.2, 1.4]\n                              }}\n                              transition={{\n                                duration: 0.6,\n                                repeat: Infinity,\n                                ease: \"easeOut\"\n                              }}\n                              style={{\n                                background: `radial-gradient(circle, ${barColor}80, transparent)`,\n                                filter: 'blur(8px)'\n                              }}\n                            />\n                            <motion.div\n                              className=\"absolute -inset-2 rounded-t-lg\"\n                              animate={{\n                                opacity: [0.3, 0.6, 0.3],\n                              }}\n                              transition={{\n                                duration: 0.4,\n                                repeat: Infinity,\n                                ease: \"easeInOut\"\n                              }}\n                              style={{\n                                background: `radial-gradient(circle at center, ${barColor}40, transparent 70%)`,\n                                filter: 'blur(12px)'\n                              }}\n                            />\n                          </>\n                        )}\n                      </motion.div>\n                    );\n                  })}\n                  \n                  {/* Comparison connection line */}\n                  {steps[currentStep]?.comparingIndices.length === 2 && (\n                    <motion.svg\n                      className=\"absolute inset-0 pointer-events-none\"\n                      initial={{ opacity: 0 }}\n                      animate={{ opacity: 1 }}\n                      exit={{ opacity: 0 }}\n                    >\n                      <motion.line\n                        x1={`${(steps[currentStep].comparingIndices[0] / array.length) * 100}%`}\n                        y1=\"20%\"\n                        x2={`${(steps[currentStep].comparingIndices[1] / array.length) * 100}%`}\n                        y2=\"20%\"\n                        stroke=\"#ffff00\"\n                        strokeWidth=\"2\"\n                        strokeDasharray=\"5,5\"\n                        initial={{ pathLength: 0 }}\n                        animate={{\n                          pathLength: [0, 1, 0],\n                          opacity: [0.3, 0.8, 0.3]\n                        }}\n                        transition={{\n                          duration: 1,\n                          repeat: Infinity,\n                          ease: \"easeInOut\"\n                        }}\n                        style={{\n                          filter: 'drop-shadow(0 0 8px rgba(255, 255, 0, 0.8))'\n                        }}\n                      />\n                    </motion.svg>\n                  )}\n                </div>\n              )}\n              \n              <div className=\"relative h-full flex items-end justify-center gap-1\">\n                {array.length === 0 ? (\n                  <div className=\"absolute inset-0 flex items-center justify-center\">\n                    <motion.div\n                      initial={{ opacity: 0, scale: 0.8 }}\n                      animate={{ opacity: 1, scale: 1 }}\n                      transition={{ duration: 0.5 }}\n                      className=\"text-center space-y-4\"\n                    >\n                      <motion.div\n                        animate={{\n                          rotate: [0, 360],\n                        }}\n                        transition={{ duration: 3, repeat: Infinity, ease: \"linear\" }}\n                      >\n                        <BarChart3 className=\"w-16 h-16 text-cyan-400 mx-auto\" />\n                      </motion.div>\n                      <p className=\"text-gray-400 text-lg\">Generate an array to start visualizing</p>\n                    </motion.div>\n                  </div>\n                ) : (\n                  array.map((element, index) => {\n                    const isComparing = steps[currentStep]?.comparingIndices.includes(index);\n                    const isSwapping = steps[currentStep]?.swappingIndices.includes(index);\n                    const isSorted = steps[currentStep]?.sortedIndices.includes(index);\n                    \n                    const maxValue = Math.max(...array.map(el => el.value));\n                    const heightPercentage = (element.value / maxValue) * 100;\n                    \n                    let barColor = NEON_COLORS[index % NEON_COLORS.length];\n                    let glowIntensity = 0.3;\n                    let scale = 1;\n                    \n                    if (isSorted) {\n                      barColor = '#00ff00';\n                      glowIntensity = 0.8;\n                    } else if (isSwapping) {\n                      barColor = '#ff0066';\n                      glowIntensity = 1;\n                      scale = 1.1;\n                    } else if (isComparing) {\n                      barColor = '#ffff00';\n                      glowIntensity = 0.7;\n                      scale = 1.05;\n                    }\n                    \n                    return (\n                      <motion.div\n                        key={element.id}\n                        layout\n                        initial={{ height: 0, opacity: 0 }}\n                        animate={{\n                          height: `${heightPercentage}%`,\n                          opacity: 1,\n                          scale: scale,\n                          backgroundColor: barColor,\n                        }}\n                        transition={{\n                          height: { duration: 0.5, ease: \"easeOut\" },\n                          backgroundColor: { duration: 0.3 },\n                          scale: { duration: 0.2, type: \"spring\", stiffness: 300 },\n                          layout: { duration: 0.4, ease: \"easeInOut\" }\n                        }}\n                        className=\"relative rounded-t-lg\"\n                        style={{\n                          flex: 1,\n                          minWidth: array.length > 40 ? '8px' : '16px',\n                          maxWidth: array.length > 40 ? '20px' : '40px',\n                          boxShadow: `0 0 ${20 * glowIntensity}px ${barColor}, 0 0 ${40 * glowIntensity}px ${barColor}`,\n                          border: `1px solid ${barColor}`,\n                        }}\n                      >\n                        {/* Value label for larger bars */}\n                        {array.length <= 20 && (\n                          <motion.div\n                            initial={{ opacity: 0 }}\n                            animate={{ opacity: 1 }}\n                            className=\"absolute -top-6 left-1/2 transform -translate-x-1/2 text-xs font-mono font-semibold whitespace-nowrap\"\n                            style={{\n                              color: barColor,\n                              textShadow: `0 0 10px ${barColor}`,\n                            }}\n                          >\n                            {element.value}\n                          </motion.div>\n                        )}\n                        \n                        {/* Swap trail effect */}\n                        {isSwapping && (\n                          <motion.div\n                            className=\"absolute inset-0 rounded-t-lg\"\n                            initial={{ opacity: 0 }}\n                            animate={{\n                              opacity: [0, 1, 0],\n                              scale: [1, 1.3, 1.5],\n                            }}\n                            transition={{\n                              duration: 0.6,\n                              repeat: Infinity,\n                              ease: \"easeOut\"\n                            }}\n                            style={{\n                              background: `radial-gradient(circle, ${barColor}40, transparent)`,\n                              filter: 'blur(8px)',\n                            }}\n                          />\n                        )}\n                        \n                        {/* Comparison pulse effect */}\n                        {isComparing && (\n                          <motion.div\n                            className=\"absolute -inset-1 rounded-t-lg\"\n                            animate={{\n                              opacity: [0.5, 1, 0.5],\n                            }}\n                            transition={{\n                              duration: 0.8,\n                              repeat: Infinity,\n                              ease: \"easeInOut\"\n                            }}\n                            style={{\n                              border: `2px solid ${barColor}`,\n                              boxShadow: `0 0 20px ${barColor}`,\n                            }}\n                          />\n                        )}\n                        \n                        {/* Sorted checkmark indicator */}\n                        {isSorted && array.length <= 30 && (\n                          <motion.div\n                            initial={{ scale: 0, rotate: -180 }}\n                            animate={{ scale: 1, rotate: 0 }}\n                            transition={{ type: \"spring\", stiffness: 200, damping: 10 }}\n                            className=\"absolute -top-8 left-1/2 transform -translate-x-1/2\"\n                          >\n                            <div\n                              className=\"w-6 h-6 rounded-full flex items-center justify-center text-xs font-bold\"\n                              style={{\n                                backgroundColor: '#00ff0040',\n                                border: '2px solid #00ff00',\n                                boxShadow: '0 0 15px #00ff00',\n                                color: '#00ff00',\n                              }}\n                            >\n                              \u2713\n                            </div>\n                          </motion.div>\n                        )}\n                        \n                        {/* Gradient overlay for depth */}\n                        <div\n                          className=\"absolute inset-0 rounded-t-lg\"\n                          style={{\n                            background: `linear-gradient(to top, ${barColor}00, ${barColor}40)`,\n                            pointerEvents: 'none',\n                          }}\n                        />\n                      </motion.div>\n                    );\n                  })\n                )}\n              </div>\n            </div>\n\n                        <motion.div\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ duration: 0.6, delay: 0.2 }}\n              className=\"mt-6 bg-gray-900/50 backdrop-blur-lg border border-purple-500/30 rounded-xl p-6 shadow-2xl shadow-purple-500/20\"\n            >\n              <div className=\"space-y-3\">\n                <div className=\"flex items-center justify-between\">\n                  <h3 className=\"text-purple-400 font-semibold text-sm uppercase tracking-wider flex items-center gap-2\">\n                    <BarChart3 className=\"w-4 h-4\" />\n                    Sorting Progress\n                  </h3>\n                  <motion.span\n                    className=\"text-2xl font-bold bg-gradient-to-r from-cyan-400 via-purple-400 to-pink-400 bg-clip-text text-transparent\"\n                    key={currentStep}\n                    initial={{ scale: 1.2, opacity: 0 }}\n                    animate={{ scale: 1, opacity: 1 }}\n                    transition={{ duration: 0.3 }}\n                  >\n                    {steps.length > 0 ? Math.round((currentStep / steps.length) * 100) : 0}%\n                  </motion.span>\n                </div>\n\n                <div className=\"relative w-full h-4 bg-gray-800/80 rounded-full overflow-hidden border border-gray-700/50\">\n                  <motion.div\n                    className=\"absolute inset-0 bg-gradient-to-r from-cyan-500 via-purple-500 to-pink-500\"\n                    initial={{ width: 0 }}\n                    animate={{ \n                      width: steps.length > 0 ? `${(currentStep / steps.length) * 100}%` : '0%'\n                    }}\n                    transition={{ \n                      duration: 0.5,\n                      ease: \"easeOut\"\n                    }}\n                    style={{\n                      boxShadow: '0 0 20px rgba(168, 85, 247, 0.8), 0 0 40px rgba(0, 255, 255, 0.6)'\n                    }}\n                  />\n                  \n                  <motion.div\n                    className=\"absolute inset-0 bg-gradient-to-r from-transparent via-white/30 to-transparent\"\n                    animate={{\n                      x: ['-100%', '200%']\n                    }}\n                    transition={{\n                      duration: 2,\n                      repeat: Infinity,\n                      ease: \"linear\"\n                    }}\n                    style={{\n                      width: '50%'\n                    }}\n                  />\n                </div>\n\n                <div className=\"flex justify-between text-xs text-gray-500\">\n                  <span>Step: {currentStep}</span>\n                  <span>Total: {steps.length}</span>\n                </div>\n\n                {currentStep >= steps.length && steps.length > 0 && (\n                  <motion.div\n                    initial={{ opacity: 0, scale: 0.8 }}\n                    animate={{ opacity: 1, scale: 1 }}\n                    transition={{ duration: 0.5 }}\n                    className=\"text-center py-2\"\n                  >\n                    <span className=\"text-green-400 font-semibold text-sm flex items-center justify-center gap-2\">\n                      <motion.span\n                        animate={{\n                          scale: [1, 1.2, 1],\n                          rotate: [0, 360]\n                        }}\n                        transition={{\n                          duration: 0.6,\n                          ease: \"easeInOut\"\n                        }}\n                      >\n                        \u2713\n                      </motion.span>\n                      Sorting Complete!\n                    </span>\n                  </motion.div>\n                )}\n              </div>\n            </motion.div>\n          </div>\n        </div>\n\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.8, delay: 0.4 }}\n          className=\"bg-gray-900/50 backdrop-blur-lg border border-cyan-500/30 rounded-xl p-6 shadow-[0_0_30px_rgba(0,255,255,0.2)]\"\n        >\n          <h3 className=\"text-cyan-400 font-semibold text-sm uppercase tracking-wider mb-4 flex items-center gap-2\">\n            <BarChart3 className=\"w-4 h-4\" />\n            Legend\n          </h3>\n          \n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n            <motion.div\n              whileHover={{ scale: 1.05 }}\n              className=\"flex items-center gap-3 p-3 bg-gray-800/50 rounded-lg border border-gray-700/50 hover:border-cyan-500/50 transition-all duration-300\"\n            >\n              <motion.div\n                className=\"w-6 h-6 rounded bg-gradient-to-br from-cyan-400 to-cyan-600 border-2 border-cyan-300\"\n                animate={{\n                  boxShadow: [\n                    '0 0 10px rgba(34, 211, 238, 0.5)',\n                    '0 0 20px rgba(34, 211, 238, 0.8)',\n                    '0 0 10px rgba(34, 211, 238, 0.5)'\n                  ]\n                }}\n                transition={{ duration: 2, repeat: Infinity }}\n              />\n              <div>\n                <div className=\"text-cyan-300 font-medium text-sm\">Comparing</div>\n                <div className=\"text-gray-500 text-xs\">Active comparison</div>\n              </div>\n            </motion.div>\n\n            <motion.div\n              whileHover={{ scale: 1.05 }}\n              className=\"flex items-center gap-3 p-3 bg-gray-800/50 rounded-lg border border-gray-700/50 hover:border-purple-500/50 transition-all duration-300\"\n            >\n              <motion.div\n                className=\"w-6 h-6 rounded bg-gradient-to-br from-purple-400 to-purple-600 border-2 border-purple-300\"\n                animate={{\n                  boxShadow: [\n                    '0 0 10px rgba(168, 85, 247, 0.5)',\n                    '0 0 20px rgba(168, 85, 247, 0.8)',\n                    '0 0 10px rgba(168, 85, 247, 0.5)'\n                  ]\n                }}\n                transition={{ duration: 2, repeat: Infinity, delay: 0.5 }}\n              />\n              <div>\n                <div className=\"text-purple-300 font-medium text-sm\">Swapping</div>\n                <div className=\"text-gray-500 text-xs\">Elements swapping</div>\n              </div>\n            </motion.div>\n\n            <motion.div\n              whileHover={{ scale: 1.05 }}\n              className=\"flex items-center gap-3 p-3 bg-gray-800/50 rounded-lg border border-gray-700/50 hover:border-green-500/50 transition-all duration-300\"\n            >\n              <motion.div\n                className=\"w-6 h-6 rounded bg-gradient-to-br from-green-400 to-green-600 border-2 border-green-300\"\n                animate={{\n                  boxShadow: [\n                    '0 0 10px rgba(34, 197, 94, 0.5)',\n                    '0 0 20px rgba(34, 197, 94, 0.8)',\n                    '0 0 10px rgba(34, 197, 94, 0.5)'\n                  ]\n                }}\n                transition={{ duration: 2, repeat: Infinity, delay: 1 }}\n              />\n              <div>\n                <div className=\"text-green-300 font-medium text-sm\">Sorted</div>\n                <div className=\"text-gray-500 text-xs\">In final position</div>\n              </div>\n            </motion.div>\n\n            <motion.div\n              whileHover={{ scale: 1.05 }}\n              className=\"flex items-center gap-3 p-3 bg-gray-800/50 rounded-lg border border-gray-700/50 hover:border-gray-500/50 transition-all duration-300\"\n            >\n              <div className=\"w-6 h-6 rounded bg-gradient-to-br from-gray-500 to-gray-700 border-2 border-gray-400\" />\n              <div>\n                <div className=\"text-gray-300 font-medium text-sm\">Unsorted</div>\n                <div className=\"text-gray-500 text-xs\">Awaiting sort</div>\n              </div>\n            </motion.div>\n          </div>\n        </motion.div>\n      </div>\n    </div>\n  );\n}",
    "error": null,
    "elapsed_time": 114.3995590209961,
    "success": true
  }
}