{
  "prompt_id": "dashboard",
  "prompt_name": "Analytics Dashboard",
  "mode": "parallel",
  "run_number": 21,
  "timestamp": "2025-10-14T12:06:19.175377",
  "response_time": 84.35057163238525,
  "total_tokens": null,
  "response_content": "import { useState, useCallback } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Moon, Sun, RefreshCw } from 'lucide-react';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\nimport { PieChart, Pie, Cell } from 'recharts';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';\nimport { BarChart3 } from 'lucide-react';\nimport { motion } from 'framer-motion';\nimport { TrendingUp, TrendingDown, DollarSign, Users, ShoppingCart, Target } from 'lucide-react';\nimport { motion } from 'framer-motion'\nimport { ArrowUpDown, ArrowUp, ArrowDown } from 'lucide-react';\nimport { Badge } from '@/components/ui/badge';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\n;\n\ninterface MetricData {\n  id: string;\n  label: string;\n  value: number;\n  change: number;\n  trend: 'up' | 'down';\n}\n\ninterface ChartDataPoint {\n  date: string;\n  revenue: number;\n  users: number;\n  orders: number;\n}\n\ninterface TableRow {\n  id: string;\n  product: string;\n  sales: number;\n  revenue: number;\n  status: 'active' | 'pending' | 'inactive';\n}\n\nconst mockMetrics: MetricData[] = [\n  { id: '1', label: 'Total Revenue', value: 45231, change: 12.5, trend: 'up' },\n  { id: '2', label: 'Active Users', value: 2350, change: 8.2, trend: 'up' },\n  { id: '3', label: 'Total Orders', value: 1543, change: -3.1, trend: 'down' },\n  { id: '4', label: 'Conversion Rate', value: 3.24, change: 5.7, trend: 'up' }\n];\n\nconst mockChartData: ChartDataPoint[] = [\n  { date: '2024-01-01', revenue: 12000, users: 450, orders: 230 },\n  { date: '2024-01-02', revenue: 15000, users: 520, orders: 280 },\n  { date: '2024-01-03', revenue: 13500, users: 490, orders: 250 },\n  { date: '2024-01-04', revenue: 18000, users: 610, orders: 320 },\n  { date: '2024-01-05', revenue: 16500, users: 580, orders: 295 },\n  { date: '2024-01-06', revenue: 20000, users: 680, orders: 360 },\n  { date: '2024-01-07', revenue: 22000, users: 720, orders: 390 }\n];\n\nconst mockTableData: TableRow[] = [\n  { id: '1', product: 'Premium Plan', sales: 234, revenue: 23400, status: 'active' },\n  { id: '2', product: 'Basic Plan', sales: 567, revenue: 11340, status: 'active' },\n  { id: '3', product: 'Enterprise Plan', sales: 89, revenue: 17800, status: 'active' },\n  { id: '4', product: 'Starter Plan', sales: 432, revenue: 4320, status: 'pending' },\n  { id: '5', product: 'Pro Plan', sales: 156, revenue: 15600, status: 'inactive' }\n];\n\nconst mockTrafficData = [\n  { name: 'Organic Search', value: 4200, color: '#3b82f6' },\n  { name: 'Direct', value: 2800, color: '#10b981' },\n  { name: 'Social Media', value: 2100, color: '#f59e0b' },\n  { name: 'Referral', value: 1500, color: '#8b5cf6' },\n  { name: 'Email', value: 900, color: '#ec4899' }\n];\n\ninterface FunnelStage {\n  label: string;\n  value: number;\n  percentage: number;\n}\n\nconst mockFunnelData: FunnelStage[] = [\n  { label: 'Visitors', value: 10000, percentage: 100 },\n  { label: 'Product Views', value: 6500, percentage: 65 },\n  { label: 'Add to Cart', value: 3200, percentage: 32 },\n  { label: 'Checkout', value: 1800, percentage: 18 },\n  { label: 'Purchase', value: 1200, percentage: 12 }\n];\n\ntype SortField = 'product' | 'sales' | 'revenue' | 'status';\ntype SortDirection = 'asc' | 'desc' | null;\n\nconst ProductTable = ({ \n  data, \n  isDarkMode \n}: { \n  data: TableRow[]; \n  isDarkMode: boolean;\n}) => {\n  const [sortField, setSortField] = useState<SortField | null>(null);\n  const [sortDirection, setSortDirection] = useState<SortDirection>(null);\n\n  const handleSort = (field: SortField) => {\n    if (sortField === field) {\n      if (sortDirection === 'asc') {\n        setSortDirection('desc');\n      } else if (sortDirection === 'desc') {\n        setSortDirection(null);\n        setSortField(null);\n      } else {\n        setSortDirection('asc');\n      }\n    } else {\n      setSortField(field);\n      setSortDirection('asc');\n    }\n  };\n\n  const sortedData = [...data].sort((a, b) => {\n    if (!sortField || !sortDirection) return 0;\n\n    let aValue = a[sortField];\n    let bValue = b[sortField];\n\n    if (typeof aValue === 'string') {\n      aValue = aValue.toLowerCase();\n      bValue = (bValue as string).toLowerCase();\n    }\n\n    if (sortDirection === 'asc') {\n      return aValue > bValue ? 1 : -1;\n    } else {\n      return aValue < bValue ? 1 : -1;\n    }\n  });\n\n  const formatCurrency = (value: number) => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0\n    }).format(value);\n  };\n\n  const formatNumber = (value: number) => {\n    return new Intl.NumberFormat('en-US').format(value);\n  };\n\n  const getStatusBadge = (status: 'active' | 'pending' | 'inactive') => {\n    const variants = {\n      active: 'default',\n      pending: 'secondary',\n      inactive: 'outline'\n    } as const;\n\n    const colors = {\n      active: 'bg-green-500 hover:bg-green-600 text-white',\n      pending: 'bg-yellow-500 hover:bg-yellow-600 text-white',\n      inactive: isDarkMode ? 'border-gray-600 text-gray-400' : 'border-gray-300 text-gray-600'\n    };\n\n    return (\n      <Badge variant={variants[status]} className={colors[status]}>\n        {status.charAt(0).toUpperCase() + status.slice(1)}\n      </Badge>\n    );\n  };\n\n  const SortIcon = ({ field }: { field: SortField }) => {\n    if (sortField !== field) {\n      return <ArrowUpDown className=\"ml-2 h-4 w-4\" />;\n    }\n    if (sortDirection === 'asc') {\n      return <ArrowUp className=\"ml-2 h-4 w-4\" />;\n    }\n    if (sortDirection === 'desc') {\n      return <ArrowDown className=\"ml-2 h-4 w-4\" />;\n    }\n    return <ArrowUpDown className=\"ml-2 h-4 w-4\" />;\n  };\n\n  return (\n    <div className=\"w-full overflow-x-auto\">\n      <Table>\n        <TableHeader>\n          <TableRow className={isDarkMode ? 'border-gray-700 hover:bg-gray-750' : ''}>\n            <TableHead \n              className={`cursor-pointer select-none ${isDarkMode ? 'text-gray-300' : ''}`}\n              onClick={() => handleSort('product')}\n            >\n              <div className=\"flex items-center\">\n                Product\n                <SortIcon field=\"product\" />\n              </div>\n            </TableHead>\n            <TableHead \n              className={`cursor-pointer select-none ${isDarkMode ? 'text-gray-300' : ''}`}\n              onClick={() => handleSort('sales')}\n            >\n              <div className=\"flex items-center\">\n                Sales\n                <SortIcon field=\"sales\" />\n              </div>\n            </TableHead>\n            <TableHead \n              className={`cursor-pointer select-none ${isDarkMode ? 'text-gray-300' : ''}`}\n              onClick={() => handleSort('revenue')}\n            >\n              <div className=\"flex items-center\">\n                Revenue\n                <SortIcon field=\"revenue\" />\n              </div>\n            </TableHead>\n            <TableHead \n              className={`cursor-pointer select-none ${isDarkMode ? 'text-gray-300' : ''}`}\n              onClick={() => handleSort('status')}\n            >\n              <div className=\"flex items-center\">\n                Status\n                <SortIcon field=\"status\" />\n              </div>\n            </TableHead>\n          </TableRow>\n        </TableHeader>\n        <TableBody>\n          {sortedData.map((row, index) => (\n            <motion.tr\n              key={row.id}\n              initial={{ opacity: 0, y: 10 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ delay: index * 0.05 }}\n              className={`border-b ${\n                isDarkMode \n                  ? 'border-gray-700 hover:bg-gray-750' \n                  : 'hover:bg-gray-50'\n              }`}\n            >\n              <TableCell className={`font-medium ${isDarkMode ? 'text-white' : ''}`}>\n                {row.product}\n              </TableCell>\n              <TableCell className={isDarkMode ? 'text-gray-300' : ''}>\n                {formatNumber(row.sales)}\n              </TableCell>\n              <TableCell className={`font-semibold ${isDarkMode ? 'text-gray-300' : ''}`}>\n                {formatCurrency(row.revenue)}\n              </TableCell>\n              <TableCell>\n                {getStatusBadge(row.status)}\n              </TableCell>\n            </motion.tr>\n          ))}\n        </TableBody>\n      </Table>\n    </div>\n  );\n};\n</parameter>\n</invoke>\nexport default function AnalyticsDashboard() {\n  const [isDarkMode, setIsDarkMode] = useState(false);\n  const [metrics, setMetrics] = useState<MetricData[]>(mockMetrics);\n  const [chartData, setChartData] = useState<ChartDataPoint[]>(mockChartData);\n  const [tableData, setTableData] = useState<TableRow[]>(mockTableData);\n  const [isRefreshing, setIsRefreshing] = useState(false);\n\n  const toggleDarkMode = useCallback(() => {\n    setIsDarkMode(prev => !prev);\n  }, []);\n\n  const handleRefresh = useCallback(() => {\n    setIsRefreshing(true);\n    \n    setTimeout(() => {\n      // Simulate data refresh with random variations\n      const updatedChartData = chartData.map(point => ({\n        ...point,\n        users: Math.floor(point.users * (0.9 + Math.random() * 0.2))\n      }));\n      setChartData(updatedChartData);\n      setIsRefreshing(false);\n    }, 1000);\n    setIsRefreshing(true);\n    \n    setTimeout(() => {\n      // Generate updated metrics with random variations\n      const updatedMetrics = mockMetrics.map(metric => ({\n        ...metric,\n        value: metric.value + Math.floor(Math.random() * 200 - 100),\n        change: parseFloat((Math.random() * 20 - 5).toFixed(1)),\n        trend: Math.random() > 0.5 ? 'up' as const : 'down' as const\n      }));\n      \n      // Generate updated chart data with random variations\n      const updatedChartData = mockChartData.map(point => ({\n        ...point,\n        revenue: point.revenue + Math.floor(Math.random() * 4000 - 2000),\n        users: point.users + Math.floor(Math.random() * 100 - 50),\n        orders: point.orders + Math.floor(Math.random() * 50 - 25)\n      }));\n      \n      // Generate updated table data with random variations\n      const updatedTableData = mockTableData.map(row => ({\n        ...row,\n        sales: row.sales + Math.floor(Math.random() * 40 - 20),\n        revenue: row.revenue + Math.floor(Math.random() * 2000 - 1000)\n      }));\n      \n      setMetrics(updatedMetrics);\n      setChartData(updatedChartData);\n      setTableData(updatedTableData);\n      setIsRefreshing(false);\n    }, 1500);\n  }, []);\n\n  return (\n    <div className={`min-h-screen transition-colors duration-300 ${isDarkMode ? 'dark bg-gray-900' : 'bg-gray-50'}`}>\n      <div className=\"container mx-auto p-4 md:p-6 lg:p-8\">\n        <div className=\"flex flex-col md:flex-row md:items-center md:justify-between mb-8 gap-4\">\n          <div>\n            <h1 className={`text-3xl md:text-4xl font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n              Analytics Dashboard\n            </h1>\n            <p className={`mt-2 ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n              Real-time insights and performance metrics\n            </p>\n          </div>\n          \n          <div className=\"flex items-center gap-3\">\n            <Button\n              variant=\"outline\"\n              size=\"icon\"\n              onClick={toggleDarkMode}\n              className={isDarkMode ? 'border-gray-700 hover:bg-gray-800' : ''}\n            >\n              {isDarkMode ? <Sun className=\"h-5 w-5\" /> : <Moon className=\"h-5 w-5\" />}\n            </Button>\n            \n            <Button\n              variant=\"outline\"\n              onClick={handleRefresh}\n              disabled={isRefreshing}\n              className={isDarkMode ? 'border-gray-700 hover:bg-gray-800' : ''}\n            >\n              <RefreshCw className={`h-4 w-4 mr-2 ${isRefreshing ? 'animate-spin' : ''}`} />\n              Refresh\n            </Button>\n          </div>\n        </div>\n\n        <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 md:gap-6 mb-8\">\n          {metrics.map((metric, index) => {\n            const Icon = metric.label.includes('Revenue') ? DollarSign :\n                        metric.label.includes('Users') ? Users :\n                        metric.label.includes('Orders') ? ShoppingCart :\n                        Target;\n            \n            const TrendIcon = metric.trend === 'up' ? TrendingUp : TrendingDown;\n            const trendColor = metric.trend === 'up' ? 'text-green-500' : 'text-red-500';\n            const trendBgColor = metric.trend === 'up' ? 'bg-green-50 dark:bg-green-900/20' : 'bg-red-50 dark:bg-red-900/20';\n\n            return (\n              <motion.div\n                key={metric.id}\n                initial={{ opacity: 0, y: 20 }}\n                animate={{ opacity: 1, y: 0 }}\n                transition={{ duration: 0.4, delay: index * 0.1 }}\n              >\n                <Card className={`${isDarkMode ? 'bg-gray-800 border-gray-700' : 'bg-white'} hover:shadow-lg transition-shadow duration-300`}>\n                  <CardHeader className=\"flex flex-row items-center justify-between pb-2\">\n                    <CardTitle className={`text-sm font-medium ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                      {metric.label}\n                    </CardTitle>\n                    <div className={`p-2 rounded-lg ${isDarkMode ? 'bg-gray-700' : 'bg-gray-100'}`}>\n                      <Icon className={`h-4 w-4 ${isDarkMode ? 'text-gray-300' : 'text-gray-600'}`} />\n                    </div>\n                  </CardHeader>\n                  <CardContent>\n                    <div className={`text-2xl font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                      {metric.label.includes('Revenue') ? `$${metric.value.toLocaleString()}` :\n                       metric.label.includes('Rate') ? `${metric.value}%` :\n                       metric.value.toLocaleString()}\n                    </div>\n                    <div className=\"flex items-center mt-2\">\n                      <div className={`flex items-center gap-1 px-2 py-1 rounded-full ${trendBgColor}`}>\n                        <TrendIcon className={`h-3 w-3 ${trendColor}`} />\n                        <span className={`text-xs font-medium ${trendColor}`}>\n                          {Math.abs(metric.change)}%\n                        </span>\n                      </div>\n                      <span className={`text-xs ml-2 ${isDarkMode ? 'text-gray-400' : 'text-gray-500'}`}>\n                        vs last period\n                      </span>\n                    </div>\n                  </CardContent>\n                </Card>\n              </motion.div>\n            );\n          })}\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6 mb-8\">\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Revenue Overview</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Daily revenue trends for the past week\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"w-full h-[300px] md:h-[350px]\">\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <LineChart\n                    data={chartData}\n                    margin={{ top: 5, right: 10, left: 0, bottom: 5 }}\n                  >\n                    <CartesianGrid \n                      strokeDasharray=\"3 3\" \n                      stroke={isDarkMode ? '#374151' : '#e5e7eb'}\n                    />\n                    <XAxis \n                      dataKey=\"date\" \n                      stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                      tick={{ fill: isDarkMode ? '#9ca3af' : '#6b7280', fontSize: 12 }}\n                      tickFormatter={(value) => new Date(value).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n                    />\n                    <YAxis \n                      stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                      tick={{ fill: isDarkMode ? '#9ca3af' : '#6b7280', fontSize: 12 }}\n                      tickFormatter={(value) => `$${(value / 1000).toFixed(0)}k`}\n                    />\n                    <Tooltip \n                      contentStyle={{\n                        backgroundColor: isDarkMode ? '#1f2937' : '#ffffff',\n                        border: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\n                        borderRadius: '8px',\n                        color: isDarkMode ? '#ffffff' : '#000000'\n                      }}\n                      labelStyle={{ color: isDarkMode ? '#9ca3af' : '#6b7280' }}\n                      formatter={(value: number) => [`$${value.toLocaleString()}`, 'Revenue']}\n                      labelFormatter={(label) => new Date(label).toLocaleDateString('en-US', { month: 'long', day: 'numeric', year: 'numeric' })}\n                    />\n                    <Line \n                      type=\"monotone\" \n                      dataKey=\"revenue\" \n                      stroke=\"#3b82f6\" \n                      strokeWidth={2}\n                      dot={{ fill: '#3b82f6', r: 4 }}\n                      activeDot={{ r: 6, fill: '#2563eb' }}\n                    />\n                  </LineChart>\n                </ResponsiveContainer>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>User Activity</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Active users and engagement metrics\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"relative h-[300px] w-full\">\n                <svg className=\"w-full h-full\" viewBox=\"0 0 700 300\" preserveAspectRatio=\"none\">\n                  <defs>\n                    <linearGradient id=\"userGradient\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                      <stop offset=\"0%\" stopColor={isDarkMode ? \"#3b82f6\" : \"#60a5fa\"} stopOpacity=\"0.6\" />\n                      <stop offset=\"100%\" stopColor={isDarkMode ? \"#3b82f6\" : \"#60a5fa\"} stopOpacity=\"0.05\" />\n                    </linearGradient>\n                  </defs>\n                  \n                  {/* Grid lines */}\n                  {[0, 1, 2, 3, 4].map((i) => (\n                    <line\n                      key={i}\n                      x1=\"0\"\n                      y1={i * 75}\n                      x2=\"700\"\n                      y2={i * 75}\n                      stroke={isDarkMode ? '#374151' : '#e5e7eb'}\n                      strokeWidth=\"1\"\n                    />\n                  ))}\n                  \n                  {/* Area chart */}\n                  <motion.path\n                    initial={{ opacity: 0 }}\n                    animate={{ opacity: 1 }}\n                    transition={{ duration: 0.8 }}\n                    d={(() => {\n                      const maxUsers = Math.max(...chartData.map(d => d.users));\n                      const points = chartData.map((d, i) => {\n                        const x = (i / (chartData.length - 1)) * 700;\n                        const y = 300 - (d.users / maxUsers) * 250;\n                        return `${x},${y}`;\n                      });\n                      return `M 0,300 L ${points.join(' L ')} L 700,300 Z`;\n                    })()}\n                    fill=\"url(#userGradient)\"\n                  />\n                  \n                  {/* Line */}\n                  <motion.path\n                    initial={{ pathLength: 0 }}\n                    animate={{ pathLength: 1 }}\n                    transition={{ duration: 1.2, ease: \"easeInOut\" }}\n                    d={(() => {\n                      const maxUsers = Math.max(...chartData.map(d => d.users));\n                      const points = chartData.map((d, i) => {\n                        const x = (i / (chartData.length - 1)) * 700;\n                        const y = 300 - (d.users / maxUsers) * 250;\n                        return `${x},${y}`;\n                      });\n                      return `M ${points.join(' L ')}`;\n                    })()}\n                    fill=\"none\"\n                    stroke={isDarkMode ? \"#3b82f6\" : \"#2563eb\"}\n                    strokeWidth=\"3\"\n                    strokeLinecap=\"round\"\n                    strokeLinejoin=\"round\"\n                  />\n                  \n                  {/* Data points with hover effect */}\n                  {chartData.map((d, i) => {\n                    const maxUsers = Math.max(...chartData.map(d => d.users));\n                    const x = (i / (chartData.length - 1)) * 700;\n                    const y = 300 - (d.users / maxUsers) * 250;\n                    \n                    return (\n                      <g key={i}>\n                        <motion.circle\n                          initial={{ scale: 0 }}\n                          animate={{ scale: 1 }}\n                          transition={{ duration: 0.3, delay: i * 0.1 }}\n                          cx={x}\n                          cy={y}\n                          r=\"5\"\n                          fill={isDarkMode ? \"#1e40af\" : \"#2563eb\"}\n                          className=\"cursor-pointer transition-all hover:r-8\"\n                          style={{ filter: 'drop-shadow(0 2px 4px rgba(0,0,0,0.2))' }}\n                        />\n                        <circle\n                          cx={x}\n                          cy={y}\n                          r=\"12\"\n                          fill=\"transparent\"\n                          className=\"cursor-pointer\"\n                        >\n                          <title>{`${d.date}: ${d.users} users`}</title>\n                        </circle>\n                      </g>\n                    );\n                  })}\n                </svg>\n                \n                {/* X-axis labels */}\n                <div className=\"flex justify-between mt-2 px-1\">\n                  {chartData.map((d, i) => (\n                    <span\n                      key={i}\n                      className={`text-xs ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}\n                    >\n                      {new Date(d.date).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n                    </span>\n                  ))}\n                </div>\n                \n                {/* Y-axis label */}\n                <div className=\"absolute left-0 top-1/2 -translate-y-1/2 -translate-x-8\">\n                  <span className={`text-xs ${isDarkMode ? 'text-gray-400' : 'text-gray-600'} -rotate-90 inline-block`}>\n                    Users\n                  </span>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6 mb-8\">\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Orders Distribution</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Order volume by category\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {chartData.map((dataPoint, index) => {\n                  const maxOrders = Math.max(...chartData.map(d => d.orders));\n                  const percentage = (dataPoint.orders / maxOrders) * 100;\n                  \n                  // Color coding based on order volume\n                  const getBarColor = (orders: number) => {\n                    if (orders >= 350) return isDarkMode ? 'bg-green-500' : 'bg-green-600';\n                    if (orders >= 300) return isDarkMode ? 'bg-blue-500' : 'bg-blue-600';\n                    if (orders >= 250) return isDarkMode ? 'bg-yellow-500' : 'bg-yellow-600';\n                    return isDarkMode ? 'bg-orange-500' : 'bg-orange-600';\n                  };\n\n                  return (\n                    <div key={index} className=\"space-y-2\">\n                      <div className=\"flex items-center justify-between text-sm\">\n                        <span className={isDarkMode ? 'text-gray-300' : 'text-gray-700'}>\n                          {new Date(dataPoint.date).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n                        </span>\n                        <span className={`font-semibold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                          {dataPoint.orders}\n                        </span>\n                      </div>\n                      <div className={`w-full h-8 rounded-full overflow-hidden ${isDarkMode ? 'bg-gray-700' : 'bg-gray-200'}`}>\n                        <div\n                          className={`h-full ${getBarColor(dataPoint.orders)} transition-all duration-500 ease-out flex items-center justify-end pr-3`}\n                          style={{ width: `${percentage}%` }}\n                        >\n                          {percentage > 20 && (\n                            <BarChart3 className=\"h-4 w-4 text-white\" />\n                          )}\n                        </div>\n                      </div>\n                    </div>\n                  );\n                })}\n                \n                <div className=\"pt-4 mt-4 border-t border-gray-200 dark:border-gray-700\">\n                  <div className=\"flex items-center justify-between text-sm\">\n                    <span className={isDarkMode ? 'text-gray-400' : 'text-gray-600'}>\n                      Total Orders\n                    </span>\n                    <span className={`font-bold text-lg ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                      {chartData.reduce((sum, d) => sum + d.orders, 0)}\n                    </span>\n                  </div>\n                  <div className=\"flex items-center gap-4 mt-3 flex-wrap\">\n                    <div className=\"flex items-center gap-2\">\n                      <div className={`w-3 h-3 rounded ${isDarkMode ? 'bg-green-500' : 'bg-green-600'}`}></div>\n                      <span className={`text-xs ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>High (350+)</span>\n                    </div>\n                    <div className=\"flex items-center gap-2\">\n                      <div className={`w-3 h-3 rounded ${isDarkMode ? 'bg-blue-500' : 'bg-blue-600'}`}></div>\n                      <span className={`text-xs ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>Good (300+)</span>\n                    </div>\n                    <div className=\"flex items-center gap-2\">\n                      <div className={`w-3 h-3 rounded ${isDarkMode ? 'bg-yellow-500' : 'bg-yellow-600'}`}></div>\n                      <span className={`text-xs ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>Medium (250+)</span>\n                    </div>\n                    <div className=\"flex items-center gap-2\">\n                      <div className={`w-3 h-3 rounded ${isDarkMode ? 'bg-orange-500' : 'bg-orange-600'}`}></div>\n                      <span className={`text-xs ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>Low (&lt;250)</span>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className={`lg:col-span-2 ${isDarkMode ? 'bg-gray-800 border-gray-700' : ''}`}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Performance Comparison</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Multi-metric comparison over time\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <ResponsiveContainer width=\"100%\" height={300}>\n                <LineChart data={chartData}>\n                  <CartesianGrid \n                    strokeDasharray=\"3 3\" \n                    stroke={isDarkMode ? '#374151' : '#e5e7eb'} \n                  />\n                  <XAxis \n                    dataKey=\"date\" \n                    stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                    tick={{ fill: isDarkMode ? '#9ca3af' : '#6b7280' }}\n                    tickFormatter={(value) => new Date(value).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n                  />\n                  <YAxis \n                    stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                    tick={{ fill: isDarkMode ? '#9ca3af' : '#6b7280' }}\n                  />\n                  <Tooltip \n                    contentStyle={{\n                      backgroundColor: isDarkMode ? '#1f2937' : '#ffffff',\n                      border: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\n                      borderRadius: '8px',\n                      color: isDarkMode ? '#ffffff' : '#000000'\n                    }}\n                    labelFormatter={(value) => new Date(value).toLocaleDateString('en-US', { month: 'long', day: 'numeric', year: 'numeric' })}\n                    formatter={(value: number, name: string) => {\n                      if (name === 'revenue') return [`$${value.toLocaleString()}`, 'Revenue'];\n                      if (name === 'users') return [value.toLocaleString(), 'Users'];\n                      if (name === 'orders') return [value.toLocaleString(), 'Orders'];\n                      return [value, name];\n                    }}\n                  />\n                  <Legend \n                    wrapperStyle={{ color: isDarkMode ? '#9ca3af' : '#6b7280' }}\n                    formatter={(value) => {\n                      if (value === 'revenue') return 'Revenue';\n                      if (value === 'users') return 'Users';\n                      if (value === 'orders') return 'Orders';\n                      return value;\n                    }}\n                  />\n                  <Line \n                    type=\"monotone\" \n                    dataKey=\"revenue\" \n                    stroke=\"#3b82f6\" \n                    strokeWidth={2}\n                    dot={{ fill: '#3b82f6', r: 4 }}\n                    activeDot={{ r: 6 }}\n                  />\n                  <Line \n                    type=\"monotone\" \n                    dataKey=\"users\" \n                    stroke=\"#10b981\" \n                    strokeWidth={2}\n                    dot={{ fill: '#10b981', r: 4 }}\n                    activeDot={{ r: 6 }}\n                  />\n                  <Line \n                    type=\"monotone\" \n                    dataKey=\"orders\" \n                    stroke=\"#f59e0b\" \n                    strokeWidth={2}\n                    dot={{ fill: '#f59e0b', r: 4 }}\n                    activeDot={{ r: 6 }}\n                  />\n                </LineChart>\n              </ResponsiveContainer>\n            </CardContent>\n          </Card>\n        </div>\n\n        <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n          <CardHeader>\n            <CardTitle className={isDarkMode ? 'text-white' : ''}>Top Products</CardTitle>\n            <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n              Best performing products by sales and revenue\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            {/* TODO:ProductTable Render responsive data table with sorting, status badges, and formatted numbers */}\n          </CardContent>\n        </Card>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mt-8\">\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Conversion Funnel</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                User journey and drop-off rates\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {mockFunnelData.map((stage, index) => {\n                  const widthPercentage = stage.percentage;\n                  const dropOffRate = index > 0 \n                    ? ((mockFunnelData[index - 1].value - stage.value) / mockFunnelData[index - 1].value * 100).toFixed(1)\n                    : 0;\n\n                  return (\n                    <motion.div\n                      key={stage.label}\n                      initial={{ opacity: 0, x: -20 }}\n                      animate={{ opacity: 1, x: 0 }}\n                      transition={{ duration: 0.4, delay: index * 0.1 }}\n                      className=\"relative\"\n                    >\n                      <div className=\"flex items-center justify-between mb-2\">\n                        <span className={`text-sm font-medium ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>\n                          {stage.label}\n                        </span>\n                        <div className=\"flex items-center gap-3\">\n                          <span className={`text-sm ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                            {stage.value.toLocaleString()}\n                          </span>\n                          <span className={`text-sm font-semibold ${isDarkMode ? 'text-blue-400' : 'text-blue-600'}`}>\n                            {stage.percentage}%\n                          </span>\n                        </div>\n                      </div>\n                      \n                      <div className=\"relative h-12 flex items-center justify-center\">\n                        <motion.div\n                          initial={{ width: 0 }}\n                          animate={{ width: `${widthPercentage}%` }}\n                          transition={{ duration: 0.8, delay: index * 0.1, ease: \"easeOut\" }}\n                          className={`h-full rounded ${\n                            index === 0 ? 'bg-blue-500' :\n                            index === 1 ? 'bg-blue-400' :\n                            index === 2 ? 'bg-blue-300' :\n                            index === 3 ? 'bg-blue-200' :\n                            'bg-blue-100'\n                          } shadow-md flex items-center justify-center`}\n                          style={{\n                            clipPath: index === mockFunnelData.length - 1 \n                              ? 'polygon(5% 0%, 95% 0%, 90% 100%, 10% 100%)'\n                              : 'polygon(5% 0%, 95% 0%, 100% 100%, 0% 100%)'\n                          }}\n                        >\n                          <span className={`text-xs font-semibold ${\n                            index <= 2 ? 'text-white' : isDarkMode ? 'text-gray-800' : 'text-gray-700'\n                          }`}>\n                            {stage.percentage}%\n                          </span>\n                        </motion.div>\n                      </div>\n                      \n                      {index > 0 && dropOffRate !== 0 && (\n                        <div className=\"flex items-center justify-end mt-1\">\n                          <span className={`text-xs ${isDarkMode ? 'text-red-400' : 'text-red-500'}`}>\n                            \u2193 {dropOffRate}% drop-off\n                          </span>\n                        </div>\n                      )}\n                    </motion.div>\n                  );\n                })}\n                \n                <div className={`mt-6 p-4 rounded-lg ${isDarkMode ? 'bg-gray-700/50' : 'bg-gray-100'}`}>\n                  <div className=\"flex items-center justify-between\">\n                    <span className={`text-sm font-medium ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>\n                      Overall Conversion Rate\n                    </span>\n                    <span className={`text-lg font-bold ${isDarkMode ? 'text-green-400' : 'text-green-600'}`}>\n                      {((mockFunnelData[mockFunnelData.length - 1].value / mockFunnelData[0].value) * 100).toFixed(1)}%\n                    </span>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Traffic Sources</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Visitor sources breakdown\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                <ResponsiveContainer width=\"100%\" height={240}>\n                  <PieChart>\n                    <Pie\n                      data={mockTrafficData}\n                      cx=\"50%\"\n                      cy=\"50%\"\n                      innerRadius={60}\n                      outerRadius={90}\n                      paddingAngle={2}\n                      dataKey=\"value\"\n                    >\n                      {mockTrafficData.map((entry, index) => (\n                        <Cell key={`cell-${index}`} fill={entry.color} />\n                      ))}\n                    </Pie>\n                    <Tooltip\n                      contentStyle={{\n                        backgroundColor: isDarkMode ? '#1f2937' : '#ffffff',\n                        border: isDarkMode ? '1px solid #374151' : '1px solid #e5e7eb',\n                        borderRadius: '8px',\n                        color: isDarkMode ? '#ffffff' : '#000000'\n                      }}\n                      formatter={(value: number) => [`${value.toLocaleString()} visitors`, 'Traffic']}\n                    />\n                  </PieChart>\n                </ResponsiveContainer>\n                \n                <div className=\"space-y-2\">\n                  {mockTrafficData.map((source, index) => {\n                    const total = mockTrafficData.reduce((sum, item) => sum + item.value, 0);\n                    const percentage = ((source.value / total) * 100).toFixed(1);\n                    \n                    return (\n                      <div key={index} className=\"flex items-center justify-between\">\n                        <div className=\"flex items-center gap-2\">\n                          <div\n                            className=\"w-3 h-3 rounded-full\"\n                            style={{ backgroundColor: source.color }}\n                          />\n                          <span className={`text-sm ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>\n                            {source.name}\n                          </span>\n                        </div>\n                        <div className=\"flex items-center gap-3\">\n                          <span className={`text-sm font-medium ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                            {percentage}%\n                          </span>\n                          <span className={`text-sm font-semibold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                            {source.value.toLocaleString()}\n                          </span>\n                        </div>\n                      </div>\n                    );\n                  })}\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Recent Activity</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Latest system events\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"max-h-[400px] overflow-y-auto space-y-3 pr-2\">\n                {[\n                  { id: '1', type: 'sale', message: 'New order placed - Premium Plan', time: '2 minutes ago', icon: ShoppingCart, color: 'text-green-500', bgColor: 'bg-green-50 dark:bg-green-900/20' },\n                  { id: '2', type: 'user', message: 'New user registration', time: '15 minutes ago', icon: Users, color: 'text-blue-500', bgColor: 'bg-blue-50 dark:bg-blue-900/20' },\n                  { id: '3', type: 'revenue', message: 'Payment received - $450', time: '32 minutes ago', icon: DollarSign, color: 'text-emerald-500', bgColor: 'bg-emerald-50 dark:bg-emerald-900/20' },\n                  { id: '4', type: 'target', message: 'Monthly goal 75% complete', time: '1 hour ago', icon: Target, color: 'text-purple-500', bgColor: 'bg-purple-50 dark:bg-purple-900/20' },\n                  { id: '5', type: 'sale', message: 'Order completed - Enterprise Plan', time: '2 hours ago', icon: ShoppingCart, color: 'text-green-500', bgColor: 'bg-green-50 dark:bg-green-900/20' },\n                  { id: '6', type: 'user', message: '5 new users joined today', time: '3 hours ago', icon: Users, color: 'text-blue-500', bgColor: 'bg-blue-50 dark:bg-blue-900/20' },\n                  { id: '7', type: 'revenue', message: 'Subscription renewed - $199', time: '4 hours ago', icon: DollarSign, color: 'text-emerald-500', bgColor: 'bg-emerald-50 dark:bg-emerald-900/20' },\n                  { id: '8', type: 'sale', message: 'Bulk order - 10 licenses', time: '5 hours ago', icon: ShoppingCart, color: 'text-green-500', bgColor: 'bg-green-50 dark:bg-green-900/20' }\n                ].map((activity) => {\n                  const ActivityIcon = activity.icon;\n                  return (\n                    <motion.div\n                      key={activity.id}\n                      initial={{ opacity: 0, x: -20 }}\n                      animate={{ opacity: 1, x: 0 }}\n                      transition={{ duration: 0.3 }}\n                      className={`flex items-start gap-3 p-3 rounded-lg ${isDarkMode ? 'hover:bg-gray-700/50' : 'hover:bg-gray-50'} transition-colors duration-200`}\n                    >\n                      <div className={`p-2 rounded-full ${activity.bgColor} flex-shrink-0`}>\n                        <ActivityIcon className={`h-4 w-4 ${activity.color}`} />\n                      </div>\n                      <div className=\"flex-1 min-w-0\">\n                        <p className={`text-sm font-medium ${isDarkMode ? 'text-gray-200' : 'text-gray-900'}`}>\n                          {activity.message}\n                        </p>\n                        <p className={`text-xs mt-1 ${isDarkMode ? 'text-gray-500' : 'text-gray-500'}`}>\n                          {activity.time}\n                        </p>\n                      </div>\n                    </motion.div>\n                  );\n                })}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}\n",
  "error": null,
  "overall_score": 52,
  "code_quality_score": 12,
  "architecture_score": 14,
  "performance_score": 10,
  "accessibility_score": 16,
  "metadata": {
    "document_id": "eval_room_d06ad0ada7d4",
    "prompt_category": "intermediate",
    "prompt_complexity": 6.0
  },
  "raw_response": {
    "document_id": "eval_room_d06ad0ada7d4",
    "mode": "parallel",
    "prompt": "Generate an analytics dashboard page with charts, data tables, real-time updates, dark mode, and responsive design",
    "content": "import { useState, useCallback } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Moon, Sun, RefreshCw } from 'lucide-react';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\nimport { PieChart, Pie, Cell } from 'recharts';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';\nimport { BarChart3 } from 'lucide-react';\nimport { motion } from 'framer-motion';\nimport { TrendingUp, TrendingDown, DollarSign, Users, ShoppingCart, Target } from 'lucide-react';\nimport { motion } from 'framer-motion'\nimport { ArrowUpDown, ArrowUp, ArrowDown } from 'lucide-react';\nimport { Badge } from '@/components/ui/badge';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\n;\n\ninterface MetricData {\n  id: string;\n  label: string;\n  value: number;\n  change: number;\n  trend: 'up' | 'down';\n}\n\ninterface ChartDataPoint {\n  date: string;\n  revenue: number;\n  users: number;\n  orders: number;\n}\n\ninterface TableRow {\n  id: string;\n  product: string;\n  sales: number;\n  revenue: number;\n  status: 'active' | 'pending' | 'inactive';\n}\n\nconst mockMetrics: MetricData[] = [\n  { id: '1', label: 'Total Revenue', value: 45231, change: 12.5, trend: 'up' },\n  { id: '2', label: 'Active Users', value: 2350, change: 8.2, trend: 'up' },\n  { id: '3', label: 'Total Orders', value: 1543, change: -3.1, trend: 'down' },\n  { id: '4', label: 'Conversion Rate', value: 3.24, change: 5.7, trend: 'up' }\n];\n\nconst mockChartData: ChartDataPoint[] = [\n  { date: '2024-01-01', revenue: 12000, users: 450, orders: 230 },\n  { date: '2024-01-02', revenue: 15000, users: 520, orders: 280 },\n  { date: '2024-01-03', revenue: 13500, users: 490, orders: 250 },\n  { date: '2024-01-04', revenue: 18000, users: 610, orders: 320 },\n  { date: '2024-01-05', revenue: 16500, users: 580, orders: 295 },\n  { date: '2024-01-06', revenue: 20000, users: 680, orders: 360 },\n  { date: '2024-01-07', revenue: 22000, users: 720, orders: 390 }\n];\n\nconst mockTableData: TableRow[] = [\n  { id: '1', product: 'Premium Plan', sales: 234, revenue: 23400, status: 'active' },\n  { id: '2', product: 'Basic Plan', sales: 567, revenue: 11340, status: 'active' },\n  { id: '3', product: 'Enterprise Plan', sales: 89, revenue: 17800, status: 'active' },\n  { id: '4', product: 'Starter Plan', sales: 432, revenue: 4320, status: 'pending' },\n  { id: '5', product: 'Pro Plan', sales: 156, revenue: 15600, status: 'inactive' }\n];\n\nconst mockTrafficData = [\n  { name: 'Organic Search', value: 4200, color: '#3b82f6' },\n  { name: 'Direct', value: 2800, color: '#10b981' },\n  { name: 'Social Media', value: 2100, color: '#f59e0b' },\n  { name: 'Referral', value: 1500, color: '#8b5cf6' },\n  { name: 'Email', value: 900, color: '#ec4899' }\n];\n\ninterface FunnelStage {\n  label: string;\n  value: number;\n  percentage: number;\n}\n\nconst mockFunnelData: FunnelStage[] = [\n  { label: 'Visitors', value: 10000, percentage: 100 },\n  { label: 'Product Views', value: 6500, percentage: 65 },\n  { label: 'Add to Cart', value: 3200, percentage: 32 },\n  { label: 'Checkout', value: 1800, percentage: 18 },\n  { label: 'Purchase', value: 1200, percentage: 12 }\n];\n\ntype SortField = 'product' | 'sales' | 'revenue' | 'status';\ntype SortDirection = 'asc' | 'desc' | null;\n\nconst ProductTable = ({ \n  data, \n  isDarkMode \n}: { \n  data: TableRow[]; \n  isDarkMode: boolean;\n}) => {\n  const [sortField, setSortField] = useState<SortField | null>(null);\n  const [sortDirection, setSortDirection] = useState<SortDirection>(null);\n\n  const handleSort = (field: SortField) => {\n    if (sortField === field) {\n      if (sortDirection === 'asc') {\n        setSortDirection('desc');\n      } else if (sortDirection === 'desc') {\n        setSortDirection(null);\n        setSortField(null);\n      } else {\n        setSortDirection('asc');\n      }\n    } else {\n      setSortField(field);\n      setSortDirection('asc');\n    }\n  };\n\n  const sortedData = [...data].sort((a, b) => {\n    if (!sortField || !sortDirection) return 0;\n\n    let aValue = a[sortField];\n    let bValue = b[sortField];\n\n    if (typeof aValue === 'string') {\n      aValue = aValue.toLowerCase();\n      bValue = (bValue as string).toLowerCase();\n    }\n\n    if (sortDirection === 'asc') {\n      return aValue > bValue ? 1 : -1;\n    } else {\n      return aValue < bValue ? 1 : -1;\n    }\n  });\n\n  const formatCurrency = (value: number) => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0\n    }).format(value);\n  };\n\n  const formatNumber = (value: number) => {\n    return new Intl.NumberFormat('en-US').format(value);\n  };\n\n  const getStatusBadge = (status: 'active' | 'pending' | 'inactive') => {\n    const variants = {\n      active: 'default',\n      pending: 'secondary',\n      inactive: 'outline'\n    } as const;\n\n    const colors = {\n      active: 'bg-green-500 hover:bg-green-600 text-white',\n      pending: 'bg-yellow-500 hover:bg-yellow-600 text-white',\n      inactive: isDarkMode ? 'border-gray-600 text-gray-400' : 'border-gray-300 text-gray-600'\n    };\n\n    return (\n      <Badge variant={variants[status]} className={colors[status]}>\n        {status.charAt(0).toUpperCase() + status.slice(1)}\n      </Badge>\n    );\n  };\n\n  const SortIcon = ({ field }: { field: SortField }) => {\n    if (sortField !== field) {\n      return <ArrowUpDown className=\"ml-2 h-4 w-4\" />;\n    }\n    if (sortDirection === 'asc') {\n      return <ArrowUp className=\"ml-2 h-4 w-4\" />;\n    }\n    if (sortDirection === 'desc') {\n      return <ArrowDown className=\"ml-2 h-4 w-4\" />;\n    }\n    return <ArrowUpDown className=\"ml-2 h-4 w-4\" />;\n  };\n\n  return (\n    <div className=\"w-full overflow-x-auto\">\n      <Table>\n        <TableHeader>\n          <TableRow className={isDarkMode ? 'border-gray-700 hover:bg-gray-750' : ''}>\n            <TableHead \n              className={`cursor-pointer select-none ${isDarkMode ? 'text-gray-300' : ''}`}\n              onClick={() => handleSort('product')}\n            >\n              <div className=\"flex items-center\">\n                Product\n                <SortIcon field=\"product\" />\n              </div>\n            </TableHead>\n            <TableHead \n              className={`cursor-pointer select-none ${isDarkMode ? 'text-gray-300' : ''}`}\n              onClick={() => handleSort('sales')}\n            >\n              <div className=\"flex items-center\">\n                Sales\n                <SortIcon field=\"sales\" />\n              </div>\n            </TableHead>\n            <TableHead \n              className={`cursor-pointer select-none ${isDarkMode ? 'text-gray-300' : ''}`}\n              onClick={() => handleSort('revenue')}\n            >\n              <div className=\"flex items-center\">\n                Revenue\n                <SortIcon field=\"revenue\" />\n              </div>\n            </TableHead>\n            <TableHead \n              className={`cursor-pointer select-none ${isDarkMode ? 'text-gray-300' : ''}`}\n              onClick={() => handleSort('status')}\n            >\n              <div className=\"flex items-center\">\n                Status\n                <SortIcon field=\"status\" />\n              </div>\n            </TableHead>\n          </TableRow>\n        </TableHeader>\n        <TableBody>\n          {sortedData.map((row, index) => (\n            <motion.tr\n              key={row.id}\n              initial={{ opacity: 0, y: 10 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ delay: index * 0.05 }}\n              className={`border-b ${\n                isDarkMode \n                  ? 'border-gray-700 hover:bg-gray-750' \n                  : 'hover:bg-gray-50'\n              }`}\n            >\n              <TableCell className={`font-medium ${isDarkMode ? 'text-white' : ''}`}>\n                {row.product}\n              </TableCell>\n              <TableCell className={isDarkMode ? 'text-gray-300' : ''}>\n                {formatNumber(row.sales)}\n              </TableCell>\n              <TableCell className={`font-semibold ${isDarkMode ? 'text-gray-300' : ''}`}>\n                {formatCurrency(row.revenue)}\n              </TableCell>\n              <TableCell>\n                {getStatusBadge(row.status)}\n              </TableCell>\n            </motion.tr>\n          ))}\n        </TableBody>\n      </Table>\n    </div>\n  );\n};\n</parameter>\n</invoke>\nexport default function AnalyticsDashboard() {\n  const [isDarkMode, setIsDarkMode] = useState(false);\n  const [metrics, setMetrics] = useState<MetricData[]>(mockMetrics);\n  const [chartData, setChartData] = useState<ChartDataPoint[]>(mockChartData);\n  const [tableData, setTableData] = useState<TableRow[]>(mockTableData);\n  const [isRefreshing, setIsRefreshing] = useState(false);\n\n  const toggleDarkMode = useCallback(() => {\n    setIsDarkMode(prev => !prev);\n  }, []);\n\n  const handleRefresh = useCallback(() => {\n    setIsRefreshing(true);\n    \n    setTimeout(() => {\n      // Simulate data refresh with random variations\n      const updatedChartData = chartData.map(point => ({\n        ...point,\n        users: Math.floor(point.users * (0.9 + Math.random() * 0.2))\n      }));\n      setChartData(updatedChartData);\n      setIsRefreshing(false);\n    }, 1000);\n    setIsRefreshing(true);\n    \n    setTimeout(() => {\n      // Generate updated metrics with random variations\n      const updatedMetrics = mockMetrics.map(metric => ({\n        ...metric,\n        value: metric.value + Math.floor(Math.random() * 200 - 100),\n        change: parseFloat((Math.random() * 20 - 5).toFixed(1)),\n        trend: Math.random() > 0.5 ? 'up' as const : 'down' as const\n      }));\n      \n      // Generate updated chart data with random variations\n      const updatedChartData = mockChartData.map(point => ({\n        ...point,\n        revenue: point.revenue + Math.floor(Math.random() * 4000 - 2000),\n        users: point.users + Math.floor(Math.random() * 100 - 50),\n        orders: point.orders + Math.floor(Math.random() * 50 - 25)\n      }));\n      \n      // Generate updated table data with random variations\n      const updatedTableData = mockTableData.map(row => ({\n        ...row,\n        sales: row.sales + Math.floor(Math.random() * 40 - 20),\n        revenue: row.revenue + Math.floor(Math.random() * 2000 - 1000)\n      }));\n      \n      setMetrics(updatedMetrics);\n      setChartData(updatedChartData);\n      setTableData(updatedTableData);\n      setIsRefreshing(false);\n    }, 1500);\n  }, []);\n\n  return (\n    <div className={`min-h-screen transition-colors duration-300 ${isDarkMode ? 'dark bg-gray-900' : 'bg-gray-50'}`}>\n      <div className=\"container mx-auto p-4 md:p-6 lg:p-8\">\n        <div className=\"flex flex-col md:flex-row md:items-center md:justify-between mb-8 gap-4\">\n          <div>\n            <h1 className={`text-3xl md:text-4xl font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n              Analytics Dashboard\n            </h1>\n            <p className={`mt-2 ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n              Real-time insights and performance metrics\n            </p>\n          </div>\n          \n          <div className=\"flex items-center gap-3\">\n            <Button\n              variant=\"outline\"\n              size=\"icon\"\n              onClick={toggleDarkMode}\n              className={isDarkMode ? 'border-gray-700 hover:bg-gray-800' : ''}\n            >\n              {isDarkMode ? <Sun className=\"h-5 w-5\" /> : <Moon className=\"h-5 w-5\" />}\n            </Button>\n            \n            <Button\n              variant=\"outline\"\n              onClick={handleRefresh}\n              disabled={isRefreshing}\n              className={isDarkMode ? 'border-gray-700 hover:bg-gray-800' : ''}\n            >\n              <RefreshCw className={`h-4 w-4 mr-2 ${isRefreshing ? 'animate-spin' : ''}`} />\n              Refresh\n            </Button>\n          </div>\n        </div>\n\n        <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 md:gap-6 mb-8\">\n          {metrics.map((metric, index) => {\n            const Icon = metric.label.includes('Revenue') ? DollarSign :\n                        metric.label.includes('Users') ? Users :\n                        metric.label.includes('Orders') ? ShoppingCart :\n                        Target;\n            \n            const TrendIcon = metric.trend === 'up' ? TrendingUp : TrendingDown;\n            const trendColor = metric.trend === 'up' ? 'text-green-500' : 'text-red-500';\n            const trendBgColor = metric.trend === 'up' ? 'bg-green-50 dark:bg-green-900/20' : 'bg-red-50 dark:bg-red-900/20';\n\n            return (\n              <motion.div\n                key={metric.id}\n                initial={{ opacity: 0, y: 20 }}\n                animate={{ opacity: 1, y: 0 }}\n                transition={{ duration: 0.4, delay: index * 0.1 }}\n              >\n                <Card className={`${isDarkMode ? 'bg-gray-800 border-gray-700' : 'bg-white'} hover:shadow-lg transition-shadow duration-300`}>\n                  <CardHeader className=\"flex flex-row items-center justify-between pb-2\">\n                    <CardTitle className={`text-sm font-medium ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                      {metric.label}\n                    </CardTitle>\n                    <div className={`p-2 rounded-lg ${isDarkMode ? 'bg-gray-700' : 'bg-gray-100'}`}>\n                      <Icon className={`h-4 w-4 ${isDarkMode ? 'text-gray-300' : 'text-gray-600'}`} />\n                    </div>\n                  </CardHeader>\n                  <CardContent>\n                    <div className={`text-2xl font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                      {metric.label.includes('Revenue') ? `$${metric.value.toLocaleString()}` :\n                       metric.label.includes('Rate') ? `${metric.value}%` :\n                       metric.value.toLocaleString()}\n                    </div>\n                    <div className=\"flex items-center mt-2\">\n                      <div className={`flex items-center gap-1 px-2 py-1 rounded-full ${trendBgColor}`}>\n                        <TrendIcon className={`h-3 w-3 ${trendColor}`} />\n                        <span className={`text-xs font-medium ${trendColor}`}>\n                          {Math.abs(metric.change)}%\n                        </span>\n                      </div>\n                      <span className={`text-xs ml-2 ${isDarkMode ? 'text-gray-400' : 'text-gray-500'}`}>\n                        vs last period\n                      </span>\n                    </div>\n                  </CardContent>\n                </Card>\n              </motion.div>\n            );\n          })}\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6 mb-8\">\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Revenue Overview</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Daily revenue trends for the past week\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"w-full h-[300px] md:h-[350px]\">\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <LineChart\n                    data={chartData}\n                    margin={{ top: 5, right: 10, left: 0, bottom: 5 }}\n                  >\n                    <CartesianGrid \n                      strokeDasharray=\"3 3\" \n                      stroke={isDarkMode ? '#374151' : '#e5e7eb'}\n                    />\n                    <XAxis \n                      dataKey=\"date\" \n                      stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                      tick={{ fill: isDarkMode ? '#9ca3af' : '#6b7280', fontSize: 12 }}\n                      tickFormatter={(value) => new Date(value).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n                    />\n                    <YAxis \n                      stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                      tick={{ fill: isDarkMode ? '#9ca3af' : '#6b7280', fontSize: 12 }}\n                      tickFormatter={(value) => `$${(value / 1000).toFixed(0)}k`}\n                    />\n                    <Tooltip \n                      contentStyle={{\n                        backgroundColor: isDarkMode ? '#1f2937' : '#ffffff',\n                        border: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\n                        borderRadius: '8px',\n                        color: isDarkMode ? '#ffffff' : '#000000'\n                      }}\n                      labelStyle={{ color: isDarkMode ? '#9ca3af' : '#6b7280' }}\n                      formatter={(value: number) => [`$${value.toLocaleString()}`, 'Revenue']}\n                      labelFormatter={(label) => new Date(label).toLocaleDateString('en-US', { month: 'long', day: 'numeric', year: 'numeric' })}\n                    />\n                    <Line \n                      type=\"monotone\" \n                      dataKey=\"revenue\" \n                      stroke=\"#3b82f6\" \n                      strokeWidth={2}\n                      dot={{ fill: '#3b82f6', r: 4 }}\n                      activeDot={{ r: 6, fill: '#2563eb' }}\n                    />\n                  </LineChart>\n                </ResponsiveContainer>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>User Activity</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Active users and engagement metrics\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"relative h-[300px] w-full\">\n                <svg className=\"w-full h-full\" viewBox=\"0 0 700 300\" preserveAspectRatio=\"none\">\n                  <defs>\n                    <linearGradient id=\"userGradient\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                      <stop offset=\"0%\" stopColor={isDarkMode ? \"#3b82f6\" : \"#60a5fa\"} stopOpacity=\"0.6\" />\n                      <stop offset=\"100%\" stopColor={isDarkMode ? \"#3b82f6\" : \"#60a5fa\"} stopOpacity=\"0.05\" />\n                    </linearGradient>\n                  </defs>\n                  \n                  {/* Grid lines */}\n                  {[0, 1, 2, 3, 4].map((i) => (\n                    <line\n                      key={i}\n                      x1=\"0\"\n                      y1={i * 75}\n                      x2=\"700\"\n                      y2={i * 75}\n                      stroke={isDarkMode ? '#374151' : '#e5e7eb'}\n                      strokeWidth=\"1\"\n                    />\n                  ))}\n                  \n                  {/* Area chart */}\n                  <motion.path\n                    initial={{ opacity: 0 }}\n                    animate={{ opacity: 1 }}\n                    transition={{ duration: 0.8 }}\n                    d={(() => {\n                      const maxUsers = Math.max(...chartData.map(d => d.users));\n                      const points = chartData.map((d, i) => {\n                        const x = (i / (chartData.length - 1)) * 700;\n                        const y = 300 - (d.users / maxUsers) * 250;\n                        return `${x},${y}`;\n                      });\n                      return `M 0,300 L ${points.join(' L ')} L 700,300 Z`;\n                    })()}\n                    fill=\"url(#userGradient)\"\n                  />\n                  \n                  {/* Line */}\n                  <motion.path\n                    initial={{ pathLength: 0 }}\n                    animate={{ pathLength: 1 }}\n                    transition={{ duration: 1.2, ease: \"easeInOut\" }}\n                    d={(() => {\n                      const maxUsers = Math.max(...chartData.map(d => d.users));\n                      const points = chartData.map((d, i) => {\n                        const x = (i / (chartData.length - 1)) * 700;\n                        const y = 300 - (d.users / maxUsers) * 250;\n                        return `${x},${y}`;\n                      });\n                      return `M ${points.join(' L ')}`;\n                    })()}\n                    fill=\"none\"\n                    stroke={isDarkMode ? \"#3b82f6\" : \"#2563eb\"}\n                    strokeWidth=\"3\"\n                    strokeLinecap=\"round\"\n                    strokeLinejoin=\"round\"\n                  />\n                  \n                  {/* Data points with hover effect */}\n                  {chartData.map((d, i) => {\n                    const maxUsers = Math.max(...chartData.map(d => d.users));\n                    const x = (i / (chartData.length - 1)) * 700;\n                    const y = 300 - (d.users / maxUsers) * 250;\n                    \n                    return (\n                      <g key={i}>\n                        <motion.circle\n                          initial={{ scale: 0 }}\n                          animate={{ scale: 1 }}\n                          transition={{ duration: 0.3, delay: i * 0.1 }}\n                          cx={x}\n                          cy={y}\n                          r=\"5\"\n                          fill={isDarkMode ? \"#1e40af\" : \"#2563eb\"}\n                          className=\"cursor-pointer transition-all hover:r-8\"\n                          style={{ filter: 'drop-shadow(0 2px 4px rgba(0,0,0,0.2))' }}\n                        />\n                        <circle\n                          cx={x}\n                          cy={y}\n                          r=\"12\"\n                          fill=\"transparent\"\n                          className=\"cursor-pointer\"\n                        >\n                          <title>{`${d.date}: ${d.users} users`}</title>\n                        </circle>\n                      </g>\n                    );\n                  })}\n                </svg>\n                \n                {/* X-axis labels */}\n                <div className=\"flex justify-between mt-2 px-1\">\n                  {chartData.map((d, i) => (\n                    <span\n                      key={i}\n                      className={`text-xs ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}\n                    >\n                      {new Date(d.date).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n                    </span>\n                  ))}\n                </div>\n                \n                {/* Y-axis label */}\n                <div className=\"absolute left-0 top-1/2 -translate-y-1/2 -translate-x-8\">\n                  <span className={`text-xs ${isDarkMode ? 'text-gray-400' : 'text-gray-600'} -rotate-90 inline-block`}>\n                    Users\n                  </span>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6 mb-8\">\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Orders Distribution</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Order volume by category\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {chartData.map((dataPoint, index) => {\n                  const maxOrders = Math.max(...chartData.map(d => d.orders));\n                  const percentage = (dataPoint.orders / maxOrders) * 100;\n                  \n                  // Color coding based on order volume\n                  const getBarColor = (orders: number) => {\n                    if (orders >= 350) return isDarkMode ? 'bg-green-500' : 'bg-green-600';\n                    if (orders >= 300) return isDarkMode ? 'bg-blue-500' : 'bg-blue-600';\n                    if (orders >= 250) return isDarkMode ? 'bg-yellow-500' : 'bg-yellow-600';\n                    return isDarkMode ? 'bg-orange-500' : 'bg-orange-600';\n                  };\n\n                  return (\n                    <div key={index} className=\"space-y-2\">\n                      <div className=\"flex items-center justify-between text-sm\">\n                        <span className={isDarkMode ? 'text-gray-300' : 'text-gray-700'}>\n                          {new Date(dataPoint.date).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n                        </span>\n                        <span className={`font-semibold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                          {dataPoint.orders}\n                        </span>\n                      </div>\n                      <div className={`w-full h-8 rounded-full overflow-hidden ${isDarkMode ? 'bg-gray-700' : 'bg-gray-200'}`}>\n                        <div\n                          className={`h-full ${getBarColor(dataPoint.orders)} transition-all duration-500 ease-out flex items-center justify-end pr-3`}\n                          style={{ width: `${percentage}%` }}\n                        >\n                          {percentage > 20 && (\n                            <BarChart3 className=\"h-4 w-4 text-white\" />\n                          )}\n                        </div>\n                      </div>\n                    </div>\n                  );\n                })}\n                \n                <div className=\"pt-4 mt-4 border-t border-gray-200 dark:border-gray-700\">\n                  <div className=\"flex items-center justify-between text-sm\">\n                    <span className={isDarkMode ? 'text-gray-400' : 'text-gray-600'}>\n                      Total Orders\n                    </span>\n                    <span className={`font-bold text-lg ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                      {chartData.reduce((sum, d) => sum + d.orders, 0)}\n                    </span>\n                  </div>\n                  <div className=\"flex items-center gap-4 mt-3 flex-wrap\">\n                    <div className=\"flex items-center gap-2\">\n                      <div className={`w-3 h-3 rounded ${isDarkMode ? 'bg-green-500' : 'bg-green-600'}`}></div>\n                      <span className={`text-xs ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>High (350+)</span>\n                    </div>\n                    <div className=\"flex items-center gap-2\">\n                      <div className={`w-3 h-3 rounded ${isDarkMode ? 'bg-blue-500' : 'bg-blue-600'}`}></div>\n                      <span className={`text-xs ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>Good (300+)</span>\n                    </div>\n                    <div className=\"flex items-center gap-2\">\n                      <div className={`w-3 h-3 rounded ${isDarkMode ? 'bg-yellow-500' : 'bg-yellow-600'}`}></div>\n                      <span className={`text-xs ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>Medium (250+)</span>\n                    </div>\n                    <div className=\"flex items-center gap-2\">\n                      <div className={`w-3 h-3 rounded ${isDarkMode ? 'bg-orange-500' : 'bg-orange-600'}`}></div>\n                      <span className={`text-xs ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>Low (&lt;250)</span>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className={`lg:col-span-2 ${isDarkMode ? 'bg-gray-800 border-gray-700' : ''}`}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Performance Comparison</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Multi-metric comparison over time\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <ResponsiveContainer width=\"100%\" height={300}>\n                <LineChart data={chartData}>\n                  <CartesianGrid \n                    strokeDasharray=\"3 3\" \n                    stroke={isDarkMode ? '#374151' : '#e5e7eb'} \n                  />\n                  <XAxis \n                    dataKey=\"date\" \n                    stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                    tick={{ fill: isDarkMode ? '#9ca3af' : '#6b7280' }}\n                    tickFormatter={(value) => new Date(value).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n                  />\n                  <YAxis \n                    stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                    tick={{ fill: isDarkMode ? '#9ca3af' : '#6b7280' }}\n                  />\n                  <Tooltip \n                    contentStyle={{\n                      backgroundColor: isDarkMode ? '#1f2937' : '#ffffff',\n                      border: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\n                      borderRadius: '8px',\n                      color: isDarkMode ? '#ffffff' : '#000000'\n                    }}\n                    labelFormatter={(value) => new Date(value).toLocaleDateString('en-US', { month: 'long', day: 'numeric', year: 'numeric' })}\n                    formatter={(value: number, name: string) => {\n                      if (name === 'revenue') return [`$${value.toLocaleString()}`, 'Revenue'];\n                      if (name === 'users') return [value.toLocaleString(), 'Users'];\n                      if (name === 'orders') return [value.toLocaleString(), 'Orders'];\n                      return [value, name];\n                    }}\n                  />\n                  <Legend \n                    wrapperStyle={{ color: isDarkMode ? '#9ca3af' : '#6b7280' }}\n                    formatter={(value) => {\n                      if (value === 'revenue') return 'Revenue';\n                      if (value === 'users') return 'Users';\n                      if (value === 'orders') return 'Orders';\n                      return value;\n                    }}\n                  />\n                  <Line \n                    type=\"monotone\" \n                    dataKey=\"revenue\" \n                    stroke=\"#3b82f6\" \n                    strokeWidth={2}\n                    dot={{ fill: '#3b82f6', r: 4 }}\n                    activeDot={{ r: 6 }}\n                  />\n                  <Line \n                    type=\"monotone\" \n                    dataKey=\"users\" \n                    stroke=\"#10b981\" \n                    strokeWidth={2}\n                    dot={{ fill: '#10b981', r: 4 }}\n                    activeDot={{ r: 6 }}\n                  />\n                  <Line \n                    type=\"monotone\" \n                    dataKey=\"orders\" \n                    stroke=\"#f59e0b\" \n                    strokeWidth={2}\n                    dot={{ fill: '#f59e0b', r: 4 }}\n                    activeDot={{ r: 6 }}\n                  />\n                </LineChart>\n              </ResponsiveContainer>\n            </CardContent>\n          </Card>\n        </div>\n\n        <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n          <CardHeader>\n            <CardTitle className={isDarkMode ? 'text-white' : ''}>Top Products</CardTitle>\n            <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n              Best performing products by sales and revenue\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            {/* TODO:ProductTable Render responsive data table with sorting, status badges, and formatted numbers */}\n          </CardContent>\n        </Card>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mt-8\">\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Conversion Funnel</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                User journey and drop-off rates\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {mockFunnelData.map((stage, index) => {\n                  const widthPercentage = stage.percentage;\n                  const dropOffRate = index > 0 \n                    ? ((mockFunnelData[index - 1].value - stage.value) / mockFunnelData[index - 1].value * 100).toFixed(1)\n                    : 0;\n\n                  return (\n                    <motion.div\n                      key={stage.label}\n                      initial={{ opacity: 0, x: -20 }}\n                      animate={{ opacity: 1, x: 0 }}\n                      transition={{ duration: 0.4, delay: index * 0.1 }}\n                      className=\"relative\"\n                    >\n                      <div className=\"flex items-center justify-between mb-2\">\n                        <span className={`text-sm font-medium ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>\n                          {stage.label}\n                        </span>\n                        <div className=\"flex items-center gap-3\">\n                          <span className={`text-sm ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                            {stage.value.toLocaleString()}\n                          </span>\n                          <span className={`text-sm font-semibold ${isDarkMode ? 'text-blue-400' : 'text-blue-600'}`}>\n                            {stage.percentage}%\n                          </span>\n                        </div>\n                      </div>\n                      \n                      <div className=\"relative h-12 flex items-center justify-center\">\n                        <motion.div\n                          initial={{ width: 0 }}\n                          animate={{ width: `${widthPercentage}%` }}\n                          transition={{ duration: 0.8, delay: index * 0.1, ease: \"easeOut\" }}\n                          className={`h-full rounded ${\n                            index === 0 ? 'bg-blue-500' :\n                            index === 1 ? 'bg-blue-400' :\n                            index === 2 ? 'bg-blue-300' :\n                            index === 3 ? 'bg-blue-200' :\n                            'bg-blue-100'\n                          } shadow-md flex items-center justify-center`}\n                          style={{\n                            clipPath: index === mockFunnelData.length - 1 \n                              ? 'polygon(5% 0%, 95% 0%, 90% 100%, 10% 100%)'\n                              : 'polygon(5% 0%, 95% 0%, 100% 100%, 0% 100%)'\n                          }}\n                        >\n                          <span className={`text-xs font-semibold ${\n                            index <= 2 ? 'text-white' : isDarkMode ? 'text-gray-800' : 'text-gray-700'\n                          }`}>\n                            {stage.percentage}%\n                          </span>\n                        </motion.div>\n                      </div>\n                      \n                      {index > 0 && dropOffRate !== 0 && (\n                        <div className=\"flex items-center justify-end mt-1\">\n                          <span className={`text-xs ${isDarkMode ? 'text-red-400' : 'text-red-500'}`}>\n                            \u2193 {dropOffRate}% drop-off\n                          </span>\n                        </div>\n                      )}\n                    </motion.div>\n                  );\n                })}\n                \n                <div className={`mt-6 p-4 rounded-lg ${isDarkMode ? 'bg-gray-700/50' : 'bg-gray-100'}`}>\n                  <div className=\"flex items-center justify-between\">\n                    <span className={`text-sm font-medium ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>\n                      Overall Conversion Rate\n                    </span>\n                    <span className={`text-lg font-bold ${isDarkMode ? 'text-green-400' : 'text-green-600'}`}>\n                      {((mockFunnelData[mockFunnelData.length - 1].value / mockFunnelData[0].value) * 100).toFixed(1)}%\n                    </span>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Traffic Sources</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Visitor sources breakdown\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                <ResponsiveContainer width=\"100%\" height={240}>\n                  <PieChart>\n                    <Pie\n                      data={mockTrafficData}\n                      cx=\"50%\"\n                      cy=\"50%\"\n                      innerRadius={60}\n                      outerRadius={90}\n                      paddingAngle={2}\n                      dataKey=\"value\"\n                    >\n                      {mockTrafficData.map((entry, index) => (\n                        <Cell key={`cell-${index}`} fill={entry.color} />\n                      ))}\n                    </Pie>\n                    <Tooltip\n                      contentStyle={{\n                        backgroundColor: isDarkMode ? '#1f2937' : '#ffffff',\n                        border: isDarkMode ? '1px solid #374151' : '1px solid #e5e7eb',\n                        borderRadius: '8px',\n                        color: isDarkMode ? '#ffffff' : '#000000'\n                      }}\n                      formatter={(value: number) => [`${value.toLocaleString()} visitors`, 'Traffic']}\n                    />\n                  </PieChart>\n                </ResponsiveContainer>\n                \n                <div className=\"space-y-2\">\n                  {mockTrafficData.map((source, index) => {\n                    const total = mockTrafficData.reduce((sum, item) => sum + item.value, 0);\n                    const percentage = ((source.value / total) * 100).toFixed(1);\n                    \n                    return (\n                      <div key={index} className=\"flex items-center justify-between\">\n                        <div className=\"flex items-center gap-2\">\n                          <div\n                            className=\"w-3 h-3 rounded-full\"\n                            style={{ backgroundColor: source.color }}\n                          />\n                          <span className={`text-sm ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>\n                            {source.name}\n                          </span>\n                        </div>\n                        <div className=\"flex items-center gap-3\">\n                          <span className={`text-sm font-medium ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                            {percentage}%\n                          </span>\n                          <span className={`text-sm font-semibold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                            {source.value.toLocaleString()}\n                          </span>\n                        </div>\n                      </div>\n                    );\n                  })}\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Recent Activity</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Latest system events\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"max-h-[400px] overflow-y-auto space-y-3 pr-2\">\n                {[\n                  { id: '1', type: 'sale', message: 'New order placed - Premium Plan', time: '2 minutes ago', icon: ShoppingCart, color: 'text-green-500', bgColor: 'bg-green-50 dark:bg-green-900/20' },\n                  { id: '2', type: 'user', message: 'New user registration', time: '15 minutes ago', icon: Users, color: 'text-blue-500', bgColor: 'bg-blue-50 dark:bg-blue-900/20' },\n                  { id: '3', type: 'revenue', message: 'Payment received - $450', time: '32 minutes ago', icon: DollarSign, color: 'text-emerald-500', bgColor: 'bg-emerald-50 dark:bg-emerald-900/20' },\n                  { id: '4', type: 'target', message: 'Monthly goal 75% complete', time: '1 hour ago', icon: Target, color: 'text-purple-500', bgColor: 'bg-purple-50 dark:bg-purple-900/20' },\n                  { id: '5', type: 'sale', message: 'Order completed - Enterprise Plan', time: '2 hours ago', icon: ShoppingCart, color: 'text-green-500', bgColor: 'bg-green-50 dark:bg-green-900/20' },\n                  { id: '6', type: 'user', message: '5 new users joined today', time: '3 hours ago', icon: Users, color: 'text-blue-500', bgColor: 'bg-blue-50 dark:bg-blue-900/20' },\n                  { id: '7', type: 'revenue', message: 'Subscription renewed - $199', time: '4 hours ago', icon: DollarSign, color: 'text-emerald-500', bgColor: 'bg-emerald-50 dark:bg-emerald-900/20' },\n                  { id: '8', type: 'sale', message: 'Bulk order - 10 licenses', time: '5 hours ago', icon: ShoppingCart, color: 'text-green-500', bgColor: 'bg-green-50 dark:bg-green-900/20' }\n                ].map((activity) => {\n                  const ActivityIcon = activity.icon;\n                  return (\n                    <motion.div\n                      key={activity.id}\n                      initial={{ opacity: 0, x: -20 }}\n                      animate={{ opacity: 1, x: 0 }}\n                      transition={{ duration: 0.3 }}\n                      className={`flex items-start gap-3 p-3 rounded-lg ${isDarkMode ? 'hover:bg-gray-700/50' : 'hover:bg-gray-50'} transition-colors duration-200`}\n                    >\n                      <div className={`p-2 rounded-full ${activity.bgColor} flex-shrink-0`}>\n                        <ActivityIcon className={`h-4 w-4 ${activity.color}`} />\n                      </div>\n                      <div className=\"flex-1 min-w-0\">\n                        <p className={`text-sm font-medium ${isDarkMode ? 'text-gray-200' : 'text-gray-900'}`}>\n                          {activity.message}\n                        </p>\n                        <p className={`text-xs mt-1 ${isDarkMode ? 'text-gray-500' : 'text-gray-500'}`}>\n                          {activity.time}\n                        </p>\n                      </div>\n                    </motion.div>\n                  );\n                })}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}\n",
    "error": null,
    "elapsed_time": 84.35057163238525,
    "success": true
  }
}