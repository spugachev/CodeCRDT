{
  "prompt_id": "algorithm_visualizer",
  "prompt_name": "Algorithm Visualizer",
  "mode": "parallel",
  "run_number": 36,
  "timestamp": "2025-10-14T11:39:34.359592",
  "response_time": 99.39141845703125,
  "total_tokens": null,
  "response_content": "import { useState, useCallback } from 'react';\nimport { useEffect, useRef } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Slider } from '@/components/ui/slider';\nimport { Play, Pause, RotateCcw, Zap, BarChart3 } from 'lucide-react';\nimport { motion } from 'framer-motion';\n\ninterface ArrayElement {\n  value: number;\n  id: string;\n  isComparing?: boolean;\n  isSwapping?: boolean;\n  isSorted?: boolean;\n}\n\ninterface AlgorithmStep {\n  array: ArrayElement[];\n  comparingIndices: number[];\n  swappingIndices: number[];\n  sortedIndices: number[];\n}\n\ntype AlgorithmType = 'bubble' | 'quick' | 'merge' | 'insertion';\n\nconst NEON_COLORS = [\n  '#00ffff',\n  '#ff00ff', \n  '#00ff00',\n  '#ffff00',\n  '#ff0066',\n  '#00ffaa'\n];\n\nconst mockAlgorithms = [\n  { id: 'bubble', name: 'Bubble Sort', complexity: 'O(n\u00b2)' },\n  { id: 'quick', name: 'Quick Sort', complexity: 'O(n log n)' },\n  { id: 'merge', name: 'Merge Sort', complexity: 'O(n log n)' },\n  { id: 'insertion', name: 'Insertion Sort', complexity: 'O(n\u00b2)' }\n];\n\n// Animation controller hook\nconst useAnimationController = (\n  steps: AlgorithmStep[],\n  speed: number[],\n  isPlaying: boolean,\n  currentStep: number,\n  setCurrentStep: (step: number) => void,\n  setArray: (array: ArrayElement[]) => void,\n  setIsPlaying: (playing: boolean) => void\n) => {\n  const animationRef = useRef<NodeJS.Timeout | null>(null);\n\n  useEffect(() => {\n    if (isPlaying && currentStep < steps.length) {\n      const delay = 1000 - speed[0] * 9.5; // Convert speed (0-100) to delay (1000ms-50ms)\n      \n      animationRef.current = setTimeout(() => {\n        const step = steps[currentStep];\n        setArray(step.array);\n        setCurrentStep(currentStep + 1);\n      }, delay);\n    } else if (currentStep >= steps.length && isPlaying) {\n      setIsPlaying(false);\n    }\n\n    return () => {\n      if (animationRef.current) {\n        clearTimeout(animationRef.current);\n      }\n    };\n  }, [isPlaying, currentStep, steps, speed, setCurrentStep, setArray, setIsPlaying]);\n};\nexport default function AlgorithmVisualizer() {\n  const [array, setArray] = useState<ArrayElement[]>([]);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [speed, setSpeed] = useState([50]);\n  const [arraySize, setArraySize] = useState([20]);\n  const [selectedAlgorithm, setSelectedAlgorithm] = useState<AlgorithmType>('bubble');\n  const [currentStep, setCurrentStep] = useState(0);\n  const [steps, setSteps] = useState<AlgorithmStep[]>([]);\n\n  const generateRandomArray = useCallback(() => {\n    const newArray: ArrayElement[] = Array.from({ length: arraySize[0] }, (_, index) => ({\n      value: Math.floor(Math.random() * 100) + 5,\n      id: `element-${index}-${Date.now()}`,\n      isComparing: false,\n      isSwapping: false,\n      isSorted: false\n    }));\n    setArray(newArray);\n    setSteps([]);\n    setCurrentStep(0);\n    setIsPlaying(false);\n  }, [arraySize]);\n\n  const resetVisualization = useCallback(() => {\n\n    setIsPlaying(false);\n    setCurrentStep(0);\n    setSteps([]);\n    generateRandomArray();\n  }, [generateRandomArray]);\n\n  const startVisualization = useCallback(() => {\n    if (steps.length === 0) return;\n    setIsPlaying(true);\n    if (currentStep >= steps.length) {\n      setCurrentStep(0);\n    }\n  }, [steps, speed, currentStep]);\n\n  const pauseVisualization = useCallback(() => {\n    setIsPlaying(false);\n  }, []);\n\n  const generateSortingSteps = useCallback((algorithm: AlgorithmType) => {\n    if (!array.length) return;\n\n    const arr = [...array];\n    const newSteps: AlgorithmStep[] = [];\n\n    const addStep = (\n      currentArray: ArrayElement[],\n      comparing: number[] = [],\n      swapping: number[] = [],\n      sorted: number[] = []\n    ) => {\n      newSteps.push({\n        array: currentArray.map((el, idx) => ({\n          ...el,\n          isComparing: comparing.includes(idx),\n          isSwapping: swapping.includes(idx),\n          isSorted: sorted.includes(idx)\n        })),\n        comparingIndices: comparing,\n        swappingIndices: swapping,\n        sortedIndices: sorted\n      });\n    };\n\n    // Initial state\n    addStep([...arr]);\n\n    if (algorithm === 'bubble') {\n      const sortedIndices: number[] = [];\n      for (let i = 0; i < arr.length - 1; i++) {\n        for (let j = 0; j < arr.length - i - 1; j++) {\n          // Comparing\n          addStep([...arr], [j, j + 1], [], sortedIndices);\n          \n          if (arr[j].value > arr[j + 1].value) {\n            // Swapping\n            addStep([...arr], [], [j, j + 1], sortedIndices);\n            [arr[j], arr[j + 1]] = [arr[j + 1], arr[j]];\n            addStep([...arr], [], [j, j + 1], sortedIndices);\n          }\n        }\n        sortedIndices.push(arr.length - i - 1);\n        addStep([...arr], [], [], sortedIndices);\n      }\n      sortedIndices.push(0);\n      addStep([...arr], [], [], sortedIndices);\n    } else if (algorithm === 'insertion') {\n      const sortedIndices: number[] = [0];\n      addStep([...arr], [], [], sortedIndices);\n      \n      for (let i = 1; i < arr.length; i++) {\n        const key = arr[i];\n        let j = i - 1;\n        \n        addStep([...arr], [i], [], sortedIndices);\n        \n        while (j >= 0 && arr[j].value > key.value) {\n          addStep([...arr], [j, j + 1], [], sortedIndices);\n          addStep([...arr], [], [j, j + 1], sortedIndices);\n          arr[j + 1] = arr[j];\n          addStep([...arr], [], [j, j + 1], sortedIndices);\n          j--;\n        }\n        arr[j + 1] = key;\n        sortedIndices.push(i);\n        addStep([...arr], [], [], sortedIndices);\n      }\n    } else if (algorithm === 'quick') {\n      const sortedIndices: number[] = [];\n      \n      const partition = (low: number, high: number): number => {\n        const pivot = arr[high];\n        addStep([...arr], [high], [], sortedIndices);\n        let i = low - 1;\n        \n        for (let j = low; j < high; j++) {\n          addStep([...arr], [j, high], [], sortedIndices);\n          \n          if (arr[j].value < pivot.value) {\n            i++;\n            if (i !== j) {\n              addStep([...arr], [], [i, j], sortedIndices);\n              [arr[i], arr[j]] = [arr[j], arr[i]];\n              addStep([...arr], [], [i, j], sortedIndices);\n            }\n          }\n        }\n        \n        addStep([...arr], [], [i + 1, high], sortedIndices);\n        [arr[i + 1], arr[high]] = [arr[high], arr[i + 1]];\n        addStep([...arr], [], [i + 1, high], sortedIndices);\n        sortedIndices.push(i + 1);\n        addStep([...arr], [], [], sortedIndices);\n        \n        return i + 1;\n      };\n      \n      const quickSort = (low: number, high: number) => {\n        if (low < high) {\n          const pi = partition(low, high);\n          quickSort(low, pi - 1);\n          quickSort(pi + 1, high);\n        } else if (low === high) {\n          sortedIndices.push(low);\n          addStep([...arr], [], [], sortedIndices);\n        }\n      };\n      \n      quickSort(0, arr.length - 1);\n    } else if (algorithm === 'merge') {\n      const sortedIndices: number[] = [];\n      \n      const merge = (left: number, mid: number, right: number) => {\n        const leftArr = arr.slice(left, mid + 1);\n        const rightArr = arr.slice(mid + 1, right + 1);\n        \n        let i = 0, j = 0, k = left;\n        \n        while (i < leftArr.length && j < rightArr.length) {\n          addStep([...arr], [left + i, mid + 1 + j], [], sortedIndices);\n          \n          if (leftArr[i].value <= rightArr[j].value) {\n            addStep([...arr], [], [k], sortedIndices);\n            arr[k] = leftArr[i];\n            addStep([...arr], [], [k], sortedIndices);\n            i++;\n          } else {\n            addStep([...arr], [], [k], sortedIndices);\n            arr[k] = rightArr[j];\n            addStep([...arr], [], [k], sortedIndices);\n            j++;\n          }\n          k++;\n        }\n        \n        while (i < leftArr.length) {\n          addStep([...arr], [], [k], sortedIndices);\n          arr[k] = leftArr[i];\n          addStep([...arr], [], [k], sortedIndices);\n          i++;\n          k++;\n        }\n        \n        while (j < rightArr.length) {\n          addStep([...arr], [], [k], sortedIndices);\n          arr[k] = rightArr[j];\n          addStep([...arr], [], [k], sortedIndices);\n          j++;\n          k++;\n        }\n        \n        if (left === 0 && right === arr.length - 1) {\n          for (let idx = left; idx <= right; idx++) {\n            sortedIndices.push(idx);\n          }\n        }\n        addStep([...arr], [], [], sortedIndices);\n      };\n      \n      const mergeSort = (left: number, right: number) => {\n        if (left < right) {\n          const mid = Math.floor((left + right) / 2);\n          mergeSort(left, mid);\n          mergeSort(mid + 1, right);\n          merge(left, mid, right);\n        }\n      };\n      \n      mergeSort(0, arr.length - 1);\n    }\n\n    setSteps(newSteps);\n    setCurrentStep(0);\n  }, [array]);\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-gray-900 via-purple-900 to-gray-900 p-8\">\n      <div className=\"max-w-7xl mx-auto space-y-8\">\n        <motion.div\n          initial={{ opacity: 0, y: -20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.8 }}\n          className=\"text-center space-y-4\"\n        >\n          <motion.h1\n            className=\"text-6xl font-bold bg-gradient-to-r from-cyan-400 via-purple-400 to-pink-400 bg-clip-text text-transparent\"\n            animate={{\n              textShadow: [\n                '0 0 20px rgba(0, 255, 255, 0.5)',\n                '0 0 40px rgba(255, 0, 255, 0.5)',\n                '0 0 20px rgba(0, 255, 255, 0.5)'\n              ]\n            }}\n            transition={{ duration: 2, repeat: Infinity }}\n          >\n            Algorithm Visualizer\n          </motion.h1>\n          \n          <div className=\"flex items-center justify-center gap-4\">\n            <motion.div\n              initial={{ scale: 0 }}\n              animate={{ scale: 1 }}\n              transition={{ delay: 0.3, type: 'spring', stiffness: 200 }}\n              className=\"flex items-center gap-2 px-6 py-3 bg-gray-800/50 backdrop-blur-sm rounded-full border border-cyan-500/30\"\n            >\n              <Zap className=\"w-5 h-5 text-cyan-400\" />\n              <span className=\"text-xl font-semibold text-cyan-300\">\n                {mockAlgorithms.find(a => a.id === selectedAlgorithm)?.name || 'Bubble Sort'}\n              </span>\n            </motion.div>\n            \n            <motion.div\n              initial={{ scale: 0 }}\n              animate={{ scale: 1 }}\n              transition={{ delay: 0.5, type: 'spring', stiffness: 200 }}\n              className=\"relative px-4 py-2 bg-gradient-to-r from-purple-600/20 to-pink-600/20 backdrop-blur-sm rounded-lg border border-purple-400/50 overflow-hidden\"\n            >\n              <motion.div\n                className=\"absolute inset-0 bg-gradient-to-r from-purple-500/20 to-pink-500/20\"\n                animate={{\n                  x: ['-100%', '100%']\n                }}\n                transition={{ duration: 3, repeat: Infinity, ease: 'linear' }}\n              />\n              <div className=\"relative flex items-center gap-2\">\n                <BarChart3 className=\"w-4 h-4 text-purple-300\" />\n                <span className=\"text-sm font-mono text-purple-200\">\n                  {mockAlgorithms.find(a => a.id === selectedAlgorithm)?.complexity || 'O(n\u00b2)'}\n                </span>\n              </div>\n            </motion.div>\n          </div>\n        </motion.div></parameter>\n</invoke>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-6\">\n          <div className=\"lg:col-span-1 space-y-6\">\n            <motion.div\n              initial={{ opacity: 0, x: -50 }}\n              animate={{ opacity: 1, x: 0 }}\n              className=\"bg-gray-800/50 backdrop-blur-lg rounded-2xl p-6 border border-cyan-500/30 shadow-[0_0_30px_rgba(0,255,255,0.3)]\"\n            >\n              <div className=\"space-y-6\">\n                {/* Algorithm Selection */}\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center gap-2 text-cyan-400\">\n                    <Zap className=\"w-5 h-5\" />\n                    <h3 className=\"font-semibold text-lg\">Algorithm</h3>\n                  </div>\n                  <div className=\"space-y-2\">\n                    {mockAlgorithms.map((algo) => (\n                      <button\n                        key={algo.id}\n                        onClick={() => {\n                          setSelectedAlgorithm(algo.id as AlgorithmType);\n                          generateSortingSteps(algo.id as AlgorithmType);\n                        }}\n                        disabled={isPlaying}\n                        className={`w-full p-3 rounded-lg text-left transition-all duration-300 ${\n                          selectedAlgorithm === algo.id\n                            ? 'bg-cyan-500/20 border-2 border-cyan-400 shadow-[0_0_20px_rgba(0,255,255,0.4)]'\n                            : 'bg-gray-700/50 border-2 border-gray-600/50 hover:border-cyan-500/50 hover:shadow-[0_0_15px_rgba(0,255,255,0.2)]'\n                        } disabled:opacity-50 disabled:cursor-not-allowed`}\n                      >\n                        <div className=\"font-medium text-white\">{algo.name}</div>\n                        <div className=\"text-xs text-gray-400 mt-1\">{algo.complexity}</div>\n                      </button>\n                    ))}\n                  </div>\n                </div>\n\n                {/* Array Size Control */}\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center gap-2 text-purple-400\">\n                    <BarChart3 className=\"w-5 h-5\" />\n                    <h3 className=\"font-semibold\">Array Size</h3>\n                  </div>\n                  <div className=\"space-y-2\">\n                    <div className=\"flex justify-between text-sm text-gray-300\">\n                      <span>Size</span>\n                      <span className=\"text-cyan-400 font-mono\">{arraySize[0]}</span>\n                    </div>\n                    <Slider\n                      value={arraySize}\n                      onValueChange={setArraySize}\n                      min={5}\n                      max={50}\n                      step={1}\n                      disabled={isPlaying}\n                      className=\"cursor-pointer\"\n                    />\n                  </div>\n                </div>\n\n                {/* Speed Control */}\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center gap-2 text-pink-400\">\n                    <Zap className=\"w-5 h-5\" />\n                    <h3 className=\"font-semibold\">Speed</h3>\n                  </div>\n                  <div className=\"space-y-2\">\n                    <div className=\"flex justify-between text-sm text-gray-300\">\n                      <span>Animation Speed</span>\n                      <span className=\"text-cyan-400 font-mono\">{speed[0]}%</span>\n                    </div>\n                    <Slider\n                      value={speed}\n                      onValueChange={setSpeed}\n                      min={10}\n                      max={100}\n                      step={10}\n                      className=\"cursor-pointer\"\n                    />\n                  </div>\n                </div>\n\n                {/* Control Buttons */}\n                <div className=\"space-y-3 pt-4 border-t border-gray-700/50\">\n                  <Button\n                    onClick={isPlaying ? pauseVisualization : startVisualization}\n                    disabled={steps.length === 0 || (currentStep >= steps.length && !isPlaying)}\n                    className=\"w-full bg-gradient-to-r from-cyan-500 to-blue-500 hover:from-cyan-600 hover:to-blue-600 text-white font-semibold py-6 rounded-lg shadow-[0_0_20px_rgba(0,255,255,0.5)] hover:shadow-[0_0_30px_rgba(0,255,255,0.7)] transition-all duration-300\"\n                  >\n                    {isPlaying ? (\n                      <>\n                        <Pause className=\"w-5 h-5 mr-2\" />\n                        Pause\n                      </>\n                    ) : (\n                      <>\n                        <Play className=\"w-5 h-5 mr-2\" />\n                        {currentStep >= steps.length ? 'Restart' : 'Play'}\n                      </>\n                    )}\n                  </Button>\n\n                  <Button\n                    onClick={resetVisualization}\n                    disabled={isPlaying}\n                    className=\"w-full bg-gradient-to-r from-purple-500 to-pink-500 hover:from-purple-600 hover:to-pink-600 text-white font-semibold py-6 rounded-lg shadow-[0_0_20px_rgba(255,0,255,0.5)] hover:shadow-[0_0_30px_rgba(255,0,255,0.7)] transition-all duration-300\"\n                  >\n                    <RotateCcw className=\"w-5 h-5 mr-2\" />\n                    Reset & Generate\n                  </Button>\n                </div>\n\n                {/* Stats Display */}\n                <div className=\"pt-4 border-t border-gray-700/50 space-y-2\">\n                  <div className=\"flex justify-between text-sm\">\n                    <span className=\"text-gray-400\">Current Step</span>\n                    <span className=\"text-cyan-400 font-mono\">{currentStep} / {steps.length}</span>\n                  </div>\n                  <div className=\"flex justify-between text-sm\">\n                    <span className=\"text-gray-400\">Array Elements</span>\n                    <span className=\"text-purple-400 font-mono\">{array.length}</span>\n                  </div>\n                </div>\n              </div>\n            </motion.div>\n            \n            <div className=\"bg-gray-800/50 backdrop-blur-lg rounded-2xl p-6 border border-cyan-500/30 shadow-lg shadow-cyan-500/20\">\n              <div className=\"space-y-6\">\n                <div>\n                  <h3 className=\"text-cyan-400 font-semibold mb-4 flex items-center gap-2\">\n                    <Zap className=\"w-5 h-5\" />\n                    Algorithm\n                  </h3>\n                  <div className=\"grid grid-cols-2 gap-3\">\n                    {mockAlgorithms.map((algo) => (\n                      <motion.button\n                        key={algo.id}\n                        onClick={() => setSelectedAlgorithm(algo.id as AlgorithmType)}\n                        className={`p-3 rounded-lg border transition-all duration-300 ${\n                          selectedAlgorithm === algo.id\n                            ? 'bg-cyan-500/20 border-cyan-400 shadow-lg shadow-cyan-500/50'\n                            : 'bg-gray-700/50 border-gray-600 hover:border-cyan-500/50 hover:shadow-md hover:shadow-cyan-500/30'\n                        }`}\n                        whileHover={{ scale: 1.05 }}\n                        whileTap={{ scale: 0.95 }}\n                      >\n                        <div className=\"text-sm font-medium text-white\">\n                          {algo.name.split(' ')[0]}\n                        </div>\n                        <div className=\"text-xs text-gray-400 mt-1\">\n                          {algo.complexity}\n                        </div>\n                      </motion.button>\n                    ))}\n                  </div>\n                </div>\n\n                <div>\n                  <h3 className=\"text-cyan-400 font-semibold mb-4\">Speed</h3>\n                  <Slider\n                    value={speed}\n                    onValueChange={setSpeed}\n                    min={1}\n                    max={100}\n                    step={1}\n                    className=\"[&_[role=slider]]:bg-cyan-400 [&_[role=slider]]:border-cyan-300 [&_[role=slider]]:shadow-lg [&_[role=slider]]:shadow-cyan-400/50 [&_[role=slider]]:transition-shadow [&_[role=slider]]:hover:shadow-cyan-400/80 [&_.relative]:bg-gray-700 [&_.bg-primary]:bg-gradient-to-r [&_.bg-primary]:from-cyan-500 [&_.bg-primary]:to-purple-500\"\n                  />\n                  <div className=\"flex justify-between text-xs text-gray-400 mt-2\">\n                    <span>Slow</span>\n                    <span className=\"text-cyan-400 font-semibold\">{speed[0]}%</span>\n                    <span>Fast</span>\n                  </div></parameter>\n                </div>\n\n                <div>\n                  <h3 className=\"text-cyan-400 font-semibold mb-4\">Array Size</h3>\n                  <div className=\"space-y-3\">\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"text-sm text-gray-400\">Elements</span>\n                      <motion.span \n                        key={arraySize[0]}\n                        initial={{ scale: 1.3, color: '#00ffff' }}\n                        animate={{ scale: 1, color: '#ffffff' }}\n                        className=\"text-lg font-bold text-white\"\n                      >\n                        {arraySize[0]}\n                      </motion.span>\n                    </div>\n                    <Slider\n                      value={arraySize}\n                      onValueChange={setArraySize}\n                      min={5}\n                      max={50}\n                      step={1}\n                      className=\"[&_[role=slider]]:bg-gradient-to-r [&_[role=slider]]:from-cyan-400 [&_[role=slider]]:to-purple-500 [&_[role=slider]]:border-2 [&_[role=slider]]:border-white [&_[role=slider]]:shadow-lg [&_[role=slider]]:shadow-cyan-400/50 [&_[role=slider]]:transition-shadow hover:[&_[role=slider]]:shadow-cyan-400/80 [&_[role=slider]]:animate-pulse\"\n                      disabled={isPlaying}\n                    />\n                    <div className=\"flex justify-between text-xs text-gray-500\">\n                      <span>5</span>\n                      <span>50</span>\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"space-y-3 pt-4 border-t border-cyan-500/20\">\n                  <motion.button\n                    onClick={isPlaying ? pauseVisualization : startVisualization}\n                    disabled={array.length === 0 || (steps.length === 0 && !isPlaying)}\n                    className=\"w-full py-4 rounded-xl font-semibold text-white transition-all duration-300 disabled:opacity-50 disabled:cursor-not-allowed relative overflow-hidden group\"\n                    whileHover={{ scale: 1.02 }}\n                    whileTap={{ scale: 0.98 }}\n                  >\n                    <motion.div\n                      className=\"absolute inset-0 bg-gradient-to-r from-cyan-500 to-purple-500\"\n                      animate={{\n                        opacity: isPlaying ? [0.8, 1, 0.8] : 0.8\n                      }}\n                      transition={{ duration: 2, repeat: Infinity }}\n                    />\n                    <motion.div\n                      className=\"absolute inset-0 bg-gradient-to-r from-cyan-400 to-purple-400 opacity-0 group-hover:opacity-20 blur-xl\"\n                      animate={{\n                        scale: [1, 1.2, 1]\n                      }}\n                      transition={{ duration: 2, repeat: Infinity }}\n                    />\n                    <div className=\"relative flex items-center justify-center gap-3\">\n                      <motion.div\n                        animate={{\n                          rotate: isPlaying ? 0 : 0,\n                          scale: isPlaying ? [1, 1.2, 1] : 1\n                        }}\n                        transition={{ duration: 0.3 }}\n                      >\n                        {isPlaying ? (\n                          <Pause className=\"w-5 h-5\" />\n                        ) : (\n                          <Play className=\"w-5 h-5\" />\n                        )}\n                      </motion.div>\n                      <span>{isPlaying ? 'Pause' : 'Start'} Visualization</span>\n                    </div>\n                    <motion.div\n                      className=\"absolute inset-0 rounded-xl\"\n                      animate={{\n                        boxShadow: isPlaying\n                          ? [\n                              '0 0 20px rgba(0, 255, 255, 0.5)',\n                              '0 0 40px rgba(168, 85, 247, 0.5)',\n                              '0 0 20px rgba(0, 255, 255, 0.5)'\n                            ]\n                          : '0 0 20px rgba(0, 255, 255, 0.3)'\n                      }}\n                      transition={{ duration: 2, repeat: Infinity }}\n                    />\n                  </motion.button>\n\n                  <motion.button\n                    onClick={resetVisualization}\n                    className=\"w-full py-3 rounded-xl font-semibold text-white bg-gradient-to-r from-pink-600/80 to-red-600/80 hover:from-pink-500 hover:to-red-500 transition-all duration-300 relative overflow-hidden group\"\n                    whileHover={{ scale: 1.02 }}\n                    whileTap={{ scale: 0.98 }}\n                  >\n                    <motion.div\n                      className=\"absolute inset-0 bg-gradient-to-r from-pink-400 to-red-400 opacity-0 group-hover:opacity-20 blur-xl\"\n                    />\n                    <div className=\"relative flex items-center justify-center gap-3\">\n                      <motion.div\n                        whileHover={{ rotate: -180 }}\n                        transition={{ duration: 0.5 }}\n                      >\n                        <RotateCcw className=\"w-5 h-5\" />\n                      </motion.div>\n                      <span>Reset</span>\n                    </div>\n                    <motion.div\n                      className=\"absolute inset-0 rounded-xl opacity-0 group-hover:opacity-100\"\n                      animate={{\n                        boxShadow: [\n                          '0 0 0px rgba(236, 72, 153, 0)',\n                          '0 0 20px rgba(236, 72, 153, 0.4)',\n                          '0 0 0px rgba(236, 72, 153, 0)'\n                        ]\n                      }}\n                      transition={{ duration: 1.5, repeat: Infinity }}\n                    />\n                  </motion.button>\n\n                  <motion.button\n                    onClick={generateRandomArray}\n                    disabled={isPlaying}\n                    className=\"w-full py-3 rounded-xl font-semibold text-white bg-gradient-to-r from-purple-600/80 to-indigo-600/80 hover:from-purple-500 hover:to-indigo-500 transition-all duration-300 disabled:opacity-50 disabled:cursor-not-allowed relative overflow-hidden group\"\n                    whileHover={{ scale: 1.02 }}\n                    whileTap={{ scale: 0.98 }}\n                  >\n                    <motion.div\n                      className=\"absolute inset-0 bg-gradient-to-r from-purple-400 to-indigo-400 opacity-0 group-hover:opacity-20 blur-xl\"\n                    />\n                    <div className=\"relative flex items-center justify-center gap-3\">\n                      <motion.div\n                        whileHover={{ rotate: 360 }}\n                        transition={{ duration: 0.6 }}\n                      >\n                        <BarChart3 className=\"w-5 h-5\" />\n                      </motion.div>\n                      <span>New Array</span>\n                    </div>\n                    <motion.div\n                      className=\"absolute inset-0 rounded-xl opacity-0 group-hover:opacity-100\"\n                      animate={{\n                        boxShadow: [\n                          '0 0 0px rgba(147, 51, 234, 0)',\n                          '0 0 20px rgba(147, 51, 234, 0.4)',\n                          '0 0 0px rgba(147, 51, 234, 0)'\n                        ]\n                      }}\n                      transition={{ duration: 1.5, repeat: Infinity }}\n                    />\n                  </motion.button>\n                </div>\n              </div>\n            </div>\n\n            <motion.div\n              initial={{ opacity: 0, x: -50 }}\n              animate={{ opacity: 1, x: 0 }}\n              transition={{ delay: 0.2 }}\n              className=\"bg-gradient-to-br from-gray-800/50 to-purple-900/30 backdrop-blur-lg rounded-2xl p-6 border border-purple-500/30 shadow-[0_0_30px_rgba(168,85,247,0.3)]\"\n            >\n              <div className=\"space-y-4\">\n                <div className=\"flex items-center gap-2 text-purple-400 mb-4\">\n                  <BarChart3 className=\"w-5 h-5\" />\n                  <h3 className=\"font-semibold text-lg\">Statistics</h3>\n                </div>\n\n                <div className=\"space-y-3\">\n                  {/* Comparisons Counter */}\n                  <motion.div\n                    className=\"bg-gray-900/50 rounded-xl p-4 border border-cyan-500/20 hover:border-cyan-500/50 transition-all duration-300\"\n                    whileHover={{ scale: 1.02 }}\n                  >\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center gap-2\">\n                        <motion.div\n                          className=\"w-3 h-3 rounded-full bg-cyan-400\"\n                          animate={{\n                            boxShadow: [\n                              '0 0 10px rgba(0, 255, 255, 0.5)',\n                              '0 0 20px rgba(0, 255, 255, 0.8)',\n                              '0 0 10px rgba(0, 255, 255, 0.5)'\n                            ]\n                          }}\n                          transition={{ duration: 1.5, repeat: Infinity }}\n                        />\n                        <span className=\"text-sm text-gray-300\">Comparisons</span>\n                      </div>\n                      <motion.span\n                        key={steps[currentStep]?.comparingIndices.length || 0}\n                        initial={{ scale: 1.3, color: '#00ffff' }}\n                        animate={{ scale: 1, color: '#ffffff' }}\n                        className=\"text-2xl font-bold text-white\"\n                      >\n                        {currentStep > 0 ? currentStep : 0}\n                      </motion.span>\n                    </div>\n                  </motion.div>\n\n                  {/* Swaps Counter */}\n                  <motion.div\n                    className=\"bg-gray-900/50 rounded-xl p-4 border border-pink-500/20 hover:border-pink-500/50 transition-all duration-300\"\n                    whileHover={{ scale: 1.02 }}\n                  >\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center gap-2\">\n                        <motion.div\n                          className=\"w-3 h-3 rounded-full bg-pink-400\"\n                          animate={{\n                            boxShadow: [\n                              '0 0 10px rgba(255, 0, 102, 0.5)',\n                              '0 0 20px rgba(255, 0, 102, 0.8)',\n                              '0 0 10px rgba(255, 0, 102, 0.5)'\n                            ]\n                          }}\n                          transition={{ duration: 1.5, repeat: Infinity, delay: 0.5 }}\n                        />\n                        <span className=\"text-sm text-gray-300\">Swaps</span>\n                      </div>\n                      <motion.span\n                        key={steps[currentStep]?.swappingIndices.length || 0}\n                        initial={{ scale: 1.3, color: '#ff0066' }}\n                        animate={{ scale: 1, color: '#ffffff' }}\n                        className=\"text-2xl font-bold text-white\"\n                      >\n                        {steps.slice(0, currentStep).filter(s => s.swappingIndices.length > 0).length}\n                      </motion.span>\n                    </div>\n                  </motion.div>\n\n                  {/* Progress Bar */}\n                  <motion.div\n                    className=\"bg-gray-900/50 rounded-xl p-4 border border-purple-500/20 hover:border-purple-500/50 transition-all duration-300\"\n                    whileHover={{ scale: 1.02 }}\n                  >\n                    <div className=\"space-y-2\">\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"flex items-center gap-2\">\n                          <motion.div\n                            className=\"w-3 h-3 rounded-full bg-purple-400\"\n                            animate={{\n                              boxShadow: [\n                                '0 0 10px rgba(168, 85, 247, 0.5)',\n                                '0 0 20px rgba(168, 85, 247, 0.8)',\n                                '0 0 10px rgba(168, 85, 247, 0.5)'\n                              ]\n                            }}\n                            transition={{ duration: 1.5, repeat: Infinity, delay: 1 }}\n                          />\n                          <span className=\"text-sm text-gray-300\">Progress</span>\n                        </div>\n                        <motion.span\n                          key={currentStep}\n                          initial={{ scale: 1.3, color: '#a855f7' }}\n                          animate={{ scale: 1, color: '#ffffff' }}\n                          className=\"text-lg font-bold text-white\"\n                        >\n                          {steps.length > 0 ? Math.round((currentStep / steps.length) * 100) : 0}%\n                        </motion.span>\n                      </div>\n                      \n                      <div className=\"relative h-3 bg-gray-700/50 rounded-full overflow-hidden\">\n                        <motion.div\n                          className=\"absolute inset-y-0 left-0 bg-gradient-to-r from-purple-500 via-pink-500 to-cyan-500 rounded-full\"\n                          initial={{ width: 0 }}\n                          animate={{\n                            width: steps.length > 0 ? `${(currentStep / steps.length) * 100}%` : '0%'\n                          }}\n                          transition={{ duration: 0.3, ease: 'easeOut' }}\n                        >\n                          <motion.div\n                            className=\"absolute inset-0 bg-gradient-to-r from-transparent via-white/30 to-transparent\"\n                            animate={{\n                              x: ['-100%', '200%']\n                            }}\n                            transition={{ duration: 1.5, repeat: Infinity, ease: 'linear' }}\n                          />\n                        </motion.div>\n                      </div>\n                    </div>\n                  </motion.div>\n\n                  {/* Sorted Elements */}\n                  <motion.div\n                    className=\"bg-gray-900/50 rounded-xl p-4 border border-green-500/20 hover:border-green-500/50 transition-all duration-300\"\n                    whileHover={{ scale: 1.02 }}\n                  >\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center gap-2\">\n                        <motion.div\n                          className=\"w-3 h-3 rounded-full bg-green-400\"\n                          animate={{\n                            boxShadow: [\n                              '0 0 10px rgba(0, 255, 0, 0.5)',\n                              '0 0 20px rgba(0, 255, 0, 0.8)',\n                              '0 0 10px rgba(0, 255, 0, 0.5)'\n                            ]\n                          }}\n                          transition={{ duration: 1.5, repeat: Infinity, delay: 1.5 }}\n                        />\n                        <span className=\"text-sm text-gray-300\">Sorted</span>\n                      </div>\n                      <motion.span\n                        key={steps[currentStep]?.sortedIndices.length || 0}\n                        initial={{ scale: 1.3, color: '#00ff00' }}\n                        animate={{ scale: 1, color: '#ffffff' }}\n                        className=\"text-2xl font-bold text-white\"\n                      >\n                        {steps[currentStep]?.sortedIndices.length || 0}/{array.length}\n                      </motion.span>\n                    </div>\n                  </motion.div>\n\n                  {/* Algorithm Complexity */}\n                  <motion.div\n                    className=\"bg-gradient-to-r from-cyan-900/30 to-purple-900/30 rounded-xl p-4 border border-cyan-500/30\"\n                    initial={{ opacity: 0 }}\n                    animate={{ opacity: 1 }}\n                    transition={{ delay: 0.5 }}\n                  >\n                    <div className=\"text-center\">\n                      <div className=\"text-xs text-gray-400 mb-1\">Time Complexity</div>\n                      <div className=\"text-xl font-bold bg-gradient-to-r from-cyan-400 to-purple-400 bg-clip-text text-transparent\">\n                        {mockAlgorithms.find(a => a.id === selectedAlgorithm)?.complexity}\n                      </div>\n                    </div>\n                  </motion.div>\n                </div>\n              </div>\n            </motion.div>\n          </div>\n\n          <div className=\"lg:col-span-3\">\n            <div className=\"bg-gray-800/50 backdrop-blur-lg rounded-2xl p-8 border border-purple-500/30 shadow-lg shadow-purple-500/20 min-h-[600px]\">\n              {array.length === 0 ? (\n                <motion.div\n                  initial={{ opacity: 0, scale: 0.8 }}\n                  animate={{ opacity: 1, scale: 1 }}\n                  className=\"flex flex-col items-center justify-center h-full space-y-6\"\n                >\n                  <motion.div\n                    animate={{\n                      rotate: [0, 360],\n                      scale: [1, 1.2, 1]\n                    }}\n                    transition={{ duration: 3, repeat: Infinity }}\n                    className=\"w-24 h-24 rounded-full bg-gradient-to-r from-cyan-500 via-purple-500 to-pink-500 flex items-center justify-center shadow-[0_0_50px_rgba(0,255,255,0.5)]\"\n                  >\n                    <BarChart3 className=\"w-12 h-12 text-white\" />\n                  </motion.div>\n                  <div className=\"text-center space-y-2\">\n                    <h3 className=\"text-2xl font-bold text-transparent bg-gradient-to-r from-cyan-400 to-purple-400 bg-clip-text\">\n                      Generate an Array to Start\n                    </h3>\n                    <p className=\"text-gray-400\">\n                      Click the \"Generate New Array\" button to begin visualizing\n                    </p>\n                  </div>\n                </motion.div>\n              ) : (\n                <div className=\"w-full h-full flex items-end justify-center gap-1 px-4\">\n                  {array.map((element, index) => {\n                    const currentStepData = steps[currentStep];\n                    const isComparing = currentStepData?.comparingIndices.includes(index);\n                    const isSwapping = currentStepData?.swappingIndices.includes(index);\n                    const isSorted = currentStepData?.sortedIndices.includes(index);\n                    \n                    const maxValue = Math.max(...array.map(el => el.value));\n                    const heightPercentage = (element.value / maxValue) * 100;\n                    \n                    let barColor = NEON_COLORS[index % NEON_COLORS.length];\n                    let shadowColor = barColor;\n                    let glowIntensity = 0.3;\n                    \n                    if (isSorted) {\n                      barColor = '#00ff00';\n                      shadowColor = '#00ff00';\n                      glowIntensity = 0.6;\n                    } else if (isSwapping) {\n                      barColor = '#ff0066';\n                      shadowColor = '#ff0066';\n                      glowIntensity = 0.8;\n                    } else if (isComparing) {\n                      barColor = '#ffff00';\n                      shadowColor = '#ffff00';\n                      glowIntensity = 0.7;\n                    }\n                    \n                    return (\n                      <motion.div\n                        key={element.id}\n                        className=\"relative flex-1 min-w-[4px] max-w-[60px] rounded-t-lg\"\n                        initial={{ height: 0, opacity: 0 }}\n                        animate={{\n                          height: `${heightPercentage}%`,\n                          opacity: 1,\n                          backgroundColor: barColor,\n                          boxShadow: [\n                            `0 0 ${glowIntensity * 20}px ${shadowColor}`,\n                            `0 0 ${glowIntensity * 40}px ${shadowColor}`,\n                            `0 0 ${glowIntensity * 20}px ${shadowColor}`\n                          ],\n                          scale: isSwapping ? [1, 1.1, 1] : isComparing ? 1.05 : 1,\n                          y: isSwapping ? [0, -10, 0] : 0\n                        }}\n                        transition={{\n                          height: { duration: 0.3, ease: 'easeOut' },\n                          backgroundColor: { duration: 0.2 },\n                          boxShadow: { duration: 1, repeat: Infinity },\n                          scale: { duration: 0.3 },\n                          y: { duration: 0.5, ease: 'easeInOut' }\n                        }}\n                        style={{\n                          background: `linear-gradient(to top, ${barColor}, ${barColor}dd)`,\n                          minHeight: '20px'\n                        }}\n                      >\n                        {/* Value label */}\n                        <motion.div\n                          className=\"absolute -top-6 left-1/2 transform -translate-x-1/2 text-xs font-mono font-bold whitespace-nowrap\"\n                          animate={{\n                            color: barColor,\n                            scale: isComparing || isSwapping ? 1.2 : 1,\n                            textShadow: `0 0 10px ${shadowColor}`\n                          }}\n                          transition={{ duration: 0.2 }}\n                        >\n                          {element.value}\n                        </motion.div>\n                        \n                        {/* Trail effect for swapping */}\n                        {isSwapping && (\n                          <motion.div\n                            className=\"absolute inset-0 rounded-t-lg\"\n                            initial={{ opacity: 0.8, scale: 1 }}\n                            animate={{\n                              opacity: 0,\n                              scale: 1.5,\n                              backgroundColor: barColor\n                            }}\n                            transition={{ duration: 0.5, repeat: Infinity }}\n                            style={{\n                              boxShadow: `0 0 30px ${shadowColor}`\n                            }}\n                          />\n                        )}\n                        \n                        {/* Pulse effect for comparing */}\n                        {isComparing && (\n                          <motion.div\n                            className=\"absolute -inset-1 rounded-t-lg border-2\"\n                            animate={{\n                              borderColor: [barColor, 'transparent', barColor],\n                              scale: [1, 1.1, 1]\n                            }}\n                            transition={{ duration: 0.6, repeat: Infinity }}\n                          />\n                        )}\n                        \n                        {/* Sparkle effect for sorted */}\n                        {isSorted && (\n                          <motion.div\n                            className=\"absolute inset-0 rounded-t-lg\"\n                            initial={{ opacity: 0 }}\n                            animate={{\n                              opacity: [0, 1, 0],\n                              scale: [0.8, 1.2, 0.8]\n                            }}\n                            transition={{ duration: 1, repeat: Infinity }}\n                            style={{\n                              background: `radial-gradient(circle, ${barColor}88, transparent)`,\n                              boxShadow: `0 0 20px ${shadowColor}`\n                            }}\n                          />\n                        )}\n                      </motion.div>\n                    );\n                  })}\n                </div>\n              )}\n              \n              <div className=\"h-full flex items-end justify-center gap-1\">\n                {array.length === 0 ? (\n                  <motion.div\n                    initial={{ opacity: 0, scale: 0.8 }}\n                    animate={{ opacity: 1, scale: 1 }}\n                    className=\"flex flex-col items-center justify-center h-full space-y-6\"\n                  >\n                    <motion.div\n                      animate={{\n                        rotate: [0, 360],\n                        scale: [1, 1.2, 1]\n                      }}\n                      transition={{\n                        duration: 3,\n                        repeat: Infinity,\n                        ease: \"easeInOut\"\n                      }}\n                    >\n                      <BarChart3 className=\"w-24 h-24 text-cyan-400/50\" />\n                    </motion.div>\n                    <div className=\"text-center space-y-2\">\n                      <p className=\"text-2xl font-semibold text-gray-400\">\n                        Generate an array to begin\n                      </p>\n                      <p className=\"text-sm text-gray-500\">\n                        Click the \"Generate Array\" button to start visualizing\n                      </p>\n                    </div>\n                  </motion.div>\n                ) : (\n                  array.map((element, index) => {\n                    const colorIndex = index % NEON_COLORS.length;\n                    const baseColor = NEON_COLORS[colorIndex];\n                    \n                    const isComparing = element.isComparing;\n                    const isSwapping = element.isSwapping;\n                    const isSorted = element.isSorted;\n                    \n                    let barColor = baseColor;\n                    let glowColor = baseColor;\n                    let glowIntensity = '0.3';\n                    \n                    if (isSorted) {\n                      barColor = '#00ff00';\n                      glowColor = '#00ff00';\n                      glowIntensity = '0.6';\n                    } else if (isSwapping) {\n                      barColor = '#ff0066';\n                      glowColor = '#ff0066';\n                      glowIntensity = '0.8';\n                    } else if (isComparing) {\n                      barColor = '#ffff00';\n                      glowColor = '#ffff00';\n                      glowIntensity = '0.7';\n                    }\n                    \n                    const maxHeight = 500;\n                    const barHeight = (element.value / 100) * maxHeight;\n                    const barWidth = Math.max(8, Math.min(60, 800 / array.length));\n                    \n                    return (\n                      <motion.div\n                        key={element.id}\n                        className=\"relative flex flex-col items-center justify-end\"\n                        initial={{ opacity: 0, y: 50 }}\n                        animate={{\n                          opacity: 1,\n                          y: 0,\n                          scale: isSwapping ? [1, 1.1, 1] : 1,\n                          x: isSwapping ? [0, -5, 5, 0] : 0\n                        }}\n                        transition={{\n                          opacity: { duration: 0.3 },\n                          y: { duration: 0.3 },\n                          scale: { duration: 0.3, repeat: isSwapping ? Infinity : 0 },\n                          x: { duration: 0.2, repeat: isSwapping ? Infinity : 0 }\n                        }}\n                        style={{ width: barWidth }}\n                      >\n                        {/* Trail effect */}\n                        {isSwapping && (\n                          <>\n                            <motion.div\n                              className=\"absolute bottom-0 rounded-t-lg\"\n                              style={{\n                                width: barWidth,\n                                height: barHeight,\n                                backgroundColor: barColor,\n                                opacity: 0.3,\n                                filter: `blur(8px)`\n                              }}\n                              animate={{\n                                opacity: [0.3, 0.1, 0.3],\n                                scale: [1, 1.05, 1]\n                              }}\n                              transition={{\n                                duration: 0.5,\n                                repeat: Infinity\n                              }}\n                            />\n                            <motion.div\n                              className=\"absolute bottom-0 rounded-t-lg\"\n                              style={{\n                                width: barWidth,\n                                height: barHeight,\n                                backgroundColor: barColor,\n                                opacity: 0.2,\n                                filter: `blur(16px)`\n                              }}\n                              animate={{\n                                opacity: [0.2, 0.05, 0.2],\n                                scale: [1, 1.1, 1]\n                              }}\n                              transition={{\n                                duration: 0.7,\n                                repeat: Infinity\n                              }}\n                            />\n                          </>\n                        )}\n                        \n                        {/* Main bar */}\n                        <motion.div\n                          className=\"relative rounded-t-lg overflow-hidden\"\n                          style={{\n                            width: barWidth,\n                            backgroundColor: barColor,\n                            boxShadow: `\n                              0 0 20px rgba(${parseInt(barColor.slice(1, 3), 16)}, ${parseInt(barColor.slice(3, 5), 16)}, ${parseInt(barColor.slice(5, 7), 16)}, ${glowIntensity}),\n                              0 0 40px rgba(${parseInt(barColor.slice(1, 3), 16)}, ${parseInt(barColor.slice(3, 5), 16)}, ${parseInt(barColor.slice(5, 7), 16)}, ${parseFloat(glowIntensity) * 0.6}),\n                              inset 0 0 20px rgba(255, 255, 255, 0.1)\n                            `\n                          }}\n                          animate={{\n                            height: barHeight,\n                            boxShadow: isComparing || isSwapping || isSorted\n                              ? [\n                                  `0 0 20px rgba(${parseInt(barColor.slice(1, 3), 16)}, ${parseInt(barColor.slice(3, 5), 16)}, ${parseInt(barColor.slice(5, 7), 16)}, ${glowIntensity}),\n                                   0 0 40px rgba(${parseInt(barColor.slice(1, 3), 16)}, ${parseInt(barColor.slice(3, 5), 16)}, ${parseInt(barColor.slice(5, 7), 16)}, ${parseFloat(glowIntensity) * 0.6}),\n                                   inset 0 0 20px rgba(255, 255, 255, 0.1)`,\n                                  `0 0 30px rgba(${parseInt(barColor.slice(1, 3), 16)}, ${parseInt(barColor.slice(3, 5), 16)}, ${parseInt(barColor.slice(5, 7), 16)}, ${parseFloat(glowIntensity) * 1.2}),\n                                   0 0 60px rgba(${parseInt(barColor.slice(1, 3), 16)}, ${parseInt(barColor.slice(3, 5), 16)}, ${parseInt(barColor.slice(5, 7), 16)}, ${parseFloat(glowIntensity) * 0.8}),\n                                   inset 0 0 20px rgba(255, 255, 255, 0.2)`,\n                                  `0 0 20px rgba(${parseInt(barColor.slice(1, 3), 16)}, ${parseInt(barColor.slice(3, 5), 16)}, ${parseInt(barColor.slice(5, 7), 16)}, ${glowIntensity}),\n                                   0 0 40px rgba(${parseInt(barColor.slice(1, 3), 16)}, ${parseInt(barColor.slice(3, 5), 16)}, ${parseInt(barColor.slice(5, 7), 16)}, ${parseFloat(glowIntensity) * 0.6}),\n                                   inset 0 0 20px rgba(255, 255, 255, 0.1)`\n                                ]\n                              : `0 0 20px rgba(${parseInt(barColor.slice(1, 3), 16)}, ${parseInt(barColor.slice(3, 5), 16)}, ${parseInt(barColor.slice(5, 7), 16)}, ${glowIntensity}),\n                                 0 0 40px rgba(${parseInt(barColor.slice(1, 3), 16)}, ${parseInt(barColor.slice(3, 5), 16)}, ${parseInt(barColor.slice(5, 7), 16)}, ${parseFloat(glowIntensity) * 0.6}),\n                                 inset 0 0 20px rgba(255, 255, 255, 0.1)`\n                          }}\n                          transition={{\n                            height: { duration: 0.5, ease: \"easeInOut\" },\n                            boxShadow: { duration: 0.4, repeat: (isComparing || isSwapping) ? Infinity : 0 }\n                          }}\n                        >\n                          {/* Shimmer effect */}\n                          <motion.div\n                            className=\"absolute inset-0 bg-gradient-to-b from-white/30 via-transparent to-transparent\"\n                            animate={{\n                              opacity: [0.3, 0.6, 0.3]\n                            }}\n                            transition={{\n                              duration: 1.5,\n                              repeat: Infinity,\n                              ease: \"easeInOut\"\n                            }}\n                          />\n                          \n                          {/* Scanning line effect for comparing/swapping */}\n                          {(isComparing || isSwapping) && (\n                            <motion.div\n                              className=\"absolute inset-x-0 h-1 bg-white/80\"\n                              style={{\n                                boxShadow: `0 0 10px ${barColor}, 0 0 20px ${barColor}`\n                              }}\n                              animate={{\n                                top: ['0%', '100%']\n                              }}\n                              transition={{\n                                duration: 0.8,\n                                repeat: Infinity,\n                                ease: \"linear\"\n                              }}\n                            />\n                          )}\n                          \n                          {/* Particle burst effect for sorted */}\n                          {isSorted && (\n                            <>\n                              {[...Array(6)].map((_, i) => (\n                                <motion.div\n                                  key={i}\n                                  className=\"absolute top-0 left-1/2 w-1 h-1 rounded-full bg-white\"\n                                  initial={{\n                                    opacity: 1,\n                                    x: 0,\n                                    y: 0\n                                  }}\n                                  animate={{\n                                    opacity: [1, 0],\n                                    x: Math.cos((i * Math.PI * 2) / 6) * 20,\n                                    y: Math.sin((i * Math.PI * 2) / 6) * 20 - 20\n                                  }}\n                                  transition={{\n                                    duration: 0.6,\n                                    ease: \"easeOut\"\n                                  }}\n                                />\n                              ))}\n                            </>\n                          )}\n                        </motion.div>\n                        \n                        {/* Value label */}\n                        {barWidth > 20 && (\n                          <motion.div\n                            className=\"absolute top-0 left-1/2 transform -translate-x-1/2 -translate-y-6 text-xs font-bold text-white\"\n                            style={{\n                              textShadow: `0 0 10px ${barColor}, 0 0 20px ${barColor}`\n                            }}\n                            initial={{ opacity: 0, y: 10 }}\n                            animate={{ opacity: 1, y: 0 }}\n                            transition={{ delay: index * 0.02 }}\n                          >\n                            {element.value}\n                          </motion.div>\n                        )}\n                        \n                        {/* Status indicator */}\n                        {(isComparing || isSwapping || isSorted) && (\n                          <motion.div\n                            className=\"absolute -top-10 left-1/2 transform -translate-x-1/2\"\n                            initial={{ scale: 0, opacity: 0 }}\n                            animate={{ scale: 1, opacity: 1 }}\n                            exit={{ scale: 0, opacity: 0 }}\n                          >\n                            <motion.div\n                              className=\"w-3 h-3 rounded-full\"\n                              style={{\n                                backgroundColor: barColor,\n                                boxShadow: `0 0 15px ${barColor}, 0 0 30px ${barColor}`\n                              }}\n                              animate={{\n                                scale: [1, 1.3, 1]\n                              }}\n                              transition={{\n                                duration: 0.6,\n                                repeat: Infinity\n                              }}\n                            />\n                          </motion.div>\n                        )}\n                      </motion.div>\n                    );\n                  })\n                )}\n              </div>\n            </div>\n\n            <motion.div\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ delay: 0.3, duration: 0.6 }}\n              className=\"mt-6 bg-gray-800/50 backdrop-blur-lg rounded-xl p-6 border border-purple-500/30 shadow-lg shadow-purple-500/10\"\n            >\n              <h3 className=\"text-purple-400 font-semibold mb-4 flex items-center gap-2\">\n                <BarChart3 className=\"w-5 h-5\" />\n                Legend\n              </h3>\n              <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n                <motion.div\n                  className=\"flex items-center gap-3 p-3 bg-gray-700/30 rounded-lg border border-gray-600/50\"\n                  whileHover={{ scale: 1.05, borderColor: 'rgba(0, 255, 255, 0.5)' }}\n                >\n                  <motion.div\n                    className=\"w-4 h-8 bg-gradient-to-t from-cyan-500 to-cyan-300 rounded\"\n                    animate={{\n                      boxShadow: [\n                        '0 0 10px rgba(0, 255, 255, 0.5)',\n                        '0 0 20px rgba(0, 255, 255, 0.8)',\n                        '0 0 10px rgba(0, 255, 255, 0.5)'\n                      ]\n                    }}\n                    transition={{ duration: 1.5, repeat: Infinity }}\n                  />\n                  <div>\n                    <div className=\"text-xs font-medium text-white\">Default</div>\n                    <div className=\"text-xs text-gray-400\">Unsorted</div>\n                  </div>\n                </motion.div>\n\n                <motion.div\n                  className=\"flex items-center gap-3 p-3 bg-gray-700/30 rounded-lg border border-gray-600/50\"\n                  whileHover={{ scale: 1.05, borderColor: 'rgba(255, 255, 0, 0.5)' }}\n                >\n                  <motion.div\n                    className=\"w-4 h-8 bg-gradient-to-t from-yellow-500 to-yellow-300 rounded\"\n                    animate={{\n                      boxShadow: [\n                        '0 0 15px rgba(255, 255, 0, 0.6)',\n                        '0 0 25px rgba(255, 255, 0, 0.9)',\n                        '0 0 15px rgba(255, 255, 0, 0.6)'\n                      ],\n                      scale: [1, 1.1, 1]\n                    }}\n                    transition={{ duration: 1, repeat: Infinity }}\n                  />\n                  <div>\n                    <div className=\"text-xs font-medium text-white\">Comparing</div>\n                    <div className=\"text-xs text-gray-400\">Active</div>\n                  </div>\n                </motion.div>\n\n                <motion.div\n                  className=\"flex items-center gap-3 p-3 bg-gray-700/30 rounded-lg border border-gray-600/50\"\n                  whileHover={{ scale: 1.05, borderColor: 'rgba(255, 0, 255, 0.5)' }}\n                >\n                  <motion.div\n                    className=\"w-4 h-8 bg-gradient-to-t from-pink-500 to-pink-300 rounded\"\n                    animate={{\n                      boxShadow: [\n                        '0 0 15px rgba(255, 0, 255, 0.6)',\n                        '0 0 25px rgba(255, 0, 255, 0.9)',\n                        '0 0 15px rgba(255, 0, 255, 0.6)'\n                      ],\n                      x: [-2, 2, -2]\n                    }}\n                    transition={{ duration: 0.8, repeat: Infinity }}\n                  />\n                  <div>\n                    <div className=\"text-xs font-medium text-white\">Swapping</div>\n                    <div className=\"text-xs text-gray-400\">Moving</div>\n                  </div>\n                </motion.div>\n\n                <motion.div\n                  className=\"flex items-center gap-3 p-3 bg-gray-700/30 rounded-lg border border-gray-600/50\"\n                  whileHover={{ scale: 1.05, borderColor: 'rgba(0, 255, 0, 0.5)' }}\n                >\n                  <motion.div\n                    className=\"w-4 h-8 bg-gradient-to-t from-green-500 to-green-300 rounded\"\n                    animate={{\n                      boxShadow: [\n                        '0 0 10px rgba(0, 255, 0, 0.5)',\n                        '0 0 20px rgba(0, 255, 0, 0.8)',\n                        '0 0 10px rgba(0, 255, 0, 0.5)'\n                      ]\n                    }}\n                    transition={{ duration: 2, repeat: Infinity }}\n                  />\n                  <div>\n                    <div className=\"text-xs font-medium text-white\">Sorted</div>\n                    <div className=\"text-xs text-gray-400\">Complete</div>\n                  </div>\n                </motion.div>\n              </div>\n            </motion.div>\n          </div>\n        </div>\n\n        <motion.div\n          initial={{ opacity: 0, y: 50 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ delay: 0.4, duration: 0.6 }}\n          className=\"bg-gray-800/50 backdrop-blur-lg rounded-2xl p-6 border border-cyan-500/30 shadow-[0_0_30px_rgba(0,255,255,0.2)]\"\n        >\n          <div className=\"space-y-4\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center gap-2\">\n                <motion.div\n                  animate={{\n                    rotate: [0, 360]\n                  }}\n                  transition={{ duration: 2, repeat: Infinity, ease: 'linear' }}\n                >\n                  <BarChart3 className=\"w-5 h-5 text-cyan-400\" />\n                </motion.div>\n                <h3 className=\"font-semibold text-lg text-cyan-400\">Timeline Control</h3>\n              </div>\n              <div className=\"flex items-center gap-2 px-3 py-1 bg-purple-500/20 rounded-full border border-purple-400/50\">\n                <span className=\"text-sm text-purple-300 font-mono\">\n                  Step {currentStep} / {steps.length}\n                </span>\n              </div>\n            </div>\n\n            {/* Progress Bar */}\n            <div className=\"relative h-3 bg-gray-700/50 rounded-full overflow-hidden border border-gray-600/50\">\n              <motion.div\n                className=\"absolute inset-y-0 left-0 bg-gradient-to-r from-cyan-500 via-purple-500 to-pink-500 rounded-full\"\n                initial={{ width: 0 }}\n                animate={{\n                  width: steps.length > 0 ? `${(currentStep / steps.length) * 100}%` : '0%'\n                }}\n                transition={{ duration: 0.3 }}\n              />\n              <motion.div\n                className=\"absolute inset-0 bg-gradient-to-r from-transparent via-white/30 to-transparent\"\n                animate={{\n                  x: ['-100%', '200%']\n                }}\n                transition={{ duration: 2, repeat: Infinity, ease: 'linear' }}\n              />\n            </div>\n\n            {/* Timeline Scrubber */}\n            <div className=\"relative pt-2\">\n              <input\n                type=\"range\"\n                min={0}\n                max={Math.max(0, steps.length - 1)}\n                value={currentStep}\n                onChange={(e) => {\n                  const newStep = parseInt(e.target.value);\n                  setCurrentStep(newStep);\n                  if (newStep < steps.length) {\n                    setArray(steps[newStep].array);\n                  }\n                  setIsPlaying(false);\n                }}\n                disabled={steps.length === 0}\n                className=\"w-full h-2 bg-gray-700/50 rounded-full appearance-none cursor-pointer disabled:cursor-not-allowed disabled:opacity-50\n                  [&::-webkit-slider-thumb]:appearance-none [&::-webkit-slider-thumb]:w-5 [&::-webkit-slider-thumb]:h-5 \n                  [&::-webkit-slider-thumb]:rounded-full [&::-webkit-slider-thumb]:bg-gradient-to-r \n                  [&::-webkit-slider-thumb]:from-cyan-400 [&::-webkit-slider-thumb]:to-purple-500 \n                  [&::-webkit-slider-thumb]:border-2 [&::-webkit-slider-thumb]:border-white \n                  [&::-webkit-slider-thumb]:shadow-[0_0_20px_rgba(0,255,255,0.8)] \n                  [&::-webkit-slider-thumb]:cursor-pointer [&::-webkit-slider-thumb]:transition-all\n                  [&::-webkit-slider-thumb]:hover:scale-125 [&::-webkit-slider-thumb]:hover:shadow-[0_0_30px_rgba(0,255,255,1)]\n                  [&::-moz-range-thumb]:w-5 [&::-moz-range-thumb]:h-5 [&::-moz-range-thumb]:rounded-full \n                  [&::-moz-range-thumb]:bg-gradient-to-r [&::-moz-range-thumb]:from-cyan-400 \n                  [&::-moz-range-thumb]:to-purple-500 [&::-moz-range-thumb]:border-2 \n                  [&::-moz-range-thumb]:border-white [&::-moz-range-thumb]:cursor-pointer\n                  [&::-moz-range-thumb]:transition-all [&::-moz-range-thumb]:hover:scale-125\"\n              />\n              \n              {/* Step Markers */}\n              {steps.length > 0 && steps.length <= 50 && (\n                <div className=\"absolute top-0 left-0 right-0 flex justify-between pointer-events-none\">\n                  {steps.map((_, index) => (\n                    <motion.div\n                      key={index}\n                      initial={{ scale: 0 }}\n                      animate={{ scale: index <= currentStep ? 1 : 0.5 }}\n                      className={`w-1 h-1 rounded-full transition-all duration-300 ${\n                        index < currentStep\n                          ? 'bg-cyan-400 shadow-[0_0_8px_rgba(0,255,255,0.8)]'\n                          : index === currentStep\n                          ? 'bg-purple-400 shadow-[0_0_12px_rgba(168,85,247,1)] scale-150'\n                          : 'bg-gray-600'\n                      }`}\n                    />\n                  ))}\n                </div>\n              )}\n            </div>\n\n            {/* Quick Navigation Buttons */}\n            <div className=\"flex items-center justify-between gap-2 pt-2\">\n              <Button\n                onClick={() => {\n                  setCurrentStep(0);\n                  if (steps.length > 0) {\n                    setArray(steps[0].array);\n                  }\n                  setIsPlaying(false);\n                }}\n                disabled={steps.length === 0 || currentStep === 0}\n                size=\"sm\"\n                className=\"flex-1 bg-gray-700/50 hover:bg-gray-600/50 text-cyan-400 border border-cyan-500/30 hover:border-cyan-400/50 hover:shadow-[0_0_15px_rgba(0,255,255,0.3)] transition-all duration-300 disabled:opacity-30\"\n              >\n                <span className=\"text-xs font-semibold\">First</span>\n              </Button>\n              \n              <Button\n                onClick={() => {\n                  const newStep = Math.max(0, currentStep - 1);\n                  setCurrentStep(newStep);\n                  if (newStep < steps.length) {\n                    setArray(steps[newStep].array);\n                  }\n                  setIsPlaying(false);\n                }}\n                disabled={steps.length === 0 || currentStep === 0}\n                size=\"sm\"\n                className=\"flex-1 bg-gray-700/50 hover:bg-gray-600/50 text-purple-400 border border-purple-500/30 hover:border-purple-400/50 hover:shadow-[0_0_15px_rgba(168,85,247,0.3)] transition-all duration-300 disabled:opacity-30\"\n              >\n                <span className=\"text-xs font-semibold\">\u2190 Prev</span>\n              </Button>\n              \n              <Button\n                onClick={() => {\n                  const newStep = Math.min(steps.length - 1, currentStep + 1);\n                  setCurrentStep(newStep);\n                  if (newStep < steps.length) {\n                    setArray(steps[newStep].array);\n                  }\n                  setIsPlaying(false);\n                }}\n                disabled={steps.length === 0 || currentStep >= steps.length - 1}\n                size=\"sm\"\n                className=\"flex-1 bg-gray-700/50 hover:bg-gray-600/50 text-pink-400 border border-pink-500/30 hover:border-pink-400/50 hover:shadow-[0_0_15px_rgba(236,72,153,0.3)] transition-all duration-300 disabled:opacity-30\"\n              >\n                <span className=\"text-xs font-semibold\">Next \u2192</span>\n              </Button>\n              \n              <Button\n                onClick={() => {\n                  const lastStep = steps.length - 1;\n                  setCurrentStep(lastStep);\n                  if (lastStep >= 0 && lastStep < steps.length) {\n                    setArray(steps[lastStep].array);\n                  }\n                  setIsPlaying(false);\n                }}\n                disabled={steps.length === 0 || currentStep >= steps.length - 1}\n                size=\"sm\"\n                className=\"flex-1 bg-gray-700/50 hover:bg-gray-600/50 text-cyan-400 border border-cyan-500/30 hover:border-cyan-400/50 hover:shadow-[0_0_15px_rgba(0,255,255,0.3)] transition-all duration-300 disabled:opacity-30\"\n              >\n                <span className=\"text-xs font-semibold\">Last</span>\n              </Button>\n            </div>\n\n            {/* Status Indicator */}\n            {steps.length > 0 && (\n              <motion.div\n                initial={{ opacity: 0 }}\n                animate={{ opacity: 1 }}\n                className=\"flex items-center justify-center gap-2 pt-2 text-sm\"\n              >\n                {currentStep >= steps.length ? (\n                  <div className=\"flex items-center gap-2 text-green-400\">\n                    <motion.div\n                      animate={{ scale: [1, 1.2, 1] }}\n                      transition={{ duration: 1, repeat: Infinity }}\n                      className=\"w-2 h-2 rounded-full bg-green-400 shadow-[0_0_10px_rgba(74,222,128,0.8)]\"\n                    />\n                    <span className=\"font-semibold\">Sorting Complete!</span>\n                  </div>\n                ) : isPlaying ? (\n                  <div className=\"flex items-center gap-2 text-cyan-400\">\n                    <motion.div\n                      animate={{ scale: [1, 1.3, 1] }}\n                      transition={{ duration: 0.8, repeat: Infinity }}\n                      className=\"w-2 h-2 rounded-full bg-cyan-400 shadow-[0_0_10px_rgba(0,255,255,0.8)]\"\n                    />\n                    <span className=\"font-semibold\">Playing...</span>\n                  </div>\n                ) : (\n                  <div className=\"flex items-center gap-2 text-gray-400\">\n                    <div className=\"w-2 h-2 rounded-full bg-gray-400\" />\n                    <span>Paused</span>\n                  </div>\n                )}\n              </motion.div>\n            )}\n          </div>\n        </motion.div>\n      </div>\n    </div>\n  );\n}",
  "error": null,
  "overall_score": 47,
  "code_quality_score": 14,
  "architecture_score": 12,
  "performance_score": 10,
  "accessibility_score": 11,
  "metadata": {
    "document_id": "eval_room_0c76fb0f645a",
    "prompt_category": "creative",
    "prompt_complexity": 9.0
  },
  "raw_response": {
    "document_id": "eval_room_0c76fb0f645a",
    "mode": "parallel",
    "prompt": "Build a captivating algorithm visualizer with neon colored bars, smooth height transitions, glowing comparison indicators, trail effects during swaps, and a futuristic dashboard design with animated controls",
    "content": "import { useState, useCallback } from 'react';\nimport { useEffect, useRef } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Slider } from '@/components/ui/slider';\nimport { Play, Pause, RotateCcw, Zap, BarChart3 } from 'lucide-react';\nimport { motion } from 'framer-motion';\n\ninterface ArrayElement {\n  value: number;\n  id: string;\n  isComparing?: boolean;\n  isSwapping?: boolean;\n  isSorted?: boolean;\n}\n\ninterface AlgorithmStep {\n  array: ArrayElement[];\n  comparingIndices: number[];\n  swappingIndices: number[];\n  sortedIndices: number[];\n}\n\ntype AlgorithmType = 'bubble' | 'quick' | 'merge' | 'insertion';\n\nconst NEON_COLORS = [\n  '#00ffff',\n  '#ff00ff', \n  '#00ff00',\n  '#ffff00',\n  '#ff0066',\n  '#00ffaa'\n];\n\nconst mockAlgorithms = [\n  { id: 'bubble', name: 'Bubble Sort', complexity: 'O(n\u00b2)' },\n  { id: 'quick', name: 'Quick Sort', complexity: 'O(n log n)' },\n  { id: 'merge', name: 'Merge Sort', complexity: 'O(n log n)' },\n  { id: 'insertion', name: 'Insertion Sort', complexity: 'O(n\u00b2)' }\n];\n\n// Animation controller hook\nconst useAnimationController = (\n  steps: AlgorithmStep[],\n  speed: number[],\n  isPlaying: boolean,\n  currentStep: number,\n  setCurrentStep: (step: number) => void,\n  setArray: (array: ArrayElement[]) => void,\n  setIsPlaying: (playing: boolean) => void\n) => {\n  const animationRef = useRef<NodeJS.Timeout | null>(null);\n\n  useEffect(() => {\n    if (isPlaying && currentStep < steps.length) {\n      const delay = 1000 - speed[0] * 9.5; // Convert speed (0-100) to delay (1000ms-50ms)\n      \n      animationRef.current = setTimeout(() => {\n        const step = steps[currentStep];\n        setArray(step.array);\n        setCurrentStep(currentStep + 1);\n      }, delay);\n    } else if (currentStep >= steps.length && isPlaying) {\n      setIsPlaying(false);\n    }\n\n    return () => {\n      if (animationRef.current) {\n        clearTimeout(animationRef.current);\n      }\n    };\n  }, [isPlaying, currentStep, steps, speed, setCurrentStep, setArray, setIsPlaying]);\n};\nexport default function AlgorithmVisualizer() {\n  const [array, setArray] = useState<ArrayElement[]>([]);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [speed, setSpeed] = useState([50]);\n  const [arraySize, setArraySize] = useState([20]);\n  const [selectedAlgorithm, setSelectedAlgorithm] = useState<AlgorithmType>('bubble');\n  const [currentStep, setCurrentStep] = useState(0);\n  const [steps, setSteps] = useState<AlgorithmStep[]>([]);\n\n  const generateRandomArray = useCallback(() => {\n    const newArray: ArrayElement[] = Array.from({ length: arraySize[0] }, (_, index) => ({\n      value: Math.floor(Math.random() * 100) + 5,\n      id: `element-${index}-${Date.now()}`,\n      isComparing: false,\n      isSwapping: false,\n      isSorted: false\n    }));\n    setArray(newArray);\n    setSteps([]);\n    setCurrentStep(0);\n    setIsPlaying(false);\n  }, [arraySize]);\n\n  const resetVisualization = useCallback(() => {\n\n    setIsPlaying(false);\n    setCurrentStep(0);\n    setSteps([]);\n    generateRandomArray();\n  }, [generateRandomArray]);\n\n  const startVisualization = useCallback(() => {\n    if (steps.length === 0) return;\n    setIsPlaying(true);\n    if (currentStep >= steps.length) {\n      setCurrentStep(0);\n    }\n  }, [steps, speed, currentStep]);\n\n  const pauseVisualization = useCallback(() => {\n    setIsPlaying(false);\n  }, []);\n\n  const generateSortingSteps = useCallback((algorithm: AlgorithmType) => {\n    if (!array.length) return;\n\n    const arr = [...array];\n    const newSteps: AlgorithmStep[] = [];\n\n    const addStep = (\n      currentArray: ArrayElement[],\n      comparing: number[] = [],\n      swapping: number[] = [],\n      sorted: number[] = []\n    ) => {\n      newSteps.push({\n        array: currentArray.map((el, idx) => ({\n          ...el,\n          isComparing: comparing.includes(idx),\n          isSwapping: swapping.includes(idx),\n          isSorted: sorted.includes(idx)\n        })),\n        comparingIndices: comparing,\n        swappingIndices: swapping,\n        sortedIndices: sorted\n      });\n    };\n\n    // Initial state\n    addStep([...arr]);\n\n    if (algorithm === 'bubble') {\n      const sortedIndices: number[] = [];\n      for (let i = 0; i < arr.length - 1; i++) {\n        for (let j = 0; j < arr.length - i - 1; j++) {\n          // Comparing\n          addStep([...arr], [j, j + 1], [], sortedIndices);\n          \n          if (arr[j].value > arr[j + 1].value) {\n            // Swapping\n            addStep([...arr], [], [j, j + 1], sortedIndices);\n            [arr[j], arr[j + 1]] = [arr[j + 1], arr[j]];\n            addStep([...arr], [], [j, j + 1], sortedIndices);\n          }\n        }\n        sortedIndices.push(arr.length - i - 1);\n        addStep([...arr], [], [], sortedIndices);\n      }\n      sortedIndices.push(0);\n      addStep([...arr], [], [], sortedIndices);\n    } else if (algorithm === 'insertion') {\n      const sortedIndices: number[] = [0];\n      addStep([...arr], [], [], sortedIndices);\n      \n      for (let i = 1; i < arr.length; i++) {\n        const key = arr[i];\n        let j = i - 1;\n        \n        addStep([...arr], [i], [], sortedIndices);\n        \n        while (j >= 0 && arr[j].value > key.value) {\n          addStep([...arr], [j, j + 1], [], sortedIndices);\n          addStep([...arr], [], [j, j + 1], sortedIndices);\n          arr[j + 1] = arr[j];\n          addStep([...arr], [], [j, j + 1], sortedIndices);\n          j--;\n        }\n        arr[j + 1] = key;\n        sortedIndices.push(i);\n        addStep([...arr], [], [], sortedIndices);\n      }\n    } else if (algorithm === 'quick') {\n      const sortedIndices: number[] = [];\n      \n      const partition = (low: number, high: number): number => {\n        const pivot = arr[high];\n        addStep([...arr], [high], [], sortedIndices);\n        let i = low - 1;\n        \n        for (let j = low; j < high; j++) {\n          addStep([...arr], [j, high], [], sortedIndices);\n          \n          if (arr[j].value < pivot.value) {\n            i++;\n            if (i !== j) {\n              addStep([...arr], [], [i, j], sortedIndices);\n              [arr[i], arr[j]] = [arr[j], arr[i]];\n              addStep([...arr], [], [i, j], sortedIndices);\n            }\n          }\n        }\n        \n        addStep([...arr], [], [i + 1, high], sortedIndices);\n        [arr[i + 1], arr[high]] = [arr[high], arr[i + 1]];\n        addStep([...arr], [], [i + 1, high], sortedIndices);\n        sortedIndices.push(i + 1);\n        addStep([...arr], [], [], sortedIndices);\n        \n        return i + 1;\n      };\n      \n      const quickSort = (low: number, high: number) => {\n        if (low < high) {\n          const pi = partition(low, high);\n          quickSort(low, pi - 1);\n          quickSort(pi + 1, high);\n        } else if (low === high) {\n          sortedIndices.push(low);\n          addStep([...arr], [], [], sortedIndices);\n        }\n      };\n      \n      quickSort(0, arr.length - 1);\n    } else if (algorithm === 'merge') {\n      const sortedIndices: number[] = [];\n      \n      const merge = (left: number, mid: number, right: number) => {\n        const leftArr = arr.slice(left, mid + 1);\n        const rightArr = arr.slice(mid + 1, right + 1);\n        \n        let i = 0, j = 0, k = left;\n        \n        while (i < leftArr.length && j < rightArr.length) {\n          addStep([...arr], [left + i, mid + 1 + j], [], sortedIndices);\n          \n          if (leftArr[i].value <= rightArr[j].value) {\n            addStep([...arr], [], [k], sortedIndices);\n            arr[k] = leftArr[i];\n            addStep([...arr], [], [k], sortedIndices);\n            i++;\n          } else {\n            addStep([...arr], [], [k], sortedIndices);\n            arr[k] = rightArr[j];\n            addStep([...arr], [], [k], sortedIndices);\n            j++;\n          }\n          k++;\n        }\n        \n        while (i < leftArr.length) {\n          addStep([...arr], [], [k], sortedIndices);\n          arr[k] = leftArr[i];\n          addStep([...arr], [], [k], sortedIndices);\n          i++;\n          k++;\n        }\n        \n        while (j < rightArr.length) {\n          addStep([...arr], [], [k], sortedIndices);\n          arr[k] = rightArr[j];\n          addStep([...arr], [], [k], sortedIndices);\n          j++;\n          k++;\n        }\n        \n        if (left === 0 && right === arr.length - 1) {\n          for (let idx = left; idx <= right; idx++) {\n            sortedIndices.push(idx);\n          }\n        }\n        addStep([...arr], [], [], sortedIndices);\n      };\n      \n      const mergeSort = (left: number, right: number) => {\n        if (left < right) {\n          const mid = Math.floor((left + right) / 2);\n          mergeSort(left, mid);\n          mergeSort(mid + 1, right);\n          merge(left, mid, right);\n        }\n      };\n      \n      mergeSort(0, arr.length - 1);\n    }\n\n    setSteps(newSteps);\n    setCurrentStep(0);\n  }, [array]);\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-gray-900 via-purple-900 to-gray-900 p-8\">\n      <div className=\"max-w-7xl mx-auto space-y-8\">\n        <motion.div\n          initial={{ opacity: 0, y: -20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.8 }}\n          className=\"text-center space-y-4\"\n        >\n          <motion.h1\n            className=\"text-6xl font-bold bg-gradient-to-r from-cyan-400 via-purple-400 to-pink-400 bg-clip-text text-transparent\"\n            animate={{\n              textShadow: [\n                '0 0 20px rgba(0, 255, 255, 0.5)',\n                '0 0 40px rgba(255, 0, 255, 0.5)',\n                '0 0 20px rgba(0, 255, 255, 0.5)'\n              ]\n            }}\n            transition={{ duration: 2, repeat: Infinity }}\n          >\n            Algorithm Visualizer\n          </motion.h1>\n          \n          <div className=\"flex items-center justify-center gap-4\">\n            <motion.div\n              initial={{ scale: 0 }}\n              animate={{ scale: 1 }}\n              transition={{ delay: 0.3, type: 'spring', stiffness: 200 }}\n              className=\"flex items-center gap-2 px-6 py-3 bg-gray-800/50 backdrop-blur-sm rounded-full border border-cyan-500/30\"\n            >\n              <Zap className=\"w-5 h-5 text-cyan-400\" />\n              <span className=\"text-xl font-semibold text-cyan-300\">\n                {mockAlgorithms.find(a => a.id === selectedAlgorithm)?.name || 'Bubble Sort'}\n              </span>\n            </motion.div>\n            \n            <motion.div\n              initial={{ scale: 0 }}\n              animate={{ scale: 1 }}\n              transition={{ delay: 0.5, type: 'spring', stiffness: 200 }}\n              className=\"relative px-4 py-2 bg-gradient-to-r from-purple-600/20 to-pink-600/20 backdrop-blur-sm rounded-lg border border-purple-400/50 overflow-hidden\"\n            >\n              <motion.div\n                className=\"absolute inset-0 bg-gradient-to-r from-purple-500/20 to-pink-500/20\"\n                animate={{\n                  x: ['-100%', '100%']\n                }}\n                transition={{ duration: 3, repeat: Infinity, ease: 'linear' }}\n              />\n              <div className=\"relative flex items-center gap-2\">\n                <BarChart3 className=\"w-4 h-4 text-purple-300\" />\n                <span className=\"text-sm font-mono text-purple-200\">\n                  {mockAlgorithms.find(a => a.id === selectedAlgorithm)?.complexity || 'O(n\u00b2)'}\n                </span>\n              </div>\n            </motion.div>\n          </div>\n        </motion.div></parameter>\n</invoke>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-6\">\n          <div className=\"lg:col-span-1 space-y-6\">\n            <motion.div\n              initial={{ opacity: 0, x: -50 }}\n              animate={{ opacity: 1, x: 0 }}\n              className=\"bg-gray-800/50 backdrop-blur-lg rounded-2xl p-6 border border-cyan-500/30 shadow-[0_0_30px_rgba(0,255,255,0.3)]\"\n            >\n              <div className=\"space-y-6\">\n                {/* Algorithm Selection */}\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center gap-2 text-cyan-400\">\n                    <Zap className=\"w-5 h-5\" />\n                    <h3 className=\"font-semibold text-lg\">Algorithm</h3>\n                  </div>\n                  <div className=\"space-y-2\">\n                    {mockAlgorithms.map((algo) => (\n                      <button\n                        key={algo.id}\n                        onClick={() => {\n                          setSelectedAlgorithm(algo.id as AlgorithmType);\n                          generateSortingSteps(algo.id as AlgorithmType);\n                        }}\n                        disabled={isPlaying}\n                        className={`w-full p-3 rounded-lg text-left transition-all duration-300 ${\n                          selectedAlgorithm === algo.id\n                            ? 'bg-cyan-500/20 border-2 border-cyan-400 shadow-[0_0_20px_rgba(0,255,255,0.4)]'\n                            : 'bg-gray-700/50 border-2 border-gray-600/50 hover:border-cyan-500/50 hover:shadow-[0_0_15px_rgba(0,255,255,0.2)]'\n                        } disabled:opacity-50 disabled:cursor-not-allowed`}\n                      >\n                        <div className=\"font-medium text-white\">{algo.name}</div>\n                        <div className=\"text-xs text-gray-400 mt-1\">{algo.complexity}</div>\n                      </button>\n                    ))}\n                  </div>\n                </div>\n\n                {/* Array Size Control */}\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center gap-2 text-purple-400\">\n                    <BarChart3 className=\"w-5 h-5\" />\n                    <h3 className=\"font-semibold\">Array Size</h3>\n                  </div>\n                  <div className=\"space-y-2\">\n                    <div className=\"flex justify-between text-sm text-gray-300\">\n                      <span>Size</span>\n                      <span className=\"text-cyan-400 font-mono\">{arraySize[0]}</span>\n                    </div>\n                    <Slider\n                      value={arraySize}\n                      onValueChange={setArraySize}\n                      min={5}\n                      max={50}\n                      step={1}\n                      disabled={isPlaying}\n                      className=\"cursor-pointer\"\n                    />\n                  </div>\n                </div>\n\n                {/* Speed Control */}\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center gap-2 text-pink-400\">\n                    <Zap className=\"w-5 h-5\" />\n                    <h3 className=\"font-semibold\">Speed</h3>\n                  </div>\n                  <div className=\"space-y-2\">\n                    <div className=\"flex justify-between text-sm text-gray-300\">\n                      <span>Animation Speed</span>\n                      <span className=\"text-cyan-400 font-mono\">{speed[0]}%</span>\n                    </div>\n                    <Slider\n                      value={speed}\n                      onValueChange={setSpeed}\n                      min={10}\n                      max={100}\n                      step={10}\n                      className=\"cursor-pointer\"\n                    />\n                  </div>\n                </div>\n\n                {/* Control Buttons */}\n                <div className=\"space-y-3 pt-4 border-t border-gray-700/50\">\n                  <Button\n                    onClick={isPlaying ? pauseVisualization : startVisualization}\n                    disabled={steps.length === 0 || (currentStep >= steps.length && !isPlaying)}\n                    className=\"w-full bg-gradient-to-r from-cyan-500 to-blue-500 hover:from-cyan-600 hover:to-blue-600 text-white font-semibold py-6 rounded-lg shadow-[0_0_20px_rgba(0,255,255,0.5)] hover:shadow-[0_0_30px_rgba(0,255,255,0.7)] transition-all duration-300\"\n                  >\n                    {isPlaying ? (\n                      <>\n                        <Pause className=\"w-5 h-5 mr-2\" />\n                        Pause\n                      </>\n                    ) : (\n                      <>\n                        <Play className=\"w-5 h-5 mr-2\" />\n                        {currentStep >= steps.length ? 'Restart' : 'Play'}\n                      </>\n                    )}\n                  </Button>\n\n                  <Button\n                    onClick={resetVisualization}\n                    disabled={isPlaying}\n                    className=\"w-full bg-gradient-to-r from-purple-500 to-pink-500 hover:from-purple-600 hover:to-pink-600 text-white font-semibold py-6 rounded-lg shadow-[0_0_20px_rgba(255,0,255,0.5)] hover:shadow-[0_0_30px_rgba(255,0,255,0.7)] transition-all duration-300\"\n                  >\n                    <RotateCcw className=\"w-5 h-5 mr-2\" />\n                    Reset & Generate\n                  </Button>\n                </div>\n\n                {/* Stats Display */}\n                <div className=\"pt-4 border-t border-gray-700/50 space-y-2\">\n                  <div className=\"flex justify-between text-sm\">\n                    <span className=\"text-gray-400\">Current Step</span>\n                    <span className=\"text-cyan-400 font-mono\">{currentStep} / {steps.length}</span>\n                  </div>\n                  <div className=\"flex justify-between text-sm\">\n                    <span className=\"text-gray-400\">Array Elements</span>\n                    <span className=\"text-purple-400 font-mono\">{array.length}</span>\n                  </div>\n                </div>\n              </div>\n            </motion.div>\n            \n            <div className=\"bg-gray-800/50 backdrop-blur-lg rounded-2xl p-6 border border-cyan-500/30 shadow-lg shadow-cyan-500/20\">\n              <div className=\"space-y-6\">\n                <div>\n                  <h3 className=\"text-cyan-400 font-semibold mb-4 flex items-center gap-2\">\n                    <Zap className=\"w-5 h-5\" />\n                    Algorithm\n                  </h3>\n                  <div className=\"grid grid-cols-2 gap-3\">\n                    {mockAlgorithms.map((algo) => (\n                      <motion.button\n                        key={algo.id}\n                        onClick={() => setSelectedAlgorithm(algo.id as AlgorithmType)}\n                        className={`p-3 rounded-lg border transition-all duration-300 ${\n                          selectedAlgorithm === algo.id\n                            ? 'bg-cyan-500/20 border-cyan-400 shadow-lg shadow-cyan-500/50'\n                            : 'bg-gray-700/50 border-gray-600 hover:border-cyan-500/50 hover:shadow-md hover:shadow-cyan-500/30'\n                        }`}\n                        whileHover={{ scale: 1.05 }}\n                        whileTap={{ scale: 0.95 }}\n                      >\n                        <div className=\"text-sm font-medium text-white\">\n                          {algo.name.split(' ')[0]}\n                        </div>\n                        <div className=\"text-xs text-gray-400 mt-1\">\n                          {algo.complexity}\n                        </div>\n                      </motion.button>\n                    ))}\n                  </div>\n                </div>\n\n                <div>\n                  <h3 className=\"text-cyan-400 font-semibold mb-4\">Speed</h3>\n                  <Slider\n                    value={speed}\n                    onValueChange={setSpeed}\n                    min={1}\n                    max={100}\n                    step={1}\n                    className=\"[&_[role=slider]]:bg-cyan-400 [&_[role=slider]]:border-cyan-300 [&_[role=slider]]:shadow-lg [&_[role=slider]]:shadow-cyan-400/50 [&_[role=slider]]:transition-shadow [&_[role=slider]]:hover:shadow-cyan-400/80 [&_.relative]:bg-gray-700 [&_.bg-primary]:bg-gradient-to-r [&_.bg-primary]:from-cyan-500 [&_.bg-primary]:to-purple-500\"\n                  />\n                  <div className=\"flex justify-between text-xs text-gray-400 mt-2\">\n                    <span>Slow</span>\n                    <span className=\"text-cyan-400 font-semibold\">{speed[0]}%</span>\n                    <span>Fast</span>\n                  </div></parameter>\n                </div>\n\n                <div>\n                  <h3 className=\"text-cyan-400 font-semibold mb-4\">Array Size</h3>\n                  <div className=\"space-y-3\">\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"text-sm text-gray-400\">Elements</span>\n                      <motion.span \n                        key={arraySize[0]}\n                        initial={{ scale: 1.3, color: '#00ffff' }}\n                        animate={{ scale: 1, color: '#ffffff' }}\n                        className=\"text-lg font-bold text-white\"\n                      >\n                        {arraySize[0]}\n                      </motion.span>\n                    </div>\n                    <Slider\n                      value={arraySize}\n                      onValueChange={setArraySize}\n                      min={5}\n                      max={50}\n                      step={1}\n                      className=\"[&_[role=slider]]:bg-gradient-to-r [&_[role=slider]]:from-cyan-400 [&_[role=slider]]:to-purple-500 [&_[role=slider]]:border-2 [&_[role=slider]]:border-white [&_[role=slider]]:shadow-lg [&_[role=slider]]:shadow-cyan-400/50 [&_[role=slider]]:transition-shadow hover:[&_[role=slider]]:shadow-cyan-400/80 [&_[role=slider]]:animate-pulse\"\n                      disabled={isPlaying}\n                    />\n                    <div className=\"flex justify-between text-xs text-gray-500\">\n                      <span>5</span>\n                      <span>50</span>\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"space-y-3 pt-4 border-t border-cyan-500/20\">\n                  <motion.button\n                    onClick={isPlaying ? pauseVisualization : startVisualization}\n                    disabled={array.length === 0 || (steps.length === 0 && !isPlaying)}\n                    className=\"w-full py-4 rounded-xl font-semibold text-white transition-all duration-300 disabled:opacity-50 disabled:cursor-not-allowed relative overflow-hidden group\"\n                    whileHover={{ scale: 1.02 }}\n                    whileTap={{ scale: 0.98 }}\n                  >\n                    <motion.div\n                      className=\"absolute inset-0 bg-gradient-to-r from-cyan-500 to-purple-500\"\n                      animate={{\n                        opacity: isPlaying ? [0.8, 1, 0.8] : 0.8\n                      }}\n                      transition={{ duration: 2, repeat: Infinity }}\n                    />\n                    <motion.div\n                      className=\"absolute inset-0 bg-gradient-to-r from-cyan-400 to-purple-400 opacity-0 group-hover:opacity-20 blur-xl\"\n                      animate={{\n                        scale: [1, 1.2, 1]\n                      }}\n                      transition={{ duration: 2, repeat: Infinity }}\n                    />\n                    <div className=\"relative flex items-center justify-center gap-3\">\n                      <motion.div\n                        animate={{\n                          rotate: isPlaying ? 0 : 0,\n                          scale: isPlaying ? [1, 1.2, 1] : 1\n                        }}\n                        transition={{ duration: 0.3 }}\n                      >\n                        {isPlaying ? (\n                          <Pause className=\"w-5 h-5\" />\n                        ) : (\n                          <Play className=\"w-5 h-5\" />\n                        )}\n                      </motion.div>\n                      <span>{isPlaying ? 'Pause' : 'Start'} Visualization</span>\n                    </div>\n                    <motion.div\n                      className=\"absolute inset-0 rounded-xl\"\n                      animate={{\n                        boxShadow: isPlaying\n                          ? [\n                              '0 0 20px rgba(0, 255, 255, 0.5)',\n                              '0 0 40px rgba(168, 85, 247, 0.5)',\n                              '0 0 20px rgba(0, 255, 255, 0.5)'\n                            ]\n                          : '0 0 20px rgba(0, 255, 255, 0.3)'\n                      }}\n                      transition={{ duration: 2, repeat: Infinity }}\n                    />\n                  </motion.button>\n\n                  <motion.button\n                    onClick={resetVisualization}\n                    className=\"w-full py-3 rounded-xl font-semibold text-white bg-gradient-to-r from-pink-600/80 to-red-600/80 hover:from-pink-500 hover:to-red-500 transition-all duration-300 relative overflow-hidden group\"\n                    whileHover={{ scale: 1.02 }}\n                    whileTap={{ scale: 0.98 }}\n                  >\n                    <motion.div\n                      className=\"absolute inset-0 bg-gradient-to-r from-pink-400 to-red-400 opacity-0 group-hover:opacity-20 blur-xl\"\n                    />\n                    <div className=\"relative flex items-center justify-center gap-3\">\n                      <motion.div\n                        whileHover={{ rotate: -180 }}\n                        transition={{ duration: 0.5 }}\n                      >\n                        <RotateCcw className=\"w-5 h-5\" />\n                      </motion.div>\n                      <span>Reset</span>\n                    </div>\n                    <motion.div\n                      className=\"absolute inset-0 rounded-xl opacity-0 group-hover:opacity-100\"\n                      animate={{\n                        boxShadow: [\n                          '0 0 0px rgba(236, 72, 153, 0)',\n                          '0 0 20px rgba(236, 72, 153, 0.4)',\n                          '0 0 0px rgba(236, 72, 153, 0)'\n                        ]\n                      }}\n                      transition={{ duration: 1.5, repeat: Infinity }}\n                    />\n                  </motion.button>\n\n                  <motion.button\n                    onClick={generateRandomArray}\n                    disabled={isPlaying}\n                    className=\"w-full py-3 rounded-xl font-semibold text-white bg-gradient-to-r from-purple-600/80 to-indigo-600/80 hover:from-purple-500 hover:to-indigo-500 transition-all duration-300 disabled:opacity-50 disabled:cursor-not-allowed relative overflow-hidden group\"\n                    whileHover={{ scale: 1.02 }}\n                    whileTap={{ scale: 0.98 }}\n                  >\n                    <motion.div\n                      className=\"absolute inset-0 bg-gradient-to-r from-purple-400 to-indigo-400 opacity-0 group-hover:opacity-20 blur-xl\"\n                    />\n                    <div className=\"relative flex items-center justify-center gap-3\">\n                      <motion.div\n                        whileHover={{ rotate: 360 }}\n                        transition={{ duration: 0.6 }}\n                      >\n                        <BarChart3 className=\"w-5 h-5\" />\n                      </motion.div>\n                      <span>New Array</span>\n                    </div>\n                    <motion.div\n                      className=\"absolute inset-0 rounded-xl opacity-0 group-hover:opacity-100\"\n                      animate={{\n                        boxShadow: [\n                          '0 0 0px rgba(147, 51, 234, 0)',\n                          '0 0 20px rgba(147, 51, 234, 0.4)',\n                          '0 0 0px rgba(147, 51, 234, 0)'\n                        ]\n                      }}\n                      transition={{ duration: 1.5, repeat: Infinity }}\n                    />\n                  </motion.button>\n                </div>\n              </div>\n            </div>\n\n            <motion.div\n              initial={{ opacity: 0, x: -50 }}\n              animate={{ opacity: 1, x: 0 }}\n              transition={{ delay: 0.2 }}\n              className=\"bg-gradient-to-br from-gray-800/50 to-purple-900/30 backdrop-blur-lg rounded-2xl p-6 border border-purple-500/30 shadow-[0_0_30px_rgba(168,85,247,0.3)]\"\n            >\n              <div className=\"space-y-4\">\n                <div className=\"flex items-center gap-2 text-purple-400 mb-4\">\n                  <BarChart3 className=\"w-5 h-5\" />\n                  <h3 className=\"font-semibold text-lg\">Statistics</h3>\n                </div>\n\n                <div className=\"space-y-3\">\n                  {/* Comparisons Counter */}\n                  <motion.div\n                    className=\"bg-gray-900/50 rounded-xl p-4 border border-cyan-500/20 hover:border-cyan-500/50 transition-all duration-300\"\n                    whileHover={{ scale: 1.02 }}\n                  >\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center gap-2\">\n                        <motion.div\n                          className=\"w-3 h-3 rounded-full bg-cyan-400\"\n                          animate={{\n                            boxShadow: [\n                              '0 0 10px rgba(0, 255, 255, 0.5)',\n                              '0 0 20px rgba(0, 255, 255, 0.8)',\n                              '0 0 10px rgba(0, 255, 255, 0.5)'\n                            ]\n                          }}\n                          transition={{ duration: 1.5, repeat: Infinity }}\n                        />\n                        <span className=\"text-sm text-gray-300\">Comparisons</span>\n                      </div>\n                      <motion.span\n                        key={steps[currentStep]?.comparingIndices.length || 0}\n                        initial={{ scale: 1.3, color: '#00ffff' }}\n                        animate={{ scale: 1, color: '#ffffff' }}\n                        className=\"text-2xl font-bold text-white\"\n                      >\n                        {currentStep > 0 ? currentStep : 0}\n                      </motion.span>\n                    </div>\n                  </motion.div>\n\n                  {/* Swaps Counter */}\n                  <motion.div\n                    className=\"bg-gray-900/50 rounded-xl p-4 border border-pink-500/20 hover:border-pink-500/50 transition-all duration-300\"\n                    whileHover={{ scale: 1.02 }}\n                  >\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center gap-2\">\n                        <motion.div\n                          className=\"w-3 h-3 rounded-full bg-pink-400\"\n                          animate={{\n                            boxShadow: [\n                              '0 0 10px rgba(255, 0, 102, 0.5)',\n                              '0 0 20px rgba(255, 0, 102, 0.8)',\n                              '0 0 10px rgba(255, 0, 102, 0.5)'\n                            ]\n                          }}\n                          transition={{ duration: 1.5, repeat: Infinity, delay: 0.5 }}\n                        />\n                        <span className=\"text-sm text-gray-300\">Swaps</span>\n                      </div>\n                      <motion.span\n                        key={steps[currentStep]?.swappingIndices.length || 0}\n                        initial={{ scale: 1.3, color: '#ff0066' }}\n                        animate={{ scale: 1, color: '#ffffff' }}\n                        className=\"text-2xl font-bold text-white\"\n                      >\n                        {steps.slice(0, currentStep).filter(s => s.swappingIndices.length > 0).length}\n                      </motion.span>\n                    </div>\n                  </motion.div>\n\n                  {/* Progress Bar */}\n                  <motion.div\n                    className=\"bg-gray-900/50 rounded-xl p-4 border border-purple-500/20 hover:border-purple-500/50 transition-all duration-300\"\n                    whileHover={{ scale: 1.02 }}\n                  >\n                    <div className=\"space-y-2\">\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"flex items-center gap-2\">\n                          <motion.div\n                            className=\"w-3 h-3 rounded-full bg-purple-400\"\n                            animate={{\n                              boxShadow: [\n                                '0 0 10px rgba(168, 85, 247, 0.5)',\n                                '0 0 20px rgba(168, 85, 247, 0.8)',\n                                '0 0 10px rgba(168, 85, 247, 0.5)'\n                              ]\n                            }}\n                            transition={{ duration: 1.5, repeat: Infinity, delay: 1 }}\n                          />\n                          <span className=\"text-sm text-gray-300\">Progress</span>\n                        </div>\n                        <motion.span\n                          key={currentStep}\n                          initial={{ scale: 1.3, color: '#a855f7' }}\n                          animate={{ scale: 1, color: '#ffffff' }}\n                          className=\"text-lg font-bold text-white\"\n                        >\n                          {steps.length > 0 ? Math.round((currentStep / steps.length) * 100) : 0}%\n                        </motion.span>\n                      </div>\n                      \n                      <div className=\"relative h-3 bg-gray-700/50 rounded-full overflow-hidden\">\n                        <motion.div\n                          className=\"absolute inset-y-0 left-0 bg-gradient-to-r from-purple-500 via-pink-500 to-cyan-500 rounded-full\"\n                          initial={{ width: 0 }}\n                          animate={{\n                            width: steps.length > 0 ? `${(currentStep / steps.length) * 100}%` : '0%'\n                          }}\n                          transition={{ duration: 0.3, ease: 'easeOut' }}\n                        >\n                          <motion.div\n                            className=\"absolute inset-0 bg-gradient-to-r from-transparent via-white/30 to-transparent\"\n                            animate={{\n                              x: ['-100%', '200%']\n                            }}\n                            transition={{ duration: 1.5, repeat: Infinity, ease: 'linear' }}\n                          />\n                        </motion.div>\n                      </div>\n                    </div>\n                  </motion.div>\n\n                  {/* Sorted Elements */}\n                  <motion.div\n                    className=\"bg-gray-900/50 rounded-xl p-4 border border-green-500/20 hover:border-green-500/50 transition-all duration-300\"\n                    whileHover={{ scale: 1.02 }}\n                  >\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center gap-2\">\n                        <motion.div\n                          className=\"w-3 h-3 rounded-full bg-green-400\"\n                          animate={{\n                            boxShadow: [\n                              '0 0 10px rgba(0, 255, 0, 0.5)',\n                              '0 0 20px rgba(0, 255, 0, 0.8)',\n                              '0 0 10px rgba(0, 255, 0, 0.5)'\n                            ]\n                          }}\n                          transition={{ duration: 1.5, repeat: Infinity, delay: 1.5 }}\n                        />\n                        <span className=\"text-sm text-gray-300\">Sorted</span>\n                      </div>\n                      <motion.span\n                        key={steps[currentStep]?.sortedIndices.length || 0}\n                        initial={{ scale: 1.3, color: '#00ff00' }}\n                        animate={{ scale: 1, color: '#ffffff' }}\n                        className=\"text-2xl font-bold text-white\"\n                      >\n                        {steps[currentStep]?.sortedIndices.length || 0}/{array.length}\n                      </motion.span>\n                    </div>\n                  </motion.div>\n\n                  {/* Algorithm Complexity */}\n                  <motion.div\n                    className=\"bg-gradient-to-r from-cyan-900/30 to-purple-900/30 rounded-xl p-4 border border-cyan-500/30\"\n                    initial={{ opacity: 0 }}\n                    animate={{ opacity: 1 }}\n                    transition={{ delay: 0.5 }}\n                  >\n                    <div className=\"text-center\">\n                      <div className=\"text-xs text-gray-400 mb-1\">Time Complexity</div>\n                      <div className=\"text-xl font-bold bg-gradient-to-r from-cyan-400 to-purple-400 bg-clip-text text-transparent\">\n                        {mockAlgorithms.find(a => a.id === selectedAlgorithm)?.complexity}\n                      </div>\n                    </div>\n                  </motion.div>\n                </div>\n              </div>\n            </motion.div>\n          </div>\n\n          <div className=\"lg:col-span-3\">\n            <div className=\"bg-gray-800/50 backdrop-blur-lg rounded-2xl p-8 border border-purple-500/30 shadow-lg shadow-purple-500/20 min-h-[600px]\">\n              {array.length === 0 ? (\n                <motion.div\n                  initial={{ opacity: 0, scale: 0.8 }}\n                  animate={{ opacity: 1, scale: 1 }}\n                  className=\"flex flex-col items-center justify-center h-full space-y-6\"\n                >\n                  <motion.div\n                    animate={{\n                      rotate: [0, 360],\n                      scale: [1, 1.2, 1]\n                    }}\n                    transition={{ duration: 3, repeat: Infinity }}\n                    className=\"w-24 h-24 rounded-full bg-gradient-to-r from-cyan-500 via-purple-500 to-pink-500 flex items-center justify-center shadow-[0_0_50px_rgba(0,255,255,0.5)]\"\n                  >\n                    <BarChart3 className=\"w-12 h-12 text-white\" />\n                  </motion.div>\n                  <div className=\"text-center space-y-2\">\n                    <h3 className=\"text-2xl font-bold text-transparent bg-gradient-to-r from-cyan-400 to-purple-400 bg-clip-text\">\n                      Generate an Array to Start\n                    </h3>\n                    <p className=\"text-gray-400\">\n                      Click the \"Generate New Array\" button to begin visualizing\n                    </p>\n                  </div>\n                </motion.div>\n              ) : (\n                <div className=\"w-full h-full flex items-end justify-center gap-1 px-4\">\n                  {array.map((element, index) => {\n                    const currentStepData = steps[currentStep];\n                    const isComparing = currentStepData?.comparingIndices.includes(index);\n                    const isSwapping = currentStepData?.swappingIndices.includes(index);\n                    const isSorted = currentStepData?.sortedIndices.includes(index);\n                    \n                    const maxValue = Math.max(...array.map(el => el.value));\n                    const heightPercentage = (element.value / maxValue) * 100;\n                    \n                    let barColor = NEON_COLORS[index % NEON_COLORS.length];\n                    let shadowColor = barColor;\n                    let glowIntensity = 0.3;\n                    \n                    if (isSorted) {\n                      barColor = '#00ff00';\n                      shadowColor = '#00ff00';\n                      glowIntensity = 0.6;\n                    } else if (isSwapping) {\n                      barColor = '#ff0066';\n                      shadowColor = '#ff0066';\n                      glowIntensity = 0.8;\n                    } else if (isComparing) {\n                      barColor = '#ffff00';\n                      shadowColor = '#ffff00';\n                      glowIntensity = 0.7;\n                    }\n                    \n                    return (\n                      <motion.div\n                        key={element.id}\n                        className=\"relative flex-1 min-w-[4px] max-w-[60px] rounded-t-lg\"\n                        initial={{ height: 0, opacity: 0 }}\n                        animate={{\n                          height: `${heightPercentage}%`,\n                          opacity: 1,\n                          backgroundColor: barColor,\n                          boxShadow: [\n                            `0 0 ${glowIntensity * 20}px ${shadowColor}`,\n                            `0 0 ${glowIntensity * 40}px ${shadowColor}`,\n                            `0 0 ${glowIntensity * 20}px ${shadowColor}`\n                          ],\n                          scale: isSwapping ? [1, 1.1, 1] : isComparing ? 1.05 : 1,\n                          y: isSwapping ? [0, -10, 0] : 0\n                        }}\n                        transition={{\n                          height: { duration: 0.3, ease: 'easeOut' },\n                          backgroundColor: { duration: 0.2 },\n                          boxShadow: { duration: 1, repeat: Infinity },\n                          scale: { duration: 0.3 },\n                          y: { duration: 0.5, ease: 'easeInOut' }\n                        }}\n                        style={{\n                          background: `linear-gradient(to top, ${barColor}, ${barColor}dd)`,\n                          minHeight: '20px'\n                        }}\n                      >\n                        {/* Value label */}\n                        <motion.div\n                          className=\"absolute -top-6 left-1/2 transform -translate-x-1/2 text-xs font-mono font-bold whitespace-nowrap\"\n                          animate={{\n                            color: barColor,\n                            scale: isComparing || isSwapping ? 1.2 : 1,\n                            textShadow: `0 0 10px ${shadowColor}`\n                          }}\n                          transition={{ duration: 0.2 }}\n                        >\n                          {element.value}\n                        </motion.div>\n                        \n                        {/* Trail effect for swapping */}\n                        {isSwapping && (\n                          <motion.div\n                            className=\"absolute inset-0 rounded-t-lg\"\n                            initial={{ opacity: 0.8, scale: 1 }}\n                            animate={{\n                              opacity: 0,\n                              scale: 1.5,\n                              backgroundColor: barColor\n                            }}\n                            transition={{ duration: 0.5, repeat: Infinity }}\n                            style={{\n                              boxShadow: `0 0 30px ${shadowColor}`\n                            }}\n                          />\n                        )}\n                        \n                        {/* Pulse effect for comparing */}\n                        {isComparing && (\n                          <motion.div\n                            className=\"absolute -inset-1 rounded-t-lg border-2\"\n                            animate={{\n                              borderColor: [barColor, 'transparent', barColor],\n                              scale: [1, 1.1, 1]\n                            }}\n                            transition={{ duration: 0.6, repeat: Infinity }}\n                          />\n                        )}\n                        \n                        {/* Sparkle effect for sorted */}\n                        {isSorted && (\n                          <motion.div\n                            className=\"absolute inset-0 rounded-t-lg\"\n                            initial={{ opacity: 0 }}\n                            animate={{\n                              opacity: [0, 1, 0],\n                              scale: [0.8, 1.2, 0.8]\n                            }}\n                            transition={{ duration: 1, repeat: Infinity }}\n                            style={{\n                              background: `radial-gradient(circle, ${barColor}88, transparent)`,\n                              boxShadow: `0 0 20px ${shadowColor}`\n                            }}\n                          />\n                        )}\n                      </motion.div>\n                    );\n                  })}\n                </div>\n              )}\n              \n              <div className=\"h-full flex items-end justify-center gap-1\">\n                {array.length === 0 ? (\n                  <motion.div\n                    initial={{ opacity: 0, scale: 0.8 }}\n                    animate={{ opacity: 1, scale: 1 }}\n                    className=\"flex flex-col items-center justify-center h-full space-y-6\"\n                  >\n                    <motion.div\n                      animate={{\n                        rotate: [0, 360],\n                        scale: [1, 1.2, 1]\n                      }}\n                      transition={{\n                        duration: 3,\n                        repeat: Infinity,\n                        ease: \"easeInOut\"\n                      }}\n                    >\n                      <BarChart3 className=\"w-24 h-24 text-cyan-400/50\" />\n                    </motion.div>\n                    <div className=\"text-center space-y-2\">\n                      <p className=\"text-2xl font-semibold text-gray-400\">\n                        Generate an array to begin\n                      </p>\n                      <p className=\"text-sm text-gray-500\">\n                        Click the \"Generate Array\" button to start visualizing\n                      </p>\n                    </div>\n                  </motion.div>\n                ) : (\n                  array.map((element, index) => {\n                    const colorIndex = index % NEON_COLORS.length;\n                    const baseColor = NEON_COLORS[colorIndex];\n                    \n                    const isComparing = element.isComparing;\n                    const isSwapping = element.isSwapping;\n                    const isSorted = element.isSorted;\n                    \n                    let barColor = baseColor;\n                    let glowColor = baseColor;\n                    let glowIntensity = '0.3';\n                    \n                    if (isSorted) {\n                      barColor = '#00ff00';\n                      glowColor = '#00ff00';\n                      glowIntensity = '0.6';\n                    } else if (isSwapping) {\n                      barColor = '#ff0066';\n                      glowColor = '#ff0066';\n                      glowIntensity = '0.8';\n                    } else if (isComparing) {\n                      barColor = '#ffff00';\n                      glowColor = '#ffff00';\n                      glowIntensity = '0.7';\n                    }\n                    \n                    const maxHeight = 500;\n                    const barHeight = (element.value / 100) * maxHeight;\n                    const barWidth = Math.max(8, Math.min(60, 800 / array.length));\n                    \n                    return (\n                      <motion.div\n                        key={element.id}\n                        className=\"relative flex flex-col items-center justify-end\"\n                        initial={{ opacity: 0, y: 50 }}\n                        animate={{\n                          opacity: 1,\n                          y: 0,\n                          scale: isSwapping ? [1, 1.1, 1] : 1,\n                          x: isSwapping ? [0, -5, 5, 0] : 0\n                        }}\n                        transition={{\n                          opacity: { duration: 0.3 },\n                          y: { duration: 0.3 },\n                          scale: { duration: 0.3, repeat: isSwapping ? Infinity : 0 },\n                          x: { duration: 0.2, repeat: isSwapping ? Infinity : 0 }\n                        }}\n                        style={{ width: barWidth }}\n                      >\n                        {/* Trail effect */}\n                        {isSwapping && (\n                          <>\n                            <motion.div\n                              className=\"absolute bottom-0 rounded-t-lg\"\n                              style={{\n                                width: barWidth,\n                                height: barHeight,\n                                backgroundColor: barColor,\n                                opacity: 0.3,\n                                filter: `blur(8px)`\n                              }}\n                              animate={{\n                                opacity: [0.3, 0.1, 0.3],\n                                scale: [1, 1.05, 1]\n                              }}\n                              transition={{\n                                duration: 0.5,\n                                repeat: Infinity\n                              }}\n                            />\n                            <motion.div\n                              className=\"absolute bottom-0 rounded-t-lg\"\n                              style={{\n                                width: barWidth,\n                                height: barHeight,\n                                backgroundColor: barColor,\n                                opacity: 0.2,\n                                filter: `blur(16px)`\n                              }}\n                              animate={{\n                                opacity: [0.2, 0.05, 0.2],\n                                scale: [1, 1.1, 1]\n                              }}\n                              transition={{\n                                duration: 0.7,\n                                repeat: Infinity\n                              }}\n                            />\n                          </>\n                        )}\n                        \n                        {/* Main bar */}\n                        <motion.div\n                          className=\"relative rounded-t-lg overflow-hidden\"\n                          style={{\n                            width: barWidth,\n                            backgroundColor: barColor,\n                            boxShadow: `\n                              0 0 20px rgba(${parseInt(barColor.slice(1, 3), 16)}, ${parseInt(barColor.slice(3, 5), 16)}, ${parseInt(barColor.slice(5, 7), 16)}, ${glowIntensity}),\n                              0 0 40px rgba(${parseInt(barColor.slice(1, 3), 16)}, ${parseInt(barColor.slice(3, 5), 16)}, ${parseInt(barColor.slice(5, 7), 16)}, ${parseFloat(glowIntensity) * 0.6}),\n                              inset 0 0 20px rgba(255, 255, 255, 0.1)\n                            `\n                          }}\n                          animate={{\n                            height: barHeight,\n                            boxShadow: isComparing || isSwapping || isSorted\n                              ? [\n                                  `0 0 20px rgba(${parseInt(barColor.slice(1, 3), 16)}, ${parseInt(barColor.slice(3, 5), 16)}, ${parseInt(barColor.slice(5, 7), 16)}, ${glowIntensity}),\n                                   0 0 40px rgba(${parseInt(barColor.slice(1, 3), 16)}, ${parseInt(barColor.slice(3, 5), 16)}, ${parseInt(barColor.slice(5, 7), 16)}, ${parseFloat(glowIntensity) * 0.6}),\n                                   inset 0 0 20px rgba(255, 255, 255, 0.1)`,\n                                  `0 0 30px rgba(${parseInt(barColor.slice(1, 3), 16)}, ${parseInt(barColor.slice(3, 5), 16)}, ${parseInt(barColor.slice(5, 7), 16)}, ${parseFloat(glowIntensity) * 1.2}),\n                                   0 0 60px rgba(${parseInt(barColor.slice(1, 3), 16)}, ${parseInt(barColor.slice(3, 5), 16)}, ${parseInt(barColor.slice(5, 7), 16)}, ${parseFloat(glowIntensity) * 0.8}),\n                                   inset 0 0 20px rgba(255, 255, 255, 0.2)`,\n                                  `0 0 20px rgba(${parseInt(barColor.slice(1, 3), 16)}, ${parseInt(barColor.slice(3, 5), 16)}, ${parseInt(barColor.slice(5, 7), 16)}, ${glowIntensity}),\n                                   0 0 40px rgba(${parseInt(barColor.slice(1, 3), 16)}, ${parseInt(barColor.slice(3, 5), 16)}, ${parseInt(barColor.slice(5, 7), 16)}, ${parseFloat(glowIntensity) * 0.6}),\n                                   inset 0 0 20px rgba(255, 255, 255, 0.1)`\n                                ]\n                              : `0 0 20px rgba(${parseInt(barColor.slice(1, 3), 16)}, ${parseInt(barColor.slice(3, 5), 16)}, ${parseInt(barColor.slice(5, 7), 16)}, ${glowIntensity}),\n                                 0 0 40px rgba(${parseInt(barColor.slice(1, 3), 16)}, ${parseInt(barColor.slice(3, 5), 16)}, ${parseInt(barColor.slice(5, 7), 16)}, ${parseFloat(glowIntensity) * 0.6}),\n                                 inset 0 0 20px rgba(255, 255, 255, 0.1)`\n                          }}\n                          transition={{\n                            height: { duration: 0.5, ease: \"easeInOut\" },\n                            boxShadow: { duration: 0.4, repeat: (isComparing || isSwapping) ? Infinity : 0 }\n                          }}\n                        >\n                          {/* Shimmer effect */}\n                          <motion.div\n                            className=\"absolute inset-0 bg-gradient-to-b from-white/30 via-transparent to-transparent\"\n                            animate={{\n                              opacity: [0.3, 0.6, 0.3]\n                            }}\n                            transition={{\n                              duration: 1.5,\n                              repeat: Infinity,\n                              ease: \"easeInOut\"\n                            }}\n                          />\n                          \n                          {/* Scanning line effect for comparing/swapping */}\n                          {(isComparing || isSwapping) && (\n                            <motion.div\n                              className=\"absolute inset-x-0 h-1 bg-white/80\"\n                              style={{\n                                boxShadow: `0 0 10px ${barColor}, 0 0 20px ${barColor}`\n                              }}\n                              animate={{\n                                top: ['0%', '100%']\n                              }}\n                              transition={{\n                                duration: 0.8,\n                                repeat: Infinity,\n                                ease: \"linear\"\n                              }}\n                            />\n                          )}\n                          \n                          {/* Particle burst effect for sorted */}\n                          {isSorted && (\n                            <>\n                              {[...Array(6)].map((_, i) => (\n                                <motion.div\n                                  key={i}\n                                  className=\"absolute top-0 left-1/2 w-1 h-1 rounded-full bg-white\"\n                                  initial={{\n                                    opacity: 1,\n                                    x: 0,\n                                    y: 0\n                                  }}\n                                  animate={{\n                                    opacity: [1, 0],\n                                    x: Math.cos((i * Math.PI * 2) / 6) * 20,\n                                    y: Math.sin((i * Math.PI * 2) / 6) * 20 - 20\n                                  }}\n                                  transition={{\n                                    duration: 0.6,\n                                    ease: \"easeOut\"\n                                  }}\n                                />\n                              ))}\n                            </>\n                          )}\n                        </motion.div>\n                        \n                        {/* Value label */}\n                        {barWidth > 20 && (\n                          <motion.div\n                            className=\"absolute top-0 left-1/2 transform -translate-x-1/2 -translate-y-6 text-xs font-bold text-white\"\n                            style={{\n                              textShadow: `0 0 10px ${barColor}, 0 0 20px ${barColor}`\n                            }}\n                            initial={{ opacity: 0, y: 10 }}\n                            animate={{ opacity: 1, y: 0 }}\n                            transition={{ delay: index * 0.02 }}\n                          >\n                            {element.value}\n                          </motion.div>\n                        )}\n                        \n                        {/* Status indicator */}\n                        {(isComparing || isSwapping || isSorted) && (\n                          <motion.div\n                            className=\"absolute -top-10 left-1/2 transform -translate-x-1/2\"\n                            initial={{ scale: 0, opacity: 0 }}\n                            animate={{ scale: 1, opacity: 1 }}\n                            exit={{ scale: 0, opacity: 0 }}\n                          >\n                            <motion.div\n                              className=\"w-3 h-3 rounded-full\"\n                              style={{\n                                backgroundColor: barColor,\n                                boxShadow: `0 0 15px ${barColor}, 0 0 30px ${barColor}`\n                              }}\n                              animate={{\n                                scale: [1, 1.3, 1]\n                              }}\n                              transition={{\n                                duration: 0.6,\n                                repeat: Infinity\n                              }}\n                            />\n                          </motion.div>\n                        )}\n                      </motion.div>\n                    );\n                  })\n                )}\n              </div>\n            </div>\n\n            <motion.div\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ delay: 0.3, duration: 0.6 }}\n              className=\"mt-6 bg-gray-800/50 backdrop-blur-lg rounded-xl p-6 border border-purple-500/30 shadow-lg shadow-purple-500/10\"\n            >\n              <h3 className=\"text-purple-400 font-semibold mb-4 flex items-center gap-2\">\n                <BarChart3 className=\"w-5 h-5\" />\n                Legend\n              </h3>\n              <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n                <motion.div\n                  className=\"flex items-center gap-3 p-3 bg-gray-700/30 rounded-lg border border-gray-600/50\"\n                  whileHover={{ scale: 1.05, borderColor: 'rgba(0, 255, 255, 0.5)' }}\n                >\n                  <motion.div\n                    className=\"w-4 h-8 bg-gradient-to-t from-cyan-500 to-cyan-300 rounded\"\n                    animate={{\n                      boxShadow: [\n                        '0 0 10px rgba(0, 255, 255, 0.5)',\n                        '0 0 20px rgba(0, 255, 255, 0.8)',\n                        '0 0 10px rgba(0, 255, 255, 0.5)'\n                      ]\n                    }}\n                    transition={{ duration: 1.5, repeat: Infinity }}\n                  />\n                  <div>\n                    <div className=\"text-xs font-medium text-white\">Default</div>\n                    <div className=\"text-xs text-gray-400\">Unsorted</div>\n                  </div>\n                </motion.div>\n\n                <motion.div\n                  className=\"flex items-center gap-3 p-3 bg-gray-700/30 rounded-lg border border-gray-600/50\"\n                  whileHover={{ scale: 1.05, borderColor: 'rgba(255, 255, 0, 0.5)' }}\n                >\n                  <motion.div\n                    className=\"w-4 h-8 bg-gradient-to-t from-yellow-500 to-yellow-300 rounded\"\n                    animate={{\n                      boxShadow: [\n                        '0 0 15px rgba(255, 255, 0, 0.6)',\n                        '0 0 25px rgba(255, 255, 0, 0.9)',\n                        '0 0 15px rgba(255, 255, 0, 0.6)'\n                      ],\n                      scale: [1, 1.1, 1]\n                    }}\n                    transition={{ duration: 1, repeat: Infinity }}\n                  />\n                  <div>\n                    <div className=\"text-xs font-medium text-white\">Comparing</div>\n                    <div className=\"text-xs text-gray-400\">Active</div>\n                  </div>\n                </motion.div>\n\n                <motion.div\n                  className=\"flex items-center gap-3 p-3 bg-gray-700/30 rounded-lg border border-gray-600/50\"\n                  whileHover={{ scale: 1.05, borderColor: 'rgba(255, 0, 255, 0.5)' }}\n                >\n                  <motion.div\n                    className=\"w-4 h-8 bg-gradient-to-t from-pink-500 to-pink-300 rounded\"\n                    animate={{\n                      boxShadow: [\n                        '0 0 15px rgba(255, 0, 255, 0.6)',\n                        '0 0 25px rgba(255, 0, 255, 0.9)',\n                        '0 0 15px rgba(255, 0, 255, 0.6)'\n                      ],\n                      x: [-2, 2, -2]\n                    }}\n                    transition={{ duration: 0.8, repeat: Infinity }}\n                  />\n                  <div>\n                    <div className=\"text-xs font-medium text-white\">Swapping</div>\n                    <div className=\"text-xs text-gray-400\">Moving</div>\n                  </div>\n                </motion.div>\n\n                <motion.div\n                  className=\"flex items-center gap-3 p-3 bg-gray-700/30 rounded-lg border border-gray-600/50\"\n                  whileHover={{ scale: 1.05, borderColor: 'rgba(0, 255, 0, 0.5)' }}\n                >\n                  <motion.div\n                    className=\"w-4 h-8 bg-gradient-to-t from-green-500 to-green-300 rounded\"\n                    animate={{\n                      boxShadow: [\n                        '0 0 10px rgba(0, 255, 0, 0.5)',\n                        '0 0 20px rgba(0, 255, 0, 0.8)',\n                        '0 0 10px rgba(0, 255, 0, 0.5)'\n                      ]\n                    }}\n                    transition={{ duration: 2, repeat: Infinity }}\n                  />\n                  <div>\n                    <div className=\"text-xs font-medium text-white\">Sorted</div>\n                    <div className=\"text-xs text-gray-400\">Complete</div>\n                  </div>\n                </motion.div>\n              </div>\n            </motion.div>\n          </div>\n        </div>\n\n        <motion.div\n          initial={{ opacity: 0, y: 50 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ delay: 0.4, duration: 0.6 }}\n          className=\"bg-gray-800/50 backdrop-blur-lg rounded-2xl p-6 border border-cyan-500/30 shadow-[0_0_30px_rgba(0,255,255,0.2)]\"\n        >\n          <div className=\"space-y-4\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center gap-2\">\n                <motion.div\n                  animate={{\n                    rotate: [0, 360]\n                  }}\n                  transition={{ duration: 2, repeat: Infinity, ease: 'linear' }}\n                >\n                  <BarChart3 className=\"w-5 h-5 text-cyan-400\" />\n                </motion.div>\n                <h3 className=\"font-semibold text-lg text-cyan-400\">Timeline Control</h3>\n              </div>\n              <div className=\"flex items-center gap-2 px-3 py-1 bg-purple-500/20 rounded-full border border-purple-400/50\">\n                <span className=\"text-sm text-purple-300 font-mono\">\n                  Step {currentStep} / {steps.length}\n                </span>\n              </div>\n            </div>\n\n            {/* Progress Bar */}\n            <div className=\"relative h-3 bg-gray-700/50 rounded-full overflow-hidden border border-gray-600/50\">\n              <motion.div\n                className=\"absolute inset-y-0 left-0 bg-gradient-to-r from-cyan-500 via-purple-500 to-pink-500 rounded-full\"\n                initial={{ width: 0 }}\n                animate={{\n                  width: steps.length > 0 ? `${(currentStep / steps.length) * 100}%` : '0%'\n                }}\n                transition={{ duration: 0.3 }}\n              />\n              <motion.div\n                className=\"absolute inset-0 bg-gradient-to-r from-transparent via-white/30 to-transparent\"\n                animate={{\n                  x: ['-100%', '200%']\n                }}\n                transition={{ duration: 2, repeat: Infinity, ease: 'linear' }}\n              />\n            </div>\n\n            {/* Timeline Scrubber */}\n            <div className=\"relative pt-2\">\n              <input\n                type=\"range\"\n                min={0}\n                max={Math.max(0, steps.length - 1)}\n                value={currentStep}\n                onChange={(e) => {\n                  const newStep = parseInt(e.target.value);\n                  setCurrentStep(newStep);\n                  if (newStep < steps.length) {\n                    setArray(steps[newStep].array);\n                  }\n                  setIsPlaying(false);\n                }}\n                disabled={steps.length === 0}\n                className=\"w-full h-2 bg-gray-700/50 rounded-full appearance-none cursor-pointer disabled:cursor-not-allowed disabled:opacity-50\n                  [&::-webkit-slider-thumb]:appearance-none [&::-webkit-slider-thumb]:w-5 [&::-webkit-slider-thumb]:h-5 \n                  [&::-webkit-slider-thumb]:rounded-full [&::-webkit-slider-thumb]:bg-gradient-to-r \n                  [&::-webkit-slider-thumb]:from-cyan-400 [&::-webkit-slider-thumb]:to-purple-500 \n                  [&::-webkit-slider-thumb]:border-2 [&::-webkit-slider-thumb]:border-white \n                  [&::-webkit-slider-thumb]:shadow-[0_0_20px_rgba(0,255,255,0.8)] \n                  [&::-webkit-slider-thumb]:cursor-pointer [&::-webkit-slider-thumb]:transition-all\n                  [&::-webkit-slider-thumb]:hover:scale-125 [&::-webkit-slider-thumb]:hover:shadow-[0_0_30px_rgba(0,255,255,1)]\n                  [&::-moz-range-thumb]:w-5 [&::-moz-range-thumb]:h-5 [&::-moz-range-thumb]:rounded-full \n                  [&::-moz-range-thumb]:bg-gradient-to-r [&::-moz-range-thumb]:from-cyan-400 \n                  [&::-moz-range-thumb]:to-purple-500 [&::-moz-range-thumb]:border-2 \n                  [&::-moz-range-thumb]:border-white [&::-moz-range-thumb]:cursor-pointer\n                  [&::-moz-range-thumb]:transition-all [&::-moz-range-thumb]:hover:scale-125\"\n              />\n              \n              {/* Step Markers */}\n              {steps.length > 0 && steps.length <= 50 && (\n                <div className=\"absolute top-0 left-0 right-0 flex justify-between pointer-events-none\">\n                  {steps.map((_, index) => (\n                    <motion.div\n                      key={index}\n                      initial={{ scale: 0 }}\n                      animate={{ scale: index <= currentStep ? 1 : 0.5 }}\n                      className={`w-1 h-1 rounded-full transition-all duration-300 ${\n                        index < currentStep\n                          ? 'bg-cyan-400 shadow-[0_0_8px_rgba(0,255,255,0.8)]'\n                          : index === currentStep\n                          ? 'bg-purple-400 shadow-[0_0_12px_rgba(168,85,247,1)] scale-150'\n                          : 'bg-gray-600'\n                      }`}\n                    />\n                  ))}\n                </div>\n              )}\n            </div>\n\n            {/* Quick Navigation Buttons */}\n            <div className=\"flex items-center justify-between gap-2 pt-2\">\n              <Button\n                onClick={() => {\n                  setCurrentStep(0);\n                  if (steps.length > 0) {\n                    setArray(steps[0].array);\n                  }\n                  setIsPlaying(false);\n                }}\n                disabled={steps.length === 0 || currentStep === 0}\n                size=\"sm\"\n                className=\"flex-1 bg-gray-700/50 hover:bg-gray-600/50 text-cyan-400 border border-cyan-500/30 hover:border-cyan-400/50 hover:shadow-[0_0_15px_rgba(0,255,255,0.3)] transition-all duration-300 disabled:opacity-30\"\n              >\n                <span className=\"text-xs font-semibold\">First</span>\n              </Button>\n              \n              <Button\n                onClick={() => {\n                  const newStep = Math.max(0, currentStep - 1);\n                  setCurrentStep(newStep);\n                  if (newStep < steps.length) {\n                    setArray(steps[newStep].array);\n                  }\n                  setIsPlaying(false);\n                }}\n                disabled={steps.length === 0 || currentStep === 0}\n                size=\"sm\"\n                className=\"flex-1 bg-gray-700/50 hover:bg-gray-600/50 text-purple-400 border border-purple-500/30 hover:border-purple-400/50 hover:shadow-[0_0_15px_rgba(168,85,247,0.3)] transition-all duration-300 disabled:opacity-30\"\n              >\n                <span className=\"text-xs font-semibold\">\u2190 Prev</span>\n              </Button>\n              \n              <Button\n                onClick={() => {\n                  const newStep = Math.min(steps.length - 1, currentStep + 1);\n                  setCurrentStep(newStep);\n                  if (newStep < steps.length) {\n                    setArray(steps[newStep].array);\n                  }\n                  setIsPlaying(false);\n                }}\n                disabled={steps.length === 0 || currentStep >= steps.length - 1}\n                size=\"sm\"\n                className=\"flex-1 bg-gray-700/50 hover:bg-gray-600/50 text-pink-400 border border-pink-500/30 hover:border-pink-400/50 hover:shadow-[0_0_15px_rgba(236,72,153,0.3)] transition-all duration-300 disabled:opacity-30\"\n              >\n                <span className=\"text-xs font-semibold\">Next \u2192</span>\n              </Button>\n              \n              <Button\n                onClick={() => {\n                  const lastStep = steps.length - 1;\n                  setCurrentStep(lastStep);\n                  if (lastStep >= 0 && lastStep < steps.length) {\n                    setArray(steps[lastStep].array);\n                  }\n                  setIsPlaying(false);\n                }}\n                disabled={steps.length === 0 || currentStep >= steps.length - 1}\n                size=\"sm\"\n                className=\"flex-1 bg-gray-700/50 hover:bg-gray-600/50 text-cyan-400 border border-cyan-500/30 hover:border-cyan-400/50 hover:shadow-[0_0_15px_rgba(0,255,255,0.3)] transition-all duration-300 disabled:opacity-30\"\n              >\n                <span className=\"text-xs font-semibold\">Last</span>\n              </Button>\n            </div>\n\n            {/* Status Indicator */}\n            {steps.length > 0 && (\n              <motion.div\n                initial={{ opacity: 0 }}\n                animate={{ opacity: 1 }}\n                className=\"flex items-center justify-center gap-2 pt-2 text-sm\"\n              >\n                {currentStep >= steps.length ? (\n                  <div className=\"flex items-center gap-2 text-green-400\">\n                    <motion.div\n                      animate={{ scale: [1, 1.2, 1] }}\n                      transition={{ duration: 1, repeat: Infinity }}\n                      className=\"w-2 h-2 rounded-full bg-green-400 shadow-[0_0_10px_rgba(74,222,128,0.8)]\"\n                    />\n                    <span className=\"font-semibold\">Sorting Complete!</span>\n                  </div>\n                ) : isPlaying ? (\n                  <div className=\"flex items-center gap-2 text-cyan-400\">\n                    <motion.div\n                      animate={{ scale: [1, 1.3, 1] }}\n                      transition={{ duration: 0.8, repeat: Infinity }}\n                      className=\"w-2 h-2 rounded-full bg-cyan-400 shadow-[0_0_10px_rgba(0,255,255,0.8)]\"\n                    />\n                    <span className=\"font-semibold\">Playing...</span>\n                  </div>\n                ) : (\n                  <div className=\"flex items-center gap-2 text-gray-400\">\n                    <div className=\"w-2 h-2 rounded-full bg-gray-400\" />\n                    <span>Paused</span>\n                  </div>\n                )}\n              </motion.div>\n            )}\n          </div>\n        </motion.div>\n      </div>\n    </div>\n  );\n}",
    "error": null,
    "elapsed_time": 99.39141845703125,
    "success": true
  }
}