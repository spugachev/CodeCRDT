{
  "prompt_id": "dashboard",
  "prompt_name": "Analytics Dashboard",
  "mode": "parallel",
  "run_number": 47,
  "timestamp": "2025-10-14T11:43:22.995135",
  "response_time": 84.36936211585999,
  "total_tokens": null,
  "response_content": "import { useState, useCallback } from 'react';\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\nimport { motion } from 'framer-motion';\nimport { CheckCircle, AlertCircle, UserPlus, Package } from 'lucide-react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Moon, Sun, RefreshCw } from 'lucide-react';\nimport { motion } from 'framer-motion';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\nimport { Badge } from '@/components/ui/badge';\nimport { ArrowUpDown, ChevronLeft, ChevronRight } from 'lucide-react';\n\nimport { AreaChart, Area, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';\n\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';\nimport { AreaChart, Area } from 'recharts';\nimport { TrendingUp, TrendingDown, DollarSign, Users, hoppingCartShoppingCart, Target, AlertCircle, AlertTriangle, Info, CheckCircle, X } from 'lucide-react';\nimport { motion } from 'framer-motion';\n\ninterface MetricData {\n  id: string;\n  label: string;\n  value: number;\n  change: number;\n  trend: 'up' | 'down';\n}\n\ninterface ChartDataPoint {\n  date: string;\n  revenue: number;\n  users: number;\n  orders: number;\n}\n\ninterface TableRow {\n  id: string;\n  product: string;\n  sales: number;\n  revenue: number;\n  status: 'active' | 'pending' | 'inactive';\n}\n\nconst mockMetrics: MetricData[] = [\n  { id: '1', label: 'Total Revenue', value: 45231, change: 12.5, trend: 'up' },\n  { id: '2', label: 'Active Users', value: 2350, change: 8.2, trend: 'up' },\n  { id: '3', label: 'Total Orders', value: 1543, change: -3.1, trend: 'down' },\n  { id: '4', label: 'Conversion Rate', value: 3.24, change: 5.7, trend: 'up' }\n];\n\nconst mockChartData: ChartDataPoint[] = [\n  { date: '2024-01-01', revenue: 12000, users: 450, orders: 230 },\n  { date: '2024-01-02', revenue: 15000, users: 520, orders: 280 },\n  { date: '2024-01-03', revenue: 13500, users: 490, orders: 250 },\n  { date: '2024-01-04', revenue: 18000, users: 610, orders: 320 },\n  { date: '2024-01-05', revenue: 16500, users: 580, orders: 295 },\n  { date: '2024-01-06', revenue: 20000, users: 680, orders: 350 },\n  { date: '2024-01-07', revenue: 22000, users: 720, orders: 380 }\n];\n\nconst mockTableData: TableRow[] = [\n  { id: '1', product: 'Premium Plan', sales: 234, revenue: 23400, status: 'active' },\n  { id: '2', product: 'Basic Plan', sales: 567, revenue: 11340, status: 'active' },\n  { id: '3', product: 'Enterprise Plan', sales: 89, revenue: 44500, status: 'active' },\n  { id: '4', product: 'Starter Plan', sales: 432, revenue: 4320, status: 'pending' },\n  { id: '5', product: 'Pro Plan', sales: 156, revenue: 15600, status: 'inactive' }\n];\ninterface Alert {\n  id: string;\n  message: string;\n  severity: 'info' | 'warning' | 'error' | 'success';\n  timestamp: string;\n}\n\nconst mockAlerts: Alert[] = [\n  { id: '1', message: 'Server response time increased by 15%', severity: 'warning', timestamp: '5 min ago' },\n  { id: '2', message: 'New user milestone reached: 2,500 users', severity: 'success', timestamp: '12 min ago' },\n  { id: '3', message: 'Payment gateway experiencing delays', severity: 'error', timestamp: '18 min ago' },\n  { id: '4', message: 'Scheduled maintenance in 2 hours', severity: 'info', timestamp: '25 min ago' }\n];\n\nconst getAlertIcon = (severity: string) => {\n  switch (severity) {\n    case 'error':\n      return AlertCircle;\n    case 'warning':\n      return AlertTriangle;\n    case 'success':\n      return CheckCircle;\n    case 'info':\n    default:\n      return Info;\n  }\n};\n\nconst getAlertColor = (severity: string, isDark: boolean) => {\n  switch (severity) {\n    case 'error':\n      return isDark ? 'text-red-400' : 'text-red-600';\n    case 'warning':\n      return isDark ? 'text-amber-400' : 'text-amber-600';\n    case 'success':\n      return isDark ? 'text-green-400' : 'text-green-600';\n    case 'info':\n    default:\n      return isDark ? 'text-blue-400' : 'text-blue-600';\n  }\n};\n\nconst getAlertBgColor = (severity: string, isDark: boolean) => {\n  switch (severity) {\n    case 'error':\n      return isDark ? 'bg-red-900/20' : 'bg-red-50';\n    case 'warning':\n      return isDark ? 'bg-amber-900/20' : 'bg-amber-50';\n    case 'success':\n      return isDark ? 'bg-green-900/20' : 'bg-green-50';\n    case 'info':\n    default:\n      return isDark ? 'bg-blue-900/20' : 'bg-blue-50';\n  }\n};\n\ninterface ActivityItem {\n  id: string;\n  type: 'success' | 'warning' | 'info' | 'order';\n  message: string;\n  timestamp: string;\n}\n\nconst mockActivityData: ActivityItem[] = [\n  { id: '1', type: 'success', message: 'New user registration completed', timestamp: '2 min ago' },\n  { id: '2', type: 'order', message: 'Order #1234 has been shipped', timestamp: '15 min ago' },\n  { id: '3', type: 'info', message: '5 new users joined today', timestamp: '1 hour ago' },\n  { id: '4', type: 'warning', message: 'Payment pending for Order #1230', timestamp: '2 hours ago' },\n  { id: '5', type: 'success', message: 'Revenue milestone reached: $50k', timestamp: '3 hours ago' }\n];\nconst mockQuickStats = [\n  {\n    id: '1',\n    label: 'Avg. Order Value',\n    value: '$142.50',\n    change: 15.3,\n    sparklineData: [\n      { value: 120 },\n      { value: 135 },\n      { value: 128 },\n      { value: 145 },\n      { value: 138 },\n      { value: 152 },\n      { value: 142 }\n    ]\n  },\n  {\n    id: '2',\n    label: 'Customer Retention',\n    value: '87.5%',\n    change: 4.2,\n    sparklineData: [\n      { value: 82 },\n      { value: 84 },\n      { value: 85 },\n      { value: 86 },\n      { value: 85 },\n      { value: 87 },\n      { value: 88 }\n    ]\n  },\n  {\n    id: '3',\n    label: 'Bounce Rate',\n    value: '32.1%',\n    change: -2.8,\n    sparklineData: [\n      { value: 35 },\n      { value: 36 },\n      { value: 34 },\n      { value: 33 },\n      { value: 34 },\n      { value: 32 },\n      { value: 32 }\n    ]\n  }\n];\nconst pieChartColors = [\n  '#3b82f6', // blue\n  '#10b981', // green\n  '#f59e0b', // amber\n  '#ef4444', // red\n  '#8b5cf6'  // purple\n];\n\ninterface PieChartData {\n  label: string;\n  value: number;\n  color: string;\n  percentage: number;\n}\n\nconst preparePieChartData = (data: ChartDataPoint[]): PieChartData[] => {\n  const total = data.reduce((sum, item) => sum + item.orders, 0);\n  \n  return data.map((item, index) => ({\n    label: `Day ${index + 1}`,\n    value: item.orders,\n    color: pieChartColors[index % pieChartColors.length],\n    percentage: (item.orders / total) * 100\n  }));\n};\n\nconst PieChart = ({ data, isDark }: { data: PieChartData[]; isDark: boolean }) => {\n  const size = 200;\n  const center = size / 2;\n  const radius = size / 2 - 10;\n  \n  let currentAngle = -90;\n  \n  const slices = data.map((item, index) => {\n    const angle = (item.percentage / 100) * 360;\n    const startAngle = currentAngle;\n    const endAngle = currentAngle + angle;\n    \n    const x1 = center + radius * Math.cos((startAngle * Math.PI) / 180);\n    const y1 = center + radius * Math.sin((startAngle * Math.PI) / 180);\n    const x2 = center + radius * Math.cos((endAngle * Math.PI) / 180);\n    const y2 = center + radius * Math.sin((endAngle * Math.PI) / 180);\n    \n    const largeArcFlag = angle > 180 ? 1 : 0;\n    \n    const pathData = [\n      `M ${center} ${center}`,\n      `L ${x1} ${y1}`,\n      `A ${radius} ${radius} 0 ${largeArcFlag} 1 ${x2} ${y2}`,\n      'Z'\n    ].join(' ');\n    \n    currentAngle = endAngle;\n    \n    return {\n      pathData,\n      color: item.color,\n      label: item.label,\n      value: item.value,\n      percentage: item.percentage\n    };\n  });\n  \n  return (\n    <div className=\"flex flex-col md:flex-row items-center justify-center gap-6\">\n      <svg width={size} height={size} viewBox={`0 0 ${size} ${size}`} className=\"flex-shrink-0\">\n        {slices.map((slice, index) => (\n          <motion.path\n            key={index}\n            d={slice.pathData}\n            fill={slice.color}\n            initial={{ opacity: 0, scale: 0 }}\n            animate={{ opacity: 1, scale: 1 }}\n            transition={{ duration: 0.5, delay: index * 0.1 }}\n            className=\"hover:opacity-80 transition-opacity cursor-pointer\"\n          />\n        ))}\n      </svg>\n      \n      <div className=\"flex flex-col gap-2\">\n        {data.map((item, index) => (\n          <motion.div\n            key={index}\n            initial={{ opacity: 0, x: -20 }}\n            animate={{ opacity: 1, x: 0 }}\n            transition={{ duration: 0.3, delay: index * 0.1 }}\n            className=\"flex items-center gap-2\"\n          >\n            <div\n              className=\"w-3 h-3 rounded-full flex-shrink-0\"\n              style={{ backgroundColor: item.color }}\n            />\n            <span className={`text-sm ${isDark ? 'text-gray-300' : 'text-gray-700'}`}>\n              {item.label}: {item.value} ({item.percentage.toFixed(1)}%)\n            </span>\n          </motion.div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\n\nconst getMetricIcon = (label: string) => {\n  switch (label) {\n    case 'Total Revenue':\n      return DollarSign;\n    case 'Active Users':\n      return Users;\n    case 'Total Orders':\n      return ShoppingCart;\n    case 'Conversion Rate':\n      return Target;\n    default:\n      return DollarSign;\n  }\n};\n\nconst formatMetricValue = (label: string, value: number) => {\n  if (label === 'Total Revenue') {\n    return `$${value.toLocaleString()}`;\n  } else if (label === 'Conversion Rate') {\n    return `${value}%`;\n  }\n  return value.toLocaleString();\n};\n\nconst CustomTooltip = ({ active, payload, isDark }: any) => {\n  if (active && payload && payload.length) {\n    return (\n      <div className={`p-3 rounded-lg shadow-lg border ${isDark ? 'bg-gray-800 border-gray-700' : 'bg-white border-gray-200'}`}>\n        <p className={`text-sm font-medium mb-2 ${isDark ? 'text-gray-300' : 'text-gray-600'}`}>\n          {payload[0].payload.date}\n        </p>\n        <p className={`text-sm font-semibold ${isDark ? 'text-white' : 'text-gray-900'}`}>\n          Revenue: ${payload[0].value.toLocaleString()}\n        </p>\n      </div>\n    );\n  }\n  return null;\n};\n\nconst UserChartTooltip = ({ active, payload, isDark }: any) => {\n  if (active && payload && payload.length) {\n    return (\n      <div className={`${isDark ? 'bg-gray-800 border-gray-700' : 'bg-white border-gray-200'} border rounded-lg shadow-lg p-3`}>\n        <p className={`text-xs ${isDark ? 'text-gray-400' : 'text-gray-600'} mb-1`}>\n          {payload[0].payload.date}\n        </p>\n        <p className={`text-sm font-semibold ${isDark ? 'text-blue-400' : 'text-blue-600'}`}>\n          Users: {payload[0].value.toLocaleString()}\n        </p>\n      </div>\n    );\n  }\n  return null;\n};\n\nexport default function AnalyticsDashboard() {\n  const [isDarkMode, setIsDarkMode] = useState(false);\n  const [metrics, setMetrics] = useState<MetricData[]>(mockMetrics);\n  const [chartData, setChartData] = useState<ChartDataPoint[]>(mockChartData);\n  const [tableData, setTableData] = useState<TableRow[]>(mockTableData);\n  const [isRefreshing, setIsRefreshing] = useState(false);\n\n  const toggleDarkMode = useCallback(() => {\n    setIsDarkMode(prev => !prev);\n  }, []);\n\n  const [sortConfig, setSortConfig] = useState<{ key: keyof TableRow; direction: 'asc' | 'desc' } | null>(null);\n  const [currentPage, setCurrentPage] = useState(1);\n  const itemsPerPage = 3;\n\n  const handleSort = useCallback((key: keyof TableRow) => {\n    setSortConfig(prev => {\n      if (prev?.key === key) {\n        return { key, direction: prev.direction === 'asc' ? 'desc' : 'asc' };\n      }\n      return { key, direction: 'asc' };\n    });\n  }, []);\n\n  const sortedTableData = useCallback(() => {\n    if (!sortConfig) return tableData;\n\n    return [...tableData].sort((a, b) => {\n      const aValue = a[sortConfig.key];\n      const bValue = b[sortConfig.key];\n\n      if (typeof aValue === 'number' && typeof bValue === 'number') {\n        return sortConfig.direction === 'asc' ? aValue - bValue : bValue - aValue;\n      }\n\n      if (typeof aValue === 'string' && typeof bValue === 'string') {\n        return sortConfig.direction === 'asc' \n          ? aValue.localeCompare(bValue)\n          : bValue.localeCompare(aValue);\n      }\n\n      return 0;\n    });\n  }, [tableData, sortConfig]);\n\n  const paginatedData = useCallback(() => {\n    const sorted = sortedTableData();\n    const startIndex = (currentPage - 1) * itemsPerPage;\n    return sorted.slice(startIndex, startIndex + itemsPerPage);\n  }, [sortedTableData, currentPage]);\n\n  const totalPages = Math.ceil(tableData.length / itemsPerPage);\n\n  const getStatusColor = (status: TableRow['status']) => {\n    switch (status) {\n      case 'active':\n        return 'bg-green-500/10 text-green-500 hover:bg-green-500/20';\n      case 'pending':\n        return 'bg-yellow-500/10 text-yellow-500 hover:bg-yellow-500/20';\n      case 'inactive':\n        return 'bg-gray-500/10 text-gray-500 hover:bg-gray-500/20';\n      default:\n        return '';\n    }\n  };\n\n  const handleRefresh = useCallback(() => {\n    setIsRefreshing(true);\n    \n    setTimeout(() => {\n      // Generate updated metrics with random variations\n      const updatedMetrics = mockMetrics.map(metric => ({\n        ...metric,\n        value: metric.value + Math.floor(Math.random() * 200 - 100),\n        change: parseFloat((Math.random() * 20 - 5).toFixed(1)),\n        trend: Math.random() > 0.5 ? 'up' as const : 'down' as const\n      }));\n\n      // Generate updated chart data with random variations\n      const updatedChartData = mockChartData.map(point => ({\n        ...point,\n        revenue: point.revenue + Math.floor(Math.random() * 4000 - 2000),\n        users: point.users + Math.floor(Math.random() * 100 - 50),\n        orders: point.orders + Math.floor(Math.random() * 50 - 25)\n      }));\n\n      // Generate updated table data with random variations\n      const updatedTableData = mockTableData.map(row => ({\n        ...row,\n        sales: row.sales + Math.floor(Math.random() * 40 - 20),\n        revenue: row.revenue + Math.floor(Math.random() * 2000 - 1000)\n      }));\n\n      setMetrics(updatedMetrics);\n      setChartData(updatedChartData);\n      setTableData(updatedTableData);\n      setIsRefreshing(false);\n    }, 1500);\n  }, []);\n\n  return (\n    <div className={`min-h-screen ${isDarkMode ? 'dark bg-gray-900' : 'bg-gray-50'}`}>\n      <div className=\"container mx-auto p-4 md:p-6 lg:p-8\">\n        <div className=\"flex flex-col md:flex-row justify-between items-start md:items-center gap-4 mb-8\">\n          <div>\n            <h1 className={`text-3xl md:text-4xl font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n              Analytics Dashboard\n            </h1>\n            <p className={`mt-2 ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n              Real-time insights and performance metrics\n            </p>\n          </div>\n          \n          <div className=\"flex gap-2\">\n            <Button\n              variant=\"outline\"\n              size=\"icon\"\n              onClick={toggleDarkMode}\n              className={isDarkMode ? 'border-gray-700' : ''}\n            >\n              {isDarkMode ? <Sun className=\"h-5 w-5\" /> : <Moon className=\"h-5 w-5\" />}\n            </Button>\n            \n            <Button\n              variant=\"outline\"\n              onClick={handleRefresh}\n              disabled={isRefreshing}\n              className={isDarkMode ? 'border-gray-700' : ''}\n            >\n              <RefreshCw className={`h-4 w-4 mr-2 ${isRefreshing ? 'animate-spin' : ''}`} />\n              Refresh\n            </Button>\n          </div>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 md:gap-6 mb-8\">\n          {metrics.map((metric, index) => {\n            const Icon = getMetricIcon(metric.label);\n            const TrendIcon = metric.trend === 'up' ? TrendingUp : TrendingDown;\n            \n            return (\n              <motion.div\n                key={metric.id}\n                initial={{ opacity: 0, y: 20 }}\n                animate={{ opacity: 1, y: 0 }}\n                transition={{ duration: 0.4, delay: index * 0.1 }}\n              >\n                <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n                  <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                    <CardTitle className={`text-sm font-medium ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                      {metric.label}\n                    </CardTitle>\n                    <div className={`p-2 rounded-lg ${isDarkMode ? 'bg-gray-700' : 'bg-gray-100'}`}>\n                      <Icon className={`h-4 w-4 ${isDarkMode ? 'text-gray-300' : 'text-gray-600'}`} />\n                    </div>\n                  </CardHeader>\n                  <CardContent>\n                    <div className={`text-2xl font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                      {formatMetricValue(metric.label, metric.value)}\n                    </div>\n                    <div className=\"flex items-center mt-2\">\n                      <TrendIcon \n                        className={`h-4 w-4 mr-1 ${\n                          metric.trend === 'up' ? 'text-green-500' : 'text-red-500'\n                        }`} \n                      />\n                      <span \n                        className={`text-sm font-medium ${\n                          metric.trend === 'up' ? 'text-green-500' : 'text-red-500'\n                        }`}\n                      >\n                        {metric.change > 0 ? '+' : ''}{metric.change}%\n                      </span>\n                      <span className={`text-sm ml-2 ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                        vs last period\n                      </span>\n                    </div>\n                  </CardContent>\n                </Card>\n              </motion.div>\n            );\n          })}\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-4 md:gap-6 mb-8\">\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Revenue Overview</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Daily revenue trends\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"w-full h-[300px] md:h-[350px]\">\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <LineChart\n                    data={chartData}\n                    margin={{ top: 5, right: 10, left: 0, bottom: 5 }}\n                  >\n                    <CartesianGrid \n                      strokeDasharray=\"3 3\" \n                      stroke={isDarkMode ? '#374151' : '#e5e7eb'}\n                    />\n                    <XAxis \n                      dataKey=\"date\" \n                      stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                      tick={{ fill: isDarkMode ? '#9ca3af' : '#6b7280', fontSize: 12 }}\n                      tickFormatter={(value) => new Date(value).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n                    />\n                    <YAxis \n                      stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                      tick={{ fill: isDarkMode ? '#9ca3af' : '#6b7280', fontSize: 12 }}\n                      tickFormatter={(value) => `$${(value / 1000).toFixed(0)}k`}\n                    />\n                    <Tooltip content={<CustomTooltip isDark={isDarkMode} />} />\n                    <Line \n                      type=\"monotone\" \n                      dataKey=\"revenue\" \n                      stroke=\"#3b82f6\" \n                      strokeWidth={2}\n                      dot={{ fill: '#3b82f6', r: 4 }}\n                      activeDot={{ r: 6, fill: '#2563eb' }}\n                    />\n                  </LineChart>\n                </ResponsiveContainer>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>User Growth</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Active users over time\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <motion.div\n                initial={{ opacity: 0, y: 20 }}\n                animate={{ opacity: 1, y: 0 }}\n                transition={{ duration: 0.5, delay: 0.2 }}\n                className=\"h-[300px] w-full\"\n              >\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <AreaChart\n                    data={chartData}\n                    margin={{ top: 10, right: 10, left: 0, bottom: 0 }}\n                  >\n                    <defs>\n                      <linearGradient id=\"userGradient\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                        <stop offset=\"5%\" stopColor=\"#3b82f6\" stopOpacity={0.8} />\n                        <stop offset=\"95%\" stopColor=\"#3b82f6\" stopOpacity={0.1} />\n                      </linearGradient>\n                    </defs>\n                    <CartesianGrid \n                      strokeDasharray=\"3 3\" \n                      stroke={isDarkMode ? '#374151' : '#e5e7eb'}\n                      vertical={false}\n                    />\n                    <XAxis\n                      dataKey=\"date\"\n                      tickFormatter={(value) => new Date(value).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n                      stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                      style={{ fontSize: '12px' }}\n                      tickLine={false}\n                    />\n                    <YAxis\n                      stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                      style={{ fontSize: '12px' }}\n                      tickLine={false}\n                      axisLine={false}\n                      tickFormatter={(value) => value.toLocaleString()}\n                    />\n                    <Tooltip content={<UserChartTooltip isDark={isDarkMode} />} />\n                    <Area\n                      type=\"monotone\"\n                      dataKey=\"users\"\n                      stroke=\"#3b82f6\"\n                      strokeWidth={2}\n                      fill=\"url(#userGradient)\"\n                      animationDuration={1000}\n                      animationBegin={0}\n                    />\n                  </AreaChart>\n                </ResponsiveContainer>\n              </motion.div>\n            </CardContent>\n          </Card>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-4 md:gap-6 mb-8\">\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Orders Distribution</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                By product category\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <PieChart data={preparePieChartData(chartData)} isDark={isDarkMode} />\n            </CardContent>\n          </Card>\n\n          <Card className={`lg:col-span-2 ${isDarkMode ? 'bg-gray-800 border-gray-700' : ''}`}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Performance Metrics</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Combined view of key indicators\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <ResponsiveContainer width=\"100%\" height={300}>\n                <BarChart data={chartData}>\n                  <CartesianGrid \n                    strokeDasharray=\"3 3\" \n                    stroke={isDarkMode ? '#374151' : '#e5e7eb'}\n                  />\n                  <XAxis \n                    dataKey=\"date\" \n                    stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                    tick={{ fill: isDarkMode ? '#9ca3af' : '#6b7280' }}\n                    tickFormatter={(value) => new Date(value).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n                  />\n                  <YAxis \n                    stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                    tick={{ fill: isDarkMode ? '#9ca3af' : '#6b7280' }}\n                  />\n                  <Tooltip \n                    contentStyle={{\n                      backgroundColor: isDarkMode ? '#1f2937' : '#ffffff',\n                      border: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\n                      borderRadius: '8px',\n                      color: isDarkMode ? '#f3f4f6' : '#111827'\n                    }}\n                    labelStyle={{ color: isDarkMode ? '#f3f4f6' : '#111827' }}\n                    formatter={(value: number, name: string) => {\n                      if (name === 'revenue') return [`$${value.toLocaleString()}`, 'Revenue'];\n                      if (name === 'users') return [value.toLocaleString(), 'Users'];\n                      if (name === 'orders') return [value.toLocaleString(), 'Orders'];\n                      return [value, name];\n                    }}\n                    labelFormatter={(label) => new Date(label).toLocaleDateString('en-US', { \n                      month: 'long', \n                      day: 'numeric',\n                      year: 'numeric'\n                    })}\n                  />\n                  <Legend \n                    wrapperStyle={{ color: isDarkMode ? '#9ca3af' : '#6b7280' }}\n                    formatter={(value) => {\n                      if (value === 'revenue') return 'Revenue';\n                      if (value === 'users') return 'Users';\n                      if (value === 'orders') return 'Orders';\n                      return value;\n                    }}\n                  />\n                  <Bar \n                    dataKey=\"revenue\" \n                    fill=\"#3b82f6\" \n                    radius={[4, 4, 0, 0]}\n                    animationDuration={1000}\n                  />\n                  <Bar \n                    dataKey=\"users\" \n                    fill=\"#10b981\" \n                    radius={[4, 4, 0, 0]}\n                    animationDuration={1000}\n                  />\n                  <Bar \n                    dataKey=\"orders\" \n                    fill=\"#f59e0b\" \n                    radius={[4, 4, 0, 0]}\n                    animationDuration={1000}\n                  />\n                </BarChart>\n              </ResponsiveContainer>\n            </CardContent>\n          </Card>\n        </div>\n\n        <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n          <CardHeader>\n            <CardTitle className={isDarkMode ? 'text-white' : ''}>Top Products</CardTitle>\n            <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n              Best performing products by revenue\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              <div className=\"overflow-x-auto\">\n                <Table>\n                  <TableHeader>\n                    <TableRow className={isDarkMode ? 'border-gray-700' : ''}>\n                      <TableHead className={isDarkMode ? 'text-gray-300' : ''}>\n                        <button\n                          onClick={() => handleSort('product')}\n                          className=\"flex items-center gap-1 hover:text-primary transition-colors\"\n                        >\n                          Product\n                          <ArrowUpDown className=\"h-4 w-4\" />\n                        </button>\n                      </TableHead>\n                      <TableHead className={isDarkMode ? 'text-gray-300' : ''}>\n                        <button\n                          onClick={() => handleSort('sales')}\n                          className=\"flex items-center gap-1 hover:text-primary transition-colors\"\n                        >\n                          Sales\n                          <ArrowUpDown className=\"h-4 w-4\" />\n                        </button>\n                      </TableHead>\n                      <TableHead className={isDarkMode ? 'text-gray-300' : ''}>\n                        <button\n                          onClick={() => handleSort('revenue')}\n                          className=\"flex items-center gap-1 hover:text-primary transition-colors\"\n                        >\n                          Revenue\n                          <ArrowUpDown className=\"h-4 w-4\" />\n                        </button>\n                      </TableHead>\n                      <TableHead className={isDarkMode ? 'text-gray-300' : ''}>\n                        <button\n                          onClick={() => handleSort('status')}\n                          className=\"flex items-center gap-1 hover:text-primary transition-colors\"\n                        >\n                          Status\n                          <ArrowUpDown className=\"h-4 w-4\" />\n                        </button>\n                      </TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {paginatedData().map((row, index) => (\n                      <motion.tr\n                        key={row.id}\n                        initial={{ opacity: 0, y: 10 }}\n                        animate={{ opacity: 1, y: 0 }}\n                        transition={{ delay: index * 0.05 }}\n                        className={`border-b ${isDarkMode ? 'border-gray-700' : ''}`}\n                      >\n                        <TableCell className={`font-medium ${isDarkMode ? 'text-gray-200' : ''}`}>\n                          {row.product}\n                        </TableCell>\n                        <TableCell className={isDarkMode ? 'text-gray-300' : ''}>\n                          {row.sales.toLocaleString()}\n                        </TableCell>\n                        <TableCell className={isDarkMode ? 'text-gray-300' : ''}>\n                          ${row.revenue.toLocaleString()}\n                        </TableCell>\n                        <TableCell>\n                          <Badge \n                            variant=\"secondary\" \n                            className={getStatusColor(row.status)}\n                          >\n                            {row.status.charAt(0).toUpperCase() + row.status.slice(1)}\n                          </Badge>\n                        </TableCell>\n                      </motion.tr>\n                    ))}\n                  </TableBody>\n                </Table>\n              </div>\n\n              <div className=\"flex flex-col sm:flex-row items-center justify-between gap-4\">\n                <p className={`text-sm ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                  Showing {((currentPage - 1) * itemsPerPage) + 1} to {Math.min(currentPage * itemsPerPage, tableData.length)} of {tableData.length} products\n                </p>\n                \n                <div className=\"flex items-center gap-2\">\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => setCurrentPage(prev => Math.max(1, prev - 1))}\n                    disabled={currentPage === 1}\n                    className={isDarkMode ? 'border-gray-700' : ''}\n                  >\n                    <ChevronLeft className=\"h-4 w-4\" />\n                    Previous\n                  </Button>\n                  \n                  <div className=\"flex items-center gap-1\">\n                    {Array.from({ length: totalPages }, (_, i) => i + 1).map(page => (\n                      <Button\n                        key={page}\n                        variant={currentPage === page ? 'default' : 'outline'}\n                        size=\"sm\"\n                        onClick={() => setCurrentPage(page)}\n                        className={`w-8 h-8 p-0 ${isDarkMode && currentPage !== page ? 'border-gray-700' : ''}`}\n                      >\n                        {page}\n                      </Button>\n                    ))}\n                  </div>\n                  \n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => setCurrentPage(prev => Math.min(totalPages, prev + 1))}\n                    disabled={currentPage === totalPages}\n                    className={isDarkMode ? 'border-gray-700' : ''}\n                  >\n                    Next\n                    <ChevronRight className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 md:gap-6 mt-8\">\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Recent Activity</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {mockActivityData.map((activity, index) => {\n                  const getActivityIcon = () => {\n                    switch (activity.type) {\n                      case 'success':\n                        return <CheckCircle className=\"h-5 w-5 text-green-500\" />;\n                      case 'warning':\n                        return <AlertCircle className=\"h-5 w-5 text-yellow-500\" />;\n                      case 'info':\n                        return <UserPlus className=\"h-5 w-5 text-blue-500\" />;\n                      case 'order':\n                        return <Package className=\"h-5 w-5 text-purple-500\" />;\n                      default:\n                        return <CheckCircle className=\"h-5 w-5 text-gray-500\" />;\n                    }\n                  };\n\n                  return (\n                    <motion.div\n                      key={activity.id}\n                      initial={{ opacity: 0, x: -20 }}\n                      animate={{ opacity: 1, x: 0 }}\n                      transition={{ delay: index * 0.1, duration: 0.3 }}\n                      className=\"flex items-start gap-3 pb-4 border-b last:border-b-0 last:pb-0\"\n                      style={{ borderColor: isDarkMode ? '#374151' : '#e5e7eb' }}\n                    >\n                      <div className=\"mt-0.5\">\n                        {getActivityIcon()}\n                      </div>\n                      <div className=\"flex-1 min-w-0\">\n                        <p className={`text-sm ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>\n                          {activity.message}\n                        </p>\n                        <p className={`text-xs mt-1 ${isDarkMode ? 'text-gray-500' : 'text-gray-500'}`}>\n                          {activity.timestamp}\n                        </p>\n                      </div>\n                    </motion.div>\n                  );\n                })}\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Quick Stats</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {mockQuickStats.map((stat, index) => (\n                  <motion.div\n                    key={stat.id}\n                    initial={{ opacity: 0, x: -20 }}\n                    animate={{ opacity: 1, x: 0 }}\n                    transition={{ delay: index * 0.1 }}\n                    className={`p-4 rounded-lg border ${\n                      isDarkMode ? 'bg-gray-700/50 border-gray-600' : 'bg-gray-50 border-gray-200'\n                    }`}\n                  >\n                    <div className=\"flex items-start justify-between mb-3\">\n                      <div>\n                        <p className={`text-sm ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                          {stat.label}\n                        </p>\n                        <p className={`text-2xl font-bold mt-1 ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                          {stat.value}\n                        </p>\n                      </div>\n                      <div className={`flex items-center gap-1 px-2 py-1 rounded-full text-xs font-medium ${\n                        stat.change >= 0\n                          ? 'bg-green-100 text-green-700 dark:bg-green-900/30 dark:text-green-400'\n                          : 'bg-red-100 text-red-700 dark:bg-red-900/30 dark:text-red-400'\n                      }`}>\n                        {stat.change >= 0 ? (\n                          <TrendingUp className=\"h-3 w-3\" />\n                        ) : (\n                          <TrendingDown className=\"h-3 w-3\" />\n                        )}\n                        {Math.abs(stat.change)}%\n                      </div>\n                    </div>\n                    <div className=\"h-12\">\n                      <ResponsiveContainer width=\"100%\" height=\"100%\">\n                        <AreaChart data={stat.sparklineData}>\n                          <defs>\n                            <linearGradient id={`gradient-${stat.id}`} x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                              <stop\n                                offset=\"0%\"\n                                stopColor={stat.change >= 0 ? '#10b981' : '#ef4444'}\n                                stopOpacity={0.3}\n                              />\n                              <stop\n                                offset=\"100%\"\n                                stopColor={stat.change >= 0 ? '#10b981' : '#ef4444'}\n                                stopOpacity={0}\n                              />\n                            </linearGradient>\n                          </defs>\n                          <Area\n                            type=\"monotone\"\n                            dataKey=\"value\"\n                            stroke={stat.change >= 0 ? '#10b981' : '#ef4444'}\n                            strokeWidth={2}\n                            fill={`url(#gradient-${stat.id})`}\n                            isAnimationActive={true}\n                          />\n                        </AreaChart>\n                      </ResponsiveContainer>\n                    </div>\n                  </motion.div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Alerts</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-3\">\n                {mockAlerts.map((alert, index) => {\n                  const AlertIcon = getAlertIcon(alert.severity);\n                  const alertColor = getAlertColor(alert.severity, isDarkMode);\n                  const alertBgColor = getAlertBgColor(alert.severity, isDarkMode);\n\n                  return (\n                    <motion.div\n                      key={alert.id}\n                      initial={{ opacity: 0, x: -20 }}\n                      animate={{ opacity: 1, x: 0 }}\n                      transition={{ delay: index * 0.1 }}\n                      className={`p-3 rounded-lg ${alertBgColor} flex items-start gap-3 group relative`}\n                    >\n                      <AlertIcon className={`h-5 w-5 ${alertColor} flex-shrink-0 mt-0.5`} />\n                      <div className=\"flex-1 min-w-0\">\n                        <p className={`text-sm ${isDarkMode ? 'text-gray-200' : 'text-gray-900'}`}>\n                          {alert.message}\n                        </p>\n                        <p className={`text-xs mt-1 ${isDarkMode ? 'text-gray-500' : 'text-gray-500'}`}>\n                          {alert.timestamp}\n                        </p>\n                      </div>\n                      <button\n                        className={`opacity-0 group-hover:opacity-100 transition-opacity ${isDarkMode ? 'text-gray-400 hover:text-gray-200' : 'text-gray-400 hover:text-gray-600'}`}\n                        aria-label=\"Dismiss alert\"\n                      >\n                        <X className=\"h-4 w-4\" />\n                      </button>\n                    </motion.div>\n                  );\n                })}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}",
  "error": null,
  "overall_score": 52,
  "code_quality_score": 12,
  "architecture_score": 10,
  "performance_score": 14,
  "accessibility_score": 16,
  "metadata": {
    "document_id": "eval_room_0e2045826d0a",
    "prompt_category": "intermediate",
    "prompt_complexity": 6.0
  },
  "raw_response": {
    "document_id": "eval_room_0e2045826d0a",
    "mode": "parallel",
    "prompt": "Generate an analytics dashboard page with charts, data tables, real-time updates, dark mode, and responsive design",
    "content": "import { useState, useCallback } from 'react';\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\nimport { motion } from 'framer-motion';\nimport { CheckCircle, AlertCircle, UserPlus, Package } from 'lucide-react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Moon, Sun, RefreshCw } from 'lucide-react';\nimport { motion } from 'framer-motion';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\nimport { Badge } from '@/components/ui/badge';\nimport { ArrowUpDown, ChevronLeft, ChevronRight } from 'lucide-react';\n\nimport { AreaChart, Area, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';\n\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';\nimport { AreaChart, Area } from 'recharts';\nimport { TrendingUp, TrendingDown, DollarSign, Users, hoppingCartShoppingCart, Target, AlertCircle, AlertTriangle, Info, CheckCircle, X } from 'lucide-react';\nimport { motion } from 'framer-motion';\n\ninterface MetricData {\n  id: string;\n  label: string;\n  value: number;\n  change: number;\n  trend: 'up' | 'down';\n}\n\ninterface ChartDataPoint {\n  date: string;\n  revenue: number;\n  users: number;\n  orders: number;\n}\n\ninterface TableRow {\n  id: string;\n  product: string;\n  sales: number;\n  revenue: number;\n  status: 'active' | 'pending' | 'inactive';\n}\n\nconst mockMetrics: MetricData[] = [\n  { id: '1', label: 'Total Revenue', value: 45231, change: 12.5, trend: 'up' },\n  { id: '2', label: 'Active Users', value: 2350, change: 8.2, trend: 'up' },\n  { id: '3', label: 'Total Orders', value: 1543, change: -3.1, trend: 'down' },\n  { id: '4', label: 'Conversion Rate', value: 3.24, change: 5.7, trend: 'up' }\n];\n\nconst mockChartData: ChartDataPoint[] = [\n  { date: '2024-01-01', revenue: 12000, users: 450, orders: 230 },\n  { date: '2024-01-02', revenue: 15000, users: 520, orders: 280 },\n  { date: '2024-01-03', revenue: 13500, users: 490, orders: 250 },\n  { date: '2024-01-04', revenue: 18000, users: 610, orders: 320 },\n  { date: '2024-01-05', revenue: 16500, users: 580, orders: 295 },\n  { date: '2024-01-06', revenue: 20000, users: 680, orders: 350 },\n  { date: '2024-01-07', revenue: 22000, users: 720, orders: 380 }\n];\n\nconst mockTableData: TableRow[] = [\n  { id: '1', product: 'Premium Plan', sales: 234, revenue: 23400, status: 'active' },\n  { id: '2', product: 'Basic Plan', sales: 567, revenue: 11340, status: 'active' },\n  { id: '3', product: 'Enterprise Plan', sales: 89, revenue: 44500, status: 'active' },\n  { id: '4', product: 'Starter Plan', sales: 432, revenue: 4320, status: 'pending' },\n  { id: '5', product: 'Pro Plan', sales: 156, revenue: 15600, status: 'inactive' }\n];\ninterface Alert {\n  id: string;\n  message: string;\n  severity: 'info' | 'warning' | 'error' | 'success';\n  timestamp: string;\n}\n\nconst mockAlerts: Alert[] = [\n  { id: '1', message: 'Server response time increased by 15%', severity: 'warning', timestamp: '5 min ago' },\n  { id: '2', message: 'New user milestone reached: 2,500 users', severity: 'success', timestamp: '12 min ago' },\n  { id: '3', message: 'Payment gateway experiencing delays', severity: 'error', timestamp: '18 min ago' },\n  { id: '4', message: 'Scheduled maintenance in 2 hours', severity: 'info', timestamp: '25 min ago' }\n];\n\nconst getAlertIcon = (severity: string) => {\n  switch (severity) {\n    case 'error':\n      return AlertCircle;\n    case 'warning':\n      return AlertTriangle;\n    case 'success':\n      return CheckCircle;\n    case 'info':\n    default:\n      return Info;\n  }\n};\n\nconst getAlertColor = (severity: string, isDark: boolean) => {\n  switch (severity) {\n    case 'error':\n      return isDark ? 'text-red-400' : 'text-red-600';\n    case 'warning':\n      return isDark ? 'text-amber-400' : 'text-amber-600';\n    case 'success':\n      return isDark ? 'text-green-400' : 'text-green-600';\n    case 'info':\n    default:\n      return isDark ? 'text-blue-400' : 'text-blue-600';\n  }\n};\n\nconst getAlertBgColor = (severity: string, isDark: boolean) => {\n  switch (severity) {\n    case 'error':\n      return isDark ? 'bg-red-900/20' : 'bg-red-50';\n    case 'warning':\n      return isDark ? 'bg-amber-900/20' : 'bg-amber-50';\n    case 'success':\n      return isDark ? 'bg-green-900/20' : 'bg-green-50';\n    case 'info':\n    default:\n      return isDark ? 'bg-blue-900/20' : 'bg-blue-50';\n  }\n};\n\ninterface ActivityItem {\n  id: string;\n  type: 'success' | 'warning' | 'info' | 'order';\n  message: string;\n  timestamp: string;\n}\n\nconst mockActivityData: ActivityItem[] = [\n  { id: '1', type: 'success', message: 'New user registration completed', timestamp: '2 min ago' },\n  { id: '2', type: 'order', message: 'Order #1234 has been shipped', timestamp: '15 min ago' },\n  { id: '3', type: 'info', message: '5 new users joined today', timestamp: '1 hour ago' },\n  { id: '4', type: 'warning', message: 'Payment pending for Order #1230', timestamp: '2 hours ago' },\n  { id: '5', type: 'success', message: 'Revenue milestone reached: $50k', timestamp: '3 hours ago' }\n];\nconst mockQuickStats = [\n  {\n    id: '1',\n    label: 'Avg. Order Value',\n    value: '$142.50',\n    change: 15.3,\n    sparklineData: [\n      { value: 120 },\n      { value: 135 },\n      { value: 128 },\n      { value: 145 },\n      { value: 138 },\n      { value: 152 },\n      { value: 142 }\n    ]\n  },\n  {\n    id: '2',\n    label: 'Customer Retention',\n    value: '87.5%',\n    change: 4.2,\n    sparklineData: [\n      { value: 82 },\n      { value: 84 },\n      { value: 85 },\n      { value: 86 },\n      { value: 85 },\n      { value: 87 },\n      { value: 88 }\n    ]\n  },\n  {\n    id: '3',\n    label: 'Bounce Rate',\n    value: '32.1%',\n    change: -2.8,\n    sparklineData: [\n      { value: 35 },\n      { value: 36 },\n      { value: 34 },\n      { value: 33 },\n      { value: 34 },\n      { value: 32 },\n      { value: 32 }\n    ]\n  }\n];\nconst pieChartColors = [\n  '#3b82f6', // blue\n  '#10b981', // green\n  '#f59e0b', // amber\n  '#ef4444', // red\n  '#8b5cf6'  // purple\n];\n\ninterface PieChartData {\n  label: string;\n  value: number;\n  color: string;\n  percentage: number;\n}\n\nconst preparePieChartData = (data: ChartDataPoint[]): PieChartData[] => {\n  const total = data.reduce((sum, item) => sum + item.orders, 0);\n  \n  return data.map((item, index) => ({\n    label: `Day ${index + 1}`,\n    value: item.orders,\n    color: pieChartColors[index % pieChartColors.length],\n    percentage: (item.orders / total) * 100\n  }));\n};\n\nconst PieChart = ({ data, isDark }: { data: PieChartData[]; isDark: boolean }) => {\n  const size = 200;\n  const center = size / 2;\n  const radius = size / 2 - 10;\n  \n  let currentAngle = -90;\n  \n  const slices = data.map((item, index) => {\n    const angle = (item.percentage / 100) * 360;\n    const startAngle = currentAngle;\n    const endAngle = currentAngle + angle;\n    \n    const x1 = center + radius * Math.cos((startAngle * Math.PI) / 180);\n    const y1 = center + radius * Math.sin((startAngle * Math.PI) / 180);\n    const x2 = center + radius * Math.cos((endAngle * Math.PI) / 180);\n    const y2 = center + radius * Math.sin((endAngle * Math.PI) / 180);\n    \n    const largeArcFlag = angle > 180 ? 1 : 0;\n    \n    const pathData = [\n      `M ${center} ${center}`,\n      `L ${x1} ${y1}`,\n      `A ${radius} ${radius} 0 ${largeArcFlag} 1 ${x2} ${y2}`,\n      'Z'\n    ].join(' ');\n    \n    currentAngle = endAngle;\n    \n    return {\n      pathData,\n      color: item.color,\n      label: item.label,\n      value: item.value,\n      percentage: item.percentage\n    };\n  });\n  \n  return (\n    <div className=\"flex flex-col md:flex-row items-center justify-center gap-6\">\n      <svg width={size} height={size} viewBox={`0 0 ${size} ${size}`} className=\"flex-shrink-0\">\n        {slices.map((slice, index) => (\n          <motion.path\n            key={index}\n            d={slice.pathData}\n            fill={slice.color}\n            initial={{ opacity: 0, scale: 0 }}\n            animate={{ opacity: 1, scale: 1 }}\n            transition={{ duration: 0.5, delay: index * 0.1 }}\n            className=\"hover:opacity-80 transition-opacity cursor-pointer\"\n          />\n        ))}\n      </svg>\n      \n      <div className=\"flex flex-col gap-2\">\n        {data.map((item, index) => (\n          <motion.div\n            key={index}\n            initial={{ opacity: 0, x: -20 }}\n            animate={{ opacity: 1, x: 0 }}\n            transition={{ duration: 0.3, delay: index * 0.1 }}\n            className=\"flex items-center gap-2\"\n          >\n            <div\n              className=\"w-3 h-3 rounded-full flex-shrink-0\"\n              style={{ backgroundColor: item.color }}\n            />\n            <span className={`text-sm ${isDark ? 'text-gray-300' : 'text-gray-700'}`}>\n              {item.label}: {item.value} ({item.percentage.toFixed(1)}%)\n            </span>\n          </motion.div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\n\nconst getMetricIcon = (label: string) => {\n  switch (label) {\n    case 'Total Revenue':\n      return DollarSign;\n    case 'Active Users':\n      return Users;\n    case 'Total Orders':\n      return ShoppingCart;\n    case 'Conversion Rate':\n      return Target;\n    default:\n      return DollarSign;\n  }\n};\n\nconst formatMetricValue = (label: string, value: number) => {\n  if (label === 'Total Revenue') {\n    return `$${value.toLocaleString()}`;\n  } else if (label === 'Conversion Rate') {\n    return `${value}%`;\n  }\n  return value.toLocaleString();\n};\n\nconst CustomTooltip = ({ active, payload, isDark }: any) => {\n  if (active && payload && payload.length) {\n    return (\n      <div className={`p-3 rounded-lg shadow-lg border ${isDark ? 'bg-gray-800 border-gray-700' : 'bg-white border-gray-200'}`}>\n        <p className={`text-sm font-medium mb-2 ${isDark ? 'text-gray-300' : 'text-gray-600'}`}>\n          {payload[0].payload.date}\n        </p>\n        <p className={`text-sm font-semibold ${isDark ? 'text-white' : 'text-gray-900'}`}>\n          Revenue: ${payload[0].value.toLocaleString()}\n        </p>\n      </div>\n    );\n  }\n  return null;\n};\n\nconst UserChartTooltip = ({ active, payload, isDark }: any) => {\n  if (active && payload && payload.length) {\n    return (\n      <div className={`${isDark ? 'bg-gray-800 border-gray-700' : 'bg-white border-gray-200'} border rounded-lg shadow-lg p-3`}>\n        <p className={`text-xs ${isDark ? 'text-gray-400' : 'text-gray-600'} mb-1`}>\n          {payload[0].payload.date}\n        </p>\n        <p className={`text-sm font-semibold ${isDark ? 'text-blue-400' : 'text-blue-600'}`}>\n          Users: {payload[0].value.toLocaleString()}\n        </p>\n      </div>\n    );\n  }\n  return null;\n};\n\nexport default function AnalyticsDashboard() {\n  const [isDarkMode, setIsDarkMode] = useState(false);\n  const [metrics, setMetrics] = useState<MetricData[]>(mockMetrics);\n  const [chartData, setChartData] = useState<ChartDataPoint[]>(mockChartData);\n  const [tableData, setTableData] = useState<TableRow[]>(mockTableData);\n  const [isRefreshing, setIsRefreshing] = useState(false);\n\n  const toggleDarkMode = useCallback(() => {\n    setIsDarkMode(prev => !prev);\n  }, []);\n\n  const [sortConfig, setSortConfig] = useState<{ key: keyof TableRow; direction: 'asc' | 'desc' } | null>(null);\n  const [currentPage, setCurrentPage] = useState(1);\n  const itemsPerPage = 3;\n\n  const handleSort = useCallback((key: keyof TableRow) => {\n    setSortConfig(prev => {\n      if (prev?.key === key) {\n        return { key, direction: prev.direction === 'asc' ? 'desc' : 'asc' };\n      }\n      return { key, direction: 'asc' };\n    });\n  }, []);\n\n  const sortedTableData = useCallback(() => {\n    if (!sortConfig) return tableData;\n\n    return [...tableData].sort((a, b) => {\n      const aValue = a[sortConfig.key];\n      const bValue = b[sortConfig.key];\n\n      if (typeof aValue === 'number' && typeof bValue === 'number') {\n        return sortConfig.direction === 'asc' ? aValue - bValue : bValue - aValue;\n      }\n\n      if (typeof aValue === 'string' && typeof bValue === 'string') {\n        return sortConfig.direction === 'asc' \n          ? aValue.localeCompare(bValue)\n          : bValue.localeCompare(aValue);\n      }\n\n      return 0;\n    });\n  }, [tableData, sortConfig]);\n\n  const paginatedData = useCallback(() => {\n    const sorted = sortedTableData();\n    const startIndex = (currentPage - 1) * itemsPerPage;\n    return sorted.slice(startIndex, startIndex + itemsPerPage);\n  }, [sortedTableData, currentPage]);\n\n  const totalPages = Math.ceil(tableData.length / itemsPerPage);\n\n  const getStatusColor = (status: TableRow['status']) => {\n    switch (status) {\n      case 'active':\n        return 'bg-green-500/10 text-green-500 hover:bg-green-500/20';\n      case 'pending':\n        return 'bg-yellow-500/10 text-yellow-500 hover:bg-yellow-500/20';\n      case 'inactive':\n        return 'bg-gray-500/10 text-gray-500 hover:bg-gray-500/20';\n      default:\n        return '';\n    }\n  };\n\n  const handleRefresh = useCallback(() => {\n    setIsRefreshing(true);\n    \n    setTimeout(() => {\n      // Generate updated metrics with random variations\n      const updatedMetrics = mockMetrics.map(metric => ({\n        ...metric,\n        value: metric.value + Math.floor(Math.random() * 200 - 100),\n        change: parseFloat((Math.random() * 20 - 5).toFixed(1)),\n        trend: Math.random() > 0.5 ? 'up' as const : 'down' as const\n      }));\n\n      // Generate updated chart data with random variations\n      const updatedChartData = mockChartData.map(point => ({\n        ...point,\n        revenue: point.revenue + Math.floor(Math.random() * 4000 - 2000),\n        users: point.users + Math.floor(Math.random() * 100 - 50),\n        orders: point.orders + Math.floor(Math.random() * 50 - 25)\n      }));\n\n      // Generate updated table data with random variations\n      const updatedTableData = mockTableData.map(row => ({\n        ...row,\n        sales: row.sales + Math.floor(Math.random() * 40 - 20),\n        revenue: row.revenue + Math.floor(Math.random() * 2000 - 1000)\n      }));\n\n      setMetrics(updatedMetrics);\n      setChartData(updatedChartData);\n      setTableData(updatedTableData);\n      setIsRefreshing(false);\n    }, 1500);\n  }, []);\n\n  return (\n    <div className={`min-h-screen ${isDarkMode ? 'dark bg-gray-900' : 'bg-gray-50'}`}>\n      <div className=\"container mx-auto p-4 md:p-6 lg:p-8\">\n        <div className=\"flex flex-col md:flex-row justify-between items-start md:items-center gap-4 mb-8\">\n          <div>\n            <h1 className={`text-3xl md:text-4xl font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n              Analytics Dashboard\n            </h1>\n            <p className={`mt-2 ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n              Real-time insights and performance metrics\n            </p>\n          </div>\n          \n          <div className=\"flex gap-2\">\n            <Button\n              variant=\"outline\"\n              size=\"icon\"\n              onClick={toggleDarkMode}\n              className={isDarkMode ? 'border-gray-700' : ''}\n            >\n              {isDarkMode ? <Sun className=\"h-5 w-5\" /> : <Moon className=\"h-5 w-5\" />}\n            </Button>\n            \n            <Button\n              variant=\"outline\"\n              onClick={handleRefresh}\n              disabled={isRefreshing}\n              className={isDarkMode ? 'border-gray-700' : ''}\n            >\n              <RefreshCw className={`h-4 w-4 mr-2 ${isRefreshing ? 'animate-spin' : ''}`} />\n              Refresh\n            </Button>\n          </div>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 md:gap-6 mb-8\">\n          {metrics.map((metric, index) => {\n            const Icon = getMetricIcon(metric.label);\n            const TrendIcon = metric.trend === 'up' ? TrendingUp : TrendingDown;\n            \n            return (\n              <motion.div\n                key={metric.id}\n                initial={{ opacity: 0, y: 20 }}\n                animate={{ opacity: 1, y: 0 }}\n                transition={{ duration: 0.4, delay: index * 0.1 }}\n              >\n                <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n                  <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                    <CardTitle className={`text-sm font-medium ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                      {metric.label}\n                    </CardTitle>\n                    <div className={`p-2 rounded-lg ${isDarkMode ? 'bg-gray-700' : 'bg-gray-100'}`}>\n                      <Icon className={`h-4 w-4 ${isDarkMode ? 'text-gray-300' : 'text-gray-600'}`} />\n                    </div>\n                  </CardHeader>\n                  <CardContent>\n                    <div className={`text-2xl font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                      {formatMetricValue(metric.label, metric.value)}\n                    </div>\n                    <div className=\"flex items-center mt-2\">\n                      <TrendIcon \n                        className={`h-4 w-4 mr-1 ${\n                          metric.trend === 'up' ? 'text-green-500' : 'text-red-500'\n                        }`} \n                      />\n                      <span \n                        className={`text-sm font-medium ${\n                          metric.trend === 'up' ? 'text-green-500' : 'text-red-500'\n                        }`}\n                      >\n                        {metric.change > 0 ? '+' : ''}{metric.change}%\n                      </span>\n                      <span className={`text-sm ml-2 ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                        vs last period\n                      </span>\n                    </div>\n                  </CardContent>\n                </Card>\n              </motion.div>\n            );\n          })}\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-4 md:gap-6 mb-8\">\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Revenue Overview</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Daily revenue trends\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"w-full h-[300px] md:h-[350px]\">\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <LineChart\n                    data={chartData}\n                    margin={{ top: 5, right: 10, left: 0, bottom: 5 }}\n                  >\n                    <CartesianGrid \n                      strokeDasharray=\"3 3\" \n                      stroke={isDarkMode ? '#374151' : '#e5e7eb'}\n                    />\n                    <XAxis \n                      dataKey=\"date\" \n                      stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                      tick={{ fill: isDarkMode ? '#9ca3af' : '#6b7280', fontSize: 12 }}\n                      tickFormatter={(value) => new Date(value).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n                    />\n                    <YAxis \n                      stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                      tick={{ fill: isDarkMode ? '#9ca3af' : '#6b7280', fontSize: 12 }}\n                      tickFormatter={(value) => `$${(value / 1000).toFixed(0)}k`}\n                    />\n                    <Tooltip content={<CustomTooltip isDark={isDarkMode} />} />\n                    <Line \n                      type=\"monotone\" \n                      dataKey=\"revenue\" \n                      stroke=\"#3b82f6\" \n                      strokeWidth={2}\n                      dot={{ fill: '#3b82f6', r: 4 }}\n                      activeDot={{ r: 6, fill: '#2563eb' }}\n                    />\n                  </LineChart>\n                </ResponsiveContainer>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>User Growth</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Active users over time\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <motion.div\n                initial={{ opacity: 0, y: 20 }}\n                animate={{ opacity: 1, y: 0 }}\n                transition={{ duration: 0.5, delay: 0.2 }}\n                className=\"h-[300px] w-full\"\n              >\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <AreaChart\n                    data={chartData}\n                    margin={{ top: 10, right: 10, left: 0, bottom: 0 }}\n                  >\n                    <defs>\n                      <linearGradient id=\"userGradient\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                        <stop offset=\"5%\" stopColor=\"#3b82f6\" stopOpacity={0.8} />\n                        <stop offset=\"95%\" stopColor=\"#3b82f6\" stopOpacity={0.1} />\n                      </linearGradient>\n                    </defs>\n                    <CartesianGrid \n                      strokeDasharray=\"3 3\" \n                      stroke={isDarkMode ? '#374151' : '#e5e7eb'}\n                      vertical={false}\n                    />\n                    <XAxis\n                      dataKey=\"date\"\n                      tickFormatter={(value) => new Date(value).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n                      stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                      style={{ fontSize: '12px' }}\n                      tickLine={false}\n                    />\n                    <YAxis\n                      stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                      style={{ fontSize: '12px' }}\n                      tickLine={false}\n                      axisLine={false}\n                      tickFormatter={(value) => value.toLocaleString()}\n                    />\n                    <Tooltip content={<UserChartTooltip isDark={isDarkMode} />} />\n                    <Area\n                      type=\"monotone\"\n                      dataKey=\"users\"\n                      stroke=\"#3b82f6\"\n                      strokeWidth={2}\n                      fill=\"url(#userGradient)\"\n                      animationDuration={1000}\n                      animationBegin={0}\n                    />\n                  </AreaChart>\n                </ResponsiveContainer>\n              </motion.div>\n            </CardContent>\n          </Card>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-4 md:gap-6 mb-8\">\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Orders Distribution</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                By product category\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <PieChart data={preparePieChartData(chartData)} isDark={isDarkMode} />\n            </CardContent>\n          </Card>\n\n          <Card className={`lg:col-span-2 ${isDarkMode ? 'bg-gray-800 border-gray-700' : ''}`}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Performance Metrics</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Combined view of key indicators\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <ResponsiveContainer width=\"100%\" height={300}>\n                <BarChart data={chartData}>\n                  <CartesianGrid \n                    strokeDasharray=\"3 3\" \n                    stroke={isDarkMode ? '#374151' : '#e5e7eb'}\n                  />\n                  <XAxis \n                    dataKey=\"date\" \n                    stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                    tick={{ fill: isDarkMode ? '#9ca3af' : '#6b7280' }}\n                    tickFormatter={(value) => new Date(value).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n                  />\n                  <YAxis \n                    stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                    tick={{ fill: isDarkMode ? '#9ca3af' : '#6b7280' }}\n                  />\n                  <Tooltip \n                    contentStyle={{\n                      backgroundColor: isDarkMode ? '#1f2937' : '#ffffff',\n                      border: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\n                      borderRadius: '8px',\n                      color: isDarkMode ? '#f3f4f6' : '#111827'\n                    }}\n                    labelStyle={{ color: isDarkMode ? '#f3f4f6' : '#111827' }}\n                    formatter={(value: number, name: string) => {\n                      if (name === 'revenue') return [`$${value.toLocaleString()}`, 'Revenue'];\n                      if (name === 'users') return [value.toLocaleString(), 'Users'];\n                      if (name === 'orders') return [value.toLocaleString(), 'Orders'];\n                      return [value, name];\n                    }}\n                    labelFormatter={(label) => new Date(label).toLocaleDateString('en-US', { \n                      month: 'long', \n                      day: 'numeric',\n                      year: 'numeric'\n                    })}\n                  />\n                  <Legend \n                    wrapperStyle={{ color: isDarkMode ? '#9ca3af' : '#6b7280' }}\n                    formatter={(value) => {\n                      if (value === 'revenue') return 'Revenue';\n                      if (value === 'users') return 'Users';\n                      if (value === 'orders') return 'Orders';\n                      return value;\n                    }}\n                  />\n                  <Bar \n                    dataKey=\"revenue\" \n                    fill=\"#3b82f6\" \n                    radius={[4, 4, 0, 0]}\n                    animationDuration={1000}\n                  />\n                  <Bar \n                    dataKey=\"users\" \n                    fill=\"#10b981\" \n                    radius={[4, 4, 0, 0]}\n                    animationDuration={1000}\n                  />\n                  <Bar \n                    dataKey=\"orders\" \n                    fill=\"#f59e0b\" \n                    radius={[4, 4, 0, 0]}\n                    animationDuration={1000}\n                  />\n                </BarChart>\n              </ResponsiveContainer>\n            </CardContent>\n          </Card>\n        </div>\n\n        <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n          <CardHeader>\n            <CardTitle className={isDarkMode ? 'text-white' : ''}>Top Products</CardTitle>\n            <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n              Best performing products by revenue\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              <div className=\"overflow-x-auto\">\n                <Table>\n                  <TableHeader>\n                    <TableRow className={isDarkMode ? 'border-gray-700' : ''}>\n                      <TableHead className={isDarkMode ? 'text-gray-300' : ''}>\n                        <button\n                          onClick={() => handleSort('product')}\n                          className=\"flex items-center gap-1 hover:text-primary transition-colors\"\n                        >\n                          Product\n                          <ArrowUpDown className=\"h-4 w-4\" />\n                        </button>\n                      </TableHead>\n                      <TableHead className={isDarkMode ? 'text-gray-300' : ''}>\n                        <button\n                          onClick={() => handleSort('sales')}\n                          className=\"flex items-center gap-1 hover:text-primary transition-colors\"\n                        >\n                          Sales\n                          <ArrowUpDown className=\"h-4 w-4\" />\n                        </button>\n                      </TableHead>\n                      <TableHead className={isDarkMode ? 'text-gray-300' : ''}>\n                        <button\n                          onClick={() => handleSort('revenue')}\n                          className=\"flex items-center gap-1 hover:text-primary transition-colors\"\n                        >\n                          Revenue\n                          <ArrowUpDown className=\"h-4 w-4\" />\n                        </button>\n                      </TableHead>\n                      <TableHead className={isDarkMode ? 'text-gray-300' : ''}>\n                        <button\n                          onClick={() => handleSort('status')}\n                          className=\"flex items-center gap-1 hover:text-primary transition-colors\"\n                        >\n                          Status\n                          <ArrowUpDown className=\"h-4 w-4\" />\n                        </button>\n                      </TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {paginatedData().map((row, index) => (\n                      <motion.tr\n                        key={row.id}\n                        initial={{ opacity: 0, y: 10 }}\n                        animate={{ opacity: 1, y: 0 }}\n                        transition={{ delay: index * 0.05 }}\n                        className={`border-b ${isDarkMode ? 'border-gray-700' : ''}`}\n                      >\n                        <TableCell className={`font-medium ${isDarkMode ? 'text-gray-200' : ''}`}>\n                          {row.product}\n                        </TableCell>\n                        <TableCell className={isDarkMode ? 'text-gray-300' : ''}>\n                          {row.sales.toLocaleString()}\n                        </TableCell>\n                        <TableCell className={isDarkMode ? 'text-gray-300' : ''}>\n                          ${row.revenue.toLocaleString()}\n                        </TableCell>\n                        <TableCell>\n                          <Badge \n                            variant=\"secondary\" \n                            className={getStatusColor(row.status)}\n                          >\n                            {row.status.charAt(0).toUpperCase() + row.status.slice(1)}\n                          </Badge>\n                        </TableCell>\n                      </motion.tr>\n                    ))}\n                  </TableBody>\n                </Table>\n              </div>\n\n              <div className=\"flex flex-col sm:flex-row items-center justify-between gap-4\">\n                <p className={`text-sm ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                  Showing {((currentPage - 1) * itemsPerPage) + 1} to {Math.min(currentPage * itemsPerPage, tableData.length)} of {tableData.length} products\n                </p>\n                \n                <div className=\"flex items-center gap-2\">\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => setCurrentPage(prev => Math.max(1, prev - 1))}\n                    disabled={currentPage === 1}\n                    className={isDarkMode ? 'border-gray-700' : ''}\n                  >\n                    <ChevronLeft className=\"h-4 w-4\" />\n                    Previous\n                  </Button>\n                  \n                  <div className=\"flex items-center gap-1\">\n                    {Array.from({ length: totalPages }, (_, i) => i + 1).map(page => (\n                      <Button\n                        key={page}\n                        variant={currentPage === page ? 'default' : 'outline'}\n                        size=\"sm\"\n                        onClick={() => setCurrentPage(page)}\n                        className={`w-8 h-8 p-0 ${isDarkMode && currentPage !== page ? 'border-gray-700' : ''}`}\n                      >\n                        {page}\n                      </Button>\n                    ))}\n                  </div>\n                  \n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => setCurrentPage(prev => Math.min(totalPages, prev + 1))}\n                    disabled={currentPage === totalPages}\n                    className={isDarkMode ? 'border-gray-700' : ''}\n                  >\n                    Next\n                    <ChevronRight className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 md:gap-6 mt-8\">\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Recent Activity</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {mockActivityData.map((activity, index) => {\n                  const getActivityIcon = () => {\n                    switch (activity.type) {\n                      case 'success':\n                        return <CheckCircle className=\"h-5 w-5 text-green-500\" />;\n                      case 'warning':\n                        return <AlertCircle className=\"h-5 w-5 text-yellow-500\" />;\n                      case 'info':\n                        return <UserPlus className=\"h-5 w-5 text-blue-500\" />;\n                      case 'order':\n                        return <Package className=\"h-5 w-5 text-purple-500\" />;\n                      default:\n                        return <CheckCircle className=\"h-5 w-5 text-gray-500\" />;\n                    }\n                  };\n\n                  return (\n                    <motion.div\n                      key={activity.id}\n                      initial={{ opacity: 0, x: -20 }}\n                      animate={{ opacity: 1, x: 0 }}\n                      transition={{ delay: index * 0.1, duration: 0.3 }}\n                      className=\"flex items-start gap-3 pb-4 border-b last:border-b-0 last:pb-0\"\n                      style={{ borderColor: isDarkMode ? '#374151' : '#e5e7eb' }}\n                    >\n                      <div className=\"mt-0.5\">\n                        {getActivityIcon()}\n                      </div>\n                      <div className=\"flex-1 min-w-0\">\n                        <p className={`text-sm ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>\n                          {activity.message}\n                        </p>\n                        <p className={`text-xs mt-1 ${isDarkMode ? 'text-gray-500' : 'text-gray-500'}`}>\n                          {activity.timestamp}\n                        </p>\n                      </div>\n                    </motion.div>\n                  );\n                })}\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Quick Stats</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {mockQuickStats.map((stat, index) => (\n                  <motion.div\n                    key={stat.id}\n                    initial={{ opacity: 0, x: -20 }}\n                    animate={{ opacity: 1, x: 0 }}\n                    transition={{ delay: index * 0.1 }}\n                    className={`p-4 rounded-lg border ${\n                      isDarkMode ? 'bg-gray-700/50 border-gray-600' : 'bg-gray-50 border-gray-200'\n                    }`}\n                  >\n                    <div className=\"flex items-start justify-between mb-3\">\n                      <div>\n                        <p className={`text-sm ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                          {stat.label}\n                        </p>\n                        <p className={`text-2xl font-bold mt-1 ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                          {stat.value}\n                        </p>\n                      </div>\n                      <div className={`flex items-center gap-1 px-2 py-1 rounded-full text-xs font-medium ${\n                        stat.change >= 0\n                          ? 'bg-green-100 text-green-700 dark:bg-green-900/30 dark:text-green-400'\n                          : 'bg-red-100 text-red-700 dark:bg-red-900/30 dark:text-red-400'\n                      }`}>\n                        {stat.change >= 0 ? (\n                          <TrendingUp className=\"h-3 w-3\" />\n                        ) : (\n                          <TrendingDown className=\"h-3 w-3\" />\n                        )}\n                        {Math.abs(stat.change)}%\n                      </div>\n                    </div>\n                    <div className=\"h-12\">\n                      <ResponsiveContainer width=\"100%\" height=\"100%\">\n                        <AreaChart data={stat.sparklineData}>\n                          <defs>\n                            <linearGradient id={`gradient-${stat.id}`} x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                              <stop\n                                offset=\"0%\"\n                                stopColor={stat.change >= 0 ? '#10b981' : '#ef4444'}\n                                stopOpacity={0.3}\n                              />\n                              <stop\n                                offset=\"100%\"\n                                stopColor={stat.change >= 0 ? '#10b981' : '#ef4444'}\n                                stopOpacity={0}\n                              />\n                            </linearGradient>\n                          </defs>\n                          <Area\n                            type=\"monotone\"\n                            dataKey=\"value\"\n                            stroke={stat.change >= 0 ? '#10b981' : '#ef4444'}\n                            strokeWidth={2}\n                            fill={`url(#gradient-${stat.id})`}\n                            isAnimationActive={true}\n                          />\n                        </AreaChart>\n                      </ResponsiveContainer>\n                    </div>\n                  </motion.div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Alerts</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-3\">\n                {mockAlerts.map((alert, index) => {\n                  const AlertIcon = getAlertIcon(alert.severity);\n                  const alertColor = getAlertColor(alert.severity, isDarkMode);\n                  const alertBgColor = getAlertBgColor(alert.severity, isDarkMode);\n\n                  return (\n                    <motion.div\n                      key={alert.id}\n                      initial={{ opacity: 0, x: -20 }}\n                      animate={{ opacity: 1, x: 0 }}\n                      transition={{ delay: index * 0.1 }}\n                      className={`p-3 rounded-lg ${alertBgColor} flex items-start gap-3 group relative`}\n                    >\n                      <AlertIcon className={`h-5 w-5 ${alertColor} flex-shrink-0 mt-0.5`} />\n                      <div className=\"flex-1 min-w-0\">\n                        <p className={`text-sm ${isDarkMode ? 'text-gray-200' : 'text-gray-900'}`}>\n                          {alert.message}\n                        </p>\n                        <p className={`text-xs mt-1 ${isDarkMode ? 'text-gray-500' : 'text-gray-500'}`}>\n                          {alert.timestamp}\n                        </p>\n                      </div>\n                      <button\n                        className={`opacity-0 group-hover:opacity-100 transition-opacity ${isDarkMode ? 'text-gray-400 hover:text-gray-200' : 'text-gray-400 hover:text-gray-600'}`}\n                        aria-label=\"Dismiss alert\"\n                      >\n                        <X className=\"h-4 w-4\" />\n                      </button>\n                    </motion.div>\n                  );\n                })}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}",
    "error": null,
    "elapsed_time": 84.36936211585999,
    "success": true
  }
}