{
  "prompt_id": "dashboard",
  "prompt_name": "Analytics Dashboard",
  "mode": "parallel",
  "run_number": 7,
  "timestamp": "2025-10-14T08:11:42.684254",
  "response_time": 94.37244153022766,
  "total_tokens": null,
  "response_content": "import { useState, useCallback } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Moon, Sun, RefreshCw } from 'lucide-react';\nimport { ArrowUpDown, ArrowUp, ArrowDown, ChevronLeft, ChevronRight } from 'lucide-react';\nimport { Badge } from '@/components/ui/badge';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\nimport { PieChart, Pie, Cell, ResponsiveContainer, Legend, Tooltip } from 'recharts';\nimport { TrendingUp, TrendingDown } from 'lucide-react';\nimport { AreaChart, Area, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';\nimport { TrendingUp, TrendingDown, DollarSign, Users, ShoppingCart, Target } from 'lucide-react';\nimport { motion } from 'framer-motion';\n\ninterface MetricData {\n  id: string;\n  label: string;\n  value: number;\n  change: number;\n  trend: 'up' | 'down';\n}\n\ninterface ChartDataPoint {\n  date: string;\n  revenue: number;\n  users: number;\n  orders: number;\n}\n\ninterface TableRow {\n  id: string;\n  product: string;\n  sales: number;\n  revenue: number;\n  status: 'active' | 'pending' | 'inactive';\n}\n\nconst mockMetrics: MetricData[] = [\n  { id: '1', label: 'Total Revenue', value: 45231, change: 12.5, trend: 'up' },\n  { id: '2', label: 'Active Users', value: 2350, change: 8.2, trend: 'up' },\n  { id: '3', label: 'Total Orders', value: 1543, change: -3.1, trend: 'down' },\n  { id: '4', label: 'Conversion Rate', value: 3.24, change: 5.7, trend: 'up' }\n];\n\nconst mockChartData: ChartDataPoint[] = [\n  { date: '2024-01-01', revenue: 12000, users: 450, orders: 230 },\n  { date: '2024-01-02', revenue: 15000, users: 520, orders: 280 },\n  { date: '2024-01-03', revenue: 13500, users: 490, orders: 250 },\n  { date: '2024-01-04', revenue: 18000, users: 610, orders: 320 },\n  { date: '2024-01-05', revenue: 16500, users: 580, orders: 295 },\n  { date: '2024-01-06', revenue: 20000, users: 680, orders: 350 },\n  { date: '2024-01-07', revenue: 22000, users: 720, orders: 380 }\n];\n\nconst mockTableData: TableRow[] = [\n  { id: '1', product: 'Premium Plan', sales: 234, revenue: 23400, status: 'active' },\n  { id: '2', product: 'Basic Plan', sales: 567, revenue: 11340, status: 'active' },\n  { id: '3', product: 'Enterprise Plan', sales: 89, revenue: 17800, status: 'active' },\n  { id: '4', product: 'Starter Plan', sales: 432, revenue: 4320, status: 'pending' },\n  { id: '5', product: 'Pro Plan', sales: 156, revenue: 15600, status: 'active' }\n];\nconst pieChartData = [\n  { name: 'Premium Plan', value: 234, color: '#3b82f6' },\n  { name: 'Basic Plan', value: 567, color: '#10b981' },\n  { name: 'Enterprise Plan', value: 89, color: '#f59e0b' },\n  { name: 'Starter Plan', value: 432, color: '#8b5cf6' },\n  { name: 'Pro Plan', value: 156, color: '#ec4899' }\n];\n\nexport default function AnalyticsDashboard() {\n  const [sortColumn, setSortColumn] = useState<keyof TableRow | null>(null);\n  const [sortDirection, setSortDirection] = useState<'asc' | 'desc'>('asc');\n  const [currentPage, setCurrentPage] = useState(1);\n  const itemsPerPage = 3;\n  const [isDarkMode, setIsDarkMode] = useState(false);\n  const [metrics, setMetrics] = useState<MetricData[]>(mockMetrics);\n  const [chartData, setChartData] = useState<ChartDataPoint[]>(mockChartData);\n  const [tableData, setTableData] = useState<TableRow[]>(mockTableData);\n  const [isRefreshing, setIsRefreshing] = useState(false);\n\n  const toggleDarkMode = useCallback(() => {\n    setIsDarkMode(prev => !prev);\n  }, []);\n\n  const [hoveredPoint, setHoveredPoint] = useState<number | null>(null);\n\n  const handleRefresh = useCallback(() => {\n    setIsRefreshing(true);\n    \n    setTimeout(() => {\n      // Generate updated metrics with random variations\n      const updatedMetrics = mockMetrics.map(metric => ({\n        ...metric,\n        value: metric.value + Math.floor(Math.random() * 200 - 100),\n        change: parseFloat((Math.random() * 20 - 5).toFixed(1)),\n        trend: Math.random() > 0.5 ? 'up' as const : 'down' as const\n      }));\n      \n      // Generate updated chart data with random variations\n      const updatedChartData = mockChartData.map(point => ({\n        ...point,\n        revenue: point.revenue + Math.floor(Math.random() * 4000 - 2000),\n        users: point.users + Math.floor(Math.random() * 100 - 50),\n        orders: point.orders + Math.floor(Math.random() * 50 - 25)\n      }));\n      \n      // Generate updated table data with random variations\n      const updatedTableData = mockTableData.map(row => ({\n        ...row,\n        sales: row.sales + Math.floor(Math.random() * 40 - 20),\n        revenue: row.revenue + Math.floor(Math.random() * 2000 - 1000)\n      }));\n      \n      setMetrics(updatedMetrics);\n      setChartData(updatedChartData);\n      setTableData(updatedTableData);\n      setIsRefreshing(false);\n    }, 1500);\n  }, []);\n  const handleSort = useCallback((column: keyof TableRow) => {\n    if (sortColumn === column) {\n      setSortDirection(prev => prev === 'asc' ? 'desc' : 'asc');\n    } else {\n      setSortColumn(column);\n      setSortDirection('asc');\n    }\n    setCurrentPage(1);\n  }, [sortColumn]);\n\n  const sortedData = useCallback(() => {\n    if (!sortColumn) return tableData;\n    \n    return [...tableData].sort((a, b) => {\n      const aValue = a[sortColumn];\n      const bValue = b[sortColumn];\n      \n      if (typeof aValue === 'number' && typeof bValue === 'number') {\n        return sortDirection === 'asc' ? aValue - bValue : bValue - aValue;\n      }\n      \n      if (typeof aValue === 'string' && typeof bValue === 'string') {\n        return sortDirection === 'asc' \n          ? aValue.localeCompare(bValue)\n          : bValue.localeCompare(aValue);\n      }\n      \n      return 0;\n    });\n  }, [tableData, sortColumn, sortDirection]);\n\n  const paginatedData = useCallback(() => {\n    const sorted = sortedData();\n    const startIndex = (currentPage - 1) * itemsPerPage;\n    const endIndex = startIndex + itemsPerPage;\n    return sorted.slice(startIndex, endIndex);\n  }, [sortedData, currentPage]);\n\n  const totalPages = Math.ceil(tableData.length / itemsPerPage);\n\n  const getSortIcon = (column: keyof TableRow) => {\n    if (sortColumn !== column) {\n      return <ArrowUpDown className=\"h-4 w-4 ml-1 inline-block opacity-50\" />;\n    }\n    return sortDirection === 'asc' \n      ? <ArrowUp className=\"h-4 w-4 ml-1 inline-block\" />\n      : <ArrowDown className=\"h-4 w-4 ml-1 inline-block\" />;\n  };\n\n  const getStatusBadge = (status: TableRow['status']) => {\n    const variants = {\n      active: 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200',\n      pending: 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200',\n      inactive: 'bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-200'\n    };\n    \n    return (\n      <Badge className={variants[status]} variant=\"secondary\">\n        {status.charAt(0).toUpperCase() + status.slice(1)}\n      </Badge>\n    );\n  };\n\n  return (\n    <div className={`min-h-screen ${isDarkMode ? 'dark bg-gray-900' : 'bg-gray-50'}`}>\n      <div className=\"container mx-auto p-4 md:p-6 lg:p-8\">\n        <div className=\"flex flex-col md:flex-row justify-between items-start md:items-center gap-4 mb-8\">\n          <div>\n            <h1 className={`text-3xl md:text-4xl font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n              Analytics Dashboard\n            </h1>\n            <p className={`mt-2 ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n              Real-time insights and performance metrics\n            </p>\n          </div>\n          \n          <div className=\"flex gap-2\">\n            <Button\n              variant=\"outline\"\n              size=\"icon\"\n              onClick={toggleDarkMode}\n              className={isDarkMode ? 'border-gray-700' : ''}\n            >\n              {isDarkMode ? <Sun className=\"h-5 w-5\" /> : <Moon className=\"h-5 w-5\" />}\n            </Button>\n            \n            <Button\n              variant=\"outline\"\n              onClick={handleRefresh}\n              disabled={isRefreshing}\n              className={isDarkMode ? 'border-gray-700' : ''}\n            >\n              <RefreshCw className={`h-4 w-4 mr-2 ${isRefreshing ? 'animate-spin' : ''}`} />\n              Refresh\n            </Button>\n          </div>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 md:gap-6 mb-8\">\n          {metrics.map((metric, index) => {\n            const Icon = metric.label.includes('Revenue') ? DollarSign :\n                        metric.label.includes('Users') ? Users :\n                        metric.label.includes('Orders') ? ShoppingCart : Target;\n            \n            const TrendIcon = metric.trend === 'up' ? TrendingUp : TrendingDown;\n            const trendColor = metric.trend === 'up' ? 'text-green-500' : 'text-red-500';\n            const trendBgColor = metric.trend === 'up' ? 'bg-green-50 dark:bg-green-900/20' : 'bg-red-50 dark:bg-red-900/20';\n\n            return (\n              <motion.div\n                key={metric.id}\n                initial={{ opacity: 0, y: 20 }}\n                animate={{ opacity: 1, y: 0 }}\n                transition={{ duration: 0.4, delay: index * 0.1 }}\n              >\n                <Card className={`${isDarkMode ? 'bg-gray-800 border-gray-700' : 'bg-white'} hover:shadow-lg transition-shadow duration-300`}>\n                  <CardHeader className=\"flex flex-row items-center justify-between pb-2\">\n                    <CardTitle className={`text-sm font-medium ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                      {metric.label}\n                    </CardTitle>\n                    <div className={`p-2 rounded-lg ${isDarkMode ? 'bg-gray-700' : 'bg-gray-100'}`}>\n                      <Icon className={`h-4 w-4 ${isDarkMode ? 'text-gray-300' : 'text-gray-600'}`} />\n                    </div>\n                  </CardHeader>\n                  <CardContent>\n                    <div className={`text-2xl font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                      {metric.label.includes('Revenue') ? `$${metric.value.toLocaleString()}` :\n                       metric.label.includes('Rate') ? `${metric.value}%` :\n                       metric.value.toLocaleString()}\n                    </div>\n                    <div className=\"flex items-center mt-2\">\n                      <div className={`flex items-center gap-1 px-2 py-1 rounded-full ${trendBgColor}`}>\n                        <TrendIcon className={`h-3 w-3 ${trendColor}`} />\n                        <span className={`text-xs font-medium ${trendColor}`}>\n                          {Math.abs(metric.change)}%\n                        </span>\n                      </div>\n                      <span className={`text-xs ml-2 ${isDarkMode ? 'text-gray-400' : 'text-gray-500'}`}>\n                        vs last period\n                      </span>\n                    </div>\n                  </CardContent>\n                </Card>\n              </motion.div>\n            );\n          })}\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-4 md:gap-6 mb-8\">\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Revenue Overview</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Daily revenue trends\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"relative w-full h-[300px] md:h-[350px]\">\n                <svg\n                  className=\"w-full h-full\"\n                  viewBox=\"0 0 800 300\"\n                  preserveAspectRatio=\"xMidYMid meet\"\n                >\n                  {/* Grid lines */}\n                  <g className=\"grid-lines\">\n                    {[0, 1, 2, 3, 4].map((i) => (\n                      <line\n                        key={i}\n                        x1=\"50\"\n                        y1={50 + i * 50}\n                        x2=\"750\"\n                        y2={50 + i * 50}\n                        stroke={isDarkMode ? '#374151' : '#e5e7eb'}\n                        strokeWidth=\"1\"\n                      />\n                    ))}\n                  </g>\n\n                  {/* Y-axis labels */}\n                  <g className=\"y-axis-labels\">\n                    {[0, 1, 2, 3, 4].map((i) => {\n                      const value = 25000 - i * 5000;\n                      return (\n                        <text\n                          key={i}\n                          x=\"40\"\n                          y={55 + i * 50}\n                          textAnchor=\"end\"\n                          className={`text-xs ${isDarkMode ? 'fill-gray-400' : 'fill-gray-600'}`}\n                        >\n                          ${value / 1000}k\n                        </text>\n                      );\n                    })}\n                  </g>\n\n                  {/* Line path */}\n                  <path\n                    d={chartData\n                      .map((point, index) => {\n                        const x = 50 + (index * 700) / (chartData.length - 1);\n                        const y = 250 - (point.revenue / 25000) * 200;\n                        return `${index === 0 ? 'M' : 'L'} ${x} ${y}`;\n                      })\n                      .join(' ')}\n                    fill=\"none\"\n                    stroke={isDarkMode ? '#60a5fa' : '#3b82f6'}\n                    strokeWidth=\"3\"\n                    strokeLinecap=\"round\"\n                    strokeLinejoin=\"round\"\n                    className=\"transition-all duration-300\"\n                  />\n\n                  {/* Gradient fill under line */}\n                  <defs>\n                    <linearGradient id=\"revenueGradient\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                      <stop offset=\"0%\" stopColor={isDarkMode ? '#60a5fa' : '#3b82f6'} stopOpacity=\"0.3\" />\n                      <stop offset=\"100%\" stopColor={isDarkMode ? '#60a5fa' : '#3b82f6'} stopOpacity=\"0\" />\n                    </linearGradient>\n                  </defs>\n                  <path\n                    d={\n                      chartData\n                        .map((point, index) => {\n                          const x = 50 + (index * 700) / (chartData.length - 1);\n                          const y = 250 - (point.revenue / 25000) * 200;\n                          return `${index === 0 ? 'M' : 'L'} ${x} ${y}`;\n                        })\n                        .join(' ') + ' L 750 250 L 50 250 Z'\n                    }\n                    fill=\"url(#revenueGradient)\"\n                  />\n\n                  {/* Data points */}\n                  {chartData.map((point, index) => {\n                    const x = 50 + (index * 700) / (chartData.length - 1);\n                    const y = 250 - (point.revenue / 25000) * 200;\n                    const isHovered = hoveredPoint === index;\n\n                    return (\n                      <g key={index}>\n                        <circle\n                          cx={x}\n                          cy={y}\n                          r={isHovered ? 6 : 4}\n                          fill={isDarkMode ? '#1f2937' : '#ffffff'}\n                          stroke={isDarkMode ? '#60a5fa' : '#3b82f6'}\n                          strokeWidth=\"2\"\n                          className=\"transition-all duration-200 cursor-pointer\"\n                          onMouseEnter={() => setHoveredPoint(index)}\n                          onMouseLeave={() => setHoveredPoint(null)}\n                        />\n                        \n                        {/* Tooltip */}\n                        {isHovered && (\n                          <g>\n                            <rect\n                              x={x - 60}\n                              y={y - 70}\n                              width=\"120\"\n                              height=\"60\"\n                              rx=\"6\"\n                              fill={isDarkMode ? '#1f2937' : '#ffffff'}\n                              stroke={isDarkMode ? '#374151' : '#e5e7eb'}\n                              strokeWidth=\"1\"\n                              className=\"drop-shadow-lg\"\n                            />\n                            <text\n                              x={x}\n                              y={y - 48}\n                              textAnchor=\"middle\"\n                              className={`text-xs font-semibold ${isDarkMode ? 'fill-white' : 'fill-gray-900'}`}\n                            >\n                              {new Date(point.date).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n                            </text>\n                            <text\n                              x={x}\n                              y={y - 32}\n                              textAnchor=\"middle\"\n                              className={`text-xs ${isDarkMode ? 'fill-gray-400' : 'fill-gray-600'}`}\n                            >\n                              Revenue\n                            </text>\n                            <text\n                              x={x}\n                              y={y - 18}\n                              textAnchor=\"middle\"\n                              className={`text-sm font-bold ${isDarkMode ? 'fill-blue-400' : 'fill-blue-600'}`}\n                            >\n                              ${point.revenue.toLocaleString()}\n                            </text>\n                          </g>\n                        )}\n                      </g>\n                    );\n                  })}\n\n                  {/* X-axis labels */}\n                  <g className=\"x-axis-labels\">\n                    {chartData.map((point, index) => {\n                      const x = 50 + (index * 700) / (chartData.length - 1);\n                      return (\n                        <text\n                          key={index}\n                          x={x}\n                          y=\"275\"\n                          textAnchor=\"middle\"\n                          className={`text-xs ${isDarkMode ? 'fill-gray-400' : 'fill-gray-600'}`}\n                        >\n                          {new Date(point.date).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n                        </text>\n                      );\n                    })}\n                  </g>\n                </svg>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>User Growth</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Active users over time\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"h-[300px] w-full\">\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <AreaChart\n                    data={chartData}\n                    margin={{ top: 10, right: 10, left: 0, bottom: 0 }}\n                  >\n                    <defs>\n                      <linearGradient id=\"userGradient\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                        <stop offset=\"5%\" stopColor=\"#8b5cf6\" stopOpacity={0.8} />\n                        <stop offset=\"95%\" stopColor=\"#8b5cf6\" stopOpacity={0.1} />\n                      </linearGradient>\n                    </defs>\n                    <CartesianGrid \n                      strokeDasharray=\"3 3\" \n                      stroke={isDarkMode ? '#374151' : '#e5e7eb'}\n                      vertical={false}\n                    />\n                    <XAxis\n                      dataKey=\"date\"\n                      tickFormatter={(value) => new Date(value).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n                      stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                      fontSize={12}\n                      tickLine={false}\n                    />\n                    <YAxis\n                      stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                      fontSize={12}\n                      tickLine={false}\n                      axisLine={false}\n                    />\n                    <Tooltip\n                      contentStyle={{\n                        backgroundColor: isDarkMode ? '#1f2937' : '#ffffff',\n                        border: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\n                        borderRadius: '8px',\n                        color: isDarkMode ? '#ffffff' : '#000000'\n                      }}\n                      labelFormatter={(value) => new Date(value).toLocaleDateString('en-US', { month: 'long', day: 'numeric', year: 'numeric' })}\n                      formatter={(value: number) => [value.toLocaleString(), 'Users']}\n                    />\n                    <Area\n                      type=\"monotone\"\n                      dataKey=\"users\"\n                      stroke=\"#8b5cf6\"\n                      strokeWidth={2}\n                      fill=\"url(#userGradient)\"\n                      animationDuration={1000}\n                      animationEasing=\"ease-in-out\"\n                    />\n                  </AreaChart>\n                </ResponsiveContainer>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-4 md:gap-6 mb-8\">\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Orders Distribution</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                By product category\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"h-[300px]\">\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <PieChart>\n                    <Pie\n                      data={pieChartData}\n                      cx=\"50%\"\n                      cy=\"50%\"\n                      labelLine={false}\n                      label={({ name, percent }) => `${name}: ${(percent * 100).toFixed(0)}%`}\n                      outerRadius={80}\n                      fill=\"#8884d8\"\n                      dataKey=\"value\"\n                    >\n                      {pieChartData.map((entry, index) => (\n                        <Cell key={`cell-${index}`} fill={entry.color} />\n                      ))}\n                    </Pie>\n                    <Tooltip\n                      contentStyle={{\n                        backgroundColor: isDarkMode ? '#1f2937' : '#ffffff',\n                        border: isDarkMode ? '1px solid #374151' : '1px solid #e5e7eb',\n                        borderRadius: '6px',\n                        color: isDarkMode ? '#ffffff' : '#000000'\n                      }}\n                      formatter={(value: number) => [`${value} orders`, 'Orders']}\n                    />\n                    <Legend\n                      verticalAlign=\"bottom\"\n                      height={36}\n                      iconType=\"circle\"\n                      wrapperStyle={{\n                        color: isDarkMode ? '#9ca3af' : '#6b7280'\n                      }}\n                    />\n                  </PieChart>\n                </ResponsiveContainer>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className={`lg:col-span-2 ${isDarkMode ? 'bg-gray-800 border-gray-700' : ''}`}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Performance Metrics</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Combined view of key indicators\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <ResponsiveContainer width=\"100%\" height={300}>\n                <BarChart data={chartData}>\n                  <CartesianGrid \n                    strokeDasharray=\"3 3\" \n                    stroke={isDarkMode ? '#374151' : '#e5e7eb'}\n                  />\n                  <XAxis \n                    dataKey=\"date\" \n                    stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                    tick={{ fill: isDarkMode ? '#9ca3af' : '#6b7280' }}\n                    tickFormatter={(value) => new Date(value).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n                  />\n                  <YAxis \n                    stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                    tick={{ fill: isDarkMode ? '#9ca3af' : '#6b7280' }}\n                  />\n                  <Tooltip \n                    contentStyle={{\n                      backgroundColor: isDarkMode ? '#1f2937' : '#ffffff',\n                      border: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\n                      borderRadius: '8px',\n                      color: isDarkMode ? '#f3f4f6' : '#111827'\n                    }}\n                    labelStyle={{ color: isDarkMode ? '#f3f4f6' : '#111827' }}\n                    formatter={(value: number) => value.toLocaleString()}\n                    labelFormatter={(label) => new Date(label).toLocaleDateString('en-US', { month: 'long', day: 'numeric', year: 'numeric' })}\n                  />\n                  <Legend \n                    wrapperStyle={{ color: isDarkMode ? '#9ca3af' : '#6b7280' }}\n                  />\n                  <Bar \n                    dataKey=\"revenue\" \n                    fill=\"#3b82f6\" \n                    radius={[4, 4, 0, 0]}\n                    name=\"Revenue ($)\"\n                  />\n                  <Bar \n                    dataKey=\"users\" \n                    fill=\"#10b981\" \n                    radius={[4, 4, 0, 0]}\n                    name=\"Users\"\n                  />\n                  <Bar \n                    dataKey=\"orders\" \n                    fill=\"#f59e0b\" \n                    radius={[4, 4, 0, 0]}\n                    name=\"Orders\"\n                  />\n                </BarChart>\n              </ResponsiveContainer>\n            </CardContent>\n          </Card>\n        </div>\n\n        <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n          <CardHeader>\n            <CardTitle className={isDarkMode ? 'text-white' : ''}>Top Products</CardTitle>\n            <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n              Best performing products by revenue\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {/* Desktop Table */}\n              <div className=\"hidden md:block overflow-x-auto\">\n                <Table>\n                  <TableHeader>\n                    <TableRow className={isDarkMode ? 'border-gray-700' : ''}>\n                      <TableHead \n                        className={`cursor-pointer ${isDarkMode ? 'text-gray-300' : ''}`}\n                        onClick={() => handleSort('product')}\n                      >\n                        Product {getSortIcon('product')}\n                      </TableHead>\n                      <TableHead \n                        className={`cursor-pointer ${isDarkMode ? 'text-gray-300' : ''}`}\n                        onClick={() => handleSort('sales')}\n                      >\n                        Sales {getSortIcon('sales')}\n                      </TableHead>\n                      <TableHead \n                        className={`cursor-pointer ${isDarkMode ? 'text-gray-300' : ''}`}\n                        onClick={() => handleSort('revenue')}\n                      >\n                        Revenue {getSortIcon('revenue')}\n                      </TableHead>\n                      <TableHead \n                        className={`cursor-pointer ${isDarkMode ? 'text-gray-300' : ''}`}\n                        onClick={() => handleSort('status')}\n                      >\n                        Status {getSortIcon('status')}\n                      </TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {paginatedData().map((row) => (\n                      <TableRow \n                        key={row.id}\n                        className={isDarkMode ? 'border-gray-700 hover:bg-gray-700' : 'hover:bg-gray-50'}\n                      >\n                        <TableCell className={`font-medium ${isDarkMode ? 'text-white' : ''}`}>\n                          {row.product}\n                        </TableCell>\n                        <TableCell className={isDarkMode ? 'text-gray-300' : ''}>\n                          {row.sales.toLocaleString()}\n                        </TableCell>\n                        <TableCell className={isDarkMode ? 'text-gray-300' : ''}>\n                          ${row.revenue.toLocaleString()}\n                        </TableCell>\n                        <TableCell>\n                          {getStatusBadge(row.status)}\n                        </TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              </div>\n\n              {/* Mobile Cards */}\n              <div className=\"md:hidden space-y-3\">\n                {paginatedData().map((row) => (\n                  <div \n                    key={row.id}\n                    className={`p-4 rounded-lg border ${\n                      isDarkMode \n                        ? 'bg-gray-700 border-gray-600' \n                        : 'bg-white border-gray-200'\n                    }`}\n                  >\n                    <div className=\"flex justify-between items-start mb-3\">\n                      <h3 className={`font-semibold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                        {row.product}\n                      </h3>\n                      {getStatusBadge(row.status)}\n                    </div>\n                    <div className=\"grid grid-cols-2 gap-2\">\n                      <div>\n                        <p className={`text-sm ${isDarkMode ? 'text-gray-400' : 'text-gray-500'}`}>\n                          Sales\n                        </p>\n                        <p className={`font-medium ${isDarkMode ? 'text-gray-200' : 'text-gray-900'}`}>\n                          {row.sales.toLocaleString()}\n                        </p>\n                      </div>\n                      <div>\n                        <p className={`text-sm ${isDarkMode ? 'text-gray-400' : 'text-gray-500'}`}>\n                          Revenue\n                        </p>\n                        <p className={`font-medium ${isDarkMode ? 'text-gray-200' : 'text-gray-900'}`}>\n                          ${row.revenue.toLocaleString()}\n                        </p>\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n\n              {/* Pagination */}\n              <div className=\"flex flex-col sm:flex-row items-center justify-between gap-4 pt-4\">\n                <p className={`text-sm ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                  Showing {((currentPage - 1) * itemsPerPage) + 1} to {Math.min(currentPage * itemsPerPage, tableData.length)} of {tableData.length} products\n                </p>\n                \n                <div className=\"flex items-center gap-2\">\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => setCurrentPage(prev => Math.max(1, prev - 1))}\n                    disabled={currentPage === 1}\n                    className={isDarkMode ? 'border-gray-700' : ''}\n                  >\n                    <ChevronLeft className=\"h-4 w-4\" />\n                    Previous\n                  </Button>\n                  \n                  <div className=\"flex gap-1\">\n                    {Array.from({ length: totalPages }, (_, i) => i + 1).map((page) => (\n                      <Button\n                        key={page}\n                        variant={currentPage === page ? 'default' : 'outline'}\n                        size=\"sm\"\n                        onClick={() => setCurrentPage(page)}\n                        className={`w-8 h-8 p-0 ${\n                          isDarkMode && currentPage !== page ? 'border-gray-700' : ''\n                        }`}\n                      >\n                        {page}\n                      </Button>\n                    ))}\n                  </div>\n                  \n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => setCurrentPage(prev => Math.min(totalPages, prev + 1))}\n                    disabled={currentPage === totalPages}\n                    className={isDarkMode ? 'border-gray-700' : ''}\n                  >\n                    Next\n                    <ChevronRight className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 md:gap-6 mt-8\">\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>System Status</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Live monitoring\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"flex items-center gap-3\">\n                <div className=\"relative\">\n                  <div className=\"h-3 w-3 bg-green-500 rounded-full\"></div>\n                  <div className=\"absolute inset-0 h-3 w-3 bg-green-500 rounded-full animate-ping\"></div>\n                </div>\n                <div>\n                  <p className={`text-sm font-medium ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                    All Systems Operational\n                  </p>\n                  <p className={`text-xs ${isDarkMode ? 'text-gray-400' : 'text-gray-500'}`}>\n                    Last updated: {new Date().toLocaleTimeString()}\n                  </p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Data Sync</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Real-time synchronization\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"flex items-center gap-3\">\n                <div className=\"relative\">\n                  <div className=\"h-3 w-3 bg-blue-500 rounded-full\"></div>\n                  <div className=\"absolute inset-0 h-3 w-3 bg-blue-500 rounded-full animate-ping\"></div>\n                </div>\n                <div>\n                  <p className={`text-sm font-medium ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                    Syncing Data\n                  </p>\n                  <p className={`text-xs ${isDarkMode ? 'text-gray-400' : 'text-gray-500'}`}>\n                    Last sync: {new Date(Date.now() - 5000).toLocaleTimeString()}\n                  </p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>API Status</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Connection health\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"flex items-center gap-3\">\n                <div className=\"relative\">\n                  <div className=\"h-3 w-3 bg-green-500 rounded-full\"></div>\n                  <div className=\"absolute inset-0 h-3 w-3 bg-green-500 rounded-full animate-ping\"></div>\n                </div>\n                <div>\n                  <p className={`text-sm font-medium ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                    Connected\n                  </p>\n                  <p className={`text-xs ${isDarkMode ? 'text-gray-400' : 'text-gray-500'}`}>\n                    Response time: 45ms\n                  </p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}",
  "error": null,
  "overall_score": 65,
  "code_quality_score": 16,
  "architecture_score": 14,
  "performance_score": 17,
  "accessibility_score": 18,
  "metadata": {
    "document_id": "eval_room_cb13a9903ab5",
    "prompt_category": "intermediate",
    "prompt_complexity": 6.0
  },
  "raw_response": {
    "document_id": "eval_room_cb13a9903ab5",
    "mode": "parallel",
    "prompt": "Generate an analytics dashboard page with charts, data tables, real-time updates, dark mode, and responsive design",
    "content": "import { useState, useCallback } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Moon, Sun, RefreshCw } from 'lucide-react';\nimport { ArrowUpDown, ArrowUp, ArrowDown, ChevronLeft, ChevronRight } from 'lucide-react';\nimport { Badge } from '@/components/ui/badge';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\nimport { PieChart, Pie, Cell, ResponsiveContainer, Legend, Tooltip } from 'recharts';\nimport { TrendingUp, TrendingDown } from 'lucide-react';\nimport { AreaChart, Area, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';\nimport { TrendingUp, TrendingDown, DollarSign, Users, ShoppingCart, Target } from 'lucide-react';\nimport { motion } from 'framer-motion';\n\ninterface MetricData {\n  id: string;\n  label: string;\n  value: number;\n  change: number;\n  trend: 'up' | 'down';\n}\n\ninterface ChartDataPoint {\n  date: string;\n  revenue: number;\n  users: number;\n  orders: number;\n}\n\ninterface TableRow {\n  id: string;\n  product: string;\n  sales: number;\n  revenue: number;\n  status: 'active' | 'pending' | 'inactive';\n}\n\nconst mockMetrics: MetricData[] = [\n  { id: '1', label: 'Total Revenue', value: 45231, change: 12.5, trend: 'up' },\n  { id: '2', label: 'Active Users', value: 2350, change: 8.2, trend: 'up' },\n  { id: '3', label: 'Total Orders', value: 1543, change: -3.1, trend: 'down' },\n  { id: '4', label: 'Conversion Rate', value: 3.24, change: 5.7, trend: 'up' }\n];\n\nconst mockChartData: ChartDataPoint[] = [\n  { date: '2024-01-01', revenue: 12000, users: 450, orders: 230 },\n  { date: '2024-01-02', revenue: 15000, users: 520, orders: 280 },\n  { date: '2024-01-03', revenue: 13500, users: 490, orders: 250 },\n  { date: '2024-01-04', revenue: 18000, users: 610, orders: 320 },\n  { date: '2024-01-05', revenue: 16500, users: 580, orders: 295 },\n  { date: '2024-01-06', revenue: 20000, users: 680, orders: 350 },\n  { date: '2024-01-07', revenue: 22000, users: 720, orders: 380 }\n];\n\nconst mockTableData: TableRow[] = [\n  { id: '1', product: 'Premium Plan', sales: 234, revenue: 23400, status: 'active' },\n  { id: '2', product: 'Basic Plan', sales: 567, revenue: 11340, status: 'active' },\n  { id: '3', product: 'Enterprise Plan', sales: 89, revenue: 17800, status: 'active' },\n  { id: '4', product: 'Starter Plan', sales: 432, revenue: 4320, status: 'pending' },\n  { id: '5', product: 'Pro Plan', sales: 156, revenue: 15600, status: 'active' }\n];\nconst pieChartData = [\n  { name: 'Premium Plan', value: 234, color: '#3b82f6' },\n  { name: 'Basic Plan', value: 567, color: '#10b981' },\n  { name: 'Enterprise Plan', value: 89, color: '#f59e0b' },\n  { name: 'Starter Plan', value: 432, color: '#8b5cf6' },\n  { name: 'Pro Plan', value: 156, color: '#ec4899' }\n];\n\nexport default function AnalyticsDashboard() {\n  const [sortColumn, setSortColumn] = useState<keyof TableRow | null>(null);\n  const [sortDirection, setSortDirection] = useState<'asc' | 'desc'>('asc');\n  const [currentPage, setCurrentPage] = useState(1);\n  const itemsPerPage = 3;\n  const [isDarkMode, setIsDarkMode] = useState(false);\n  const [metrics, setMetrics] = useState<MetricData[]>(mockMetrics);\n  const [chartData, setChartData] = useState<ChartDataPoint[]>(mockChartData);\n  const [tableData, setTableData] = useState<TableRow[]>(mockTableData);\n  const [isRefreshing, setIsRefreshing] = useState(false);\n\n  const toggleDarkMode = useCallback(() => {\n    setIsDarkMode(prev => !prev);\n  }, []);\n\n  const [hoveredPoint, setHoveredPoint] = useState<number | null>(null);\n\n  const handleRefresh = useCallback(() => {\n    setIsRefreshing(true);\n    \n    setTimeout(() => {\n      // Generate updated metrics with random variations\n      const updatedMetrics = mockMetrics.map(metric => ({\n        ...metric,\n        value: metric.value + Math.floor(Math.random() * 200 - 100),\n        change: parseFloat((Math.random() * 20 - 5).toFixed(1)),\n        trend: Math.random() > 0.5 ? 'up' as const : 'down' as const\n      }));\n      \n      // Generate updated chart data with random variations\n      const updatedChartData = mockChartData.map(point => ({\n        ...point,\n        revenue: point.revenue + Math.floor(Math.random() * 4000 - 2000),\n        users: point.users + Math.floor(Math.random() * 100 - 50),\n        orders: point.orders + Math.floor(Math.random() * 50 - 25)\n      }));\n      \n      // Generate updated table data with random variations\n      const updatedTableData = mockTableData.map(row => ({\n        ...row,\n        sales: row.sales + Math.floor(Math.random() * 40 - 20),\n        revenue: row.revenue + Math.floor(Math.random() * 2000 - 1000)\n      }));\n      \n      setMetrics(updatedMetrics);\n      setChartData(updatedChartData);\n      setTableData(updatedTableData);\n      setIsRefreshing(false);\n    }, 1500);\n  }, []);\n  const handleSort = useCallback((column: keyof TableRow) => {\n    if (sortColumn === column) {\n      setSortDirection(prev => prev === 'asc' ? 'desc' : 'asc');\n    } else {\n      setSortColumn(column);\n      setSortDirection('asc');\n    }\n    setCurrentPage(1);\n  }, [sortColumn]);\n\n  const sortedData = useCallback(() => {\n    if (!sortColumn) return tableData;\n    \n    return [...tableData].sort((a, b) => {\n      const aValue = a[sortColumn];\n      const bValue = b[sortColumn];\n      \n      if (typeof aValue === 'number' && typeof bValue === 'number') {\n        return sortDirection === 'asc' ? aValue - bValue : bValue - aValue;\n      }\n      \n      if (typeof aValue === 'string' && typeof bValue === 'string') {\n        return sortDirection === 'asc' \n          ? aValue.localeCompare(bValue)\n          : bValue.localeCompare(aValue);\n      }\n      \n      return 0;\n    });\n  }, [tableData, sortColumn, sortDirection]);\n\n  const paginatedData = useCallback(() => {\n    const sorted = sortedData();\n    const startIndex = (currentPage - 1) * itemsPerPage;\n    const endIndex = startIndex + itemsPerPage;\n    return sorted.slice(startIndex, endIndex);\n  }, [sortedData, currentPage]);\n\n  const totalPages = Math.ceil(tableData.length / itemsPerPage);\n\n  const getSortIcon = (column: keyof TableRow) => {\n    if (sortColumn !== column) {\n      return <ArrowUpDown className=\"h-4 w-4 ml-1 inline-block opacity-50\" />;\n    }\n    return sortDirection === 'asc' \n      ? <ArrowUp className=\"h-4 w-4 ml-1 inline-block\" />\n      : <ArrowDown className=\"h-4 w-4 ml-1 inline-block\" />;\n  };\n\n  const getStatusBadge = (status: TableRow['status']) => {\n    const variants = {\n      active: 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200',\n      pending: 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200',\n      inactive: 'bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-200'\n    };\n    \n    return (\n      <Badge className={variants[status]} variant=\"secondary\">\n        {status.charAt(0).toUpperCase() + status.slice(1)}\n      </Badge>\n    );\n  };\n\n  return (\n    <div className={`min-h-screen ${isDarkMode ? 'dark bg-gray-900' : 'bg-gray-50'}`}>\n      <div className=\"container mx-auto p-4 md:p-6 lg:p-8\">\n        <div className=\"flex flex-col md:flex-row justify-between items-start md:items-center gap-4 mb-8\">\n          <div>\n            <h1 className={`text-3xl md:text-4xl font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n              Analytics Dashboard\n            </h1>\n            <p className={`mt-2 ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n              Real-time insights and performance metrics\n            </p>\n          </div>\n          \n          <div className=\"flex gap-2\">\n            <Button\n              variant=\"outline\"\n              size=\"icon\"\n              onClick={toggleDarkMode}\n              className={isDarkMode ? 'border-gray-700' : ''}\n            >\n              {isDarkMode ? <Sun className=\"h-5 w-5\" /> : <Moon className=\"h-5 w-5\" />}\n            </Button>\n            \n            <Button\n              variant=\"outline\"\n              onClick={handleRefresh}\n              disabled={isRefreshing}\n              className={isDarkMode ? 'border-gray-700' : ''}\n            >\n              <RefreshCw className={`h-4 w-4 mr-2 ${isRefreshing ? 'animate-spin' : ''}`} />\n              Refresh\n            </Button>\n          </div>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 md:gap-6 mb-8\">\n          {metrics.map((metric, index) => {\n            const Icon = metric.label.includes('Revenue') ? DollarSign :\n                        metric.label.includes('Users') ? Users :\n                        metric.label.includes('Orders') ? ShoppingCart : Target;\n            \n            const TrendIcon = metric.trend === 'up' ? TrendingUp : TrendingDown;\n            const trendColor = metric.trend === 'up' ? 'text-green-500' : 'text-red-500';\n            const trendBgColor = metric.trend === 'up' ? 'bg-green-50 dark:bg-green-900/20' : 'bg-red-50 dark:bg-red-900/20';\n\n            return (\n              <motion.div\n                key={metric.id}\n                initial={{ opacity: 0, y: 20 }}\n                animate={{ opacity: 1, y: 0 }}\n                transition={{ duration: 0.4, delay: index * 0.1 }}\n              >\n                <Card className={`${isDarkMode ? 'bg-gray-800 border-gray-700' : 'bg-white'} hover:shadow-lg transition-shadow duration-300`}>\n                  <CardHeader className=\"flex flex-row items-center justify-between pb-2\">\n                    <CardTitle className={`text-sm font-medium ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                      {metric.label}\n                    </CardTitle>\n                    <div className={`p-2 rounded-lg ${isDarkMode ? 'bg-gray-700' : 'bg-gray-100'}`}>\n                      <Icon className={`h-4 w-4 ${isDarkMode ? 'text-gray-300' : 'text-gray-600'}`} />\n                    </div>\n                  </CardHeader>\n                  <CardContent>\n                    <div className={`text-2xl font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                      {metric.label.includes('Revenue') ? `$${metric.value.toLocaleString()}` :\n                       metric.label.includes('Rate') ? `${metric.value}%` :\n                       metric.value.toLocaleString()}\n                    </div>\n                    <div className=\"flex items-center mt-2\">\n                      <div className={`flex items-center gap-1 px-2 py-1 rounded-full ${trendBgColor}`}>\n                        <TrendIcon className={`h-3 w-3 ${trendColor}`} />\n                        <span className={`text-xs font-medium ${trendColor}`}>\n                          {Math.abs(metric.change)}%\n                        </span>\n                      </div>\n                      <span className={`text-xs ml-2 ${isDarkMode ? 'text-gray-400' : 'text-gray-500'}`}>\n                        vs last period\n                      </span>\n                    </div>\n                  </CardContent>\n                </Card>\n              </motion.div>\n            );\n          })}\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-4 md:gap-6 mb-8\">\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Revenue Overview</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Daily revenue trends\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"relative w-full h-[300px] md:h-[350px]\">\n                <svg\n                  className=\"w-full h-full\"\n                  viewBox=\"0 0 800 300\"\n                  preserveAspectRatio=\"xMidYMid meet\"\n                >\n                  {/* Grid lines */}\n                  <g className=\"grid-lines\">\n                    {[0, 1, 2, 3, 4].map((i) => (\n                      <line\n                        key={i}\n                        x1=\"50\"\n                        y1={50 + i * 50}\n                        x2=\"750\"\n                        y2={50 + i * 50}\n                        stroke={isDarkMode ? '#374151' : '#e5e7eb'}\n                        strokeWidth=\"1\"\n                      />\n                    ))}\n                  </g>\n\n                  {/* Y-axis labels */}\n                  <g className=\"y-axis-labels\">\n                    {[0, 1, 2, 3, 4].map((i) => {\n                      const value = 25000 - i * 5000;\n                      return (\n                        <text\n                          key={i}\n                          x=\"40\"\n                          y={55 + i * 50}\n                          textAnchor=\"end\"\n                          className={`text-xs ${isDarkMode ? 'fill-gray-400' : 'fill-gray-600'}`}\n                        >\n                          ${value / 1000}k\n                        </text>\n                      );\n                    })}\n                  </g>\n\n                  {/* Line path */}\n                  <path\n                    d={chartData\n                      .map((point, index) => {\n                        const x = 50 + (index * 700) / (chartData.length - 1);\n                        const y = 250 - (point.revenue / 25000) * 200;\n                        return `${index === 0 ? 'M' : 'L'} ${x} ${y}`;\n                      })\n                      .join(' ')}\n                    fill=\"none\"\n                    stroke={isDarkMode ? '#60a5fa' : '#3b82f6'}\n                    strokeWidth=\"3\"\n                    strokeLinecap=\"round\"\n                    strokeLinejoin=\"round\"\n                    className=\"transition-all duration-300\"\n                  />\n\n                  {/* Gradient fill under line */}\n                  <defs>\n                    <linearGradient id=\"revenueGradient\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                      <stop offset=\"0%\" stopColor={isDarkMode ? '#60a5fa' : '#3b82f6'} stopOpacity=\"0.3\" />\n                      <stop offset=\"100%\" stopColor={isDarkMode ? '#60a5fa' : '#3b82f6'} stopOpacity=\"0\" />\n                    </linearGradient>\n                  </defs>\n                  <path\n                    d={\n                      chartData\n                        .map((point, index) => {\n                          const x = 50 + (index * 700) / (chartData.length - 1);\n                          const y = 250 - (point.revenue / 25000) * 200;\n                          return `${index === 0 ? 'M' : 'L'} ${x} ${y}`;\n                        })\n                        .join(' ') + ' L 750 250 L 50 250 Z'\n                    }\n                    fill=\"url(#revenueGradient)\"\n                  />\n\n                  {/* Data points */}\n                  {chartData.map((point, index) => {\n                    const x = 50 + (index * 700) / (chartData.length - 1);\n                    const y = 250 - (point.revenue / 25000) * 200;\n                    const isHovered = hoveredPoint === index;\n\n                    return (\n                      <g key={index}>\n                        <circle\n                          cx={x}\n                          cy={y}\n                          r={isHovered ? 6 : 4}\n                          fill={isDarkMode ? '#1f2937' : '#ffffff'}\n                          stroke={isDarkMode ? '#60a5fa' : '#3b82f6'}\n                          strokeWidth=\"2\"\n                          className=\"transition-all duration-200 cursor-pointer\"\n                          onMouseEnter={() => setHoveredPoint(index)}\n                          onMouseLeave={() => setHoveredPoint(null)}\n                        />\n                        \n                        {/* Tooltip */}\n                        {isHovered && (\n                          <g>\n                            <rect\n                              x={x - 60}\n                              y={y - 70}\n                              width=\"120\"\n                              height=\"60\"\n                              rx=\"6\"\n                              fill={isDarkMode ? '#1f2937' : '#ffffff'}\n                              stroke={isDarkMode ? '#374151' : '#e5e7eb'}\n                              strokeWidth=\"1\"\n                              className=\"drop-shadow-lg\"\n                            />\n                            <text\n                              x={x}\n                              y={y - 48}\n                              textAnchor=\"middle\"\n                              className={`text-xs font-semibold ${isDarkMode ? 'fill-white' : 'fill-gray-900'}`}\n                            >\n                              {new Date(point.date).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n                            </text>\n                            <text\n                              x={x}\n                              y={y - 32}\n                              textAnchor=\"middle\"\n                              className={`text-xs ${isDarkMode ? 'fill-gray-400' : 'fill-gray-600'}`}\n                            >\n                              Revenue\n                            </text>\n                            <text\n                              x={x}\n                              y={y - 18}\n                              textAnchor=\"middle\"\n                              className={`text-sm font-bold ${isDarkMode ? 'fill-blue-400' : 'fill-blue-600'}`}\n                            >\n                              ${point.revenue.toLocaleString()}\n                            </text>\n                          </g>\n                        )}\n                      </g>\n                    );\n                  })}\n\n                  {/* X-axis labels */}\n                  <g className=\"x-axis-labels\">\n                    {chartData.map((point, index) => {\n                      const x = 50 + (index * 700) / (chartData.length - 1);\n                      return (\n                        <text\n                          key={index}\n                          x={x}\n                          y=\"275\"\n                          textAnchor=\"middle\"\n                          className={`text-xs ${isDarkMode ? 'fill-gray-400' : 'fill-gray-600'}`}\n                        >\n                          {new Date(point.date).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n                        </text>\n                      );\n                    })}\n                  </g>\n                </svg>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>User Growth</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Active users over time\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"h-[300px] w-full\">\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <AreaChart\n                    data={chartData}\n                    margin={{ top: 10, right: 10, left: 0, bottom: 0 }}\n                  >\n                    <defs>\n                      <linearGradient id=\"userGradient\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                        <stop offset=\"5%\" stopColor=\"#8b5cf6\" stopOpacity={0.8} />\n                        <stop offset=\"95%\" stopColor=\"#8b5cf6\" stopOpacity={0.1} />\n                      </linearGradient>\n                    </defs>\n                    <CartesianGrid \n                      strokeDasharray=\"3 3\" \n                      stroke={isDarkMode ? '#374151' : '#e5e7eb'}\n                      vertical={false}\n                    />\n                    <XAxis\n                      dataKey=\"date\"\n                      tickFormatter={(value) => new Date(value).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n                      stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                      fontSize={12}\n                      tickLine={false}\n                    />\n                    <YAxis\n                      stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                      fontSize={12}\n                      tickLine={false}\n                      axisLine={false}\n                    />\n                    <Tooltip\n                      contentStyle={{\n                        backgroundColor: isDarkMode ? '#1f2937' : '#ffffff',\n                        border: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\n                        borderRadius: '8px',\n                        color: isDarkMode ? '#ffffff' : '#000000'\n                      }}\n                      labelFormatter={(value) => new Date(value).toLocaleDateString('en-US', { month: 'long', day: 'numeric', year: 'numeric' })}\n                      formatter={(value: number) => [value.toLocaleString(), 'Users']}\n                    />\n                    <Area\n                      type=\"monotone\"\n                      dataKey=\"users\"\n                      stroke=\"#8b5cf6\"\n                      strokeWidth={2}\n                      fill=\"url(#userGradient)\"\n                      animationDuration={1000}\n                      animationEasing=\"ease-in-out\"\n                    />\n                  </AreaChart>\n                </ResponsiveContainer>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-4 md:gap-6 mb-8\">\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Orders Distribution</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                By product category\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"h-[300px]\">\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <PieChart>\n                    <Pie\n                      data={pieChartData}\n                      cx=\"50%\"\n                      cy=\"50%\"\n                      labelLine={false}\n                      label={({ name, percent }) => `${name}: ${(percent * 100).toFixed(0)}%`}\n                      outerRadius={80}\n                      fill=\"#8884d8\"\n                      dataKey=\"value\"\n                    >\n                      {pieChartData.map((entry, index) => (\n                        <Cell key={`cell-${index}`} fill={entry.color} />\n                      ))}\n                    </Pie>\n                    <Tooltip\n                      contentStyle={{\n                        backgroundColor: isDarkMode ? '#1f2937' : '#ffffff',\n                        border: isDarkMode ? '1px solid #374151' : '1px solid #e5e7eb',\n                        borderRadius: '6px',\n                        color: isDarkMode ? '#ffffff' : '#000000'\n                      }}\n                      formatter={(value: number) => [`${value} orders`, 'Orders']}\n                    />\n                    <Legend\n                      verticalAlign=\"bottom\"\n                      height={36}\n                      iconType=\"circle\"\n                      wrapperStyle={{\n                        color: isDarkMode ? '#9ca3af' : '#6b7280'\n                      }}\n                    />\n                  </PieChart>\n                </ResponsiveContainer>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className={`lg:col-span-2 ${isDarkMode ? 'bg-gray-800 border-gray-700' : ''}`}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Performance Metrics</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Combined view of key indicators\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <ResponsiveContainer width=\"100%\" height={300}>\n                <BarChart data={chartData}>\n                  <CartesianGrid \n                    strokeDasharray=\"3 3\" \n                    stroke={isDarkMode ? '#374151' : '#e5e7eb'}\n                  />\n                  <XAxis \n                    dataKey=\"date\" \n                    stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                    tick={{ fill: isDarkMode ? '#9ca3af' : '#6b7280' }}\n                    tickFormatter={(value) => new Date(value).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n                  />\n                  <YAxis \n                    stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                    tick={{ fill: isDarkMode ? '#9ca3af' : '#6b7280' }}\n                  />\n                  <Tooltip \n                    contentStyle={{\n                      backgroundColor: isDarkMode ? '#1f2937' : '#ffffff',\n                      border: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\n                      borderRadius: '8px',\n                      color: isDarkMode ? '#f3f4f6' : '#111827'\n                    }}\n                    labelStyle={{ color: isDarkMode ? '#f3f4f6' : '#111827' }}\n                    formatter={(value: number) => value.toLocaleString()}\n                    labelFormatter={(label) => new Date(label).toLocaleDateString('en-US', { month: 'long', day: 'numeric', year: 'numeric' })}\n                  />\n                  <Legend \n                    wrapperStyle={{ color: isDarkMode ? '#9ca3af' : '#6b7280' }}\n                  />\n                  <Bar \n                    dataKey=\"revenue\" \n                    fill=\"#3b82f6\" \n                    radius={[4, 4, 0, 0]}\n                    name=\"Revenue ($)\"\n                  />\n                  <Bar \n                    dataKey=\"users\" \n                    fill=\"#10b981\" \n                    radius={[4, 4, 0, 0]}\n                    name=\"Users\"\n                  />\n                  <Bar \n                    dataKey=\"orders\" \n                    fill=\"#f59e0b\" \n                    radius={[4, 4, 0, 0]}\n                    name=\"Orders\"\n                  />\n                </BarChart>\n              </ResponsiveContainer>\n            </CardContent>\n          </Card>\n        </div>\n\n        <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n          <CardHeader>\n            <CardTitle className={isDarkMode ? 'text-white' : ''}>Top Products</CardTitle>\n            <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n              Best performing products by revenue\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {/* Desktop Table */}\n              <div className=\"hidden md:block overflow-x-auto\">\n                <Table>\n                  <TableHeader>\n                    <TableRow className={isDarkMode ? 'border-gray-700' : ''}>\n                      <TableHead \n                        className={`cursor-pointer ${isDarkMode ? 'text-gray-300' : ''}`}\n                        onClick={() => handleSort('product')}\n                      >\n                        Product {getSortIcon('product')}\n                      </TableHead>\n                      <TableHead \n                        className={`cursor-pointer ${isDarkMode ? 'text-gray-300' : ''}`}\n                        onClick={() => handleSort('sales')}\n                      >\n                        Sales {getSortIcon('sales')}\n                      </TableHead>\n                      <TableHead \n                        className={`cursor-pointer ${isDarkMode ? 'text-gray-300' : ''}`}\n                        onClick={() => handleSort('revenue')}\n                      >\n                        Revenue {getSortIcon('revenue')}\n                      </TableHead>\n                      <TableHead \n                        className={`cursor-pointer ${isDarkMode ? 'text-gray-300' : ''}`}\n                        onClick={() => handleSort('status')}\n                      >\n                        Status {getSortIcon('status')}\n                      </TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {paginatedData().map((row) => (\n                      <TableRow \n                        key={row.id}\n                        className={isDarkMode ? 'border-gray-700 hover:bg-gray-700' : 'hover:bg-gray-50'}\n                      >\n                        <TableCell className={`font-medium ${isDarkMode ? 'text-white' : ''}`}>\n                          {row.product}\n                        </TableCell>\n                        <TableCell className={isDarkMode ? 'text-gray-300' : ''}>\n                          {row.sales.toLocaleString()}\n                        </TableCell>\n                        <TableCell className={isDarkMode ? 'text-gray-300' : ''}>\n                          ${row.revenue.toLocaleString()}\n                        </TableCell>\n                        <TableCell>\n                          {getStatusBadge(row.status)}\n                        </TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              </div>\n\n              {/* Mobile Cards */}\n              <div className=\"md:hidden space-y-3\">\n                {paginatedData().map((row) => (\n                  <div \n                    key={row.id}\n                    className={`p-4 rounded-lg border ${\n                      isDarkMode \n                        ? 'bg-gray-700 border-gray-600' \n                        : 'bg-white border-gray-200'\n                    }`}\n                  >\n                    <div className=\"flex justify-between items-start mb-3\">\n                      <h3 className={`font-semibold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                        {row.product}\n                      </h3>\n                      {getStatusBadge(row.status)}\n                    </div>\n                    <div className=\"grid grid-cols-2 gap-2\">\n                      <div>\n                        <p className={`text-sm ${isDarkMode ? 'text-gray-400' : 'text-gray-500'}`}>\n                          Sales\n                        </p>\n                        <p className={`font-medium ${isDarkMode ? 'text-gray-200' : 'text-gray-900'}`}>\n                          {row.sales.toLocaleString()}\n                        </p>\n                      </div>\n                      <div>\n                        <p className={`text-sm ${isDarkMode ? 'text-gray-400' : 'text-gray-500'}`}>\n                          Revenue\n                        </p>\n                        <p className={`font-medium ${isDarkMode ? 'text-gray-200' : 'text-gray-900'}`}>\n                          ${row.revenue.toLocaleString()}\n                        </p>\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n\n              {/* Pagination */}\n              <div className=\"flex flex-col sm:flex-row items-center justify-between gap-4 pt-4\">\n                <p className={`text-sm ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                  Showing {((currentPage - 1) * itemsPerPage) + 1} to {Math.min(currentPage * itemsPerPage, tableData.length)} of {tableData.length} products\n                </p>\n                \n                <div className=\"flex items-center gap-2\">\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => setCurrentPage(prev => Math.max(1, prev - 1))}\n                    disabled={currentPage === 1}\n                    className={isDarkMode ? 'border-gray-700' : ''}\n                  >\n                    <ChevronLeft className=\"h-4 w-4\" />\n                    Previous\n                  </Button>\n                  \n                  <div className=\"flex gap-1\">\n                    {Array.from({ length: totalPages }, (_, i) => i + 1).map((page) => (\n                      <Button\n                        key={page}\n                        variant={currentPage === page ? 'default' : 'outline'}\n                        size=\"sm\"\n                        onClick={() => setCurrentPage(page)}\n                        className={`w-8 h-8 p-0 ${\n                          isDarkMode && currentPage !== page ? 'border-gray-700' : ''\n                        }`}\n                      >\n                        {page}\n                      </Button>\n                    ))}\n                  </div>\n                  \n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => setCurrentPage(prev => Math.min(totalPages, prev + 1))}\n                    disabled={currentPage === totalPages}\n                    className={isDarkMode ? 'border-gray-700' : ''}\n                  >\n                    Next\n                    <ChevronRight className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 md:gap-6 mt-8\">\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>System Status</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Live monitoring\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"flex items-center gap-3\">\n                <div className=\"relative\">\n                  <div className=\"h-3 w-3 bg-green-500 rounded-full\"></div>\n                  <div className=\"absolute inset-0 h-3 w-3 bg-green-500 rounded-full animate-ping\"></div>\n                </div>\n                <div>\n                  <p className={`text-sm font-medium ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                    All Systems Operational\n                  </p>\n                  <p className={`text-xs ${isDarkMode ? 'text-gray-400' : 'text-gray-500'}`}>\n                    Last updated: {new Date().toLocaleTimeString()}\n                  </p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Data Sync</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Real-time synchronization\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"flex items-center gap-3\">\n                <div className=\"relative\">\n                  <div className=\"h-3 w-3 bg-blue-500 rounded-full\"></div>\n                  <div className=\"absolute inset-0 h-3 w-3 bg-blue-500 rounded-full animate-ping\"></div>\n                </div>\n                <div>\n                  <p className={`text-sm font-medium ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                    Syncing Data\n                  </p>\n                  <p className={`text-xs ${isDarkMode ? 'text-gray-400' : 'text-gray-500'}`}>\n                    Last sync: {new Date(Date.now() - 5000).toLocaleTimeString()}\n                  </p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>API Status</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Connection health\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"flex items-center gap-3\">\n                <div className=\"relative\">\n                  <div className=\"h-3 w-3 bg-green-500 rounded-full\"></div>\n                  <div className=\"absolute inset-0 h-3 w-3 bg-green-500 rounded-full animate-ping\"></div>\n                </div>\n                <div>\n                  <p className={`text-sm font-medium ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                    Connected\n                  </p>\n                  <p className={`text-xs ${isDarkMode ? 'text-gray-400' : 'text-gray-500'}`}>\n                    Response time: 45ms\n                  </p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}",
    "error": null,
    "elapsed_time": 94.37244153022766,
    "success": true
  }
}