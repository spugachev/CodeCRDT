{
  "prompt_id": "algorithm_visualizer",
  "prompt_name": "Algorithm Visualizer",
  "mode": "parallel",
  "run_number": 44,
  "timestamp": "2025-10-14T12:20:00.467484",
  "response_time": 94.37461566925049,
  "total_tokens": null,
  "response_content": "import { useState, useCallback } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Slider } from '@/components/ui/slider';\nimport { Play, Pause, RotateCcw, Zap, BarChart3 } from 'lucide-react';\nimport { motion } from 'framer-motion';\n\ninterface ArrayElement {\n  value: number;\n  id: string;\n  isComparing?: boolean;\n  isSwapping?: boolean;\n  isSorted?: boolean;\n}\n\ninterface AlgorithmStep {\n  array: ArrayElement[];\n  comparingIndices: number[];\n  swappingIndices: number[];\n  sortedIndices: number[];\n}\n\ntype AlgorithmType = 'bubble' | 'quick' | 'merge' | 'insertion';\n\nconst NEON_COLORS = [\n  '#00ffff',\n  '#ff00ff', \n  '#00ff00',\n  '#ffff00',\n  '#ff0066',\n  '#00ffaa'\n];\n\nconst mockAlgorithms = [\n  { id: 'bubble', name: 'Bubble Sort', complexity: 'O(n\u00b2)' },\n  { id: 'quick', name: 'Quick Sort', complexity: 'O(n log n)' },\n  { id: 'merge', name: 'Merge Sort', complexity: 'O(n log n)' },\n  { id: 'insertion', name: 'Insertion Sort', complexity: 'O(n\u00b2)' }\n];\n\nexport default function AlgorithmVisualizer() {\n  const [array, setArray] = useState<ArrayElement[]>([]);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [speed, setSpeed] = useState([50]);\n  const [arraySize, setArraySize] = useState([20]);\n  const [selectedAlgorithm, setSelectedAlgorithm] = useState<AlgorithmType>('bubble');\n  const [currentStep, setCurrentStep] = useState(0);\n  const [steps, setSteps] = useState<AlgorithmStep[]>([]);\n\n  const generateRandomArray = useCallback(() => {\n    const newArray: ArrayElement[] = Array.from({ length: arraySize[0] }, (_, index) => ({\n      value: Math.floor(Math.random() * 100) + 5,\n      id: `element-${index}-${Date.now()}`,\n      isComparing: false,\n      isSwapping: false,\n      isSorted: false\n    }));\n    setArray(newArray);\n    setSteps([]);\n    setCurrentStep(0);\n    setIsPlaying(false);\n  }, [arraySize]);\n\n  const resetVisualization = useCallback(() => {\n\n    setIsPlaying(false);\n    setCurrentStep(0);\n    setSteps([]);\n    generateRandomArray();\n  }, [generateRandomArray]);\n\n  // Animation effect for step-by-step visualization\n  const animateSteps = useCallback(() => {\n    if (currentStep < steps.length && isPlaying) {\n      const timer = setTimeout(() => {\n        setCurrentStep(prev => prev + 1);\n      }, 1000 - speed[0] * 9); // Convert speed slider (0-100) to delay (1000ms-100ms)\n      \n      return () => clearTimeout(timer);\n    } else if (currentStep >= steps.length && isPlaying) {\n      setIsPlaying(false);\n    }\n  }, [currentStep, steps.length, isPlaying, speed]);\n\n  // Run animation effect\n  React.useEffect(() => {\n    const cleanup = animateSteps();\n    return cleanup;\n  }, [animateSteps]);\n  const startVisualization = useCallback(() => {\n    if (steps.length === 0) return;\n    setIsPlaying(true);\n    if (currentStep >= steps.length) {\n      setCurrentStep(0);\n    }\n  }, [steps, speed, currentStep]);\n\n  const pauseVisualization = useCallback(() => {\n    setIsPlaying(false);\n  }, []);\n\n  const generateSortingSteps = useCallback((algorithm: AlgorithmType) => {\n    const sortedArray = [...array];\n    const newSteps: AlgorithmStep[] = [];\n\n    const addStep = (arr: ArrayElement[], comparing: number[] = [], swapping: number[] = [], sorted: number[] = []) => {\n      newSteps.push({\n        array: arr.map(el => ({ ...el })),\n        comparingIndices: [...comparing],\n        swappingIndices: [...swapping],\n        sortedIndices: [...sorted]\n      });\n    };\n\n    // Initial state\n    addStep(sortedArray);\n\n    switch (algorithm) {\n      case 'bubble': {\n        const sortedSet = new Set<number>();\n        for (let i = 0; i < sortedArray.length - 1; i++) {\n          for (let j = 0; j < sortedArray.length - i - 1; j++) {\n            // Comparing\n            addStep(sortedArray, [j, j + 1], [], Array.from(sortedSet));\n            \n            if (sortedArray[j].value > sortedArray[j + 1].value) {\n              // Swapping\n              addStep(sortedArray, [], [j, j + 1], Array.from(sortedSet));\n              [sortedArray[j], sortedArray[j + 1]] = [sortedArray[j + 1], sortedArray[j]];\n              addStep(sortedArray, [], [], Array.from(sortedSet));\n            }\n          }\n          sortedSet.add(sortedArray.length - i - 1);\n          addStep(sortedArray, [], [], Array.from(sortedSet));\n        }\n        sortedSet.add(0);\n        addStep(sortedArray, [], [], Array.from(sortedSet));\n        break;\n      }\n\n      case 'insertion': {\n        const sortedSet = new Set<number>([0]);\n        addStep(sortedArray, [], [], [0]);\n        \n        for (let i = 1; i < sortedArray.length; i++) {\n          const key = sortedArray[i];\n          let j = i - 1;\n          \n          addStep(sortedArray, [i], [], Array.from(sortedSet));\n          \n          while (j >= 0 && sortedArray[j].value > key.value) {\n            addStep(sortedArray, [j, j + 1], [], Array.from(sortedSet));\n            addStep(sortedArray, [], [j, j + 1], Array.from(sortedSet));\n            sortedArray[j + 1] = sortedArray[j];\n            addStep(sortedArray, [], [], Array.from(sortedSet));\n            j--;\n          }\n          \n          sortedArray[j + 1] = key;\n          sortedSet.add(i);\n          addStep(sortedArray, [], [], Array.from(sortedSet));\n        }\n        break;\n      }\n\n      case 'quick': {\n        const sortedSet = new Set<number>();\n        \n        const partition = (low: number, high: number): number => {\n          const pivot = sortedArray[high];\n          addStep(sortedArray, [high], [], Array.from(sortedSet));\n          let i = low - 1;\n\n          for (let j = low; j < high; j++) {\n            addStep(sortedArray, [j, high], [], Array.from(sortedSet));\n            \n            if (sortedArray[j].value < pivot.value) {\n              i++;\n              if (i !== j) {\n                addStep(sortedArray, [], [i, j], Array.from(sortedSet));\n                [sortedArray[i], sortedArray[j]] = [sortedArray[j], sortedArray[i]];\n                addStep(sortedArray, [], [], Array.from(sortedSet));\n              }\n            }\n          }\n          \n          addStep(sortedArray, [], [i + 1, high], Array.from(sortedSet));\n          [sortedArray[i + 1], sortedArray[high]] = [sortedArray[high], sortedArray[i + 1]];\n          sortedSet.add(i + 1);\n          addStep(sortedArray, [], [], Array.from(sortedSet));\n          \n          return i + 1;\n        };\n\n        const quickSort = (low: number, high: number) => {\n          if (low < high) {\n            const pi = partition(low, high);\n            quickSort(low, pi - 1);\n            quickSort(pi + 1, high);\n          } else if (low === high) {\n            sortedSet.add(low);\n            addStep(sortedArray, [], [], Array.from(sortedSet));\n          }\n        };\n\n        quickSort(0, sortedArray.length - 1);\n        break;\n      }\n\n      case 'merge': {\n        const sortedSet = new Set<number>();\n        \n        const merge = (left: number, mid: number, right: number) => {\n          const leftArr = sortedArray.slice(left, mid + 1);\n          const rightArr = sortedArray.slice(mid + 1, right + 1);\n          \n          let i = 0, j = 0, k = left;\n          \n          while (i < leftArr.length && j < rightArr.length) {\n            addStep(sortedArray, [left + i, mid + 1 + j], [], Array.from(sortedSet));\n            \n            if (leftArr[i].value <= rightArr[j].value) {\n              sortedArray[k] = leftArr[i];\n              i++;\n            } else {\n              sortedArray[k] = rightArr[j];\n              j++;\n            }\n            addStep(sortedArray, [], [k], Array.from(sortedSet));\n            k++;\n          }\n          \n          while (i < leftArr.length) {\n            sortedArray[k] = leftArr[i];\n            addStep(sortedArray, [], [k], Array.from(sortedSet));\n            i++;\n            k++;\n          }\n          \n          while (j < rightArr.length) {\n            sortedArray[k] = rightArr[j];\n            addStep(sortedArray, [], [k], Array.from(sortedSet));\n            j++;\n            k++;\n          }\n          \n          if (left === 0 && right === sortedArray.length - 1) {\n            for (let idx = left; idx <= right; idx++) {\n              sortedSet.add(idx);\n            }\n          }\n          addStep(sortedArray, [], [], Array.from(sortedSet));\n        };\n\n        const mergeSort = (left: number, right: number) => {\n          if (left < right) {\n            const mid = Math.floor((left + right) / 2);\n            mergeSort(left, mid);\n            mergeSort(mid + 1, right);\n            merge(left, mid, right);\n          } else if (left === right && sortedArray.length === 1) {\n            sortedSet.add(left);\n            addStep(sortedArray, [], [], Array.from(sortedSet));\n          }\n        };\n\n        mergeSort(0, sortedArray.length - 1);\n        break;\n      }\n    }\n\n    setSteps(newSteps);\n    setCurrentStep(0);\n  }, [array]);\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-gray-900 via-purple-900 to-gray-900 p-8\">\n      <div className=\"max-w-7xl mx-auto space-y-8\">\n        <motion.div\n          initial={{ opacity: 0, y: -20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.8 }}\n          className=\"text-center space-y-4\"\n        >\n          <motion.h1\n            className=\"text-6xl font-bold bg-gradient-to-r from-cyan-400 via-purple-400 to-pink-400 bg-clip-text text-transparent\"\n            animate={{\n              textShadow: [\n                '0 0 20px rgba(0, 255, 255, 0.5)',\n                '0 0 40px rgba(255, 0, 255, 0.5)',\n                '0 0 20px rgba(0, 255, 255, 0.5)'\n              ]\n            }}\n            transition={{ duration: 2, repeat: Infinity }}\n          >\n            Algorithm Visualizer\n          </motion.h1>\n          <div className=\"flex items-center justify-center gap-4\">\n            <motion.div\n              className=\"px-6 py-2 bg-purple-500/20 border border-purple-400/50 rounded-lg backdrop-blur-sm\"\n              whileHover={{ scale: 1.05, boxShadow: '0 0 20px rgba(168, 85, 247, 0.6)' }}\n            >\n              <span className=\"text-2xl font-semibold text-purple-300\">\n                {mockAlgorithms.find(a => a.id === selectedAlgorithm)?.name || 'Select Algorithm'}\n              </span>\n            </motion.div>\n            <motion.div\n              className=\"px-4 py-2 bg-cyan-500/20 border border-cyan-400/50 rounded-full backdrop-blur-sm\"\n              animate={{\n                boxShadow: [\n                  '0 0 10px rgba(0, 255, 255, 0.3)',\n                  '0 0 20px rgba(0, 255, 255, 0.6)',\n                  '0 0 10px rgba(0, 255, 255, 0.3)'\n                ]\n              }}\n              transition={{ duration: 1.5, repeat: Infinity }}\n            >\n              <span className=\"text-lg font-mono text-cyan-300\">\n                {mockAlgorithms.find(a => a.id === selectedAlgorithm)?.complexity || 'O(?)'}\n              </span>\n            </motion.div>\n          </div>\n        </motion.div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-6\">\n          <div className=\"lg:col-span-1 space-y-6\">\n            <motion.div\n              initial={{ opacity: 0, x: -50 }}\n              animate={{ opacity: 1, x: 0 }}\n              transition={{ duration: 0.6 }}\n              className=\"bg-gray-900/50 backdrop-blur-lg border border-cyan-500/30 rounded-xl p-6 shadow-[0_0_30px_rgba(0,255,255,0.3)] hover:shadow-[0_0_50px_rgba(0,255,255,0.5)] transition-all duration-300\"\n            >\n              <div className=\"space-y-6\">\n                {/* Algorithm Selection */}\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center gap-2 mb-4\">\n                    <Zap className=\"w-5 h-5 text-cyan-400\" />\n                    <h3 className=\"text-cyan-400 font-bold text-lg tracking-wider\">ALGORITHM</h3>\n                  </div>\n                  <div className=\"grid grid-cols-1 gap-2\">\n                    {mockAlgorithms.map((algo) => (\n                      <motion.button\n                        key={algo.id}\n                        whileHover={{ scale: 1.02 }}\n                        whileTap={{ scale: 0.98 }}\n                        onClick={() => setSelectedAlgorithm(algo.id as AlgorithmType)}\n                        className={`p-3 rounded-lg border transition-all duration-300 text-left ${\n                          selectedAlgorithm === algo.id\n                            ? 'bg-cyan-500/20 border-cyan-400 shadow-[0_0_20px_rgba(0,255,255,0.4)]'\n                            : 'bg-gray-800/50 border-gray-700 hover:border-cyan-500/50'\n                        }`}\n                      >\n                        <div className=\"font-semibold text-white\">{algo.name}</div>\n                        <div className=\"text-xs text-gray-400 mt-1\">{algo.complexity}</div>\n                      </motion.button>\n                    ))}\n                  </div>\n                </div>\n\n                {/* Speed Control */}\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <label className=\"text-cyan-400 font-semibold tracking-wide\">SPEED</label>\n                    <span className=\"text-white font-mono bg-cyan-500/20 px-3 py-1 rounded-full text-sm border border-cyan-500/30\">\n                      {speed[0]}%\n                    </span>\n                  </div>\n                  <Slider\n                    value={speed}\n                    onValueChange={setSpeed}\n                    min={10}\n                    max={100}\n                    step={10}\n                    className=\"cursor-pointer\"\n                    disabled={isPlaying}\n                  />\n                </div>\n\n                {/* Array Size Control */}\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <label className=\"text-cyan-400 font-semibold tracking-wide\">SIZE</label>\n                    <span className=\"text-white font-mono bg-purple-500/20 px-3 py-1 rounded-full text-sm border border-purple-500/30\">\n                      {arraySize[0]}\n                    </span>\n                  </div>\n                  <Slider\n                    value={arraySize}\n                    onValueChange={setArraySize}\n                    min={5}\n                    max={50}\n                    step={5}\n                    className=\"cursor-pointer\"\n                    disabled={isPlaying}\n                  />\n                </div>\n\n                {/* Control Buttons */}\n                <div className=\"space-y-3 pt-4 border-t border-cyan-500/20\">\n                  <Button\n                    onClick={isPlaying ? pauseVisualization : startVisualization}\n                    disabled={steps.length === 0 || currentStep >= steps.length}\n                    className=\"w-full bg-gradient-to-r from-cyan-500 to-blue-500 hover:from-cyan-400 hover:to-blue-400 text-white font-bold py-6 rounded-lg shadow-[0_0_20px_rgba(0,255,255,0.5)] hover:shadow-[0_0_30px_rgba(0,255,255,0.7)] transition-all duration-300 disabled:opacity-50 disabled:cursor-not-allowed\"\n                  >\n                    {isPlaying ? (\n                      <>\n                        <Pause className=\"w-5 h-5 mr-2\" />\n                        PAUSE\n                      </>\n                    ) : (\n                      <>\n                        <Play className=\"w-5 h-5 mr-2\" />\n                        START\n                      </>\n                    )}\n                  </Button>\n\n                  <Button\n                    onClick={resetVisualization}\n                    disabled={isPlaying}\n                    className=\"w-full bg-gradient-to-r from-purple-500 to-pink-500 hover:from-purple-400 hover:to-pink-400 text-white font-bold py-6 rounded-lg shadow-[0_0_20px_rgba(255,0,255,0.5)] hover:shadow-[0_0_30px_rgba(255,0,255,0.7)] transition-all duration-300 disabled:opacity-50 disabled:cursor-not-allowed\"\n                  >\n                    <RotateCcw className=\"w-5 h-5 mr-2\" />\n                    RESET\n                  </Button>\n\n                  <Button\n                    onClick={() => {\n                      generateRandomArray();\n                      generateSortingSteps(selectedAlgorithm);\n                    }}\n                    disabled={isPlaying}\n                    className=\"w-full bg-gradient-to-r from-green-500 to-emerald-500 hover:from-green-400 hover:to-emerald-400 text-white font-bold py-6 rounded-lg shadow-[0_0_20px_rgba(0,255,170,0.5)] hover:shadow-[0_0_30px_rgba(0,255,170,0.7)] transition-all duration-300 disabled:opacity-50 disabled:cursor-not-allowed\"\n                  >\n                    <BarChart3 className=\"w-5 h-5 mr-2\" />\n                    GENERATE\n                  </Button>\n                </div>\n\n                {/* Stats Display */}\n                <div className=\"pt-4 border-t border-cyan-500/20 space-y-2\">\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-gray-400 text-sm\">Current Step:</span>\n                    <span className=\"text-cyan-400 font-mono font-bold\">\n                      {currentStep} / {steps.length}\n                    </span>\n                  </div>\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-gray-400 text-sm\">Array Length:</span>\n                    <span className=\"text-purple-400 font-mono font-bold\">{array.length}</span>\n                  </div>\n                </div>\n              </div>\n            </motion.div>\n            \n            <div className=\"bg-gray-900/50 backdrop-blur-lg border border-cyan-500/30 rounded-xl p-6 shadow-2xl shadow-cyan-500/20\">\n              <div className=\"space-y-6\">\n                <div>\n                  <h3 className=\"text-sm font-semibold text-cyan-400 mb-3 flex items-center gap-2\">\n                    <Zap className=\"w-4 h-4\" />\n                    Algorithm\n                  </h3>\n                  <div className=\"grid grid-cols-1 gap-2\">\n                    {mockAlgorithms.map((algo) => (\n                      <motion.button\n                        key={algo.id}\n                        onClick={() => setSelectedAlgorithm(algo.id as AlgorithmType)}\n                        className={`relative p-3 rounded-lg border transition-all duration-300 text-left ${\n                          selectedAlgorithm === algo.id\n                            ? 'bg-cyan-500/20 border-cyan-400 shadow-lg shadow-cyan-500/50'\n                            : 'bg-gray-800/50 border-gray-700 hover:border-cyan-500/50 hover:shadow-md hover:shadow-cyan-500/30'\n                        }`}\n                        whileHover={{ scale: 1.02 }}\n                        whileTap={{ scale: 0.98 }}\n                      >\n                        <div className=\"flex flex-col gap-1\">\n                          <span className={`text-sm font-medium ${\n                            selectedAlgorithm === algo.id ? 'text-cyan-300' : 'text-gray-300'\n                          }`}>\n                            {algo.name}\n                          </span>\n                          <span className={`text-xs ${\n                            selectedAlgorithm === algo.id ? 'text-cyan-400/80' : 'text-gray-500'\n                          }`}>\n                            {algo.complexity}\n                          </span>\n                        </div>\n                        {selectedAlgorithm === algo.id && (\n                          <motion.div\n                            className=\"absolute inset-0 rounded-lg bg-cyan-500/10\"\n                            layoutId=\"algorithmSelector\"\n                            transition={{ type: \"spring\", bounce: 0.2, duration: 0.6 }}\n                          />\n                        )}\n                      </motion.button>\n                    ))}\n                  </div>\n                </div></parameter>\n</invoke>\n\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <label className=\"text-sm font-medium text-cyan-400\">Array Size</label>\n                    <span className=\"text-xs text-cyan-300 font-mono\">{arraySize[0]}</span>\n                  </div>\n                  <Slider\n                    value={arraySize}\n                    onValueChange={setArraySize}\n                    min={5}\n                    max={50}\n                    step={1}\n                    className=\"w-full\"\n                  />\n                </div>\n\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <label className=\"text-sm font-medium text-purple-400\">Speed</label>\n                    <span className=\"text-xs text-purple-300 font-mono\">{speed[0]}ms</span>\n                  </div>\n                  <Slider\n                    value={speed}\n                    onValueChange={setSpeed}\n                    min={10}\n                    max={200}\n                    step={10}\n                    className=\"w-full\"\n                  />\n                </div>\n\n                <div className=\"space-y-3\">\n                  <Button\n                    onClick={isPlaying ? pauseVisualization : startVisualization}\n                    disabled={steps.length === 0 || (currentStep >= steps.length && !isPlaying)}\n                    className=\"w-full bg-gradient-to-r from-cyan-500 to-blue-500 hover:from-cyan-400 hover:to-blue-400 text-white font-semibold py-6 rounded-lg shadow-lg shadow-cyan-500/50 hover:shadow-cyan-400/70 transition-all duration-300 disabled:opacity-50 disabled:cursor-not-allowed\"\n                  >\n                    <motion.div\n                      className=\"flex items-center justify-center gap-2\"\n                      animate={isPlaying ? { scale: [1, 1.05, 1] } : {}}\n                      transition={{ duration: 1, repeat: isPlaying ? Infinity : 0 }}\n                    >\n                      {isPlaying ? (\n                        <>\n                          <Pause className=\"w-5 h-5\" />\n                          <span>Pause</span>\n                        </>\n                      ) : (\n                        <>\n                          <Play className=\"w-5 h-5\" />\n                          <span>Play</span>\n                        </>\n                      )}\n                    </motion.div>\n                  </Button>\n\n                  <Button\n                    onClick={resetVisualization}\n                    variant=\"outline\"\n                    className=\"w-full border-2 border-purple-500 bg-purple-500/10 hover:bg-purple-500/20 text-purple-300 hover:text-purple-200 font-semibold py-6 rounded-lg shadow-lg shadow-purple-500/30 hover:shadow-purple-400/50 transition-all duration-300\"\n                  >\n                    <motion.div\n                      className=\"flex items-center justify-center gap-2\"\n                      whileHover={{ rotate: -180 }}\n                      transition={{ duration: 0.5 }}\n                    >\n                      <RotateCcw className=\"w-5 h-5\" />\n                      <span>Reset</span>\n                    </motion.div>\n                  </Button>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"bg-gray-900/50 backdrop-blur-lg border border-purple-500/30 rounded-xl p-6 shadow-2xl shadow-purple-500/20\">\n              <div className=\"flex items-center gap-2 mb-4\">\n                <BarChart3 className=\"w-5 h-5 text-purple-400\" />\n                <h3 className=\"text-lg font-bold text-purple-300\">Statistics</h3>\n              </div>\n              \n              <div className=\"space-y-4\">\n                <div className=\"bg-gray-800/50 rounded-lg p-4 border border-cyan-500/20\">\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <span className=\"text-sm text-cyan-400\">Comparisons</span>\n                    <motion.span \n                      key={steps[currentStep]?.comparingIndices.length || 0}\n                      initial={{ scale: 1.5, color: '#00ffff' }}\n                      animate={{ scale: 1, color: '#67e8f9' }}\n                      className=\"text-2xl font-bold font-mono text-cyan-300\"\n                    >\n                      {currentStep > 0 ? currentStep : 0}\n                    </motion.span>\n                  </div>\n                  <div className=\"h-1 bg-gray-700 rounded-full overflow-hidden\">\n                    <motion.div \n                      className=\"h-full bg-gradient-to-r from-cyan-500 to-cyan-400\"\n                      initial={{ width: 0 }}\n                      animate={{ width: `${steps.length > 0 ? (currentStep / steps.length) * 100 : 0}%` }}\n                      transition={{ duration: 0.3 }}\n                    />\n                  </div>\n                </div>\n\n                <div className=\"bg-gray-800/50 rounded-lg p-4 border border-purple-500/20\">\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <span className=\"text-sm text-purple-400\">Swaps</span>\n                    <motion.span \n                      key={steps[currentStep]?.swappingIndices.length || 0}\n                      initial={{ scale: 1.5, color: '#ff00ff' }}\n                      animate={{ scale: 1, color: '#e879f9' }}\n                      className=\"text-2xl font-bold font-mono text-purple-300\"\n                    >\n                      {steps.slice(0, currentStep).filter(s => s.swappingIndices.length > 0).length}\n                    </motion.span>\n                  </div>\n                  <div className=\"h-1 bg-gray-700 rounded-full overflow-hidden\">\n                    <motion.div \n                      className=\"h-full bg-gradient-to-r from-purple-500 to-pink-500\"\n                      initial={{ width: 0 }}\n                      animate={{ width: `${steps.length > 0 ? (steps.slice(0, currentStep).filter(s => s.swappingIndices.length > 0).length / steps.length) * 100 : 0}%` }}\n                      transition={{ duration: 0.3 }}\n                    />\n                  </div>\n                </div>\n\n                <div className=\"bg-gray-800/50 rounded-lg p-4 border border-green-500/20\">\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <span className=\"text-sm text-green-400\">Progress</span>\n                    <motion.span \n                      key={currentStep}\n                      initial={{ scale: 1.5, color: '#00ff00' }}\n                      animate={{ scale: 1, color: '#86efac' }}\n                      className=\"text-2xl font-bold font-mono text-green-300\"\n                    >\n                      {steps.length > 0 ? Math.round((currentStep / steps.length) * 100) : 0}%\n                    </motion.span>\n                  </div>\n                  <div className=\"h-1 bg-gray-700 rounded-full overflow-hidden\">\n                    <motion.div \n                      className=\"h-full bg-gradient-to-r from-green-500 to-emerald-400\"\n                      initial={{ width: 0 }}\n                      animate={{ width: `${steps.length > 0 ? (currentStep / steps.length) * 100 : 0}%` }}\n                      transition={{ duration: 0.3 }}\n                    />\n                  </div>\n                </div>\n\n                <div className=\"bg-gray-800/50 rounded-lg p-4 border border-yellow-500/20\">\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-sm text-yellow-400\">Sorted Elements</span>\n                    <span className=\"text-2xl font-bold font-mono text-yellow-300\">\n                      {steps[currentStep]?.sortedIndices.length || 0} / {array.length}\n                    </span>\n                  </div>\n                </div>\n\n                <div className=\"bg-gradient-to-r from-cyan-500/10 to-purple-500/10 rounded-lg p-4 border border-cyan-500/30\">\n                  <div className=\"text-xs text-cyan-300 mb-1\">Algorithm</div>\n                  <div className=\"text-lg font-bold text-white\">\n                    {mockAlgorithms.find(a => a.id === selectedAlgorithm)?.name}\n                  </div>\n                  <div className=\"text-xs text-purple-400 mt-1 font-mono\">\n                    {mockAlgorithms.find(a => a.id === selectedAlgorithm)?.complexity}\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"lg:col-span-3\">\n            <div className=\"bg-gray-900/50 backdrop-blur-lg border border-purple-500/30 rounded-xl p-8 shadow-2xl shadow-purple-500/20 min-h-[600px]\">\n                            {array.length === 0 ? (\n                <motion.div\n                  initial={{ opacity: 0, scale: 0.8 }}\n                  animate={{ opacity: 1, scale: 1 }}\n                  transition={{ duration: 0.6 }}\n                  className=\"flex flex-col items-center justify-center h-full space-y-6\"\n                >\n                  <motion.div\n                    animate={{\n                      rotate: [0, 360],\n                      scale: [1, 1.2, 1]\n                    }}\n                    transition={{ duration: 3, repeat: Infinity }}\n                    className=\"relative\"\n                  >\n                    <BarChart3 className=\"w-24 h-24 text-cyan-400\" />\n                    <motion.div\n                      className=\"absolute inset-0 blur-xl bg-cyan-400/30 rounded-full\"\n                      animate={{\n                        scale: [1, 1.5, 1],\n                        opacity: [0.3, 0.6, 0.3]\n                      }}\n                      transition={{ duration: 2, repeat: Infinity }}\n                    />\n                  </motion.div>\n                  <div className=\"text-center space-y-2\">\n                    <h3 className=\"text-2xl font-bold text-cyan-300\">Ready to Visualize</h3>\n                    <p className=\"text-gray-400\">Generate an array to begin</p>\n                  </div>\n                </motion.div>\n              ) : (\n                <div className=\"relative w-full h-full flex items-end justify-center gap-1 px-4\">\n                  {/* Comparison Indicators */}\n                  {steps.length > 0 && currentStep < steps.length && steps[currentStep].comparingIndices.length > 0 && (\n                    <>\n                      {steps[currentStep].comparingIndices.map((index, i) => {\n                        const barWidth = 100 / array.length;\n                        const leftPosition = index * barWidth + barWidth / 2;\n                        \n                        return (\n                          <motion.div\n                            key={`compare-${index}-${i}`}\n                            initial={{ opacity: 0, y: -20 }}\n                            animate={{ \n                              opacity: [0.5, 1, 0.5],\n                              y: 0,\n                              scale: [1, 1.2, 1]\n                            }}\n                            transition={{ \n                              duration: 0.6,\n                              repeat: Infinity,\n                              repeatType: \"reverse\"\n                            }}\n                            className=\"absolute top-0 pointer-events-none z-20\"\n                            style={{\n                              left: `${leftPosition}%`,\n                              transform: 'translateX(-50%)'\n                            }}\n                          >\n                            <div className=\"flex flex-col items-center\">\n                              <motion.div\n                                className=\"w-3 h-3 rounded-full bg-yellow-400 shadow-[0_0_20px_rgba(250,204,21,0.8)]\"\n                                animate={{\n                                  boxShadow: [\n                                    '0 0 20px rgba(250,204,21,0.8)',\n                                    '0 0 40px rgba(250,204,21,1)',\n                                    '0 0 20px rgba(250,204,21,0.8)'\n                                  ]\n                                }}\n                                transition={{ duration: 0.8, repeat: Infinity }}\n                              />\n                              <motion.div\n                                className=\"w-0.5 h-8 bg-gradient-to-b from-yellow-400 to-transparent\"\n                                animate={{\n                                  opacity: [0.6, 1, 0.6]\n                                }}\n                                transition={{ duration: 0.8, repeat: Infinity }}\n                              />\n                            </div>\n                          </motion.div>\n                        );\n                      })}\n                    </>\n                  )}\n\n                  {/* Swap Trail Effects */}\n                  {steps.length > 0 && currentStep < steps.length && steps[currentStep].swappingIndices.length > 0 && (\n                    <>\n                      {steps[currentStep].swappingIndices.map((index, i) => {\n                        const barWidth = 100 / array.length;\n                        const leftPosition = index * barWidth + barWidth / 2;\n                        \n                        return (\n                          <motion.div\n                            key={`swap-${index}-${i}`}\n                            initial={{ opacity: 0, scale: 0 }}\n                            animate={{ \n                              opacity: [0, 1, 0],\n                              scale: [0, 2, 3],\n                            }}\n                            transition={{ \n                              duration: 1,\n                              ease: \"easeOut\"\n                            }}\n                            className=\"absolute bottom-0 pointer-events-none z-10\"\n                            style={{\n                              left: `${leftPosition}%`,\n                              transform: 'translateX(-50%)',\n                              height: '100%'\n                            }}\n                          >\n                            <div className=\"w-full h-full relative\">\n                              <motion.div\n                                className=\"absolute inset-0 bg-gradient-radial from-pink-500/40 via-purple-500/20 to-transparent rounded-full blur-2xl\"\n                                animate={{\n                                  scale: [1, 1.5, 2],\n                                  opacity: [0.6, 0.3, 0]\n                                }}\n                                transition={{ duration: 1 }}\n                              />\n                            </div>\n                          </motion.div>\n                        );\n                      })}\n                      \n                      {/* Connecting Arc Between Swapping Elements */}\n                      {steps[currentStep].swappingIndices.length === 2 && (\n                        <motion.svg\n                          className=\"absolute top-0 left-0 w-full h-full pointer-events-none z-15\"\n                          initial={{ opacity: 0 }}\n                          animate={{ opacity: [0, 1, 0] }}\n                          transition={{ duration: 1 }}\n                        >\n                          <motion.path\n                            d={`M ${(steps[currentStep].swappingIndices[0] + 0.5) * (100 / array.length)}% 50% Q 50% 10% ${(steps[currentStep].swappingIndices[1] + 0.5) * (100 / array.length)}% 50%`}\n                            stroke=\"url(#swapGradient)\"\n                            strokeWidth=\"3\"\n                            fill=\"none\"\n                            initial={{ pathLength: 0 }}\n                            animate={{ pathLength: 1 }}\n                            transition={{ duration: 0.6, ease: \"easeInOut\" }}\n                          />\n                          <defs>\n                            <linearGradient id=\"swapGradient\" x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"0%\">\n                              <stop offset=\"0%\" stopColor=\"#ec4899\" stopOpacity=\"0.8\" />\n                              <stop offset=\"50%\" stopColor=\"#a855f7\" stopOpacity=\"1\" />\n                              <stop offset=\"100%\" stopColor=\"#ec4899\" stopOpacity=\"0.8\" />\n                            </linearGradient>\n                          </defs>\n                        </motion.svg>\n                      )}\n                    </>\n                  )}\n\n                  {/* Array Bars */}\n                  {(steps.length > 0 && currentStep < steps.length ? steps[currentStep].array : array).map((element, index) => {\n                    const currentStepData = steps.length > 0 && currentStep < steps.length ? steps[currentStep] : null;\n                    const isComparing = currentStepData?.comparingIndices.includes(index) || false;\n                    const isSwapping = currentStepData?.swappingIndices.includes(index) || false;\n                    const isSorted = currentStepData?.sortedIndices.includes(index) || false;\n                    \n                    const maxValue = Math.max(...array.map(el => el.value));\n                    const heightPercentage = (element.value / maxValue) * 100;\n                    \n                    let barColor = NEON_COLORS[index % NEON_COLORS.length];\n                    let glowColor = barColor;\n                    \n                    if (isSorted) {\n                      barColor = '#00ff00';\n                      glowColor = '#00ff00';\n                    } else if (isSwapping) {\n                      barColor = '#ff0066';\n                      glowColor = '#ff0066';\n                    } else if (isComparing) {\n                      barColor = '#ffff00';\n                      glowColor = '#ffff00';\n                    }\n\n                    return (\n                      <motion.div\n                        key={element.id}\n                        className=\"relative flex-1 min-w-0 group\"\n                        initial={{ opacity: 0, y: 50 }}\n                        animate={{ \n                          opacity: 1, \n                          y: 0,\n                          scale: isSwapping ? [1, 1.1, 1] : 1\n                        }}\n                        transition={{ \n                          duration: 0.3,\n                          delay: index * 0.02\n                        }}\n                      >\n                        <motion.div\n                          className=\"relative w-full rounded-t-lg transition-all duration-300\"\n                          animate={{\n                            height: `${heightPercentage}%`,\n                            backgroundColor: barColor,\n                            boxShadow: [\n                              `0 0 20px ${glowColor}80`,\n                              `0 0 40px ${glowColor}`,\n                              `0 0 20px ${glowColor}80`\n                            ]\n                          }}\n                          transition={{\n                            height: { duration: 0.5, ease: \"easeInOut\" },\n                            backgroundColor: { duration: 0.3 },\n                            boxShadow: { duration: 1, repeat: Infinity }\n                          }}\n                          style={{\n                            minHeight: '4px'\n                          }}\n                        >\n                          {/* Glow Effect */}\n                          <motion.div\n                            className=\"absolute inset-0 rounded-t-lg blur-md\"\n                            animate={{\n                              backgroundColor: `${glowColor}40`,\n                              opacity: isSwapping || isComparing ? [0.6, 1, 0.6] : 0.4\n                            }}\n                            transition={{\n                              opacity: { duration: 0.5, repeat: isSwapping || isComparing ? Infinity : 0 }\n                            }}\n                          />\n                          \n                          {/* Value Label */}\n                          {array.length <= 30 && (\n                            <motion.div\n                              className=\"absolute -top-8 left-1/2 transform -translate-x-1/2 text-xs font-bold text-white opacity-0 group-hover:opacity-100 transition-opacity duration-200 whitespace-nowrap bg-gray-900/90 px-2 py-1 rounded border border-cyan-500/30\"\n                              initial={{ y: 10 }}\n                              whileHover={{ y: 0 }}\n                            >\n                              {element.value}\n                            </motion.div>\n                          )}\n\n                          {/* Sorted Checkmark */}\n                          {isSorted && (\n                            <motion.div\n                              initial={{ scale: 0, rotate: -180 }}\n                              animate={{ scale: 1, rotate: 0 }}\n                              className=\"absolute -top-6 left-1/2 transform -translate-x-1/2\"\n                            >\n                              <div className=\"w-4 h-4 rounded-full bg-green-500 flex items-center justify-center shadow-[0_0_15px_rgba(0,255,0,0.8)]\">\n                                <svg className=\"w-3 h-3 text-white\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={3} d=\"M5 13l4 4L19 7\" />\n                                </svg>\n                              </div>\n                            </motion.div>\n                          )}\n\n                          {/* Particle Effect on Swap */}\n                          {isSwapping && (\n                            <>\n                              {[...Array(5)].map((_, i) => (\n                                <motion.div\n                                  key={`particle-${i}`}\n                                  className=\"absolute w-1 h-1 rounded-full bg-pink-400\"\n                                  initial={{ \n                                    x: 0, \n                                    y: 0, \n                                    opacity: 1,\n                                    scale: 1\n                                  }}\n                                  animate={{ \n                                    x: (Math.random() - 0.5) * 40,\n                                    y: -Math.random() * 60 - 20,\n                                    opacity: 0,\n                                    scale: 0\n                                  }}\n                                  transition={{ \n                                    duration: 0.8,\n                                    delay: i * 0.05,\n                                    ease: \"easeOut\"\n                                  }}\n                                  style={{\n                                    left: '50%',\n                                    top: '0%'\n                                  }}\n                                />\n                              ))}\n                            </>\n                          )}\n                        </motion.div>\n                      </motion.div>\n                    );\n                  })}\n                </div>\n              )}\n              \n              <div className=\"h-full flex items-end justify-center gap-1\">\n                {(steps[currentStep]?.array || array).map((element, index) => {\n                  const isComparing = steps[currentStep]?.comparingIndices.includes(index);\n                  const isSwapping = steps[currentStep]?.swappingIndices.includes(index);\n                  const isSorted = steps[currentStep]?.sortedIndices.includes(index);\n                  \n                  const maxValue = Math.max(...(steps[currentStep]?.array || array).map(el => el.value), 1);\n                  const heightPercentage = (element.value / maxValue) * 100;\n                  \n                  const getBarColor = () => {\n                    if (isSorted) return '#00ff00';\n                    if (isSwapping) return '#ff0066';\n                    if (isComparing) return '#ffff00';\n                    return NEON_COLORS[index % NEON_COLORS.length];\n                  };\n\n                  const barColor = getBarColor();\n\n                  return (\n                    <motion.div\n                      key={element.id}\n                      className=\"relative flex-1 min-w-[8px] max-w-[60px]\"\n                      initial={{ opacity: 0, y: 20 }}\n                      animate={{ \n                        opacity: 1, \n                        y: 0,\n                        scale: isSwapping ? [1, 1.1, 1] : isComparing ? 1.05 : 1\n                      }}\n                      transition={{ \n                        duration: 0.3,\n                        scale: { duration: 0.4, repeat: isSwapping ? 2 : 0 }\n                      }}\n                    >\n                      {/* Trail effect during swaps */}\n                      {isSwapping && (\n                        <motion.div\n                          className=\"absolute inset-0 rounded-t-lg\"\n                          style={{\n                            background: `linear-gradient(to top, transparent, ${barColor})`,\n                            filter: 'blur(8px)',\n                          }}\n                          animate={{\n                            opacity: [0.3, 0.7, 0.3],\n                            scale: [1, 1.2, 1],\n                          }}\n                          transition={{\n                            duration: 0.6,\n                            repeat: Infinity,\n                          }}\n                        />\n                      )}\n\n                      {/* Main bar */}\n                      <motion.div\n                        className=\"relative w-full rounded-t-lg transition-all duration-300\"\n                        style={{\n                          height: `${heightPercentage}%`,\n                          minHeight: '20px',\n                          backgroundColor: barColor,\n                          boxShadow: `\n                            0 0 ${isSwapping ? '30px' : isComparing ? '25px' : '15px'} ${barColor}80,\n                            0 0 ${isSwapping ? '60px' : isComparing ? '50px' : '30px'} ${barColor}40,\n                            inset 0 0 20px ${barColor}60\n                          `,\n                        }}\n                        animate={{\n                          height: `${heightPercentage}%`,\n                          boxShadow: `\n                            0 0 ${isSwapping ? '30px' : isComparing ? '25px' : '15px'} ${barColor}80,\n                            0 0 ${isSwapping ? '60px' : isComparing ? '50px' : '30px'} ${barColor}40,\n                            inset 0 0 20px ${barColor}60\n                          `,\n                        }}\n                        transition={{\n                          height: { duration: 0.5, ease: 'easeInOut' },\n                          boxShadow: { duration: 0.3 }\n                        }}\n                      >\n                        {/* Glow effect overlay */}\n                        <motion.div\n                          className=\"absolute inset-0 rounded-t-lg\"\n                          style={{\n                            background: `linear-gradient(to top, transparent 0%, ${barColor}40 50%, ${barColor}80 100%)`,\n                          }}\n                          animate={{\n                            opacity: isSwapping ? [0.5, 1, 0.5] : isComparing ? [0.6, 0.9, 0.6] : 0.7,\n                          }}\n                          transition={{\n                            duration: isSwapping ? 0.4 : isComparing ? 0.6 : 1,\n                            repeat: (isSwapping || isComparing) ? Infinity : 0,\n                          }}\n                        />\n\n                        {/* Value label */}\n                        <motion.div\n                          className=\"absolute -top-8 left-1/2 transform -translate-x-1/2 text-xs font-bold whitespace-nowrap\"\n                          style={{ color: barColor }}\n                          animate={{\n                            scale: isSwapping ? [1, 1.3, 1] : isComparing ? 1.2 : 1,\n                            y: isSwapping ? [-2, -6, -2] : 0,\n                          }}\n                          transition={{ duration: 0.3 }}\n                        >\n                          {element.value}\n                        </motion.div>\n\n                        {/* Sorted checkmark indicator */}\n                        {isSorted && (\n                          <motion.div\n                            className=\"absolute -top-6 left-1/2 transform -translate-x-1/2\"\n                            initial={{ scale: 0, rotate: -180 }}\n                            animate={{ scale: 1, rotate: 0 }}\n                            transition={{ type: 'spring', stiffness: 200, damping: 10 }}\n                          >\n                            <div className=\"w-4 h-4 rounded-full bg-green-500 flex items-center justify-center shadow-lg shadow-green-500/50\">\n                              <svg className=\"w-3 h-3 text-white\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={3} d=\"M5 13l4 4L19 7\" />\n                              </svg>\n                            </div>\n                          </motion.div>\n                        )}\n                      </motion.div>\n\n                      {/* Comparison indicator pulse */}\n                      {isComparing && (\n                        <motion.div\n                          className=\"absolute -bottom-2 left-1/2 transform -translate-x-1/2 w-3 h-3 rounded-full\"\n                          style={{ backgroundColor: '#ffff00' }}\n                          animate={{\n                            scale: [1, 1.5, 1],\n                            opacity: [1, 0.5, 1],\n                          }}\n                          transition={{\n                            duration: 0.8,\n                            repeat: Infinity,\n                          }}\n                        />\n                      )}\n\n                      {/* Swap indicator arrows */}\n                      {isSwapping && (\n                        <motion.div\n                          className=\"absolute -bottom-6 left-1/2 transform -translate-x-1/2\"\n                          animate={{\n                            y: [0, -4, 0],\n                          }}\n                          transition={{\n                            duration: 0.5,\n                            repeat: Infinity,\n                          }}\n                        >\n                          <div className=\"text-pink-500 text-xl font-bold\">\u21c5</div>\n                        </motion.div>\n                      )}\n                    </motion.div>\n                  );\n                })\n              </div>\n            </div>\n\n            <motion.div\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ duration: 0.6, delay: 0.2 }}\n              className=\"mt-6 bg-gray-900/50 backdrop-blur-lg border border-cyan-500/30 rounded-xl p-6 shadow-2xl shadow-cyan-500/20\"\n            >\n              <div className=\"space-y-3\">\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-cyan-400 font-semibold tracking-wide\">PROGRESS</span>\n                  <motion.span \n                    key={currentStep}\n                    initial={{ scale: 1.3, color: '#00ffff' }}\n                    animate={{ scale: 1, color: '#67e8f9' }}\n                    transition={{ duration: 0.3 }}\n                    className=\"text-white font-mono bg-cyan-500/20 px-4 py-1 rounded-full text-sm border border-cyan-500/30\"\n                  >\n                    {steps.length > 0 ? Math.round((currentStep / steps.length) * 100) : 0}%\n                  </motion.span>\n                </div>\n                \n                <div className=\"relative h-4 bg-gray-800/80 rounded-full overflow-hidden border border-cyan-500/20\">\n                  <motion.div\n                    className=\"absolute inset-y-0 left-0 bg-gradient-to-r from-cyan-500 via-blue-500 to-purple-500 rounded-full\"\n                    initial={{ width: 0 }}\n                    animate={{ \n                      width: steps.length > 0 ? `${(currentStep / steps.length) * 100}%` : '0%'\n                    }}\n                    transition={{ duration: 0.5, ease: \"easeOut\" }}\n                  />\n                  <motion.div\n                    className=\"absolute inset-0 bg-gradient-to-r from-transparent via-white/30 to-transparent\"\n                    animate={{\n                      x: ['-100%', '200%']\n                    }}\n                    transition={{\n                      duration: 2,\n                      repeat: Infinity,\n                      ease: \"linear\"\n                    }}\n                    style={{\n                      width: '50%'\n                    }}\n                  />\n                  <motion.div\n                    className=\"absolute inset-0 rounded-full\"\n                    animate={{\n                      boxShadow: [\n                        '0 0 10px rgba(0, 255, 255, 0.3)',\n                        '0 0 20px rgba(0, 255, 255, 0.6)',\n                        '0 0 10px rgba(0, 255, 255, 0.3)'\n                      ]\n                    }}\n                    transition={{ duration: 1.5, repeat: Infinity }}\n                  />\n                </div>\n\n                <div className=\"flex items-center justify-between text-xs text-gray-400\">\n                  <span>Step {currentStep} of {steps.length}</span>\n                  {currentStep >= steps.length && steps.length > 0 && (\n                    <motion.span\n                      initial={{ opacity: 0, scale: 0.8 }}\n                      animate={{ opacity: 1, scale: 1 }}\n                      className=\"text-green-400 font-semibold flex items-center gap-1\"\n                    >\n                      \u2713 Complete\n                    </motion.span>\n                  )}\n                </div>\n              </div>\n            </motion.div>\n          </div>\n        </div>\n\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.8, delay: 0.3 }}\n          className=\"bg-gray-900/50 backdrop-blur-lg border border-cyan-500/30 rounded-xl p-6 shadow-2xl shadow-cyan-500/20\"\n        >\n          <div className=\"flex items-center gap-2 mb-6\">\n            <BarChart3 className=\"w-5 h-5 text-cyan-400\" />\n            <h3 className=\"text-lg font-bold text-cyan-300 tracking-wider\">LEGEND</h3>\n          </div>\n          \n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n            {/* Default State */}\n            <motion.div\n              className=\"flex items-center gap-3 p-4 bg-gray-800/50 rounded-lg border border-gray-700/50 hover:border-cyan-500/50 transition-all duration-300\"\n              whileHover={{ scale: 1.05, boxShadow: '0 0 20px rgba(0, 255, 255, 0.3)' }}\n            >\n              <motion.div\n                className=\"w-6 h-12 bg-gradient-to-t from-cyan-500 to-cyan-400 rounded-sm shadow-lg\"\n                animate={{\n                  boxShadow: [\n                    '0 0 10px rgba(0, 255, 255, 0.5)',\n                    '0 0 20px rgba(0, 255, 255, 0.8)',\n                    '0 0 10px rgba(0, 255, 255, 0.5)'\n                  ]\n                }}\n                transition={{ duration: 2, repeat: Infinity }}\n              />\n              <div>\n                <div className=\"text-sm font-semibold text-white\">Default</div>\n                <div className=\"text-xs text-gray-400\">Unsorted</div>\n              </div>\n            </motion.div>\n\n            {/* Comparing State */}\n            <motion.div\n              className=\"flex items-center gap-3 p-4 bg-gray-800/50 rounded-lg border border-gray-700/50 hover:border-yellow-500/50 transition-all duration-300\"\n              whileHover={{ scale: 1.05, boxShadow: '0 0 20px rgba(255, 255, 0, 0.3)' }}\n            >\n              <motion.div\n                className=\"w-6 h-12 bg-gradient-to-t from-yellow-500 to-yellow-400 rounded-sm shadow-lg\"\n                animate={{\n                  boxShadow: [\n                    '0 0 15px rgba(255, 255, 0, 0.6)',\n                    '0 0 30px rgba(255, 255, 0, 1)',\n                    '0 0 15px rgba(255, 255, 0, 0.6)'\n                  ],\n                  scale: [1, 1.1, 1]\n                }}\n                transition={{ duration: 1, repeat: Infinity }}\n              />\n              <div>\n                <div className=\"text-sm font-semibold text-white\">Comparing</div>\n                <div className=\"text-xs text-gray-400\">Active</div>\n              </div>\n            </motion.div>\n\n            {/* Swapping State */}\n            <motion.div\n              className=\"flex items-center gap-3 p-4 bg-gray-800/50 rounded-lg border border-gray-700/50 hover:border-pink-500/50 transition-all duration-300\"\n              whileHover={{ scale: 1.05, boxShadow: '0 0 20px rgba(255, 0, 102, 0.3)' }}\n            >\n              <motion.div\n                className=\"w-6 h-12 bg-gradient-to-t from-pink-500 to-pink-400 rounded-sm shadow-lg\"\n                animate={{\n                  boxShadow: [\n                    '0 0 15px rgba(255, 0, 102, 0.6)',\n                    '0 0 30px rgba(255, 0, 102, 1)',\n                    '0 0 15px rgba(255, 0, 102, 0.6)'\n                  ],\n                  x: [-2, 2, -2]\n                }}\n                transition={{ duration: 0.8, repeat: Infinity }}\n              />\n              <div>\n                <div className=\"text-sm font-semibold text-white\">Swapping</div>\n                <div className=\"text-xs text-gray-400\">Moving</div>\n              </div>\n            </motion.div>\n\n            {/* Sorted State */}\n            <motion.div\n              className=\"flex items-center gap-3 p-4 bg-gray-800/50 rounded-lg border border-gray-700/50 hover:border-green-500/50 transition-all duration-300\"\n              whileHover={{ scale: 1.05, boxShadow: '0 0 20px rgba(0, 255, 0, 0.3)' }}\n            >\n              <motion.div\n                className=\"w-6 h-12 bg-gradient-to-t from-green-500 to-green-400 rounded-sm shadow-lg\"\n                animate={{\n                  boxShadow: [\n                    '0 0 10px rgba(0, 255, 0, 0.5)',\n                    '0 0 20px rgba(0, 255, 0, 0.8)',\n                    '0 0 10px rgba(0, 255, 0, 0.5)'\n                  ]\n                }}\n                transition={{ duration: 2, repeat: Infinity }}\n              />\n              <div>\n                <div className=\"text-sm font-semibold text-white\">Sorted</div>\n                <div className=\"text-xs text-gray-400\">Complete</div>\n              </div>\n            </motion.div>\n          </div>\n\n          {/* Additional Info */}\n          <motion.div\n            className=\"mt-6 p-4 bg-gradient-to-r from-purple-500/10 to-cyan-500/10 rounded-lg border border-purple-500/30\"\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            transition={{ delay: 0.5 }}\n          >\n            <div className=\"flex items-start gap-3\">\n              <Zap className=\"w-5 h-5 text-purple-400 mt-0.5 flex-shrink-0\" />\n              <div className=\"text-sm text-gray-300\">\n                <span className=\"font-semibold text-purple-300\">Pro Tip:</span> Watch the bars glow and pulse as they compare values. Swapping bars leave neon trails as they move to their new positions!\n              </div>\n            </div>\n          </motion.div>\n        </motion.div>\n      </div>\n    </div>\n  );\n}",
  "error": null,
  "overall_score": 46,
  "code_quality_score": 14,
  "architecture_score": 12,
  "performance_score": 11,
  "accessibility_score": 9,
  "metadata": {
    "document_id": "eval_room_40b7ef3a7cc3",
    "prompt_category": "creative",
    "prompt_complexity": 9.0
  },
  "raw_response": {
    "document_id": "eval_room_40b7ef3a7cc3",
    "mode": "parallel",
    "prompt": "Build a captivating algorithm visualizer with neon colored bars, smooth height transitions, glowing comparison indicators, trail effects during swaps, and a futuristic dashboard design with animated controls",
    "content": "import { useState, useCallback } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Slider } from '@/components/ui/slider';\nimport { Play, Pause, RotateCcw, Zap, BarChart3 } from 'lucide-react';\nimport { motion } from 'framer-motion';\n\ninterface ArrayElement {\n  value: number;\n  id: string;\n  isComparing?: boolean;\n  isSwapping?: boolean;\n  isSorted?: boolean;\n}\n\ninterface AlgorithmStep {\n  array: ArrayElement[];\n  comparingIndices: number[];\n  swappingIndices: number[];\n  sortedIndices: number[];\n}\n\ntype AlgorithmType = 'bubble' | 'quick' | 'merge' | 'insertion';\n\nconst NEON_COLORS = [\n  '#00ffff',\n  '#ff00ff', \n  '#00ff00',\n  '#ffff00',\n  '#ff0066',\n  '#00ffaa'\n];\n\nconst mockAlgorithms = [\n  { id: 'bubble', name: 'Bubble Sort', complexity: 'O(n\u00b2)' },\n  { id: 'quick', name: 'Quick Sort', complexity: 'O(n log n)' },\n  { id: 'merge', name: 'Merge Sort', complexity: 'O(n log n)' },\n  { id: 'insertion', name: 'Insertion Sort', complexity: 'O(n\u00b2)' }\n];\n\nexport default function AlgorithmVisualizer() {\n  const [array, setArray] = useState<ArrayElement[]>([]);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [speed, setSpeed] = useState([50]);\n  const [arraySize, setArraySize] = useState([20]);\n  const [selectedAlgorithm, setSelectedAlgorithm] = useState<AlgorithmType>('bubble');\n  const [currentStep, setCurrentStep] = useState(0);\n  const [steps, setSteps] = useState<AlgorithmStep[]>([]);\n\n  const generateRandomArray = useCallback(() => {\n    const newArray: ArrayElement[] = Array.from({ length: arraySize[0] }, (_, index) => ({\n      value: Math.floor(Math.random() * 100) + 5,\n      id: `element-${index}-${Date.now()}`,\n      isComparing: false,\n      isSwapping: false,\n      isSorted: false\n    }));\n    setArray(newArray);\n    setSteps([]);\n    setCurrentStep(0);\n    setIsPlaying(false);\n  }, [arraySize]);\n\n  const resetVisualization = useCallback(() => {\n\n    setIsPlaying(false);\n    setCurrentStep(0);\n    setSteps([]);\n    generateRandomArray();\n  }, [generateRandomArray]);\n\n  // Animation effect for step-by-step visualization\n  const animateSteps = useCallback(() => {\n    if (currentStep < steps.length && isPlaying) {\n      const timer = setTimeout(() => {\n        setCurrentStep(prev => prev + 1);\n      }, 1000 - speed[0] * 9); // Convert speed slider (0-100) to delay (1000ms-100ms)\n      \n      return () => clearTimeout(timer);\n    } else if (currentStep >= steps.length && isPlaying) {\n      setIsPlaying(false);\n    }\n  }, [currentStep, steps.length, isPlaying, speed]);\n\n  // Run animation effect\n  React.useEffect(() => {\n    const cleanup = animateSteps();\n    return cleanup;\n  }, [animateSteps]);\n  const startVisualization = useCallback(() => {\n    if (steps.length === 0) return;\n    setIsPlaying(true);\n    if (currentStep >= steps.length) {\n      setCurrentStep(0);\n    }\n  }, [steps, speed, currentStep]);\n\n  const pauseVisualization = useCallback(() => {\n    setIsPlaying(false);\n  }, []);\n\n  const generateSortingSteps = useCallback((algorithm: AlgorithmType) => {\n    const sortedArray = [...array];\n    const newSteps: AlgorithmStep[] = [];\n\n    const addStep = (arr: ArrayElement[], comparing: number[] = [], swapping: number[] = [], sorted: number[] = []) => {\n      newSteps.push({\n        array: arr.map(el => ({ ...el })),\n        comparingIndices: [...comparing],\n        swappingIndices: [...swapping],\n        sortedIndices: [...sorted]\n      });\n    };\n\n    // Initial state\n    addStep(sortedArray);\n\n    switch (algorithm) {\n      case 'bubble': {\n        const sortedSet = new Set<number>();\n        for (let i = 0; i < sortedArray.length - 1; i++) {\n          for (let j = 0; j < sortedArray.length - i - 1; j++) {\n            // Comparing\n            addStep(sortedArray, [j, j + 1], [], Array.from(sortedSet));\n            \n            if (sortedArray[j].value > sortedArray[j + 1].value) {\n              // Swapping\n              addStep(sortedArray, [], [j, j + 1], Array.from(sortedSet));\n              [sortedArray[j], sortedArray[j + 1]] = [sortedArray[j + 1], sortedArray[j]];\n              addStep(sortedArray, [], [], Array.from(sortedSet));\n            }\n          }\n          sortedSet.add(sortedArray.length - i - 1);\n          addStep(sortedArray, [], [], Array.from(sortedSet));\n        }\n        sortedSet.add(0);\n        addStep(sortedArray, [], [], Array.from(sortedSet));\n        break;\n      }\n\n      case 'insertion': {\n        const sortedSet = new Set<number>([0]);\n        addStep(sortedArray, [], [], [0]);\n        \n        for (let i = 1; i < sortedArray.length; i++) {\n          const key = sortedArray[i];\n          let j = i - 1;\n          \n          addStep(sortedArray, [i], [], Array.from(sortedSet));\n          \n          while (j >= 0 && sortedArray[j].value > key.value) {\n            addStep(sortedArray, [j, j + 1], [], Array.from(sortedSet));\n            addStep(sortedArray, [], [j, j + 1], Array.from(sortedSet));\n            sortedArray[j + 1] = sortedArray[j];\n            addStep(sortedArray, [], [], Array.from(sortedSet));\n            j--;\n          }\n          \n          sortedArray[j + 1] = key;\n          sortedSet.add(i);\n          addStep(sortedArray, [], [], Array.from(sortedSet));\n        }\n        break;\n      }\n\n      case 'quick': {\n        const sortedSet = new Set<number>();\n        \n        const partition = (low: number, high: number): number => {\n          const pivot = sortedArray[high];\n          addStep(sortedArray, [high], [], Array.from(sortedSet));\n          let i = low - 1;\n\n          for (let j = low; j < high; j++) {\n            addStep(sortedArray, [j, high], [], Array.from(sortedSet));\n            \n            if (sortedArray[j].value < pivot.value) {\n              i++;\n              if (i !== j) {\n                addStep(sortedArray, [], [i, j], Array.from(sortedSet));\n                [sortedArray[i], sortedArray[j]] = [sortedArray[j], sortedArray[i]];\n                addStep(sortedArray, [], [], Array.from(sortedSet));\n              }\n            }\n          }\n          \n          addStep(sortedArray, [], [i + 1, high], Array.from(sortedSet));\n          [sortedArray[i + 1], sortedArray[high]] = [sortedArray[high], sortedArray[i + 1]];\n          sortedSet.add(i + 1);\n          addStep(sortedArray, [], [], Array.from(sortedSet));\n          \n          return i + 1;\n        };\n\n        const quickSort = (low: number, high: number) => {\n          if (low < high) {\n            const pi = partition(low, high);\n            quickSort(low, pi - 1);\n            quickSort(pi + 1, high);\n          } else if (low === high) {\n            sortedSet.add(low);\n            addStep(sortedArray, [], [], Array.from(sortedSet));\n          }\n        };\n\n        quickSort(0, sortedArray.length - 1);\n        break;\n      }\n\n      case 'merge': {\n        const sortedSet = new Set<number>();\n        \n        const merge = (left: number, mid: number, right: number) => {\n          const leftArr = sortedArray.slice(left, mid + 1);\n          const rightArr = sortedArray.slice(mid + 1, right + 1);\n          \n          let i = 0, j = 0, k = left;\n          \n          while (i < leftArr.length && j < rightArr.length) {\n            addStep(sortedArray, [left + i, mid + 1 + j], [], Array.from(sortedSet));\n            \n            if (leftArr[i].value <= rightArr[j].value) {\n              sortedArray[k] = leftArr[i];\n              i++;\n            } else {\n              sortedArray[k] = rightArr[j];\n              j++;\n            }\n            addStep(sortedArray, [], [k], Array.from(sortedSet));\n            k++;\n          }\n          \n          while (i < leftArr.length) {\n            sortedArray[k] = leftArr[i];\n            addStep(sortedArray, [], [k], Array.from(sortedSet));\n            i++;\n            k++;\n          }\n          \n          while (j < rightArr.length) {\n            sortedArray[k] = rightArr[j];\n            addStep(sortedArray, [], [k], Array.from(sortedSet));\n            j++;\n            k++;\n          }\n          \n          if (left === 0 && right === sortedArray.length - 1) {\n            for (let idx = left; idx <= right; idx++) {\n              sortedSet.add(idx);\n            }\n          }\n          addStep(sortedArray, [], [], Array.from(sortedSet));\n        };\n\n        const mergeSort = (left: number, right: number) => {\n          if (left < right) {\n            const mid = Math.floor((left + right) / 2);\n            mergeSort(left, mid);\n            mergeSort(mid + 1, right);\n            merge(left, mid, right);\n          } else if (left === right && sortedArray.length === 1) {\n            sortedSet.add(left);\n            addStep(sortedArray, [], [], Array.from(sortedSet));\n          }\n        };\n\n        mergeSort(0, sortedArray.length - 1);\n        break;\n      }\n    }\n\n    setSteps(newSteps);\n    setCurrentStep(0);\n  }, [array]);\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-gray-900 via-purple-900 to-gray-900 p-8\">\n      <div className=\"max-w-7xl mx-auto space-y-8\">\n        <motion.div\n          initial={{ opacity: 0, y: -20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.8 }}\n          className=\"text-center space-y-4\"\n        >\n          <motion.h1\n            className=\"text-6xl font-bold bg-gradient-to-r from-cyan-400 via-purple-400 to-pink-400 bg-clip-text text-transparent\"\n            animate={{\n              textShadow: [\n                '0 0 20px rgba(0, 255, 255, 0.5)',\n                '0 0 40px rgba(255, 0, 255, 0.5)',\n                '0 0 20px rgba(0, 255, 255, 0.5)'\n              ]\n            }}\n            transition={{ duration: 2, repeat: Infinity }}\n          >\n            Algorithm Visualizer\n          </motion.h1>\n          <div className=\"flex items-center justify-center gap-4\">\n            <motion.div\n              className=\"px-6 py-2 bg-purple-500/20 border border-purple-400/50 rounded-lg backdrop-blur-sm\"\n              whileHover={{ scale: 1.05, boxShadow: '0 0 20px rgba(168, 85, 247, 0.6)' }}\n            >\n              <span className=\"text-2xl font-semibold text-purple-300\">\n                {mockAlgorithms.find(a => a.id === selectedAlgorithm)?.name || 'Select Algorithm'}\n              </span>\n            </motion.div>\n            <motion.div\n              className=\"px-4 py-2 bg-cyan-500/20 border border-cyan-400/50 rounded-full backdrop-blur-sm\"\n              animate={{\n                boxShadow: [\n                  '0 0 10px rgba(0, 255, 255, 0.3)',\n                  '0 0 20px rgba(0, 255, 255, 0.6)',\n                  '0 0 10px rgba(0, 255, 255, 0.3)'\n                ]\n              }}\n              transition={{ duration: 1.5, repeat: Infinity }}\n            >\n              <span className=\"text-lg font-mono text-cyan-300\">\n                {mockAlgorithms.find(a => a.id === selectedAlgorithm)?.complexity || 'O(?)'}\n              </span>\n            </motion.div>\n          </div>\n        </motion.div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-6\">\n          <div className=\"lg:col-span-1 space-y-6\">\n            <motion.div\n              initial={{ opacity: 0, x: -50 }}\n              animate={{ opacity: 1, x: 0 }}\n              transition={{ duration: 0.6 }}\n              className=\"bg-gray-900/50 backdrop-blur-lg border border-cyan-500/30 rounded-xl p-6 shadow-[0_0_30px_rgba(0,255,255,0.3)] hover:shadow-[0_0_50px_rgba(0,255,255,0.5)] transition-all duration-300\"\n            >\n              <div className=\"space-y-6\">\n                {/* Algorithm Selection */}\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center gap-2 mb-4\">\n                    <Zap className=\"w-5 h-5 text-cyan-400\" />\n                    <h3 className=\"text-cyan-400 font-bold text-lg tracking-wider\">ALGORITHM</h3>\n                  </div>\n                  <div className=\"grid grid-cols-1 gap-2\">\n                    {mockAlgorithms.map((algo) => (\n                      <motion.button\n                        key={algo.id}\n                        whileHover={{ scale: 1.02 }}\n                        whileTap={{ scale: 0.98 }}\n                        onClick={() => setSelectedAlgorithm(algo.id as AlgorithmType)}\n                        className={`p-3 rounded-lg border transition-all duration-300 text-left ${\n                          selectedAlgorithm === algo.id\n                            ? 'bg-cyan-500/20 border-cyan-400 shadow-[0_0_20px_rgba(0,255,255,0.4)]'\n                            : 'bg-gray-800/50 border-gray-700 hover:border-cyan-500/50'\n                        }`}\n                      >\n                        <div className=\"font-semibold text-white\">{algo.name}</div>\n                        <div className=\"text-xs text-gray-400 mt-1\">{algo.complexity}</div>\n                      </motion.button>\n                    ))}\n                  </div>\n                </div>\n\n                {/* Speed Control */}\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <label className=\"text-cyan-400 font-semibold tracking-wide\">SPEED</label>\n                    <span className=\"text-white font-mono bg-cyan-500/20 px-3 py-1 rounded-full text-sm border border-cyan-500/30\">\n                      {speed[0]}%\n                    </span>\n                  </div>\n                  <Slider\n                    value={speed}\n                    onValueChange={setSpeed}\n                    min={10}\n                    max={100}\n                    step={10}\n                    className=\"cursor-pointer\"\n                    disabled={isPlaying}\n                  />\n                </div>\n\n                {/* Array Size Control */}\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <label className=\"text-cyan-400 font-semibold tracking-wide\">SIZE</label>\n                    <span className=\"text-white font-mono bg-purple-500/20 px-3 py-1 rounded-full text-sm border border-purple-500/30\">\n                      {arraySize[0]}\n                    </span>\n                  </div>\n                  <Slider\n                    value={arraySize}\n                    onValueChange={setArraySize}\n                    min={5}\n                    max={50}\n                    step={5}\n                    className=\"cursor-pointer\"\n                    disabled={isPlaying}\n                  />\n                </div>\n\n                {/* Control Buttons */}\n                <div className=\"space-y-3 pt-4 border-t border-cyan-500/20\">\n                  <Button\n                    onClick={isPlaying ? pauseVisualization : startVisualization}\n                    disabled={steps.length === 0 || currentStep >= steps.length}\n                    className=\"w-full bg-gradient-to-r from-cyan-500 to-blue-500 hover:from-cyan-400 hover:to-blue-400 text-white font-bold py-6 rounded-lg shadow-[0_0_20px_rgba(0,255,255,0.5)] hover:shadow-[0_0_30px_rgba(0,255,255,0.7)] transition-all duration-300 disabled:opacity-50 disabled:cursor-not-allowed\"\n                  >\n                    {isPlaying ? (\n                      <>\n                        <Pause className=\"w-5 h-5 mr-2\" />\n                        PAUSE\n                      </>\n                    ) : (\n                      <>\n                        <Play className=\"w-5 h-5 mr-2\" />\n                        START\n                      </>\n                    )}\n                  </Button>\n\n                  <Button\n                    onClick={resetVisualization}\n                    disabled={isPlaying}\n                    className=\"w-full bg-gradient-to-r from-purple-500 to-pink-500 hover:from-purple-400 hover:to-pink-400 text-white font-bold py-6 rounded-lg shadow-[0_0_20px_rgba(255,0,255,0.5)] hover:shadow-[0_0_30px_rgba(255,0,255,0.7)] transition-all duration-300 disabled:opacity-50 disabled:cursor-not-allowed\"\n                  >\n                    <RotateCcw className=\"w-5 h-5 mr-2\" />\n                    RESET\n                  </Button>\n\n                  <Button\n                    onClick={() => {\n                      generateRandomArray();\n                      generateSortingSteps(selectedAlgorithm);\n                    }}\n                    disabled={isPlaying}\n                    className=\"w-full bg-gradient-to-r from-green-500 to-emerald-500 hover:from-green-400 hover:to-emerald-400 text-white font-bold py-6 rounded-lg shadow-[0_0_20px_rgba(0,255,170,0.5)] hover:shadow-[0_0_30px_rgba(0,255,170,0.7)] transition-all duration-300 disabled:opacity-50 disabled:cursor-not-allowed\"\n                  >\n                    <BarChart3 className=\"w-5 h-5 mr-2\" />\n                    GENERATE\n                  </Button>\n                </div>\n\n                {/* Stats Display */}\n                <div className=\"pt-4 border-t border-cyan-500/20 space-y-2\">\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-gray-400 text-sm\">Current Step:</span>\n                    <span className=\"text-cyan-400 font-mono font-bold\">\n                      {currentStep} / {steps.length}\n                    </span>\n                  </div>\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-gray-400 text-sm\">Array Length:</span>\n                    <span className=\"text-purple-400 font-mono font-bold\">{array.length}</span>\n                  </div>\n                </div>\n              </div>\n            </motion.div>\n            \n            <div className=\"bg-gray-900/50 backdrop-blur-lg border border-cyan-500/30 rounded-xl p-6 shadow-2xl shadow-cyan-500/20\">\n              <div className=\"space-y-6\">\n                <div>\n                  <h3 className=\"text-sm font-semibold text-cyan-400 mb-3 flex items-center gap-2\">\n                    <Zap className=\"w-4 h-4\" />\n                    Algorithm\n                  </h3>\n                  <div className=\"grid grid-cols-1 gap-2\">\n                    {mockAlgorithms.map((algo) => (\n                      <motion.button\n                        key={algo.id}\n                        onClick={() => setSelectedAlgorithm(algo.id as AlgorithmType)}\n                        className={`relative p-3 rounded-lg border transition-all duration-300 text-left ${\n                          selectedAlgorithm === algo.id\n                            ? 'bg-cyan-500/20 border-cyan-400 shadow-lg shadow-cyan-500/50'\n                            : 'bg-gray-800/50 border-gray-700 hover:border-cyan-500/50 hover:shadow-md hover:shadow-cyan-500/30'\n                        }`}\n                        whileHover={{ scale: 1.02 }}\n                        whileTap={{ scale: 0.98 }}\n                      >\n                        <div className=\"flex flex-col gap-1\">\n                          <span className={`text-sm font-medium ${\n                            selectedAlgorithm === algo.id ? 'text-cyan-300' : 'text-gray-300'\n                          }`}>\n                            {algo.name}\n                          </span>\n                          <span className={`text-xs ${\n                            selectedAlgorithm === algo.id ? 'text-cyan-400/80' : 'text-gray-500'\n                          }`}>\n                            {algo.complexity}\n                          </span>\n                        </div>\n                        {selectedAlgorithm === algo.id && (\n                          <motion.div\n                            className=\"absolute inset-0 rounded-lg bg-cyan-500/10\"\n                            layoutId=\"algorithmSelector\"\n                            transition={{ type: \"spring\", bounce: 0.2, duration: 0.6 }}\n                          />\n                        )}\n                      </motion.button>\n                    ))}\n                  </div>\n                </div></parameter>\n</invoke>\n\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <label className=\"text-sm font-medium text-cyan-400\">Array Size</label>\n                    <span className=\"text-xs text-cyan-300 font-mono\">{arraySize[0]}</span>\n                  </div>\n                  <Slider\n                    value={arraySize}\n                    onValueChange={setArraySize}\n                    min={5}\n                    max={50}\n                    step={1}\n                    className=\"w-full\"\n                  />\n                </div>\n\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <label className=\"text-sm font-medium text-purple-400\">Speed</label>\n                    <span className=\"text-xs text-purple-300 font-mono\">{speed[0]}ms</span>\n                  </div>\n                  <Slider\n                    value={speed}\n                    onValueChange={setSpeed}\n                    min={10}\n                    max={200}\n                    step={10}\n                    className=\"w-full\"\n                  />\n                </div>\n\n                <div className=\"space-y-3\">\n                  <Button\n                    onClick={isPlaying ? pauseVisualization : startVisualization}\n                    disabled={steps.length === 0 || (currentStep >= steps.length && !isPlaying)}\n                    className=\"w-full bg-gradient-to-r from-cyan-500 to-blue-500 hover:from-cyan-400 hover:to-blue-400 text-white font-semibold py-6 rounded-lg shadow-lg shadow-cyan-500/50 hover:shadow-cyan-400/70 transition-all duration-300 disabled:opacity-50 disabled:cursor-not-allowed\"\n                  >\n                    <motion.div\n                      className=\"flex items-center justify-center gap-2\"\n                      animate={isPlaying ? { scale: [1, 1.05, 1] } : {}}\n                      transition={{ duration: 1, repeat: isPlaying ? Infinity : 0 }}\n                    >\n                      {isPlaying ? (\n                        <>\n                          <Pause className=\"w-5 h-5\" />\n                          <span>Pause</span>\n                        </>\n                      ) : (\n                        <>\n                          <Play className=\"w-5 h-5\" />\n                          <span>Play</span>\n                        </>\n                      )}\n                    </motion.div>\n                  </Button>\n\n                  <Button\n                    onClick={resetVisualization}\n                    variant=\"outline\"\n                    className=\"w-full border-2 border-purple-500 bg-purple-500/10 hover:bg-purple-500/20 text-purple-300 hover:text-purple-200 font-semibold py-6 rounded-lg shadow-lg shadow-purple-500/30 hover:shadow-purple-400/50 transition-all duration-300\"\n                  >\n                    <motion.div\n                      className=\"flex items-center justify-center gap-2\"\n                      whileHover={{ rotate: -180 }}\n                      transition={{ duration: 0.5 }}\n                    >\n                      <RotateCcw className=\"w-5 h-5\" />\n                      <span>Reset</span>\n                    </motion.div>\n                  </Button>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"bg-gray-900/50 backdrop-blur-lg border border-purple-500/30 rounded-xl p-6 shadow-2xl shadow-purple-500/20\">\n              <div className=\"flex items-center gap-2 mb-4\">\n                <BarChart3 className=\"w-5 h-5 text-purple-400\" />\n                <h3 className=\"text-lg font-bold text-purple-300\">Statistics</h3>\n              </div>\n              \n              <div className=\"space-y-4\">\n                <div className=\"bg-gray-800/50 rounded-lg p-4 border border-cyan-500/20\">\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <span className=\"text-sm text-cyan-400\">Comparisons</span>\n                    <motion.span \n                      key={steps[currentStep]?.comparingIndices.length || 0}\n                      initial={{ scale: 1.5, color: '#00ffff' }}\n                      animate={{ scale: 1, color: '#67e8f9' }}\n                      className=\"text-2xl font-bold font-mono text-cyan-300\"\n                    >\n                      {currentStep > 0 ? currentStep : 0}\n                    </motion.span>\n                  </div>\n                  <div className=\"h-1 bg-gray-700 rounded-full overflow-hidden\">\n                    <motion.div \n                      className=\"h-full bg-gradient-to-r from-cyan-500 to-cyan-400\"\n                      initial={{ width: 0 }}\n                      animate={{ width: `${steps.length > 0 ? (currentStep / steps.length) * 100 : 0}%` }}\n                      transition={{ duration: 0.3 }}\n                    />\n                  </div>\n                </div>\n\n                <div className=\"bg-gray-800/50 rounded-lg p-4 border border-purple-500/20\">\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <span className=\"text-sm text-purple-400\">Swaps</span>\n                    <motion.span \n                      key={steps[currentStep]?.swappingIndices.length || 0}\n                      initial={{ scale: 1.5, color: '#ff00ff' }}\n                      animate={{ scale: 1, color: '#e879f9' }}\n                      className=\"text-2xl font-bold font-mono text-purple-300\"\n                    >\n                      {steps.slice(0, currentStep).filter(s => s.swappingIndices.length > 0).length}\n                    </motion.span>\n                  </div>\n                  <div className=\"h-1 bg-gray-700 rounded-full overflow-hidden\">\n                    <motion.div \n                      className=\"h-full bg-gradient-to-r from-purple-500 to-pink-500\"\n                      initial={{ width: 0 }}\n                      animate={{ width: `${steps.length > 0 ? (steps.slice(0, currentStep).filter(s => s.swappingIndices.length > 0).length / steps.length) * 100 : 0}%` }}\n                      transition={{ duration: 0.3 }}\n                    />\n                  </div>\n                </div>\n\n                <div className=\"bg-gray-800/50 rounded-lg p-4 border border-green-500/20\">\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <span className=\"text-sm text-green-400\">Progress</span>\n                    <motion.span \n                      key={currentStep}\n                      initial={{ scale: 1.5, color: '#00ff00' }}\n                      animate={{ scale: 1, color: '#86efac' }}\n                      className=\"text-2xl font-bold font-mono text-green-300\"\n                    >\n                      {steps.length > 0 ? Math.round((currentStep / steps.length) * 100) : 0}%\n                    </motion.span>\n                  </div>\n                  <div className=\"h-1 bg-gray-700 rounded-full overflow-hidden\">\n                    <motion.div \n                      className=\"h-full bg-gradient-to-r from-green-500 to-emerald-400\"\n                      initial={{ width: 0 }}\n                      animate={{ width: `${steps.length > 0 ? (currentStep / steps.length) * 100 : 0}%` }}\n                      transition={{ duration: 0.3 }}\n                    />\n                  </div>\n                </div>\n\n                <div className=\"bg-gray-800/50 rounded-lg p-4 border border-yellow-500/20\">\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-sm text-yellow-400\">Sorted Elements</span>\n                    <span className=\"text-2xl font-bold font-mono text-yellow-300\">\n                      {steps[currentStep]?.sortedIndices.length || 0} / {array.length}\n                    </span>\n                  </div>\n                </div>\n\n                <div className=\"bg-gradient-to-r from-cyan-500/10 to-purple-500/10 rounded-lg p-4 border border-cyan-500/30\">\n                  <div className=\"text-xs text-cyan-300 mb-1\">Algorithm</div>\n                  <div className=\"text-lg font-bold text-white\">\n                    {mockAlgorithms.find(a => a.id === selectedAlgorithm)?.name}\n                  </div>\n                  <div className=\"text-xs text-purple-400 mt-1 font-mono\">\n                    {mockAlgorithms.find(a => a.id === selectedAlgorithm)?.complexity}\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"lg:col-span-3\">\n            <div className=\"bg-gray-900/50 backdrop-blur-lg border border-purple-500/30 rounded-xl p-8 shadow-2xl shadow-purple-500/20 min-h-[600px]\">\n                            {array.length === 0 ? (\n                <motion.div\n                  initial={{ opacity: 0, scale: 0.8 }}\n                  animate={{ opacity: 1, scale: 1 }}\n                  transition={{ duration: 0.6 }}\n                  className=\"flex flex-col items-center justify-center h-full space-y-6\"\n                >\n                  <motion.div\n                    animate={{\n                      rotate: [0, 360],\n                      scale: [1, 1.2, 1]\n                    }}\n                    transition={{ duration: 3, repeat: Infinity }}\n                    className=\"relative\"\n                  >\n                    <BarChart3 className=\"w-24 h-24 text-cyan-400\" />\n                    <motion.div\n                      className=\"absolute inset-0 blur-xl bg-cyan-400/30 rounded-full\"\n                      animate={{\n                        scale: [1, 1.5, 1],\n                        opacity: [0.3, 0.6, 0.3]\n                      }}\n                      transition={{ duration: 2, repeat: Infinity }}\n                    />\n                  </motion.div>\n                  <div className=\"text-center space-y-2\">\n                    <h3 className=\"text-2xl font-bold text-cyan-300\">Ready to Visualize</h3>\n                    <p className=\"text-gray-400\">Generate an array to begin</p>\n                  </div>\n                </motion.div>\n              ) : (\n                <div className=\"relative w-full h-full flex items-end justify-center gap-1 px-4\">\n                  {/* Comparison Indicators */}\n                  {steps.length > 0 && currentStep < steps.length && steps[currentStep].comparingIndices.length > 0 && (\n                    <>\n                      {steps[currentStep].comparingIndices.map((index, i) => {\n                        const barWidth = 100 / array.length;\n                        const leftPosition = index * barWidth + barWidth / 2;\n                        \n                        return (\n                          <motion.div\n                            key={`compare-${index}-${i}`}\n                            initial={{ opacity: 0, y: -20 }}\n                            animate={{ \n                              opacity: [0.5, 1, 0.5],\n                              y: 0,\n                              scale: [1, 1.2, 1]\n                            }}\n                            transition={{ \n                              duration: 0.6,\n                              repeat: Infinity,\n                              repeatType: \"reverse\"\n                            }}\n                            className=\"absolute top-0 pointer-events-none z-20\"\n                            style={{\n                              left: `${leftPosition}%`,\n                              transform: 'translateX(-50%)'\n                            }}\n                          >\n                            <div className=\"flex flex-col items-center\">\n                              <motion.div\n                                className=\"w-3 h-3 rounded-full bg-yellow-400 shadow-[0_0_20px_rgba(250,204,21,0.8)]\"\n                                animate={{\n                                  boxShadow: [\n                                    '0 0 20px rgba(250,204,21,0.8)',\n                                    '0 0 40px rgba(250,204,21,1)',\n                                    '0 0 20px rgba(250,204,21,0.8)'\n                                  ]\n                                }}\n                                transition={{ duration: 0.8, repeat: Infinity }}\n                              />\n                              <motion.div\n                                className=\"w-0.5 h-8 bg-gradient-to-b from-yellow-400 to-transparent\"\n                                animate={{\n                                  opacity: [0.6, 1, 0.6]\n                                }}\n                                transition={{ duration: 0.8, repeat: Infinity }}\n                              />\n                            </div>\n                          </motion.div>\n                        );\n                      })}\n                    </>\n                  )}\n\n                  {/* Swap Trail Effects */}\n                  {steps.length > 0 && currentStep < steps.length && steps[currentStep].swappingIndices.length > 0 && (\n                    <>\n                      {steps[currentStep].swappingIndices.map((index, i) => {\n                        const barWidth = 100 / array.length;\n                        const leftPosition = index * barWidth + barWidth / 2;\n                        \n                        return (\n                          <motion.div\n                            key={`swap-${index}-${i}`}\n                            initial={{ opacity: 0, scale: 0 }}\n                            animate={{ \n                              opacity: [0, 1, 0],\n                              scale: [0, 2, 3],\n                            }}\n                            transition={{ \n                              duration: 1,\n                              ease: \"easeOut\"\n                            }}\n                            className=\"absolute bottom-0 pointer-events-none z-10\"\n                            style={{\n                              left: `${leftPosition}%`,\n                              transform: 'translateX(-50%)',\n                              height: '100%'\n                            }}\n                          >\n                            <div className=\"w-full h-full relative\">\n                              <motion.div\n                                className=\"absolute inset-0 bg-gradient-radial from-pink-500/40 via-purple-500/20 to-transparent rounded-full blur-2xl\"\n                                animate={{\n                                  scale: [1, 1.5, 2],\n                                  opacity: [0.6, 0.3, 0]\n                                }}\n                                transition={{ duration: 1 }}\n                              />\n                            </div>\n                          </motion.div>\n                        );\n                      })}\n                      \n                      {/* Connecting Arc Between Swapping Elements */}\n                      {steps[currentStep].swappingIndices.length === 2 && (\n                        <motion.svg\n                          className=\"absolute top-0 left-0 w-full h-full pointer-events-none z-15\"\n                          initial={{ opacity: 0 }}\n                          animate={{ opacity: [0, 1, 0] }}\n                          transition={{ duration: 1 }}\n                        >\n                          <motion.path\n                            d={`M ${(steps[currentStep].swappingIndices[0] + 0.5) * (100 / array.length)}% 50% Q 50% 10% ${(steps[currentStep].swappingIndices[1] + 0.5) * (100 / array.length)}% 50%`}\n                            stroke=\"url(#swapGradient)\"\n                            strokeWidth=\"3\"\n                            fill=\"none\"\n                            initial={{ pathLength: 0 }}\n                            animate={{ pathLength: 1 }}\n                            transition={{ duration: 0.6, ease: \"easeInOut\" }}\n                          />\n                          <defs>\n                            <linearGradient id=\"swapGradient\" x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"0%\">\n                              <stop offset=\"0%\" stopColor=\"#ec4899\" stopOpacity=\"0.8\" />\n                              <stop offset=\"50%\" stopColor=\"#a855f7\" stopOpacity=\"1\" />\n                              <stop offset=\"100%\" stopColor=\"#ec4899\" stopOpacity=\"0.8\" />\n                            </linearGradient>\n                          </defs>\n                        </motion.svg>\n                      )}\n                    </>\n                  )}\n\n                  {/* Array Bars */}\n                  {(steps.length > 0 && currentStep < steps.length ? steps[currentStep].array : array).map((element, index) => {\n                    const currentStepData = steps.length > 0 && currentStep < steps.length ? steps[currentStep] : null;\n                    const isComparing = currentStepData?.comparingIndices.includes(index) || false;\n                    const isSwapping = currentStepData?.swappingIndices.includes(index) || false;\n                    const isSorted = currentStepData?.sortedIndices.includes(index) || false;\n                    \n                    const maxValue = Math.max(...array.map(el => el.value));\n                    const heightPercentage = (element.value / maxValue) * 100;\n                    \n                    let barColor = NEON_COLORS[index % NEON_COLORS.length];\n                    let glowColor = barColor;\n                    \n                    if (isSorted) {\n                      barColor = '#00ff00';\n                      glowColor = '#00ff00';\n                    } else if (isSwapping) {\n                      barColor = '#ff0066';\n                      glowColor = '#ff0066';\n                    } else if (isComparing) {\n                      barColor = '#ffff00';\n                      glowColor = '#ffff00';\n                    }\n\n                    return (\n                      <motion.div\n                        key={element.id}\n                        className=\"relative flex-1 min-w-0 group\"\n                        initial={{ opacity: 0, y: 50 }}\n                        animate={{ \n                          opacity: 1, \n                          y: 0,\n                          scale: isSwapping ? [1, 1.1, 1] : 1\n                        }}\n                        transition={{ \n                          duration: 0.3,\n                          delay: index * 0.02\n                        }}\n                      >\n                        <motion.div\n                          className=\"relative w-full rounded-t-lg transition-all duration-300\"\n                          animate={{\n                            height: `${heightPercentage}%`,\n                            backgroundColor: barColor,\n                            boxShadow: [\n                              `0 0 20px ${glowColor}80`,\n                              `0 0 40px ${glowColor}`,\n                              `0 0 20px ${glowColor}80`\n                            ]\n                          }}\n                          transition={{\n                            height: { duration: 0.5, ease: \"easeInOut\" },\n                            backgroundColor: { duration: 0.3 },\n                            boxShadow: { duration: 1, repeat: Infinity }\n                          }}\n                          style={{\n                            minHeight: '4px'\n                          }}\n                        >\n                          {/* Glow Effect */}\n                          <motion.div\n                            className=\"absolute inset-0 rounded-t-lg blur-md\"\n                            animate={{\n                              backgroundColor: `${glowColor}40`,\n                              opacity: isSwapping || isComparing ? [0.6, 1, 0.6] : 0.4\n                            }}\n                            transition={{\n                              opacity: { duration: 0.5, repeat: isSwapping || isComparing ? Infinity : 0 }\n                            }}\n                          />\n                          \n                          {/* Value Label */}\n                          {array.length <= 30 && (\n                            <motion.div\n                              className=\"absolute -top-8 left-1/2 transform -translate-x-1/2 text-xs font-bold text-white opacity-0 group-hover:opacity-100 transition-opacity duration-200 whitespace-nowrap bg-gray-900/90 px-2 py-1 rounded border border-cyan-500/30\"\n                              initial={{ y: 10 }}\n                              whileHover={{ y: 0 }}\n                            >\n                              {element.value}\n                            </motion.div>\n                          )}\n\n                          {/* Sorted Checkmark */}\n                          {isSorted && (\n                            <motion.div\n                              initial={{ scale: 0, rotate: -180 }}\n                              animate={{ scale: 1, rotate: 0 }}\n                              className=\"absolute -top-6 left-1/2 transform -translate-x-1/2\"\n                            >\n                              <div className=\"w-4 h-4 rounded-full bg-green-500 flex items-center justify-center shadow-[0_0_15px_rgba(0,255,0,0.8)]\">\n                                <svg className=\"w-3 h-3 text-white\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={3} d=\"M5 13l4 4L19 7\" />\n                                </svg>\n                              </div>\n                            </motion.div>\n                          )}\n\n                          {/* Particle Effect on Swap */}\n                          {isSwapping && (\n                            <>\n                              {[...Array(5)].map((_, i) => (\n                                <motion.div\n                                  key={`particle-${i}`}\n                                  className=\"absolute w-1 h-1 rounded-full bg-pink-400\"\n                                  initial={{ \n                                    x: 0, \n                                    y: 0, \n                                    opacity: 1,\n                                    scale: 1\n                                  }}\n                                  animate={{ \n                                    x: (Math.random() - 0.5) * 40,\n                                    y: -Math.random() * 60 - 20,\n                                    opacity: 0,\n                                    scale: 0\n                                  }}\n                                  transition={{ \n                                    duration: 0.8,\n                                    delay: i * 0.05,\n                                    ease: \"easeOut\"\n                                  }}\n                                  style={{\n                                    left: '50%',\n                                    top: '0%'\n                                  }}\n                                />\n                              ))}\n                            </>\n                          )}\n                        </motion.div>\n                      </motion.div>\n                    );\n                  })}\n                </div>\n              )}\n              \n              <div className=\"h-full flex items-end justify-center gap-1\">\n                {(steps[currentStep]?.array || array).map((element, index) => {\n                  const isComparing = steps[currentStep]?.comparingIndices.includes(index);\n                  const isSwapping = steps[currentStep]?.swappingIndices.includes(index);\n                  const isSorted = steps[currentStep]?.sortedIndices.includes(index);\n                  \n                  const maxValue = Math.max(...(steps[currentStep]?.array || array).map(el => el.value), 1);\n                  const heightPercentage = (element.value / maxValue) * 100;\n                  \n                  const getBarColor = () => {\n                    if (isSorted) return '#00ff00';\n                    if (isSwapping) return '#ff0066';\n                    if (isComparing) return '#ffff00';\n                    return NEON_COLORS[index % NEON_COLORS.length];\n                  };\n\n                  const barColor = getBarColor();\n\n                  return (\n                    <motion.div\n                      key={element.id}\n                      className=\"relative flex-1 min-w-[8px] max-w-[60px]\"\n                      initial={{ opacity: 0, y: 20 }}\n                      animate={{ \n                        opacity: 1, \n                        y: 0,\n                        scale: isSwapping ? [1, 1.1, 1] : isComparing ? 1.05 : 1\n                      }}\n                      transition={{ \n                        duration: 0.3,\n                        scale: { duration: 0.4, repeat: isSwapping ? 2 : 0 }\n                      }}\n                    >\n                      {/* Trail effect during swaps */}\n                      {isSwapping && (\n                        <motion.div\n                          className=\"absolute inset-0 rounded-t-lg\"\n                          style={{\n                            background: `linear-gradient(to top, transparent, ${barColor})`,\n                            filter: 'blur(8px)',\n                          }}\n                          animate={{\n                            opacity: [0.3, 0.7, 0.3],\n                            scale: [1, 1.2, 1],\n                          }}\n                          transition={{\n                            duration: 0.6,\n                            repeat: Infinity,\n                          }}\n                        />\n                      )}\n\n                      {/* Main bar */}\n                      <motion.div\n                        className=\"relative w-full rounded-t-lg transition-all duration-300\"\n                        style={{\n                          height: `${heightPercentage}%`,\n                          minHeight: '20px',\n                          backgroundColor: barColor,\n                          boxShadow: `\n                            0 0 ${isSwapping ? '30px' : isComparing ? '25px' : '15px'} ${barColor}80,\n                            0 0 ${isSwapping ? '60px' : isComparing ? '50px' : '30px'} ${barColor}40,\n                            inset 0 0 20px ${barColor}60\n                          `,\n                        }}\n                        animate={{\n                          height: `${heightPercentage}%`,\n                          boxShadow: `\n                            0 0 ${isSwapping ? '30px' : isComparing ? '25px' : '15px'} ${barColor}80,\n                            0 0 ${isSwapping ? '60px' : isComparing ? '50px' : '30px'} ${barColor}40,\n                            inset 0 0 20px ${barColor}60\n                          `,\n                        }}\n                        transition={{\n                          height: { duration: 0.5, ease: 'easeInOut' },\n                          boxShadow: { duration: 0.3 }\n                        }}\n                      >\n                        {/* Glow effect overlay */}\n                        <motion.div\n                          className=\"absolute inset-0 rounded-t-lg\"\n                          style={{\n                            background: `linear-gradient(to top, transparent 0%, ${barColor}40 50%, ${barColor}80 100%)`,\n                          }}\n                          animate={{\n                            opacity: isSwapping ? [0.5, 1, 0.5] : isComparing ? [0.6, 0.9, 0.6] : 0.7,\n                          }}\n                          transition={{\n                            duration: isSwapping ? 0.4 : isComparing ? 0.6 : 1,\n                            repeat: (isSwapping || isComparing) ? Infinity : 0,\n                          }}\n                        />\n\n                        {/* Value label */}\n                        <motion.div\n                          className=\"absolute -top-8 left-1/2 transform -translate-x-1/2 text-xs font-bold whitespace-nowrap\"\n                          style={{ color: barColor }}\n                          animate={{\n                            scale: isSwapping ? [1, 1.3, 1] : isComparing ? 1.2 : 1,\n                            y: isSwapping ? [-2, -6, -2] : 0,\n                          }}\n                          transition={{ duration: 0.3 }}\n                        >\n                          {element.value}\n                        </motion.div>\n\n                        {/* Sorted checkmark indicator */}\n                        {isSorted && (\n                          <motion.div\n                            className=\"absolute -top-6 left-1/2 transform -translate-x-1/2\"\n                            initial={{ scale: 0, rotate: -180 }}\n                            animate={{ scale: 1, rotate: 0 }}\n                            transition={{ type: 'spring', stiffness: 200, damping: 10 }}\n                          >\n                            <div className=\"w-4 h-4 rounded-full bg-green-500 flex items-center justify-center shadow-lg shadow-green-500/50\">\n                              <svg className=\"w-3 h-3 text-white\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={3} d=\"M5 13l4 4L19 7\" />\n                              </svg>\n                            </div>\n                          </motion.div>\n                        )}\n                      </motion.div>\n\n                      {/* Comparison indicator pulse */}\n                      {isComparing && (\n                        <motion.div\n                          className=\"absolute -bottom-2 left-1/2 transform -translate-x-1/2 w-3 h-3 rounded-full\"\n                          style={{ backgroundColor: '#ffff00' }}\n                          animate={{\n                            scale: [1, 1.5, 1],\n                            opacity: [1, 0.5, 1],\n                          }}\n                          transition={{\n                            duration: 0.8,\n                            repeat: Infinity,\n                          }}\n                        />\n                      )}\n\n                      {/* Swap indicator arrows */}\n                      {isSwapping && (\n                        <motion.div\n                          className=\"absolute -bottom-6 left-1/2 transform -translate-x-1/2\"\n                          animate={{\n                            y: [0, -4, 0],\n                          }}\n                          transition={{\n                            duration: 0.5,\n                            repeat: Infinity,\n                          }}\n                        >\n                          <div className=\"text-pink-500 text-xl font-bold\">\u21c5</div>\n                        </motion.div>\n                      )}\n                    </motion.div>\n                  );\n                })\n              </div>\n            </div>\n\n            <motion.div\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ duration: 0.6, delay: 0.2 }}\n              className=\"mt-6 bg-gray-900/50 backdrop-blur-lg border border-cyan-500/30 rounded-xl p-6 shadow-2xl shadow-cyan-500/20\"\n            >\n              <div className=\"space-y-3\">\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-cyan-400 font-semibold tracking-wide\">PROGRESS</span>\n                  <motion.span \n                    key={currentStep}\n                    initial={{ scale: 1.3, color: '#00ffff' }}\n                    animate={{ scale: 1, color: '#67e8f9' }}\n                    transition={{ duration: 0.3 }}\n                    className=\"text-white font-mono bg-cyan-500/20 px-4 py-1 rounded-full text-sm border border-cyan-500/30\"\n                  >\n                    {steps.length > 0 ? Math.round((currentStep / steps.length) * 100) : 0}%\n                  </motion.span>\n                </div>\n                \n                <div className=\"relative h-4 bg-gray-800/80 rounded-full overflow-hidden border border-cyan-500/20\">\n                  <motion.div\n                    className=\"absolute inset-y-0 left-0 bg-gradient-to-r from-cyan-500 via-blue-500 to-purple-500 rounded-full\"\n                    initial={{ width: 0 }}\n                    animate={{ \n                      width: steps.length > 0 ? `${(currentStep / steps.length) * 100}%` : '0%'\n                    }}\n                    transition={{ duration: 0.5, ease: \"easeOut\" }}\n                  />\n                  <motion.div\n                    className=\"absolute inset-0 bg-gradient-to-r from-transparent via-white/30 to-transparent\"\n                    animate={{\n                      x: ['-100%', '200%']\n                    }}\n                    transition={{\n                      duration: 2,\n                      repeat: Infinity,\n                      ease: \"linear\"\n                    }}\n                    style={{\n                      width: '50%'\n                    }}\n                  />\n                  <motion.div\n                    className=\"absolute inset-0 rounded-full\"\n                    animate={{\n                      boxShadow: [\n                        '0 0 10px rgba(0, 255, 255, 0.3)',\n                        '0 0 20px rgba(0, 255, 255, 0.6)',\n                        '0 0 10px rgba(0, 255, 255, 0.3)'\n                      ]\n                    }}\n                    transition={{ duration: 1.5, repeat: Infinity }}\n                  />\n                </div>\n\n                <div className=\"flex items-center justify-between text-xs text-gray-400\">\n                  <span>Step {currentStep} of {steps.length}</span>\n                  {currentStep >= steps.length && steps.length > 0 && (\n                    <motion.span\n                      initial={{ opacity: 0, scale: 0.8 }}\n                      animate={{ opacity: 1, scale: 1 }}\n                      className=\"text-green-400 font-semibold flex items-center gap-1\"\n                    >\n                      \u2713 Complete\n                    </motion.span>\n                  )}\n                </div>\n              </div>\n            </motion.div>\n          </div>\n        </div>\n\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.8, delay: 0.3 }}\n          className=\"bg-gray-900/50 backdrop-blur-lg border border-cyan-500/30 rounded-xl p-6 shadow-2xl shadow-cyan-500/20\"\n        >\n          <div className=\"flex items-center gap-2 mb-6\">\n            <BarChart3 className=\"w-5 h-5 text-cyan-400\" />\n            <h3 className=\"text-lg font-bold text-cyan-300 tracking-wider\">LEGEND</h3>\n          </div>\n          \n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n            {/* Default State */}\n            <motion.div\n              className=\"flex items-center gap-3 p-4 bg-gray-800/50 rounded-lg border border-gray-700/50 hover:border-cyan-500/50 transition-all duration-300\"\n              whileHover={{ scale: 1.05, boxShadow: '0 0 20px rgba(0, 255, 255, 0.3)' }}\n            >\n              <motion.div\n                className=\"w-6 h-12 bg-gradient-to-t from-cyan-500 to-cyan-400 rounded-sm shadow-lg\"\n                animate={{\n                  boxShadow: [\n                    '0 0 10px rgba(0, 255, 255, 0.5)',\n                    '0 0 20px rgba(0, 255, 255, 0.8)',\n                    '0 0 10px rgba(0, 255, 255, 0.5)'\n                  ]\n                }}\n                transition={{ duration: 2, repeat: Infinity }}\n              />\n              <div>\n                <div className=\"text-sm font-semibold text-white\">Default</div>\n                <div className=\"text-xs text-gray-400\">Unsorted</div>\n              </div>\n            </motion.div>\n\n            {/* Comparing State */}\n            <motion.div\n              className=\"flex items-center gap-3 p-4 bg-gray-800/50 rounded-lg border border-gray-700/50 hover:border-yellow-500/50 transition-all duration-300\"\n              whileHover={{ scale: 1.05, boxShadow: '0 0 20px rgba(255, 255, 0, 0.3)' }}\n            >\n              <motion.div\n                className=\"w-6 h-12 bg-gradient-to-t from-yellow-500 to-yellow-400 rounded-sm shadow-lg\"\n                animate={{\n                  boxShadow: [\n                    '0 0 15px rgba(255, 255, 0, 0.6)',\n                    '0 0 30px rgba(255, 255, 0, 1)',\n                    '0 0 15px rgba(255, 255, 0, 0.6)'\n                  ],\n                  scale: [1, 1.1, 1]\n                }}\n                transition={{ duration: 1, repeat: Infinity }}\n              />\n              <div>\n                <div className=\"text-sm font-semibold text-white\">Comparing</div>\n                <div className=\"text-xs text-gray-400\">Active</div>\n              </div>\n            </motion.div>\n\n            {/* Swapping State */}\n            <motion.div\n              className=\"flex items-center gap-3 p-4 bg-gray-800/50 rounded-lg border border-gray-700/50 hover:border-pink-500/50 transition-all duration-300\"\n              whileHover={{ scale: 1.05, boxShadow: '0 0 20px rgba(255, 0, 102, 0.3)' }}\n            >\n              <motion.div\n                className=\"w-6 h-12 bg-gradient-to-t from-pink-500 to-pink-400 rounded-sm shadow-lg\"\n                animate={{\n                  boxShadow: [\n                    '0 0 15px rgba(255, 0, 102, 0.6)',\n                    '0 0 30px rgba(255, 0, 102, 1)',\n                    '0 0 15px rgba(255, 0, 102, 0.6)'\n                  ],\n                  x: [-2, 2, -2]\n                }}\n                transition={{ duration: 0.8, repeat: Infinity }}\n              />\n              <div>\n                <div className=\"text-sm font-semibold text-white\">Swapping</div>\n                <div className=\"text-xs text-gray-400\">Moving</div>\n              </div>\n            </motion.div>\n\n            {/* Sorted State */}\n            <motion.div\n              className=\"flex items-center gap-3 p-4 bg-gray-800/50 rounded-lg border border-gray-700/50 hover:border-green-500/50 transition-all duration-300\"\n              whileHover={{ scale: 1.05, boxShadow: '0 0 20px rgba(0, 255, 0, 0.3)' }}\n            >\n              <motion.div\n                className=\"w-6 h-12 bg-gradient-to-t from-green-500 to-green-400 rounded-sm shadow-lg\"\n                animate={{\n                  boxShadow: [\n                    '0 0 10px rgba(0, 255, 0, 0.5)',\n                    '0 0 20px rgba(0, 255, 0, 0.8)',\n                    '0 0 10px rgba(0, 255, 0, 0.5)'\n                  ]\n                }}\n                transition={{ duration: 2, repeat: Infinity }}\n              />\n              <div>\n                <div className=\"text-sm font-semibold text-white\">Sorted</div>\n                <div className=\"text-xs text-gray-400\">Complete</div>\n              </div>\n            </motion.div>\n          </div>\n\n          {/* Additional Info */}\n          <motion.div\n            className=\"mt-6 p-4 bg-gradient-to-r from-purple-500/10 to-cyan-500/10 rounded-lg border border-purple-500/30\"\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            transition={{ delay: 0.5 }}\n          >\n            <div className=\"flex items-start gap-3\">\n              <Zap className=\"w-5 h-5 text-purple-400 mt-0.5 flex-shrink-0\" />\n              <div className=\"text-sm text-gray-300\">\n                <span className=\"font-semibold text-purple-300\">Pro Tip:</span> Watch the bars glow and pulse as they compare values. Swapping bars leave neon trails as they move to their new positions!\n              </div>\n            </div>\n          </motion.div>\n        </motion.div>\n      </div>\n    </div>\n  );\n}",
    "error": null,
    "elapsed_time": 94.37461566925049,
    "success": true
  }
}