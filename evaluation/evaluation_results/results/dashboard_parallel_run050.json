{
  "prompt_id": "dashboard",
  "prompt_name": "Analytics Dashboard",
  "mode": "parallel",
  "run_number": 50,
  "timestamp": "2025-10-14T10:06:00.946772",
  "response_time": 74.3382043838501,
  "total_tokens": null,
  "response_content": "import { useState, useCallback } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Moon, Sun, RefreshCw } from 'lucide-react';\nimport { ArrowUpDown, ChevronLeft, ChevronRight } from 'lucide-react';\nimport { Badge } from '@/components/ui/badge';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\nimport { Activity, Zap, Clock } from 'lucide-react';\n\n\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, Legend } from 'recharts';\nimport { PieChart, Pie, Cell, ResponsiveContainer, Legend, Tooltip as RechartsTooltip } from 'recharts';\nimport { motion } from 'framer-motion';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer\n } from 'recharts';\nimport { TrendingUp, TrendingDown, DollarSign, Users, ShoppingCart, Target } from 'lucide-react';\nimport { motion } from 'framer-motion';\n\ninterface MetricData {\n  id: string;\n  label: string;\n  value: number;\n  change: number;\n  trend: 'up' | 'down';\n}\n\ninterface ChartDataPoint {\n  date: string;\n  revenue: number;\n  users: number;\n  orders: number;\n}\n\ninterface TableRow {\n  id: string;\n  product: string;\n  sales: number;\n  revenue: number;\n  status: 'active' | 'pending' | 'inactive';\n}\n\nconst mockMetrics: MetricData[] = [\n  { id: '1', label: 'Total Revenue', value: 45231, change: 12.5, trend: 'up' },\n  { id: '2', label: 'Active Users', value: 2350, change: 8.2, trend: 'up' },\n  { id: '3', label: 'Total Orders', value: 1543, change: -3.1, trend: 'down' },\n  { id: '4', label: 'Conversion Rate', value: 3.24, change: 5.7, trend: 'up' }\n];\n\nconst mockChartData: ChartDataPoint[] = [\n  { date: '2024-01-01', revenue: 12000, users: 450, orders: 230 },\n  { date: '2024-01-02', revenue: 15000, users: 520, orders: 280 },\n  { date: '2024-01-03', revenue: 13500, users: 490, orders: 250 },\n  { date: '2024-01-04', revenue: 18000, users: 610, orders: 320 },\n  { date: '2024-01-05', revenue: 16500, users: 580, orders: 295 },\n  { date: '2024-01-06', revenue: 20000, users: 680, orders: 350 },\n  { date: '2024-01-07', revenue: 22000, users: 720, orders: 380 }\n];\n\nconst mockTableData: TableRow[] = [\n  { id: '1', product: 'Premium Plan', sales: 234, revenue: 23400, status: 'active' },\n  { id: '2', product: 'Basic Plan', sales: 567, revenue: 11340, status: 'active' },\n  { id: '3', product: 'Enterprise Plan', sales: 89, revenue: 17800, status: 'active' },\n  { id: '4', product: 'Starter Plan', sales: 432, revenue: 4320, status: 'pending' },\n  { id: '5', product: 'Pro Plan', sales: 156, revenue: 15600, status: 'active' }\n];\n\nconst CustomTooltip = ({ active, payload, isDark }: any) => {\n  if (active && payload && payload.length) {\n    return (\n      <div className={`p-3 rounded-lg shadow-lg border ${isDark ? 'bg-gray-800 border-gray-700' : 'bg-white border-gray-200'}`}>\n        <p className={`text-sm font-medium mb-2 ${isDark ? 'text-gray-300' : 'text-gray-600'}`}>\n          {payload[0].payload.date}\n        </p>\n        <p className={`text-sm font-semibold ${isDark ? 'text-white' : 'text-gray-900'}`}>\n          Revenue: ${payload[0].value.toLocaleString()}\n        </p>\n      </div>\n    );\n  }\n  return null;\n};\n\nexport default function AnalyticsDashboard() {\n  const [isDarkMode, setIsDarkMode] = useState(false);\n  const [metrics, setMetrics] = useState<MetricData[]>(mockMetrics);\n  const [chartData, setChartData] = useState<ChartDataPoint[]>(mockChartData);\n  const [tableData, setTableData] = useState<TableRow[]>(mockTableData);\n  const [isRefreshing, setIsRefreshing] = useState(false);\n  const [lastUpdate, setLastUpdate] = useState(new Date());\n\n  // Simulate real-time updates\n  const [realtimeStats, setRealtimeStats] = useState({\n    activeConnections: 1247,\n    requestsPerMinute: 3542,\n    avgResponseTime: 145\n  });\n\n  // Update real-time stats periodically\n  useState(() => {\n    const interval = setInterval(() => {\n      setRealtimeStats({\n        activeConnections: 1200 + Math.floor(Math.random() * 100),\n        requestsPerMinute: 3500 + Math.floor(Math.random() * 200),\n        avgResponseTime: 140 + Math.floor(Math.random() * 20)\n      });\n      setLastUpdate(new Date());\n    }, 5000);\n\n    return () => clearInterval(interval);\n  });\n\n  const toggleDarkMode = useCallback(() => {\n    setIsDarkMode(prev => !prev);\n  }, []);\n  const [sortColumn, setSortColumn] = useState<keyof TableRow | null>(null);\n  const [sortDirection, setSortDirection] = useState<'asc' | 'desc'>('asc');\n  const [currentPage, setCurrentPage] = useState(1);\n  const itemsPerPage = 5;\n\n  const handleSort = useCallback((column: keyof TableRow) => {\n    if (sortColumn === column) {\n      setSortDirection(prev => prev === 'asc' ? 'desc' : 'asc');\n    } else {\n      setSortColumn(column);\n      setSortDirection('asc');\n    }\n  }, [sortColumn]);\n\n  const sortedTableData = useCallback(() => {\n    if (!sortColumn) return tableData;\n\n    return [...tableData].sort((a, b) => {\n      const aValue = a[sortColumn];\n      const bValue = b[sortColumn];\n\n      if (typeof aValue === 'number' && typeof bValue === 'number') {\n        return sortDirection === 'asc' ? aValue - bValue : bValue - aValue;\n      }\n\n      if (typeof aValue === 'string' && typeof bValue === 'string') {\n        return sortDirection === 'asc' \n          ? aValue.localeCompare(bValue)\n          : bValue.localeCompare(aValue);\n      }\n\n      return 0;\n    });\n  }, [tableData, sortColumn, sortDirection]);\n\n  const paginatedData = useCallback(() => {\n    const sorted = sortedTableData();\n    const startIndex = (currentPage - 1) * itemsPerPage;\n    const endIndex = startIndex + itemsPerPage;\n    return sorted.slice(startIndex, endIndex);\n  }, [sortedTableData, currentPage]);\n\n  const totalPages = Math.ceil(tableData.length / itemsPerPage);\n\n  const getStatusBadge = (status: TableRow['status']) => {\n    const variants = {\n      active: 'default',\n      pending: 'secondary',\n      inactive: 'destructive'\n    };\n    return (\n      <Badge variant={variants[status] as any} className=\"capitalize\">\n        {status}\n      </Badge>\n    );\n  };\n\n  const handleRefresh = useCallback(() => {\n    setIsRefreshing(true);\n    \n    setTimeout(() => {\n      // Generate updated mock metrics with random variations\n      const updatedMetrics = mockMetrics.map(metric => ({\n        ...metric,\n        value: metric.value + Math.floor(Math.random() * 200 - 100),\n        change: parseFloat((Math.random() * 20 - 5).toFixed(1)),\n        trend: Math.random() > 0.5 ? 'up' as const : 'down' as const\n      }));\n\n      // Generate updated chart data with random variations\n      const updatedChartData = mockChartData.map(point => ({\n        ...point,\n        revenue: point.revenue + Math.floor(Math.random() * 4000 - 2000),\n        users: point.users + Math.floor(Math.random() * 100 - 50),\n        orders: point.orders + Math.floor(Math.random() * 50 - 25)\n      }));\n\n      // Generate updated table data with random variations\n      const updatedTableData = mockTableData.map(row => ({\n        ...row,\n        sales: row.sales + Math.floor(Math.random() * 40 - 20),\n        revenue: row.revenue + Math.floor(Math.random() * 2000 - 1000)\n      }));\n\n      setMetrics(updatedMetrics);\n      setChartData(updatedChartData);\n      setTableData(updatedTableData);\n      setIsRefreshing(false);\n    }, 1500)\n  }, []);\n\n  return (\n    <div className={`min-h-screen ${isDarkMode ? 'dark bg-gray-900' : 'bg-gray-50'}`}>\n      <div className=\"container mx-auto p-4 md:p-6 lg:p-8\">\n        <div className=\"flex flex-col md:flex-row justify-between items-start md:items-center gap-4 mb-8\">\n          <div>\n            <h1 className={`text-3xl md:text-4xl font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n              Analytics Dashboard\n            </h1>\n            <p className={`mt-2 ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n              Real-time insights and performance metrics\n            </p>\n          </div>\n          \n          <div className=\"flex gap-2\">\n            <Button\n              variant=\"outline\"\n              size=\"icon\"\n              onClick={toggleDarkMode}\n              className={isDarkMode ? 'border-gray-700' : ''}\n            >\n              {isDarkMode ? <Sun className=\"h-5 w-5\" /> : <Moon className=\"h-5 w-5\" />}\n            </Button>\n            \n            <Button\n              variant=\"outline\"\n              onClick={handleRefresh}\n              disabled={isRefreshing}\n              className={isDarkMode ? 'border-gray-700' : ''}\n            >\n              <RefreshCw className={`h-4 w-4 mr-2 ${isRefreshing ? 'animate-spin' : ''}`} />\n              Refresh\n            </Button>\n          </div>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 md:gap-6 mb-8\">\n          {metrics.map((metric, index) => {\n            const Icon = metric.label.includes('Revenue') ? DollarSign :\n                        metric.label.includes('Users') ? Users :\n                        metric.label.includes('Orders') ? ShoppingCart :\n                        Target;\n            \n            const TrendIcon = metric.trend === 'up' ? TrendingUp : TrendingDown;\n            \n            return (\n              <motion.div\n                key={metric.id}\n                initial={{ opacity: 0, y: 20 }}\n                animate={{ opacity: 1, y: 0 }}\n                transition={{ duration: 0.4, delay: index * 0.1 }}\n              >\n                <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n                  <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                    <CardTitle className={`text-sm font-medium ${isDarkMode ? 'text-gray-300' : 'text-gray-600'}`}>\n                      {metric.label}\n                    </CardTitle>\n                    <Icon className={`h-4 w-4 ${isDarkMode ? 'text-gray-400' : 'text-gray-500'}`} />\n                  </CardHeader>\n                  <CardContent>\n                    <div className={`text-2xl font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                      {metric.label.includes('Revenue') ? `$${metric.value.toLocaleString()}` :\n                       metric.label.includes('Rate') ? `${metric.value}%` :\n                       metric.value.toLocaleString()}\n                    </div>\n                    <div className=\"flex items-center mt-2\">\n                      <TrendIcon \n                        className={`h-4 w-4 mr-1 ${\n                          metric.trend === 'up' ? 'text-green-500' : 'text-red-500'\n                        }`} \n                      />\n                      <span className={`text-sm font-medium ${\n                        metric.trend === 'up' ? 'text-green-500' : 'text-red-500'\n                      }`}>\n                        {metric.change > 0 ? '+' : ''}{metric.change}%\n                      </span>\n                      <span className={`text-sm ml-2 ${isDarkMode ? 'text-gray-400' : 'text-gray-500'}`}>\n                        vs last period\n                      </span>\n                    </div>\n                  </CardContent>\n                </Card>\n              </motion.div>\n            );\n          })}\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-4 md:gap-6 mb-8\">\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Revenue Overview</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Daily revenue trends\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"w-full h-[300px] md:h-[350px]\">\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <LineChart\n                    data={chartData}\n                    margin={{ top: 5, right: 10, left: 0, bottom: 5 }}\n                  >\n                    <CartesianGrid \n                      strokeDasharray=\"3 3\" \n                      stroke={isDarkMode ? '#374151' : '#e5e7eb'}\n                    />\n                    <XAxis \n                      dataKey=\"date\" \n                      stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                      tick={{ fill: isDarkMode ? '#9ca3af' : '#6b7280', fontSize: 12 }}\n                      tickFormatter={(value) => new Date(value).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n                    />\n                    <YAxis \n                      stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                      tick={{ fill: isDarkMode ? '#9ca3af' : '#6b7280', fontSize: 12 }}\n                      tickFormatter={(value) => `$${(value / 1000).toFixed(0)}k`}\n                    />\n                    <Tooltip content={<CustomTooltip isDark={isDarkMode} />} />\n                    <Line \n                      type=\"monotone\" \n                      dataKey=\"revenue\" \n                      stroke=\"#3b82f6\" \n                      strokeWidth={2}\n                      dot={{ fill: '#3b82f6', r: 4 }}\n                      activeDot={{ r: 6, fill: '#2563eb' }}\n                    />\n                  </LineChart>\n                </ResponsiveContainer>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>User Growth</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Active users over time\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"h-[300px] w-full\">\n                <svg width=\"100%\" height=\"100%\" viewBox=\"0 0 700 300\" preserveAspectRatio=\"none\">\n                  <defs>\n                    <linearGradient id=\"userGradient\" x1=\"0\" x2=\"0\" y1=\"0\" y2=\"1\">\n                      <stop offset=\"0%\" stopColor=\"#3b82f6\" stopOpacity=\"0.4\" />\n                      <stop offset=\"100%\" stopColor=\"#3b82f6\" stopOpacity=\"0.05\" />\n                    </linearGradient>\n                  </defs>\n                  \n                  {/* Generate path for area chart */}\n                  <motion.path\n                    d={(() => {\n                      const width = 700;\n                      const height = 300;\n                      const padding = 20;\n                      const maxUsers = Math.max(...chartData.map(d => d.users));\n                      const minUsers = Math.min(...chartData.map(d => d.users));\n                      const range = maxUsers - minUsers;\n                      \n                      const points = chartData.map((point, index) => {\n                        const x = padding + (index / (chartData.length - 1)) * (width - 2 * padding);\n                        const y = height - padding - ((point.users - minUsers) / range) * (height - 2 * padding);\n                        return `${x},${y}`;\n                      });\n                      \n                      const pathData = `M ${points[0]} L ${points.join(' L ')} L ${width - padding},${height - padding} L ${padding},${height - padding} Z`;\n                      return pathData;\n                    })()}\n                    fill=\"url(#userGradient)\"\n                    initial={{ opacity: 0 }}\n                    animate={{ opacity: 1 }}\n                    transition={{ duration: 0.8, ease: \"easeOut\" }}\n                  />\n                  \n                  {/* Line on top of area */}\n                  <motion.path\n                    d={(() => {\n                      const width = 700;\n                      const height = 300;\n                      const padding = 20;\n                      const maxUsers = Math.max(...chartData.map(d => d.users));\n                      const minUsers = Math.min(...chartData.map(d => d.users));\n                      const range = maxUsers - minUsers;\n                      \n                      const points = chartData.map((point, index) => {\n                        const x = padding + (index / (chartData.length - 1)) * (width - 2 * padding);\n                        const y = height - padding - ((point.users - minUsers) / range) * (height - 2 * padding);\n                        return `${x},${y}`;\n                      });\n                      \n                      return `M ${points.join(' L ')}`;\n                    })()}\n                    fill=\"none\"\n                    stroke=\"#3b82f6\"\n                    strokeWidth=\"3\"\n                    strokeLinecap=\"round\"\n                    strokeLinejoin=\"round\"\n                    initial={{ pathLength: 0 }}\n                    animate={{ pathLength: 1 }}\n                    transition={{ duration: 1.5, ease: \"easeInOut\" }}\n                  />\n                  \n                  {/* Data points */}\n                  {chartData.map((point, index) => {\n                    const width = 700;\n                    const height = 300;\n                    const padding = 20;\n                    const maxUsers = Math.max(...chartData.map(d => d.users));\n                    const minUsers = Math.min(...chartData.map(d => d.users));\n                    const range = maxUsers - minUsers;\n                    \n                    const x = padding + (index / (chartData.length - 1)) * (width - 2 * padding);\n                    const y = height - padding - ((point.users - minUsers) / range) * (height - 2 * padding);\n                    \n                    return (\n                      <motion.g key={point.date}>\n                        <motion.circle\n                          cx={x}\n                          cy={y}\n                          r=\"5\"\n                          fill=\"#3b82f6\"\n                          stroke={isDarkMode ? '#1f2937' : '#ffffff'}\n                          strokeWidth=\"2\"\n                          initial={{ scale: 0, opacity: 0 }}\n                          animate={{ scale: 1, opacity: 1 }}\n                          transition={{ duration: 0.3, delay: index * 0.1 }}\n                          className=\"cursor-pointer hover:r-7 transition-all\"\n                        />\n                        <title>{`${point.date}: ${point.users} users`}</title>\n                      </motion.g>\n                    );\n                  })}\n                  \n                  {/* X-axis labels */}\n                  {chartData.map((point, index) => {\n                    const width = 700;\n                    const height = 300;\n                    const padding = 20;\n                    const x = padding + (index / (chartData.length - 1)) * (width - 2 * padding);\n                    \n                    return (\n                      <text\n                        key={`label-${point.date}`}\n                        x={x}\n                        y={height - 5}\n                        textAnchor=\"middle\"\n                        fontSize=\"10\"\n                        fill={isDarkMode ? '#9ca3af' : '#6b7280'}\n                      >\n                        {new Date(point.date).getDate()}/{new Date(point.date).getMonth() + 1}\n                      </text>\n                    );\n                  })}\n                </svg>\n                \n                {/* Legend */}\n                <div className=\"flex items-center justify-center mt-4 gap-2\">\n                  <div className=\"flex items-center gap-2\">\n                    <div className=\"w-3 h-3 rounded-full bg-blue-500\"></div>\n                    <span className={`text-sm ${isDarkMode ? 'text-gray-300' : 'text-gray-600'}`}>\n                      Active Users\n                    </span>\n                  </div>\n                  <span className={`text-sm font-semibold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                    {chartData[chartData.length - 1].users.toLocaleString()}\n                  </span>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-4 md:gap-6 mb-8\">\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Orders Distribution</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                By product category\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <ResponsiveContainer width=\"100%\" height={300}>\n                <PieChart>\n                  <RechartsTooltip\n                    contentStyle={{\n                      backgroundColor: isDarkMode ? '#1f2937' : '#ffffff',\n                      border: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\n                      borderRadius: '6px',\n                      color: isDarkMode ? '#ffffff' : '#000000'\n                    }}\n                    formatter={(value: number) => [`${value} orders`, 'Orders']}\n                  />\n                  <Legend\n                    wrapperStyle={{\n                      color: isDarkMode ? '#9ca3af' : '#4b5563'\n                    }}\n                  />\n                  <Pie\n                    data={chartData}\n                    dataKey=\"orders\"\n                    nameKey=\"date\"\n                    cx=\"50%\"\n                    cy=\"50%\"\n                    outerRadius={80}\n                    label={({ date, orders }) => `${new Date(date).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}: ${orders}`}\n                    labelLine={true}\n                  >\n                    {chartData.map((entry, index) => {\n                      const colors = ['#3b82f6', '#8b5cf6', '#ec4899', '#f59e0b', '#10b981', '#06b6d4', '#6366f1'];\n                      return <Cell key={`cell-${index}`} fill={colors[index % colors.length]} />;\n                    })}\n                  </Pie>\n                </PieChart>\n              </ResponsiveContainer>\n            </CardContent>\n          </Card>\n\n          <Card className={`lg:col-span-2 ${isDarkMode ? 'bg-gray-800 border-gray-700' : ''}`}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Performance Metrics</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Combined view of key indicators\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              \n            </CardContent>\n          </Card>\n        </div>\n\n        <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n          <CardHeader>\n            <CardTitle className={isDarkMode ? 'text-white' : ''}>Top Products</CardTitle>\n            <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n              Best performing products by revenue\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              <div className=\"overflow-x-auto rounded-md border border-gray-200 dark:border-gray-700\">\n                <Table>\n                  <TableHeader>\n                    <TableRow className={isDarkMode ? 'border-gray-700 hover:bg-gray-750' : ''}>\n                      <TableHead className={isDarkMode ? 'text-gray-300' : ''}>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => handleSort('product')}\n                          className=\"h-8 px-2 lg:px-3\"\n                        >\n                          Product\n                          <ArrowUpDown className=\"ml-2 h-4 w-4\" />\n                        </Button>\n                      </TableHead>\n                      <TableHead className={isDarkMode ? 'text-gray-300' : ''}>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => handleSort('sales')}\n                          className=\"h-8 px-2 lg:px-3\"\n                        >\n                          Sales\n                          <ArrowUpDown className=\"ml-2 h-4 w-4\" />\n                        </Button>\n                      </TableHead>\n                      <TableHead className={isDarkMode ? 'text-gray-300' : ''}>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => handleSort('revenue')}\n                          className=\"h-8 px-2 lg:px-3\"\n                        >\n                          Revenue\n                          <ArrowUpDown className=\"ml-2 h-4 w-4\" />\n                        </Button>\n                      </TableHead>\n                      <TableHead className={isDarkMode ? 'text-gray-300' : ''}>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => handleSort('status')}\n                          className=\"h-8 px-2 lg:px-3\"\n                        >\n                          Status\n                          <ArrowUpDown className=\"ml-2 h-4 w-4\" />\n                        </Button>\n                      </TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {paginatedData().map((row) => (\n                      <TableRow \n                        key={row.id}\n                        className={isDarkMode ? 'border-gray-700 hover:bg-gray-750' : ''}\n                      >\n                        <TableCell className={`font-medium ${isDarkMode ? 'text-gray-200' : ''}`}>\n                          {row.product}\n                        </TableCell>\n                        <TableCell className={isDarkMode ? 'text-gray-300' : ''}>\n                          {row.sales.toLocaleString()}\n                        </TableCell>\n                        <TableCell className={isDarkMode ? 'text-gray-300' : ''}>\n                          ${row.revenue.toLocaleString()}\n                        </TableCell>\n                        <TableCell>\n                          {getStatusBadge(row.status)}\n                        </TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              </div>\n\n              <div className=\"flex flex-col sm:flex-row items-center justify-between gap-4\">\n                <div className={`text-sm ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                  Showing {((currentPage - 1) * itemsPerPage) + 1} to {Math.min(currentPage * itemsPerPage, tableData.length)} of {tableData.length} products\n                </div>\n                \n                <div className=\"flex items-center gap-2\">\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => setCurrentPage(prev => Math.max(1, prev - 1))}\n                    disabled={currentPage === 1}\n                    className={isDarkMode ? 'border-gray-700' : ''}\n                  >\n                    <ChevronLeft className=\"h-4 w-4 mr-1\" />\n                    Previous\n                  </Button>\n                  \n                  <div className={`flex items-center gap-1 px-3 py-1 text-sm ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>\n                    <span className=\"font-medium\">{currentPage}</span>\n                    <span>/</span>\n                    <span>{totalPages}</span>\n                  </div>\n                  \n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => setCurrentPage(prev => Math.min(totalPages, prev + 1))}\n                    disabled={currentPage === totalPages}\n                    className={isDarkMode ? 'border-gray-700' : ''}\n                  >\n                    Next\n                    <ChevronRight className=\"h-4 w-4 ml-1\" />\n                  </Button>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 md:gap-6 mt-8\">\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={`flex items-center gap-2 ${isDarkMode ? 'text-white' : ''}`}>\n                <Activity className=\"h-5 w-5 text-blue-500\" />\n                Active Connections\n              </CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Live user sessions\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <div className={`text-3xl font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                    {realtimeStats.activeConnections.toLocaleString()}\n                  </div>\n                  <div className={`text-sm mt-1 flex items-center gap-1 ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                    <Clock className=\"h-3 w-3\" />\n                    Updated {Math.floor((new Date().getTime() - lastUpdate.getTime()) / 1000)}s ago\n                  </div>\n                </div>\n                <div className=\"relative\">\n                  <div className=\"h-12 w-12 rounded-full bg-blue-500/20 flex items-center justify-center\">\n                    <div className=\"h-8 w-8 rounded-full bg-blue-500/40 flex items-center justify-center animate-pulse\">\n                      <div className=\"h-4 w-4 rounded-full bg-blue-500\"></div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={`flex items-center gap-2 ${isDarkMode ? 'text-white' : ''}`}>\n                <Zap className=\"h-5 w-5 text-yellow-500\" />\n                Requests/Min\n              </CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                API throughput\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <div className={`text-3xl font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                    {realtimeStats.requestsPerMinute.toLocaleString()}\n                  </div>\n                  <div className={`text-sm mt-1 flex items-center gap-1 ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                    <Clock className=\"h-3 w-3\" />\n                    Updated {Math.floor((new Date().getTime() - lastUpdate.getTime()) / 1000)}s ago\n                  </div>\n                </div>\n                <div className=\"relative\">\n                  <div className=\"h-12 w-12 rounded-full bg-yellow-500/20 flex items-center justify-center\">\n                    <div className=\"h-8 w-8 rounded-full bg-yellow-500/40 flex items-center justify-center animate-pulse\">\n                      <div className=\"h-4 w-4 rounded-full bg-yellow-500\"></div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={`flex items-center gap-2 ${isDarkMode ? 'text-white' : ''}`}>\n                <Clock className=\"h-5 w-5 text-green-500\" />\n                Avg Response Time\n              </CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Server performance\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <div className={`text-3xl font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                    {realtimeStats.avgResponseTime}ms\n                  </div>\n                  <div className={`text-sm mt-1 flex items-center gap-1 ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                    <Clock className=\"h-3 w-3\" />\n                    Updated {Math.floor((new Date().getTime() - lastUpdate.getTime()) / 1000)}s ago\n                  </div>\n                </div>\n                <div className=\"relative\">\n                  <div className=\"h-12 w-12 rounded-full bg-green-500/20 flex items-center justify-center\">\n                    <div className=\"h-8 w-8 rounded-full bg-green-500/40 flex items-center justify-center animate-pulse\">\n                      <div className=\"h-4 w-4 rounded-full bg-green-500\"></div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}",
  "error": null,
  "overall_score": 54,
  "code_quality_score": 14,
  "architecture_score": 11,
  "performance_score": 13,
  "accessibility_score": 16,
  "metadata": {
    "document_id": "eval_room_a622d07f7c4a",
    "prompt_category": "intermediate",
    "prompt_complexity": 6.0
  },
  "raw_response": {
    "document_id": "eval_room_a622d07f7c4a",
    "mode": "parallel",
    "prompt": "Generate an analytics dashboard page with charts, data tables, real-time updates, dark mode, and responsive design",
    "content": "import { useState, useCallback } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Moon, Sun, RefreshCw } from 'lucide-react';\nimport { ArrowUpDown, ChevronLeft, ChevronRight } from 'lucide-react';\nimport { Badge } from '@/components/ui/badge';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\nimport { Activity, Zap, Clock } from 'lucide-react';\n\n\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, Legend } from 'recharts';\nimport { PieChart, Pie, Cell, ResponsiveContainer, Legend, Tooltip as RechartsTooltip } from 'recharts';\nimport { motion } from 'framer-motion';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer\n } from 'recharts';\nimport { TrendingUp, TrendingDown, DollarSign, Users, ShoppingCart, Target } from 'lucide-react';\nimport { motion } from 'framer-motion';\n\ninterface MetricData {\n  id: string;\n  label: string;\n  value: number;\n  change: number;\n  trend: 'up' | 'down';\n}\n\ninterface ChartDataPoint {\n  date: string;\n  revenue: number;\n  users: number;\n  orders: number;\n}\n\ninterface TableRow {\n  id: string;\n  product: string;\n  sales: number;\n  revenue: number;\n  status: 'active' | 'pending' | 'inactive';\n}\n\nconst mockMetrics: MetricData[] = [\n  { id: '1', label: 'Total Revenue', value: 45231, change: 12.5, trend: 'up' },\n  { id: '2', label: 'Active Users', value: 2350, change: 8.2, trend: 'up' },\n  { id: '3', label: 'Total Orders', value: 1543, change: -3.1, trend: 'down' },\n  { id: '4', label: 'Conversion Rate', value: 3.24, change: 5.7, trend: 'up' }\n];\n\nconst mockChartData: ChartDataPoint[] = [\n  { date: '2024-01-01', revenue: 12000, users: 450, orders: 230 },\n  { date: '2024-01-02', revenue: 15000, users: 520, orders: 280 },\n  { date: '2024-01-03', revenue: 13500, users: 490, orders: 250 },\n  { date: '2024-01-04', revenue: 18000, users: 610, orders: 320 },\n  { date: '2024-01-05', revenue: 16500, users: 580, orders: 295 },\n  { date: '2024-01-06', revenue: 20000, users: 680, orders: 350 },\n  { date: '2024-01-07', revenue: 22000, users: 720, orders: 380 }\n];\n\nconst mockTableData: TableRow[] = [\n  { id: '1', product: 'Premium Plan', sales: 234, revenue: 23400, status: 'active' },\n  { id: '2', product: 'Basic Plan', sales: 567, revenue: 11340, status: 'active' },\n  { id: '3', product: 'Enterprise Plan', sales: 89, revenue: 17800, status: 'active' },\n  { id: '4', product: 'Starter Plan', sales: 432, revenue: 4320, status: 'pending' },\n  { id: '5', product: 'Pro Plan', sales: 156, revenue: 15600, status: 'active' }\n];\n\nconst CustomTooltip = ({ active, payload, isDark }: any) => {\n  if (active && payload && payload.length) {\n    return (\n      <div className={`p-3 rounded-lg shadow-lg border ${isDark ? 'bg-gray-800 border-gray-700' : 'bg-white border-gray-200'}`}>\n        <p className={`text-sm font-medium mb-2 ${isDark ? 'text-gray-300' : 'text-gray-600'}`}>\n          {payload[0].payload.date}\n        </p>\n        <p className={`text-sm font-semibold ${isDark ? 'text-white' : 'text-gray-900'}`}>\n          Revenue: ${payload[0].value.toLocaleString()}\n        </p>\n      </div>\n    );\n  }\n  return null;\n};\n\nexport default function AnalyticsDashboard() {\n  const [isDarkMode, setIsDarkMode] = useState(false);\n  const [metrics, setMetrics] = useState<MetricData[]>(mockMetrics);\n  const [chartData, setChartData] = useState<ChartDataPoint[]>(mockChartData);\n  const [tableData, setTableData] = useState<TableRow[]>(mockTableData);\n  const [isRefreshing, setIsRefreshing] = useState(false);\n  const [lastUpdate, setLastUpdate] = useState(new Date());\n\n  // Simulate real-time updates\n  const [realtimeStats, setRealtimeStats] = useState({\n    activeConnections: 1247,\n    requestsPerMinute: 3542,\n    avgResponseTime: 145\n  });\n\n  // Update real-time stats periodically\n  useState(() => {\n    const interval = setInterval(() => {\n      setRealtimeStats({\n        activeConnections: 1200 + Math.floor(Math.random() * 100),\n        requestsPerMinute: 3500 + Math.floor(Math.random() * 200),\n        avgResponseTime: 140 + Math.floor(Math.random() * 20)\n      });\n      setLastUpdate(new Date());\n    }, 5000);\n\n    return () => clearInterval(interval);\n  });\n\n  const toggleDarkMode = useCallback(() => {\n    setIsDarkMode(prev => !prev);\n  }, []);\n  const [sortColumn, setSortColumn] = useState<keyof TableRow | null>(null);\n  const [sortDirection, setSortDirection] = useState<'asc' | 'desc'>('asc');\n  const [currentPage, setCurrentPage] = useState(1);\n  const itemsPerPage = 5;\n\n  const handleSort = useCallback((column: keyof TableRow) => {\n    if (sortColumn === column) {\n      setSortDirection(prev => prev === 'asc' ? 'desc' : 'asc');\n    } else {\n      setSortColumn(column);\n      setSortDirection('asc');\n    }\n  }, [sortColumn]);\n\n  const sortedTableData = useCallback(() => {\n    if (!sortColumn) return tableData;\n\n    return [...tableData].sort((a, b) => {\n      const aValue = a[sortColumn];\n      const bValue = b[sortColumn];\n\n      if (typeof aValue === 'number' && typeof bValue === 'number') {\n        return sortDirection === 'asc' ? aValue - bValue : bValue - aValue;\n      }\n\n      if (typeof aValue === 'string' && typeof bValue === 'string') {\n        return sortDirection === 'asc' \n          ? aValue.localeCompare(bValue)\n          : bValue.localeCompare(aValue);\n      }\n\n      return 0;\n    });\n  }, [tableData, sortColumn, sortDirection]);\n\n  const paginatedData = useCallback(() => {\n    const sorted = sortedTableData();\n    const startIndex = (currentPage - 1) * itemsPerPage;\n    const endIndex = startIndex + itemsPerPage;\n    return sorted.slice(startIndex, endIndex);\n  }, [sortedTableData, currentPage]);\n\n  const totalPages = Math.ceil(tableData.length / itemsPerPage);\n\n  const getStatusBadge = (status: TableRow['status']) => {\n    const variants = {\n      active: 'default',\n      pending: 'secondary',\n      inactive: 'destructive'\n    };\n    return (\n      <Badge variant={variants[status] as any} className=\"capitalize\">\n        {status}\n      </Badge>\n    );\n  };\n\n  const handleRefresh = useCallback(() => {\n    setIsRefreshing(true);\n    \n    setTimeout(() => {\n      // Generate updated mock metrics with random variations\n      const updatedMetrics = mockMetrics.map(metric => ({\n        ...metric,\n        value: metric.value + Math.floor(Math.random() * 200 - 100),\n        change: parseFloat((Math.random() * 20 - 5).toFixed(1)),\n        trend: Math.random() > 0.5 ? 'up' as const : 'down' as const\n      }));\n\n      // Generate updated chart data with random variations\n      const updatedChartData = mockChartData.map(point => ({\n        ...point,\n        revenue: point.revenue + Math.floor(Math.random() * 4000 - 2000),\n        users: point.users + Math.floor(Math.random() * 100 - 50),\n        orders: point.orders + Math.floor(Math.random() * 50 - 25)\n      }));\n\n      // Generate updated table data with random variations\n      const updatedTableData = mockTableData.map(row => ({\n        ...row,\n        sales: row.sales + Math.floor(Math.random() * 40 - 20),\n        revenue: row.revenue + Math.floor(Math.random() * 2000 - 1000)\n      }));\n\n      setMetrics(updatedMetrics);\n      setChartData(updatedChartData);\n      setTableData(updatedTableData);\n      setIsRefreshing(false);\n    }, 1500)\n  }, []);\n\n  return (\n    <div className={`min-h-screen ${isDarkMode ? 'dark bg-gray-900' : 'bg-gray-50'}`}>\n      <div className=\"container mx-auto p-4 md:p-6 lg:p-8\">\n        <div className=\"flex flex-col md:flex-row justify-between items-start md:items-center gap-4 mb-8\">\n          <div>\n            <h1 className={`text-3xl md:text-4xl font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n              Analytics Dashboard\n            </h1>\n            <p className={`mt-2 ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n              Real-time insights and performance metrics\n            </p>\n          </div>\n          \n          <div className=\"flex gap-2\">\n            <Button\n              variant=\"outline\"\n              size=\"icon\"\n              onClick={toggleDarkMode}\n              className={isDarkMode ? 'border-gray-700' : ''}\n            >\n              {isDarkMode ? <Sun className=\"h-5 w-5\" /> : <Moon className=\"h-5 w-5\" />}\n            </Button>\n            \n            <Button\n              variant=\"outline\"\n              onClick={handleRefresh}\n              disabled={isRefreshing}\n              className={isDarkMode ? 'border-gray-700' : ''}\n            >\n              <RefreshCw className={`h-4 w-4 mr-2 ${isRefreshing ? 'animate-spin' : ''}`} />\n              Refresh\n            </Button>\n          </div>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 md:gap-6 mb-8\">\n          {metrics.map((metric, index) => {\n            const Icon = metric.label.includes('Revenue') ? DollarSign :\n                        metric.label.includes('Users') ? Users :\n                        metric.label.includes('Orders') ? ShoppingCart :\n                        Target;\n            \n            const TrendIcon = metric.trend === 'up' ? TrendingUp : TrendingDown;\n            \n            return (\n              <motion.div\n                key={metric.id}\n                initial={{ opacity: 0, y: 20 }}\n                animate={{ opacity: 1, y: 0 }}\n                transition={{ duration: 0.4, delay: index * 0.1 }}\n              >\n                <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n                  <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                    <CardTitle className={`text-sm font-medium ${isDarkMode ? 'text-gray-300' : 'text-gray-600'}`}>\n                      {metric.label}\n                    </CardTitle>\n                    <Icon className={`h-4 w-4 ${isDarkMode ? 'text-gray-400' : 'text-gray-500'}`} />\n                  </CardHeader>\n                  <CardContent>\n                    <div className={`text-2xl font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                      {metric.label.includes('Revenue') ? `$${metric.value.toLocaleString()}` :\n                       metric.label.includes('Rate') ? `${metric.value}%` :\n                       metric.value.toLocaleString()}\n                    </div>\n                    <div className=\"flex items-center mt-2\">\n                      <TrendIcon \n                        className={`h-4 w-4 mr-1 ${\n                          metric.trend === 'up' ? 'text-green-500' : 'text-red-500'\n                        }`} \n                      />\n                      <span className={`text-sm font-medium ${\n                        metric.trend === 'up' ? 'text-green-500' : 'text-red-500'\n                      }`}>\n                        {metric.change > 0 ? '+' : ''}{metric.change}%\n                      </span>\n                      <span className={`text-sm ml-2 ${isDarkMode ? 'text-gray-400' : 'text-gray-500'}`}>\n                        vs last period\n                      </span>\n                    </div>\n                  </CardContent>\n                </Card>\n              </motion.div>\n            );\n          })}\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-4 md:gap-6 mb-8\">\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Revenue Overview</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Daily revenue trends\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"w-full h-[300px] md:h-[350px]\">\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <LineChart\n                    data={chartData}\n                    margin={{ top: 5, right: 10, left: 0, bottom: 5 }}\n                  >\n                    <CartesianGrid \n                      strokeDasharray=\"3 3\" \n                      stroke={isDarkMode ? '#374151' : '#e5e7eb'}\n                    />\n                    <XAxis \n                      dataKey=\"date\" \n                      stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                      tick={{ fill: isDarkMode ? '#9ca3af' : '#6b7280', fontSize: 12 }}\n                      tickFormatter={(value) => new Date(value).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n                    />\n                    <YAxis \n                      stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                      tick={{ fill: isDarkMode ? '#9ca3af' : '#6b7280', fontSize: 12 }}\n                      tickFormatter={(value) => `$${(value / 1000).toFixed(0)}k`}\n                    />\n                    <Tooltip content={<CustomTooltip isDark={isDarkMode} />} />\n                    <Line \n                      type=\"monotone\" \n                      dataKey=\"revenue\" \n                      stroke=\"#3b82f6\" \n                      strokeWidth={2}\n                      dot={{ fill: '#3b82f6', r: 4 }}\n                      activeDot={{ r: 6, fill: '#2563eb' }}\n                    />\n                  </LineChart>\n                </ResponsiveContainer>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>User Growth</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Active users over time\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"h-[300px] w-full\">\n                <svg width=\"100%\" height=\"100%\" viewBox=\"0 0 700 300\" preserveAspectRatio=\"none\">\n                  <defs>\n                    <linearGradient id=\"userGradient\" x1=\"0\" x2=\"0\" y1=\"0\" y2=\"1\">\n                      <stop offset=\"0%\" stopColor=\"#3b82f6\" stopOpacity=\"0.4\" />\n                      <stop offset=\"100%\" stopColor=\"#3b82f6\" stopOpacity=\"0.05\" />\n                    </linearGradient>\n                  </defs>\n                  \n                  {/* Generate path for area chart */}\n                  <motion.path\n                    d={(() => {\n                      const width = 700;\n                      const height = 300;\n                      const padding = 20;\n                      const maxUsers = Math.max(...chartData.map(d => d.users));\n                      const minUsers = Math.min(...chartData.map(d => d.users));\n                      const range = maxUsers - minUsers;\n                      \n                      const points = chartData.map((point, index) => {\n                        const x = padding + (index / (chartData.length - 1)) * (width - 2 * padding);\n                        const y = height - padding - ((point.users - minUsers) / range) * (height - 2 * padding);\n                        return `${x},${y}`;\n                      });\n                      \n                      const pathData = `M ${points[0]} L ${points.join(' L ')} L ${width - padding},${height - padding} L ${padding},${height - padding} Z`;\n                      return pathData;\n                    })()}\n                    fill=\"url(#userGradient)\"\n                    initial={{ opacity: 0 }}\n                    animate={{ opacity: 1 }}\n                    transition={{ duration: 0.8, ease: \"easeOut\" }}\n                  />\n                  \n                  {/* Line on top of area */}\n                  <motion.path\n                    d={(() => {\n                      const width = 700;\n                      const height = 300;\n                      const padding = 20;\n                      const maxUsers = Math.max(...chartData.map(d => d.users));\n                      const minUsers = Math.min(...chartData.map(d => d.users));\n                      const range = maxUsers - minUsers;\n                      \n                      const points = chartData.map((point, index) => {\n                        const x = padding + (index / (chartData.length - 1)) * (width - 2 * padding);\n                        const y = height - padding - ((point.users - minUsers) / range) * (height - 2 * padding);\n                        return `${x},${y}`;\n                      });\n                      \n                      return `M ${points.join(' L ')}`;\n                    })()}\n                    fill=\"none\"\n                    stroke=\"#3b82f6\"\n                    strokeWidth=\"3\"\n                    strokeLinecap=\"round\"\n                    strokeLinejoin=\"round\"\n                    initial={{ pathLength: 0 }}\n                    animate={{ pathLength: 1 }}\n                    transition={{ duration: 1.5, ease: \"easeInOut\" }}\n                  />\n                  \n                  {/* Data points */}\n                  {chartData.map((point, index) => {\n                    const width = 700;\n                    const height = 300;\n                    const padding = 20;\n                    const maxUsers = Math.max(...chartData.map(d => d.users));\n                    const minUsers = Math.min(...chartData.map(d => d.users));\n                    const range = maxUsers - minUsers;\n                    \n                    const x = padding + (index / (chartData.length - 1)) * (width - 2 * padding);\n                    const y = height - padding - ((point.users - minUsers) / range) * (height - 2 * padding);\n                    \n                    return (\n                      <motion.g key={point.date}>\n                        <motion.circle\n                          cx={x}\n                          cy={y}\n                          r=\"5\"\n                          fill=\"#3b82f6\"\n                          stroke={isDarkMode ? '#1f2937' : '#ffffff'}\n                          strokeWidth=\"2\"\n                          initial={{ scale: 0, opacity: 0 }}\n                          animate={{ scale: 1, opacity: 1 }}\n                          transition={{ duration: 0.3, delay: index * 0.1 }}\n                          className=\"cursor-pointer hover:r-7 transition-all\"\n                        />\n                        <title>{`${point.date}: ${point.users} users`}</title>\n                      </motion.g>\n                    );\n                  })}\n                  \n                  {/* X-axis labels */}\n                  {chartData.map((point, index) => {\n                    const width = 700;\n                    const height = 300;\n                    const padding = 20;\n                    const x = padding + (index / (chartData.length - 1)) * (width - 2 * padding);\n                    \n                    return (\n                      <text\n                        key={`label-${point.date}`}\n                        x={x}\n                        y={height - 5}\n                        textAnchor=\"middle\"\n                        fontSize=\"10\"\n                        fill={isDarkMode ? '#9ca3af' : '#6b7280'}\n                      >\n                        {new Date(point.date).getDate()}/{new Date(point.date).getMonth() + 1}\n                      </text>\n                    );\n                  })}\n                </svg>\n                \n                {/* Legend */}\n                <div className=\"flex items-center justify-center mt-4 gap-2\">\n                  <div className=\"flex items-center gap-2\">\n                    <div className=\"w-3 h-3 rounded-full bg-blue-500\"></div>\n                    <span className={`text-sm ${isDarkMode ? 'text-gray-300' : 'text-gray-600'}`}>\n                      Active Users\n                    </span>\n                  </div>\n                  <span className={`text-sm font-semibold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                    {chartData[chartData.length - 1].users.toLocaleString()}\n                  </span>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-4 md:gap-6 mb-8\">\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Orders Distribution</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                By product category\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <ResponsiveContainer width=\"100%\" height={300}>\n                <PieChart>\n                  <RechartsTooltip\n                    contentStyle={{\n                      backgroundColor: isDarkMode ? '#1f2937' : '#ffffff',\n                      border: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\n                      borderRadius: '6px',\n                      color: isDarkMode ? '#ffffff' : '#000000'\n                    }}\n                    formatter={(value: number) => [`${value} orders`, 'Orders']}\n                  />\n                  <Legend\n                    wrapperStyle={{\n                      color: isDarkMode ? '#9ca3af' : '#4b5563'\n                    }}\n                  />\n                  <Pie\n                    data={chartData}\n                    dataKey=\"orders\"\n                    nameKey=\"date\"\n                    cx=\"50%\"\n                    cy=\"50%\"\n                    outerRadius={80}\n                    label={({ date, orders }) => `${new Date(date).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}: ${orders}`}\n                    labelLine={true}\n                  >\n                    {chartData.map((entry, index) => {\n                      const colors = ['#3b82f6', '#8b5cf6', '#ec4899', '#f59e0b', '#10b981', '#06b6d4', '#6366f1'];\n                      return <Cell key={`cell-${index}`} fill={colors[index % colors.length]} />;\n                    })}\n                  </Pie>\n                </PieChart>\n              </ResponsiveContainer>\n            </CardContent>\n          </Card>\n\n          <Card className={`lg:col-span-2 ${isDarkMode ? 'bg-gray-800 border-gray-700' : ''}`}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Performance Metrics</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Combined view of key indicators\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              \n            </CardContent>\n          </Card>\n        </div>\n\n        <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n          <CardHeader>\n            <CardTitle className={isDarkMode ? 'text-white' : ''}>Top Products</CardTitle>\n            <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n              Best performing products by revenue\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              <div className=\"overflow-x-auto rounded-md border border-gray-200 dark:border-gray-700\">\n                <Table>\n                  <TableHeader>\n                    <TableRow className={isDarkMode ? 'border-gray-700 hover:bg-gray-750' : ''}>\n                      <TableHead className={isDarkMode ? 'text-gray-300' : ''}>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => handleSort('product')}\n                          className=\"h-8 px-2 lg:px-3\"\n                        >\n                          Product\n                          <ArrowUpDown className=\"ml-2 h-4 w-4\" />\n                        </Button>\n                      </TableHead>\n                      <TableHead className={isDarkMode ? 'text-gray-300' : ''}>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => handleSort('sales')}\n                          className=\"h-8 px-2 lg:px-3\"\n                        >\n                          Sales\n                          <ArrowUpDown className=\"ml-2 h-4 w-4\" />\n                        </Button>\n                      </TableHead>\n                      <TableHead className={isDarkMode ? 'text-gray-300' : ''}>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => handleSort('revenue')}\n                          className=\"h-8 px-2 lg:px-3\"\n                        >\n                          Revenue\n                          <ArrowUpDown className=\"ml-2 h-4 w-4\" />\n                        </Button>\n                      </TableHead>\n                      <TableHead className={isDarkMode ? 'text-gray-300' : ''}>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => handleSort('status')}\n                          className=\"h-8 px-2 lg:px-3\"\n                        >\n                          Status\n                          <ArrowUpDown className=\"ml-2 h-4 w-4\" />\n                        </Button>\n                      </TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {paginatedData().map((row) => (\n                      <TableRow \n                        key={row.id}\n                        className={isDarkMode ? 'border-gray-700 hover:bg-gray-750' : ''}\n                      >\n                        <TableCell className={`font-medium ${isDarkMode ? 'text-gray-200' : ''}`}>\n                          {row.product}\n                        </TableCell>\n                        <TableCell className={isDarkMode ? 'text-gray-300' : ''}>\n                          {row.sales.toLocaleString()}\n                        </TableCell>\n                        <TableCell className={isDarkMode ? 'text-gray-300' : ''}>\n                          ${row.revenue.toLocaleString()}\n                        </TableCell>\n                        <TableCell>\n                          {getStatusBadge(row.status)}\n                        </TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              </div>\n\n              <div className=\"flex flex-col sm:flex-row items-center justify-between gap-4\">\n                <div className={`text-sm ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                  Showing {((currentPage - 1) * itemsPerPage) + 1} to {Math.min(currentPage * itemsPerPage, tableData.length)} of {tableData.length} products\n                </div>\n                \n                <div className=\"flex items-center gap-2\">\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => setCurrentPage(prev => Math.max(1, prev - 1))}\n                    disabled={currentPage === 1}\n                    className={isDarkMode ? 'border-gray-700' : ''}\n                  >\n                    <ChevronLeft className=\"h-4 w-4 mr-1\" />\n                    Previous\n                  </Button>\n                  \n                  <div className={`flex items-center gap-1 px-3 py-1 text-sm ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>\n                    <span className=\"font-medium\">{currentPage}</span>\n                    <span>/</span>\n                    <span>{totalPages}</span>\n                  </div>\n                  \n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => setCurrentPage(prev => Math.min(totalPages, prev + 1))}\n                    disabled={currentPage === totalPages}\n                    className={isDarkMode ? 'border-gray-700' : ''}\n                  >\n                    Next\n                    <ChevronRight className=\"h-4 w-4 ml-1\" />\n                  </Button>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 md:gap-6 mt-8\">\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={`flex items-center gap-2 ${isDarkMode ? 'text-white' : ''}`}>\n                <Activity className=\"h-5 w-5 text-blue-500\" />\n                Active Connections\n              </CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Live user sessions\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <div className={`text-3xl font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                    {realtimeStats.activeConnections.toLocaleString()}\n                  </div>\n                  <div className={`text-sm mt-1 flex items-center gap-1 ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                    <Clock className=\"h-3 w-3\" />\n                    Updated {Math.floor((new Date().getTime() - lastUpdate.getTime()) / 1000)}s ago\n                  </div>\n                </div>\n                <div className=\"relative\">\n                  <div className=\"h-12 w-12 rounded-full bg-blue-500/20 flex items-center justify-center\">\n                    <div className=\"h-8 w-8 rounded-full bg-blue-500/40 flex items-center justify-center animate-pulse\">\n                      <div className=\"h-4 w-4 rounded-full bg-blue-500\"></div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={`flex items-center gap-2 ${isDarkMode ? 'text-white' : ''}`}>\n                <Zap className=\"h-5 w-5 text-yellow-500\" />\n                Requests/Min\n              </CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                API throughput\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <div className={`text-3xl font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                    {realtimeStats.requestsPerMinute.toLocaleString()}\n                  </div>\n                  <div className={`text-sm mt-1 flex items-center gap-1 ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                    <Clock className=\"h-3 w-3\" />\n                    Updated {Math.floor((new Date().getTime() - lastUpdate.getTime()) / 1000)}s ago\n                  </div>\n                </div>\n                <div className=\"relative\">\n                  <div className=\"h-12 w-12 rounded-full bg-yellow-500/20 flex items-center justify-center\">\n                    <div className=\"h-8 w-8 rounded-full bg-yellow-500/40 flex items-center justify-center animate-pulse\">\n                      <div className=\"h-4 w-4 rounded-full bg-yellow-500\"></div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={`flex items-center gap-2 ${isDarkMode ? 'text-white' : ''}`}>\n                <Clock className=\"h-5 w-5 text-green-500\" />\n                Avg Response Time\n              </CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Server performance\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <div className={`text-3xl font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                    {realtimeStats.avgResponseTime}ms\n                  </div>\n                  <div className={`text-sm mt-1 flex items-center gap-1 ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                    <Clock className=\"h-3 w-3\" />\n                    Updated {Math.floor((new Date().getTime() - lastUpdate.getTime()) / 1000)}s ago\n                  </div>\n                </div>\n                <div className=\"relative\">\n                  <div className=\"h-12 w-12 rounded-full bg-green-500/20 flex items-center justify-center\">\n                    <div className=\"h-8 w-8 rounded-full bg-green-500/40 flex items-center justify-center animate-pulse\">\n                      <div className=\"h-4 w-4 rounded-full bg-green-500\"></div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}",
    "error": null,
    "elapsed_time": 74.3382043838501,
    "success": true
  }
}