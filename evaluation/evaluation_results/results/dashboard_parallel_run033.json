{
  "prompt_id": "dashboard",
  "prompt_name": "Analytics Dashboard",
  "mode": "parallel",
  "run_number": 33,
  "timestamp": "2025-10-14T00:55:12.258963",
  "response_time": 79.35397982597351,
  "total_tokens": null,
  "response_content": "import { useState, useCallback } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { motion } from 'framer-motion';\nimport { LineChart, Line, ResponsiveContainer } from 'recharts';\nimport { Moon, Sun, RefreshCw } from 'lucide-react';\nimport { ArrowUpDown, ChevronLeft, ChevronRight } from 'lucide-react';\nimport { Badge } from '@/components/ui/badge';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\nimport { TrendingUp, TrendingDown, ShoppingCart, UserPlus, DollarSign, Package } from 'lucide-react';\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\nimport { PieChart, Pie, Cell, ResponsiveContainer, Legend, Tooltip as RechartsTooltip } from 'recharts';\nimport { motion } from 'framer-motion';\nimport { TrendingUp, Users } from 'lucide-react';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts'\n;\nimport { TrendingUp, TrendingDown, DollarSign, Users, ShoppingCart, Target } from 'lucide-react';\nimport { AlertCircle, AlertTriangle, Info, CheckCircle, X } from 'lucide-react';\nn } from 'framer-motion';\n\ninterface MetricData {\n  id: string;\n  label: string;\n  value: number;\n  change: number;\n  trend: 'up' | 'down';\n}\n\ninterface ChartDataPoint {\n  date: string;\n  revenue: number;\n  users: number;\n  orders: number;\n}\n\ninterface TableRow {\n  id: string;\n  product: string;\n  sales: number;\n  revenue: number;\n  status: 'active' | 'pending' | 'inactive';\n}\ninterface Alert {\n  id: string;\n  message: string;\n  severity: 'info' | 'warning' | 'error' | 'success';\n  timestamp: string;\n}\n\nconst mockAlerts: Alert[] = [\n  { id: '1', message: 'Server response time increased by 15%', severity: 'warning', timestamp: '2 min ago' },\n  { id: '2', message: 'New user milestone reached: 2,500 users', severity: 'success', timestamp: '15 min ago' },\n  { id: '3', message: 'Payment gateway experiencing delays', severity: 'error', timestamp: '1 hour ago' },\n  { id: '4', message: 'Scheduled maintenance in 24 hours', severity: 'info', timestamp: '3 hours ago' }\n];\n\nconst mockMetrics: MetricData[] = [\n  { id: '1', label: 'Total Revenue', value: 45231, change: 12.5, trend: 'up' },\n  { id: '2', label: 'Active Users', value: 2350, change: 8.2, trend: 'up' },\n  { id: '3', label: 'Total Orders', value: 1543, change: -3.1, trend: 'down' },\n  { id: '4', label: 'Conversion Rate', value: 3.24, change: 5.7, trend: 'up' }\n];\n\nconst mockChartData: ChartDataPoint[] = [\n  { date: '2024-01-01', revenue: 12000, users: 450, orders: 230 },\n  { date: '2024-01-02', revenue: 15000, users: 520, orders: 280 },\n  { date: '2024-01-03', revenue: 13500, users: 490, orders: 250 },\n  { date: '2024-01-04', revenue: 18000, users: 610, orders: 320 },\n  { date: '2024-01-05', revenue: 16500, users: 580, orders: 295 },\n  { date: '2024-01-06', revenue: 20000, users: 680, orders: 350 },\n  { date: '2024-01-07', revenue: 22000, users: 720, orders: 380 }\n];\n\nconst mockTableData: TableRow[] = [\n  { id: '1', product: 'Premium Plan', sales: 234, revenue: 23400, status: 'active' },\n  { id: '2', product: 'Basic Plan', sales: 567, revenue: 11340, status: 'active' },\n  { id: '3', product: 'Enterprise Plan', sales: 89, revenue: 44500, status: 'active' },\n  { id: '4', product: 'Starter Plan', sales: 432, revenue: 4320, status: 'pending' },\n  { id: '5', product: 'Pro Plan', sales: 156, revenue: 15600, status: 'inactive' }\n];\ninterface QuickStat {\n  id: string;\n  label: string;\n  value: string;\n  change: number;\n  sparklineData: number[];\n  color: string;\n}\n\nconst mockQuickStats: QuickStat[] = [\n  { \n    id: '1', \n    label: 'Avg. Order Value', \n    value: '$127.50', \n    change: 15.3, \n    sparklineData: [100, 120, 115, 140, 135, 150, 145],\n    color: '#3b82f6'\n  },\n  { \n    id: '2', \n    label: 'Bounce Rate', \n    value: '32.4%', \n    change: -8.7, \n    sparklineData: [45, 42, 40, 38, 35, 33, 32],\n    color: '#10b981'\n  },\n  { \n    id: '3', \n    label: 'Session Duration', \n    value: '4m 32s', \n    change: 12.1, \n    sparklineData: [200, 220, 210, 240, 250, 260, 270],\n    color: '#8b5cf6'\n  },\n  { \n    id: '4', \n    label: 'Cart Abandonment', \n    value: '24.8%', \n    change: -5.2, \n    sparklineData: [35, 33, 32, 30, 28, 26, 25],\n    color: '#f59e0b'\n  },\n  { \n    id: '5', \n    label: 'Customer Satisfaction', \n    value: '4.8/5', \n    change: 3.5, \n    sparklineData: [4.5, 4.6, 4.7, 4.7, 4.8, 4.8, 4.8],\n    color: '#ec4899'\n  },\n  { \n    id: '6', \n    label: 'Page Load Time', \n    value: '1.2s', \n    change: -18.5, \n    sparklineData: [2.0, 1.8, 1.6, 1.5, 1.4, 1.3, 1.2],\n    color: '#06b6d4'\n  }\n];\ninterface ActivityItem {\n  id: string;\n  type: 'sale' | 'user' | 'order' | 'revenue';\n  message: string;\n  timestamp: string;\n  icon: 'cart' | 'user' | 'dollar' | 'package' | 'up' | 'down';\n}\n\nconst mockActivityData: ActivityItem[] = [\n  { id: '1', type: 'sale', message: 'New sale: Premium Plan', timestamp: '2 min ago', icon: 'cart' },\n  { id: '2', type: 'user', message: 'New user registered', timestamp: '5 min ago', icon: 'user' },\n  { id: '3', type: 'revenue', message: 'Revenue milestone reached', timestamp: '12 min ago', icon: 'dollar' },\n  { id: '4', type: 'order', message: 'Order #1234 completed', timestamp: '18 min ago', icon: 'package' },\n  { id: '5', type: 'sale', message: 'Enterprise Plan purchased', timestamp: '25 min ago', icon: 'cart' },\n  { id: '6', type: 'user', message: '10 new users today', timestamp: '1 hour ago', icon: 'user' }\n];\n\nexport default function AnalyticsDashboard() {\n  const [sortColumn, setSortColumn] = useState<keyof TableRow | null>(null);\n  const [sortDirection, setSortDirection] = useState<'asc' | 'desc'>('asc');\n  const [currentPage, setCurrentPage] = useState(1);\n  const itemsPerPage = 3;\n  const [isDarkMode, setIsDarkMode] = useState(false);\n  const [metrics, setMetrics] = useState<MetricData[]>(mockMetrics);\n  const [chartData, setChartData] = useState<ChartDataPoint[]>(mockChartData);\n  const [tableData, setTableData] = useState<TableRow[]>(mockTableData);\n  const [isRefreshing, setIsRefreshing] = useState(false);\n  const [quickStats] = useState<QuickStat[]>(mockQuickStats);\n  const [alerts, setAlerts] = useState<Alert[]>(mockAlerts);\n\n  const dismissAlert = useCallback((alertId: string) => {\n    setAlerts(prev => prev.filter(alert => alert.id !== alertId));\n  }, []);\n\n  const toggleDarkMode = useCallback(() => {\n    setIsDarkMode(prev => !prev);\n  }, []);\n\n  const handleSort = useCallback((column: keyof TableRow) => {\n    if (sortColumn === column) {\n      setSortDirection(prev => prev === 'asc' ? 'desc' : 'asc');\n    } else {\n      setSortColumn(column);\n      setSortDirection('asc');\n    }\n    setCurrentPage(1);\n  }, [sortColumn]);\n\n  const sortedTableData = useCallback(() => {\n    if (!sortColumn) return tableData;\n    \n    return [...tableData].sort((a, b) => {\n      const aValue = a[sortColumn];\n      const bValue = b[sortColumn];\n      \n      if (typeof aValue === 'number' && typeof bValue === 'number') {\n        return sortDirection === 'asc' ? aValue - bValue : bValue - aValue;\n      }\n      \n      if (typeof aValue === 'string' && typeof bValue === 'string') {\n        return sortDirection === 'asc' \n          ? aValue.localeCompare(bValue)\n          : bValue.localeCompare(aValue);\n      }\n      \n      return 0;\n    });\n  }, [tableData, sortColumn, sortDirection]);\n\n  const paginatedData = useCallback(() => {\n    const sorted = sortedTableData();\n    const startIndex = (currentPage - 1) * itemsPerPage;\n    const endIndex = startIndex + itemsPerPage;\n    return sorted.slice(startIndex, endIndex);\n  }, [sortedTableData, currentPage]);\n\n  const totalPages = Math.ceil(tableData.length / itemsPerPage);\n\n  const getStatusBadge = (status: TableRow['status']) => {\n    const variants = {\n      active: 'default',\n      pending: 'secondary',\n      inactive: 'outline'\n    } as const;\n    \n    return (\n      <Badge variant={variants[status]} className={\n        status === 'active' ? 'bg-green-500 hover:bg-green-600' :\n        status === 'pending' ? 'bg-yellow-500 hover:bg-yellow-600' :\n        'bg-gray-500 hover:bg-gray-600'\n      }>\n        {status.charAt(0).toUpperCase() + status.slice(1)}\n      </Badge>\n    );\n  };\n</parameter>\n</invoke>\n  const handleRefresh = useCallback(() => {\n    setIsRefreshing(true);\n    \n    setTimeout(() => {\n      // Generate updated mock metrics with random variations\n      const updatedMetrics = mockMetrics.map(metric => ({\n        ...metric,\n        value: metric.value + Math.floor(Math.random() * 200 - 100),\n        change: parseFloat((Math.random() * 20 - 5).toFixed(1)),\n        trend: Math.random() > 0.5 ? 'up' as const : 'down' as const\n      }));\n\n      // Generate updated chart data with random variations\n      const updatedChartData = mockChartData.map(point => ({\n        ...point,\n        revenue: point.revenue + Math.floor(Math.random() * 4000 - 2000),\n        users: point.users + Math.floor(Math.random() * 100 - 50),\n        orders: point.orders + Math.floor(Math.random() * 50 - 25)\n      }));\n\n      // Generate updated table data with random variations\n      const updatedTableData = mockTableData.map(row => ({\n        ...row,\n        sales: row.sales + Math.floor(Math.random() * 40 - 20),\n        revenue: row.revenue + Math.floor(Math.random() * 2000 - 1000)\n      }));\n\n      setMetrics(updatedMetrics);\n      setChartData(updatedChartData);\n      setTableData(updatedTableData);\n      setIsRefreshing(false);\n    }, 1500);\n  }, []);\n\n  return (\n    <div className={`min-h-screen ${isDarkMode ? 'dark bg-gray-900' : 'bg-gray-50'}`}>\n      <div className=\"container mx-auto p-4 md:p-6 lg:p-8\">\n        <div className=\"flex flex-col md:flex-row justify-between items-start md:items-center gap-4 mb-8\">\n          <div>\n            <h1 className={`text-3xl md:text-4xl font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n              Analytics Dashboard\n            </h1>\n            <p className={`mt-2 ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n              Real-time insights and performance metrics\n            </p>\n          </div>\n          \n          <div className=\"flex gap-2\">\n            <Button\n              variant=\"outline\"\n              size=\"icon\"\n              onClick={toggleDarkMode}\n              className={isDarkMode ? 'border-gray-700' : ''}\n            >\n              {isDarkMode ? <Sun className=\"h-5 w-5\" /> : <Moon className=\"h-5 w-5\" />}\n            </Button>\n            \n            <Button\n              variant=\"outline\"\n              onClick={handleRefresh}\n              disabled={isRefreshing}\n              className={isDarkMode ? 'border-gray-700' : ''}\n            >\n              <RefreshCw className={`h-4 w-4 mr-2 ${isRefreshing ? 'animate-spin' : ''}`} />\n              Refresh\n            </Button>\n          </div>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 md:gap-6 mb-8\">\n          {metrics.map((metric, index) => {\n            const Icon = metric.id === '1' ? DollarSign : \n                        metric.id === '2' ? Users : \n                        metric.id === '3' ? ShoppingCart : Target;\n            \n            const TrendIcon = metric.trend === 'up' ? TrendingUp : TrendingDown;\n            const trendColor = metric.trend === 'up' ? 'text-green-500' : 'text-red-500';\n            const trendBgColor = metric.trend === 'up' ? 'bg-green-50 dark:bg-green-900/20' : 'bg-red-50 dark:bg-red-900/20';\n\n            return (\n              <motion.div\n                key={metric.id}\n                initial={{ opacity: 0, y: 20 }}\n                animate={{ opacity: 1, y: 0 }}\n                transition={{ duration: 0.4, delay: index * 0.1 }}\n              >\n                <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n                  <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                    <CardTitle className={`text-sm font-medium ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                      {metric.label}\n                    </CardTitle>\n                    <div className={`p-2 rounded-lg ${isDarkMode ? 'bg-gray-700' : 'bg-gray-100'}`}>\n                      <Icon className={`h-4 w-4 ${isDarkMode ? 'text-gray-300' : 'text-gray-600'}`} />\n                    </div>\n                  </CardHeader>\n                  <CardContent>\n                    <motion.div\n                      initial={{ scale: 0.5 }}\n                      animate={{ scale: 1 }}\n                      transition={{ duration: 0.5, delay: index * 0.1 + 0.2 }}\n                      className={`text-2xl font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}\n                    >\n                      {metric.id === '1' || metric.id === '3' ? \n                        `$${metric.value.toLocaleString()}` : \n                        metric.id === '4' ? \n                        `${metric.value}%` : \n                        metric.value.toLocaleString()\n                      }\n                    </motion.div>\n                    <div className=\"flex items-center mt-2\">\n                      <div className={`flex items-center gap-1 px-2 py-1 rounded-full ${trendBgColor}`}>\n                        <TrendIcon className={`h-3 w-3 ${trendColor}`} />\n                        <span className={`text-xs font-medium ${trendColor}`}>\n                          {Math.abs(metric.change)}%\n                        </span>\n                      </div>\n                      <span className={`text-xs ml-2 ${isDarkMode ? 'text-gray-400' : 'text-gray-500'}`}>\n                        vs last period\n                      </span>\n                    </div>\n                  </CardContent>\n                </Card>\n              </motion.div>\n            );\n          })}\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-4 md:gap-6 mb-8\">\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Revenue Overview</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Daily revenue trends\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"h-[300px] w-full\">\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <LineChart\n                    data={chartData}\n                    margin={{ top: 5, right: 10, left: 0, bottom: 5 }}\n                  >\n                    <CartesianGrid \n                      strokeDasharray=\"3 3\" \n                      stroke={isDarkMode ? '#374151' : '#e5e7eb'}\n                    />\n                    <XAxis \n                      dataKey=\"date\" \n                      stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                      fontSize={12}\n                      tickFormatter={(value) => new Date(value).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n                    />\n                    <YAxis \n                      stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                      fontSize={12}\n                      tickFormatter={(value) => `$${(value / 1000).toFixed(0)}k`}\n                    />\n                    <Tooltip \n                      contentStyle={{\n                        backgroundColor: isDarkMode ? '#1f2937' : '#ffffff',\n                        border: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\n                        borderRadius: '6px',\n                        color: isDarkMode ? '#ffffff' : '#000000'\n                      }}\n                      labelFormatter={(value) => new Date(value).toLocaleDateString('en-US', { month: 'long', day: 'numeric', year: 'numeric' })}\n                      formatter={(value: number) => [`$${value.toLocaleString()}`, 'Revenue']}\n                    />\n                    <Line \n                      type=\"monotone\" \n                      dataKey=\"revenue\" \n                      stroke=\"#3b82f6\" \n                      strokeWidth={2}\n                      dot={{ fill: '#3b82f6', r: 4 }}\n                      activeDot={{ r: 6 }}\n                    />\n                  </LineChart>\n                </ResponsiveContainer>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>User Growth</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Active users over time\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              \n            </CardContent>\n          </Card>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-4 md:gap-6 mb-8\">\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Orders Distribution</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                By product category\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <ResponsiveContainer width=\"100%\" height={300}>\n                <PieChart>\n                  <Pie\n                    data={tableData.map(item => ({\n                      name: item.product,\n                      value: item.sales\n                    }))}\n                    cx=\"50%\"\n                    cy=\"50%\"\n                    labelLine={false}\n                    label={({ name, percent }) => `${name}: ${(percent * 100).toFixed(0)}%`}\n                    outerRadius={80}\n                    fill=\"#8884d8\"\n                    dataKey=\"value\"\n                  >\n                    {tableData.map((entry, index) => {\n                      const colors = ['#3b82f6', '#10b981', '#f59e0b', '#ef4444', '#8b5cf6'];\n                      return <Cell key={`cell-${index}`} fill={colors[index % colors.length]} />;\n                    })}\n                  </Pie>\n                  <RechartsTooltip\n                    contentStyle={{\n                      backgroundColor: isDarkMode ? '#1f2937' : '#ffffff',\n                      border: isDarkMode ? '1px solid #374151' : '1px solid #e5e7eb',\n                      borderRadius: '6px',\n                      color: isDarkMode ? '#ffffff' : '#000000'\n                    }}\n                  />\n                  <Legend\n                    wrapperStyle={{\n                      color: isDarkMode ? '#9ca3af' : '#4b5563'\n                    }}\n                  />\n                </PieChart>\n              </ResponsiveContainer>\n            </CardContent>\n          </Card>\n\n          <Card className={`lg:col-span-2 ${isDarkMode ? 'bg-gray-800 border-gray-700' : ''}`}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Performance Metrics</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Combined view of key indicators\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"h-[300px] w-full\">\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <BarChart\n                    data={chartData}\n                    margin={{ top: 20, right: 30, left: 20, bottom: 5 }}\n                  >\n                    <CartesianGrid \n                      strokeDasharray=\"3 3\" \n                      stroke={isDarkMode ? '#374151' : '#e5e7eb'}\n                    />\n                    <XAxis \n                      dataKey=\"date\" \n                      stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                      tick={{ fill: isDarkMode ? '#9ca3af' : '#6b7280' }}\n                      tickFormatter={(value) => new Date(value).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n                    />\n                    <YAxis \n                      stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                      tick={{ fill: isDarkMode ? '#9ca3af' : '#6b7280' }}\n                    />\n                    <Tooltip \n                      contentStyle={{\n                        backgroundColor: isDarkMode ? '#1f2937' : '#ffffff',\n                        border: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\n                        borderRadius: '8px',\n                        color: isDarkMode ? '#f3f4f6' : '#111827'\n                      }}\n                      labelStyle={{ color: isDarkMode ? '#f3f4f6' : '#111827' }}\n                      formatter={(value: number) => value.toLocaleString()}\n                      labelFormatter={(label) => new Date(label).toLocaleDateString('en-US', { month: 'long', day: 'numeric', year: 'numeric' })}\n                    />\n                    <Legend \n                      wrapperStyle={{ color: isDarkMode ? '#9ca3af' : '#6b7280' }}\n                      iconType=\"rect\"\n                    />\n                    <Bar \n                      dataKey=\"revenue\" \n                      fill=\"#3b82f6\" \n                      radius={[4, 4, 0, 0]}\n                      name=\"Revenue ($)\"\n                    />\n                    <Bar \n                      dataKey=\"users\" \n                      fill=\"#10b981\" \n                      radius={[4, 4, 0, 0]}\n                      name=\"Users\"\n                    />\n                    <Bar \n                      dataKey=\"orders\" \n                      fill=\"#f59e0b\" \n                      radius={[4, 4, 0, 0]}\n                      name=\"Orders\"\n                    />\n                  </BarChart>\n                </ResponsiveContainer>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n          <CardHeader>\n            <CardTitle className={isDarkMode ? 'text-white' : ''}>Top Products</CardTitle>\n            <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n              Best performing products by revenue\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            {/* TODO:DataTable Render sortable table with product data, status badges, pagination, and responsive design */}\n          </CardContent>\n        </Card>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 md:gap-6 mt-8\">\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Recent Activity</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {mockActivityData.map((activity, index) => {\n                  const getIcon = () => {\n                    switch (activity.icon) {\n                      case 'cart':\n                        return <ShoppingCart className=\"h-4 w-4\" />;\n                      case 'user':\n                        return <UserPlus className=\"h-4 w-4\" />;\n                      case 'dollar':\n                        return <DollarSign className=\"h-4 w-4\" />;\n                      case 'package':\n                        return <Package className=\"h-4 w-4\" />;\n                      case 'up':\n                        return <TrendingUp className=\"h-4 w-4\" />;\n                      case 'down':\n                        return <TrendingDown className=\"h-4 w-4\" />;\n                      default:\n                        return <Package className=\"h-4 w-4\" />;\n                    }\n                  };\n\n                  const getIconColor = () => {\n                    switch (activity.type) {\n                      case 'sale':\n                        return 'bg-green-500';\n                      case 'user':\n                        return 'bg-blue-500';\n                      case 'revenue':\n                        return 'bg-purple-500';\n                      case 'order':\n                        return 'bg-orange-500';\n                      default:\n                        return 'bg-gray-500';\n                    }\n                  };\n\n                  return (\n                    <div\n                      key={activity.id}\n                      className=\"flex items-start gap-3 animate-in fade-in slide-in-from-left-2\"\n                      style={{ animationDelay: `${index * 100}ms` }}\n                    >\n                      <div className={`${getIconColor()} rounded-full p-2 text-white flex-shrink-0`}>\n                        {getIcon()}\n                      </div>\n                      <div className=\"flex-1 min-w-0\">\n                        <p className={`text-sm font-medium ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                          {activity.message}\n                        </p>\n                        <p className={`text-xs ${isDarkMode ? 'text-gray-400' : 'text-gray-500'}`}>\n                          {activity.timestamp}\n                        </p>\n                      </div>\n                    </div>\n                  );\n                })}\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Quick Stats</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {quickStats.map((stat, index) => (\n                  <motion.div\n                    key={stat.id}\n                    initial={{ opacity: 0, x: -20 }}\n                    animate={{ opacity: 1, x: 0 }}\n                    transition={{ delay: index * 0.1 }}\n                    className={`p-4 rounded-lg border ${\n                      isDarkMode ? 'bg-gray-700/50 border-gray-600' : 'bg-white border-gray-200'\n                    }`}\n                  >\n                    <div className=\"flex items-start justify-between mb-3\">\n                      <div className=\"flex-1\">\n                        <p className={`text-xs font-medium ${isDarkMode ? 'text-gray-400' : 'text-gray-500'}`}>\n                          {stat.label}\n                        </p>\n                        <p className={`text-xl font-bold mt-1 ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                          {stat.value}\n                        </p>\n                      </div>\n                      <div className={`flex items-center gap-1 px-2 py-1 rounded text-xs font-medium ${\n                        stat.change >= 0\n                          ? 'bg-green-100 text-green-700 dark:bg-green-900/30 dark:text-green-400'\n                          : 'bg-red-100 text-red-700 dark:bg-red-900/30 dark:text-red-400'\n                      }`}>\n                        {stat.change >= 0 ? (\n                          <TrendingUp className=\"h-3 w-3\" />\n                        ) : (\n                          <TrendingDown className=\"h-3 w-3\" />\n                        )}\n                        {Math.abs(stat.change)}%\n                      </div>\n                    </div>\n                    <div className=\"h-12\">\n                      <ResponsiveContainer width=\"100%\" height=\"100%\">\n                        <LineChart data={stat.sparklineData.map((value, i) => ({ value, index: i }))}>\n                          <Line\n                            type=\"monotone\"\n                            dataKey=\"value\"\n                            stroke={stat.color}\n                            strokeWidth={2}\n                            dot={false}\n                            animationDuration={1000}\n                          />\n                        </LineChart>\n                      </ResponsiveContainer>\n                    </div>\n                  </motion.div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Alerts</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-3\">\n                {alerts.length === 0 ? (\n                  <div className={`text-center py-8 ${isDarkMode ? 'text-gray-400' : 'text-gray-500'}`}>\n                    <CheckCircle className=\"h-12 w-12 mx-auto mb-2 opacity-50\" />\n                    <p>No active alerts</p>\n                  </div>\n                ) : (\n                  alerts.map((alert, index) => {\n                    const severityConfig = {\n                      info: {\n                        icon: Info,\n                        bgColor: isDarkMode ? 'bg-blue-900/30' : 'bg-blue-50',\n                        borderColor: 'border-blue-500',\n                        iconColor: 'text-blue-500',\n                        textColor: isDarkMode ? 'text-blue-300' : 'text-blue-900'\n                      },\n                      warning: {\n                        icon: AlertTriangle,\n                        bgColor: isDarkMode ? 'bg-yellow-900/30' : 'bg-yellow-50',\n                        borderColor: 'border-yellow-500',\n                        iconColor: 'text-yellow-500',\n                        textColor: isDarkMode ? 'text-yellow-300' : 'text-yellow-900'\n                      },\n                      error: {\n                        icon: AlertCircle,\n                        bgColor: isDarkMode ? 'bg-red-900/30' : 'bg-red-50',\n                        borderColor: 'border-red-500',\n                        iconColor: 'text-red-500',\n                        textColor: isDarkMode ? 'text-red-300' : 'text-red-900'\n                      },\n                      success: {\n                        icon: CheckCircle,\n                        bgColor: isDarkMode ? 'bg-green-900/30' : 'bg-green-50',\n                        borderColor: 'border-green-500',\n                        iconColor: 'text-green-500',\n                        textColor: isDarkMode ? 'text-green-300' : 'text-green-900'\n                      }\n                    };\n\n                    const config = severityConfig[alert.severity];\n                    const Icon = config.icon;\n\n                    return (\n                      <motion.div\n                        key={alert.id}\n                        initial={{ opacity: 0, x: -20 }}\n                        animate={{ opacity: 1, x: 0 }}\n                        exit={{ opacity: 0, x: 20 }}\n                        transition={{ delay: index * 0.1 }}\n                        className={`relative p-3 rounded-lg border-l-4 ${config.bgColor} ${config.borderColor}`}\n                      >\n                        <div className=\"flex items-start gap-3\">\n                          <Icon className={`h-5 w-5 mt-0.5 flex-shrink-0 ${config.iconColor}`} />\n                          <div className=\"flex-1 min-w-0\">\n                            <p className={`text-sm font-medium ${config.textColor}`}>\n                              {alert.message}\n                            </p>\n                            <p className={`text-xs mt-1 ${isDarkMode ? 'text-gray-500' : 'text-gray-600'}`}>\n                              {alert.timestamp}\n                            </p>\n                          </div>\n                          <button\n                            onClick={() => dismissAlert(alert.id)}\n                            className={`flex-shrink-0 p-1 rounded-md transition-colors ${\n                              isDarkMode \n                                ? 'hover:bg-gray-700 text-gray-400 hover:text-gray-200' \n                                : 'hover:bg-gray-200 text-gray-500 hover:text-gray-700'\n                            }`}\n                            aria-label=\"Dismiss alert\"\n                          >\n                            <X className=\"h-4 w-4\" />\n                          </button>\n                        </div>\n                      </motion.div>\n                    );\n                  })\n                )}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}",
  "error": null,
  "overall_score": 52,
  "code_quality_score": 12,
  "architecture_score": 10,
  "performance_score": 14,
  "accessibility_score": 16,
  "metadata": {
    "document_id": "eval_room_dca873a0ac5b",
    "prompt_category": "intermediate",
    "prompt_complexity": 6.0
  },
  "raw_response": {
    "document_id": "eval_room_dca873a0ac5b",
    "mode": "parallel",
    "prompt": "Generate an analytics dashboard page with charts, data tables, real-time updates, dark mode, and responsive design",
    "content": "import { useState, useCallback } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { motion } from 'framer-motion';\nimport { LineChart, Line, ResponsiveContainer } from 'recharts';\nimport { Moon, Sun, RefreshCw } from 'lucide-react';\nimport { ArrowUpDown, ChevronLeft, ChevronRight } from 'lucide-react';\nimport { Badge } from '@/components/ui/badge';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\nimport { TrendingUp, TrendingDown, ShoppingCart, UserPlus, DollarSign, Package } from 'lucide-react';\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\nimport { PieChart, Pie, Cell, ResponsiveContainer, Legend, Tooltip as RechartsTooltip } from 'recharts';\nimport { motion } from 'framer-motion';\nimport { TrendingUp, Users } from 'lucide-react';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts'\n;\nimport { TrendingUp, TrendingDown, DollarSign, Users, ShoppingCart, Target } from 'lucide-react';\nimport { AlertCircle, AlertTriangle, Info, CheckCircle, X } from 'lucide-react';\nn } from 'framer-motion';\n\ninterface MetricData {\n  id: string;\n  label: string;\n  value: number;\n  change: number;\n  trend: 'up' | 'down';\n}\n\ninterface ChartDataPoint {\n  date: string;\n  revenue: number;\n  users: number;\n  orders: number;\n}\n\ninterface TableRow {\n  id: string;\n  product: string;\n  sales: number;\n  revenue: number;\n  status: 'active' | 'pending' | 'inactive';\n}\ninterface Alert {\n  id: string;\n  message: string;\n  severity: 'info' | 'warning' | 'error' | 'success';\n  timestamp: string;\n}\n\nconst mockAlerts: Alert[] = [\n  { id: '1', message: 'Server response time increased by 15%', severity: 'warning', timestamp: '2 min ago' },\n  { id: '2', message: 'New user milestone reached: 2,500 users', severity: 'success', timestamp: '15 min ago' },\n  { id: '3', message: 'Payment gateway experiencing delays', severity: 'error', timestamp: '1 hour ago' },\n  { id: '4', message: 'Scheduled maintenance in 24 hours', severity: 'info', timestamp: '3 hours ago' }\n];\n\nconst mockMetrics: MetricData[] = [\n  { id: '1', label: 'Total Revenue', value: 45231, change: 12.5, trend: 'up' },\n  { id: '2', label: 'Active Users', value: 2350, change: 8.2, trend: 'up' },\n  { id: '3', label: 'Total Orders', value: 1543, change: -3.1, trend: 'down' },\n  { id: '4', label: 'Conversion Rate', value: 3.24, change: 5.7, trend: 'up' }\n];\n\nconst mockChartData: ChartDataPoint[] = [\n  { date: '2024-01-01', revenue: 12000, users: 450, orders: 230 },\n  { date: '2024-01-02', revenue: 15000, users: 520, orders: 280 },\n  { date: '2024-01-03', revenue: 13500, users: 490, orders: 250 },\n  { date: '2024-01-04', revenue: 18000, users: 610, orders: 320 },\n  { date: '2024-01-05', revenue: 16500, users: 580, orders: 295 },\n  { date: '2024-01-06', revenue: 20000, users: 680, orders: 350 },\n  { date: '2024-01-07', revenue: 22000, users: 720, orders: 380 }\n];\n\nconst mockTableData: TableRow[] = [\n  { id: '1', product: 'Premium Plan', sales: 234, revenue: 23400, status: 'active' },\n  { id: '2', product: 'Basic Plan', sales: 567, revenue: 11340, status: 'active' },\n  { id: '3', product: 'Enterprise Plan', sales: 89, revenue: 44500, status: 'active' },\n  { id: '4', product: 'Starter Plan', sales: 432, revenue: 4320, status: 'pending' },\n  { id: '5', product: 'Pro Plan', sales: 156, revenue: 15600, status: 'inactive' }\n];\ninterface QuickStat {\n  id: string;\n  label: string;\n  value: string;\n  change: number;\n  sparklineData: number[];\n  color: string;\n}\n\nconst mockQuickStats: QuickStat[] = [\n  { \n    id: '1', \n    label: 'Avg. Order Value', \n    value: '$127.50', \n    change: 15.3, \n    sparklineData: [100, 120, 115, 140, 135, 150, 145],\n    color: '#3b82f6'\n  },\n  { \n    id: '2', \n    label: 'Bounce Rate', \n    value: '32.4%', \n    change: -8.7, \n    sparklineData: [45, 42, 40, 38, 35, 33, 32],\n    color: '#10b981'\n  },\n  { \n    id: '3', \n    label: 'Session Duration', \n    value: '4m 32s', \n    change: 12.1, \n    sparklineData: [200, 220, 210, 240, 250, 260, 270],\n    color: '#8b5cf6'\n  },\n  { \n    id: '4', \n    label: 'Cart Abandonment', \n    value: '24.8%', \n    change: -5.2, \n    sparklineData: [35, 33, 32, 30, 28, 26, 25],\n    color: '#f59e0b'\n  },\n  { \n    id: '5', \n    label: 'Customer Satisfaction', \n    value: '4.8/5', \n    change: 3.5, \n    sparklineData: [4.5, 4.6, 4.7, 4.7, 4.8, 4.8, 4.8],\n    color: '#ec4899'\n  },\n  { \n    id: '6', \n    label: 'Page Load Time', \n    value: '1.2s', \n    change: -18.5, \n    sparklineData: [2.0, 1.8, 1.6, 1.5, 1.4, 1.3, 1.2],\n    color: '#06b6d4'\n  }\n];\ninterface ActivityItem {\n  id: string;\n  type: 'sale' | 'user' | 'order' | 'revenue';\n  message: string;\n  timestamp: string;\n  icon: 'cart' | 'user' | 'dollar' | 'package' | 'up' | 'down';\n}\n\nconst mockActivityData: ActivityItem[] = [\n  { id: '1', type: 'sale', message: 'New sale: Premium Plan', timestamp: '2 min ago', icon: 'cart' },\n  { id: '2', type: 'user', message: 'New user registered', timestamp: '5 min ago', icon: 'user' },\n  { id: '3', type: 'revenue', message: 'Revenue milestone reached', timestamp: '12 min ago', icon: 'dollar' },\n  { id: '4', type: 'order', message: 'Order #1234 completed', timestamp: '18 min ago', icon: 'package' },\n  { id: '5', type: 'sale', message: 'Enterprise Plan purchased', timestamp: '25 min ago', icon: 'cart' },\n  { id: '6', type: 'user', message: '10 new users today', timestamp: '1 hour ago', icon: 'user' }\n];\n\nexport default function AnalyticsDashboard() {\n  const [sortColumn, setSortColumn] = useState<keyof TableRow | null>(null);\n  const [sortDirection, setSortDirection] = useState<'asc' | 'desc'>('asc');\n  const [currentPage, setCurrentPage] = useState(1);\n  const itemsPerPage = 3;\n  const [isDarkMode, setIsDarkMode] = useState(false);\n  const [metrics, setMetrics] = useState<MetricData[]>(mockMetrics);\n  const [chartData, setChartData] = useState<ChartDataPoint[]>(mockChartData);\n  const [tableData, setTableData] = useState<TableRow[]>(mockTableData);\n  const [isRefreshing, setIsRefreshing] = useState(false);\n  const [quickStats] = useState<QuickStat[]>(mockQuickStats);\n  const [alerts, setAlerts] = useState<Alert[]>(mockAlerts);\n\n  const dismissAlert = useCallback((alertId: string) => {\n    setAlerts(prev => prev.filter(alert => alert.id !== alertId));\n  }, []);\n\n  const toggleDarkMode = useCallback(() => {\n    setIsDarkMode(prev => !prev);\n  }, []);\n\n  const handleSort = useCallback((column: keyof TableRow) => {\n    if (sortColumn === column) {\n      setSortDirection(prev => prev === 'asc' ? 'desc' : 'asc');\n    } else {\n      setSortColumn(column);\n      setSortDirection('asc');\n    }\n    setCurrentPage(1);\n  }, [sortColumn]);\n\n  const sortedTableData = useCallback(() => {\n    if (!sortColumn) return tableData;\n    \n    return [...tableData].sort((a, b) => {\n      const aValue = a[sortColumn];\n      const bValue = b[sortColumn];\n      \n      if (typeof aValue === 'number' && typeof bValue === 'number') {\n        return sortDirection === 'asc' ? aValue - bValue : bValue - aValue;\n      }\n      \n      if (typeof aValue === 'string' && typeof bValue === 'string') {\n        return sortDirection === 'asc' \n          ? aValue.localeCompare(bValue)\n          : bValue.localeCompare(aValue);\n      }\n      \n      return 0;\n    });\n  }, [tableData, sortColumn, sortDirection]);\n\n  const paginatedData = useCallback(() => {\n    const sorted = sortedTableData();\n    const startIndex = (currentPage - 1) * itemsPerPage;\n    const endIndex = startIndex + itemsPerPage;\n    return sorted.slice(startIndex, endIndex);\n  }, [sortedTableData, currentPage]);\n\n  const totalPages = Math.ceil(tableData.length / itemsPerPage);\n\n  const getStatusBadge = (status: TableRow['status']) => {\n    const variants = {\n      active: 'default',\n      pending: 'secondary',\n      inactive: 'outline'\n    } as const;\n    \n    return (\n      <Badge variant={variants[status]} className={\n        status === 'active' ? 'bg-green-500 hover:bg-green-600' :\n        status === 'pending' ? 'bg-yellow-500 hover:bg-yellow-600' :\n        'bg-gray-500 hover:bg-gray-600'\n      }>\n        {status.charAt(0).toUpperCase() + status.slice(1)}\n      </Badge>\n    );\n  };\n</parameter>\n</invoke>\n  const handleRefresh = useCallback(() => {\n    setIsRefreshing(true);\n    \n    setTimeout(() => {\n      // Generate updated mock metrics with random variations\n      const updatedMetrics = mockMetrics.map(metric => ({\n        ...metric,\n        value: metric.value + Math.floor(Math.random() * 200 - 100),\n        change: parseFloat((Math.random() * 20 - 5).toFixed(1)),\n        trend: Math.random() > 0.5 ? 'up' as const : 'down' as const\n      }));\n\n      // Generate updated chart data with random variations\n      const updatedChartData = mockChartData.map(point => ({\n        ...point,\n        revenue: point.revenue + Math.floor(Math.random() * 4000 - 2000),\n        users: point.users + Math.floor(Math.random() * 100 - 50),\n        orders: point.orders + Math.floor(Math.random() * 50 - 25)\n      }));\n\n      // Generate updated table data with random variations\n      const updatedTableData = mockTableData.map(row => ({\n        ...row,\n        sales: row.sales + Math.floor(Math.random() * 40 - 20),\n        revenue: row.revenue + Math.floor(Math.random() * 2000 - 1000)\n      }));\n\n      setMetrics(updatedMetrics);\n      setChartData(updatedChartData);\n      setTableData(updatedTableData);\n      setIsRefreshing(false);\n    }, 1500);\n  }, []);\n\n  return (\n    <div className={`min-h-screen ${isDarkMode ? 'dark bg-gray-900' : 'bg-gray-50'}`}>\n      <div className=\"container mx-auto p-4 md:p-6 lg:p-8\">\n        <div className=\"flex flex-col md:flex-row justify-between items-start md:items-center gap-4 mb-8\">\n          <div>\n            <h1 className={`text-3xl md:text-4xl font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n              Analytics Dashboard\n            </h1>\n            <p className={`mt-2 ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n              Real-time insights and performance metrics\n            </p>\n          </div>\n          \n          <div className=\"flex gap-2\">\n            <Button\n              variant=\"outline\"\n              size=\"icon\"\n              onClick={toggleDarkMode}\n              className={isDarkMode ? 'border-gray-700' : ''}\n            >\n              {isDarkMode ? <Sun className=\"h-5 w-5\" /> : <Moon className=\"h-5 w-5\" />}\n            </Button>\n            \n            <Button\n              variant=\"outline\"\n              onClick={handleRefresh}\n              disabled={isRefreshing}\n              className={isDarkMode ? 'border-gray-700' : ''}\n            >\n              <RefreshCw className={`h-4 w-4 mr-2 ${isRefreshing ? 'animate-spin' : ''}`} />\n              Refresh\n            </Button>\n          </div>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 md:gap-6 mb-8\">\n          {metrics.map((metric, index) => {\n            const Icon = metric.id === '1' ? DollarSign : \n                        metric.id === '2' ? Users : \n                        metric.id === '3' ? ShoppingCart : Target;\n            \n            const TrendIcon = metric.trend === 'up' ? TrendingUp : TrendingDown;\n            const trendColor = metric.trend === 'up' ? 'text-green-500' : 'text-red-500';\n            const trendBgColor = metric.trend === 'up' ? 'bg-green-50 dark:bg-green-900/20' : 'bg-red-50 dark:bg-red-900/20';\n\n            return (\n              <motion.div\n                key={metric.id}\n                initial={{ opacity: 0, y: 20 }}\n                animate={{ opacity: 1, y: 0 }}\n                transition={{ duration: 0.4, delay: index * 0.1 }}\n              >\n                <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n                  <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                    <CardTitle className={`text-sm font-medium ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                      {metric.label}\n                    </CardTitle>\n                    <div className={`p-2 rounded-lg ${isDarkMode ? 'bg-gray-700' : 'bg-gray-100'}`}>\n                      <Icon className={`h-4 w-4 ${isDarkMode ? 'text-gray-300' : 'text-gray-600'}`} />\n                    </div>\n                  </CardHeader>\n                  <CardContent>\n                    <motion.div\n                      initial={{ scale: 0.5 }}\n                      animate={{ scale: 1 }}\n                      transition={{ duration: 0.5, delay: index * 0.1 + 0.2 }}\n                      className={`text-2xl font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}\n                    >\n                      {metric.id === '1' || metric.id === '3' ? \n                        `$${metric.value.toLocaleString()}` : \n                        metric.id === '4' ? \n                        `${metric.value}%` : \n                        metric.value.toLocaleString()\n                      }\n                    </motion.div>\n                    <div className=\"flex items-center mt-2\">\n                      <div className={`flex items-center gap-1 px-2 py-1 rounded-full ${trendBgColor}`}>\n                        <TrendIcon className={`h-3 w-3 ${trendColor}`} />\n                        <span className={`text-xs font-medium ${trendColor}`}>\n                          {Math.abs(metric.change)}%\n                        </span>\n                      </div>\n                      <span className={`text-xs ml-2 ${isDarkMode ? 'text-gray-400' : 'text-gray-500'}`}>\n                        vs last period\n                      </span>\n                    </div>\n                  </CardContent>\n                </Card>\n              </motion.div>\n            );\n          })}\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-4 md:gap-6 mb-8\">\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Revenue Overview</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Daily revenue trends\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"h-[300px] w-full\">\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <LineChart\n                    data={chartData}\n                    margin={{ top: 5, right: 10, left: 0, bottom: 5 }}\n                  >\n                    <CartesianGrid \n                      strokeDasharray=\"3 3\" \n                      stroke={isDarkMode ? '#374151' : '#e5e7eb'}\n                    />\n                    <XAxis \n                      dataKey=\"date\" \n                      stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                      fontSize={12}\n                      tickFormatter={(value) => new Date(value).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n                    />\n                    <YAxis \n                      stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                      fontSize={12}\n                      tickFormatter={(value) => `$${(value / 1000).toFixed(0)}k`}\n                    />\n                    <Tooltip \n                      contentStyle={{\n                        backgroundColor: isDarkMode ? '#1f2937' : '#ffffff',\n                        border: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\n                        borderRadius: '6px',\n                        color: isDarkMode ? '#ffffff' : '#000000'\n                      }}\n                      labelFormatter={(value) => new Date(value).toLocaleDateString('en-US', { month: 'long', day: 'numeric', year: 'numeric' })}\n                      formatter={(value: number) => [`$${value.toLocaleString()}`, 'Revenue']}\n                    />\n                    <Line \n                      type=\"monotone\" \n                      dataKey=\"revenue\" \n                      stroke=\"#3b82f6\" \n                      strokeWidth={2}\n                      dot={{ fill: '#3b82f6', r: 4 }}\n                      activeDot={{ r: 6 }}\n                    />\n                  </LineChart>\n                </ResponsiveContainer>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>User Growth</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Active users over time\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              \n            </CardContent>\n          </Card>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-4 md:gap-6 mb-8\">\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Orders Distribution</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                By product category\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <ResponsiveContainer width=\"100%\" height={300}>\n                <PieChart>\n                  <Pie\n                    data={tableData.map(item => ({\n                      name: item.product,\n                      value: item.sales\n                    }))}\n                    cx=\"50%\"\n                    cy=\"50%\"\n                    labelLine={false}\n                    label={({ name, percent }) => `${name}: ${(percent * 100).toFixed(0)}%`}\n                    outerRadius={80}\n                    fill=\"#8884d8\"\n                    dataKey=\"value\"\n                  >\n                    {tableData.map((entry, index) => {\n                      const colors = ['#3b82f6', '#10b981', '#f59e0b', '#ef4444', '#8b5cf6'];\n                      return <Cell key={`cell-${index}`} fill={colors[index % colors.length]} />;\n                    })}\n                  </Pie>\n                  <RechartsTooltip\n                    contentStyle={{\n                      backgroundColor: isDarkMode ? '#1f2937' : '#ffffff',\n                      border: isDarkMode ? '1px solid #374151' : '1px solid #e5e7eb',\n                      borderRadius: '6px',\n                      color: isDarkMode ? '#ffffff' : '#000000'\n                    }}\n                  />\n                  <Legend\n                    wrapperStyle={{\n                      color: isDarkMode ? '#9ca3af' : '#4b5563'\n                    }}\n                  />\n                </PieChart>\n              </ResponsiveContainer>\n            </CardContent>\n          </Card>\n\n          <Card className={`lg:col-span-2 ${isDarkMode ? 'bg-gray-800 border-gray-700' : ''}`}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Performance Metrics</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Combined view of key indicators\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"h-[300px] w-full\">\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <BarChart\n                    data={chartData}\n                    margin={{ top: 20, right: 30, left: 20, bottom: 5 }}\n                  >\n                    <CartesianGrid \n                      strokeDasharray=\"3 3\" \n                      stroke={isDarkMode ? '#374151' : '#e5e7eb'}\n                    />\n                    <XAxis \n                      dataKey=\"date\" \n                      stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                      tick={{ fill: isDarkMode ? '#9ca3af' : '#6b7280' }}\n                      tickFormatter={(value) => new Date(value).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n                    />\n                    <YAxis \n                      stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                      tick={{ fill: isDarkMode ? '#9ca3af' : '#6b7280' }}\n                    />\n                    <Tooltip \n                      contentStyle={{\n                        backgroundColor: isDarkMode ? '#1f2937' : '#ffffff',\n                        border: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\n                        borderRadius: '8px',\n                        color: isDarkMode ? '#f3f4f6' : '#111827'\n                      }}\n                      labelStyle={{ color: isDarkMode ? '#f3f4f6' : '#111827' }}\n                      formatter={(value: number) => value.toLocaleString()}\n                      labelFormatter={(label) => new Date(label).toLocaleDateString('en-US', { month: 'long', day: 'numeric', year: 'numeric' })}\n                    />\n                    <Legend \n                      wrapperStyle={{ color: isDarkMode ? '#9ca3af' : '#6b7280' }}\n                      iconType=\"rect\"\n                    />\n                    <Bar \n                      dataKey=\"revenue\" \n                      fill=\"#3b82f6\" \n                      radius={[4, 4, 0, 0]}\n                      name=\"Revenue ($)\"\n                    />\n                    <Bar \n                      dataKey=\"users\" \n                      fill=\"#10b981\" \n                      radius={[4, 4, 0, 0]}\n                      name=\"Users\"\n                    />\n                    <Bar \n                      dataKey=\"orders\" \n                      fill=\"#f59e0b\" \n                      radius={[4, 4, 0, 0]}\n                      name=\"Orders\"\n                    />\n                  </BarChart>\n                </ResponsiveContainer>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n          <CardHeader>\n            <CardTitle className={isDarkMode ? 'text-white' : ''}>Top Products</CardTitle>\n            <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n              Best performing products by revenue\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            {/* TODO:DataTable Render sortable table with product data, status badges, pagination, and responsive design */}\n          </CardContent>\n        </Card>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 md:gap-6 mt-8\">\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Recent Activity</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {mockActivityData.map((activity, index) => {\n                  const getIcon = () => {\n                    switch (activity.icon) {\n                      case 'cart':\n                        return <ShoppingCart className=\"h-4 w-4\" />;\n                      case 'user':\n                        return <UserPlus className=\"h-4 w-4\" />;\n                      case 'dollar':\n                        return <DollarSign className=\"h-4 w-4\" />;\n                      case 'package':\n                        return <Package className=\"h-4 w-4\" />;\n                      case 'up':\n                        return <TrendingUp className=\"h-4 w-4\" />;\n                      case 'down':\n                        return <TrendingDown className=\"h-4 w-4\" />;\n                      default:\n                        return <Package className=\"h-4 w-4\" />;\n                    }\n                  };\n\n                  const getIconColor = () => {\n                    switch (activity.type) {\n                      case 'sale':\n                        return 'bg-green-500';\n                      case 'user':\n                        return 'bg-blue-500';\n                      case 'revenue':\n                        return 'bg-purple-500';\n                      case 'order':\n                        return 'bg-orange-500';\n                      default:\n                        return 'bg-gray-500';\n                    }\n                  };\n\n                  return (\n                    <div\n                      key={activity.id}\n                      className=\"flex items-start gap-3 animate-in fade-in slide-in-from-left-2\"\n                      style={{ animationDelay: `${index * 100}ms` }}\n                    >\n                      <div className={`${getIconColor()} rounded-full p-2 text-white flex-shrink-0`}>\n                        {getIcon()}\n                      </div>\n                      <div className=\"flex-1 min-w-0\">\n                        <p className={`text-sm font-medium ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                          {activity.message}\n                        </p>\n                        <p className={`text-xs ${isDarkMode ? 'text-gray-400' : 'text-gray-500'}`}>\n                          {activity.timestamp}\n                        </p>\n                      </div>\n                    </div>\n                  );\n                })}\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Quick Stats</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {quickStats.map((stat, index) => (\n                  <motion.div\n                    key={stat.id}\n                    initial={{ opacity: 0, x: -20 }}\n                    animate={{ opacity: 1, x: 0 }}\n                    transition={{ delay: index * 0.1 }}\n                    className={`p-4 rounded-lg border ${\n                      isDarkMode ? 'bg-gray-700/50 border-gray-600' : 'bg-white border-gray-200'\n                    }`}\n                  >\n                    <div className=\"flex items-start justify-between mb-3\">\n                      <div className=\"flex-1\">\n                        <p className={`text-xs font-medium ${isDarkMode ? 'text-gray-400' : 'text-gray-500'}`}>\n                          {stat.label}\n                        </p>\n                        <p className={`text-xl font-bold mt-1 ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                          {stat.value}\n                        </p>\n                      </div>\n                      <div className={`flex items-center gap-1 px-2 py-1 rounded text-xs font-medium ${\n                        stat.change >= 0\n                          ? 'bg-green-100 text-green-700 dark:bg-green-900/30 dark:text-green-400'\n                          : 'bg-red-100 text-red-700 dark:bg-red-900/30 dark:text-red-400'\n                      }`}>\n                        {stat.change >= 0 ? (\n                          <TrendingUp className=\"h-3 w-3\" />\n                        ) : (\n                          <TrendingDown className=\"h-3 w-3\" />\n                        )}\n                        {Math.abs(stat.change)}%\n                      </div>\n                    </div>\n                    <div className=\"h-12\">\n                      <ResponsiveContainer width=\"100%\" height=\"100%\">\n                        <LineChart data={stat.sparklineData.map((value, i) => ({ value, index: i }))}>\n                          <Line\n                            type=\"monotone\"\n                            dataKey=\"value\"\n                            stroke={stat.color}\n                            strokeWidth={2}\n                            dot={false}\n                            animationDuration={1000}\n                          />\n                        </LineChart>\n                      </ResponsiveContainer>\n                    </div>\n                  </motion.div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Alerts</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-3\">\n                {alerts.length === 0 ? (\n                  <div className={`text-center py-8 ${isDarkMode ? 'text-gray-400' : 'text-gray-500'}`}>\n                    <CheckCircle className=\"h-12 w-12 mx-auto mb-2 opacity-50\" />\n                    <p>No active alerts</p>\n                  </div>\n                ) : (\n                  alerts.map((alert, index) => {\n                    const severityConfig = {\n                      info: {\n                        icon: Info,\n                        bgColor: isDarkMode ? 'bg-blue-900/30' : 'bg-blue-50',\n                        borderColor: 'border-blue-500',\n                        iconColor: 'text-blue-500',\n                        textColor: isDarkMode ? 'text-blue-300' : 'text-blue-900'\n                      },\n                      warning: {\n                        icon: AlertTriangle,\n                        bgColor: isDarkMode ? 'bg-yellow-900/30' : 'bg-yellow-50',\n                        borderColor: 'border-yellow-500',\n                        iconColor: 'text-yellow-500',\n                        textColor: isDarkMode ? 'text-yellow-300' : 'text-yellow-900'\n                      },\n                      error: {\n                        icon: AlertCircle,\n                        bgColor: isDarkMode ? 'bg-red-900/30' : 'bg-red-50',\n                        borderColor: 'border-red-500',\n                        iconColor: 'text-red-500',\n                        textColor: isDarkMode ? 'text-red-300' : 'text-red-900'\n                      },\n                      success: {\n                        icon: CheckCircle,\n                        bgColor: isDarkMode ? 'bg-green-900/30' : 'bg-green-50',\n                        borderColor: 'border-green-500',\n                        iconColor: 'text-green-500',\n                        textColor: isDarkMode ? 'text-green-300' : 'text-green-900'\n                      }\n                    };\n\n                    const config = severityConfig[alert.severity];\n                    const Icon = config.icon;\n\n                    return (\n                      <motion.div\n                        key={alert.id}\n                        initial={{ opacity: 0, x: -20 }}\n                        animate={{ opacity: 1, x: 0 }}\n                        exit={{ opacity: 0, x: 20 }}\n                        transition={{ delay: index * 0.1 }}\n                        className={`relative p-3 rounded-lg border-l-4 ${config.bgColor} ${config.borderColor}`}\n                      >\n                        <div className=\"flex items-start gap-3\">\n                          <Icon className={`h-5 w-5 mt-0.5 flex-shrink-0 ${config.iconColor}`} />\n                          <div className=\"flex-1 min-w-0\">\n                            <p className={`text-sm font-medium ${config.textColor}`}>\n                              {alert.message}\n                            </p>\n                            <p className={`text-xs mt-1 ${isDarkMode ? 'text-gray-500' : 'text-gray-600'}`}>\n                              {alert.timestamp}\n                            </p>\n                          </div>\n                          <button\n                            onClick={() => dismissAlert(alert.id)}\n                            className={`flex-shrink-0 p-1 rounded-md transition-colors ${\n                              isDarkMode \n                                ? 'hover:bg-gray-700 text-gray-400 hover:text-gray-200' \n                                : 'hover:bg-gray-200 text-gray-500 hover:text-gray-700'\n                            }`}\n                            aria-label=\"Dismiss alert\"\n                          >\n                            <X className=\"h-4 w-4\" />\n                          </button>\n                        </div>\n                      </motion.div>\n                    );\n                  })\n                )}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}",
    "error": null,
    "elapsed_time": 79.35397982597351,
    "success": true
  }
}