{
  "prompt_id": "algorithm_visualizer",
  "prompt_name": "Algorithm Visualizer",
  "mode": "parallel",
  "run_number": 1,
  "timestamp": "2025-10-14T09:34:18.805784",
  "response_time": 409.7918312549591,
  "total_tokens": null,
  "response_content": "import { useState, useCallback } from 'react';\nimport { useEffect, useRef } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Slider } from '@/components/ui/slider';\nimport { Play, Pause, RotateCcw, Zap, BarChart3 } from 'lucide-react';\nimport { motion } from 'framer-motion';\n\ninterface ArrayElement {\n  value: number;\n  id: string;\n  isComparing?: boolean;\n  isSwapping?: boolean;\n  isSorted?: boolean;\n}\n\ninterface AlgorithmStep {\n  array: ArrayElement[];\n  comparingIndices: number[];\n  swappingIndices: number[];\n  sortedIndices: number[];\n}\n\ntype AlgorithmType = 'bubble' | 'quick' | 'merge' | 'insertion';\n\nconst NEON_COLORS = [\n  '#00ffff',\n  '#ff00ff', \n  '#00ff00',\n  '#ffff00',\n  '#ff0066',\n  '#00ffaa'\n];\n\nconst mockAlgorithms = [\n  { id: 'bubble', name: 'Bubble Sort', complexity: 'O(n\u00b2)' },\n  { id: 'quick', name: 'Quick Sort', complexity: 'O(n log n)' },\n  { id: 'merge', name: 'Merge Sort', complexity: 'O(n log n)' },\n  { id: 'insertion', name: 'Insertion Sort', complexity: 'O(n\u00b2)' }\n];\n\nexport default function AlgorithmVisualizer() {\n  const [array, setArray] = useState<ArrayElement[]>([]);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [speed, setSpeed] = useState([50]);\n  const [arraySize, setArraySize] = useState([20]);\n  const [selectedAlgorithm, setSelectedAlgorithm] = useState<AlgorithmType>('bubble');\n  const [currentStep, setCurrentStep] = useState(0);\n  const [steps, setSteps] = useState<AlgorithmStep[]>([]);\n  const [comparisons, setComparisons] = useState(0);\n  const [swaps, setSwaps] = useState(0);\n\n  const generateRandomArray = useCallback(() => {\n    const newArray: ArrayElement[] = Array.from({ length: arraySize[0] }, (_, index) => ({\n      value: Math.floor(Math.random() * 100) + 5,\n      id: `element-${Date.now()}-${index}`,\n      isComparing: false,\n      isSwapping: false,\n      isSorted: false\n    }));\n    setArray(newArray);\n    setSteps([]);\n    setCurrentStep(0);\n    setIsPlaying(false);\n  }, [arraySize]);\n\n  const resetVisualization = useCallback(() => {\n\nsetIsPlaying(false);\n    setCurrentStep(0);\n    setSteps([]);\n        generateRandomArray();\n  }, [generateRandomArray]);\n\n  const animateSteps = useCallback(() => {\n    if (currentStep >= steps.length) {\n      setIsPlaying(false);\n      return;\n    }\n\n    const step = steps[currentStep];\n    setArray(step.array);\n    setCurrentStep(prev => prev + 1);\n  }, [currentStep, steps]);\n\n  const startVisualization = useCallback(() => {\n    if (steps.length === 0 || currentStep >= steps.length) return;\n    setIsPlaying(true);\n    \n  }, [steps, speed, currentStep]);\n  useEffect(() => {\n    if (!isPlaying) return;\n\n    const delay = 1000 - (speed[0] * 9.5);\n    const timer = setTimeout(() => {\n      animateSteps();\n    }, delay);\n\n    return () => clearTimeout(timer);\n  }, [isPlaying, speed, animateSteps]);\n\n  const pauseVisualization = useCallback(() => {\n\n    setIsPlaying(false);\n  }, []);\n\n  const generateSortingSteps = useCallback((algorithm: AlgorithmType) => {\n    if (array.length === 0) return;\n\n    const newSteps: AlgorithmStep[] = [];\n    const arr = [...array];\n\n    const addStep = (\n      comparingIndices: number[] = [],\n      swappingIndices: number[] = [],\n      sortedIndices: number[] = []\n    ) => {\n      newSteps.push({\n        array: arr.map((el, idx) => ({\n          ...el,\n          isComparing: comparingIndices.includes(idx),\n          isSwapping: swappingIndices.includes(idx),\n          isSorted: sortedIndices.includes(idx)\n        })),\n        comparingIndices,\n        swappingIndices,\n        sortedIndices\n      });\n    };\n\n    const swap = (i: number, j: number) => {\n      [arr[i], arr[j]] = [arr[j], arr[i]];\n    };\n\n    switch (algorithm) {\n      case 'bubble': {\n        const sorted: number[] = [];\n        for (let i = 0; i < arr.length - 1; i++) {\n          for (let j = 0; j < arr.length - i - 1; j++) {\n            addStep([j, j + 1], [], sorted);\n            if (arr[j].value > arr[j + 1].value) {\n              addStep([j, j + 1], [j, j + 1], sorted);\n              swap(j, j + 1);\n              addStep([], [], sorted);\n            }\n          }\n          sorted.push(arr.length - i - 1);\n          addStep([], [], sorted);\n        }\n        sorted.push(0);\n        addStep([], [], sorted);\n        break;\n      }\n\n      case 'insertion': {\n        const sorted: number[] = [0];\n        addStep([], [], sorted);\n        for (let i = 1; i < arr.length; i++) {\n          let j = i;\n          addStep([j, j - 1], [], sorted);\n          while (j > 0 && arr[j].value < arr[j - 1].value) {\n            addStep([j, j - 1], [j, j - 1], sorted);\n            swap(j, j - 1);\n            j--;\n            addStep([j, j + 1], [], sorted);\n          }\n          sorted.push(i);\n          addStep([], [], sorted);\n        }\n        break;\n      }\n\n      case 'quick': {\n        const sorted: number[] = [];\n        const quickSort = (low: number, high: number) => {\n          if (low < high) {\n            const pivotIndex = partition(low, high);\n            sorted.push(pivotIndex);\n            addStep([], [], sorted);\n            quickSort(low, pivotIndex - 1);\n            quickSort(pivotIndex + 1, high);\n          } else if (low === high) {\n            sorted.push(low);\n            addStep([], [], sorted);\n          }\n        };\n\n        const partition = (low: number, high: number): number => {\n          const pivot = arr[high].value;\n          let i = low - 1;\n\n          for (let j = low; j < high; j++) {\n            addStep([j, high], [], sorted);\n            if (arr[j].value < pivot) {\n              i++;\n              if (i !== j) {\n                addStep([i, j], [i, j], sorted);\n                swap(i, j);\n              }\n            }\n          }\n          addStep([i + 1, high], [i + 1, high], sorted);\n          swap(i + 1, high);\n          return i + 1;\n        };\n\n        quickSort(0, arr.length - 1);\n        break;\n      }\n\n      case 'merge': {\n        const sorted: number[] = [];\n        const mergeSort = (left: number, right: number) => {\n          if (left >= right) {\n            return;\n          }\n\n          const mid = Math.floor((left + right) / 2);\n          mergeSort(left, mid);\n          mergeSort(mid + 1, right);\n          merge(left, mid, right);\n        };\n\n        const merge = (left: number, mid: number, right: number) => {\n          const leftArr = arr.slice(left, mid + 1);\n          const rightArr = arr.slice(mid + 1, right + 1);\n\n          let i = 0, j = 0, k = left;\n\n          while (i < leftArr.length && j < rightArr.length) {\n            addStep([left + i, mid + 1 + j], [], sorted);\n            if (leftArr[i].value <= rightArr[j].value) {\n              arr[k] = leftArr[i];\n              i++;\n            } else {\n              arr[k] = rightArr[j];\n              j++;\n            }\n            k++;\n            addStep([], [k - 1], sorted);\n          }\n\n          while (i < leftArr.length) {\n            arr[k] = leftArr[i];\n            addStep([], [k], sorted);\n            i++;\n            k++;\n          }\n\n          while (j < rightArr.length) {\n            arr[k] = rightArr[j];\n            addStep([], [k], sorted);\n            j++;\n            k++;\n          }\n\n          for (let idx = left; idx <= right; idx++) {\n            if (!sorted.includes(idx)) {\n              sorted.push(idx);\n            }\n          }\n          addStep([], [], sorted);\n        };\n\n        mergeSort(0, arr.length - 1);\n        break;\n      }\n    }\n\n    setSteps(newSteps);\n    setCurrentStep(0);\n  }, [array]);\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-gray-900 via-purple-900 to-gray-900 p-8\">\n      <div className=\"max-w-7xl mx-auto space-y-8\">\n        <motion.div\n          initial={{ opacity: 0, y: -20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.8 }}\n          className=\"text-center space-y-4\"\n        >\n          <motion.h1\n            className=\"text-6xl font-bold bg-gradient-to-r from-cyan-400 via-purple-400 to-pink-400 bg-clip-text text-transparent\"\n            animate={{\n              textShadow: [\n                '0 0 20px rgba(0, 255, 255, 0.5)',\n                '0 0 40px rgba(255, 0, 255, 0.5)',\n                '0 0 20px rgba(0, 255, 255, 0.5)'\n              ]\n            }}\n            transition={{ duration: 2, repeat: Infinity }}\n          >\n            Algorithm Visualizer\n          </motion.h1>\n          \n          <div className=\"flex items-center justify-center gap-4\">\n            <motion.div\n              initial={{ scale: 0 }}\n              animate={{ scale: 1 }}\n              transition={{ delay: 0.3, type: \"spring\" }}\n              className=\"flex items-center gap-2 px-6 py-3 bg-gray-800/50 backdrop-blur-sm rounded-full border border-cyan-500/30\"\n            >\n              <Zap className=\"w-5 h-5 text-cyan-400\" />\n              <span className=\"text-xl font-semibold text-cyan-300\">\n                {mockAlgorithms.find(a => a.id === selectedAlgorithm)?.name}\n              </span>\n            </motion.div>\n            \n            <motion.div\n              initial={{ scale: 0 }}\n              animate={{ scale: 1 }}\n              transition={{ delay: 0.5, type: \"spring\" }}\n              className=\"flex items-center gap-2 px-4 py-2 bg-purple-900/50 backdrop-blur-sm rounded-full border border-purple-500/50\"\n              style={{\n                boxShadow: '0 0 20px rgba(168, 85, 247, 0.4)'\n              }}\n            >\n              <BarChart3 className=\"w-4 h-4 text-purple-300\" />\n              <span className=\"text-sm font-mono text-purple-200\">\n                {mockAlgorithms.find(a => a.id === selectedAlgorithm)?.complexity}\n              </span>\n            </motion.div>\n          </div>\n        </motion.div></parameter>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-6\">\n          <div className=\"lg:col-span-1 space-y-6\">\n            <motion.div\n              initial={{ opacity: 0, x: -50 }}\n              animate={{ opacity: 1, x: 0 }}\n              className=\"bg-gray-800/50 backdrop-blur-lg rounded-2xl p-6 border border-cyan-500/30 shadow-[0_0_30px_rgba(0,255,255,0.3)]\"\n            >\n              <div className=\"space-y-6\">\n                {/* Algorithm Selection */}\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center gap-2 text-cyan-400\">\n                    <Zap className=\"w-5 h-5\" />\n                    <h3 className=\"font-semibold text-lg\">Algorithm</h3>\n                  </div>\n                  <div className=\"space-y-2\">\n                    {mockAlgorithms.map((algo) => (\n                      <button\n                        key={algo.id}\n                        onClick={() => {\n                          setSelectedAlgorithm(algo.id as AlgorithmType);\n                          generateSortingSteps(algo.id as AlgorithmType);\n                        }}\n                        disabled={isPlaying}\n                        className={`w-full p-3 rounded-lg text-left transition-all duration-300 ${\n                          selectedAlgorithm === algo.id\n                            ? 'bg-cyan-500/20 border-2 border-cyan-400 shadow-[0_0_20px_rgba(0,255,255,0.4)]'\n                            : 'bg-gray-700/50 border-2 border-gray-600/50 hover:border-cyan-500/50 hover:shadow-[0_0_15px_rgba(0,255,255,0.2)]'\n                        } disabled:opacity-50 disabled:cursor-not-allowed`}\n                      >\n                        <div className=\"font-medium text-white\">{algo.name}</div>\n                        <div className=\"text-xs text-gray-400 mt-1\">{algo.complexity}</div>\n                      </button>\n                    ))}\n                  </div>\n                </div>\n\n                {/* Array Size Control */}\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center gap-2 text-purple-400\">\n                    <BarChart3 className=\"w-5 h-5\" />\n                    <h3 className=\"font-semibold\">Array Size</h3>\n                  </div>\n                  <div className=\"space-y-2\">\n                    <div className=\"flex justify-between text-sm text-gray-300\">\n                      <span>Size</span>\n                      <span className=\"text-cyan-400 font-mono\">{arraySize[0]}</span>\n                    </div>\n                    <Slider\n                      value={arraySize}\n                      onValueChange={setArraySize}\n                      min={5}\n                      max={50}\n                      step={1}\n                      disabled={isPlaying}\n                      className=\"cursor-pointer\"\n                    />\n                  </div>\n                </div>\n\n                {/* Speed Control */}\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center gap-2 text-pink-400\">\n                    <Zap className=\"w-5 h-5\" />\n                    <h3 className=\"font-semibold\">Speed</h3>\n                  </div>\n                  <div className=\"space-y-2\">\n                    <div className=\"flex justify-between text-sm text-gray-300\">\n                      <span>Animation Speed</span>\n                      <span className=\"text-cyan-400 font-mono\">{speed[0]}%</span>\n                    </div>\n                    <Slider\n                      value={speed}\n                      onValueChange={setSpeed}\n                      min={10}\n                      max={100}\n                      step={10}\n                      className=\"cursor-pointer\"\n                    />\n                  </div>\n                </div>\n\n                {/* Control Buttons */}\n                <div className=\"space-y-3 pt-4 border-t border-gray-700/50\">\n                  <Button\n                    onClick={isPlaying ? pauseVisualization : startVisualization}\n                    disabled={steps.length === 0 || (currentStep >= steps.length && !isPlaying)}\n                    className=\"w-full bg-gradient-to-r from-cyan-500 to-blue-500 hover:from-cyan-400 hover:to-blue-400 text-white font-semibold py-6 rounded-lg shadow-[0_0_25px_rgba(0,255,255,0.5)] hover:shadow-[0_0_35px_rgba(0,255,255,0.7)] transition-all duration-300 disabled:opacity-50 disabled:cursor-not-allowed\"\n                  >\n                    {isPlaying ? (\n                      <>\n                        <Pause className=\"w-5 h-5 mr-2\" />\n                        Pause\n                      </>\n                    ) : (\n                      <>\n                        <Play className=\"w-5 h-5 mr-2\" />\n                        {currentStep >= steps.length ? 'Finished' : 'Start'}\n                      </>\n                    )}\n                  </Button>\n\n                  <Button\n                    onClick={resetVisualization}\n                    disabled={isPlaying}\n                    className=\"w-full bg-gradient-to-r from-purple-500 to-pink-500 hover:from-purple-400 hover:to-pink-400 text-white font-semibold py-6 rounded-lg shadow-[0_0_25px_rgba(255,0,255,0.5)] hover:shadow-[0_0_35px_rgba(255,0,255,0.7)] transition-all duration-300 disabled:opacity-50 disabled:cursor-not-allowed\"\n                  >\n                    <RotateCcw className=\"w-5 h-5 mr-2\" />\n                    Reset\n                  </Button>\n                </div>\n\n                {/* Stats Display */}\n                <div className=\"pt-4 border-t border-gray-700/50 space-y-2\">\n                  <div className=\"flex justify-between text-sm\">\n                    <span className=\"text-gray-400\">Current Step</span>\n                    <span className=\"text-cyan-400 font-mono\">{currentStep} / {steps.length}</span>\n                  </div>\n                  <div className=\"flex justify-between text-sm\">\n                    <span className=\"text-gray-400\">Array Elements</span>\n                    <span className=\"text-purple-400 font-mono\">{array.length}</span>\n                  </div>\n                </div>\n              </div>\n            </motion.div>\n            \n            <div className=\"bg-gray-800/50 backdrop-blur-lg rounded-2xl p-6 border border-cyan-500/30 shadow-lg shadow-cyan-500/20\">\n              <div className=\"space-y-6\">\n                <div>\n                  <h3 className=\"text-cyan-400 font-semibold mb-4 flex items-center gap-2\">\n                    <Zap className=\"w-5 h-5\" />\n                    Algorithm\n                  </h3>\n                  <div className=\"grid grid-cols-2 gap-3\">\n                    {mockAlgorithms.map((algo) => (\n                      <motion.button\n                        key={algo.id}\n                        onClick={() => setSelectedAlgorithm(algo.id as AlgorithmType)}\n                        className={`relative p-3 rounded-lg font-medium text-sm transition-all duration-300 ${\n                          selectedAlgorithm === algo.id\n                            ? 'bg-cyan-500/20 text-cyan-300 border-2 border-cyan-400 shadow-lg shadow-cyan-500/50'\n                            : 'bg-gray-700/50 text-gray-300 border border-gray-600 hover:border-cyan-500/50 hover:shadow-lg hover:shadow-cyan-500/30'\n                        }`}\n                        whileHover={{ scale: 1.05 }}\n                        whileTap={{ scale: 0.95 }}\n                      >\n                        <div className=\"flex flex-col items-center gap-1\">\n                          <span>{algo.name.split(' ')[0]}</span>\n                          <span className=\"text-xs opacity-70\">{algo.complexity}</span>\n                        </div>\n                        {selectedAlgorithm === algo.id && (\n                          <motion.div\n                            className=\"absolute inset-0 rounded-lg bg-cyan-400/10\"\n                            layoutId=\"algorithmGlow\"\n                            transition={{ type: \"spring\", bounce: 0.2, duration: 0.6 }}\n                          />\n                        )}\n                      </motion.button>\n                    ))}\n                  </div>\n                </div>\n\n                <div>\n                  <h3 className=\"text-cyan-400 font-semibold mb-4\">Speed</h3>\n                  <Slider\n                    value={speed}\n                    onValueChange={setSpeed}\n                    min={1}\n                    max={100}\n                    step={1}\n                    className=\"[&_[role=slider]]:bg-cyan-400 [&_[role=slider]]:border-cyan-300 [&_[role=slider]]:shadow-lg [&_[role=slider]]:shadow-cyan-400/50 [&_[role=slider]]:transition-shadow [&_[role=slider]]:hover:shadow-cyan-400/80 [&_.relative]:bg-gray-700 [&_.bg-primary]:bg-gradient-to-r [&_.bg-primary]:from-cyan-500 [&_.bg-primary]:to-purple-500\"\n                  />\n                  <div className=\"flex justify-between text-xs text-gray-400 mt-2\">\n                    <span>Slow</span>\n                    <span className=\"text-cyan-400 font-semibold\">{speed[0]}%</span>\n                    <span>Fast</span>\n                  </div></parameter>\n</invoke>\n                </div>\n\n                <div>\n                  <h3 className=\"text-cyan-400 font-semibold mb-4\">Array Size</h3>\n                  <div className=\"space-y-3\">\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"text-sm text-gray-400\">Size</span>\n                      <motion.span \n                        key={arraySize[0]}\n                        initial={{ scale: 1.3, color: '#00ffff' }}\n                        animate={{ scale: 1, color: '#9ca3af' }}\n                        className=\"text-sm font-mono font-bold\"\n                      >\n                        {arraySize[0]}\n                      </motion.span>\n                    </div>\n                    <Slider\n                      value={arraySize}\n                      onValueChange={setArraySize}\n                      min={5}\n                      max={50}\n                      step={1}\n                      className=\"[&_[role=slider]]:bg-cyan-400 [&_[role=slider]]:border-cyan-300 [&_[role=slider]]:shadow-lg [&_[role=slider]]:shadow-cyan-400/50 [&_.slider-track]:bg-cyan-500/30 [&_.slider-range]:bg-gradient-to-r [&_.slider-range]:from-cyan-500 [&_.slider-range]:to-purple-500\"\n                      disabled={isPlaying}\n                    />\n                  </div>\n                </div>\n\n                <div className=\"space-y-3 pt-4 border-t border-cyan-500/20\">\n                  <motion.button\n                    onClick={isPlaying ? pauseVisualization : startVisualization}\n                    disabled={array.length === 0 || (currentStep >= steps.length && steps.length > 0)}\n                    className={`w-full py-4 rounded-xl font-bold text-lg transition-all duration-300 disabled:opacity-50 disabled:cursor-not-allowed ${\n                      isPlaying\n                        ? 'bg-gradient-to-r from-orange-500 to-red-500 hover:from-orange-600 hover:to-red-600 shadow-[0_0_30px_rgba(249,115,22,0.6)]'\n                        : 'bg-gradient-to-r from-cyan-500 to-blue-500 hover:from-cyan-600 hover:to-blue-600 shadow-[0_0_30px_rgba(6,182,212,0.6)]'\n                    }`}\n                    whileHover={{ scale: 1.05 }}\n                    whileTap={{ scale: 0.95 }}\n                  >\n                    <motion.div\n                      className=\"flex items-center justify-center gap-3\"\n                      animate={isPlaying ? { scale: [1, 1.1, 1] } : {}}\n                      transition={{ duration: 1, repeat: isPlaying ? Infinity : 0 }}\n                    >\n                      {isPlaying ? (\n                        <>\n                          <Pause className=\"w-6 h-6\" />\n                          <span>Pause</span>\n                        </>\n                      ) : (\n                        <>\n                          <Play className=\"w-6 h-6\" />\n                          <span>Start</span>\n                        </>\n                      )}\n                    </motion.div>\n                  </motion.button>\n\n                  <motion.button\n                    onClick={resetVisualization}\n                    disabled={isPlaying}\n                    className=\"w-full py-4 rounded-xl font-bold text-lg bg-gradient-to-r from-purple-500 to-pink-500 hover:from-purple-600 hover:to-pink-600 transition-all duration-300 shadow-[0_0_30px_rgba(168,85,247,0.6)] hover:shadow-[0_0_40px_rgba(168,85,247,0.8)] disabled:opacity-50 disabled:cursor-not-allowed\"\n                    whileHover={{ scale: 1.05 }}\n                    whileTap={{ scale: 0.95 }}\n                  >\n                    <motion.div\n                      className=\"flex items-center justify-center gap-3\"\n                      whileHover={{ rotate: 180 }}\n                      transition={{ duration: 0.5 }}\n                    >\n                      <RotateCcw className=\"w-6 h-6\" />\n                      <span>Reset</span>\n                    </motion.div>\n                  </motion.button>\n                </div>\n              </div>\n            </div>\n\n            \n<motion.div\n              initial={{ opacity: 0, x: -50 }}\n              animate={{ opacity: 1, x: 0 }}\n              transition={{ delay: 0.2 }}\n              className=\"bg-gray-800/50 backdrop-blur-lg rounded-2xl p-6 border border-purple-500/30 shadow-[0_0_30px_rgba(168,85,247,0.3)]\"\n            >\n              <div className=\"space-y-4\">\n                <div className=\"flex items-center gap-2 text-purple-400 mb-4\">\n                  <BarChart3 className=\"w-5 h-5\" />\n                  <h3 className=\"font-semibold text-lg\">Statistics</h3>\n                </div>\n\n                <div className=\"grid grid-cols-1 gap-4\">\n                  {/* Comparisons */}\n                  <motion.div\n                    className=\"bg-gradient-to-br from-cyan-900/30 to-cyan-800/20 rounded-xl p-4 border border-cyan-500/40 shadow-[0_0_15px_rgba(0,255,255,0.2)]\"\n                    whileHover={{ scale: 1.02, boxShadow: '0 0 25px rgba(0,255,255,0.4)' }}\n                    transition={{ duration: 0.2 }}\n                  >\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <div className=\"text-xs text-cyan-300/70 uppercase tracking-wider mb-1\">\n                          Comparisons\n                        </div>\n                        <motion.div\n                          key={comparisons}\n                          initial={{ scale: 1.3, color: '#00ffff' }}\n                          animate={{ scale: 1, color: '#ffffff' }}\n                          className=\"text-3xl font-bold text-white font-mono\"\n                        >\n                          {comparisons}\n                        </motion.div>\n                      </div>\n                      <motion.div\n                        animate={{\n                          boxShadow: [\n                            '0 0 10px rgba(0,255,255,0.5)',\n                            '0 0 20px rgba(0,255,255,0.8)',\n                            '0 0 10px rgba(0,255,255,0.5)'\n                          ]\n                        }}\n                        transition={{ duration: 2, repeat: Infinity }}\n                        className=\"w-12 h-12 rounded-full bg-cyan-500/20 flex items-center justify-center\"\n                      >\n                        <BarChart3 className=\"w-6 h-6 text-cyan-400\" />\n                      </motion.div>\n                    </div>\n                  </motion.div>\n\n                  {/* Swaps */}\n                  <motion.div\n                    className=\"bg-gradient-to-br from-pink-900/30 to-pink-800/20 rounded-xl p-4 border border-pink-500/40 shadow-[0_0_15px_rgba(255,0,102,0.2)]\"\n                    whileHover={{ scale: 1.02, boxShadow: '0 0 25px rgba(255,0,102,0.4)' }}\n                    transition={{ duration: 0.2 }}\n                  >\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <div className=\"text-xs text-pink-300/70 uppercase tracking-wider mb-1\">\n                          Swaps\n                        </div>\n                        <motion.div\n                          key={swaps}\n                          initial={{ scale: 1.3, color: '#ff0066' }}\n                          animate={{ scale: 1, color: '#ffffff' }}\n                          className=\"text-3xl font-bold text-white font-mono\"\n                        >\n                          {swaps}\n                        </motion.div>\n                      </div>\n                      <motion.div\n                        animate={{\n                          rotate: [0, 180, 360],\n                          boxShadow: [\n                            '0 0 10px rgba(255,0,102,0.5)',\n                            '0 0 20px rgba(255,0,102,0.8)',\n                            '0 0 10px rgba(255,0,102,0.5)'\n                          ]\n                        }}\n                        transition={{ duration: 3, repeat: Infinity }}\n                        className=\"w-12 h-12 rounded-full bg-pink-500/20 flex items-center justify-center\"\n                      >\n                        <RotateCcw className=\"w-6 h-6 text-pink-400\" />\n                      </motion.div>\n                    </div>\n                  </motion.div>\n\n                  {/* Progress */}\n                  <motion.div\n                    className=\"bg-gradient-to-br from-purple-900/30 to-purple-800/20 rounded-xl p-4 border border-purple-500/40 shadow-[0_0_15px_rgba(168,85,247,0.2)]\"\n                    whileHover={{ scale: 1.02, boxShadow: '0 0 25px rgba(168,85,247,0.4)' }}\n                    transition={{ duration: 0.2 }}\n                  >\n                    <div className=\"space-y-3\">\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"text-xs text-purple-300/70 uppercase tracking-wider\">\n                          Progress\n                        </div>\n                        <motion.div\n                          key={currentStep}\n                          initial={{ scale: 1.2 }}\n                          animate={{ scale: 1 }}\n                          className=\"text-lg font-bold text-white font-mono\"\n                        >\n                          {steps.length > 0 ? Math.round((currentStep / steps.length) * 100) : 0}%\n                        </motion.div>\n                      </div>\n                      \n                      <div className=\"relative h-3 bg-gray-700/50 rounded-full overflow-hidden\">\n                        <motion.div\n                          className=\"absolute inset-y-0 left-0 bg-gradient-to-r from-purple-500 via-pink-500 to-cyan-500 rounded-full\"\n                          initial={{ width: 0 }}\n                          animate={{\n                            width: steps.length > 0 ? `${(currentStep / steps.length) * 100}%` : '0%'\n                          }}\n                          transition={{ duration: 0.3 }}\n                          style={{\n                            boxShadow: '0 0 15px rgba(168,85,247,0.6)'\n                          }}\n                        />\n                        <motion.div\n                          className=\"absolute inset-0 bg-gradient-to-r from-transparent via-white/30 to-transparent\"\n                          animate={{\n                            x: ['-100%', '200%']\n                          }}\n                          transition={{\n                            duration: 2,\n                            repeat: Infinity,\n                            ease: 'linear'\n                          }}\n                        />\n                      </div>\n\n                      <div className=\"flex justify-between text-xs text-gray-400 font-mono\">\n                        <span>Step {currentStep}</span>\n                        <span>of {steps.length}</span>\n                      </div>\n                    </div>\n                  </motion.div>\n\n                  {/* Array Status */}\n                  <motion.div\n                    className=\"bg-gradient-to-br from-green-900/30 to-green-800/20 rounded-xl p-4 border border-green-500/40 shadow-[0_0_15px_rgba(0,255,170,0.2)]\"\n                    whileHover={{ scale: 1.02, boxShadow: '0 0 25px rgba(0,255,170,0.4)' }}\n                    transition={{ duration: 0.2 }}\n                  >\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <div className=\"text-xs text-green-300/70 uppercase tracking-wider mb-1\">\n                          Array Size\n                        </div>\n                        <div className=\"text-3xl font-bold text-white font-mono\">\n                          {array.length}\n                        </div>\n                      </div>\n                      <motion.div\n                        animate={{\n                          scale: [1, 1.1, 1],\n                          boxShadow: [\n                            '0 0 10px rgba(0,255,170,0.5)',\n                            '0 0 20px rgba(0,255,170,0.8)',\n                            '0 0 10px rgba(0,255,170,0.5)'\n                          ]\n                        }}\n                        transition={{ duration: 2, repeat: Infinity }}\n                        className=\"w-12 h-12 rounded-full bg-green-500/20 flex items-center justify-center\"\n                      >\n                        <BarChart3 className=\"w-6 h-6 text-green-400\" />\n                      </motion.div>\n                    </div>\n                  </motion.div>\n                </div>\n\n                {/* Status Indicator */}\n                <motion.div\n                  className=\"mt-4 p-3 rounded-lg bg-gray-700/30 border border-gray-600/50\"\n                  animate={{\n                    borderColor: isPlaying \n                      ? ['rgba(0,255,255,0.5)', 'rgba(255,0,255,0.5)', 'rgba(0,255,255,0.5)']\n                      : 'rgba(156,163,175,0.5)'\n                  }}\n                  transition={{ duration: 2, repeat: Infinity }}\n                >\n                  <div className=\"flex items-center justify-center gap-2\">\n                    <motion.div\n                      className={`w-2 h-2 rounded-full ${\n                        isPlaying ? 'bg-cyan-400' : 'bg-gray-500'\n                      }`}\n                      animate={{\n                        scale: isPlaying ? [1, 1.5, 1] : 1,\n                        boxShadow: isPlaying \n                          ? ['0 0 5px rgba(0,255,255,0.8)', '0 0 15px rgba(0,255,255,1)', '0 0 5px rgba(0,255,255,0.8)']\n                          : 'none'\n                      }}\n                      transition={{ duration: 1, repeat: Infinity }}\n                    />\n                    <span className={`text-sm font-medium ${\n                      isPlaying ? 'text-cyan-300' : 'text-gray-400'\n                    }`}>\n                      {isPlaying ? 'Sorting...' : currentStep === steps.length && steps.length > 0 ? 'Complete' : 'Ready'}\n                    </span>\n                  </div>\n                </motion.div>\n              </div>\n            </motion.div>\n          </div>\n\n          <div className=\"lg:col-span-3\">\n            <div className=\"bg-gray-800/50 backdrop-blur-lg rounded-2xl p-8 border border-purple-500/30 shadow-lg shadow-purple-500/20 min-h-[600px]\">\n              {array.length === 0 ? (\n                <motion.div\n                  initial={{ opacity: 0, scale: 0.8 }}\n                  animate={{ opacity: 1, scale: 1 }}\n                  className=\"flex flex-col items-center justify-center h-full space-y-6\"\n                >\n                  <motion.div\n                    animate={{\n                      rotate: [0, 360],\n                      scale: [1, 1.2, 1]\n                    }}\n                    transition={{\n                      duration: 3,\n                      repeat: Infinity,\n                      ease: \"easeInOut\"\n                    }}\n                  >\n                    <BarChart3 className=\"w-24 h-24 text-cyan-400/50\" />\n                  </motion.div>\n                  <div className=\"text-center space-y-2\">\n                    <h3 className=\"text-2xl font-semibold text-gray-400\">\n                      No Array Generated\n                    </h3>\n                    <p className=\"text-gray-500\">\n                      Click \"Generate Array\" to start visualizing\n                    </p>\n                  </div>\n                  <motion.div\n                    animate={{\n                      boxShadow: [\n                        '0 0 20px rgba(0, 255, 255, 0.3)',\n                        '0 0 40px rgba(0, 255, 255, 0.6)',\n                        '0 0 20px rgba(0, 255, 255, 0.3)'\n                      ]\n                    }}\n                    transition={{ duration: 2, repeat: Infinity }}\n                  >\n                    <Button\n                      onClick={generateRandomArray}\n                      className=\"bg-gradient-to-r from-cyan-500 to-purple-500 hover:from-cyan-600 hover:to-purple-600 text-white font-semibold px-8 py-6 text-lg rounded-xl shadow-lg\"\n                    >\n                      <Zap className=\"w-5 h-5 mr-2\" />\n                      Generate Array\n                    </Button>\n                  </motion.div>\n                </motion.div>\n              ) : (\n                <div className=\"h-full flex items-end justify-center gap-1 px-4\">\n                  {array.map((element, index) => {\n                    const maxValue = Math.max(...array.map(e => e.value));\n                    const heightPercentage = (element.value / maxValue) * 100;\n                    const colorIndex = index % NEON_COLORS.length;\n                    const baseColor = NEON_COLORS[colorIndex];\n\n                    let glowColor = baseColor;\n                    let glowIntensity = 0.3;\n\n                    if (element.isComparing) {\n                      glowColor = '#ffff00';\n                      glowIntensity = 0.8;\n                    } else if (element.isSwapping) {\n                      glowColor = '#ff00ff';\n                      glowIntensity = 1;\n                    } else if (element.isSorted) {\n                      glowColor = '#00ff00';\n                      glowIntensity = 0.6;\n                    }\n\n                    return (\n                      <motion.div\n                        key={element.id}\n                        layout\n                        initial={{ height: 0, opacity: 0 }}\n                        animate={{\n                          height: `${heightPercentage}%`,\n                          opacity: 1,\n                          scale: element.isSwapping ? [1, 1.1, 1] : 1,\n                          y: element.isSwapping ? [0, -10, 0] : 0\n                        }}\n                        transition={{\n                          height: { duration: 0.5, ease: \"easeOut\" },\n                          opacity: { duration: 0.3 },\n                          scale: { duration: 0.3, repeat: element.isSwapping ? Infinity : 0 },\n                          y: { duration: 0.3, repeat: element.isSwapping ? Infinity : 0 },\n                          layout: { duration: 0.5, ease: \"easeInOut\" }\n                        }}\n                        className=\"relative flex-1 min-w-[8px] max-w-[60px] rounded-t-lg\"\n                        style={{\n                          background: element.isSorted\n                            ? 'linear-gradient(to top, #00ff00, #00ffaa)'\n                            : element.isComparing\n                            ? 'linear-gradient(to top, #ffff00, #ffaa00)'\n                            : element.isSwapping\n                            ? 'linear-gradient(to top, #ff00ff, #ff0066)'\n                            : `linear-gradient(to top, ${baseColor}, ${baseColor}dd)`,\n                          boxShadow: `\n                            0 0 ${20 * glowIntensity}px ${glowColor}${Math.floor(glowIntensity * 100).toString(16)},\n                            0 0 ${40 * glowIntensity}px ${glowColor}${Math.floor(glowIntensity * 50).toString(16)},\n                            inset 0 0 ${10 * glowIntensity}px rgba(255, 255, 255, ${0.2 * glowIntensity})\n                          `,\n                          border: `1px solid ${glowColor}${Math.floor(glowIntensity * 150).toString(16)}`\n                        }}\n                      >\n                        {/* Trail effect for swapping */}\n                        {element.isSwapping && (\n                          <motion.div\n                            className=\"absolute inset-0 rounded-t-lg\"\n                            style={{\n                              background: `linear-gradient(to top, ${glowColor}40, transparent)`\n                            }}\n                            animate={{\n                              opacity: [0.8, 0, 0.8],\n                              scale: [1, 1.5, 1]\n                            }}\n                            transition={{\n                              duration: 0.6,\n                              repeat: Infinity,\n                              ease: \"easeInOut\"\n                            }}\n                          />\n                        )}\n\n                        {/* Value label */}\n                        <motion.div\n                          className=\"absolute -top-8 left-1/2 transform -translate-x-1/2 text-xs font-mono font-bold whitespace-nowrap\"\n                          initial={{ opacity: 0, y: 10 }}\n                          animate={{ opacity: 1, y: 0 }}\n                          style={{\n                            color: element.isSorted\n                              ? '#00ff00'\n                              : element.isComparing\n                              ? '#ffff00'\n                              : element.isSwapping\n                              ? '#ff00ff'\n                              : baseColor,\n                            textShadow: `0 0 10px ${glowColor}, 0 0 20px ${glowColor}40`\n                          }}\n                        >\n                          {element.value}\n                        </motion.div>\n\n                        {/* Pulse effect for comparing */}\n                        {element.isComparing && (\n                          <motion.div\n                            className=\"absolute inset-0 rounded-t-lg border-2\"\n                            style={{\n                              borderColor: glowColor\n                            }}\n                            animate={{\n                              opacity: [1, 0.3, 1],\n                              scale: [1, 1.05, 1]\n                            }}\n                            transition={{\n                              duration: 0.5,\n                              repeat: Infinity,\n                              ease: \"easeInOut\"\n                            }}\n                          />\n                        )}\n                      </motion.div>\n                    );\n                  })}\n                </div>\n              )}</parameter>\n              \n              <div className=\"h-full flex items-end justify-center gap-1\">\n                {array.length === 0 ? (\n                  <div className=\"flex flex-col items-center justify-center h-full space-y-4\">\n                    <motion.div\n                      animate={{\n                        scale: [1, 1.2, 1],\n                        rotate: [0, 360],\n                      }}\n                      transition={{\n                        duration: 3,\n                        repeat: Infinity,\n                        ease: \"easeInOut\"\n                      }}\n                    >\n                      <BarChart3 className=\"w-20 h-20 text-cyan-400/50\" />\n                    </motion.div>\n                    <p className=\"text-gray-400 text-lg\">Generate an array to start visualizing</p>\n                    <Button\n                      onClick={generateRandomArray}\n                      className=\"bg-gradient-to-r from-cyan-500 to-purple-500 hover:from-cyan-400 hover:to-purple-400 text-white font-semibold px-6 py-3 rounded-lg shadow-[0_0_20px_rgba(0,255,255,0.5)] hover:shadow-[0_0_30px_rgba(0,255,255,0.7)] transition-all duration-300\"\n                    >\n                      <Zap className=\"w-5 h-5 mr-2\" />\n                      Generate Array\n                    </Button>\n                  </div>\n                ) : (\n                  array.map((element, index) => {\n                    const isComparing = element.isComparing;\n                    const isSwapping = element.isSwapping;\n                    const isSorted = element.isSorted;\n                    \n                    let barColor = NEON_COLORS[index % NEON_COLORS.length];\n                    let glowColor = barColor;\n                    let glowIntensity = 0.3;\n                    \n                    if (isSorted) {\n                      barColor = '#00ff00';\n                      glowColor = '#00ff00';\n                      glowIntensity = 0.6;\n                    } else if (isSwapping) {\n                      barColor = '#ff0066';\n                      glowColor = '#ff0066';\n                      glowIntensity = 0.8;\n                    } else if (isComparing) {\n                      barColor = '#ffff00';\n                      glowColor = '#ffff00';\n                      glowIntensity = 0.7;\n                    }\n\n                    return (\n                      <motion.div\n                        key={element.id}\n                        layout\n                        initial={{ opacity: 0, scale: 0, y: 50 }}\n                        animate={{\n                          opacity: 1,\n                          scale: 1,\n                          y: 0,\n                          height: `${element.value * 4}px`,\n                        }}\n                        exit={{ opacity: 0, scale: 0 }}\n                        transition={{\n                          layout: { duration: 0.3, ease: \"easeInOut\" },\n                          height: { duration: 0.3, ease: \"easeOut\" },\n                          scale: { duration: 0.2 },\n                          opacity: { duration: 0.2 }\n                        }}\n                        className=\"relative flex-1 min-w-[8px] max-w-[60px] rounded-t-lg\"\n                        style={{\n                          backgroundColor: barColor,\n                          boxShadow: `\n                            0 0 ${glowIntensity * 20}px ${glowColor},\n                            0 0 ${glowIntensity * 40}px ${glowColor}80,\n                            inset 0 0 ${glowIntensity * 10}px ${glowColor}40\n                          `,\n                          border: `1px solid ${glowColor}`,\n                        }}\n                      >\n                        {/* Trail effect for swapping */}\n                        {isSwapping && (\n                          <>\n                            <motion.div\n                              className=\"absolute inset-0 rounded-t-lg\"\n                              style={{\n                                backgroundColor: barColor,\n                                opacity: 0.6,\n                              }}\n                              animate={{\n                                scale: [1, 1.2, 1],\n                                opacity: [0.6, 0.3, 0.6],\n                              }}\n                              transition={{\n                                duration: 0.5,\n                                repeat: Infinity,\n                                ease: \"easeInOut\"\n                              }}\n                            />\n                            <motion.div\n                              className=\"absolute -top-2 left-1/2 -translate-x-1/2\"\n                              animate={{\n                                y: [-10, -20, -10],\n                                opacity: [1, 0.5, 1],\n                              }}\n                              transition={{\n                                duration: 0.6,\n                                repeat: Infinity,\n                              }}\n                            >\n                              <div \n                                className=\"w-2 h-2 rounded-full\"\n                                style={{\n                                  backgroundColor: barColor,\n                                  boxShadow: `0 0 10px ${barColor}, 0 0 20px ${barColor}`\n                                }}\n                              />\n                            </motion.div>\n                          </>\n                        )}\n\n                        {/* Pulse effect for comparing */}\n                        {isComparing && (\n                          <motion.div\n                            className=\"absolute inset-0 rounded-t-lg border-2\"\n                            style={{\n                              borderColor: barColor,\n                            }}\n                            animate={{\n                              scale: [1, 1.15, 1],\n                              opacity: [0.8, 0.4, 0.8],\n                            }}\n                            transition={{\n                              duration: 0.8,\n                              repeat: Infinity,\n                              ease: \"easeInOut\"\n                            }}\n                          />\n                        )}\n\n                        {/* Sparkle effect for sorted */}\n                        {isSorted && (\n                          <motion.div\n                            className=\"absolute -top-1 left-1/2 -translate-x-1/2\"\n                            initial={{ scale: 0, rotate: 0 }}\n                            animate={{\n                              scale: [0, 1.5, 0],\n                              rotate: [0, 180, 360],\n                              opacity: [0, 1, 0],\n                            }}\n                            transition={{\n                              duration: 1,\n                              ease: \"easeOut\"\n                            }}\n                          >\n                            <div \n                              className=\"w-3 h-3\"\n                              style={{\n                                background: `radial-gradient(circle, ${barColor} 0%, transparent 70%)`,\n                              }}\n                            />\n                          </motion.div>\n                        )}\n\n                        {/* Value label */}\n                        <motion.div\n                          className=\"absolute -bottom-6 left-1/2 -translate-x-1/2 text-xs font-mono font-semibold whitespace-nowrap\"\n                          style={{\n                            color: barColor,\n                            textShadow: `0 0 5px ${glowColor}`,\n                          }}\n                          animate={{\n                            scale: isComparing || isSwapping ? [1, 1.2, 1] : 1,\n                          }}\n                          transition={{\n                            duration: 0.3,\n                            repeat: isComparing || isSwapping ? Infinity : 0,\n                          }}\n                        >\n                          {element.value}\n                        </motion.div>\n\n                        {/* Gradient overlay for depth */}\n                        <div\n                          className=\"absolute inset-0 rounded-t-lg pointer-events-none\"\n                          style={{\n                            background: `linear-gradient(to top, ${barColor}00 0%, ${barColor}40 100%)`,\n                          }}\n                        />\n                      </motion.div>\n                    );\n                  })\n                )}\n              </div>\n            </div>\n\n            <motion.div\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ delay: 0.4, duration: 0.6 }}\n              className=\"mt-6 bg-gray-800/50 backdrop-blur-lg rounded-2xl p-6 border border-purple-500/30 shadow-lg shadow-purple-500/20\"\n            >\n              <h3 className=\"text-purple-400 font-semibold mb-4 flex items-center gap-2\">\n                <BarChart3 className=\"w-5 h-5\" />\n                Legend\n              </h3>\n              <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n                <motion.div\n                  initial={{ opacity: 0, scale: 0.8 }}\n                  animate={{ opacity: 1, scale: 1 }}\n                  transition={{ delay: 0.5 }}\n                  className=\"flex items-center gap-3 p-3 bg-gray-700/30 rounded-lg border border-gray-600/50\"\n                >\n                  <motion.div\n                    className=\"w-4 h-12 rounded bg-gradient-to-t from-cyan-400 to-cyan-300\"\n                    animate={{\n                      boxShadow: [\n                        '0 0 10px rgba(0, 255, 255, 0.5)',\n                        '0 0 20px rgba(0, 255, 255, 0.8)',\n                        '0 0 10px rgba(0, 255, 255, 0.5)'\n                      ]\n                    }}\n                    transition={{ duration: 1.5, repeat: Infinity }}\n                  />\n                  <div>\n                    <div className=\"text-sm font-medium text-white\">Default</div>\n                    <div className=\"text-xs text-gray-400\">Unsorted</div>\n                  </div>\n                </motion.div>\n\n                <motion.div\n                  initial={{ opacity: 0, scale: 0.8 }}\n                  animate={{ opacity: 1, scale: 1 }}\n                  transition={{ delay: 0.6 }}\n                  className=\"flex items-center gap-3 p-3 bg-gray-700/30 rounded-lg border border-yellow-500/30\"\n                >\n                  <motion.div\n                    className=\"w-4 h-12 rounded bg-gradient-to-t from-yellow-400 to-yellow-300\"\n                    animate={{\n                      boxShadow: [\n                        '0 0 15px rgba(255, 255, 0, 0.6)',\n                        '0 0 25px rgba(255, 255, 0, 0.9)',\n                        '0 0 15px rgba(255, 255, 0, 0.6)'\n                      ],\n                      scale: [1, 1.1, 1]\n                    }}\n                    transition={{ duration: 1, repeat: Infinity }}\n                  />\n                  <div>\n                    <div className=\"text-sm font-medium text-white\">Comparing</div>\n                    <div className=\"text-xs text-gray-400\">Active</div>\n                  </div>\n                </motion.div>\n\n                <motion.div\n                  initial={{ opacity: 0, scale: 0.8 }}\n                  animate={{ opacity: 1, scale: 1 }}\n                  transition={{ delay: 0.7 }}\n                  className=\"flex items-center gap-3 p-3 bg-gray-700/30 rounded-lg border border-pink-500/30\"\n                >\n                  <motion.div\n                    className=\"w-4 h-12 rounded bg-gradient-to-t from-pink-500 to-pink-400\"\n                    animate={{\n                      boxShadow: [\n                        '0 0 15px rgba(255, 0, 102, 0.6)',\n                        '0 0 25px rgba(255, 0, 102, 0.9)',\n                        '0 0 15px rgba(255, 0, 102, 0.6)'\n                      ],\n                      x: [-2, 2, -2]\n                    }}\n                    transition={{ duration: 0.8, repeat: Infinity }}\n                  />\n                  <div>\n                    <div className=\"text-sm font-medium text-white\">Swapping</div>\n                    <div className=\"text-xs text-gray-400\">Moving</div>\n                  </div>\n                </motion.div>\n\n                <motion.div\n                  initial={{ opacity: 0, scale: 0.8 }}\n                  animate={{ opacity: 1, scale: 1 }}\n                  transition={{ delay: 0.8 }}\n                  className=\"flex items-center gap-3 p-3 bg-gray-700/30 rounded-lg border border-green-500/30\"\n                >\n                  <motion.div\n                    className=\"w-4 h-12 rounded bg-gradient-to-t from-green-400 to-green-300\"\n                    animate={{\n                      boxShadow: [\n                        '0 0 10px rgba(0, 255, 0, 0.5)',\n                        '0 0 20px rgba(0, 255, 0, 0.8)',\n                        '0 0 10px rgba(0, 255, 0, 0.5)'\n                      ]\n                    }}\n                    transition={{ duration: 2, repeat: Infinity }}\n                  />\n                  <div>\n                    <div className=\"text-sm font-medium text-white\">Sorted</div>\n                    <div className=\"text-xs text-gray-400\">Complete</div>\n                  </div>\n                </motion.div>\n              </div>\n            </motion.div>\n          </div>\n        </div>\n\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ delay: 0.4, duration: 0.6 }}\n          className=\"bg-gray-800/50 backdrop-blur-lg rounded-2xl p-6 border border-purple-500/30 shadow-lg shadow-purple-500/20\"\n        >\n          <div className=\"space-y-4\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center gap-2\">\n                <motion.div\n                  animate={{\n                    rotate: [0, 360],\n                  }}\n                  transition={{ duration: 3, repeat: Infinity, ease: \"linear\" }}\n                >\n                  <BarChart3 className=\"w-5 h-5 text-purple-400\" />\n                </motion.div>\n                <h3 className=\"text-lg font-semibold text-purple-300\">Timeline Control</h3>\n              </div>\n              <div className=\"flex items-center gap-2 px-4 py-2 bg-purple-900/50 rounded-full border border-purple-500/50\">\n                <span className=\"text-sm text-gray-400\">Step</span>\n                <motion.span\n                  key={currentStep}\n                  initial={{ scale: 1.3, color: '#a855f7' }}\n                  animate={{ scale: 1, color: '#d8b4fe' }}\n                  className=\"text-sm font-mono font-bold\"\n                >\n                  {currentStep}\n                </motion.span>\n                <span className=\"text-sm text-gray-400\">/</span>\n                <span className=\"text-sm font-mono text-purple-300\">{steps.length}</span>\n              </div>\n            </div>\n\n            {/* Progress Bar */}\n            <div className=\"relative h-3 bg-gray-700/50 rounded-full overflow-hidden border border-gray-600/50\">\n              <motion.div\n                className=\"absolute inset-y-0 left-0 bg-gradient-to-r from-cyan-500 via-purple-500 to-pink-500 rounded-full\"\n                initial={{ width: 0 }}\n                animate={{\n                  width: steps.length > 0 ? `${(currentStep / steps.length) * 100}%` : '0%',\n                }}\n                transition={{ duration: 0.3, ease: \"easeOut\" }}\n                style={{\n                  boxShadow: '0 0 20px rgba(168, 85, 247, 0.6)',\n                }}\n              />\n              <motion.div\n                className=\"absolute inset-y-0 left-0 bg-gradient-to-r from-cyan-400/50 to-purple-400/50 rounded-full blur-sm\"\n                animate={{\n                  width: steps.length > 0 ? `${(currentStep / steps.length) * 100}%` : '0%',\n                }}\n                transition={{ duration: 0.3, ease: \"easeOut\" }}\n              />\n            </div>\n\n            {/* Timeline Scrubber */}\n            <div className=\"relative pt-2\">\n              <input\n                type=\"range\"\n                min={0}\n                max={steps.length}\n                value={currentStep}\n                onChange={(e) => {\n                  const newStep = parseInt(e.target.value);\n                  setCurrentStep(newStep);\n                  if (newStep < steps.length) {\n                    setArray(steps[newStep].array);\n                  }\n                }}\n                disabled={isPlaying || steps.length === 0}\n                className=\"w-full h-2 bg-transparent appearance-none cursor-pointer disabled:cursor-not-allowed disabled:opacity-50\n                  [&::-webkit-slider-track]:h-2 [&::-webkit-slider-track]:bg-gray-700/50 [&::-webkit-slider-track]:rounded-full [&::-webkit-slider-track]:border [&::-webkit-slider-track]:border-gray-600/50\n                  [&::-webkit-slider-thumb]:appearance-none [&::-webkit-slider-thumb]:w-6 [&::-webkit-slider-thumb]:h-6 [&::-webkit-slider-thumb]:rounded-full [&::-webkit-slider-thumb]:bg-gradient-to-br [&::-webkit-slider-thumb]:from-cyan-400 [&::-webkit-slider-thumb]:to-purple-500 [&::-webkit-slider-thumb]:border-2 [&::-webkit-slider-thumb]:border-white [&::-webkit-slider-thumb]:shadow-[0_0_20px_rgba(168,85,247,0.8)] [&::-webkit-slider-thumb]:transition-all [&::-webkit-slider-thumb]:hover:shadow-[0_0_30px_rgba(168,85,247,1)] [&::-webkit-slider-thumb]:hover:scale-110\n                  [&::-moz-range-track]:h-2 [&::-moz-range-track]:bg-gray-700/50 [&::-moz-range-track]:rounded-full [&::-moz-range-track]:border [&::-moz-range-track]:border-gray-600/50\n                  [&::-moz-range-thumb]:w-6 [&::-moz-range-thumb]:h-6 [&::-moz-range-thumb]:rounded-full [&::-moz-range-thumb]:bg-gradient-to-br [&::-moz-range-thumb]:from-cyan-400 [&::-moz-range-thumb]:to-purple-500 [&::-moz-range-thumb]:border-2 [&::-moz-range-thumb]:border-white [&::-moz-range-thumb]:shadow-[0_0_20px_rgba(168,85,247,0.8)] [&::-moz-range-thumb]:transition-all [&::-moz-range-thumb]:hover:shadow-[0_0_30px_rgba(168,85,247,1)] [&::-moz-range-thumb]:hover:scale-110\"\n              />\n              \n              {/* Step Markers */}\n              {steps.length > 0 && steps.length <= 50 && (\n                <div className=\"absolute top-0 left-0 right-0 flex justify-between pointer-events-none\">\n                  {steps.map((_, index) => (\n                    <motion.div\n                      key={index}\n                      initial={{ scale: 0 }}\n                      animate={{ scale: index <= currentStep ? 1 : 0.5 }}\n                      className={`w-1 h-1 rounded-full transition-all duration-200 ${\n                        index < currentStep\n                          ? 'bg-cyan-400 shadow-[0_0_8px_rgba(0,255,255,0.8)]'\n                          : index === currentStep\n                          ? 'bg-purple-400 shadow-[0_0_12px_rgba(168,85,247,1)]'\n                          : 'bg-gray-600'\n                      }`}\n                    />\n                  ))}\n                </div>\n              )}\n            </div>\n\n            {/* Quick Navigation Buttons */}\n            <div className=\"flex items-center justify-between gap-2 pt-2\">\n              <Button\n                onClick={() => {\n                  setCurrentStep(0);\n                  if (steps.length > 0) {\n                    setArray(steps[0].array);\n                  }\n                }}\n                disabled={isPlaying || currentStep === 0 || steps.length === 0}\n                size=\"sm\"\n                className=\"flex-1 bg-gray-700/50 hover:bg-gray-600/50 text-cyan-400 border border-cyan-500/30 hover:border-cyan-500/50 shadow-[0_0_15px_rgba(0,255,255,0.3)] hover:shadow-[0_0_20px_rgba(0,255,255,0.5)] transition-all disabled:opacity-30 disabled:cursor-not-allowed\"\n              >\n                <span className=\"text-xs font-semibold\">First</span>\n              </Button>\n              \n              <Button\n                onClick={() => {\n                  const newStep = Math.max(0, currentStep - 1);\n                  setCurrentStep(newStep);\n                  if (newStep < steps.length) {\n                    setArray(steps[newStep].array);\n                  }\n                }}\n                disabled={isPlaying || currentStep === 0 || steps.length === 0}\n                size=\"sm\"\n                className=\"flex-1 bg-gray-700/50 hover:bg-gray-600/50 text-purple-400 border border-purple-500/30 hover:border-purple-500/50 shadow-[0_0_15px_rgba(168,85,247,0.3)] hover:shadow-[0_0_20px_rgba(168,85,247,0.5)] transition-all disabled:opacity-30 disabled:cursor-not-allowed\"\n              >\n                <span className=\"text-xs font-semibold\">\u2190 Prev</span>\n              </Button>\n              \n              <Button\n                onClick={() => {\n                  const newStep = Math.min(steps.length, currentStep + 1);\n                  setCurrentStep(newStep);\n                  if (newStep < steps.length) {\n                    setArray(steps[newStep].array);\n                  }\n                }}\n                disabled={isPlaying || currentStep >= steps.length || steps.length === 0}\n                size=\"sm\"\n                className=\"flex-1 bg-gray-700/50 hover:bg-gray-600/50 text-purple-400 border border-purple-500/30 hover:border-purple-500/50 shadow-[0_0_15px_rgba(168,85,247,0.3)] hover:shadow-[0_0_20px_rgba(168,85,247,0.5)] transition-all disabled:opacity-30 disabled:cursor-not-allowed\"\n              >\n                <span className=\"text-xs font-semibold\">Next \u2192</span>\n              </Button>\n              \n              <Button\n                onClick={() => {\n                  setCurrentStep(steps.length);\n                  if (steps.length > 0) {\n                    setArray(steps[steps.length - 1].array);\n                  }\n                }}\n                disabled={isPlaying || currentStep >= steps.length || steps.length === 0}\n                size=\"sm\"\n                className=\"flex-1 bg-gray-700/50 hover:bg-gray-600/50 text-cyan-400 border border-cyan-500/30 hover:border-cyan-500/50 shadow-[0_0_15px_rgba(0,255,255,0.3)] hover:shadow-[0_0_20px_rgba(0,255,255,0.5)] transition-all disabled:opacity-30 disabled:cursor-not-allowed\"\n              >\n                <span className=\"text-xs font-semibold\">Last</span>\n              </Button>\n            </div>\n\n            {/* Status Indicator */}\n            {steps.length > 0 && (\n              <motion.div\n                initial={{ opacity: 0 }}\n                animate={{ opacity: 1 }}\n                className=\"flex items-center justify-center gap-2 pt-2\"\n              >\n                {currentStep >= steps.length ? (\n                  <div className=\"flex items-center gap-2 px-4 py-2 bg-green-900/30 rounded-full border border-green-500/50\">\n                    <motion.div\n                      animate={{\n                        scale: [1, 1.2, 1],\n                        opacity: [1, 0.7, 1],\n                      }}\n                      transition={{ duration: 1.5, repeat: Infinity }}\n                      className=\"w-2 h-2 bg-green-400 rounded-full shadow-[0_0_10px_rgba(74,222,128,0.8)]\"\n                    />\n                    <span className=\"text-sm font-semibold text-green-300\">Sorting Complete</span>\n                  </div>\n                ) : isPlaying ? (\n                  <div className=\"flex items-center gap-2 px-4 py-2 bg-cyan-900/30 rounded-full border border-cyan-500/50\">\n                    <motion.div\n                      animate={{\n                        scale: [1, 1.3, 1],\n                        opacity: [1, 0.5, 1],\n                      }}\n                      transition={{ duration: 0.8, repeat: Infinity }}\n                      className=\"w-2 h-2 bg-cyan-400 rounded-full shadow-[0_0_10px_rgba(0,255,255,0.8)]\"\n                    />\n                    <span className=\"text-sm font-semibold text-cyan-300\">Playing...</span>\n                  </div>\n                ) : (\n                  <div className=\"flex items-center gap-2 px-4 py-2 bg-purple-900/30 rounded-full border border-purple-500/50\">\n                    <div className=\"w-2 h-2 bg-purple-400 rounded-full shadow-[0_0_10px_rgba(168,85,247,0.8)]\" />\n                    <span className=\"text-sm font-semibold text-purple-300\">Paused</span>\n                  </div>\n                )}\n              </motion.div>\n            )}\n          </div>\n        </motion.div>\n      </div>\n    </div>\n  );\n}",
  "error": null,
  "overall_score": 50,
  "code_quality_score": 14,
  "architecture_score": 11,
  "performance_score": 16,
  "accessibility_score": 9,
  "metadata": {
    "document_id": "eval_room_e93349b88b94",
    "prompt_category": "creative",
    "prompt_complexity": 9.0
  },
  "raw_response": {
    "document_id": "eval_room_e93349b88b94",
    "mode": "parallel",
    "prompt": "Build a captivating algorithm visualizer with neon colored bars, smooth height transitions, glowing comparison indicators, trail effects during swaps, and a futuristic dashboard design with animated controls",
    "content": "import { useState, useCallback } from 'react';\nimport { useEffect, useRef } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Slider } from '@/components/ui/slider';\nimport { Play, Pause, RotateCcw, Zap, BarChart3 } from 'lucide-react';\nimport { motion } from 'framer-motion';\n\ninterface ArrayElement {\n  value: number;\n  id: string;\n  isComparing?: boolean;\n  isSwapping?: boolean;\n  isSorted?: boolean;\n}\n\ninterface AlgorithmStep {\n  array: ArrayElement[];\n  comparingIndices: number[];\n  swappingIndices: number[];\n  sortedIndices: number[];\n}\n\ntype AlgorithmType = 'bubble' | 'quick' | 'merge' | 'insertion';\n\nconst NEON_COLORS = [\n  '#00ffff',\n  '#ff00ff', \n  '#00ff00',\n  '#ffff00',\n  '#ff0066',\n  '#00ffaa'\n];\n\nconst mockAlgorithms = [\n  { id: 'bubble', name: 'Bubble Sort', complexity: 'O(n\u00b2)' },\n  { id: 'quick', name: 'Quick Sort', complexity: 'O(n log n)' },\n  { id: 'merge', name: 'Merge Sort', complexity: 'O(n log n)' },\n  { id: 'insertion', name: 'Insertion Sort', complexity: 'O(n\u00b2)' }\n];\n\nexport default function AlgorithmVisualizer() {\n  const [array, setArray] = useState<ArrayElement[]>([]);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [speed, setSpeed] = useState([50]);\n  const [arraySize, setArraySize] = useState([20]);\n  const [selectedAlgorithm, setSelectedAlgorithm] = useState<AlgorithmType>('bubble');\n  const [currentStep, setCurrentStep] = useState(0);\n  const [steps, setSteps] = useState<AlgorithmStep[]>([]);\n  const [comparisons, setComparisons] = useState(0);\n  const [swaps, setSwaps] = useState(0);\n\n  const generateRandomArray = useCallback(() => {\n    const newArray: ArrayElement[] = Array.from({ length: arraySize[0] }, (_, index) => ({\n      value: Math.floor(Math.random() * 100) + 5,\n      id: `element-${Date.now()}-${index}`,\n      isComparing: false,\n      isSwapping: false,\n      isSorted: false\n    }));\n    setArray(newArray);\n    setSteps([]);\n    setCurrentStep(0);\n    setIsPlaying(false);\n  }, [arraySize]);\n\n  const resetVisualization = useCallback(() => {\n\nsetIsPlaying(false);\n    setCurrentStep(0);\n    setSteps([]);\n        generateRandomArray();\n  }, [generateRandomArray]);\n\n  const animateSteps = useCallback(() => {\n    if (currentStep >= steps.length) {\n      setIsPlaying(false);\n      return;\n    }\n\n    const step = steps[currentStep];\n    setArray(step.array);\n    setCurrentStep(prev => prev + 1);\n  }, [currentStep, steps]);\n\n  const startVisualization = useCallback(() => {\n    if (steps.length === 0 || currentStep >= steps.length) return;\n    setIsPlaying(true);\n    \n  }, [steps, speed, currentStep]);\n  useEffect(() => {\n    if (!isPlaying) return;\n\n    const delay = 1000 - (speed[0] * 9.5);\n    const timer = setTimeout(() => {\n      animateSteps();\n    }, delay);\n\n    return () => clearTimeout(timer);\n  }, [isPlaying, speed, animateSteps]);\n\n  const pauseVisualization = useCallback(() => {\n\n    setIsPlaying(false);\n  }, []);\n\n  const generateSortingSteps = useCallback((algorithm: AlgorithmType) => {\n    if (array.length === 0) return;\n\n    const newSteps: AlgorithmStep[] = [];\n    const arr = [...array];\n\n    const addStep = (\n      comparingIndices: number[] = [],\n      swappingIndices: number[] = [],\n      sortedIndices: number[] = []\n    ) => {\n      newSteps.push({\n        array: arr.map((el, idx) => ({\n          ...el,\n          isComparing: comparingIndices.includes(idx),\n          isSwapping: swappingIndices.includes(idx),\n          isSorted: sortedIndices.includes(idx)\n        })),\n        comparingIndices,\n        swappingIndices,\n        sortedIndices\n      });\n    };\n\n    const swap = (i: number, j: number) => {\n      [arr[i], arr[j]] = [arr[j], arr[i]];\n    };\n\n    switch (algorithm) {\n      case 'bubble': {\n        const sorted: number[] = [];\n        for (let i = 0; i < arr.length - 1; i++) {\n          for (let j = 0; j < arr.length - i - 1; j++) {\n            addStep([j, j + 1], [], sorted);\n            if (arr[j].value > arr[j + 1].value) {\n              addStep([j, j + 1], [j, j + 1], sorted);\n              swap(j, j + 1);\n              addStep([], [], sorted);\n            }\n          }\n          sorted.push(arr.length - i - 1);\n          addStep([], [], sorted);\n        }\n        sorted.push(0);\n        addStep([], [], sorted);\n        break;\n      }\n\n      case 'insertion': {\n        const sorted: number[] = [0];\n        addStep([], [], sorted);\n        for (let i = 1; i < arr.length; i++) {\n          let j = i;\n          addStep([j, j - 1], [], sorted);\n          while (j > 0 && arr[j].value < arr[j - 1].value) {\n            addStep([j, j - 1], [j, j - 1], sorted);\n            swap(j, j - 1);\n            j--;\n            addStep([j, j + 1], [], sorted);\n          }\n          sorted.push(i);\n          addStep([], [], sorted);\n        }\n        break;\n      }\n\n      case 'quick': {\n        const sorted: number[] = [];\n        const quickSort = (low: number, high: number) => {\n          if (low < high) {\n            const pivotIndex = partition(low, high);\n            sorted.push(pivotIndex);\n            addStep([], [], sorted);\n            quickSort(low, pivotIndex - 1);\n            quickSort(pivotIndex + 1, high);\n          } else if (low === high) {\n            sorted.push(low);\n            addStep([], [], sorted);\n          }\n        };\n\n        const partition = (low: number, high: number): number => {\n          const pivot = arr[high].value;\n          let i = low - 1;\n\n          for (let j = low; j < high; j++) {\n            addStep([j, high], [], sorted);\n            if (arr[j].value < pivot) {\n              i++;\n              if (i !== j) {\n                addStep([i, j], [i, j], sorted);\n                swap(i, j);\n              }\n            }\n          }\n          addStep([i + 1, high], [i + 1, high], sorted);\n          swap(i + 1, high);\n          return i + 1;\n        };\n\n        quickSort(0, arr.length - 1);\n        break;\n      }\n\n      case 'merge': {\n        const sorted: number[] = [];\n        const mergeSort = (left: number, right: number) => {\n          if (left >= right) {\n            return;\n          }\n\n          const mid = Math.floor((left + right) / 2);\n          mergeSort(left, mid);\n          mergeSort(mid + 1, right);\n          merge(left, mid, right);\n        };\n\n        const merge = (left: number, mid: number, right: number) => {\n          const leftArr = arr.slice(left, mid + 1);\n          const rightArr = arr.slice(mid + 1, right + 1);\n\n          let i = 0, j = 0, k = left;\n\n          while (i < leftArr.length && j < rightArr.length) {\n            addStep([left + i, mid + 1 + j], [], sorted);\n            if (leftArr[i].value <= rightArr[j].value) {\n              arr[k] = leftArr[i];\n              i++;\n            } else {\n              arr[k] = rightArr[j];\n              j++;\n            }\n            k++;\n            addStep([], [k - 1], sorted);\n          }\n\n          while (i < leftArr.length) {\n            arr[k] = leftArr[i];\n            addStep([], [k], sorted);\n            i++;\n            k++;\n          }\n\n          while (j < rightArr.length) {\n            arr[k] = rightArr[j];\n            addStep([], [k], sorted);\n            j++;\n            k++;\n          }\n\n          for (let idx = left; idx <= right; idx++) {\n            if (!sorted.includes(idx)) {\n              sorted.push(idx);\n            }\n          }\n          addStep([], [], sorted);\n        };\n\n        mergeSort(0, arr.length - 1);\n        break;\n      }\n    }\n\n    setSteps(newSteps);\n    setCurrentStep(0);\n  }, [array]);\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-gray-900 via-purple-900 to-gray-900 p-8\">\n      <div className=\"max-w-7xl mx-auto space-y-8\">\n        <motion.div\n          initial={{ opacity: 0, y: -20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.8 }}\n          className=\"text-center space-y-4\"\n        >\n          <motion.h1\n            className=\"text-6xl font-bold bg-gradient-to-r from-cyan-400 via-purple-400 to-pink-400 bg-clip-text text-transparent\"\n            animate={{\n              textShadow: [\n                '0 0 20px rgba(0, 255, 255, 0.5)',\n                '0 0 40px rgba(255, 0, 255, 0.5)',\n                '0 0 20px rgba(0, 255, 255, 0.5)'\n              ]\n            }}\n            transition={{ duration: 2, repeat: Infinity }}\n          >\n            Algorithm Visualizer\n          </motion.h1>\n          \n          <div className=\"flex items-center justify-center gap-4\">\n            <motion.div\n              initial={{ scale: 0 }}\n              animate={{ scale: 1 }}\n              transition={{ delay: 0.3, type: \"spring\" }}\n              className=\"flex items-center gap-2 px-6 py-3 bg-gray-800/50 backdrop-blur-sm rounded-full border border-cyan-500/30\"\n            >\n              <Zap className=\"w-5 h-5 text-cyan-400\" />\n              <span className=\"text-xl font-semibold text-cyan-300\">\n                {mockAlgorithms.find(a => a.id === selectedAlgorithm)?.name}\n              </span>\n            </motion.div>\n            \n            <motion.div\n              initial={{ scale: 0 }}\n              animate={{ scale: 1 }}\n              transition={{ delay: 0.5, type: \"spring\" }}\n              className=\"flex items-center gap-2 px-4 py-2 bg-purple-900/50 backdrop-blur-sm rounded-full border border-purple-500/50\"\n              style={{\n                boxShadow: '0 0 20px rgba(168, 85, 247, 0.4)'\n              }}\n            >\n              <BarChart3 className=\"w-4 h-4 text-purple-300\" />\n              <span className=\"text-sm font-mono text-purple-200\">\n                {mockAlgorithms.find(a => a.id === selectedAlgorithm)?.complexity}\n              </span>\n            </motion.div>\n          </div>\n        </motion.div></parameter>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-6\">\n          <div className=\"lg:col-span-1 space-y-6\">\n            <motion.div\n              initial={{ opacity: 0, x: -50 }}\n              animate={{ opacity: 1, x: 0 }}\n              className=\"bg-gray-800/50 backdrop-blur-lg rounded-2xl p-6 border border-cyan-500/30 shadow-[0_0_30px_rgba(0,255,255,0.3)]\"\n            >\n              <div className=\"space-y-6\">\n                {/* Algorithm Selection */}\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center gap-2 text-cyan-400\">\n                    <Zap className=\"w-5 h-5\" />\n                    <h3 className=\"font-semibold text-lg\">Algorithm</h3>\n                  </div>\n                  <div className=\"space-y-2\">\n                    {mockAlgorithms.map((algo) => (\n                      <button\n                        key={algo.id}\n                        onClick={() => {\n                          setSelectedAlgorithm(algo.id as AlgorithmType);\n                          generateSortingSteps(algo.id as AlgorithmType);\n                        }}\n                        disabled={isPlaying}\n                        className={`w-full p-3 rounded-lg text-left transition-all duration-300 ${\n                          selectedAlgorithm === algo.id\n                            ? 'bg-cyan-500/20 border-2 border-cyan-400 shadow-[0_0_20px_rgba(0,255,255,0.4)]'\n                            : 'bg-gray-700/50 border-2 border-gray-600/50 hover:border-cyan-500/50 hover:shadow-[0_0_15px_rgba(0,255,255,0.2)]'\n                        } disabled:opacity-50 disabled:cursor-not-allowed`}\n                      >\n                        <div className=\"font-medium text-white\">{algo.name}</div>\n                        <div className=\"text-xs text-gray-400 mt-1\">{algo.complexity}</div>\n                      </button>\n                    ))}\n                  </div>\n                </div>\n\n                {/* Array Size Control */}\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center gap-2 text-purple-400\">\n                    <BarChart3 className=\"w-5 h-5\" />\n                    <h3 className=\"font-semibold\">Array Size</h3>\n                  </div>\n                  <div className=\"space-y-2\">\n                    <div className=\"flex justify-between text-sm text-gray-300\">\n                      <span>Size</span>\n                      <span className=\"text-cyan-400 font-mono\">{arraySize[0]}</span>\n                    </div>\n                    <Slider\n                      value={arraySize}\n                      onValueChange={setArraySize}\n                      min={5}\n                      max={50}\n                      step={1}\n                      disabled={isPlaying}\n                      className=\"cursor-pointer\"\n                    />\n                  </div>\n                </div>\n\n                {/* Speed Control */}\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center gap-2 text-pink-400\">\n                    <Zap className=\"w-5 h-5\" />\n                    <h3 className=\"font-semibold\">Speed</h3>\n                  </div>\n                  <div className=\"space-y-2\">\n                    <div className=\"flex justify-between text-sm text-gray-300\">\n                      <span>Animation Speed</span>\n                      <span className=\"text-cyan-400 font-mono\">{speed[0]}%</span>\n                    </div>\n                    <Slider\n                      value={speed}\n                      onValueChange={setSpeed}\n                      min={10}\n                      max={100}\n                      step={10}\n                      className=\"cursor-pointer\"\n                    />\n                  </div>\n                </div>\n\n                {/* Control Buttons */}\n                <div className=\"space-y-3 pt-4 border-t border-gray-700/50\">\n                  <Button\n                    onClick={isPlaying ? pauseVisualization : startVisualization}\n                    disabled={steps.length === 0 || (currentStep >= steps.length && !isPlaying)}\n                    className=\"w-full bg-gradient-to-r from-cyan-500 to-blue-500 hover:from-cyan-400 hover:to-blue-400 text-white font-semibold py-6 rounded-lg shadow-[0_0_25px_rgba(0,255,255,0.5)] hover:shadow-[0_0_35px_rgba(0,255,255,0.7)] transition-all duration-300 disabled:opacity-50 disabled:cursor-not-allowed\"\n                  >\n                    {isPlaying ? (\n                      <>\n                        <Pause className=\"w-5 h-5 mr-2\" />\n                        Pause\n                      </>\n                    ) : (\n                      <>\n                        <Play className=\"w-5 h-5 mr-2\" />\n                        {currentStep >= steps.length ? 'Finished' : 'Start'}\n                      </>\n                    )}\n                  </Button>\n\n                  <Button\n                    onClick={resetVisualization}\n                    disabled={isPlaying}\n                    className=\"w-full bg-gradient-to-r from-purple-500 to-pink-500 hover:from-purple-400 hover:to-pink-400 text-white font-semibold py-6 rounded-lg shadow-[0_0_25px_rgba(255,0,255,0.5)] hover:shadow-[0_0_35px_rgba(255,0,255,0.7)] transition-all duration-300 disabled:opacity-50 disabled:cursor-not-allowed\"\n                  >\n                    <RotateCcw className=\"w-5 h-5 mr-2\" />\n                    Reset\n                  </Button>\n                </div>\n\n                {/* Stats Display */}\n                <div className=\"pt-4 border-t border-gray-700/50 space-y-2\">\n                  <div className=\"flex justify-between text-sm\">\n                    <span className=\"text-gray-400\">Current Step</span>\n                    <span className=\"text-cyan-400 font-mono\">{currentStep} / {steps.length}</span>\n                  </div>\n                  <div className=\"flex justify-between text-sm\">\n                    <span className=\"text-gray-400\">Array Elements</span>\n                    <span className=\"text-purple-400 font-mono\">{array.length}</span>\n                  </div>\n                </div>\n              </div>\n            </motion.div>\n            \n            <div className=\"bg-gray-800/50 backdrop-blur-lg rounded-2xl p-6 border border-cyan-500/30 shadow-lg shadow-cyan-500/20\">\n              <div className=\"space-y-6\">\n                <div>\n                  <h3 className=\"text-cyan-400 font-semibold mb-4 flex items-center gap-2\">\n                    <Zap className=\"w-5 h-5\" />\n                    Algorithm\n                  </h3>\n                  <div className=\"grid grid-cols-2 gap-3\">\n                    {mockAlgorithms.map((algo) => (\n                      <motion.button\n                        key={algo.id}\n                        onClick={() => setSelectedAlgorithm(algo.id as AlgorithmType)}\n                        className={`relative p-3 rounded-lg font-medium text-sm transition-all duration-300 ${\n                          selectedAlgorithm === algo.id\n                            ? 'bg-cyan-500/20 text-cyan-300 border-2 border-cyan-400 shadow-lg shadow-cyan-500/50'\n                            : 'bg-gray-700/50 text-gray-300 border border-gray-600 hover:border-cyan-500/50 hover:shadow-lg hover:shadow-cyan-500/30'\n                        }`}\n                        whileHover={{ scale: 1.05 }}\n                        whileTap={{ scale: 0.95 }}\n                      >\n                        <div className=\"flex flex-col items-center gap-1\">\n                          <span>{algo.name.split(' ')[0]}</span>\n                          <span className=\"text-xs opacity-70\">{algo.complexity}</span>\n                        </div>\n                        {selectedAlgorithm === algo.id && (\n                          <motion.div\n                            className=\"absolute inset-0 rounded-lg bg-cyan-400/10\"\n                            layoutId=\"algorithmGlow\"\n                            transition={{ type: \"spring\", bounce: 0.2, duration: 0.6 }}\n                          />\n                        )}\n                      </motion.button>\n                    ))}\n                  </div>\n                </div>\n\n                <div>\n                  <h3 className=\"text-cyan-400 font-semibold mb-4\">Speed</h3>\n                  <Slider\n                    value={speed}\n                    onValueChange={setSpeed}\n                    min={1}\n                    max={100}\n                    step={1}\n                    className=\"[&_[role=slider]]:bg-cyan-400 [&_[role=slider]]:border-cyan-300 [&_[role=slider]]:shadow-lg [&_[role=slider]]:shadow-cyan-400/50 [&_[role=slider]]:transition-shadow [&_[role=slider]]:hover:shadow-cyan-400/80 [&_.relative]:bg-gray-700 [&_.bg-primary]:bg-gradient-to-r [&_.bg-primary]:from-cyan-500 [&_.bg-primary]:to-purple-500\"\n                  />\n                  <div className=\"flex justify-between text-xs text-gray-400 mt-2\">\n                    <span>Slow</span>\n                    <span className=\"text-cyan-400 font-semibold\">{speed[0]}%</span>\n                    <span>Fast</span>\n                  </div></parameter>\n</invoke>\n                </div>\n\n                <div>\n                  <h3 className=\"text-cyan-400 font-semibold mb-4\">Array Size</h3>\n                  <div className=\"space-y-3\">\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"text-sm text-gray-400\">Size</span>\n                      <motion.span \n                        key={arraySize[0]}\n                        initial={{ scale: 1.3, color: '#00ffff' }}\n                        animate={{ scale: 1, color: '#9ca3af' }}\n                        className=\"text-sm font-mono font-bold\"\n                      >\n                        {arraySize[0]}\n                      </motion.span>\n                    </div>\n                    <Slider\n                      value={arraySize}\n                      onValueChange={setArraySize}\n                      min={5}\n                      max={50}\n                      step={1}\n                      className=\"[&_[role=slider]]:bg-cyan-400 [&_[role=slider]]:border-cyan-300 [&_[role=slider]]:shadow-lg [&_[role=slider]]:shadow-cyan-400/50 [&_.slider-track]:bg-cyan-500/30 [&_.slider-range]:bg-gradient-to-r [&_.slider-range]:from-cyan-500 [&_.slider-range]:to-purple-500\"\n                      disabled={isPlaying}\n                    />\n                  </div>\n                </div>\n\n                <div className=\"space-y-3 pt-4 border-t border-cyan-500/20\">\n                  <motion.button\n                    onClick={isPlaying ? pauseVisualization : startVisualization}\n                    disabled={array.length === 0 || (currentStep >= steps.length && steps.length > 0)}\n                    className={`w-full py-4 rounded-xl font-bold text-lg transition-all duration-300 disabled:opacity-50 disabled:cursor-not-allowed ${\n                      isPlaying\n                        ? 'bg-gradient-to-r from-orange-500 to-red-500 hover:from-orange-600 hover:to-red-600 shadow-[0_0_30px_rgba(249,115,22,0.6)]'\n                        : 'bg-gradient-to-r from-cyan-500 to-blue-500 hover:from-cyan-600 hover:to-blue-600 shadow-[0_0_30px_rgba(6,182,212,0.6)]'\n                    }`}\n                    whileHover={{ scale: 1.05 }}\n                    whileTap={{ scale: 0.95 }}\n                  >\n                    <motion.div\n                      className=\"flex items-center justify-center gap-3\"\n                      animate={isPlaying ? { scale: [1, 1.1, 1] } : {}}\n                      transition={{ duration: 1, repeat: isPlaying ? Infinity : 0 }}\n                    >\n                      {isPlaying ? (\n                        <>\n                          <Pause className=\"w-6 h-6\" />\n                          <span>Pause</span>\n                        </>\n                      ) : (\n                        <>\n                          <Play className=\"w-6 h-6\" />\n                          <span>Start</span>\n                        </>\n                      )}\n                    </motion.div>\n                  </motion.button>\n\n                  <motion.button\n                    onClick={resetVisualization}\n                    disabled={isPlaying}\n                    className=\"w-full py-4 rounded-xl font-bold text-lg bg-gradient-to-r from-purple-500 to-pink-500 hover:from-purple-600 hover:to-pink-600 transition-all duration-300 shadow-[0_0_30px_rgba(168,85,247,0.6)] hover:shadow-[0_0_40px_rgba(168,85,247,0.8)] disabled:opacity-50 disabled:cursor-not-allowed\"\n                    whileHover={{ scale: 1.05 }}\n                    whileTap={{ scale: 0.95 }}\n                  >\n                    <motion.div\n                      className=\"flex items-center justify-center gap-3\"\n                      whileHover={{ rotate: 180 }}\n                      transition={{ duration: 0.5 }}\n                    >\n                      <RotateCcw className=\"w-6 h-6\" />\n                      <span>Reset</span>\n                    </motion.div>\n                  </motion.button>\n                </div>\n              </div>\n            </div>\n\n            \n<motion.div\n              initial={{ opacity: 0, x: -50 }}\n              animate={{ opacity: 1, x: 0 }}\n              transition={{ delay: 0.2 }}\n              className=\"bg-gray-800/50 backdrop-blur-lg rounded-2xl p-6 border border-purple-500/30 shadow-[0_0_30px_rgba(168,85,247,0.3)]\"\n            >\n              <div className=\"space-y-4\">\n                <div className=\"flex items-center gap-2 text-purple-400 mb-4\">\n                  <BarChart3 className=\"w-5 h-5\" />\n                  <h3 className=\"font-semibold text-lg\">Statistics</h3>\n                </div>\n\n                <div className=\"grid grid-cols-1 gap-4\">\n                  {/* Comparisons */}\n                  <motion.div\n                    className=\"bg-gradient-to-br from-cyan-900/30 to-cyan-800/20 rounded-xl p-4 border border-cyan-500/40 shadow-[0_0_15px_rgba(0,255,255,0.2)]\"\n                    whileHover={{ scale: 1.02, boxShadow: '0 0 25px rgba(0,255,255,0.4)' }}\n                    transition={{ duration: 0.2 }}\n                  >\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <div className=\"text-xs text-cyan-300/70 uppercase tracking-wider mb-1\">\n                          Comparisons\n                        </div>\n                        <motion.div\n                          key={comparisons}\n                          initial={{ scale: 1.3, color: '#00ffff' }}\n                          animate={{ scale: 1, color: '#ffffff' }}\n                          className=\"text-3xl font-bold text-white font-mono\"\n                        >\n                          {comparisons}\n                        </motion.div>\n                      </div>\n                      <motion.div\n                        animate={{\n                          boxShadow: [\n                            '0 0 10px rgba(0,255,255,0.5)',\n                            '0 0 20px rgba(0,255,255,0.8)',\n                            '0 0 10px rgba(0,255,255,0.5)'\n                          ]\n                        }}\n                        transition={{ duration: 2, repeat: Infinity }}\n                        className=\"w-12 h-12 rounded-full bg-cyan-500/20 flex items-center justify-center\"\n                      >\n                        <BarChart3 className=\"w-6 h-6 text-cyan-400\" />\n                      </motion.div>\n                    </div>\n                  </motion.div>\n\n                  {/* Swaps */}\n                  <motion.div\n                    className=\"bg-gradient-to-br from-pink-900/30 to-pink-800/20 rounded-xl p-4 border border-pink-500/40 shadow-[0_0_15px_rgba(255,0,102,0.2)]\"\n                    whileHover={{ scale: 1.02, boxShadow: '0 0 25px rgba(255,0,102,0.4)' }}\n                    transition={{ duration: 0.2 }}\n                  >\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <div className=\"text-xs text-pink-300/70 uppercase tracking-wider mb-1\">\n                          Swaps\n                        </div>\n                        <motion.div\n                          key={swaps}\n                          initial={{ scale: 1.3, color: '#ff0066' }}\n                          animate={{ scale: 1, color: '#ffffff' }}\n                          className=\"text-3xl font-bold text-white font-mono\"\n                        >\n                          {swaps}\n                        </motion.div>\n                      </div>\n                      <motion.div\n                        animate={{\n                          rotate: [0, 180, 360],\n                          boxShadow: [\n                            '0 0 10px rgba(255,0,102,0.5)',\n                            '0 0 20px rgba(255,0,102,0.8)',\n                            '0 0 10px rgba(255,0,102,0.5)'\n                          ]\n                        }}\n                        transition={{ duration: 3, repeat: Infinity }}\n                        className=\"w-12 h-12 rounded-full bg-pink-500/20 flex items-center justify-center\"\n                      >\n                        <RotateCcw className=\"w-6 h-6 text-pink-400\" />\n                      </motion.div>\n                    </div>\n                  </motion.div>\n\n                  {/* Progress */}\n                  <motion.div\n                    className=\"bg-gradient-to-br from-purple-900/30 to-purple-800/20 rounded-xl p-4 border border-purple-500/40 shadow-[0_0_15px_rgba(168,85,247,0.2)]\"\n                    whileHover={{ scale: 1.02, boxShadow: '0 0 25px rgba(168,85,247,0.4)' }}\n                    transition={{ duration: 0.2 }}\n                  >\n                    <div className=\"space-y-3\">\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"text-xs text-purple-300/70 uppercase tracking-wider\">\n                          Progress\n                        </div>\n                        <motion.div\n                          key={currentStep}\n                          initial={{ scale: 1.2 }}\n                          animate={{ scale: 1 }}\n                          className=\"text-lg font-bold text-white font-mono\"\n                        >\n                          {steps.length > 0 ? Math.round((currentStep / steps.length) * 100) : 0}%\n                        </motion.div>\n                      </div>\n                      \n                      <div className=\"relative h-3 bg-gray-700/50 rounded-full overflow-hidden\">\n                        <motion.div\n                          className=\"absolute inset-y-0 left-0 bg-gradient-to-r from-purple-500 via-pink-500 to-cyan-500 rounded-full\"\n                          initial={{ width: 0 }}\n                          animate={{\n                            width: steps.length > 0 ? `${(currentStep / steps.length) * 100}%` : '0%'\n                          }}\n                          transition={{ duration: 0.3 }}\n                          style={{\n                            boxShadow: '0 0 15px rgba(168,85,247,0.6)'\n                          }}\n                        />\n                        <motion.div\n                          className=\"absolute inset-0 bg-gradient-to-r from-transparent via-white/30 to-transparent\"\n                          animate={{\n                            x: ['-100%', '200%']\n                          }}\n                          transition={{\n                            duration: 2,\n                            repeat: Infinity,\n                            ease: 'linear'\n                          }}\n                        />\n                      </div>\n\n                      <div className=\"flex justify-between text-xs text-gray-400 font-mono\">\n                        <span>Step {currentStep}</span>\n                        <span>of {steps.length}</span>\n                      </div>\n                    </div>\n                  </motion.div>\n\n                  {/* Array Status */}\n                  <motion.div\n                    className=\"bg-gradient-to-br from-green-900/30 to-green-800/20 rounded-xl p-4 border border-green-500/40 shadow-[0_0_15px_rgba(0,255,170,0.2)]\"\n                    whileHover={{ scale: 1.02, boxShadow: '0 0 25px rgba(0,255,170,0.4)' }}\n                    transition={{ duration: 0.2 }}\n                  >\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <div className=\"text-xs text-green-300/70 uppercase tracking-wider mb-1\">\n                          Array Size\n                        </div>\n                        <div className=\"text-3xl font-bold text-white font-mono\">\n                          {array.length}\n                        </div>\n                      </div>\n                      <motion.div\n                        animate={{\n                          scale: [1, 1.1, 1],\n                          boxShadow: [\n                            '0 0 10px rgba(0,255,170,0.5)',\n                            '0 0 20px rgba(0,255,170,0.8)',\n                            '0 0 10px rgba(0,255,170,0.5)'\n                          ]\n                        }}\n                        transition={{ duration: 2, repeat: Infinity }}\n                        className=\"w-12 h-12 rounded-full bg-green-500/20 flex items-center justify-center\"\n                      >\n                        <BarChart3 className=\"w-6 h-6 text-green-400\" />\n                      </motion.div>\n                    </div>\n                  </motion.div>\n                </div>\n\n                {/* Status Indicator */}\n                <motion.div\n                  className=\"mt-4 p-3 rounded-lg bg-gray-700/30 border border-gray-600/50\"\n                  animate={{\n                    borderColor: isPlaying \n                      ? ['rgba(0,255,255,0.5)', 'rgba(255,0,255,0.5)', 'rgba(0,255,255,0.5)']\n                      : 'rgba(156,163,175,0.5)'\n                  }}\n                  transition={{ duration: 2, repeat: Infinity }}\n                >\n                  <div className=\"flex items-center justify-center gap-2\">\n                    <motion.div\n                      className={`w-2 h-2 rounded-full ${\n                        isPlaying ? 'bg-cyan-400' : 'bg-gray-500'\n                      }`}\n                      animate={{\n                        scale: isPlaying ? [1, 1.5, 1] : 1,\n                        boxShadow: isPlaying \n                          ? ['0 0 5px rgba(0,255,255,0.8)', '0 0 15px rgba(0,255,255,1)', '0 0 5px rgba(0,255,255,0.8)']\n                          : 'none'\n                      }}\n                      transition={{ duration: 1, repeat: Infinity }}\n                    />\n                    <span className={`text-sm font-medium ${\n                      isPlaying ? 'text-cyan-300' : 'text-gray-400'\n                    }`}>\n                      {isPlaying ? 'Sorting...' : currentStep === steps.length && steps.length > 0 ? 'Complete' : 'Ready'}\n                    </span>\n                  </div>\n                </motion.div>\n              </div>\n            </motion.div>\n          </div>\n\n          <div className=\"lg:col-span-3\">\n            <div className=\"bg-gray-800/50 backdrop-blur-lg rounded-2xl p-8 border border-purple-500/30 shadow-lg shadow-purple-500/20 min-h-[600px]\">\n              {array.length === 0 ? (\n                <motion.div\n                  initial={{ opacity: 0, scale: 0.8 }}\n                  animate={{ opacity: 1, scale: 1 }}\n                  className=\"flex flex-col items-center justify-center h-full space-y-6\"\n                >\n                  <motion.div\n                    animate={{\n                      rotate: [0, 360],\n                      scale: [1, 1.2, 1]\n                    }}\n                    transition={{\n                      duration: 3,\n                      repeat: Infinity,\n                      ease: \"easeInOut\"\n                    }}\n                  >\n                    <BarChart3 className=\"w-24 h-24 text-cyan-400/50\" />\n                  </motion.div>\n                  <div className=\"text-center space-y-2\">\n                    <h3 className=\"text-2xl font-semibold text-gray-400\">\n                      No Array Generated\n                    </h3>\n                    <p className=\"text-gray-500\">\n                      Click \"Generate Array\" to start visualizing\n                    </p>\n                  </div>\n                  <motion.div\n                    animate={{\n                      boxShadow: [\n                        '0 0 20px rgba(0, 255, 255, 0.3)',\n                        '0 0 40px rgba(0, 255, 255, 0.6)',\n                        '0 0 20px rgba(0, 255, 255, 0.3)'\n                      ]\n                    }}\n                    transition={{ duration: 2, repeat: Infinity }}\n                  >\n                    <Button\n                      onClick={generateRandomArray}\n                      className=\"bg-gradient-to-r from-cyan-500 to-purple-500 hover:from-cyan-600 hover:to-purple-600 text-white font-semibold px-8 py-6 text-lg rounded-xl shadow-lg\"\n                    >\n                      <Zap className=\"w-5 h-5 mr-2\" />\n                      Generate Array\n                    </Button>\n                  </motion.div>\n                </motion.div>\n              ) : (\n                <div className=\"h-full flex items-end justify-center gap-1 px-4\">\n                  {array.map((element, index) => {\n                    const maxValue = Math.max(...array.map(e => e.value));\n                    const heightPercentage = (element.value / maxValue) * 100;\n                    const colorIndex = index % NEON_COLORS.length;\n                    const baseColor = NEON_COLORS[colorIndex];\n\n                    let glowColor = baseColor;\n                    let glowIntensity = 0.3;\n\n                    if (element.isComparing) {\n                      glowColor = '#ffff00';\n                      glowIntensity = 0.8;\n                    } else if (element.isSwapping) {\n                      glowColor = '#ff00ff';\n                      glowIntensity = 1;\n                    } else if (element.isSorted) {\n                      glowColor = '#00ff00';\n                      glowIntensity = 0.6;\n                    }\n\n                    return (\n                      <motion.div\n                        key={element.id}\n                        layout\n                        initial={{ height: 0, opacity: 0 }}\n                        animate={{\n                          height: `${heightPercentage}%`,\n                          opacity: 1,\n                          scale: element.isSwapping ? [1, 1.1, 1] : 1,\n                          y: element.isSwapping ? [0, -10, 0] : 0\n                        }}\n                        transition={{\n                          height: { duration: 0.5, ease: \"easeOut\" },\n                          opacity: { duration: 0.3 },\n                          scale: { duration: 0.3, repeat: element.isSwapping ? Infinity : 0 },\n                          y: { duration: 0.3, repeat: element.isSwapping ? Infinity : 0 },\n                          layout: { duration: 0.5, ease: \"easeInOut\" }\n                        }}\n                        className=\"relative flex-1 min-w-[8px] max-w-[60px] rounded-t-lg\"\n                        style={{\n                          background: element.isSorted\n                            ? 'linear-gradient(to top, #00ff00, #00ffaa)'\n                            : element.isComparing\n                            ? 'linear-gradient(to top, #ffff00, #ffaa00)'\n                            : element.isSwapping\n                            ? 'linear-gradient(to top, #ff00ff, #ff0066)'\n                            : `linear-gradient(to top, ${baseColor}, ${baseColor}dd)`,\n                          boxShadow: `\n                            0 0 ${20 * glowIntensity}px ${glowColor}${Math.floor(glowIntensity * 100).toString(16)},\n                            0 0 ${40 * glowIntensity}px ${glowColor}${Math.floor(glowIntensity * 50).toString(16)},\n                            inset 0 0 ${10 * glowIntensity}px rgba(255, 255, 255, ${0.2 * glowIntensity})\n                          `,\n                          border: `1px solid ${glowColor}${Math.floor(glowIntensity * 150).toString(16)}`\n                        }}\n                      >\n                        {/* Trail effect for swapping */}\n                        {element.isSwapping && (\n                          <motion.div\n                            className=\"absolute inset-0 rounded-t-lg\"\n                            style={{\n                              background: `linear-gradient(to top, ${glowColor}40, transparent)`\n                            }}\n                            animate={{\n                              opacity: [0.8, 0, 0.8],\n                              scale: [1, 1.5, 1]\n                            }}\n                            transition={{\n                              duration: 0.6,\n                              repeat: Infinity,\n                              ease: \"easeInOut\"\n                            }}\n                          />\n                        )}\n\n                        {/* Value label */}\n                        <motion.div\n                          className=\"absolute -top-8 left-1/2 transform -translate-x-1/2 text-xs font-mono font-bold whitespace-nowrap\"\n                          initial={{ opacity: 0, y: 10 }}\n                          animate={{ opacity: 1, y: 0 }}\n                          style={{\n                            color: element.isSorted\n                              ? '#00ff00'\n                              : element.isComparing\n                              ? '#ffff00'\n                              : element.isSwapping\n                              ? '#ff00ff'\n                              : baseColor,\n                            textShadow: `0 0 10px ${glowColor}, 0 0 20px ${glowColor}40`\n                          }}\n                        >\n                          {element.value}\n                        </motion.div>\n\n                        {/* Pulse effect for comparing */}\n                        {element.isComparing && (\n                          <motion.div\n                            className=\"absolute inset-0 rounded-t-lg border-2\"\n                            style={{\n                              borderColor: glowColor\n                            }}\n                            animate={{\n                              opacity: [1, 0.3, 1],\n                              scale: [1, 1.05, 1]\n                            }}\n                            transition={{\n                              duration: 0.5,\n                              repeat: Infinity,\n                              ease: \"easeInOut\"\n                            }}\n                          />\n                        )}\n                      </motion.div>\n                    );\n                  })}\n                </div>\n              )}</parameter>\n              \n              <div className=\"h-full flex items-end justify-center gap-1\">\n                {array.length === 0 ? (\n                  <div className=\"flex flex-col items-center justify-center h-full space-y-4\">\n                    <motion.div\n                      animate={{\n                        scale: [1, 1.2, 1],\n                        rotate: [0, 360],\n                      }}\n                      transition={{\n                        duration: 3,\n                        repeat: Infinity,\n                        ease: \"easeInOut\"\n                      }}\n                    >\n                      <BarChart3 className=\"w-20 h-20 text-cyan-400/50\" />\n                    </motion.div>\n                    <p className=\"text-gray-400 text-lg\">Generate an array to start visualizing</p>\n                    <Button\n                      onClick={generateRandomArray}\n                      className=\"bg-gradient-to-r from-cyan-500 to-purple-500 hover:from-cyan-400 hover:to-purple-400 text-white font-semibold px-6 py-3 rounded-lg shadow-[0_0_20px_rgba(0,255,255,0.5)] hover:shadow-[0_0_30px_rgba(0,255,255,0.7)] transition-all duration-300\"\n                    >\n                      <Zap className=\"w-5 h-5 mr-2\" />\n                      Generate Array\n                    </Button>\n                  </div>\n                ) : (\n                  array.map((element, index) => {\n                    const isComparing = element.isComparing;\n                    const isSwapping = element.isSwapping;\n                    const isSorted = element.isSorted;\n                    \n                    let barColor = NEON_COLORS[index % NEON_COLORS.length];\n                    let glowColor = barColor;\n                    let glowIntensity = 0.3;\n                    \n                    if (isSorted) {\n                      barColor = '#00ff00';\n                      glowColor = '#00ff00';\n                      glowIntensity = 0.6;\n                    } else if (isSwapping) {\n                      barColor = '#ff0066';\n                      glowColor = '#ff0066';\n                      glowIntensity = 0.8;\n                    } else if (isComparing) {\n                      barColor = '#ffff00';\n                      glowColor = '#ffff00';\n                      glowIntensity = 0.7;\n                    }\n\n                    return (\n                      <motion.div\n                        key={element.id}\n                        layout\n                        initial={{ opacity: 0, scale: 0, y: 50 }}\n                        animate={{\n                          opacity: 1,\n                          scale: 1,\n                          y: 0,\n                          height: `${element.value * 4}px`,\n                        }}\n                        exit={{ opacity: 0, scale: 0 }}\n                        transition={{\n                          layout: { duration: 0.3, ease: \"easeInOut\" },\n                          height: { duration: 0.3, ease: \"easeOut\" },\n                          scale: { duration: 0.2 },\n                          opacity: { duration: 0.2 }\n                        }}\n                        className=\"relative flex-1 min-w-[8px] max-w-[60px] rounded-t-lg\"\n                        style={{\n                          backgroundColor: barColor,\n                          boxShadow: `\n                            0 0 ${glowIntensity * 20}px ${glowColor},\n                            0 0 ${glowIntensity * 40}px ${glowColor}80,\n                            inset 0 0 ${glowIntensity * 10}px ${glowColor}40\n                          `,\n                          border: `1px solid ${glowColor}`,\n                        }}\n                      >\n                        {/* Trail effect for swapping */}\n                        {isSwapping && (\n                          <>\n                            <motion.div\n                              className=\"absolute inset-0 rounded-t-lg\"\n                              style={{\n                                backgroundColor: barColor,\n                                opacity: 0.6,\n                              }}\n                              animate={{\n                                scale: [1, 1.2, 1],\n                                opacity: [0.6, 0.3, 0.6],\n                              }}\n                              transition={{\n                                duration: 0.5,\n                                repeat: Infinity,\n                                ease: \"easeInOut\"\n                              }}\n                            />\n                            <motion.div\n                              className=\"absolute -top-2 left-1/2 -translate-x-1/2\"\n                              animate={{\n                                y: [-10, -20, -10],\n                                opacity: [1, 0.5, 1],\n                              }}\n                              transition={{\n                                duration: 0.6,\n                                repeat: Infinity,\n                              }}\n                            >\n                              <div \n                                className=\"w-2 h-2 rounded-full\"\n                                style={{\n                                  backgroundColor: barColor,\n                                  boxShadow: `0 0 10px ${barColor}, 0 0 20px ${barColor}`\n                                }}\n                              />\n                            </motion.div>\n                          </>\n                        )}\n\n                        {/* Pulse effect for comparing */}\n                        {isComparing && (\n                          <motion.div\n                            className=\"absolute inset-0 rounded-t-lg border-2\"\n                            style={{\n                              borderColor: barColor,\n                            }}\n                            animate={{\n                              scale: [1, 1.15, 1],\n                              opacity: [0.8, 0.4, 0.8],\n                            }}\n                            transition={{\n                              duration: 0.8,\n                              repeat: Infinity,\n                              ease: \"easeInOut\"\n                            }}\n                          />\n                        )}\n\n                        {/* Sparkle effect for sorted */}\n                        {isSorted && (\n                          <motion.div\n                            className=\"absolute -top-1 left-1/2 -translate-x-1/2\"\n                            initial={{ scale: 0, rotate: 0 }}\n                            animate={{\n                              scale: [0, 1.5, 0],\n                              rotate: [0, 180, 360],\n                              opacity: [0, 1, 0],\n                            }}\n                            transition={{\n                              duration: 1,\n                              ease: \"easeOut\"\n                            }}\n                          >\n                            <div \n                              className=\"w-3 h-3\"\n                              style={{\n                                background: `radial-gradient(circle, ${barColor} 0%, transparent 70%)`,\n                              }}\n                            />\n                          </motion.div>\n                        )}\n\n                        {/* Value label */}\n                        <motion.div\n                          className=\"absolute -bottom-6 left-1/2 -translate-x-1/2 text-xs font-mono font-semibold whitespace-nowrap\"\n                          style={{\n                            color: barColor,\n                            textShadow: `0 0 5px ${glowColor}`,\n                          }}\n                          animate={{\n                            scale: isComparing || isSwapping ? [1, 1.2, 1] : 1,\n                          }}\n                          transition={{\n                            duration: 0.3,\n                            repeat: isComparing || isSwapping ? Infinity : 0,\n                          }}\n                        >\n                          {element.value}\n                        </motion.div>\n\n                        {/* Gradient overlay for depth */}\n                        <div\n                          className=\"absolute inset-0 rounded-t-lg pointer-events-none\"\n                          style={{\n                            background: `linear-gradient(to top, ${barColor}00 0%, ${barColor}40 100%)`,\n                          }}\n                        />\n                      </motion.div>\n                    );\n                  })\n                )}\n              </div>\n            </div>\n\n            <motion.div\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ delay: 0.4, duration: 0.6 }}\n              className=\"mt-6 bg-gray-800/50 backdrop-blur-lg rounded-2xl p-6 border border-purple-500/30 shadow-lg shadow-purple-500/20\"\n            >\n              <h3 className=\"text-purple-400 font-semibold mb-4 flex items-center gap-2\">\n                <BarChart3 className=\"w-5 h-5\" />\n                Legend\n              </h3>\n              <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n                <motion.div\n                  initial={{ opacity: 0, scale: 0.8 }}\n                  animate={{ opacity: 1, scale: 1 }}\n                  transition={{ delay: 0.5 }}\n                  className=\"flex items-center gap-3 p-3 bg-gray-700/30 rounded-lg border border-gray-600/50\"\n                >\n                  <motion.div\n                    className=\"w-4 h-12 rounded bg-gradient-to-t from-cyan-400 to-cyan-300\"\n                    animate={{\n                      boxShadow: [\n                        '0 0 10px rgba(0, 255, 255, 0.5)',\n                        '0 0 20px rgba(0, 255, 255, 0.8)',\n                        '0 0 10px rgba(0, 255, 255, 0.5)'\n                      ]\n                    }}\n                    transition={{ duration: 1.5, repeat: Infinity }}\n                  />\n                  <div>\n                    <div className=\"text-sm font-medium text-white\">Default</div>\n                    <div className=\"text-xs text-gray-400\">Unsorted</div>\n                  </div>\n                </motion.div>\n\n                <motion.div\n                  initial={{ opacity: 0, scale: 0.8 }}\n                  animate={{ opacity: 1, scale: 1 }}\n                  transition={{ delay: 0.6 }}\n                  className=\"flex items-center gap-3 p-3 bg-gray-700/30 rounded-lg border border-yellow-500/30\"\n                >\n                  <motion.div\n                    className=\"w-4 h-12 rounded bg-gradient-to-t from-yellow-400 to-yellow-300\"\n                    animate={{\n                      boxShadow: [\n                        '0 0 15px rgba(255, 255, 0, 0.6)',\n                        '0 0 25px rgba(255, 255, 0, 0.9)',\n                        '0 0 15px rgba(255, 255, 0, 0.6)'\n                      ],\n                      scale: [1, 1.1, 1]\n                    }}\n                    transition={{ duration: 1, repeat: Infinity }}\n                  />\n                  <div>\n                    <div className=\"text-sm font-medium text-white\">Comparing</div>\n                    <div className=\"text-xs text-gray-400\">Active</div>\n                  </div>\n                </motion.div>\n\n                <motion.div\n                  initial={{ opacity: 0, scale: 0.8 }}\n                  animate={{ opacity: 1, scale: 1 }}\n                  transition={{ delay: 0.7 }}\n                  className=\"flex items-center gap-3 p-3 bg-gray-700/30 rounded-lg border border-pink-500/30\"\n                >\n                  <motion.div\n                    className=\"w-4 h-12 rounded bg-gradient-to-t from-pink-500 to-pink-400\"\n                    animate={{\n                      boxShadow: [\n                        '0 0 15px rgba(255, 0, 102, 0.6)',\n                        '0 0 25px rgba(255, 0, 102, 0.9)',\n                        '0 0 15px rgba(255, 0, 102, 0.6)'\n                      ],\n                      x: [-2, 2, -2]\n                    }}\n                    transition={{ duration: 0.8, repeat: Infinity }}\n                  />\n                  <div>\n                    <div className=\"text-sm font-medium text-white\">Swapping</div>\n                    <div className=\"text-xs text-gray-400\">Moving</div>\n                  </div>\n                </motion.div>\n\n                <motion.div\n                  initial={{ opacity: 0, scale: 0.8 }}\n                  animate={{ opacity: 1, scale: 1 }}\n                  transition={{ delay: 0.8 }}\n                  className=\"flex items-center gap-3 p-3 bg-gray-700/30 rounded-lg border border-green-500/30\"\n                >\n                  <motion.div\n                    className=\"w-4 h-12 rounded bg-gradient-to-t from-green-400 to-green-300\"\n                    animate={{\n                      boxShadow: [\n                        '0 0 10px rgba(0, 255, 0, 0.5)',\n                        '0 0 20px rgba(0, 255, 0, 0.8)',\n                        '0 0 10px rgba(0, 255, 0, 0.5)'\n                      ]\n                    }}\n                    transition={{ duration: 2, repeat: Infinity }}\n                  />\n                  <div>\n                    <div className=\"text-sm font-medium text-white\">Sorted</div>\n                    <div className=\"text-xs text-gray-400\">Complete</div>\n                  </div>\n                </motion.div>\n              </div>\n            </motion.div>\n          </div>\n        </div>\n\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ delay: 0.4, duration: 0.6 }}\n          className=\"bg-gray-800/50 backdrop-blur-lg rounded-2xl p-6 border border-purple-500/30 shadow-lg shadow-purple-500/20\"\n        >\n          <div className=\"space-y-4\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center gap-2\">\n                <motion.div\n                  animate={{\n                    rotate: [0, 360],\n                  }}\n                  transition={{ duration: 3, repeat: Infinity, ease: \"linear\" }}\n                >\n                  <BarChart3 className=\"w-5 h-5 text-purple-400\" />\n                </motion.div>\n                <h3 className=\"text-lg font-semibold text-purple-300\">Timeline Control</h3>\n              </div>\n              <div className=\"flex items-center gap-2 px-4 py-2 bg-purple-900/50 rounded-full border border-purple-500/50\">\n                <span className=\"text-sm text-gray-400\">Step</span>\n                <motion.span\n                  key={currentStep}\n                  initial={{ scale: 1.3, color: '#a855f7' }}\n                  animate={{ scale: 1, color: '#d8b4fe' }}\n                  className=\"text-sm font-mono font-bold\"\n                >\n                  {currentStep}\n                </motion.span>\n                <span className=\"text-sm text-gray-400\">/</span>\n                <span className=\"text-sm font-mono text-purple-300\">{steps.length}</span>\n              </div>\n            </div>\n\n            {/* Progress Bar */}\n            <div className=\"relative h-3 bg-gray-700/50 rounded-full overflow-hidden border border-gray-600/50\">\n              <motion.div\n                className=\"absolute inset-y-0 left-0 bg-gradient-to-r from-cyan-500 via-purple-500 to-pink-500 rounded-full\"\n                initial={{ width: 0 }}\n                animate={{\n                  width: steps.length > 0 ? `${(currentStep / steps.length) * 100}%` : '0%',\n                }}\n                transition={{ duration: 0.3, ease: \"easeOut\" }}\n                style={{\n                  boxShadow: '0 0 20px rgba(168, 85, 247, 0.6)',\n                }}\n              />\n              <motion.div\n                className=\"absolute inset-y-0 left-0 bg-gradient-to-r from-cyan-400/50 to-purple-400/50 rounded-full blur-sm\"\n                animate={{\n                  width: steps.length > 0 ? `${(currentStep / steps.length) * 100}%` : '0%',\n                }}\n                transition={{ duration: 0.3, ease: \"easeOut\" }}\n              />\n            </div>\n\n            {/* Timeline Scrubber */}\n            <div className=\"relative pt-2\">\n              <input\n                type=\"range\"\n                min={0}\n                max={steps.length}\n                value={currentStep}\n                onChange={(e) => {\n                  const newStep = parseInt(e.target.value);\n                  setCurrentStep(newStep);\n                  if (newStep < steps.length) {\n                    setArray(steps[newStep].array);\n                  }\n                }}\n                disabled={isPlaying || steps.length === 0}\n                className=\"w-full h-2 bg-transparent appearance-none cursor-pointer disabled:cursor-not-allowed disabled:opacity-50\n                  [&::-webkit-slider-track]:h-2 [&::-webkit-slider-track]:bg-gray-700/50 [&::-webkit-slider-track]:rounded-full [&::-webkit-slider-track]:border [&::-webkit-slider-track]:border-gray-600/50\n                  [&::-webkit-slider-thumb]:appearance-none [&::-webkit-slider-thumb]:w-6 [&::-webkit-slider-thumb]:h-6 [&::-webkit-slider-thumb]:rounded-full [&::-webkit-slider-thumb]:bg-gradient-to-br [&::-webkit-slider-thumb]:from-cyan-400 [&::-webkit-slider-thumb]:to-purple-500 [&::-webkit-slider-thumb]:border-2 [&::-webkit-slider-thumb]:border-white [&::-webkit-slider-thumb]:shadow-[0_0_20px_rgba(168,85,247,0.8)] [&::-webkit-slider-thumb]:transition-all [&::-webkit-slider-thumb]:hover:shadow-[0_0_30px_rgba(168,85,247,1)] [&::-webkit-slider-thumb]:hover:scale-110\n                  [&::-moz-range-track]:h-2 [&::-moz-range-track]:bg-gray-700/50 [&::-moz-range-track]:rounded-full [&::-moz-range-track]:border [&::-moz-range-track]:border-gray-600/50\n                  [&::-moz-range-thumb]:w-6 [&::-moz-range-thumb]:h-6 [&::-moz-range-thumb]:rounded-full [&::-moz-range-thumb]:bg-gradient-to-br [&::-moz-range-thumb]:from-cyan-400 [&::-moz-range-thumb]:to-purple-500 [&::-moz-range-thumb]:border-2 [&::-moz-range-thumb]:border-white [&::-moz-range-thumb]:shadow-[0_0_20px_rgba(168,85,247,0.8)] [&::-moz-range-thumb]:transition-all [&::-moz-range-thumb]:hover:shadow-[0_0_30px_rgba(168,85,247,1)] [&::-moz-range-thumb]:hover:scale-110\"\n              />\n              \n              {/* Step Markers */}\n              {steps.length > 0 && steps.length <= 50 && (\n                <div className=\"absolute top-0 left-0 right-0 flex justify-between pointer-events-none\">\n                  {steps.map((_, index) => (\n                    <motion.div\n                      key={index}\n                      initial={{ scale: 0 }}\n                      animate={{ scale: index <= currentStep ? 1 : 0.5 }}\n                      className={`w-1 h-1 rounded-full transition-all duration-200 ${\n                        index < currentStep\n                          ? 'bg-cyan-400 shadow-[0_0_8px_rgba(0,255,255,0.8)]'\n                          : index === currentStep\n                          ? 'bg-purple-400 shadow-[0_0_12px_rgba(168,85,247,1)]'\n                          : 'bg-gray-600'\n                      }`}\n                    />\n                  ))}\n                </div>\n              )}\n            </div>\n\n            {/* Quick Navigation Buttons */}\n            <div className=\"flex items-center justify-between gap-2 pt-2\">\n              <Button\n                onClick={() => {\n                  setCurrentStep(0);\n                  if (steps.length > 0) {\n                    setArray(steps[0].array);\n                  }\n                }}\n                disabled={isPlaying || currentStep === 0 || steps.length === 0}\n                size=\"sm\"\n                className=\"flex-1 bg-gray-700/50 hover:bg-gray-600/50 text-cyan-400 border border-cyan-500/30 hover:border-cyan-500/50 shadow-[0_0_15px_rgba(0,255,255,0.3)] hover:shadow-[0_0_20px_rgba(0,255,255,0.5)] transition-all disabled:opacity-30 disabled:cursor-not-allowed\"\n              >\n                <span className=\"text-xs font-semibold\">First</span>\n              </Button>\n              \n              <Button\n                onClick={() => {\n                  const newStep = Math.max(0, currentStep - 1);\n                  setCurrentStep(newStep);\n                  if (newStep < steps.length) {\n                    setArray(steps[newStep].array);\n                  }\n                }}\n                disabled={isPlaying || currentStep === 0 || steps.length === 0}\n                size=\"sm\"\n                className=\"flex-1 bg-gray-700/50 hover:bg-gray-600/50 text-purple-400 border border-purple-500/30 hover:border-purple-500/50 shadow-[0_0_15px_rgba(168,85,247,0.3)] hover:shadow-[0_0_20px_rgba(168,85,247,0.5)] transition-all disabled:opacity-30 disabled:cursor-not-allowed\"\n              >\n                <span className=\"text-xs font-semibold\">\u2190 Prev</span>\n              </Button>\n              \n              <Button\n                onClick={() => {\n                  const newStep = Math.min(steps.length, currentStep + 1);\n                  setCurrentStep(newStep);\n                  if (newStep < steps.length) {\n                    setArray(steps[newStep].array);\n                  }\n                }}\n                disabled={isPlaying || currentStep >= steps.length || steps.length === 0}\n                size=\"sm\"\n                className=\"flex-1 bg-gray-700/50 hover:bg-gray-600/50 text-purple-400 border border-purple-500/30 hover:border-purple-500/50 shadow-[0_0_15px_rgba(168,85,247,0.3)] hover:shadow-[0_0_20px_rgba(168,85,247,0.5)] transition-all disabled:opacity-30 disabled:cursor-not-allowed\"\n              >\n                <span className=\"text-xs font-semibold\">Next \u2192</span>\n              </Button>\n              \n              <Button\n                onClick={() => {\n                  setCurrentStep(steps.length);\n                  if (steps.length > 0) {\n                    setArray(steps[steps.length - 1].array);\n                  }\n                }}\n                disabled={isPlaying || currentStep >= steps.length || steps.length === 0}\n                size=\"sm\"\n                className=\"flex-1 bg-gray-700/50 hover:bg-gray-600/50 text-cyan-400 border border-cyan-500/30 hover:border-cyan-500/50 shadow-[0_0_15px_rgba(0,255,255,0.3)] hover:shadow-[0_0_20px_rgba(0,255,255,0.5)] transition-all disabled:opacity-30 disabled:cursor-not-allowed\"\n              >\n                <span className=\"text-xs font-semibold\">Last</span>\n              </Button>\n            </div>\n\n            {/* Status Indicator */}\n            {steps.length > 0 && (\n              <motion.div\n                initial={{ opacity: 0 }}\n                animate={{ opacity: 1 }}\n                className=\"flex items-center justify-center gap-2 pt-2\"\n              >\n                {currentStep >= steps.length ? (\n                  <div className=\"flex items-center gap-2 px-4 py-2 bg-green-900/30 rounded-full border border-green-500/50\">\n                    <motion.div\n                      animate={{\n                        scale: [1, 1.2, 1],\n                        opacity: [1, 0.7, 1],\n                      }}\n                      transition={{ duration: 1.5, repeat: Infinity }}\n                      className=\"w-2 h-2 bg-green-400 rounded-full shadow-[0_0_10px_rgba(74,222,128,0.8)]\"\n                    />\n                    <span className=\"text-sm font-semibold text-green-300\">Sorting Complete</span>\n                  </div>\n                ) : isPlaying ? (\n                  <div className=\"flex items-center gap-2 px-4 py-2 bg-cyan-900/30 rounded-full border border-cyan-500/50\">\n                    <motion.div\n                      animate={{\n                        scale: [1, 1.3, 1],\n                        opacity: [1, 0.5, 1],\n                      }}\n                      transition={{ duration: 0.8, repeat: Infinity }}\n                      className=\"w-2 h-2 bg-cyan-400 rounded-full shadow-[0_0_10px_rgba(0,255,255,0.8)]\"\n                    />\n                    <span className=\"text-sm font-semibold text-cyan-300\">Playing...</span>\n                  </div>\n                ) : (\n                  <div className=\"flex items-center gap-2 px-4 py-2 bg-purple-900/30 rounded-full border border-purple-500/50\">\n                    <div className=\"w-2 h-2 bg-purple-400 rounded-full shadow-[0_0_10px_rgba(168,85,247,0.8)]\" />\n                    <span className=\"text-sm font-semibold text-purple-300\">Paused</span>\n                  </div>\n                )}\n              </motion.div>\n            )}\n          </div>\n        </motion.div>\n      </div>\n    </div>\n  );\n}",
    "error": null,
    "elapsed_time": 409.7918312549591,
    "success": true
  }
}