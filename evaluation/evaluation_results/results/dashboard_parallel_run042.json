{
  "prompt_id": "dashboard",
  "prompt_name": "Analytics Dashboard",
  "mode": "parallel",
  "run_number": 42,
  "timestamp": "2025-10-14T00:58:52.548412",
  "response_time": 74.35957384109497,
  "total_tokens": null,
  "response_content": "\nimport { useState, useCallback } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Moon, Sun, RefreshCw } from 'lucide-react';\nimport { Badge } from '@/components/ui/badge';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\nimport { ChevronUp, ChevronDown, ChevronsUpDown } from 'lucide-react';\nimport { AlertCircle, AlertTriangle, Info, CheckCircle } from 'lucide-react';\nimport { TrendingUp, TrendingDown, DollarSign, Users, ShoppingCart, CheckCircle, AlertCircle, Clock } from 'lucide-react';\nimport { AreaChart, Area, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';\nimport { motion } from 'framer-motion';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\n\nimport { motion } from 'framer-motion';\nimport { Progress } from '@/components/ui/progress';\nimport { TrendingUp, TrendingDown, DollarSign, Users, ShoppingCart, Target } from 'lucide-react';\nimport { motion } from 'framer-motion';\n\ninterface MetricData {\n  id: string;\n  label: string;\n  value: number;\n  change: number;\n  trend: 'up' | 'down';\n}\n\ninterface ChartDataPoint {\n  date: string;\n  revenue: number;\n  users: number;\n  orders: number;\n}\n\ninterface TableRow {\n  id: string;\n  product: string;\n  sales: number;\n  revenue: number;\n  status: 'active' | 'pending' | 'inactive';\n}\n\nconst mockMetrics: MetricData[] = [\n  { id: '1', label: 'Total Revenue', value: 45231, change: 12.5, trend: 'up' },\n  { id: '2', label: 'Active Users', value: 2350, change: 8.2, trend: 'up' },\n  { id: '3', label: 'Total Orders', value: 1543, change: -3.1, trend: 'down' },\n  { id: '4', label: 'Conversion Rate', value: 3.24, change: 5.7, trend: 'up' }\n];\n\nconst mockChartData: ChartDataPoint[] = [\n  { date: '2024-01-01', revenue: 12000, users: 450, orders: 230 },\n  { date: '2024-01-02', revenue: 15000, users: 520, orders: 280 },\n  { date: '2024-01-03', revenue: 13500, users: 490, orders: 250 },\n  { date: '2024-01-04', revenue: 18000, users: 610, orders: 320 },\n  { date: '2024-01-05', revenue: 16500, users: 580, orders: 295 },\n  { date: '2024-01-06', revenue: 20000, users: 680, orders: 350 },\n  { date: '2024-01-07', revenue: 22000, users: 720, orders: 380 }\n];\n\nconst mockTableData: TableRow[] = [\n  { id: '1', product: 'Premium Plan', sales: 234, revenue: 23400, status: 'active' },\n  { id: '2', product: 'Basic Plan', sales: 567, revenue: 11340, status: 'active' },\n  { id: '3', product: 'Enterprise Plan', sales: 89, revenue: 44500, status: 'active' },\n  { id: '4', product: 'Starter Plan', sales: 432, revenue: 4320, status: 'pending' },\n  { id: '5', product: 'Pro Plan', sales: 156, revenue: 15600, status: 'inactive' }\n];\ninterface Alert {\n  id: string;\n  message: string;\n  severity: 'info' | 'warning' | 'error' | 'success';\n  timestamp: string;\n}\n\nconst mockAlerts: Alert[] = [\n  { id: '1', message: 'Server response time increased by 15%', severity: 'warning', timestamp: '2 min ago' },\n  { id: '2', message: 'New user milestone reached: 2,500 users', severity: 'success', timestamp: '15 min ago' },\n  { id: '3', message: 'Payment gateway experiencing delays', severity: 'error', timestamp: '1 hour ago' },\n  { id: '4', message: 'Scheduled maintenance on Jan 15', severity: 'info', timestamp: '3 hours ago' },\n  { id: '5', message: 'High traffic detected on checkout page', severity: 'warning', timestamp: '5 hours ago' }\n];\ninterface QuickStat {\n  id: string;\n  label: string;\n  value: string;\n  target: string;\n  percentage: number;\n  icon: React.ReactNode;\n  color: string;\n}\n\nconst mockQuickStats: QuickStat[] = [\n  {\n    id: '1',\n    label: 'Monthly Goal',\n    value: '$45,231',\n    target: '$50,000',\n    percentage: 90,\n    icon: <Target className=\"h-4 w-4\" />,\n    color: 'text-blue-500'\n  },\n  {\n    id: '2',\n    label: 'User Growth',\n    value: '2,350',\n    target: '3,000',\n    percentage: 78,\n    icon: <Users className=\"h-4 w-4\" />,\n    color: 'text-green-500'\n  },\n  {\n    id: '3',\n    label: 'Order Target',\n    value: '1,543',\n    target: '2,000',\n    percentage: 77,\n    icon: <ShoppingCart className=\"h-4 w-4\" />,\n    color: 'text-purple-500'\n  },\n  {\n    id: '4',\n    label: 'Revenue Target',\n    value: '$89,400',\n    target: '$100,000',\n    percentage: 89,\n    icon: <DollarSign className=\"h-4 w-4\" />,\n    color: 'text-orange-500'\n  }\n];\ninterface ActivityItem {\n  id: string;\n  type: 'sale' | 'user' | 'order' | 'alert';\n  message: string;\n  timestamp: string;\n  icon: 'sale' | 'user' | 'order' | 'success' | 'warning';\n}\n\nconst mockActivityData: ActivityItem[] = [\n  { id: '1', type: 'sale', message: 'New sale: Premium Plan purchased', timestamp: '2 minutes ago', icon: 'sale' },\n  { id: '2', type: 'user', message: 'New user registration from US', timestamp: '5 minutes ago', icon: 'user' },\n  { id: '3', type: 'order', message: 'Order #1234 completed successfully', timestamp: '12 minutes ago', icon: 'success' },\n  { id: '4', type: 'sale', message: 'Enterprise Plan upgraded', timestamp: '18 minutes ago', icon: 'sale' },\n  { id: '5', type: 'alert', message: 'Server response time increased', timestamp: '25 minutes ago', icon: 'warning' },\n  { id: '6', type: 'user', message: '10 new users joined today', timestamp: '32 minutes ago', icon: 'user' },\n  { id: '7', type: 'order', message: 'Order #1233 shipped', timestamp: '45 minutes ago', icon: 'success' },\n  { id: '8', type: 'sale', message: 'Pro Plan subscription renewed', timestamp: '1 hour ago', icon: 'sale' }\n];\nconst mockPieData = [\n  { category: 'Premium Plan', value: 23400, color: '#3b82f6' },\n  { category: 'Enterprise Plan', value: 44500, color: '#8b5cf6' },\n  { category: 'Pro Plan', value: 15600, color: '#10b981' },\n  { category: 'Basic Plan', value: 11340, color: '#f59e0b' },\n  { category: 'Starter Plan', value: 4320, color: '#ef4444' }\n];\n\nconst PieChart = ({ data, isDarkMode }: { data: typeof mockPieData, isDarkMode: boolean }) => {\n  const total = data.reduce((sum, item) => sum + item.value, 0);\n  let currentAngle = -90;\n\n  const createArc = (startAngle: number, endAngle: number, radius: number) => {\n    const start = polarToCartesian(50, 50, radius, endAngle);\n    const end = polarToCartesian(50, 50, radius, startAngle);\n    const largeArcFlag = endAngle - startAngle <= 180 ? '0' : '1';\n    return [\n      'M', 50, 50,\n      'L', start.x, start.y,\n      'A', radius, radius, 0, largeArcFlag, 0, end.x, end.y,\n      'Z'\n    ].join(' ');\n  };\n\n  const polarToCartesian = (centerX: number, centerY: number, radius: number, angleInDegrees: number) => {\n    const angleInRadians = (angleInDegrees * Math.PI) / 180.0;\n    return {\n      x: centerX + radius * Math.cos(angleInRadians),\n      y: centerY + radius * Math.sin(angleInRadians)\n    };\n  };\n\n  return (\n    <div className=\"flex flex-col items-center\">\n      <svg viewBox=\"0 0 100 100\" className=\"w-full max-w-[240px] mb-6\">\n        {data.map((item, index) => {\n          const percentage = (item.value / total) * 100;\n          const angle = (percentage / 100) * 360;\n          const startAngle = currentAngle;\n          const endAngle = currentAngle + angle;\n          currentAngle = endAngle;\n\n          return (\n            <motion.path\n              key={item.category}\n              d={createArc(startAngle, endAngle, 45)}\n              fill={item.color}\n              initial={{ opacity: 0, scale: 0 }}\n              animate={{ opacity: 1, scale: 1 }}\n              transition={{ duration: 0.5, delay: index * 0.1 }}\n              className=\"hover:opacity-80 transition-opacity cursor-pointer\"\n            />\n          );\n        })}\n        <circle cx=\"50\" cy=\"50\" r=\"20\" fill={isDarkMode ? '#1f2937' : '#ffffff'} />\n      </svg>\n\n      <div className=\"w-full space-y-3\">\n        {data.map((item, index) => {\n          const percentage = ((item.value / total) * 100).toFixed(1);\n          return (\n            <motion.div\n              key={item.category}\n              initial={{ opacity: 0, x: -20 }}\n              animate={{ opacity: 1, x: 0 }}\n              transition={{ duration: 0.3, delay: index * 0.1 }}\n              className=\"flex items-center justify-between\"\n            >\n              <div className=\"flex items-center gap-2\">\n                <div\n                  className=\"w-3 h-3 rounded-full\"\n                  style={{ backgroundColor: item.color }}\n                />\n                <span className={`text-sm ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>\n                  {item.category}\n                </span>\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <span className={`text-sm font-medium ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                  ${item.value.toLocaleString()}\n                </span>\n                <span className={`text-xs ${isDarkMode ? 'text-gray-500' : 'text-gray-500'}`}>\n                  ({percentage}%)\n                </span>\n              </div>\n            </motion.div>\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nconst RevenueChart = ({ data, isDarkMode }: { data: ChartDataPoint[], isDarkMode: boolean }) => {\n  const [hoveredPoint, setHoveredPoint] = useState<number | null>(null);\n  \n  const maxRevenue = Math.max(...data.map(d => d.revenue));\n  const minRevenue = Math.min(...data.map(d => d.revenue));\n  const revenueRange = maxRevenue - minRevenue;\n  \n  const chartWidth = 100;\n  const chartHeight = 200;\n  const padding = 20;\n  \n  const points = data.map((point, index) => {\n    const x = (index / (data.length - 1)) * (chartWidth - padding * 2) + padding;\n    const y = chartHeight - ((point.revenue - minRevenue) / revenueRange) * (chartHeight - padding * 2) - padding;\n    return { x, y, ...point };\n  });\n  \n  const pathD = points.map((point, index) => \n    `${index === 0 ? 'M' : 'L'} ${point.x} ${point.y}`\n  ).join(' ');\n  \n  const areaPathD = `${pathD} L ${points[points.length - 1].x} ${chartHeight} L ${points[0].x} ${chartHeight} Z`;\n  \n  return (\n    <div className=\"relative w-full h-64\">\n      <svg \n        viewBox={`0 0 ${chartWidth} ${chartHeight}`} \n        className=\"w-full h-full\"\n        preserveAspectRatio=\"none\"\n      >\n        <defs>\n          <linearGradient id=\"revenueGradient\" x1=\"0%\" y1=\"0%\" x2=\"0%\" y2=\"100%\">\n            <stop offset=\"0%\" stopColor={isDarkMode ? \"#3b82f6\" : \"#2563eb\"} stopOpacity=\"0.3\" />\n            <stop offset=\"100%\" stopColor={isDarkMode ? \"#3b82f6\" : \"#2563eb\"} stopOpacity=\"0.05\" />\n          </linearGradient>\n        </defs>\n        \n        <motion.path\n          d={areaPathD}\n          fill=\"url(#revenueGradient)\"\n          initial={{ opacity: 0 }}\n          animate={{ opacity: 1 }}\n          transition={{ duration: 0.5 }}\n        />\n        \n        <motion.path\n          d={pathD}\n          fill=\"none\"\n          stroke={isDarkMode ? \"#3b82f6\" : \"#2563eb\"}\n          strokeWidth=\"0.5\"\n          strokeLinecap=\"round\"\n          strokeLinejoin=\"round\"\n          initial={{ pathLength: 0 }}\n          animate={{ pathLength: 1 }}\n          transition={{ duration: 1, ease: \"easeInOut\" }}\n        />\n        \n        {points.map((point, index) => (\n          <g key={index}>\n            <motion.circle\n              cx={point.x}\n              cy={point.y}\n              r={hoveredPoint === index ? \"1.5\" : \"1\"}\n              fill={isDarkMode ? \"#3b82f6\" : \"#2563eb\"}\n              initial={{ scale: 0 }}\n              animate={{ scale: 1 }}\n              transition={{ delay: index * 0.1, duration: 0.3 }}\n              onMouseEnter={() => setHoveredPoint(index)}\n              onMouseLeave={() => setHoveredPoint(null)}\n              className=\"cursor-pointer\"\n              style={{ transformOrigin: `${point.x}px ${point.y}px` }}\n            />\n          </g>\n        ))}\n      </svg>\n      \n      <div className=\"absolute inset-0 pointer-events-none\">\n        {points.map((point, index) => (\n          <div\n            key={index}\n            className=\"absolute pointer-events-auto\"\n            style={{\n              left: `${(point.x / chartWidth) * 100}%`,\n              top: `${(point.y / chartHeight) * 100}%`,\n              transform: 'translate(-50%, -50%)'\n            }}\n            onMouseEnter={() => setHoveredPoint(index)}\n            onMouseLeave={() => setHoveredPoint(null)}\n          >\n            <div className=\"w-8 h-8 cursor-pointer\" />\n            {hoveredPoint === index && (\n              <motion.div\n                initial={{ opacity: 0, y: 10 }}\n                animate={{ opacity: 1, y: 0 }}\n                className={`absolute bottom-full mb-2 left-1/2 -translate-x-1/2 px-3 py-2 rounded-lg shadow-lg whitespace-nowrap z-10 ${\n                  isDarkMode ? 'bg-gray-700 text-white' : 'bg-white text-gray-900'\n                }`}\n                style={{ pointerEvents: 'none' }}\n              >\n                <div className=\"text-xs font-semibold\">\n                  {new Date(point.date).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n                </div>\n                <div className=\"text-sm font-bold text-blue-500\">\n                  ${point.revenue.toLocaleString()}\n                </div>\n                <div className={`absolute bottom-0 left-1/2 -translate-x-1/2 translate-y-full w-0 h-0 border-l-4 border-r-4 border-t-4 border-transparent ${\n                  isDarkMode ? 'border-t-gray-700' : 'border-t-white'\n                }`} />\n              </motion.div>\n            )}\n          </div>\n        ))}\n      </div>\n      \n      <div className=\"absolute bottom-0 left-0 right-0 flex justify-between px-4 text-xs\">\n        {data.map((point, index) => (\n          index % Math.ceil(data.length / 4) === 0 && (\n            <span key={index} className={isDarkMode ? 'text-gray-400' : 'text-gray-600'}>\n              {new Date(point.date).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n            </span>\n          )\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default function AnalyticsDashboard() {\n\n  const [isDarkMode, setIsDarkMode] = useState(false);\n  const [metrics, setMetrics] = useState<MetricData[]>(mockMetrics);\n  const [chartData, setChartData] = useState<ChartDataPoint[]>(mockChartData);\n  const [tableData, setTableData] = useState<TableRow[]>(mockTableData);\n  const [isRefreshing, setIsRefreshing] = useState(false);\n  const [sortColumn, setSortColumn] = useState<keyof TableRow | null>(null);\n  const [sortDirection, setSortDirection] = useState<'asc' | 'desc'>('asc');\n  const [currentPage, setCurrentPage] = useState(1);\n  const itemsPerPage = 3;\n\n  const handleSort = useCallback((column: keyof TableRow) => {\n    if (sortColumn === column) {\n      setSortDirection(prev => prev === 'asc' ? 'desc' : 'asc');\n    } else {\n      setSortColumn(column);\n      setSortDirection('asc');\n    }\n  }, [sortColumn]);\n\n  const sortedTableData = useCallback(() => {\n    if (!sortColumn) return tableData;\n    \n    return [...tableData].sort((a, b) => {\n      const aValue = a[sortColumn];\n      const bValue = b[sortColumn];\n      \n      if (typeof aValue === 'number' && typeof bValue === 'number') {\n        return sortDirection === 'asc' ? aValue - bValue : bValue - aValue;\n      }\n      \n      if (typeof aValue === 'string' && typeof bValue === 'string') {\n        return sortDirection === 'asc' \n          ? aValue.localeCompare(bValue)\n          : bValue.localeCompare(aValue);\n      }\n      \n      return 0;\n    });\n  }, [tableData, sortColumn, sortDirection]);\n\n  const paginatedData = useCallback(() => {\n    const sorted = sortedTableData();\n    const startIndex = (currentPage - 1) * itemsPerPage;\n    return sorted.slice(startIndex, startIndex + itemsPerPage);\n  }, [sortedTableData, currentPage]);\n\n  const totalPages = Math.ceil(tableData.length / itemsPerPage);\n\n  const getStatusBadgeVariant = (status: TableRow['status']) => {\n    switch (status) {\n      case 'active':\n        return 'default';\n      case 'pending':\n        return 'secondary';\n      case 'inactive':\n        return 'outline';\n      default:\n        return 'default';\n    }\n  };\n\n  const SortIcon = ({ column }: { column: keyof TableRow }) => {\n    if (sortColumn !== column) {\n      return <ChevronsUpDown className=\"ml-2 h-4 w-4\" />;\n    }\n    return sortDirection === 'asc' \n      ? <ChevronUp className=\"ml-2 h-4 w-4\" />\n      : <ChevronDown className=\"ml-2 h-4 w-4\" />;\n  };\n\n  const toggleDarkMode = useCallback(() => {\n    setIsDarkMode(prev => !prev);\n  }, []);\n\n  const formatChartData = useCallback((data: ChartDataPoint[]) => {\n    return data.map(point => ({\n      ...point,\n      date: new Date(point.date).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })\n    }));\n  }, []);\n\n  const formattedChartData = formatChartData(chartData);\n  const handleRefresh = useCallback(() => {\n    setIsRefreshing(true);\n    \n    setTimeout(() => {\n      // Generate updated mock metrics with random variations\n      const updatedMetrics = mockMetrics.map(metric => ({\n        ...metric,\n        value: metric.value + Math.floor(Math.random() * 200 - 100),\n        change: parseFloat((Math.random() * 20 - 5).toFixed(1)),\n        trend: Math.random() > 0.5 ? 'up' as const : 'down' as const\n      }));\n\n      // Generate updated chart data with random variations\n      const updatedChartData = mockChartData.map(point => ({\n        ...point,\n        revenue: point.revenue + Math.floor(Math.random() * 4000 - 2000),\n        users: point.users + Math.floor(Math.random() * 100 - 50),\n        orders: point.orders + Math.floor(Math.random() * 50 - 25)\n      }));\n\n      // Generate updated table data with random variations\n      const updatedTableData = mockTableData.map(row => ({\n        ...row,\n        sales: row.sales + Math.floor(Math.random() * 40 - 20),\n        revenue: row.revenue + Math.floor(Math.random() * 2000 - 1000)\n      }));\n\n      setMetrics(updatedMetrics);\n      setChartData(updatedChartData);\n      setTableData(updatedTableData);\n      setIsRefreshing(false);\n    }, 1500);</parameter>\n\n  }, []);\n\n  return (\n    <div className={`min-h-screen ${isDarkMode ? 'dark bg-gray-900' : 'bg-gray-50'}`}>\n      <div className=\"container mx-auto p-4 md:p-6 lg:p-8\">\n        <div className=\"flex flex-col md:flex-row justify-between items-start md:items-center gap-4 mb-8\">\n          <div>\n            <h1 className={`text-3xl md:text-4xl font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n              Analytics Dashboard\n            </h1>\n            <p className={`mt-2 ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n              Real-time insights and performance metrics\n            </p>\n          </div>\n          \n          <div className=\"flex gap-2\">\n            <Button\n              variant=\"outline\"\n              size=\"icon\"\n              onClick={toggleDarkMode}\n              className={isDarkMode ? 'border-gray-700' : ''}\n            >\n              {isDarkMode ? <Sun className=\"h-5 w-5\" /> : <Moon className=\"h-5 w-5\" />}\n            </Button>\n            \n            <Button\n              variant=\"outline\"\n              onClick={handleRefresh}\n              disabled={isRefreshing}\n              className={isDarkMode ? 'border-gray-700' : ''}\n            >\n              <RefreshCw className={`h-4 w-4 mr-2 ${isRefreshing ? 'animate-spin' : ''}`} />\n              Refresh\n            </Button>\n          </div>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 md:gap-6 mb-8\">\n          {metrics.map((metric, index) => {\n            const Icon = metric.label.includes('Revenue') ? DollarSign :\n                        metric.label.includes('Users') ? Users :\n                        metric.label.includes('Orders') ? ShoppingCart :\n                        Target;\n            \n            const TrendIcon = metric.trend === 'up' ? TrendingUp : TrendingDown;\n            \n            return (\n              <motion.div\n                key={metric.id}\n                initial={{ opacity: 0, y: 20 }}\n                animate={{ opacity: 1, y: 0 }}\n                transition={{ duration: 0.4, delay: index * 0.1 }}\n              >\n                <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n                  <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                    <CardTitle className={`text-sm font-medium ${isDarkMode ? 'text-gray-300' : 'text-gray-600'}`}>\n                      {metric.label}\n                    </CardTitle>\n                    <Icon className={`h-4 w-4 ${isDarkMode ? 'text-gray-400' : 'text-gray-500'}`} />\n                  </CardHeader>\n                  <CardContent>\n                    <div className={`text-2xl font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                      {metric.label.includes('Revenue') ? `$${metric.value.toLocaleString()}` :\n                       metric.label.includes('Rate') ? `${metric.value}%` :\n                       metric.value.toLocaleString()}\n                    </div>\n                    <div className=\"flex items-center mt-2\">\n                      <TrendIcon \n                        className={`h-4 w-4 mr-1 ${\n                          metric.trend === 'up' ? 'text-green-500' : 'text-red-500'\n                        }`} \n                      />\n                      <span className={`text-sm font-medium ${\n                        metric.trend === 'up' ? 'text-green-500' : 'text-red-500'\n                      }`}>\n                        {metric.change > 0 ? '+' : ''}{metric.change}%\n                      </span>\n                      <span className={`text-sm ml-2 ${isDarkMode ? 'text-gray-400' : 'text-gray-500'}`}>\n                        vs last period\n                      </span>\n                    </div>\n                  </CardContent>\n                </Card>\n              </motion.div>\n            );\n          })}\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-4 md:gap-6 mb-8\">\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Revenue Overview</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Daily revenue trends\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <RevenueChart data={chartData} isDarkMode={isDarkMode} />\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>User Activity</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Active users over time\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <ResponsiveContainer width=\"100%\" height={300}>\n                <AreaChart data={chartData}>\n                  <defs>\n                    <linearGradient id=\"userGradient\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                      <stop offset=\"5%\" stopColor=\"#8b5cf6\" stopOpacity={0.8}/>\n                      <stop offset=\"95%\" stopColor=\"#8b5cf6\" stopOpacity={0}/>\n                    </linearGradient>\n                  </defs>\n                  <CartesianGrid strokeDasharray=\"3 3\" stroke={isDarkMode ? '#374151' : '#e5e7eb'} />\n                  <XAxis \n                    dataKey=\"date\" \n                    stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                    tick={{ fill: isDarkMode ? '#9ca3af' : '#6b7280' }}\n                    tickFormatter={(value) => new Date(value).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n                  />\n                  <YAxis \n                    stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                    tick={{ fill: isDarkMode ? '#9ca3af' : '#6b7280' }}\n                  />\n                  <Tooltip \n                    contentStyle={{\n                      backgroundColor: isDarkMode ? '#1f2937' : '#ffffff',\n                      border: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\n                      borderRadius: '8px',\n                      color: isDarkMode ? '#ffffff' : '#000000'\n                    }}\n                    labelFormatter={(value) => new Date(value).toLocaleDateString('en-US', { month: 'long', day: 'numeric', year: 'numeric' })}\n                  />\n                  <Area \n                    type=\"monotone\" \n                    dataKey=\"users\" \n                    stroke=\"#8b5cf6\" \n                    strokeWidth={2}\n                    fillOpacity={1} \n                    fill=\"url(#userGradient)\"\n                    animationDuration={1000}\n                    animationEasing=\"ease-in-out\"\n                  />\n                </AreaChart>\n              </ResponsiveContainer>\n            </CardContent>\n          </Card>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-4 md:gap-6 mb-8\">\n          <Card className={`lg:col-span-2 ${isDarkMode ? 'bg-gray-800 border-gray-700' : ''}`}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Performance Metrics</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Combined view of key metrics\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"h-[300px] w-full\">\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <LineChart data={formattedChartData}>\n                    <CartesianGrid \n                      strokeDasharray=\"3 3\" \n                      stroke={isDarkMode ? '#374151' : '#e5e7eb'} \n                    />\n                    <XAxis \n                      dataKey=\"date\" \n                      stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                      style={{ fontSize: '12px' }}\n                    />\n                    <YAxis \n                      stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                      style={{ fontSize: '12px' }}\n                    />\n                    <Tooltip \n                      contentStyle={{\n                        backgroundColor: isDarkMode ? '#1f2937' : '#ffffff',\n                        border: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\n                        borderRadius: '6px',\n                        color: isDarkMode ? '#ffffff' : '#000000'\n                      }}\n                      formatter={(value: number, name: string) => {\n                        if (name === 'revenue') return [`$${value.toLocaleString()}`, 'Revenue'];\n                        if (name === 'users') return [value.toLocaleString(), 'Users'];\n                        if (name === 'orders') return [value.toLocaleString(), 'Orders'];\n                        return [value, name];\n                      }}\n                    />\n                    <Legend \n                      wrapperStyle={{\n                        paddingTop: '20px',\n                        fontSize: '14px'\n                      }}\n                      formatter={(value) => {\n                        if (value === 'revenue') return 'Revenue';\n                        if (value === 'users') return 'Users';\n                        if (value === 'orders') return 'Orders';\n                        return value;\n                      }}\n                    />\n                    <Line \n                      type=\"monotone\" \n                      dataKey=\"revenue\" \n                      stroke=\"#3b82f6\" \n                      strokeWidth={2}\n                      dot={{ fill: '#3b82f6', r: 4 }}\n                      activeDot={{ r: 6 }}\n                    />\n                    <Line \n                      type=\"monotone\" \n                      dataKey=\"users\" \n                      stroke=\"#10b981\" \n                      strokeWidth={2}\n                      dot={{ fill: '#10b981', r: 4 }}\n                      activeDot={{ r: 6 }}\n                    />\n                    <Line \n                      type=\"monotone\" \n                      dataKey=\"orders\" \n                      stroke=\"#f59e0b\" \n                      strokeWidth={2}\n                      dot={{ fill: '#f59e0b', r: 4 }}\n                      activeDot={{ r: 6 }}\n                    />\n                  </LineChart>\n                </ResponsiveContainer>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Distribution</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Sales by category\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <PieChart data={mockPieData} isDarkMode={isDarkMode} />\n            </CardContent>\n          </Card>\n        </div>\n\n        <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n          <CardHeader>\n            <CardTitle className={isDarkMode ? 'text-white' : ''}>Top Products</CardTitle>\n            <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n              Best performing products by revenue\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              <div className=\"rounded-md border\">\n                <Table>\n                  <TableHeader>\n                    <TableRow className={isDarkMode ? 'border-gray-700' : ''}>\n                      <TableHead className={isDarkMode ? 'text-gray-300' : ''}>\n                        <Button\n                          variant=\"ghost\"\n                          onClick={() => handleSort('product')}\n                          className=\"h-8 px-2 lg:px-3\"\n                        >\n                          Product\n                          <SortIcon column=\"product\" />\n                        </Button>\n                      </TableHead>\n                      <TableHead className={isDarkMode ? 'text-gray-300' : ''}>\n                        <Button\n                          variant=\"ghost\"\n                          onClick={() => handleSort('sales')}\n                          className=\"h-8 px-2 lg:px-3\"\n                        >\n                          Sales\n                          <SortIcon column=\"sales\" />\n                        </Button>\n                      </TableHead>\n                      <TableHead className={isDarkMode ? 'text-gray-300' : ''}>\n                        <Button\n                          variant=\"ghost\"\n                          onClick={() => handleSort('revenue')}\n                          className=\"h-8 px-2 lg:px-3\"\n                        >\n                          Revenue\n                          <SortIcon column=\"revenue\" />\n                        </Button>\n                      </TableHead>\n                      <TableHead className={isDarkMode ? 'text-gray-300' : ''}>\n                        <Button\n                          variant=\"ghost\"\n                          onClick={() => handleSort('status')}\n                          className=\"h-8 px-2 lg:px-3\"\n                        >\n                          Status\n                          <SortIcon column=\"status\" />\n                        </Button>\n                      </TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {paginatedData().map((row) => (\n                      <TableRow \n                        key={row.id}\n                        className={isDarkMode ? 'border-gray-700 hover:bg-gray-700/50' : ''}\n                      >\n                        <TableCell className={`font-medium ${isDarkMode ? 'text-gray-200' : ''}`}>\n                          {row.product}\n                        </TableCell>\n                        <TableCell className={isDarkMode ? 'text-gray-300' : ''}>\n                          {row.sales.toLocaleString()}\n                        </TableCell>\n                        <TableCell className={isDarkMode ? 'text-gray-300' : ''}>\n                          ${row.revenue.toLocaleString()}\n                        </TableCell>\n                        <TableCell>\n                          <Badge \n                            variant={getStatusBadgeVariant(row.status)}\n                            className=\"capitalize\"\n                          >\n                            {row.status}\n                          </Badge>\n                        </TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              </div>\n\n              <div className=\"flex items-center justify-between\">\n                <p className={`text-sm ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                  Showing {((currentPage - 1) * itemsPerPage) + 1} to {Math.min(currentPage * itemsPerPage, tableData.length)} of {tableData.length} products\n                </p>\n                <div className=\"flex gap-2\">\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => setCurrentPage(prev => Math.max(1, prev - 1))}\n                    disabled={currentPage === 1}\n                    className={isDarkMode ? 'border-gray-700' : ''}\n                  >\n                    Previous\n                  </Button>\n                  <div className=\"flex items-center gap-1\">\n                    {Array.from({ length: totalPages }, (_, i) => i + 1).map((page) => (\n                      <Button\n                        key={page}\n                        variant={currentPage === page ? 'default' : 'outline'}\n                        size=\"sm\"\n                        onClick={() => setCurrentPage(page)}\n                        className={`w-8 ${isDarkMode && currentPage !== page ? 'border-gray-700' : ''}`}\n                      >\n                        {page}\n                      </Button>\n                    ))}\n                  </div>\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => setCurrentPage(prev => Math.min(totalPages, prev + 1))}\n                    disabled={currentPage === totalPages}\n                    className={isDarkMode ? 'border-gray-700' : ''}\n                  >\n                    Next\n                  </Button>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 md:gap-6 mt-8\">\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Recent Activity</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4 max-h-[400px] overflow-y-auto pr-2\">\n                {mockActivityData.map((activity, index) => {\n                  const getIcon = () => {\n                    switch (activity.icon) {\n                      case 'sale':\n                        return <DollarSign className=\"h-4 w-4 text-green-500\" />;\n                      case 'user':\n                        return <Users className=\"h-4 w-4 text-blue-500\" />;\n                      case 'success':\n                        return <CheckCircle className=\"h-4 w-4 text-green-500\" />;\n                      case 'warning':\n                        return <AlertCircle className=\"h-4 w-4 text-yellow-500\" />;\n                      default:\n                        return <ShoppingCart className=\"h-4 w-4 text-purple-500\" />;\n                    }\n                  };\n\n                  return (\n                    <motion.div\n                      key={activity.id}\n                      initial={{ opacity: 0, x: -20 }}\n                      animate={{ opacity: 1, x: 0 }}\n                      transition={{ delay: index * 0.05 }}\n                      className={`flex items-start gap-3 p-3 rounded-lg ${\n                        isDarkMode ? 'bg-gray-700/50 hover:bg-gray-700' : 'bg-gray-50 hover:bg-gray-100'\n                      } transition-colors`}\n                    >\n                      <div className={`p-2 rounded-full ${\n                        isDarkMode ? 'bg-gray-600' : 'bg-white'\n                      }`}>\n                        {getIcon()}\n                      </div>\n                      <div className=\"flex-1 min-w-0\">\n                        <p className={`text-sm ${isDarkMode ? 'text-gray-200' : 'text-gray-900'}`}>\n                          {activity.message}\n                        </p>\n                        <div className=\"flex items-center gap-1 mt-1\">\n                          <Clock className={`h-3 w-3 ${isDarkMode ? 'text-gray-500' : 'text-gray-400'}`} />\n                          <span className={`text-xs ${isDarkMode ? 'text-gray-500' : 'text-gray-500'}`}>\n                            {activity.timestamp}\n                          </span>\n                        </div>\n                      </div>\n                    </motion.div>\n                  );\n                })}\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Quick Stats</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {mockQuickStats.map((stat, index) => (\n                  <motion.div\n                    key={stat.id}\n                    initial={{ opacity: 0, x: -20 }}\n                    animate={{ opacity: 1, x: 0 }}\n                    transition={{ delay: index * 0.1 }}\n                    className={`p-4 rounded-lg border ${\n                      isDarkMode ? 'bg-gray-700/50 border-gray-600' : 'bg-gray-50 border-gray-200'\n                    }`}\n                  >\n                    <div className=\"flex items-center justify-between mb-2\">\n                      <div className=\"flex items-center gap-2\">\n                        <div className={`${stat.color}`}>\n                          {stat.icon}\n                        </div>\n                        <span className={`text-sm font-medium ${\n                          isDarkMode ? 'text-gray-300' : 'text-gray-700'\n                        }`}>\n                          {stat.label}\n                        </span>\n                      </div>\n                      <span className={`text-xs ${\n                        isDarkMode ? 'text-gray-400' : 'text-gray-500'\n                      }`}>\n                        {stat.percentage}%\n                      </span>\n                    </div>\n                    \n                    <div className=\"mb-2\">\n                      <Progress \n                        value={stat.percentage} \n                        className={`h-2 ${isDarkMode ? 'bg-gray-600' : 'bg-gray-200'}`}\n                      />\n                    </div>\n                    \n                    <div className=\"flex items-center justify-between\">\n                      <span className={`text-lg font-bold ${\n                        isDarkMode ? 'text-white' : 'text-gray-900'\n                      }`}>\n                        {stat.value}\n                      </span>\n                      <span className={`text-xs ${\n                        isDarkMode ? 'text-gray-500' : 'text-gray-400'\n                      }`}>\n                        of {stat.target}\n                      </span>\n                    </div>\n                  </motion.div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Alerts</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-3\">\n                {mockAlerts.map((alert) => {\n                  const severityConfig = {\n                    info: { icon: Info, color: isDarkMode ? 'text-blue-400' : 'text-blue-600', bg: isDarkMode ? 'bg-blue-900/30' : 'bg-blue-50' },\n                    warning: { icon: AlertTriangle, color: isDarkMode ? 'text-yellow-400' : 'text-yellow-600', bg: isDarkMode ? 'bg-yellow-900/30' : 'bg-yellow-50' },\n                    error: { icon: AlertCircle, color: isDarkMode ? 'text-red-400' : 'text-red-600', bg: isDarkMode ? 'bg-red-900/30' : 'bg-red-50' },\n                    success: { icon: CheckCircle, color: isDarkMode ? 'text-green-400' : 'text-green-600', bg: isDarkMode ? 'bg-green-900/30' : 'bg-green-50' }\n                  };\n\n                  const config = severityConfig[alert.severity];\n                  const Icon = config.icon;\n\n                  return (\n                    <motion.div\n                      key={alert.id}\n                      initial={{ opacity: 0, x: -20 }}\n                      animate={{ opacity: 1, x: 0 }}\n                      transition={{ duration: 0.3 }}\n                      className={`flex items-start gap-3 p-3 rounded-lg ${config.bg} border ${isDarkMode ? 'border-gray-700' : 'border-gray-200'}`}\n                    >\n                      <Icon className={`h-5 w-5 mt-0.5 flex-shrink-0 ${config.color}`} />\n                      <div className=\"flex-1 min-w-0\">\n                        <p className={`text-sm ${isDarkMode ? 'text-gray-200' : 'text-gray-900'}`}>\n                          {alert.message}\n                        </p>\n                        <p className={`text-xs mt-1 ${isDarkMode ? 'text-gray-500' : 'text-gray-500'}`}>\n                          {alert.timestamp}\n                        </p>\n                      </div>\n                    </motion.div>\n                  );\n                })}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}",
  "error": null,
  "overall_score": 57,
  "code_quality_score": 14,
  "architecture_score": 12,
  "performance_score": 16,
  "accessibility_score": 15,
  "metadata": {
    "document_id": "eval_room_b152477626d2",
    "prompt_category": "intermediate",
    "prompt_complexity": 6.0
  },
  "raw_response": {
    "document_id": "eval_room_b152477626d2",
    "mode": "parallel",
    "prompt": "Generate an analytics dashboard page with charts, data tables, real-time updates, dark mode, and responsive design",
    "content": "\nimport { useState, useCallback } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Moon, Sun, RefreshCw } from 'lucide-react';\nimport { Badge } from '@/components/ui/badge';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\nimport { ChevronUp, ChevronDown, ChevronsUpDown } from 'lucide-react';\nimport { AlertCircle, AlertTriangle, Info, CheckCircle } from 'lucide-react';\nimport { TrendingUp, TrendingDown, DollarSign, Users, ShoppingCart, CheckCircle, AlertCircle, Clock } from 'lucide-react';\nimport { AreaChart, Area, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';\nimport { motion } from 'framer-motion';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\n\nimport { motion } from 'framer-motion';\nimport { Progress } from '@/components/ui/progress';\nimport { TrendingUp, TrendingDown, DollarSign, Users, ShoppingCart, Target } from 'lucide-react';\nimport { motion } from 'framer-motion';\n\ninterface MetricData {\n  id: string;\n  label: string;\n  value: number;\n  change: number;\n  trend: 'up' | 'down';\n}\n\ninterface ChartDataPoint {\n  date: string;\n  revenue: number;\n  users: number;\n  orders: number;\n}\n\ninterface TableRow {\n  id: string;\n  product: string;\n  sales: number;\n  revenue: number;\n  status: 'active' | 'pending' | 'inactive';\n}\n\nconst mockMetrics: MetricData[] = [\n  { id: '1', label: 'Total Revenue', value: 45231, change: 12.5, trend: 'up' },\n  { id: '2', label: 'Active Users', value: 2350, change: 8.2, trend: 'up' },\n  { id: '3', label: 'Total Orders', value: 1543, change: -3.1, trend: 'down' },\n  { id: '4', label: 'Conversion Rate', value: 3.24, change: 5.7, trend: 'up' }\n];\n\nconst mockChartData: ChartDataPoint[] = [\n  { date: '2024-01-01', revenue: 12000, users: 450, orders: 230 },\n  { date: '2024-01-02', revenue: 15000, users: 520, orders: 280 },\n  { date: '2024-01-03', revenue: 13500, users: 490, orders: 250 },\n  { date: '2024-01-04', revenue: 18000, users: 610, orders: 320 },\n  { date: '2024-01-05', revenue: 16500, users: 580, orders: 295 },\n  { date: '2024-01-06', revenue: 20000, users: 680, orders: 350 },\n  { date: '2024-01-07', revenue: 22000, users: 720, orders: 380 }\n];\n\nconst mockTableData: TableRow[] = [\n  { id: '1', product: 'Premium Plan', sales: 234, revenue: 23400, status: 'active' },\n  { id: '2', product: 'Basic Plan', sales: 567, revenue: 11340, status: 'active' },\n  { id: '3', product: 'Enterprise Plan', sales: 89, revenue: 44500, status: 'active' },\n  { id: '4', product: 'Starter Plan', sales: 432, revenue: 4320, status: 'pending' },\n  { id: '5', product: 'Pro Plan', sales: 156, revenue: 15600, status: 'inactive' }\n];\ninterface Alert {\n  id: string;\n  message: string;\n  severity: 'info' | 'warning' | 'error' | 'success';\n  timestamp: string;\n}\n\nconst mockAlerts: Alert[] = [\n  { id: '1', message: 'Server response time increased by 15%', severity: 'warning', timestamp: '2 min ago' },\n  { id: '2', message: 'New user milestone reached: 2,500 users', severity: 'success', timestamp: '15 min ago' },\n  { id: '3', message: 'Payment gateway experiencing delays', severity: 'error', timestamp: '1 hour ago' },\n  { id: '4', message: 'Scheduled maintenance on Jan 15', severity: 'info', timestamp: '3 hours ago' },\n  { id: '5', message: 'High traffic detected on checkout page', severity: 'warning', timestamp: '5 hours ago' }\n];\ninterface QuickStat {\n  id: string;\n  label: string;\n  value: string;\n  target: string;\n  percentage: number;\n  icon: React.ReactNode;\n  color: string;\n}\n\nconst mockQuickStats: QuickStat[] = [\n  {\n    id: '1',\n    label: 'Monthly Goal',\n    value: '$45,231',\n    target: '$50,000',\n    percentage: 90,\n    icon: <Target className=\"h-4 w-4\" />,\n    color: 'text-blue-500'\n  },\n  {\n    id: '2',\n    label: 'User Growth',\n    value: '2,350',\n    target: '3,000',\n    percentage: 78,\n    icon: <Users className=\"h-4 w-4\" />,\n    color: 'text-green-500'\n  },\n  {\n    id: '3',\n    label: 'Order Target',\n    value: '1,543',\n    target: '2,000',\n    percentage: 77,\n    icon: <ShoppingCart className=\"h-4 w-4\" />,\n    color: 'text-purple-500'\n  },\n  {\n    id: '4',\n    label: 'Revenue Target',\n    value: '$89,400',\n    target: '$100,000',\n    percentage: 89,\n    icon: <DollarSign className=\"h-4 w-4\" />,\n    color: 'text-orange-500'\n  }\n];\ninterface ActivityItem {\n  id: string;\n  type: 'sale' | 'user' | 'order' | 'alert';\n  message: string;\n  timestamp: string;\n  icon: 'sale' | 'user' | 'order' | 'success' | 'warning';\n}\n\nconst mockActivityData: ActivityItem[] = [\n  { id: '1', type: 'sale', message: 'New sale: Premium Plan purchased', timestamp: '2 minutes ago', icon: 'sale' },\n  { id: '2', type: 'user', message: 'New user registration from US', timestamp: '5 minutes ago', icon: 'user' },\n  { id: '3', type: 'order', message: 'Order #1234 completed successfully', timestamp: '12 minutes ago', icon: 'success' },\n  { id: '4', type: 'sale', message: 'Enterprise Plan upgraded', timestamp: '18 minutes ago', icon: 'sale' },\n  { id: '5', type: 'alert', message: 'Server response time increased', timestamp: '25 minutes ago', icon: 'warning' },\n  { id: '6', type: 'user', message: '10 new users joined today', timestamp: '32 minutes ago', icon: 'user' },\n  { id: '7', type: 'order', message: 'Order #1233 shipped', timestamp: '45 minutes ago', icon: 'success' },\n  { id: '8', type: 'sale', message: 'Pro Plan subscription renewed', timestamp: '1 hour ago', icon: 'sale' }\n];\nconst mockPieData = [\n  { category: 'Premium Plan', value: 23400, color: '#3b82f6' },\n  { category: 'Enterprise Plan', value: 44500, color: '#8b5cf6' },\n  { category: 'Pro Plan', value: 15600, color: '#10b981' },\n  { category: 'Basic Plan', value: 11340, color: '#f59e0b' },\n  { category: 'Starter Plan', value: 4320, color: '#ef4444' }\n];\n\nconst PieChart = ({ data, isDarkMode }: { data: typeof mockPieData, isDarkMode: boolean }) => {\n  const total = data.reduce((sum, item) => sum + item.value, 0);\n  let currentAngle = -90;\n\n  const createArc = (startAngle: number, endAngle: number, radius: number) => {\n    const start = polarToCartesian(50, 50, radius, endAngle);\n    const end = polarToCartesian(50, 50, radius, startAngle);\n    const largeArcFlag = endAngle - startAngle <= 180 ? '0' : '1';\n    return [\n      'M', 50, 50,\n      'L', start.x, start.y,\n      'A', radius, radius, 0, largeArcFlag, 0, end.x, end.y,\n      'Z'\n    ].join(' ');\n  };\n\n  const polarToCartesian = (centerX: number, centerY: number, radius: number, angleInDegrees: number) => {\n    const angleInRadians = (angleInDegrees * Math.PI) / 180.0;\n    return {\n      x: centerX + radius * Math.cos(angleInRadians),\n      y: centerY + radius * Math.sin(angleInRadians)\n    };\n  };\n\n  return (\n    <div className=\"flex flex-col items-center\">\n      <svg viewBox=\"0 0 100 100\" className=\"w-full max-w-[240px] mb-6\">\n        {data.map((item, index) => {\n          const percentage = (item.value / total) * 100;\n          const angle = (percentage / 100) * 360;\n          const startAngle = currentAngle;\n          const endAngle = currentAngle + angle;\n          currentAngle = endAngle;\n\n          return (\n            <motion.path\n              key={item.category}\n              d={createArc(startAngle, endAngle, 45)}\n              fill={item.color}\n              initial={{ opacity: 0, scale: 0 }}\n              animate={{ opacity: 1, scale: 1 }}\n              transition={{ duration: 0.5, delay: index * 0.1 }}\n              className=\"hover:opacity-80 transition-opacity cursor-pointer\"\n            />\n          );\n        })}\n        <circle cx=\"50\" cy=\"50\" r=\"20\" fill={isDarkMode ? '#1f2937' : '#ffffff'} />\n      </svg>\n\n      <div className=\"w-full space-y-3\">\n        {data.map((item, index) => {\n          const percentage = ((item.value / total) * 100).toFixed(1);\n          return (\n            <motion.div\n              key={item.category}\n              initial={{ opacity: 0, x: -20 }}\n              animate={{ opacity: 1, x: 0 }}\n              transition={{ duration: 0.3, delay: index * 0.1 }}\n              className=\"flex items-center justify-between\"\n            >\n              <div className=\"flex items-center gap-2\">\n                <div\n                  className=\"w-3 h-3 rounded-full\"\n                  style={{ backgroundColor: item.color }}\n                />\n                <span className={`text-sm ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>\n                  {item.category}\n                </span>\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <span className={`text-sm font-medium ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                  ${item.value.toLocaleString()}\n                </span>\n                <span className={`text-xs ${isDarkMode ? 'text-gray-500' : 'text-gray-500'}`}>\n                  ({percentage}%)\n                </span>\n              </div>\n            </motion.div>\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nconst RevenueChart = ({ data, isDarkMode }: { data: ChartDataPoint[], isDarkMode: boolean }) => {\n  const [hoveredPoint, setHoveredPoint] = useState<number | null>(null);\n  \n  const maxRevenue = Math.max(...data.map(d => d.revenue));\n  const minRevenue = Math.min(...data.map(d => d.revenue));\n  const revenueRange = maxRevenue - minRevenue;\n  \n  const chartWidth = 100;\n  const chartHeight = 200;\n  const padding = 20;\n  \n  const points = data.map((point, index) => {\n    const x = (index / (data.length - 1)) * (chartWidth - padding * 2) + padding;\n    const y = chartHeight - ((point.revenue - minRevenue) / revenueRange) * (chartHeight - padding * 2) - padding;\n    return { x, y, ...point };\n  });\n  \n  const pathD = points.map((point, index) => \n    `${index === 0 ? 'M' : 'L'} ${point.x} ${point.y}`\n  ).join(' ');\n  \n  const areaPathD = `${pathD} L ${points[points.length - 1].x} ${chartHeight} L ${points[0].x} ${chartHeight} Z`;\n  \n  return (\n    <div className=\"relative w-full h-64\">\n      <svg \n        viewBox={`0 0 ${chartWidth} ${chartHeight}`} \n        className=\"w-full h-full\"\n        preserveAspectRatio=\"none\"\n      >\n        <defs>\n          <linearGradient id=\"revenueGradient\" x1=\"0%\" y1=\"0%\" x2=\"0%\" y2=\"100%\">\n            <stop offset=\"0%\" stopColor={isDarkMode ? \"#3b82f6\" : \"#2563eb\"} stopOpacity=\"0.3\" />\n            <stop offset=\"100%\" stopColor={isDarkMode ? \"#3b82f6\" : \"#2563eb\"} stopOpacity=\"0.05\" />\n          </linearGradient>\n        </defs>\n        \n        <motion.path\n          d={areaPathD}\n          fill=\"url(#revenueGradient)\"\n          initial={{ opacity: 0 }}\n          animate={{ opacity: 1 }}\n          transition={{ duration: 0.5 }}\n        />\n        \n        <motion.path\n          d={pathD}\n          fill=\"none\"\n          stroke={isDarkMode ? \"#3b82f6\" : \"#2563eb\"}\n          strokeWidth=\"0.5\"\n          strokeLinecap=\"round\"\n          strokeLinejoin=\"round\"\n          initial={{ pathLength: 0 }}\n          animate={{ pathLength: 1 }}\n          transition={{ duration: 1, ease: \"easeInOut\" }}\n        />\n        \n        {points.map((point, index) => (\n          <g key={index}>\n            <motion.circle\n              cx={point.x}\n              cy={point.y}\n              r={hoveredPoint === index ? \"1.5\" : \"1\"}\n              fill={isDarkMode ? \"#3b82f6\" : \"#2563eb\"}\n              initial={{ scale: 0 }}\n              animate={{ scale: 1 }}\n              transition={{ delay: index * 0.1, duration: 0.3 }}\n              onMouseEnter={() => setHoveredPoint(index)}\n              onMouseLeave={() => setHoveredPoint(null)}\n              className=\"cursor-pointer\"\n              style={{ transformOrigin: `${point.x}px ${point.y}px` }}\n            />\n          </g>\n        ))}\n      </svg>\n      \n      <div className=\"absolute inset-0 pointer-events-none\">\n        {points.map((point, index) => (\n          <div\n            key={index}\n            className=\"absolute pointer-events-auto\"\n            style={{\n              left: `${(point.x / chartWidth) * 100}%`,\n              top: `${(point.y / chartHeight) * 100}%`,\n              transform: 'translate(-50%, -50%)'\n            }}\n            onMouseEnter={() => setHoveredPoint(index)}\n            onMouseLeave={() => setHoveredPoint(null)}\n          >\n            <div className=\"w-8 h-8 cursor-pointer\" />\n            {hoveredPoint === index && (\n              <motion.div\n                initial={{ opacity: 0, y: 10 }}\n                animate={{ opacity: 1, y: 0 }}\n                className={`absolute bottom-full mb-2 left-1/2 -translate-x-1/2 px-3 py-2 rounded-lg shadow-lg whitespace-nowrap z-10 ${\n                  isDarkMode ? 'bg-gray-700 text-white' : 'bg-white text-gray-900'\n                }`}\n                style={{ pointerEvents: 'none' }}\n              >\n                <div className=\"text-xs font-semibold\">\n                  {new Date(point.date).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n                </div>\n                <div className=\"text-sm font-bold text-blue-500\">\n                  ${point.revenue.toLocaleString()}\n                </div>\n                <div className={`absolute bottom-0 left-1/2 -translate-x-1/2 translate-y-full w-0 h-0 border-l-4 border-r-4 border-t-4 border-transparent ${\n                  isDarkMode ? 'border-t-gray-700' : 'border-t-white'\n                }`} />\n              </motion.div>\n            )}\n          </div>\n        ))}\n      </div>\n      \n      <div className=\"absolute bottom-0 left-0 right-0 flex justify-between px-4 text-xs\">\n        {data.map((point, index) => (\n          index % Math.ceil(data.length / 4) === 0 && (\n            <span key={index} className={isDarkMode ? 'text-gray-400' : 'text-gray-600'}>\n              {new Date(point.date).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n            </span>\n          )\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default function AnalyticsDashboard() {\n\n  const [isDarkMode, setIsDarkMode] = useState(false);\n  const [metrics, setMetrics] = useState<MetricData[]>(mockMetrics);\n  const [chartData, setChartData] = useState<ChartDataPoint[]>(mockChartData);\n  const [tableData, setTableData] = useState<TableRow[]>(mockTableData);\n  const [isRefreshing, setIsRefreshing] = useState(false);\n  const [sortColumn, setSortColumn] = useState<keyof TableRow | null>(null);\n  const [sortDirection, setSortDirection] = useState<'asc' | 'desc'>('asc');\n  const [currentPage, setCurrentPage] = useState(1);\n  const itemsPerPage = 3;\n\n  const handleSort = useCallback((column: keyof TableRow) => {\n    if (sortColumn === column) {\n      setSortDirection(prev => prev === 'asc' ? 'desc' : 'asc');\n    } else {\n      setSortColumn(column);\n      setSortDirection('asc');\n    }\n  }, [sortColumn]);\n\n  const sortedTableData = useCallback(() => {\n    if (!sortColumn) return tableData;\n    \n    return [...tableData].sort((a, b) => {\n      const aValue = a[sortColumn];\n      const bValue = b[sortColumn];\n      \n      if (typeof aValue === 'number' && typeof bValue === 'number') {\n        return sortDirection === 'asc' ? aValue - bValue : bValue - aValue;\n      }\n      \n      if (typeof aValue === 'string' && typeof bValue === 'string') {\n        return sortDirection === 'asc' \n          ? aValue.localeCompare(bValue)\n          : bValue.localeCompare(aValue);\n      }\n      \n      return 0;\n    });\n  }, [tableData, sortColumn, sortDirection]);\n\n  const paginatedData = useCallback(() => {\n    const sorted = sortedTableData();\n    const startIndex = (currentPage - 1) * itemsPerPage;\n    return sorted.slice(startIndex, startIndex + itemsPerPage);\n  }, [sortedTableData, currentPage]);\n\n  const totalPages = Math.ceil(tableData.length / itemsPerPage);\n\n  const getStatusBadgeVariant = (status: TableRow['status']) => {\n    switch (status) {\n      case 'active':\n        return 'default';\n      case 'pending':\n        return 'secondary';\n      case 'inactive':\n        return 'outline';\n      default:\n        return 'default';\n    }\n  };\n\n  const SortIcon = ({ column }: { column: keyof TableRow }) => {\n    if (sortColumn !== column) {\n      return <ChevronsUpDown className=\"ml-2 h-4 w-4\" />;\n    }\n    return sortDirection === 'asc' \n      ? <ChevronUp className=\"ml-2 h-4 w-4\" />\n      : <ChevronDown className=\"ml-2 h-4 w-4\" />;\n  };\n\n  const toggleDarkMode = useCallback(() => {\n    setIsDarkMode(prev => !prev);\n  }, []);\n\n  const formatChartData = useCallback((data: ChartDataPoint[]) => {\n    return data.map(point => ({\n      ...point,\n      date: new Date(point.date).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })\n    }));\n  }, []);\n\n  const formattedChartData = formatChartData(chartData);\n  const handleRefresh = useCallback(() => {\n    setIsRefreshing(true);\n    \n    setTimeout(() => {\n      // Generate updated mock metrics with random variations\n      const updatedMetrics = mockMetrics.map(metric => ({\n        ...metric,\n        value: metric.value + Math.floor(Math.random() * 200 - 100),\n        change: parseFloat((Math.random() * 20 - 5).toFixed(1)),\n        trend: Math.random() > 0.5 ? 'up' as const : 'down' as const\n      }));\n\n      // Generate updated chart data with random variations\n      const updatedChartData = mockChartData.map(point => ({\n        ...point,\n        revenue: point.revenue + Math.floor(Math.random() * 4000 - 2000),\n        users: point.users + Math.floor(Math.random() * 100 - 50),\n        orders: point.orders + Math.floor(Math.random() * 50 - 25)\n      }));\n\n      // Generate updated table data with random variations\n      const updatedTableData = mockTableData.map(row => ({\n        ...row,\n        sales: row.sales + Math.floor(Math.random() * 40 - 20),\n        revenue: row.revenue + Math.floor(Math.random() * 2000 - 1000)\n      }));\n\n      setMetrics(updatedMetrics);\n      setChartData(updatedChartData);\n      setTableData(updatedTableData);\n      setIsRefreshing(false);\n    }, 1500);</parameter>\n\n  }, []);\n\n  return (\n    <div className={`min-h-screen ${isDarkMode ? 'dark bg-gray-900' : 'bg-gray-50'}`}>\n      <div className=\"container mx-auto p-4 md:p-6 lg:p-8\">\n        <div className=\"flex flex-col md:flex-row justify-between items-start md:items-center gap-4 mb-8\">\n          <div>\n            <h1 className={`text-3xl md:text-4xl font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n              Analytics Dashboard\n            </h1>\n            <p className={`mt-2 ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n              Real-time insights and performance metrics\n            </p>\n          </div>\n          \n          <div className=\"flex gap-2\">\n            <Button\n              variant=\"outline\"\n              size=\"icon\"\n              onClick={toggleDarkMode}\n              className={isDarkMode ? 'border-gray-700' : ''}\n            >\n              {isDarkMode ? <Sun className=\"h-5 w-5\" /> : <Moon className=\"h-5 w-5\" />}\n            </Button>\n            \n            <Button\n              variant=\"outline\"\n              onClick={handleRefresh}\n              disabled={isRefreshing}\n              className={isDarkMode ? 'border-gray-700' : ''}\n            >\n              <RefreshCw className={`h-4 w-4 mr-2 ${isRefreshing ? 'animate-spin' : ''}`} />\n              Refresh\n            </Button>\n          </div>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 md:gap-6 mb-8\">\n          {metrics.map((metric, index) => {\n            const Icon = metric.label.includes('Revenue') ? DollarSign :\n                        metric.label.includes('Users') ? Users :\n                        metric.label.includes('Orders') ? ShoppingCart :\n                        Target;\n            \n            const TrendIcon = metric.trend === 'up' ? TrendingUp : TrendingDown;\n            \n            return (\n              <motion.div\n                key={metric.id}\n                initial={{ opacity: 0, y: 20 }}\n                animate={{ opacity: 1, y: 0 }}\n                transition={{ duration: 0.4, delay: index * 0.1 }}\n              >\n                <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n                  <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                    <CardTitle className={`text-sm font-medium ${isDarkMode ? 'text-gray-300' : 'text-gray-600'}`}>\n                      {metric.label}\n                    </CardTitle>\n                    <Icon className={`h-4 w-4 ${isDarkMode ? 'text-gray-400' : 'text-gray-500'}`} />\n                  </CardHeader>\n                  <CardContent>\n                    <div className={`text-2xl font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                      {metric.label.includes('Revenue') ? `$${metric.value.toLocaleString()}` :\n                       metric.label.includes('Rate') ? `${metric.value}%` :\n                       metric.value.toLocaleString()}\n                    </div>\n                    <div className=\"flex items-center mt-2\">\n                      <TrendIcon \n                        className={`h-4 w-4 mr-1 ${\n                          metric.trend === 'up' ? 'text-green-500' : 'text-red-500'\n                        }`} \n                      />\n                      <span className={`text-sm font-medium ${\n                        metric.trend === 'up' ? 'text-green-500' : 'text-red-500'\n                      }`}>\n                        {metric.change > 0 ? '+' : ''}{metric.change}%\n                      </span>\n                      <span className={`text-sm ml-2 ${isDarkMode ? 'text-gray-400' : 'text-gray-500'}`}>\n                        vs last period\n                      </span>\n                    </div>\n                  </CardContent>\n                </Card>\n              </motion.div>\n            );\n          })}\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-4 md:gap-6 mb-8\">\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Revenue Overview</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Daily revenue trends\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <RevenueChart data={chartData} isDarkMode={isDarkMode} />\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>User Activity</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Active users over time\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <ResponsiveContainer width=\"100%\" height={300}>\n                <AreaChart data={chartData}>\n                  <defs>\n                    <linearGradient id=\"userGradient\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                      <stop offset=\"5%\" stopColor=\"#8b5cf6\" stopOpacity={0.8}/>\n                      <stop offset=\"95%\" stopColor=\"#8b5cf6\" stopOpacity={0}/>\n                    </linearGradient>\n                  </defs>\n                  <CartesianGrid strokeDasharray=\"3 3\" stroke={isDarkMode ? '#374151' : '#e5e7eb'} />\n                  <XAxis \n                    dataKey=\"date\" \n                    stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                    tick={{ fill: isDarkMode ? '#9ca3af' : '#6b7280' }}\n                    tickFormatter={(value) => new Date(value).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n                  />\n                  <YAxis \n                    stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                    tick={{ fill: isDarkMode ? '#9ca3af' : '#6b7280' }}\n                  />\n                  <Tooltip \n                    contentStyle={{\n                      backgroundColor: isDarkMode ? '#1f2937' : '#ffffff',\n                      border: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\n                      borderRadius: '8px',\n                      color: isDarkMode ? '#ffffff' : '#000000'\n                    }}\n                    labelFormatter={(value) => new Date(value).toLocaleDateString('en-US', { month: 'long', day: 'numeric', year: 'numeric' })}\n                  />\n                  <Area \n                    type=\"monotone\" \n                    dataKey=\"users\" \n                    stroke=\"#8b5cf6\" \n                    strokeWidth={2}\n                    fillOpacity={1} \n                    fill=\"url(#userGradient)\"\n                    animationDuration={1000}\n                    animationEasing=\"ease-in-out\"\n                  />\n                </AreaChart>\n              </ResponsiveContainer>\n            </CardContent>\n          </Card>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-4 md:gap-6 mb-8\">\n          <Card className={`lg:col-span-2 ${isDarkMode ? 'bg-gray-800 border-gray-700' : ''}`}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Performance Metrics</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Combined view of key metrics\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"h-[300px] w-full\">\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <LineChart data={formattedChartData}>\n                    <CartesianGrid \n                      strokeDasharray=\"3 3\" \n                      stroke={isDarkMode ? '#374151' : '#e5e7eb'} \n                    />\n                    <XAxis \n                      dataKey=\"date\" \n                      stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                      style={{ fontSize: '12px' }}\n                    />\n                    <YAxis \n                      stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                      style={{ fontSize: '12px' }}\n                    />\n                    <Tooltip \n                      contentStyle={{\n                        backgroundColor: isDarkMode ? '#1f2937' : '#ffffff',\n                        border: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\n                        borderRadius: '6px',\n                        color: isDarkMode ? '#ffffff' : '#000000'\n                      }}\n                      formatter={(value: number, name: string) => {\n                        if (name === 'revenue') return [`$${value.toLocaleString()}`, 'Revenue'];\n                        if (name === 'users') return [value.toLocaleString(), 'Users'];\n                        if (name === 'orders') return [value.toLocaleString(), 'Orders'];\n                        return [value, name];\n                      }}\n                    />\n                    <Legend \n                      wrapperStyle={{\n                        paddingTop: '20px',\n                        fontSize: '14px'\n                      }}\n                      formatter={(value) => {\n                        if (value === 'revenue') return 'Revenue';\n                        if (value === 'users') return 'Users';\n                        if (value === 'orders') return 'Orders';\n                        return value;\n                      }}\n                    />\n                    <Line \n                      type=\"monotone\" \n                      dataKey=\"revenue\" \n                      stroke=\"#3b82f6\" \n                      strokeWidth={2}\n                      dot={{ fill: '#3b82f6', r: 4 }}\n                      activeDot={{ r: 6 }}\n                    />\n                    <Line \n                      type=\"monotone\" \n                      dataKey=\"users\" \n                      stroke=\"#10b981\" \n                      strokeWidth={2}\n                      dot={{ fill: '#10b981', r: 4 }}\n                      activeDot={{ r: 6 }}\n                    />\n                    <Line \n                      type=\"monotone\" \n                      dataKey=\"orders\" \n                      stroke=\"#f59e0b\" \n                      strokeWidth={2}\n                      dot={{ fill: '#f59e0b', r: 4 }}\n                      activeDot={{ r: 6 }}\n                    />\n                  </LineChart>\n                </ResponsiveContainer>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Distribution</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Sales by category\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <PieChart data={mockPieData} isDarkMode={isDarkMode} />\n            </CardContent>\n          </Card>\n        </div>\n\n        <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n          <CardHeader>\n            <CardTitle className={isDarkMode ? 'text-white' : ''}>Top Products</CardTitle>\n            <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n              Best performing products by revenue\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              <div className=\"rounded-md border\">\n                <Table>\n                  <TableHeader>\n                    <TableRow className={isDarkMode ? 'border-gray-700' : ''}>\n                      <TableHead className={isDarkMode ? 'text-gray-300' : ''}>\n                        <Button\n                          variant=\"ghost\"\n                          onClick={() => handleSort('product')}\n                          className=\"h-8 px-2 lg:px-3\"\n                        >\n                          Product\n                          <SortIcon column=\"product\" />\n                        </Button>\n                      </TableHead>\n                      <TableHead className={isDarkMode ? 'text-gray-300' : ''}>\n                        <Button\n                          variant=\"ghost\"\n                          onClick={() => handleSort('sales')}\n                          className=\"h-8 px-2 lg:px-3\"\n                        >\n                          Sales\n                          <SortIcon column=\"sales\" />\n                        </Button>\n                      </TableHead>\n                      <TableHead className={isDarkMode ? 'text-gray-300' : ''}>\n                        <Button\n                          variant=\"ghost\"\n                          onClick={() => handleSort('revenue')}\n                          className=\"h-8 px-2 lg:px-3\"\n                        >\n                          Revenue\n                          <SortIcon column=\"revenue\" />\n                        </Button>\n                      </TableHead>\n                      <TableHead className={isDarkMode ? 'text-gray-300' : ''}>\n                        <Button\n                          variant=\"ghost\"\n                          onClick={() => handleSort('status')}\n                          className=\"h-8 px-2 lg:px-3\"\n                        >\n                          Status\n                          <SortIcon column=\"status\" />\n                        </Button>\n                      </TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {paginatedData().map((row) => (\n                      <TableRow \n                        key={row.id}\n                        className={isDarkMode ? 'border-gray-700 hover:bg-gray-700/50' : ''}\n                      >\n                        <TableCell className={`font-medium ${isDarkMode ? 'text-gray-200' : ''}`}>\n                          {row.product}\n                        </TableCell>\n                        <TableCell className={isDarkMode ? 'text-gray-300' : ''}>\n                          {row.sales.toLocaleString()}\n                        </TableCell>\n                        <TableCell className={isDarkMode ? 'text-gray-300' : ''}>\n                          ${row.revenue.toLocaleString()}\n                        </TableCell>\n                        <TableCell>\n                          <Badge \n                            variant={getStatusBadgeVariant(row.status)}\n                            className=\"capitalize\"\n                          >\n                            {row.status}\n                          </Badge>\n                        </TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              </div>\n\n              <div className=\"flex items-center justify-between\">\n                <p className={`text-sm ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                  Showing {((currentPage - 1) * itemsPerPage) + 1} to {Math.min(currentPage * itemsPerPage, tableData.length)} of {tableData.length} products\n                </p>\n                <div className=\"flex gap-2\">\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => setCurrentPage(prev => Math.max(1, prev - 1))}\n                    disabled={currentPage === 1}\n                    className={isDarkMode ? 'border-gray-700' : ''}\n                  >\n                    Previous\n                  </Button>\n                  <div className=\"flex items-center gap-1\">\n                    {Array.from({ length: totalPages }, (_, i) => i + 1).map((page) => (\n                      <Button\n                        key={page}\n                        variant={currentPage === page ? 'default' : 'outline'}\n                        size=\"sm\"\n                        onClick={() => setCurrentPage(page)}\n                        className={`w-8 ${isDarkMode && currentPage !== page ? 'border-gray-700' : ''}`}\n                      >\n                        {page}\n                      </Button>\n                    ))}\n                  </div>\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => setCurrentPage(prev => Math.min(totalPages, prev + 1))}\n                    disabled={currentPage === totalPages}\n                    className={isDarkMode ? 'border-gray-700' : ''}\n                  >\n                    Next\n                  </Button>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 md:gap-6 mt-8\">\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Recent Activity</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4 max-h-[400px] overflow-y-auto pr-2\">\n                {mockActivityData.map((activity, index) => {\n                  const getIcon = () => {\n                    switch (activity.icon) {\n                      case 'sale':\n                        return <DollarSign className=\"h-4 w-4 text-green-500\" />;\n                      case 'user':\n                        return <Users className=\"h-4 w-4 text-blue-500\" />;\n                      case 'success':\n                        return <CheckCircle className=\"h-4 w-4 text-green-500\" />;\n                      case 'warning':\n                        return <AlertCircle className=\"h-4 w-4 text-yellow-500\" />;\n                      default:\n                        return <ShoppingCart className=\"h-4 w-4 text-purple-500\" />;\n                    }\n                  };\n\n                  return (\n                    <motion.div\n                      key={activity.id}\n                      initial={{ opacity: 0, x: -20 }}\n                      animate={{ opacity: 1, x: 0 }}\n                      transition={{ delay: index * 0.05 }}\n                      className={`flex items-start gap-3 p-3 rounded-lg ${\n                        isDarkMode ? 'bg-gray-700/50 hover:bg-gray-700' : 'bg-gray-50 hover:bg-gray-100'\n                      } transition-colors`}\n                    >\n                      <div className={`p-2 rounded-full ${\n                        isDarkMode ? 'bg-gray-600' : 'bg-white'\n                      }`}>\n                        {getIcon()}\n                      </div>\n                      <div className=\"flex-1 min-w-0\">\n                        <p className={`text-sm ${isDarkMode ? 'text-gray-200' : 'text-gray-900'}`}>\n                          {activity.message}\n                        </p>\n                        <div className=\"flex items-center gap-1 mt-1\">\n                          <Clock className={`h-3 w-3 ${isDarkMode ? 'text-gray-500' : 'text-gray-400'}`} />\n                          <span className={`text-xs ${isDarkMode ? 'text-gray-500' : 'text-gray-500'}`}>\n                            {activity.timestamp}\n                          </span>\n                        </div>\n                      </div>\n                    </motion.div>\n                  );\n                })}\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Quick Stats</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {mockQuickStats.map((stat, index) => (\n                  <motion.div\n                    key={stat.id}\n                    initial={{ opacity: 0, x: -20 }}\n                    animate={{ opacity: 1, x: 0 }}\n                    transition={{ delay: index * 0.1 }}\n                    className={`p-4 rounded-lg border ${\n                      isDarkMode ? 'bg-gray-700/50 border-gray-600' : 'bg-gray-50 border-gray-200'\n                    }`}\n                  >\n                    <div className=\"flex items-center justify-between mb-2\">\n                      <div className=\"flex items-center gap-2\">\n                        <div className={`${stat.color}`}>\n                          {stat.icon}\n                        </div>\n                        <span className={`text-sm font-medium ${\n                          isDarkMode ? 'text-gray-300' : 'text-gray-700'\n                        }`}>\n                          {stat.label}\n                        </span>\n                      </div>\n                      <span className={`text-xs ${\n                        isDarkMode ? 'text-gray-400' : 'text-gray-500'\n                      }`}>\n                        {stat.percentage}%\n                      </span>\n                    </div>\n                    \n                    <div className=\"mb-2\">\n                      <Progress \n                        value={stat.percentage} \n                        className={`h-2 ${isDarkMode ? 'bg-gray-600' : 'bg-gray-200'}`}\n                      />\n                    </div>\n                    \n                    <div className=\"flex items-center justify-between\">\n                      <span className={`text-lg font-bold ${\n                        isDarkMode ? 'text-white' : 'text-gray-900'\n                      }`}>\n                        {stat.value}\n                      </span>\n                      <span className={`text-xs ${\n                        isDarkMode ? 'text-gray-500' : 'text-gray-400'\n                      }`}>\n                        of {stat.target}\n                      </span>\n                    </div>\n                  </motion.div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Alerts</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-3\">\n                {mockAlerts.map((alert) => {\n                  const severityConfig = {\n                    info: { icon: Info, color: isDarkMode ? 'text-blue-400' : 'text-blue-600', bg: isDarkMode ? 'bg-blue-900/30' : 'bg-blue-50' },\n                    warning: { icon: AlertTriangle, color: isDarkMode ? 'text-yellow-400' : 'text-yellow-600', bg: isDarkMode ? 'bg-yellow-900/30' : 'bg-yellow-50' },\n                    error: { icon: AlertCircle, color: isDarkMode ? 'text-red-400' : 'text-red-600', bg: isDarkMode ? 'bg-red-900/30' : 'bg-red-50' },\n                    success: { icon: CheckCircle, color: isDarkMode ? 'text-green-400' : 'text-green-600', bg: isDarkMode ? 'bg-green-900/30' : 'bg-green-50' }\n                  };\n\n                  const config = severityConfig[alert.severity];\n                  const Icon = config.icon;\n\n                  return (\n                    <motion.div\n                      key={alert.id}\n                      initial={{ opacity: 0, x: -20 }}\n                      animate={{ opacity: 1, x: 0 }}\n                      transition={{ duration: 0.3 }}\n                      className={`flex items-start gap-3 p-3 rounded-lg ${config.bg} border ${isDarkMode ? 'border-gray-700' : 'border-gray-200'}`}\n                    >\n                      <Icon className={`h-5 w-5 mt-0.5 flex-shrink-0 ${config.color}`} />\n                      <div className=\"flex-1 min-w-0\">\n                        <p className={`text-sm ${isDarkMode ? 'text-gray-200' : 'text-gray-900'}`}>\n                          {alert.message}\n                        </p>\n                        <p className={`text-xs mt-1 ${isDarkMode ? 'text-gray-500' : 'text-gray-500'}`}>\n                          {alert.timestamp}\n                        </p>\n                      </div>\n                    </motion.div>\n                  );\n                })}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}",
    "error": null,
    "elapsed_time": 74.35957384109497,
    "success": true
  }
}