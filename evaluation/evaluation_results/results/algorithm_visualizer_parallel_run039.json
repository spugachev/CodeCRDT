{
  "prompt_id": "algorithm_visualizer",
  "prompt_name": "Algorithm Visualizer",
  "mode": "parallel",
  "run_number": 39,
  "timestamp": "2025-10-14T05:42:06.916896",
  "response_time": 99.39971685409546,
  "total_tokens": null,
  "response_content": "import { useState, useCallback } from 'react';\nimport { useEffect, useRef } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Slider } from '@/components/ui/slider';\nimport { Play, Pause, RotateCcw, Zap, BarChart3 } from 'lucide-react';\nimport { motion } from 'framer-motion';\n\ninterface ArrayElement {\n  value: number;\n  id: string;\n  isComparing?: boolean;\n  isSwapping?: boolean;\n  isSorted?: boolean;\n}\n\ninterface AlgorithmStep {\n  array: ArrayElement[];\n  comparingIndices: number[];\n  swappingIndices: number[];\n  sortedIndices: number[];\n}\n\ntype AlgorithmType = 'bubble' | 'quick' | 'merge' | 'insertion';\n\nconst NEON_COLORS = [\n  '#00ffff',\n  '#ff00ff', \n  '#00ff00',\n  '#ffff00',\n  '#ff0066',\n  '#00ffaa'\n];\n\nconst mockAlgorithms = [\n  { id: 'bubble', name: 'Bubble Sort', complexity: 'O(n\u00b2)' },\n  { id: 'quick', name: 'Quick Sort', complexity: 'O(n log n)' },\n  { id: 'merge', name: 'Merge Sort', complexity: 'O(n log n)' },\n  { id: 'insertion', name: 'Insertion Sort', complexity: 'O(n\u00b2)' }\n];\n\nconst useAnimationLoop = (\n  isPlaying: boolean,\n  steps: AlgorithmStep[],\n  currentStep: number,\n  speed: number[],\n  onStepComplete: () => void,\n  onAnimationEnd: () => void\n) => {\n  const [animationId, setAnimationId] = useState<NodeJS.Timeout | null>(null);\n\n  const cleanup = useCallback(() => {\n    if (animationId) {\n      clearTimeout(animationId);\n      setAnimationId(null);\n    }\n  }, [animationId]);\n\n  const animate = useCallback(() => {\n    if (currentStep < steps.length - 1) {\n      const delay = 1000 - speed[0] * 9.5; // Convert speed (0-100) to delay (1000ms-50ms)\n      const id = setTimeout(() => {\n        onStepComplete();\n      }, delay);\n      setAnimationId(id);\n    } else {\n      onAnimationEnd();\n    }\n  }, [currentStep, steps.length, speed, onStepComplete, onAnimationEnd]);\n\n  // Start/stop animation based on isPlaying\n  if (isPlaying && currentStep < steps.length - 1) {\n    animate();\n  } else if (!isPlaying) {\n    cleanup();\n  }\n\n  return cleanup;\n};\nexport default function AlgorithmVisualizer() {\n  const [array, setArray] = useState<ArrayElement[]>([]);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [speed, setSpeed] = useState([50]);\n  const [arraySize, setArraySize] = useState([20]);\n  const [selectedAlgorithm, setSelectedAlgorithm] = useState<AlgorithmType>('bubble');\n  const [currentStep, setCurrentStep] = useState(0);\n  const [steps, setSteps] = useState<AlgorithmStep[]>([]);\n  const animationRef = useRef<NodeJS.Timeout | null>(null);\n\n  // Effect to handle step-by-step animation\n  useEffect(() => {\n    if (isPlaying && steps.length > 0) {\n      if (currentStep >= steps.length - 1) {\n        setIsPlaying(false);\n        return;\n      }\n\n      const delay = 1000 - speed[0] * 9.5; // Convert speed slider (0-100) to delay (1000ms-50ms)\n      \n      animationRef.current = setTimeout(() => {\n        setCurrentStep((prev) => prev + 1);\n        \n        // Update array with current step data\n        if (steps[currentStep + 1]) {\n          setArray(steps[currentStep + 1].array);\n        }\n      }, delay);\n\n      return () => {\n        if (animationRef.current) {\n          clearTimeout(animationRef.current);\n        }\n      };\n    }\n  }, [isPlaying, currentStep, steps, speed]);\n\n  const generateRandomArray = useCallback(() => {\n    const newArray: ArrayElement[] = Array.from({ length: arraySize[0] }, (_, index) => ({\n      value: Math.floor(Math.random() * 100) + 5,\n      id: `element-${index}-${Date.now()}`,\n      isComparing: false,\n      isSwapping: false,\n      isSorted: false\n    }));\n    setArray(newArray);\n    setSteps([]);\n    setCurrentStep(0);\n    setIsPlaying(false);\n  }, [arraySize]);\n\n  const resetVisualization = useCallback(() => {\n\n    setIsPlaying(false);\n    setCurrentStep(0);\n    setSteps([]);\n    generateRandomArray();\n  }, [generateRandomArray]);\n\n  const startVisualization = useCallback(() => {\n    if (steps.length === 0) return;\n    if (currentStep >= steps.length - 1) return;\n    \n    setIsPlaying(true);\n    if (steps.length === 0) return;\n    if (currentStep >= steps.length - 1) return;\n    \n    setIsPlaying(true);\n    \n    // Animation will be handled by useEffect watching isPlaying state\n    const delay = 1000 - speed[0] * 9.5;\n    const intervalId = setInterval(() => {\n      setCurrentStep((prev) => {\n        if (prev >= steps.length - 1) {\n          setIsPlaying(false);\n          clearInterval(intervalId);\n          return prev;\n        }\n        return prev + 1;\n      });\n    }, delay);\n    \n    // Store interval ID for cleanup\n    return () => clearInterval(intervalId);\n  }, [steps, speed, currentStep]);\n\n  const pauseVisualization = useCallback(() => {\n\n    setIsPlaying(false);\n  }, []);\n\n  const generateSortingSteps = useCallback((algorithm: AlgorithmType) => {\n    const sortedArray = [...array];\n    const algorithmSteps: AlgorithmStep[] = [];\n    \n    // Helper to create a step snapshot\n    const createStep = (\n      arr: ArrayElement[],\n      comparing: number[] = [],\n      swapping: number[] = [],\n      sorted: number[] = []\n    ) => {\n      algorithmSteps.push({\n        array: arr.map((el, idx) => ({\n          ...el,\n          isComparing: comparing.includes(idx),\n          isSwapping: swapping.includes(idx),\n          isSorted: sorted.includes(idx)\n        })),\n        comparingIndices: comparing,\n        swappingIndices: swapping,\n        sortedIndices: sorted\n      });\n    };\n\n    // Initial state\n    createStep([...sortedArray]);\n\n    if (algorithm === 'bubble') {\n      // Bubble Sort\n      const n = sortedArray.length;\n      const sorted: number[] = [];\n      \n      for (let i = 0; i < n - 1; i++) {\n        for (let j = 0; j < n - i - 1; j++) {\n          // Comparing\n          createStep([...sortedArray], [j, j + 1], [], sorted);\n          \n          if (sortedArray[j].value > sortedArray[j + 1].value) {\n            // Swapping\n            createStep([...sortedArray], [], [j, j + 1], sorted);\n            [sortedArray[j], sortedArray[j + 1]] = [sortedArray[j + 1], sortedArray[j]];\n            createStep([...sortedArray], [], [j, j + 1], sorted);\n          }\n        }\n        sorted.push(n - i - 1);\n        createStep([...sortedArray], [], [], sorted);\n      }\n      sorted.push(0);\n      createStep([...sortedArray], [], [], sorted);\n      \n    } else if (algorithm === 'quick') {\n      // Quick Sort\n      const sorted: number[] = [];\n      \n      const partition = (low: number, high: number): number => {\n        const pivot = sortedArray[high].value;\n        let i = low - 1;\n        \n        createStep([...sortedArray], [high], [], sorted);\n        \n        for (let j = low; j < high; j++) {\n          createStep([...sortedArray], [j, high], [], sorted);\n          \n          if (sortedArray[j].value < pivot) {\n            i++;\n            if (i !== j) {\n              createStep([...sortedArray], [], [i, j], sorted);\n              [sortedArray[i], sortedArray[j]] = [sortedArray[j], sortedArray[i]];\n              createStep([...sortedArray], [], [i, j], sorted);\n            }\n          }\n        }\n        \n        createStep([...sortedArray], [], [i + 1, high], sorted);\n        [sortedArray[i + 1], sortedArray[high]] = [sortedArray[high], sortedArray[i + 1]];\n        createStep([...sortedArray], [], [i + 1, high], sorted);\n        \n        return i + 1;\n      };\n      \n      const quickSort = (low: number, high: number) => {\n        if (low < high) {\n          const pi = partition(low, high);\n          sorted.push(pi);\n          createStep([...sortedArray], [], [], sorted);\n          \n          quickSort(low, pi - 1);\n          quickSort(pi + 1, high);\n        } else if (low === high) {\n          sorted.push(low);\n          createStep([...sortedArray], [], [], sorted);\n        }\n      };\n      \n      quickSort(0, sortedArray.length - 1);\n      \n    } else if (algorithm === 'merge') {\n      // Merge Sort\n      const sorted: number[] = [];\n      \n      const merge = (left: number, mid: number, right: number) => {\n        const leftArr = sortedArray.slice(left, mid + 1);\n        const rightArr = sortedArray.slice(mid + 1, right + 1);\n        \n        let i = 0, j = 0, k = left;\n        \n        while (i < leftArr.length && j < rightArr.length) {\n          createStep([...sortedArray], [left + i, mid + 1 + j], [], sorted);\n          \n          if (leftArr[i].value <= rightArr[j].value) {\n            createStep([...sortedArray], [], [k], sorted);\n            sortedArray[k] = leftArr[i];\n            i++;\n          } else {\n            createStep([...sortedArray], [], [k], sorted);\n            sortedArray[k] = rightArr[j];\n            j++;\n          }\n          createStep([...sortedArray], [], [k], sorted);\n          k++;\n        }\n        \n        while (i < leftArr.length) {\n          createStep([...sortedArray], [], [k], sorted);\n          sortedArray[k] = leftArr[i];\n          createStep([...sortedArray], [], [k], sorted);\n          i++;\n          k++;\n        }\n        \n        while (j < rightArr.length) {\n          createStep([...sortedArray], [], [k], sorted);\n          sortedArray[k] = rightArr[j];\n          createStep([...sortedArray], [], [k], sorted);\n          j++;\n          k++;\n        }\n      };\n      \n      const mergeSort = (left: number, right: number) => {\n        if (left < right) {\n          const mid = Math.floor((left + right) / 2);\n          \n          mergeSort(left, mid);\n          mergeSort(mid + 1, right);\n          merge(left, mid, right);\n          \n          if (left === 0 && right === sortedArray.length - 1) {\n            for (let i = left; i <= right; i++) {\n              sorted.push(i);\n            }\n            createStep([...sortedArray], [], [], sorted);\n          }\n        }\n      };\n      \n      mergeSort(0, sortedArray.length - 1);\n      \n    } else if (algorithm === 'insertion') {\n      // Insertion Sort\n      const sorted: number[] = [0];\n      createStep([...sortedArray], [], [], sorted);\n      \n      for (let i = 1; i < sortedArray.length; i++) {\n        const key = sortedArray[i];\n        let j = i - 1;\n        \n        createStep([...sortedArray], [i], [], sorted);\n        \n        while (j >= 0 && sortedArray[j].value > key.value) {\n          createStep([...sortedArray], [j, j + 1], [], sorted);\n          createStep([...sortedArray], [], [j, j + 1], sorted);\n          sortedArray[j + 1] = sortedArray[j];\n          createStep([...sortedArray], [], [j, j + 1], sorted);\n          j--;\n        }\n        \n        sortedArray[j + 1] = key;\n        createStep([...sortedArray], [], [j + 1], sorted);\n        sorted.push(i);\n        createStep([...sortedArray], [], [], sorted);\n      }\n    }\n    \n    setSteps(algorithmSteps);\n    setCurrentStep(0);\n  }, [array]);\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-gray-900 via-purple-900 to-gray-900 p-8\">\n      <div className=\"max-w-7xl mx-auto space-y-8\">\n        <motion.div\n          initial={{ opacity: 0, y: -20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.8 }}\n          className=\"text-center space-y-4\"\n        >\n          <div className=\"relative inline-block\">\n            <motion.h1\n              className=\"text-6xl font-bold bg-gradient-to-r from-cyan-400 via-purple-400 to-pink-400 bg-clip-text text-transparent\"\n              animate={{\n                textShadow: [\n                  '0 0 20px rgba(0, 255, 255, 0.5)',\n                  '0 0 40px rgba(255, 0, 255, 0.5)',\n                  '0 0 20px rgba(0, 255, 255, 0.5)'\n                ]\n              }}\n              transition={{ duration: 2, repeat: Infinity }}\n            >\n              Algorithm Visualizer\n            </motion.h1>\n          </div>\n          \n          <div className=\"flex items-center justify-center gap-4\">\n            <motion.div\n              initial={{ scale: 0 }}\n              animate={{ scale: 1 }}\n              transition={{ delay: 0.3, type: 'spring' }}\n              className=\"flex items-center gap-2 px-6 py-3 bg-gray-800/50 backdrop-blur-sm rounded-full border border-cyan-500/30\"\n            >\n              <Zap className=\"w-5 h-5 text-cyan-400\" />\n              <span className=\"text-xl font-semibold text-cyan-300\">\n                {mockAlgorithms.find(a => a.id === selectedAlgorithm)?.name}\n              </span>\n            </motion.div>\n            \n            <motion.div\n              initial={{ scale: 0 }}\n              animate={{ scale: 1 }}\n              transition={{ delay: 0.5, type: 'spring' }}\n              className=\"relative px-4 py-2 bg-gradient-to-r from-purple-600/30 to-pink-600/30 backdrop-blur-sm rounded-lg border border-purple-400/50\"\n            >\n              <motion.div\n                className=\"absolute inset-0 bg-gradient-to-r from-purple-600/20 to-pink-600/20 rounded-lg blur-xl\"\n                animate={{\n                  opacity: [0.5, 1, 0.5]\n                }}\n                transition={{ duration: 2, repeat: Infinity }}\n              />\n              <div className=\"relative flex items-center gap-2\">\n                <BarChart3 className=\"w-4 h-4 text-purple-300\" />\n                <span className=\"text-sm font-mono text-purple-200\">\n                  {mockAlgorithms.find(a => a.id === selectedAlgorithm)?.complexity}\n                </span>\n              </div>\n            </motion.div>\n          </div>\n        </motion.div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-6\">\n          <div className=\"lg:col-span-1 space-y-6\">\n            <motion.div\n              initial={{ opacity: 0, x: -50 }}\n              animate={{ opacity: 1, x: 0 }}\n              className=\"bg-gray-900/50 backdrop-blur-lg border border-cyan-500/30 rounded-xl p-6 shadow-[0_0_30px_rgba(0,255,255,0.3)] hover:shadow-[0_0_50px_rgba(0,255,255,0.5)] transition-all duration-300\"\n            >\n              <div className=\"space-y-6\">\n                {/* Algorithm Selection */}\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center gap-2 text-cyan-400\">\n                    <Zap className=\"w-4 h-4\" />\n                    <h3 className=\"text-sm font-semibold uppercase tracking-wider\">Algorithm</h3>\n                  </div>\n                  <div className=\"grid grid-cols-1 gap-2\">\n                    {mockAlgorithms.map((algo) => (\n                      <Button\n                        key={algo.id}\n                        onClick={() => {\n                          setSelectedAlgorithm(algo.id as AlgorithmType);\n                          generateSortingSteps(algo.id as AlgorithmType);\n                        }}\n                        disabled={isPlaying}\n                        variant={selectedAlgorithm === algo.id ? 'default' : 'outline'}\n                        className={`w-full justify-start text-left transition-all duration-300 ${\n                          selectedAlgorithm === algo.id\n                            ? 'bg-gradient-to-r from-cyan-500 to-purple-500 text-white shadow-[0_0_20px_rgba(0,255,255,0.5)] border-0'\n                            : 'bg-gray-800/50 border-cyan-500/20 text-cyan-300 hover:bg-gray-700/50 hover:border-cyan-500/50 hover:shadow-[0_0_15px_rgba(0,255,255,0.3)]'\n                        }`}\n                      >\n                        <div className=\"flex flex-col items-start\">\n                          <span className=\"font-medium\">{algo.name}</span>\n                          <span className=\"text-xs opacity-70\">{algo.complexity}</span>\n                        </div>\n                      </Button>\n                    ))}\n                  </div>\n                </div>\n\n                {/* Array Size Control */}\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center gap-2 text-purple-400\">\n                      <BarChart3 className=\"w-4 h-4\" />\n                      <h3 className=\"text-sm font-semibold uppercase tracking-wider\">Array Size</h3>\n                    </div>\n                    <span className=\"text-lg font-bold text-purple-300\">{arraySize[0]}</span>\n                  </div>\n                  <Slider\n                    value={arraySize}\n                    onValueChange={setArraySize}\n                    min={5}\n                    max={50}\n                    step={1}\n                    disabled={isPlaying}\n                    className=\"cursor-pointer\"\n                  />\n                </div>\n\n                {/* Speed Control */}\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center gap-2 text-pink-400\">\n                      <Zap className=\"w-4 h-4\" />\n                      <h3 className=\"text-sm font-semibold uppercase tracking-wider\">Speed</h3>\n                    </div>\n                    <span className=\"text-lg font-bold text-pink-300\">{speed[0]}%</span>\n                  </div>\n                  <Slider\n                    value={speed}\n                    onValueChange={setSpeed}\n                    min={10}\n                    max={100}\n                    step={10}\n                    className=\"cursor-pointer\"\n                  />\n                </div>\n\n                {/* Control Buttons */}\n                <div className=\"space-y-2 pt-4 border-t border-cyan-500/20\">\n                  <Button\n                    onClick={isPlaying ? pauseVisualization : startVisualization}\n                    disabled={steps.length === 0 || (currentStep >= steps.length && !isPlaying)}\n                    className=\"w-full bg-gradient-to-r from-green-500 to-emerald-500 hover:from-green-600 hover:to-emerald-600 text-white shadow-[0_0_20px_rgba(34,197,94,0.5)] hover:shadow-[0_0_30px_rgba(34,197,94,0.7)] transition-all duration-300 border-0\"\n                  >\n                    {isPlaying ? (\n                      <>\n                        <Pause className=\"w-4 h-4 mr-2\" />\n                        Pause\n                      </>\n                    ) : (\n                      <>\n                        <Play className=\"w-4 h-4 mr-2\" />\n                        {currentStep >= steps.length ? 'Restart' : 'Play'}\n                      </>\n                    )}\n                  </Button>\n                  <Button\n                    onClick={resetVisualization}\n                    disabled={isPlaying}\n                    className=\"w-full bg-gradient-to-r from-orange-500 to-red-500 hover:from-orange-600 hover:to-red-600 text-white shadow-[0_0_20px_rgba(249,115,22,0.5)] hover:shadow-[0_0_30px_rgba(249,115,22,0.7)] transition-all duration-300 border-0\"\n                  >\n                    <RotateCcw className=\"w-4 h-4 mr-2\" />\n                    Reset\n                  </Button>\n                </div>\n              </div>\n            </motion.div>\n            \n            <div className=\"bg-gray-900/50 backdrop-blur-lg border border-cyan-500/30 rounded-xl p-6 shadow-2xl shadow-cyan-500/20\">\n              <div className=\"space-y-6\">\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center gap-2 text-cyan-400\">\n                    <Zap className=\"w-4 h-4\" />\n                    <span className=\"text-sm font-semibold tracking-wider\">ALGORITHM</span>\n                  </div>\n                  <div className=\"grid grid-cols-1 gap-3\">\n                    {mockAlgorithms.map((algo) => (\n                      <motion.button\n                        key={algo.id}\n                        onClick={() => setSelectedAlgorithm(algo.id as AlgorithmType)}\n                        className={`relative p-4 rounded-lg border-2 transition-all duration-300 text-left ${\n                          selectedAlgorithm === algo.id\n                            ? 'border-cyan-400 bg-cyan-500/20 shadow-lg shadow-cyan-500/50'\n                            : 'border-gray-700 bg-gray-800/50 hover:border-cyan-500/50 hover:shadow-md hover:shadow-cyan-500/30'\n                        }`}\n                        whileHover={{ scale: 1.02 }}\n                        whileTap={{ scale: 0.98 }}\n                      >\n                        <div className=\"space-y-1\">\n                          <div className={`font-semibold ${\n                            selectedAlgorithm === algo.id ? 'text-cyan-300' : 'text-gray-300'\n                          }`}>\n                            {algo.name}\n                          </div>\n                          <div className={`text-xs font-mono ${\n                            selectedAlgorithm === algo.id ? 'text-cyan-400' : 'text-gray-500'\n                          }`}>\n                            {algo.complexity}\n                          </div>\n                        </div>\n                        {selectedAlgorithm === algo.id && (\n                          <motion.div\n                            className=\"absolute inset-0 rounded-lg border-2 border-cyan-400\"\n                            initial={{ opacity: 0 }}\n                            animate={{ opacity: [0.5, 1, 0.5] }}\n                            transition={{ duration: 2, repeat: Infinity }}\n                          />\n                        )}\n                      </motion.button>\n                    ))}\n                  </div>\n                </div>\n\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <label className=\"text-cyan-400 text-sm font-medium flex items-center gap-2\">\n                      <Zap className=\"w-4 h-4\" />\n                      Speed\n                    </label>\n                    <span className=\"text-cyan-300 text-xs\">{speed[0]}ms</span>\n                  </div>\n                  <Slider\n                    value={speed}\n                    onValueChange={setSpeed}\n                    min={10}\n                    max={200}\n                    step={10}\n                    className=\"[&_[role=slider]]:bg-cyan-400 [&_[role=slider]]:border-cyan-300 [&_[role=slider]]:shadow-[0_0_15px_rgba(34,211,238,0.8)] [&_[role=slider]]:hover:shadow-[0_0_25px_rgba(34,211,238,1)] [&_[role=slider]]:transition-shadow [&_.relative]:bg-gray-700/50 [&_.relative]:border [&_.relative]:border-cyan-500/30 [&_.bg-primary]:bg-gradient-to-r [&_.bg-primary]:from-cyan-500 [&_.bg-primary]:to-purple-500 [&_.bg-primary]:shadow-[0_0_10px_rgba(34,211,238,0.5)]\"\n                  /></parameter>\n                </div>\n\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <label className=\"text-cyan-400 text-sm font-medium flex items-center gap-2\">\n                      <BarChart3 className=\"w-4 h-4\" />\n                      Array Size\n                    </label>\n                    <span className=\"text-cyan-300 text-xs\">{arraySize[0]}</span>\n                  </div>\n                  <Slider\n                    value={arraySize}\n                    onValueChange={setArraySize}\n                    min={5}\n                    max={50}\n                    step={1}\n                    className=\"[&_[role=slider]]:bg-gradient-to-r [&_[role=slider]]:from-purple-500 [&_[role=slider]]:to-pink-500 [&_[role=slider]]:border-2 [&_[role=slider]]:border-purple-400 [&_[role=slider]]:shadow-lg [&_[role=slider]]:shadow-purple-500/50 [&_[role=slider]]:transition-all [&_[role=slider]]:hover:shadow-purple-500/80 [&_[role=slider]]:hover:scale-110 [&>span]:bg-gradient-to-r [&>span]:from-purple-500/30 [&>span]:to-pink-500/30 [&>span]:h-2 [&>span]:rounded-full\"\n                  />\n                </div>\n\n                <div className=\"flex gap-3 pt-4\">\n                  <motion.button\n                    onClick={() => {\n                      if (isPlaying) {\n                        pauseVisualization();\n                      } else {\n                        startVisualization();\n                      }\n                    }}\n                    disabled={array.length === 0 || steps.length === 0}\n                    className=\"relative flex-1 px-6 py-3 rounded-lg font-semibold text-white overflow-hidden disabled:opacity-50 disabled:cursor-not-allowed group\"\n                    whileHover={{ scale: 1.05 }}\n                    whileTap={{ scale: 0.95 }}\n                  >\n                    <motion.div\n                      className=\"absolute inset-0 bg-gradient-to-r from-cyan-500 to-blue-500\"\n                      animate={{\n                        boxShadow: isPlaying\n                          ? [\n                              '0 0 20px rgba(0, 255, 255, 0.5)',\n                              '0 0 40px rgba(0, 255, 255, 0.8)',\n                              '0 0 20px rgba(0, 255, 255, 0.5)'\n                            ]\n                          : [\n                              '0 0 20px rgba(0, 255, 255, 0.3)',\n                              '0 0 30px rgba(0, 255, 255, 0.5)',\n                              '0 0 20px rgba(0, 255, 255, 0.3)'\n                            ]\n                      }}\n                      transition={{ duration: 2, repeat: Infinity }}\n                    />\n                    <div className=\"relative flex items-center justify-center gap-2\">\n                      <motion.div\n                        animate={{ rotate: isPlaying ? 0 : 0 }}\n                        transition={{ duration: 0.3 }}\n                      >\n                        {isPlaying ? (\n                          <Pause className=\"w-5 h-5\" />\n                        ) : (\n                          <Play className=\"w-5 h-5\" />\n                        )}\n                      </motion.div>\n                      <span>{isPlaying ? 'Pause' : 'Play'}</span>\n                    </div>\n                  </motion.button>\n                  <motion.button\n                    onClick={resetVisualization}\n                    disabled={isPlaying}\n                    className=\"flex-1 relative group overflow-hidden rounded-lg bg-gradient-to-r from-pink-600 to-red-600 p-4 disabled:opacity-50 disabled:cursor-not-allowed transition-all duration-300 hover:shadow-[0_0_30px_rgba(236,72,153,0.6)]\"\n                    whileHover={{ scale: isPlaying ? 1 : 1.05 }}\n                    whileTap={{ scale: isPlaying ? 1 : 0.95, rotate: 360 }}\n                    transition={{ duration: 0.6, type: \"spring\" }}\n                  >\n                    <motion.div\n                      className=\"absolute inset-0 bg-gradient-to-r from-pink-400 to-red-400 opacity-0 group-hover:opacity-30 transition-opacity duration-300\"\n                      animate={{\n                        scale: [1, 1.2, 1],\n                        opacity: [0.3, 0.5, 0.3]\n                      }}\n                      transition={{ duration: 2, repeat: Infinity }}\n                    />\n                    <div className=\"relative flex items-center justify-center gap-2\">\n                      <motion.div\n                        animate={{ rotate: isPlaying ? 0 : [0, 360] }}\n                        transition={{ duration: 20, repeat: Infinity, ease: \"linear\" }}\n                      >\n                        <RotateCcw className=\"w-5 h-5 text-white\" />\n                      </motion.div>\n                      <span className=\"font-semibold text-white\">Reset</span>\n                    </div>\n                  </motion.button>\n                </div>\n              </div>\n            </div>\n\n            <motion.div\n              initial={{ opacity: 0, x: -50 }}\n              animate={{ opacity: 1, x: 0 }}\n              transition={{ delay: 0.2 }}\n              className=\"bg-gray-900/50 backdrop-blur-lg border border-purple-500/30 rounded-xl p-6 shadow-[0_0_30px_rgba(168,85,247,0.3)] hover:shadow-[0_0_50px_rgba(168,85,247,0.5)] transition-all duration-300\"\n            >\n              <div className=\"space-y-4\">\n                <div className=\"flex items-center gap-2 text-purple-400 mb-4\">\n                  <BarChart3 className=\"w-5 h-5\" />\n                  <h3 className=\"text-sm font-semibold uppercase tracking-wider\">Statistics</h3>\n                </div>\n\n                {/* Progress Bar */}\n                <div className=\"space-y-2\">\n                  <div className=\"flex items-center justify-between text-sm\">\n                    <span className=\"text-gray-400\">Progress</span>\n                    <span className=\"text-cyan-300 font-mono font-bold\">\n                      {steps.length > 0 ? Math.round((currentStep / (steps.length - 1)) * 100) : 0}%\n                    </span>\n                  </div>\n                  <div className=\"relative h-3 bg-gray-800/50 rounded-full overflow-hidden border border-cyan-500/30\">\n                    <motion.div\n                      className=\"absolute inset-y-0 left-0 bg-gradient-to-r from-cyan-500 via-purple-500 to-pink-500 rounded-full\"\n                      initial={{ width: 0 }}\n                      animate={{ \n                        width: steps.length > 0 ? `${(currentStep / (steps.length - 1)) * 100}%` : '0%'\n                      }}\n                      transition={{ duration: 0.3 }}\n                    />\n                    <motion.div\n                      className=\"absolute inset-0 bg-gradient-to-r from-transparent via-white/30 to-transparent\"\n                      animate={{\n                        x: ['-100%', '200%']\n                      }}\n                      transition={{\n                        duration: 2,\n                        repeat: Infinity,\n                        ease: 'linear'\n                      }}\n                    />\n                  </div>\n                </div>\n\n                {/* Stats Grid */}\n                <div className=\"grid grid-cols-2 gap-3 pt-2\">\n                  {/* Comparisons */}\n                  <motion.div\n                    className=\"relative bg-gradient-to-br from-cyan-500/10 to-cyan-600/5 border border-cyan-500/30 rounded-lg p-4 overflow-hidden group hover:shadow-[0_0_20px_rgba(6,182,212,0.4)] transition-all duration-300\"\n                    whileHover={{ scale: 1.05 }}\n                  >\n                    <motion.div\n                      className=\"absolute inset-0 bg-gradient-to-r from-cyan-500/0 via-cyan-500/20 to-cyan-500/0\"\n                      animate={{\n                        x: ['-100%', '200%']\n                      }}\n                      transition={{\n                        duration: 3,\n                        repeat: Infinity,\n                        ease: 'linear'\n                      }}\n                    />\n                    <div className=\"relative space-y-1\">\n                      <div className=\"text-xs text-cyan-400 uppercase tracking-wider font-semibold\">Comparisons</div>\n                      <motion.div\n                        className=\"text-2xl font-bold text-cyan-300 font-mono\"\n                        key={steps[currentStep]?.comparingIndices.length || 0}\n                        initial={{ scale: 1.2, color: '#67e8f9' }}\n                        animate={{ scale: 1, color: '#67e8f9' }}\n                        transition={{ duration: 0.2 }}\n                      >\n                        {currentStep}\n                      </motion.div>\n                    </div>\n                  </motion.div>\n\n                  {/* Swaps */}\n                  <motion.div\n                    className=\"relative bg-gradient-to-br from-pink-500/10 to-pink-600/5 border border-pink-500/30 rounded-lg p-4 overflow-hidden group hover:shadow-[0_0_20px_rgba(236,72,153,0.4)] transition-all duration-300\"\n                    whileHover={{ scale: 1.05 }}\n                  >\n                    <motion.div\n                      className=\"absolute inset-0 bg-gradient-to-r from-pink-500/0 via-pink-500/20 to-pink-500/0\"\n                      animate={{\n                        x: ['-100%', '200%']\n                      }}\n                      transition={{\n                        duration: 3,\n                        repeat: Infinity,\n                        ease: 'linear',\n                        delay: 0.5\n                      }}\n                    />\n                    <div className=\"relative space-y-1\">\n                      <div className=\"text-xs text-pink-400 uppercase tracking-wider font-semibold\">Swaps</div>\n                      <motion.div\n                        className=\"text-2xl font-bold text-pink-300 font-mono\"\n                        key={steps[currentStep]?.swappingIndices.length || 0}\n                        initial={{ scale: 1.2, color: '#f9a8d4' }}\n                        animate={{ scale: 1, color: '#f9a8d4' }}\n                        transition={{ duration: 0.2 }}\n                      >\n                        {steps.slice(0, currentStep + 1).filter(s => s.swappingIndices.length > 0).length}\n                      </motion.div>\n                    </div>\n                  </motion.div>\n\n                  {/* Current Step */}\n                  <motion.div\n                    className=\"relative bg-gradient-to-br from-purple-500/10 to-purple-600/5 border border-purple-500/30 rounded-lg p-4 overflow-hidden group hover:shadow-[0_0_20px_rgba(168,85,247,0.4)] transition-all duration-300\"\n                    whileHover={{ scale: 1.05 }}\n                  >\n                    <motion.div\n                      className=\"absolute inset-0 bg-gradient-to-r from-purple-500/0 via-purple-500/20 to-purple-500/0\"\n                      animate={{\n                        x: ['-100%', '200%']\n                      }}\n                      transition={{\n                        duration: 3,\n                        repeat: Infinity,\n                        ease: 'linear',\n                        delay: 1\n                      }}\n                    />\n                    <div className=\"relative space-y-1\">\n                      <div className=\"text-xs text-purple-400 uppercase tracking-wider font-semibold\">Step</div>\n                      <div className=\"text-2xl font-bold text-purple-300 font-mono\">\n                        {currentStep + 1}\n                        <span className=\"text-sm text-purple-400/70\">/{steps.length}</span>\n                      </div>\n                    </div>\n                  </motion.div>\n\n                  {/* Sorted Elements */}\n                  <motion.div\n                    className=\"relative bg-gradient-to-br from-green-500/10 to-green-600/5 border border-green-500/30 rounded-lg p-4 overflow-hidden group hover:shadow-[0_0_20px_rgba(34,197,94,0.4)] transition-all duration-300\"\n                    whileHover={{ scale: 1.05 }}\n                  >\n                    <motion.div\n                      className=\"absolute inset-0 bg-gradient-to-r from-green-500/0 via-green-500/20 to-green-500/0\"\n                      animate={{\n                        x: ['-100%', '200%']\n                      }}\n                      transition={{\n                        duration: 3,\n                        repeat: Infinity,\n                        ease: 'linear',\n                        delay: 1.5\n                      }}\n                    />\n                    <div className=\"relative space-y-1\">\n                      <div className=\"text-xs text-green-400 uppercase tracking-wider font-semibold\">Sorted</div>\n                      <div className=\"text-2xl font-bold text-green-300 font-mono\">\n                        {steps[currentStep]?.sortedIndices.length || 0}\n                        <span className=\"text-sm text-green-400/70\">/{array.length}</span>\n                      </div>\n                    </div>\n                  </motion.div>\n                </div>\n\n                {/* Status Indicator */}\n                <div className=\"pt-3 border-t border-purple-500/20\">\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-xs text-gray-400 uppercase tracking-wider\">Status</span>\n                    <div className=\"flex items-center gap-2\">\n                      <motion.div\n                        className={`w-2 h-2 rounded-full ${\n                          isPlaying \n                            ? 'bg-green-400 shadow-[0_0_10px_rgba(34,197,94,0.8)]' \n                            : currentStep >= steps.length - 1 && steps.length > 0\n                            ? 'bg-cyan-400 shadow-[0_0_10px_rgba(6,182,212,0.8)]'\n                            : 'bg-gray-500 shadow-[0_0_10px_rgba(107,114,128,0.5)]'\n                        }`}\n                        animate={isPlaying ? {\n                          scale: [1, 1.3, 1],\n                          opacity: [1, 0.7, 1]\n                        } : {}}\n                        transition={{\n                          duration: 1,\n                          repeat: Infinity\n                        }}\n                      />\n                      <span className={`text-xs font-semibold ${\n                        isPlaying \n                          ? 'text-green-400' \n                          : currentStep >= steps.length - 1 && steps.length > 0\n                          ? 'text-cyan-400'\n                          : 'text-gray-400'\n                      }`}>\n                        {isPlaying \n                          ? 'Running' \n                          : currentStep >= steps.length - 1 && steps.length > 0\n                          ? 'Complete'\n                          : 'Ready'}\n                      </span>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </motion.div>\n          </div>\n\n          <div className=\"lg:col-span-3\">\n            <div className=\"bg-gray-900/50 backdrop-blur-lg border border-purple-500/30 rounded-xl p-8 shadow-2xl shadow-purple-500/20 min-h-[600px]\">\n              {array.length === 0 ? (\n                <motion.div\n                  initial={{ opacity: 0, scale: 0.8 }}\n                  animate={{ opacity: 1, scale: 1 }}\n                  className=\"absolute inset-0 flex flex-col items-center justify-center gap-6\"\n                >\n                  <motion.div\n                    animate={{\n                      rotate: [0, 360],\n                      scale: [1, 1.2, 1]\n                    }}\n                    transition={{ duration: 3, repeat: Infinity }}\n                    className=\"relative\"\n                  >\n                    <BarChart3 className=\"w-24 h-24 text-purple-400/50\" />\n                    <motion.div\n                      className=\"absolute inset-0 blur-xl bg-purple-500/30 rounded-full\"\n                      animate={{\n                        opacity: [0.3, 0.6, 0.3]\n                      }}\n                      transition={{ duration: 2, repeat: Infinity }}\n                    />\n                  </motion.div>\n                  <div className=\"text-center space-y-2\">\n                    <p className=\"text-2xl font-semibold text-purple-300\">\n                      Generate an array to begin\n                    </p>\n                    <p className=\"text-sm text-purple-400/70\">\n                      Click \"Generate New Array\" to start visualizing\n                    </p>\n                  </div>\n                </motion.div>\n              ) : (\n                <div className=\"relative w-full h-full flex items-end justify-center gap-1 px-4\">\n                  {/* Animated Bars */}\n                  {(steps.length > 0 && steps[currentStep] ? steps[currentStep].array : array).map((element, index) => {\n                    const maxValue = Math.max(...array.map(el => el.value));\n                    const heightPercentage = (element.value / maxValue) * 100;\n                    const barWidth = Math.max(8, Math.min(60, (100 / array.length) * 8));\n                    \n                    // Determine bar color based on state\n                    let barColor = NEON_COLORS[index % NEON_COLORS.length];\n                    let glowIntensity = 0.3;\n                    \n                    if (element.isSorted) {\n                      barColor = '#00ff00';\n                      glowIntensity = 0.6;\n                    } else if (element.isSwapping) {\n                      barColor = '#ff0066';\n                      glowIntensity = 0.8;\n                    } else if (element.isComparing) {\n                      barColor = '#ffff00';\n                      glowIntensity = 0.7;\n                    }\n\n                    return (\n                      <motion.div\n                        key={element.id}\n                        className=\"relative flex flex-col items-center justify-end\"\n                        style={{ width: `${barWidth}px` }}\n                        initial={{ opacity: 0, y: 50 }}\n                        animate={{ opacity: 1, y: 0 }}\n                        transition={{ delay: index * 0.02 }}\n                      >\n                        {/* Comparison Indicator */}\n                        {element.isComparing && (\n                          <motion.div\n                            className=\"absolute -top-12 left-1/2 -translate-x-1/2 z-20\"\n                            initial={{ opacity: 0, y: 10 }}\n                            animate={{ \n                              opacity: [0, 1, 1, 0],\n                              y: [-10, -20, -20, -30]\n                            }}\n                            transition={{ duration: 0.8, repeat: Infinity }}\n                          >\n                            <div className=\"relative\">\n                              <Zap className=\"w-6 h-6 text-yellow-400\" />\n                              <motion.div\n                                className=\"absolute inset-0 blur-md bg-yellow-400\"\n                                animate={{\n                                  opacity: [0.5, 1, 0.5]\n                                }}\n                                transition={{ duration: 0.5, repeat: Infinity }}\n                              />\n                            </div>\n                          </motion.div>\n                        )}\n\n                        {/* Swap Trail Effect */}\n                        {element.isSwapping && (\n                          <>\n                            <motion.div\n                              className=\"absolute inset-0 z-10\"\n                              initial={{ opacity: 0 }}\n                              animate={{ \n                                opacity: [0, 0.8, 0],\n                                scale: [1, 1.5, 2]\n                              }}\n                              transition={{ duration: 0.6, repeat: Infinity }}\n                            >\n                              <div \n                                className=\"w-full h-full rounded-lg\"\n                                style={{\n                                  background: `radial-gradient(circle, ${barColor}80 0%, transparent 70%)`,\n                                  filter: 'blur(8px)'\n                                }}\n                              />\n                            </motion.div>\n                            \n                            {/* Particle effects */}\n                            {[...Array(3)].map((_, i) => (\n                              <motion.div\n                                key={i}\n                                className=\"absolute top-0 left-1/2 w-2 h-2 rounded-full\"\n                                style={{ backgroundColor: barColor }}\n                                initial={{ opacity: 1, x: 0, y: 0 }}\n                                animate={{\n                                  opacity: [1, 0],\n                                  x: [0, (i - 1) * 30],\n                                  y: [0, -50 - i * 20]\n                                }}\n                                transition={{ \n                                  duration: 0.8,\n                                  repeat: Infinity,\n                                  delay: i * 0.1\n                                }}\n                              />\n                            ))}\n                          </>\n                        )}\n\n                        {/* The Bar */}\n                        <motion.div\n                          className=\"relative w-full rounded-t-lg overflow-hidden\"\n                          style={{\n                            height: `${heightPercentage}%`,\n                            minHeight: '20px'\n                          }}\n                          animate={{\n                            height: `${heightPercentage}%`,\n                            scale: element.isSwapping ? [1, 1.1, 1] : 1\n                          }}\n                          transition={{\n                            height: { duration: 0.3, ease: 'easeInOut' },\n                            scale: { duration: 0.3, repeat: element.isSwapping ? Infinity : 0 }\n                          }}\n                        >\n                          {/* Bar gradient background */}\n                          <motion.div\n                            className=\"absolute inset-0\"\n                            style={{\n                              background: `linear-gradient(to top, ${barColor}, ${barColor}dd)`,\n                            }}\n                            animate={{\n                              opacity: element.isSwapping ? [1, 0.7, 1] : 1\n                            }}\n                            transition={{ duration: 0.3, repeat: element.isSwapping ? Infinity : 0 }}\n                          />\n\n                          {/* Glow effect */}\n                          <motion.div\n                            className=\"absolute inset-0 blur-md\"\n                            style={{\n                              backgroundColor: barColor,\n                              opacity: glowIntensity\n                            }}\n                            animate={{\n                              opacity: element.isComparing || element.isSwapping \n                                ? [glowIntensity, glowIntensity * 1.5, glowIntensity]\n                                : glowIntensity\n                            }}\n                            transition={{ duration: 0.5, repeat: Infinity }}\n                          />\n\n                          {/* Shine effect */}\n                          <motion.div\n                            className=\"absolute inset-0 bg-gradient-to-r from-transparent via-white to-transparent opacity-20\"\n                            animate={{\n                              x: ['-100%', '200%']\n                            }}\n                            transition={{\n                              duration: 2,\n                              repeat: Infinity,\n                              repeatDelay: 1\n                            }}\n                          />\n\n                          {/* Value label */}\n                          {barWidth > 20 && (\n                            <motion.div\n                              className=\"absolute inset-0 flex items-center justify-center\"\n                              initial={{ opacity: 0 }}\n                              animate={{ opacity: 1 }}\n                              transition={{ delay: 0.3 }}\n                            >\n                              <span \n                                className=\"text-xs font-bold mix-blend-difference text-white\"\n                                style={{ \n                                  fontSize: `${Math.max(8, Math.min(14, barWidth / 3))}px`,\n                                  textShadow: '0 0 4px rgba(0,0,0,0.8)'\n                                }}\n                              >\n                                {element.value}\n                              </span>\n                            </motion.div>\n                          )}\n                        </motion.div>\n\n                        {/* Sorted checkmark */}\n                        {element.isSorted && (\n                          <motion.div\n                            className=\"absolute -top-8 left-1/2 -translate-x-1/2\"\n                            initial={{ opacity: 0, scale: 0 }}\n                            animate={{ opacity: 1, scale: 1 }}\n                            transition={{ type: 'spring', stiffness: 500, damping: 15 }}\n                          >\n                            <motion.div\n                              className=\"w-6 h-6 rounded-full bg-green-500 flex items-center justify-center\"\n                              animate={{\n                                boxShadow: [\n                                  '0 0 10px rgba(34, 197, 94, 0.5)',\n                                  '0 0 20px rgba(34, 197, 94, 0.8)',\n                                  '0 0 10px rgba(34, 197, 94, 0.5)'\n                                ]\n                              }}\n                              transition={{ duration: 1, repeat: Infinity }}\n                            >\n                              <svg\n                                className=\"w-4 h-4 text-white\"\n                                fill=\"none\"\n                                strokeLinecap=\"round\"\n                                strokeLinejoin=\"round\"\n                                strokeWidth=\"3\"\n                                viewBox=\"0 0 24 24\"\n                                stroke=\"currentColor\"\n                              >\n                                <path d=\"M5 13l4 4L19 7\" />\n                              </svg>\n                            </motion.div>\n                          </motion.div>\n                        )}\n                      </motion.div>\n                    );\n                  })}\n\n                  {/* Comparison Line Connector */}\n                  {steps.length > 0 && steps[currentStep] && steps[currentStep].comparingIndices.length === 2 && (\n                    <motion.svg\n                      className=\"absolute top-0 left-0 w-full h-full pointer-events-none z-10\"\n                      initial={{ opacity: 0 }}\n                      animate={{ opacity: 1 }}\n                    >\n                      <motion.line\n                        x1={`${(steps[currentStep].comparingIndices[0] / array.length) * 100}%`}\n                        y1=\"10%\"\n                        x2={`${(steps[currentStep].comparingIndices[1] / array.length) * 100}%`}\n                        y2=\"10%\"\n                        stroke=\"#ffff00\"\n                        strokeWidth=\"2\"\n                        strokeDasharray=\"5,5\"\n                        initial={{ pathLength: 0 }}\n                        animate={{ \n                          pathLength: 1,\n                          opacity: [0.5, 1, 0.5]\n                        }}\n                        transition={{ \n                          pathLength: { duration: 0.3 },\n                          opacity: { duration: 0.8, repeat: Infinity }\n                        }}\n                      />\n                    </motion.svg>\n                  )}\n                </div>\n              )}\n              \n              <div className=\"relative h-full flex items-end justify-center gap-1\">\n                {(steps.length > 0 && steps[currentStep]?.array || array).map((element, index) => {\n                  const maxValue = 100;\n                  const heightPercentage = (element.value / maxValue) * 100;\n                  const colorIndex = index % NEON_COLORS.length;\n                  const neonColor = NEON_COLORS[colorIndex];\n                  \n                  return (\n                    <motion.div\n                      key={element.id}\n                      layout\n                      initial={{ height: 0, opacity: 0 }}\n                      animate={{\n                        height: `${heightPercentage}%`,\n                        opacity: 1,\n                        scale: element.isComparing ? 1.1 : element.isSwapping ? 1.15 : 1,\n                        y: element.isSwapping ? -20 : 0,\n                        boxShadow: element.isComparing\n                          ? `0 0 30px ${neonColor}, 0 0 60px ${neonColor}`\n                          : element.isSwapping\n                          ? `0 0 40px ${neonColor}, 0 0 80px ${neonColor}, 0 0 120px ${neonColor}`\n                          : element.isSorted\n                          ? `0 0 20px #00ff00, 0 0 40px #00ff00`\n                          : `0 0 15px ${neonColor}`,\n                      }}\n                      transition={{\n                        height: { duration: 0.4, ease: 'easeOut' },\n                        scale: { duration: 0.3, ease: 'easeInOut' },\n                        y: { duration: 0.3, ease: 'easeInOut' },\n                        boxShadow: { duration: 0.3 },\n                        layout: { duration: 0.5, ease: 'easeInOut' }\n                      }}\n                      className=\"relative rounded-t-lg min-w-[8px] flex-1 max-w-[60px]\"\n                      style={{\n                        background: element.isSorted\n                          ? 'linear-gradient(to top, #00ff00, #00ff88)'\n                          : element.isSwapping\n                          ? `linear-gradient(to top, ${neonColor}, #ffffff)`\n                          : element.isComparing\n                          ? `linear-gradient(to top, ${neonColor}, ${neonColor}dd)`\n                          : `linear-gradient(to top, ${neonColor}cc, ${neonColor})`,\n                        border: `2px solid ${element.isSorted ? '#00ff00' : neonColor}`,\n                        position: 'relative',\n                      }}\n                    >\n                      {/* Glow effect overlay */}\n                      <motion.div\n                        className=\"absolute inset-0 rounded-t-lg\"\n                        animate={{\n                          opacity: element.isComparing || element.isSwapping ? [0.3, 0.7, 0.3] : 0.2,\n                        }}\n                        transition={{\n                          duration: 1,\n                          repeat: element.isComparing || element.isSwapping ? Infinity : 0,\n                        }}\n                        style={{\n                          background: `radial-gradient(circle at 50% 0%, ${neonColor}88, transparent)`,\n                        }}\n                      />\n                      \n                      {/* Value label */}\n                      {arraySize[0] <= 30 && (\n                        <motion.div\n                          className=\"absolute -top-8 left-1/2 -translate-x-1/2 text-xs font-bold whitespace-nowrap\"\n                          initial={{ opacity: 0 }}\n                          animate={{ \n                            opacity: element.isComparing || element.isSwapping ? 1 : 0.6,\n                            scale: element.isComparing || element.isSwapping ? 1.2 : 1,\n                          }}\n                          style={{\n                            color: element.isSorted ? '#00ff00' : neonColor,\n                            textShadow: `0 0 10px ${element.isSorted ? '#00ff00' : neonColor}`,\n                          }}\n                        >\n                          {element.value}\n                        </motion.div>\n                      )}\n                      \n                      {/* Particle effect for swapping */}\n                      {element.isSwapping && (\n                        <motion.div\n                          className=\"absolute inset-0 rounded-t-lg\"\n                          initial={{ opacity: 0 }}\n                          animate={{\n                            opacity: [0, 1, 0],\n                            scale: [1, 1.5, 2],\n                          }}\n                          transition={{\n                            duration: 0.6,\n                            ease: 'easeOut',\n                          }}\n                          style={{\n                            background: `radial-gradient(circle, ${neonColor}66, transparent)`,\n                            filter: 'blur(8px)',\n                          }}\n                        />\n                      )}\n                    </motion.div>\n                  );\n                })}\n              </div>\n\n                            {steps.length > 0 && currentStep < steps.length && (\n                <div className=\"absolute inset-0 pointer-events-none\">\n                  {steps[currentStep].comparingIndices.map((index, i) => {\n                    const totalElements = steps[currentStep].array.length;\n                    const barWidth = 100 / totalElements;\n                    const leftPosition = (index * barWidth) + (barWidth / 2);\n                    \n                    return (\n                      <motion.div\n                        key={`compare-${index}-${i}`}\n                        className=\"absolute\"\n                        style={{\n                          left: `${leftPosition}%`,\n                          top: '10%',\n                          transform: 'translateX(-50%)'\n                        }}\n                        initial={{ opacity: 0, y: -20, scale: 0 }}\n                        animate={{ \n                          opacity: [0, 1, 1, 0],\n                          y: [0, -10, -10, 0],\n                          scale: [0.8, 1.2, 1.2, 0.8]\n                        }}\n                        transition={{ \n                          duration: 1.5,\n                          repeat: Infinity,\n                          ease: \"easeInOut\"\n                        }}\n                      >\n                        <div className=\"relative\">\n                          <motion.div\n                            className=\"absolute inset-0 bg-cyan-400 rounded-full blur-xl\"\n                            animate={{\n                              scale: [1, 1.5, 1],\n                              opacity: [0.5, 0.8, 0.5]\n                            }}\n                            transition={{\n                              duration: 1,\n                              repeat: Infinity\n                            }}\n                          />\n                          <div className=\"relative w-8 h-8 bg-gradient-to-br from-cyan-400 to-blue-500 rounded-full flex items-center justify-center shadow-[0_0_30px_rgba(34,211,238,0.8)] border-2 border-cyan-300\">\n                            <motion.div\n                              className=\"w-3 h-3 bg-white rounded-full\"\n                              animate={{\n                                scale: [1, 0.5, 1]\n                              }}\n                              transition={{\n                                duration: 0.8,\n                                repeat: Infinity\n                              }}\n                            />\n                          </div>\n                          <motion.div\n                            className=\"absolute top-full mt-2 left-1/2 transform -translate-x-1/2 whitespace-nowrap\"\n                            animate={{\n                              opacity: [0.7, 1, 0.7]\n                            }}\n                            transition={{\n                              duration: 1,\n                              repeat: Infinity\n                            }}\n                          >\n                            <div className=\"bg-cyan-500/90 backdrop-blur-sm px-3 py-1 rounded-full border border-cyan-300 shadow-[0_0_20px_rgba(34,211,238,0.6)]\">\n                              <span className=\"text-xs font-bold text-white\">\n                                Comparing\n                              </span>\n                            </div>\n                          </motion.div>\n                        </div>\n                      </motion.div>\n                    );\n                  })}\n                </div>\n              )}\n              \n                            {steps.length > 0 && currentStep < steps.length && steps[currentStep].swappingIndices.length === 2 && (\n                <>\n                  {steps[currentStep].swappingIndices.map((index, i) => {\n                    const barWidth = 100 / array.length;\n                    const xPosition = index * barWidth + barWidth / 2;\n                    const element = steps[currentStep].array[index];\n                    const colorIndex = element.value % NEON_COLORS.length;\n                    const color = NEON_COLORS[colorIndex];\n                    \n                    return (\n                      <motion.div\n                        key={`swap-trail-${index}-${currentStep}-${i}`}\n                        className=\"absolute bottom-0 pointer-events-none\"\n                        style={{\n                          left: `${xPosition}%`,\n                          width: `${barWidth * 0.8}%`,\n                          height: `${(element.value / 100) * 100}%`,\n                          transform: 'translateX(-50%)',\n                        }}\n                        initial={{ opacity: 0.8, filter: 'blur(0px)' }}\n                        animate={{ \n                          opacity: [0.8, 0.4, 0],\n                          filter: ['blur(0px)', 'blur(8px)', 'blur(16px)'],\n                          scale: [1, 1.1, 1.2]\n                        }}\n                        transition={{ \n                          duration: 0.6,\n                          ease: 'easeOut'\n                        }}\n                      >\n                        <div\n                          className=\"w-full h-full rounded-t-lg\"\n                          style={{\n                            background: `linear-gradient(to top, ${color}, ${color}88)`,\n                            boxShadow: `0 0 30px ${color}88, inset 0 0 20px ${color}44`\n                          }}\n                        />\n                      </motion.div>\n                    );\n                  })}\n                  \n                  {/* Swap arc trail connecting the two swapping elements */}\n                  <motion.svg\n                    className=\"absolute inset-0 pointer-events-none\"\n                    style={{ width: '100%', height: '100%' }}\n                    initial={{ opacity: 0 }}\n                    animate={{ opacity: [0, 1, 0] }}\n                    transition={{ duration: 0.5 }}\n                  >\n                    <defs>\n                      <linearGradient id={`swap-gradient-${currentStep}`} x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"0%\">\n                        <stop offset=\"0%\" stopColor=\"#00ffff\" stopOpacity=\"0.8\" />\n                        <stop offset=\"50%\" stopColor=\"#ff00ff\" stopOpacity=\"0.8\" />\n                        <stop offset=\"100%\" stopColor=\"#00ffff\" stopOpacity=\"0.8\" />\n                      </linearGradient>\n                      <filter id={`motion-blur-${currentStep}`}>\n                        <feGaussianBlur in=\"SourceGraphic\" stdDeviation=\"3,0\" />\n                      </filter>\n                    </defs>\n                    {steps[currentStep].swappingIndices.length === 2 && (() => {\n                      const [idx1, idx2] = steps[currentStep].swappingIndices;\n                      const barWidth = 100 / array.length;\n                      const x1 = idx1 * barWidth + barWidth / 2;\n                      const x2 = idx2 * barWidth + barWidth / 2;\n                      const midY = 30;\n                      \n                      return (\n                        <motion.path\n                          d={`M ${x1}% 90% Q ${(x1 + x2) / 2}% ${midY}% ${x2}% 90%`}\n                          stroke={`url(#swap-gradient-${currentStep})`}\n                          strokeWidth=\"3\"\n                          fill=\"none\"\n                          strokeLinecap=\"round\"\n                          filter={`url(#motion-blur-${currentStep})`}\n                          initial={{ pathLength: 0, opacity: 0 }}\n                          animate={{ \n                            pathLength: [0, 1, 1],\n                            opacity: [0, 1, 0]\n                          }}\n                          transition={{ \n                            duration: 0.5,\n                            ease: 'easeInOut'\n                          }}\n                        />\n                      );\n                    })()}\n                  </motion.svg>\n                  \n                  {/* Particle burst effects at swap positions */}\n                  {steps[currentStep].swappingIndices.map((index) => {\n                    const barWidth = 100 / array.length;\n                    const xPosition = index * barWidth + barWidth / 2;\n                    \n                    return (\n                      <div key={`particles-${index}-${currentStep}`} className=\"absolute bottom-0 pointer-events-none\" style={{ left: `${xPosition}%`, transform: 'translateX(-50%)' }}>\n                        {[...Array(6)].map((_, particleIdx) => {\n                          const angle = (particleIdx * 60) * (Math.PI / 180);\n                          const distance = 40;\n                          const xOffset = Math.cos(angle) * distance;\n                          const yOffset = Math.sin(angle) * distance;\n                          \n                          return (\n                            <motion.div\n                              key={`particle-${particleIdx}`}\n                              className=\"absolute w-2 h-2 rounded-full\"\n                              style={{\n                                background: NEON_COLORS[particleIdx % NEON_COLORS.length],\n                                boxShadow: `0 0 10px ${NEON_COLORS[particleIdx % NEON_COLORS.length]}`\n                              }}\n                              initial={{ x: 0, y: 0, opacity: 1, scale: 1 }}\n                              animate={{ \n                                x: xOffset,\n                                y: -yOffset,\n                                opacity: 0,\n                                scale: 0\n                              }}\n                              transition={{ \n                                duration: 0.6,\n                                ease: 'easeOut'\n                              }}\n                            />\n                          );\n                        })}\n                      </div>\n                    );\n                  })}\n                </>\n              )}</parameter>\n            </div>\n          </div>\n        </div>\n\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ delay: 0.6, duration: 0.8 }}\n          className=\"bg-gray-900/50 backdrop-blur-lg border border-purple-500/30 rounded-xl p-6 shadow-2xl shadow-purple-500/20\"\n        >\n          <div className=\"flex items-center gap-2 mb-4\">\n            <BarChart3 className=\"w-5 h-5 text-purple-400\" />\n            <h3 className=\"text-lg font-semibold text-purple-300 uppercase tracking-wider\">\n              Legend\n            </h3>\n          </div>\n          \n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n            {/* Default State */}\n            <motion.div\n              className=\"flex items-center gap-3 p-3 bg-gray-800/50 rounded-lg border border-cyan-500/20 hover:border-cyan-500/50 transition-all duration-300\"\n              whileHover={{ scale: 1.05 }}\n            >\n              <motion.div\n                className=\"w-6 h-12 bg-gradient-to-t from-cyan-400 to-cyan-600 rounded shadow-[0_0_15px_rgba(0,255,255,0.6)]\"\n                animate={{\n                  boxShadow: [\n                    '0 0 15px rgba(0,255,255,0.6)',\n                    '0 0 25px rgba(0,255,255,0.8)',\n                    '0 0 15px rgba(0,255,255,0.6)'\n                  ]\n                }}\n                transition={{ duration: 2, repeat: Infinity }}\n              />\n              <div className=\"flex flex-col\">\n                <span className=\"text-sm font-semibold text-cyan-300\">Default</span>\n                <span className=\"text-xs text-gray-400\">Unsorted</span>\n              </div>\n            </motion.div>\n\n            {/* Comparing State */}\n            <motion.div\n              className=\"flex items-center gap-3 p-3 bg-gray-800/50 rounded-lg border border-yellow-500/20 hover:border-yellow-500/50 transition-all duration-300\"\n              whileHover={{ scale: 1.05 }}\n            >\n              <motion.div\n                className=\"w-6 h-12 bg-gradient-to-t from-yellow-400 to-yellow-600 rounded shadow-[0_0_15px_rgba(255,255,0,0.6)]\"\n                animate={{\n                  boxShadow: [\n                    '0 0 15px rgba(255,255,0,0.6)',\n                    '0 0 30px rgba(255,255,0,1)',\n                    '0 0 15px rgba(255,255,0,0.6)'\n                  ],\n                  scale: [1, 1.1, 1]\n                }}\n                transition={{ duration: 1.5, repeat: Infinity }}\n              />\n              <div className=\"flex flex-col\">\n                <span className=\"text-sm font-semibold text-yellow-300\">Comparing</span>\n                <span className=\"text-xs text-gray-400\">Active</span>\n              </div>\n            </motion.div>\n\n            {/* Swapping State */}\n            <motion.div\n              className=\"flex items-center gap-3 p-3 bg-gray-800/50 rounded-lg border border-pink-500/20 hover:border-pink-500/50 transition-all duration-300\"\n              whileHover={{ scale: 1.05 }}\n            >\n              <motion.div\n                className=\"w-6 h-12 bg-gradient-to-t from-pink-400 to-pink-600 rounded shadow-[0_0_15px_rgba(255,0,255,0.6)]\"\n                animate={{\n                  x: [-3, 3, -3],\n                  boxShadow: [\n                    '0 0 15px rgba(255,0,255,0.6)',\n                    '0 0 30px rgba(255,0,255,1)',\n                    '0 0 15px rgba(255,0,255,0.6)'\n                  ]\n                }}\n                transition={{ duration: 1, repeat: Infinity }}\n              />\n              <div className=\"flex flex-col\">\n                <span className=\"text-sm font-semibold text-pink-300\">Swapping</span>\n                <span className=\"text-xs text-gray-400\">Moving</span>\n              </div>\n            </motion.div>\n\n            {/* Sorted State */}\n            <motion.div\n              className=\"flex items-center gap-3 p-3 bg-gray-800/50 rounded-lg border border-green-500/20 hover:border-green-500/50 transition-all duration-300\"\n              whileHover={{ scale: 1.05 }}\n            >\n              <motion.div\n                className=\"w-6 h-12 bg-gradient-to-t from-green-400 to-green-600 rounded shadow-[0_0_15px_rgba(0,255,0,0.6)]\"\n                animate={{\n                  boxShadow: [\n                    '0 0 15px rgba(0,255,0,0.6)',\n                    '0 0 25px rgba(0,255,0,0.8)',\n                    '0 0 15px rgba(0,255,0,0.6)'\n                  ]\n                }}\n                transition={{ duration: 2, repeat: Infinity }}\n              />\n              <div className=\"flex flex-col\">\n                <span className=\"text-sm font-semibold text-green-300\">Sorted</span>\n                <span className=\"text-xs text-gray-400\">Complete</span>\n              </div>\n            </motion.div>\n          </div>\n\n          {/* Progress Indicator */}\n          {steps.length > 0 && (\n            <motion.div\n              initial={{ opacity: 0 }}\n              animate={{ opacity: 1 }}\n              className=\"mt-6 pt-6 border-t border-purple-500/20\"\n            >\n              <div className=\"flex items-center justify-between mb-2\">\n                <span className=\"text-sm text-purple-300 font-medium\">Progress</span>\n                <span className=\"text-sm text-purple-400 font-mono\">\n                  {currentStep} / {steps.length - 1}\n                </span>\n              </div>\n              <div className=\"relative h-2 bg-gray-800/50 rounded-full overflow-hidden border border-purple-500/30\">\n                <motion.div\n                  className=\"absolute inset-y-0 left-0 bg-gradient-to-r from-cyan-500 via-purple-500 to-pink-500 rounded-full\"\n                  initial={{ width: 0 }}\n                  animate={{\n                    width: `${steps.length > 1 ? (currentStep / (steps.length - 1)) * 100 : 0}%`\n                  }}\n                  transition={{ duration: 0.3 }}\n                />\n                <motion.div\n                  className=\"absolute inset-0 bg-gradient-to-r from-transparent via-white/30 to-transparent\"\n                  animate={{\n                    x: ['-100%', '200%']\n                  }}\n                  transition={{\n                    duration: 2,\n                    repeat: Infinity,\n                    ease: 'linear'\n                  }}\n                />\n              </div>\n            </motion.div>\n          )}\n        </motion.div>\n      </div>\n    </div>\n  );\n}",
  "error": null,
  "overall_score": 44,
  "code_quality_score": 12,
  "architecture_score": 10,
  "performance_score": 14,
  "accessibility_score": 8,
  "metadata": {
    "document_id": "eval_room_3a99f99aeeb7",
    "prompt_category": "creative",
    "prompt_complexity": 9.0
  },
  "raw_response": {
    "document_id": "eval_room_3a99f99aeeb7",
    "mode": "parallel",
    "prompt": "Build a captivating algorithm visualizer with neon colored bars, smooth height transitions, glowing comparison indicators, trail effects during swaps, and a futuristic dashboard design with animated controls",
    "content": "import { useState, useCallback } from 'react';\nimport { useEffect, useRef } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Slider } from '@/components/ui/slider';\nimport { Play, Pause, RotateCcw, Zap, BarChart3 } from 'lucide-react';\nimport { motion } from 'framer-motion';\n\ninterface ArrayElement {\n  value: number;\n  id: string;\n  isComparing?: boolean;\n  isSwapping?: boolean;\n  isSorted?: boolean;\n}\n\ninterface AlgorithmStep {\n  array: ArrayElement[];\n  comparingIndices: number[];\n  swappingIndices: number[];\n  sortedIndices: number[];\n}\n\ntype AlgorithmType = 'bubble' | 'quick' | 'merge' | 'insertion';\n\nconst NEON_COLORS = [\n  '#00ffff',\n  '#ff00ff', \n  '#00ff00',\n  '#ffff00',\n  '#ff0066',\n  '#00ffaa'\n];\n\nconst mockAlgorithms = [\n  { id: 'bubble', name: 'Bubble Sort', complexity: 'O(n\u00b2)' },\n  { id: 'quick', name: 'Quick Sort', complexity: 'O(n log n)' },\n  { id: 'merge', name: 'Merge Sort', complexity: 'O(n log n)' },\n  { id: 'insertion', name: 'Insertion Sort', complexity: 'O(n\u00b2)' }\n];\n\nconst useAnimationLoop = (\n  isPlaying: boolean,\n  steps: AlgorithmStep[],\n  currentStep: number,\n  speed: number[],\n  onStepComplete: () => void,\n  onAnimationEnd: () => void\n) => {\n  const [animationId, setAnimationId] = useState<NodeJS.Timeout | null>(null);\n\n  const cleanup = useCallback(() => {\n    if (animationId) {\n      clearTimeout(animationId);\n      setAnimationId(null);\n    }\n  }, [animationId]);\n\n  const animate = useCallback(() => {\n    if (currentStep < steps.length - 1) {\n      const delay = 1000 - speed[0] * 9.5; // Convert speed (0-100) to delay (1000ms-50ms)\n      const id = setTimeout(() => {\n        onStepComplete();\n      }, delay);\n      setAnimationId(id);\n    } else {\n      onAnimationEnd();\n    }\n  }, [currentStep, steps.length, speed, onStepComplete, onAnimationEnd]);\n\n  // Start/stop animation based on isPlaying\n  if (isPlaying && currentStep < steps.length - 1) {\n    animate();\n  } else if (!isPlaying) {\n    cleanup();\n  }\n\n  return cleanup;\n};\nexport default function AlgorithmVisualizer() {\n  const [array, setArray] = useState<ArrayElement[]>([]);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [speed, setSpeed] = useState([50]);\n  const [arraySize, setArraySize] = useState([20]);\n  const [selectedAlgorithm, setSelectedAlgorithm] = useState<AlgorithmType>('bubble');\n  const [currentStep, setCurrentStep] = useState(0);\n  const [steps, setSteps] = useState<AlgorithmStep[]>([]);\n  const animationRef = useRef<NodeJS.Timeout | null>(null);\n\n  // Effect to handle step-by-step animation\n  useEffect(() => {\n    if (isPlaying && steps.length > 0) {\n      if (currentStep >= steps.length - 1) {\n        setIsPlaying(false);\n        return;\n      }\n\n      const delay = 1000 - speed[0] * 9.5; // Convert speed slider (0-100) to delay (1000ms-50ms)\n      \n      animationRef.current = setTimeout(() => {\n        setCurrentStep((prev) => prev + 1);\n        \n        // Update array with current step data\n        if (steps[currentStep + 1]) {\n          setArray(steps[currentStep + 1].array);\n        }\n      }, delay);\n\n      return () => {\n        if (animationRef.current) {\n          clearTimeout(animationRef.current);\n        }\n      };\n    }\n  }, [isPlaying, currentStep, steps, speed]);\n\n  const generateRandomArray = useCallback(() => {\n    const newArray: ArrayElement[] = Array.from({ length: arraySize[0] }, (_, index) => ({\n      value: Math.floor(Math.random() * 100) + 5,\n      id: `element-${index}-${Date.now()}`,\n      isComparing: false,\n      isSwapping: false,\n      isSorted: false\n    }));\n    setArray(newArray);\n    setSteps([]);\n    setCurrentStep(0);\n    setIsPlaying(false);\n  }, [arraySize]);\n\n  const resetVisualization = useCallback(() => {\n\n    setIsPlaying(false);\n    setCurrentStep(0);\n    setSteps([]);\n    generateRandomArray();\n  }, [generateRandomArray]);\n\n  const startVisualization = useCallback(() => {\n    if (steps.length === 0) return;\n    if (currentStep >= steps.length - 1) return;\n    \n    setIsPlaying(true);\n    if (steps.length === 0) return;\n    if (currentStep >= steps.length - 1) return;\n    \n    setIsPlaying(true);\n    \n    // Animation will be handled by useEffect watching isPlaying state\n    const delay = 1000 - speed[0] * 9.5;\n    const intervalId = setInterval(() => {\n      setCurrentStep((prev) => {\n        if (prev >= steps.length - 1) {\n          setIsPlaying(false);\n          clearInterval(intervalId);\n          return prev;\n        }\n        return prev + 1;\n      });\n    }, delay);\n    \n    // Store interval ID for cleanup\n    return () => clearInterval(intervalId);\n  }, [steps, speed, currentStep]);\n\n  const pauseVisualization = useCallback(() => {\n\n    setIsPlaying(false);\n  }, []);\n\n  const generateSortingSteps = useCallback((algorithm: AlgorithmType) => {\n    const sortedArray = [...array];\n    const algorithmSteps: AlgorithmStep[] = [];\n    \n    // Helper to create a step snapshot\n    const createStep = (\n      arr: ArrayElement[],\n      comparing: number[] = [],\n      swapping: number[] = [],\n      sorted: number[] = []\n    ) => {\n      algorithmSteps.push({\n        array: arr.map((el, idx) => ({\n          ...el,\n          isComparing: comparing.includes(idx),\n          isSwapping: swapping.includes(idx),\n          isSorted: sorted.includes(idx)\n        })),\n        comparingIndices: comparing,\n        swappingIndices: swapping,\n        sortedIndices: sorted\n      });\n    };\n\n    // Initial state\n    createStep([...sortedArray]);\n\n    if (algorithm === 'bubble') {\n      // Bubble Sort\n      const n = sortedArray.length;\n      const sorted: number[] = [];\n      \n      for (let i = 0; i < n - 1; i++) {\n        for (let j = 0; j < n - i - 1; j++) {\n          // Comparing\n          createStep([...sortedArray], [j, j + 1], [], sorted);\n          \n          if (sortedArray[j].value > sortedArray[j + 1].value) {\n            // Swapping\n            createStep([...sortedArray], [], [j, j + 1], sorted);\n            [sortedArray[j], sortedArray[j + 1]] = [sortedArray[j + 1], sortedArray[j]];\n            createStep([...sortedArray], [], [j, j + 1], sorted);\n          }\n        }\n        sorted.push(n - i - 1);\n        createStep([...sortedArray], [], [], sorted);\n      }\n      sorted.push(0);\n      createStep([...sortedArray], [], [], sorted);\n      \n    } else if (algorithm === 'quick') {\n      // Quick Sort\n      const sorted: number[] = [];\n      \n      const partition = (low: number, high: number): number => {\n        const pivot = sortedArray[high].value;\n        let i = low - 1;\n        \n        createStep([...sortedArray], [high], [], sorted);\n        \n        for (let j = low; j < high; j++) {\n          createStep([...sortedArray], [j, high], [], sorted);\n          \n          if (sortedArray[j].value < pivot) {\n            i++;\n            if (i !== j) {\n              createStep([...sortedArray], [], [i, j], sorted);\n              [sortedArray[i], sortedArray[j]] = [sortedArray[j], sortedArray[i]];\n              createStep([...sortedArray], [], [i, j], sorted);\n            }\n          }\n        }\n        \n        createStep([...sortedArray], [], [i + 1, high], sorted);\n        [sortedArray[i + 1], sortedArray[high]] = [sortedArray[high], sortedArray[i + 1]];\n        createStep([...sortedArray], [], [i + 1, high], sorted);\n        \n        return i + 1;\n      };\n      \n      const quickSort = (low: number, high: number) => {\n        if (low < high) {\n          const pi = partition(low, high);\n          sorted.push(pi);\n          createStep([...sortedArray], [], [], sorted);\n          \n          quickSort(low, pi - 1);\n          quickSort(pi + 1, high);\n        } else if (low === high) {\n          sorted.push(low);\n          createStep([...sortedArray], [], [], sorted);\n        }\n      };\n      \n      quickSort(0, sortedArray.length - 1);\n      \n    } else if (algorithm === 'merge') {\n      // Merge Sort\n      const sorted: number[] = [];\n      \n      const merge = (left: number, mid: number, right: number) => {\n        const leftArr = sortedArray.slice(left, mid + 1);\n        const rightArr = sortedArray.slice(mid + 1, right + 1);\n        \n        let i = 0, j = 0, k = left;\n        \n        while (i < leftArr.length && j < rightArr.length) {\n          createStep([...sortedArray], [left + i, mid + 1 + j], [], sorted);\n          \n          if (leftArr[i].value <= rightArr[j].value) {\n            createStep([...sortedArray], [], [k], sorted);\n            sortedArray[k] = leftArr[i];\n            i++;\n          } else {\n            createStep([...sortedArray], [], [k], sorted);\n            sortedArray[k] = rightArr[j];\n            j++;\n          }\n          createStep([...sortedArray], [], [k], sorted);\n          k++;\n        }\n        \n        while (i < leftArr.length) {\n          createStep([...sortedArray], [], [k], sorted);\n          sortedArray[k] = leftArr[i];\n          createStep([...sortedArray], [], [k], sorted);\n          i++;\n          k++;\n        }\n        \n        while (j < rightArr.length) {\n          createStep([...sortedArray], [], [k], sorted);\n          sortedArray[k] = rightArr[j];\n          createStep([...sortedArray], [], [k], sorted);\n          j++;\n          k++;\n        }\n      };\n      \n      const mergeSort = (left: number, right: number) => {\n        if (left < right) {\n          const mid = Math.floor((left + right) / 2);\n          \n          mergeSort(left, mid);\n          mergeSort(mid + 1, right);\n          merge(left, mid, right);\n          \n          if (left === 0 && right === sortedArray.length - 1) {\n            for (let i = left; i <= right; i++) {\n              sorted.push(i);\n            }\n            createStep([...sortedArray], [], [], sorted);\n          }\n        }\n      };\n      \n      mergeSort(0, sortedArray.length - 1);\n      \n    } else if (algorithm === 'insertion') {\n      // Insertion Sort\n      const sorted: number[] = [0];\n      createStep([...sortedArray], [], [], sorted);\n      \n      for (let i = 1; i < sortedArray.length; i++) {\n        const key = sortedArray[i];\n        let j = i - 1;\n        \n        createStep([...sortedArray], [i], [], sorted);\n        \n        while (j >= 0 && sortedArray[j].value > key.value) {\n          createStep([...sortedArray], [j, j + 1], [], sorted);\n          createStep([...sortedArray], [], [j, j + 1], sorted);\n          sortedArray[j + 1] = sortedArray[j];\n          createStep([...sortedArray], [], [j, j + 1], sorted);\n          j--;\n        }\n        \n        sortedArray[j + 1] = key;\n        createStep([...sortedArray], [], [j + 1], sorted);\n        sorted.push(i);\n        createStep([...sortedArray], [], [], sorted);\n      }\n    }\n    \n    setSteps(algorithmSteps);\n    setCurrentStep(0);\n  }, [array]);\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-gray-900 via-purple-900 to-gray-900 p-8\">\n      <div className=\"max-w-7xl mx-auto space-y-8\">\n        <motion.div\n          initial={{ opacity: 0, y: -20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.8 }}\n          className=\"text-center space-y-4\"\n        >\n          <div className=\"relative inline-block\">\n            <motion.h1\n              className=\"text-6xl font-bold bg-gradient-to-r from-cyan-400 via-purple-400 to-pink-400 bg-clip-text text-transparent\"\n              animate={{\n                textShadow: [\n                  '0 0 20px rgba(0, 255, 255, 0.5)',\n                  '0 0 40px rgba(255, 0, 255, 0.5)',\n                  '0 0 20px rgba(0, 255, 255, 0.5)'\n                ]\n              }}\n              transition={{ duration: 2, repeat: Infinity }}\n            >\n              Algorithm Visualizer\n            </motion.h1>\n          </div>\n          \n          <div className=\"flex items-center justify-center gap-4\">\n            <motion.div\n              initial={{ scale: 0 }}\n              animate={{ scale: 1 }}\n              transition={{ delay: 0.3, type: 'spring' }}\n              className=\"flex items-center gap-2 px-6 py-3 bg-gray-800/50 backdrop-blur-sm rounded-full border border-cyan-500/30\"\n            >\n              <Zap className=\"w-5 h-5 text-cyan-400\" />\n              <span className=\"text-xl font-semibold text-cyan-300\">\n                {mockAlgorithms.find(a => a.id === selectedAlgorithm)?.name}\n              </span>\n            </motion.div>\n            \n            <motion.div\n              initial={{ scale: 0 }}\n              animate={{ scale: 1 }}\n              transition={{ delay: 0.5, type: 'spring' }}\n              className=\"relative px-4 py-2 bg-gradient-to-r from-purple-600/30 to-pink-600/30 backdrop-blur-sm rounded-lg border border-purple-400/50\"\n            >\n              <motion.div\n                className=\"absolute inset-0 bg-gradient-to-r from-purple-600/20 to-pink-600/20 rounded-lg blur-xl\"\n                animate={{\n                  opacity: [0.5, 1, 0.5]\n                }}\n                transition={{ duration: 2, repeat: Infinity }}\n              />\n              <div className=\"relative flex items-center gap-2\">\n                <BarChart3 className=\"w-4 h-4 text-purple-300\" />\n                <span className=\"text-sm font-mono text-purple-200\">\n                  {mockAlgorithms.find(a => a.id === selectedAlgorithm)?.complexity}\n                </span>\n              </div>\n            </motion.div>\n          </div>\n        </motion.div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-6\">\n          <div className=\"lg:col-span-1 space-y-6\">\n            <motion.div\n              initial={{ opacity: 0, x: -50 }}\n              animate={{ opacity: 1, x: 0 }}\n              className=\"bg-gray-900/50 backdrop-blur-lg border border-cyan-500/30 rounded-xl p-6 shadow-[0_0_30px_rgba(0,255,255,0.3)] hover:shadow-[0_0_50px_rgba(0,255,255,0.5)] transition-all duration-300\"\n            >\n              <div className=\"space-y-6\">\n                {/* Algorithm Selection */}\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center gap-2 text-cyan-400\">\n                    <Zap className=\"w-4 h-4\" />\n                    <h3 className=\"text-sm font-semibold uppercase tracking-wider\">Algorithm</h3>\n                  </div>\n                  <div className=\"grid grid-cols-1 gap-2\">\n                    {mockAlgorithms.map((algo) => (\n                      <Button\n                        key={algo.id}\n                        onClick={() => {\n                          setSelectedAlgorithm(algo.id as AlgorithmType);\n                          generateSortingSteps(algo.id as AlgorithmType);\n                        }}\n                        disabled={isPlaying}\n                        variant={selectedAlgorithm === algo.id ? 'default' : 'outline'}\n                        className={`w-full justify-start text-left transition-all duration-300 ${\n                          selectedAlgorithm === algo.id\n                            ? 'bg-gradient-to-r from-cyan-500 to-purple-500 text-white shadow-[0_0_20px_rgba(0,255,255,0.5)] border-0'\n                            : 'bg-gray-800/50 border-cyan-500/20 text-cyan-300 hover:bg-gray-700/50 hover:border-cyan-500/50 hover:shadow-[0_0_15px_rgba(0,255,255,0.3)]'\n                        }`}\n                      >\n                        <div className=\"flex flex-col items-start\">\n                          <span className=\"font-medium\">{algo.name}</span>\n                          <span className=\"text-xs opacity-70\">{algo.complexity}</span>\n                        </div>\n                      </Button>\n                    ))}\n                  </div>\n                </div>\n\n                {/* Array Size Control */}\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center gap-2 text-purple-400\">\n                      <BarChart3 className=\"w-4 h-4\" />\n                      <h3 className=\"text-sm font-semibold uppercase tracking-wider\">Array Size</h3>\n                    </div>\n                    <span className=\"text-lg font-bold text-purple-300\">{arraySize[0]}</span>\n                  </div>\n                  <Slider\n                    value={arraySize}\n                    onValueChange={setArraySize}\n                    min={5}\n                    max={50}\n                    step={1}\n                    disabled={isPlaying}\n                    className=\"cursor-pointer\"\n                  />\n                </div>\n\n                {/* Speed Control */}\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center gap-2 text-pink-400\">\n                      <Zap className=\"w-4 h-4\" />\n                      <h3 className=\"text-sm font-semibold uppercase tracking-wider\">Speed</h3>\n                    </div>\n                    <span className=\"text-lg font-bold text-pink-300\">{speed[0]}%</span>\n                  </div>\n                  <Slider\n                    value={speed}\n                    onValueChange={setSpeed}\n                    min={10}\n                    max={100}\n                    step={10}\n                    className=\"cursor-pointer\"\n                  />\n                </div>\n\n                {/* Control Buttons */}\n                <div className=\"space-y-2 pt-4 border-t border-cyan-500/20\">\n                  <Button\n                    onClick={isPlaying ? pauseVisualization : startVisualization}\n                    disabled={steps.length === 0 || (currentStep >= steps.length && !isPlaying)}\n                    className=\"w-full bg-gradient-to-r from-green-500 to-emerald-500 hover:from-green-600 hover:to-emerald-600 text-white shadow-[0_0_20px_rgba(34,197,94,0.5)] hover:shadow-[0_0_30px_rgba(34,197,94,0.7)] transition-all duration-300 border-0\"\n                  >\n                    {isPlaying ? (\n                      <>\n                        <Pause className=\"w-4 h-4 mr-2\" />\n                        Pause\n                      </>\n                    ) : (\n                      <>\n                        <Play className=\"w-4 h-4 mr-2\" />\n                        {currentStep >= steps.length ? 'Restart' : 'Play'}\n                      </>\n                    )}\n                  </Button>\n                  <Button\n                    onClick={resetVisualization}\n                    disabled={isPlaying}\n                    className=\"w-full bg-gradient-to-r from-orange-500 to-red-500 hover:from-orange-600 hover:to-red-600 text-white shadow-[0_0_20px_rgba(249,115,22,0.5)] hover:shadow-[0_0_30px_rgba(249,115,22,0.7)] transition-all duration-300 border-0\"\n                  >\n                    <RotateCcw className=\"w-4 h-4 mr-2\" />\n                    Reset\n                  </Button>\n                </div>\n              </div>\n            </motion.div>\n            \n            <div className=\"bg-gray-900/50 backdrop-blur-lg border border-cyan-500/30 rounded-xl p-6 shadow-2xl shadow-cyan-500/20\">\n              <div className=\"space-y-6\">\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center gap-2 text-cyan-400\">\n                    <Zap className=\"w-4 h-4\" />\n                    <span className=\"text-sm font-semibold tracking-wider\">ALGORITHM</span>\n                  </div>\n                  <div className=\"grid grid-cols-1 gap-3\">\n                    {mockAlgorithms.map((algo) => (\n                      <motion.button\n                        key={algo.id}\n                        onClick={() => setSelectedAlgorithm(algo.id as AlgorithmType)}\n                        className={`relative p-4 rounded-lg border-2 transition-all duration-300 text-left ${\n                          selectedAlgorithm === algo.id\n                            ? 'border-cyan-400 bg-cyan-500/20 shadow-lg shadow-cyan-500/50'\n                            : 'border-gray-700 bg-gray-800/50 hover:border-cyan-500/50 hover:shadow-md hover:shadow-cyan-500/30'\n                        }`}\n                        whileHover={{ scale: 1.02 }}\n                        whileTap={{ scale: 0.98 }}\n                      >\n                        <div className=\"space-y-1\">\n                          <div className={`font-semibold ${\n                            selectedAlgorithm === algo.id ? 'text-cyan-300' : 'text-gray-300'\n                          }`}>\n                            {algo.name}\n                          </div>\n                          <div className={`text-xs font-mono ${\n                            selectedAlgorithm === algo.id ? 'text-cyan-400' : 'text-gray-500'\n                          }`}>\n                            {algo.complexity}\n                          </div>\n                        </div>\n                        {selectedAlgorithm === algo.id && (\n                          <motion.div\n                            className=\"absolute inset-0 rounded-lg border-2 border-cyan-400\"\n                            initial={{ opacity: 0 }}\n                            animate={{ opacity: [0.5, 1, 0.5] }}\n                            transition={{ duration: 2, repeat: Infinity }}\n                          />\n                        )}\n                      </motion.button>\n                    ))}\n                  </div>\n                </div>\n\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <label className=\"text-cyan-400 text-sm font-medium flex items-center gap-2\">\n                      <Zap className=\"w-4 h-4\" />\n                      Speed\n                    </label>\n                    <span className=\"text-cyan-300 text-xs\">{speed[0]}ms</span>\n                  </div>\n                  <Slider\n                    value={speed}\n                    onValueChange={setSpeed}\n                    min={10}\n                    max={200}\n                    step={10}\n                    className=\"[&_[role=slider]]:bg-cyan-400 [&_[role=slider]]:border-cyan-300 [&_[role=slider]]:shadow-[0_0_15px_rgba(34,211,238,0.8)] [&_[role=slider]]:hover:shadow-[0_0_25px_rgba(34,211,238,1)] [&_[role=slider]]:transition-shadow [&_.relative]:bg-gray-700/50 [&_.relative]:border [&_.relative]:border-cyan-500/30 [&_.bg-primary]:bg-gradient-to-r [&_.bg-primary]:from-cyan-500 [&_.bg-primary]:to-purple-500 [&_.bg-primary]:shadow-[0_0_10px_rgba(34,211,238,0.5)]\"\n                  /></parameter>\n                </div>\n\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <label className=\"text-cyan-400 text-sm font-medium flex items-center gap-2\">\n                      <BarChart3 className=\"w-4 h-4\" />\n                      Array Size\n                    </label>\n                    <span className=\"text-cyan-300 text-xs\">{arraySize[0]}</span>\n                  </div>\n                  <Slider\n                    value={arraySize}\n                    onValueChange={setArraySize}\n                    min={5}\n                    max={50}\n                    step={1}\n                    className=\"[&_[role=slider]]:bg-gradient-to-r [&_[role=slider]]:from-purple-500 [&_[role=slider]]:to-pink-500 [&_[role=slider]]:border-2 [&_[role=slider]]:border-purple-400 [&_[role=slider]]:shadow-lg [&_[role=slider]]:shadow-purple-500/50 [&_[role=slider]]:transition-all [&_[role=slider]]:hover:shadow-purple-500/80 [&_[role=slider]]:hover:scale-110 [&>span]:bg-gradient-to-r [&>span]:from-purple-500/30 [&>span]:to-pink-500/30 [&>span]:h-2 [&>span]:rounded-full\"\n                  />\n                </div>\n\n                <div className=\"flex gap-3 pt-4\">\n                  <motion.button\n                    onClick={() => {\n                      if (isPlaying) {\n                        pauseVisualization();\n                      } else {\n                        startVisualization();\n                      }\n                    }}\n                    disabled={array.length === 0 || steps.length === 0}\n                    className=\"relative flex-1 px-6 py-3 rounded-lg font-semibold text-white overflow-hidden disabled:opacity-50 disabled:cursor-not-allowed group\"\n                    whileHover={{ scale: 1.05 }}\n                    whileTap={{ scale: 0.95 }}\n                  >\n                    <motion.div\n                      className=\"absolute inset-0 bg-gradient-to-r from-cyan-500 to-blue-500\"\n                      animate={{\n                        boxShadow: isPlaying\n                          ? [\n                              '0 0 20px rgba(0, 255, 255, 0.5)',\n                              '0 0 40px rgba(0, 255, 255, 0.8)',\n                              '0 0 20px rgba(0, 255, 255, 0.5)'\n                            ]\n                          : [\n                              '0 0 20px rgba(0, 255, 255, 0.3)',\n                              '0 0 30px rgba(0, 255, 255, 0.5)',\n                              '0 0 20px rgba(0, 255, 255, 0.3)'\n                            ]\n                      }}\n                      transition={{ duration: 2, repeat: Infinity }}\n                    />\n                    <div className=\"relative flex items-center justify-center gap-2\">\n                      <motion.div\n                        animate={{ rotate: isPlaying ? 0 : 0 }}\n                        transition={{ duration: 0.3 }}\n                      >\n                        {isPlaying ? (\n                          <Pause className=\"w-5 h-5\" />\n                        ) : (\n                          <Play className=\"w-5 h-5\" />\n                        )}\n                      </motion.div>\n                      <span>{isPlaying ? 'Pause' : 'Play'}</span>\n                    </div>\n                  </motion.button>\n                  <motion.button\n                    onClick={resetVisualization}\n                    disabled={isPlaying}\n                    className=\"flex-1 relative group overflow-hidden rounded-lg bg-gradient-to-r from-pink-600 to-red-600 p-4 disabled:opacity-50 disabled:cursor-not-allowed transition-all duration-300 hover:shadow-[0_0_30px_rgba(236,72,153,0.6)]\"\n                    whileHover={{ scale: isPlaying ? 1 : 1.05 }}\n                    whileTap={{ scale: isPlaying ? 1 : 0.95, rotate: 360 }}\n                    transition={{ duration: 0.6, type: \"spring\" }}\n                  >\n                    <motion.div\n                      className=\"absolute inset-0 bg-gradient-to-r from-pink-400 to-red-400 opacity-0 group-hover:opacity-30 transition-opacity duration-300\"\n                      animate={{\n                        scale: [1, 1.2, 1],\n                        opacity: [0.3, 0.5, 0.3]\n                      }}\n                      transition={{ duration: 2, repeat: Infinity }}\n                    />\n                    <div className=\"relative flex items-center justify-center gap-2\">\n                      <motion.div\n                        animate={{ rotate: isPlaying ? 0 : [0, 360] }}\n                        transition={{ duration: 20, repeat: Infinity, ease: \"linear\" }}\n                      >\n                        <RotateCcw className=\"w-5 h-5 text-white\" />\n                      </motion.div>\n                      <span className=\"font-semibold text-white\">Reset</span>\n                    </div>\n                  </motion.button>\n                </div>\n              </div>\n            </div>\n\n            <motion.div\n              initial={{ opacity: 0, x: -50 }}\n              animate={{ opacity: 1, x: 0 }}\n              transition={{ delay: 0.2 }}\n              className=\"bg-gray-900/50 backdrop-blur-lg border border-purple-500/30 rounded-xl p-6 shadow-[0_0_30px_rgba(168,85,247,0.3)] hover:shadow-[0_0_50px_rgba(168,85,247,0.5)] transition-all duration-300\"\n            >\n              <div className=\"space-y-4\">\n                <div className=\"flex items-center gap-2 text-purple-400 mb-4\">\n                  <BarChart3 className=\"w-5 h-5\" />\n                  <h3 className=\"text-sm font-semibold uppercase tracking-wider\">Statistics</h3>\n                </div>\n\n                {/* Progress Bar */}\n                <div className=\"space-y-2\">\n                  <div className=\"flex items-center justify-between text-sm\">\n                    <span className=\"text-gray-400\">Progress</span>\n                    <span className=\"text-cyan-300 font-mono font-bold\">\n                      {steps.length > 0 ? Math.round((currentStep / (steps.length - 1)) * 100) : 0}%\n                    </span>\n                  </div>\n                  <div className=\"relative h-3 bg-gray-800/50 rounded-full overflow-hidden border border-cyan-500/30\">\n                    <motion.div\n                      className=\"absolute inset-y-0 left-0 bg-gradient-to-r from-cyan-500 via-purple-500 to-pink-500 rounded-full\"\n                      initial={{ width: 0 }}\n                      animate={{ \n                        width: steps.length > 0 ? `${(currentStep / (steps.length - 1)) * 100}%` : '0%'\n                      }}\n                      transition={{ duration: 0.3 }}\n                    />\n                    <motion.div\n                      className=\"absolute inset-0 bg-gradient-to-r from-transparent via-white/30 to-transparent\"\n                      animate={{\n                        x: ['-100%', '200%']\n                      }}\n                      transition={{\n                        duration: 2,\n                        repeat: Infinity,\n                        ease: 'linear'\n                      }}\n                    />\n                  </div>\n                </div>\n\n                {/* Stats Grid */}\n                <div className=\"grid grid-cols-2 gap-3 pt-2\">\n                  {/* Comparisons */}\n                  <motion.div\n                    className=\"relative bg-gradient-to-br from-cyan-500/10 to-cyan-600/5 border border-cyan-500/30 rounded-lg p-4 overflow-hidden group hover:shadow-[0_0_20px_rgba(6,182,212,0.4)] transition-all duration-300\"\n                    whileHover={{ scale: 1.05 }}\n                  >\n                    <motion.div\n                      className=\"absolute inset-0 bg-gradient-to-r from-cyan-500/0 via-cyan-500/20 to-cyan-500/0\"\n                      animate={{\n                        x: ['-100%', '200%']\n                      }}\n                      transition={{\n                        duration: 3,\n                        repeat: Infinity,\n                        ease: 'linear'\n                      }}\n                    />\n                    <div className=\"relative space-y-1\">\n                      <div className=\"text-xs text-cyan-400 uppercase tracking-wider font-semibold\">Comparisons</div>\n                      <motion.div\n                        className=\"text-2xl font-bold text-cyan-300 font-mono\"\n                        key={steps[currentStep]?.comparingIndices.length || 0}\n                        initial={{ scale: 1.2, color: '#67e8f9' }}\n                        animate={{ scale: 1, color: '#67e8f9' }}\n                        transition={{ duration: 0.2 }}\n                      >\n                        {currentStep}\n                      </motion.div>\n                    </div>\n                  </motion.div>\n\n                  {/* Swaps */}\n                  <motion.div\n                    className=\"relative bg-gradient-to-br from-pink-500/10 to-pink-600/5 border border-pink-500/30 rounded-lg p-4 overflow-hidden group hover:shadow-[0_0_20px_rgba(236,72,153,0.4)] transition-all duration-300\"\n                    whileHover={{ scale: 1.05 }}\n                  >\n                    <motion.div\n                      className=\"absolute inset-0 bg-gradient-to-r from-pink-500/0 via-pink-500/20 to-pink-500/0\"\n                      animate={{\n                        x: ['-100%', '200%']\n                      }}\n                      transition={{\n                        duration: 3,\n                        repeat: Infinity,\n                        ease: 'linear',\n                        delay: 0.5\n                      }}\n                    />\n                    <div className=\"relative space-y-1\">\n                      <div className=\"text-xs text-pink-400 uppercase tracking-wider font-semibold\">Swaps</div>\n                      <motion.div\n                        className=\"text-2xl font-bold text-pink-300 font-mono\"\n                        key={steps[currentStep]?.swappingIndices.length || 0}\n                        initial={{ scale: 1.2, color: '#f9a8d4' }}\n                        animate={{ scale: 1, color: '#f9a8d4' }}\n                        transition={{ duration: 0.2 }}\n                      >\n                        {steps.slice(0, currentStep + 1).filter(s => s.swappingIndices.length > 0).length}\n                      </motion.div>\n                    </div>\n                  </motion.div>\n\n                  {/* Current Step */}\n                  <motion.div\n                    className=\"relative bg-gradient-to-br from-purple-500/10 to-purple-600/5 border border-purple-500/30 rounded-lg p-4 overflow-hidden group hover:shadow-[0_0_20px_rgba(168,85,247,0.4)] transition-all duration-300\"\n                    whileHover={{ scale: 1.05 }}\n                  >\n                    <motion.div\n                      className=\"absolute inset-0 bg-gradient-to-r from-purple-500/0 via-purple-500/20 to-purple-500/0\"\n                      animate={{\n                        x: ['-100%', '200%']\n                      }}\n                      transition={{\n                        duration: 3,\n                        repeat: Infinity,\n                        ease: 'linear',\n                        delay: 1\n                      }}\n                    />\n                    <div className=\"relative space-y-1\">\n                      <div className=\"text-xs text-purple-400 uppercase tracking-wider font-semibold\">Step</div>\n                      <div className=\"text-2xl font-bold text-purple-300 font-mono\">\n                        {currentStep + 1}\n                        <span className=\"text-sm text-purple-400/70\">/{steps.length}</span>\n                      </div>\n                    </div>\n                  </motion.div>\n\n                  {/* Sorted Elements */}\n                  <motion.div\n                    className=\"relative bg-gradient-to-br from-green-500/10 to-green-600/5 border border-green-500/30 rounded-lg p-4 overflow-hidden group hover:shadow-[0_0_20px_rgba(34,197,94,0.4)] transition-all duration-300\"\n                    whileHover={{ scale: 1.05 }}\n                  >\n                    <motion.div\n                      className=\"absolute inset-0 bg-gradient-to-r from-green-500/0 via-green-500/20 to-green-500/0\"\n                      animate={{\n                        x: ['-100%', '200%']\n                      }}\n                      transition={{\n                        duration: 3,\n                        repeat: Infinity,\n                        ease: 'linear',\n                        delay: 1.5\n                      }}\n                    />\n                    <div className=\"relative space-y-1\">\n                      <div className=\"text-xs text-green-400 uppercase tracking-wider font-semibold\">Sorted</div>\n                      <div className=\"text-2xl font-bold text-green-300 font-mono\">\n                        {steps[currentStep]?.sortedIndices.length || 0}\n                        <span className=\"text-sm text-green-400/70\">/{array.length}</span>\n                      </div>\n                    </div>\n                  </motion.div>\n                </div>\n\n                {/* Status Indicator */}\n                <div className=\"pt-3 border-t border-purple-500/20\">\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-xs text-gray-400 uppercase tracking-wider\">Status</span>\n                    <div className=\"flex items-center gap-2\">\n                      <motion.div\n                        className={`w-2 h-2 rounded-full ${\n                          isPlaying \n                            ? 'bg-green-400 shadow-[0_0_10px_rgba(34,197,94,0.8)]' \n                            : currentStep >= steps.length - 1 && steps.length > 0\n                            ? 'bg-cyan-400 shadow-[0_0_10px_rgba(6,182,212,0.8)]'\n                            : 'bg-gray-500 shadow-[0_0_10px_rgba(107,114,128,0.5)]'\n                        }`}\n                        animate={isPlaying ? {\n                          scale: [1, 1.3, 1],\n                          opacity: [1, 0.7, 1]\n                        } : {}}\n                        transition={{\n                          duration: 1,\n                          repeat: Infinity\n                        }}\n                      />\n                      <span className={`text-xs font-semibold ${\n                        isPlaying \n                          ? 'text-green-400' \n                          : currentStep >= steps.length - 1 && steps.length > 0\n                          ? 'text-cyan-400'\n                          : 'text-gray-400'\n                      }`}>\n                        {isPlaying \n                          ? 'Running' \n                          : currentStep >= steps.length - 1 && steps.length > 0\n                          ? 'Complete'\n                          : 'Ready'}\n                      </span>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </motion.div>\n          </div>\n\n          <div className=\"lg:col-span-3\">\n            <div className=\"bg-gray-900/50 backdrop-blur-lg border border-purple-500/30 rounded-xl p-8 shadow-2xl shadow-purple-500/20 min-h-[600px]\">\n              {array.length === 0 ? (\n                <motion.div\n                  initial={{ opacity: 0, scale: 0.8 }}\n                  animate={{ opacity: 1, scale: 1 }}\n                  className=\"absolute inset-0 flex flex-col items-center justify-center gap-6\"\n                >\n                  <motion.div\n                    animate={{\n                      rotate: [0, 360],\n                      scale: [1, 1.2, 1]\n                    }}\n                    transition={{ duration: 3, repeat: Infinity }}\n                    className=\"relative\"\n                  >\n                    <BarChart3 className=\"w-24 h-24 text-purple-400/50\" />\n                    <motion.div\n                      className=\"absolute inset-0 blur-xl bg-purple-500/30 rounded-full\"\n                      animate={{\n                        opacity: [0.3, 0.6, 0.3]\n                      }}\n                      transition={{ duration: 2, repeat: Infinity }}\n                    />\n                  </motion.div>\n                  <div className=\"text-center space-y-2\">\n                    <p className=\"text-2xl font-semibold text-purple-300\">\n                      Generate an array to begin\n                    </p>\n                    <p className=\"text-sm text-purple-400/70\">\n                      Click \"Generate New Array\" to start visualizing\n                    </p>\n                  </div>\n                </motion.div>\n              ) : (\n                <div className=\"relative w-full h-full flex items-end justify-center gap-1 px-4\">\n                  {/* Animated Bars */}\n                  {(steps.length > 0 && steps[currentStep] ? steps[currentStep].array : array).map((element, index) => {\n                    const maxValue = Math.max(...array.map(el => el.value));\n                    const heightPercentage = (element.value / maxValue) * 100;\n                    const barWidth = Math.max(8, Math.min(60, (100 / array.length) * 8));\n                    \n                    // Determine bar color based on state\n                    let barColor = NEON_COLORS[index % NEON_COLORS.length];\n                    let glowIntensity = 0.3;\n                    \n                    if (element.isSorted) {\n                      barColor = '#00ff00';\n                      glowIntensity = 0.6;\n                    } else if (element.isSwapping) {\n                      barColor = '#ff0066';\n                      glowIntensity = 0.8;\n                    } else if (element.isComparing) {\n                      barColor = '#ffff00';\n                      glowIntensity = 0.7;\n                    }\n\n                    return (\n                      <motion.div\n                        key={element.id}\n                        className=\"relative flex flex-col items-center justify-end\"\n                        style={{ width: `${barWidth}px` }}\n                        initial={{ opacity: 0, y: 50 }}\n                        animate={{ opacity: 1, y: 0 }}\n                        transition={{ delay: index * 0.02 }}\n                      >\n                        {/* Comparison Indicator */}\n                        {element.isComparing && (\n                          <motion.div\n                            className=\"absolute -top-12 left-1/2 -translate-x-1/2 z-20\"\n                            initial={{ opacity: 0, y: 10 }}\n                            animate={{ \n                              opacity: [0, 1, 1, 0],\n                              y: [-10, -20, -20, -30]\n                            }}\n                            transition={{ duration: 0.8, repeat: Infinity }}\n                          >\n                            <div className=\"relative\">\n                              <Zap className=\"w-6 h-6 text-yellow-400\" />\n                              <motion.div\n                                className=\"absolute inset-0 blur-md bg-yellow-400\"\n                                animate={{\n                                  opacity: [0.5, 1, 0.5]\n                                }}\n                                transition={{ duration: 0.5, repeat: Infinity }}\n                              />\n                            </div>\n                          </motion.div>\n                        )}\n\n                        {/* Swap Trail Effect */}\n                        {element.isSwapping && (\n                          <>\n                            <motion.div\n                              className=\"absolute inset-0 z-10\"\n                              initial={{ opacity: 0 }}\n                              animate={{ \n                                opacity: [0, 0.8, 0],\n                                scale: [1, 1.5, 2]\n                              }}\n                              transition={{ duration: 0.6, repeat: Infinity }}\n                            >\n                              <div \n                                className=\"w-full h-full rounded-lg\"\n                                style={{\n                                  background: `radial-gradient(circle, ${barColor}80 0%, transparent 70%)`,\n                                  filter: 'blur(8px)'\n                                }}\n                              />\n                            </motion.div>\n                            \n                            {/* Particle effects */}\n                            {[...Array(3)].map((_, i) => (\n                              <motion.div\n                                key={i}\n                                className=\"absolute top-0 left-1/2 w-2 h-2 rounded-full\"\n                                style={{ backgroundColor: barColor }}\n                                initial={{ opacity: 1, x: 0, y: 0 }}\n                                animate={{\n                                  opacity: [1, 0],\n                                  x: [0, (i - 1) * 30],\n                                  y: [0, -50 - i * 20]\n                                }}\n                                transition={{ \n                                  duration: 0.8,\n                                  repeat: Infinity,\n                                  delay: i * 0.1\n                                }}\n                              />\n                            ))}\n                          </>\n                        )}\n\n                        {/* The Bar */}\n                        <motion.div\n                          className=\"relative w-full rounded-t-lg overflow-hidden\"\n                          style={{\n                            height: `${heightPercentage}%`,\n                            minHeight: '20px'\n                          }}\n                          animate={{\n                            height: `${heightPercentage}%`,\n                            scale: element.isSwapping ? [1, 1.1, 1] : 1\n                          }}\n                          transition={{\n                            height: { duration: 0.3, ease: 'easeInOut' },\n                            scale: { duration: 0.3, repeat: element.isSwapping ? Infinity : 0 }\n                          }}\n                        >\n                          {/* Bar gradient background */}\n                          <motion.div\n                            className=\"absolute inset-0\"\n                            style={{\n                              background: `linear-gradient(to top, ${barColor}, ${barColor}dd)`,\n                            }}\n                            animate={{\n                              opacity: element.isSwapping ? [1, 0.7, 1] : 1\n                            }}\n                            transition={{ duration: 0.3, repeat: element.isSwapping ? Infinity : 0 }}\n                          />\n\n                          {/* Glow effect */}\n                          <motion.div\n                            className=\"absolute inset-0 blur-md\"\n                            style={{\n                              backgroundColor: barColor,\n                              opacity: glowIntensity\n                            }}\n                            animate={{\n                              opacity: element.isComparing || element.isSwapping \n                                ? [glowIntensity, glowIntensity * 1.5, glowIntensity]\n                                : glowIntensity\n                            }}\n                            transition={{ duration: 0.5, repeat: Infinity }}\n                          />\n\n                          {/* Shine effect */}\n                          <motion.div\n                            className=\"absolute inset-0 bg-gradient-to-r from-transparent via-white to-transparent opacity-20\"\n                            animate={{\n                              x: ['-100%', '200%']\n                            }}\n                            transition={{\n                              duration: 2,\n                              repeat: Infinity,\n                              repeatDelay: 1\n                            }}\n                          />\n\n                          {/* Value label */}\n                          {barWidth > 20 && (\n                            <motion.div\n                              className=\"absolute inset-0 flex items-center justify-center\"\n                              initial={{ opacity: 0 }}\n                              animate={{ opacity: 1 }}\n                              transition={{ delay: 0.3 }}\n                            >\n                              <span \n                                className=\"text-xs font-bold mix-blend-difference text-white\"\n                                style={{ \n                                  fontSize: `${Math.max(8, Math.min(14, barWidth / 3))}px`,\n                                  textShadow: '0 0 4px rgba(0,0,0,0.8)'\n                                }}\n                              >\n                                {element.value}\n                              </span>\n                            </motion.div>\n                          )}\n                        </motion.div>\n\n                        {/* Sorted checkmark */}\n                        {element.isSorted && (\n                          <motion.div\n                            className=\"absolute -top-8 left-1/2 -translate-x-1/2\"\n                            initial={{ opacity: 0, scale: 0 }}\n                            animate={{ opacity: 1, scale: 1 }}\n                            transition={{ type: 'spring', stiffness: 500, damping: 15 }}\n                          >\n                            <motion.div\n                              className=\"w-6 h-6 rounded-full bg-green-500 flex items-center justify-center\"\n                              animate={{\n                                boxShadow: [\n                                  '0 0 10px rgba(34, 197, 94, 0.5)',\n                                  '0 0 20px rgba(34, 197, 94, 0.8)',\n                                  '0 0 10px rgba(34, 197, 94, 0.5)'\n                                ]\n                              }}\n                              transition={{ duration: 1, repeat: Infinity }}\n                            >\n                              <svg\n                                className=\"w-4 h-4 text-white\"\n                                fill=\"none\"\n                                strokeLinecap=\"round\"\n                                strokeLinejoin=\"round\"\n                                strokeWidth=\"3\"\n                                viewBox=\"0 0 24 24\"\n                                stroke=\"currentColor\"\n                              >\n                                <path d=\"M5 13l4 4L19 7\" />\n                              </svg>\n                            </motion.div>\n                          </motion.div>\n                        )}\n                      </motion.div>\n                    );\n                  })}\n\n                  {/* Comparison Line Connector */}\n                  {steps.length > 0 && steps[currentStep] && steps[currentStep].comparingIndices.length === 2 && (\n                    <motion.svg\n                      className=\"absolute top-0 left-0 w-full h-full pointer-events-none z-10\"\n                      initial={{ opacity: 0 }}\n                      animate={{ opacity: 1 }}\n                    >\n                      <motion.line\n                        x1={`${(steps[currentStep].comparingIndices[0] / array.length) * 100}%`}\n                        y1=\"10%\"\n                        x2={`${(steps[currentStep].comparingIndices[1] / array.length) * 100}%`}\n                        y2=\"10%\"\n                        stroke=\"#ffff00\"\n                        strokeWidth=\"2\"\n                        strokeDasharray=\"5,5\"\n                        initial={{ pathLength: 0 }}\n                        animate={{ \n                          pathLength: 1,\n                          opacity: [0.5, 1, 0.5]\n                        }}\n                        transition={{ \n                          pathLength: { duration: 0.3 },\n                          opacity: { duration: 0.8, repeat: Infinity }\n                        }}\n                      />\n                    </motion.svg>\n                  )}\n                </div>\n              )}\n              \n              <div className=\"relative h-full flex items-end justify-center gap-1\">\n                {(steps.length > 0 && steps[currentStep]?.array || array).map((element, index) => {\n                  const maxValue = 100;\n                  const heightPercentage = (element.value / maxValue) * 100;\n                  const colorIndex = index % NEON_COLORS.length;\n                  const neonColor = NEON_COLORS[colorIndex];\n                  \n                  return (\n                    <motion.div\n                      key={element.id}\n                      layout\n                      initial={{ height: 0, opacity: 0 }}\n                      animate={{\n                        height: `${heightPercentage}%`,\n                        opacity: 1,\n                        scale: element.isComparing ? 1.1 : element.isSwapping ? 1.15 : 1,\n                        y: element.isSwapping ? -20 : 0,\n                        boxShadow: element.isComparing\n                          ? `0 0 30px ${neonColor}, 0 0 60px ${neonColor}`\n                          : element.isSwapping\n                          ? `0 0 40px ${neonColor}, 0 0 80px ${neonColor}, 0 0 120px ${neonColor}`\n                          : element.isSorted\n                          ? `0 0 20px #00ff00, 0 0 40px #00ff00`\n                          : `0 0 15px ${neonColor}`,\n                      }}\n                      transition={{\n                        height: { duration: 0.4, ease: 'easeOut' },\n                        scale: { duration: 0.3, ease: 'easeInOut' },\n                        y: { duration: 0.3, ease: 'easeInOut' },\n                        boxShadow: { duration: 0.3 },\n                        layout: { duration: 0.5, ease: 'easeInOut' }\n                      }}\n                      className=\"relative rounded-t-lg min-w-[8px] flex-1 max-w-[60px]\"\n                      style={{\n                        background: element.isSorted\n                          ? 'linear-gradient(to top, #00ff00, #00ff88)'\n                          : element.isSwapping\n                          ? `linear-gradient(to top, ${neonColor}, #ffffff)`\n                          : element.isComparing\n                          ? `linear-gradient(to top, ${neonColor}, ${neonColor}dd)`\n                          : `linear-gradient(to top, ${neonColor}cc, ${neonColor})`,\n                        border: `2px solid ${element.isSorted ? '#00ff00' : neonColor}`,\n                        position: 'relative',\n                      }}\n                    >\n                      {/* Glow effect overlay */}\n                      <motion.div\n                        className=\"absolute inset-0 rounded-t-lg\"\n                        animate={{\n                          opacity: element.isComparing || element.isSwapping ? [0.3, 0.7, 0.3] : 0.2,\n                        }}\n                        transition={{\n                          duration: 1,\n                          repeat: element.isComparing || element.isSwapping ? Infinity : 0,\n                        }}\n                        style={{\n                          background: `radial-gradient(circle at 50% 0%, ${neonColor}88, transparent)`,\n                        }}\n                      />\n                      \n                      {/* Value label */}\n                      {arraySize[0] <= 30 && (\n                        <motion.div\n                          className=\"absolute -top-8 left-1/2 -translate-x-1/2 text-xs font-bold whitespace-nowrap\"\n                          initial={{ opacity: 0 }}\n                          animate={{ \n                            opacity: element.isComparing || element.isSwapping ? 1 : 0.6,\n                            scale: element.isComparing || element.isSwapping ? 1.2 : 1,\n                          }}\n                          style={{\n                            color: element.isSorted ? '#00ff00' : neonColor,\n                            textShadow: `0 0 10px ${element.isSorted ? '#00ff00' : neonColor}`,\n                          }}\n                        >\n                          {element.value}\n                        </motion.div>\n                      )}\n                      \n                      {/* Particle effect for swapping */}\n                      {element.isSwapping && (\n                        <motion.div\n                          className=\"absolute inset-0 rounded-t-lg\"\n                          initial={{ opacity: 0 }}\n                          animate={{\n                            opacity: [0, 1, 0],\n                            scale: [1, 1.5, 2],\n                          }}\n                          transition={{\n                            duration: 0.6,\n                            ease: 'easeOut',\n                          }}\n                          style={{\n                            background: `radial-gradient(circle, ${neonColor}66, transparent)`,\n                            filter: 'blur(8px)',\n                          }}\n                        />\n                      )}\n                    </motion.div>\n                  );\n                })}\n              </div>\n\n                            {steps.length > 0 && currentStep < steps.length && (\n                <div className=\"absolute inset-0 pointer-events-none\">\n                  {steps[currentStep].comparingIndices.map((index, i) => {\n                    const totalElements = steps[currentStep].array.length;\n                    const barWidth = 100 / totalElements;\n                    const leftPosition = (index * barWidth) + (barWidth / 2);\n                    \n                    return (\n                      <motion.div\n                        key={`compare-${index}-${i}`}\n                        className=\"absolute\"\n                        style={{\n                          left: `${leftPosition}%`,\n                          top: '10%',\n                          transform: 'translateX(-50%)'\n                        }}\n                        initial={{ opacity: 0, y: -20, scale: 0 }}\n                        animate={{ \n                          opacity: [0, 1, 1, 0],\n                          y: [0, -10, -10, 0],\n                          scale: [0.8, 1.2, 1.2, 0.8]\n                        }}\n                        transition={{ \n                          duration: 1.5,\n                          repeat: Infinity,\n                          ease: \"easeInOut\"\n                        }}\n                      >\n                        <div className=\"relative\">\n                          <motion.div\n                            className=\"absolute inset-0 bg-cyan-400 rounded-full blur-xl\"\n                            animate={{\n                              scale: [1, 1.5, 1],\n                              opacity: [0.5, 0.8, 0.5]\n                            }}\n                            transition={{\n                              duration: 1,\n                              repeat: Infinity\n                            }}\n                          />\n                          <div className=\"relative w-8 h-8 bg-gradient-to-br from-cyan-400 to-blue-500 rounded-full flex items-center justify-center shadow-[0_0_30px_rgba(34,211,238,0.8)] border-2 border-cyan-300\">\n                            <motion.div\n                              className=\"w-3 h-3 bg-white rounded-full\"\n                              animate={{\n                                scale: [1, 0.5, 1]\n                              }}\n                              transition={{\n                                duration: 0.8,\n                                repeat: Infinity\n                              }}\n                            />\n                          </div>\n                          <motion.div\n                            className=\"absolute top-full mt-2 left-1/2 transform -translate-x-1/2 whitespace-nowrap\"\n                            animate={{\n                              opacity: [0.7, 1, 0.7]\n                            }}\n                            transition={{\n                              duration: 1,\n                              repeat: Infinity\n                            }}\n                          >\n                            <div className=\"bg-cyan-500/90 backdrop-blur-sm px-3 py-1 rounded-full border border-cyan-300 shadow-[0_0_20px_rgba(34,211,238,0.6)]\">\n                              <span className=\"text-xs font-bold text-white\">\n                                Comparing\n                              </span>\n                            </div>\n                          </motion.div>\n                        </div>\n                      </motion.div>\n                    );\n                  })}\n                </div>\n              )}\n              \n                            {steps.length > 0 && currentStep < steps.length && steps[currentStep].swappingIndices.length === 2 && (\n                <>\n                  {steps[currentStep].swappingIndices.map((index, i) => {\n                    const barWidth = 100 / array.length;\n                    const xPosition = index * barWidth + barWidth / 2;\n                    const element = steps[currentStep].array[index];\n                    const colorIndex = element.value % NEON_COLORS.length;\n                    const color = NEON_COLORS[colorIndex];\n                    \n                    return (\n                      <motion.div\n                        key={`swap-trail-${index}-${currentStep}-${i}`}\n                        className=\"absolute bottom-0 pointer-events-none\"\n                        style={{\n                          left: `${xPosition}%`,\n                          width: `${barWidth * 0.8}%`,\n                          height: `${(element.value / 100) * 100}%`,\n                          transform: 'translateX(-50%)',\n                        }}\n                        initial={{ opacity: 0.8, filter: 'blur(0px)' }}\n                        animate={{ \n                          opacity: [0.8, 0.4, 0],\n                          filter: ['blur(0px)', 'blur(8px)', 'blur(16px)'],\n                          scale: [1, 1.1, 1.2]\n                        }}\n                        transition={{ \n                          duration: 0.6,\n                          ease: 'easeOut'\n                        }}\n                      >\n                        <div\n                          className=\"w-full h-full rounded-t-lg\"\n                          style={{\n                            background: `linear-gradient(to top, ${color}, ${color}88)`,\n                            boxShadow: `0 0 30px ${color}88, inset 0 0 20px ${color}44`\n                          }}\n                        />\n                      </motion.div>\n                    );\n                  })}\n                  \n                  {/* Swap arc trail connecting the two swapping elements */}\n                  <motion.svg\n                    className=\"absolute inset-0 pointer-events-none\"\n                    style={{ width: '100%', height: '100%' }}\n                    initial={{ opacity: 0 }}\n                    animate={{ opacity: [0, 1, 0] }}\n                    transition={{ duration: 0.5 }}\n                  >\n                    <defs>\n                      <linearGradient id={`swap-gradient-${currentStep}`} x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"0%\">\n                        <stop offset=\"0%\" stopColor=\"#00ffff\" stopOpacity=\"0.8\" />\n                        <stop offset=\"50%\" stopColor=\"#ff00ff\" stopOpacity=\"0.8\" />\n                        <stop offset=\"100%\" stopColor=\"#00ffff\" stopOpacity=\"0.8\" />\n                      </linearGradient>\n                      <filter id={`motion-blur-${currentStep}`}>\n                        <feGaussianBlur in=\"SourceGraphic\" stdDeviation=\"3,0\" />\n                      </filter>\n                    </defs>\n                    {steps[currentStep].swappingIndices.length === 2 && (() => {\n                      const [idx1, idx2] = steps[currentStep].swappingIndices;\n                      const barWidth = 100 / array.length;\n                      const x1 = idx1 * barWidth + barWidth / 2;\n                      const x2 = idx2 * barWidth + barWidth / 2;\n                      const midY = 30;\n                      \n                      return (\n                        <motion.path\n                          d={`M ${x1}% 90% Q ${(x1 + x2) / 2}% ${midY}% ${x2}% 90%`}\n                          stroke={`url(#swap-gradient-${currentStep})`}\n                          strokeWidth=\"3\"\n                          fill=\"none\"\n                          strokeLinecap=\"round\"\n                          filter={`url(#motion-blur-${currentStep})`}\n                          initial={{ pathLength: 0, opacity: 0 }}\n                          animate={{ \n                            pathLength: [0, 1, 1],\n                            opacity: [0, 1, 0]\n                          }}\n                          transition={{ \n                            duration: 0.5,\n                            ease: 'easeInOut'\n                          }}\n                        />\n                      );\n                    })()}\n                  </motion.svg>\n                  \n                  {/* Particle burst effects at swap positions */}\n                  {steps[currentStep].swappingIndices.map((index) => {\n                    const barWidth = 100 / array.length;\n                    const xPosition = index * barWidth + barWidth / 2;\n                    \n                    return (\n                      <div key={`particles-${index}-${currentStep}`} className=\"absolute bottom-0 pointer-events-none\" style={{ left: `${xPosition}%`, transform: 'translateX(-50%)' }}>\n                        {[...Array(6)].map((_, particleIdx) => {\n                          const angle = (particleIdx * 60) * (Math.PI / 180);\n                          const distance = 40;\n                          const xOffset = Math.cos(angle) * distance;\n                          const yOffset = Math.sin(angle) * distance;\n                          \n                          return (\n                            <motion.div\n                              key={`particle-${particleIdx}`}\n                              className=\"absolute w-2 h-2 rounded-full\"\n                              style={{\n                                background: NEON_COLORS[particleIdx % NEON_COLORS.length],\n                                boxShadow: `0 0 10px ${NEON_COLORS[particleIdx % NEON_COLORS.length]}`\n                              }}\n                              initial={{ x: 0, y: 0, opacity: 1, scale: 1 }}\n                              animate={{ \n                                x: xOffset,\n                                y: -yOffset,\n                                opacity: 0,\n                                scale: 0\n                              }}\n                              transition={{ \n                                duration: 0.6,\n                                ease: 'easeOut'\n                              }}\n                            />\n                          );\n                        })}\n                      </div>\n                    );\n                  })}\n                </>\n              )}</parameter>\n            </div>\n          </div>\n        </div>\n\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ delay: 0.6, duration: 0.8 }}\n          className=\"bg-gray-900/50 backdrop-blur-lg border border-purple-500/30 rounded-xl p-6 shadow-2xl shadow-purple-500/20\"\n        >\n          <div className=\"flex items-center gap-2 mb-4\">\n            <BarChart3 className=\"w-5 h-5 text-purple-400\" />\n            <h3 className=\"text-lg font-semibold text-purple-300 uppercase tracking-wider\">\n              Legend\n            </h3>\n          </div>\n          \n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n            {/* Default State */}\n            <motion.div\n              className=\"flex items-center gap-3 p-3 bg-gray-800/50 rounded-lg border border-cyan-500/20 hover:border-cyan-500/50 transition-all duration-300\"\n              whileHover={{ scale: 1.05 }}\n            >\n              <motion.div\n                className=\"w-6 h-12 bg-gradient-to-t from-cyan-400 to-cyan-600 rounded shadow-[0_0_15px_rgba(0,255,255,0.6)]\"\n                animate={{\n                  boxShadow: [\n                    '0 0 15px rgba(0,255,255,0.6)',\n                    '0 0 25px rgba(0,255,255,0.8)',\n                    '0 0 15px rgba(0,255,255,0.6)'\n                  ]\n                }}\n                transition={{ duration: 2, repeat: Infinity }}\n              />\n              <div className=\"flex flex-col\">\n                <span className=\"text-sm font-semibold text-cyan-300\">Default</span>\n                <span className=\"text-xs text-gray-400\">Unsorted</span>\n              </div>\n            </motion.div>\n\n            {/* Comparing State */}\n            <motion.div\n              className=\"flex items-center gap-3 p-3 bg-gray-800/50 rounded-lg border border-yellow-500/20 hover:border-yellow-500/50 transition-all duration-300\"\n              whileHover={{ scale: 1.05 }}\n            >\n              <motion.div\n                className=\"w-6 h-12 bg-gradient-to-t from-yellow-400 to-yellow-600 rounded shadow-[0_0_15px_rgba(255,255,0,0.6)]\"\n                animate={{\n                  boxShadow: [\n                    '0 0 15px rgba(255,255,0,0.6)',\n                    '0 0 30px rgba(255,255,0,1)',\n                    '0 0 15px rgba(255,255,0,0.6)'\n                  ],\n                  scale: [1, 1.1, 1]\n                }}\n                transition={{ duration: 1.5, repeat: Infinity }}\n              />\n              <div className=\"flex flex-col\">\n                <span className=\"text-sm font-semibold text-yellow-300\">Comparing</span>\n                <span className=\"text-xs text-gray-400\">Active</span>\n              </div>\n            </motion.div>\n\n            {/* Swapping State */}\n            <motion.div\n              className=\"flex items-center gap-3 p-3 bg-gray-800/50 rounded-lg border border-pink-500/20 hover:border-pink-500/50 transition-all duration-300\"\n              whileHover={{ scale: 1.05 }}\n            >\n              <motion.div\n                className=\"w-6 h-12 bg-gradient-to-t from-pink-400 to-pink-600 rounded shadow-[0_0_15px_rgba(255,0,255,0.6)]\"\n                animate={{\n                  x: [-3, 3, -3],\n                  boxShadow: [\n                    '0 0 15px rgba(255,0,255,0.6)',\n                    '0 0 30px rgba(255,0,255,1)',\n                    '0 0 15px rgba(255,0,255,0.6)'\n                  ]\n                }}\n                transition={{ duration: 1, repeat: Infinity }}\n              />\n              <div className=\"flex flex-col\">\n                <span className=\"text-sm font-semibold text-pink-300\">Swapping</span>\n                <span className=\"text-xs text-gray-400\">Moving</span>\n              </div>\n            </motion.div>\n\n            {/* Sorted State */}\n            <motion.div\n              className=\"flex items-center gap-3 p-3 bg-gray-800/50 rounded-lg border border-green-500/20 hover:border-green-500/50 transition-all duration-300\"\n              whileHover={{ scale: 1.05 }}\n            >\n              <motion.div\n                className=\"w-6 h-12 bg-gradient-to-t from-green-400 to-green-600 rounded shadow-[0_0_15px_rgba(0,255,0,0.6)]\"\n                animate={{\n                  boxShadow: [\n                    '0 0 15px rgba(0,255,0,0.6)',\n                    '0 0 25px rgba(0,255,0,0.8)',\n                    '0 0 15px rgba(0,255,0,0.6)'\n                  ]\n                }}\n                transition={{ duration: 2, repeat: Infinity }}\n              />\n              <div className=\"flex flex-col\">\n                <span className=\"text-sm font-semibold text-green-300\">Sorted</span>\n                <span className=\"text-xs text-gray-400\">Complete</span>\n              </div>\n            </motion.div>\n          </div>\n\n          {/* Progress Indicator */}\n          {steps.length > 0 && (\n            <motion.div\n              initial={{ opacity: 0 }}\n              animate={{ opacity: 1 }}\n              className=\"mt-6 pt-6 border-t border-purple-500/20\"\n            >\n              <div className=\"flex items-center justify-between mb-2\">\n                <span className=\"text-sm text-purple-300 font-medium\">Progress</span>\n                <span className=\"text-sm text-purple-400 font-mono\">\n                  {currentStep} / {steps.length - 1}\n                </span>\n              </div>\n              <div className=\"relative h-2 bg-gray-800/50 rounded-full overflow-hidden border border-purple-500/30\">\n                <motion.div\n                  className=\"absolute inset-y-0 left-0 bg-gradient-to-r from-cyan-500 via-purple-500 to-pink-500 rounded-full\"\n                  initial={{ width: 0 }}\n                  animate={{\n                    width: `${steps.length > 1 ? (currentStep / (steps.length - 1)) * 100 : 0}%`\n                  }}\n                  transition={{ duration: 0.3 }}\n                />\n                <motion.div\n                  className=\"absolute inset-0 bg-gradient-to-r from-transparent via-white/30 to-transparent\"\n                  animate={{\n                    x: ['-100%', '200%']\n                  }}\n                  transition={{\n                    duration: 2,\n                    repeat: Infinity,\n                    ease: 'linear'\n                  }}\n                />\n              </div>\n            </motion.div>\n          )}\n        </motion.div>\n      </div>\n    </div>\n  );\n}",
    "error": null,
    "elapsed_time": 99.39971685409546,
    "success": true
  }
}