{
  "prompt_id": "markdown_editor",
  "prompt_name": "Premium Markdown Editor",
  "mode": "parallel",
  "run_number": 12,
  "timestamp": "2025-10-14T07:23:30.522417",
  "response_time": 94.35877203941345,
  "total_tokens": null,
  "response_content": "import { useState, useCallback } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Bold, Italic, Code, List, ListOrdered, Link, Image, Eye, EyeOff } from 'lucide-react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { useMemo } from 'react';\n\ninterface ToolbarButton {\n  id: string;\n  icon: any;\n  label: string;\n  action: string;\n}\n\nconst toolbarButtons: ToolbarButton[] = [\n  { id: 'bold', icon: Bold, label: 'Bold', action: '**text**' },\n  { id: 'italic', icon: Italic, label: 'Italic', action: '*text*' },\n  { id: 'code', icon: Code, label: 'Code', action: '`code`' },\n  { id: 'list', icon: List, label: 'Bullet List', action: '- item' },\n  { id: 'ordered', icon: ListOrdered, label: 'Numbered List', action: '1. item' },\n  { id: 'link', icon: Link, label: 'Link', action: '[text](url)' },\n  { id: 'image', icon: Image, label: 'Image', action: '![alt](url)' }\n];\n\nconst mockMarkdownContent = `# Welcome to Premium Markdown Editor\n\n## Features\n\nThis is a **bold** statement and this is *italic* text.\n\n### Code Blocks\n\n\\`\\`\\`javascript\nfunction greet(name) {\n  console.log(\\`Hello, \\${name}!\\`);\n  return true;\n}\n\\`\\`\\`\n\n\\`\\`\\`python\ndef calculate(x, y):\n    result = x + y\n    return result\n\\`\\`\\`\n\n### Lists\n\n- First item\n- Second item\n- Third item\n\n1. Numbered one\n2. Numbered two\n3. Numbered three\n\n### Inline Code\n\nUse \\`const variable = 'value'\\` for inline code.\n\n### Links and Images\n\n[Visit Example](https://example.com)\n\n> This is a blockquote with important information.\n\n---\n\n**End of document**\n`;\n\n// Markdown parser component\nconst MarkdownPreview = ({ content }: { content: string }) => {\n  const parsedContent = useMemo(() => {\n    const lines = content.split('\\n');\n    const elements: JSX.Element[] = [];\n    let i = 0;\n\n    while (i < lines.length) {\n      const line = lines[i];\n\n      // Headers\n      if (line.startsWith('# ')) {\n        elements.push(\n          <h1 key={i} className=\"text-4xl font-bold mb-4 text-blue-400\">\n            {parseInline(line.slice(2))}\n          </h1>\n        );\n        i++;\n      } else if (line.startsWith('## ')) {\n        elements.push(\n          <h2 key={i} className=\"text-3xl font-bold mb-3 text-purple-400\">\n            {parseInline(line.slice(3))}\n          </h2>\n        );\n        i++;\n      } else if (line.startsWith('### ')) {\n        elements.push(\n          <h3 key={i} className=\"text-2xl font-bold mb-2 text-pink-400\">\n            {parseInline(line.slice(4))}\n          </h3>\n        );\n        i++;\n      }\n      // Code blocks\n      else if (line.startsWith('```')) {\n        const language = line.slice(3).trim();\n        const codeLines: string[] = [];\n        i++;\n        while (i < lines.length && !lines[i].startsWith('```')) {\n          codeLines.push(lines[i]);\n          i++;\n        }\n        elements.push(\n          <div key={i} className=\"mb-4 rounded-lg overflow-hidden border border-gray-700\">\n            {language && (\n              <div className=\"bg-[#2d2d2d] px-4 py-2 text-xs font-mono text-gray-400 border-b border-gray-700\">\n                {language}\n              </div>\n            )}\n            <pre className=\"bg-[#1e1e1e] p-4 overflow-x-auto\">\n              <code className=\"font-mono text-sm\">\n                {highlightCode(codeLines.join('\\n'), language)}\n              </code>\n            </pre>\n          </div>\n        );\n        i++;\n      }\n      // Blockquote\n      else if (line.startsWith('> ')) {\n        elements.push(\n          <blockquote\n            key={i}\n            className=\"border-l-4 border-blue-500 pl-4 py-2 mb-4 bg-blue-500/10 text-gray-300 italic\"\n          >\n            {parseInline(line.slice(2))}\n          </blockquote>\n        );\n        i++;\n      }\n      // Horizontal rule\n      else if (line.trim() === '---') {\n        elements.push(\n          <hr key={i} className=\"my-6 border-gray-700\" />\n        );\n        i++;\n      }\n      // Unordered list\n      else if (line.startsWith('- ')) {\n        const listItems: string[] = [];\n        while (i < lines.length && lines[i].startsWith('- ')) {\n          listItems.push(lines[i].slice(2));\n          i++;\n        }\n        elements.push(\n          <ul key={i} className=\"list-disc list-inside mb-4 space-y-1 text-gray-300\">\n            {listItems.map((item, idx) => (\n              <li key={idx}>{parseInline(item)}</li>\n            ))}\n          </ul>\n        );\n      }\n      // Ordered list\n      else if (/^\\d+\\.\\s/.test(line)) {\n        const listItems: string[] = [];\n        while (i < lines.length && /^\\d+\\.\\s/.test(lines[i])) {\n          listItems.push(lines[i].replace(/^\\d+\\.\\s/, ''));\n          i++;\n        }\n        elements.push(\n          <ol key={i} className=\"list-decimal list-inside mb-4 space-y-1 text-gray-300\">\n            {listItems.map((item, idx) => (\n              <li key={idx}>{parseInline(item)}</li>\n            ))}\n          </ol>\n        );\n      }\n      // Empty line\n      else if (line.trim() === '') {\n        elements.push(<div key={i} className=\"h-2\" />);\n        i++;\n      }\n      // Paragraph\n      else {\n        elements.push(\n          <p key={i} className=\"mb-4 text-gray-300 leading-relaxed\">\n            {parseInline(line)}\n          </p>\n        );\n        i++;\n      }\n    }\n\n    return elements;\n  }, [content]);\n\n  return <div className=\"prose prose-invert max-w-none\">{parsedContent}</div>;\n};\n\n// Parse inline markdown (bold, italic, code, links, images)\nconst parseInline = (text: string): (string | JSX.Element)[] => {\n  const elements: (string | JSX.Element)[] = [];\n  let remaining = text;\n  let key = 0;\n\n  while (remaining.length > 0) {\n    // Bold **text**\n    const boldMatch = remaining.match(/\\*\\*(.+?)\\*\\*/);\n    if (boldMatch && boldMatch.index !== undefined) {\n      if (boldMatch.index > 0) {\n        elements.push(remaining.slice(0, boldMatch.index));\n      }\n      elements.push(\n        <strong key={key++} className=\"font-bold text-yellow-400\">\n          {boldMatch[1]}\n        </strong>\n      );\n      remaining = remaining.slice(boldMatch.index + boldMatch[0].length);\n      continue;\n    }\n\n    // Italic *text*\n    const italicMatch = remaining.match(/\\*(.+?)\\*/);\n    if (italicMatch && italicMatch.index !== undefined) {\n      if (italicMatch.index > 0) {\n        elements.push(remaining.slice(0, italicMatch.index));\n      }\n      elements.push(\n        <em key={key++} className=\"italic text-green-400\">\n          {italicMatch[1]}\n        </em>\n      );\n      remaining = remaining.slice(italicMatch.index + italicMatch[0].length);\n      continue;\n    }\n\n    // Inline code `code`\n    const codeMatch = remaining.match(/`(.+?)`/);\n    if (codeMatch && codeMatch.index !== undefined) {\n      if (codeMatch.index > 0) {\n        elements.push(remaining.slice(0, codeMatch.index));\n      }\n      elements.push(\n        <code\n          key={key++}\n          className=\"bg-[#2d2d2d] text-orange-400 px-2 py-1 rounded font-mono text-sm border border-gray-700\"\n        >\n          {codeMatch[1]}\n        </code>\n      );\n      remaining = remaining.slice(codeMatch.index + codeMatch[0].length);\n      continue;\n    }\n\n    // Links [text](url)\n    const linkMatch = remaining.match(/\\[(.+?)\\]\\((.+?)\\)/);\n    if (linkMatch && linkMatch.index !== undefined) {\n      if (linkMatch.index > 0) {\n        elements.push(remaining.slice(0, linkMatch.index));\n      }\n      elements.push(\n        <a\n          key={key++}\n          href={linkMatch[2]}\n          className=\"text-blue-400 hover:text-blue-300 underline\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          {linkMatch[1]}\n        </a>\n      );\n      remaining = remaining.slice(linkMatch.index + linkMatch[0].length);\n      continue;\n    }\n\n    // Images ![alt](url)\n    const imageMatch = remaining.match(/!\\[(.+?)\\]\\((.+?)\\)/);\n    if (imageMatch && imageMatch.index !== undefined) {\n      if (imageMatch.index > 0) {\n        elements.push(remaining.slice(0, imageMatch.index));\n      }\n      elements.push(\n        <img\n          key={key++}\n          src={imageMatch[2]}\n          alt={imageMatch[1]}\n          className=\"max-w-full h-auto rounded-lg border border-gray-700 my-2\"\n        />\n      );\n      remaining = remaining.slice(imageMatch.index + imageMatch[0].length);\n      continue;\n    }\n\n    // No more matches, add remaining text\n    elements.push(remaining);\n    break;\n  }\n\n  return elements;\n};\n\n// Syntax highlighter for code blocks\nconst highlightCode = (code: string, language: string): JSX.Element[] => {\n  const lines = code.split('\\n');\n  \n  return lines.map((line, idx) => {\n    const tokens: (string | JSX.Element)[] = [];\n    let remaining = line;\n    let key = 0;\n\n    if (language === 'javascript' || language === 'typescript') {\n      // Keywords\n      const keywords = ['function', 'const', 'let', 'var', 'return', 'if', 'else', 'for', 'while', 'class', 'import', 'export', 'default', 'async', 'await'];\n      const keywordPattern = new RegExp(`\\\\b(${keywords.join('|')})\\\\b`, 'g');\n      \n      while (remaining.length > 0) {\n        // Strings\n        const stringMatch = remaining.match(/(['\"`]).*?\\1/);\n        if (stringMatch && stringMatch.index === 0) {\n          tokens.push(\n            <span key={key++} className=\"text-[#ce9178]\">\n              {stringMatch[0]}\n            </span>\n          );\n          remaining = remaining.slice(stringMatch[0].length);\n          continue;\n        }\n\n        // Comments\n        const commentMatch = remaining.match(/\\/\\/.*/);\n        if (commentMatch && commentMatch.index === 0) {\n          tokens.push(\n            <span key={key++} className=\"text-[#6a9955]\">\n              {commentMatch[0]}\n            </span>\n          );\n          remaining = remaining.slice(commentMatch[0].length);\n          continue;\n        }\n\n        // Keywords\n        const keywordMatch = remaining.match(keywordPattern);\n        if (keywordMatch && keywordMatch.index === 0) {\n          tokens.push(\n            <span key={key++} className=\"text-[#569cd6]\">\n              {keywordMatch[0]}\n            </span>\n          );\n          remaining = remaining.slice(keywordMatch[0].length);\n          continue;\n        }\n\n        // Functions\n        const functionMatch = remaining.match(/\\b([a-zA-Z_$][a-zA-Z0-9_$]*)\\s*\\(/);\n        if (functionMatch && functionMatch.index === 0) {\n          tokens.push(\n            <span key={key++} className=\"text-[#dcdcaa]\">\n              {functionMatch[1]}\n            </span>\n          );\n          tokens.push('(');\n          remaining = remaining.slice(functionMatch[0].length);\n          continue;\n        }\n\n        // Numbers\n        const numberMatch = remaining.match(/\\b\\d+(\\.\\d+)?\\b/);\n        if (numberMatch && numberMatch.index === 0) {\n          tokens.push(\n            <span key={key++} className=\"text-[#b5cea8]\">\n              {numberMatch[0]}\n            </span>\n          );\n          remaining = remaining.slice(numberMatch[0].length);\n          continue;\n        }\n\n        tokens.push(remaining[0]);\n        remaining = remaining.slice(1);\n      }\n    } else if (language === 'python') {\n      const keywords = ['def', 'return', 'if', 'else', 'for', 'while', 'class', 'import', 'from', 'as', 'try', 'except'];\n      const keywordPattern = new RegExp(`\\\\b(${keywords.join('|')})\\\\b`, 'g');\n      \n      while (remaining.length > 0) {\n        // Strings\n        const stringMatch = remaining.match(/(['\"]).*?\\1/);\n        if (stringMatch && stringMatch.index === 0) {\n          tokens.push(\n            <span key={key++} className=\"text-[#ce9178]\">\n              {stringMatch[0]}\n            </span>\n          );\n          remaining = remaining.slice(stringMatch[0].length);\n          continue;\n        }\n\n        // Comments\n        const commentMatch = remaining.match(/#.*/);\n        if (commentMatch && commentMatch.index === 0) {\n          tokens.push(\n            <span key={key++} className=\"text-[#6a9955]\">\n              {commentMatch[0]}\n            </span>\n          );\n          remaining = remaining.slice(commentMatch[0].length);\n          continue;\n        }\n\n        // Keywords\n        const keywordMatch = remaining.match(keywordPattern);\n        if (keywordMatch && keywordMatch.index === 0) {\n          tokens.push(\n            <span key={key++} className=\"text-[#569cd6]\">\n              {keywordMatch[0]}\n            </span>\n          );\n          remaining = remaining.slice(keywordMatch[0].length);\n          continue;\n        }\n\n        // Functions\n        const functionMatch = remaining.match(/\\b([a-zA-Z_][a-zA-Z0-9_]*)\\s*\\(/);\n        if (functionMatch && functionMatch.index === 0) {\n          tokens.push(\n            <span key={key++} className=\"text-[#dcdcaa]\">\n              {functionMatch[1]}\n            </span>\n          );\n          tokens.push('(');\n          remaining = remaining.slice(functionMatch[0].length);\n          continue;\n        }\n\n        // Numbers\n        const numberMatch = remaining.match(/\\b\\d+(\\.\\d+)?\\b/);\n        if (numberMatch && numberMatch.index === 0) {\n          tokens.push(\n            <span key={key++} className=\"text-[#b5cea8]\">\n              {numberMatch[0]}\n            </span>\n          );\n          remaining = remaining.slice(numberMatch[0].length);\n          continue;\n        }\n\n        tokens.push(remaining[0]);\n        remaining = remaining.slice(1);\n      }\n    } else {\n      // Default: no highlighting\n      tokens.push(line);\n    }\n\n    return (\n      <div key={idx}>\n        {tokens.length > 0 ? tokens : '\\n'}\n      </div>\n    );\n  });\n};\n\nexport default function MarkdownEditor() {\n  const [markdown, setMarkdown] = useState(mockMarkdownContent);\n  const [showPreview, setShowPreview] = useState(true);\n  const [cursorPosition, setCursorPosition] = useState(0);\n\n  const handleMarkdownChange = useCallback((e: React.ChangeEvent<HTMLTextAreaElement>) => {\n    setMarkdown(e.target.value);\n    setCursorPosition(e.target.selectionStart);\n  }, []);\n\n  const togglePreview = useCallback(() => {\n    setShowPreview(prev => !prev);\n  }, []);\n\n  const handleToolbarAction = useCallback((action: string) => {\n    const textareaRef = document.querySelector('textarea') as HTMLTextAreaElement;\n    if (!textareaRef) return;\n\n    const start = cursorPosition;\n    const end = cursorPosition;\n    const textBefore = markdown.substring(0, start);\n    const textAfter = markdown.substring(end);\n    \n    // Insert the markdown syntax at cursor position\n    const newMarkdown = textBefore + action + textAfter;\n    setMarkdown(newMarkdown);\n    \n    // Calculate new cursor position (after inserted text)\n    const newCursorPos = start + action.length;\n    \n    // Update cursor position and focus textarea\n    setTimeout(() => {\n      textareaRef.focus();\n      textareaRef.setSelectionRange(newCursorPos, newCursorPos);\n      setCursorPosition(newCursorPos);\n    }, 0);\n  }, [markdown, cursorPosition]);\n\n\n  return (\n    <div className=\"min-h-screen bg-[#1e1e1e] text-gray-100\">\n      <div className=\"container mx-auto px-4 py-6\">\n        {/* Header */}\n        <div className=\"mb-6 flex items-center justify-between\">\n          <h1 className=\"text-3xl font-bold bg-gradient-to-r from-blue-400 to-purple-500 bg-clip-text text-transparent\">\n            Premium Markdown Editor\n          </h1>\n          <Button\n            onClick={togglePreview}\n            variant=\"outline\"\n            className=\"bg-[#2d2d2d] border-gray-700 hover:bg-[#3d3d3d] text-gray-100\"\n          >\n            {showPreview ? <EyeOff className=\"w-4 h-4 mr-2\" /> : <Eye className=\"w-4 h-4 mr-2\" />}\n            {showPreview ? 'Hide Preview' : 'Show Preview'}\n          </Button>\n        </div>\n\n        \n        {/* Floating Toolbar */}\n        <motion.div\n          initial={{ opacity: 0, y: -20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.3 }}\n          className=\"mb-4 bg-[#2d2d2d] border border-gray-700 rounded-lg p-2 shadow-xl\"\n        >\n          <div className=\"flex items-center gap-1 flex-wrap\">\n            {toolbarButtons.map((button) => {\n              const Icon = button.icon;\n              return (\n                <motion.div\n                  key={button.id}\n                  whileHover={{ scale: 1.05 }}\n                  whileTap={{ scale: 0.95 }}\n                >\n                  <Button\n                    onClick={() => handleToolbarAction(button.action)}\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    className=\"h-9 w-9 p-0 hover:bg-[#3d3d3d] hover:text-blue-400 transition-colors duration-200\"\n                    title={button.label}\n                  >\n                    <Icon className=\"w-4 h-4\" />\n                  </Button>\n                </motion.div>\n              );\n            })}\n          </div>\n        </motion.div>\n\n        {/* Editor Layout */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n          {/* Editor Panel */}\n          <motion.div\n            layout\n            className=\"relative\"\n            initial={{ opacity: 0, x: -20 }}\n            animate={{ opacity: 1, x: 0 }}\n            transition={{ duration: 0.3 }}\n          >\n            <div className=\"bg-[#1e1e1e] border border-gray-800 rounded-lg overflow-hidden shadow-2xl\">\n              <div className=\"bg-[#2d2d2d] px-4 py-2 border-b border-gray-800 flex items-center justify-between\">\n                <span className=\"text-sm font-medium text-gray-400\">Editor</span>\n                <div className=\"flex gap-2\">\n                  <div className=\"w-3 h-3 rounded-full bg-red-500\"></div>\n                  <div className=\"w-3 h-3 rounded-full bg-yellow-500\"></div>\n                  <div className=\"w-3 h-3 rounded-full bg-green-500\"></div>\n                </div>\n              </div>\n              <textarea\n                value={markdown}\n                onChange={handleMarkdownChange}\n                className=\"w-full h-[600px] bg-[#1e1e1e] text-gray-100 p-6 font-mono text-sm resize-none focus:outline-none focus:ring-2 focus:ring-blue-500/50\"\n                placeholder=\"Start typing your markdown...\"\n                spellCheck={false}\n              />\n            </div>\n          </motion.div>\n\n          {/* Preview Panel */}\n          <AnimatePresence mode=\"wait\">\n            {showPreview && (\n              <motion.div\n                key=\"preview\"\n                initial={{ opacity: 0, x: 20 }}\n                animate={{ opacity: 1, x: 0 }}\n                exit={{ opacity: 0, x: 20 }}\n                transition={{ duration: 0.3 }}\n                className=\"relative\"\n              >\n                <div className=\"bg-[#1e1e1e] border border-gray-800 rounded-lg overflow-hidden shadow-2xl\">\n                  <div className=\"bg-[#2d2d2d] px-4 py-2 border-b border-gray-800\">\n                    <span className=\"text-sm font-medium text-gray-400\">Preview</span>\n                  </div>\n                  <div className=\"p-6 h-[600px] overflow-y-auto\">\n                    <MarkdownPreview content={markdown} />\n                  </div>\n                </div>\n              </motion.div>\n            )}\n          </AnimatePresence>\n        </div>\n\n        {/* Stats Bar */}\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ delay: 0.2 }}\n          className=\"mt-6 bg-[#2d2d2d] border border-gray-800 rounded-lg p-4\"\n        >\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n            <div className=\"flex flex-col items-center justify-center p-3 bg-[#1e1e1e] rounded-lg border border-gray-800\">\n              <span className=\"text-2xl font-bold text-blue-400\">\n                {markdown.trim().split(/\\s+/).filter(word => word.length > 0).length}\n              </span>\n              <span className=\"text-xs text-gray-500 mt-1\">Words</span>\n            </div>\n            <div className=\"flex flex-col items-center justify-center p-3 bg-[#1e1e1e] rounded-lg border border-gray-800\">\n              <span className=\"text-2xl font-bold text-purple-400\">\n                {markdown.length}\n              </span>\n              <span className=\"text-xs text-gray-500 mt-1\">Characters</span>\n            </div>\n            <div className=\"flex flex-col items-center justify-center p-3 bg-[#1e1e1e] rounded-lg border border-gray-800\">\n              <span className=\"text-2xl font-bold text-green-400\">\n                {markdown.split('\\n').length}\n              </span>\n              <span className=\"text-xs text-gray-500 mt-1\">Lines</span>\n            </div>\n            <div className=\"flex flex-col items-center justify-center p-3 bg-[#1e1e1e] rounded-lg border border-gray-800\">\n              <span className=\"text-2xl font-bold text-orange-400\">\n                {Math.ceil(markdown.trim().split(/\\s+/).filter(word => word.length > 0).length / 200)} min\n              </span>\n              <span className=\"text-xs text-gray-500 mt-1\">Reading Time</span>\n            </div>\n          </div>\n        </motion.div>\n      </div>\n    </div>\n  );\n}",
  "error": null,
  "overall_score": 53,
  "code_quality_score": 14,
  "architecture_score": 12,
  "performance_score": 16,
  "accessibility_score": 11,
  "metadata": {
    "document_id": "eval_room_4a47585208d7",
    "prompt_category": "productivity",
    "prompt_complexity": 8.0
  },
  "raw_response": {
    "document_id": "eval_room_4a47585208d7",
    "mode": "parallel",
    "prompt": "Create a premium markdown editor with dark theme, syntax highlighting with vibrant colors, smooth live preview transitions, floating toolbar with hover effects, and code block styling like VS Code",
    "content": "import { useState, useCallback } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Bold, Italic, Code, List, ListOrdered, Link, Image, Eye, EyeOff } from 'lucide-react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { useMemo } from 'react';\n\ninterface ToolbarButton {\n  id: string;\n  icon: any;\n  label: string;\n  action: string;\n}\n\nconst toolbarButtons: ToolbarButton[] = [\n  { id: 'bold', icon: Bold, label: 'Bold', action: '**text**' },\n  { id: 'italic', icon: Italic, label: 'Italic', action: '*text*' },\n  { id: 'code', icon: Code, label: 'Code', action: '`code`' },\n  { id: 'list', icon: List, label: 'Bullet List', action: '- item' },\n  { id: 'ordered', icon: ListOrdered, label: 'Numbered List', action: '1. item' },\n  { id: 'link', icon: Link, label: 'Link', action: '[text](url)' },\n  { id: 'image', icon: Image, label: 'Image', action: '![alt](url)' }\n];\n\nconst mockMarkdownContent = `# Welcome to Premium Markdown Editor\n\n## Features\n\nThis is a **bold** statement and this is *italic* text.\n\n### Code Blocks\n\n\\`\\`\\`javascript\nfunction greet(name) {\n  console.log(\\`Hello, \\${name}!\\`);\n  return true;\n}\n\\`\\`\\`\n\n\\`\\`\\`python\ndef calculate(x, y):\n    result = x + y\n    return result\n\\`\\`\\`\n\n### Lists\n\n- First item\n- Second item\n- Third item\n\n1. Numbered one\n2. Numbered two\n3. Numbered three\n\n### Inline Code\n\nUse \\`const variable = 'value'\\` for inline code.\n\n### Links and Images\n\n[Visit Example](https://example.com)\n\n> This is a blockquote with important information.\n\n---\n\n**End of document**\n`;\n\n// Markdown parser component\nconst MarkdownPreview = ({ content }: { content: string }) => {\n  const parsedContent = useMemo(() => {\n    const lines = content.split('\\n');\n    const elements: JSX.Element[] = [];\n    let i = 0;\n\n    while (i < lines.length) {\n      const line = lines[i];\n\n      // Headers\n      if (line.startsWith('# ')) {\n        elements.push(\n          <h1 key={i} className=\"text-4xl font-bold mb-4 text-blue-400\">\n            {parseInline(line.slice(2))}\n          </h1>\n        );\n        i++;\n      } else if (line.startsWith('## ')) {\n        elements.push(\n          <h2 key={i} className=\"text-3xl font-bold mb-3 text-purple-400\">\n            {parseInline(line.slice(3))}\n          </h2>\n        );\n        i++;\n      } else if (line.startsWith('### ')) {\n        elements.push(\n          <h3 key={i} className=\"text-2xl font-bold mb-2 text-pink-400\">\n            {parseInline(line.slice(4))}\n          </h3>\n        );\n        i++;\n      }\n      // Code blocks\n      else if (line.startsWith('```')) {\n        const language = line.slice(3).trim();\n        const codeLines: string[] = [];\n        i++;\n        while (i < lines.length && !lines[i].startsWith('```')) {\n          codeLines.push(lines[i]);\n          i++;\n        }\n        elements.push(\n          <div key={i} className=\"mb-4 rounded-lg overflow-hidden border border-gray-700\">\n            {language && (\n              <div className=\"bg-[#2d2d2d] px-4 py-2 text-xs font-mono text-gray-400 border-b border-gray-700\">\n                {language}\n              </div>\n            )}\n            <pre className=\"bg-[#1e1e1e] p-4 overflow-x-auto\">\n              <code className=\"font-mono text-sm\">\n                {highlightCode(codeLines.join('\\n'), language)}\n              </code>\n            </pre>\n          </div>\n        );\n        i++;\n      }\n      // Blockquote\n      else if (line.startsWith('> ')) {\n        elements.push(\n          <blockquote\n            key={i}\n            className=\"border-l-4 border-blue-500 pl-4 py-2 mb-4 bg-blue-500/10 text-gray-300 italic\"\n          >\n            {parseInline(line.slice(2))}\n          </blockquote>\n        );\n        i++;\n      }\n      // Horizontal rule\n      else if (line.trim() === '---') {\n        elements.push(\n          <hr key={i} className=\"my-6 border-gray-700\" />\n        );\n        i++;\n      }\n      // Unordered list\n      else if (line.startsWith('- ')) {\n        const listItems: string[] = [];\n        while (i < lines.length && lines[i].startsWith('- ')) {\n          listItems.push(lines[i].slice(2));\n          i++;\n        }\n        elements.push(\n          <ul key={i} className=\"list-disc list-inside mb-4 space-y-1 text-gray-300\">\n            {listItems.map((item, idx) => (\n              <li key={idx}>{parseInline(item)}</li>\n            ))}\n          </ul>\n        );\n      }\n      // Ordered list\n      else if (/^\\d+\\.\\s/.test(line)) {\n        const listItems: string[] = [];\n        while (i < lines.length && /^\\d+\\.\\s/.test(lines[i])) {\n          listItems.push(lines[i].replace(/^\\d+\\.\\s/, ''));\n          i++;\n        }\n        elements.push(\n          <ol key={i} className=\"list-decimal list-inside mb-4 space-y-1 text-gray-300\">\n            {listItems.map((item, idx) => (\n              <li key={idx}>{parseInline(item)}</li>\n            ))}\n          </ol>\n        );\n      }\n      // Empty line\n      else if (line.trim() === '') {\n        elements.push(<div key={i} className=\"h-2\" />);\n        i++;\n      }\n      // Paragraph\n      else {\n        elements.push(\n          <p key={i} className=\"mb-4 text-gray-300 leading-relaxed\">\n            {parseInline(line)}\n          </p>\n        );\n        i++;\n      }\n    }\n\n    return elements;\n  }, [content]);\n\n  return <div className=\"prose prose-invert max-w-none\">{parsedContent}</div>;\n};\n\n// Parse inline markdown (bold, italic, code, links, images)\nconst parseInline = (text: string): (string | JSX.Element)[] => {\n  const elements: (string | JSX.Element)[] = [];\n  let remaining = text;\n  let key = 0;\n\n  while (remaining.length > 0) {\n    // Bold **text**\n    const boldMatch = remaining.match(/\\*\\*(.+?)\\*\\*/);\n    if (boldMatch && boldMatch.index !== undefined) {\n      if (boldMatch.index > 0) {\n        elements.push(remaining.slice(0, boldMatch.index));\n      }\n      elements.push(\n        <strong key={key++} className=\"font-bold text-yellow-400\">\n          {boldMatch[1]}\n        </strong>\n      );\n      remaining = remaining.slice(boldMatch.index + boldMatch[0].length);\n      continue;\n    }\n\n    // Italic *text*\n    const italicMatch = remaining.match(/\\*(.+?)\\*/);\n    if (italicMatch && italicMatch.index !== undefined) {\n      if (italicMatch.index > 0) {\n        elements.push(remaining.slice(0, italicMatch.index));\n      }\n      elements.push(\n        <em key={key++} className=\"italic text-green-400\">\n          {italicMatch[1]}\n        </em>\n      );\n      remaining = remaining.slice(italicMatch.index + italicMatch[0].length);\n      continue;\n    }\n\n    // Inline code `code`\n    const codeMatch = remaining.match(/`(.+?)`/);\n    if (codeMatch && codeMatch.index !== undefined) {\n      if (codeMatch.index > 0) {\n        elements.push(remaining.slice(0, codeMatch.index));\n      }\n      elements.push(\n        <code\n          key={key++}\n          className=\"bg-[#2d2d2d] text-orange-400 px-2 py-1 rounded font-mono text-sm border border-gray-700\"\n        >\n          {codeMatch[1]}\n        </code>\n      );\n      remaining = remaining.slice(codeMatch.index + codeMatch[0].length);\n      continue;\n    }\n\n    // Links [text](url)\n    const linkMatch = remaining.match(/\\[(.+?)\\]\\((.+?)\\)/);\n    if (linkMatch && linkMatch.index !== undefined) {\n      if (linkMatch.index > 0) {\n        elements.push(remaining.slice(0, linkMatch.index));\n      }\n      elements.push(\n        <a\n          key={key++}\n          href={linkMatch[2]}\n          className=\"text-blue-400 hover:text-blue-300 underline\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          {linkMatch[1]}\n        </a>\n      );\n      remaining = remaining.slice(linkMatch.index + linkMatch[0].length);\n      continue;\n    }\n\n    // Images ![alt](url)\n    const imageMatch = remaining.match(/!\\[(.+?)\\]\\((.+?)\\)/);\n    if (imageMatch && imageMatch.index !== undefined) {\n      if (imageMatch.index > 0) {\n        elements.push(remaining.slice(0, imageMatch.index));\n      }\n      elements.push(\n        <img\n          key={key++}\n          src={imageMatch[2]}\n          alt={imageMatch[1]}\n          className=\"max-w-full h-auto rounded-lg border border-gray-700 my-2\"\n        />\n      );\n      remaining = remaining.slice(imageMatch.index + imageMatch[0].length);\n      continue;\n    }\n\n    // No more matches, add remaining text\n    elements.push(remaining);\n    break;\n  }\n\n  return elements;\n};\n\n// Syntax highlighter for code blocks\nconst highlightCode = (code: string, language: string): JSX.Element[] => {\n  const lines = code.split('\\n');\n  \n  return lines.map((line, idx) => {\n    const tokens: (string | JSX.Element)[] = [];\n    let remaining = line;\n    let key = 0;\n\n    if (language === 'javascript' || language === 'typescript') {\n      // Keywords\n      const keywords = ['function', 'const', 'let', 'var', 'return', 'if', 'else', 'for', 'while', 'class', 'import', 'export', 'default', 'async', 'await'];\n      const keywordPattern = new RegExp(`\\\\b(${keywords.join('|')})\\\\b`, 'g');\n      \n      while (remaining.length > 0) {\n        // Strings\n        const stringMatch = remaining.match(/(['\"`]).*?\\1/);\n        if (stringMatch && stringMatch.index === 0) {\n          tokens.push(\n            <span key={key++} className=\"text-[#ce9178]\">\n              {stringMatch[0]}\n            </span>\n          );\n          remaining = remaining.slice(stringMatch[0].length);\n          continue;\n        }\n\n        // Comments\n        const commentMatch = remaining.match(/\\/\\/.*/);\n        if (commentMatch && commentMatch.index === 0) {\n          tokens.push(\n            <span key={key++} className=\"text-[#6a9955]\">\n              {commentMatch[0]}\n            </span>\n          );\n          remaining = remaining.slice(commentMatch[0].length);\n          continue;\n        }\n\n        // Keywords\n        const keywordMatch = remaining.match(keywordPattern);\n        if (keywordMatch && keywordMatch.index === 0) {\n          tokens.push(\n            <span key={key++} className=\"text-[#569cd6]\">\n              {keywordMatch[0]}\n            </span>\n          );\n          remaining = remaining.slice(keywordMatch[0].length);\n          continue;\n        }\n\n        // Functions\n        const functionMatch = remaining.match(/\\b([a-zA-Z_$][a-zA-Z0-9_$]*)\\s*\\(/);\n        if (functionMatch && functionMatch.index === 0) {\n          tokens.push(\n            <span key={key++} className=\"text-[#dcdcaa]\">\n              {functionMatch[1]}\n            </span>\n          );\n          tokens.push('(');\n          remaining = remaining.slice(functionMatch[0].length);\n          continue;\n        }\n\n        // Numbers\n        const numberMatch = remaining.match(/\\b\\d+(\\.\\d+)?\\b/);\n        if (numberMatch && numberMatch.index === 0) {\n          tokens.push(\n            <span key={key++} className=\"text-[#b5cea8]\">\n              {numberMatch[0]}\n            </span>\n          );\n          remaining = remaining.slice(numberMatch[0].length);\n          continue;\n        }\n\n        tokens.push(remaining[0]);\n        remaining = remaining.slice(1);\n      }\n    } else if (language === 'python') {\n      const keywords = ['def', 'return', 'if', 'else', 'for', 'while', 'class', 'import', 'from', 'as', 'try', 'except'];\n      const keywordPattern = new RegExp(`\\\\b(${keywords.join('|')})\\\\b`, 'g');\n      \n      while (remaining.length > 0) {\n        // Strings\n        const stringMatch = remaining.match(/(['\"]).*?\\1/);\n        if (stringMatch && stringMatch.index === 0) {\n          tokens.push(\n            <span key={key++} className=\"text-[#ce9178]\">\n              {stringMatch[0]}\n            </span>\n          );\n          remaining = remaining.slice(stringMatch[0].length);\n          continue;\n        }\n\n        // Comments\n        const commentMatch = remaining.match(/#.*/);\n        if (commentMatch && commentMatch.index === 0) {\n          tokens.push(\n            <span key={key++} className=\"text-[#6a9955]\">\n              {commentMatch[0]}\n            </span>\n          );\n          remaining = remaining.slice(commentMatch[0].length);\n          continue;\n        }\n\n        // Keywords\n        const keywordMatch = remaining.match(keywordPattern);\n        if (keywordMatch && keywordMatch.index === 0) {\n          tokens.push(\n            <span key={key++} className=\"text-[#569cd6]\">\n              {keywordMatch[0]}\n            </span>\n          );\n          remaining = remaining.slice(keywordMatch[0].length);\n          continue;\n        }\n\n        // Functions\n        const functionMatch = remaining.match(/\\b([a-zA-Z_][a-zA-Z0-9_]*)\\s*\\(/);\n        if (functionMatch && functionMatch.index === 0) {\n          tokens.push(\n            <span key={key++} className=\"text-[#dcdcaa]\">\n              {functionMatch[1]}\n            </span>\n          );\n          tokens.push('(');\n          remaining = remaining.slice(functionMatch[0].length);\n          continue;\n        }\n\n        // Numbers\n        const numberMatch = remaining.match(/\\b\\d+(\\.\\d+)?\\b/);\n        if (numberMatch && numberMatch.index === 0) {\n          tokens.push(\n            <span key={key++} className=\"text-[#b5cea8]\">\n              {numberMatch[0]}\n            </span>\n          );\n          remaining = remaining.slice(numberMatch[0].length);\n          continue;\n        }\n\n        tokens.push(remaining[0]);\n        remaining = remaining.slice(1);\n      }\n    } else {\n      // Default: no highlighting\n      tokens.push(line);\n    }\n\n    return (\n      <div key={idx}>\n        {tokens.length > 0 ? tokens : '\\n'}\n      </div>\n    );\n  });\n};\n\nexport default function MarkdownEditor() {\n  const [markdown, setMarkdown] = useState(mockMarkdownContent);\n  const [showPreview, setShowPreview] = useState(true);\n  const [cursorPosition, setCursorPosition] = useState(0);\n\n  const handleMarkdownChange = useCallback((e: React.ChangeEvent<HTMLTextAreaElement>) => {\n    setMarkdown(e.target.value);\n    setCursorPosition(e.target.selectionStart);\n  }, []);\n\n  const togglePreview = useCallback(() => {\n    setShowPreview(prev => !prev);\n  }, []);\n\n  const handleToolbarAction = useCallback((action: string) => {\n    const textareaRef = document.querySelector('textarea') as HTMLTextAreaElement;\n    if (!textareaRef) return;\n\n    const start = cursorPosition;\n    const end = cursorPosition;\n    const textBefore = markdown.substring(0, start);\n    const textAfter = markdown.substring(end);\n    \n    // Insert the markdown syntax at cursor position\n    const newMarkdown = textBefore + action + textAfter;\n    setMarkdown(newMarkdown);\n    \n    // Calculate new cursor position (after inserted text)\n    const newCursorPos = start + action.length;\n    \n    // Update cursor position and focus textarea\n    setTimeout(() => {\n      textareaRef.focus();\n      textareaRef.setSelectionRange(newCursorPos, newCursorPos);\n      setCursorPosition(newCursorPos);\n    }, 0);\n  }, [markdown, cursorPosition]);\n\n\n  return (\n    <div className=\"min-h-screen bg-[#1e1e1e] text-gray-100\">\n      <div className=\"container mx-auto px-4 py-6\">\n        {/* Header */}\n        <div className=\"mb-6 flex items-center justify-between\">\n          <h1 className=\"text-3xl font-bold bg-gradient-to-r from-blue-400 to-purple-500 bg-clip-text text-transparent\">\n            Premium Markdown Editor\n          </h1>\n          <Button\n            onClick={togglePreview}\n            variant=\"outline\"\n            className=\"bg-[#2d2d2d] border-gray-700 hover:bg-[#3d3d3d] text-gray-100\"\n          >\n            {showPreview ? <EyeOff className=\"w-4 h-4 mr-2\" /> : <Eye className=\"w-4 h-4 mr-2\" />}\n            {showPreview ? 'Hide Preview' : 'Show Preview'}\n          </Button>\n        </div>\n\n        \n        {/* Floating Toolbar */}\n        <motion.div\n          initial={{ opacity: 0, y: -20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.3 }}\n          className=\"mb-4 bg-[#2d2d2d] border border-gray-700 rounded-lg p-2 shadow-xl\"\n        >\n          <div className=\"flex items-center gap-1 flex-wrap\">\n            {toolbarButtons.map((button) => {\n              const Icon = button.icon;\n              return (\n                <motion.div\n                  key={button.id}\n                  whileHover={{ scale: 1.05 }}\n                  whileTap={{ scale: 0.95 }}\n                >\n                  <Button\n                    onClick={() => handleToolbarAction(button.action)}\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    className=\"h-9 w-9 p-0 hover:bg-[#3d3d3d] hover:text-blue-400 transition-colors duration-200\"\n                    title={button.label}\n                  >\n                    <Icon className=\"w-4 h-4\" />\n                  </Button>\n                </motion.div>\n              );\n            })}\n          </div>\n        </motion.div>\n\n        {/* Editor Layout */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n          {/* Editor Panel */}\n          <motion.div\n            layout\n            className=\"relative\"\n            initial={{ opacity: 0, x: -20 }}\n            animate={{ opacity: 1, x: 0 }}\n            transition={{ duration: 0.3 }}\n          >\n            <div className=\"bg-[#1e1e1e] border border-gray-800 rounded-lg overflow-hidden shadow-2xl\">\n              <div className=\"bg-[#2d2d2d] px-4 py-2 border-b border-gray-800 flex items-center justify-between\">\n                <span className=\"text-sm font-medium text-gray-400\">Editor</span>\n                <div className=\"flex gap-2\">\n                  <div className=\"w-3 h-3 rounded-full bg-red-500\"></div>\n                  <div className=\"w-3 h-3 rounded-full bg-yellow-500\"></div>\n                  <div className=\"w-3 h-3 rounded-full bg-green-500\"></div>\n                </div>\n              </div>\n              <textarea\n                value={markdown}\n                onChange={handleMarkdownChange}\n                className=\"w-full h-[600px] bg-[#1e1e1e] text-gray-100 p-6 font-mono text-sm resize-none focus:outline-none focus:ring-2 focus:ring-blue-500/50\"\n                placeholder=\"Start typing your markdown...\"\n                spellCheck={false}\n              />\n            </div>\n          </motion.div>\n\n          {/* Preview Panel */}\n          <AnimatePresence mode=\"wait\">\n            {showPreview && (\n              <motion.div\n                key=\"preview\"\n                initial={{ opacity: 0, x: 20 }}\n                animate={{ opacity: 1, x: 0 }}\n                exit={{ opacity: 0, x: 20 }}\n                transition={{ duration: 0.3 }}\n                className=\"relative\"\n              >\n                <div className=\"bg-[#1e1e1e] border border-gray-800 rounded-lg overflow-hidden shadow-2xl\">\n                  <div className=\"bg-[#2d2d2d] px-4 py-2 border-b border-gray-800\">\n                    <span className=\"text-sm font-medium text-gray-400\">Preview</span>\n                  </div>\n                  <div className=\"p-6 h-[600px] overflow-y-auto\">\n                    <MarkdownPreview content={markdown} />\n                  </div>\n                </div>\n              </motion.div>\n            )}\n          </AnimatePresence>\n        </div>\n\n        {/* Stats Bar */}\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ delay: 0.2 }}\n          className=\"mt-6 bg-[#2d2d2d] border border-gray-800 rounded-lg p-4\"\n        >\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n            <div className=\"flex flex-col items-center justify-center p-3 bg-[#1e1e1e] rounded-lg border border-gray-800\">\n              <span className=\"text-2xl font-bold text-blue-400\">\n                {markdown.trim().split(/\\s+/).filter(word => word.length > 0).length}\n              </span>\n              <span className=\"text-xs text-gray-500 mt-1\">Words</span>\n            </div>\n            <div className=\"flex flex-col items-center justify-center p-3 bg-[#1e1e1e] rounded-lg border border-gray-800\">\n              <span className=\"text-2xl font-bold text-purple-400\">\n                {markdown.length}\n              </span>\n              <span className=\"text-xs text-gray-500 mt-1\">Characters</span>\n            </div>\n            <div className=\"flex flex-col items-center justify-center p-3 bg-[#1e1e1e] rounded-lg border border-gray-800\">\n              <span className=\"text-2xl font-bold text-green-400\">\n                {markdown.split('\\n').length}\n              </span>\n              <span className=\"text-xs text-gray-500 mt-1\">Lines</span>\n            </div>\n            <div className=\"flex flex-col items-center justify-center p-3 bg-[#1e1e1e] rounded-lg border border-gray-800\">\n              <span className=\"text-2xl font-bold text-orange-400\">\n                {Math.ceil(markdown.trim().split(/\\s+/).filter(word => word.length > 0).length / 200)} min\n              </span>\n              <span className=\"text-xs text-gray-500 mt-1\">Reading Time</span>\n            </div>\n          </div>\n        </motion.div>\n      </div>\n    </div>\n  );\n}",
    "error": null,
    "elapsed_time": 94.35877203941345,
    "success": true
  }
}