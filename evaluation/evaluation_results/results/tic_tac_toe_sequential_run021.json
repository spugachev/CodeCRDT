{
  "prompt_id": "tic_tac_toe",
  "prompt_name": "Tic Tac Toe Game",
  "mode": "sequential",
  "run_number": 21,
  "timestamp": "2025-10-14T02:49:44.417242",
  "response_time": 44.370914459228516,
  "total_tokens": null,
  "response_content": "import { useState, useEffect } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { X, Circle, RotateCcw, Trophy, Zap } from 'lucide-react';\n\ntype Player = 'X' | 'O' | null;\ntype Board = Player[];\n\ninterface Score {\n  player: number;\n  ai: number;\n  draws: number;\n}\n\nconst WINNING_COMBINATIONS = [\n  [0, 1, 2],\n  [3, 4, 5],\n  [6, 7, 8],\n  [0, 3, 6],\n  [1, 4, 7],\n  [2, 5, 8],\n  [0, 4, 8],\n  [2, 4, 6],\n];\n\nexport default function TicTacToe() {\n  const [board, setBoard] = useState<Board>(Array(9).fill(null));\n  const [isPlayerTurn, setIsPlayerTurn] = useState(true);\n  const [winner, setWinner] = useState<Player | 'draw' | null>(null);\n  const [winningLine, setWinningLine] = useState<number[] | null>(null);\n  const [score, setScore] = useState<Score>({ player: 0, ai: 0, draws: 0 });\n  const [isThinking, setIsThinking] = useState(false);\n\n  const checkWinner = (currentBoard: Board): { winner: Player | 'draw' | null; line: number[] | null } => {\n    for (const combination of WINNING_COMBINATIONS) {\n      const [a, b, c] = combination;\n      if (currentBoard[a] && currentBoard[a] === currentBoard[b] && currentBoard[a] === currentBoard[c]) {\n        return { winner: currentBoard[a], line: combination };\n      }\n    }\n\n    if (currentBoard.every(cell => cell !== null)) {\n      return { winner: 'draw', line: null };\n    }\n\n    return { winner: null, line: null };\n  };\n\n  const minimax = (currentBoard: Board, depth: number, isMaximizing: boolean): number => {\n    const result = checkWinner(currentBoard);\n\n    if (result.winner === 'O') return 10 - depth;\n    if (result.winner === 'X') return depth - 10;\n    if (result.winner === 'draw') return 0;\n\n    if (isMaximizing) {\n      let bestScore = -Infinity;\n      for (let i = 0; i < 9; i++) {\n        if (currentBoard[i] === null) {\n          currentBoard[i] = 'O';\n          const score = minimax(currentBoard, depth + 1, false);\n          currentBoard[i] = null;\n          bestScore = Math.max(score, bestScore);\n        }\n      }\n      return bestScore;\n    } else {\n      let bestScore = Infinity;\n      for (let i = 0; i < 9; i++) {\n        if (currentBoard[i] === null) {\n          currentBoard[i] = 'X';\n          const score = minimax(currentBoard, depth + 1, true);\n          currentBoard[i] = null;\n          bestScore = Math.min(score, bestScore);\n        }\n      }\n      return bestScore;\n    }\n  };\n\n  const getBestMove = (currentBoard: Board): number => {\n    let bestScore = -Infinity;\n    let bestMove = -1;\n\n    for (let i = 0; i < 9; i++) {\n      if (currentBoard[i] === null) {\n        currentBoard[i] = 'O';\n        const score = minimax(currentBoard, 0, false);\n        currentBoard[i] = null;\n        if (score > bestScore) {\n          bestScore = score;\n          bestMove = i;\n        }\n      }\n    }\n\n    return bestMove;\n  };\n\n  const makeAIMove = () => {\n    if (winner || isPlayerTurn) return;\n\n    setIsThinking(true);\n    setTimeout(() => {\n      const newBoard = [...board];\n      const bestMove = getBestMove(newBoard);\n      \n      if (bestMove !== -1) {\n        newBoard[bestMove] = 'O';\n        setBoard(newBoard);\n        \n        const result = checkWinner(newBoard);\n        if (result.winner) {\n          setWinner(result.winner);\n          setWinningLine(result.line);\n          if (result.winner === 'O') {\n            setScore(prev => ({ ...prev, ai: prev.ai + 1 }));\n          } else if (result.winner === 'draw') {\n            setScore(prev => ({ ...prev, draws: prev.draws + 1 }));\n          }\n        } else {\n          setIsPlayerTurn(true);\n        }\n      }\n      setIsThinking(false);\n    }, 600);\n  };\n\n  useEffect(() => {\n    if (!isPlayerTurn && !winner) {\n      makeAIMove();\n    }\n  }, [isPlayerTurn, winner]);\n\n  const handleCellClick = (index: number) => {\n    if (board[index] || winner || !isPlayerTurn || isThinking) return;\n\n    const newBoard = [...board];\n    newBoard[index] = 'X';\n    setBoard(newBoard);\n\n    const result = checkWinner(newBoard);\n    if (result.winner) {\n      setWinner(result.winner);\n      setWinningLine(result.line);\n      if (result.winner === 'X') {\n        setScore(prev => ({ ...prev, player: prev.player + 1 }));\n      } else if (result.winner === 'draw') {\n        setScore(prev => ({ ...prev, draws: prev.draws + 1 }));\n      }\n    } else {\n      setIsPlayerTurn(false);\n    }\n  };\n\n  const resetGame = () => {\n    setBoard(Array(9).fill(null));\n    setIsPlayerTurn(true);\n    setWinner(null);\n    setWinningLine(null);\n    setIsThinking(false);\n  };\n\n  const resetScore = () => {\n    setScore({ player: 0, ai: 0, draws: 0 });\n    resetGame();\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-purple-900 via-blue-900 to-indigo-900 flex items-center justify-center p-4\">\n      <div className=\"w-full max-w-4xl\">\n        <motion.div\n          initial={{ opacity: 0, y: -20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.5 }}\n        >\n          <h1 className=\"text-5xl font-bold text-center mb-8 text-white flex items-center justify-center gap-3\">\n            <Zap className=\"w-10 h-10 text-yellow-400\" />\n            Tic Tac Toe\n            <Zap className=\"w-10 h-10 text-yellow-400\" />\n          </h1>\n        </motion.div>\n\n        <div className=\"grid md:grid-cols-3 gap-6 mb-8\">\n          <motion.div\n            initial={{ opacity: 0, x: -20 }}\n            animate={{ opacity: 1, x: 0 }}\n            transition={{ duration: 0.5, delay: 0.1 }}\n          >\n            <Card className=\"bg-white/10 backdrop-blur-lg border-white/20\">\n              <CardHeader className=\"pb-3\">\n                <CardTitle className=\"text-white flex items-center gap-2\">\n                  <Trophy className=\"w-5 h-5 text-blue-400\" />\n                  You (X)\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-4xl font-bold text-blue-400\">{score.player}</p>\n              </CardContent>\n            </Card>\n          </motion.div>\n\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.5, delay: 0.2 }}\n          >\n            <Card className=\"bg-white/10 backdrop-blur-lg border-white/20\">\n              <CardHeader className=\"pb-3\">\n                <CardTitle className=\"text-white flex items-center gap-2\">\n                  <Circle className=\"w-5 h-5 text-gray-400\" />\n                  Draws\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-4xl font-bold text-gray-400\">{score.draws}</p>\n              </CardContent>\n            </Card>\n          </motion.div>\n\n          <motion.div\n            initial={{ opacity: 0, x: 20 }}\n            animate={{ opacity: 1, x: 0 }}\n            transition={{ duration: 0.5, delay: 0.3 }}\n          >\n            <Card className=\"bg-white/10 backdrop-blur-lg border-white/20\">\n              <CardHeader className=\"pb-3\">\n                <CardTitle className=\"text-white flex items-center gap-2\">\n                  <Trophy className=\"w-5 h-5 text-red-400\" />\n                  AI (O)\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-4xl font-bold text-red-400\">{score.ai}</p>\n              </CardContent>\n            </Card>\n          </motion.div>\n        </div>\n\n        <motion.div\n          initial={{ opacity: 0, scale: 0.9 }}\n          animate={{ opacity: 1, scale: 1 }}\n          transition={{ duration: 0.5, delay: 0.4 }}\n        >\n          <Card className=\"bg-white/10 backdrop-blur-lg border-white/20\">\n            <CardContent className=\"p-8\">\n              <div className=\"mb-6 text-center\">\n                <AnimatePresence mode=\"wait\">\n                  {winner ? (\n                    <motion.div\n                      key=\"winner\"\n                      initial={{ opacity: 0, y: -10 }}\n                      animate={{ opacity: 1, y: 0 }}\n                      exit={{ opacity: 0, y: 10 }}\n                      className=\"text-2xl font-bold text-white\"\n                    >\n                      {winner === 'draw' ? (\n                        <span className=\"text-gray-300\">It's a Draw!</span>\n                      ) : winner === 'X' ? (\n                        <span className=\"text-blue-400\">You Win! \ud83c\udf89</span>\n                      ) : (\n                        <span className=\"text-red-400\">AI Wins!</span>\n                      )}\n                    </motion.div>\n                  ) : (\n                    <motion.div\n                      key=\"turn\"\n                      initial={{ opacity: 0, y: -10 }}\n                      animate={{ opacity: 1, y: 0 }}\n                      exit={{ opacity: 0, y: 10 }}\n                      className=\"text-2xl font-bold text-white\"\n                    >\n                      {isThinking ? (\n                        <span className=\"text-yellow-400 flex items-center justify-center gap-2\">\n                          <motion.div\n                            animate={{ rotate: 360 }}\n                            transition={{ duration: 1, repeat: Infinity, ease: \"linear\" }}\n                          >\n                            <Zap className=\"w-6 h-6\" />\n                          </motion.div>\n                          AI is thinking...\n                        </span>\n                      ) : isPlayerTurn ? (\n                        <span className=\"text-blue-400\">Your Turn</span>\n                      ) : (\n                        <span className=\"text-red-400\">AI's Turn</span>\n                      )}\n                    </motion.div>\n                  )}\n                </AnimatePresence>\n              </div>\n\n              <div className=\"grid grid-cols-3 gap-4 mb-6 max-w-md mx-auto\">\n                {board.map((cell, index) => {\n                  const isWinningCell = winningLine?.includes(index);\n                  return (\n                    <motion.button\n                      key={index}\n                      onClick={() => handleCellClick(index)}\n                      disabled={!!cell || !!winner || !isPlayerTurn || isThinking}\n                      className={`aspect-square rounded-xl flex items-center justify-center text-6xl font-bold transition-all ${\n                        isWinningCell\n                          ? 'bg-green-500/30 border-2 border-green-400'\n                          : 'bg-white/5 hover:bg-white/10 border-2 border-white/20'\n                      } ${\n                        !cell && !winner && isPlayerTurn && !isThinking\n                          ? 'cursor-pointer hover:scale-105'\n                          : 'cursor-not-allowed'\n                      }`}\n                      whileHover={!cell && !winner && isPlayerTurn && !isThinking ? { scale: 1.05 } : {}}\n                      whileTap={!cell && !winner && isPlayerTurn && !isThinking ? { scale: 0.95 } : {}}\n                    >\n                      <AnimatePresence mode=\"wait\">\n                        {cell && (\n                          <motion.div\n                            key={cell}\n                            initial={{ scale: 0, rotate: -180 }}\n                            animate={{ scale: 1, rotate: 0 }}\n                            exit={{ scale: 0, rotate: 180 }}\n                            transition={{ type: \"spring\", stiffness: 260, damping: 20 }}\n                          >\n                            {cell === 'X' ? (\n                              <X className=\"w-16 h-16 text-blue-400\" strokeWidth={3} />\n                            ) : (\n                              <Circle className=\"w-16 h-16 text-red-400\" strokeWidth={3} />\n                            )}\n                          </motion.div>\n                        )}\n                      </AnimatePresence>\n                    </motion.button>\n                  );\n                })}\n              </div>\n\n              <div className=\"flex gap-4 justify-center\">\n                <Button\n                  onClick={resetGame}\n                  size=\"lg\"\n                  className=\"bg-blue-600 hover:bg-blue-700 text-white\"\n                >\n                  <RotateCcw className=\"w-5 h-5 mr-2\" />\n                  New Game\n                </Button>\n                <Button\n                  onClick={resetScore}\n                  size=\"lg\"\n                  variant=\"outline\"\n                  className=\"border-white/20 text-white hover:bg-white/10\"\n                >\n                  Reset Score\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        </motion.div>\n      </div>\n    </div>\n  );\n}",
  "error": null,
  "overall_score": 59,
  "code_quality_score": 18,
  "architecture_score": 15,
  "performance_score": 14,
  "accessibility_score": 12,
  "metadata": {
    "document_id": "eval_room_d1d6762731f8",
    "prompt_category": "game",
    "prompt_complexity": 4.0
  },
  "raw_response": {
    "document_id": "eval_room_d1d6762731f8",
    "mode": "sequential",
    "prompt": "Create Tic tac toe game with smooth animations, AI opponent, score tracking, and modern UI",
    "content": "import { useState, useEffect } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { X, Circle, RotateCcw, Trophy, Zap } from 'lucide-react';\n\ntype Player = 'X' | 'O' | null;\ntype Board = Player[];\n\ninterface Score {\n  player: number;\n  ai: number;\n  draws: number;\n}\n\nconst WINNING_COMBINATIONS = [\n  [0, 1, 2],\n  [3, 4, 5],\n  [6, 7, 8],\n  [0, 3, 6],\n  [1, 4, 7],\n  [2, 5, 8],\n  [0, 4, 8],\n  [2, 4, 6],\n];\n\nexport default function TicTacToe() {\n  const [board, setBoard] = useState<Board>(Array(9).fill(null));\n  const [isPlayerTurn, setIsPlayerTurn] = useState(true);\n  const [winner, setWinner] = useState<Player | 'draw' | null>(null);\n  const [winningLine, setWinningLine] = useState<number[] | null>(null);\n  const [score, setScore] = useState<Score>({ player: 0, ai: 0, draws: 0 });\n  const [isThinking, setIsThinking] = useState(false);\n\n  const checkWinner = (currentBoard: Board): { winner: Player | 'draw' | null; line: number[] | null } => {\n    for (const combination of WINNING_COMBINATIONS) {\n      const [a, b, c] = combination;\n      if (currentBoard[a] && currentBoard[a] === currentBoard[b] && currentBoard[a] === currentBoard[c]) {\n        return { winner: currentBoard[a], line: combination };\n      }\n    }\n\n    if (currentBoard.every(cell => cell !== null)) {\n      return { winner: 'draw', line: null };\n    }\n\n    return { winner: null, line: null };\n  };\n\n  const minimax = (currentBoard: Board, depth: number, isMaximizing: boolean): number => {\n    const result = checkWinner(currentBoard);\n\n    if (result.winner === 'O') return 10 - depth;\n    if (result.winner === 'X') return depth - 10;\n    if (result.winner === 'draw') return 0;\n\n    if (isMaximizing) {\n      let bestScore = -Infinity;\n      for (let i = 0; i < 9; i++) {\n        if (currentBoard[i] === null) {\n          currentBoard[i] = 'O';\n          const score = minimax(currentBoard, depth + 1, false);\n          currentBoard[i] = null;\n          bestScore = Math.max(score, bestScore);\n        }\n      }\n      return bestScore;\n    } else {\n      let bestScore = Infinity;\n      for (let i = 0; i < 9; i++) {\n        if (currentBoard[i] === null) {\n          currentBoard[i] = 'X';\n          const score = minimax(currentBoard, depth + 1, true);\n          currentBoard[i] = null;\n          bestScore = Math.min(score, bestScore);\n        }\n      }\n      return bestScore;\n    }\n  };\n\n  const getBestMove = (currentBoard: Board): number => {\n    let bestScore = -Infinity;\n    let bestMove = -1;\n\n    for (let i = 0; i < 9; i++) {\n      if (currentBoard[i] === null) {\n        currentBoard[i] = 'O';\n        const score = minimax(currentBoard, 0, false);\n        currentBoard[i] = null;\n        if (score > bestScore) {\n          bestScore = score;\n          bestMove = i;\n        }\n      }\n    }\n\n    return bestMove;\n  };\n\n  const makeAIMove = () => {\n    if (winner || isPlayerTurn) return;\n\n    setIsThinking(true);\n    setTimeout(() => {\n      const newBoard = [...board];\n      const bestMove = getBestMove(newBoard);\n      \n      if (bestMove !== -1) {\n        newBoard[bestMove] = 'O';\n        setBoard(newBoard);\n        \n        const result = checkWinner(newBoard);\n        if (result.winner) {\n          setWinner(result.winner);\n          setWinningLine(result.line);\n          if (result.winner === 'O') {\n            setScore(prev => ({ ...prev, ai: prev.ai + 1 }));\n          } else if (result.winner === 'draw') {\n            setScore(prev => ({ ...prev, draws: prev.draws + 1 }));\n          }\n        } else {\n          setIsPlayerTurn(true);\n        }\n      }\n      setIsThinking(false);\n    }, 600);\n  };\n\n  useEffect(() => {\n    if (!isPlayerTurn && !winner) {\n      makeAIMove();\n    }\n  }, [isPlayerTurn, winner]);\n\n  const handleCellClick = (index: number) => {\n    if (board[index] || winner || !isPlayerTurn || isThinking) return;\n\n    const newBoard = [...board];\n    newBoard[index] = 'X';\n    setBoard(newBoard);\n\n    const result = checkWinner(newBoard);\n    if (result.winner) {\n      setWinner(result.winner);\n      setWinningLine(result.line);\n      if (result.winner === 'X') {\n        setScore(prev => ({ ...prev, player: prev.player + 1 }));\n      } else if (result.winner === 'draw') {\n        setScore(prev => ({ ...prev, draws: prev.draws + 1 }));\n      }\n    } else {\n      setIsPlayerTurn(false);\n    }\n  };\n\n  const resetGame = () => {\n    setBoard(Array(9).fill(null));\n    setIsPlayerTurn(true);\n    setWinner(null);\n    setWinningLine(null);\n    setIsThinking(false);\n  };\n\n  const resetScore = () => {\n    setScore({ player: 0, ai: 0, draws: 0 });\n    resetGame();\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-purple-900 via-blue-900 to-indigo-900 flex items-center justify-center p-4\">\n      <div className=\"w-full max-w-4xl\">\n        <motion.div\n          initial={{ opacity: 0, y: -20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.5 }}\n        >\n          <h1 className=\"text-5xl font-bold text-center mb-8 text-white flex items-center justify-center gap-3\">\n            <Zap className=\"w-10 h-10 text-yellow-400\" />\n            Tic Tac Toe\n            <Zap className=\"w-10 h-10 text-yellow-400\" />\n          </h1>\n        </motion.div>\n\n        <div className=\"grid md:grid-cols-3 gap-6 mb-8\">\n          <motion.div\n            initial={{ opacity: 0, x: -20 }}\n            animate={{ opacity: 1, x: 0 }}\n            transition={{ duration: 0.5, delay: 0.1 }}\n          >\n            <Card className=\"bg-white/10 backdrop-blur-lg border-white/20\">\n              <CardHeader className=\"pb-3\">\n                <CardTitle className=\"text-white flex items-center gap-2\">\n                  <Trophy className=\"w-5 h-5 text-blue-400\" />\n                  You (X)\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-4xl font-bold text-blue-400\">{score.player}</p>\n              </CardContent>\n            </Card>\n          </motion.div>\n\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.5, delay: 0.2 }}\n          >\n            <Card className=\"bg-white/10 backdrop-blur-lg border-white/20\">\n              <CardHeader className=\"pb-3\">\n                <CardTitle className=\"text-white flex items-center gap-2\">\n                  <Circle className=\"w-5 h-5 text-gray-400\" />\n                  Draws\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-4xl font-bold text-gray-400\">{score.draws}</p>\n              </CardContent>\n            </Card>\n          </motion.div>\n\n          <motion.div\n            initial={{ opacity: 0, x: 20 }}\n            animate={{ opacity: 1, x: 0 }}\n            transition={{ duration: 0.5, delay: 0.3 }}\n          >\n            <Card className=\"bg-white/10 backdrop-blur-lg border-white/20\">\n              <CardHeader className=\"pb-3\">\n                <CardTitle className=\"text-white flex items-center gap-2\">\n                  <Trophy className=\"w-5 h-5 text-red-400\" />\n                  AI (O)\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-4xl font-bold text-red-400\">{score.ai}</p>\n              </CardContent>\n            </Card>\n          </motion.div>\n        </div>\n\n        <motion.div\n          initial={{ opacity: 0, scale: 0.9 }}\n          animate={{ opacity: 1, scale: 1 }}\n          transition={{ duration: 0.5, delay: 0.4 }}\n        >\n          <Card className=\"bg-white/10 backdrop-blur-lg border-white/20\">\n            <CardContent className=\"p-8\">\n              <div className=\"mb-6 text-center\">\n                <AnimatePresence mode=\"wait\">\n                  {winner ? (\n                    <motion.div\n                      key=\"winner\"\n                      initial={{ opacity: 0, y: -10 }}\n                      animate={{ opacity: 1, y: 0 }}\n                      exit={{ opacity: 0, y: 10 }}\n                      className=\"text-2xl font-bold text-white\"\n                    >\n                      {winner === 'draw' ? (\n                        <span className=\"text-gray-300\">It's a Draw!</span>\n                      ) : winner === 'X' ? (\n                        <span className=\"text-blue-400\">You Win! \ud83c\udf89</span>\n                      ) : (\n                        <span className=\"text-red-400\">AI Wins!</span>\n                      )}\n                    </motion.div>\n                  ) : (\n                    <motion.div\n                      key=\"turn\"\n                      initial={{ opacity: 0, y: -10 }}\n                      animate={{ opacity: 1, y: 0 }}\n                      exit={{ opacity: 0, y: 10 }}\n                      className=\"text-2xl font-bold text-white\"\n                    >\n                      {isThinking ? (\n                        <span className=\"text-yellow-400 flex items-center justify-center gap-2\">\n                          <motion.div\n                            animate={{ rotate: 360 }}\n                            transition={{ duration: 1, repeat: Infinity, ease: \"linear\" }}\n                          >\n                            <Zap className=\"w-6 h-6\" />\n                          </motion.div>\n                          AI is thinking...\n                        </span>\n                      ) : isPlayerTurn ? (\n                        <span className=\"text-blue-400\">Your Turn</span>\n                      ) : (\n                        <span className=\"text-red-400\">AI's Turn</span>\n                      )}\n                    </motion.div>\n                  )}\n                </AnimatePresence>\n              </div>\n\n              <div className=\"grid grid-cols-3 gap-4 mb-6 max-w-md mx-auto\">\n                {board.map((cell, index) => {\n                  const isWinningCell = winningLine?.includes(index);\n                  return (\n                    <motion.button\n                      key={index}\n                      onClick={() => handleCellClick(index)}\n                      disabled={!!cell || !!winner || !isPlayerTurn || isThinking}\n                      className={`aspect-square rounded-xl flex items-center justify-center text-6xl font-bold transition-all ${\n                        isWinningCell\n                          ? 'bg-green-500/30 border-2 border-green-400'\n                          : 'bg-white/5 hover:bg-white/10 border-2 border-white/20'\n                      } ${\n                        !cell && !winner && isPlayerTurn && !isThinking\n                          ? 'cursor-pointer hover:scale-105'\n                          : 'cursor-not-allowed'\n                      }`}\n                      whileHover={!cell && !winner && isPlayerTurn && !isThinking ? { scale: 1.05 } : {}}\n                      whileTap={!cell && !winner && isPlayerTurn && !isThinking ? { scale: 0.95 } : {}}\n                    >\n                      <AnimatePresence mode=\"wait\">\n                        {cell && (\n                          <motion.div\n                            key={cell}\n                            initial={{ scale: 0, rotate: -180 }}\n                            animate={{ scale: 1, rotate: 0 }}\n                            exit={{ scale: 0, rotate: 180 }}\n                            transition={{ type: \"spring\", stiffness: 260, damping: 20 }}\n                          >\n                            {cell === 'X' ? (\n                              <X className=\"w-16 h-16 text-blue-400\" strokeWidth={3} />\n                            ) : (\n                              <Circle className=\"w-16 h-16 text-red-400\" strokeWidth={3} />\n                            )}\n                          </motion.div>\n                        )}\n                      </AnimatePresence>\n                    </motion.button>\n                  );\n                })}\n              </div>\n\n              <div className=\"flex gap-4 justify-center\">\n                <Button\n                  onClick={resetGame}\n                  size=\"lg\"\n                  className=\"bg-blue-600 hover:bg-blue-700 text-white\"\n                >\n                  <RotateCcw className=\"w-5 h-5 mr-2\" />\n                  New Game\n                </Button>\n                <Button\n                  onClick={resetScore}\n                  size=\"lg\"\n                  variant=\"outline\"\n                  className=\"border-white/20 text-white hover:bg-white/10\"\n                >\n                  Reset Score\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        </motion.div>\n      </div>\n    </div>\n  );\n}",
    "error": null,
    "elapsed_time": 44.370914459228516,
    "success": true
  }
}