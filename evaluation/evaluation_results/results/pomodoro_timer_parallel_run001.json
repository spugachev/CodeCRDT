{
  "prompt_id": "pomodoro_timer",
  "prompt_name": "Pomodoro Timer",
  "mode": "parallel",
  "run_number": 1,
  "timestamp": "2025-10-14T04:31:01.044947",
  "response_time": 79.3429274559021,
  "total_tokens": null,
  "response_content": "import { useState, useCallback, useEffect, useRef } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Play, Pause, RotateCcw, Settings } from 'lucide-react';\nimport { motion, AnimatePresence } from 'framer-motion';\n\n\ninterface TimerMode {\n  type: 'work' | 'shortBreak' | 'longBreak';\n  duration: number;\n  label: string;\n}\n\ninterface TimerSettings {\n  workDuration: number;\n  shortBreakDuration: number;\n  longBreakDuration: number;\n  longBreakInterval: number;\n}\n\ninterface Particle {\n  id: number;\n  x: number;\n  y: number;\n  size: number;\n  duration: number;\n  delay: number;\n}\ninterface ConfettiPiece {\n  id: number;\n  x: number;\n  color: string;\n  rotation: number;\n  scale: number;\n  delay: number;\n}\n\nconst defaultSettings: TimerSettings = {\n  workDuration: 25,\n  shortBreakDuration: 5,\n  longBreakDuration: 15,\n  longBreakInterval: 4\n};\n\nconst timerModes: Record<string, { colors: string; gradient: string }> = {\n  work: {\n    colors: 'from-rose-500 via-pink-500 to-purple-500',\n    gradient: 'bg-gradient-to-br from-rose-500/20 via-pink-500/20 to-purple-500/20'\n  },\n  shortBreak: {\n    colors: 'from-cyan-500 via-blue-500 to-indigo-500',\n    gradient: 'bg-gradient-to-br from-cyan-500/20 via-blue-500/20 to-indigo-500/20'\n  },\n  longBreak: {\n    colors: 'from-emerald-500 via-teal-500 to-cyan-500',\n    gradient: 'bg-gradient-to-br from-emerald-500/20 via-teal-500/20 to-cyan-500/20'\n  }\n};\n\nexport default function PomodoroTimer() {\n  const [settings, setSettings] = useState<TimerSettings>(defaultSettings);\n  const [currentMode, setCurrentMode] = useState<'work' | 'shortBreak' | 'longBreak'>('work');\n  const [timeLeft, setTimeLeft] = useState(settings.workDuration * 60);\n  const [isRunning, setIsRunning] = useState(false);\n  const [completedPomodoros, setCompletedPomodoros] = useState(0);\n  const [showSettings, setShowSettings] = useState(false);\n  const [showCompletion, setShowCompletion] = useState(false);\n  const [particles, setParticles] = useState<Particle[]>([]);\n  \n  const intervalRef = useRef<NodeJS.Timeout | null>(null);\n  const audioRef = useRef<HTMLAudioElement | null>(null);\n\n  const totalTime = currentMode === 'work' \n    ? settings.workDuration * 60 \n    : currentMode === 'shortBreak'\n    ? settings.shortBreakDuration * 60\n    : settings.longBreakDuration * 60;\n\n  const progress = ((totalTime - timeLeft) / totalTime) * 100;\n\n  useEffect(() => {\n    const generatedParticles: Particle[] = Array.from({ length: 50 }, (_, i) => ({\n      id: i,\n      x: Math.random() * 100,\n      y: Math.random() * 100,\n      size: Math.random() * 4 + 2,\n      duration: Math.random() * 20 + 10,\n      delay: Math.random() * 5\n    }));\n    setParticles(generatedParticles);\n  }, []);\n  const createConfetti = useCallback(() => {\n    const colors = ['#ef4444', '#f59e0b', '#10b981', '#3b82f6', '#8b5cf6', '#ec4899'];\n    const confettiPieces: ConfettiPiece[] = Array.from({ length: 100 }, (_, i) => ({\n      id: i,\n      x: Math.random() * 100,\n      color: colors[Math.floor(Math.random() * colors.length)],\n      rotation: Math.random() * 360,\n      scale: Math.random() * 0.5 + 0.5,\n      delay: Math.random() * 0.3\n    }));\n    return confettiPieces;\n  }, []);\n\n  const playCompletionSound = useCallback(() => {\n    // Create a simple success sound using Web Audio API\n    const audioContext = new (window.AudioContext || (window as any).webkitAudioContext)();\n    \n    // First note\n    const oscillator1 = audioContext.createOscillator();\n    const gainNode1 = audioContext.createGain();\n    oscillator1.connect(gainNode1);\n    gainNode1.connect(audioContext.destination);\n    oscillator1.frequency.value = 523.25; // C5\n    gainNode1.gain.setValueAtTime(0.3, audioContext.currentTime);\n    gainNode1.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + 0.3);\n    oscillator1.start(audioContext.currentTime);\n    oscillator1.stop(audioContext.currentTime + 0.3);\n\n    // Second note\n    const oscillator2 = audioContext.createOscillator();\n    const gainNode2 = audioContext.createGain();\n    oscillator2.connect(gainNode2);\n    gainNode2.connect(audioContext.destination);\n    oscillator2.frequency.value = 659.25; // E5\n    gainNode2.gain.setValueAtTime(0.3, audioContext.currentTime + 0.15);\n    gainNode2.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + 0.45);\n    oscillator2.start(audioContext.currentTime + 0.15);\n    oscillator2.stop(audioContext.currentTime + 0.45);\n\n    // Third note\n    const oscillator3 = audioContext.createOscillator();\n    const gainNode3 = audioContext.createGain();\n    oscillator3.connect(gainNode3);\n    gainNode3.connect(audioContext.destination);\n    oscillator3.frequency.value = 783.99; // G5\n    gainNode3.gain.setValueAtTime(0.3, audioContext.currentTime + 0.3);\n    gainNode3.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + 0.7);\n    oscillator3.start(audioContext.currentTime + 0.3);\n    oscillator3.stop(audioContext.currentTime + 0.7);\n  }, []);\n\n  const handleTimerComplete = useCallback(() => {\n    setShowCompletion(true);\n    playCompletionSound();\n    \n    setTimeout(() => {\n      setShowCompletion(false);\n    }, 4000);\n  }, [playCompletionSound]);\n\n  useEffect(() => {\n    if (isRunning && timeLeft > 0) {\n      intervalRef.current = setInterval(() => {\n        setTimeLeft((prev) => {\n          if (prev <= 1) {\n            return 0;\n          }\n          return prev - 1;\n        });\n      }, 1000);\n    } else if (timeLeft === 0 && isRunning) {\n      // Timer completed\n      setIsRunning(false);\n      setShowCompletion(true);\n      \n      // Play completion sound\n      if (audioRef.current) {\n        audioRef.current.play().catch(err => console.log('Audio play failed:', err));\n      }\n      \n      // Auto-switch modes\n      if (currentMode === 'work') {\n        const newCompletedPomodoros = completedPomodoros + 1;\n        setCompletedPomodoros(newCompletedPomodoros);\n        \n        // Determine next break type\n        if (newCompletedPomodoros % settings.longBreakInterval === 0) {\n          setCurrentMode('longBreak');\n          setTimeLeft(settings.longBreakDuration * 60);\n        } else {\n          setCurrentMode('shortBreak');\n          setTimeLeft(settings.shortBreakDuration * 60);\n        }\n      } else {\n        // Break completed, switch to work\n        setCurrentMode('work');\n        setTimeLeft(settings.workDuration * 60);\n      }\n      \n      // Hide completion animation after 3 seconds\n      setTimeout(() => setShowCompletion(false), 3000);\n    }\n\n    return () => {\n      if (intervalRef.current) {\n        clearInterval(intervalRef.current);\n      }\n    };</parameter>\n  }, [isRunning, timeLeft, currentMode, completedPomodoros, settings]);\n\n  const handlePlayPause = useCallback(() => {\n    setIsRunning(!isRunning);\n  }, [isRunning]);\n\n  const handleReset = useCallback(() => {\n    setIsRunning(false);\n    if (intervalRef.current) {\n      clearInterval(intervalRef.current);\n      intervalRef.current = null;\n    }\n    const duration = currentMode === 'work' \n      ? settings.workDuration * 60 \n      : currentMode === 'shortBreak'\n      ? settings.shortBreakDuration * 60\n      : settings.longBreakDuration * 60;\n    setTimeLeft(duration);\n  }, [currentMode, settings]);\n\n  const handleModeSwitch = useCallback((mode: 'work' | 'shortBreak' | 'longBreak') => {\n    setCurrentMode(mode);\n    setIsRunning(false);\n    if (intervalRef.current) {\n      clearInterval(intervalRef.current);\n      intervalRef.current = null;\n    }\n    \n    const newDuration = mode === 'work' \n      ? settings.workDuration * 60 \n      : mode === 'shortBreak'\n      ? settings.shortBreakDuration * 60\n      : settings.longBreakDuration * 60;\n    \n    setTimeLeft(newDuration);\n  }, [settings]);\n\n  const formatTime = useCallback((seconds: number): string => {\n    const mins = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;\n  }, []);\n  const confettiPieces = showCompletion ? createConfetti() : [];\n\n  return (\n    <div className={`min-h-screen relative overflow-hidden transition-all duration-1000 ${timerModes[currentMode].gradient}`}>\n      <div className=\"absolute inset-0 overflow-hidden pointer-events-none\">\n        {particles.map((particle) => (\n          <motion.div\n            key={particle.id}\n            className=\"absolute rounded-full bg-white/30 backdrop-blur-sm\"\n            style={{\n              left: `${particle.x}%`,\n              top: `${particle.y}%`,\n              width: particle.size,\n              height: particle.size,\n            }}\n            animate={{\n              y: [0, -30, 0],\n              opacity: [0.2, 0.6, 0.2],\n              scale: [1, 1.2, 1],\n            }}\n            transition={{\n              duration: particle.duration,\n              delay: particle.delay,\n              repeat: Infinity,\n              ease: \"easeInOut\",\n            }}\n          />\n        ))}\n      </div>\n      \n      <div className=\"relative z-10 min-h-screen flex flex-col items-center justify-center p-8\">\n        <motion.div\n          initial={{ opacity: 0, y: -20 }}\n          animate={{ opacity: 1, y: 0 }}\n          className=\"w-full max-w-2xl\"\n        >\n          <div className=\"backdrop-blur-xl bg-white/10 rounded-3xl p-8 shadow-2xl border border-white/20\">\n            <div className=\"flex justify-between items-center mb-8\">\n              <h1 className=\"text-4xl font-bold text-white\">Pomodoro Timer</h1>\n              <Button\n                variant=\"ghost\"\n                size=\"icon\"\n                onClick={() => setShowSettings(!showSettings)}\n                className=\"text-white hover:bg-white/20\"\n              >\n                <Settings className=\"w-6 h-6\" />\n              </Button>\n            </div>\n\n            \n            <div className=\"flex gap-2 mb-8\">\n              <Button\n                variant={currentMode === 'work' ? 'default' : 'ghost'}\n                onClick={() => handleModeSwitch('work')}\n                className={`flex-1 ${\n                  currentMode === 'work'\n                    ? 'bg-white text-rose-600 hover:bg-white/90'\n                    : 'text-white hover:bg-white/20'\n                }`}\n              >\n                Work\n              </Button>\n              <Button\n                variant={currentMode === 'shortBreak' ? 'default' : 'ghost'}\n                onClick={() => handleModeSwitch('shortBreak')}\n                className={`flex-1 ${\n                  currentMode === 'shortBreak'\n                    ? 'bg-white text-cyan-600 hover:bg-white/90'\n                    : 'text-white hover:bg-white/20'\n                }`}\n              >\n                Short Break\n              </Button>\n              <Button\n                variant={currentMode === 'longBreak' ? 'default' : 'ghost'}\n                onClick={() => handleModeSwitch('longBreak')}\n                className={`flex-1 ${\n                  currentMode === 'longBreak'\n                    ? 'bg-white text-emerald-600 hover:bg-white/90'\n                    : 'text-white hover:bg-white/20'\n                }`}\n              >\n                Long Break\n              </Button>\n            </div>\n\n            <div className=\"flex justify-center items-center my-12\">\n              <div className=\"relative w-80 h-80\">\n                <svg className=\"w-full h-full transform -rotate-90\" viewBox=\"0 0 320 320\">\n                  {/* Background circle */}\n                  <circle\n                    cx=\"160\"\n                    cy=\"160\"\n                    r=\"140\"\n                    stroke=\"rgba(255, 255, 255, 0.1)\"\n                    strokeWidth=\"12\"\n                    fill=\"none\"\n                  />\n                  {/* Progress circle */}\n                  <motion.circle\n                    cx=\"160\"\n                    cy=\"160\"\n                    r=\"140\"\n                    stroke=\"url(#gradient)\"\n                    strokeWidth=\"12\"\n                    fill=\"none\"\n                    strokeLinecap=\"round\"\n                    strokeDasharray={2 * Math.PI * 140}\n                    strokeDashoffset={2 * Math.PI * 140 * (1 - progress / 100)}\n                    initial={{ strokeDashoffset: 2 * Math.PI * 140 }}\n                    animate={{ strokeDashoffset: 2 * Math.PI * 140 * (1 - progress / 100) }}\n                    transition={{ duration: 0.5, ease: \"easeInOut\" }}\n                  />\n                  <defs>\n                    <linearGradient id=\"gradient\" x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"100%\">\n                      <stop offset=\"0%\" stopColor={currentMode === 'work' ? '#f43f5e' : currentMode === 'shortBreak' ? '#06b6d4' : '#10b981'} />\n                      <stop offset=\"50%\" stopColor={currentMode === 'work' ? '#ec4899' : currentMode === 'shortBreak' ? '#3b82f6' : '#14b8a6'} />\n                      <stop offset=\"100%\" stopColor={currentMode === 'work' ? '#a855f7' : currentMode === 'shortBreak' ? '#6366f1' : '#06b6d4'} />\n                    </linearGradient>\n                  </defs>\n                </svg>\n                {/* Timer display in center */}\n                <div className=\"absolute inset-0 flex flex-col items-center justify-center\">\n                  <motion.div\n                    key={timeLeft}\n                    initial={{ scale: 1 }}\n                    animate={{ scale: [1, 1.05, 1] }}\n                    transition={{ duration: 0.3 }}\n                    className=\"text-7xl font-bold text-white mb-2\"\n                  >\n                    {formatTime(timeLeft)}\n                  </motion.div>\n                  <div className=\"text-white/70 text-lg font-medium capitalize\">\n                    {currentMode === 'work' ? 'Focus Time' : currentMode === 'shortBreak' ? 'Short Break' : 'Long Break'}\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"text-center mb-8\">\n              <motion.div\n                key={timeLeft}\n                initial={{ scale: 1 }}\n                animate={{ scale: [1, 1.05, 1] }}\n                transition={{ duration: 0.3 }}\n                className=\"text-7xl font-bold text-white mb-4\"\n              >\n                {formatTime(timeLeft)}\n              </motion.div>\n              <p className=\"text-white/80 text-xl capitalize\">\n                {currentMode === 'work' ? 'Focus Time' : currentMode === 'shortBreak' ? 'Short Break' : 'Long Break'}\n              </p>\n            </div>\n\n            <div className=\"flex justify-center gap-4 mb-6\">\n              <Button\n                onClick={handlePlayPause}\n                size=\"lg\"\n                className=\"bg-white/20 hover:bg-white/30 text-white backdrop-blur-sm border border-white/30 px-8\"\n              >\n                {isRunning ? (\n                  <>\n                    <Pause className=\"w-5 h-5 mr-2\" />\n                    Pause\n                  </>\n                ) : (\n                  <>\n                    <Play className=\"w-5 h-5 mr-2\" />\n                    Start\n                  </>\n                )}\n              </Button>\n              <Button\n                onClick={handleReset}\n                size=\"lg\"\n                variant=\"ghost\"\n                className=\"text-white hover:bg-white/20\"\n              >\n                <RotateCcw className=\"w-5 h-5 mr-2\" />\n                Reset\n              </Button>\n            </div>\n\n            <div className=\"text-center text-white/60\">\n              <p>Completed Pomodoros: {completedPomodoros}</p>\n            </div>\n          </div>\n\n          <AnimatePresence>\n            {showSettings && (\n              <motion.div\n                initial={{ opacity: 0, y: 20, scale: 0.95 }}\n                animate={{ opacity: 1, y: 0, scale: 1 }}\n                exit={{ opacity: 0, y: 20, scale: 0.95 }}\n                transition={{ duration: 0.3 }}\n                className=\"mt-6 backdrop-blur-xl bg-white/10 rounded-3xl p-8 shadow-2xl border border-white/20\"\n              >\n                <h2 className=\"text-2xl font-bold text-white mb-6\">Settings</h2>\n                \n                <div className=\"space-y-6\">\n                  <div>\n                    <label className=\"block text-white/80 mb-2 text-sm font-medium\">\n                      Work Duration (minutes)\n                    </label>\n                    <input\n                      type=\"number\"\n                      min=\"1\"\n                      max=\"60\"\n                      value={settings.workDuration}\n                      onChange={(e) => setSettings({ ...settings, workDuration: parseInt(e.target.value) || 1 })}\n                      className=\"w-full px-4 py-3 rounded-xl bg-white/10 border border-white/20 text-white placeholder-white/40 focus:outline-none focus:ring-2 focus:ring-white/40 backdrop-blur-sm\"\n                    />\n                  </div>\n\n                  <div>\n                    <label className=\"block text-white/80 mb-2 text-sm font-medium\">\n                      Short Break Duration (minutes)\n                    </label>\n                    <input\n                      type=\"number\"\n                      min=\"1\"\n                      max=\"30\"\n                      value={settings.shortBreakDuration}\n                      onChange={(e) => setSettings({ ...settings, shortBreakDuration: parseInt(e.target.value) || 1 })}\n                      className=\"w-full px-4 py-3 rounded-xl bg-white/10 border border-white/20 text-white placeholder-white/40 focus:outline-none focus:ring-2 focus:ring-white/40 backdrop-blur-sm\"\n                    />\n                  </div>\n\n                  <div>\n                    <label className=\"block text-white/80 mb-2 text-sm font-medium\">\n                      Long Break Duration (minutes)\n                    </label>\n                    <input\n                      type=\"number\"\n                      min=\"1\"\n                      max=\"60\"\n                      value={settings.longBreakDuration}\n                      onChange={(e) => setSettings({ ...settings, longBreakDuration: parseInt(e.target.value) || 1 })}\n                      className=\"w-full px-4 py-3 rounded-xl bg-white/10 border border-white/20 text-white placeholder-white/40 focus:outline-none focus:ring-2 focus:ring-white/40 backdrop-blur-sm\"\n                    />\n                  </div>\n\n                  <div>\n                    <label className=\"block text-white/80 mb-2 text-sm font-medium\">\n                      Long Break Interval (pomodoros)\n                    </label>\n                    <input\n                      type=\"number\"\n                      min=\"2\"\n                      max=\"10\"\n                      value={settings.longBreakInterval}\n                      onChange={(e) => setSettings({ ...settings, longBreakInterval: parseInt(e.target.value) || 2 })}\n                      className=\"w-full px-4 py-3 rounded-xl bg-white/10 border border-white/20 text-white placeholder-white/40 focus:outline-none focus:ring-2 focus:ring-white/40 backdrop-blur-sm\"\n                    />\n                  </div>\n                </div>\n\n                <div className=\"flex gap-4 mt-8\">\n                  <Button\n                    onClick={() => {\n                      setTimeLeft(\n                        currentMode === 'work' \n                          ? settings.workDuration * 60 \n                          : currentMode === 'shortBreak'\n                          ? settings.shortBreakDuration * 60\n                          : settings.longBreakDuration * 60\n                      );\n                      setShowSettings(false);\n                      setIsRunning(false);\n                      if (intervalRef.current) {\n                        clearInterval(intervalRef.current);\n                        intervalRef.current = null;\n                      }\n                    }}\n                    className=\"flex-1 bg-white/20 hover:bg-white/30 text-white backdrop-blur-sm border border-white/30\"\n                  >\n                    Save Changes\n                  </Button>\n                  <Button\n                    onClick={() => {\n                      setSettings(defaultSettings);\n                      setShowSettings(false);\n                    }}\n                    variant=\"ghost\"\n                    className=\"flex-1 text-white hover:bg-white/20\"\n                  >\n                    Cancel\n                  </Button>\n                </div>\n              </motion.div>\n            )}\n          </AnimatePresence>\n\n          <AnimatePresence>\n            {showCompletion && (\n              <motion.div\n                initial={{ opacity: 0 }}\n                animate={{ opacity: 1 }}\n                exit={{ opacity: 0 }}\n                className=\"fixed inset-0 z-50 flex items-center justify-center pointer-events-none\"\n              >\n                {/* Confetti pieces */}\n                {confettiPieces.map((piece) => (\n                  <motion.div\n                    key={piece.id}\n                    className=\"absolute w-3 h-3 rounded-sm\"\n                    style={{\n                      backgroundColor: piece.color,\n                      left: `${piece.x}%`,\n                      top: '-5%',\n                    }}\n                    initial={{\n                      y: 0,\n                      x: 0,\n                      rotate: 0,\n                      scale: piece.scale,\n                      opacity: 1,\n                    }}\n                    animate={{\n                      y: window.innerHeight + 100,\n                      x: (Math.random() - 0.5) * 400,\n                      rotate: piece.rotation + 720,\n                      opacity: [1, 1, 0.8, 0],\n                    }}\n                    transition={{\n                      duration: 3,\n                      delay: piece.delay,\n                      ease: \"easeIn\",\n                    }}\n                  />\n                ))}\n\n                {/* Celebration message */}\n                <motion.div\n                  initial={{ scale: 0, rotate: -10 }}\n                  animate={{ \n                    scale: [0, 1.2, 1],\n                    rotate: [0, 5, -5, 0],\n                  }}\n                  exit={{ scale: 0, opacity: 0 }}\n                  transition={{\n                    duration: 0.6,\n                    ease: \"easeOut\",\n                  }}\n                  className=\"pointer-events-auto backdrop-blur-xl bg-white/20 rounded-3xl p-12 shadow-2xl border-4 border-white/40\"\n                >\n                  <motion.div\n                    animate={{\n                      scale: [1, 1.05, 1],\n                    }}\n                    transition={{\n                      duration: 1,\n                      repeat: Infinity,\n                      ease: \"easeInOut\",\n                    }}\n                  >\n                    <div className=\"text-center\">\n                      <motion.div\n                        initial={{ scale: 0 }}\n                        animate={{ scale: 1 }}\n                        transition={{ delay: 0.2, type: \"spring\", stiffness: 200 }}\n                        className=\"text-8xl mb-4\"\n                      >\n                        \ud83c\udf89\n                      </motion.div>\n                      <h2 className=\"text-5xl font-bold text-white mb-4\">\n                        {currentMode === 'work' ? 'Great Work!' : 'Break Complete!'}\n                      </h2>\n                      <p className=\"text-2xl text-white/90\">\n                        {currentMode === 'work' \n                          ? 'Time for a well-deserved break!' \n                          : 'Ready to focus again?'}\n                      </p>\n                    </div>\n                  </motion.div>\n                </motion.div>\n\n                {/* Radial burst effect */}\n                <motion.div\n                  initial={{ scale: 0, opacity: 0.8 }}\n                  animate={{ scale: 3, opacity: 0 }}\n                  transition={{ duration: 1.5, ease: \"easeOut\" }}\n                  className=\"absolute inset-0 flex items-center justify-center\"\n                >\n                  <div className={`w-96 h-96 rounded-full bg-gradient-to-r ${timerModes[currentMode].colors} blur-3xl`} />\n                </motion.div>\n              </motion.div>\n            )}\n          </AnimatePresence>\n        </motion.div>\n      </div>\n    </div>\n  );\n}",
  "error": null,
  "overall_score": 61,
  "code_quality_score": 18,
  "architecture_score": 15,
  "performance_score": 16,
  "accessibility_score": 12,
  "metadata": {
    "document_id": "eval_room_eb5b6cc4091f",
    "prompt_category": "productivity",
    "prompt_complexity": 7.0
  },
  "raw_response": {
    "document_id": "eval_room_eb5b6cc4091f",
    "mode": "parallel",
    "prompt": "Build a gorgeous Pomodoro timer with a circular animated progress ring, glass morphism design, smooth color transitions between work/break modes, floating particles background, and satisfying completion animations with sound",
    "content": "import { useState, useCallback, useEffect, useRef } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Play, Pause, RotateCcw, Settings } from 'lucide-react';\nimport { motion, AnimatePresence } from 'framer-motion';\n\n\ninterface TimerMode {\n  type: 'work' | 'shortBreak' | 'longBreak';\n  duration: number;\n  label: string;\n}\n\ninterface TimerSettings {\n  workDuration: number;\n  shortBreakDuration: number;\n  longBreakDuration: number;\n  longBreakInterval: number;\n}\n\ninterface Particle {\n  id: number;\n  x: number;\n  y: number;\n  size: number;\n  duration: number;\n  delay: number;\n}\ninterface ConfettiPiece {\n  id: number;\n  x: number;\n  color: string;\n  rotation: number;\n  scale: number;\n  delay: number;\n}\n\nconst defaultSettings: TimerSettings = {\n  workDuration: 25,\n  shortBreakDuration: 5,\n  longBreakDuration: 15,\n  longBreakInterval: 4\n};\n\nconst timerModes: Record<string, { colors: string; gradient: string }> = {\n  work: {\n    colors: 'from-rose-500 via-pink-500 to-purple-500',\n    gradient: 'bg-gradient-to-br from-rose-500/20 via-pink-500/20 to-purple-500/20'\n  },\n  shortBreak: {\n    colors: 'from-cyan-500 via-blue-500 to-indigo-500',\n    gradient: 'bg-gradient-to-br from-cyan-500/20 via-blue-500/20 to-indigo-500/20'\n  },\n  longBreak: {\n    colors: 'from-emerald-500 via-teal-500 to-cyan-500',\n    gradient: 'bg-gradient-to-br from-emerald-500/20 via-teal-500/20 to-cyan-500/20'\n  }\n};\n\nexport default function PomodoroTimer() {\n  const [settings, setSettings] = useState<TimerSettings>(defaultSettings);\n  const [currentMode, setCurrentMode] = useState<'work' | 'shortBreak' | 'longBreak'>('work');\n  const [timeLeft, setTimeLeft] = useState(settings.workDuration * 60);\n  const [isRunning, setIsRunning] = useState(false);\n  const [completedPomodoros, setCompletedPomodoros] = useState(0);\n  const [showSettings, setShowSettings] = useState(false);\n  const [showCompletion, setShowCompletion] = useState(false);\n  const [particles, setParticles] = useState<Particle[]>([]);\n  \n  const intervalRef = useRef<NodeJS.Timeout | null>(null);\n  const audioRef = useRef<HTMLAudioElement | null>(null);\n\n  const totalTime = currentMode === 'work' \n    ? settings.workDuration * 60 \n    : currentMode === 'shortBreak'\n    ? settings.shortBreakDuration * 60\n    : settings.longBreakDuration * 60;\n\n  const progress = ((totalTime - timeLeft) / totalTime) * 100;\n\n  useEffect(() => {\n    const generatedParticles: Particle[] = Array.from({ length: 50 }, (_, i) => ({\n      id: i,\n      x: Math.random() * 100,\n      y: Math.random() * 100,\n      size: Math.random() * 4 + 2,\n      duration: Math.random() * 20 + 10,\n      delay: Math.random() * 5\n    }));\n    setParticles(generatedParticles);\n  }, []);\n  const createConfetti = useCallback(() => {\n    const colors = ['#ef4444', '#f59e0b', '#10b981', '#3b82f6', '#8b5cf6', '#ec4899'];\n    const confettiPieces: ConfettiPiece[] = Array.from({ length: 100 }, (_, i) => ({\n      id: i,\n      x: Math.random() * 100,\n      color: colors[Math.floor(Math.random() * colors.length)],\n      rotation: Math.random() * 360,\n      scale: Math.random() * 0.5 + 0.5,\n      delay: Math.random() * 0.3\n    }));\n    return confettiPieces;\n  }, []);\n\n  const playCompletionSound = useCallback(() => {\n    // Create a simple success sound using Web Audio API\n    const audioContext = new (window.AudioContext || (window as any).webkitAudioContext)();\n    \n    // First note\n    const oscillator1 = audioContext.createOscillator();\n    const gainNode1 = audioContext.createGain();\n    oscillator1.connect(gainNode1);\n    gainNode1.connect(audioContext.destination);\n    oscillator1.frequency.value = 523.25; // C5\n    gainNode1.gain.setValueAtTime(0.3, audioContext.currentTime);\n    gainNode1.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + 0.3);\n    oscillator1.start(audioContext.currentTime);\n    oscillator1.stop(audioContext.currentTime + 0.3);\n\n    // Second note\n    const oscillator2 = audioContext.createOscillator();\n    const gainNode2 = audioContext.createGain();\n    oscillator2.connect(gainNode2);\n    gainNode2.connect(audioContext.destination);\n    oscillator2.frequency.value = 659.25; // E5\n    gainNode2.gain.setValueAtTime(0.3, audioContext.currentTime + 0.15);\n    gainNode2.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + 0.45);\n    oscillator2.start(audioContext.currentTime + 0.15);\n    oscillator2.stop(audioContext.currentTime + 0.45);\n\n    // Third note\n    const oscillator3 = audioContext.createOscillator();\n    const gainNode3 = audioContext.createGain();\n    oscillator3.connect(gainNode3);\n    gainNode3.connect(audioContext.destination);\n    oscillator3.frequency.value = 783.99; // G5\n    gainNode3.gain.setValueAtTime(0.3, audioContext.currentTime + 0.3);\n    gainNode3.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + 0.7);\n    oscillator3.start(audioContext.currentTime + 0.3);\n    oscillator3.stop(audioContext.currentTime + 0.7);\n  }, []);\n\n  const handleTimerComplete = useCallback(() => {\n    setShowCompletion(true);\n    playCompletionSound();\n    \n    setTimeout(() => {\n      setShowCompletion(false);\n    }, 4000);\n  }, [playCompletionSound]);\n\n  useEffect(() => {\n    if (isRunning && timeLeft > 0) {\n      intervalRef.current = setInterval(() => {\n        setTimeLeft((prev) => {\n          if (prev <= 1) {\n            return 0;\n          }\n          return prev - 1;\n        });\n      }, 1000);\n    } else if (timeLeft === 0 && isRunning) {\n      // Timer completed\n      setIsRunning(false);\n      setShowCompletion(true);\n      \n      // Play completion sound\n      if (audioRef.current) {\n        audioRef.current.play().catch(err => console.log('Audio play failed:', err));\n      }\n      \n      // Auto-switch modes\n      if (currentMode === 'work') {\n        const newCompletedPomodoros = completedPomodoros + 1;\n        setCompletedPomodoros(newCompletedPomodoros);\n        \n        // Determine next break type\n        if (newCompletedPomodoros % settings.longBreakInterval === 0) {\n          setCurrentMode('longBreak');\n          setTimeLeft(settings.longBreakDuration * 60);\n        } else {\n          setCurrentMode('shortBreak');\n          setTimeLeft(settings.shortBreakDuration * 60);\n        }\n      } else {\n        // Break completed, switch to work\n        setCurrentMode('work');\n        setTimeLeft(settings.workDuration * 60);\n      }\n      \n      // Hide completion animation after 3 seconds\n      setTimeout(() => setShowCompletion(false), 3000);\n    }\n\n    return () => {\n      if (intervalRef.current) {\n        clearInterval(intervalRef.current);\n      }\n    };</parameter>\n  }, [isRunning, timeLeft, currentMode, completedPomodoros, settings]);\n\n  const handlePlayPause = useCallback(() => {\n    setIsRunning(!isRunning);\n  }, [isRunning]);\n\n  const handleReset = useCallback(() => {\n    setIsRunning(false);\n    if (intervalRef.current) {\n      clearInterval(intervalRef.current);\n      intervalRef.current = null;\n    }\n    const duration = currentMode === 'work' \n      ? settings.workDuration * 60 \n      : currentMode === 'shortBreak'\n      ? settings.shortBreakDuration * 60\n      : settings.longBreakDuration * 60;\n    setTimeLeft(duration);\n  }, [currentMode, settings]);\n\n  const handleModeSwitch = useCallback((mode: 'work' | 'shortBreak' | 'longBreak') => {\n    setCurrentMode(mode);\n    setIsRunning(false);\n    if (intervalRef.current) {\n      clearInterval(intervalRef.current);\n      intervalRef.current = null;\n    }\n    \n    const newDuration = mode === 'work' \n      ? settings.workDuration * 60 \n      : mode === 'shortBreak'\n      ? settings.shortBreakDuration * 60\n      : settings.longBreakDuration * 60;\n    \n    setTimeLeft(newDuration);\n  }, [settings]);\n\n  const formatTime = useCallback((seconds: number): string => {\n    const mins = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;\n  }, []);\n  const confettiPieces = showCompletion ? createConfetti() : [];\n\n  return (\n    <div className={`min-h-screen relative overflow-hidden transition-all duration-1000 ${timerModes[currentMode].gradient}`}>\n      <div className=\"absolute inset-0 overflow-hidden pointer-events-none\">\n        {particles.map((particle) => (\n          <motion.div\n            key={particle.id}\n            className=\"absolute rounded-full bg-white/30 backdrop-blur-sm\"\n            style={{\n              left: `${particle.x}%`,\n              top: `${particle.y}%`,\n              width: particle.size,\n              height: particle.size,\n            }}\n            animate={{\n              y: [0, -30, 0],\n              opacity: [0.2, 0.6, 0.2],\n              scale: [1, 1.2, 1],\n            }}\n            transition={{\n              duration: particle.duration,\n              delay: particle.delay,\n              repeat: Infinity,\n              ease: \"easeInOut\",\n            }}\n          />\n        ))}\n      </div>\n      \n      <div className=\"relative z-10 min-h-screen flex flex-col items-center justify-center p-8\">\n        <motion.div\n          initial={{ opacity: 0, y: -20 }}\n          animate={{ opacity: 1, y: 0 }}\n          className=\"w-full max-w-2xl\"\n        >\n          <div className=\"backdrop-blur-xl bg-white/10 rounded-3xl p-8 shadow-2xl border border-white/20\">\n            <div className=\"flex justify-between items-center mb-8\">\n              <h1 className=\"text-4xl font-bold text-white\">Pomodoro Timer</h1>\n              <Button\n                variant=\"ghost\"\n                size=\"icon\"\n                onClick={() => setShowSettings(!showSettings)}\n                className=\"text-white hover:bg-white/20\"\n              >\n                <Settings className=\"w-6 h-6\" />\n              </Button>\n            </div>\n\n            \n            <div className=\"flex gap-2 mb-8\">\n              <Button\n                variant={currentMode === 'work' ? 'default' : 'ghost'}\n                onClick={() => handleModeSwitch('work')}\n                className={`flex-1 ${\n                  currentMode === 'work'\n                    ? 'bg-white text-rose-600 hover:bg-white/90'\n                    : 'text-white hover:bg-white/20'\n                }`}\n              >\n                Work\n              </Button>\n              <Button\n                variant={currentMode === 'shortBreak' ? 'default' : 'ghost'}\n                onClick={() => handleModeSwitch('shortBreak')}\n                className={`flex-1 ${\n                  currentMode === 'shortBreak'\n                    ? 'bg-white text-cyan-600 hover:bg-white/90'\n                    : 'text-white hover:bg-white/20'\n                }`}\n              >\n                Short Break\n              </Button>\n              <Button\n                variant={currentMode === 'longBreak' ? 'default' : 'ghost'}\n                onClick={() => handleModeSwitch('longBreak')}\n                className={`flex-1 ${\n                  currentMode === 'longBreak'\n                    ? 'bg-white text-emerald-600 hover:bg-white/90'\n                    : 'text-white hover:bg-white/20'\n                }`}\n              >\n                Long Break\n              </Button>\n            </div>\n\n            <div className=\"flex justify-center items-center my-12\">\n              <div className=\"relative w-80 h-80\">\n                <svg className=\"w-full h-full transform -rotate-90\" viewBox=\"0 0 320 320\">\n                  {/* Background circle */}\n                  <circle\n                    cx=\"160\"\n                    cy=\"160\"\n                    r=\"140\"\n                    stroke=\"rgba(255, 255, 255, 0.1)\"\n                    strokeWidth=\"12\"\n                    fill=\"none\"\n                  />\n                  {/* Progress circle */}\n                  <motion.circle\n                    cx=\"160\"\n                    cy=\"160\"\n                    r=\"140\"\n                    stroke=\"url(#gradient)\"\n                    strokeWidth=\"12\"\n                    fill=\"none\"\n                    strokeLinecap=\"round\"\n                    strokeDasharray={2 * Math.PI * 140}\n                    strokeDashoffset={2 * Math.PI * 140 * (1 - progress / 100)}\n                    initial={{ strokeDashoffset: 2 * Math.PI * 140 }}\n                    animate={{ strokeDashoffset: 2 * Math.PI * 140 * (1 - progress / 100) }}\n                    transition={{ duration: 0.5, ease: \"easeInOut\" }}\n                  />\n                  <defs>\n                    <linearGradient id=\"gradient\" x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"100%\">\n                      <stop offset=\"0%\" stopColor={currentMode === 'work' ? '#f43f5e' : currentMode === 'shortBreak' ? '#06b6d4' : '#10b981'} />\n                      <stop offset=\"50%\" stopColor={currentMode === 'work' ? '#ec4899' : currentMode === 'shortBreak' ? '#3b82f6' : '#14b8a6'} />\n                      <stop offset=\"100%\" stopColor={currentMode === 'work' ? '#a855f7' : currentMode === 'shortBreak' ? '#6366f1' : '#06b6d4'} />\n                    </linearGradient>\n                  </defs>\n                </svg>\n                {/* Timer display in center */}\n                <div className=\"absolute inset-0 flex flex-col items-center justify-center\">\n                  <motion.div\n                    key={timeLeft}\n                    initial={{ scale: 1 }}\n                    animate={{ scale: [1, 1.05, 1] }}\n                    transition={{ duration: 0.3 }}\n                    className=\"text-7xl font-bold text-white mb-2\"\n                  >\n                    {formatTime(timeLeft)}\n                  </motion.div>\n                  <div className=\"text-white/70 text-lg font-medium capitalize\">\n                    {currentMode === 'work' ? 'Focus Time' : currentMode === 'shortBreak' ? 'Short Break' : 'Long Break'}\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"text-center mb-8\">\n              <motion.div\n                key={timeLeft}\n                initial={{ scale: 1 }}\n                animate={{ scale: [1, 1.05, 1] }}\n                transition={{ duration: 0.3 }}\n                className=\"text-7xl font-bold text-white mb-4\"\n              >\n                {formatTime(timeLeft)}\n              </motion.div>\n              <p className=\"text-white/80 text-xl capitalize\">\n                {currentMode === 'work' ? 'Focus Time' : currentMode === 'shortBreak' ? 'Short Break' : 'Long Break'}\n              </p>\n            </div>\n\n            <div className=\"flex justify-center gap-4 mb-6\">\n              <Button\n                onClick={handlePlayPause}\n                size=\"lg\"\n                className=\"bg-white/20 hover:bg-white/30 text-white backdrop-blur-sm border border-white/30 px-8\"\n              >\n                {isRunning ? (\n                  <>\n                    <Pause className=\"w-5 h-5 mr-2\" />\n                    Pause\n                  </>\n                ) : (\n                  <>\n                    <Play className=\"w-5 h-5 mr-2\" />\n                    Start\n                  </>\n                )}\n              </Button>\n              <Button\n                onClick={handleReset}\n                size=\"lg\"\n                variant=\"ghost\"\n                className=\"text-white hover:bg-white/20\"\n              >\n                <RotateCcw className=\"w-5 h-5 mr-2\" />\n                Reset\n              </Button>\n            </div>\n\n            <div className=\"text-center text-white/60\">\n              <p>Completed Pomodoros: {completedPomodoros}</p>\n            </div>\n          </div>\n\n          <AnimatePresence>\n            {showSettings && (\n              <motion.div\n                initial={{ opacity: 0, y: 20, scale: 0.95 }}\n                animate={{ opacity: 1, y: 0, scale: 1 }}\n                exit={{ opacity: 0, y: 20, scale: 0.95 }}\n                transition={{ duration: 0.3 }}\n                className=\"mt-6 backdrop-blur-xl bg-white/10 rounded-3xl p-8 shadow-2xl border border-white/20\"\n              >\n                <h2 className=\"text-2xl font-bold text-white mb-6\">Settings</h2>\n                \n                <div className=\"space-y-6\">\n                  <div>\n                    <label className=\"block text-white/80 mb-2 text-sm font-medium\">\n                      Work Duration (minutes)\n                    </label>\n                    <input\n                      type=\"number\"\n                      min=\"1\"\n                      max=\"60\"\n                      value={settings.workDuration}\n                      onChange={(e) => setSettings({ ...settings, workDuration: parseInt(e.target.value) || 1 })}\n                      className=\"w-full px-4 py-3 rounded-xl bg-white/10 border border-white/20 text-white placeholder-white/40 focus:outline-none focus:ring-2 focus:ring-white/40 backdrop-blur-sm\"\n                    />\n                  </div>\n\n                  <div>\n                    <label className=\"block text-white/80 mb-2 text-sm font-medium\">\n                      Short Break Duration (minutes)\n                    </label>\n                    <input\n                      type=\"number\"\n                      min=\"1\"\n                      max=\"30\"\n                      value={settings.shortBreakDuration}\n                      onChange={(e) => setSettings({ ...settings, shortBreakDuration: parseInt(e.target.value) || 1 })}\n                      className=\"w-full px-4 py-3 rounded-xl bg-white/10 border border-white/20 text-white placeholder-white/40 focus:outline-none focus:ring-2 focus:ring-white/40 backdrop-blur-sm\"\n                    />\n                  </div>\n\n                  <div>\n                    <label className=\"block text-white/80 mb-2 text-sm font-medium\">\n                      Long Break Duration (minutes)\n                    </label>\n                    <input\n                      type=\"number\"\n                      min=\"1\"\n                      max=\"60\"\n                      value={settings.longBreakDuration}\n                      onChange={(e) => setSettings({ ...settings, longBreakDuration: parseInt(e.target.value) || 1 })}\n                      className=\"w-full px-4 py-3 rounded-xl bg-white/10 border border-white/20 text-white placeholder-white/40 focus:outline-none focus:ring-2 focus:ring-white/40 backdrop-blur-sm\"\n                    />\n                  </div>\n\n                  <div>\n                    <label className=\"block text-white/80 mb-2 text-sm font-medium\">\n                      Long Break Interval (pomodoros)\n                    </label>\n                    <input\n                      type=\"number\"\n                      min=\"2\"\n                      max=\"10\"\n                      value={settings.longBreakInterval}\n                      onChange={(e) => setSettings({ ...settings, longBreakInterval: parseInt(e.target.value) || 2 })}\n                      className=\"w-full px-4 py-3 rounded-xl bg-white/10 border border-white/20 text-white placeholder-white/40 focus:outline-none focus:ring-2 focus:ring-white/40 backdrop-blur-sm\"\n                    />\n                  </div>\n                </div>\n\n                <div className=\"flex gap-4 mt-8\">\n                  <Button\n                    onClick={() => {\n                      setTimeLeft(\n                        currentMode === 'work' \n                          ? settings.workDuration * 60 \n                          : currentMode === 'shortBreak'\n                          ? settings.shortBreakDuration * 60\n                          : settings.longBreakDuration * 60\n                      );\n                      setShowSettings(false);\n                      setIsRunning(false);\n                      if (intervalRef.current) {\n                        clearInterval(intervalRef.current);\n                        intervalRef.current = null;\n                      }\n                    }}\n                    className=\"flex-1 bg-white/20 hover:bg-white/30 text-white backdrop-blur-sm border border-white/30\"\n                  >\n                    Save Changes\n                  </Button>\n                  <Button\n                    onClick={() => {\n                      setSettings(defaultSettings);\n                      setShowSettings(false);\n                    }}\n                    variant=\"ghost\"\n                    className=\"flex-1 text-white hover:bg-white/20\"\n                  >\n                    Cancel\n                  </Button>\n                </div>\n              </motion.div>\n            )}\n          </AnimatePresence>\n\n          <AnimatePresence>\n            {showCompletion && (\n              <motion.div\n                initial={{ opacity: 0 }}\n                animate={{ opacity: 1 }}\n                exit={{ opacity: 0 }}\n                className=\"fixed inset-0 z-50 flex items-center justify-center pointer-events-none\"\n              >\n                {/* Confetti pieces */}\n                {confettiPieces.map((piece) => (\n                  <motion.div\n                    key={piece.id}\n                    className=\"absolute w-3 h-3 rounded-sm\"\n                    style={{\n                      backgroundColor: piece.color,\n                      left: `${piece.x}%`,\n                      top: '-5%',\n                    }}\n                    initial={{\n                      y: 0,\n                      x: 0,\n                      rotate: 0,\n                      scale: piece.scale,\n                      opacity: 1,\n                    }}\n                    animate={{\n                      y: window.innerHeight + 100,\n                      x: (Math.random() - 0.5) * 400,\n                      rotate: piece.rotation + 720,\n                      opacity: [1, 1, 0.8, 0],\n                    }}\n                    transition={{\n                      duration: 3,\n                      delay: piece.delay,\n                      ease: \"easeIn\",\n                    }}\n                  />\n                ))}\n\n                {/* Celebration message */}\n                <motion.div\n                  initial={{ scale: 0, rotate: -10 }}\n                  animate={{ \n                    scale: [0, 1.2, 1],\n                    rotate: [0, 5, -5, 0],\n                  }}\n                  exit={{ scale: 0, opacity: 0 }}\n                  transition={{\n                    duration: 0.6,\n                    ease: \"easeOut\",\n                  }}\n                  className=\"pointer-events-auto backdrop-blur-xl bg-white/20 rounded-3xl p-12 shadow-2xl border-4 border-white/40\"\n                >\n                  <motion.div\n                    animate={{\n                      scale: [1, 1.05, 1],\n                    }}\n                    transition={{\n                      duration: 1,\n                      repeat: Infinity,\n                      ease: \"easeInOut\",\n                    }}\n                  >\n                    <div className=\"text-center\">\n                      <motion.div\n                        initial={{ scale: 0 }}\n                        animate={{ scale: 1 }}\n                        transition={{ delay: 0.2, type: \"spring\", stiffness: 200 }}\n                        className=\"text-8xl mb-4\"\n                      >\n                        \ud83c\udf89\n                      </motion.div>\n                      <h2 className=\"text-5xl font-bold text-white mb-4\">\n                        {currentMode === 'work' ? 'Great Work!' : 'Break Complete!'}\n                      </h2>\n                      <p className=\"text-2xl text-white/90\">\n                        {currentMode === 'work' \n                          ? 'Time for a well-deserved break!' \n                          : 'Ready to focus again?'}\n                      </p>\n                    </div>\n                  </motion.div>\n                </motion.div>\n\n                {/* Radial burst effect */}\n                <motion.div\n                  initial={{ scale: 0, opacity: 0.8 }}\n                  animate={{ scale: 3, opacity: 0 }}\n                  transition={{ duration: 1.5, ease: \"easeOut\" }}\n                  className=\"absolute inset-0 flex items-center justify-center\"\n                >\n                  <div className={`w-96 h-96 rounded-full bg-gradient-to-r ${timerModes[currentMode].colors} blur-3xl`} />\n                </motion.div>\n              </motion.div>\n            )}\n          </AnimatePresence>\n        </motion.div>\n      </div>\n    </div>\n  );\n}",
    "error": null,
    "elapsed_time": 79.3429274559021,
    "success": true
  }
}