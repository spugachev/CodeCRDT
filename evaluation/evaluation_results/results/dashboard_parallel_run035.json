{
  "prompt_id": "dashboard",
  "prompt_name": "Analytics Dashboard",
  "mode": "parallel",
  "run_number": 35,
  "timestamp": "2025-10-14T12:35:43.616485",
  "response_time": 89.35915660858154,
  "total_tokens": null,
  "response_content": "import { useState, useCallback } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Moon, Sun, RefreshCw } from 'lucide-react';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\n\n\nimport { ArrowUpDown, ChevronLeft, ChevronRight } from 'lucide-react';\nimport { Badge } from '@/components/ui/badge';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\n\n\n\nimport { motion } from 'framer-motion';\n\nimport { motion } from 'framer-motion';\n\nimport { TrendingUp, TrendingDown, DollarSign, Users, ShoppingCart, Target } from 'lucide-react';\n\nimport { motion } from 'framer-motion';\nimport { TrendingUp } from 'lucide-react';\nimport { Clock, ShoppingCart, UserPlus, DollarSign, AlertCircle, CheckCircle } from 'lucide-react';\n\n\ninterface MetricData {\n  id: string;\n  label: string;\n  value: number;\n  change: number;\n  trend: 'up' | 'down';\n}\n\ninterface ChartDataPoint {\n  date: string;\n  revenue: number;\n  users: number;\n  orders: number;\n}\n\ninterface TableRow {\n  id: string;\n  product: string;\n  sales: number;\n  revenue: number;\n  status: 'active' | 'pending' | 'inactive';\n}\ninterface ActivityItem {\n  id: string;\n  type: 'sale' | 'user' | 'alert' | 'success';\n  message: string;\n  timestamp: string;\n  icon: 'cart' | 'user' | 'dollar' | 'alert' | 'check';\n}\n\nconst mockActivityData: ActivityItem[] = [\n  { id: '1', type: 'sale', message: 'New order #1234 received', timestamp: '2 minutes ago', icon: 'cart' },\n  { id: '2', type: 'user', message: 'New user registration: john@example.com', timestamp: '5 minutes ago', icon: 'user' },\n  { id: '3', type: 'success', message: 'Payment processed successfully', timestamp: '12 minutes ago', icon: 'check' },\n  { id: '4', type: 'sale', message: 'Order #1233 shipped', timestamp: '18 minutes ago', icon: 'cart' },\n  { id: '5', type: 'alert', message: 'Low stock alert: Premium Plan', timestamp: '25 minutes ago', icon: 'alert' },\n  { id: '6', type: 'user', message: 'User upgraded to Pro Plan', timestamp: '32 minutes ago', icon: 'dollar' },\n  { id: '7', type: 'success', message: 'Database backup completed', timestamp: '45 minutes ago', icon: 'check' },\n  { id: '8', type: 'sale', message: 'New order #1232 received', timestamp: '1 hour ago', icon: 'cart' },\n  { id: '9', type: 'user', message: 'New user registration: sarah@example.com', timestamp: '1 hour ago', icon: 'user' },\n  { id: '10', type: 'success', message: 'System update completed', timestamp: '2 hours ago', icon: 'check' }\n];\n\nconst mockMetrics: MetricData[] = [\n  { id: '1', label: 'Total Revenue', value: 45231, change: 12.5, trend: 'up' },\n  { id: '2', label: 'Active Users', value: 2350, change: 8.2, trend: 'up' },\n  { id: '3', label: 'Total Orders', value: 1543, change: -3.1, trend: 'down' },\n  { id: '4', label: 'Conversion Rate', value: 3.24, change: 5.7, trend: 'up' }\n];\n\nconst mockChartData: ChartDataPoint[] = [\n  { date: '2024-01-01', revenue: 12000, users: 450, orders: 230 },\n  { date: '2024-01-02', revenue: 15000, users: 520, orders: 280 },\n  { date: '2024-01-03', revenue: 13500, users: 490, orders: 250 },\n  { date: '2024-01-04', revenue: 18000, users: 610, orders: 320 },\n  { date: '2024-01-05', revenue: 16500, users: 580, orders: 295 },\n  { date: '2024-01-06', revenue: 20000, users: 680, orders: 350 },\n  { date: '2024-01-07', revenue: 22000, users: 720, orders: 380 }\n];\n\nconst mockTableData: TableRow[] = [\n  { id: '1', product: 'Premium Plan', sales: 234, revenue: 23400, status: 'active' },\n  { id: '2', product: 'Basic Plan', sales: 567, revenue: 11340, status: 'active' },\n  { id: '3', product: 'Enterprise Plan', sales: 89, revenue: 17800, status: 'active' },\n  { id: '4', product: 'Starter Plan', sales: 432, revenue: 4320, status: 'pending' },\n  { id: '5', product: 'Pro Plan', sales: 156, revenue: 15600, status: 'active' }\n];\nconst mockQuickStats = [\n  { id: '1', label: 'Goal Completion', value: 78, target: 100, icon: Target, color: 'bg-blue-500' },\n  { id: '2', label: 'Customer Satisfaction', value: 92, target: 100, icon: Users, color: 'bg-green-500' },\n  { id: '3', label: 'Order Fulfillment', value: 85, target: 100, icon: ShoppingCart, color: 'bg-purple-500' },\n  { id: '4', label: 'Revenue Target', value: 67, target: 100, icon: DollarSign, color: 'bg-orange-500' }\n];\nconst ActivityFeed = ({ isDarkMode }: { isDarkMode: boolean }) => {\n  const [activities] = useState<ActivityItem[]>(mockActivityData);\n\n  const getActivityIcon = (icon: ActivityItem['icon']) => {\n    const iconClass = \"h-4 w-4\";\n    switch (icon) {\n      case 'cart':\n        return <ShoppingCart className={iconClass} />;\n      case 'user':\n        return <UserPlus className={iconClass} />;\n      case 'dollar':\n        return <DollarSign className={iconClass} />;\n      case 'alert':\n        return <AlertCircle className={iconClass} />;\n      case 'check':\n        return <CheckCircle className={iconClass} />;\n      default:\n        return <Clock className={iconClass} />;\n    }\n  };\n\n  const getActivityColor = (type: ActivityItem['type']) => {\n    switch (type) {\n      case 'sale':\n        return isDarkMode ? 'bg-blue-900/30 text-blue-400' : 'bg-blue-100 text-blue-600';\n      case 'user':\n        return isDarkMode ? 'bg-purple-900/30 text-purple-400' : 'bg-purple-100 text-purple-600';\n      case 'alert':\n        return isDarkMode ? 'bg-yellow-900/30 text-yellow-400' : 'bg-yellow-100 text-yellow-600';\n      case 'success':\n        return isDarkMode ? 'bg-green-900/30 text-green-400' : 'bg-green-100 text-green-600';\n      default:\n        return isDarkMode ? 'bg-gray-700 text-gray-300' : 'bg-gray-100 text-gray-600';\n    }\n  };\n\n  return (\n    <div className=\"max-h-[400px] overflow-y-auto pr-2 space-y-3\">\n      {activities.map((activity, index) => (\n        <motion.div\n          key={activity.id}\n          initial={{ opacity: 0, x: -20 }}\n          animate={{ opacity: 1, x: 0 }}\n          transition={{ delay: index * 0.05, duration: 0.3 }}\n          className={`flex items-start gap-3 p-3 rounded-lg transition-colors ${\n            isDarkMode ? 'hover:bg-gray-700/50' : 'hover:bg-gray-50'\n          }`}\n        >\n          <div className={`p-2 rounded-full ${getActivityColor(activity.type)}`}>\n            {getActivityIcon(activity.icon)}\n          </div>\n          \n          <div className=\"flex-1 min-w-0\">\n            <p className={`text-sm font-medium ${isDarkMode ? 'text-gray-200' : 'text-gray-900'}`}>\n              {activity.message}\n            </p>\n            <div className=\"flex items-center gap-1 mt-1\">\n              <Clock className={`h-3 w-3 ${isDarkMode ? 'text-gray-500' : 'text-gray-400'}`} />\n              <span className={`text-xs ${isDarkMode ? 'text-gray-500' : 'text-gray-500'}`}>\n                {activity.timestamp}\n              </span>\n            </div>\n          </div>\n        </motion.div>\n      ))}\n    </div>\n  );\n};\nconst mockPieData = [\n  { category: 'Premium Plan', value: 23400, color: '#3b82f6' },\n  { category: 'Enterprise Plan', value: 17800, color: '#8b5cf6' },\n  { category: 'Pro Plan', value: 15600, color: '#10b981' },\n  { category: 'Basic Plan', value: 11340, color: '#f59e0b' },\n  { category: 'Starter Plan', value: 4320, color: '#ef4444' }\n];\n\nconst PieChart = ({ data, isDarkMode }: { data: typeof mockPieData, isDarkMode: boolean }) => {\n  const total = data.reduce((sum, item) => sum + item.value, 0);\n  const size = 200;\n  const centerX = size / 2;\n  const centerY = size / 2;\n  const radius = 80;\n  const innerRadius = 50;\n\n  let currentAngle = -90;\n  const segments = data.map((item) => {\n    const percentage = (item.value / total) * 100;\n    const angle = (percentage / 100) * 360;\n    const startAngle = currentAngle;\n    const endAngle = currentAngle + angle;\n    currentAngle = endAngle;\n\n    const startRad = (startAngle * Math.PI) / 180;\n    const endRad = (endAngle * Math.PI) / 180;\n\n    const x1 = centerX + radius * Math.cos(startRad);\n    const y1 = centerY + radius * Math.sin(startRad);\n    const x2 = centerX + radius * Math.cos(endRad);\n    const y2 = centerY + radius * Math.sin(endRad);\n\n    const x3 = centerX + innerRadius * Math.cos(endRad);\n    const y3 = centerY + innerRadius * Math.sin(endRad);\n    const x4 = centerX + innerRadius * Math.cos(startRad);\n    const y4 = centerY + innerRadius * Math.sin(startRad);\n\n    const largeArc = angle > 180 ? 1 : 0;\n\n    const pathData = [\n      `M ${x1} ${y1}`,\n      `A ${radius} ${radius} 0 ${largeArc} 1 ${x2} ${y2}`,\n      `L ${x3} ${y3}`,\n      `A ${innerRadius} ${innerRadius} 0 ${largeArc} 0 ${x4} ${y4}`,\n      'Z'\n    ].join(' ');\n\n    return {\n      ...item,\n      pathData,\n      percentage: percentage.toFixed(1)\n    };\n  });\n\n  return (\n    <div className=\"flex flex-col items-center gap-6\">\n      <div className=\"relative\">\n        <svg width={size} height={size} viewBox={`0 0 ${size} ${size}`}>\n          {segments.map((segment, index) => (\n            <motion.path\n              key={segment.category}\n              d={segment.pathData}\n              fill={segment.color}\n              initial={{ opacity: 0, scale: 0 }}\n              animate={{ opacity: 1, scale: 1 }}\n              transition={{ duration: 0.5, delay: index * 0.1 }}\n              className=\"hover:opacity-80 transition-opacity cursor-pointer\"\n            />\n          ))}\n        </svg>\n        <div className=\"absolute inset-0 flex items-center justify-center flex-col\">\n          <div className={`text-2xl font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n            ${(total / 1000).toFixed(1)}k\n          </div>\n          <div className={`text-xs ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n            Total Revenue\n          </div>\n        </div>\n      </div>\n\n      <div className=\"w-full space-y-2\">\n        {segments.map((segment, index) => (\n          <motion.div\n            key={segment.category}\n            initial={{ opacity: 0, x: -20 }}\n            animate={{ opacity: 1, x: 0 }}\n            transition={{ duration: 0.3, delay: index * 0.1 }}\n            className=\"flex items-center justify-between\"\n          >\n            <div className=\"flex items-center gap-2\">\n              <div\n                className=\"w-3 h-3 rounded-full\"\n                style={{ backgroundColor: segment.color }}\n              />\n              <span className={`text-sm ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>\n                {segment.category}\n              </span>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <span className={`text-sm font-medium ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                ${(segment.value / 1000).toFixed(1)}k\n              </span>\n              <span className={`text-xs ${isDarkMode ? 'text-gray-500' : 'text-gray-500'}`}>\n                ({segment.percentage}%)\n              </span>\n            </div>\n          </motion.div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nconst RevenueChart = ({ data, isDarkMode }: { data: ChartDataPoint[], isDarkMode: boolean }) => {\n  const [hoveredPoint, setHoveredPoint] = useState<number | null>(null);\n  \n  const maxRevenue = Math.max(...data.map(d => d.revenue));\n  const minRevenue = Math.min(...data.map(d => d.revenue));\n  const revenueRange = maxRevenue - minRevenue;\n  \n  const chartHeight = 200;\n  const chartWidth = 100; // percentage\n  const padding = 20;\n  \n  const getX = (index: number) => {\n    return (index / (data.length - 1)) * 100;\n  };\n  \n  const getY = (value: number) => {\n    const normalized = (value - minRevenue) / revenueRange;\n    return chartHeight - (normalized * (chartHeight - padding * 2)) - padding;\n  };\n  \n  const pathData = data.map((point, index) => {\n    const x = getX(index);\n    const y = getY(point.revenue);\n    return `${index === 0 ? 'M' : 'L'} ${x} ${y}`;\n  }).join(' ');\n  \n  const areaPathData = `${pathData} L ${getX(data.length - 1)} ${chartHeight} L 0 ${chartHeight} Z`;\n  \n  return (\n    <div className=\"relative w-full h-64\">\n      <svg\n        viewBox={`0 0 100 ${chartHeight}`}\n        preserveAspectRatio=\"none\"\n        className=\"w-full h-full\"\n      >\n        <defs>\n          <linearGradient id=\"revenueGradient\" x1=\"0%\" y1=\"0%\" x2=\"0%\" y2=\"100%\">\n            <stop offset=\"0%\" stopColor={isDarkMode ? '#3b82f6' : '#2563eb'} stopOpacity=\"0.3\" />\n            <stop offset=\"100%\" stopColor={isDarkMode ? '#3b82f6' : '#2563eb'} stopOpacity=\"0\" />\n          </linearGradient>\n        </defs>\n        \n        <path\n          d={areaPathData}\n          fill=\"url(#revenueGradient)\"\n          className=\"transition-all duration-300\"\n        />\n        \n        <path\n          d={pathData}\n          fill=\"none\"\n          stroke={isDarkMode ? '#3b82f6' : '#2563eb'}\n          strokeWidth=\"0.5\"\n          vectorEffect=\"non-scaling-stroke\"\n          className=\"transition-colors duration-300\"\n        />\n        \n        {data.map((point, index) => (\n          <g key={index}>\n            <circle\n              cx={getX(index)}\n              cy={getY(point.revenue)}\n              r={hoveredPoint === index ? '1.5' : '1'}\n              fill={isDarkMode ? '#3b82f6' : '#2563eb'}\n              vectorEffect=\"non-scaling-stroke\"\n              className=\"transition-all duration-200 cursor-pointer\"\n              onMouseEnter={() => setHoveredPoint(index)}\n              onMouseLeave={() => setHoveredPoint(null)}\n            />\n          </g>\n        ))}\n      </svg>\n      \n      <div className=\"absolute bottom-0 left-0 right-0 flex justify-between px-2 text-xs mt-2\">\n        {data.map((point, index) => (\n          <span\n            key={index}\n            className={`${isDarkMode ? 'text-gray-400' : 'text-gray-600'} ${\n              index % 2 === 1 ? 'hidden sm:inline' : ''\n            }`}\n          >\n            {new Date(point.date).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n          </span>\n        ))}\n      </div>\n      \n      {hoveredPoint !== null && (\n        <div\n          className={`absolute z-10 px-3 py-2 rounded-lg shadow-lg transition-all duration-200 ${\n            isDarkMode ? 'bg-gray-700 border border-gray-600' : 'bg-white border border-gray-200'\n          }`}\n          style={{\n            left: `${getX(hoveredPoint)}%`,\n            top: `${(getY(data[hoveredPoint].revenue) / chartHeight) * 100}%`,\n            transform: 'translate(-50%, -120%)',\n          }}\n        >\n          <div className={`text-xs font-semibold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n            ${data[hoveredPoint].revenue.toLocaleString()}\n          </div>\n          <div className={`text-xs ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n            {new Date(data[hoveredPoint].date).toLocaleDateString('en-US', { \n              month: 'short', \n              day: 'numeric',\n              year: 'numeric'\n            })}\n          </div>\n          <div className={`text-xs flex items-center gap-1 mt-1 ${isDarkMode ? 'text-green-400' : 'text-green-600'}`}>\n            <TrendingUp className=\"h-3 w-3\" />\n            <span>{data[hoveredPoint].users} users</span>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nconst getMetricIcon = (label: string) => {\n  switch (label) {\n    case 'Total Revenue':\n      return DollarSign;\n    case 'Active Users':\n      return Users;\n    case 'Total Orders':\n      return ShoppingCart;\n    case 'Conversion Rate':\n      return Target;\n    default:\n      return DollarSign;\n  }\n};\n\nconst formatMetricValue = (label: string, value: number) => {\n  if (label === 'Total Revenue') {\n    return `$${value.toLocaleString()}`;\n  } else if (label === 'Conversion Rate') {\n    return `${value}%`;\n  }\n  return value.toLocaleString();\n};\n\nexport default function AnalyticsDashboard() {\n  const [sortColumn, setSortColumn] = useState<keyof TableRow>('revenue');\n  const [sortDirection, setSortDirection] = useState<'asc' | 'desc'>('desc');\n  const [currentPage, setCurrentPage] = useState(1);\n  const itemsPerPage = 3;\n  const [isDarkMode, setIsDarkMode] = useState(false);\n  const [metrics, setMetrics] = useState<MetricData[]>(mockMetrics);\n  const [chartData, setChartData] = useState<ChartDataPoint[]>(mockChartData);\n  const [tableData, setTableData] = useState<TableRow[]>(mockTableData);\n  const [isRefreshing, setIsRefreshing] = useState(false);\n\n  const toggleDarkMode = useCallback(() => {\n    setIsDarkMode(prev => !prev);\n  }, []);\n\n\n  const handleSort = useCallback((column: keyof TableRow) => {\n    if (sortColumn === column) {\n      setSortDirection(prev => prev === 'asc' ? 'desc' : 'asc');\n    } else {\n      setSortColumn(column);\n      setSortDirection('desc');\n    }\n  }, [sortColumn]);\n\n  const sortedData = [...tableData].sort((a, b) => {\n    const aValue = a[sortColumn];\n    const bValue = b[sortColumn];\n    \n    if (typeof aValue === 'number' && typeof bValue === 'number') {\n      return sortDirection === 'asc' ? aValue - bValue : bValue - aValue;\n    }\n    \n    if (typeof aValue === 'string' && typeof bValue === 'string') {\n      return sortDirection === 'asc' \n        ? aValue.localeCompare(bValue)\n        : bValue.localeCompare(aValue);\n    }\n    \n    return 0;\n  });\n\n  const totalPages = Math.ceil(sortedData.length / itemsPerPage);\n  const paginatedData = sortedData.slice(\n    (currentPage - 1) * itemsPerPage,\n    currentPage * itemsPerPage\n  );\n\n  const getStatusBadge = (status: TableRow['status']) => {\n    const variants = {\n      active: 'bg-green-500/10 text-green-500 border-green-500/20',\n      pending: 'bg-yellow-500/10 text-yellow-500 border-yellow-500/20',\n      inactive: 'bg-gray-500/10 text-gray-500 border-gray-500/20'\n    };\n    \n    return (\n      <Badge variant=\"outline\" className={variants[status]}>\n        {status.charAt(0).toUpperCase() + status.slice(1)}\n      </Badge>\n    );\n  };\n\n  const handleRefresh = useCallback(() => {\n\n    setIsRefreshing(true);\n    \n    setTimeout(() => {\n      // Generate updated metrics with random variations\n      const updatedMetrics = mockMetrics.map(metric => ({\n        ...metric,\n        value: metric.value + Math.floor(Math.random() * 200 - 100),\n        change: parseFloat((Math.random() * 20 - 5).toFixed(1)),\n        trend: Math.random() > 0.5 ? 'up' as const : 'down' as const\n      }));\n      \n      // Generate updated chart data with random variations\n      const updatedChartData = mockChartData.map(point => ({\n        ...point,\n        revenue: point.revenue + Math.floor(Math.random() * 4000 - 2000),\n        users: point.users + Math.floor(Math.random() * 100 - 50),\n        orders: point.orders + Math.floor(Math.random() * 50 - 25)\n      }));\n      \n      // Generate updated table data with random variations\n      const updatedTableData = mockTableData.map(row => ({\n        ...row,\n        sales: row.sales + Math.floor(Math.random() * 40 - 20),\n        revenue: row.revenue + Math.floor(Math.random() * 2000 - 1000)\n      }));\n      \n      setMetrics(updatedMetrics);\n      setChartData(updatedChartData);\n      setTableData(updatedTableData);\n      setIsRefreshing(false);\n    }, 1500);</parameter>\n  }, []);\n\n  return (\n    <div className={`min-h-screen transition-colors duration-300 ${isDarkMode ? 'dark bg-gray-900' : 'bg-gray-50'}`}>\n      <div className=\"container mx-auto p-4 md:p-6 lg:p-8\">\n        <div className=\"flex flex-col md:flex-row justify-between items-start md:items-center gap-4 mb-8\">\n          <div>\n            <h1 className={`text-3xl md:text-4xl font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n              Analytics Dashboard\n            </h1>\n            <p className={`mt-2 ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n              Real-time insights and performance metrics\n            </p>\n          </div>\n          \n          <div className=\"flex gap-2\">\n            <Button\n              variant=\"outline\"\n              size=\"icon\"\n              onClick={toggleDarkMode}\n              className={isDarkMode ? 'border-gray-700' : ''}\n            >\n              {isDarkMode ? <Sun className=\"h-5 w-5\" /> : <Moon className=\"h-5 w-5\" />}\n            </Button>\n            \n            <Button\n              variant=\"outline\"\n              onClick={handleRefresh}\n              disabled={isRefreshing}\n              className={isDarkMode ? 'border-gray-700' : ''}\n            >\n              <RefreshCw className={`h-4 w-4 mr-2 ${isRefreshing ? 'animate-spin' : ''}`} />\n              Refresh\n            </Button>\n          </div>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 md:gap-6 mb-8\">\n          {metrics.map((metric, index) => {\n            const IconComponent = getMetricIcon(metric.label);\n            const isPositive = metric.trend === 'up';\n            \n            return (\n              <motion.div\n                key={metric.id}\n                initial={{ opacity: 0, y: 20 }}\n                animate={{ opacity: 1, y: 0 }}\n                transition={{ duration: 0.4, delay: index * 0.1 }}\n              >\n                <Card className={`${isDarkMode ? 'bg-gray-800 border-gray-700' : 'bg-white'} hover:shadow-lg transition-shadow duration-300`}>\n                  <CardHeader className=\"flex flex-row items-center justify-between pb-2\">\n                    <CardTitle className={`text-sm font-medium ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                      {metric.label}\n                    </CardTitle>\n                    <div className={`p-2 rounded-lg ${isDarkMode ? 'bg-gray-700' : 'bg-gray-100'}`}>\n                      <IconComponent className={`h-4 w-4 ${isDarkMode ? 'text-gray-300' : 'text-gray-600'}`} />\n                    </div>\n                  </CardHeader>\n                  <CardContent>\n                    <div className={`text-2xl md:text-3xl font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                      {formatMetricValue(metric.label, metric.value)}\n                    </div>\n                    <div className=\"flex items-center mt-2\">\n                      {isPositive ? (\n                        <TrendingUp className=\"h-4 w-4 text-green-500 mr-1\" />\n                      ) : (\n                        <TrendingDown className=\"h-4 w-4 text-red-500 mr-1\" />\n                      )}\n                      <span className={`text-sm font-medium ${isPositive ? 'text-green-500' : 'text-red-500'}`}>\n                        {isPositive ? '+' : ''}{metric.change}%\n                      </span>\n                      <span className={`text-sm ml-2 ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                        vs last period\n                      </span>\n                    </div>\n                  </CardContent>\n                </Card>\n              </motion.div>\n            );\n          })}\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-4 md:gap-6 mb-8\">\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Revenue Overview</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Daily revenue trends\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <RevenueChart data={chartData} isDarkMode={isDarkMode} />\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>User Activity</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Active users over time\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"h-[300px] w-full\">\n                <svg width=\"100%\" height=\"100%\" viewBox=\"0 0 700 300\" preserveAspectRatio=\"none\">\n                  <defs>\n                    <linearGradient id=\"userGradient\" x1=\"0\" x2=\"0\" y1=\"0\" y2=\"1\">\n                      <stop offset=\"0%\" stopColor=\"#3b82f6\" stopOpacity=\"0.4\" />\n                      <stop offset=\"100%\" stopColor=\"#3b82f6\" stopOpacity=\"0.05\" />\n                    </linearGradient>\n                  </defs>\n                  \n                  {/* Generate path for area chart */}\n                  <motion.path\n                    d={(() => {\n                      const maxUsers = Math.max(...chartData.map(d => d.users));\n                      const width = 700;\n                      const height = 300;\n                      const padding = 20;\n                      const points = chartData.map((d, i) => {\n                        const x = (i / (chartData.length - 1)) * (width - 2 * padding) + padding;\n                        const y = height - padding - ((d.users / maxUsers) * (height - 2 * padding));\n                        return `${x},${y}`;\n                      });\n                      const pathData = `M ${padding},${height - padding} L ${points[0]} ${points.slice(1).map(p => `L ${p}`).join(' ')} L ${width - padding},${height - padding} Z`;\n                      return pathData;\n                    })()}\n                    fill=\"url(#userGradient)\"\n                    initial={{ opacity: 0, pathLength: 0 }}\n                    animate={{ opacity: 1, pathLength: 1 }}\n                    transition={{ duration: 1.5, ease: \"easeInOut\" }}\n                  />\n                  \n                  {/* Line on top of area */}\n                  <motion.polyline\n                    points={(() => {\n                      const maxUsers = Math.max(...chartData.map(d => d.users));\n                      const width = 700;\n                      const height = 300;\n                      const padding = 20;\n                      return chartData.map((d, i) => {\n                        const x = (i / (chartData.length - 1)) * (width - 2 * padding) + padding;\n                        const y = height - padding - ((d.users / maxUsers) * (height - 2 * padding));\n                        return `${x},${y}`;\n                      }).join(' ');\n                    })()}\n                    fill=\"none\"\n                    stroke=\"#3b82f6\"\n                    strokeWidth=\"3\"\n                    strokeLinecap=\"round\"\n                    strokeLinejoin=\"round\"\n                    initial={{ pathLength: 0 }}\n                    animate={{ pathLength: 1 }}\n                    transition={{ duration: 1.5, ease: \"easeInOut\" }}\n                  />\n                  \n                  {/* Data points */}\n                  {chartData.map((d, i) => {\n                    const maxUsers = Math.max(...chartData.map(d => d.users));\n                    const width = 700;\n                    const height = 300;\n                    const padding = 20;\n                    const x = (i / (chartData.length - 1)) * (width - 2 * padding) + padding;\n                    const y = height - padding - ((d.users / maxUsers) * (height - 2 * padding));\n                    \n                    return (\n                      <motion.g key={i}>\n                        <motion.circle\n                          cx={x}\n                          cy={y}\n                          r=\"5\"\n                          fill=\"#3b82f6\"\n                          stroke=\"white\"\n                          strokeWidth=\"2\"\n                          initial={{ scale: 0, opacity: 0 }}\n                          animate={{ scale: 1, opacity: 1 }}\n                          transition={{ delay: 0.1 * i, duration: 0.3 }}\n                          whileHover={{ scale: 1.5 }}\n                          style={{ cursor: 'pointer' }}\n                        />\n                        <title>{`${d.date}: ${d.users} users`}</title>\n                      </motion.g>\n                    );\n                  })}\n                </svg>\n                \n                {/* Legend and stats */}\n                <div className=\"mt-4 flex items-center justify-between\">\n                  <div className=\"flex items-center gap-2\">\n                    <div className=\"w-3 h-3 rounded-full bg-blue-500\"></div>\n                    <span className={`text-sm ${isDarkMode ? 'text-gray-300' : 'text-gray-600'}`}>\n                      Active Users\n                    </span>\n                  </div>\n                  <div className=\"flex items-center gap-1 text-green-500\">\n                    <TrendingUp className=\"h-4 w-4\" />\n                    <span className=\"text-sm font-medium\">\n                      +{((chartData[chartData.length - 1].users - chartData[0].users) / chartData[0].users * 100).toFixed(1)}%\n                    </span>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-4 md:gap-6 mb-8\">\n          <Card className={`lg:col-span-2 ${isDarkMode ? 'bg-gray-800 border-gray-700' : ''}`}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Performance Metrics</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Combined view of key metrics\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <ResponsiveContainer width=\"100%\" height={300}>\n                <LineChart data={chartData}>\n                  <CartesianGrid strokeDasharray=\"3 3\" stroke={isDarkMode ? '#374151' : '#e5e7eb'} />\n                  <XAxis \n                    dataKey=\"date\" \n                    stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                    tick={{ fill: isDarkMode ? '#9ca3af' : '#6b7280' }}\n                  />\n                  <YAxis \n                    stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                    tick={{ fill: isDarkMode ? '#9ca3af' : '#6b7280' }}\n                  />\n                  <Tooltip \n                    contentStyle={{\n                      backgroundColor: isDarkMode ? '#1f2937' : '#ffffff',\n                      border: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\n                      borderRadius: '8px',\n                      color: isDarkMode ? '#ffffff' : '#000000'\n                    }}\n                  />\n                  <Legend \n                    wrapperStyle={{\n                      color: isDarkMode ? '#9ca3af' : '#6b7280'\n                    }}\n                  />\n                  <Line \n                    type=\"monotone\" \n                    dataKey=\"revenue\" \n                    stroke=\"#3b82f6\" \n                    strokeWidth={2}\n                    dot={{ fill: '#3b82f6', r: 4 }}\n                    activeDot={{ r: 6 }}\n                  />\n                  <Line \n                    type=\"monotone\" \n                    dataKey=\"users\" \n                    stroke=\"#10b981\" \n                    strokeWidth={2}\n                    dot={{ fill: '#10b981', r: 4 }}\n                    activeDot={{ r: 6 }}\n                  />\n                  <Line \n                    type=\"monotone\" \n                    dataKey=\"orders\" \n                    stroke=\"#f59e0b\" \n                    strokeWidth={2}\n                    dot={{ fill: '#f59e0b', r: 4 }}\n                    activeDot={{ r: 6 }}\n                  />\n                </LineChart>\n              </ResponsiveContainer>\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Distribution</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Sales by category\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <PieChart data={mockPieData} isDarkMode={isDarkMode} />\n            </CardContent>\n          </Card>\n        </div>\n\n        <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n          <CardHeader>\n            <CardTitle className={isDarkMode ? 'text-white' : ''}>Top Products</CardTitle>\n            <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n              Best performing products by revenue\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              <div className=\"rounded-md border border-gray-200 dark:border-gray-700\">\n                <Table>\n                  <TableHeader>\n                    <TableRow className={isDarkMode ? 'border-gray-700 hover:bg-gray-700/50' : ''}>\n                      <TableHead className={isDarkMode ? 'text-gray-300' : ''}>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => handleSort('product')}\n                          className=\"flex items-center gap-1 hover:bg-transparent p-0\"\n                        >\n                          Product\n                          <ArrowUpDown className=\"h-4 w-4\" />\n                        </Button>\n                      </TableHead>\n                      <TableHead className={isDarkMode ? 'text-gray-300' : ''}>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => handleSort('sales')}\n                          className=\"flex items-center gap-1 hover:bg-transparent p-0\"\n                        >\n                          Sales\n                          <ArrowUpDown className=\"h-4 w-4\" />\n                        </Button>\n                      </TableHead>\n                      <TableHead className={isDarkMode ? 'text-gray-300' : ''}>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => handleSort('revenue')}\n                          className=\"flex items-center gap-1 hover:bg-transparent p-0\"\n                        >\n                          Revenue\n                          <ArrowUpDown className=\"h-4 w-4\" />\n                        </Button>\n                      </TableHead>\n                      <TableHead className={isDarkMode ? 'text-gray-300' : ''}>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => handleSort('status')}\n                          className=\"flex items-center gap-1 hover:bg-transparent p-0\"\n                        >\n                          Status\n                          <ArrowUpDown className=\"h-4 w-4\" />\n                        </Button>\n                      </TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {paginatedData.map((row) => (\n                      <TableRow \n                        key={row.id}\n                        className={isDarkMode ? 'border-gray-700 hover:bg-gray-700/50' : ''}\n                      >\n                        <TableCell className={`font-medium ${isDarkMode ? 'text-white' : ''}`}>\n                          {row.product}\n                        </TableCell>\n                        <TableCell className={isDarkMode ? 'text-gray-300' : ''}>\n                          {row.sales.toLocaleString()}\n                        </TableCell>\n                        <TableCell className={isDarkMode ? 'text-gray-300' : ''}>\n                          ${row.revenue.toLocaleString()}\n                        </TableCell>\n                        <TableCell>\n                          {getStatusBadge(row.status)}\n                        </TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              </div>\n\n              <div className=\"flex items-center justify-between\">\n                <p className={`text-sm ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                  Showing {((currentPage - 1) * itemsPerPage) + 1} to {Math.min(currentPage * itemsPerPage, sortedData.length)} of {sortedData.length} products\n                </p>\n                \n                <div className=\"flex items-center gap-2\">\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => setCurrentPage(prev => Math.max(1, prev - 1))}\n                    disabled={currentPage === 1}\n                    className={isDarkMode ? 'border-gray-700' : ''}\n                  >\n                    <ChevronLeft className=\"h-4 w-4\" />\n                  </Button>\n                  \n                  <span className={`text-sm ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>\n                    Page {currentPage} of {totalPages}\n                  </span>\n                  \n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => setCurrentPage(prev => Math.min(totalPages, prev + 1))}\n                    disabled={currentPage === totalPages}\n                    className={isDarkMode ? 'border-gray-700' : ''}\n                  >\n                    <ChevronRight className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 md:gap-6 mt-8\">\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Recent Activity</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Latest system events\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <ActivityFeed isDarkMode={isDarkMode} />\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Quick Stats</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Summary statistics\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {mockQuickStats.map((stat, index) => {\n                  const Icon = stat.icon;\n                  const percentage = (stat.value / stat.target) * 100;\n                  \n                  return (\n                    <motion.div\n                      key={stat.id}\n                      initial={{ opacity: 0, x: -20 }}\n                      animate={{ opacity: 1, x: 0 }}\n                      transition={{ delay: index * 0.1 }}\n                      className={`p-4 rounded-lg ${isDarkMode ? 'bg-gray-700/50' : 'bg-gray-50'}`}\n                    >\n                      <div className=\"flex items-center justify-between mb-2\">\n                        <div className=\"flex items-center gap-3\">\n                          <div className={`p-2 rounded-lg ${stat.color}`}>\n                            <Icon className=\"h-4 w-4 text-white\" />\n                          </div>\n                          <div>\n                            <p className={`text-sm font-medium ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>\n                              {stat.label}\n                            </p>\n                            <p className={`text-xs ${isDarkMode ? 'text-gray-500' : 'text-gray-500'}`}>\n                              {stat.value} / {stat.target}\n                            </p>\n                          </div>\n                        </div>\n                        <span className={`text-lg font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                          {percentage.toFixed(0)}%\n                        </span>\n                      </div>\n                      \n                      <div className={`w-full h-2 rounded-full overflow-hidden ${isDarkMode ? 'bg-gray-600' : 'bg-gray-200'}`}>\n                        <motion.div\n                          initial={{ width: 0 }}\n                          animate={{ width: `${percentage}%` }}\n                          transition={{ duration: 1, delay: index * 0.1 + 0.2, ease: \"easeOut\" }}\n                          className={`h-full ${stat.color}`}\n                        />\n                      </div>\n                    </motion.div>\n                  );\n                })}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}",
  "error": null,
  "overall_score": 51,
  "code_quality_score": 15,
  "architecture_score": 12,
  "performance_score": 10,
  "accessibility_score": 14,
  "metadata": {
    "document_id": "eval_room_efff11df37b8",
    "prompt_category": "intermediate",
    "prompt_complexity": 6.0
  },
  "raw_response": {
    "document_id": "eval_room_efff11df37b8",
    "mode": "parallel",
    "prompt": "Generate an analytics dashboard page with charts, data tables, real-time updates, dark mode, and responsive design",
    "content": "import { useState, useCallback } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Moon, Sun, RefreshCw } from 'lucide-react';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\n\n\nimport { ArrowUpDown, ChevronLeft, ChevronRight } from 'lucide-react';\nimport { Badge } from '@/components/ui/badge';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\n\n\n\nimport { motion } from 'framer-motion';\n\nimport { motion } from 'framer-motion';\n\nimport { TrendingUp, TrendingDown, DollarSign, Users, ShoppingCart, Target } from 'lucide-react';\n\nimport { motion } from 'framer-motion';\nimport { TrendingUp } from 'lucide-react';\nimport { Clock, ShoppingCart, UserPlus, DollarSign, AlertCircle, CheckCircle } from 'lucide-react';\n\n\ninterface MetricData {\n  id: string;\n  label: string;\n  value: number;\n  change: number;\n  trend: 'up' | 'down';\n}\n\ninterface ChartDataPoint {\n  date: string;\n  revenue: number;\n  users: number;\n  orders: number;\n}\n\ninterface TableRow {\n  id: string;\n  product: string;\n  sales: number;\n  revenue: number;\n  status: 'active' | 'pending' | 'inactive';\n}\ninterface ActivityItem {\n  id: string;\n  type: 'sale' | 'user' | 'alert' | 'success';\n  message: string;\n  timestamp: string;\n  icon: 'cart' | 'user' | 'dollar' | 'alert' | 'check';\n}\n\nconst mockActivityData: ActivityItem[] = [\n  { id: '1', type: 'sale', message: 'New order #1234 received', timestamp: '2 minutes ago', icon: 'cart' },\n  { id: '2', type: 'user', message: 'New user registration: john@example.com', timestamp: '5 minutes ago', icon: 'user' },\n  { id: '3', type: 'success', message: 'Payment processed successfully', timestamp: '12 minutes ago', icon: 'check' },\n  { id: '4', type: 'sale', message: 'Order #1233 shipped', timestamp: '18 minutes ago', icon: 'cart' },\n  { id: '5', type: 'alert', message: 'Low stock alert: Premium Plan', timestamp: '25 minutes ago', icon: 'alert' },\n  { id: '6', type: 'user', message: 'User upgraded to Pro Plan', timestamp: '32 minutes ago', icon: 'dollar' },\n  { id: '7', type: 'success', message: 'Database backup completed', timestamp: '45 minutes ago', icon: 'check' },\n  { id: '8', type: 'sale', message: 'New order #1232 received', timestamp: '1 hour ago', icon: 'cart' },\n  { id: '9', type: 'user', message: 'New user registration: sarah@example.com', timestamp: '1 hour ago', icon: 'user' },\n  { id: '10', type: 'success', message: 'System update completed', timestamp: '2 hours ago', icon: 'check' }\n];\n\nconst mockMetrics: MetricData[] = [\n  { id: '1', label: 'Total Revenue', value: 45231, change: 12.5, trend: 'up' },\n  { id: '2', label: 'Active Users', value: 2350, change: 8.2, trend: 'up' },\n  { id: '3', label: 'Total Orders', value: 1543, change: -3.1, trend: 'down' },\n  { id: '4', label: 'Conversion Rate', value: 3.24, change: 5.7, trend: 'up' }\n];\n\nconst mockChartData: ChartDataPoint[] = [\n  { date: '2024-01-01', revenue: 12000, users: 450, orders: 230 },\n  { date: '2024-01-02', revenue: 15000, users: 520, orders: 280 },\n  { date: '2024-01-03', revenue: 13500, users: 490, orders: 250 },\n  { date: '2024-01-04', revenue: 18000, users: 610, orders: 320 },\n  { date: '2024-01-05', revenue: 16500, users: 580, orders: 295 },\n  { date: '2024-01-06', revenue: 20000, users: 680, orders: 350 },\n  { date: '2024-01-07', revenue: 22000, users: 720, orders: 380 }\n];\n\nconst mockTableData: TableRow[] = [\n  { id: '1', product: 'Premium Plan', sales: 234, revenue: 23400, status: 'active' },\n  { id: '2', product: 'Basic Plan', sales: 567, revenue: 11340, status: 'active' },\n  { id: '3', product: 'Enterprise Plan', sales: 89, revenue: 17800, status: 'active' },\n  { id: '4', product: 'Starter Plan', sales: 432, revenue: 4320, status: 'pending' },\n  { id: '5', product: 'Pro Plan', sales: 156, revenue: 15600, status: 'active' }\n];\nconst mockQuickStats = [\n  { id: '1', label: 'Goal Completion', value: 78, target: 100, icon: Target, color: 'bg-blue-500' },\n  { id: '2', label: 'Customer Satisfaction', value: 92, target: 100, icon: Users, color: 'bg-green-500' },\n  { id: '3', label: 'Order Fulfillment', value: 85, target: 100, icon: ShoppingCart, color: 'bg-purple-500' },\n  { id: '4', label: 'Revenue Target', value: 67, target: 100, icon: DollarSign, color: 'bg-orange-500' }\n];\nconst ActivityFeed = ({ isDarkMode }: { isDarkMode: boolean }) => {\n  const [activities] = useState<ActivityItem[]>(mockActivityData);\n\n  const getActivityIcon = (icon: ActivityItem['icon']) => {\n    const iconClass = \"h-4 w-4\";\n    switch (icon) {\n      case 'cart':\n        return <ShoppingCart className={iconClass} />;\n      case 'user':\n        return <UserPlus className={iconClass} />;\n      case 'dollar':\n        return <DollarSign className={iconClass} />;\n      case 'alert':\n        return <AlertCircle className={iconClass} />;\n      case 'check':\n        return <CheckCircle className={iconClass} />;\n      default:\n        return <Clock className={iconClass} />;\n    }\n  };\n\n  const getActivityColor = (type: ActivityItem['type']) => {\n    switch (type) {\n      case 'sale':\n        return isDarkMode ? 'bg-blue-900/30 text-blue-400' : 'bg-blue-100 text-blue-600';\n      case 'user':\n        return isDarkMode ? 'bg-purple-900/30 text-purple-400' : 'bg-purple-100 text-purple-600';\n      case 'alert':\n        return isDarkMode ? 'bg-yellow-900/30 text-yellow-400' : 'bg-yellow-100 text-yellow-600';\n      case 'success':\n        return isDarkMode ? 'bg-green-900/30 text-green-400' : 'bg-green-100 text-green-600';\n      default:\n        return isDarkMode ? 'bg-gray-700 text-gray-300' : 'bg-gray-100 text-gray-600';\n    }\n  };\n\n  return (\n    <div className=\"max-h-[400px] overflow-y-auto pr-2 space-y-3\">\n      {activities.map((activity, index) => (\n        <motion.div\n          key={activity.id}\n          initial={{ opacity: 0, x: -20 }}\n          animate={{ opacity: 1, x: 0 }}\n          transition={{ delay: index * 0.05, duration: 0.3 }}\n          className={`flex items-start gap-3 p-3 rounded-lg transition-colors ${\n            isDarkMode ? 'hover:bg-gray-700/50' : 'hover:bg-gray-50'\n          }`}\n        >\n          <div className={`p-2 rounded-full ${getActivityColor(activity.type)}`}>\n            {getActivityIcon(activity.icon)}\n          </div>\n          \n          <div className=\"flex-1 min-w-0\">\n            <p className={`text-sm font-medium ${isDarkMode ? 'text-gray-200' : 'text-gray-900'}`}>\n              {activity.message}\n            </p>\n            <div className=\"flex items-center gap-1 mt-1\">\n              <Clock className={`h-3 w-3 ${isDarkMode ? 'text-gray-500' : 'text-gray-400'}`} />\n              <span className={`text-xs ${isDarkMode ? 'text-gray-500' : 'text-gray-500'}`}>\n                {activity.timestamp}\n              </span>\n            </div>\n          </div>\n        </motion.div>\n      ))}\n    </div>\n  );\n};\nconst mockPieData = [\n  { category: 'Premium Plan', value: 23400, color: '#3b82f6' },\n  { category: 'Enterprise Plan', value: 17800, color: '#8b5cf6' },\n  { category: 'Pro Plan', value: 15600, color: '#10b981' },\n  { category: 'Basic Plan', value: 11340, color: '#f59e0b' },\n  { category: 'Starter Plan', value: 4320, color: '#ef4444' }\n];\n\nconst PieChart = ({ data, isDarkMode }: { data: typeof mockPieData, isDarkMode: boolean }) => {\n  const total = data.reduce((sum, item) => sum + item.value, 0);\n  const size = 200;\n  const centerX = size / 2;\n  const centerY = size / 2;\n  const radius = 80;\n  const innerRadius = 50;\n\n  let currentAngle = -90;\n  const segments = data.map((item) => {\n    const percentage = (item.value / total) * 100;\n    const angle = (percentage / 100) * 360;\n    const startAngle = currentAngle;\n    const endAngle = currentAngle + angle;\n    currentAngle = endAngle;\n\n    const startRad = (startAngle * Math.PI) / 180;\n    const endRad = (endAngle * Math.PI) / 180;\n\n    const x1 = centerX + radius * Math.cos(startRad);\n    const y1 = centerY + radius * Math.sin(startRad);\n    const x2 = centerX + radius * Math.cos(endRad);\n    const y2 = centerY + radius * Math.sin(endRad);\n\n    const x3 = centerX + innerRadius * Math.cos(endRad);\n    const y3 = centerY + innerRadius * Math.sin(endRad);\n    const x4 = centerX + innerRadius * Math.cos(startRad);\n    const y4 = centerY + innerRadius * Math.sin(startRad);\n\n    const largeArc = angle > 180 ? 1 : 0;\n\n    const pathData = [\n      `M ${x1} ${y1}`,\n      `A ${radius} ${radius} 0 ${largeArc} 1 ${x2} ${y2}`,\n      `L ${x3} ${y3}`,\n      `A ${innerRadius} ${innerRadius} 0 ${largeArc} 0 ${x4} ${y4}`,\n      'Z'\n    ].join(' ');\n\n    return {\n      ...item,\n      pathData,\n      percentage: percentage.toFixed(1)\n    };\n  });\n\n  return (\n    <div className=\"flex flex-col items-center gap-6\">\n      <div className=\"relative\">\n        <svg width={size} height={size} viewBox={`0 0 ${size} ${size}`}>\n          {segments.map((segment, index) => (\n            <motion.path\n              key={segment.category}\n              d={segment.pathData}\n              fill={segment.color}\n              initial={{ opacity: 0, scale: 0 }}\n              animate={{ opacity: 1, scale: 1 }}\n              transition={{ duration: 0.5, delay: index * 0.1 }}\n              className=\"hover:opacity-80 transition-opacity cursor-pointer\"\n            />\n          ))}\n        </svg>\n        <div className=\"absolute inset-0 flex items-center justify-center flex-col\">\n          <div className={`text-2xl font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n            ${(total / 1000).toFixed(1)}k\n          </div>\n          <div className={`text-xs ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n            Total Revenue\n          </div>\n        </div>\n      </div>\n\n      <div className=\"w-full space-y-2\">\n        {segments.map((segment, index) => (\n          <motion.div\n            key={segment.category}\n            initial={{ opacity: 0, x: -20 }}\n            animate={{ opacity: 1, x: 0 }}\n            transition={{ duration: 0.3, delay: index * 0.1 }}\n            className=\"flex items-center justify-between\"\n          >\n            <div className=\"flex items-center gap-2\">\n              <div\n                className=\"w-3 h-3 rounded-full\"\n                style={{ backgroundColor: segment.color }}\n              />\n              <span className={`text-sm ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>\n                {segment.category}\n              </span>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <span className={`text-sm font-medium ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                ${(segment.value / 1000).toFixed(1)}k\n              </span>\n              <span className={`text-xs ${isDarkMode ? 'text-gray-500' : 'text-gray-500'}`}>\n                ({segment.percentage}%)\n              </span>\n            </div>\n          </motion.div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nconst RevenueChart = ({ data, isDarkMode }: { data: ChartDataPoint[], isDarkMode: boolean }) => {\n  const [hoveredPoint, setHoveredPoint] = useState<number | null>(null);\n  \n  const maxRevenue = Math.max(...data.map(d => d.revenue));\n  const minRevenue = Math.min(...data.map(d => d.revenue));\n  const revenueRange = maxRevenue - minRevenue;\n  \n  const chartHeight = 200;\n  const chartWidth = 100; // percentage\n  const padding = 20;\n  \n  const getX = (index: number) => {\n    return (index / (data.length - 1)) * 100;\n  };\n  \n  const getY = (value: number) => {\n    const normalized = (value - minRevenue) / revenueRange;\n    return chartHeight - (normalized * (chartHeight - padding * 2)) - padding;\n  };\n  \n  const pathData = data.map((point, index) => {\n    const x = getX(index);\n    const y = getY(point.revenue);\n    return `${index === 0 ? 'M' : 'L'} ${x} ${y}`;\n  }).join(' ');\n  \n  const areaPathData = `${pathData} L ${getX(data.length - 1)} ${chartHeight} L 0 ${chartHeight} Z`;\n  \n  return (\n    <div className=\"relative w-full h-64\">\n      <svg\n        viewBox={`0 0 100 ${chartHeight}`}\n        preserveAspectRatio=\"none\"\n        className=\"w-full h-full\"\n      >\n        <defs>\n          <linearGradient id=\"revenueGradient\" x1=\"0%\" y1=\"0%\" x2=\"0%\" y2=\"100%\">\n            <stop offset=\"0%\" stopColor={isDarkMode ? '#3b82f6' : '#2563eb'} stopOpacity=\"0.3\" />\n            <stop offset=\"100%\" stopColor={isDarkMode ? '#3b82f6' : '#2563eb'} stopOpacity=\"0\" />\n          </linearGradient>\n        </defs>\n        \n        <path\n          d={areaPathData}\n          fill=\"url(#revenueGradient)\"\n          className=\"transition-all duration-300\"\n        />\n        \n        <path\n          d={pathData}\n          fill=\"none\"\n          stroke={isDarkMode ? '#3b82f6' : '#2563eb'}\n          strokeWidth=\"0.5\"\n          vectorEffect=\"non-scaling-stroke\"\n          className=\"transition-colors duration-300\"\n        />\n        \n        {data.map((point, index) => (\n          <g key={index}>\n            <circle\n              cx={getX(index)}\n              cy={getY(point.revenue)}\n              r={hoveredPoint === index ? '1.5' : '1'}\n              fill={isDarkMode ? '#3b82f6' : '#2563eb'}\n              vectorEffect=\"non-scaling-stroke\"\n              className=\"transition-all duration-200 cursor-pointer\"\n              onMouseEnter={() => setHoveredPoint(index)}\n              onMouseLeave={() => setHoveredPoint(null)}\n            />\n          </g>\n        ))}\n      </svg>\n      \n      <div className=\"absolute bottom-0 left-0 right-0 flex justify-between px-2 text-xs mt-2\">\n        {data.map((point, index) => (\n          <span\n            key={index}\n            className={`${isDarkMode ? 'text-gray-400' : 'text-gray-600'} ${\n              index % 2 === 1 ? 'hidden sm:inline' : ''\n            }`}\n          >\n            {new Date(point.date).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n          </span>\n        ))}\n      </div>\n      \n      {hoveredPoint !== null && (\n        <div\n          className={`absolute z-10 px-3 py-2 rounded-lg shadow-lg transition-all duration-200 ${\n            isDarkMode ? 'bg-gray-700 border border-gray-600' : 'bg-white border border-gray-200'\n          }`}\n          style={{\n            left: `${getX(hoveredPoint)}%`,\n            top: `${(getY(data[hoveredPoint].revenue) / chartHeight) * 100}%`,\n            transform: 'translate(-50%, -120%)',\n          }}\n        >\n          <div className={`text-xs font-semibold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n            ${data[hoveredPoint].revenue.toLocaleString()}\n          </div>\n          <div className={`text-xs ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n            {new Date(data[hoveredPoint].date).toLocaleDateString('en-US', { \n              month: 'short', \n              day: 'numeric',\n              year: 'numeric'\n            })}\n          </div>\n          <div className={`text-xs flex items-center gap-1 mt-1 ${isDarkMode ? 'text-green-400' : 'text-green-600'}`}>\n            <TrendingUp className=\"h-3 w-3\" />\n            <span>{data[hoveredPoint].users} users</span>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nconst getMetricIcon = (label: string) => {\n  switch (label) {\n    case 'Total Revenue':\n      return DollarSign;\n    case 'Active Users':\n      return Users;\n    case 'Total Orders':\n      return ShoppingCart;\n    case 'Conversion Rate':\n      return Target;\n    default:\n      return DollarSign;\n  }\n};\n\nconst formatMetricValue = (label: string, value: number) => {\n  if (label === 'Total Revenue') {\n    return `$${value.toLocaleString()}`;\n  } else if (label === 'Conversion Rate') {\n    return `${value}%`;\n  }\n  return value.toLocaleString();\n};\n\nexport default function AnalyticsDashboard() {\n  const [sortColumn, setSortColumn] = useState<keyof TableRow>('revenue');\n  const [sortDirection, setSortDirection] = useState<'asc' | 'desc'>('desc');\n  const [currentPage, setCurrentPage] = useState(1);\n  const itemsPerPage = 3;\n  const [isDarkMode, setIsDarkMode] = useState(false);\n  const [metrics, setMetrics] = useState<MetricData[]>(mockMetrics);\n  const [chartData, setChartData] = useState<ChartDataPoint[]>(mockChartData);\n  const [tableData, setTableData] = useState<TableRow[]>(mockTableData);\n  const [isRefreshing, setIsRefreshing] = useState(false);\n\n  const toggleDarkMode = useCallback(() => {\n    setIsDarkMode(prev => !prev);\n  }, []);\n\n\n  const handleSort = useCallback((column: keyof TableRow) => {\n    if (sortColumn === column) {\n      setSortDirection(prev => prev === 'asc' ? 'desc' : 'asc');\n    } else {\n      setSortColumn(column);\n      setSortDirection('desc');\n    }\n  }, [sortColumn]);\n\n  const sortedData = [...tableData].sort((a, b) => {\n    const aValue = a[sortColumn];\n    const bValue = b[sortColumn];\n    \n    if (typeof aValue === 'number' && typeof bValue === 'number') {\n      return sortDirection === 'asc' ? aValue - bValue : bValue - aValue;\n    }\n    \n    if (typeof aValue === 'string' && typeof bValue === 'string') {\n      return sortDirection === 'asc' \n        ? aValue.localeCompare(bValue)\n        : bValue.localeCompare(aValue);\n    }\n    \n    return 0;\n  });\n\n  const totalPages = Math.ceil(sortedData.length / itemsPerPage);\n  const paginatedData = sortedData.slice(\n    (currentPage - 1) * itemsPerPage,\n    currentPage * itemsPerPage\n  );\n\n  const getStatusBadge = (status: TableRow['status']) => {\n    const variants = {\n      active: 'bg-green-500/10 text-green-500 border-green-500/20',\n      pending: 'bg-yellow-500/10 text-yellow-500 border-yellow-500/20',\n      inactive: 'bg-gray-500/10 text-gray-500 border-gray-500/20'\n    };\n    \n    return (\n      <Badge variant=\"outline\" className={variants[status]}>\n        {status.charAt(0).toUpperCase() + status.slice(1)}\n      </Badge>\n    );\n  };\n\n  const handleRefresh = useCallback(() => {\n\n    setIsRefreshing(true);\n    \n    setTimeout(() => {\n      // Generate updated metrics with random variations\n      const updatedMetrics = mockMetrics.map(metric => ({\n        ...metric,\n        value: metric.value + Math.floor(Math.random() * 200 - 100),\n        change: parseFloat((Math.random() * 20 - 5).toFixed(1)),\n        trend: Math.random() > 0.5 ? 'up' as const : 'down' as const\n      }));\n      \n      // Generate updated chart data with random variations\n      const updatedChartData = mockChartData.map(point => ({\n        ...point,\n        revenue: point.revenue + Math.floor(Math.random() * 4000 - 2000),\n        users: point.users + Math.floor(Math.random() * 100 - 50),\n        orders: point.orders + Math.floor(Math.random() * 50 - 25)\n      }));\n      \n      // Generate updated table data with random variations\n      const updatedTableData = mockTableData.map(row => ({\n        ...row,\n        sales: row.sales + Math.floor(Math.random() * 40 - 20),\n        revenue: row.revenue + Math.floor(Math.random() * 2000 - 1000)\n      }));\n      \n      setMetrics(updatedMetrics);\n      setChartData(updatedChartData);\n      setTableData(updatedTableData);\n      setIsRefreshing(false);\n    }, 1500);</parameter>\n  }, []);\n\n  return (\n    <div className={`min-h-screen transition-colors duration-300 ${isDarkMode ? 'dark bg-gray-900' : 'bg-gray-50'}`}>\n      <div className=\"container mx-auto p-4 md:p-6 lg:p-8\">\n        <div className=\"flex flex-col md:flex-row justify-between items-start md:items-center gap-4 mb-8\">\n          <div>\n            <h1 className={`text-3xl md:text-4xl font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n              Analytics Dashboard\n            </h1>\n            <p className={`mt-2 ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n              Real-time insights and performance metrics\n            </p>\n          </div>\n          \n          <div className=\"flex gap-2\">\n            <Button\n              variant=\"outline\"\n              size=\"icon\"\n              onClick={toggleDarkMode}\n              className={isDarkMode ? 'border-gray-700' : ''}\n            >\n              {isDarkMode ? <Sun className=\"h-5 w-5\" /> : <Moon className=\"h-5 w-5\" />}\n            </Button>\n            \n            <Button\n              variant=\"outline\"\n              onClick={handleRefresh}\n              disabled={isRefreshing}\n              className={isDarkMode ? 'border-gray-700' : ''}\n            >\n              <RefreshCw className={`h-4 w-4 mr-2 ${isRefreshing ? 'animate-spin' : ''}`} />\n              Refresh\n            </Button>\n          </div>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 md:gap-6 mb-8\">\n          {metrics.map((metric, index) => {\n            const IconComponent = getMetricIcon(metric.label);\n            const isPositive = metric.trend === 'up';\n            \n            return (\n              <motion.div\n                key={metric.id}\n                initial={{ opacity: 0, y: 20 }}\n                animate={{ opacity: 1, y: 0 }}\n                transition={{ duration: 0.4, delay: index * 0.1 }}\n              >\n                <Card className={`${isDarkMode ? 'bg-gray-800 border-gray-700' : 'bg-white'} hover:shadow-lg transition-shadow duration-300`}>\n                  <CardHeader className=\"flex flex-row items-center justify-between pb-2\">\n                    <CardTitle className={`text-sm font-medium ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                      {metric.label}\n                    </CardTitle>\n                    <div className={`p-2 rounded-lg ${isDarkMode ? 'bg-gray-700' : 'bg-gray-100'}`}>\n                      <IconComponent className={`h-4 w-4 ${isDarkMode ? 'text-gray-300' : 'text-gray-600'}`} />\n                    </div>\n                  </CardHeader>\n                  <CardContent>\n                    <div className={`text-2xl md:text-3xl font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                      {formatMetricValue(metric.label, metric.value)}\n                    </div>\n                    <div className=\"flex items-center mt-2\">\n                      {isPositive ? (\n                        <TrendingUp className=\"h-4 w-4 text-green-500 mr-1\" />\n                      ) : (\n                        <TrendingDown className=\"h-4 w-4 text-red-500 mr-1\" />\n                      )}\n                      <span className={`text-sm font-medium ${isPositive ? 'text-green-500' : 'text-red-500'}`}>\n                        {isPositive ? '+' : ''}{metric.change}%\n                      </span>\n                      <span className={`text-sm ml-2 ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                        vs last period\n                      </span>\n                    </div>\n                  </CardContent>\n                </Card>\n              </motion.div>\n            );\n          })}\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-4 md:gap-6 mb-8\">\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Revenue Overview</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Daily revenue trends\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <RevenueChart data={chartData} isDarkMode={isDarkMode} />\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>User Activity</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Active users over time\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"h-[300px] w-full\">\n                <svg width=\"100%\" height=\"100%\" viewBox=\"0 0 700 300\" preserveAspectRatio=\"none\">\n                  <defs>\n                    <linearGradient id=\"userGradient\" x1=\"0\" x2=\"0\" y1=\"0\" y2=\"1\">\n                      <stop offset=\"0%\" stopColor=\"#3b82f6\" stopOpacity=\"0.4\" />\n                      <stop offset=\"100%\" stopColor=\"#3b82f6\" stopOpacity=\"0.05\" />\n                    </linearGradient>\n                  </defs>\n                  \n                  {/* Generate path for area chart */}\n                  <motion.path\n                    d={(() => {\n                      const maxUsers = Math.max(...chartData.map(d => d.users));\n                      const width = 700;\n                      const height = 300;\n                      const padding = 20;\n                      const points = chartData.map((d, i) => {\n                        const x = (i / (chartData.length - 1)) * (width - 2 * padding) + padding;\n                        const y = height - padding - ((d.users / maxUsers) * (height - 2 * padding));\n                        return `${x},${y}`;\n                      });\n                      const pathData = `M ${padding},${height - padding} L ${points[0]} ${points.slice(1).map(p => `L ${p}`).join(' ')} L ${width - padding},${height - padding} Z`;\n                      return pathData;\n                    })()}\n                    fill=\"url(#userGradient)\"\n                    initial={{ opacity: 0, pathLength: 0 }}\n                    animate={{ opacity: 1, pathLength: 1 }}\n                    transition={{ duration: 1.5, ease: \"easeInOut\" }}\n                  />\n                  \n                  {/* Line on top of area */}\n                  <motion.polyline\n                    points={(() => {\n                      const maxUsers = Math.max(...chartData.map(d => d.users));\n                      const width = 700;\n                      const height = 300;\n                      const padding = 20;\n                      return chartData.map((d, i) => {\n                        const x = (i / (chartData.length - 1)) * (width - 2 * padding) + padding;\n                        const y = height - padding - ((d.users / maxUsers) * (height - 2 * padding));\n                        return `${x},${y}`;\n                      }).join(' ');\n                    })()}\n                    fill=\"none\"\n                    stroke=\"#3b82f6\"\n                    strokeWidth=\"3\"\n                    strokeLinecap=\"round\"\n                    strokeLinejoin=\"round\"\n                    initial={{ pathLength: 0 }}\n                    animate={{ pathLength: 1 }}\n                    transition={{ duration: 1.5, ease: \"easeInOut\" }}\n                  />\n                  \n                  {/* Data points */}\n                  {chartData.map((d, i) => {\n                    const maxUsers = Math.max(...chartData.map(d => d.users));\n                    const width = 700;\n                    const height = 300;\n                    const padding = 20;\n                    const x = (i / (chartData.length - 1)) * (width - 2 * padding) + padding;\n                    const y = height - padding - ((d.users / maxUsers) * (height - 2 * padding));\n                    \n                    return (\n                      <motion.g key={i}>\n                        <motion.circle\n                          cx={x}\n                          cy={y}\n                          r=\"5\"\n                          fill=\"#3b82f6\"\n                          stroke=\"white\"\n                          strokeWidth=\"2\"\n                          initial={{ scale: 0, opacity: 0 }}\n                          animate={{ scale: 1, opacity: 1 }}\n                          transition={{ delay: 0.1 * i, duration: 0.3 }}\n                          whileHover={{ scale: 1.5 }}\n                          style={{ cursor: 'pointer' }}\n                        />\n                        <title>{`${d.date}: ${d.users} users`}</title>\n                      </motion.g>\n                    );\n                  })}\n                </svg>\n                \n                {/* Legend and stats */}\n                <div className=\"mt-4 flex items-center justify-between\">\n                  <div className=\"flex items-center gap-2\">\n                    <div className=\"w-3 h-3 rounded-full bg-blue-500\"></div>\n                    <span className={`text-sm ${isDarkMode ? 'text-gray-300' : 'text-gray-600'}`}>\n                      Active Users\n                    </span>\n                  </div>\n                  <div className=\"flex items-center gap-1 text-green-500\">\n                    <TrendingUp className=\"h-4 w-4\" />\n                    <span className=\"text-sm font-medium\">\n                      +{((chartData[chartData.length - 1].users - chartData[0].users) / chartData[0].users * 100).toFixed(1)}%\n                    </span>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-4 md:gap-6 mb-8\">\n          <Card className={`lg:col-span-2 ${isDarkMode ? 'bg-gray-800 border-gray-700' : ''}`}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Performance Metrics</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Combined view of key metrics\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <ResponsiveContainer width=\"100%\" height={300}>\n                <LineChart data={chartData}>\n                  <CartesianGrid strokeDasharray=\"3 3\" stroke={isDarkMode ? '#374151' : '#e5e7eb'} />\n                  <XAxis \n                    dataKey=\"date\" \n                    stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                    tick={{ fill: isDarkMode ? '#9ca3af' : '#6b7280' }}\n                  />\n                  <YAxis \n                    stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                    tick={{ fill: isDarkMode ? '#9ca3af' : '#6b7280' }}\n                  />\n                  <Tooltip \n                    contentStyle={{\n                      backgroundColor: isDarkMode ? '#1f2937' : '#ffffff',\n                      border: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\n                      borderRadius: '8px',\n                      color: isDarkMode ? '#ffffff' : '#000000'\n                    }}\n                  />\n                  <Legend \n                    wrapperStyle={{\n                      color: isDarkMode ? '#9ca3af' : '#6b7280'\n                    }}\n                  />\n                  <Line \n                    type=\"monotone\" \n                    dataKey=\"revenue\" \n                    stroke=\"#3b82f6\" \n                    strokeWidth={2}\n                    dot={{ fill: '#3b82f6', r: 4 }}\n                    activeDot={{ r: 6 }}\n                  />\n                  <Line \n                    type=\"monotone\" \n                    dataKey=\"users\" \n                    stroke=\"#10b981\" \n                    strokeWidth={2}\n                    dot={{ fill: '#10b981', r: 4 }}\n                    activeDot={{ r: 6 }}\n                  />\n                  <Line \n                    type=\"monotone\" \n                    dataKey=\"orders\" \n                    stroke=\"#f59e0b\" \n                    strokeWidth={2}\n                    dot={{ fill: '#f59e0b', r: 4 }}\n                    activeDot={{ r: 6 }}\n                  />\n                </LineChart>\n              </ResponsiveContainer>\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Distribution</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Sales by category\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <PieChart data={mockPieData} isDarkMode={isDarkMode} />\n            </CardContent>\n          </Card>\n        </div>\n\n        <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n          <CardHeader>\n            <CardTitle className={isDarkMode ? 'text-white' : ''}>Top Products</CardTitle>\n            <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n              Best performing products by revenue\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              <div className=\"rounded-md border border-gray-200 dark:border-gray-700\">\n                <Table>\n                  <TableHeader>\n                    <TableRow className={isDarkMode ? 'border-gray-700 hover:bg-gray-700/50' : ''}>\n                      <TableHead className={isDarkMode ? 'text-gray-300' : ''}>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => handleSort('product')}\n                          className=\"flex items-center gap-1 hover:bg-transparent p-0\"\n                        >\n                          Product\n                          <ArrowUpDown className=\"h-4 w-4\" />\n                        </Button>\n                      </TableHead>\n                      <TableHead className={isDarkMode ? 'text-gray-300' : ''}>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => handleSort('sales')}\n                          className=\"flex items-center gap-1 hover:bg-transparent p-0\"\n                        >\n                          Sales\n                          <ArrowUpDown className=\"h-4 w-4\" />\n                        </Button>\n                      </TableHead>\n                      <TableHead className={isDarkMode ? 'text-gray-300' : ''}>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => handleSort('revenue')}\n                          className=\"flex items-center gap-1 hover:bg-transparent p-0\"\n                        >\n                          Revenue\n                          <ArrowUpDown className=\"h-4 w-4\" />\n                        </Button>\n                      </TableHead>\n                      <TableHead className={isDarkMode ? 'text-gray-300' : ''}>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => handleSort('status')}\n                          className=\"flex items-center gap-1 hover:bg-transparent p-0\"\n                        >\n                          Status\n                          <ArrowUpDown className=\"h-4 w-4\" />\n                        </Button>\n                      </TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {paginatedData.map((row) => (\n                      <TableRow \n                        key={row.id}\n                        className={isDarkMode ? 'border-gray-700 hover:bg-gray-700/50' : ''}\n                      >\n                        <TableCell className={`font-medium ${isDarkMode ? 'text-white' : ''}`}>\n                          {row.product}\n                        </TableCell>\n                        <TableCell className={isDarkMode ? 'text-gray-300' : ''}>\n                          {row.sales.toLocaleString()}\n                        </TableCell>\n                        <TableCell className={isDarkMode ? 'text-gray-300' : ''}>\n                          ${row.revenue.toLocaleString()}\n                        </TableCell>\n                        <TableCell>\n                          {getStatusBadge(row.status)}\n                        </TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              </div>\n\n              <div className=\"flex items-center justify-between\">\n                <p className={`text-sm ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                  Showing {((currentPage - 1) * itemsPerPage) + 1} to {Math.min(currentPage * itemsPerPage, sortedData.length)} of {sortedData.length} products\n                </p>\n                \n                <div className=\"flex items-center gap-2\">\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => setCurrentPage(prev => Math.max(1, prev - 1))}\n                    disabled={currentPage === 1}\n                    className={isDarkMode ? 'border-gray-700' : ''}\n                  >\n                    <ChevronLeft className=\"h-4 w-4\" />\n                  </Button>\n                  \n                  <span className={`text-sm ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>\n                    Page {currentPage} of {totalPages}\n                  </span>\n                  \n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => setCurrentPage(prev => Math.min(totalPages, prev + 1))}\n                    disabled={currentPage === totalPages}\n                    className={isDarkMode ? 'border-gray-700' : ''}\n                  >\n                    <ChevronRight className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 md:gap-6 mt-8\">\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Recent Activity</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Latest system events\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <ActivityFeed isDarkMode={isDarkMode} />\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Quick Stats</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Summary statistics\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {mockQuickStats.map((stat, index) => {\n                  const Icon = stat.icon;\n                  const percentage = (stat.value / stat.target) * 100;\n                  \n                  return (\n                    <motion.div\n                      key={stat.id}\n                      initial={{ opacity: 0, x: -20 }}\n                      animate={{ opacity: 1, x: 0 }}\n                      transition={{ delay: index * 0.1 }}\n                      className={`p-4 rounded-lg ${isDarkMode ? 'bg-gray-700/50' : 'bg-gray-50'}`}\n                    >\n                      <div className=\"flex items-center justify-between mb-2\">\n                        <div className=\"flex items-center gap-3\">\n                          <div className={`p-2 rounded-lg ${stat.color}`}>\n                            <Icon className=\"h-4 w-4 text-white\" />\n                          </div>\n                          <div>\n                            <p className={`text-sm font-medium ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>\n                              {stat.label}\n                            </p>\n                            <p className={`text-xs ${isDarkMode ? 'text-gray-500' : 'text-gray-500'}`}>\n                              {stat.value} / {stat.target}\n                            </p>\n                          </div>\n                        </div>\n                        <span className={`text-lg font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                          {percentage.toFixed(0)}%\n                        </span>\n                      </div>\n                      \n                      <div className={`w-full h-2 rounded-full overflow-hidden ${isDarkMode ? 'bg-gray-600' : 'bg-gray-200'}`}>\n                        <motion.div\n                          initial={{ width: 0 }}\n                          animate={{ width: `${percentage}%` }}\n                          transition={{ duration: 1, delay: index * 0.1 + 0.2, ease: \"easeOut\" }}\n                          className={`h-full ${stat.color}`}\n                        />\n                      </div>\n                    </motion.div>\n                  );\n                })}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}",
    "error": null,
    "elapsed_time": 89.35915660858154,
    "success": true
  }
}