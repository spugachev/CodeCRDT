{
  "prompt_id": "dashboard",
  "prompt_name": "Analytics Dashboard",
  "mode": "parallel",
  "run_number": 5,
  "timestamp": "2025-10-13T20:46:17.615784",
  "response_time": 79.34782600402832,
  "total_tokens": null,
  "response_content": "import { useState, useCallback } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Moon, Sun, RefreshCw } from 'lucide-react';\nimport { ArrowUpDown, ArrowUp, ArrowDown } from 'lucide-react';\nimport { Badge } from '@/components/ui/badge';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\nimport { TrendingUp, TrendingDown, DollarSign, Users, ShoppingCart, Target } from 'lucide-react';\nimport { Activity, TrendingUp, TrendingDown, AlertCircle, CheckCircle, Clock } from 'lucide-react';\nimport { Badge } from '@/components/ui/badge';\n\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, Legend } from 'recharts';\nimport { motion } from 'framer-motion';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';\nimport { TrendingUp, TrendingDown, DollarSign, Users, ShoppingCart, Target } from 'lucide-react';\n\ninterface MetricData {\n  id: string;\n  label: string;\n  value: number;\n  change: number;\n  trend: 'up' | 'down';\n}\n\ninterface ChartDataPoint {\n  date: string;\n  revenue: number;\n  users: number;\n  orders: number;\n}\n\ninterface TableRow {\n  id: string;\n  product: string;\n  sales: number;\n  revenue: number;\n  status: 'active' | 'pending' | 'inactive';\n}\n\nconst mockMetrics: MetricData[] = [\n  { id: '1', label: 'Total Revenue', value: 45231, change: 12.5, trend: 'up' },\n  { id: '2', label: 'Active Users', value: 2350, change: 8.2, trend: 'up' },\n  { id: '3', label: 'Total Orders', value: 1543, change: -3.1, trend: 'down' },\n  { id: '4', label: 'Conversion Rate', value: 3.24, change: 5.7, trend: 'up' }\n];\n\nconst mockChartData: ChartDataPoint[] = [\n  { date: '2024-01-01', revenue: 12000, users: 450, orders: 230 },\n  { date: '2024-01-02', revenue: 15000, users: 520, orders: 280 },\n  { date: '2024-01-03', revenue: 13500, users: 490, orders: 250 },\n  { date: '2024-01-04', revenue: 18000, users: 610, orders: 320 },\n  { date: '2024-01-05', revenue: 16500, users: 580, orders: 295 },\n  { date: '2024-01-06', revenue: 20000, users: 680, orders: 360 },\n  { date: '2024-01-07', revenue: 22000, users: 720, orders: 390 }\n];\n\nconst mockTableData: TableRow[] = [\n  { id: '1', product: 'Premium Plan', sales: 234, revenue: 23400, status: 'active' },\n  { id: '2', product: 'Basic Plan', sales: 567, revenue: 11340, status: 'active' },\n  { id: '3', product: 'Enterprise Plan', sales: 89, revenue: 17800, status: 'active' },\n  { id: '4', product: 'Starter Plan', sales: 432, revenue: 4320, status: 'pending' },\n  { id: '5', product: 'Pro Plan', sales: 156, revenue: 15600, status: 'inactive' }\n];\ninterface ActivityItem {\n  id: string;\n  type: 'success' | 'warning' | 'info' | 'error';\n  message: string;\n  timestamp: string;\n  icon: 'trending-up' | 'trending-down' | 'alert' | 'check' | 'activity';\n}\n\nconst mockActivityData: ActivityItem[] = [\n  { id: '1', type: 'success', message: 'New order received - Premium Plan', timestamp: '2 minutes ago', icon: 'check' },\n  { id: '2', type: 'info', message: '15 new users registered', timestamp: '5 minutes ago', icon: 'activity' },\n  { id: '3', type: 'success', message: 'Revenue milestone reached: $50,000', timestamp: '12 minutes ago', icon: 'trending-up' },\n  { id: '4', type: 'warning', message: 'Server response time increased', timestamp: '18 minutes ago', icon: 'alert' },\n  { id: '5', type: 'info', message: 'Database backup completed', timestamp: '25 minutes ago', icon: 'check' },\n  { id: '6', type: 'success', message: 'Conversion rate improved by 3.2%', timestamp: '32 minutes ago', icon: 'trending-up' },\n  { id: '7', type: 'error', message: 'Payment gateway timeout detected', timestamp: '45 minutes ago', icon: 'alert' },\n  { id: '8', type: 'info', message: 'Weekly report generated', timestamp: '1 hour ago', icon: 'activity' },\n  { id: '9', type: 'success', message: '50 orders processed successfully', timestamp: '1 hour ago', icon: 'check' },\n  { id: '10', type: 'warning', message: 'Low inventory alert - Starter Plan', timestamp: '2 hours ago', icon: 'alert' }\n];\n\ntype SortField = 'product' | 'sales' | 'revenue' | 'status';\ntype SortDirection = 'asc' | 'desc' | null;\n\nconst formatCurrency = (value: number): string => {\n  return new Intl.NumberFormat('en-US', {\n    style: 'currency',\n    currency: 'USD',\n    minimumFractionDigits: 0,\n    maximumFractionDigits: 0\n  }).format(value);\n};\n\nconst formatNumber = (value: number): string => {\n  return new Intl.NumberFormat('en-US').format(value);\n};\n\nconst getStatusColor = (status: 'active' | 'pending' | 'inactive'): string => {\n  switch (status) {\n    case 'active':\n      return 'bg-green-500/10 text-green-500 border-green-500/20';\n    case 'pending':\n      return 'bg-yellow-500/10 text-yellow-500 border-yellow-500/20';\n    case 'inactive':\n      return 'bg-gray-500/10 text-gray-500 border-gray-500/20';\n  }\n};\n\nexport default function AnalyticsDashboard() {\n  const [isDarkMode, setIsDarkMode] = useState(false);\n  const [metrics, setMetrics] = useState<MetricData[]>(mockMetrics);\n  const [chartData, setChartData] = useState<ChartDataPoint[]>(mockChartData);\n  const [tableData, setTableData] = useState<TableRow[]>(mockTableData);\n  const [isRefreshing, setIsRefreshing] = useState(false);\n  const [sortField, setSortField] = useState<SortField | null>(null);\n  const [sortDirection, setSortDirection] = useState<SortDirection>(null);\n\n  const toggleDarkMode = useCallback(() => {\n    setIsDarkMode(prev => !prev);\n  }, []);\n\n  const handleSort = useCallback((field: SortField) => {\n    if (sortField === field) {\n      if (sortDirection === 'asc') {\n        setSortDirection('desc');\n      } else if (sortDirection === 'desc') {\n        setSortDirection(null);\n        setSortField(null);\n      }\n    } else {\n      setSortField(field);\n      setSortDirection('asc');\n    }\n  }, [sortField, sortDirection]);\n\n  const sortedTableData = useCallback(() => {\n    if (!sortField || !sortDirection) {\n      return tableData;\n    }\n\n    return [...tableData].sort((a, b) => {\n      let aValue = a[sortField];\n      let bValue = b[sortField];\n\n      if (typeof aValue === 'string') {\n        aValue = aValue.toLowerCase();\n        bValue = (bValue as string).toLowerCase();\n      }\n\n      if (aValue < bValue) {\n        return sortDirection === 'asc' ? -1 : 1;\n      }\n      if (aValue > bValue) {\n        return sortDirection === 'asc' ? 1 : -1;\n      }\n      return 0;\n    });\n  }, [tableData, sortField, sortDirection]);\n\n  const handleRefresh = useCallback(() => {\n    setIsRefreshing(true);\n    \n    setTimeout(() => {\n      // Generate updated metrics with random variations\n      const updatedMetrics = mockMetrics.map(metric => ({\n        ...metric,\n        value: metric.value + Math.floor(Math.random() * 200 - 100),\n        change: parseFloat((Math.random() * 20 - 5).toFixed(1)),\n        trend: Math.random() > 0.5 ? 'up' as const : 'down' as const\n      }));\n      \n      // Generate updated chart data with random variations\n      const updatedChartData = mockChartData.map(point => ({\n        ...point,\n        revenue: point.revenue + Math.floor(Math.random() * 4000 - 2000),\n        users: point.users + Math.floor(Math.random() * 100 - 50),\n        orders: point.orders + Math.floor(Math.random() * 50 - 25)\n      }));\n      \n      // Generate updated table data with random variations\n      const updatedTableData = mockTableData.map(row => ({\n        ...row,\n        sales: row.sales + Math.floor(Math.random() * 40 - 20),\n        revenue: row.revenue + Math.floor(Math.random() * 2000 - 1000)\n      }));\n      \n      setMetrics(updatedMetrics);\n      setChartData(updatedChartData);\n      setTableData(updatedTableData);\n      setIsRefreshing(false);\n    }, 1500);\n  }, []);\n\n  return (\n    <div className={`min-h-screen transition-colors duration-300 ${isDarkMode ? 'dark bg-gray-900' : 'bg-gray-50'}`}>\n      <div className=\"container mx-auto p-4 md:p-6 lg:p-8\">\n        <div className=\"flex flex-col md:flex-row md:items-center md:justify-between mb-8 gap-4\">\n          <div>\n            <h1 className={`text-3xl md:text-4xl font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n              Analytics Dashboard\n            </h1>\n            <p className={`mt-2 ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n              Real-time insights and performance metrics\n            </p>\n          </div>\n          \n          <div className=\"flex items-center gap-3\">\n            <Button\n              variant=\"outline\"\n              size=\"icon\"\n              onClick={toggleDarkMode}\n              className={isDarkMode ? 'border-gray-700 hover:bg-gray-800' : ''}\n            >\n              {isDarkMode ? <Sun className=\"h-5 w-5\" /> : <Moon className=\"h-5 w-5\" />}\n            </Button>\n            \n            <Button\n              variant=\"outline\"\n              onClick={handleRefresh}\n              disabled={isRefreshing}\n              className={isDarkMode ? 'border-gray-700 hover:bg-gray-800' : ''}\n            >\n              <RefreshCw className={`h-4 w-4 mr-2 ${isRefreshing ? 'animate-spin' : ''}`} />\n              Refresh\n            </Button>\n          </div>\n        </div>\n\n        <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 md:gap-6 mb-8\">\n          {metrics.map((metric) => {\n            const Icon = metric.label.includes('Revenue') ? DollarSign :\n                        metric.label.includes('Users') ? Users :\n                        metric.label.includes('Orders') ? ShoppingCart : Target;\n            \n            return (\n              <Card key={metric.id} className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n                <CardHeader className=\"flex flex-row items-center justify-between pb-2\">\n                  <CardTitle className={`text-sm font-medium ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                    {metric.label}\n                  </CardTitle>\n                  <Icon className={`h-4 w-4 ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`} />\n                </CardHeader>\n                <CardContent>\n                  <div className={`text-2xl font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                    {metric.label.includes('Rate') ? `${metric.value}%` : metric.value.toLocaleString()}\n                  </div>\n                  <div className=\"flex items-center mt-2\">\n                    {metric.trend === 'up' ? (\n                      <TrendingUp className=\"h-4 w-4 text-green-500 mr-1\" />\n                    ) : (\n                      <TrendingDown className=\"h-4 w-4 text-red-500 mr-1\" />\n                    )}\n                    <span className={`text-sm font-medium ${metric.trend === 'up' ? 'text-green-500' : 'text-red-500'}`}>\n                      {metric.change > 0 ? '+' : ''}{metric.change}%\n                    </span>\n                    <span className={`text-sm ml-2 ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                      vs last period\n                    </span>\n                  </div>\n                </CardContent>\n              </Card>\n            );\n          })}\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6 mb-8\">\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Revenue Overview</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Daily revenue trends for the past week\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"h-[300px] w-full\">\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <LineChart\n                    data={chartData}\n                    margin={{ top: 5, right: 10, left: 0, bottom: 5 }}\n                  >\n                    <CartesianGrid \n                      strokeDasharray=\"3 3\" \n                      stroke={isDarkMode ? '#374151' : '#e5e7eb'}\n                    />\n                    <XAxis \n                      dataKey=\"date\" \n                      stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                      fontSize={12}\n                      tickFormatter={(value) => new Date(value).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n                    />\n                    <YAxis \n                      stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                      fontSize={12}\n                      tickFormatter={(value) => `$${(value / 1000).toFixed(0)}k`}\n                    />\n                    <Tooltip \n                      contentStyle={{\n                        backgroundColor: isDarkMode ? '#1f2937' : '#ffffff',\n                        border: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\n                        borderRadius: '6px',\n                        color: isDarkMode ? '#ffffff' : '#000000'\n                      }}\n                      labelFormatter={(value) => new Date(value).toLocaleDateString('en-US', { month: 'long', day: 'numeric', year: 'numeric' })}\n                      formatter={(value: number) => [`$${value.toLocaleString()}`, 'Revenue']}\n                    />\n                    <Line \n                      type=\"monotone\" \n                      dataKey=\"revenue\" \n                      stroke=\"#3b82f6\" \n                      strokeWidth={2}\n                      dot={{ fill: '#3b82f6', r: 4 }}\n                      activeDot={{ r: 6 }}\n                    />\n                  </LineChart>\n                </ResponsiveContainer>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>User Activity</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Active users and engagement metrics\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"h-[300px] w-full relative\">\n                <svg className=\"w-full h-full\" viewBox=\"0 0 700 300\" preserveAspectRatio=\"none\">\n                  <defs>\n                    <linearGradient id=\"userGradient\" x1=\"0%\" y1=\"0%\" x2=\"0%\" y2=\"100%\">\n                      <stop offset=\"0%\" stopColor=\"#3b82f6\" stopOpacity=\"0.4\" />\n                      <stop offset=\"100%\" stopColor=\"#3b82f6\" stopOpacity=\"0.05\" />\n                    </linearGradient>\n                  </defs>\n                  \n                  {/* Area path */}\n                  <motion.path\n                    d={`M 0,${300 - (chartData[0].users / 720) * 250} \n                        L ${100},${300 - (chartData[1].users / 720) * 250}\n                        L ${200},${300 - (chartData[2].users / 720) * 250}\n                        L ${300},${300 - (chartData[3].users / 720) * 250}\n                        L ${400},${300 - (chartData[4].users / 720) * 250}\n                        L ${500},${300 - (chartData[5].users / 720) * 250}\n                        L ${600},${300 - (chartData[6].users / 720) * 250}\n                        L 600,300 L 0,300 Z`}\n                    fill=\"url(#userGradient)\"\n                    initial={{ opacity: 0 }}\n                    animate={{ opacity: 1 }}\n                    transition={{ duration: 0.8 }}\n                  />\n                  \n                  {/* Line path */}\n                  <motion.path\n                    d={`M 0,${300 - (chartData[0].users / 720) * 250} \n                        L ${100},${300 - (chartData[1].users / 720) * 250}\n                        L ${200},${300 - (chartData[2].users / 720) * 250}\n                        L ${300},${300 - (chartData[3].users / 720) * 250}\n                        L ${400},${300 - (chartData[4].users / 720) * 250}\n                        L ${500},${300 - (chartData[5].users / 720) * 250}\n                        L ${600},${300 - (chartData[6].users / 720) * 250}`}\n                    fill=\"none\"\n                    stroke=\"#3b82f6\"\n                    strokeWidth=\"3\"\n                    initial={{ pathLength: 0 }}\n                    animate={{ pathLength: 1 }}\n                    transition={{ duration: 1.5, ease: \"easeInOut\" }}\n                  />\n                  \n                  {/* Data points */}\n                  {chartData.map((point, index) => (\n                    <motion.g\n                      key={point.date}\n                      initial={{ opacity: 0, scale: 0 }}\n                      animate={{ opacity: 1, scale: 1 }}\n                      transition={{ delay: 0.1 * index, duration: 0.3 }}\n                    >\n                      <circle\n                        cx={index * 100}\n                        cy={300 - (point.users / 720) * 250}\n                        r=\"6\"\n                        fill=\"#3b82f6\"\n                        className=\"cursor-pointer transition-all hover:r-8\"\n                        style={{ filter: 'drop-shadow(0 2px 4px rgba(59, 130, 246, 0.3))' }}\n                      />\n                      <circle\n                        cx={index * 100}\n                        cy={300 - (point.users / 720) * 250}\n                        r=\"12\"\n                        fill=\"transparent\"\n                        className=\"cursor-pointer\"\n                        onMouseEnter={(e) => {\n                          const tooltip = document.getElementById(`tooltip-${index}`);\n                          if (tooltip) tooltip.style.opacity = '1';\n                        }}\n                        onMouseLeave={(e) => {\n                          const tooltip = document.getElementById(`tooltip-${index}`);\n                          if (tooltip) tooltip.style.opacity = '0';\n                        }}\n                      />\n                    </motion.g>\n                  ))}\n                </svg>\n                \n                {/* Tooltips */}\n                {chartData.map((point, index) => (\n                  <div\n                    key={`tooltip-${point.date}`}\n                    id={`tooltip-${index}`}\n                    className={`absolute pointer-events-none transition-opacity duration-200 opacity-0 ${\n                      isDarkMode ? 'bg-gray-700 text-white' : 'bg-white text-gray-900'\n                    } px-3 py-2 rounded-lg shadow-lg border ${\n                      isDarkMode ? 'border-gray-600' : 'border-gray-200'\n                    }`}\n                    style={{\n                      left: `${(index * 100 / 600) * 100}%`,\n                      top: `${((300 - (point.users / 720) * 250) / 300) * 100 - 15}%`,\n                      transform: 'translate(-50%, -100%)'\n                    }}\n                  >\n                    <div className=\"text-xs font-semibold\">{point.users} Users</div>\n                    <div className={`text-xs ${isDarkMode ? 'text-gray-400' : 'text-gray-500'}`}>\n                      {new Date(point.date).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n                    </div>\n                  </div>\n                ))}\n                \n                {/* Y-axis labels */}\n                <div className=\"absolute left-0 top-0 h-full flex flex-col justify-between text-xs\">\n                  <span className={isDarkMode ? 'text-gray-400' : 'text-gray-500'}>720</span>\n                  <span className={isDarkMode ? 'text-gray-400' : 'text-gray-500'}>540</span>\n                  <span className={isDarkMode ? 'text-gray-400' : 'text-gray-500'}>360</span>\n                  <span className={isDarkMode ? 'text-gray-400' : 'text-gray-500'}>180</span>\n                  <span className={isDarkMode ? 'text-gray-400' : 'text-gray-500'}>0</span>\n                </div>\n                \n                {/* X-axis labels */}\n                <div className=\"absolute bottom-0 left-0 w-full flex justify-between text-xs mt-2 px-8\">\n                  {chartData.map((point, index) => (\n                    <span key={point.date} className={isDarkMode ? 'text-gray-400' : 'text-gray-500'}>\n                      {new Date(point.date).toLocaleDateString('en-US', { weekday: 'short' })}\n                    </span>\n                  ))}\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6 mb-8\">\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Orders Distribution</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Order volume by category\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"h-[300px]\">\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <BarChart data={chartData}>\n                    <CartesianGrid strokeDasharray=\"3 3\" stroke={isDarkMode ? '#374151' : '#e5e7eb'} />\n                    <XAxis \n                      dataKey=\"date\" \n                      stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                      tick={{ fill: isDarkMode ? '#9ca3af' : '#6b7280' }}\n                      tickFormatter={(value) => new Date(value).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n                    />\n                    <YAxis \n                      stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                      tick={{ fill: isDarkMode ? '#9ca3af' : '#6b7280' }}\n                    />\n                    <Tooltip \n                      contentStyle={{\n                        backgroundColor: isDarkMode ? '#1f2937' : '#ffffff',\n                        border: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\n                        borderRadius: '8px',\n                        color: isDarkMode ? '#ffffff' : '#000000'\n                      }}\n                      labelFormatter={(value) => new Date(value).toLocaleDateString('en-US', { month: 'long', day: 'numeric', year: 'numeric' })}\n                    />\n                    <Bar \n                      dataKey=\"orders\" \n                      fill=\"#8b5cf6\" \n                      radius={[8, 8, 0, 0]}\n                      animationDuration={1000}\n                    />\n                  </BarChart>\n                </ResponsiveContainer>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className={`lg:col-span-2 ${isDarkMode ? 'bg-gray-800 border-gray-700' : ''}`}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Performance Comparison</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Multi-metric comparison over time\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"h-[300px] w-full\">\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <LineChart\n                    data={chartData}\n                    margin={{ top: 5, right: 30, left: 20, bottom: 5 }}\n                  >\n                    <CartesianGrid \n                      strokeDasharray=\"3 3\" \n                      stroke={isDarkMode ? '#374151' : '#e5e7eb'}\n                    />\n                    <XAxis \n                      dataKey=\"date\" \n                      stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                      tick={{ fill: isDarkMode ? '#9ca3af' : '#6b7280' }}\n                      tickFormatter={(value) => new Date(value).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n                    />\n                    <YAxis \n                      stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                      tick={{ fill: isDarkMode ? '#9ca3af' : '#6b7280' }}\n                    />\n                    <Tooltip \n                      contentStyle={{\n                        backgroundColor: isDarkMode ? '#1f2937' : '#ffffff',\n                        border: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\n                        borderRadius: '8px',\n                        color: isDarkMode ? '#ffffff' : '#000000'\n                      }}\n                      labelFormatter={(value) => new Date(value).toLocaleDateString('en-US', { month: 'long', day: 'numeric', year: 'numeric' })}\n                      formatter={(value: number, name: string) => {\n                        if (name === 'revenue') return [`$${value.toLocaleString()}`, 'Revenue'];\n                        if (name === 'users') return [value.toLocaleString(), 'Users'];\n                        if (name === 'orders') return [value.toLocaleString(), 'Orders'];\n                        return [value, name];\n                      }}\n                    />\n                    <Legend \n                      wrapperStyle={{ color: isDarkMode ? '#9ca3af' : '#6b7280' }}\n                      formatter={(value) => {\n                        if (value === 'revenue') return 'Revenue';\n                        if (value === 'users') return 'Users';\n                        if (value === 'orders') return 'Orders';\n                        return value;\n                      }}\n                    />\n                    <Line \n                      type=\"monotone\" \n                      dataKey=\"revenue\" \n                      stroke=\"#3b82f6\" \n                      strokeWidth={2}\n                      dot={{ fill: '#3b82f6', r: 4 }}\n                      activeDot={{ r: 6 }}\n                    />\n                    <Line \n                      type=\"monotone\" \n                      dataKey=\"users\" \n                      stroke=\"#10b981\" \n                      strokeWidth={2}\n                      dot={{ fill: '#10b981', r: 4 }}\n                      activeDot={{ r: 6 }}\n                    />\n                    <Line \n                      type=\"monotone\" \n                      dataKey=\"orders\" \n                      stroke=\"#f59e0b\" \n                      strokeWidth={2}\n                      dot={{ fill: '#f59e0b', r: 4 }}\n                      activeDot={{ r: 6 }}\n                    />\n                  </LineChart>\n                </ResponsiveContainer>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n          <CardHeader>\n            <CardTitle className={isDarkMode ? 'text-white' : ''}>Top Products</CardTitle>\n            <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n              Best performing products by sales and revenue\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"overflow-x-auto\">\n              <Table>\n                <TableHeader>\n                  <TableRow className={isDarkMode ? 'border-gray-700 hover:bg-gray-700/50' : ''}>\n                    <TableHead className={isDarkMode ? 'text-gray-300' : ''}>\n                      <Button\n                        variant=\"ghost\"\n                        onClick={() => handleSort('product')}\n                        className={`flex items-center gap-1 px-0 hover:bg-transparent ${isDarkMode ? 'text-gray-300 hover:text-white' : ''}`}\n                      >\n                        Product\n                        {sortField === 'product' ? (\n                          sortDirection === 'asc' ? (\n                            <ArrowUp className=\"h-4 w-4\" />\n                          ) : (\n                            <ArrowDown className=\"h-4 w-4\" />\n                          )\n                        ) : (\n                          <ArrowUpDown className=\"h-4 w-4 opacity-50\" />\n                        )}\n                      </Button>\n                    </TableHead>\n                    <TableHead className={isDarkMode ? 'text-gray-300' : ''}>\n                      <Button\n                        variant=\"ghost\"\n                        onClick={() => handleSort('sales')}\n                        className={`flex items-center gap-1 px-0 hover:bg-transparent ${isDarkMode ? 'text-gray-300 hover:text-white' : ''}`}\n                      >\n                        Sales\n                        {sortField === 'sales' ? (\n                          sortDirection === 'asc' ? (\n                            <ArrowUp className=\"h-4 w-4\" />\n                          ) : (\n                            <ArrowDown className=\"h-4 w-4\" />\n                          )\n                        ) : (\n                          <ArrowUpDown className=\"h-4 w-4 opacity-50\" />\n                        )}\n                      </Button>\n                    </TableHead>\n                    <TableHead className={isDarkMode ? 'text-gray-300' : ''}>\n                      <Button\n                        variant=\"ghost\"\n                        onClick={() => handleSort('revenue')}\n                        className={`flex items-center gap-1 px-0 hover:bg-transparent ${isDarkMode ? 'text-gray-300 hover:text-white' : ''}`}\n                      >\n                        Revenue\n                        {sortField === 'revenue' ? (\n                          sortDirection === 'asc' ? (\n                            <ArrowUp className=\"h-4 w-4\" />\n                          ) : (\n                            <ArrowDown className=\"h-4 w-4\" />\n                          )\n                        ) : (\n                          <ArrowUpDown className=\"h-4 w-4 opacity-50\" />\n                        )}\n                      </Button>\n                    </TableHead>\n                    <TableHead className={isDarkMode ? 'text-gray-300' : ''}>\n                      <Button\n                        variant=\"ghost\"\n                        onClick={() => handleSort('status')}\n                        className={`flex items-center gap-1 px-0 hover:bg-transparent ${isDarkMode ? 'text-gray-300 hover:text-white' : ''}`}\n                      >\n                        Status\n                        {sortField === 'status' ? (\n                          sortDirection === 'asc' ? (\n                            <ArrowUp className=\"h-4 w-4\" />\n                          ) : (\n                            <ArrowDown className=\"h-4 w-4\" />\n                          )\n                        ) : (\n                          <ArrowUpDown className=\"h-4 w-4 opacity-50\" />\n                        )}\n                      </Button>\n                    </TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {sortedTableData().map((row) => (\n                    <TableRow \n                      key={row.id}\n                      className={isDarkMode ? 'border-gray-700 hover:bg-gray-700/50' : 'hover:bg-gray-50'}\n                    >\n                      <TableCell className={`font-medium ${isDarkMode ? 'text-white' : ''}`}>\n                        {row.product}\n                      </TableCell>\n                      <TableCell className={isDarkMode ? 'text-gray-300' : ''}>\n                        {formatNumber(row.sales)}\n                      </TableCell>\n                      <TableCell className={`font-semibold ${isDarkMode ? 'text-gray-300' : ''}`}>\n                        {formatCurrency(row.revenue)}\n                      </TableCell>\n                      <TableCell>\n                        <Badge \n                          variant=\"outline\" \n                          className={getStatusColor(row.status)}\n                        >\n                          {row.status.charAt(0).toUpperCase() + row.status.slice(1)}\n                        </Badge>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </div>\n          </CardContent>\n        </Card>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6 mt-8\">\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Real-Time Updates</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Live activity feed\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4 max-h-[400px] overflow-y-auto pr-2\">\n                {mockActivityData.map((activity) => {\n                  const getIcon = () => {\n                    switch (activity.icon) {\n                      case 'trending-up':\n                        return <TrendingUp className=\"h-4 w-4\" />;\n                      case 'trending-down':\n                        return <TrendingDown className=\"h-4 w-4\" />;\n                      case 'alert':\n                        return <AlertCircle className=\"h-4 w-4\" />;\n                      case 'check':\n                        return <CheckCircle className=\"h-4 w-4\" />;\n                      case 'activity':\n                        return <Activity className=\"h-4 w-4\" />;\n                      default:\n                        return <Activity className=\"h-4 w-4\" />;\n                    }\n                  };\n\n                  const getStatusColor = () => {\n                    switch (activity.type) {\n                      case 'success':\n                        return isDarkMode ? 'text-green-400 bg-green-400/10' : 'text-green-600 bg-green-50';\n                      case 'warning':\n                        return isDarkMode ? 'text-yellow-400 bg-yellow-400/10' : 'text-yellow-600 bg-yellow-50';\n                      case 'error':\n                        return isDarkMode ? 'text-red-400 bg-red-400/10' : 'text-red-600 bg-red-50';\n                      case 'info':\n                        return isDarkMode ? 'text-blue-400 bg-blue-400/10' : 'text-blue-600 bg-blue-50';\n                      default:\n                        return isDarkMode ? 'text-gray-400 bg-gray-400/10' : 'text-gray-600 bg-gray-50';\n                    }\n                  };\n\n                  const getBadgeVariant = () => {\n                    switch (activity.type) {\n                      case 'success':\n                        return 'default';\n                      case 'warning':\n                        return 'secondary';\n                      case 'error':\n                        return 'destructive';\n                      case 'info':\n                        return 'outline';\n                      default:\n                        return 'outline';\n                    }\n                  };\n\n                  return (\n                    <div\n                      key={activity.id}\n                      className={`flex items-start gap-3 p-3 rounded-lg transition-colors ${\n                        isDarkMode ? 'hover:bg-gray-700/50' : 'hover:bg-gray-100'\n                      }`}\n                    >\n                      <div className={`p-2 rounded-full ${getStatusColor()}`}>\n                        {getIcon()}\n                      </div>\n                      <div className=\"flex-1 min-w-0\">\n                        <p className={`text-sm font-medium ${isDarkMode ? 'text-gray-200' : 'text-gray-900'}`}>\n                          {activity.message}\n                        </p>\n                        <div className=\"flex items-center gap-2 mt-1\">\n                          <Clock className={`h-3 w-3 ${isDarkMode ? 'text-gray-500' : 'text-gray-400'}`} />\n                          <span className={`text-xs ${isDarkMode ? 'text-gray-500' : 'text-gray-500'}`}>\n                            {activity.timestamp}\n                          </span>\n                          <Badge variant={getBadgeVariant()} className=\"text-xs\">\n                            {activity.type}\n                          </Badge>\n                        </div>\n                      </div>\n                    </div>\n                  );\n                })}\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Quick Stats</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Key performance indicators\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className={`p-4 rounded-lg border ${isDarkMode ? 'bg-gray-900 border-gray-700' : 'bg-white border-gray-200'}`}>\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <div className={`p-2 rounded-lg ${isDarkMode ? 'bg-blue-900/30' : 'bg-blue-100'}`}>\n                      <DollarSign className={`h-4 w-4 ${isDarkMode ? 'text-blue-400' : 'text-blue-600'}`} />\n                    </div>\n                    <div className=\"flex items-center gap-1\">\n                      <TrendingUp className=\"h-3 w-3 text-green-500\" />\n                      <span className=\"text-xs font-medium text-green-500\">+12.5%</span>\n                    </div>\n                  </div>\n                  <div className={`text-2xl font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                    $45.2K\n                  </div>\n                  <div className={`text-xs ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                    Total Revenue\n                  </div>\n                </div>\n\n                <div className={`p-4 rounded-lg border ${isDarkMode ? 'bg-gray-900 border-gray-700' : 'bg-white border-gray-200'}`}>\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <div className={`p-2 rounded-lg ${isDarkMode ? 'bg-purple-900/30' : 'bg-purple-100'}`}>\n                      <Users className={`h-4 w-4 ${isDarkMode ? 'text-purple-400' : 'text-purple-600'}`} />\n                    </div>\n                    <div className=\"flex items-center gap-1\">\n                      <TrendingUp className=\"h-3 w-3 text-green-500\" />\n                      <span className=\"text-xs font-medium text-green-500\">+8.2%</span>\n                    </div>\n                  </div>\n                  <div className={`text-2xl font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                    2,350\n                  </div>\n                  <div className={`text-xs ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                    Active Users\n                  </div>\n                </div>\n\n                <div className={`p-4 rounded-lg border ${isDarkMode ? 'bg-gray-900 border-gray-700' : 'bg-white border-gray-200'}`}>\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <div className={`p-2 rounded-lg ${isDarkMode ? 'bg-orange-900/30' : 'bg-orange-100'}`}>\n                      <ShoppingCart className={`h-4 w-4 ${isDarkMode ? 'text-orange-400' : 'text-orange-600'}`} />\n                    </div>\n                    <div className=\"flex items-center gap-1\">\n                      <TrendingDown className=\"h-3 w-3 text-red-500\" />\n                      <span className=\"text-xs font-medium text-red-500\">-3.1%</span>\n                    </div>\n                  </div>\n                  <div className={`text-2xl font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                    1,543\n                  </div>\n                  <div className={`text-xs ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                    Total Orders\n                  </div>\n                </div>\n\n                <div className={`p-4 rounded-lg border ${isDarkMode ? 'bg-gray-900 border-gray-700' : 'bg-white border-gray-200'}`}>\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <div className={`p-2 rounded-lg ${isDarkMode ? 'bg-green-900/30' : 'bg-green-100'}`}>\n                      <Target className={`h-4 w-4 ${isDarkMode ? 'text-green-400' : 'text-green-600'}`} />\n                    </div>\n                    <div className=\"flex items-center gap-1\">\n                      <TrendingUp className=\"h-3 w-3 text-green-500\" />\n                      <span className=\"text-xs font-medium text-green-500\">+5.7%</span>\n                    </div>\n                  </div>\n                  <div className={`text-2xl font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                    3.24%\n                  </div>\n                  <div className={`text-xs ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                    Conversion Rate\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}",
  "error": null,
  "overall_score": 53,
  "code_quality_score": 14,
  "architecture_score": 12,
  "performance_score": 11,
  "accessibility_score": 16,
  "metadata": {
    "document_id": "eval_room_9855a696347d",
    "prompt_category": "intermediate",
    "prompt_complexity": 6.0
  },
  "raw_response": {
    "document_id": "eval_room_9855a696347d",
    "mode": "parallel",
    "prompt": "Generate an analytics dashboard page with charts, data tables, real-time updates, dark mode, and responsive design",
    "content": "import { useState, useCallback } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Moon, Sun, RefreshCw } from 'lucide-react';\nimport { ArrowUpDown, ArrowUp, ArrowDown } from 'lucide-react';\nimport { Badge } from '@/components/ui/badge';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\nimport { TrendingUp, TrendingDown, DollarSign, Users, ShoppingCart, Target } from 'lucide-react';\nimport { Activity, TrendingUp, TrendingDown, AlertCircle, CheckCircle, Clock } from 'lucide-react';\nimport { Badge } from '@/components/ui/badge';\n\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, Legend } from 'recharts';\nimport { motion } from 'framer-motion';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';\nimport { TrendingUp, TrendingDown, DollarSign, Users, ShoppingCart, Target } from 'lucide-react';\n\ninterface MetricData {\n  id: string;\n  label: string;\n  value: number;\n  change: number;\n  trend: 'up' | 'down';\n}\n\ninterface ChartDataPoint {\n  date: string;\n  revenue: number;\n  users: number;\n  orders: number;\n}\n\ninterface TableRow {\n  id: string;\n  product: string;\n  sales: number;\n  revenue: number;\n  status: 'active' | 'pending' | 'inactive';\n}\n\nconst mockMetrics: MetricData[] = [\n  { id: '1', label: 'Total Revenue', value: 45231, change: 12.5, trend: 'up' },\n  { id: '2', label: 'Active Users', value: 2350, change: 8.2, trend: 'up' },\n  { id: '3', label: 'Total Orders', value: 1543, change: -3.1, trend: 'down' },\n  { id: '4', label: 'Conversion Rate', value: 3.24, change: 5.7, trend: 'up' }\n];\n\nconst mockChartData: ChartDataPoint[] = [\n  { date: '2024-01-01', revenue: 12000, users: 450, orders: 230 },\n  { date: '2024-01-02', revenue: 15000, users: 520, orders: 280 },\n  { date: '2024-01-03', revenue: 13500, users: 490, orders: 250 },\n  { date: '2024-01-04', revenue: 18000, users: 610, orders: 320 },\n  { date: '2024-01-05', revenue: 16500, users: 580, orders: 295 },\n  { date: '2024-01-06', revenue: 20000, users: 680, orders: 360 },\n  { date: '2024-01-07', revenue: 22000, users: 720, orders: 390 }\n];\n\nconst mockTableData: TableRow[] = [\n  { id: '1', product: 'Premium Plan', sales: 234, revenue: 23400, status: 'active' },\n  { id: '2', product: 'Basic Plan', sales: 567, revenue: 11340, status: 'active' },\n  { id: '3', product: 'Enterprise Plan', sales: 89, revenue: 17800, status: 'active' },\n  { id: '4', product: 'Starter Plan', sales: 432, revenue: 4320, status: 'pending' },\n  { id: '5', product: 'Pro Plan', sales: 156, revenue: 15600, status: 'inactive' }\n];\ninterface ActivityItem {\n  id: string;\n  type: 'success' | 'warning' | 'info' | 'error';\n  message: string;\n  timestamp: string;\n  icon: 'trending-up' | 'trending-down' | 'alert' | 'check' | 'activity';\n}\n\nconst mockActivityData: ActivityItem[] = [\n  { id: '1', type: 'success', message: 'New order received - Premium Plan', timestamp: '2 minutes ago', icon: 'check' },\n  { id: '2', type: 'info', message: '15 new users registered', timestamp: '5 minutes ago', icon: 'activity' },\n  { id: '3', type: 'success', message: 'Revenue milestone reached: $50,000', timestamp: '12 minutes ago', icon: 'trending-up' },\n  { id: '4', type: 'warning', message: 'Server response time increased', timestamp: '18 minutes ago', icon: 'alert' },\n  { id: '5', type: 'info', message: 'Database backup completed', timestamp: '25 minutes ago', icon: 'check' },\n  { id: '6', type: 'success', message: 'Conversion rate improved by 3.2%', timestamp: '32 minutes ago', icon: 'trending-up' },\n  { id: '7', type: 'error', message: 'Payment gateway timeout detected', timestamp: '45 minutes ago', icon: 'alert' },\n  { id: '8', type: 'info', message: 'Weekly report generated', timestamp: '1 hour ago', icon: 'activity' },\n  { id: '9', type: 'success', message: '50 orders processed successfully', timestamp: '1 hour ago', icon: 'check' },\n  { id: '10', type: 'warning', message: 'Low inventory alert - Starter Plan', timestamp: '2 hours ago', icon: 'alert' }\n];\n\ntype SortField = 'product' | 'sales' | 'revenue' | 'status';\ntype SortDirection = 'asc' | 'desc' | null;\n\nconst formatCurrency = (value: number): string => {\n  return new Intl.NumberFormat('en-US', {\n    style: 'currency',\n    currency: 'USD',\n    minimumFractionDigits: 0,\n    maximumFractionDigits: 0\n  }).format(value);\n};\n\nconst formatNumber = (value: number): string => {\n  return new Intl.NumberFormat('en-US').format(value);\n};\n\nconst getStatusColor = (status: 'active' | 'pending' | 'inactive'): string => {\n  switch (status) {\n    case 'active':\n      return 'bg-green-500/10 text-green-500 border-green-500/20';\n    case 'pending':\n      return 'bg-yellow-500/10 text-yellow-500 border-yellow-500/20';\n    case 'inactive':\n      return 'bg-gray-500/10 text-gray-500 border-gray-500/20';\n  }\n};\n\nexport default function AnalyticsDashboard() {\n  const [isDarkMode, setIsDarkMode] = useState(false);\n  const [metrics, setMetrics] = useState<MetricData[]>(mockMetrics);\n  const [chartData, setChartData] = useState<ChartDataPoint[]>(mockChartData);\n  const [tableData, setTableData] = useState<TableRow[]>(mockTableData);\n  const [isRefreshing, setIsRefreshing] = useState(false);\n  const [sortField, setSortField] = useState<SortField | null>(null);\n  const [sortDirection, setSortDirection] = useState<SortDirection>(null);\n\n  const toggleDarkMode = useCallback(() => {\n    setIsDarkMode(prev => !prev);\n  }, []);\n\n  const handleSort = useCallback((field: SortField) => {\n    if (sortField === field) {\n      if (sortDirection === 'asc') {\n        setSortDirection('desc');\n      } else if (sortDirection === 'desc') {\n        setSortDirection(null);\n        setSortField(null);\n      }\n    } else {\n      setSortField(field);\n      setSortDirection('asc');\n    }\n  }, [sortField, sortDirection]);\n\n  const sortedTableData = useCallback(() => {\n    if (!sortField || !sortDirection) {\n      return tableData;\n    }\n\n    return [...tableData].sort((a, b) => {\n      let aValue = a[sortField];\n      let bValue = b[sortField];\n\n      if (typeof aValue === 'string') {\n        aValue = aValue.toLowerCase();\n        bValue = (bValue as string).toLowerCase();\n      }\n\n      if (aValue < bValue) {\n        return sortDirection === 'asc' ? -1 : 1;\n      }\n      if (aValue > bValue) {\n        return sortDirection === 'asc' ? 1 : -1;\n      }\n      return 0;\n    });\n  }, [tableData, sortField, sortDirection]);\n\n  const handleRefresh = useCallback(() => {\n    setIsRefreshing(true);\n    \n    setTimeout(() => {\n      // Generate updated metrics with random variations\n      const updatedMetrics = mockMetrics.map(metric => ({\n        ...metric,\n        value: metric.value + Math.floor(Math.random() * 200 - 100),\n        change: parseFloat((Math.random() * 20 - 5).toFixed(1)),\n        trend: Math.random() > 0.5 ? 'up' as const : 'down' as const\n      }));\n      \n      // Generate updated chart data with random variations\n      const updatedChartData = mockChartData.map(point => ({\n        ...point,\n        revenue: point.revenue + Math.floor(Math.random() * 4000 - 2000),\n        users: point.users + Math.floor(Math.random() * 100 - 50),\n        orders: point.orders + Math.floor(Math.random() * 50 - 25)\n      }));\n      \n      // Generate updated table data with random variations\n      const updatedTableData = mockTableData.map(row => ({\n        ...row,\n        sales: row.sales + Math.floor(Math.random() * 40 - 20),\n        revenue: row.revenue + Math.floor(Math.random() * 2000 - 1000)\n      }));\n      \n      setMetrics(updatedMetrics);\n      setChartData(updatedChartData);\n      setTableData(updatedTableData);\n      setIsRefreshing(false);\n    }, 1500);\n  }, []);\n\n  return (\n    <div className={`min-h-screen transition-colors duration-300 ${isDarkMode ? 'dark bg-gray-900' : 'bg-gray-50'}`}>\n      <div className=\"container mx-auto p-4 md:p-6 lg:p-8\">\n        <div className=\"flex flex-col md:flex-row md:items-center md:justify-between mb-8 gap-4\">\n          <div>\n            <h1 className={`text-3xl md:text-4xl font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n              Analytics Dashboard\n            </h1>\n            <p className={`mt-2 ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n              Real-time insights and performance metrics\n            </p>\n          </div>\n          \n          <div className=\"flex items-center gap-3\">\n            <Button\n              variant=\"outline\"\n              size=\"icon\"\n              onClick={toggleDarkMode}\n              className={isDarkMode ? 'border-gray-700 hover:bg-gray-800' : ''}\n            >\n              {isDarkMode ? <Sun className=\"h-5 w-5\" /> : <Moon className=\"h-5 w-5\" />}\n            </Button>\n            \n            <Button\n              variant=\"outline\"\n              onClick={handleRefresh}\n              disabled={isRefreshing}\n              className={isDarkMode ? 'border-gray-700 hover:bg-gray-800' : ''}\n            >\n              <RefreshCw className={`h-4 w-4 mr-2 ${isRefreshing ? 'animate-spin' : ''}`} />\n              Refresh\n            </Button>\n          </div>\n        </div>\n\n        <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 md:gap-6 mb-8\">\n          {metrics.map((metric) => {\n            const Icon = metric.label.includes('Revenue') ? DollarSign :\n                        metric.label.includes('Users') ? Users :\n                        metric.label.includes('Orders') ? ShoppingCart : Target;\n            \n            return (\n              <Card key={metric.id} className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n                <CardHeader className=\"flex flex-row items-center justify-between pb-2\">\n                  <CardTitle className={`text-sm font-medium ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                    {metric.label}\n                  </CardTitle>\n                  <Icon className={`h-4 w-4 ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`} />\n                </CardHeader>\n                <CardContent>\n                  <div className={`text-2xl font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                    {metric.label.includes('Rate') ? `${metric.value}%` : metric.value.toLocaleString()}\n                  </div>\n                  <div className=\"flex items-center mt-2\">\n                    {metric.trend === 'up' ? (\n                      <TrendingUp className=\"h-4 w-4 text-green-500 mr-1\" />\n                    ) : (\n                      <TrendingDown className=\"h-4 w-4 text-red-500 mr-1\" />\n                    )}\n                    <span className={`text-sm font-medium ${metric.trend === 'up' ? 'text-green-500' : 'text-red-500'}`}>\n                      {metric.change > 0 ? '+' : ''}{metric.change}%\n                    </span>\n                    <span className={`text-sm ml-2 ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                      vs last period\n                    </span>\n                  </div>\n                </CardContent>\n              </Card>\n            );\n          })}\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6 mb-8\">\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Revenue Overview</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Daily revenue trends for the past week\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"h-[300px] w-full\">\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <LineChart\n                    data={chartData}\n                    margin={{ top: 5, right: 10, left: 0, bottom: 5 }}\n                  >\n                    <CartesianGrid \n                      strokeDasharray=\"3 3\" \n                      stroke={isDarkMode ? '#374151' : '#e5e7eb'}\n                    />\n                    <XAxis \n                      dataKey=\"date\" \n                      stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                      fontSize={12}\n                      tickFormatter={(value) => new Date(value).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n                    />\n                    <YAxis \n                      stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                      fontSize={12}\n                      tickFormatter={(value) => `$${(value / 1000).toFixed(0)}k`}\n                    />\n                    <Tooltip \n                      contentStyle={{\n                        backgroundColor: isDarkMode ? '#1f2937' : '#ffffff',\n                        border: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\n                        borderRadius: '6px',\n                        color: isDarkMode ? '#ffffff' : '#000000'\n                      }}\n                      labelFormatter={(value) => new Date(value).toLocaleDateString('en-US', { month: 'long', day: 'numeric', year: 'numeric' })}\n                      formatter={(value: number) => [`$${value.toLocaleString()}`, 'Revenue']}\n                    />\n                    <Line \n                      type=\"monotone\" \n                      dataKey=\"revenue\" \n                      stroke=\"#3b82f6\" \n                      strokeWidth={2}\n                      dot={{ fill: '#3b82f6', r: 4 }}\n                      activeDot={{ r: 6 }}\n                    />\n                  </LineChart>\n                </ResponsiveContainer>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>User Activity</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Active users and engagement metrics\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"h-[300px] w-full relative\">\n                <svg className=\"w-full h-full\" viewBox=\"0 0 700 300\" preserveAspectRatio=\"none\">\n                  <defs>\n                    <linearGradient id=\"userGradient\" x1=\"0%\" y1=\"0%\" x2=\"0%\" y2=\"100%\">\n                      <stop offset=\"0%\" stopColor=\"#3b82f6\" stopOpacity=\"0.4\" />\n                      <stop offset=\"100%\" stopColor=\"#3b82f6\" stopOpacity=\"0.05\" />\n                    </linearGradient>\n                  </defs>\n                  \n                  {/* Area path */}\n                  <motion.path\n                    d={`M 0,${300 - (chartData[0].users / 720) * 250} \n                        L ${100},${300 - (chartData[1].users / 720) * 250}\n                        L ${200},${300 - (chartData[2].users / 720) * 250}\n                        L ${300},${300 - (chartData[3].users / 720) * 250}\n                        L ${400},${300 - (chartData[4].users / 720) * 250}\n                        L ${500},${300 - (chartData[5].users / 720) * 250}\n                        L ${600},${300 - (chartData[6].users / 720) * 250}\n                        L 600,300 L 0,300 Z`}\n                    fill=\"url(#userGradient)\"\n                    initial={{ opacity: 0 }}\n                    animate={{ opacity: 1 }}\n                    transition={{ duration: 0.8 }}\n                  />\n                  \n                  {/* Line path */}\n                  <motion.path\n                    d={`M 0,${300 - (chartData[0].users / 720) * 250} \n                        L ${100},${300 - (chartData[1].users / 720) * 250}\n                        L ${200},${300 - (chartData[2].users / 720) * 250}\n                        L ${300},${300 - (chartData[3].users / 720) * 250}\n                        L ${400},${300 - (chartData[4].users / 720) * 250}\n                        L ${500},${300 - (chartData[5].users / 720) * 250}\n                        L ${600},${300 - (chartData[6].users / 720) * 250}`}\n                    fill=\"none\"\n                    stroke=\"#3b82f6\"\n                    strokeWidth=\"3\"\n                    initial={{ pathLength: 0 }}\n                    animate={{ pathLength: 1 }}\n                    transition={{ duration: 1.5, ease: \"easeInOut\" }}\n                  />\n                  \n                  {/* Data points */}\n                  {chartData.map((point, index) => (\n                    <motion.g\n                      key={point.date}\n                      initial={{ opacity: 0, scale: 0 }}\n                      animate={{ opacity: 1, scale: 1 }}\n                      transition={{ delay: 0.1 * index, duration: 0.3 }}\n                    >\n                      <circle\n                        cx={index * 100}\n                        cy={300 - (point.users / 720) * 250}\n                        r=\"6\"\n                        fill=\"#3b82f6\"\n                        className=\"cursor-pointer transition-all hover:r-8\"\n                        style={{ filter: 'drop-shadow(0 2px 4px rgba(59, 130, 246, 0.3))' }}\n                      />\n                      <circle\n                        cx={index * 100}\n                        cy={300 - (point.users / 720) * 250}\n                        r=\"12\"\n                        fill=\"transparent\"\n                        className=\"cursor-pointer\"\n                        onMouseEnter={(e) => {\n                          const tooltip = document.getElementById(`tooltip-${index}`);\n                          if (tooltip) tooltip.style.opacity = '1';\n                        }}\n                        onMouseLeave={(e) => {\n                          const tooltip = document.getElementById(`tooltip-${index}`);\n                          if (tooltip) tooltip.style.opacity = '0';\n                        }}\n                      />\n                    </motion.g>\n                  ))}\n                </svg>\n                \n                {/* Tooltips */}\n                {chartData.map((point, index) => (\n                  <div\n                    key={`tooltip-${point.date}`}\n                    id={`tooltip-${index}`}\n                    className={`absolute pointer-events-none transition-opacity duration-200 opacity-0 ${\n                      isDarkMode ? 'bg-gray-700 text-white' : 'bg-white text-gray-900'\n                    } px-3 py-2 rounded-lg shadow-lg border ${\n                      isDarkMode ? 'border-gray-600' : 'border-gray-200'\n                    }`}\n                    style={{\n                      left: `${(index * 100 / 600) * 100}%`,\n                      top: `${((300 - (point.users / 720) * 250) / 300) * 100 - 15}%`,\n                      transform: 'translate(-50%, -100%)'\n                    }}\n                  >\n                    <div className=\"text-xs font-semibold\">{point.users} Users</div>\n                    <div className={`text-xs ${isDarkMode ? 'text-gray-400' : 'text-gray-500'}`}>\n                      {new Date(point.date).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n                    </div>\n                  </div>\n                ))}\n                \n                {/* Y-axis labels */}\n                <div className=\"absolute left-0 top-0 h-full flex flex-col justify-between text-xs\">\n                  <span className={isDarkMode ? 'text-gray-400' : 'text-gray-500'}>720</span>\n                  <span className={isDarkMode ? 'text-gray-400' : 'text-gray-500'}>540</span>\n                  <span className={isDarkMode ? 'text-gray-400' : 'text-gray-500'}>360</span>\n                  <span className={isDarkMode ? 'text-gray-400' : 'text-gray-500'}>180</span>\n                  <span className={isDarkMode ? 'text-gray-400' : 'text-gray-500'}>0</span>\n                </div>\n                \n                {/* X-axis labels */}\n                <div className=\"absolute bottom-0 left-0 w-full flex justify-between text-xs mt-2 px-8\">\n                  {chartData.map((point, index) => (\n                    <span key={point.date} className={isDarkMode ? 'text-gray-400' : 'text-gray-500'}>\n                      {new Date(point.date).toLocaleDateString('en-US', { weekday: 'short' })}\n                    </span>\n                  ))}\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6 mb-8\">\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Orders Distribution</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Order volume by category\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"h-[300px]\">\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <BarChart data={chartData}>\n                    <CartesianGrid strokeDasharray=\"3 3\" stroke={isDarkMode ? '#374151' : '#e5e7eb'} />\n                    <XAxis \n                      dataKey=\"date\" \n                      stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                      tick={{ fill: isDarkMode ? '#9ca3af' : '#6b7280' }}\n                      tickFormatter={(value) => new Date(value).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n                    />\n                    <YAxis \n                      stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                      tick={{ fill: isDarkMode ? '#9ca3af' : '#6b7280' }}\n                    />\n                    <Tooltip \n                      contentStyle={{\n                        backgroundColor: isDarkMode ? '#1f2937' : '#ffffff',\n                        border: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\n                        borderRadius: '8px',\n                        color: isDarkMode ? '#ffffff' : '#000000'\n                      }}\n                      labelFormatter={(value) => new Date(value).toLocaleDateString('en-US', { month: 'long', day: 'numeric', year: 'numeric' })}\n                    />\n                    <Bar \n                      dataKey=\"orders\" \n                      fill=\"#8b5cf6\" \n                      radius={[8, 8, 0, 0]}\n                      animationDuration={1000}\n                    />\n                  </BarChart>\n                </ResponsiveContainer>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className={`lg:col-span-2 ${isDarkMode ? 'bg-gray-800 border-gray-700' : ''}`}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Performance Comparison</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Multi-metric comparison over time\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"h-[300px] w-full\">\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <LineChart\n                    data={chartData}\n                    margin={{ top: 5, right: 30, left: 20, bottom: 5 }}\n                  >\n                    <CartesianGrid \n                      strokeDasharray=\"3 3\" \n                      stroke={isDarkMode ? '#374151' : '#e5e7eb'}\n                    />\n                    <XAxis \n                      dataKey=\"date\" \n                      stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                      tick={{ fill: isDarkMode ? '#9ca3af' : '#6b7280' }}\n                      tickFormatter={(value) => new Date(value).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n                    />\n                    <YAxis \n                      stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                      tick={{ fill: isDarkMode ? '#9ca3af' : '#6b7280' }}\n                    />\n                    <Tooltip \n                      contentStyle={{\n                        backgroundColor: isDarkMode ? '#1f2937' : '#ffffff',\n                        border: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\n                        borderRadius: '8px',\n                        color: isDarkMode ? '#ffffff' : '#000000'\n                      }}\n                      labelFormatter={(value) => new Date(value).toLocaleDateString('en-US', { month: 'long', day: 'numeric', year: 'numeric' })}\n                      formatter={(value: number, name: string) => {\n                        if (name === 'revenue') return [`$${value.toLocaleString()}`, 'Revenue'];\n                        if (name === 'users') return [value.toLocaleString(), 'Users'];\n                        if (name === 'orders') return [value.toLocaleString(), 'Orders'];\n                        return [value, name];\n                      }}\n                    />\n                    <Legend \n                      wrapperStyle={{ color: isDarkMode ? '#9ca3af' : '#6b7280' }}\n                      formatter={(value) => {\n                        if (value === 'revenue') return 'Revenue';\n                        if (value === 'users') return 'Users';\n                        if (value === 'orders') return 'Orders';\n                        return value;\n                      }}\n                    />\n                    <Line \n                      type=\"monotone\" \n                      dataKey=\"revenue\" \n                      stroke=\"#3b82f6\" \n                      strokeWidth={2}\n                      dot={{ fill: '#3b82f6', r: 4 }}\n                      activeDot={{ r: 6 }}\n                    />\n                    <Line \n                      type=\"monotone\" \n                      dataKey=\"users\" \n                      stroke=\"#10b981\" \n                      strokeWidth={2}\n                      dot={{ fill: '#10b981', r: 4 }}\n                      activeDot={{ r: 6 }}\n                    />\n                    <Line \n                      type=\"monotone\" \n                      dataKey=\"orders\" \n                      stroke=\"#f59e0b\" \n                      strokeWidth={2}\n                      dot={{ fill: '#f59e0b', r: 4 }}\n                      activeDot={{ r: 6 }}\n                    />\n                  </LineChart>\n                </ResponsiveContainer>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n          <CardHeader>\n            <CardTitle className={isDarkMode ? 'text-white' : ''}>Top Products</CardTitle>\n            <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n              Best performing products by sales and revenue\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"overflow-x-auto\">\n              <Table>\n                <TableHeader>\n                  <TableRow className={isDarkMode ? 'border-gray-700 hover:bg-gray-700/50' : ''}>\n                    <TableHead className={isDarkMode ? 'text-gray-300' : ''}>\n                      <Button\n                        variant=\"ghost\"\n                        onClick={() => handleSort('product')}\n                        className={`flex items-center gap-1 px-0 hover:bg-transparent ${isDarkMode ? 'text-gray-300 hover:text-white' : ''}`}\n                      >\n                        Product\n                        {sortField === 'product' ? (\n                          sortDirection === 'asc' ? (\n                            <ArrowUp className=\"h-4 w-4\" />\n                          ) : (\n                            <ArrowDown className=\"h-4 w-4\" />\n                          )\n                        ) : (\n                          <ArrowUpDown className=\"h-4 w-4 opacity-50\" />\n                        )}\n                      </Button>\n                    </TableHead>\n                    <TableHead className={isDarkMode ? 'text-gray-300' : ''}>\n                      <Button\n                        variant=\"ghost\"\n                        onClick={() => handleSort('sales')}\n                        className={`flex items-center gap-1 px-0 hover:bg-transparent ${isDarkMode ? 'text-gray-300 hover:text-white' : ''}`}\n                      >\n                        Sales\n                        {sortField === 'sales' ? (\n                          sortDirection === 'asc' ? (\n                            <ArrowUp className=\"h-4 w-4\" />\n                          ) : (\n                            <ArrowDown className=\"h-4 w-4\" />\n                          )\n                        ) : (\n                          <ArrowUpDown className=\"h-4 w-4 opacity-50\" />\n                        )}\n                      </Button>\n                    </TableHead>\n                    <TableHead className={isDarkMode ? 'text-gray-300' : ''}>\n                      <Button\n                        variant=\"ghost\"\n                        onClick={() => handleSort('revenue')}\n                        className={`flex items-center gap-1 px-0 hover:bg-transparent ${isDarkMode ? 'text-gray-300 hover:text-white' : ''}`}\n                      >\n                        Revenue\n                        {sortField === 'revenue' ? (\n                          sortDirection === 'asc' ? (\n                            <ArrowUp className=\"h-4 w-4\" />\n                          ) : (\n                            <ArrowDown className=\"h-4 w-4\" />\n                          )\n                        ) : (\n                          <ArrowUpDown className=\"h-4 w-4 opacity-50\" />\n                        )}\n                      </Button>\n                    </TableHead>\n                    <TableHead className={isDarkMode ? 'text-gray-300' : ''}>\n                      <Button\n                        variant=\"ghost\"\n                        onClick={() => handleSort('status')}\n                        className={`flex items-center gap-1 px-0 hover:bg-transparent ${isDarkMode ? 'text-gray-300 hover:text-white' : ''}`}\n                      >\n                        Status\n                        {sortField === 'status' ? (\n                          sortDirection === 'asc' ? (\n                            <ArrowUp className=\"h-4 w-4\" />\n                          ) : (\n                            <ArrowDown className=\"h-4 w-4\" />\n                          )\n                        ) : (\n                          <ArrowUpDown className=\"h-4 w-4 opacity-50\" />\n                        )}\n                      </Button>\n                    </TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {sortedTableData().map((row) => (\n                    <TableRow \n                      key={row.id}\n                      className={isDarkMode ? 'border-gray-700 hover:bg-gray-700/50' : 'hover:bg-gray-50'}\n                    >\n                      <TableCell className={`font-medium ${isDarkMode ? 'text-white' : ''}`}>\n                        {row.product}\n                      </TableCell>\n                      <TableCell className={isDarkMode ? 'text-gray-300' : ''}>\n                        {formatNumber(row.sales)}\n                      </TableCell>\n                      <TableCell className={`font-semibold ${isDarkMode ? 'text-gray-300' : ''}`}>\n                        {formatCurrency(row.revenue)}\n                      </TableCell>\n                      <TableCell>\n                        <Badge \n                          variant=\"outline\" \n                          className={getStatusColor(row.status)}\n                        >\n                          {row.status.charAt(0).toUpperCase() + row.status.slice(1)}\n                        </Badge>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </div>\n          </CardContent>\n        </Card>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6 mt-8\">\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Real-Time Updates</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Live activity feed\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4 max-h-[400px] overflow-y-auto pr-2\">\n                {mockActivityData.map((activity) => {\n                  const getIcon = () => {\n                    switch (activity.icon) {\n                      case 'trending-up':\n                        return <TrendingUp className=\"h-4 w-4\" />;\n                      case 'trending-down':\n                        return <TrendingDown className=\"h-4 w-4\" />;\n                      case 'alert':\n                        return <AlertCircle className=\"h-4 w-4\" />;\n                      case 'check':\n                        return <CheckCircle className=\"h-4 w-4\" />;\n                      case 'activity':\n                        return <Activity className=\"h-4 w-4\" />;\n                      default:\n                        return <Activity className=\"h-4 w-4\" />;\n                    }\n                  };\n\n                  const getStatusColor = () => {\n                    switch (activity.type) {\n                      case 'success':\n                        return isDarkMode ? 'text-green-400 bg-green-400/10' : 'text-green-600 bg-green-50';\n                      case 'warning':\n                        return isDarkMode ? 'text-yellow-400 bg-yellow-400/10' : 'text-yellow-600 bg-yellow-50';\n                      case 'error':\n                        return isDarkMode ? 'text-red-400 bg-red-400/10' : 'text-red-600 bg-red-50';\n                      case 'info':\n                        return isDarkMode ? 'text-blue-400 bg-blue-400/10' : 'text-blue-600 bg-blue-50';\n                      default:\n                        return isDarkMode ? 'text-gray-400 bg-gray-400/10' : 'text-gray-600 bg-gray-50';\n                    }\n                  };\n\n                  const getBadgeVariant = () => {\n                    switch (activity.type) {\n                      case 'success':\n                        return 'default';\n                      case 'warning':\n                        return 'secondary';\n                      case 'error':\n                        return 'destructive';\n                      case 'info':\n                        return 'outline';\n                      default:\n                        return 'outline';\n                    }\n                  };\n\n                  return (\n                    <div\n                      key={activity.id}\n                      className={`flex items-start gap-3 p-3 rounded-lg transition-colors ${\n                        isDarkMode ? 'hover:bg-gray-700/50' : 'hover:bg-gray-100'\n                      }`}\n                    >\n                      <div className={`p-2 rounded-full ${getStatusColor()}`}>\n                        {getIcon()}\n                      </div>\n                      <div className=\"flex-1 min-w-0\">\n                        <p className={`text-sm font-medium ${isDarkMode ? 'text-gray-200' : 'text-gray-900'}`}>\n                          {activity.message}\n                        </p>\n                        <div className=\"flex items-center gap-2 mt-1\">\n                          <Clock className={`h-3 w-3 ${isDarkMode ? 'text-gray-500' : 'text-gray-400'}`} />\n                          <span className={`text-xs ${isDarkMode ? 'text-gray-500' : 'text-gray-500'}`}>\n                            {activity.timestamp}\n                          </span>\n                          <Badge variant={getBadgeVariant()} className=\"text-xs\">\n                            {activity.type}\n                          </Badge>\n                        </div>\n                      </div>\n                    </div>\n                  );\n                })}\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Quick Stats</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Key performance indicators\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className={`p-4 rounded-lg border ${isDarkMode ? 'bg-gray-900 border-gray-700' : 'bg-white border-gray-200'}`}>\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <div className={`p-2 rounded-lg ${isDarkMode ? 'bg-blue-900/30' : 'bg-blue-100'}`}>\n                      <DollarSign className={`h-4 w-4 ${isDarkMode ? 'text-blue-400' : 'text-blue-600'}`} />\n                    </div>\n                    <div className=\"flex items-center gap-1\">\n                      <TrendingUp className=\"h-3 w-3 text-green-500\" />\n                      <span className=\"text-xs font-medium text-green-500\">+12.5%</span>\n                    </div>\n                  </div>\n                  <div className={`text-2xl font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                    $45.2K\n                  </div>\n                  <div className={`text-xs ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                    Total Revenue\n                  </div>\n                </div>\n\n                <div className={`p-4 rounded-lg border ${isDarkMode ? 'bg-gray-900 border-gray-700' : 'bg-white border-gray-200'}`}>\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <div className={`p-2 rounded-lg ${isDarkMode ? 'bg-purple-900/30' : 'bg-purple-100'}`}>\n                      <Users className={`h-4 w-4 ${isDarkMode ? 'text-purple-400' : 'text-purple-600'}`} />\n                    </div>\n                    <div className=\"flex items-center gap-1\">\n                      <TrendingUp className=\"h-3 w-3 text-green-500\" />\n                      <span className=\"text-xs font-medium text-green-500\">+8.2%</span>\n                    </div>\n                  </div>\n                  <div className={`text-2xl font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                    2,350\n                  </div>\n                  <div className={`text-xs ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                    Active Users\n                  </div>\n                </div>\n\n                <div className={`p-4 rounded-lg border ${isDarkMode ? 'bg-gray-900 border-gray-700' : 'bg-white border-gray-200'}`}>\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <div className={`p-2 rounded-lg ${isDarkMode ? 'bg-orange-900/30' : 'bg-orange-100'}`}>\n                      <ShoppingCart className={`h-4 w-4 ${isDarkMode ? 'text-orange-400' : 'text-orange-600'}`} />\n                    </div>\n                    <div className=\"flex items-center gap-1\">\n                      <TrendingDown className=\"h-3 w-3 text-red-500\" />\n                      <span className=\"text-xs font-medium text-red-500\">-3.1%</span>\n                    </div>\n                  </div>\n                  <div className={`text-2xl font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                    1,543\n                  </div>\n                  <div className={`text-xs ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                    Total Orders\n                  </div>\n                </div>\n\n                <div className={`p-4 rounded-lg border ${isDarkMode ? 'bg-gray-900 border-gray-700' : 'bg-white border-gray-200'}`}>\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <div className={`p-2 rounded-lg ${isDarkMode ? 'bg-green-900/30' : 'bg-green-100'}`}>\n                      <Target className={`h-4 w-4 ${isDarkMode ? 'text-green-400' : 'text-green-600'}`} />\n                    </div>\n                    <div className=\"flex items-center gap-1\">\n                      <TrendingUp className=\"h-3 w-3 text-green-500\" />\n                      <span className=\"text-xs font-medium text-green-500\">+5.7%</span>\n                    </div>\n                  </div>\n                  <div className={`text-2xl font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                    3.24%\n                  </div>\n                  <div className={`text-xs ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                    Conversion Rate\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}",
    "error": null,
    "elapsed_time": 79.34782600402832,
    "success": true
  }
}