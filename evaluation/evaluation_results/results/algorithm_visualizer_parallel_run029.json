{
  "prompt_id": "algorithm_visualizer",
  "prompt_name": "Algorithm Visualizer",
  "mode": "parallel",
  "run_number": 29,
  "timestamp": "2025-10-14T01:43:17.987304",
  "response_time": 109.40704798698425,
  "total_tokens": null,
  "response_content": "import { useState, useCallback } from 'react';\nimport { useEffect } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Slider } from '@/components/ui/slider';\nimport { Play, Pause, RotateCcw, Zap, BarChart3 } from 'lucide-react';\nimport { motion } from 'framer-motion';\n\ninterface ArrayElement {\n  value: number;\n  id: string;\n  isComparing?: boolean;\n  isSwapping?: boolean;\n  isSorted?: boolean;\n}\n\ninterface AlgorithmStep {\n  array: ArrayElement[];\n  comparingIndices: number[];\n  swappingIndices: number[];\n  sortedIndices: number[];\n}\n\ntype AlgorithmType = 'bubble' | 'quick' | 'merge' | 'insertion';\n\nconst NEON_COLORS = [\n  '#00ffff',\n  '#ff00ff', \n  '#00ff00',\n  '#ffff00',\n  '#ff0066',\n  '#00ffaa'\n];\n\nconst mockAlgorithms = [\n  { id: 'bubble', name: 'Bubble Sort', complexity: 'O(n\u00b2)' },\n  { id: 'quick', name: 'Quick Sort', complexity: 'O(n log n)' },\n  { id: 'merge', name: 'Merge Sort', complexity: 'O(n log n)' },\n  { id: 'insertion', name: 'Insertion Sort', complexity: 'O(n\u00b2)' }\n];\n\nexport default function AlgorithmVisualizer() {\n  const [array, setArray] = useState<ArrayElement[]>([]);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [speed, setSpeed] = useState([50]);\n  const [arraySize, setArraySize] = useState([20]);\n  const [selectedAlgorithm, setSelectedAlgorithm] = useState<AlgorithmType>('bubble');\n  const [currentStep, setCurrentStep] = useState(0);\n  const [steps, setSteps] = useState<AlgorithmStep[]>([]);\n  useEffect(() => {\n    if (!isPlaying) return;\n\n    const delay = 1000 - (speed[0] * 9.5);\n    const timer = setTimeout(() => {\n      animateSteps();\n    }, delay);\n\n    return () => clearTimeout(timer);\n  }, [isPlaying, speed, animateSteps]);\n\n  const generateRandomArray = useCallback(() => {\n    const newArray: ArrayElement[] = Array.from({ length: arraySize[0] }, (_, index) => ({\n      value: Math.floor(Math.random() * 100) + 5,\n      id: `element-${index}-${Date.now()}`,\n      isComparing: false,\n      isSwapping: false,\n      isSorted: false\n    }));\n    setArray(newArray);\n    setSteps([]);\n    setCurrentStep(0);\n    setIsPlaying(false);\n  }, [arraySize]);\n\n  const resetVisualization = useCallback(() => {\n\n    setIsPlaying(false);\n    setCurrentStep(0);\n    setSteps([]);\n    generateRandomArray();\n  }, [generateRandomArray]);\n\n  const animateSteps = useCallback(() => {\n    if (currentStep >= steps.length) {\n      setIsPlaying(false);\n      return;\n    }\n\n    const step = steps[currentStep];\n    setArray(step.array);\n    setCurrentStep(prev => prev + 1);\n  }, [currentStep, steps]);\n\n  const startVisualization = useCallback(() => {\n    if (steps.length === 0 || currentStep >= steps.length) {\n      return;\n    }\n    setIsPlaying(true);\n    \n  }, [steps, speed, currentStep]);\n\n  const pauseVisualization = useCallback(() => {    setIsPlaying(false);\n\n    \n  }, []);\n\n  const generateSortingSteps = useCallback((algorithm: AlgorithmType) => {\n    if (array.length === 0) return;\n\n    const steps: AlgorithmStep[] = [];\n    const arr = [...array];\n\n    const createStep = (\n      currentArray: ArrayElement[],\n      comparing: number[] = [],\n      swapping: number[] = [],\n      sorted: number[] = []\n    ): AlgorithmStep => ({\n      array: currentArray.map((el, idx) => ({\n        ...el,\n        isComparing: comparing.includes(idx),\n        isSwapping: swapping.includes(idx),\n        isSorted: sorted.includes(idx)\n      })),\n      comparingIndices: comparing,\n      swappingIndices: swapping,\n      sortedIndices: sorted\n    });\n\n    if (algorithm === 'bubble') {\n      const sortedIndices: number[] = [];\n      for (let i = 0; i < arr.length; i++) {\n        for (let j = 0; j < arr.length - i - 1; j++) {\n          steps.push(createStep([...arr], [j, j + 1], [], sortedIndices));\n          \n          if (arr[j].value > arr[j + 1].value) {\n            steps.push(createStep([...arr], [], [j, j + 1], sortedIndices));\n            [arr[j], arr[j + 1]] = [arr[j + 1], arr[j]];\n            steps.push(createStep([...arr], [], [], sortedIndices));\n          }\n        }\n        sortedIndices.push(arr.length - i - 1);\n      }\n      steps.push(createStep([...arr], [], [], Array.from({ length: arr.length }, (_, i) => i)));\n    } else if (algorithm === 'insertion') {\n      const sortedIndices: number[] = [0];\n      for (let i = 1; i < arr.length; i++) {\n        const key = arr[i];\n        let j = i - 1;\n        \n        steps.push(createStep([...arr], [i], [], sortedIndices));\n        \n        while (j >= 0 && arr[j].value > key.value) {\n          steps.push(createStep([...arr], [j, j + 1], [], sortedIndices));\n          arr[j + 1] = arr[j];\n          steps.push(createStep([...arr], [], [j, j + 1], sortedIndices));\n          j--;\n        }\n        arr[j + 1] = key;\n        sortedIndices.push(i);\n        steps.push(createStep([...arr], [], [], sortedIndices));\n      }\n      steps.push(createStep([...arr], [], [], Array.from({ length: arr.length }, (_, i) => i)));\n    } else if (algorithm === 'quick') {\n      const sortedIndices: number[] = [];\n      \n      const partition = (low: number, high: number): number => {\n        const pivot = arr[high];\n        steps.push(createStep([...arr], [high], [], sortedIndices));\n        let i = low - 1;\n\n        for (let j = low; j < high; j++) {\n          steps.push(createStep([...arr], [j, high], [], sortedIndices));\n          \n          if (arr[j].value < pivot.value) {\n            i++;\n            if (i !== j) {\n              steps.push(createStep([...arr], [], [i, j], sortedIndices));\n              [arr[i], arr[j]] = [arr[j], arr[i]];\n              steps.push(createStep([...arr], [], [], sortedIndices));\n            }\n          }\n        }\n        \n        steps.push(createStep([...arr], [], [i + 1, high], sortedIndices));\n        [arr[i + 1], arr[high]] = [arr[high], arr[i + 1]];\n        sortedIndices.push(i + 1);\n        steps.push(createStep([...arr], [], [], sortedIndices));\n        \n        return i + 1;\n      };\n\n      const quickSort = (low: number, high: number) => {\n        if (low < high) {\n          const pi = partition(low, high);\n          quickSort(low, pi - 1);\n          quickSort(pi + 1, high);\n        } else if (low === high) {\n          sortedIndices.push(low);\n        }\n      };\n\n      quickSort(0, arr.length - 1);\n      steps.push(createStep([...arr], [], [], Array.from({ length: arr.length }, (_, i) => i)));\n    } else if (algorithm === 'merge') {\n      const sortedIndices: number[] = [];\n      \n      const merge = (left: number, mid: number, right: number) => {\n        const leftArr = arr.slice(left, mid + 1);\n        const rightArr = arr.slice(mid + 1, right + 1);\n        \n        let i = 0, j = 0, k = left;\n        \n        while (i < leftArr.length && j < rightArr.length) {\n          steps.push(createStep([...arr], [left + i, mid + 1 + j], [], sortedIndices));\n          \n          if (leftArr[i].value <= rightArr[j].value) {\n            arr[k] = leftArr[i];\n            i++;\n          } else {\n            arr[k] = rightArr[j];\n            j++;\n          }\n          steps.push(createStep([...arr], [], [k], sortedIndices));\n          k++;\n        }\n        \n        while (i < leftArr.length) {\n          arr[k] = leftArr[i];\n          steps.push(createStep([...arr], [], [k], sortedIndices));\n          i++;\n          k++;\n        }\n        \n        while (j < rightArr.length) {\n          arr[k] = rightArr[j];\n          steps.push(createStep([...arr], [], [k], sortedIndices));\n          j++;\n          k++;\n        }\n      };\n\n      const mergeSort = (left: number, right: number) => {\n        if (left < right) {\n          const mid = Math.floor((left + right) / 2);\n          mergeSort(left, mid);\n          mergeSort(mid + 1, right);\n          merge(left, mid, right);\n        }\n      };\n\n      mergeSort(0, arr.length - 1);\n      steps.push(createStep([...arr], [], [], Array.from({ length: arr.length }, (_, i) => i)));\n    }\n\n    setSteps(steps);\n    setCurrentStep(0);</xcrct_code_output>\n  }, [array]);\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-gray-900 via-purple-900 to-gray-900 p-8\">\n      <div className=\"max-w-7xl mx-auto space-y-8\">\n        <motion.div\n          initial={{ opacity: 0, y: -20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.8 }}\n          className=\"text-center space-y-4\"\n        >\n          <motion.h1\n            className=\"text-6xl font-bold bg-gradient-to-r from-cyan-400 via-purple-400 to-pink-400 bg-clip-text text-transparent\"\n            animate={{\n              textShadow: [\n                '0 0 20px rgba(0, 255, 255, 0.5)',\n                '0 0 40px rgba(255, 0, 255, 0.5)',\n                '0 0 20px rgba(0, 255, 255, 0.5)'\n              ]\n            }}\n            transition={{ duration: 2, repeat: Infinity }}\n          >\n            Algorithm Visualizer\n          </motion.h1>\n          \n          <div className=\"flex items-center justify-center gap-4\">\n            <motion.div\n              initial={{ scale: 0 }}\n              animate={{ scale: 1 }}\n              transition={{ delay: 0.3, type: 'spring' }}\n              className=\"flex items-center gap-2 px-6 py-3 bg-gray-800/50 backdrop-blur-sm rounded-full border border-cyan-500/30\"\n            >\n              <Zap className=\"w-5 h-5 text-cyan-400\" />\n              <span className=\"text-xl font-semibold text-cyan-300\">\n                {mockAlgorithms.find(a => a.id === selectedAlgorithm)?.name}\n              </span>\n            </motion.div>\n            \n            <motion.div\n              initial={{ scale: 0 }}\n              animate={{ scale: 1 }}\n              transition={{ delay: 0.5, type: 'spring' }}\n              className=\"px-4 py-2 bg-purple-500/20 backdrop-blur-sm rounded-full border border-purple-400/50\"\n            >\n              <div className=\"flex items-center gap-2\">\n                <BarChart3 className=\"w-4 h-4 text-purple-300\" />\n                <span className=\"text-sm font-mono text-purple-200\">\n                  {mockAlgorithms.find(a => a.id === selectedAlgorithm)?.complexity}\n                </span>\n              </div>\n            </motion.div>\n          </div>\n        </motion.div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-6\">\n          <div className=\"lg:col-span-1 space-y-6\">\n            <motion.div\n              initial={{ opacity: 0, x: -50 }}\n              animate={{ opacity: 1, x: 0 }}\n              className=\"bg-gray-900/50 backdrop-blur-lg border border-cyan-500/30 rounded-xl p-6 shadow-[0_0_30px_rgba(0,255,255,0.3)]\"\n            >\n              <div className=\"space-y-6\">\n                {/* Algorithm Selection */}\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center gap-2 text-cyan-400\">\n                    <Zap className=\"w-4 h-4\" />\n                    <h3 className=\"text-sm font-semibold uppercase tracking-wider\">Algorithm</h3>\n                  </div>\n                  <div className=\"grid grid-cols-1 gap-2\">\n                    {mockAlgorithms.map((algo) => (\n                      <button\n                        key={algo.id}\n                        onClick={() => setSelectedAlgorithm(algo.id as AlgorithmType)}\n                        disabled={isPlaying}\n                        className={`\n                          relative px-4 py-3 rounded-lg text-left transition-all duration-300\n                          ${selectedAlgorithm === algo.id\n                            ? 'bg-cyan-500/20 border border-cyan-400 shadow-[0_0_20px_rgba(0,255,255,0.4)]'\n                            : 'bg-gray-800/50 border border-gray-700 hover:border-cyan-500/50'\n                          }\n                          disabled:opacity-50 disabled:cursor-not-allowed\n                        `}\n                      >\n                        <div className=\"text-sm font-medium text-white\">{algo.name}</div>\n                        <div className=\"text-xs text-gray-400 mt-1\">{algo.complexity}</div>\n                      </button>\n                    ))}\n                  </div>\n                </div>\n\n                {/* Speed Control */}\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center gap-2 text-purple-400\">\n                      <Zap className=\"w-4 h-4\" />\n                      <h3 className=\"text-sm font-semibold uppercase tracking-wider\">Speed</h3>\n                    </div>\n                    <span className=\"text-xs text-gray-400\">{speed[0]}%</span>\n                  </div>\n                  <Slider\n                    value={speed}\n                    onValueChange={setSpeed}\n                    min={10}\n                    max={100}\n                    step={10}\n                    disabled={isPlaying}\n                    className=\"cursor-pointer\"\n                  />\n                </div>\n\n                {/* Array Size Control */}\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center gap-2 text-pink-400\">\n                      <BarChart3 className=\"w-4 h-4\" />\n                      <h3 className=\"text-sm font-semibold uppercase tracking-wider\">Array Size</h3>\n                    </div>\n                    <span className=\"text-xs text-gray-400\">{arraySize[0]}</span>\n                  </div>\n                  <Slider\n                    value={arraySize}\n                    onValueChange={setArraySize}\n                    min={5}\n                    max={50}\n                    step={5}\n                    disabled={isPlaying}\n                    className=\"cursor-pointer\"\n                  />\n                </div>\n\n                {/* Control Buttons */}\n                <div className=\"space-y-2 pt-4 border-t border-gray-700\">\n                  <Button\n                    onClick={isPlaying ? pauseVisualization : startVisualization}\n                    disabled={steps.length === 0 || (currentStep >= steps.length && !isPlaying)}\n                    className=\"w-full bg-gradient-to-r from-cyan-500 to-blue-500 hover:from-cyan-400 hover:to-blue-400 text-white shadow-[0_0_20px_rgba(0,255,255,0.5)] transition-all duration-300\"\n                  >\n                    {isPlaying ? (\n                      <>\n                        <Pause className=\"w-4 h-4 mr-2\" />\n                        Pause\n                      </>\n                    ) : (\n                      <>\n                        <Play className=\"w-4 h-4 mr-2\" />\n                        {currentStep >= steps.length ? 'Start' : 'Resume'}\n                      </>\n                    )}\n                  </Button>\n                  <Button\n                    onClick={resetVisualization}\n                    variant=\"outline\"\n                    className=\"w-full border-pink-500/50 text-pink-400 hover:bg-pink-500/10 hover:border-pink-400 shadow-[0_0_15px_rgba(255,0,102,0.3)] transition-all duration-300\"\n                  >\n                    <RotateCcw className=\"w-4 h-4 mr-2\" />\n                    Reset\n                  </Button>\n                  <Button\n                    onClick={() => {\n                      generateRandomArray();\n                      generateSortingSteps(selectedAlgorithm);\n                    }}\n                    disabled={isPlaying}\n                    variant=\"outline\"\n                    className=\"w-full border-purple-500/50 text-purple-400 hover:bg-purple-500/10 hover:border-purple-400 shadow-[0_0_15px_rgba(168,85,247,0.3)] transition-all duration-300\"\n                  >\n                    <Zap className=\"w-4 h-4 mr-2\" />\n                    Generate New\n                  </Button>\n                </div>\n              </div>\n            </motion.div>\n            \n            <div className=\"bg-gray-900/50 backdrop-blur-lg border border-cyan-500/30 rounded-xl p-6 shadow-2xl shadow-cyan-500/20\">\n              <div className=\"space-y-6\">\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center gap-2 text-cyan-400\">\n                    <Zap className=\"w-4 h-4\" />\n                    <span className=\"text-sm font-semibold tracking-wider\">ALGORITHM</span>\n                  </div>\n                  <div className=\"grid grid-cols-1 gap-3\">\n                    {mockAlgorithms.map((algo) => (\n                      <motion.button\n                        key={algo.id}\n                        onClick={() => setSelectedAlgorithm(algo.id as AlgorithmType)}\n                        className={`relative p-4 rounded-lg border-2 transition-all duration-300 text-left ${\n                          selectedAlgorithm === algo.id\n                            ? 'border-cyan-400 bg-cyan-500/20 shadow-lg shadow-cyan-500/50'\n                            : 'border-gray-700 bg-gray-800/50 hover:border-cyan-500/50 hover:bg-cyan-500/10'\n                        }`}\n                        whileHover={{ scale: 1.02 }}\n                        whileTap={{ scale: 0.98 }}\n                      >\n                        <div className=\"space-y-1\">\n                          <div className=\"font-semibold text-white\">{algo.name}</div>\n                          <div className={`text-xs ${\n                            selectedAlgorithm === algo.id ? 'text-cyan-300' : 'text-gray-400'\n                          }`}>\n                            {algo.complexity}\n                          </div>\n                        </div>\n                        {selectedAlgorithm === algo.id && (\n                          <motion.div\n                            className=\"absolute inset-0 rounded-lg border-2 border-cyan-400\"\n                            initial={{ opacity: 0 }}\n                            animate={{ opacity: [0.5, 1, 0.5] }}\n                            transition={{ duration: 2, repeat: Infinity }}\n                          />\n                        )}\n                      </motion.button>\n                    ))}\n                  </div>\n                </div></parameter>\n\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <label className=\"text-cyan-400 text-sm font-medium flex items-center gap-2\">\n                      <Zap className=\"w-4 h-4\" />\n                      Speed\n                    </label>\n                    <span className=\"text-cyan-300 text-xs\">{speed[0]}ms</span>\n                  </div>\n                  <Slider\n                    value={speed}\n                    onValueChange={setSpeed}\n                    min={10}\n                    max={200}\n                    step={10}\n                    className=\"[&_[role=slider]]:bg-cyan-400 [&_[role=slider]]:border-cyan-300 [&_[role=slider]]:shadow-[0_0_15px_rgba(34,211,238,0.8)] [&_[role=slider]]:hover:shadow-[0_0_25px_rgba(34,211,238,1)] [&_[role=slider]]:transition-shadow [&_.relative]:bg-gray-700/50 [&_.relative]:border [&_.relative]:border-cyan-500/30 [&_.bg-primary]:bg-gradient-to-r [&_.bg-primary]:from-cyan-500 [&_.bg-primary]:to-purple-500 [&_.bg-primary]:shadow-[0_0_10px_rgba(34,211,238,0.5)]\"\n                  />\n                </div>\n\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <label className=\"text-cyan-400 text-sm font-medium flex items-center gap-2\">\n                      <BarChart3 className=\"w-4 h-4\" />\n                      Array Size\n                    </label>\n                    <span className=\"text-cyan-300 text-xs\">{arraySize[0]}</span>\n                  </div>\n                  <Slider\n                    value={arraySize}\n                    onValueChange={setArraySize}\n                    min={5}\n                    max={100}\n                    step={1}\n                    className=\"[&_[role=slider]]:bg-cyan-400 [&_[role=slider]]:border-cyan-300 [&_[role=slider]]:shadow-lg [&_[role=slider]]:shadow-cyan-400/50 [&_[role=slider]]:hover:shadow-cyan-400/80 [&_[role=slider]]:transition-shadow [&>span]:bg-cyan-500/30 [&>span>span]:bg-gradient-to-r [&>span>span]:from-cyan-500 [&>span>span]:to-purple-500\"\n                  />\n                </div>\n\n                <div className=\"flex gap-3 pt-4\">\n                  <motion.div\n                    className=\"relative flex-1\"\n                    whileHover={{ scale: 1.05 }}\n                    whileTap={{ scale: 0.95 }}\n                  >\n                    <Button\n                      onClick={isPlaying ? pauseVisualization : startVisualization}\n                      disabled={array.length === 0 || (steps.length === 0 && !isPlaying)}\n                      className=\"w-full relative overflow-hidden bg-gradient-to-r from-cyan-500 to-purple-500 hover:from-cyan-400 hover:to-purple-400 text-white font-semibold py-6 rounded-lg border-0 shadow-lg disabled:opacity-50 disabled:cursor-not-allowed\"\n                      style={{\n                        boxShadow: isPlaying \n                          ? '0 0 30px rgba(168, 85, 247, 0.8), 0 0 60px rgba(168, 85, 247, 0.4)' \n                          : '0 0 30px rgba(6, 182, 212, 0.8), 0 0 60px rgba(6, 182, 212, 0.4)'\n                      }}\n                    >\n                      <motion.div\n                        className=\"absolute inset-0 bg-gradient-to-r from-white/0 via-white/30 to-white/0\"\n                        animate={{\n                          x: ['-100%', '200%']\n                        }}\n                        transition={{\n                          duration: 2,\n                          repeat: Infinity,\n                          repeatDelay: 1\n                        }}\n                      />\n                      <motion.div\n                        className=\"relative flex items-center justify-center gap-2\"\n                        initial={false}\n                        animate={{\n                          scale: isPlaying ? [1, 1.1, 1] : 1\n                        }}\n                        transition={{\n                          duration: 0.5,\n                          repeat: isPlaying ? Infinity : 0,\n                          repeatDelay: 0.3\n                        }}\n                      >\n                        <motion.div\n                          initial={false}\n                          animate={{\n                            rotate: isPlaying ? 0 : 0,\n                            scale: isPlaying ? 1 : 1\n                          }}\n                          transition={{ duration: 0.3 }}\n                        >\n                          {isPlaying ? (\n                            <Pause className=\"w-5 h-5\" fill=\"currentColor\" />\n                          ) : (\n                            <Play className=\"w-5 h-5\" fill=\"currentColor\" />\n                          )}\n                        </motion.div>\n                        <span className=\"text-sm font-bold tracking-wide\">\n                          {isPlaying ? 'PAUSE' : 'PLAY'}\n                        </span>\n                      </motion.div>\n                    </Button>\n                  </motion.div>\n                  <motion.button\n                    onClick={resetVisualization}\n                    disabled={isPlaying}\n                    className=\"flex-1 flex items-center justify-center gap-2 px-6 py-3 bg-gradient-to-r from-pink-500/20 to-purple-500/20 border-2 border-pink-500/50 rounded-lg text-pink-300 font-semibold hover:from-pink-500/30 hover:to-purple-500/30 hover:border-pink-400 hover:shadow-[0_0_25px_rgba(236,72,153,0.6)] disabled:opacity-50 disabled:cursor-not-allowed transition-all duration-300\"\n                    whileHover={{ scale: 1.05 }}\n                    whileTap={{ scale: 0.95, rotate: 360 }}\n                    transition={{ type: \"spring\", stiffness: 400, damping: 17 }}\n                  >\n                    <motion.div\n                      animate={{ rotate: 360 }}\n                      transition={{ duration: 2, repeat: Infinity, ease: \"linear\" }}\n                    >\n                      <RotateCcw className=\"w-5 h-5\" />\n                    </motion.div>\n                    Reset\n                  </motion.button></parameter>\n</invoke>\n                </div>\n              </div>\n            </div>\n\n            {/* TODO:StatsPanel Real-time statistics panel showing comparisons, swaps, and progress */}\n          </div>\n\n            <motion.div\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ delay: 0.2 }}\n              className=\"bg-gray-900/50 backdrop-blur-lg border border-purple-500/30 rounded-xl p-6 shadow-2xl shadow-purple-500/20\"\n            >\n              <div className=\"flex items-center gap-2 mb-4 text-purple-400\">\n                <BarChart3 className=\"w-5 h-5\" />\n                <h3 className=\"text-sm font-semibold uppercase tracking-wider\">Statistics</h3>\n              </div>\n              \n              <div className=\"grid grid-cols-3 gap-4\">\n                <motion.div\n                  className=\"bg-gradient-to-br from-cyan-500/10 to-cyan-500/5 border border-cyan-500/30 rounded-lg p-4 relative overflow-hidden\"\n                  whileHover={{ scale: 1.05 }}\n                  transition={{ type: 'spring', stiffness: 300 }}\n                >\n                  <div className=\"absolute inset-0 bg-gradient-to-r from-cyan-500/0 via-cyan-500/20 to-cyan-500/0 animate-pulse\" />\n                  <div className=\"relative z-10\">\n                    <div className=\"text-xs text-cyan-400 uppercase tracking-wider mb-2\">Comparisons</div>\n                    <div className=\"text-3xl font-bold text-cyan-300\">\n                      {steps.reduce((acc, step) => acc + (step.comparingIndices.length > 0 ? 1 : 0), 0)}\n                    </div>\n                  </div>\n                  <motion.div\n                    className=\"absolute bottom-0 left-0 right-0 h-1 bg-gradient-to-r from-cyan-500 to-cyan-400\"\n                    initial={{ scaleX: 0 }}\n                    animate={{ scaleX: 1 }}\n                    transition={{ duration: 0.5 }}\n                    style={{ transformOrigin: 'left' }}\n                  />\n                </motion.div>\n\n                <motion.div\n                  className=\"bg-gradient-to-br from-pink-500/10 to-pink-500/5 border border-pink-500/30 rounded-lg p-4 relative overflow-hidden\"\n                  whileHover={{ scale: 1.05 }}\n                  transition={{ type: 'spring', stiffness: 300 }}\n                >\n                  <div className=\"absolute inset-0 bg-gradient-to-r from-pink-500/0 via-pink-500/20 to-pink-500/0 animate-pulse\" />\n                  <div className=\"relative z-10\">\n                    <div className=\"text-xs text-pink-400 uppercase tracking-wider mb-2\">Swaps</div>\n                    <div className=\"text-3xl font-bold text-pink-300\">\n                      {steps.reduce((acc, step) => acc + (step.swappingIndices.length > 0 ? 1 : 0), 0)}\n                    </div>\n                  </div>\n                  <motion.div\n                    className=\"absolute bottom-0 left-0 right-0 h-1 bg-gradient-to-r from-pink-500 to-pink-400\"\n                    initial={{ scaleX: 0 }}\n                    animate={{ scaleX: 1 }}\n                    transition={{ duration: 0.5, delay: 0.1 }}\n                    style={{ transformOrigin: 'left' }}\n                  />\n                </motion.div>\n\n                <motion.div\n                  className=\"bg-gradient-to-br from-purple-500/10 to-purple-500/5 border border-purple-500/30 rounded-lg p-4 relative overflow-hidden\"\n                  whileHover={{ scale: 1.05 }}\n                  transition={{ type: 'spring', stiffness: 300 }}\n                >\n                  <div className=\"absolute inset-0 bg-gradient-to-r from-purple-500/0 via-purple-500/20 to-purple-500/0 animate-pulse\" />\n                  <div className=\"relative z-10\">\n                    <div className=\"text-xs text-purple-400 uppercase tracking-wider mb-2\">Progress</div>\n                    <div className=\"text-3xl font-bold text-purple-300\">\n                      {steps.length > 0 ? Math.round((currentStep / steps.length) * 100) : 0}%\n                    </div>\n                  </div>\n                  <motion.div\n                    className=\"absolute bottom-0 left-0 right-0 h-1 bg-gradient-to-r from-purple-500 to-purple-400\"\n                    initial={{ scaleX: 0 }}\n                    animate={{ \n                      scaleX: steps.length > 0 ? currentStep / steps.length : 0 \n                    }}\n                    transition={{ duration: 0.3 }}\n                    style={{ transformOrigin: 'left' }}\n                  />\n                </motion.div>\n              </div>\n\n              <div className=\"mt-4 pt-4 border-t border-purple-500/20\">\n                <div className=\"flex items-center justify-between text-sm\">\n                  <span className=\"text-gray-400\">Total Steps</span>\n                  <span className=\"text-purple-300 font-mono font-semibold\">{steps.length}</span>\n                </div>\n                <div className=\"flex items-center justify-between text-sm mt-2\">\n                  <span className=\"text-gray-400\">Current Step</span>\n                  <span className=\"text-cyan-300 font-mono font-semibold\">{currentStep}</span>\n                </div>\n              </div>\n            </motion.div>\n          <div className=\"lg:col-span-3\">\n            <div className=\"bg-gray-900/50 backdrop-blur-lg border border-purple-500/30 rounded-xl p-8 shadow-2xl shadow-purple-500/20 min-h-[600px]\">\n                            {array.length === 0 ? (\n                <motion.div\n                  initial={{ opacity: 0, scale: 0.8 }}\n                  animate={{ opacity: 1, scale: 1 }}\n                  className=\"absolute inset-0 flex items-center justify-center\"\n                >\n                  <div className=\"text-center space-y-4\">\n                    <motion.div\n                      animate={{\n                        rotate: [0, 360],\n                        scale: [1, 1.2, 1]\n                      }}\n                      transition={{ duration: 3, repeat: Infinity }}\n                      className=\"inline-block\"\n                    >\n                      <BarChart3 className=\"w-24 h-24 text-cyan-400/50\" />\n                    </motion.div>\n                    <p className=\"text-gray-400 text-lg\">Generate an array to start visualizing</p>\n                  </div>\n                </motion.div>\n              ) : (\n                <div className=\"relative w-full h-full flex items-end justify-center gap-1 px-4\">\n                  {array.map((element, index) => {\n                    const maxValue = Math.max(...array.map(el => el.value));\n                    const heightPercentage = (element.value / maxValue) * 100;\n                    const colorIndex = index % NEON_COLORS.length;\n                    const baseColor = NEON_COLORS[colorIndex];\n\n                    let barColor = baseColor;\n                    let glowIntensity = 0.3;\n                    let borderColor = baseColor;\n\n                    if (element.isSwapping) {\n                      barColor = '#ff0066';\n                      glowIntensity = 1;\n                      borderColor = '#ff0066';\n                    } else if (element.isComparing) {\n                      barColor = '#ffff00';\n                      glowIntensity = 0.8;\n                      borderColor = '#ffff00';\n                    } else if (element.isSorted) {\n                      barColor = '#00ff00';\n                      glowIntensity = 0.5;\n                      borderColor = '#00ff00';\n                    }\n\n                    return (\n                      <motion.div\n                        key={element.id}\n                        className=\"relative flex-1 min-w-[4px] max-w-[60px] rounded-t-lg\"\n                        initial={{ height: 0, opacity: 0 }}\n                        animate={{\n                          height: `${heightPercentage}%`,\n                          opacity: 1,\n                          scale: element.isSwapping ? [1, 1.1, 1] : 1,\n                          y: element.isSwapping ? [0, -10, 0] : 0\n                        }}\n                        transition={{\n                          height: { duration: 0.3, ease: 'easeOut' },\n                          scale: { duration: 0.2 },\n                          y: { duration: 0.3 }\n                        }}\n                        style={{\n                          backgroundColor: barColor,\n                          boxShadow: `\n                            0 0 ${20 * glowIntensity}px ${barColor},\n                            0 0 ${40 * glowIntensity}px ${barColor},\n                            inset 0 0 ${10 * glowIntensity}px rgba(255, 255, 255, 0.5)\n                          `,\n                          border: `2px solid ${borderColor}`\n                        }}\n                      >\n                        {/* Swap trail effect */}\n                        {element.isSwapping && (\n                          <>\n                            <motion.div\n                              className=\"absolute inset-0 rounded-t-lg\"\n                              initial={{ opacity: 0.8, scale: 1 }}\n                              animate={{ opacity: 0, scale: 1.5 }}\n                              transition={{ duration: 0.5, repeat: Infinity }}\n                              style={{\n                                backgroundColor: barColor,\n                                filter: 'blur(8px)'\n                              }}\n                            />\n                            <motion.div\n                              className=\"absolute -top-8 left-1/2 transform -translate-x-1/2\"\n                              animate={{\n                                y: [0, -10, 0],\n                                opacity: [1, 0.5, 1]\n                              }}\n                              transition={{ duration: 0.6, repeat: Infinity }}\n                            >\n                              <div className=\"w-2 h-2 rounded-full bg-pink-400 shadow-[0_0_10px_rgba(255,0,102,1)]\" />\n                            </motion.div>\n                          </>\n                        )}\n\n                        {/* Comparison indicator */}\n                        {element.isComparing && (\n                          <motion.div\n                            className=\"absolute -top-6 left-1/2 transform -translate-x-1/2\"\n                            animate={{\n                              scale: [1, 1.3, 1],\n                              opacity: [0.8, 1, 0.8]\n                            }}\n                            transition={{ duration: 0.5, repeat: Infinity }}\n                          >\n                            <div className=\"relative\">\n                              <Zap className=\"w-4 h-4 text-yellow-400\" style={{\n                                filter: 'drop-shadow(0 0 8px rgba(255, 255, 0, 1))'\n                              }} />\n                            </div>\n                          </motion.div>\n                        )}\n\n                        {/* Sorted checkmark */}\n                        {element.isSorted && (\n                          <motion.div\n                            className=\"absolute -top-6 left-1/2 transform -translate-x-1/2\"\n                            initial={{ scale: 0, rotate: -180 }}\n                            animate={{ scale: 1, rotate: 0 }}\n                            transition={{ type: 'spring', stiffness: 200 }}\n                          >\n                            <div className=\"w-3 h-3 rounded-full bg-green-400 shadow-[0_0_10px_rgba(0,255,0,1)]\" />\n                          </motion.div>\n                        )}\n\n                        {/* Value label for larger arrays */}\n                        {array.length <= 30 && (\n                          <motion.div\n                            className=\"absolute -bottom-6 left-1/2 transform -translate-x-1/2 text-xs font-mono text-gray-400\"\n                            initial={{ opacity: 0 }}\n                            animate={{ opacity: 0.7 }}\n                          >\n                            {element.value}\n                          </motion.div>\n                        )}\n\n                        {/* Inner glow effect */}\n                        <div\n                          className=\"absolute inset-0 rounded-t-lg opacity-30\"\n                          style={{\n                            background: `linear-gradient(to top, transparent, ${barColor})`\n                          }}\n                        />\n                      </motion.div>\n                    );\n                  })}\n                </div>\n              )}\n              \n              <div className=\"relative h-full flex items-end justify-center gap-1\">\n                \n                {array.map((element, index) => {\n                  const maxValue = Math.max(...array.map(el => el.value), 100);\n                  const heightPercentage = (element.value / maxValue) * 100;\n                  const colorIndex = index % NEON_COLORS.length;\n                  const neonColor = NEON_COLORS[colorIndex];\n\n                  return (\n                    <motion.div\n                      key={element.id}\n                      className=\"relative flex-1 min-w-[4px] max-w-[60px] rounded-t-lg\"\n                      initial={{ height: 0, opacity: 0 }}\n                      animate={{\n                        height: `${heightPercentage}%`,\n                        opacity: 1,\n                        backgroundColor: element.isSorted\n                          ? '#00ff00'\n                          : element.isSwapping\n                          ? '#ff0066'\n                          : element.isComparing\n                          ? '#ffff00'\n                          : neonColor,\n                        boxShadow: element.isSorted\n                          ? '0 0 20px rgba(0, 255, 0, 0.8), 0 0 40px rgba(0, 255, 0, 0.5), inset 0 0 20px rgba(0, 255, 0, 0.3)'\n                          : element.isSwapping\n                          ? '0 0 30px rgba(255, 0, 102, 1), 0 0 60px rgba(255, 0, 102, 0.7), inset 0 0 30px rgba(255, 0, 102, 0.4)'\n                          : element.isComparing\n                          ? '0 0 25px rgba(255, 255, 0, 1), 0 0 50px rgba(255, 255, 0, 0.6), inset 0 0 25px rgba(255, 255, 0, 0.3)'\n                          : `0 0 15px ${neonColor}80, 0 0 30px ${neonColor}40, inset 0 0 15px ${neonColor}30`,\n                        scale: element.isSwapping ? 1.1 : element.isComparing ? 1.05 : 1,\n                      }}\n                      transition={{\n                        height: { duration: 0.5, ease: 'easeInOut' },\n                        backgroundColor: { duration: 0.3 },\n                        boxShadow: { duration: 0.3 },\n                        scale: { duration: 0.2, type: 'spring', stiffness: 300 },\n                        opacity: { duration: 0.5 }\n                      }}\n                      style={{\n                        background: element.isSorted\n                          ? 'linear-gradient(to top, #00ff00, #00ff88)'\n                          : element.isSwapping\n                          ? 'linear-gradient(to top, #ff0066, #ff00ff)'\n                          : element.isComparing\n                          ? 'linear-gradient(to top, #ffff00, #ffaa00)'\n                          : `linear-gradient(to top, ${neonColor}, ${neonColor}dd)`,\n                      }}\n                    >\n                      {/* Glow effect overlay */}\n                      <motion.div\n                        className=\"absolute inset-0 rounded-t-lg\"\n                        animate={{\n                          opacity: element.isSwapping || element.isComparing ? [0.3, 0.7, 0.3] : 0.2,\n                        }}\n                        transition={{\n                          duration: 0.8,\n                          repeat: element.isSwapping || element.isComparing ? Infinity : 0,\n                        }}\n                        style={{\n                          background: `radial-gradient(circle at 50% 0%, rgba(255, 255, 255, 0.4), transparent 70%)`,\n                        }}\n                      />\n\n                      {/* Value label */}\n                      {arraySize[0] <= 30 && (\n                        <motion.div\n                          className=\"absolute -top-6 left-1/2 -translate-x-1/2 text-xs font-bold whitespace-nowrap\"\n                          initial={{ opacity: 0, y: 10 }}\n                          animate={{ \n                            opacity: 1, \n                            y: 0,\n                            color: element.isSorted\n                              ? '#00ff00'\n                              : element.isSwapping\n                              ? '#ff0066'\n                              : element.isComparing\n                              ? '#ffff00'\n                              : '#ffffff',\n                            textShadow: element.isSorted\n                              ? '0 0 10px rgba(0, 255, 0, 1)'\n                              : element.isSwapping\n                              ? '0 0 10px rgba(255, 0, 102, 1)'\n                              : element.isComparing\n                              ? '0 0 10px rgba(255, 255, 0, 1)'\n                              : `0 0 8px ${neonColor}`,\n                          }}\n                          transition={{ delay: 0.2 }}\n                        >\n                          {element.value}\n                        </motion.div>\n                      )}\n\n                      {/* Swap trail effect */}\n                      {element.isSwapping && (\n                        <motion.div\n                          className=\"absolute inset-0 rounded-t-lg\"\n                          initial={{ opacity: 0.8, scale: 1 }}\n                          animate={{ \n                            opacity: 0, \n                            scale: 1.5,\n                          }}\n                          transition={{ \n                            duration: 0.6,\n                            repeat: Infinity,\n                          }}\n                          style={{\n                            background: 'radial-gradient(circle, rgba(255, 0, 102, 0.6), transparent 70%)',\n                            filter: 'blur(8px)',\n                          }}\n                        />\n                      )}\n\n                      {/* Comparison pulse indicator */}\n                      {element.isComparing && (\n                        <motion.div\n                          className=\"absolute -top-2 left-1/2 -translate-x-1/2 w-3 h-3 rounded-full\"\n                          animate={{\n                            scale: [1, 1.5, 1],\n                            opacity: [1, 0.5, 1],\n                          }}\n                          transition={{\n                            duration: 0.6,\n                            repeat: Infinity,\n                          }}\n                          style={{\n                            backgroundColor: '#ffff00',\n                            boxShadow: '0 0 15px rgba(255, 255, 0, 1), 0 0 30px rgba(255, 255, 0, 0.6)',\n                          }}\n                        />\n                      )}\n\n                      {/* Sorted checkmark indicator */}\n                      {element.isSorted && arraySize[0] <= 40 && (\n                        <motion.div\n                          className=\"absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 text-white font-bold text-lg\"\n                          initial={{ scale: 0, rotate: -180 }}\n                          animate={{ scale: 1, rotate: 0 }}\n                          transition={{ type: 'spring', stiffness: 200, damping: 10 }}\n                          style={{\n                            textShadow: '0 0 10px rgba(0, 255, 0, 1)',\n                          }}\n                        >\n                          \u2713\n                        </motion.div>\n                      )}\n                    </motion.div>\n                  );\n                })}\n              </div>\n            </div>\n\n            <motion.div\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ delay: 0.3 }}\n              className=\"mt-6\"\n            >\n              <div className=\"bg-gray-900/50 backdrop-blur-lg border border-purple-500/30 rounded-xl p-4 shadow-lg shadow-purple-500/10\">\n                <div className=\"space-y-2\">\n                  <div className=\"flex items-center justify-between text-sm\">\n                    <span className=\"text-purple-300 font-medium\">Sorting Progress</span>\n                    <span className=\"text-cyan-300 font-mono\">\n                      {steps.length > 0 ? Math.round((currentStep / steps.length) * 100) : 0}%\n                    </span>\n                  </div>\n                  \n                  <div className=\"relative h-3 bg-gray-800/80 rounded-full overflow-hidden border border-purple-500/30\">\n                    <motion.div\n                      className=\"absolute inset-y-0 left-0 bg-gradient-to-r from-cyan-500 via-purple-500 to-pink-500 rounded-full\"\n                      initial={{ width: '0%' }}\n                      animate={{ \n                        width: steps.length > 0 ? `${(currentStep / steps.length) * 100}%` : '0%',\n                        boxShadow: [\n                          '0 0 20px rgba(6, 182, 212, 0.8)',\n                          '0 0 30px rgba(168, 85, 247, 0.8)',\n                          '0 0 20px rgba(6, 182, 212, 0.8)'\n                        ]\n                      }}\n                      transition={{ \n                        width: { duration: 0.3, ease: 'easeOut' },\n                        boxShadow: { duration: 2, repeat: Infinity }\n                      }}\n                    />\n                    \n                    <motion.div\n                      className=\"absolute inset-0 bg-gradient-to-r from-transparent via-white/30 to-transparent\"\n                      animate={{\n                        x: ['-100%', '200%']\n                      }}\n                      transition={{\n                        duration: 2,\n                        repeat: Infinity,\n                        ease: 'linear'\n                      }}\n                      style={{\n                        width: '50%'\n                      }}\n                    />\n                  </div>\n                  \n                  <div className=\"flex items-center justify-between text-xs text-gray-400\">\n                    <span>Step {currentStep} of {steps.length}</span>\n                    {currentStep >= steps.length && steps.length > 0 && (\n                      <motion.span\n                        initial={{ opacity: 0, scale: 0.8 }}\n                        animate={{ opacity: 1, scale: 1 }}\n                        className=\"text-green-400 font-semibold\"\n                      >\n                        \u2713 Complete\n                      </motion.span>\n                    )}\n                  </div>\n                </div>\n              </div>\n            </motion.div>\n          </div>\n        </div>\n\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ delay: 0.4, duration: 0.8 }}\n          className=\"bg-gray-900/50 backdrop-blur-lg border border-cyan-500/30 rounded-xl p-6 shadow-[0_0_30px_rgba(0,255,255,0.2)]\"\n        >\n          <div className=\"flex items-center gap-2 mb-4\">\n            <BarChart3 className=\"w-5 h-5 text-cyan-400\" />\n            <h3 className=\"text-lg font-semibold text-cyan-300 uppercase tracking-wider\">\n              Legend\n            </h3>\n          </div>\n          \n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n            <motion.div\n              className=\"flex items-center gap-3 p-4 bg-gray-800/50 rounded-lg border border-gray-700\"\n              whileHover={{ scale: 1.05, borderColor: 'rgba(156, 163, 175, 0.5)' }}\n              transition={{ duration: 0.2 }}\n            >\n              <motion.div\n                className=\"w-6 h-12 bg-gradient-to-t from-gray-500 to-gray-300 rounded\"\n                animate={{\n                  boxShadow: [\n                    '0 0 10px rgba(156, 163, 175, 0.3)',\n                    '0 0 20px rgba(156, 163, 175, 0.5)',\n                    '0 0 10px rgba(156, 163, 175, 0.3)'\n                  ]\n                }}\n                transition={{ duration: 2, repeat: Infinity }}\n              />\n              <div>\n                <div className=\"text-sm font-semibold text-white\">Default</div>\n                <div className=\"text-xs text-gray-400\">Unsorted</div>\n              </div>\n            </motion.div>\n\n            <motion.div\n              className=\"flex items-center gap-3 p-4 bg-yellow-500/10 rounded-lg border border-yellow-500/30\"\n              whileHover={{ scale: 1.05, borderColor: 'rgba(234, 179, 8, 0.5)' }}\n              transition={{ duration: 0.2 }}\n            >\n              <motion.div\n                className=\"w-6 h-12 bg-gradient-to-t from-yellow-500 to-yellow-300 rounded\"\n                animate={{\n                  boxShadow: [\n                    '0 0 15px rgba(234, 179, 8, 0.5)',\n                    '0 0 30px rgba(234, 179, 8, 0.8)',\n                    '0 0 15px rgba(234, 179, 8, 0.5)'\n                  ]\n                }}\n                transition={{ duration: 1.5, repeat: Infinity }}\n              />\n              <div>\n                <div className=\"text-sm font-semibold text-yellow-300\">Comparing</div>\n                <div className=\"text-xs text-yellow-400/70\">Active check</div>\n              </div>\n            </motion.div>\n\n            <motion.div\n              className=\"flex items-center gap-3 p-4 bg-pink-500/10 rounded-lg border border-pink-500/30\"\n              whileHover={{ scale: 1.05, borderColor: 'rgba(236, 72, 153, 0.5)' }}\n              transition={{ duration: 0.2 }}\n            >\n              <motion.div\n                className=\"w-6 h-12 bg-gradient-to-t from-pink-500 to-pink-300 rounded\"\n                animate={{\n                  boxShadow: [\n                    '0 0 15px rgba(236, 72, 153, 0.5)',\n                    '0 0 30px rgba(236, 72, 153, 0.8)',\n                    '0 0 15px rgba(236, 72, 153, 0.5)'\n                  ],\n                  x: [-2, 2, -2]\n                }}\n                transition={{ duration: 1, repeat: Infinity }}\n              />\n              <div>\n                <div className=\"text-sm font-semibold text-pink-300\">Swapping</div>\n                <div className=\"text-xs text-pink-400/70\">Exchanging</div>\n              </div>\n            </motion.div>\n\n            <motion.div\n              className=\"flex items-center gap-3 p-4 bg-green-500/10 rounded-lg border border-green-500/30\"\n              whileHover={{ scale: 1.05, borderColor: 'rgba(34, 197, 94, 0.5)' }}\n              transition={{ duration: 0.2 }}\n            >\n              <motion.div\n                className=\"w-6 h-12 bg-gradient-to-t from-green-500 to-green-300 rounded\"\n                animate={{\n                  boxShadow: [\n                    '0 0 15px rgba(34, 197, 94, 0.5)',\n                    '0 0 30px rgba(34, 197, 94, 0.8)',\n                    '0 0 15px rgba(34, 197, 94, 0.5)'\n                  ]\n                }}\n                transition={{ duration: 2, repeat: Infinity }}\n              />\n              <div>\n                <div className=\"text-sm font-semibold text-green-300\">Sorted</div>\n                <div className=\"text-xs text-green-400/70\">In place</div>\n              </div>\n            </motion.div>\n          </div>\n        </motion.div>\n      </div>\n    </div>\n  );\n}",
  "error": null,
  "overall_score": 46,
  "code_quality_score": 12,
  "architecture_score": 14,
  "performance_score": 11,
  "accessibility_score": 9,
  "metadata": {
    "document_id": "eval_room_472eaeadb832",
    "prompt_category": "creative",
    "prompt_complexity": 9.0
  },
  "raw_response": {
    "document_id": "eval_room_472eaeadb832",
    "mode": "parallel",
    "prompt": "Build a captivating algorithm visualizer with neon colored bars, smooth height transitions, glowing comparison indicators, trail effects during swaps, and a futuristic dashboard design with animated controls",
    "content": "import { useState, useCallback } from 'react';\nimport { useEffect } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Slider } from '@/components/ui/slider';\nimport { Play, Pause, RotateCcw, Zap, BarChart3 } from 'lucide-react';\nimport { motion } from 'framer-motion';\n\ninterface ArrayElement {\n  value: number;\n  id: string;\n  isComparing?: boolean;\n  isSwapping?: boolean;\n  isSorted?: boolean;\n}\n\ninterface AlgorithmStep {\n  array: ArrayElement[];\n  comparingIndices: number[];\n  swappingIndices: number[];\n  sortedIndices: number[];\n}\n\ntype AlgorithmType = 'bubble' | 'quick' | 'merge' | 'insertion';\n\nconst NEON_COLORS = [\n  '#00ffff',\n  '#ff00ff', \n  '#00ff00',\n  '#ffff00',\n  '#ff0066',\n  '#00ffaa'\n];\n\nconst mockAlgorithms = [\n  { id: 'bubble', name: 'Bubble Sort', complexity: 'O(n\u00b2)' },\n  { id: 'quick', name: 'Quick Sort', complexity: 'O(n log n)' },\n  { id: 'merge', name: 'Merge Sort', complexity: 'O(n log n)' },\n  { id: 'insertion', name: 'Insertion Sort', complexity: 'O(n\u00b2)' }\n];\n\nexport default function AlgorithmVisualizer() {\n  const [array, setArray] = useState<ArrayElement[]>([]);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [speed, setSpeed] = useState([50]);\n  const [arraySize, setArraySize] = useState([20]);\n  const [selectedAlgorithm, setSelectedAlgorithm] = useState<AlgorithmType>('bubble');\n  const [currentStep, setCurrentStep] = useState(0);\n  const [steps, setSteps] = useState<AlgorithmStep[]>([]);\n  useEffect(() => {\n    if (!isPlaying) return;\n\n    const delay = 1000 - (speed[0] * 9.5);\n    const timer = setTimeout(() => {\n      animateSteps();\n    }, delay);\n\n    return () => clearTimeout(timer);\n  }, [isPlaying, speed, animateSteps]);\n\n  const generateRandomArray = useCallback(() => {\n    const newArray: ArrayElement[] = Array.from({ length: arraySize[0] }, (_, index) => ({\n      value: Math.floor(Math.random() * 100) + 5,\n      id: `element-${index}-${Date.now()}`,\n      isComparing: false,\n      isSwapping: false,\n      isSorted: false\n    }));\n    setArray(newArray);\n    setSteps([]);\n    setCurrentStep(0);\n    setIsPlaying(false);\n  }, [arraySize]);\n\n  const resetVisualization = useCallback(() => {\n\n    setIsPlaying(false);\n    setCurrentStep(0);\n    setSteps([]);\n    generateRandomArray();\n  }, [generateRandomArray]);\n\n  const animateSteps = useCallback(() => {\n    if (currentStep >= steps.length) {\n      setIsPlaying(false);\n      return;\n    }\n\n    const step = steps[currentStep];\n    setArray(step.array);\n    setCurrentStep(prev => prev + 1);\n  }, [currentStep, steps]);\n\n  const startVisualization = useCallback(() => {\n    if (steps.length === 0 || currentStep >= steps.length) {\n      return;\n    }\n    setIsPlaying(true);\n    \n  }, [steps, speed, currentStep]);\n\n  const pauseVisualization = useCallback(() => {    setIsPlaying(false);\n\n    \n  }, []);\n\n  const generateSortingSteps = useCallback((algorithm: AlgorithmType) => {\n    if (array.length === 0) return;\n\n    const steps: AlgorithmStep[] = [];\n    const arr = [...array];\n\n    const createStep = (\n      currentArray: ArrayElement[],\n      comparing: number[] = [],\n      swapping: number[] = [],\n      sorted: number[] = []\n    ): AlgorithmStep => ({\n      array: currentArray.map((el, idx) => ({\n        ...el,\n        isComparing: comparing.includes(idx),\n        isSwapping: swapping.includes(idx),\n        isSorted: sorted.includes(idx)\n      })),\n      comparingIndices: comparing,\n      swappingIndices: swapping,\n      sortedIndices: sorted\n    });\n\n    if (algorithm === 'bubble') {\n      const sortedIndices: number[] = [];\n      for (let i = 0; i < arr.length; i++) {\n        for (let j = 0; j < arr.length - i - 1; j++) {\n          steps.push(createStep([...arr], [j, j + 1], [], sortedIndices));\n          \n          if (arr[j].value > arr[j + 1].value) {\n            steps.push(createStep([...arr], [], [j, j + 1], sortedIndices));\n            [arr[j], arr[j + 1]] = [arr[j + 1], arr[j]];\n            steps.push(createStep([...arr], [], [], sortedIndices));\n          }\n        }\n        sortedIndices.push(arr.length - i - 1);\n      }\n      steps.push(createStep([...arr], [], [], Array.from({ length: arr.length }, (_, i) => i)));\n    } else if (algorithm === 'insertion') {\n      const sortedIndices: number[] = [0];\n      for (let i = 1; i < arr.length; i++) {\n        const key = arr[i];\n        let j = i - 1;\n        \n        steps.push(createStep([...arr], [i], [], sortedIndices));\n        \n        while (j >= 0 && arr[j].value > key.value) {\n          steps.push(createStep([...arr], [j, j + 1], [], sortedIndices));\n          arr[j + 1] = arr[j];\n          steps.push(createStep([...arr], [], [j, j + 1], sortedIndices));\n          j--;\n        }\n        arr[j + 1] = key;\n        sortedIndices.push(i);\n        steps.push(createStep([...arr], [], [], sortedIndices));\n      }\n      steps.push(createStep([...arr], [], [], Array.from({ length: arr.length }, (_, i) => i)));\n    } else if (algorithm === 'quick') {\n      const sortedIndices: number[] = [];\n      \n      const partition = (low: number, high: number): number => {\n        const pivot = arr[high];\n        steps.push(createStep([...arr], [high], [], sortedIndices));\n        let i = low - 1;\n\n        for (let j = low; j < high; j++) {\n          steps.push(createStep([...arr], [j, high], [], sortedIndices));\n          \n          if (arr[j].value < pivot.value) {\n            i++;\n            if (i !== j) {\n              steps.push(createStep([...arr], [], [i, j], sortedIndices));\n              [arr[i], arr[j]] = [arr[j], arr[i]];\n              steps.push(createStep([...arr], [], [], sortedIndices));\n            }\n          }\n        }\n        \n        steps.push(createStep([...arr], [], [i + 1, high], sortedIndices));\n        [arr[i + 1], arr[high]] = [arr[high], arr[i + 1]];\n        sortedIndices.push(i + 1);\n        steps.push(createStep([...arr], [], [], sortedIndices));\n        \n        return i + 1;\n      };\n\n      const quickSort = (low: number, high: number) => {\n        if (low < high) {\n          const pi = partition(low, high);\n          quickSort(low, pi - 1);\n          quickSort(pi + 1, high);\n        } else if (low === high) {\n          sortedIndices.push(low);\n        }\n      };\n\n      quickSort(0, arr.length - 1);\n      steps.push(createStep([...arr], [], [], Array.from({ length: arr.length }, (_, i) => i)));\n    } else if (algorithm === 'merge') {\n      const sortedIndices: number[] = [];\n      \n      const merge = (left: number, mid: number, right: number) => {\n        const leftArr = arr.slice(left, mid + 1);\n        const rightArr = arr.slice(mid + 1, right + 1);\n        \n        let i = 0, j = 0, k = left;\n        \n        while (i < leftArr.length && j < rightArr.length) {\n          steps.push(createStep([...arr], [left + i, mid + 1 + j], [], sortedIndices));\n          \n          if (leftArr[i].value <= rightArr[j].value) {\n            arr[k] = leftArr[i];\n            i++;\n          } else {\n            arr[k] = rightArr[j];\n            j++;\n          }\n          steps.push(createStep([...arr], [], [k], sortedIndices));\n          k++;\n        }\n        \n        while (i < leftArr.length) {\n          arr[k] = leftArr[i];\n          steps.push(createStep([...arr], [], [k], sortedIndices));\n          i++;\n          k++;\n        }\n        \n        while (j < rightArr.length) {\n          arr[k] = rightArr[j];\n          steps.push(createStep([...arr], [], [k], sortedIndices));\n          j++;\n          k++;\n        }\n      };\n\n      const mergeSort = (left: number, right: number) => {\n        if (left < right) {\n          const mid = Math.floor((left + right) / 2);\n          mergeSort(left, mid);\n          mergeSort(mid + 1, right);\n          merge(left, mid, right);\n        }\n      };\n\n      mergeSort(0, arr.length - 1);\n      steps.push(createStep([...arr], [], [], Array.from({ length: arr.length }, (_, i) => i)));\n    }\n\n    setSteps(steps);\n    setCurrentStep(0);</xcrct_code_output>\n  }, [array]);\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-gray-900 via-purple-900 to-gray-900 p-8\">\n      <div className=\"max-w-7xl mx-auto space-y-8\">\n        <motion.div\n          initial={{ opacity: 0, y: -20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.8 }}\n          className=\"text-center space-y-4\"\n        >\n          <motion.h1\n            className=\"text-6xl font-bold bg-gradient-to-r from-cyan-400 via-purple-400 to-pink-400 bg-clip-text text-transparent\"\n            animate={{\n              textShadow: [\n                '0 0 20px rgba(0, 255, 255, 0.5)',\n                '0 0 40px rgba(255, 0, 255, 0.5)',\n                '0 0 20px rgba(0, 255, 255, 0.5)'\n              ]\n            }}\n            transition={{ duration: 2, repeat: Infinity }}\n          >\n            Algorithm Visualizer\n          </motion.h1>\n          \n          <div className=\"flex items-center justify-center gap-4\">\n            <motion.div\n              initial={{ scale: 0 }}\n              animate={{ scale: 1 }}\n              transition={{ delay: 0.3, type: 'spring' }}\n              className=\"flex items-center gap-2 px-6 py-3 bg-gray-800/50 backdrop-blur-sm rounded-full border border-cyan-500/30\"\n            >\n              <Zap className=\"w-5 h-5 text-cyan-400\" />\n              <span className=\"text-xl font-semibold text-cyan-300\">\n                {mockAlgorithms.find(a => a.id === selectedAlgorithm)?.name}\n              </span>\n            </motion.div>\n            \n            <motion.div\n              initial={{ scale: 0 }}\n              animate={{ scale: 1 }}\n              transition={{ delay: 0.5, type: 'spring' }}\n              className=\"px-4 py-2 bg-purple-500/20 backdrop-blur-sm rounded-full border border-purple-400/50\"\n            >\n              <div className=\"flex items-center gap-2\">\n                <BarChart3 className=\"w-4 h-4 text-purple-300\" />\n                <span className=\"text-sm font-mono text-purple-200\">\n                  {mockAlgorithms.find(a => a.id === selectedAlgorithm)?.complexity}\n                </span>\n              </div>\n            </motion.div>\n          </div>\n        </motion.div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-6\">\n          <div className=\"lg:col-span-1 space-y-6\">\n            <motion.div\n              initial={{ opacity: 0, x: -50 }}\n              animate={{ opacity: 1, x: 0 }}\n              className=\"bg-gray-900/50 backdrop-blur-lg border border-cyan-500/30 rounded-xl p-6 shadow-[0_0_30px_rgba(0,255,255,0.3)]\"\n            >\n              <div className=\"space-y-6\">\n                {/* Algorithm Selection */}\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center gap-2 text-cyan-400\">\n                    <Zap className=\"w-4 h-4\" />\n                    <h3 className=\"text-sm font-semibold uppercase tracking-wider\">Algorithm</h3>\n                  </div>\n                  <div className=\"grid grid-cols-1 gap-2\">\n                    {mockAlgorithms.map((algo) => (\n                      <button\n                        key={algo.id}\n                        onClick={() => setSelectedAlgorithm(algo.id as AlgorithmType)}\n                        disabled={isPlaying}\n                        className={`\n                          relative px-4 py-3 rounded-lg text-left transition-all duration-300\n                          ${selectedAlgorithm === algo.id\n                            ? 'bg-cyan-500/20 border border-cyan-400 shadow-[0_0_20px_rgba(0,255,255,0.4)]'\n                            : 'bg-gray-800/50 border border-gray-700 hover:border-cyan-500/50'\n                          }\n                          disabled:opacity-50 disabled:cursor-not-allowed\n                        `}\n                      >\n                        <div className=\"text-sm font-medium text-white\">{algo.name}</div>\n                        <div className=\"text-xs text-gray-400 mt-1\">{algo.complexity}</div>\n                      </button>\n                    ))}\n                  </div>\n                </div>\n\n                {/* Speed Control */}\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center gap-2 text-purple-400\">\n                      <Zap className=\"w-4 h-4\" />\n                      <h3 className=\"text-sm font-semibold uppercase tracking-wider\">Speed</h3>\n                    </div>\n                    <span className=\"text-xs text-gray-400\">{speed[0]}%</span>\n                  </div>\n                  <Slider\n                    value={speed}\n                    onValueChange={setSpeed}\n                    min={10}\n                    max={100}\n                    step={10}\n                    disabled={isPlaying}\n                    className=\"cursor-pointer\"\n                  />\n                </div>\n\n                {/* Array Size Control */}\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center gap-2 text-pink-400\">\n                      <BarChart3 className=\"w-4 h-4\" />\n                      <h3 className=\"text-sm font-semibold uppercase tracking-wider\">Array Size</h3>\n                    </div>\n                    <span className=\"text-xs text-gray-400\">{arraySize[0]}</span>\n                  </div>\n                  <Slider\n                    value={arraySize}\n                    onValueChange={setArraySize}\n                    min={5}\n                    max={50}\n                    step={5}\n                    disabled={isPlaying}\n                    className=\"cursor-pointer\"\n                  />\n                </div>\n\n                {/* Control Buttons */}\n                <div className=\"space-y-2 pt-4 border-t border-gray-700\">\n                  <Button\n                    onClick={isPlaying ? pauseVisualization : startVisualization}\n                    disabled={steps.length === 0 || (currentStep >= steps.length && !isPlaying)}\n                    className=\"w-full bg-gradient-to-r from-cyan-500 to-blue-500 hover:from-cyan-400 hover:to-blue-400 text-white shadow-[0_0_20px_rgba(0,255,255,0.5)] transition-all duration-300\"\n                  >\n                    {isPlaying ? (\n                      <>\n                        <Pause className=\"w-4 h-4 mr-2\" />\n                        Pause\n                      </>\n                    ) : (\n                      <>\n                        <Play className=\"w-4 h-4 mr-2\" />\n                        {currentStep >= steps.length ? 'Start' : 'Resume'}\n                      </>\n                    )}\n                  </Button>\n                  <Button\n                    onClick={resetVisualization}\n                    variant=\"outline\"\n                    className=\"w-full border-pink-500/50 text-pink-400 hover:bg-pink-500/10 hover:border-pink-400 shadow-[0_0_15px_rgba(255,0,102,0.3)] transition-all duration-300\"\n                  >\n                    <RotateCcw className=\"w-4 h-4 mr-2\" />\n                    Reset\n                  </Button>\n                  <Button\n                    onClick={() => {\n                      generateRandomArray();\n                      generateSortingSteps(selectedAlgorithm);\n                    }}\n                    disabled={isPlaying}\n                    variant=\"outline\"\n                    className=\"w-full border-purple-500/50 text-purple-400 hover:bg-purple-500/10 hover:border-purple-400 shadow-[0_0_15px_rgba(168,85,247,0.3)] transition-all duration-300\"\n                  >\n                    <Zap className=\"w-4 h-4 mr-2\" />\n                    Generate New\n                  </Button>\n                </div>\n              </div>\n            </motion.div>\n            \n            <div className=\"bg-gray-900/50 backdrop-blur-lg border border-cyan-500/30 rounded-xl p-6 shadow-2xl shadow-cyan-500/20\">\n              <div className=\"space-y-6\">\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center gap-2 text-cyan-400\">\n                    <Zap className=\"w-4 h-4\" />\n                    <span className=\"text-sm font-semibold tracking-wider\">ALGORITHM</span>\n                  </div>\n                  <div className=\"grid grid-cols-1 gap-3\">\n                    {mockAlgorithms.map((algo) => (\n                      <motion.button\n                        key={algo.id}\n                        onClick={() => setSelectedAlgorithm(algo.id as AlgorithmType)}\n                        className={`relative p-4 rounded-lg border-2 transition-all duration-300 text-left ${\n                          selectedAlgorithm === algo.id\n                            ? 'border-cyan-400 bg-cyan-500/20 shadow-lg shadow-cyan-500/50'\n                            : 'border-gray-700 bg-gray-800/50 hover:border-cyan-500/50 hover:bg-cyan-500/10'\n                        }`}\n                        whileHover={{ scale: 1.02 }}\n                        whileTap={{ scale: 0.98 }}\n                      >\n                        <div className=\"space-y-1\">\n                          <div className=\"font-semibold text-white\">{algo.name}</div>\n                          <div className={`text-xs ${\n                            selectedAlgorithm === algo.id ? 'text-cyan-300' : 'text-gray-400'\n                          }`}>\n                            {algo.complexity}\n                          </div>\n                        </div>\n                        {selectedAlgorithm === algo.id && (\n                          <motion.div\n                            className=\"absolute inset-0 rounded-lg border-2 border-cyan-400\"\n                            initial={{ opacity: 0 }}\n                            animate={{ opacity: [0.5, 1, 0.5] }}\n                            transition={{ duration: 2, repeat: Infinity }}\n                          />\n                        )}\n                      </motion.button>\n                    ))}\n                  </div>\n                </div></parameter>\n\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <label className=\"text-cyan-400 text-sm font-medium flex items-center gap-2\">\n                      <Zap className=\"w-4 h-4\" />\n                      Speed\n                    </label>\n                    <span className=\"text-cyan-300 text-xs\">{speed[0]}ms</span>\n                  </div>\n                  <Slider\n                    value={speed}\n                    onValueChange={setSpeed}\n                    min={10}\n                    max={200}\n                    step={10}\n                    className=\"[&_[role=slider]]:bg-cyan-400 [&_[role=slider]]:border-cyan-300 [&_[role=slider]]:shadow-[0_0_15px_rgba(34,211,238,0.8)] [&_[role=slider]]:hover:shadow-[0_0_25px_rgba(34,211,238,1)] [&_[role=slider]]:transition-shadow [&_.relative]:bg-gray-700/50 [&_.relative]:border [&_.relative]:border-cyan-500/30 [&_.bg-primary]:bg-gradient-to-r [&_.bg-primary]:from-cyan-500 [&_.bg-primary]:to-purple-500 [&_.bg-primary]:shadow-[0_0_10px_rgba(34,211,238,0.5)]\"\n                  />\n                </div>\n\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <label className=\"text-cyan-400 text-sm font-medium flex items-center gap-2\">\n                      <BarChart3 className=\"w-4 h-4\" />\n                      Array Size\n                    </label>\n                    <span className=\"text-cyan-300 text-xs\">{arraySize[0]}</span>\n                  </div>\n                  <Slider\n                    value={arraySize}\n                    onValueChange={setArraySize}\n                    min={5}\n                    max={100}\n                    step={1}\n                    className=\"[&_[role=slider]]:bg-cyan-400 [&_[role=slider]]:border-cyan-300 [&_[role=slider]]:shadow-lg [&_[role=slider]]:shadow-cyan-400/50 [&_[role=slider]]:hover:shadow-cyan-400/80 [&_[role=slider]]:transition-shadow [&>span]:bg-cyan-500/30 [&>span>span]:bg-gradient-to-r [&>span>span]:from-cyan-500 [&>span>span]:to-purple-500\"\n                  />\n                </div>\n\n                <div className=\"flex gap-3 pt-4\">\n                  <motion.div\n                    className=\"relative flex-1\"\n                    whileHover={{ scale: 1.05 }}\n                    whileTap={{ scale: 0.95 }}\n                  >\n                    <Button\n                      onClick={isPlaying ? pauseVisualization : startVisualization}\n                      disabled={array.length === 0 || (steps.length === 0 && !isPlaying)}\n                      className=\"w-full relative overflow-hidden bg-gradient-to-r from-cyan-500 to-purple-500 hover:from-cyan-400 hover:to-purple-400 text-white font-semibold py-6 rounded-lg border-0 shadow-lg disabled:opacity-50 disabled:cursor-not-allowed\"\n                      style={{\n                        boxShadow: isPlaying \n                          ? '0 0 30px rgba(168, 85, 247, 0.8), 0 0 60px rgba(168, 85, 247, 0.4)' \n                          : '0 0 30px rgba(6, 182, 212, 0.8), 0 0 60px rgba(6, 182, 212, 0.4)'\n                      }}\n                    >\n                      <motion.div\n                        className=\"absolute inset-0 bg-gradient-to-r from-white/0 via-white/30 to-white/0\"\n                        animate={{\n                          x: ['-100%', '200%']\n                        }}\n                        transition={{\n                          duration: 2,\n                          repeat: Infinity,\n                          repeatDelay: 1\n                        }}\n                      />\n                      <motion.div\n                        className=\"relative flex items-center justify-center gap-2\"\n                        initial={false}\n                        animate={{\n                          scale: isPlaying ? [1, 1.1, 1] : 1\n                        }}\n                        transition={{\n                          duration: 0.5,\n                          repeat: isPlaying ? Infinity : 0,\n                          repeatDelay: 0.3\n                        }}\n                      >\n                        <motion.div\n                          initial={false}\n                          animate={{\n                            rotate: isPlaying ? 0 : 0,\n                            scale: isPlaying ? 1 : 1\n                          }}\n                          transition={{ duration: 0.3 }}\n                        >\n                          {isPlaying ? (\n                            <Pause className=\"w-5 h-5\" fill=\"currentColor\" />\n                          ) : (\n                            <Play className=\"w-5 h-5\" fill=\"currentColor\" />\n                          )}\n                        </motion.div>\n                        <span className=\"text-sm font-bold tracking-wide\">\n                          {isPlaying ? 'PAUSE' : 'PLAY'}\n                        </span>\n                      </motion.div>\n                    </Button>\n                  </motion.div>\n                  <motion.button\n                    onClick={resetVisualization}\n                    disabled={isPlaying}\n                    className=\"flex-1 flex items-center justify-center gap-2 px-6 py-3 bg-gradient-to-r from-pink-500/20 to-purple-500/20 border-2 border-pink-500/50 rounded-lg text-pink-300 font-semibold hover:from-pink-500/30 hover:to-purple-500/30 hover:border-pink-400 hover:shadow-[0_0_25px_rgba(236,72,153,0.6)] disabled:opacity-50 disabled:cursor-not-allowed transition-all duration-300\"\n                    whileHover={{ scale: 1.05 }}\n                    whileTap={{ scale: 0.95, rotate: 360 }}\n                    transition={{ type: \"spring\", stiffness: 400, damping: 17 }}\n                  >\n                    <motion.div\n                      animate={{ rotate: 360 }}\n                      transition={{ duration: 2, repeat: Infinity, ease: \"linear\" }}\n                    >\n                      <RotateCcw className=\"w-5 h-5\" />\n                    </motion.div>\n                    Reset\n                  </motion.button></parameter>\n</invoke>\n                </div>\n              </div>\n            </div>\n\n            {/* TODO:StatsPanel Real-time statistics panel showing comparisons, swaps, and progress */}\n          </div>\n\n            <motion.div\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ delay: 0.2 }}\n              className=\"bg-gray-900/50 backdrop-blur-lg border border-purple-500/30 rounded-xl p-6 shadow-2xl shadow-purple-500/20\"\n            >\n              <div className=\"flex items-center gap-2 mb-4 text-purple-400\">\n                <BarChart3 className=\"w-5 h-5\" />\n                <h3 className=\"text-sm font-semibold uppercase tracking-wider\">Statistics</h3>\n              </div>\n              \n              <div className=\"grid grid-cols-3 gap-4\">\n                <motion.div\n                  className=\"bg-gradient-to-br from-cyan-500/10 to-cyan-500/5 border border-cyan-500/30 rounded-lg p-4 relative overflow-hidden\"\n                  whileHover={{ scale: 1.05 }}\n                  transition={{ type: 'spring', stiffness: 300 }}\n                >\n                  <div className=\"absolute inset-0 bg-gradient-to-r from-cyan-500/0 via-cyan-500/20 to-cyan-500/0 animate-pulse\" />\n                  <div className=\"relative z-10\">\n                    <div className=\"text-xs text-cyan-400 uppercase tracking-wider mb-2\">Comparisons</div>\n                    <div className=\"text-3xl font-bold text-cyan-300\">\n                      {steps.reduce((acc, step) => acc + (step.comparingIndices.length > 0 ? 1 : 0), 0)}\n                    </div>\n                  </div>\n                  <motion.div\n                    className=\"absolute bottom-0 left-0 right-0 h-1 bg-gradient-to-r from-cyan-500 to-cyan-400\"\n                    initial={{ scaleX: 0 }}\n                    animate={{ scaleX: 1 }}\n                    transition={{ duration: 0.5 }}\n                    style={{ transformOrigin: 'left' }}\n                  />\n                </motion.div>\n\n                <motion.div\n                  className=\"bg-gradient-to-br from-pink-500/10 to-pink-500/5 border border-pink-500/30 rounded-lg p-4 relative overflow-hidden\"\n                  whileHover={{ scale: 1.05 }}\n                  transition={{ type: 'spring', stiffness: 300 }}\n                >\n                  <div className=\"absolute inset-0 bg-gradient-to-r from-pink-500/0 via-pink-500/20 to-pink-500/0 animate-pulse\" />\n                  <div className=\"relative z-10\">\n                    <div className=\"text-xs text-pink-400 uppercase tracking-wider mb-2\">Swaps</div>\n                    <div className=\"text-3xl font-bold text-pink-300\">\n                      {steps.reduce((acc, step) => acc + (step.swappingIndices.length > 0 ? 1 : 0), 0)}\n                    </div>\n                  </div>\n                  <motion.div\n                    className=\"absolute bottom-0 left-0 right-0 h-1 bg-gradient-to-r from-pink-500 to-pink-400\"\n                    initial={{ scaleX: 0 }}\n                    animate={{ scaleX: 1 }}\n                    transition={{ duration: 0.5, delay: 0.1 }}\n                    style={{ transformOrigin: 'left' }}\n                  />\n                </motion.div>\n\n                <motion.div\n                  className=\"bg-gradient-to-br from-purple-500/10 to-purple-500/5 border border-purple-500/30 rounded-lg p-4 relative overflow-hidden\"\n                  whileHover={{ scale: 1.05 }}\n                  transition={{ type: 'spring', stiffness: 300 }}\n                >\n                  <div className=\"absolute inset-0 bg-gradient-to-r from-purple-500/0 via-purple-500/20 to-purple-500/0 animate-pulse\" />\n                  <div className=\"relative z-10\">\n                    <div className=\"text-xs text-purple-400 uppercase tracking-wider mb-2\">Progress</div>\n                    <div className=\"text-3xl font-bold text-purple-300\">\n                      {steps.length > 0 ? Math.round((currentStep / steps.length) * 100) : 0}%\n                    </div>\n                  </div>\n                  <motion.div\n                    className=\"absolute bottom-0 left-0 right-0 h-1 bg-gradient-to-r from-purple-500 to-purple-400\"\n                    initial={{ scaleX: 0 }}\n                    animate={{ \n                      scaleX: steps.length > 0 ? currentStep / steps.length : 0 \n                    }}\n                    transition={{ duration: 0.3 }}\n                    style={{ transformOrigin: 'left' }}\n                  />\n                </motion.div>\n              </div>\n\n              <div className=\"mt-4 pt-4 border-t border-purple-500/20\">\n                <div className=\"flex items-center justify-between text-sm\">\n                  <span className=\"text-gray-400\">Total Steps</span>\n                  <span className=\"text-purple-300 font-mono font-semibold\">{steps.length}</span>\n                </div>\n                <div className=\"flex items-center justify-between text-sm mt-2\">\n                  <span className=\"text-gray-400\">Current Step</span>\n                  <span className=\"text-cyan-300 font-mono font-semibold\">{currentStep}</span>\n                </div>\n              </div>\n            </motion.div>\n          <div className=\"lg:col-span-3\">\n            <div className=\"bg-gray-900/50 backdrop-blur-lg border border-purple-500/30 rounded-xl p-8 shadow-2xl shadow-purple-500/20 min-h-[600px]\">\n                            {array.length === 0 ? (\n                <motion.div\n                  initial={{ opacity: 0, scale: 0.8 }}\n                  animate={{ opacity: 1, scale: 1 }}\n                  className=\"absolute inset-0 flex items-center justify-center\"\n                >\n                  <div className=\"text-center space-y-4\">\n                    <motion.div\n                      animate={{\n                        rotate: [0, 360],\n                        scale: [1, 1.2, 1]\n                      }}\n                      transition={{ duration: 3, repeat: Infinity }}\n                      className=\"inline-block\"\n                    >\n                      <BarChart3 className=\"w-24 h-24 text-cyan-400/50\" />\n                    </motion.div>\n                    <p className=\"text-gray-400 text-lg\">Generate an array to start visualizing</p>\n                  </div>\n                </motion.div>\n              ) : (\n                <div className=\"relative w-full h-full flex items-end justify-center gap-1 px-4\">\n                  {array.map((element, index) => {\n                    const maxValue = Math.max(...array.map(el => el.value));\n                    const heightPercentage = (element.value / maxValue) * 100;\n                    const colorIndex = index % NEON_COLORS.length;\n                    const baseColor = NEON_COLORS[colorIndex];\n\n                    let barColor = baseColor;\n                    let glowIntensity = 0.3;\n                    let borderColor = baseColor;\n\n                    if (element.isSwapping) {\n                      barColor = '#ff0066';\n                      glowIntensity = 1;\n                      borderColor = '#ff0066';\n                    } else if (element.isComparing) {\n                      barColor = '#ffff00';\n                      glowIntensity = 0.8;\n                      borderColor = '#ffff00';\n                    } else if (element.isSorted) {\n                      barColor = '#00ff00';\n                      glowIntensity = 0.5;\n                      borderColor = '#00ff00';\n                    }\n\n                    return (\n                      <motion.div\n                        key={element.id}\n                        className=\"relative flex-1 min-w-[4px] max-w-[60px] rounded-t-lg\"\n                        initial={{ height: 0, opacity: 0 }}\n                        animate={{\n                          height: `${heightPercentage}%`,\n                          opacity: 1,\n                          scale: element.isSwapping ? [1, 1.1, 1] : 1,\n                          y: element.isSwapping ? [0, -10, 0] : 0\n                        }}\n                        transition={{\n                          height: { duration: 0.3, ease: 'easeOut' },\n                          scale: { duration: 0.2 },\n                          y: { duration: 0.3 }\n                        }}\n                        style={{\n                          backgroundColor: barColor,\n                          boxShadow: `\n                            0 0 ${20 * glowIntensity}px ${barColor},\n                            0 0 ${40 * glowIntensity}px ${barColor},\n                            inset 0 0 ${10 * glowIntensity}px rgba(255, 255, 255, 0.5)\n                          `,\n                          border: `2px solid ${borderColor}`\n                        }}\n                      >\n                        {/* Swap trail effect */}\n                        {element.isSwapping && (\n                          <>\n                            <motion.div\n                              className=\"absolute inset-0 rounded-t-lg\"\n                              initial={{ opacity: 0.8, scale: 1 }}\n                              animate={{ opacity: 0, scale: 1.5 }}\n                              transition={{ duration: 0.5, repeat: Infinity }}\n                              style={{\n                                backgroundColor: barColor,\n                                filter: 'blur(8px)'\n                              }}\n                            />\n                            <motion.div\n                              className=\"absolute -top-8 left-1/2 transform -translate-x-1/2\"\n                              animate={{\n                                y: [0, -10, 0],\n                                opacity: [1, 0.5, 1]\n                              }}\n                              transition={{ duration: 0.6, repeat: Infinity }}\n                            >\n                              <div className=\"w-2 h-2 rounded-full bg-pink-400 shadow-[0_0_10px_rgba(255,0,102,1)]\" />\n                            </motion.div>\n                          </>\n                        )}\n\n                        {/* Comparison indicator */}\n                        {element.isComparing && (\n                          <motion.div\n                            className=\"absolute -top-6 left-1/2 transform -translate-x-1/2\"\n                            animate={{\n                              scale: [1, 1.3, 1],\n                              opacity: [0.8, 1, 0.8]\n                            }}\n                            transition={{ duration: 0.5, repeat: Infinity }}\n                          >\n                            <div className=\"relative\">\n                              <Zap className=\"w-4 h-4 text-yellow-400\" style={{\n                                filter: 'drop-shadow(0 0 8px rgba(255, 255, 0, 1))'\n                              }} />\n                            </div>\n                          </motion.div>\n                        )}\n\n                        {/* Sorted checkmark */}\n                        {element.isSorted && (\n                          <motion.div\n                            className=\"absolute -top-6 left-1/2 transform -translate-x-1/2\"\n                            initial={{ scale: 0, rotate: -180 }}\n                            animate={{ scale: 1, rotate: 0 }}\n                            transition={{ type: 'spring', stiffness: 200 }}\n                          >\n                            <div className=\"w-3 h-3 rounded-full bg-green-400 shadow-[0_0_10px_rgba(0,255,0,1)]\" />\n                          </motion.div>\n                        )}\n\n                        {/* Value label for larger arrays */}\n                        {array.length <= 30 && (\n                          <motion.div\n                            className=\"absolute -bottom-6 left-1/2 transform -translate-x-1/2 text-xs font-mono text-gray-400\"\n                            initial={{ opacity: 0 }}\n                            animate={{ opacity: 0.7 }}\n                          >\n                            {element.value}\n                          </motion.div>\n                        )}\n\n                        {/* Inner glow effect */}\n                        <div\n                          className=\"absolute inset-0 rounded-t-lg opacity-30\"\n                          style={{\n                            background: `linear-gradient(to top, transparent, ${barColor})`\n                          }}\n                        />\n                      </motion.div>\n                    );\n                  })}\n                </div>\n              )}\n              \n              <div className=\"relative h-full flex items-end justify-center gap-1\">\n                \n                {array.map((element, index) => {\n                  const maxValue = Math.max(...array.map(el => el.value), 100);\n                  const heightPercentage = (element.value / maxValue) * 100;\n                  const colorIndex = index % NEON_COLORS.length;\n                  const neonColor = NEON_COLORS[colorIndex];\n\n                  return (\n                    <motion.div\n                      key={element.id}\n                      className=\"relative flex-1 min-w-[4px] max-w-[60px] rounded-t-lg\"\n                      initial={{ height: 0, opacity: 0 }}\n                      animate={{\n                        height: `${heightPercentage}%`,\n                        opacity: 1,\n                        backgroundColor: element.isSorted\n                          ? '#00ff00'\n                          : element.isSwapping\n                          ? '#ff0066'\n                          : element.isComparing\n                          ? '#ffff00'\n                          : neonColor,\n                        boxShadow: element.isSorted\n                          ? '0 0 20px rgba(0, 255, 0, 0.8), 0 0 40px rgba(0, 255, 0, 0.5), inset 0 0 20px rgba(0, 255, 0, 0.3)'\n                          : element.isSwapping\n                          ? '0 0 30px rgba(255, 0, 102, 1), 0 0 60px rgba(255, 0, 102, 0.7), inset 0 0 30px rgba(255, 0, 102, 0.4)'\n                          : element.isComparing\n                          ? '0 0 25px rgba(255, 255, 0, 1), 0 0 50px rgba(255, 255, 0, 0.6), inset 0 0 25px rgba(255, 255, 0, 0.3)'\n                          : `0 0 15px ${neonColor}80, 0 0 30px ${neonColor}40, inset 0 0 15px ${neonColor}30`,\n                        scale: element.isSwapping ? 1.1 : element.isComparing ? 1.05 : 1,\n                      }}\n                      transition={{\n                        height: { duration: 0.5, ease: 'easeInOut' },\n                        backgroundColor: { duration: 0.3 },\n                        boxShadow: { duration: 0.3 },\n                        scale: { duration: 0.2, type: 'spring', stiffness: 300 },\n                        opacity: { duration: 0.5 }\n                      }}\n                      style={{\n                        background: element.isSorted\n                          ? 'linear-gradient(to top, #00ff00, #00ff88)'\n                          : element.isSwapping\n                          ? 'linear-gradient(to top, #ff0066, #ff00ff)'\n                          : element.isComparing\n                          ? 'linear-gradient(to top, #ffff00, #ffaa00)'\n                          : `linear-gradient(to top, ${neonColor}, ${neonColor}dd)`,\n                      }}\n                    >\n                      {/* Glow effect overlay */}\n                      <motion.div\n                        className=\"absolute inset-0 rounded-t-lg\"\n                        animate={{\n                          opacity: element.isSwapping || element.isComparing ? [0.3, 0.7, 0.3] : 0.2,\n                        }}\n                        transition={{\n                          duration: 0.8,\n                          repeat: element.isSwapping || element.isComparing ? Infinity : 0,\n                        }}\n                        style={{\n                          background: `radial-gradient(circle at 50% 0%, rgba(255, 255, 255, 0.4), transparent 70%)`,\n                        }}\n                      />\n\n                      {/* Value label */}\n                      {arraySize[0] <= 30 && (\n                        <motion.div\n                          className=\"absolute -top-6 left-1/2 -translate-x-1/2 text-xs font-bold whitespace-nowrap\"\n                          initial={{ opacity: 0, y: 10 }}\n                          animate={{ \n                            opacity: 1, \n                            y: 0,\n                            color: element.isSorted\n                              ? '#00ff00'\n                              : element.isSwapping\n                              ? '#ff0066'\n                              : element.isComparing\n                              ? '#ffff00'\n                              : '#ffffff',\n                            textShadow: element.isSorted\n                              ? '0 0 10px rgba(0, 255, 0, 1)'\n                              : element.isSwapping\n                              ? '0 0 10px rgba(255, 0, 102, 1)'\n                              : element.isComparing\n                              ? '0 0 10px rgba(255, 255, 0, 1)'\n                              : `0 0 8px ${neonColor}`,\n                          }}\n                          transition={{ delay: 0.2 }}\n                        >\n                          {element.value}\n                        </motion.div>\n                      )}\n\n                      {/* Swap trail effect */}\n                      {element.isSwapping && (\n                        <motion.div\n                          className=\"absolute inset-0 rounded-t-lg\"\n                          initial={{ opacity: 0.8, scale: 1 }}\n                          animate={{ \n                            opacity: 0, \n                            scale: 1.5,\n                          }}\n                          transition={{ \n                            duration: 0.6,\n                            repeat: Infinity,\n                          }}\n                          style={{\n                            background: 'radial-gradient(circle, rgba(255, 0, 102, 0.6), transparent 70%)',\n                            filter: 'blur(8px)',\n                          }}\n                        />\n                      )}\n\n                      {/* Comparison pulse indicator */}\n                      {element.isComparing && (\n                        <motion.div\n                          className=\"absolute -top-2 left-1/2 -translate-x-1/2 w-3 h-3 rounded-full\"\n                          animate={{\n                            scale: [1, 1.5, 1],\n                            opacity: [1, 0.5, 1],\n                          }}\n                          transition={{\n                            duration: 0.6,\n                            repeat: Infinity,\n                          }}\n                          style={{\n                            backgroundColor: '#ffff00',\n                            boxShadow: '0 0 15px rgba(255, 255, 0, 1), 0 0 30px rgba(255, 255, 0, 0.6)',\n                          }}\n                        />\n                      )}\n\n                      {/* Sorted checkmark indicator */}\n                      {element.isSorted && arraySize[0] <= 40 && (\n                        <motion.div\n                          className=\"absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 text-white font-bold text-lg\"\n                          initial={{ scale: 0, rotate: -180 }}\n                          animate={{ scale: 1, rotate: 0 }}\n                          transition={{ type: 'spring', stiffness: 200, damping: 10 }}\n                          style={{\n                            textShadow: '0 0 10px rgba(0, 255, 0, 1)',\n                          }}\n                        >\n                          \u2713\n                        </motion.div>\n                      )}\n                    </motion.div>\n                  );\n                })}\n              </div>\n            </div>\n\n            <motion.div\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ delay: 0.3 }}\n              className=\"mt-6\"\n            >\n              <div className=\"bg-gray-900/50 backdrop-blur-lg border border-purple-500/30 rounded-xl p-4 shadow-lg shadow-purple-500/10\">\n                <div className=\"space-y-2\">\n                  <div className=\"flex items-center justify-between text-sm\">\n                    <span className=\"text-purple-300 font-medium\">Sorting Progress</span>\n                    <span className=\"text-cyan-300 font-mono\">\n                      {steps.length > 0 ? Math.round((currentStep / steps.length) * 100) : 0}%\n                    </span>\n                  </div>\n                  \n                  <div className=\"relative h-3 bg-gray-800/80 rounded-full overflow-hidden border border-purple-500/30\">\n                    <motion.div\n                      className=\"absolute inset-y-0 left-0 bg-gradient-to-r from-cyan-500 via-purple-500 to-pink-500 rounded-full\"\n                      initial={{ width: '0%' }}\n                      animate={{ \n                        width: steps.length > 0 ? `${(currentStep / steps.length) * 100}%` : '0%',\n                        boxShadow: [\n                          '0 0 20px rgba(6, 182, 212, 0.8)',\n                          '0 0 30px rgba(168, 85, 247, 0.8)',\n                          '0 0 20px rgba(6, 182, 212, 0.8)'\n                        ]\n                      }}\n                      transition={{ \n                        width: { duration: 0.3, ease: 'easeOut' },\n                        boxShadow: { duration: 2, repeat: Infinity }\n                      }}\n                    />\n                    \n                    <motion.div\n                      className=\"absolute inset-0 bg-gradient-to-r from-transparent via-white/30 to-transparent\"\n                      animate={{\n                        x: ['-100%', '200%']\n                      }}\n                      transition={{\n                        duration: 2,\n                        repeat: Infinity,\n                        ease: 'linear'\n                      }}\n                      style={{\n                        width: '50%'\n                      }}\n                    />\n                  </div>\n                  \n                  <div className=\"flex items-center justify-between text-xs text-gray-400\">\n                    <span>Step {currentStep} of {steps.length}</span>\n                    {currentStep >= steps.length && steps.length > 0 && (\n                      <motion.span\n                        initial={{ opacity: 0, scale: 0.8 }}\n                        animate={{ opacity: 1, scale: 1 }}\n                        className=\"text-green-400 font-semibold\"\n                      >\n                        \u2713 Complete\n                      </motion.span>\n                    )}\n                  </div>\n                </div>\n              </div>\n            </motion.div>\n          </div>\n        </div>\n\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ delay: 0.4, duration: 0.8 }}\n          className=\"bg-gray-900/50 backdrop-blur-lg border border-cyan-500/30 rounded-xl p-6 shadow-[0_0_30px_rgba(0,255,255,0.2)]\"\n        >\n          <div className=\"flex items-center gap-2 mb-4\">\n            <BarChart3 className=\"w-5 h-5 text-cyan-400\" />\n            <h3 className=\"text-lg font-semibold text-cyan-300 uppercase tracking-wider\">\n              Legend\n            </h3>\n          </div>\n          \n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n            <motion.div\n              className=\"flex items-center gap-3 p-4 bg-gray-800/50 rounded-lg border border-gray-700\"\n              whileHover={{ scale: 1.05, borderColor: 'rgba(156, 163, 175, 0.5)' }}\n              transition={{ duration: 0.2 }}\n            >\n              <motion.div\n                className=\"w-6 h-12 bg-gradient-to-t from-gray-500 to-gray-300 rounded\"\n                animate={{\n                  boxShadow: [\n                    '0 0 10px rgba(156, 163, 175, 0.3)',\n                    '0 0 20px rgba(156, 163, 175, 0.5)',\n                    '0 0 10px rgba(156, 163, 175, 0.3)'\n                  ]\n                }}\n                transition={{ duration: 2, repeat: Infinity }}\n              />\n              <div>\n                <div className=\"text-sm font-semibold text-white\">Default</div>\n                <div className=\"text-xs text-gray-400\">Unsorted</div>\n              </div>\n            </motion.div>\n\n            <motion.div\n              className=\"flex items-center gap-3 p-4 bg-yellow-500/10 rounded-lg border border-yellow-500/30\"\n              whileHover={{ scale: 1.05, borderColor: 'rgba(234, 179, 8, 0.5)' }}\n              transition={{ duration: 0.2 }}\n            >\n              <motion.div\n                className=\"w-6 h-12 bg-gradient-to-t from-yellow-500 to-yellow-300 rounded\"\n                animate={{\n                  boxShadow: [\n                    '0 0 15px rgba(234, 179, 8, 0.5)',\n                    '0 0 30px rgba(234, 179, 8, 0.8)',\n                    '0 0 15px rgba(234, 179, 8, 0.5)'\n                  ]\n                }}\n                transition={{ duration: 1.5, repeat: Infinity }}\n              />\n              <div>\n                <div className=\"text-sm font-semibold text-yellow-300\">Comparing</div>\n                <div className=\"text-xs text-yellow-400/70\">Active check</div>\n              </div>\n            </motion.div>\n\n            <motion.div\n              className=\"flex items-center gap-3 p-4 bg-pink-500/10 rounded-lg border border-pink-500/30\"\n              whileHover={{ scale: 1.05, borderColor: 'rgba(236, 72, 153, 0.5)' }}\n              transition={{ duration: 0.2 }}\n            >\n              <motion.div\n                className=\"w-6 h-12 bg-gradient-to-t from-pink-500 to-pink-300 rounded\"\n                animate={{\n                  boxShadow: [\n                    '0 0 15px rgba(236, 72, 153, 0.5)',\n                    '0 0 30px rgba(236, 72, 153, 0.8)',\n                    '0 0 15px rgba(236, 72, 153, 0.5)'\n                  ],\n                  x: [-2, 2, -2]\n                }}\n                transition={{ duration: 1, repeat: Infinity }}\n              />\n              <div>\n                <div className=\"text-sm font-semibold text-pink-300\">Swapping</div>\n                <div className=\"text-xs text-pink-400/70\">Exchanging</div>\n              </div>\n            </motion.div>\n\n            <motion.div\n              className=\"flex items-center gap-3 p-4 bg-green-500/10 rounded-lg border border-green-500/30\"\n              whileHover={{ scale: 1.05, borderColor: 'rgba(34, 197, 94, 0.5)' }}\n              transition={{ duration: 0.2 }}\n            >\n              <motion.div\n                className=\"w-6 h-12 bg-gradient-to-t from-green-500 to-green-300 rounded\"\n                animate={{\n                  boxShadow: [\n                    '0 0 15px rgba(34, 197, 94, 0.5)',\n                    '0 0 30px rgba(34, 197, 94, 0.8)',\n                    '0 0 15px rgba(34, 197, 94, 0.5)'\n                  ]\n                }}\n                transition={{ duration: 2, repeat: Infinity }}\n              />\n              <div>\n                <div className=\"text-sm font-semibold text-green-300\">Sorted</div>\n                <div className=\"text-xs text-green-400/70\">In place</div>\n              </div>\n            </motion.div>\n          </div>\n        </motion.div>\n      </div>\n    </div>\n  );\n}",
    "error": null,
    "elapsed_time": 109.40704798698425,
    "success": true
  }
}