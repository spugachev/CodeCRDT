{
  "prompt_id": "dashboard",
  "prompt_name": "Analytics Dashboard",
  "mode": "parallel",
  "run_number": 4,
  "timestamp": "2025-10-13T19:22:34.211033",
  "response_time": 109.39265632629395,
  "total_tokens": null,
  "response_content": "import { useState, useCallback } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Moon, Sun, RefreshCw } from 'lucide-react';\nimport { CheckCircle, AlertCircle, UserPlus, ShoppingBag, DollarSign, Settings } from 'lucide-react';\nimport { ArrowUpDown, ChevronLeft, ChevronRight } from 'lucide-react';\nimport { Badge } from '@/components/ui/badge';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\n\nimport { motion } from 'framer-motion';\n\n\n\n\nimport { PieChart, Pie, Cell, ResponsiveContainer, Legend, Tooltip } from 'recharts';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\n\nimport { TrendingUp, TrendingDown, DollarSign, Users, ShoppingCart, Target } from 'lucide-react';\n\nimport { motion } from 'framer-motion';\nimport { Progress } from '@/components/ui/progress';\nimport { motion } from 'framer-motion';\n\n\ninterface MetricData {\n  id: string;\n  label: string;\n  value: number;\n  change: number;\n  trend: 'up' | 'down';\n}\n\ninterface ChartDataPoint {\n  date: string;\n  revenue: number;\n  users: number;\n  orders: number;\n}\n\ninterface TableRow {\n  id: string;\n  product: string;\n  sales: number;\n  revenue: number;\n  status: 'active' | 'pending' | 'inactive';\n}\ninterface GoalData {\n  id: string;\n  label: string;\n  current: number;\n  target: number;\n  icon: React.ReactNode;\n  color: string;\n}\n\nconst mockMetrics: MetricData[] = [\n  { id: '1', label: 'Total Revenue', value: 45231, change: 12.5, trend: 'up' },\n  { id: '2', label: 'Active Users', value: 2350, change: 8.2, trend: 'up' },\n  { id: '3', label: 'Total Orders', value: 1543, change: -3.1, trend: 'down' },\n  { id: '4', label: 'Conversion Rate', value: 3.24, change: 5.7, trend: 'up' }\n];\n\nconst mockChartData: ChartDataPoint[] = [\n  { date: '2024-01-01', revenue: 12000, users: 450, orders: 230 },\n  { date: '2024-01-02', revenue: 15000, users: 520, orders: 280 },\n  { date: '2024-01-03', revenue: 13500, users: 490, orders: 250 },\n  { date: '2024-01-04', revenue: 18000, users: 610, orders: 320 },\n  { date: '2024-01-05', revenue: 16500, users: 580, orders: 295 },\n  { date: '2024-01-06', revenue: 20000, users: 680, orders: 350 },\n  { date: '2024-01-07', revenue: 22000, users: 720, orders: 380 }\n];\n\nconst mockTableData: TableRow[] = [\n  { id: '1', product: 'Premium Plan', sales: 234, revenue: 23400, status: 'active' },\n  { id: '2', product: 'Basic Plan', sales: 567, revenue: 11340, status: 'active' },\n  { id: '3', product: 'Enterprise Plan', sales: 89, revenue: 17800, status: 'active' },\n  { id: '4', product: 'Starter Plan', sales: 432, revenue: 4320, status: 'pending' },\n  { id: '5', product: 'Pro Plan', sales: 156, revenue: 15600, status: 'active' }\n];\ninterface ActivityItem {\n  id: string;\n  type: 'success' | 'warning' | 'info' | 'purchase';\n  message: string;\n  timestamp: string;\n  icon: 'check' | 'alert' | 'user' | 'shopping' | 'dollar' | 'settings';\n}\n\nconst mockActivityData: ActivityItem[] = [\n  { id: '1', type: 'success', message: 'New order completed', timestamp: '2 minutes ago', icon: 'check' },\n  { id: '2', type: 'info', message: 'New user registered', timestamp: '5 minutes ago', icon: 'user' },\n  { id: '3', type: 'purchase', message: 'Premium plan purchased', timestamp: '12 minutes ago', icon: 'shopping' },\n  { id: '4', type: 'success', message: 'Payment received', timestamp: '18 minutes ago', icon: 'dollar' },\n  { id: '5', type: 'warning', message: 'Low inventory alert', timestamp: '25 minutes ago', icon: 'alert' },\n  { id: '6', type: 'info', message: 'Settings updated', timestamp: '32 minutes ago', icon: 'settings' },\n  { id: '7', type: 'success', message: 'Order #1234 shipped', timestamp: '45 minutes ago', icon: 'check' },\n  { id: '8', type: 'purchase', message: 'Enterprise plan upgraded', timestamp: '1 hour ago', icon: 'shopping' },\n  { id: '9', type: 'info', message: '5 new users registered', timestamp: '1 hour ago', icon: 'user' },\n  { id: '10', type: 'success', message: 'Monthly goal achieved', timestamp: '2 hours ago', icon: 'check' }\n];\nconst mockGoals: GoalData[] = [\n  { \n    id: '1', \n    label: 'Revenue Target', \n    current: 45231, \n    target: 50000, \n    icon: <DollarSign className=\"h-4 w-4\" />,\n    color: 'bg-green-500'\n  },\n  { \n    id: '2', \n    label: 'User Acquisition', \n    current: 2350, \n    target: 3000, \n    icon: <Users className=\"h-4 w-4\" />,\n    color: 'bg-blue-500'\n  },\n  { \n    id: '3', \n    label: 'Order Volume', \n    current: 1543, \n    target: 2000, \n    icon: <ShoppingCart className=\"h-4 w-4\" />,\n    color: 'bg-purple-500'\n  },\n  { \n    id: '4', \n    label: 'Conversion Goal', \n    current: 324, \n    target: 400, \n    icon: <Target className=\"h-4 w-4\" />,\n    color: 'bg-orange-500'\n  }\n];\n\nconst mockQuickStats = [\n  { label: 'Today', value: 3200, color: 'bg-blue-500' },\n  { label: 'Yesterday', value: 2800, color: 'bg-purple-500' },\n  { label: 'This Week', value: 18500, color: 'bg-green-500' },\n  { label: 'Last Week', value: 16200, color: 'bg-orange-500' }\n];\n\nconst RevenueChart = ({ data, isDarkMode }: { data: ChartDataPoint[], isDarkMode: boolean }) => {\n  const [hoveredPoint, setHoveredPoint] = useState<number | null>(null);\n\n  const maxRevenue = Math.max(...data.map(d => d.revenue));\n  const minRevenue = Math.min(...data.map(d => d.revenue));\n  const revenueRange = maxRevenue - minRevenue;\n\n  const getYPosition = (value: number) => {\n    const padding = 20;\n    const chartHeight = 200;\n    const normalizedValue = (value - minRevenue) / revenueRange;\n    return chartHeight - (normalizedValue * (chartHeight - padding * 2)) - padding;\n  };\n\n  const chartWidth = 100;\n  const pointSpacing = chartWidth / (data.length - 1);\n\n  const pathData = data.map((point, index) => {\n    const x = index * pointSpacing;\n    const y = getYPosition(point.revenue);\n    return `${index === 0 ? 'M' : 'L'} ${x} ${y}`;\n  }).join(' ');\n\n  const areaPathData = `${pathData} L ${chartWidth} 200 L 0 200 Z`;\n\n  return (\n    <div className=\"relative w-full h-[250px]\">\n      <svg\n        viewBox={`0 0 ${chartWidth} 200`}\n        className=\"w-full h-full\"\n        preserveAspectRatio=\"none\"\n      >\n        <defs>\n          <linearGradient id=\"revenueGradient\" x1=\"0%\" y1=\"0%\" x2=\"0%\" y2=\"100%\">\n            <stop offset=\"0%\" stopColor={isDarkMode ? \"#3b82f6\" : \"#2563eb\"} stopOpacity=\"0.3\" />\n            <stop offset=\"100%\" stopColor={isDarkMode ? \"#3b82f6\" : \"#2563eb\"} stopOpacity=\"0.05\" />\n          </linearGradient>\n        </defs>\n\n        <path\n          d={areaPathData}\n          fill=\"url(#revenueGradient)\"\n          className=\"transition-all duration-300\"\n        />\n\n        <path\n          d={pathData}\n          fill=\"none\"\n          stroke={isDarkMode ? \"#3b82f6\" : \"#2563eb\"}\n          strokeWidth=\"0.5\"\n          className=\"transition-all duration-300\"\n        />\n\n        {data.map((point, index) => {\n          const x = index * pointSpacing;\n          const y = getYPosition(point.revenue);\n          const isHovered = hoveredPoint === index;\n\n          return (\n            <g key={index}>\n              <circle\n                cx={x}\n                cy={y}\n                r={isHovered ? \"1.5\" : \"1\"}\n                fill={isDarkMode ? \"#3b82f6\" : \"#2563eb\"}\n                className=\"transition-all duration-200 cursor-pointer\"\n                onMouseEnter={() => setHoveredPoint(index)}\n                onMouseLeave={() => setHoveredPoint(null)}\n              />\n              {isHovered && (\n                <circle\n                  cx={x}\n                  cy={y}\n                  r=\"2.5\"\n                  fill=\"none\"\n                  stroke={isDarkMode ? \"#3b82f6\" : \"#2563eb\"}\n                  strokeWidth=\"0.3\"\n                  opacity=\"0.5\"\n                />\n              )}\n            </g>\n          );\n        })}\n      </svg>\n\n      <div className=\"absolute bottom-0 left-0 right-0 flex justify-between px-2 text-xs\">\n        {data.map((point, index) => (\n          <span\n            key={index}\n            className={`${isDarkMode ? 'text-gray-400' : 'text-gray-600'} ${\n              index % 2 === 1 ? 'hidden sm:inline' : ''\n            }`}\n          >\n            {new Date(point.date).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n          </span>\n        ))}\n      </div>\n\n      {hoveredPoint !== null && (\n        <div\n          className={`absolute top-4 left-1/2 transform -translate-x-1/2 px-3 py-2 rounded-lg shadow-lg ${\n            isDarkMode ? 'bg-gray-700 border border-gray-600' : 'bg-white border border-gray-200'\n          } transition-all duration-200 z-10`}\n        >\n          <div className={`text-xs ${isDarkMode ? 'text-gray-300' : 'text-gray-600'} mb-1`}>\n            {new Date(data[hoveredPoint].date).toLocaleDateString('en-US', { \n              month: 'short', \n              day: 'numeric',\n              year: 'numeric'\n            })}\n          </div>\n          <div className={`text-lg font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'} flex items-center gap-1`}>\n            ${data[hoveredPoint].revenue.toLocaleString()}\n            <TrendingUp className=\"h-4 w-4 text-green-500\" />\n          </div>\n          <div className={`text-xs ${isDarkMode ? 'text-gray-400' : 'text-gray-500'} mt-1`}>\n            {data[hoveredPoint].users} users \u2022 {data[hoveredPoint].orders} orders\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nconst getMetricIcon = (label: string) => {\n  switch (label) {\n    case 'Total Revenue':\n      return DollarSign;\n    case 'Active Users':\n      return Users;\n    case 'Total Orders':\n      return ShoppingCart;\n    case 'Conversion Rate':\n      return Target;\n    default:\n      return DollarSign;\n  }\n};\n\nconst formatMetricValue = (label: string, value: number) => {\n  if (label === 'Total Revenue') {\n    return `$${value.toLocaleString()}`;\n  } else if (label === 'Conversion Rate') {\n    return `${value}%`;\n  }\n  return value.toLocaleString();\n};\nconst UserAreaChart = ({ data, isDarkMode }: { data: ChartDataPoint[], isDarkMode: boolean }) => {\n  const maxUsers = Math.max(...data.map(d => d.users));\n  const minUsers = Math.min(...data.map(d => d.users));\n  const padding = 40;\n  const width = 600;\n  const height = 300;\n  const chartWidth = width - padding * 2;\n  const chartHeight = height - padding * 2;\n\n  const [hoveredIndex, setHoveredIndex] = useState<number | null>(null);\n\n  const points = data.map((point, index) => {\n    const x = padding + (index / (data.length - 1)) * chartWidth;\n    const y = padding + chartHeight - ((point.users - minUsers) / (maxUsers - minUsers)) * chartHeight;\n    return { x, y, ...point };\n  });\n\n  const pathD = points.reduce((acc, point, index) => {\n    if (index === 0) return `M ${point.x} ${point.y}`;\n    return `${acc} L ${point.x} ${point.y}`;\n  }, '');\n\n  const areaD = `${pathD} L ${points[points.length - 1].x} ${padding + chartHeight} L ${points[0].x} ${padding + chartHeight} Z`;\n\n  const gradientId = 'userGradient';\n\n  return (\n    <div className=\"relative w-full\" style={{ height: '300px' }}>\n      <svg\n        viewBox={`0 0 ${width} ${height}`}\n        className=\"w-full h-full\"\n        style={{ overflow: 'visible' }}\n      >\n        <defs>\n          <linearGradient id={gradientId} x1=\"0%\" y1=\"0%\" x2=\"0%\" y2=\"100%\">\n            <stop offset=\"0%\" stopColor={isDarkMode ? '#3b82f6' : '#60a5fa'} stopOpacity=\"0.8\" />\n            <stop offset=\"100%\" stopColor={isDarkMode ? '#3b82f6' : '#60a5fa'} stopOpacity=\"0.1\" />\n          </linearGradient>\n        </defs>\n\n        <motion.path\n          d={areaD}\n          fill={`url(#${gradientId})`}\n          initial={{ opacity: 0 }}\n          animate={{ opacity: 1 }}\n          transition={{ duration: 0.8, ease: 'easeOut' }}\n        />\n\n        <motion.path\n          d={pathD}\n          fill=\"none\"\n          stroke={isDarkMode ? '#3b82f6' : '#2563eb'}\n          strokeWidth=\"3\"\n          strokeLinecap=\"round\"\n          strokeLinejoin=\"round\"\n          initial={{ pathLength: 0 }}\n          animate={{ pathLength: 1 }}\n          transition={{ duration: 1.5, ease: 'easeInOut' }}\n        />\n\n        {points.map((point, index) => (\n          <g key={index}>\n            <motion.circle\n              cx={point.x}\n              cy={point.y}\n              r={hoveredIndex === index ? 6 : 4}\n              fill={isDarkMode ? '#3b82f6' : '#2563eb'}\n              stroke={isDarkMode ? '#1e293b' : '#ffffff'}\n              strokeWidth=\"2\"\n              initial={{ scale: 0 }}\n              animate={{ scale: 1 }}\n              transition={{ duration: 0.3, delay: index * 0.1 }}\n              onMouseEnter={() => setHoveredIndex(index)}\n              onMouseLeave={() => setHoveredIndex(null)}\n              style={{ cursor: 'pointer' }}\n            />\n            {hoveredIndex === index && (\n              <g>\n                <rect\n                  x={point.x - 50}\n                  y={point.y - 50}\n                  width=\"100\"\n                  height=\"40\"\n                  rx=\"6\"\n                  fill={isDarkMode ? '#1e293b' : '#ffffff'}\n                  stroke={isDarkMode ? '#475569' : '#e5e7eb'}\n                  strokeWidth=\"1\"\n                  filter=\"drop-shadow(0 4px 6px rgba(0,0,0,0.1))\"\n                />\n                <text\n                  x={point.x}\n                  y={point.y - 35}\n                  textAnchor=\"middle\"\n                  className={`text-xs font-semibold ${isDarkMode ? 'fill-gray-300' : 'fill-gray-600'}`}\n                >\n                  {new Date(point.date).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n                </text>\n                <text\n                  x={point.x}\n                  y={point.y - 20}\n                  textAnchor=\"middle\"\n                  className={`text-sm font-bold ${isDarkMode ? 'fill-blue-400' : 'fill-blue-600'}`}\n                >\n                  {point.users.toLocaleString()} users\n                </text>\n              </g>\n            )}\n          </g>\n        ))}\n\n        <line\n          x1={padding}\n          y1={padding + chartHeight}\n          x2={width - padding}\n          y2={padding + chartHeight}\n          stroke={isDarkMode ? '#374151' : '#e5e7eb'}\n          strokeWidth=\"1\"\n        />\n        <line\n          x1={padding}\n          y1={padding}\n          x2={padding}\n          y2={padding + chartHeight}\n          stroke={isDarkMode ? '#374151' : '#e5e7eb'}\n          strokeWidth=\"1\"\n        />\n      </svg>\n    </div>\n  );\n};\n\nexport default function AnalyticsDashboard() {\n  const [sortColumn, setSortColumn] = useState<keyof TableRow>('revenue');\n  const [sortDirection, setSortDirection] = useState<'asc' | 'desc'>('desc');\n  const [currentPage, setCurrentPage] = useState(1);\n  const itemsPerPage = 5;\n  const [isDarkMode, setIsDarkMode] = useState(false);\n  const [metrics, setMetrics] = useState<MetricData[]>(mockMetrics);\n  const [chartData, setChartData] = useState<ChartDataPoint[]>(mockChartData);\n  const [tableData, setTableData] = useState<TableRow[]>(mockTableData);\n  const [isRefreshing, setIsRefreshing] = useState(false);\n  const [activityData] = useState<ActivityItem[]>(mockActivityData);\n\n  const getActivityIcon = (icon: ActivityItem['icon']) => {\n    const iconClass = \"h-4 w-4\";\n    switch (icon) {\n      case 'check':\n        return <CheckCircle className={iconClass} />;\n      case 'alert':\n        return <AlertCircle className={iconClass} />;\n      case 'user':\n        return <UserPlus className={iconClass} />;\n      case 'shopping':\n        return <ShoppingBag className={iconClass} />;\n      case 'dollar':\n        return <DollarSign className={iconClass} />;\n      case 'settings':\n        return <Settings className={iconClass} />;\n      default:\n        return <CheckCircle className={iconClass} />;\n    }\n  };\n\n  const getActivityColor = (type: ActivityItem['type']) => {\n    switch (type) {\n      case 'success':\n        return isDarkMode ? 'bg-green-900/30 text-green-400' : 'bg-green-100 text-green-700';\n      case 'warning':\n        return isDarkMode ? 'bg-yellow-900/30 text-yellow-400' : 'bg-yellow-100 text-yellow-700';\n      case 'info':\n        return isDarkMode ? 'bg-blue-900/30 text-blue-400' : 'bg-blue-100 text-blue-700';\n      case 'purchase':\n        return isDarkMode ? 'bg-purple-900/30 text-purple-400' : 'bg-purple-100 text-purple-700';\n      default:\n        return isDarkMode ? 'bg-gray-700 text-gray-300' : 'bg-gray-100 text-gray-700';\n    }\n  };\n\n  const toggleDarkMode = useCallback(() => {\n    setIsDarkMode(prev => !prev);\n  }, []);\n\n  const handleSort = useCallback((column: keyof TableRow) => {\n    if (sortColumn === column) {\n      setSortDirection(prev => prev === 'asc' ? 'desc' : 'asc');\n    } else {\n      setSortColumn(column);\n      setSortDirection('desc');\n    }\n  }, [sortColumn]);\n\n  const sortedTableData = [...tableData].sort((a, b) => {\n    const aValue = a[sortColumn];\n    const bValue = b[sortColumn];\n    \n    if (typeof aValue === 'number' && typeof bValue === 'number') {\n      return sortDirection === 'asc' ? aValue - bValue : bValue - aValue;\n    }\n    \n    if (typeof aValue === 'string' && typeof bValue === 'string') {\n      return sortDirection === 'asc' \n        ? aValue.localeCompare(bValue) \n        : bValue.localeCompare(aValue);\n    }\n    \n    return 0;\n  });\n\n  const totalPages = Math.ceil(sortedTableData.length / itemsPerPage);\n  const paginatedData = sortedTableData.slice(\n    (currentPage - 1) * itemsPerPage,\n    currentPage * itemsPerPage\n  );\n\n  const getStatusColor = (status: TableRow['status']) => {\n    switch (status) {\n      case 'active':\n        return 'bg-green-500';\n      case 'pending':\n        return 'bg-yellow-500';\n      case 'inactive':\n        return 'bg-gray-500';\n      default:\n        return 'bg-gray-500';\n    }\n  };\n\n  const pieChartData = tableData.map(item => ({\n    name: item.product,\n    value: item.sales,\n    revenue: item.revenue\n  }));\n\n  const COLORS = ['#3b82f6', '#8b5cf6', '#ec4899', '#f59e0b', '#10b981'];\n\n  const handleRefresh = useCallback(() => {\n\n    setIsRefreshing(true);\n    \n    setTimeout(() => {\n      // Generate updated mock metrics with random variations\n      const updatedMetrics = mockMetrics.map(metric => ({\n        ...metric,\n        value: metric.value + Math.floor(Math.random() * 200 - 100),\n        change: parseFloat((Math.random() * 20 - 5).toFixed(1)),\n        trend: Math.random() > 0.5 ? 'up' as const : 'down' as const\n      }));\n\n      // Generate updated chart data with random variations\n      const updatedChartData = mockChartData.map(point => ({\n        ...point,\n        revenue: point.revenue + Math.floor(Math.random() * 4000 - 2000),\n        users: point.users + Math.floor(Math.random() * 100 - 50),\n        orders: point.orders + Math.floor(Math.random() * 50 - 25)\n      }));\n\n      // Generate updated table data with random variations\n      const updatedTableData = mockTableData.map(row => ({\n        ...row,\n        sales: row.sales + Math.floor(Math.random() * 40 - 20),\n        revenue: row.revenue + Math.floor(Math.random() * 2000 - 1000)\n      }));\n\n      setMetrics(updatedMetrics);\n      setChartData(updatedChartData);\n      setTableData(updatedTableData);\n      setIsRefreshing(false);\n    }, 1500);\n  }, []);\n\n  return (\n    <div className={`min-h-screen transition-colors duration-300 ${isDarkMode ? 'dark bg-gray-900' : 'bg-gray-50'}`}>\n      <div className=\"container mx-auto p-4 md:p-6 lg:p-8\">\n        <div className=\"flex flex-col md:flex-row justify-between items-start md:items-center gap-4 mb-8\">\n          <div>\n            <h1 className={`text-3xl md:text-4xl font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n              Analytics Dashboard\n            </h1>\n            <p className={`mt-2 ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n              Real-time insights and performance metrics\n            </p>\n          </div>\n\n          <div className=\"flex gap-2\">\n            <Button\n              variant=\"outline\"\n              size=\"icon\"\n              onClick={toggleDarkMode}\n              className={isDarkMode ? 'border-gray-700' : ''}\n            >\n              {isDarkMode ? <Sun className=\"h-5 w-5\" /> : <Moon className=\"h-5 w-5\" />}\n            </Button>\n            <Button\n              variant=\"outline\"\n              onClick={handleRefresh}\n              disabled={isRefreshing}\n              className={isDarkMode ? 'border-gray-700' : ''}\n            >\n              <RefreshCw className={`h-4 w-4 mr-2 ${isRefreshing ? 'animate-spin' : ''}`} />\n              Refresh\n            </Button>\n          </div>\n        </div>\n\n        <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 md:gap-6 mb-8\">\n          {metrics.map((metric, index) => {\n            const IconComponent = getMetricIcon(metric.label);\n            const isPositive = metric.trend === 'up';\n            \n            return (\n              <motion.div\n                key={metric.id}\n                initial={{ opacity: 0, y: 20 }}\n                animate={{ opacity: 1, y: 0 }}\n                transition={{ duration: 0.4, delay: index * 0.1 }}\n              >\n                <Card className={`${isDarkMode ? 'bg-gray-800 border-gray-700' : 'bg-white'} hover:shadow-lg transition-shadow duration-300`}>\n                  <CardHeader className=\"flex flex-row items-center justify-between pb-2\">\n                    <CardTitle className={`text-sm font-medium ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                      {metric.label}\n                    </CardTitle>\n                    <div className={`p-2 rounded-lg ${isDarkMode ? 'bg-gray-700' : 'bg-gray-100'}`}>\n                      <IconComponent className={`h-4 w-4 ${isDarkMode ? 'text-gray-300' : 'text-gray-600'}`} />\n                    </div>\n                  </CardHeader>\n                  <CardContent>\n                    <div className={`text-2xl md:text-3xl font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                      {formatMetricValue(metric.label, metric.value)}\n                    </div>\n                    <div className=\"flex items-center mt-2\">\n                      {isPositive ? (\n                        <TrendingUp className=\"h-4 w-4 text-green-500 mr-1\" />\n                      ) : (\n                        <TrendingDown className=\"h-4 w-4 text-red-500 mr-1\" />\n                      )}\n                      <span className={`text-sm font-medium ${isPositive ? 'text-green-500' : 'text-red-500'}`}>\n                        {isPositive ? '+' : ''}{metric.change}%\n                      </span>\n                      <span className={`text-sm ml-2 ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                        vs last period\n                      </span>\n                    </div>\n                  </CardContent>\n                </Card>\n              </motion.div>\n            );\n          })}</parameter>\n</invoke>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-4 md:gap-6 mb-8\">\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Revenue Overview</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Daily revenue trends\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <RevenueChart data={chartData} isDarkMode={isDarkMode} />\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>User Growth</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Active users over time\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <UserAreaChart data={chartData} isDarkMode={isDarkMode} />\n            </CardContent>\n          </Card>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-4 md:gap-6 mb-8\">\n          <Card className={`lg:col-span-2 ${isDarkMode ? 'bg-gray-800 border-gray-700' : ''}`}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Performance Metrics</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Combined view of key metrics\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"h-[300px] w-full\">\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <LineChart data={chartData} margin={{ top: 5, right: 30, left: 20, bottom: 5 }}>\n                    <CartesianGrid strokeDasharray=\"3 3\" stroke={isDarkMode ? '#374151' : '#e5e7eb'} />\n                    <XAxis \n                      dataKey=\"date\" \n                      stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                      tick={{ fill: isDarkMode ? '#9ca3af' : '#6b7280' }}\n                      tickFormatter={(value) => new Date(value).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n                    />\n                    <YAxis \n                      stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                      tick={{ fill: isDarkMode ? '#9ca3af' : '#6b7280' }}\n                    />\n                    <Tooltip \n                      contentStyle={{\n                        backgroundColor: isDarkMode ? '#1f2937' : '#ffffff',\n                        border: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\n                        borderRadius: '6px',\n                        color: isDarkMode ? '#f3f4f6' : '#111827'\n                      }}\n                      labelFormatter={(value) => new Date(value).toLocaleDateString('en-US', { month: 'long', day: 'numeric', year: 'numeric' })}\n                    />\n                    <Legend \n                      wrapperStyle={{ color: isDarkMode ? '#f3f4f6' : '#111827' }}\n                    />\n                    <Line \n                      type=\"monotone\" \n                      dataKey=\"revenue\" \n                      stroke=\"#3b82f6\" \n                      strokeWidth={2}\n                      dot={{ fill: '#3b82f6', r: 4 }}\n                      activeDot={{ r: 6 }}\n                      name=\"Revenue ($)\"\n                    />\n                    <Line \n                      type=\"monotone\" \n                      dataKey=\"users\" \n                      stroke=\"#10b981\" \n                      strokeWidth={2}\n                      dot={{ fill: '#10b981', r: 4 }}\n                      activeDot={{ r: 6 }}\n                      name=\"Users\"\n                    />\n                    <Line \n                      type=\"monotone\" \n                      dataKey=\"orders\" \n                      stroke=\"#f59e0b\" \n                      strokeWidth={2}\n                      dot={{ fill: '#f59e0b', r: 4 }}\n                      activeDot={{ r: 6 }}\n                      name=\"Orders\"\n                    />\n                  </LineChart>\n                </ResponsiveContainer>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Distribution</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Sales by category\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"h-[300px]\">\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <PieChart>\n                    <Pie\n                      data={pieChartData}\n                      cx=\"50%\"\n                      cy=\"50%\"\n                      labelLine={false}\n                      label={({ name, percent }) => `${name}: ${(percent * 100).toFixed(0)}%`}\n                      outerRadius={80}\n                      fill=\"#8884d8\"\n                      dataKey=\"value\"\n                      animationBegin={0}\n                      animationDuration={800}\n                    >\n                      {pieChartData.map((entry, index) => (\n                        <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\n                      ))}\n                    </Pie>\n                    <Tooltip\n                      contentStyle={{\n                        backgroundColor: isDarkMode ? '#1f2937' : '#ffffff',\n                        border: isDarkMode ? '1px solid #374151' : '1px solid #e5e7eb',\n                        borderRadius: '6px',\n                        color: isDarkMode ? '#ffffff' : '#000000'\n                      }}\n                      formatter={(value: number, name: string, props: any) => [\n                        `${value} sales ($${props.payload.revenue.toLocaleString()})`,\n                        props.payload.name\n                      ]}\n                    />\n                    <Legend\n                      wrapperStyle={{\n                        color: isDarkMode ? '#9ca3af' : '#4b5563'\n                      }}\n                    />\n                  </PieChart>\n                </ResponsiveContainer>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n          <CardHeader>\n            <CardTitle className={isDarkMode ? 'text-white' : ''}>Top Products</CardTitle>\n            <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n              Best performing products by revenue\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              <div className=\"rounded-md border\">\n                <Table>\n                  <TableHeader>\n                    <TableRow className={isDarkMode ? 'border-gray-700' : ''}>\n                      <TableHead className={isDarkMode ? 'text-gray-300' : ''}>\n                        <Button\n                          variant=\"ghost\"\n                          onClick={() => handleSort('product')}\n                          className=\"flex items-center gap-1 hover:bg-transparent p-0\"\n                        >\n                          Product\n                          <ArrowUpDown className=\"h-4 w-4\" />\n                        </Button>\n                      </TableHead>\n                      <TableHead className={isDarkMode ? 'text-gray-300' : ''}>\n                        <Button\n                          variant=\"ghost\"\n                          onClick={() => handleSort('sales')}\n                          className=\"flex items-center gap-1 hover:bg-transparent p-0\"\n                        >\n                          Sales\n                          <ArrowUpDown className=\"h-4 w-4\" />\n                        </Button>\n                      </TableHead>\n                      <TableHead className={isDarkMode ? 'text-gray-300' : ''}>\n                        <Button\n                          variant=\"ghost\"\n                          onClick={() => handleSort('revenue')}\n                          className=\"flex items-center gap-1 hover:bg-transparent p-0\"\n                        >\n                          Revenue\n                          <ArrowUpDown className=\"h-4 w-4\" />\n                        </Button>\n                      </TableHead>\n                      <TableHead className={isDarkMode ? 'text-gray-300' : ''}>\n                        <Button\n                          variant=\"ghost\"\n                          onClick={() => handleSort('status')}\n                          className=\"flex items-center gap-1 hover:bg-transparent p-0\"\n                        >\n                          Status\n                          <ArrowUpDown className=\"h-4 w-4\" />\n                        </Button>\n                      </TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {paginatedData.map((row) => (\n                      <TableRow \n                        key={row.id}\n                        className={isDarkMode ? 'border-gray-700 hover:bg-gray-700/50' : 'hover:bg-gray-50'}\n                      >\n                        <TableCell className={`font-medium ${isDarkMode ? 'text-white' : ''}`}>\n                          {row.product}\n                        </TableCell>\n                        <TableCell className={isDarkMode ? 'text-gray-300' : ''}>\n                          {row.sales.toLocaleString()}\n                        </TableCell>\n                        <TableCell className={isDarkMode ? 'text-gray-300' : ''}>\n                          ${row.revenue.toLocaleString()}\n                        </TableCell>\n                        <TableCell>\n                          <Badge \n                            variant={row.status === 'active' ? 'default' : 'secondary'}\n                            className={`${getStatusColor(row.status)} text-white capitalize`}\n                          >\n                            {row.status}\n                          </Badge>\n                        </TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              </div>\n\n              <div className=\"flex items-center justify-between\">\n                <p className={`text-sm ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                  Showing {((currentPage - 1) * itemsPerPage) + 1} to {Math.min(currentPage * itemsPerPage, sortedTableData.length)} of {sortedTableData.length} products\n                </p>\n                <div className=\"flex items-center gap-2\">\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => setCurrentPage(prev => Math.max(1, prev - 1))}\n                    disabled={currentPage === 1}\n                    className={isDarkMode ? 'border-gray-700' : ''}\n                  >\n                    <ChevronLeft className=\"h-4 w-4\" />\n                    Previous\n                  </Button>\n                  <span className={`text-sm ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>\n                    Page {currentPage} of {totalPages}\n                  </span>\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => setCurrentPage(prev => Math.min(totalPages, prev + 1))}\n                    disabled={currentPage === totalPages}\n                    className={isDarkMode ? 'border-gray-700' : ''}\n                  >\n                    Next\n                    <ChevronRight className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 md:gap-6 mt-8\">\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Recent Activity</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"max-h-[400px] overflow-y-auto space-y-3 pr-2 scrollbar-thin\">\n                {activityData.map((activity) => (\n                  <div\n                    key={activity.id}\n                    className={`flex items-start gap-3 p-3 rounded-lg transition-all duration-200 hover:scale-[1.02] ${\n                      isDarkMode ? 'hover:bg-gray-700/50' : 'hover:bg-gray-50'\n                    }`}\n                  >\n                    <div className={`p-2 rounded-full ${getActivityColor(activity.type)}`}>\n                      {getActivityIcon(activity.icon)}\n                    </div>\n                    <div className=\"flex-1 min-w-0\">\n                      <p className={`text-sm font-medium ${isDarkMode ? 'text-gray-200' : 'text-gray-900'}`}>\n                        {activity.message}\n                      </p>\n                      <p className={`text-xs mt-1 ${isDarkMode ? 'text-gray-500' : 'text-gray-500'}`}>\n                        {activity.timestamp}\n                      </p>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Quick Stats</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {mockQuickStats.map((stat, index) => {\n                  const maxValue = Math.max(...mockQuickStats.map(s => s.value));\n                  const percentage = (stat.value / maxValue) * 100;\n                  \n                  return (\n                    <motion.div\n                      key={stat.label}\n                      initial={{ opacity: 0, x: -20 }}\n                      animate={{ opacity: 1, x: 0 }}\n                      transition={{ delay: index * 0.1 }}\n                      className=\"space-y-2\"\n                    >\n                      <div className=\"flex justify-between items-center\">\n                        <span className={`text-sm font-medium ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>\n                          {stat.label}\n                        </span>\n                        <span className={`text-sm font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                          ${stat.value.toLocaleString()}\n                        </span>\n                      </div>\n                      <div className={`h-8 rounded-lg overflow-hidden ${isDarkMode ? 'bg-gray-700' : 'bg-gray-200'}`}>\n                        <motion.div\n                          initial={{ width: 0 }}\n                          animate={{ width: `${percentage}%` }}\n                          transition={{ duration: 0.8, delay: index * 0.1, ease: 'easeOut' }}\n                          className={`h-full ${stat.color} flex items-center justify-end px-3`}\n                        >\n                          <span className=\"text-xs font-semibold text-white\">\n                            {percentage.toFixed(0)}%\n                          </span>\n                        </motion.div>\n                      </div>\n                    </motion.div>\n                  );\n                })}\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Goals Progress</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-6\">\n                {mockGoals.map((goal, index) => {\n                  const percentage = Math.min((goal.current / goal.target) * 100, 100);\n                  const isComplete = percentage >= 100;\n                  \n                  return (\n                    <motion.div\n                      key={goal.id}\n                      initial={{ opacity: 0, x: -20 }}\n                      animate={{ opacity: 1, x: 0 }}\n                      transition={{ delay: index * 0.1 }}\n                      className=\"space-y-2\"\n                    >\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"flex items-center gap-2\">\n                          <div className={`p-1.5 rounded ${goal.color} bg-opacity-10`}>\n                            <div className={`${goal.color.replace('bg-', 'text-')}`}>\n                              {goal.icon}\n                            </div>\n                          </div>\n                          <span className={`text-sm font-medium ${isDarkMode ? 'text-gray-200' : 'text-gray-700'}`}>\n                            {goal.label}\n                          </span>\n                        </div>\n                        <div className=\"flex items-center gap-2\">\n                          <span className={`text-xs ${isDarkMode ? 'text-gray-400' : 'text-gray-500'}`}>\n                            {goal.current.toLocaleString()} / {goal.target.toLocaleString()}\n                          </span>\n                          <span className={`text-sm font-semibold ${\n                            isComplete \n                              ? 'text-green-500' \n                              : percentage >= 75 \n                                ? 'text-blue-500' \n                                : isDarkMode ? 'text-gray-300' : 'text-gray-600'\n                          }`}>\n                            {percentage.toFixed(0)}%\n                          </span>\n                        </div>\n                      </div>\n                      \n                      <div className=\"relative\">\n                        <Progress \n                          value={percentage} \n                          className={`h-2 ${isDarkMode ? 'bg-gray-700' : 'bg-gray-200'}`}\n                        />\n                        {isComplete && (\n                          <motion.div\n                            initial={{ scale: 0 }}\n                            animate={{ scale: 1 }}\n                            className=\"absolute -right-1 -top-1\"\n                          >\n                            <div className=\"bg-green-500 rounded-full p-0.5\">\n                              <Target className=\"h-3 w-3 text-white\" />\n                            </div>\n                          </motion.div>\n                        )}\n                      </div>\n                    </motion.div>\n                  );\n                })}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}",
  "error": null,
  "overall_score": 53,
  "code_quality_score": 14,
  "architecture_score": 12,
  "performance_score": 11,
  "accessibility_score": 16,
  "metadata": {
    "document_id": "eval_room_b7390dc7e029",
    "prompt_category": "intermediate",
    "prompt_complexity": 6.0
  },
  "raw_response": {
    "document_id": "eval_room_b7390dc7e029",
    "mode": "parallel",
    "prompt": "Generate an analytics dashboard page with charts, data tables, real-time updates, dark mode, and responsive design",
    "content": "import { useState, useCallback } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Moon, Sun, RefreshCw } from 'lucide-react';\nimport { CheckCircle, AlertCircle, UserPlus, ShoppingBag, DollarSign, Settings } from 'lucide-react';\nimport { ArrowUpDown, ChevronLeft, ChevronRight } from 'lucide-react';\nimport { Badge } from '@/components/ui/badge';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\n\nimport { motion } from 'framer-motion';\n\n\n\n\nimport { PieChart, Pie, Cell, ResponsiveContainer, Legend, Tooltip } from 'recharts';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\n\nimport { TrendingUp, TrendingDown, DollarSign, Users, ShoppingCart, Target } from 'lucide-react';\n\nimport { motion } from 'framer-motion';\nimport { Progress } from '@/components/ui/progress';\nimport { motion } from 'framer-motion';\n\n\ninterface MetricData {\n  id: string;\n  label: string;\n  value: number;\n  change: number;\n  trend: 'up' | 'down';\n}\n\ninterface ChartDataPoint {\n  date: string;\n  revenue: number;\n  users: number;\n  orders: number;\n}\n\ninterface TableRow {\n  id: string;\n  product: string;\n  sales: number;\n  revenue: number;\n  status: 'active' | 'pending' | 'inactive';\n}\ninterface GoalData {\n  id: string;\n  label: string;\n  current: number;\n  target: number;\n  icon: React.ReactNode;\n  color: string;\n}\n\nconst mockMetrics: MetricData[] = [\n  { id: '1', label: 'Total Revenue', value: 45231, change: 12.5, trend: 'up' },\n  { id: '2', label: 'Active Users', value: 2350, change: 8.2, trend: 'up' },\n  { id: '3', label: 'Total Orders', value: 1543, change: -3.1, trend: 'down' },\n  { id: '4', label: 'Conversion Rate', value: 3.24, change: 5.7, trend: 'up' }\n];\n\nconst mockChartData: ChartDataPoint[] = [\n  { date: '2024-01-01', revenue: 12000, users: 450, orders: 230 },\n  { date: '2024-01-02', revenue: 15000, users: 520, orders: 280 },\n  { date: '2024-01-03', revenue: 13500, users: 490, orders: 250 },\n  { date: '2024-01-04', revenue: 18000, users: 610, orders: 320 },\n  { date: '2024-01-05', revenue: 16500, users: 580, orders: 295 },\n  { date: '2024-01-06', revenue: 20000, users: 680, orders: 350 },\n  { date: '2024-01-07', revenue: 22000, users: 720, orders: 380 }\n];\n\nconst mockTableData: TableRow[] = [\n  { id: '1', product: 'Premium Plan', sales: 234, revenue: 23400, status: 'active' },\n  { id: '2', product: 'Basic Plan', sales: 567, revenue: 11340, status: 'active' },\n  { id: '3', product: 'Enterprise Plan', sales: 89, revenue: 17800, status: 'active' },\n  { id: '4', product: 'Starter Plan', sales: 432, revenue: 4320, status: 'pending' },\n  { id: '5', product: 'Pro Plan', sales: 156, revenue: 15600, status: 'active' }\n];\ninterface ActivityItem {\n  id: string;\n  type: 'success' | 'warning' | 'info' | 'purchase';\n  message: string;\n  timestamp: string;\n  icon: 'check' | 'alert' | 'user' | 'shopping' | 'dollar' | 'settings';\n}\n\nconst mockActivityData: ActivityItem[] = [\n  { id: '1', type: 'success', message: 'New order completed', timestamp: '2 minutes ago', icon: 'check' },\n  { id: '2', type: 'info', message: 'New user registered', timestamp: '5 minutes ago', icon: 'user' },\n  { id: '3', type: 'purchase', message: 'Premium plan purchased', timestamp: '12 minutes ago', icon: 'shopping' },\n  { id: '4', type: 'success', message: 'Payment received', timestamp: '18 minutes ago', icon: 'dollar' },\n  { id: '5', type: 'warning', message: 'Low inventory alert', timestamp: '25 minutes ago', icon: 'alert' },\n  { id: '6', type: 'info', message: 'Settings updated', timestamp: '32 minutes ago', icon: 'settings' },\n  { id: '7', type: 'success', message: 'Order #1234 shipped', timestamp: '45 minutes ago', icon: 'check' },\n  { id: '8', type: 'purchase', message: 'Enterprise plan upgraded', timestamp: '1 hour ago', icon: 'shopping' },\n  { id: '9', type: 'info', message: '5 new users registered', timestamp: '1 hour ago', icon: 'user' },\n  { id: '10', type: 'success', message: 'Monthly goal achieved', timestamp: '2 hours ago', icon: 'check' }\n];\nconst mockGoals: GoalData[] = [\n  { \n    id: '1', \n    label: 'Revenue Target', \n    current: 45231, \n    target: 50000, \n    icon: <DollarSign className=\"h-4 w-4\" />,\n    color: 'bg-green-500'\n  },\n  { \n    id: '2', \n    label: 'User Acquisition', \n    current: 2350, \n    target: 3000, \n    icon: <Users className=\"h-4 w-4\" />,\n    color: 'bg-blue-500'\n  },\n  { \n    id: '3', \n    label: 'Order Volume', \n    current: 1543, \n    target: 2000, \n    icon: <ShoppingCart className=\"h-4 w-4\" />,\n    color: 'bg-purple-500'\n  },\n  { \n    id: '4', \n    label: 'Conversion Goal', \n    current: 324, \n    target: 400, \n    icon: <Target className=\"h-4 w-4\" />,\n    color: 'bg-orange-500'\n  }\n];\n\nconst mockQuickStats = [\n  { label: 'Today', value: 3200, color: 'bg-blue-500' },\n  { label: 'Yesterday', value: 2800, color: 'bg-purple-500' },\n  { label: 'This Week', value: 18500, color: 'bg-green-500' },\n  { label: 'Last Week', value: 16200, color: 'bg-orange-500' }\n];\n\nconst RevenueChart = ({ data, isDarkMode }: { data: ChartDataPoint[], isDarkMode: boolean }) => {\n  const [hoveredPoint, setHoveredPoint] = useState<number | null>(null);\n\n  const maxRevenue = Math.max(...data.map(d => d.revenue));\n  const minRevenue = Math.min(...data.map(d => d.revenue));\n  const revenueRange = maxRevenue - minRevenue;\n\n  const getYPosition = (value: number) => {\n    const padding = 20;\n    const chartHeight = 200;\n    const normalizedValue = (value - minRevenue) / revenueRange;\n    return chartHeight - (normalizedValue * (chartHeight - padding * 2)) - padding;\n  };\n\n  const chartWidth = 100;\n  const pointSpacing = chartWidth / (data.length - 1);\n\n  const pathData = data.map((point, index) => {\n    const x = index * pointSpacing;\n    const y = getYPosition(point.revenue);\n    return `${index === 0 ? 'M' : 'L'} ${x} ${y}`;\n  }).join(' ');\n\n  const areaPathData = `${pathData} L ${chartWidth} 200 L 0 200 Z`;\n\n  return (\n    <div className=\"relative w-full h-[250px]\">\n      <svg\n        viewBox={`0 0 ${chartWidth} 200`}\n        className=\"w-full h-full\"\n        preserveAspectRatio=\"none\"\n      >\n        <defs>\n          <linearGradient id=\"revenueGradient\" x1=\"0%\" y1=\"0%\" x2=\"0%\" y2=\"100%\">\n            <stop offset=\"0%\" stopColor={isDarkMode ? \"#3b82f6\" : \"#2563eb\"} stopOpacity=\"0.3\" />\n            <stop offset=\"100%\" stopColor={isDarkMode ? \"#3b82f6\" : \"#2563eb\"} stopOpacity=\"0.05\" />\n          </linearGradient>\n        </defs>\n\n        <path\n          d={areaPathData}\n          fill=\"url(#revenueGradient)\"\n          className=\"transition-all duration-300\"\n        />\n\n        <path\n          d={pathData}\n          fill=\"none\"\n          stroke={isDarkMode ? \"#3b82f6\" : \"#2563eb\"}\n          strokeWidth=\"0.5\"\n          className=\"transition-all duration-300\"\n        />\n\n        {data.map((point, index) => {\n          const x = index * pointSpacing;\n          const y = getYPosition(point.revenue);\n          const isHovered = hoveredPoint === index;\n\n          return (\n            <g key={index}>\n              <circle\n                cx={x}\n                cy={y}\n                r={isHovered ? \"1.5\" : \"1\"}\n                fill={isDarkMode ? \"#3b82f6\" : \"#2563eb\"}\n                className=\"transition-all duration-200 cursor-pointer\"\n                onMouseEnter={() => setHoveredPoint(index)}\n                onMouseLeave={() => setHoveredPoint(null)}\n              />\n              {isHovered && (\n                <circle\n                  cx={x}\n                  cy={y}\n                  r=\"2.5\"\n                  fill=\"none\"\n                  stroke={isDarkMode ? \"#3b82f6\" : \"#2563eb\"}\n                  strokeWidth=\"0.3\"\n                  opacity=\"0.5\"\n                />\n              )}\n            </g>\n          );\n        })}\n      </svg>\n\n      <div className=\"absolute bottom-0 left-0 right-0 flex justify-between px-2 text-xs\">\n        {data.map((point, index) => (\n          <span\n            key={index}\n            className={`${isDarkMode ? 'text-gray-400' : 'text-gray-600'} ${\n              index % 2 === 1 ? 'hidden sm:inline' : ''\n            }`}\n          >\n            {new Date(point.date).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n          </span>\n        ))}\n      </div>\n\n      {hoveredPoint !== null && (\n        <div\n          className={`absolute top-4 left-1/2 transform -translate-x-1/2 px-3 py-2 rounded-lg shadow-lg ${\n            isDarkMode ? 'bg-gray-700 border border-gray-600' : 'bg-white border border-gray-200'\n          } transition-all duration-200 z-10`}\n        >\n          <div className={`text-xs ${isDarkMode ? 'text-gray-300' : 'text-gray-600'} mb-1`}>\n            {new Date(data[hoveredPoint].date).toLocaleDateString('en-US', { \n              month: 'short', \n              day: 'numeric',\n              year: 'numeric'\n            })}\n          </div>\n          <div className={`text-lg font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'} flex items-center gap-1`}>\n            ${data[hoveredPoint].revenue.toLocaleString()}\n            <TrendingUp className=\"h-4 w-4 text-green-500\" />\n          </div>\n          <div className={`text-xs ${isDarkMode ? 'text-gray-400' : 'text-gray-500'} mt-1`}>\n            {data[hoveredPoint].users} users \u2022 {data[hoveredPoint].orders} orders\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nconst getMetricIcon = (label: string) => {\n  switch (label) {\n    case 'Total Revenue':\n      return DollarSign;\n    case 'Active Users':\n      return Users;\n    case 'Total Orders':\n      return ShoppingCart;\n    case 'Conversion Rate':\n      return Target;\n    default:\n      return DollarSign;\n  }\n};\n\nconst formatMetricValue = (label: string, value: number) => {\n  if (label === 'Total Revenue') {\n    return `$${value.toLocaleString()}`;\n  } else if (label === 'Conversion Rate') {\n    return `${value}%`;\n  }\n  return value.toLocaleString();\n};\nconst UserAreaChart = ({ data, isDarkMode }: { data: ChartDataPoint[], isDarkMode: boolean }) => {\n  const maxUsers = Math.max(...data.map(d => d.users));\n  const minUsers = Math.min(...data.map(d => d.users));\n  const padding = 40;\n  const width = 600;\n  const height = 300;\n  const chartWidth = width - padding * 2;\n  const chartHeight = height - padding * 2;\n\n  const [hoveredIndex, setHoveredIndex] = useState<number | null>(null);\n\n  const points = data.map((point, index) => {\n    const x = padding + (index / (data.length - 1)) * chartWidth;\n    const y = padding + chartHeight - ((point.users - minUsers) / (maxUsers - minUsers)) * chartHeight;\n    return { x, y, ...point };\n  });\n\n  const pathD = points.reduce((acc, point, index) => {\n    if (index === 0) return `M ${point.x} ${point.y}`;\n    return `${acc} L ${point.x} ${point.y}`;\n  }, '');\n\n  const areaD = `${pathD} L ${points[points.length - 1].x} ${padding + chartHeight} L ${points[0].x} ${padding + chartHeight} Z`;\n\n  const gradientId = 'userGradient';\n\n  return (\n    <div className=\"relative w-full\" style={{ height: '300px' }}>\n      <svg\n        viewBox={`0 0 ${width} ${height}`}\n        className=\"w-full h-full\"\n        style={{ overflow: 'visible' }}\n      >\n        <defs>\n          <linearGradient id={gradientId} x1=\"0%\" y1=\"0%\" x2=\"0%\" y2=\"100%\">\n            <stop offset=\"0%\" stopColor={isDarkMode ? '#3b82f6' : '#60a5fa'} stopOpacity=\"0.8\" />\n            <stop offset=\"100%\" stopColor={isDarkMode ? '#3b82f6' : '#60a5fa'} stopOpacity=\"0.1\" />\n          </linearGradient>\n        </defs>\n\n        <motion.path\n          d={areaD}\n          fill={`url(#${gradientId})`}\n          initial={{ opacity: 0 }}\n          animate={{ opacity: 1 }}\n          transition={{ duration: 0.8, ease: 'easeOut' }}\n        />\n\n        <motion.path\n          d={pathD}\n          fill=\"none\"\n          stroke={isDarkMode ? '#3b82f6' : '#2563eb'}\n          strokeWidth=\"3\"\n          strokeLinecap=\"round\"\n          strokeLinejoin=\"round\"\n          initial={{ pathLength: 0 }}\n          animate={{ pathLength: 1 }}\n          transition={{ duration: 1.5, ease: 'easeInOut' }}\n        />\n\n        {points.map((point, index) => (\n          <g key={index}>\n            <motion.circle\n              cx={point.x}\n              cy={point.y}\n              r={hoveredIndex === index ? 6 : 4}\n              fill={isDarkMode ? '#3b82f6' : '#2563eb'}\n              stroke={isDarkMode ? '#1e293b' : '#ffffff'}\n              strokeWidth=\"2\"\n              initial={{ scale: 0 }}\n              animate={{ scale: 1 }}\n              transition={{ duration: 0.3, delay: index * 0.1 }}\n              onMouseEnter={() => setHoveredIndex(index)}\n              onMouseLeave={() => setHoveredIndex(null)}\n              style={{ cursor: 'pointer' }}\n            />\n            {hoveredIndex === index && (\n              <g>\n                <rect\n                  x={point.x - 50}\n                  y={point.y - 50}\n                  width=\"100\"\n                  height=\"40\"\n                  rx=\"6\"\n                  fill={isDarkMode ? '#1e293b' : '#ffffff'}\n                  stroke={isDarkMode ? '#475569' : '#e5e7eb'}\n                  strokeWidth=\"1\"\n                  filter=\"drop-shadow(0 4px 6px rgba(0,0,0,0.1))\"\n                />\n                <text\n                  x={point.x}\n                  y={point.y - 35}\n                  textAnchor=\"middle\"\n                  className={`text-xs font-semibold ${isDarkMode ? 'fill-gray-300' : 'fill-gray-600'}`}\n                >\n                  {new Date(point.date).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n                </text>\n                <text\n                  x={point.x}\n                  y={point.y - 20}\n                  textAnchor=\"middle\"\n                  className={`text-sm font-bold ${isDarkMode ? 'fill-blue-400' : 'fill-blue-600'}`}\n                >\n                  {point.users.toLocaleString()} users\n                </text>\n              </g>\n            )}\n          </g>\n        ))}\n\n        <line\n          x1={padding}\n          y1={padding + chartHeight}\n          x2={width - padding}\n          y2={padding + chartHeight}\n          stroke={isDarkMode ? '#374151' : '#e5e7eb'}\n          strokeWidth=\"1\"\n        />\n        <line\n          x1={padding}\n          y1={padding}\n          x2={padding}\n          y2={padding + chartHeight}\n          stroke={isDarkMode ? '#374151' : '#e5e7eb'}\n          strokeWidth=\"1\"\n        />\n      </svg>\n    </div>\n  );\n};\n\nexport default function AnalyticsDashboard() {\n  const [sortColumn, setSortColumn] = useState<keyof TableRow>('revenue');\n  const [sortDirection, setSortDirection] = useState<'asc' | 'desc'>('desc');\n  const [currentPage, setCurrentPage] = useState(1);\n  const itemsPerPage = 5;\n  const [isDarkMode, setIsDarkMode] = useState(false);\n  const [metrics, setMetrics] = useState<MetricData[]>(mockMetrics);\n  const [chartData, setChartData] = useState<ChartDataPoint[]>(mockChartData);\n  const [tableData, setTableData] = useState<TableRow[]>(mockTableData);\n  const [isRefreshing, setIsRefreshing] = useState(false);\n  const [activityData] = useState<ActivityItem[]>(mockActivityData);\n\n  const getActivityIcon = (icon: ActivityItem['icon']) => {\n    const iconClass = \"h-4 w-4\";\n    switch (icon) {\n      case 'check':\n        return <CheckCircle className={iconClass} />;\n      case 'alert':\n        return <AlertCircle className={iconClass} />;\n      case 'user':\n        return <UserPlus className={iconClass} />;\n      case 'shopping':\n        return <ShoppingBag className={iconClass} />;\n      case 'dollar':\n        return <DollarSign className={iconClass} />;\n      case 'settings':\n        return <Settings className={iconClass} />;\n      default:\n        return <CheckCircle className={iconClass} />;\n    }\n  };\n\n  const getActivityColor = (type: ActivityItem['type']) => {\n    switch (type) {\n      case 'success':\n        return isDarkMode ? 'bg-green-900/30 text-green-400' : 'bg-green-100 text-green-700';\n      case 'warning':\n        return isDarkMode ? 'bg-yellow-900/30 text-yellow-400' : 'bg-yellow-100 text-yellow-700';\n      case 'info':\n        return isDarkMode ? 'bg-blue-900/30 text-blue-400' : 'bg-blue-100 text-blue-700';\n      case 'purchase':\n        return isDarkMode ? 'bg-purple-900/30 text-purple-400' : 'bg-purple-100 text-purple-700';\n      default:\n        return isDarkMode ? 'bg-gray-700 text-gray-300' : 'bg-gray-100 text-gray-700';\n    }\n  };\n\n  const toggleDarkMode = useCallback(() => {\n    setIsDarkMode(prev => !prev);\n  }, []);\n\n  const handleSort = useCallback((column: keyof TableRow) => {\n    if (sortColumn === column) {\n      setSortDirection(prev => prev === 'asc' ? 'desc' : 'asc');\n    } else {\n      setSortColumn(column);\n      setSortDirection('desc');\n    }\n  }, [sortColumn]);\n\n  const sortedTableData = [...tableData].sort((a, b) => {\n    const aValue = a[sortColumn];\n    const bValue = b[sortColumn];\n    \n    if (typeof aValue === 'number' && typeof bValue === 'number') {\n      return sortDirection === 'asc' ? aValue - bValue : bValue - aValue;\n    }\n    \n    if (typeof aValue === 'string' && typeof bValue === 'string') {\n      return sortDirection === 'asc' \n        ? aValue.localeCompare(bValue) \n        : bValue.localeCompare(aValue);\n    }\n    \n    return 0;\n  });\n\n  const totalPages = Math.ceil(sortedTableData.length / itemsPerPage);\n  const paginatedData = sortedTableData.slice(\n    (currentPage - 1) * itemsPerPage,\n    currentPage * itemsPerPage\n  );\n\n  const getStatusColor = (status: TableRow['status']) => {\n    switch (status) {\n      case 'active':\n        return 'bg-green-500';\n      case 'pending':\n        return 'bg-yellow-500';\n      case 'inactive':\n        return 'bg-gray-500';\n      default:\n        return 'bg-gray-500';\n    }\n  };\n\n  const pieChartData = tableData.map(item => ({\n    name: item.product,\n    value: item.sales,\n    revenue: item.revenue\n  }));\n\n  const COLORS = ['#3b82f6', '#8b5cf6', '#ec4899', '#f59e0b', '#10b981'];\n\n  const handleRefresh = useCallback(() => {\n\n    setIsRefreshing(true);\n    \n    setTimeout(() => {\n      // Generate updated mock metrics with random variations\n      const updatedMetrics = mockMetrics.map(metric => ({\n        ...metric,\n        value: metric.value + Math.floor(Math.random() * 200 - 100),\n        change: parseFloat((Math.random() * 20 - 5).toFixed(1)),\n        trend: Math.random() > 0.5 ? 'up' as const : 'down' as const\n      }));\n\n      // Generate updated chart data with random variations\n      const updatedChartData = mockChartData.map(point => ({\n        ...point,\n        revenue: point.revenue + Math.floor(Math.random() * 4000 - 2000),\n        users: point.users + Math.floor(Math.random() * 100 - 50),\n        orders: point.orders + Math.floor(Math.random() * 50 - 25)\n      }));\n\n      // Generate updated table data with random variations\n      const updatedTableData = mockTableData.map(row => ({\n        ...row,\n        sales: row.sales + Math.floor(Math.random() * 40 - 20),\n        revenue: row.revenue + Math.floor(Math.random() * 2000 - 1000)\n      }));\n\n      setMetrics(updatedMetrics);\n      setChartData(updatedChartData);\n      setTableData(updatedTableData);\n      setIsRefreshing(false);\n    }, 1500);\n  }, []);\n\n  return (\n    <div className={`min-h-screen transition-colors duration-300 ${isDarkMode ? 'dark bg-gray-900' : 'bg-gray-50'}`}>\n      <div className=\"container mx-auto p-4 md:p-6 lg:p-8\">\n        <div className=\"flex flex-col md:flex-row justify-between items-start md:items-center gap-4 mb-8\">\n          <div>\n            <h1 className={`text-3xl md:text-4xl font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n              Analytics Dashboard\n            </h1>\n            <p className={`mt-2 ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n              Real-time insights and performance metrics\n            </p>\n          </div>\n\n          <div className=\"flex gap-2\">\n            <Button\n              variant=\"outline\"\n              size=\"icon\"\n              onClick={toggleDarkMode}\n              className={isDarkMode ? 'border-gray-700' : ''}\n            >\n              {isDarkMode ? <Sun className=\"h-5 w-5\" /> : <Moon className=\"h-5 w-5\" />}\n            </Button>\n            <Button\n              variant=\"outline\"\n              onClick={handleRefresh}\n              disabled={isRefreshing}\n              className={isDarkMode ? 'border-gray-700' : ''}\n            >\n              <RefreshCw className={`h-4 w-4 mr-2 ${isRefreshing ? 'animate-spin' : ''}`} />\n              Refresh\n            </Button>\n          </div>\n        </div>\n\n        <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 md:gap-6 mb-8\">\n          {metrics.map((metric, index) => {\n            const IconComponent = getMetricIcon(metric.label);\n            const isPositive = metric.trend === 'up';\n            \n            return (\n              <motion.div\n                key={metric.id}\n                initial={{ opacity: 0, y: 20 }}\n                animate={{ opacity: 1, y: 0 }}\n                transition={{ duration: 0.4, delay: index * 0.1 }}\n              >\n                <Card className={`${isDarkMode ? 'bg-gray-800 border-gray-700' : 'bg-white'} hover:shadow-lg transition-shadow duration-300`}>\n                  <CardHeader className=\"flex flex-row items-center justify-between pb-2\">\n                    <CardTitle className={`text-sm font-medium ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                      {metric.label}\n                    </CardTitle>\n                    <div className={`p-2 rounded-lg ${isDarkMode ? 'bg-gray-700' : 'bg-gray-100'}`}>\n                      <IconComponent className={`h-4 w-4 ${isDarkMode ? 'text-gray-300' : 'text-gray-600'}`} />\n                    </div>\n                  </CardHeader>\n                  <CardContent>\n                    <div className={`text-2xl md:text-3xl font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                      {formatMetricValue(metric.label, metric.value)}\n                    </div>\n                    <div className=\"flex items-center mt-2\">\n                      {isPositive ? (\n                        <TrendingUp className=\"h-4 w-4 text-green-500 mr-1\" />\n                      ) : (\n                        <TrendingDown className=\"h-4 w-4 text-red-500 mr-1\" />\n                      )}\n                      <span className={`text-sm font-medium ${isPositive ? 'text-green-500' : 'text-red-500'}`}>\n                        {isPositive ? '+' : ''}{metric.change}%\n                      </span>\n                      <span className={`text-sm ml-2 ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                        vs last period\n                      </span>\n                    </div>\n                  </CardContent>\n                </Card>\n              </motion.div>\n            );\n          })}</parameter>\n</invoke>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-4 md:gap-6 mb-8\">\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Revenue Overview</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Daily revenue trends\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <RevenueChart data={chartData} isDarkMode={isDarkMode} />\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>User Growth</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Active users over time\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <UserAreaChart data={chartData} isDarkMode={isDarkMode} />\n            </CardContent>\n          </Card>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-4 md:gap-6 mb-8\">\n          <Card className={`lg:col-span-2 ${isDarkMode ? 'bg-gray-800 border-gray-700' : ''}`}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Performance Metrics</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Combined view of key metrics\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"h-[300px] w-full\">\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <LineChart data={chartData} margin={{ top: 5, right: 30, left: 20, bottom: 5 }}>\n                    <CartesianGrid strokeDasharray=\"3 3\" stroke={isDarkMode ? '#374151' : '#e5e7eb'} />\n                    <XAxis \n                      dataKey=\"date\" \n                      stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                      tick={{ fill: isDarkMode ? '#9ca3af' : '#6b7280' }}\n                      tickFormatter={(value) => new Date(value).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n                    />\n                    <YAxis \n                      stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                      tick={{ fill: isDarkMode ? '#9ca3af' : '#6b7280' }}\n                    />\n                    <Tooltip \n                      contentStyle={{\n                        backgroundColor: isDarkMode ? '#1f2937' : '#ffffff',\n                        border: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\n                        borderRadius: '6px',\n                        color: isDarkMode ? '#f3f4f6' : '#111827'\n                      }}\n                      labelFormatter={(value) => new Date(value).toLocaleDateString('en-US', { month: 'long', day: 'numeric', year: 'numeric' })}\n                    />\n                    <Legend \n                      wrapperStyle={{ color: isDarkMode ? '#f3f4f6' : '#111827' }}\n                    />\n                    <Line \n                      type=\"monotone\" \n                      dataKey=\"revenue\" \n                      stroke=\"#3b82f6\" \n                      strokeWidth={2}\n                      dot={{ fill: '#3b82f6', r: 4 }}\n                      activeDot={{ r: 6 }}\n                      name=\"Revenue ($)\"\n                    />\n                    <Line \n                      type=\"monotone\" \n                      dataKey=\"users\" \n                      stroke=\"#10b981\" \n                      strokeWidth={2}\n                      dot={{ fill: '#10b981', r: 4 }}\n                      activeDot={{ r: 6 }}\n                      name=\"Users\"\n                    />\n                    <Line \n                      type=\"monotone\" \n                      dataKey=\"orders\" \n                      stroke=\"#f59e0b\" \n                      strokeWidth={2}\n                      dot={{ fill: '#f59e0b', r: 4 }}\n                      activeDot={{ r: 6 }}\n                      name=\"Orders\"\n                    />\n                  </LineChart>\n                </ResponsiveContainer>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Distribution</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Sales by category\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"h-[300px]\">\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <PieChart>\n                    <Pie\n                      data={pieChartData}\n                      cx=\"50%\"\n                      cy=\"50%\"\n                      labelLine={false}\n                      label={({ name, percent }) => `${name}: ${(percent * 100).toFixed(0)}%`}\n                      outerRadius={80}\n                      fill=\"#8884d8\"\n                      dataKey=\"value\"\n                      animationBegin={0}\n                      animationDuration={800}\n                    >\n                      {pieChartData.map((entry, index) => (\n                        <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\n                      ))}\n                    </Pie>\n                    <Tooltip\n                      contentStyle={{\n                        backgroundColor: isDarkMode ? '#1f2937' : '#ffffff',\n                        border: isDarkMode ? '1px solid #374151' : '1px solid #e5e7eb',\n                        borderRadius: '6px',\n                        color: isDarkMode ? '#ffffff' : '#000000'\n                      }}\n                      formatter={(value: number, name: string, props: any) => [\n                        `${value} sales ($${props.payload.revenue.toLocaleString()})`,\n                        props.payload.name\n                      ]}\n                    />\n                    <Legend\n                      wrapperStyle={{\n                        color: isDarkMode ? '#9ca3af' : '#4b5563'\n                      }}\n                    />\n                  </PieChart>\n                </ResponsiveContainer>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n          <CardHeader>\n            <CardTitle className={isDarkMode ? 'text-white' : ''}>Top Products</CardTitle>\n            <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n              Best performing products by revenue\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              <div className=\"rounded-md border\">\n                <Table>\n                  <TableHeader>\n                    <TableRow className={isDarkMode ? 'border-gray-700' : ''}>\n                      <TableHead className={isDarkMode ? 'text-gray-300' : ''}>\n                        <Button\n                          variant=\"ghost\"\n                          onClick={() => handleSort('product')}\n                          className=\"flex items-center gap-1 hover:bg-transparent p-0\"\n                        >\n                          Product\n                          <ArrowUpDown className=\"h-4 w-4\" />\n                        </Button>\n                      </TableHead>\n                      <TableHead className={isDarkMode ? 'text-gray-300' : ''}>\n                        <Button\n                          variant=\"ghost\"\n                          onClick={() => handleSort('sales')}\n                          className=\"flex items-center gap-1 hover:bg-transparent p-0\"\n                        >\n                          Sales\n                          <ArrowUpDown className=\"h-4 w-4\" />\n                        </Button>\n                      </TableHead>\n                      <TableHead className={isDarkMode ? 'text-gray-300' : ''}>\n                        <Button\n                          variant=\"ghost\"\n                          onClick={() => handleSort('revenue')}\n                          className=\"flex items-center gap-1 hover:bg-transparent p-0\"\n                        >\n                          Revenue\n                          <ArrowUpDown className=\"h-4 w-4\" />\n                        </Button>\n                      </TableHead>\n                      <TableHead className={isDarkMode ? 'text-gray-300' : ''}>\n                        <Button\n                          variant=\"ghost\"\n                          onClick={() => handleSort('status')}\n                          className=\"flex items-center gap-1 hover:bg-transparent p-0\"\n                        >\n                          Status\n                          <ArrowUpDown className=\"h-4 w-4\" />\n                        </Button>\n                      </TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {paginatedData.map((row) => (\n                      <TableRow \n                        key={row.id}\n                        className={isDarkMode ? 'border-gray-700 hover:bg-gray-700/50' : 'hover:bg-gray-50'}\n                      >\n                        <TableCell className={`font-medium ${isDarkMode ? 'text-white' : ''}`}>\n                          {row.product}\n                        </TableCell>\n                        <TableCell className={isDarkMode ? 'text-gray-300' : ''}>\n                          {row.sales.toLocaleString()}\n                        </TableCell>\n                        <TableCell className={isDarkMode ? 'text-gray-300' : ''}>\n                          ${row.revenue.toLocaleString()}\n                        </TableCell>\n                        <TableCell>\n                          <Badge \n                            variant={row.status === 'active' ? 'default' : 'secondary'}\n                            className={`${getStatusColor(row.status)} text-white capitalize`}\n                          >\n                            {row.status}\n                          </Badge>\n                        </TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              </div>\n\n              <div className=\"flex items-center justify-between\">\n                <p className={`text-sm ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                  Showing {((currentPage - 1) * itemsPerPage) + 1} to {Math.min(currentPage * itemsPerPage, sortedTableData.length)} of {sortedTableData.length} products\n                </p>\n                <div className=\"flex items-center gap-2\">\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => setCurrentPage(prev => Math.max(1, prev - 1))}\n                    disabled={currentPage === 1}\n                    className={isDarkMode ? 'border-gray-700' : ''}\n                  >\n                    <ChevronLeft className=\"h-4 w-4\" />\n                    Previous\n                  </Button>\n                  <span className={`text-sm ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>\n                    Page {currentPage} of {totalPages}\n                  </span>\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => setCurrentPage(prev => Math.min(totalPages, prev + 1))}\n                    disabled={currentPage === totalPages}\n                    className={isDarkMode ? 'border-gray-700' : ''}\n                  >\n                    Next\n                    <ChevronRight className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 md:gap-6 mt-8\">\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Recent Activity</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"max-h-[400px] overflow-y-auto space-y-3 pr-2 scrollbar-thin\">\n                {activityData.map((activity) => (\n                  <div\n                    key={activity.id}\n                    className={`flex items-start gap-3 p-3 rounded-lg transition-all duration-200 hover:scale-[1.02] ${\n                      isDarkMode ? 'hover:bg-gray-700/50' : 'hover:bg-gray-50'\n                    }`}\n                  >\n                    <div className={`p-2 rounded-full ${getActivityColor(activity.type)}`}>\n                      {getActivityIcon(activity.icon)}\n                    </div>\n                    <div className=\"flex-1 min-w-0\">\n                      <p className={`text-sm font-medium ${isDarkMode ? 'text-gray-200' : 'text-gray-900'}`}>\n                        {activity.message}\n                      </p>\n                      <p className={`text-xs mt-1 ${isDarkMode ? 'text-gray-500' : 'text-gray-500'}`}>\n                        {activity.timestamp}\n                      </p>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Quick Stats</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {mockQuickStats.map((stat, index) => {\n                  const maxValue = Math.max(...mockQuickStats.map(s => s.value));\n                  const percentage = (stat.value / maxValue) * 100;\n                  \n                  return (\n                    <motion.div\n                      key={stat.label}\n                      initial={{ opacity: 0, x: -20 }}\n                      animate={{ opacity: 1, x: 0 }}\n                      transition={{ delay: index * 0.1 }}\n                      className=\"space-y-2\"\n                    >\n                      <div className=\"flex justify-between items-center\">\n                        <span className={`text-sm font-medium ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>\n                          {stat.label}\n                        </span>\n                        <span className={`text-sm font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                          ${stat.value.toLocaleString()}\n                        </span>\n                      </div>\n                      <div className={`h-8 rounded-lg overflow-hidden ${isDarkMode ? 'bg-gray-700' : 'bg-gray-200'}`}>\n                        <motion.div\n                          initial={{ width: 0 }}\n                          animate={{ width: `${percentage}%` }}\n                          transition={{ duration: 0.8, delay: index * 0.1, ease: 'easeOut' }}\n                          className={`h-full ${stat.color} flex items-center justify-end px-3`}\n                        >\n                          <span className=\"text-xs font-semibold text-white\">\n                            {percentage.toFixed(0)}%\n                          </span>\n                        </motion.div>\n                      </div>\n                    </motion.div>\n                  );\n                })}\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Goals Progress</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-6\">\n                {mockGoals.map((goal, index) => {\n                  const percentage = Math.min((goal.current / goal.target) * 100, 100);\n                  const isComplete = percentage >= 100;\n                  \n                  return (\n                    <motion.div\n                      key={goal.id}\n                      initial={{ opacity: 0, x: -20 }}\n                      animate={{ opacity: 1, x: 0 }}\n                      transition={{ delay: index * 0.1 }}\n                      className=\"space-y-2\"\n                    >\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"flex items-center gap-2\">\n                          <div className={`p-1.5 rounded ${goal.color} bg-opacity-10`}>\n                            <div className={`${goal.color.replace('bg-', 'text-')}`}>\n                              {goal.icon}\n                            </div>\n                          </div>\n                          <span className={`text-sm font-medium ${isDarkMode ? 'text-gray-200' : 'text-gray-700'}`}>\n                            {goal.label}\n                          </span>\n                        </div>\n                        <div className=\"flex items-center gap-2\">\n                          <span className={`text-xs ${isDarkMode ? 'text-gray-400' : 'text-gray-500'}`}>\n                            {goal.current.toLocaleString()} / {goal.target.toLocaleString()}\n                          </span>\n                          <span className={`text-sm font-semibold ${\n                            isComplete \n                              ? 'text-green-500' \n                              : percentage >= 75 \n                                ? 'text-blue-500' \n                                : isDarkMode ? 'text-gray-300' : 'text-gray-600'\n                          }`}>\n                            {percentage.toFixed(0)}%\n                          </span>\n                        </div>\n                      </div>\n                      \n                      <div className=\"relative\">\n                        <Progress \n                          value={percentage} \n                          className={`h-2 ${isDarkMode ? 'bg-gray-700' : 'bg-gray-200'}`}\n                        />\n                        {isComplete && (\n                          <motion.div\n                            initial={{ scale: 0 }}\n                            animate={{ scale: 1 }}\n                            className=\"absolute -right-1 -top-1\"\n                          >\n                            <div className=\"bg-green-500 rounded-full p-0.5\">\n                              <Target className=\"h-3 w-3 text-white\" />\n                            </div>\n                          </motion.div>\n                        )}\n                      </div>\n                    </motion.div>\n                  );\n                })}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}",
    "error": null,
    "elapsed_time": 109.39265632629395,
    "success": true
  }
}