{
  "prompt_id": "dashboard",
  "prompt_name": "Analytics Dashboard",
  "mode": "parallel",
  "run_number": 41,
  "timestamp": "2025-10-14T07:11:03.928322",
  "response_time": 89.35491561889648,
  "total_tokens": null,
  "response_content": "import { useState, useCallback } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\nimport { Badge } from '@/components/ui/badge';\nimport { ChevronUp, ChevronDown, ChevronsUpDown } from 'lucide-react';\nimport { Moon, Sun, RefreshCw } , TrendingUp, TrendingDown } from 'lucide-react';\n\nimport { TrendingUp, ShoppingCart, UserPlus, DollarSign, Package, AlertCircle } from 'lucide-react';\n\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, Legend } from 'recharts';\nimport { PieChart, Pie, Cell, ResponsiveContainer, Legend, Tooltip } from 'recharts';\nimport { motion } from 'framer-motion';\nimport { TrendingUp, Users } from 'lucide-react';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';\n\n\nimport { TrendingUp, TrendingDown, DollarSign, Users, ShoppingCart, Target, AlertTriangle, Info, CheckCircle, XCircle, X } from 'lucide-react';\n\ninterface MetricData {\n  id: string;\n  label: string;\n  value: number;\n  change: number;\n  trend: 'up' | 'down';\n}\n\ninterface ChartDataPoint {\n  date: string;\n  revenue: number;\n  users: number;\n  orders: number;\n}\n\ninterface TableRow {\n  id: string;\n  product: string;\n  sales: number;\n  revenue: number;\n  status: 'active' | 'pending' | 'inactive';\n}\n\ninterface AlertItem {\n  id: string;\n  message: string;\n  severity: 'info' | 'warning' | 'success' | 'error';\n  timestamp: string;\n}\n\nconst mockMetrics: MetricData[] = [\n  { id: '1', label: 'Total Revenue', value: 45231, change: 12.5, trend: 'up' },\n  { id: '2', label: 'Active Users', value: 2350, change: 8.2, trend: 'up' },\n  { id: '3', label: 'Total Orders', value: 1543, change: -3.1, trend: 'down' },\n  { id: '4', label: 'Conversion Rate', value: 3.24, change: 5.7, trend: 'up' }\n];\n\nconst mockChartData: ChartDataPoint[] = [\n  { date: '2024-01-01', revenue: 12000, users: 450, orders: 230 },\n  { date: '2024-01-02', revenue: 15000, users: 520, orders: 280 },\n  { date: '2024-01-03', revenue: 13500, users: 490, orders: 250 },\n  { date: '2024-01-04', revenue: 18000, users: 610, orders: 320 },\n  { date: '2024-01-05', revenue: 16500, users: 580, orders: 295 },\n  { date: '2024-01-06', revenue: 20000, users: 680, orders: 350 },\n  { date: '2024-01-07', revenue: 22000, users: 720, orders: 380 }\n];\n\nconst mockTableData: TableRow[] = [\n  { id: '1', product: 'Premium Plan', sales: 234, revenue: 23400, status: 'active' },\n  { id: '2', product: 'Basic Plan', sales: 567, revenue: 11340, status: 'active' },\n  { id: '3', product: 'Enterprise Plan', sales: 89, revenue: 44500, status: 'active' },\n  { id: '4', product: 'Starter Plan', sales: 432, revenue: 4320, status: 'pending' },\n  { id: '5', product: 'Pro Plan', sales: 156, revenue: 15600, status: 'inactive' }\n];\n\nconst mockAlerts: AlertItem[] = [\n  { id: '1', message: 'Server response time increased by 15%', severity: 'warning', timestamp: '5 min ago' },\n  { id: '2', message: 'New milestone reached: 10K users!', severity: 'success', timestamp: '1 hour ago' },\n  { id: '3', message: 'Payment gateway experiencing delays', severity: 'error', timestamp: '2 hours ago' },\n  { id: '4', message: 'System maintenance scheduled for tonight', severity: 'info', timestamp: '3 hours ago' }\n];\ninterface QuickStatData {\n  id: string;\n  label: string;\n  value: string;\n  change: number;\n  sparklineData: number[];\n  icon: 'revenue' | 'users' | 'orders' | 'conversion';\n}\n\nconst mockQuickStats: QuickStatData[] = [\n  { \n    id: '1', \n    label: 'Daily Revenue', \n    value: '$3,245', \n    change: 15.3, \n    sparklineData: [2800, 2900, 3100, 2950, 3200, 3150, 3245],\n    icon: 'revenue'\n  },\n  { \n    id: '2', \n    label: 'New Users', \n    value: '142', \n    change: 8.7, \n    sparklineData: [120, 125, 135, 130, 138, 140, 142],\n    icon: 'users'\n  },\n  { \n    id: '3', \n    label: 'Avg Order Value', \n    value: '$87.50', \n    change: -2.4, \n    sparklineData: [92, 90, 89, 88, 87, 88, 87.5],\n    icon: 'orders'\n  },\n  { \n    id: '4', \n    label: 'Bounce Rate', \n    value: '42.3%', \n    change: -5.2, \n    sparklineData: [48, 47, 45, 44, 43, 42.5, 42.3],\n    icon: 'conversion'\n  }\n];\ninterface ActivityItem {\n  id: string;\n  type: 'sale' | 'user' | 'revenue' | 'order' | 'alert';\n  message: string;\n  timestamp: string;\n  icon: any;\n  color: string;\n}\n\nconst mockActivityData: ActivityItem[] = [\n  {\n    id: '1',\n    type: 'sale',\n    message: 'New sale: Enterprise Plan purchased',\n    timestamp: '2 minutes ago',\n    icon: ShoppingCart,\n    color: 'text-green-500'\n  },\n  {\n    id: '2',\n    type: 'user',\n    message: '5 new users registered',\n    timestamp: '15 minutes ago',\n    icon: UserPlus,\n    color: 'text-blue-500'\n  },\n  {\n    id: '3',\n    type: 'revenue',\n    message: 'Revenue milestone: $50k reached',\n    timestamp: '1 hour ago',\n    icon: DollarSign,\n    color: 'text-yellow-500'\n  },\n  {\n    id: '4',\n    type: 'order',\n    message: '12 orders processed successfully',\n    timestamp: '2 hours ago',\n    icon: Package,\n    color: 'text-purple-500'\n  },\n  {\n    id: '5',\n    type: 'alert',\n    message: 'Low stock alert: Premium Plan',\n    timestamp: '3 hours ago',\n    icon: AlertCircle,\n    color: 'text-red-500'\n  },\n  {\n    id: '6',\n    type: 'sale',\n    message: 'New sale: Pro Plan purchased',\n    timestamp: '4 hours ago',\n    icon: TrendingUp,\n    color: 'text-green-500'\n  }\n];\n\nconst CustomTooltip = ({ active, payload, isDark }: any) => {\n  if (active && payload && payload.length) {\n    return (\n      <div className={`p-3 rounded-lg shadow-lg border ${isDark ? 'bg-gray-800 border-gray-700' : 'bg-white border-gray-200'}`}>\n        <p className={`text-sm font-medium mb-2 ${isDark ? 'text-gray-300' : 'text-gray-600'}`}>\n          {payload[0].payload.date}\n        </p>\n        <p className={`text-sm font-semibold ${isDark ? 'text-white' : 'text-gray-900'}`}>\n          Revenue: ${payload[0].value.toLocaleString()}\n        </p>\n      </div>\n    );\n  }\n  return null;\n};\n\nexport default function AnalyticsDashboard() {\n  const [sortColumn, setSortColumn] = useState<keyof TableRow | null>(null);\n  const [sortDirection, setSortDirection] = useState<'asc' | 'desc'>('asc');\n  const [currentPage, setCurrentPage] = useState(1);\n  const itemsPerPage = 3;\n  const [isDarkMode, setIsDarkMode] = useState(false);\n  const [metrics, setMetrics] = useState<MetricData[]>(mockMetrics);\n  const [chartData, setChartData] = useState<ChartDataPoint[]>(mockChartData);\n  const [tableData, setTableData] = useState<TableRow[]>(mockTableData);\n  const [isRefreshing, setIsRefreshing] = useState(false);\n  const [activityData, setActivityData] = useState<ActivityItem[]>(mockActivityData);\n\n  const toggleDarkMode = useCallback(() => {\n    setIsDarkMode(prev => !prev);\n  }, []);\n  const handleSort = useCallback((column: keyof TableRow) => {\n    if (sortColumn === column) {\n      setSortDirection(prev => prev === 'asc' ? 'desc' : 'asc');\n    } else {\n      setSortColumn(column);\n      setSortDirection('asc');\n    }\n  }, [sortColumn]);\n\n  const sortedData = useCallback(() => {\n    if (!sortColumn) return tableData;\n    \n    return [...tableData].sort((a, b) => {\n      const aValue = a[sortColumn];\n      const bValue = b[sortColumn];\n      \n      if (typeof aValue === 'number' && typeof bValue === 'number') {\n        return sortDirection === 'asc' ? aValue - bValue : bValue - aValue;\n      }\n      \n      if (typeof aValue === 'string' && typeof bValue === 'string') {\n        return sortDirection === 'asc' \n          ? aValue.localeCompare(bValue)\n          : bValue.localeCompare(aValue);\n      }\n      \n      return 0;\n    });\n  }, [tableData, sortColumn, sortDirection]);\n\n  const paginatedData = useCallback(() => {\n    const sorted = sortedData();\n    const startIndex = (currentPage - 1) * itemsPerPage;\n    const endIndex = startIndex + itemsPerPage;\n    return sorted.slice(startIndex, endIndex);\n  }, [sortedData, currentPage]);\n\n  const totalPages = Math.ceil(tableData.length / itemsPerPage);\n\n  const getStatusBadge = (status: TableRow['status']) => {\n    const variants = {\n      active: 'default',\n      pending: 'secondary',\n      inactive: 'outline'\n    } as const;\n    \n    const colors = {\n      active: isDarkMode ? 'bg-green-900 text-green-300 border-green-700' : 'bg-green-100 text-green-800 border-green-300',\n      pending: isDarkMode ? 'bg-yellow-900 text-yellow-300 border-yellow-700' : 'bg-yellow-100 text-yellow-800 border-yellow-300',\n      inactive: isDarkMode ? 'bg-gray-700 text-gray-300 border-gray-600' : 'bg-gray-100 text-gray-800 border-gray-300'\n    };\n    \n    return (\n      <Badge variant={variants[status]} className={colors[status]}>\n        {status.charAt(0).toUpperCase() + status.slice(1)}\n      </Badge>\n    );\n  };\n\n  const SortIcon = ({ column }: { column: keyof TableRow }) => {\n    if (sortColumn !== column) {\n      return <ChevronsUpDown className=\"ml-2 h-4 w-4\" />;\n    }\n    return sortDirection === 'asc' \n      ? <ChevronUp className=\"ml-2 h-4 w-4\" />\n      : <ChevronDown className=\"ml-2 h-4 w-4\" />;\n  };\n\n  const handleRefresh = useCallback(() => {\n    setIsRefreshing(true);\n    \n    setTimeout(() => {\n      // Generate updated metrics with random variations\n      const updatedMetrics = mockMetrics.map(metric => ({\n        ...metric,\n        value: metric.value + Math.floor(Math.random() * 200 - 100),\n        change: parseFloat((Math.random() * 20 - 5).toFixed(1)),\n        trend: Math.random() > 0.5 ? 'up' as const : 'down' as const\n      }));\n\n      // Generate updated chart data with random variations\n      const updatedChartData = mockChartData.map(point => ({\n        ...point,\n        revenue: point.revenue + Math.floor(Math.random() * 4000 - 2000),\n        users: point.users + Math.floor(Math.random() * 100 - 50),\n        orders: point.orders + Math.floor(Math.random() * 50 - 25)\n      }));\n\n      // Generate updated table data with random variations\n      const updatedTableData = mockTableData.map(row => ({\n        ...row,\n        sales: row.sales + Math.floor(Math.random() * 40 - 20),\n        revenue: row.revenue + Math.floor(Math.random() * 2000 - 1000)\n      }));\n\n      setMetrics(updatedMetrics);\n      setChartData(updatedChartData);\n      setTableData(updatedTableData);\n      setIsRefreshing(false);\n    }, 1500);</parameter>\n</invoke>\n  }, []);\n\n  return (\n    <div className={`min-h-screen ${isDarkMode ? 'dark bg-gray-900' : 'bg-gray-50'}`}>\n      <div className=\"container mx-auto p-4 md:p-6 lg:p-8\">\n        <div className=\"flex flex-col md:flex-row justify-between items-start md:items-center gap-4 mb-8\">\n          <div>\n            <h1 className={`text-3xl md:text-4xl font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n              Analytics Dashboard\n            </h1>\n            <p className={`mt-2 ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n              Real-time insights and performance metrics\n            </p>\n          </div>\n          \n          <div className=\"flex gap-2\">\n            <Button\n              variant=\"outline\"\n              size=\"icon\"\n              onClick={toggleDarkMode}\n              className={isDarkMode ? 'border-gray-700' : ''}\n            >\n              {isDarkMode ? <Sun className=\"h-5 w-5\" /> : <Moon className=\"h-5 w-5\" />}\n            </Button>\n            \n            <Button\n              variant=\"outline\"\n              onClick={handleRefresh}\n              disabled={isRefreshing}\n              className={isDarkMode ? 'border-gray-700' : ''}\n            >\n              <RefreshCw className={`h-4 w-4 mr-2 ${isRefreshing ? 'animate-spin' : ''}`} />\n              Refresh\n            </Button>\n          </div>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 md:gap-6 mb-8\">\n          {metrics.map((metric, index) => {\n            const Icon = metric.id === '1' ? DollarSign : \n                        metric.id === '2' ? Users : \n                        metric.id === '3' ? ShoppingCart : Target;\n            \n            return (\n              <Card \n                key={metric.id}\n                className={`transition-all duration-300 hover:shadow-lg hover:-translate-y-1 ${\n                  isDarkMode ? 'bg-gray-800 border-gray-700' : 'bg-white'\n                }`}\n                style={{\n                  animation: `fadeInUp 0.5s ease-out ${index * 0.1}s both`\n                }}\n              >\n                <CardHeader className=\"flex flex-row items-center justify-between pb-2\">\n                  <CardTitle className={`text-sm font-medium ${\n                    isDarkMode ? 'text-gray-400' : 'text-gray-600'\n                  }`}>\n                    {metric.label}\n                  </CardTitle>\n                  <div className={`p-2 rounded-lg ${\n                    isDarkMode ? 'bg-gray-700' : 'bg-gray-100'\n                  }`}>\n                    <Icon className={`h-4 w-4 ${\n                      isDarkMode ? 'text-gray-300' : 'text-gray-600'\n                    }`} />\n                  </div>\n                </CardHeader>\n                <CardContent>\n                  <div className={`text-2xl font-bold ${\n                    isDarkMode ? 'text-white' : 'text-gray-900'\n                  }`}>\n                    {metric.id === '1' || metric.id === '4' \n                      ? metric.id === '1' \n                        ? `$${metric.value.toLocaleString()}` \n                        : `${metric.value}%`\n                      : metric.value.toLocaleString()\n                    }\n                  </div>\n                  <div className=\"flex items-center mt-2\">\n                    {metric.trend === 'up' ? (\n                      <TrendingUp className=\"h-4 w-4 text-green-500 mr-1\" />\n                    ) : (\n                      <TrendingDown className=\"h-4 w-4 text-red-500 mr-1\" />\n                    )}\n                    <span className={`text-sm font-medium ${\n                      metric.trend === 'up' ? 'text-green-500' : 'text-red-500'\n                    }`}>\n                      {metric.change > 0 ? '+' : ''}{metric.change}%\n                    </span>\n                    <span className={`text-sm ml-2 ${\n                      isDarkMode ? 'text-gray-400' : 'text-gray-600'\n                    }`}>\n                      vs last period\n                    </span>\n                  </div>\n                </CardContent>\n              </Card>\n            );\n          })}\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-4 md:gap-6 mb-8\">\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Revenue Overview</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Daily revenue trends\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"w-full h-[300px] md:h-[350px]\">\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <LineChart\n                    data={chartData}\n                    margin={{ top: 5, right: 10, left: 0, bottom: 5 }}\n                  >\n                    <CartesianGrid \n                      strokeDasharray=\"3 3\" \n                      stroke={isDarkMode ? '#374151' : '#e5e7eb'}\n                    />\n                    <XAxis \n                      dataKey=\"date\" \n                      stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                      tick={{ fill: isDarkMode ? '#9ca3af' : '#6b7280', fontSize: 12 }}\n                      tickFormatter={(value) => new Date(value).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n                    />\n                    <YAxis \n                      stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                      tick={{ fill: isDarkMode ? '#9ca3af' : '#6b7280', fontSize: 12 }}\n                      tickFormatter={(value) => `$${(value / 1000).toFixed(0)}k`}\n                    />\n                    <Tooltip content={<CustomTooltip isDark={isDarkMode} />} />\n                    <Line \n                      type=\"monotone\" \n                      dataKey=\"revenue\" \n                      stroke=\"#3b82f6\" \n                      strokeWidth={2}\n                      dot={{ fill: '#3b82f6', r: 4 }}\n                      activeDot={{ r: 6, fill: '#2563eb' }}\n                    />\n                  </LineChart>\n                </ResponsiveContainer>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>User Growth</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Active users over time\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"h-[300px] w-full\">\n                <svg width=\"100%\" height=\"100%\" viewBox=\"0 0 700 300\" preserveAspectRatio=\"none\">\n                  <defs>\n                    <linearGradient id=\"userGradient\" x1=\"0\" x2=\"0\" y1=\"0\" y2=\"1\">\n                      <stop offset=\"0%\" stopColor=\"#3b82f6\" stopOpacity=\"0.4\" />\n                      <stop offset=\"100%\" stopColor=\"#3b82f6\" stopOpacity=\"0.05\" />\n                    </linearGradient>\n                  </defs>\n                  \n                  {/* Grid lines */}\n                  {[0, 1, 2, 3, 4].map((i) => (\n                    <line\n                      key={i}\n                      x1=\"0\"\n                      y1={i * 60 + 20}\n                      x2=\"700\"\n                      y2={i * 60 + 20}\n                      stroke={isDarkMode ? '#374151' : '#e5e7eb'}\n                      strokeWidth=\"1\"\n                      opacity=\"0.5\"\n                    />\n                  ))}\n                  \n                  {/* Area path */}\n                  <motion.path\n                    d={`M 0 ${280 - (chartData[0].users / 720) * 260}\n                        L ${100} ${280 - (chartData[1].users / 720) * 260}\n                        L ${200} ${280 - (chartData[2].users / 720) * 260}\n                        L ${300} ${280 - (chartData[3].users / 720) * 260}\n                        L ${400} ${280 - (chartData[4].users / 720) * 260}\n                        L ${500} ${280 - (chartData[5].users / 720) * 260}\n                        L ${600} ${280 - (chartData[6].users / 720) * 260}\n                        L 600 280\n                        L 0 280 Z`}\n                    fill=\"url(#userGradient)\"\n                    initial={{ opacity: 0 }}\n                    animate={{ opacity: 1 }}\n                    transition={{ duration: 0.8, ease: \"easeOut\" }}\n                  />\n                  \n                  {/* Line path */}\n                  <motion.path\n                    d={`M 0 ${280 - (chartData[0].users / 720) * 260}\n                        L ${100} ${280 - (chartData[1].users / 720) * 260}\n                        L ${200} ${280 - (chartData[2].users / 720) * 260}\n                        L ${300} ${280 - (chartData[3].users / 720) * 260}\n                        L ${400} ${280 - (chartData[4].users / 720) * 260}\n                        L ${500} ${280 - (chartData[5].users / 720) * 260}\n                        L ${600} ${280 - (chartData[6].users / 720) * 260}`}\n                    fill=\"none\"\n                    stroke=\"#3b82f6\"\n                    strokeWidth=\"3\"\n                    strokeLinecap=\"round\"\n                    strokeLinejoin=\"round\"\n                    initial={{ pathLength: 0 }}\n                    animate={{ pathLength: 1 }}\n                    transition={{ duration: 1.2, ease: \"easeInOut\" }}\n                  />\n                  \n                  {/* Data points */}\n                  {chartData.map((point, index) => {\n                    const x = index * 100;\n                    const y = 280 - (point.users / 720) * 260;\n                    return (\n                      <motion.g\n                        key={point.date}\n                        initial={{ opacity: 0, scale: 0 }}\n                        animate={{ opacity: 1, scale: 1 }}\n                        transition={{ duration: 0.3, delay: index * 0.1 + 0.5 }}\n                      >\n                        <circle\n                          cx={x}\n                          cy={y}\n                          r=\"5\"\n                          fill=\"#3b82f6\"\n                          stroke={isDarkMode ? '#1f2937' : '#ffffff'}\n                          strokeWidth=\"2\"\n                          className=\"cursor-pointer hover:r-7 transition-all\"\n                        />\n                        <title>{`${point.date}: ${point.users} users`}</title>\n                      </motion.g>\n                    );\n                  })}\n                </svg>\n                \n                {/* X-axis labels */}\n                <div className=\"flex justify-between mt-2 px-1\">\n                  {chartData.map((point, index) => (\n                    <motion.span\n                      key={point.date}\n                      className={`text-xs ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}\n                      initial={{ opacity: 0, y: -10 }}\n                      animate={{ opacity: 1, y: 0 }}\n                      transition={{ duration: 0.3, delay: index * 0.1 + 0.8 }}\n                    >\n                      {new Date(point.date).getDate()}/{new Date(point.date).getMonth() + 1}\n                    </motion.span>\n                  ))}\n                </div>\n                \n                {/* Summary stats */}\n                <motion.div\n                  className=\"flex items-center justify-between mt-4 pt-4 border-t\"\n                  style={{ borderColor: isDarkMode ? '#374151' : '#e5e7eb' }}\n                  initial={{ opacity: 0, y: 20 }}\n                  animate={{ opacity: 1, y: 0 }}\n                  transition={{ duration: 0.5, delay: 1.2 }}\n                >\n                  <div className=\"flex items-center gap-2\">\n                    <Users className={`h-4 w-4 ${isDarkMode ? 'text-blue-400' : 'text-blue-600'}`} />\n                    <span className={`text-sm font-medium ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>\n                      Total Users: {chartData[chartData.length - 1].users}\n                    </span>\n                  </div>\n                  <div className=\"flex items-center gap-1 text-green-600\">\n                    <TrendingUp className=\"h-4 w-4\" />\n                    <span className=\"text-sm font-medium\">\n                      +{Math.round(((chartData[chartData.length - 1].users - chartData[0].users) / chartData[0].users) * 100)}%\n                    </span>\n                  </div>\n                </motion.div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-4 md:gap-6 mb-8\">\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Orders Distribution</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                By product category\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"h-[300px] w-full\">\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <PieChart>\n                    <Pie\n                      data={chartData}\n                      cx=\"50%\"\n                      cy=\"50%\"\n                      labelLine={false}\n                      label={({ name, percent }) => `${name}: ${(percent * 100).toFixed(0)}%`}\n                      outerRadius={80}\n                      fill=\"#8884d8\"\n                      dataKey=\"orders\"\n                      nameKey=\"date\"\n                    >\n                      {chartData.map((entry, index) => (\n                        <Cell \n                          key={`cell-${index}`} \n                          fill={[\n                            '#3b82f6',\n                            '#8b5cf6', \n                            '#ec4899',\n                            '#f59e0b',\n                            '#10b981',\n                            '#06b6d4',\n                            '#6366f1'\n                          ][index % 7]} \n                        />\n                      ))}\n                    </Pie>\n                    <Tooltip \n                      contentStyle={{\n                        backgroundColor: isDarkMode ? '#1f2937' : '#ffffff',\n                        border: isDarkMode ? '1px solid #374151' : '1px solid #e5e7eb',\n                        borderRadius: '6px',\n                        color: isDarkMode ? '#f3f4f6' : '#111827'\n                      }}\n                      formatter={(value: number) => [`${value} orders`, 'Orders']}\n                    />\n                    <Legend \n                      verticalAlign=\"bottom\" \n                      height={36}\n                      wrapperStyle={{\n                        color: isDarkMode ? '#d1d5db' : '#374151'\n                      }}\n                    />\n                  </PieChart>\n                </ResponsiveContainer>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className={`lg:col-span-2 ${isDarkMode ? 'bg-gray-800 border-gray-700' : ''}`}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Performance Metrics</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Combined view of key indicators\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <ResponsiveContainer width=\"100%\" height={300}>\n                <BarChart data={chartData}>\n                  <CartesianGrid \n                    strokeDasharray=\"3 3\" \n                    stroke={isDarkMode ? '#374151' : '#e5e7eb'}\n                  />\n                  <XAxis \n                    dataKey=\"date\" \n                    stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                    tick={{ fill: isDarkMode ? '#9ca3af' : '#6b7280' }}\n                    tickFormatter={(value) => new Date(value).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n                  />\n                  <YAxis \n                    stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                    tick={{ fill: isDarkMode ? '#9ca3af' : '#6b7280' }}\n                  />\n                  <Tooltip \n                    contentStyle={{\n                      backgroundColor: isDarkMode ? '#1f2937' : '#ffffff',\n                      border: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\n                      borderRadius: '8px',\n                      color: isDarkMode ? '#f3f4f6' : '#111827'\n                    }}\n                    labelStyle={{ color: isDarkMode ? '#f3f4f6' : '#111827' }}\n                    formatter={(value: number) => value.toLocaleString()}\n                    labelFormatter={(label) => new Date(label).toLocaleDateString('en-US', { month: 'long', day: 'numeric', year: 'numeric' })}\n                  />\n                  <Legend \n                    wrapperStyle={{ color: isDarkMode ? '#9ca3af' : '#6b7280' }}\n                  />\n                  <Bar \n                    dataKey=\"revenue\" \n                    fill=\"#3b82f6\" \n                    radius={[4, 4, 0, 0]}\n                    name=\"Revenue ($)\"\n                  />\n                  <Bar \n                    dataKey=\"users\" \n                    fill=\"#10b981\" \n                    radius={[4, 4, 0, 0]}\n                    name=\"Users\"\n                  />\n                  <Bar \n                    dataKey=\"orders\" \n                    fill=\"#f59e0b\" \n                    radius={[4, 4, 0, 0]}\n                    name=\"Orders\"\n                  />\n                </BarChart>\n              </ResponsiveContainer>\n            </CardContent>\n          </Card>\n        </div>\n\n        <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n          <CardHeader>\n            <CardTitle className={isDarkMode ? 'text-white' : ''}>Top Products</CardTitle>\n            <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n              Best performing products by revenue\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              <div className=\"overflow-x-auto rounded-md border border-gray-200 dark:border-gray-700\">\n                <Table>\n                  <TableHeader>\n                    <TableRow className={isDarkMode ? 'border-gray-700 hover:bg-gray-750' : ''}>\n                      <TableHead className={isDarkMode ? 'text-gray-300' : ''}>\n                        <Button\n                          variant=\"ghost\"\n                          onClick={() => handleSort('product')}\n                          className={`font-semibold ${isDarkMode ? 'hover:bg-gray-700 text-gray-300' : ''}`}\n                        >\n                          Product\n                          <SortIcon column=\"product\" />\n                        </Button>\n                      </TableHead>\n                      <TableHead className={`text-right ${isDarkMode ? 'text-gray-300' : ''}`}>\n                        <Button\n                          variant=\"ghost\"\n                          onClick={() => handleSort('sales')}\n                          className={`font-semibold ${isDarkMode ? 'hover:bg-gray-700 text-gray-300' : ''}`}\n                        >\n                          Sales\n                          <SortIcon column=\"sales\" />\n                        </Button>\n                      </TableHead>\n                      <TableHead className={`text-right ${isDarkMode ? 'text-gray-300' : ''}`}>\n                        <Button\n                          variant=\"ghost\"\n                          onClick={() => handleSort('revenue')}\n                          className={`font-semibold ${isDarkMode ? 'hover:bg-gray-700 text-gray-300' : ''}`}\n                        >\n                          Revenue\n                          <SortIcon column=\"revenue\" />\n                        </Button>\n                      </TableHead>\n                      <TableHead className={`text-center ${isDarkMode ? 'text-gray-300' : ''}`}>\n                        <Button\n                          variant=\"ghost\"\n                          onClick={() => handleSort('status')}\n                          className={`font-semibold ${isDarkMode ? 'hover:bg-gray-700 text-gray-300' : ''}`}\n                        >\n                          Status\n                          <SortIcon column=\"status\" />\n                        </Button>\n                      </TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {paginatedData().map((row) => (\n                      <TableRow \n                        key={row.id}\n                        className={isDarkMode ? 'border-gray-700 hover:bg-gray-750' : 'hover:bg-gray-50'}\n                      >\n                        <TableCell className={`font-medium ${isDarkMode ? 'text-gray-200' : ''}`}>\n                          {row.product}\n                        </TableCell>\n                        <TableCell className={`text-right ${isDarkMode ? 'text-gray-300' : ''}`}>\n                          {row.sales.toLocaleString()}\n                        </TableCell>\n                        <TableCell className={`text-right ${isDarkMode ? 'text-gray-300' : ''}`}>\n                          ${row.revenue.toLocaleString()}\n                        </TableCell>\n                        <TableCell className=\"text-center\">\n                          {getStatusBadge(row.status)}\n                        </TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              </div>\n\n              <div className=\"flex flex-col sm:flex-row items-center justify-between gap-4\">\n                <div className={`text-sm ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                  Showing {((currentPage - 1) * itemsPerPage) + 1} to {Math.min(currentPage * itemsPerPage, tableData.length)} of {tableData.length} products\n                </div>\n                \n                <div className=\"flex items-center gap-2\">\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => setCurrentPage(prev => Math.max(1, prev - 1))}\n                    disabled={currentPage === 1}\n                    className={isDarkMode ? 'border-gray-700 text-gray-300 hover:bg-gray-700' : ''}\n                  >\n                    Previous\n                  </Button>\n                  \n                  <div className=\"flex gap-1\">\n                    {Array.from({ length: totalPages }, (_, i) => i + 1).map((page) => (\n                      <Button\n                        key={page}\n                        variant={currentPage === page ? 'default' : 'outline'}\n                        size=\"sm\"\n                        onClick={() => setCurrentPage(page)}\n                        className={\n                          currentPage === page\n                            ? ''\n                            : isDarkMode \n                            ? 'border-gray-700 text-gray-300 hover:bg-gray-700' \n                            : ''\n                        }\n                      >\n                        {page}\n                      </Button>\n                    ))}\n                  </div>\n                  \n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => setCurrentPage(prev => Math.min(totalPages, prev + 1))}\n                    disabled={currentPage === totalPages}\n                    className={isDarkMode ? 'border-gray-700 text-gray-300 hover:bg-gray-700' : ''}\n                  >\n                    Next\n                  </Button>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 md:gap-6 mt-8\">\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Recent Activity</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {activityData.map((activity, index) => {\n                  const Icon = activity.icon;\n                  return (\n                    <div\n                      key={activity.id}\n                      className=\"flex items-start gap-3 animate-in fade-in slide-in-from-left-2\"\n                      style={{ animationDelay: `${index * 100}ms` }}\n                    >\n                      <div className={`p-2 rounded-full ${isDarkMode ? 'bg-gray-700' : 'bg-gray-100'} flex-shrink-0`}>\n                        <Icon className={`h-4 w-4 ${activity.color}`} />\n                      </div>\n                      <div className=\"flex-1 min-w-0\">\n                        <p className={`text-sm font-medium ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                          {activity.message}\n                        </p>\n                        <p className={`text-xs mt-1 ${isDarkMode ? 'text-gray-500' : 'text-gray-500'}`}>\n                          {activity.timestamp}\n                        </p>\n                      </div>\n                    </div>\n                  );\n                })}\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Quick Stats</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {mockQuickStats.map((stat) => {\n                  const isPositive = stat.change > 0;\n                  const isNegative = stat.change < 0;\n                  \n                  return (\n                    <div \n                      key={stat.id}\n                      className={`p-4 rounded-lg border ${\n                        isDarkMode ? 'bg-gray-700/50 border-gray-600' : 'bg-white border-gray-200'\n                      } hover:shadow-md transition-shadow`}\n                    >\n                      <div className=\"flex items-start justify-between mb-3\">\n                        <div className=\"flex-1\">\n                          <p className={`text-xs font-medium ${\n                            isDarkMode ? 'text-gray-400' : 'text-gray-500'\n                          }`}>\n                            {stat.label}\n                          </p>\n                          <p className={`text-2xl font-bold mt-1 ${\n                            isDarkMode ? 'text-white' : 'text-gray-900'\n                          }`}>\n                            {stat.value}\n                          </p>\n                        </div>\n                        \n                        <div className={`flex items-center gap-1 px-2 py-1 rounded-full text-xs font-semibold ${\n                          isPositive \n                            ? 'bg-green-100 text-green-700 dark:bg-green-900/30 dark:text-green-400'\n                            : isNegative\n                            ? 'bg-red-100 text-red-700 dark:bg-red-900/30 dark:text-red-400'\n                            : 'bg-gray-100 text-gray-700 dark:bg-gray-700 dark:text-gray-400'\n                        }`}>\n                          {isPositive ? (\n                            <TrendingUp className=\"h-3 w-3\" />\n                          ) : isNegative ? (\n                            <TrendingDown className=\"h-3 w-3\" />\n                          ) : null}\n                          {Math.abs(stat.change)}%\n                        </div>\n                      </div>\n                      \n                      <div className=\"h-12\">\n                        <ResponsiveContainer width=\"100%\" height=\"100%\">\n                          <LineChart data={stat.sparklineData.map((value, index) => ({ value, index }))}>\n                            <Line \n                              type=\"monotone\" \n                              dataKey=\"value\" \n                              stroke={\n                                isPositive \n                                  ? '#10b981' \n                                  : isNegative \n                                  ? '#ef4444' \n                                  : '#6b7280'\n                              }\n                              strokeWidth={2}\n                              dot={false}\n                              animationDuration={1000}\n                            />\n                          </LineChart>\n                        </ResponsiveContainer>\n                      </div>\n                    </div>\n                  );\n                })}\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Alerts</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-3\">\n                {mockAlerts.map((alert) => {\n                  const severityConfig = {\n                    info: { icon: Info, bgColor: 'bg-blue-50 dark:bg-blue-900/20', borderColor: 'border-blue-200 dark:border-blue-800', textColor: 'text-blue-700 dark:text-blue-300', iconColor: 'text-blue-500' },\n                    warning: { icon: AlertTriangle, bgColor: 'bg-yellow-50 dark:bg-yellow-900/20', borderColor: 'border-yellow-200 dark:border-yellow-800', textColor: 'text-yellow-700 dark:text-yellow-300', iconColor: 'text-yellow-500' },\n                    success: { icon: CheckCircle, bgColor: 'bg-green-50 dark:bg-green-900/20', borderColor: 'border-green-200 dark:border-green-800', textColor: 'text-green-700 dark:text-green-300', iconColor: 'text-green-500' },\n                    error: { icon: XCircle, bgColor: 'bg-red-50 dark:bg-red-900/20', borderColor: 'border-red-200 dark:border-red-800', textColor: 'text-red-700 dark:text-red-300', iconColor: 'text-red-500' }\n                  };\n\n                  const config = severityConfig[alert.severity];\n                  const Icon = config.icon;\n\n                  return (\n                    <div\n                      key={alert.id}\n                      className={`flex items-start gap-3 p-3 rounded-lg border ${config.bgColor} ${config.borderColor} transition-all hover:shadow-md`}\n                    >\n                      <Icon className={`h-5 w-5 mt-0.5 flex-shrink-0 ${config.iconColor}`} />\n                      <div className=\"flex-1 min-w-0\">\n                        <p className={`text-sm font-medium ${config.textColor}`}>\n                          {alert.message}\n                        </p>\n                        <p className={`text-xs mt-1 ${isDarkMode ? 'text-gray-500' : 'text-gray-500'}`}>\n                          {alert.timestamp}\n                        </p>\n                      </div>\n                      <button\n                        className={`flex-shrink-0 ${config.textColor} hover:opacity-70 transition-opacity`}\n                        aria-label=\"Dismiss alert\"\n                      >\n                        <X className=\"h-4 w-4\" />\n                      </button>\n                    </div>\n                  );\n                })}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}",
  "error": null,
  "overall_score": 59,
  "code_quality_score": 14,
  "architecture_score": 12,
  "performance_score": 16,
  "accessibility_score": 17,
  "metadata": {
    "document_id": "eval_room_0dd54adc6e90",
    "prompt_category": "intermediate",
    "prompt_complexity": 6.0
  },
  "raw_response": {
    "document_id": "eval_room_0dd54adc6e90",
    "mode": "parallel",
    "prompt": "Generate an analytics dashboard page with charts, data tables, real-time updates, dark mode, and responsive design",
    "content": "import { useState, useCallback } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\nimport { Badge } from '@/components/ui/badge';\nimport { ChevronUp, ChevronDown, ChevronsUpDown } from 'lucide-react';\nimport { Moon, Sun, RefreshCw } , TrendingUp, TrendingDown } from 'lucide-react';\n\nimport { TrendingUp, ShoppingCart, UserPlus, DollarSign, Package, AlertCircle } from 'lucide-react';\n\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, Legend } from 'recharts';\nimport { PieChart, Pie, Cell, ResponsiveContainer, Legend, Tooltip } from 'recharts';\nimport { motion } from 'framer-motion';\nimport { TrendingUp, Users } from 'lucide-react';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';\n\n\nimport { TrendingUp, TrendingDown, DollarSign, Users, ShoppingCart, Target, AlertTriangle, Info, CheckCircle, XCircle, X } from 'lucide-react';\n\ninterface MetricData {\n  id: string;\n  label: string;\n  value: number;\n  change: number;\n  trend: 'up' | 'down';\n}\n\ninterface ChartDataPoint {\n  date: string;\n  revenue: number;\n  users: number;\n  orders: number;\n}\n\ninterface TableRow {\n  id: string;\n  product: string;\n  sales: number;\n  revenue: number;\n  status: 'active' | 'pending' | 'inactive';\n}\n\ninterface AlertItem {\n  id: string;\n  message: string;\n  severity: 'info' | 'warning' | 'success' | 'error';\n  timestamp: string;\n}\n\nconst mockMetrics: MetricData[] = [\n  { id: '1', label: 'Total Revenue', value: 45231, change: 12.5, trend: 'up' },\n  { id: '2', label: 'Active Users', value: 2350, change: 8.2, trend: 'up' },\n  { id: '3', label: 'Total Orders', value: 1543, change: -3.1, trend: 'down' },\n  { id: '4', label: 'Conversion Rate', value: 3.24, change: 5.7, trend: 'up' }\n];\n\nconst mockChartData: ChartDataPoint[] = [\n  { date: '2024-01-01', revenue: 12000, users: 450, orders: 230 },\n  { date: '2024-01-02', revenue: 15000, users: 520, orders: 280 },\n  { date: '2024-01-03', revenue: 13500, users: 490, orders: 250 },\n  { date: '2024-01-04', revenue: 18000, users: 610, orders: 320 },\n  { date: '2024-01-05', revenue: 16500, users: 580, orders: 295 },\n  { date: '2024-01-06', revenue: 20000, users: 680, orders: 350 },\n  { date: '2024-01-07', revenue: 22000, users: 720, orders: 380 }\n];\n\nconst mockTableData: TableRow[] = [\n  { id: '1', product: 'Premium Plan', sales: 234, revenue: 23400, status: 'active' },\n  { id: '2', product: 'Basic Plan', sales: 567, revenue: 11340, status: 'active' },\n  { id: '3', product: 'Enterprise Plan', sales: 89, revenue: 44500, status: 'active' },\n  { id: '4', product: 'Starter Plan', sales: 432, revenue: 4320, status: 'pending' },\n  { id: '5', product: 'Pro Plan', sales: 156, revenue: 15600, status: 'inactive' }\n];\n\nconst mockAlerts: AlertItem[] = [\n  { id: '1', message: 'Server response time increased by 15%', severity: 'warning', timestamp: '5 min ago' },\n  { id: '2', message: 'New milestone reached: 10K users!', severity: 'success', timestamp: '1 hour ago' },\n  { id: '3', message: 'Payment gateway experiencing delays', severity: 'error', timestamp: '2 hours ago' },\n  { id: '4', message: 'System maintenance scheduled for tonight', severity: 'info', timestamp: '3 hours ago' }\n];\ninterface QuickStatData {\n  id: string;\n  label: string;\n  value: string;\n  change: number;\n  sparklineData: number[];\n  icon: 'revenue' | 'users' | 'orders' | 'conversion';\n}\n\nconst mockQuickStats: QuickStatData[] = [\n  { \n    id: '1', \n    label: 'Daily Revenue', \n    value: '$3,245', \n    change: 15.3, \n    sparklineData: [2800, 2900, 3100, 2950, 3200, 3150, 3245],\n    icon: 'revenue'\n  },\n  { \n    id: '2', \n    label: 'New Users', \n    value: '142', \n    change: 8.7, \n    sparklineData: [120, 125, 135, 130, 138, 140, 142],\n    icon: 'users'\n  },\n  { \n    id: '3', \n    label: 'Avg Order Value', \n    value: '$87.50', \n    change: -2.4, \n    sparklineData: [92, 90, 89, 88, 87, 88, 87.5],\n    icon: 'orders'\n  },\n  { \n    id: '4', \n    label: 'Bounce Rate', \n    value: '42.3%', \n    change: -5.2, \n    sparklineData: [48, 47, 45, 44, 43, 42.5, 42.3],\n    icon: 'conversion'\n  }\n];\ninterface ActivityItem {\n  id: string;\n  type: 'sale' | 'user' | 'revenue' | 'order' | 'alert';\n  message: string;\n  timestamp: string;\n  icon: any;\n  color: string;\n}\n\nconst mockActivityData: ActivityItem[] = [\n  {\n    id: '1',\n    type: 'sale',\n    message: 'New sale: Enterprise Plan purchased',\n    timestamp: '2 minutes ago',\n    icon: ShoppingCart,\n    color: 'text-green-500'\n  },\n  {\n    id: '2',\n    type: 'user',\n    message: '5 new users registered',\n    timestamp: '15 minutes ago',\n    icon: UserPlus,\n    color: 'text-blue-500'\n  },\n  {\n    id: '3',\n    type: 'revenue',\n    message: 'Revenue milestone: $50k reached',\n    timestamp: '1 hour ago',\n    icon: DollarSign,\n    color: 'text-yellow-500'\n  },\n  {\n    id: '4',\n    type: 'order',\n    message: '12 orders processed successfully',\n    timestamp: '2 hours ago',\n    icon: Package,\n    color: 'text-purple-500'\n  },\n  {\n    id: '5',\n    type: 'alert',\n    message: 'Low stock alert: Premium Plan',\n    timestamp: '3 hours ago',\n    icon: AlertCircle,\n    color: 'text-red-500'\n  },\n  {\n    id: '6',\n    type: 'sale',\n    message: 'New sale: Pro Plan purchased',\n    timestamp: '4 hours ago',\n    icon: TrendingUp,\n    color: 'text-green-500'\n  }\n];\n\nconst CustomTooltip = ({ active, payload, isDark }: any) => {\n  if (active && payload && payload.length) {\n    return (\n      <div className={`p-3 rounded-lg shadow-lg border ${isDark ? 'bg-gray-800 border-gray-700' : 'bg-white border-gray-200'}`}>\n        <p className={`text-sm font-medium mb-2 ${isDark ? 'text-gray-300' : 'text-gray-600'}`}>\n          {payload[0].payload.date}\n        </p>\n        <p className={`text-sm font-semibold ${isDark ? 'text-white' : 'text-gray-900'}`}>\n          Revenue: ${payload[0].value.toLocaleString()}\n        </p>\n      </div>\n    );\n  }\n  return null;\n};\n\nexport default function AnalyticsDashboard() {\n  const [sortColumn, setSortColumn] = useState<keyof TableRow | null>(null);\n  const [sortDirection, setSortDirection] = useState<'asc' | 'desc'>('asc');\n  const [currentPage, setCurrentPage] = useState(1);\n  const itemsPerPage = 3;\n  const [isDarkMode, setIsDarkMode] = useState(false);\n  const [metrics, setMetrics] = useState<MetricData[]>(mockMetrics);\n  const [chartData, setChartData] = useState<ChartDataPoint[]>(mockChartData);\n  const [tableData, setTableData] = useState<TableRow[]>(mockTableData);\n  const [isRefreshing, setIsRefreshing] = useState(false);\n  const [activityData, setActivityData] = useState<ActivityItem[]>(mockActivityData);\n\n  const toggleDarkMode = useCallback(() => {\n    setIsDarkMode(prev => !prev);\n  }, []);\n  const handleSort = useCallback((column: keyof TableRow) => {\n    if (sortColumn === column) {\n      setSortDirection(prev => prev === 'asc' ? 'desc' : 'asc');\n    } else {\n      setSortColumn(column);\n      setSortDirection('asc');\n    }\n  }, [sortColumn]);\n\n  const sortedData = useCallback(() => {\n    if (!sortColumn) return tableData;\n    \n    return [...tableData].sort((a, b) => {\n      const aValue = a[sortColumn];\n      const bValue = b[sortColumn];\n      \n      if (typeof aValue === 'number' && typeof bValue === 'number') {\n        return sortDirection === 'asc' ? aValue - bValue : bValue - aValue;\n      }\n      \n      if (typeof aValue === 'string' && typeof bValue === 'string') {\n        return sortDirection === 'asc' \n          ? aValue.localeCompare(bValue)\n          : bValue.localeCompare(aValue);\n      }\n      \n      return 0;\n    });\n  }, [tableData, sortColumn, sortDirection]);\n\n  const paginatedData = useCallback(() => {\n    const sorted = sortedData();\n    const startIndex = (currentPage - 1) * itemsPerPage;\n    const endIndex = startIndex + itemsPerPage;\n    return sorted.slice(startIndex, endIndex);\n  }, [sortedData, currentPage]);\n\n  const totalPages = Math.ceil(tableData.length / itemsPerPage);\n\n  const getStatusBadge = (status: TableRow['status']) => {\n    const variants = {\n      active: 'default',\n      pending: 'secondary',\n      inactive: 'outline'\n    } as const;\n    \n    const colors = {\n      active: isDarkMode ? 'bg-green-900 text-green-300 border-green-700' : 'bg-green-100 text-green-800 border-green-300',\n      pending: isDarkMode ? 'bg-yellow-900 text-yellow-300 border-yellow-700' : 'bg-yellow-100 text-yellow-800 border-yellow-300',\n      inactive: isDarkMode ? 'bg-gray-700 text-gray-300 border-gray-600' : 'bg-gray-100 text-gray-800 border-gray-300'\n    };\n    \n    return (\n      <Badge variant={variants[status]} className={colors[status]}>\n        {status.charAt(0).toUpperCase() + status.slice(1)}\n      </Badge>\n    );\n  };\n\n  const SortIcon = ({ column }: { column: keyof TableRow }) => {\n    if (sortColumn !== column) {\n      return <ChevronsUpDown className=\"ml-2 h-4 w-4\" />;\n    }\n    return sortDirection === 'asc' \n      ? <ChevronUp className=\"ml-2 h-4 w-4\" />\n      : <ChevronDown className=\"ml-2 h-4 w-4\" />;\n  };\n\n  const handleRefresh = useCallback(() => {\n    setIsRefreshing(true);\n    \n    setTimeout(() => {\n      // Generate updated metrics with random variations\n      const updatedMetrics = mockMetrics.map(metric => ({\n        ...metric,\n        value: metric.value + Math.floor(Math.random() * 200 - 100),\n        change: parseFloat((Math.random() * 20 - 5).toFixed(1)),\n        trend: Math.random() > 0.5 ? 'up' as const : 'down' as const\n      }));\n\n      // Generate updated chart data with random variations\n      const updatedChartData = mockChartData.map(point => ({\n        ...point,\n        revenue: point.revenue + Math.floor(Math.random() * 4000 - 2000),\n        users: point.users + Math.floor(Math.random() * 100 - 50),\n        orders: point.orders + Math.floor(Math.random() * 50 - 25)\n      }));\n\n      // Generate updated table data with random variations\n      const updatedTableData = mockTableData.map(row => ({\n        ...row,\n        sales: row.sales + Math.floor(Math.random() * 40 - 20),\n        revenue: row.revenue + Math.floor(Math.random() * 2000 - 1000)\n      }));\n\n      setMetrics(updatedMetrics);\n      setChartData(updatedChartData);\n      setTableData(updatedTableData);\n      setIsRefreshing(false);\n    }, 1500);</parameter>\n</invoke>\n  }, []);\n\n  return (\n    <div className={`min-h-screen ${isDarkMode ? 'dark bg-gray-900' : 'bg-gray-50'}`}>\n      <div className=\"container mx-auto p-4 md:p-6 lg:p-8\">\n        <div className=\"flex flex-col md:flex-row justify-between items-start md:items-center gap-4 mb-8\">\n          <div>\n            <h1 className={`text-3xl md:text-4xl font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n              Analytics Dashboard\n            </h1>\n            <p className={`mt-2 ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n              Real-time insights and performance metrics\n            </p>\n          </div>\n          \n          <div className=\"flex gap-2\">\n            <Button\n              variant=\"outline\"\n              size=\"icon\"\n              onClick={toggleDarkMode}\n              className={isDarkMode ? 'border-gray-700' : ''}\n            >\n              {isDarkMode ? <Sun className=\"h-5 w-5\" /> : <Moon className=\"h-5 w-5\" />}\n            </Button>\n            \n            <Button\n              variant=\"outline\"\n              onClick={handleRefresh}\n              disabled={isRefreshing}\n              className={isDarkMode ? 'border-gray-700' : ''}\n            >\n              <RefreshCw className={`h-4 w-4 mr-2 ${isRefreshing ? 'animate-spin' : ''}`} />\n              Refresh\n            </Button>\n          </div>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 md:gap-6 mb-8\">\n          {metrics.map((metric, index) => {\n            const Icon = metric.id === '1' ? DollarSign : \n                        metric.id === '2' ? Users : \n                        metric.id === '3' ? ShoppingCart : Target;\n            \n            return (\n              <Card \n                key={metric.id}\n                className={`transition-all duration-300 hover:shadow-lg hover:-translate-y-1 ${\n                  isDarkMode ? 'bg-gray-800 border-gray-700' : 'bg-white'\n                }`}\n                style={{\n                  animation: `fadeInUp 0.5s ease-out ${index * 0.1}s both`\n                }}\n              >\n                <CardHeader className=\"flex flex-row items-center justify-between pb-2\">\n                  <CardTitle className={`text-sm font-medium ${\n                    isDarkMode ? 'text-gray-400' : 'text-gray-600'\n                  }`}>\n                    {metric.label}\n                  </CardTitle>\n                  <div className={`p-2 rounded-lg ${\n                    isDarkMode ? 'bg-gray-700' : 'bg-gray-100'\n                  }`}>\n                    <Icon className={`h-4 w-4 ${\n                      isDarkMode ? 'text-gray-300' : 'text-gray-600'\n                    }`} />\n                  </div>\n                </CardHeader>\n                <CardContent>\n                  <div className={`text-2xl font-bold ${\n                    isDarkMode ? 'text-white' : 'text-gray-900'\n                  }`}>\n                    {metric.id === '1' || metric.id === '4' \n                      ? metric.id === '1' \n                        ? `$${metric.value.toLocaleString()}` \n                        : `${metric.value}%`\n                      : metric.value.toLocaleString()\n                    }\n                  </div>\n                  <div className=\"flex items-center mt-2\">\n                    {metric.trend === 'up' ? (\n                      <TrendingUp className=\"h-4 w-4 text-green-500 mr-1\" />\n                    ) : (\n                      <TrendingDown className=\"h-4 w-4 text-red-500 mr-1\" />\n                    )}\n                    <span className={`text-sm font-medium ${\n                      metric.trend === 'up' ? 'text-green-500' : 'text-red-500'\n                    }`}>\n                      {metric.change > 0 ? '+' : ''}{metric.change}%\n                    </span>\n                    <span className={`text-sm ml-2 ${\n                      isDarkMode ? 'text-gray-400' : 'text-gray-600'\n                    }`}>\n                      vs last period\n                    </span>\n                  </div>\n                </CardContent>\n              </Card>\n            );\n          })}\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-4 md:gap-6 mb-8\">\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Revenue Overview</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Daily revenue trends\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"w-full h-[300px] md:h-[350px]\">\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <LineChart\n                    data={chartData}\n                    margin={{ top: 5, right: 10, left: 0, bottom: 5 }}\n                  >\n                    <CartesianGrid \n                      strokeDasharray=\"3 3\" \n                      stroke={isDarkMode ? '#374151' : '#e5e7eb'}\n                    />\n                    <XAxis \n                      dataKey=\"date\" \n                      stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                      tick={{ fill: isDarkMode ? '#9ca3af' : '#6b7280', fontSize: 12 }}\n                      tickFormatter={(value) => new Date(value).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n                    />\n                    <YAxis \n                      stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                      tick={{ fill: isDarkMode ? '#9ca3af' : '#6b7280', fontSize: 12 }}\n                      tickFormatter={(value) => `$${(value / 1000).toFixed(0)}k`}\n                    />\n                    <Tooltip content={<CustomTooltip isDark={isDarkMode} />} />\n                    <Line \n                      type=\"monotone\" \n                      dataKey=\"revenue\" \n                      stroke=\"#3b82f6\" \n                      strokeWidth={2}\n                      dot={{ fill: '#3b82f6', r: 4 }}\n                      activeDot={{ r: 6, fill: '#2563eb' }}\n                    />\n                  </LineChart>\n                </ResponsiveContainer>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>User Growth</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Active users over time\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"h-[300px] w-full\">\n                <svg width=\"100%\" height=\"100%\" viewBox=\"0 0 700 300\" preserveAspectRatio=\"none\">\n                  <defs>\n                    <linearGradient id=\"userGradient\" x1=\"0\" x2=\"0\" y1=\"0\" y2=\"1\">\n                      <stop offset=\"0%\" stopColor=\"#3b82f6\" stopOpacity=\"0.4\" />\n                      <stop offset=\"100%\" stopColor=\"#3b82f6\" stopOpacity=\"0.05\" />\n                    </linearGradient>\n                  </defs>\n                  \n                  {/* Grid lines */}\n                  {[0, 1, 2, 3, 4].map((i) => (\n                    <line\n                      key={i}\n                      x1=\"0\"\n                      y1={i * 60 + 20}\n                      x2=\"700\"\n                      y2={i * 60 + 20}\n                      stroke={isDarkMode ? '#374151' : '#e5e7eb'}\n                      strokeWidth=\"1\"\n                      opacity=\"0.5\"\n                    />\n                  ))}\n                  \n                  {/* Area path */}\n                  <motion.path\n                    d={`M 0 ${280 - (chartData[0].users / 720) * 260}\n                        L ${100} ${280 - (chartData[1].users / 720) * 260}\n                        L ${200} ${280 - (chartData[2].users / 720) * 260}\n                        L ${300} ${280 - (chartData[3].users / 720) * 260}\n                        L ${400} ${280 - (chartData[4].users / 720) * 260}\n                        L ${500} ${280 - (chartData[5].users / 720) * 260}\n                        L ${600} ${280 - (chartData[6].users / 720) * 260}\n                        L 600 280\n                        L 0 280 Z`}\n                    fill=\"url(#userGradient)\"\n                    initial={{ opacity: 0 }}\n                    animate={{ opacity: 1 }}\n                    transition={{ duration: 0.8, ease: \"easeOut\" }}\n                  />\n                  \n                  {/* Line path */}\n                  <motion.path\n                    d={`M 0 ${280 - (chartData[0].users / 720) * 260}\n                        L ${100} ${280 - (chartData[1].users / 720) * 260}\n                        L ${200} ${280 - (chartData[2].users / 720) * 260}\n                        L ${300} ${280 - (chartData[3].users / 720) * 260}\n                        L ${400} ${280 - (chartData[4].users / 720) * 260}\n                        L ${500} ${280 - (chartData[5].users / 720) * 260}\n                        L ${600} ${280 - (chartData[6].users / 720) * 260}`}\n                    fill=\"none\"\n                    stroke=\"#3b82f6\"\n                    strokeWidth=\"3\"\n                    strokeLinecap=\"round\"\n                    strokeLinejoin=\"round\"\n                    initial={{ pathLength: 0 }}\n                    animate={{ pathLength: 1 }}\n                    transition={{ duration: 1.2, ease: \"easeInOut\" }}\n                  />\n                  \n                  {/* Data points */}\n                  {chartData.map((point, index) => {\n                    const x = index * 100;\n                    const y = 280 - (point.users / 720) * 260;\n                    return (\n                      <motion.g\n                        key={point.date}\n                        initial={{ opacity: 0, scale: 0 }}\n                        animate={{ opacity: 1, scale: 1 }}\n                        transition={{ duration: 0.3, delay: index * 0.1 + 0.5 }}\n                      >\n                        <circle\n                          cx={x}\n                          cy={y}\n                          r=\"5\"\n                          fill=\"#3b82f6\"\n                          stroke={isDarkMode ? '#1f2937' : '#ffffff'}\n                          strokeWidth=\"2\"\n                          className=\"cursor-pointer hover:r-7 transition-all\"\n                        />\n                        <title>{`${point.date}: ${point.users} users`}</title>\n                      </motion.g>\n                    );\n                  })}\n                </svg>\n                \n                {/* X-axis labels */}\n                <div className=\"flex justify-between mt-2 px-1\">\n                  {chartData.map((point, index) => (\n                    <motion.span\n                      key={point.date}\n                      className={`text-xs ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}\n                      initial={{ opacity: 0, y: -10 }}\n                      animate={{ opacity: 1, y: 0 }}\n                      transition={{ duration: 0.3, delay: index * 0.1 + 0.8 }}\n                    >\n                      {new Date(point.date).getDate()}/{new Date(point.date).getMonth() + 1}\n                    </motion.span>\n                  ))}\n                </div>\n                \n                {/* Summary stats */}\n                <motion.div\n                  className=\"flex items-center justify-between mt-4 pt-4 border-t\"\n                  style={{ borderColor: isDarkMode ? '#374151' : '#e5e7eb' }}\n                  initial={{ opacity: 0, y: 20 }}\n                  animate={{ opacity: 1, y: 0 }}\n                  transition={{ duration: 0.5, delay: 1.2 }}\n                >\n                  <div className=\"flex items-center gap-2\">\n                    <Users className={`h-4 w-4 ${isDarkMode ? 'text-blue-400' : 'text-blue-600'}`} />\n                    <span className={`text-sm font-medium ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>\n                      Total Users: {chartData[chartData.length - 1].users}\n                    </span>\n                  </div>\n                  <div className=\"flex items-center gap-1 text-green-600\">\n                    <TrendingUp className=\"h-4 w-4\" />\n                    <span className=\"text-sm font-medium\">\n                      +{Math.round(((chartData[chartData.length - 1].users - chartData[0].users) / chartData[0].users) * 100)}%\n                    </span>\n                  </div>\n                </motion.div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-4 md:gap-6 mb-8\">\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Orders Distribution</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                By product category\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"h-[300px] w-full\">\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <PieChart>\n                    <Pie\n                      data={chartData}\n                      cx=\"50%\"\n                      cy=\"50%\"\n                      labelLine={false}\n                      label={({ name, percent }) => `${name}: ${(percent * 100).toFixed(0)}%`}\n                      outerRadius={80}\n                      fill=\"#8884d8\"\n                      dataKey=\"orders\"\n                      nameKey=\"date\"\n                    >\n                      {chartData.map((entry, index) => (\n                        <Cell \n                          key={`cell-${index}`} \n                          fill={[\n                            '#3b82f6',\n                            '#8b5cf6', \n                            '#ec4899',\n                            '#f59e0b',\n                            '#10b981',\n                            '#06b6d4',\n                            '#6366f1'\n                          ][index % 7]} \n                        />\n                      ))}\n                    </Pie>\n                    <Tooltip \n                      contentStyle={{\n                        backgroundColor: isDarkMode ? '#1f2937' : '#ffffff',\n                        border: isDarkMode ? '1px solid #374151' : '1px solid #e5e7eb',\n                        borderRadius: '6px',\n                        color: isDarkMode ? '#f3f4f6' : '#111827'\n                      }}\n                      formatter={(value: number) => [`${value} orders`, 'Orders']}\n                    />\n                    <Legend \n                      verticalAlign=\"bottom\" \n                      height={36}\n                      wrapperStyle={{\n                        color: isDarkMode ? '#d1d5db' : '#374151'\n                      }}\n                    />\n                  </PieChart>\n                </ResponsiveContainer>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className={`lg:col-span-2 ${isDarkMode ? 'bg-gray-800 border-gray-700' : ''}`}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Performance Metrics</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Combined view of key indicators\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <ResponsiveContainer width=\"100%\" height={300}>\n                <BarChart data={chartData}>\n                  <CartesianGrid \n                    strokeDasharray=\"3 3\" \n                    stroke={isDarkMode ? '#374151' : '#e5e7eb'}\n                  />\n                  <XAxis \n                    dataKey=\"date\" \n                    stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                    tick={{ fill: isDarkMode ? '#9ca3af' : '#6b7280' }}\n                    tickFormatter={(value) => new Date(value).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n                  />\n                  <YAxis \n                    stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                    tick={{ fill: isDarkMode ? '#9ca3af' : '#6b7280' }}\n                  />\n                  <Tooltip \n                    contentStyle={{\n                      backgroundColor: isDarkMode ? '#1f2937' : '#ffffff',\n                      border: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\n                      borderRadius: '8px',\n                      color: isDarkMode ? '#f3f4f6' : '#111827'\n                    }}\n                    labelStyle={{ color: isDarkMode ? '#f3f4f6' : '#111827' }}\n                    formatter={(value: number) => value.toLocaleString()}\n                    labelFormatter={(label) => new Date(label).toLocaleDateString('en-US', { month: 'long', day: 'numeric', year: 'numeric' })}\n                  />\n                  <Legend \n                    wrapperStyle={{ color: isDarkMode ? '#9ca3af' : '#6b7280' }}\n                  />\n                  <Bar \n                    dataKey=\"revenue\" \n                    fill=\"#3b82f6\" \n                    radius={[4, 4, 0, 0]}\n                    name=\"Revenue ($)\"\n                  />\n                  <Bar \n                    dataKey=\"users\" \n                    fill=\"#10b981\" \n                    radius={[4, 4, 0, 0]}\n                    name=\"Users\"\n                  />\n                  <Bar \n                    dataKey=\"orders\" \n                    fill=\"#f59e0b\" \n                    radius={[4, 4, 0, 0]}\n                    name=\"Orders\"\n                  />\n                </BarChart>\n              </ResponsiveContainer>\n            </CardContent>\n          </Card>\n        </div>\n\n        <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n          <CardHeader>\n            <CardTitle className={isDarkMode ? 'text-white' : ''}>Top Products</CardTitle>\n            <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n              Best performing products by revenue\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              <div className=\"overflow-x-auto rounded-md border border-gray-200 dark:border-gray-700\">\n                <Table>\n                  <TableHeader>\n                    <TableRow className={isDarkMode ? 'border-gray-700 hover:bg-gray-750' : ''}>\n                      <TableHead className={isDarkMode ? 'text-gray-300' : ''}>\n                        <Button\n                          variant=\"ghost\"\n                          onClick={() => handleSort('product')}\n                          className={`font-semibold ${isDarkMode ? 'hover:bg-gray-700 text-gray-300' : ''}`}\n                        >\n                          Product\n                          <SortIcon column=\"product\" />\n                        </Button>\n                      </TableHead>\n                      <TableHead className={`text-right ${isDarkMode ? 'text-gray-300' : ''}`}>\n                        <Button\n                          variant=\"ghost\"\n                          onClick={() => handleSort('sales')}\n                          className={`font-semibold ${isDarkMode ? 'hover:bg-gray-700 text-gray-300' : ''}`}\n                        >\n                          Sales\n                          <SortIcon column=\"sales\" />\n                        </Button>\n                      </TableHead>\n                      <TableHead className={`text-right ${isDarkMode ? 'text-gray-300' : ''}`}>\n                        <Button\n                          variant=\"ghost\"\n                          onClick={() => handleSort('revenue')}\n                          className={`font-semibold ${isDarkMode ? 'hover:bg-gray-700 text-gray-300' : ''}`}\n                        >\n                          Revenue\n                          <SortIcon column=\"revenue\" />\n                        </Button>\n                      </TableHead>\n                      <TableHead className={`text-center ${isDarkMode ? 'text-gray-300' : ''}`}>\n                        <Button\n                          variant=\"ghost\"\n                          onClick={() => handleSort('status')}\n                          className={`font-semibold ${isDarkMode ? 'hover:bg-gray-700 text-gray-300' : ''}`}\n                        >\n                          Status\n                          <SortIcon column=\"status\" />\n                        </Button>\n                      </TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {paginatedData().map((row) => (\n                      <TableRow \n                        key={row.id}\n                        className={isDarkMode ? 'border-gray-700 hover:bg-gray-750' : 'hover:bg-gray-50'}\n                      >\n                        <TableCell className={`font-medium ${isDarkMode ? 'text-gray-200' : ''}`}>\n                          {row.product}\n                        </TableCell>\n                        <TableCell className={`text-right ${isDarkMode ? 'text-gray-300' : ''}`}>\n                          {row.sales.toLocaleString()}\n                        </TableCell>\n                        <TableCell className={`text-right ${isDarkMode ? 'text-gray-300' : ''}`}>\n                          ${row.revenue.toLocaleString()}\n                        </TableCell>\n                        <TableCell className=\"text-center\">\n                          {getStatusBadge(row.status)}\n                        </TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              </div>\n\n              <div className=\"flex flex-col sm:flex-row items-center justify-between gap-4\">\n                <div className={`text-sm ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                  Showing {((currentPage - 1) * itemsPerPage) + 1} to {Math.min(currentPage * itemsPerPage, tableData.length)} of {tableData.length} products\n                </div>\n                \n                <div className=\"flex items-center gap-2\">\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => setCurrentPage(prev => Math.max(1, prev - 1))}\n                    disabled={currentPage === 1}\n                    className={isDarkMode ? 'border-gray-700 text-gray-300 hover:bg-gray-700' : ''}\n                  >\n                    Previous\n                  </Button>\n                  \n                  <div className=\"flex gap-1\">\n                    {Array.from({ length: totalPages }, (_, i) => i + 1).map((page) => (\n                      <Button\n                        key={page}\n                        variant={currentPage === page ? 'default' : 'outline'}\n                        size=\"sm\"\n                        onClick={() => setCurrentPage(page)}\n                        className={\n                          currentPage === page\n                            ? ''\n                            : isDarkMode \n                            ? 'border-gray-700 text-gray-300 hover:bg-gray-700' \n                            : ''\n                        }\n                      >\n                        {page}\n                      </Button>\n                    ))}\n                  </div>\n                  \n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => setCurrentPage(prev => Math.min(totalPages, prev + 1))}\n                    disabled={currentPage === totalPages}\n                    className={isDarkMode ? 'border-gray-700 text-gray-300 hover:bg-gray-700' : ''}\n                  >\n                    Next\n                  </Button>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 md:gap-6 mt-8\">\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Recent Activity</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {activityData.map((activity, index) => {\n                  const Icon = activity.icon;\n                  return (\n                    <div\n                      key={activity.id}\n                      className=\"flex items-start gap-3 animate-in fade-in slide-in-from-left-2\"\n                      style={{ animationDelay: `${index * 100}ms` }}\n                    >\n                      <div className={`p-2 rounded-full ${isDarkMode ? 'bg-gray-700' : 'bg-gray-100'} flex-shrink-0`}>\n                        <Icon className={`h-4 w-4 ${activity.color}`} />\n                      </div>\n                      <div className=\"flex-1 min-w-0\">\n                        <p className={`text-sm font-medium ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                          {activity.message}\n                        </p>\n                        <p className={`text-xs mt-1 ${isDarkMode ? 'text-gray-500' : 'text-gray-500'}`}>\n                          {activity.timestamp}\n                        </p>\n                      </div>\n                    </div>\n                  );\n                })}\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Quick Stats</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {mockQuickStats.map((stat) => {\n                  const isPositive = stat.change > 0;\n                  const isNegative = stat.change < 0;\n                  \n                  return (\n                    <div \n                      key={stat.id}\n                      className={`p-4 rounded-lg border ${\n                        isDarkMode ? 'bg-gray-700/50 border-gray-600' : 'bg-white border-gray-200'\n                      } hover:shadow-md transition-shadow`}\n                    >\n                      <div className=\"flex items-start justify-between mb-3\">\n                        <div className=\"flex-1\">\n                          <p className={`text-xs font-medium ${\n                            isDarkMode ? 'text-gray-400' : 'text-gray-500'\n                          }`}>\n                            {stat.label}\n                          </p>\n                          <p className={`text-2xl font-bold mt-1 ${\n                            isDarkMode ? 'text-white' : 'text-gray-900'\n                          }`}>\n                            {stat.value}\n                          </p>\n                        </div>\n                        \n                        <div className={`flex items-center gap-1 px-2 py-1 rounded-full text-xs font-semibold ${\n                          isPositive \n                            ? 'bg-green-100 text-green-700 dark:bg-green-900/30 dark:text-green-400'\n                            : isNegative\n                            ? 'bg-red-100 text-red-700 dark:bg-red-900/30 dark:text-red-400'\n                            : 'bg-gray-100 text-gray-700 dark:bg-gray-700 dark:text-gray-400'\n                        }`}>\n                          {isPositive ? (\n                            <TrendingUp className=\"h-3 w-3\" />\n                          ) : isNegative ? (\n                            <TrendingDown className=\"h-3 w-3\" />\n                          ) : null}\n                          {Math.abs(stat.change)}%\n                        </div>\n                      </div>\n                      \n                      <div className=\"h-12\">\n                        <ResponsiveContainer width=\"100%\" height=\"100%\">\n                          <LineChart data={stat.sparklineData.map((value, index) => ({ value, index }))}>\n                            <Line \n                              type=\"monotone\" \n                              dataKey=\"value\" \n                              stroke={\n                                isPositive \n                                  ? '#10b981' \n                                  : isNegative \n                                  ? '#ef4444' \n                                  : '#6b7280'\n                              }\n                              strokeWidth={2}\n                              dot={false}\n                              animationDuration={1000}\n                            />\n                          </LineChart>\n                        </ResponsiveContainer>\n                      </div>\n                    </div>\n                  );\n                })}\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Alerts</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-3\">\n                {mockAlerts.map((alert) => {\n                  const severityConfig = {\n                    info: { icon: Info, bgColor: 'bg-blue-50 dark:bg-blue-900/20', borderColor: 'border-blue-200 dark:border-blue-800', textColor: 'text-blue-700 dark:text-blue-300', iconColor: 'text-blue-500' },\n                    warning: { icon: AlertTriangle, bgColor: 'bg-yellow-50 dark:bg-yellow-900/20', borderColor: 'border-yellow-200 dark:border-yellow-800', textColor: 'text-yellow-700 dark:text-yellow-300', iconColor: 'text-yellow-500' },\n                    success: { icon: CheckCircle, bgColor: 'bg-green-50 dark:bg-green-900/20', borderColor: 'border-green-200 dark:border-green-800', textColor: 'text-green-700 dark:text-green-300', iconColor: 'text-green-500' },\n                    error: { icon: XCircle, bgColor: 'bg-red-50 dark:bg-red-900/20', borderColor: 'border-red-200 dark:border-red-800', textColor: 'text-red-700 dark:text-red-300', iconColor: 'text-red-500' }\n                  };\n\n                  const config = severityConfig[alert.severity];\n                  const Icon = config.icon;\n\n                  return (\n                    <div\n                      key={alert.id}\n                      className={`flex items-start gap-3 p-3 rounded-lg border ${config.bgColor} ${config.borderColor} transition-all hover:shadow-md`}\n                    >\n                      <Icon className={`h-5 w-5 mt-0.5 flex-shrink-0 ${config.iconColor}`} />\n                      <div className=\"flex-1 min-w-0\">\n                        <p className={`text-sm font-medium ${config.textColor}`}>\n                          {alert.message}\n                        </p>\n                        <p className={`text-xs mt-1 ${isDarkMode ? 'text-gray-500' : 'text-gray-500'}`}>\n                          {alert.timestamp}\n                        </p>\n                      </div>\n                      <button\n                        className={`flex-shrink-0 ${config.textColor} hover:opacity-70 transition-opacity`}\n                        aria-label=\"Dismiss alert\"\n                      >\n                        <X className=\"h-4 w-4\" />\n                      </button>\n                    </div>\n                  );\n                })}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}",
    "error": null,
    "elapsed_time": 89.35491561889648,
    "success": true
  }
}