{
  "prompt_id": "algorithm_visualizer",
  "prompt_name": "Algorithm Visualizer",
  "mode": "parallel",
  "run_number": 24,
  "timestamp": "2025-10-14T03:04:41.603937",
  "response_time": 94.38204908370972,
  "total_tokens": null,
  "response_content": "import { useState, useCallback } from 'react';\nimport { useEffect } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Slider } from '@/components/ui/slider';\nimport { Play, Pause, RotateCcw, Zap, BarChart3 } from 'lucide-react';\nimport { motion } from 'framer-motion';\n\ninterface ArrayElement {\n  value: number;\n  id: string;\n  isComparing?: boolean;\n  isSwapping?: boolean;\n  isSorted?: boolean;\n}\n\ninterface AlgorithmStep {\n  array: ArrayElement[];\n  comparingIndices: number[];\n  swappingIndices: number[];\n  sortedIndices: number[];\n}\n\ntype AlgorithmType = 'bubble' | 'quick' | 'merge' | 'insertion';\n\nconst NEON_COLORS = [\n  '#00ffff',\n  '#ff00ff', \n  '#00ff00',\n  '#ffff00',\n  '#ff0066',\n  '#00ffaa'\n];\n\nconst mockAlgorithms = [\n  { id: 'bubble', name: 'Bubble Sort', complexity: 'O(n\u00b2)' },\n  { id: 'quick', name: 'Quick Sort', complexity: 'O(n log n)' },\n  { id: 'merge', name: 'Merge Sort', complexity: 'O(n log n)' },\n  { id: 'insertion', name: 'Insertion Sort', complexity: 'O(n\u00b2)' }\n];\n\nconst useAnimationLoop = (\n  steps: AlgorithmStep[],\n  speed: number,\n  isPlaying: boolean,\n  currentStep: number,\n  setCurrentStep: (step: number) => void,\n  setArray: (array: ArrayElement[]) => void,\n  setIsPlaying: (playing: boolean) => void\n) => {\n  const [animationId, setAnimationId] = useState<NodeJS.Timeout | null>(null);\n\n  const stopAnimation = useCallback(() => {\n    if (animationId) {\n      clearTimeout(animationId);\n      setAnimationId(null);\n    }\n  }, [animationId]);\n\n  const runStep = useCallback(() => {\n    if (currentStep >= steps.length) {\n      setIsPlaying(false);\n      return;\n    }\n\n    const step = steps[currentStep];\n    setArray(step.array);\n    setCurrentStep(currentStep + 1);\n\n    const delay = 1000 - speed * 9.5; // Convert speed (0-100) to delay (1000ms-50ms)\n    const timeoutId = setTimeout(() => {\n      if (currentStep + 1 < steps.length) {\n        runStep();\n      } else {\n        setIsPlaying(false);\n      }\n    }, delay);\n\n    setAnimationId(timeoutId);\n  }, [currentStep, steps, speed, setArray, setCurrentStep, setIsPlaying]);\n\n  return { runStep, stopAnimation };\n};\n\nexport default function AlgorithmVisualizer() {\n  const [array, setArray] = useState<ArrayElement[]>([]);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [speed, setSpeed] = useState([50]);\n  const [arraySize, setArraySize] = useState([20]);\n  const [selectedAlgorithm, setSelectedAlgorithm] = useState<AlgorithmType>('bubble');\n  const [currentStep, setCurrentStep] = useState(0);\n  const [steps, setSteps] = useState<AlgorithmStep[]>([]);\n  const { runStep, stopAnimation } = useAnimationLoop(\n    steps,\n    speed[0],\n    isPlaying,\n    currentStep,\n    setCurrentStep,\n    setArray,\n    setIsPlaying\n  );\n\n  const generateRandomArray = useCallback(() => {\n    const newArray: ArrayElement[] = Array.from({ length: arraySize[0] }, (_, index) => ({\n      value: Math.floor(Math.random() * 100) + 1,\n      id: `element-${Date.now()}-${index}`,\n      isComparing: false,\n      isSwapping: false,\n      isSorted: false\n    }));\n    setArray(newArray);\n    setSteps([]);\n    setCurrentStep(0);\n    setIsPlaying(false);\n  }, [arraySize]);\n\n  const resetVisualization = useCallback(() => {\n\n    setIsPlaying(false);\n    setCurrentStep(0);\n    setSteps([]);\n    generateRandomArray();\n  }, [generateRandomArray]);\n\n  const startVisualization = useCallback(() => {\n    if (steps.length === 0 || currentStep >= steps.length) {\n      return;\n    }\n\n    setIsPlaying(true);\n    runStep();\n  }, [steps, speed, currentStep]);\n\n  const pauseVisualization = useCallback(() => {\n    setIsPlaying(false);\n\n  }, []);\n\n  const generateSortingSteps = useCallback((algorithm: AlgorithmType) => {\n    const sortedArray = [...array];\n    const allSteps: AlgorithmStep[] = [];\n\n    const addStep = (arr: ArrayElement[], comparing: number[] = [], swapping: number[] = [], sorted: number[] = []) => {\n      allSteps.push({\n        array: arr.map(el => ({ ...el })),\n        comparingIndices: [...comparing],\n        swappingIndices: [...swapping],\n        sortedIndices: [...sorted]\n      });\n    };\n\n    // Initial state\n    addStep(sortedArray);\n\n    switch (algorithm) {\n      case 'bubble': {\n        const n = sortedArray.length;\n        const sortedSet = new Set<number>();\n        \n        for (let i = 0; i < n - 1; i++) {\n          for (let j = 0; j < n - i - 1; j++) {\n            // Comparing\n            addStep(sortedArray, [j, j + 1], [], Array.from(sortedSet));\n            \n            if (sortedArray[j].value > sortedArray[j + 1].value) {\n              // Swapping\n              addStep(sortedArray, [], [j, j + 1], Array.from(sortedSet));\n              [sortedArray[j], sortedArray[j + 1]] = [sortedArray[j + 1], sortedArray[j]];\n              addStep(sortedArray, [], [], Array.from(sortedSet));\n            }\n          }\n          sortedSet.add(n - i - 1);\n          addStep(sortedArray, [], [], Array.from(sortedSet));\n        }\n        sortedSet.add(0);\n        addStep(sortedArray, [], [], Array.from(sortedSet));\n        break;\n      }\n\n      case 'insertion': {\n        const n = sortedArray.length;\n        const sortedSet = new Set<number>([0]);\n        addStep(sortedArray, [], [], [0]);\n\n        for (let i = 1; i < n; i++) {\n          const key = sortedArray[i];\n          let j = i - 1;\n\n          addStep(sortedArray, [i], [], Array.from(sortedSet));\n\n          while (j >= 0 && sortedArray[j].value > key.value) {\n            addStep(sortedArray, [j, j + 1], [], Array.from(sortedSet));\n            addStep(sortedArray, [], [j, j + 1], Array.from(sortedSet));\n            sortedArray[j + 1] = sortedArray[j];\n            addStep(sortedArray, [], [], Array.from(sortedSet));\n            j--;\n          }\n\n          sortedArray[j + 1] = key;\n          sortedSet.add(i);\n          addStep(sortedArray, [], [], Array.from(sortedSet));\n        }\n        break;\n      }\n\n      case 'quick': {\n        const sortedSet = new Set<number>();\n\n        const partition = (low: number, high: number): number => {\n          const pivot = sortedArray[high];\n          addStep(sortedArray, [high], [], Array.from(sortedSet));\n          let i = low - 1;\n\n          for (let j = low; j < high; j++) {\n            addStep(sortedArray, [j, high], [], Array.from(sortedSet));\n            \n            if (sortedArray[j].value < pivot.value) {\n              i++;\n              if (i !== j) {\n                addStep(sortedArray, [], [i, j], Array.from(sortedSet));\n                [sortedArray[i], sortedArray[j]] = [sortedArray[j], sortedArray[i]];\n                addStep(sortedArray, [], [], Array.from(sortedSet));\n              }\n            }\n          }\n\n          addStep(sortedArray, [], [i + 1, high], Array.from(sortedSet));\n          [sortedArray[i + 1], sortedArray[high]] = [sortedArray[high], sortedArray[i + 1]];\n          sortedSet.add(i + 1);\n          addStep(sortedArray, [], [], Array.from(sortedSet));\n          \n          return i + 1;\n        };\n\n        const quickSort = (low: number, high: number) => {\n          if (low < high) {\n            const pi = partition(low, high);\n            quickSort(low, pi - 1);\n            quickSort(pi + 1, high);\n          } else if (low === high) {\n            sortedSet.add(low);\n            addStep(sortedArray, [], [], Array.from(sortedSet));\n          }\n        };\n\n        quickSort(0, sortedArray.length - 1);\n        break;\n      }\n\n      case 'merge': {\n        const sortedSet = new Set<number>();\n\n        const merge = (left: number, mid: number, right: number) => {\n          const leftArr = sortedArray.slice(left, mid + 1);\n          const rightArr = sortedArray.slice(mid + 1, right + 1);\n          \n          let i = 0, j = 0, k = left;\n          const comparingRange = Array.from({ length: right - left + 1 }, (_, idx) => left + idx);\n\n          while (i < leftArr.length && j < rightArr.length) {\n            addStep(sortedArray, comparingRange, [], Array.from(sortedSet));\n            \n            if (leftArr[i].value <= rightArr[j].value) {\n              sortedArray[k] = leftArr[i];\n              i++;\n            } else {\n              sortedArray[k] = rightArr[j];\n              j++;\n            }\n            addStep(sortedArray, [], [k], Array.from(sortedSet));\n            k++;\n          }\n\n          while (i < leftArr.length) {\n            sortedArray[k] = leftArr[i];\n            addStep(sortedArray, [], [k], Array.from(sortedSet));\n            i++;\n            k++;\n          }\n\n          while (j < rightArr.length) {\n            sortedArray[k] = rightArr[j];\n            addStep(sortedArray, [], [k], Array.from(sortedSet));\n            j++;\n            k++;\n          }\n\n          for (let idx = left; idx <= right; idx++) {\n            sortedSet.add(idx);\n          }\n          addStep(sortedArray, [], [], Array.from(sortedSet));\n        };\n\n        const mergeSort = (left: number, right: number) => {\n          if (left < right) {\n            const mid = Math.floor((left + right) / 2);\n            mergeSort(left, mid);\n            mergeSort(mid + 1, right);\n            merge(left, mid, right);\n          } else if (left === right) {\n            sortedSet.add(left);\n            addStep(sortedArray, [], [], Array.from(sortedSet));\n          }\n        };\n\n        mergeSort(0, sortedArray.length - 1);\n        break;\n      }\n    }\n\n    setSteps(allSteps);\n    setCurrentStep(0);\n  }, [array]);\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-gray-900 via-purple-900 to-gray-900 p-8\">\n      <div className=\"max-w-7xl mx-auto space-y-8\">\n        <motion.div\n          initial={{ opacity: 0, y: -20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.8 }}\n          className=\"text-center space-y-4\"\n        >\n          <motion.h1\n            className=\"text-6xl font-bold bg-gradient-to-r from-cyan-400 via-purple-400 to-pink-400 bg-clip-text text-transparent\"\n            animate={{\n              textShadow: [\n                '0 0 20px rgba(0, 255, 255, 0.5)',\n                '0 0 40px rgba(255, 0, 255, 0.5)',\n                '0 0 20px rgba(0, 255, 255, 0.5)'\n              ]\n            }}\n            transition={{ duration: 2, repeat: Infinity }}\n          >\n            Algorithm Visualizer\n          </motion.h1>\n          \n          <div className=\"flex items-center justify-center gap-4\">\n            <motion.div\n              initial={{ scale: 0 }}\n              animate={{ scale: 1 }}\n              transition={{ delay: 0.3, type: 'spring' }}\n              className=\"px-6 py-2 bg-purple-500/20 border border-purple-400/50 rounded-full backdrop-blur-sm\"\n            >\n              <span className=\"text-2xl font-semibold text-purple-300\">\n                {mockAlgorithms.find(a => a.id === selectedAlgorithm)?.name || 'Bubble Sort'}\n              </span>\n            </motion.div>\n            \n            <motion.div\n              initial={{ scale: 0 }}\n              animate={{ scale: 1 }}\n              transition={{ delay: 0.5, type: 'spring' }}\n              className=\"px-4 py-2 bg-cyan-500/20 border border-cyan-400/50 rounded-full backdrop-blur-sm relative overflow-hidden\"\n            >\n              <motion.div\n                className=\"absolute inset-0 bg-gradient-to-r from-transparent via-cyan-400/20 to-transparent\"\n                animate={{ x: ['-100%', '200%'] }}\n                transition={{ duration: 2, repeat: Infinity, ease: 'linear' }}\n              />\n              <div className=\"relative flex items-center gap-2\">\n                <BarChart3 className=\"w-4 h-4 text-cyan-400\" />\n                <span className=\"text-sm font-mono text-cyan-300\">\n                  {mockAlgorithms.find(a => a.id === selectedAlgorithm)?.complexity || 'O(n\u00b2)'}\n                </span>\n              </div>\n            </motion.div>\n          </div>\n        </motion.div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-6\">\n          <div className=\"lg:col-span-1 space-y-6\">\n            <motion.div\n              initial={{ opacity: 0, x: -50 }}\n              animate={{ opacity: 1, x: 0 }}\n              transition={{ duration: 0.6 }}\n              className=\"bg-gray-800/50 backdrop-blur-lg rounded-2xl p-6 border border-cyan-500/30 shadow-[0_0_30px_rgba(0,255,255,0.3)] hover:shadow-[0_0_50px_rgba(0,255,255,0.5)] transition-all duration-300\"\n            >\n              <div className=\"space-y-6\">\n                {/* Algorithm Selection */}\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center gap-2 text-cyan-400 font-semibold\">\n                    <Zap className=\"w-5 h-5\" />\n                    <span className=\"text-sm uppercase tracking-wider\">Algorithm</span>\n                  </div>\n                  <div className=\"grid grid-cols-1 gap-2\">\n                    {mockAlgorithms.map((algo) => (\n                      <button\n                        key={algo.id}\n                        onClick={() => {\n                          setSelectedAlgorithm(algo.id as AlgorithmType);\n                          generateSortingSteps(algo.id as AlgorithmType);\n                        }}\n                        disabled={isPlaying}\n                        className={`p-3 rounded-lg border transition-all duration-300 text-left ${\n                          selectedAlgorithm === algo.id\n                            ? 'bg-cyan-500/20 border-cyan-400 shadow-[0_0_20px_rgba(0,255,255,0.4)]'\n                            : 'bg-gray-700/30 border-gray-600 hover:border-cyan-500/50 hover:bg-gray-700/50'\n                        } disabled:opacity-50 disabled:cursor-not-allowed`}\n                      >\n                        <div className=\"font-medium text-white\">{algo.name}</div>\n                        <div className=\"text-xs text-gray-400 mt-1\">{algo.complexity}</div>\n                      </button>\n                    ))}\n                  </div>\n                </div>\n\n                {/* Speed Control */}\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center gap-2 text-purple-400 font-semibold\">\n                      <Zap className=\"w-5 h-5\" />\n                      <span className=\"text-sm uppercase tracking-wider\">Speed</span>\n                    </div>\n                    <span className=\"text-white font-mono text-sm bg-purple-500/20 px-3 py-1 rounded-full border border-purple-400/30\">\n                      {speed[0]}%\n                    </span>\n                  </div>\n                  <Slider\n                    value={speed}\n                    onValueChange={setSpeed}\n                    min={10}\n                    max={100}\n                    step={10}\n                    disabled={isPlaying}\n                    className=\"cursor-pointer\"\n                  />\n                </div>\n\n                {/* Array Size Control */}\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center gap-2 text-pink-400 font-semibold\">\n                      <BarChart3 className=\"w-5 h-5\" />\n                      <span className=\"text-sm uppercase tracking-wider\">Array Size</span>\n                    </div>\n                    <span className=\"text-white font-mono text-sm bg-pink-500/20 px-3 py-1 rounded-full border border-pink-400/30\">\n                      {arraySize[0]}\n                    </span>\n                  </div>\n                  <Slider\n                    value={arraySize}\n                    onValueChange={setArraySize}\n                    min={5}\n                    max={50}\n                    step={5}\n                    disabled={isPlaying}\n                    className=\"cursor-pointer\"\n                  />\n                </div>\n\n                {/* Control Buttons */}\n                <div className=\"space-y-3 pt-4 border-t border-gray-700\">\n                  <Button\n                    onClick={isPlaying ? pauseVisualization : startVisualization}\n                    disabled={steps.length === 0 || (currentStep >= steps.length && !isPlaying)}\n                    className=\"w-full bg-gradient-to-r from-cyan-500 to-blue-500 hover:from-cyan-400 hover:to-blue-400 text-white font-semibold py-6 rounded-xl shadow-[0_0_20px_rgba(0,255,255,0.5)] hover:shadow-[0_0_30px_rgba(0,255,255,0.7)] transition-all duration-300 disabled:opacity-50 disabled:cursor-not-allowed\"\n                  >\n                    {isPlaying ? (\n                      <div className=\"flex items-center justify-center gap-2\">\n                        <Pause className=\"w-5 h-5\" />\n                        <span>Pause</span>\n                      </div>\n                    ) : (\n                      <div className=\"flex items-center justify-center gap-2\">\n                        <Play className=\"w-5 h-5\" />\n                        <span>Play</span>\n                      </div>\n                    )}\n                  </Button>\n\n                  <Button\n                    onClick={resetVisualization}\n                    disabled={isPlaying}\n                    className=\"w-full bg-gradient-to-r from-purple-500 to-pink-500 hover:from-purple-400 hover:to-pink-400 text-white font-semibold py-6 rounded-xl shadow-[0_0_20px_rgba(255,0,255,0.5)] hover:shadow-[0_0_30px_rgba(255,0,255,0.7)] transition-all duration-300 disabled:opacity-50 disabled:cursor-not-allowed\"\n                  >\n                    <div className=\"flex items-center justify-center gap-2\">\n                      <RotateCcw className=\"w-5 h-5\" />\n                      <span>Reset</span>\n                    </div>\n                  </Button>\n                </div>\n\n                {/* Progress Indicator */}\n                {steps.length > 0 && (\n                  <div className=\"space-y-2 pt-4 border-t border-gray-700\">\n                    <div className=\"flex items-center justify-between text-sm\">\n                      <span className=\"text-gray-400\">Progress</span>\n                      <span className=\"text-cyan-400 font-mono\">\n                        {currentStep} / {steps.length}\n                      </span>\n                    </div>\n                    <div className=\"w-full h-2 bg-gray-700 rounded-full overflow-hidden\">\n                      <motion.div\n                        className=\"h-full bg-gradient-to-r from-cyan-500 to-purple-500 shadow-[0_0_10px_rgba(0,255,255,0.8)]\"\n                        initial={{ width: 0 }}\n                        animate={{ width: `${(currentStep / steps.length) * 100}%` }}\n                        transition={{ duration: 0.3 }}\n                      />\n                    </div>\n                  </div>\n                )}\n              </div>\n            </motion.div>\n            \n            <div className=\"bg-gray-800/50 backdrop-blur-lg rounded-2xl p-6 border border-cyan-500/30 shadow-lg shadow-cyan-500/20\">\n              <div className=\"space-y-6\">\n                <div>\n                  <h3 className=\"text-cyan-400 font-semibold mb-4 flex items-center gap-2\">\n                    <Zap className=\"w-5 h-5\" />\n                    Algorithm\n                  </h3>\n                  <div className=\"grid grid-cols-2 gap-3\">\n                    {mockAlgorithms.map((algo) => (\n                      <motion.button\n                        key={algo.id}\n                        onClick={() => {\n                          setSelectedAlgorithm(algo.id as AlgorithmType);\n                          setSteps([]);\n                          setCurrentStep(0);\n                          setIsPlaying(false);\n                        }}\n                        className={`relative p-3 rounded-lg font-medium text-sm transition-all duration-300 ${\n                          selectedAlgorithm === algo.id\n                            ? 'bg-cyan-500/20 text-cyan-300 border-2 border-cyan-400 shadow-lg shadow-cyan-500/50'\n                            : 'bg-gray-700/50 text-gray-300 border border-gray-600 hover:border-cyan-500/50 hover:shadow-md hover:shadow-cyan-500/30'\n                        }`}\n                        whileHover={{ scale: 1.05 }}\n                        whileTap={{ scale: 0.95 }}\n                      >\n                        <div className=\"flex flex-col items-center gap-1\">\n                          <span className=\"font-semibold\">{algo.name.split(' ')[0]}</span>\n                          <span className=\"text-xs opacity-70\">{algo.complexity}</span>\n                        </div>\n                        {selectedAlgorithm === algo.id && (\n                          <motion.div\n                            className=\"absolute inset-0 rounded-lg bg-cyan-400/10\"\n                            layoutId=\"algorithmGlow\"\n                            transition={{ type: \"spring\", bounce: 0.2, duration: 0.6 }}\n                          />\n                        )}\n                      </motion.button>\n                    ))}\n                  </div>\n                </div>\n\n                <div>\n                  <h3 className=\"text-cyan-400 font-semibold mb-4\">Speed</h3>\n                  <Slider\n                    value={speed}\n                    onValueChange={setSpeed}\n                    min={1}\n                    max={100}\n                    step={1}\n                    className=\"[&_[role=slider]]:bg-cyan-400 [&_[role=slider]]:border-cyan-300 [&_[role=slider]]:shadow-lg [&_[role=slider]]:shadow-cyan-400/50 [&_[role=slider]]:transition-shadow [&_[role=slider]]:hover:shadow-cyan-400/80 [&_.relative]:bg-gray-700 [&_.relative]:rounded-full [&_.bg-primary]:bg-gradient-to-r [&_.bg-primary]:from-cyan-500 [&_.bg-primary]:to-purple-500\"\n                  />\n                  <div className=\"flex justify-between text-xs text-gray-400 mt-2\">\n                    <span>Slow</span>\n                    <span className=\"text-cyan-400 font-semibold\">{speed[0]}%</span>\n                    <span>Fast</span>\n                  </div></parameter>\n</invoke>\n                </div>\n\n                <div>\n                  <h3 className=\"text-cyan-400 font-semibold mb-4\">Array Size</h3>\n                  <div className=\"space-y-3\">\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"text-sm text-gray-400\">Elements</span>\n                      <motion.span \n                        key={arraySize[0]}\n                        initial={{ scale: 1.3, color: '#00ffff' }}\n                        animate={{ scale: 1, color: '#ffffff' }}\n                        className=\"text-lg font-bold text-white\"\n                      >\n                        {arraySize[0]}\n                      </motion.span>\n                    </div>\n                    <div className=\"relative\">\n                      <Slider\n                        value={arraySize}\n                        onValueChange={setArraySize}\n                        min={5}\n                        max={50}\n                        step={1}\n                        disabled={isPlaying}\n                        className=\"cursor-pointer [&_[role=slider]]:bg-gradient-to-r [&_[role=slider]]:from-cyan-400 [&_[role=slider]]:to-purple-500 [&_[role=slider]]:border-2 [&_[role=slider]]:border-white [&_[role=slider]]:shadow-lg [&_[role=slider]]:shadow-cyan-400/50 [&_[role=slider]]:transition-shadow hover:[&_[role=slider]]:shadow-xl hover:[&_[role=slider]]:shadow-cyan-400/70 [&>span]:bg-gradient-to-r [&>span]:from-cyan-500/30 [&>span]:to-purple-500/30\"\n                      />\n                      <div className=\"absolute inset-0 bg-gradient-to-r from-cyan-500/10 to-purple-500/10 rounded-full blur-sm -z-10\" />\n                    </div>\n                  </div></parameter>\n</invoke>\n                </div>\n\n                <div className=\"space-y-3 pt-4 border-t border-cyan-500/20\">\n                  <Button\n                    onClick={isPlaying ? pauseVisualization : startVisualization}\n                    disabled={array.length === 0 || (steps.length === 0 && !isPlaying)}\n                    className=\"w-full bg-gradient-to-r from-cyan-500 to-blue-500 hover:from-cyan-400 hover:to-blue-400 text-white font-semibold py-6 rounded-xl shadow-lg shadow-cyan-500/50 hover:shadow-cyan-500/80 transition-all duration-300 disabled:opacity-50 disabled:cursor-not-allowed disabled:shadow-none group\"\n                  >\n                    <motion.div\n                      className=\"flex items-center justify-center gap-2\"\n                      whileHover={{ scale: 1.05 }}\n                      whileTap={{ scale: 0.95 }}\n                    >\n                      {isPlaying ? (\n                        <>\n                          <motion.div\n                            initial={{ rotate: 0 }}\n                            animate={{ rotate: 360 }}\n                            transition={{ duration: 2, repeat: Infinity, ease: \"linear\" }}\n                          >\n                            <Pause className=\"w-5 h-5\" />\n                          </motion.div>\n                          <span>Pause</span>\n                        </>\n                      ) : (\n                        <>\n                          <motion.div\n                            animate={{ \n                              x: [0, 3, 0],\n                              filter: [\n                                \"drop-shadow(0 0 0px rgba(0,255,255,0))\",\n                                \"drop-shadow(0 0 8px rgba(0,255,255,0.8))\",\n                                \"drop-shadow(0 0 0px rgba(0,255,255,0))\"\n                              ]\n                            }}\n                            transition={{ \n                              duration: 1.5, \n                              repeat: Infinity,\n                              ease: \"easeInOut\"\n                            }}\n                          >\n                            <Play className=\"w-5 h-5 fill-current\" />\n                          </motion.div>\n                          <span>Start</span>\n                        </>\n                      )}\n                    </motion.div>\n                  </Button>\n\n                  <Button\n                    onClick={resetVisualization}\n                    variant=\"outline\"\n                    className=\"w-full border-2 border-purple-500/50 bg-purple-500/10 hover:bg-purple-500/20 text-purple-300 hover:text-purple-200 font-semibold py-6 rounded-xl shadow-lg shadow-purple-500/30 hover:shadow-purple-500/60 transition-all duration-300 group\"\n                  >\n                    <motion.div\n                      className=\"flex items-center justify-center gap-2\"\n                      whileHover={{ scale: 1.05 }}\n                      whileTap={{ scale: 0.95 }}\n                    >\n                      <motion.div\n                        whileHover={{ \n                          rotate: -360,\n                          filter: \"drop-shadow(0 0 8px rgba(168,85,247,0.8))\"\n                        }}\n                        transition={{ duration: 0.6, ease: \"easeInOut\" }}\n                      >\n                        <RotateCcw className=\"w-5 h-5\" />\n                      </motion.div>\n                      <span>Reset</span>\n                    </motion.div>\n                  </Button>\n\n                  <Button\n                    onClick={() => {\n                      generateSortingSteps(selectedAlgorithm);\n                    }}\n                    disabled={array.length === 0 || isPlaying}\n                    className=\"w-full bg-gradient-to-r from-purple-500 to-pink-500 hover:from-purple-400 hover:to-pink-400 text-white font-semibold py-6 rounded-xl shadow-lg shadow-purple-500/50 hover:shadow-purple-500/80 transition-all duration-300 disabled:opacity-50 disabled:cursor-not-allowed disabled:shadow-none\"\n                  >\n                    <motion.div\n                      className=\"flex items-center justify-center gap-2\"\n                      whileHover={{ scale: 1.05 }}\n                      whileTap={{ scale: 0.95 }}\n                    >\n                      <motion.div\n                        animate={{ \n                          scale: [1, 1.2, 1],\n                          filter: [\n                            \"drop-shadow(0 0 0px rgba(255,0,255,0))\",\n                            \"drop-shadow(0 0 10px rgba(255,0,255,0.9))\",\n                            \"drop-shadow(0 0 0px rgba(255,0,255,0))\"\n                          ]\n                        }}\n                        transition={{ \n                          duration: 2, \n                          repeat: Infinity,\n                          ease: \"easeInOut\"\n                        }}\n                      >\n                        <Zap className=\"w-5 h-5\" />\n                      </motion.div>\n                      <span>Generate Steps</span>\n                    </motion.div>\n                  </Button>\n                </div>\n              </div>\n            </div>\n\n            <motion.div\n              initial={{ opacity: 0, x: -50 }}\n              animate={{ opacity: 1, x: 0 }}\n              transition={{ duration: 0.6, delay: 0.2 }}\n              className=\"bg-gray-800/50 backdrop-blur-lg rounded-2xl p-6 border border-purple-500/30 shadow-[0_0_30px_rgba(168,85,247,0.3)] hover:shadow-[0_0_50px_rgba(168,85,247,0.5)] transition-all duration-300\"\n            >\n              <div className=\"space-y-4\">\n                <div className=\"flex items-center gap-2 text-purple-400 font-semibold mb-4\">\n                  <BarChart3 className=\"w-5 h-5\" />\n                  <span className=\"text-sm uppercase tracking-wider\">Statistics</span>\n                </div>\n\n                <div className=\"space-y-4\">\n                  {/* Comparisons */}\n                  <div className=\"bg-gray-700/30 rounded-lg p-4 border border-cyan-500/20\">\n                    <div className=\"flex items-center justify-between mb-2\">\n                      <span className=\"text-sm text-gray-400\">Comparisons</span>\n                      <motion.span\n                        key={steps[currentStep]?.comparingIndices.length || 0}\n                        initial={{ scale: 1.3, color: '#00ffff' }}\n                        animate={{ scale: 1, color: '#ffffff' }}\n                        className=\"text-2xl font-bold text-cyan-400\"\n                      >\n                        {currentStep > 0 ? currentStep : 0}\n                      </motion.span>\n                    </div>\n                    <div className=\"h-2 bg-gray-800 rounded-full overflow-hidden\">\n                      <motion.div\n                        className=\"h-full bg-gradient-to-r from-cyan-500 to-cyan-400 shadow-lg shadow-cyan-500/50\"\n                        initial={{ width: 0 }}\n                        animate={{ \n                          width: steps.length > 0 ? `${(currentStep / steps.length) * 100}%` : '0%'\n                        }}\n                        transition={{ duration: 0.3 }}\n                      />\n                    </div>\n                  </div>\n\n                  {/* Swaps */}\n                  <div className=\"bg-gray-700/30 rounded-lg p-4 border border-pink-500/20\">\n                    <div className=\"flex items-center justify-between mb-2\">\n                      <span className=\"text-sm text-gray-400\">Swaps</span>\n                      <motion.span\n                        key={steps[currentStep]?.swappingIndices.length || 0}\n                        initial={{ scale: 1.3, color: '#ff00ff' }}\n                        animate={{ scale: 1, color: '#ffffff' }}\n                        className=\"text-2xl font-bold text-pink-400\"\n                      >\n                        {steps.slice(0, currentStep).filter(s => s.swappingIndices.length > 0).length}\n                      </motion.span>\n                    </div>\n                    <div className=\"h-2 bg-gray-800 rounded-full overflow-hidden\">\n                      <motion.div\n                        className=\"h-full bg-gradient-to-r from-pink-500 to-pink-400 shadow-lg shadow-pink-500/50\"\n                        initial={{ width: 0 }}\n                        animate={{ \n                          width: steps.length > 0 \n                            ? `${(steps.slice(0, currentStep).filter(s => s.swappingIndices.length > 0).length / Math.max(steps.filter(s => s.swappingIndices.length > 0).length, 1)) * 100}%` \n                            : '0%'\n                        }}\n                        transition={{ duration: 0.3 }}\n                      />\n                    </div>\n                  </div>\n\n                  {/* Progress */}\n                  <div className=\"bg-gray-700/30 rounded-lg p-4 border border-purple-500/20\">\n                    <div className=\"flex items-center justify-between mb-2\">\n                      <span className=\"text-sm text-gray-400\">Progress</span>\n                      <motion.span\n                        key={currentStep}\n                        initial={{ scale: 1.3, color: '#a855f7' }}\n                        animate={{ scale: 1, color: '#ffffff' }}\n                        className=\"text-2xl font-bold text-purple-400\"\n                      >\n                        {steps.length > 0 ? Math.round((currentStep / steps.length) * 100) : 0}%\n                      </motion.span>\n                    </div>\n                    <div className=\"h-2 bg-gray-800 rounded-full overflow-hidden\">\n                      <motion.div\n                        className=\"h-full bg-gradient-to-r from-purple-500 via-pink-500 to-cyan-500 shadow-lg shadow-purple-500/50\"\n                        initial={{ width: 0 }}\n                        animate={{ \n                          width: steps.length > 0 ? `${(currentStep / steps.length) * 100}%` : '0%'\n                        }}\n                        transition={{ duration: 0.3 }}\n                      />\n                    </div>\n                  </div>\n\n                  {/* Sorted Elements */}\n                  <div className=\"bg-gray-700/30 rounded-lg p-4 border border-green-500/20\">\n                    <div className=\"flex items-center justify-between mb-2\">\n                      <span className=\"text-sm text-gray-400\">Sorted</span>\n                      <motion.span\n                        key={steps[currentStep]?.sortedIndices.length || 0}\n                        initial={{ scale: 1.3, color: '#00ff00' }}\n                        animate={{ scale: 1, color: '#ffffff' }}\n                        className=\"text-2xl font-bold text-green-400\"\n                      >\n                        {steps[currentStep]?.sortedIndices.length || 0}/{array.length}\n                      </motion.span>\n                    </div>\n                    <div className=\"h-2 bg-gray-800 rounded-full overflow-hidden\">\n                      <motion.div\n                        className=\"h-full bg-gradient-to-r from-green-500 to-green-400 shadow-lg shadow-green-500/50\"\n                        initial={{ width: 0 }}\n                        animate={{ \n                          width: array.length > 0 \n                            ? `${((steps[currentStep]?.sortedIndices.length || 0) / array.length) * 100}%` \n                            : '0%'\n                        }}\n                        transition={{ duration: 0.3 }}\n                      />\n                    </div>\n                  </div>\n\n                  {/* Algorithm Info */}\n                  <div className=\"bg-gradient-to-br from-cyan-500/10 to-purple-500/10 rounded-lg p-4 border border-cyan-500/30 mt-6\">\n                    <div className=\"text-xs text-gray-400 mb-2\">Current Algorithm</div>\n                    <div className=\"text-lg font-bold text-white mb-1\">\n                      {mockAlgorithms.find(a => a.id === selectedAlgorithm)?.name}\n                    </div>\n                    <div className=\"text-sm text-cyan-400\">\n                      {mockAlgorithms.find(a => a.id === selectedAlgorithm)?.complexity}\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </motion.div>\n          </div>\n\n          <div className=\"lg:col-span-3\">\n            <div className=\"bg-gray-800/50 backdrop-blur-lg rounded-2xl p-8 border border-purple-500/30 shadow-lg shadow-purple-500/20 min-h-[600px]\">\n              {array.length === 0 ? (\n                <motion.div\n                  initial={{ opacity: 0, scale: 0.8 }}\n                  animate={{ opacity: 1, scale: 1 }}\n                  transition={{ duration: 0.6 }}\n                  className=\"flex flex-col items-center justify-center h-full space-y-6\"\n                >\n                  <motion.div\n                    animate={{\n                      rotate: [0, 360],\n                      scale: [1, 1.1, 1]\n                    }}\n                    transition={{\n                      rotate: { duration: 3, repeat: Infinity, ease: \"linear\" },\n                      scale: { duration: 2, repeat: Infinity }\n                    }}\n                  >\n                    <BarChart3 className=\"w-24 h-24 text-cyan-400\" strokeWidth={1.5} />\n                  </motion.div>\n                  <div className=\"text-center space-y-2\">\n                    <h3 className=\"text-2xl font-bold text-white\">Ready to Visualize</h3>\n                    <p className=\"text-gray-400\">Generate an array to begin sorting</p>\n                  </div>\n                  <motion.div\n                    whileHover={{ scale: 1.05 }}\n                    whileTap={{ scale: 0.95 }}\n                  >\n                    <Button\n                      onClick={generateRandomArray}\n                      className=\"bg-gradient-to-r from-cyan-500 to-purple-500 hover:from-cyan-400 hover:to-purple-400 text-white font-semibold px-8 py-6 text-lg rounded-xl shadow-lg shadow-cyan-500/50 hover:shadow-xl hover:shadow-cyan-500/70 transition-all duration-300\"\n                    >\n                      <BarChart3 className=\"w-5 h-5 mr-2\" />\n                      Generate Array\n                    </Button>\n                  </motion.div>\n                </motion.div>\n              ) : (\n                <div className=\"h-full flex items-end justify-center gap-1 px-4\"></parameter>\n</invoke>\n                {array.length === 0 ? (\n                  <motion.div\n                    initial={{ opacity: 0, scale: 0.8 }}\n                    animate={{ opacity: 1, scale: 1 }}\n                    transition={{ duration: 0.6 }}\n                    className=\"flex flex-col items-center justify-center h-full space-y-6\"\n                  >\n                    <motion.div\n                      animate={{\n                        rotate: [0, 360],\n                        scale: [1, 1.2, 1]\n                      }}\n                      transition={{\n                        duration: 3,\n                        repeat: Infinity,\n                        ease: \"easeInOut\"\n                      }}\n                    >\n                      <BarChart3 className=\"w-24 h-24 text-cyan-400/50\" />\n                    </motion.div>\n                    <div className=\"text-center space-y-2\">\n                      <p className=\"text-2xl font-semibold text-gray-400\">No Array Generated</p>\n                      <p className=\"text-gray-500\">Click \"Generate Array\" to start visualizing</p>\n                    </div>\n                  </motion.div>\n                ) : (\n                  array.map((element, index) => {\n                    const isComparing = steps[currentStep - 1]?.comparingIndices.includes(index);\n                    const isSwapping = steps[currentStep - 1]?.swappingIndices.includes(index);\n                    const isSorted = steps[currentStep - 1]?.sortedIndices.includes(index);\n                    \n                    const maxValue = Math.max(...array.map(el => el.value));\n                    const heightPercentage = (element.value / maxValue) * 100;\n                    \n                    let barColor = NEON_COLORS[index % NEON_COLORS.length];\n                    let glowColor = barColor;\n                    let glowIntensity = 0.3;\n                    \n                    if (isSorted) {\n                      barColor = '#00ff00';\n                      glowColor = '#00ff00';\n                      glowIntensity = 0.6;\n                    } else if (isSwapping) {\n                      barColor = '#ff0066';\n                      glowColor = '#ff0066';\n                      glowIntensity = 0.8;\n                    } else if (isComparing) {\n                      barColor = '#ffff00';\n                      glowColor = '#ffff00';\n                      glowIntensity = 0.7;\n                    }\n                    \n                    return (\n                      <motion.div\n                        key={element.id}\n                        className=\"relative flex-1 min-w-[4px] max-w-[60px] group\"\n                        initial={{ opacity: 0, y: 50 }}\n                        animate={{ \n                          opacity: 1, \n                          y: 0,\n                          scale: isSwapping ? [1, 1.1, 1] : isComparing ? 1.05 : 1\n                        }}\n                        transition={{ \n                          duration: 0.3,\n                          scale: { duration: 0.2, repeat: isSwapping ? Infinity : 0 }\n                        }}\n                        layout\n                      >\n                        {/* Trail effect for swapping */}\n                        {isSwapping && (\n                          <>\n                            <motion.div\n                              className=\"absolute inset-0 rounded-t-lg\"\n                              style={{\n                                background: `linear-gradient(to top, transparent, ${barColor})`,\n                                filter: `blur(8px)`,\n                                opacity: 0.6\n                              }}\n                              animate={{\n                                opacity: [0.3, 0.8, 0.3],\n                                scale: [1, 1.2, 1]\n                              }}\n                              transition={{\n                                duration: 0.5,\n                                repeat: Infinity\n                              }}\n                            />\n                            <motion.div\n                              className=\"absolute -top-2 left-1/2 -translate-x-1/2 w-full h-full\"\n                              initial={{ opacity: 0, y: 0 }}\n                              animate={{ \n                                opacity: [0, 0.6, 0],\n                                y: [-20, -40, -60]\n                              }}\n                              transition={{\n                                duration: 0.8,\n                                repeat: Infinity\n                              }}\n                            >\n                              <div \n                                className=\"w-full h-full rounded-full\"\n                                style={{\n                                  background: `radial-gradient(circle, ${barColor}, transparent)`,\n                                  filter: 'blur(10px)'\n                                }}\n                              />\n                            </motion.div>\n                          </>\n                        )}\n                        \n                        {/* Main bar */}\n                        <motion.div\n                          className=\"relative w-full rounded-t-lg overflow-hidden\"\n                          style={{\n                            height: `${heightPercentage}%`,\n                            minHeight: '20px',\n                            background: `linear-gradient(to top, ${barColor}, ${barColor}dd)`,\n                            boxShadow: `\n                              0 0 ${glowIntensity * 20}px ${glowColor}${Math.floor(glowIntensity * 255).toString(16).padStart(2, '0')},\n                              0 0 ${glowIntensity * 40}px ${glowColor}${Math.floor(glowIntensity * 128).toString(16).padStart(2, '0')},\n                              inset 0 0 ${glowIntensity * 30}px ${glowColor}${Math.floor(glowIntensity * 64).toString(16).padStart(2, '0')}\n                            `\n                          }}\n                          animate={{\n                            height: `${heightPercentage}%`,\n                            background: `linear-gradient(to top, ${barColor}, ${barColor}dd)`,\n                            boxShadow: `\n                              0 0 ${glowIntensity * 20}px ${glowColor}${Math.floor(glowIntensity * 255).toString(16).padStart(2, '0')},\n                              0 0 ${glowIntensity * 40}px ${glowColor}${Math.floor(glowIntensity * 128).toString(16).padStart(2, '0')},\n                              inset 0 0 ${glowIntensity * 30}px ${glowColor}${Math.floor(glowIntensity * 64).toString(16).padStart(2, '0')}\n                            `\n                          }}\n                          transition={{\n                            height: { duration: 0.5, ease: \"easeInOut\" },\n                            background: { duration: 0.3 },\n                            boxShadow: { duration: 0.3 }\n                          }}\n                        >\n                          {/* Shimmer effect */}\n                          <motion.div\n                            className=\"absolute inset-0 bg-gradient-to-r from-transparent via-white/30 to-transparent\"\n                            animate={{\n                              x: ['-100%', '200%']\n                            }}\n                            transition={{\n                              duration: 2,\n                              repeat: Infinity,\n                              repeatDelay: 1,\n                              ease: \"easeInOut\"\n                            }}\n                          />\n                          \n                          {/* Pulse effect for comparing */}\n                          {isComparing && (\n                            <motion.div\n                              className=\"absolute inset-0\"\n                              style={{\n                                background: `radial-gradient(circle at center, ${barColor}88, transparent)`\n                              }}\n                              animate={{\n                                opacity: [0.5, 1, 0.5],\n                                scale: [1, 1.1, 1]\n                              }}\n                              transition={{\n                                duration: 0.6,\n                                repeat: Infinity\n                              }}\n                            />\n                          )}\n                          \n                          {/* Sorted checkmark indicator */}\n                          {isSorted && (\n                            <motion.div\n                              className=\"absolute top-2 left-1/2 -translate-x-1/2\"\n                              initial={{ scale: 0, rotate: -180 }}\n                              animate={{ scale: 1, rotate: 0 }}\n                              transition={{ type: \"spring\", bounce: 0.5 }}\n                            >\n                              <div className=\"w-4 h-4 rounded-full bg-white/90 flex items-center justify-center\">\n                                <svg className=\"w-3 h-3 text-green-600\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\" strokeWidth={3}>\n                                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M5 13l4 4L19 7\" />\n                                </svg>\n                              </div>\n                            </motion.div>\n                          )}\n                        </motion.div>\n                        \n                        {/* Value label */}\n                        <motion.div\n                          className=\"absolute -bottom-6 left-1/2 -translate-x-1/2 text-xs font-mono font-bold whitespace-nowrap opacity-0 group-hover:opacity-100 transition-opacity duration-200\"\n                          style={{\n                            color: barColor,\n                            textShadow: `0 0 10px ${barColor}88`\n                          }}\n                        >\n                          {element.value}\n                        </motion.div>\n                        \n                        {/* Glow base */}\n                        <motion.div\n                          className=\"absolute -bottom-1 left-1/2 -translate-x-1/2 w-full h-2 rounded-full blur-md\"\n                          style={{\n                            background: `radial-gradient(ellipse, ${barColor}, transparent)`,\n                            opacity: glowIntensity\n                          }}\n                          animate={{\n                            opacity: glowIntensity,\n                            scale: isSwapping ? [1, 1.5, 1] : 1\n                          }}\n                          transition={{\n                            scale: { duration: 0.5, repeat: isSwapping ? Infinity : 0 }\n                          }}\n                        />\n                      </motion.div>\n                    );\n                  })\n                )}\n              </div>\n            </div>\n\n            <motion.div\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ delay: 0.4, duration: 0.6 }}\n              className=\"mt-6 bg-gray-800/50 backdrop-blur-lg rounded-xl p-6 border border-purple-500/30 shadow-lg shadow-purple-500/10\"\n            >\n              <h3 className=\"text-purple-400 font-semibold mb-4 flex items-center gap-2\">\n                <BarChart3 className=\"w-5 h-5\" />\n                <span className=\"uppercase tracking-wider text-sm\">Legend</span>\n              </h3>\n              \n              <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n                <motion.div\n                  className=\"flex items-center gap-3 p-3 rounded-lg bg-gray-700/30 border border-gray-600/50 hover:border-cyan-500/50 transition-all duration-300\"\n                  whileHover={{ scale: 1.05 }}\n                >\n                  <motion.div\n                    className=\"w-4 h-12 rounded bg-gradient-to-t from-cyan-500 to-cyan-300 shadow-lg\"\n                    animate={{\n                      boxShadow: [\n                        '0 0 10px rgba(0, 255, 255, 0.5)',\n                        '0 0 20px rgba(0, 255, 255, 0.8)',\n                        '0 0 10px rgba(0, 255, 255, 0.5)'\n                      ]\n                    }}\n                    transition={{ duration: 1.5, repeat: Infinity }}\n                  />\n                  <div>\n                    <div className=\"text-white font-medium text-sm\">Default</div>\n                    <div className=\"text-gray-400 text-xs\">Unsorted</div>\n                  </div>\n                </motion.div>\n\n                <motion.div\n                  className=\"flex items-center gap-3 p-3 rounded-lg bg-gray-700/30 border border-gray-600/50 hover:border-yellow-500/50 transition-all duration-300\"\n                  whileHover={{ scale: 1.05 }}\n                >\n                  <motion.div\n                    className=\"w-4 h-12 rounded bg-gradient-to-t from-yellow-500 to-yellow-300 shadow-lg\"\n                    animate={{\n                      boxShadow: [\n                        '0 0 15px rgba(255, 255, 0, 0.6)',\n                        '0 0 25px rgba(255, 255, 0, 0.9)',\n                        '0 0 15px rgba(255, 255, 0, 0.6)'\n                      ],\n                      scale: [1, 1.1, 1]\n                    }}\n                    transition={{ duration: 1, repeat: Infinity }}\n                  />\n                  <div>\n                    <div className=\"text-white font-medium text-sm\">Comparing</div>\n                    <div className=\"text-gray-400 text-xs\">Active</div>\n                  </div>\n                </motion.div>\n\n                <motion.div\n                  className=\"flex items-center gap-3 p-3 rounded-lg bg-gray-700/30 border border-gray-600/50 hover:border-pink-500/50 transition-all duration-300\"\n                  whileHover={{ scale: 1.05 }}\n                >\n                  <motion.div\n                    className=\"w-4 h-12 rounded bg-gradient-to-t from-pink-500 to-pink-300 shadow-lg\"\n                    animate={{\n                      boxShadow: [\n                        '0 0 15px rgba(255, 0, 102, 0.6)',\n                        '0 0 30px rgba(255, 0, 102, 1)',\n                        '0 0 15px rgba(255, 0, 102, 0.6)'\n                      ],\n                      x: [-2, 2, -2]\n                    }}\n                    transition={{ duration: 0.8, repeat: Infinity }}\n                  />\n                  <div>\n                    <div className=\"text-white font-medium text-sm\">Swapping</div>\n                    <div className=\"text-gray-400 text-xs\">Moving</div>\n                  </div>\n                </motion.div>\n\n                <motion.div\n                  className=\"flex items-center gap-3 p-3 rounded-lg bg-gray-700/30 border border-gray-600/50 hover:border-green-500/50 transition-all duration-300\"\n                  whileHover={{ scale: 1.05 }}\n                >\n                  <motion.div\n                    className=\"w-4 h-12 rounded bg-gradient-to-t from-green-500 to-green-300 shadow-lg\"\n                    animate={{\n                      boxShadow: [\n                        '0 0 10px rgba(0, 255, 0, 0.5)',\n                        '0 0 20px rgba(0, 255, 0, 0.8)',\n                        '0 0 10px rgba(0, 255, 0, 0.5)'\n                      ]\n                    }}\n                    transition={{ duration: 2, repeat: Infinity }}\n                  />\n                  <div>\n                    <div className=\"text-white font-medium text-sm\">Sorted</div>\n                    <div className=\"text-gray-400 text-xs\">Complete</div>\n                  </div>\n                </motion.div>\n              </div>\n            </motion.div>\n          </div>\n        </div>\n\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.6, delay: 0.3 }}\n          className=\"bg-gray-800/50 backdrop-blur-lg rounded-2xl p-6 border border-purple-500/30 shadow-lg shadow-purple-500/20\"\n        >\n          <div className=\"space-y-4\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center gap-3\">\n                <motion.div\n                  animate={{\n                    rotate: [0, 360],\n                  }}\n                  transition={{ duration: 3, repeat: Infinity, ease: \"linear\" }}\n                  className=\"w-8 h-8 rounded-full bg-gradient-to-r from-cyan-400 to-purple-500 flex items-center justify-center\"\n                >\n                  <BarChart3 className=\"w-4 h-4 text-white\" />\n                </motion.div>\n                <div>\n                  <h3 className=\"text-cyan-400 font-semibold text-lg\">Timeline Control</h3>\n                  <p className=\"text-xs text-gray-400\">Step-by-step visualization progress</p>\n                </div>\n              </div>\n              \n              <div className=\"flex items-center gap-4\">\n                <motion.div\n                  className=\"px-4 py-2 bg-purple-500/20 border border-purple-400/50 rounded-full backdrop-blur-sm\"\n                  animate={{\n                    boxShadow: [\n                      '0 0 10px rgba(168, 85, 247, 0.3)',\n                      '0 0 20px rgba(168, 85, 247, 0.5)',\n                      '0 0 10px rgba(168, 85, 247, 0.3)'\n                    ]\n                  }}\n                  transition={{ duration: 2, repeat: Infinity }}\n                >\n                  <span className=\"text-sm font-mono text-purple-300\">\n                    Step {currentStep} / {steps.length}\n                  </span>\n                </motion.div>\n                \n                <motion.div\n                  className=\"px-4 py-2 bg-cyan-500/20 border border-cyan-400/50 rounded-full backdrop-blur-sm\"\n                  animate={{\n                    boxShadow: [\n                      '0 0 10px rgba(6, 182, 212, 0.3)',\n                      '0 0 20px rgba(6, 182, 212, 0.5)',\n                      '0 0 10px rgba(6, 182, 212, 0.3)'\n                    ]\n                  }}\n                  transition={{ duration: 2, repeat: Infinity, delay: 0.5 }}\n                >\n                  <span className=\"text-sm font-mono text-cyan-300\">\n                    {steps.length > 0 ? Math.round((currentStep / steps.length) * 100) : 0}%\n                  </span>\n                </motion.div>\n              </div>\n            </div>\n\n            {/* Timeline Scrubber */}\n            <div className=\"space-y-3\">\n              <div className=\"relative h-3 bg-gray-700/50 rounded-full overflow-hidden border border-gray-600/50\">\n                {/* Background glow effect */}\n                <motion.div\n                  className=\"absolute inset-0 bg-gradient-to-r from-cyan-500/20 via-purple-500/20 to-pink-500/20\"\n                  animate={{\n                    x: ['-100%', '100%']\n                  }}\n                  transition={{ duration: 3, repeat: Infinity, ease: \"linear\" }}\n                />\n                \n                {/* Progress bar */}\n                <motion.div\n                  className=\"absolute inset-y-0 left-0 bg-gradient-to-r from-cyan-500 via-purple-500 to-pink-500 rounded-full\"\n                  initial={{ width: '0%' }}\n                  animate={{\n                    width: steps.length > 0 ? `${(currentStep / steps.length) * 100}%` : '0%'\n                  }}\n                  transition={{ duration: 0.3, ease: \"easeOut\" }}\n                >\n                  <motion.div\n                    className=\"absolute inset-0 bg-gradient-to-r from-transparent via-white/30 to-transparent\"\n                    animate={{\n                      x: ['-100%', '200%']\n                    }}\n                    transition={{ duration: 1.5, repeat: Infinity, ease: \"linear\" }}\n                  />\n                </motion.div>\n\n                {/* Progress indicator dot */}\n                {steps.length > 0 && (\n                  <motion.div\n                    className=\"absolute top-1/2 -translate-y-1/2 w-6 h-6 rounded-full bg-white border-4 border-cyan-400 shadow-lg shadow-cyan-400/50\"\n                    animate={{\n                      left: `${(currentStep / steps.length) * 100}%`,\n                      boxShadow: [\n                        '0 0 20px rgba(6, 182, 212, 0.8)',\n                        '0 0 30px rgba(6, 182, 212, 1)',\n                        '0 0 20px rgba(6, 182, 212, 0.8)'\n                      ]\n                    }}\n                    transition={{\n                      left: { duration: 0.3, ease: \"easeOut\" },\n                      boxShadow: { duration: 1.5, repeat: Infinity }\n                    }}\n                    style={{ marginLeft: '-12px' }}\n                  >\n                    <motion.div\n                      className=\"absolute inset-0 rounded-full bg-cyan-400/30\"\n                      animate={{\n                        scale: [1, 1.8, 1],\n                        opacity: [0.8, 0, 0.8]\n                      }}\n                      transition={{ duration: 2, repeat: Infinity }}\n                    />\n                  </motion.div>\n                )}\n              </div>\n\n              {/* Step markers */}\n              <div className=\"relative h-8\">\n                <div className=\"absolute inset-0 flex justify-between items-center\">\n                  {steps.length > 0 && Array.from({ length: Math.min(steps.length, 20) }).map((_, index) => {\n                    const stepIndex = Math.floor((index / Math.min(steps.length, 20)) * steps.length);\n                    const isPassed = stepIndex < currentStep;\n                    const isCurrent = stepIndex === currentStep;\n                    \n                    return (\n                      <motion.button\n                        key={index}\n                        onClick={() => {\n                          if (!isPlaying) {\n                            setCurrentStep(stepIndex);\n                            if (stepIndex < steps.length) {\n                              setArray(steps[stepIndex].array);\n                            }\n                          }\n                        }}\n                        disabled={isPlaying}\n                        className=\"relative group disabled:cursor-not-allowed\"\n                        whileHover={!isPlaying ? { scale: 1.5 } : {}}\n                        whileTap={!isPlaying ? { scale: 1.2 } : {}}\n                      >\n                        <motion.div\n                          className={`w-2 h-2 rounded-full transition-all duration-300 ${\n                            isCurrent\n                              ? 'bg-cyan-400 shadow-lg shadow-cyan-400/80'\n                              : isPassed\n                              ? 'bg-purple-500 shadow-md shadow-purple-500/50'\n                              : 'bg-gray-600'\n                          }`}\n                          animate={isCurrent ? {\n                            scale: [1, 1.5, 1],\n                            boxShadow: [\n                              '0 0 10px rgba(6, 182, 212, 0.8)',\n                              '0 0 20px rgba(6, 182, 212, 1)',\n                              '0 0 10px rgba(6, 182, 212, 0.8)'\n                            ]\n                          } : {}}\n                          transition={{ duration: 1, repeat: Infinity }}\n                        />\n                        \n                        {/* Tooltip */}\n                        {!isPlaying && (\n                          <div className=\"absolute bottom-full mb-2 left-1/2 -translate-x-1/2 opacity-0 group-hover:opacity-100 transition-opacity duration-200 pointer-events-none\">\n                            <div className=\"bg-gray-900 border border-cyan-400/50 rounded-lg px-3 py-1 whitespace-nowrap shadow-lg shadow-cyan-400/30\">\n                              <span className=\"text-xs text-cyan-300 font-mono\">Step {stepIndex}</span>\n                            </div>\n                          </div>\n                        )}\n                      </motion.button>\n                    );\n                  })}\n                </div>\n              </div>\n\n              {/* Quick navigation buttons */}\n              <div className=\"flex items-center justify-center gap-2 pt-2\">\n                <Button\n                  onClick={() => {\n                    setCurrentStep(0);\n                    if (steps.length > 0) {\n                      setArray(steps[0].array);\n                    }\n                  }}\n                  disabled={isPlaying || currentStep === 0}\n                  size=\"sm\"\n                  className=\"bg-gray-700/50 hover:bg-gray-600/50 text-cyan-400 border border-cyan-500/30 hover:border-cyan-400/50 disabled:opacity-30 disabled:cursor-not-allowed transition-all duration-300\"\n                >\n                  <RotateCcw className=\"w-3 h-3 mr-1\" />\n                  First\n                </Button>\n                \n                <Button\n                  onClick={() => {\n                    const prevStep = Math.max(0, currentStep - 1);\n                    setCurrentStep(prevStep);\n                    if (prevStep < steps.length) {\n                      setArray(steps[prevStep].array);\n                    }\n                  }}\n                  disabled={isPlaying || currentStep === 0}\n                  size=\"sm\"\n                  className=\"bg-gray-700/50 hover:bg-gray-600/50 text-purple-400 border border-purple-500/30 hover:border-purple-400/50 disabled:opacity-30 disabled:cursor-not-allowed transition-all duration-300\"\n                >\n                  \u2190 Prev\n                </Button>\n                \n                <Button\n                  onClick={() => {\n                    const nextStep = Math.min(steps.length, currentStep + 1);\n                    setCurrentStep(nextStep);\n                    if (nextStep < steps.length) {\n                      setArray(steps[nextStep].array);\n                    }\n                  }}\n                  disabled={isPlaying || currentStep >= steps.length}\n                  size=\"sm\"\n                  className=\"bg-gray-700/50 hover:bg-gray-600/50 text-purple-400 border border-purple-500/30 hover:border-purple-400/50 disabled:opacity-30 disabled:cursor-not-allowed transition-all duration-300\"\n                >\n                  Next \u2192\n                </Button>\n                \n                <Button\n                  onClick={() => {\n                    setCurrentStep(steps.length);\n                    if (steps.length > 0) {\n                      setArray(steps[steps.length - 1].array);\n                    }\n                  }}\n                  disabled={isPlaying || currentStep >= steps.length}\n                  size=\"sm\"\n                  className=\"bg-gray-700/50 hover:bg-gray-600/50 text-cyan-400 border border-cyan-500/30 hover:border-cyan-400/50 disabled:opacity-30 disabled:cursor-not-allowed transition-all duration-300\"\n                >\n                  Last\n                  <Zap className=\"w-3 h-3 ml-1\" />\n                </Button>\n              </div>\n            </div>\n          </div>\n        </motion.div>\n      </div>\n    </div>\n  );\n}",
  "error": null,
  "overall_score": 43,
  "code_quality_score": 14,
  "architecture_score": 10,
  "performance_score": 8,
  "accessibility_score": 11,
  "metadata": {
    "document_id": "eval_room_9ac642eb8f3e",
    "prompt_category": "creative",
    "prompt_complexity": 9.0
  },
  "raw_response": {
    "document_id": "eval_room_9ac642eb8f3e",
    "mode": "parallel",
    "prompt": "Build a captivating algorithm visualizer with neon colored bars, smooth height transitions, glowing comparison indicators, trail effects during swaps, and a futuristic dashboard design with animated controls",
    "content": "import { useState, useCallback } from 'react';\nimport { useEffect } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Slider } from '@/components/ui/slider';\nimport { Play, Pause, RotateCcw, Zap, BarChart3 } from 'lucide-react';\nimport { motion } from 'framer-motion';\n\ninterface ArrayElement {\n  value: number;\n  id: string;\n  isComparing?: boolean;\n  isSwapping?: boolean;\n  isSorted?: boolean;\n}\n\ninterface AlgorithmStep {\n  array: ArrayElement[];\n  comparingIndices: number[];\n  swappingIndices: number[];\n  sortedIndices: number[];\n}\n\ntype AlgorithmType = 'bubble' | 'quick' | 'merge' | 'insertion';\n\nconst NEON_COLORS = [\n  '#00ffff',\n  '#ff00ff', \n  '#00ff00',\n  '#ffff00',\n  '#ff0066',\n  '#00ffaa'\n];\n\nconst mockAlgorithms = [\n  { id: 'bubble', name: 'Bubble Sort', complexity: 'O(n\u00b2)' },\n  { id: 'quick', name: 'Quick Sort', complexity: 'O(n log n)' },\n  { id: 'merge', name: 'Merge Sort', complexity: 'O(n log n)' },\n  { id: 'insertion', name: 'Insertion Sort', complexity: 'O(n\u00b2)' }\n];\n\nconst useAnimationLoop = (\n  steps: AlgorithmStep[],\n  speed: number,\n  isPlaying: boolean,\n  currentStep: number,\n  setCurrentStep: (step: number) => void,\n  setArray: (array: ArrayElement[]) => void,\n  setIsPlaying: (playing: boolean) => void\n) => {\n  const [animationId, setAnimationId] = useState<NodeJS.Timeout | null>(null);\n\n  const stopAnimation = useCallback(() => {\n    if (animationId) {\n      clearTimeout(animationId);\n      setAnimationId(null);\n    }\n  }, [animationId]);\n\n  const runStep = useCallback(() => {\n    if (currentStep >= steps.length) {\n      setIsPlaying(false);\n      return;\n    }\n\n    const step = steps[currentStep];\n    setArray(step.array);\n    setCurrentStep(currentStep + 1);\n\n    const delay = 1000 - speed * 9.5; // Convert speed (0-100) to delay (1000ms-50ms)\n    const timeoutId = setTimeout(() => {\n      if (currentStep + 1 < steps.length) {\n        runStep();\n      } else {\n        setIsPlaying(false);\n      }\n    }, delay);\n\n    setAnimationId(timeoutId);\n  }, [currentStep, steps, speed, setArray, setCurrentStep, setIsPlaying]);\n\n  return { runStep, stopAnimation };\n};\n\nexport default function AlgorithmVisualizer() {\n  const [array, setArray] = useState<ArrayElement[]>([]);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [speed, setSpeed] = useState([50]);\n  const [arraySize, setArraySize] = useState([20]);\n  const [selectedAlgorithm, setSelectedAlgorithm] = useState<AlgorithmType>('bubble');\n  const [currentStep, setCurrentStep] = useState(0);\n  const [steps, setSteps] = useState<AlgorithmStep[]>([]);\n  const { runStep, stopAnimation } = useAnimationLoop(\n    steps,\n    speed[0],\n    isPlaying,\n    currentStep,\n    setCurrentStep,\n    setArray,\n    setIsPlaying\n  );\n\n  const generateRandomArray = useCallback(() => {\n    const newArray: ArrayElement[] = Array.from({ length: arraySize[0] }, (_, index) => ({\n      value: Math.floor(Math.random() * 100) + 1,\n      id: `element-${Date.now()}-${index}`,\n      isComparing: false,\n      isSwapping: false,\n      isSorted: false\n    }));\n    setArray(newArray);\n    setSteps([]);\n    setCurrentStep(0);\n    setIsPlaying(false);\n  }, [arraySize]);\n\n  const resetVisualization = useCallback(() => {\n\n    setIsPlaying(false);\n    setCurrentStep(0);\n    setSteps([]);\n    generateRandomArray();\n  }, [generateRandomArray]);\n\n  const startVisualization = useCallback(() => {\n    if (steps.length === 0 || currentStep >= steps.length) {\n      return;\n    }\n\n    setIsPlaying(true);\n    runStep();\n  }, [steps, speed, currentStep]);\n\n  const pauseVisualization = useCallback(() => {\n    setIsPlaying(false);\n\n  }, []);\n\n  const generateSortingSteps = useCallback((algorithm: AlgorithmType) => {\n    const sortedArray = [...array];\n    const allSteps: AlgorithmStep[] = [];\n\n    const addStep = (arr: ArrayElement[], comparing: number[] = [], swapping: number[] = [], sorted: number[] = []) => {\n      allSteps.push({\n        array: arr.map(el => ({ ...el })),\n        comparingIndices: [...comparing],\n        swappingIndices: [...swapping],\n        sortedIndices: [...sorted]\n      });\n    };\n\n    // Initial state\n    addStep(sortedArray);\n\n    switch (algorithm) {\n      case 'bubble': {\n        const n = sortedArray.length;\n        const sortedSet = new Set<number>();\n        \n        for (let i = 0; i < n - 1; i++) {\n          for (let j = 0; j < n - i - 1; j++) {\n            // Comparing\n            addStep(sortedArray, [j, j + 1], [], Array.from(sortedSet));\n            \n            if (sortedArray[j].value > sortedArray[j + 1].value) {\n              // Swapping\n              addStep(sortedArray, [], [j, j + 1], Array.from(sortedSet));\n              [sortedArray[j], sortedArray[j + 1]] = [sortedArray[j + 1], sortedArray[j]];\n              addStep(sortedArray, [], [], Array.from(sortedSet));\n            }\n          }\n          sortedSet.add(n - i - 1);\n          addStep(sortedArray, [], [], Array.from(sortedSet));\n        }\n        sortedSet.add(0);\n        addStep(sortedArray, [], [], Array.from(sortedSet));\n        break;\n      }\n\n      case 'insertion': {\n        const n = sortedArray.length;\n        const sortedSet = new Set<number>([0]);\n        addStep(sortedArray, [], [], [0]);\n\n        for (let i = 1; i < n; i++) {\n          const key = sortedArray[i];\n          let j = i - 1;\n\n          addStep(sortedArray, [i], [], Array.from(sortedSet));\n\n          while (j >= 0 && sortedArray[j].value > key.value) {\n            addStep(sortedArray, [j, j + 1], [], Array.from(sortedSet));\n            addStep(sortedArray, [], [j, j + 1], Array.from(sortedSet));\n            sortedArray[j + 1] = sortedArray[j];\n            addStep(sortedArray, [], [], Array.from(sortedSet));\n            j--;\n          }\n\n          sortedArray[j + 1] = key;\n          sortedSet.add(i);\n          addStep(sortedArray, [], [], Array.from(sortedSet));\n        }\n        break;\n      }\n\n      case 'quick': {\n        const sortedSet = new Set<number>();\n\n        const partition = (low: number, high: number): number => {\n          const pivot = sortedArray[high];\n          addStep(sortedArray, [high], [], Array.from(sortedSet));\n          let i = low - 1;\n\n          for (let j = low; j < high; j++) {\n            addStep(sortedArray, [j, high], [], Array.from(sortedSet));\n            \n            if (sortedArray[j].value < pivot.value) {\n              i++;\n              if (i !== j) {\n                addStep(sortedArray, [], [i, j], Array.from(sortedSet));\n                [sortedArray[i], sortedArray[j]] = [sortedArray[j], sortedArray[i]];\n                addStep(sortedArray, [], [], Array.from(sortedSet));\n              }\n            }\n          }\n\n          addStep(sortedArray, [], [i + 1, high], Array.from(sortedSet));\n          [sortedArray[i + 1], sortedArray[high]] = [sortedArray[high], sortedArray[i + 1]];\n          sortedSet.add(i + 1);\n          addStep(sortedArray, [], [], Array.from(sortedSet));\n          \n          return i + 1;\n        };\n\n        const quickSort = (low: number, high: number) => {\n          if (low < high) {\n            const pi = partition(low, high);\n            quickSort(low, pi - 1);\n            quickSort(pi + 1, high);\n          } else if (low === high) {\n            sortedSet.add(low);\n            addStep(sortedArray, [], [], Array.from(sortedSet));\n          }\n        };\n\n        quickSort(0, sortedArray.length - 1);\n        break;\n      }\n\n      case 'merge': {\n        const sortedSet = new Set<number>();\n\n        const merge = (left: number, mid: number, right: number) => {\n          const leftArr = sortedArray.slice(left, mid + 1);\n          const rightArr = sortedArray.slice(mid + 1, right + 1);\n          \n          let i = 0, j = 0, k = left;\n          const comparingRange = Array.from({ length: right - left + 1 }, (_, idx) => left + idx);\n\n          while (i < leftArr.length && j < rightArr.length) {\n            addStep(sortedArray, comparingRange, [], Array.from(sortedSet));\n            \n            if (leftArr[i].value <= rightArr[j].value) {\n              sortedArray[k] = leftArr[i];\n              i++;\n            } else {\n              sortedArray[k] = rightArr[j];\n              j++;\n            }\n            addStep(sortedArray, [], [k], Array.from(sortedSet));\n            k++;\n          }\n\n          while (i < leftArr.length) {\n            sortedArray[k] = leftArr[i];\n            addStep(sortedArray, [], [k], Array.from(sortedSet));\n            i++;\n            k++;\n          }\n\n          while (j < rightArr.length) {\n            sortedArray[k] = rightArr[j];\n            addStep(sortedArray, [], [k], Array.from(sortedSet));\n            j++;\n            k++;\n          }\n\n          for (let idx = left; idx <= right; idx++) {\n            sortedSet.add(idx);\n          }\n          addStep(sortedArray, [], [], Array.from(sortedSet));\n        };\n\n        const mergeSort = (left: number, right: number) => {\n          if (left < right) {\n            const mid = Math.floor((left + right) / 2);\n            mergeSort(left, mid);\n            mergeSort(mid + 1, right);\n            merge(left, mid, right);\n          } else if (left === right) {\n            sortedSet.add(left);\n            addStep(sortedArray, [], [], Array.from(sortedSet));\n          }\n        };\n\n        mergeSort(0, sortedArray.length - 1);\n        break;\n      }\n    }\n\n    setSteps(allSteps);\n    setCurrentStep(0);\n  }, [array]);\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-gray-900 via-purple-900 to-gray-900 p-8\">\n      <div className=\"max-w-7xl mx-auto space-y-8\">\n        <motion.div\n          initial={{ opacity: 0, y: -20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.8 }}\n          className=\"text-center space-y-4\"\n        >\n          <motion.h1\n            className=\"text-6xl font-bold bg-gradient-to-r from-cyan-400 via-purple-400 to-pink-400 bg-clip-text text-transparent\"\n            animate={{\n              textShadow: [\n                '0 0 20px rgba(0, 255, 255, 0.5)',\n                '0 0 40px rgba(255, 0, 255, 0.5)',\n                '0 0 20px rgba(0, 255, 255, 0.5)'\n              ]\n            }}\n            transition={{ duration: 2, repeat: Infinity }}\n          >\n            Algorithm Visualizer\n          </motion.h1>\n          \n          <div className=\"flex items-center justify-center gap-4\">\n            <motion.div\n              initial={{ scale: 0 }}\n              animate={{ scale: 1 }}\n              transition={{ delay: 0.3, type: 'spring' }}\n              className=\"px-6 py-2 bg-purple-500/20 border border-purple-400/50 rounded-full backdrop-blur-sm\"\n            >\n              <span className=\"text-2xl font-semibold text-purple-300\">\n                {mockAlgorithms.find(a => a.id === selectedAlgorithm)?.name || 'Bubble Sort'}\n              </span>\n            </motion.div>\n            \n            <motion.div\n              initial={{ scale: 0 }}\n              animate={{ scale: 1 }}\n              transition={{ delay: 0.5, type: 'spring' }}\n              className=\"px-4 py-2 bg-cyan-500/20 border border-cyan-400/50 rounded-full backdrop-blur-sm relative overflow-hidden\"\n            >\n              <motion.div\n                className=\"absolute inset-0 bg-gradient-to-r from-transparent via-cyan-400/20 to-transparent\"\n                animate={{ x: ['-100%', '200%'] }}\n                transition={{ duration: 2, repeat: Infinity, ease: 'linear' }}\n              />\n              <div className=\"relative flex items-center gap-2\">\n                <BarChart3 className=\"w-4 h-4 text-cyan-400\" />\n                <span className=\"text-sm font-mono text-cyan-300\">\n                  {mockAlgorithms.find(a => a.id === selectedAlgorithm)?.complexity || 'O(n\u00b2)'}\n                </span>\n              </div>\n            </motion.div>\n          </div>\n        </motion.div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-6\">\n          <div className=\"lg:col-span-1 space-y-6\">\n            <motion.div\n              initial={{ opacity: 0, x: -50 }}\n              animate={{ opacity: 1, x: 0 }}\n              transition={{ duration: 0.6 }}\n              className=\"bg-gray-800/50 backdrop-blur-lg rounded-2xl p-6 border border-cyan-500/30 shadow-[0_0_30px_rgba(0,255,255,0.3)] hover:shadow-[0_0_50px_rgba(0,255,255,0.5)] transition-all duration-300\"\n            >\n              <div className=\"space-y-6\">\n                {/* Algorithm Selection */}\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center gap-2 text-cyan-400 font-semibold\">\n                    <Zap className=\"w-5 h-5\" />\n                    <span className=\"text-sm uppercase tracking-wider\">Algorithm</span>\n                  </div>\n                  <div className=\"grid grid-cols-1 gap-2\">\n                    {mockAlgorithms.map((algo) => (\n                      <button\n                        key={algo.id}\n                        onClick={() => {\n                          setSelectedAlgorithm(algo.id as AlgorithmType);\n                          generateSortingSteps(algo.id as AlgorithmType);\n                        }}\n                        disabled={isPlaying}\n                        className={`p-3 rounded-lg border transition-all duration-300 text-left ${\n                          selectedAlgorithm === algo.id\n                            ? 'bg-cyan-500/20 border-cyan-400 shadow-[0_0_20px_rgba(0,255,255,0.4)]'\n                            : 'bg-gray-700/30 border-gray-600 hover:border-cyan-500/50 hover:bg-gray-700/50'\n                        } disabled:opacity-50 disabled:cursor-not-allowed`}\n                      >\n                        <div className=\"font-medium text-white\">{algo.name}</div>\n                        <div className=\"text-xs text-gray-400 mt-1\">{algo.complexity}</div>\n                      </button>\n                    ))}\n                  </div>\n                </div>\n\n                {/* Speed Control */}\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center gap-2 text-purple-400 font-semibold\">\n                      <Zap className=\"w-5 h-5\" />\n                      <span className=\"text-sm uppercase tracking-wider\">Speed</span>\n                    </div>\n                    <span className=\"text-white font-mono text-sm bg-purple-500/20 px-3 py-1 rounded-full border border-purple-400/30\">\n                      {speed[0]}%\n                    </span>\n                  </div>\n                  <Slider\n                    value={speed}\n                    onValueChange={setSpeed}\n                    min={10}\n                    max={100}\n                    step={10}\n                    disabled={isPlaying}\n                    className=\"cursor-pointer\"\n                  />\n                </div>\n\n                {/* Array Size Control */}\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center gap-2 text-pink-400 font-semibold\">\n                      <BarChart3 className=\"w-5 h-5\" />\n                      <span className=\"text-sm uppercase tracking-wider\">Array Size</span>\n                    </div>\n                    <span className=\"text-white font-mono text-sm bg-pink-500/20 px-3 py-1 rounded-full border border-pink-400/30\">\n                      {arraySize[0]}\n                    </span>\n                  </div>\n                  <Slider\n                    value={arraySize}\n                    onValueChange={setArraySize}\n                    min={5}\n                    max={50}\n                    step={5}\n                    disabled={isPlaying}\n                    className=\"cursor-pointer\"\n                  />\n                </div>\n\n                {/* Control Buttons */}\n                <div className=\"space-y-3 pt-4 border-t border-gray-700\">\n                  <Button\n                    onClick={isPlaying ? pauseVisualization : startVisualization}\n                    disabled={steps.length === 0 || (currentStep >= steps.length && !isPlaying)}\n                    className=\"w-full bg-gradient-to-r from-cyan-500 to-blue-500 hover:from-cyan-400 hover:to-blue-400 text-white font-semibold py-6 rounded-xl shadow-[0_0_20px_rgba(0,255,255,0.5)] hover:shadow-[0_0_30px_rgba(0,255,255,0.7)] transition-all duration-300 disabled:opacity-50 disabled:cursor-not-allowed\"\n                  >\n                    {isPlaying ? (\n                      <div className=\"flex items-center justify-center gap-2\">\n                        <Pause className=\"w-5 h-5\" />\n                        <span>Pause</span>\n                      </div>\n                    ) : (\n                      <div className=\"flex items-center justify-center gap-2\">\n                        <Play className=\"w-5 h-5\" />\n                        <span>Play</span>\n                      </div>\n                    )}\n                  </Button>\n\n                  <Button\n                    onClick={resetVisualization}\n                    disabled={isPlaying}\n                    className=\"w-full bg-gradient-to-r from-purple-500 to-pink-500 hover:from-purple-400 hover:to-pink-400 text-white font-semibold py-6 rounded-xl shadow-[0_0_20px_rgba(255,0,255,0.5)] hover:shadow-[0_0_30px_rgba(255,0,255,0.7)] transition-all duration-300 disabled:opacity-50 disabled:cursor-not-allowed\"\n                  >\n                    <div className=\"flex items-center justify-center gap-2\">\n                      <RotateCcw className=\"w-5 h-5\" />\n                      <span>Reset</span>\n                    </div>\n                  </Button>\n                </div>\n\n                {/* Progress Indicator */}\n                {steps.length > 0 && (\n                  <div className=\"space-y-2 pt-4 border-t border-gray-700\">\n                    <div className=\"flex items-center justify-between text-sm\">\n                      <span className=\"text-gray-400\">Progress</span>\n                      <span className=\"text-cyan-400 font-mono\">\n                        {currentStep} / {steps.length}\n                      </span>\n                    </div>\n                    <div className=\"w-full h-2 bg-gray-700 rounded-full overflow-hidden\">\n                      <motion.div\n                        className=\"h-full bg-gradient-to-r from-cyan-500 to-purple-500 shadow-[0_0_10px_rgba(0,255,255,0.8)]\"\n                        initial={{ width: 0 }}\n                        animate={{ width: `${(currentStep / steps.length) * 100}%` }}\n                        transition={{ duration: 0.3 }}\n                      />\n                    </div>\n                  </div>\n                )}\n              </div>\n            </motion.div>\n            \n            <div className=\"bg-gray-800/50 backdrop-blur-lg rounded-2xl p-6 border border-cyan-500/30 shadow-lg shadow-cyan-500/20\">\n              <div className=\"space-y-6\">\n                <div>\n                  <h3 className=\"text-cyan-400 font-semibold mb-4 flex items-center gap-2\">\n                    <Zap className=\"w-5 h-5\" />\n                    Algorithm\n                  </h3>\n                  <div className=\"grid grid-cols-2 gap-3\">\n                    {mockAlgorithms.map((algo) => (\n                      <motion.button\n                        key={algo.id}\n                        onClick={() => {\n                          setSelectedAlgorithm(algo.id as AlgorithmType);\n                          setSteps([]);\n                          setCurrentStep(0);\n                          setIsPlaying(false);\n                        }}\n                        className={`relative p-3 rounded-lg font-medium text-sm transition-all duration-300 ${\n                          selectedAlgorithm === algo.id\n                            ? 'bg-cyan-500/20 text-cyan-300 border-2 border-cyan-400 shadow-lg shadow-cyan-500/50'\n                            : 'bg-gray-700/50 text-gray-300 border border-gray-600 hover:border-cyan-500/50 hover:shadow-md hover:shadow-cyan-500/30'\n                        }`}\n                        whileHover={{ scale: 1.05 }}\n                        whileTap={{ scale: 0.95 }}\n                      >\n                        <div className=\"flex flex-col items-center gap-1\">\n                          <span className=\"font-semibold\">{algo.name.split(' ')[0]}</span>\n                          <span className=\"text-xs opacity-70\">{algo.complexity}</span>\n                        </div>\n                        {selectedAlgorithm === algo.id && (\n                          <motion.div\n                            className=\"absolute inset-0 rounded-lg bg-cyan-400/10\"\n                            layoutId=\"algorithmGlow\"\n                            transition={{ type: \"spring\", bounce: 0.2, duration: 0.6 }}\n                          />\n                        )}\n                      </motion.button>\n                    ))}\n                  </div>\n                </div>\n\n                <div>\n                  <h3 className=\"text-cyan-400 font-semibold mb-4\">Speed</h3>\n                  <Slider\n                    value={speed}\n                    onValueChange={setSpeed}\n                    min={1}\n                    max={100}\n                    step={1}\n                    className=\"[&_[role=slider]]:bg-cyan-400 [&_[role=slider]]:border-cyan-300 [&_[role=slider]]:shadow-lg [&_[role=slider]]:shadow-cyan-400/50 [&_[role=slider]]:transition-shadow [&_[role=slider]]:hover:shadow-cyan-400/80 [&_.relative]:bg-gray-700 [&_.relative]:rounded-full [&_.bg-primary]:bg-gradient-to-r [&_.bg-primary]:from-cyan-500 [&_.bg-primary]:to-purple-500\"\n                  />\n                  <div className=\"flex justify-between text-xs text-gray-400 mt-2\">\n                    <span>Slow</span>\n                    <span className=\"text-cyan-400 font-semibold\">{speed[0]}%</span>\n                    <span>Fast</span>\n                  </div></parameter>\n</invoke>\n                </div>\n\n                <div>\n                  <h3 className=\"text-cyan-400 font-semibold mb-4\">Array Size</h3>\n                  <div className=\"space-y-3\">\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"text-sm text-gray-400\">Elements</span>\n                      <motion.span \n                        key={arraySize[0]}\n                        initial={{ scale: 1.3, color: '#00ffff' }}\n                        animate={{ scale: 1, color: '#ffffff' }}\n                        className=\"text-lg font-bold text-white\"\n                      >\n                        {arraySize[0]}\n                      </motion.span>\n                    </div>\n                    <div className=\"relative\">\n                      <Slider\n                        value={arraySize}\n                        onValueChange={setArraySize}\n                        min={5}\n                        max={50}\n                        step={1}\n                        disabled={isPlaying}\n                        className=\"cursor-pointer [&_[role=slider]]:bg-gradient-to-r [&_[role=slider]]:from-cyan-400 [&_[role=slider]]:to-purple-500 [&_[role=slider]]:border-2 [&_[role=slider]]:border-white [&_[role=slider]]:shadow-lg [&_[role=slider]]:shadow-cyan-400/50 [&_[role=slider]]:transition-shadow hover:[&_[role=slider]]:shadow-xl hover:[&_[role=slider]]:shadow-cyan-400/70 [&>span]:bg-gradient-to-r [&>span]:from-cyan-500/30 [&>span]:to-purple-500/30\"\n                      />\n                      <div className=\"absolute inset-0 bg-gradient-to-r from-cyan-500/10 to-purple-500/10 rounded-full blur-sm -z-10\" />\n                    </div>\n                  </div></parameter>\n</invoke>\n                </div>\n\n                <div className=\"space-y-3 pt-4 border-t border-cyan-500/20\">\n                  <Button\n                    onClick={isPlaying ? pauseVisualization : startVisualization}\n                    disabled={array.length === 0 || (steps.length === 0 && !isPlaying)}\n                    className=\"w-full bg-gradient-to-r from-cyan-500 to-blue-500 hover:from-cyan-400 hover:to-blue-400 text-white font-semibold py-6 rounded-xl shadow-lg shadow-cyan-500/50 hover:shadow-cyan-500/80 transition-all duration-300 disabled:opacity-50 disabled:cursor-not-allowed disabled:shadow-none group\"\n                  >\n                    <motion.div\n                      className=\"flex items-center justify-center gap-2\"\n                      whileHover={{ scale: 1.05 }}\n                      whileTap={{ scale: 0.95 }}\n                    >\n                      {isPlaying ? (\n                        <>\n                          <motion.div\n                            initial={{ rotate: 0 }}\n                            animate={{ rotate: 360 }}\n                            transition={{ duration: 2, repeat: Infinity, ease: \"linear\" }}\n                          >\n                            <Pause className=\"w-5 h-5\" />\n                          </motion.div>\n                          <span>Pause</span>\n                        </>\n                      ) : (\n                        <>\n                          <motion.div\n                            animate={{ \n                              x: [0, 3, 0],\n                              filter: [\n                                \"drop-shadow(0 0 0px rgba(0,255,255,0))\",\n                                \"drop-shadow(0 0 8px rgba(0,255,255,0.8))\",\n                                \"drop-shadow(0 0 0px rgba(0,255,255,0))\"\n                              ]\n                            }}\n                            transition={{ \n                              duration: 1.5, \n                              repeat: Infinity,\n                              ease: \"easeInOut\"\n                            }}\n                          >\n                            <Play className=\"w-5 h-5 fill-current\" />\n                          </motion.div>\n                          <span>Start</span>\n                        </>\n                      )}\n                    </motion.div>\n                  </Button>\n\n                  <Button\n                    onClick={resetVisualization}\n                    variant=\"outline\"\n                    className=\"w-full border-2 border-purple-500/50 bg-purple-500/10 hover:bg-purple-500/20 text-purple-300 hover:text-purple-200 font-semibold py-6 rounded-xl shadow-lg shadow-purple-500/30 hover:shadow-purple-500/60 transition-all duration-300 group\"\n                  >\n                    <motion.div\n                      className=\"flex items-center justify-center gap-2\"\n                      whileHover={{ scale: 1.05 }}\n                      whileTap={{ scale: 0.95 }}\n                    >\n                      <motion.div\n                        whileHover={{ \n                          rotate: -360,\n                          filter: \"drop-shadow(0 0 8px rgba(168,85,247,0.8))\"\n                        }}\n                        transition={{ duration: 0.6, ease: \"easeInOut\" }}\n                      >\n                        <RotateCcw className=\"w-5 h-5\" />\n                      </motion.div>\n                      <span>Reset</span>\n                    </motion.div>\n                  </Button>\n\n                  <Button\n                    onClick={() => {\n                      generateSortingSteps(selectedAlgorithm);\n                    }}\n                    disabled={array.length === 0 || isPlaying}\n                    className=\"w-full bg-gradient-to-r from-purple-500 to-pink-500 hover:from-purple-400 hover:to-pink-400 text-white font-semibold py-6 rounded-xl shadow-lg shadow-purple-500/50 hover:shadow-purple-500/80 transition-all duration-300 disabled:opacity-50 disabled:cursor-not-allowed disabled:shadow-none\"\n                  >\n                    <motion.div\n                      className=\"flex items-center justify-center gap-2\"\n                      whileHover={{ scale: 1.05 }}\n                      whileTap={{ scale: 0.95 }}\n                    >\n                      <motion.div\n                        animate={{ \n                          scale: [1, 1.2, 1],\n                          filter: [\n                            \"drop-shadow(0 0 0px rgba(255,0,255,0))\",\n                            \"drop-shadow(0 0 10px rgba(255,0,255,0.9))\",\n                            \"drop-shadow(0 0 0px rgba(255,0,255,0))\"\n                          ]\n                        }}\n                        transition={{ \n                          duration: 2, \n                          repeat: Infinity,\n                          ease: \"easeInOut\"\n                        }}\n                      >\n                        <Zap className=\"w-5 h-5\" />\n                      </motion.div>\n                      <span>Generate Steps</span>\n                    </motion.div>\n                  </Button>\n                </div>\n              </div>\n            </div>\n\n            <motion.div\n              initial={{ opacity: 0, x: -50 }}\n              animate={{ opacity: 1, x: 0 }}\n              transition={{ duration: 0.6, delay: 0.2 }}\n              className=\"bg-gray-800/50 backdrop-blur-lg rounded-2xl p-6 border border-purple-500/30 shadow-[0_0_30px_rgba(168,85,247,0.3)] hover:shadow-[0_0_50px_rgba(168,85,247,0.5)] transition-all duration-300\"\n            >\n              <div className=\"space-y-4\">\n                <div className=\"flex items-center gap-2 text-purple-400 font-semibold mb-4\">\n                  <BarChart3 className=\"w-5 h-5\" />\n                  <span className=\"text-sm uppercase tracking-wider\">Statistics</span>\n                </div>\n\n                <div className=\"space-y-4\">\n                  {/* Comparisons */}\n                  <div className=\"bg-gray-700/30 rounded-lg p-4 border border-cyan-500/20\">\n                    <div className=\"flex items-center justify-between mb-2\">\n                      <span className=\"text-sm text-gray-400\">Comparisons</span>\n                      <motion.span\n                        key={steps[currentStep]?.comparingIndices.length || 0}\n                        initial={{ scale: 1.3, color: '#00ffff' }}\n                        animate={{ scale: 1, color: '#ffffff' }}\n                        className=\"text-2xl font-bold text-cyan-400\"\n                      >\n                        {currentStep > 0 ? currentStep : 0}\n                      </motion.span>\n                    </div>\n                    <div className=\"h-2 bg-gray-800 rounded-full overflow-hidden\">\n                      <motion.div\n                        className=\"h-full bg-gradient-to-r from-cyan-500 to-cyan-400 shadow-lg shadow-cyan-500/50\"\n                        initial={{ width: 0 }}\n                        animate={{ \n                          width: steps.length > 0 ? `${(currentStep / steps.length) * 100}%` : '0%'\n                        }}\n                        transition={{ duration: 0.3 }}\n                      />\n                    </div>\n                  </div>\n\n                  {/* Swaps */}\n                  <div className=\"bg-gray-700/30 rounded-lg p-4 border border-pink-500/20\">\n                    <div className=\"flex items-center justify-between mb-2\">\n                      <span className=\"text-sm text-gray-400\">Swaps</span>\n                      <motion.span\n                        key={steps[currentStep]?.swappingIndices.length || 0}\n                        initial={{ scale: 1.3, color: '#ff00ff' }}\n                        animate={{ scale: 1, color: '#ffffff' }}\n                        className=\"text-2xl font-bold text-pink-400\"\n                      >\n                        {steps.slice(0, currentStep).filter(s => s.swappingIndices.length > 0).length}\n                      </motion.span>\n                    </div>\n                    <div className=\"h-2 bg-gray-800 rounded-full overflow-hidden\">\n                      <motion.div\n                        className=\"h-full bg-gradient-to-r from-pink-500 to-pink-400 shadow-lg shadow-pink-500/50\"\n                        initial={{ width: 0 }}\n                        animate={{ \n                          width: steps.length > 0 \n                            ? `${(steps.slice(0, currentStep).filter(s => s.swappingIndices.length > 0).length / Math.max(steps.filter(s => s.swappingIndices.length > 0).length, 1)) * 100}%` \n                            : '0%'\n                        }}\n                        transition={{ duration: 0.3 }}\n                      />\n                    </div>\n                  </div>\n\n                  {/* Progress */}\n                  <div className=\"bg-gray-700/30 rounded-lg p-4 border border-purple-500/20\">\n                    <div className=\"flex items-center justify-between mb-2\">\n                      <span className=\"text-sm text-gray-400\">Progress</span>\n                      <motion.span\n                        key={currentStep}\n                        initial={{ scale: 1.3, color: '#a855f7' }}\n                        animate={{ scale: 1, color: '#ffffff' }}\n                        className=\"text-2xl font-bold text-purple-400\"\n                      >\n                        {steps.length > 0 ? Math.round((currentStep / steps.length) * 100) : 0}%\n                      </motion.span>\n                    </div>\n                    <div className=\"h-2 bg-gray-800 rounded-full overflow-hidden\">\n                      <motion.div\n                        className=\"h-full bg-gradient-to-r from-purple-500 via-pink-500 to-cyan-500 shadow-lg shadow-purple-500/50\"\n                        initial={{ width: 0 }}\n                        animate={{ \n                          width: steps.length > 0 ? `${(currentStep / steps.length) * 100}%` : '0%'\n                        }}\n                        transition={{ duration: 0.3 }}\n                      />\n                    </div>\n                  </div>\n\n                  {/* Sorted Elements */}\n                  <div className=\"bg-gray-700/30 rounded-lg p-4 border border-green-500/20\">\n                    <div className=\"flex items-center justify-between mb-2\">\n                      <span className=\"text-sm text-gray-400\">Sorted</span>\n                      <motion.span\n                        key={steps[currentStep]?.sortedIndices.length || 0}\n                        initial={{ scale: 1.3, color: '#00ff00' }}\n                        animate={{ scale: 1, color: '#ffffff' }}\n                        className=\"text-2xl font-bold text-green-400\"\n                      >\n                        {steps[currentStep]?.sortedIndices.length || 0}/{array.length}\n                      </motion.span>\n                    </div>\n                    <div className=\"h-2 bg-gray-800 rounded-full overflow-hidden\">\n                      <motion.div\n                        className=\"h-full bg-gradient-to-r from-green-500 to-green-400 shadow-lg shadow-green-500/50\"\n                        initial={{ width: 0 }}\n                        animate={{ \n                          width: array.length > 0 \n                            ? `${((steps[currentStep]?.sortedIndices.length || 0) / array.length) * 100}%` \n                            : '0%'\n                        }}\n                        transition={{ duration: 0.3 }}\n                      />\n                    </div>\n                  </div>\n\n                  {/* Algorithm Info */}\n                  <div className=\"bg-gradient-to-br from-cyan-500/10 to-purple-500/10 rounded-lg p-4 border border-cyan-500/30 mt-6\">\n                    <div className=\"text-xs text-gray-400 mb-2\">Current Algorithm</div>\n                    <div className=\"text-lg font-bold text-white mb-1\">\n                      {mockAlgorithms.find(a => a.id === selectedAlgorithm)?.name}\n                    </div>\n                    <div className=\"text-sm text-cyan-400\">\n                      {mockAlgorithms.find(a => a.id === selectedAlgorithm)?.complexity}\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </motion.div>\n          </div>\n\n          <div className=\"lg:col-span-3\">\n            <div className=\"bg-gray-800/50 backdrop-blur-lg rounded-2xl p-8 border border-purple-500/30 shadow-lg shadow-purple-500/20 min-h-[600px]\">\n              {array.length === 0 ? (\n                <motion.div\n                  initial={{ opacity: 0, scale: 0.8 }}\n                  animate={{ opacity: 1, scale: 1 }}\n                  transition={{ duration: 0.6 }}\n                  className=\"flex flex-col items-center justify-center h-full space-y-6\"\n                >\n                  <motion.div\n                    animate={{\n                      rotate: [0, 360],\n                      scale: [1, 1.1, 1]\n                    }}\n                    transition={{\n                      rotate: { duration: 3, repeat: Infinity, ease: \"linear\" },\n                      scale: { duration: 2, repeat: Infinity }\n                    }}\n                  >\n                    <BarChart3 className=\"w-24 h-24 text-cyan-400\" strokeWidth={1.5} />\n                  </motion.div>\n                  <div className=\"text-center space-y-2\">\n                    <h3 className=\"text-2xl font-bold text-white\">Ready to Visualize</h3>\n                    <p className=\"text-gray-400\">Generate an array to begin sorting</p>\n                  </div>\n                  <motion.div\n                    whileHover={{ scale: 1.05 }}\n                    whileTap={{ scale: 0.95 }}\n                  >\n                    <Button\n                      onClick={generateRandomArray}\n                      className=\"bg-gradient-to-r from-cyan-500 to-purple-500 hover:from-cyan-400 hover:to-purple-400 text-white font-semibold px-8 py-6 text-lg rounded-xl shadow-lg shadow-cyan-500/50 hover:shadow-xl hover:shadow-cyan-500/70 transition-all duration-300\"\n                    >\n                      <BarChart3 className=\"w-5 h-5 mr-2\" />\n                      Generate Array\n                    </Button>\n                  </motion.div>\n                </motion.div>\n              ) : (\n                <div className=\"h-full flex items-end justify-center gap-1 px-4\"></parameter>\n</invoke>\n                {array.length === 0 ? (\n                  <motion.div\n                    initial={{ opacity: 0, scale: 0.8 }}\n                    animate={{ opacity: 1, scale: 1 }}\n                    transition={{ duration: 0.6 }}\n                    className=\"flex flex-col items-center justify-center h-full space-y-6\"\n                  >\n                    <motion.div\n                      animate={{\n                        rotate: [0, 360],\n                        scale: [1, 1.2, 1]\n                      }}\n                      transition={{\n                        duration: 3,\n                        repeat: Infinity,\n                        ease: \"easeInOut\"\n                      }}\n                    >\n                      <BarChart3 className=\"w-24 h-24 text-cyan-400/50\" />\n                    </motion.div>\n                    <div className=\"text-center space-y-2\">\n                      <p className=\"text-2xl font-semibold text-gray-400\">No Array Generated</p>\n                      <p className=\"text-gray-500\">Click \"Generate Array\" to start visualizing</p>\n                    </div>\n                  </motion.div>\n                ) : (\n                  array.map((element, index) => {\n                    const isComparing = steps[currentStep - 1]?.comparingIndices.includes(index);\n                    const isSwapping = steps[currentStep - 1]?.swappingIndices.includes(index);\n                    const isSorted = steps[currentStep - 1]?.sortedIndices.includes(index);\n                    \n                    const maxValue = Math.max(...array.map(el => el.value));\n                    const heightPercentage = (element.value / maxValue) * 100;\n                    \n                    let barColor = NEON_COLORS[index % NEON_COLORS.length];\n                    let glowColor = barColor;\n                    let glowIntensity = 0.3;\n                    \n                    if (isSorted) {\n                      barColor = '#00ff00';\n                      glowColor = '#00ff00';\n                      glowIntensity = 0.6;\n                    } else if (isSwapping) {\n                      barColor = '#ff0066';\n                      glowColor = '#ff0066';\n                      glowIntensity = 0.8;\n                    } else if (isComparing) {\n                      barColor = '#ffff00';\n                      glowColor = '#ffff00';\n                      glowIntensity = 0.7;\n                    }\n                    \n                    return (\n                      <motion.div\n                        key={element.id}\n                        className=\"relative flex-1 min-w-[4px] max-w-[60px] group\"\n                        initial={{ opacity: 0, y: 50 }}\n                        animate={{ \n                          opacity: 1, \n                          y: 0,\n                          scale: isSwapping ? [1, 1.1, 1] : isComparing ? 1.05 : 1\n                        }}\n                        transition={{ \n                          duration: 0.3,\n                          scale: { duration: 0.2, repeat: isSwapping ? Infinity : 0 }\n                        }}\n                        layout\n                      >\n                        {/* Trail effect for swapping */}\n                        {isSwapping && (\n                          <>\n                            <motion.div\n                              className=\"absolute inset-0 rounded-t-lg\"\n                              style={{\n                                background: `linear-gradient(to top, transparent, ${barColor})`,\n                                filter: `blur(8px)`,\n                                opacity: 0.6\n                              }}\n                              animate={{\n                                opacity: [0.3, 0.8, 0.3],\n                                scale: [1, 1.2, 1]\n                              }}\n                              transition={{\n                                duration: 0.5,\n                                repeat: Infinity\n                              }}\n                            />\n                            <motion.div\n                              className=\"absolute -top-2 left-1/2 -translate-x-1/2 w-full h-full\"\n                              initial={{ opacity: 0, y: 0 }}\n                              animate={{ \n                                opacity: [0, 0.6, 0],\n                                y: [-20, -40, -60]\n                              }}\n                              transition={{\n                                duration: 0.8,\n                                repeat: Infinity\n                              }}\n                            >\n                              <div \n                                className=\"w-full h-full rounded-full\"\n                                style={{\n                                  background: `radial-gradient(circle, ${barColor}, transparent)`,\n                                  filter: 'blur(10px)'\n                                }}\n                              />\n                            </motion.div>\n                          </>\n                        )}\n                        \n                        {/* Main bar */}\n                        <motion.div\n                          className=\"relative w-full rounded-t-lg overflow-hidden\"\n                          style={{\n                            height: `${heightPercentage}%`,\n                            minHeight: '20px',\n                            background: `linear-gradient(to top, ${barColor}, ${barColor}dd)`,\n                            boxShadow: `\n                              0 0 ${glowIntensity * 20}px ${glowColor}${Math.floor(glowIntensity * 255).toString(16).padStart(2, '0')},\n                              0 0 ${glowIntensity * 40}px ${glowColor}${Math.floor(glowIntensity * 128).toString(16).padStart(2, '0')},\n                              inset 0 0 ${glowIntensity * 30}px ${glowColor}${Math.floor(glowIntensity * 64).toString(16).padStart(2, '0')}\n                            `\n                          }}\n                          animate={{\n                            height: `${heightPercentage}%`,\n                            background: `linear-gradient(to top, ${barColor}, ${barColor}dd)`,\n                            boxShadow: `\n                              0 0 ${glowIntensity * 20}px ${glowColor}${Math.floor(glowIntensity * 255).toString(16).padStart(2, '0')},\n                              0 0 ${glowIntensity * 40}px ${glowColor}${Math.floor(glowIntensity * 128).toString(16).padStart(2, '0')},\n                              inset 0 0 ${glowIntensity * 30}px ${glowColor}${Math.floor(glowIntensity * 64).toString(16).padStart(2, '0')}\n                            `\n                          }}\n                          transition={{\n                            height: { duration: 0.5, ease: \"easeInOut\" },\n                            background: { duration: 0.3 },\n                            boxShadow: { duration: 0.3 }\n                          }}\n                        >\n                          {/* Shimmer effect */}\n                          <motion.div\n                            className=\"absolute inset-0 bg-gradient-to-r from-transparent via-white/30 to-transparent\"\n                            animate={{\n                              x: ['-100%', '200%']\n                            }}\n                            transition={{\n                              duration: 2,\n                              repeat: Infinity,\n                              repeatDelay: 1,\n                              ease: \"easeInOut\"\n                            }}\n                          />\n                          \n                          {/* Pulse effect for comparing */}\n                          {isComparing && (\n                            <motion.div\n                              className=\"absolute inset-0\"\n                              style={{\n                                background: `radial-gradient(circle at center, ${barColor}88, transparent)`\n                              }}\n                              animate={{\n                                opacity: [0.5, 1, 0.5],\n                                scale: [1, 1.1, 1]\n                              }}\n                              transition={{\n                                duration: 0.6,\n                                repeat: Infinity\n                              }}\n                            />\n                          )}\n                          \n                          {/* Sorted checkmark indicator */}\n                          {isSorted && (\n                            <motion.div\n                              className=\"absolute top-2 left-1/2 -translate-x-1/2\"\n                              initial={{ scale: 0, rotate: -180 }}\n                              animate={{ scale: 1, rotate: 0 }}\n                              transition={{ type: \"spring\", bounce: 0.5 }}\n                            >\n                              <div className=\"w-4 h-4 rounded-full bg-white/90 flex items-center justify-center\">\n                                <svg className=\"w-3 h-3 text-green-600\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\" strokeWidth={3}>\n                                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M5 13l4 4L19 7\" />\n                                </svg>\n                              </div>\n                            </motion.div>\n                          )}\n                        </motion.div>\n                        \n                        {/* Value label */}\n                        <motion.div\n                          className=\"absolute -bottom-6 left-1/2 -translate-x-1/2 text-xs font-mono font-bold whitespace-nowrap opacity-0 group-hover:opacity-100 transition-opacity duration-200\"\n                          style={{\n                            color: barColor,\n                            textShadow: `0 0 10px ${barColor}88`\n                          }}\n                        >\n                          {element.value}\n                        </motion.div>\n                        \n                        {/* Glow base */}\n                        <motion.div\n                          className=\"absolute -bottom-1 left-1/2 -translate-x-1/2 w-full h-2 rounded-full blur-md\"\n                          style={{\n                            background: `radial-gradient(ellipse, ${barColor}, transparent)`,\n                            opacity: glowIntensity\n                          }}\n                          animate={{\n                            opacity: glowIntensity,\n                            scale: isSwapping ? [1, 1.5, 1] : 1\n                          }}\n                          transition={{\n                            scale: { duration: 0.5, repeat: isSwapping ? Infinity : 0 }\n                          }}\n                        />\n                      </motion.div>\n                    );\n                  })\n                )}\n              </div>\n            </div>\n\n            <motion.div\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ delay: 0.4, duration: 0.6 }}\n              className=\"mt-6 bg-gray-800/50 backdrop-blur-lg rounded-xl p-6 border border-purple-500/30 shadow-lg shadow-purple-500/10\"\n            >\n              <h3 className=\"text-purple-400 font-semibold mb-4 flex items-center gap-2\">\n                <BarChart3 className=\"w-5 h-5\" />\n                <span className=\"uppercase tracking-wider text-sm\">Legend</span>\n              </h3>\n              \n              <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n                <motion.div\n                  className=\"flex items-center gap-3 p-3 rounded-lg bg-gray-700/30 border border-gray-600/50 hover:border-cyan-500/50 transition-all duration-300\"\n                  whileHover={{ scale: 1.05 }}\n                >\n                  <motion.div\n                    className=\"w-4 h-12 rounded bg-gradient-to-t from-cyan-500 to-cyan-300 shadow-lg\"\n                    animate={{\n                      boxShadow: [\n                        '0 0 10px rgba(0, 255, 255, 0.5)',\n                        '0 0 20px rgba(0, 255, 255, 0.8)',\n                        '0 0 10px rgba(0, 255, 255, 0.5)'\n                      ]\n                    }}\n                    transition={{ duration: 1.5, repeat: Infinity }}\n                  />\n                  <div>\n                    <div className=\"text-white font-medium text-sm\">Default</div>\n                    <div className=\"text-gray-400 text-xs\">Unsorted</div>\n                  </div>\n                </motion.div>\n\n                <motion.div\n                  className=\"flex items-center gap-3 p-3 rounded-lg bg-gray-700/30 border border-gray-600/50 hover:border-yellow-500/50 transition-all duration-300\"\n                  whileHover={{ scale: 1.05 }}\n                >\n                  <motion.div\n                    className=\"w-4 h-12 rounded bg-gradient-to-t from-yellow-500 to-yellow-300 shadow-lg\"\n                    animate={{\n                      boxShadow: [\n                        '0 0 15px rgba(255, 255, 0, 0.6)',\n                        '0 0 25px rgba(255, 255, 0, 0.9)',\n                        '0 0 15px rgba(255, 255, 0, 0.6)'\n                      ],\n                      scale: [1, 1.1, 1]\n                    }}\n                    transition={{ duration: 1, repeat: Infinity }}\n                  />\n                  <div>\n                    <div className=\"text-white font-medium text-sm\">Comparing</div>\n                    <div className=\"text-gray-400 text-xs\">Active</div>\n                  </div>\n                </motion.div>\n\n                <motion.div\n                  className=\"flex items-center gap-3 p-3 rounded-lg bg-gray-700/30 border border-gray-600/50 hover:border-pink-500/50 transition-all duration-300\"\n                  whileHover={{ scale: 1.05 }}\n                >\n                  <motion.div\n                    className=\"w-4 h-12 rounded bg-gradient-to-t from-pink-500 to-pink-300 shadow-lg\"\n                    animate={{\n                      boxShadow: [\n                        '0 0 15px rgba(255, 0, 102, 0.6)',\n                        '0 0 30px rgba(255, 0, 102, 1)',\n                        '0 0 15px rgba(255, 0, 102, 0.6)'\n                      ],\n                      x: [-2, 2, -2]\n                    }}\n                    transition={{ duration: 0.8, repeat: Infinity }}\n                  />\n                  <div>\n                    <div className=\"text-white font-medium text-sm\">Swapping</div>\n                    <div className=\"text-gray-400 text-xs\">Moving</div>\n                  </div>\n                </motion.div>\n\n                <motion.div\n                  className=\"flex items-center gap-3 p-3 rounded-lg bg-gray-700/30 border border-gray-600/50 hover:border-green-500/50 transition-all duration-300\"\n                  whileHover={{ scale: 1.05 }}\n                >\n                  <motion.div\n                    className=\"w-4 h-12 rounded bg-gradient-to-t from-green-500 to-green-300 shadow-lg\"\n                    animate={{\n                      boxShadow: [\n                        '0 0 10px rgba(0, 255, 0, 0.5)',\n                        '0 0 20px rgba(0, 255, 0, 0.8)',\n                        '0 0 10px rgba(0, 255, 0, 0.5)'\n                      ]\n                    }}\n                    transition={{ duration: 2, repeat: Infinity }}\n                  />\n                  <div>\n                    <div className=\"text-white font-medium text-sm\">Sorted</div>\n                    <div className=\"text-gray-400 text-xs\">Complete</div>\n                  </div>\n                </motion.div>\n              </div>\n            </motion.div>\n          </div>\n        </div>\n\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.6, delay: 0.3 }}\n          className=\"bg-gray-800/50 backdrop-blur-lg rounded-2xl p-6 border border-purple-500/30 shadow-lg shadow-purple-500/20\"\n        >\n          <div className=\"space-y-4\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center gap-3\">\n                <motion.div\n                  animate={{\n                    rotate: [0, 360],\n                  }}\n                  transition={{ duration: 3, repeat: Infinity, ease: \"linear\" }}\n                  className=\"w-8 h-8 rounded-full bg-gradient-to-r from-cyan-400 to-purple-500 flex items-center justify-center\"\n                >\n                  <BarChart3 className=\"w-4 h-4 text-white\" />\n                </motion.div>\n                <div>\n                  <h3 className=\"text-cyan-400 font-semibold text-lg\">Timeline Control</h3>\n                  <p className=\"text-xs text-gray-400\">Step-by-step visualization progress</p>\n                </div>\n              </div>\n              \n              <div className=\"flex items-center gap-4\">\n                <motion.div\n                  className=\"px-4 py-2 bg-purple-500/20 border border-purple-400/50 rounded-full backdrop-blur-sm\"\n                  animate={{\n                    boxShadow: [\n                      '0 0 10px rgba(168, 85, 247, 0.3)',\n                      '0 0 20px rgba(168, 85, 247, 0.5)',\n                      '0 0 10px rgba(168, 85, 247, 0.3)'\n                    ]\n                  }}\n                  transition={{ duration: 2, repeat: Infinity }}\n                >\n                  <span className=\"text-sm font-mono text-purple-300\">\n                    Step {currentStep} / {steps.length}\n                  </span>\n                </motion.div>\n                \n                <motion.div\n                  className=\"px-4 py-2 bg-cyan-500/20 border border-cyan-400/50 rounded-full backdrop-blur-sm\"\n                  animate={{\n                    boxShadow: [\n                      '0 0 10px rgba(6, 182, 212, 0.3)',\n                      '0 0 20px rgba(6, 182, 212, 0.5)',\n                      '0 0 10px rgba(6, 182, 212, 0.3)'\n                    ]\n                  }}\n                  transition={{ duration: 2, repeat: Infinity, delay: 0.5 }}\n                >\n                  <span className=\"text-sm font-mono text-cyan-300\">\n                    {steps.length > 0 ? Math.round((currentStep / steps.length) * 100) : 0}%\n                  </span>\n                </motion.div>\n              </div>\n            </div>\n\n            {/* Timeline Scrubber */}\n            <div className=\"space-y-3\">\n              <div className=\"relative h-3 bg-gray-700/50 rounded-full overflow-hidden border border-gray-600/50\">\n                {/* Background glow effect */}\n                <motion.div\n                  className=\"absolute inset-0 bg-gradient-to-r from-cyan-500/20 via-purple-500/20 to-pink-500/20\"\n                  animate={{\n                    x: ['-100%', '100%']\n                  }}\n                  transition={{ duration: 3, repeat: Infinity, ease: \"linear\" }}\n                />\n                \n                {/* Progress bar */}\n                <motion.div\n                  className=\"absolute inset-y-0 left-0 bg-gradient-to-r from-cyan-500 via-purple-500 to-pink-500 rounded-full\"\n                  initial={{ width: '0%' }}\n                  animate={{\n                    width: steps.length > 0 ? `${(currentStep / steps.length) * 100}%` : '0%'\n                  }}\n                  transition={{ duration: 0.3, ease: \"easeOut\" }}\n                >\n                  <motion.div\n                    className=\"absolute inset-0 bg-gradient-to-r from-transparent via-white/30 to-transparent\"\n                    animate={{\n                      x: ['-100%', '200%']\n                    }}\n                    transition={{ duration: 1.5, repeat: Infinity, ease: \"linear\" }}\n                  />\n                </motion.div>\n\n                {/* Progress indicator dot */}\n                {steps.length > 0 && (\n                  <motion.div\n                    className=\"absolute top-1/2 -translate-y-1/2 w-6 h-6 rounded-full bg-white border-4 border-cyan-400 shadow-lg shadow-cyan-400/50\"\n                    animate={{\n                      left: `${(currentStep / steps.length) * 100}%`,\n                      boxShadow: [\n                        '0 0 20px rgba(6, 182, 212, 0.8)',\n                        '0 0 30px rgba(6, 182, 212, 1)',\n                        '0 0 20px rgba(6, 182, 212, 0.8)'\n                      ]\n                    }}\n                    transition={{\n                      left: { duration: 0.3, ease: \"easeOut\" },\n                      boxShadow: { duration: 1.5, repeat: Infinity }\n                    }}\n                    style={{ marginLeft: '-12px' }}\n                  >\n                    <motion.div\n                      className=\"absolute inset-0 rounded-full bg-cyan-400/30\"\n                      animate={{\n                        scale: [1, 1.8, 1],\n                        opacity: [0.8, 0, 0.8]\n                      }}\n                      transition={{ duration: 2, repeat: Infinity }}\n                    />\n                  </motion.div>\n                )}\n              </div>\n\n              {/* Step markers */}\n              <div className=\"relative h-8\">\n                <div className=\"absolute inset-0 flex justify-between items-center\">\n                  {steps.length > 0 && Array.from({ length: Math.min(steps.length, 20) }).map((_, index) => {\n                    const stepIndex = Math.floor((index / Math.min(steps.length, 20)) * steps.length);\n                    const isPassed = stepIndex < currentStep;\n                    const isCurrent = stepIndex === currentStep;\n                    \n                    return (\n                      <motion.button\n                        key={index}\n                        onClick={() => {\n                          if (!isPlaying) {\n                            setCurrentStep(stepIndex);\n                            if (stepIndex < steps.length) {\n                              setArray(steps[stepIndex].array);\n                            }\n                          }\n                        }}\n                        disabled={isPlaying}\n                        className=\"relative group disabled:cursor-not-allowed\"\n                        whileHover={!isPlaying ? { scale: 1.5 } : {}}\n                        whileTap={!isPlaying ? { scale: 1.2 } : {}}\n                      >\n                        <motion.div\n                          className={`w-2 h-2 rounded-full transition-all duration-300 ${\n                            isCurrent\n                              ? 'bg-cyan-400 shadow-lg shadow-cyan-400/80'\n                              : isPassed\n                              ? 'bg-purple-500 shadow-md shadow-purple-500/50'\n                              : 'bg-gray-600'\n                          }`}\n                          animate={isCurrent ? {\n                            scale: [1, 1.5, 1],\n                            boxShadow: [\n                              '0 0 10px rgba(6, 182, 212, 0.8)',\n                              '0 0 20px rgba(6, 182, 212, 1)',\n                              '0 0 10px rgba(6, 182, 212, 0.8)'\n                            ]\n                          } : {}}\n                          transition={{ duration: 1, repeat: Infinity }}\n                        />\n                        \n                        {/* Tooltip */}\n                        {!isPlaying && (\n                          <div className=\"absolute bottom-full mb-2 left-1/2 -translate-x-1/2 opacity-0 group-hover:opacity-100 transition-opacity duration-200 pointer-events-none\">\n                            <div className=\"bg-gray-900 border border-cyan-400/50 rounded-lg px-3 py-1 whitespace-nowrap shadow-lg shadow-cyan-400/30\">\n                              <span className=\"text-xs text-cyan-300 font-mono\">Step {stepIndex}</span>\n                            </div>\n                          </div>\n                        )}\n                      </motion.button>\n                    );\n                  })}\n                </div>\n              </div>\n\n              {/* Quick navigation buttons */}\n              <div className=\"flex items-center justify-center gap-2 pt-2\">\n                <Button\n                  onClick={() => {\n                    setCurrentStep(0);\n                    if (steps.length > 0) {\n                      setArray(steps[0].array);\n                    }\n                  }}\n                  disabled={isPlaying || currentStep === 0}\n                  size=\"sm\"\n                  className=\"bg-gray-700/50 hover:bg-gray-600/50 text-cyan-400 border border-cyan-500/30 hover:border-cyan-400/50 disabled:opacity-30 disabled:cursor-not-allowed transition-all duration-300\"\n                >\n                  <RotateCcw className=\"w-3 h-3 mr-1\" />\n                  First\n                </Button>\n                \n                <Button\n                  onClick={() => {\n                    const prevStep = Math.max(0, currentStep - 1);\n                    setCurrentStep(prevStep);\n                    if (prevStep < steps.length) {\n                      setArray(steps[prevStep].array);\n                    }\n                  }}\n                  disabled={isPlaying || currentStep === 0}\n                  size=\"sm\"\n                  className=\"bg-gray-700/50 hover:bg-gray-600/50 text-purple-400 border border-purple-500/30 hover:border-purple-400/50 disabled:opacity-30 disabled:cursor-not-allowed transition-all duration-300\"\n                >\n                  \u2190 Prev\n                </Button>\n                \n                <Button\n                  onClick={() => {\n                    const nextStep = Math.min(steps.length, currentStep + 1);\n                    setCurrentStep(nextStep);\n                    if (nextStep < steps.length) {\n                      setArray(steps[nextStep].array);\n                    }\n                  }}\n                  disabled={isPlaying || currentStep >= steps.length}\n                  size=\"sm\"\n                  className=\"bg-gray-700/50 hover:bg-gray-600/50 text-purple-400 border border-purple-500/30 hover:border-purple-400/50 disabled:opacity-30 disabled:cursor-not-allowed transition-all duration-300\"\n                >\n                  Next \u2192\n                </Button>\n                \n                <Button\n                  onClick={() => {\n                    setCurrentStep(steps.length);\n                    if (steps.length > 0) {\n                      setArray(steps[steps.length - 1].array);\n                    }\n                  }}\n                  disabled={isPlaying || currentStep >= steps.length}\n                  size=\"sm\"\n                  className=\"bg-gray-700/50 hover:bg-gray-600/50 text-cyan-400 border border-cyan-500/30 hover:border-cyan-400/50 disabled:opacity-30 disabled:cursor-not-allowed transition-all duration-300\"\n                >\n                  Last\n                  <Zap className=\"w-3 h-3 ml-1\" />\n                </Button>\n              </div>\n            </div>\n          </div>\n        </motion.div>\n      </div>\n    </div>\n  );\n}",
    "error": null,
    "elapsed_time": 94.38204908370972,
    "success": true
  }
}