{
  "prompt_id": "dashboard",
  "prompt_name": "Analytics Dashboard",
  "mode": "sequential",
  "run_number": 13,
  "timestamp": "2025-10-13T18:31:08.957695",
  "response_time": 64.3190507888794,
  "total_tokens": null,
  "response_content": "import { useState, useEffect } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Moon, Sun, TrendingUp, TrendingDown, Users, DollarSign, ShoppingCart, Activity } from 'lucide-react';\nimport { motion } from 'framer-motion';\n\ninterface MetricData {\n  label: string;\n  value: string;\n  change: number;\n  icon: any;\n}\n\ninterface ChartDataPoint {\n  label: string;\n  value: number;\n}\n\ninterface TableRow {\n  id: number;\n  product: string;\n  sales: number;\n  revenue: string;\n  status: 'up' | 'down' | 'stable';\n}\n\nexport default function AnalyticsDashboard() {\n  const [isDarkMode, setIsDarkMode] = useState(true);\n  const [metrics, setMetrics] = useState<MetricData[]>([\n    { label: 'Total Revenue', value: '$45,231', change: 12.5, icon: DollarSign },\n    { label: 'Active Users', value: '2,345', change: 8.2, icon: Users },\n    { label: 'Total Orders', value: '1,234', change: -3.1, icon: ShoppingCart },\n    { label: 'Conversion Rate', value: '3.24%', change: 5.7, icon: Activity },\n  ]);\n\n  const [chartData, setChartData] = useState<ChartDataPoint[]>([\n    { label: 'Jan', value: 4000 },\n    { label: 'Feb', value: 3000 },\n    { label: 'Mar', value: 5000 },\n    { label: 'Apr', value: 4500 },\n    { label: 'May', value: 6000 },\n    { label: 'Jun', value: 5500 },\n    { label: 'Jul', value: 7000 },\n  ]);\n\n  const [pieData, setPieData] = useState<ChartDataPoint[]>([\n    { label: 'Desktop', value: 45 },\n    { label: 'Mobile', value: 35 },\n    { label: 'Tablet', value: 20 },\n  ]);\n\n  const [tableData, setTableData] = useState<TableRow[]>([\n    { id: 1, product: 'Premium Widget', sales: 1234, revenue: '$12,340', status: 'up' },\n    { id: 2, product: 'Standard Package', sales: 987, revenue: '$9,870', status: 'up' },\n    { id: 3, product: 'Basic Plan', sales: 756, revenue: '$7,560', status: 'down' },\n    { id: 4, product: 'Enterprise Suite', sales: 543, revenue: '$54,300', status: 'up' },\n    { id: 5, product: 'Starter Kit', sales: 432, revenue: '$4,320', status: 'stable' },\n  ]);\n\n  useEffect(() => {\n    if (isDarkMode) {\n      document.documentElement.classList.add('dark');\n    } else {\n      document.documentElement.classList.remove('dark');\n    }\n  }, [isDarkMode]);\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setMetrics(prev => prev.map(metric => ({\n        ...metric,\n        value: metric.label === 'Total Revenue' \n          ? `$${(Math.random() * 50000 + 40000).toFixed(0)}`\n          : metric.label === 'Active Users'\n          ? `${(Math.random() * 1000 + 2000).toFixed(0)}`\n          : metric.label === 'Total Orders'\n          ? `${(Math.random() * 500 + 1000).toFixed(0)}`\n          : `${(Math.random() * 2 + 2.5).toFixed(2)}%`,\n        change: (Math.random() * 20 - 5),\n      })));\n\n      setChartData(prev => prev.map(point => ({\n        ...point,\n        value: Math.floor(Math.random() * 3000 + 4000),\n      })));\n    }, 3000);\n\n    return () => clearInterval(interval);\n  }, []);\n\n  const maxChartValue = Math.max(...chartData.map(d => d.value));\n\n  const containerVariants = {\n    hidden: { opacity: 0 },\n    visible: {\n      opacity: 1,\n      transition: {\n        staggerChildren: 0.1,\n      },\n    },\n  };\n\n  const itemVariants = {\n    hidden: { opacity: 0, y: 20 },\n    visible: { opacity: 1, y: 0 },\n  };\n\n  return (\n    <div className={`min-h-screen ${isDarkMode ? 'dark bg-gray-950' : 'bg-gray-50'} transition-colors duration-300`}>\n      <div className=\"container mx-auto p-4 md:p-6 lg:p-8\">\n        <motion.div\n          initial=\"hidden\"\n          animate=\"visible\"\n          variants={containerVariants}\n        >\n          {/* Header */}\n          <motion.div variants={itemVariants} className=\"flex flex-col md:flex-row justify-between items-start md:items-center mb-8 gap-4\">\n            <div>\n              <h1 className=\"text-3xl md:text-4xl font-bold text-gray-900 dark:text-white\">Analytics Dashboard</h1>\n              <p className=\"text-gray-600 dark:text-gray-400 mt-2\">Real-time insights and performance metrics</p>\n            </div>\n            <Button\n              onClick={() => setIsDarkMode(!isDarkMode)}\n              variant=\"outline\"\n              size=\"icon\"\n              className=\"dark:border-gray-700\"\n            >\n              {isDarkMode ? <Sun className=\"h-5 w-5\" /> : <Moon className=\"h-5 w-5\" />}\n            </Button>\n          </motion.div>\n\n          {/* Metrics Grid */}\n          <motion.div variants={itemVariants} className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 md:gap-6 mb-8\">\n            {metrics.map((metric, index) => (\n              <motion.div\n                key={metric.label}\n                whileHover={{ scale: 1.02 }}\n                transition={{ type: 'spring', stiffness: 300 }}\n              >\n                <Card className=\"dark:bg-gray-900 dark:border-gray-800\">\n                  <CardHeader className=\"flex flex-row items-center justify-between pb-2\">\n                    <CardTitle className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">\n                      {metric.label}\n                    </CardTitle>\n                    <metric.icon className=\"h-4 w-4 text-gray-600 dark:text-gray-400\" />\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-2xl font-bold text-gray-900 dark:text-white\">{metric.value}</div>\n                    <div className=\"flex items-center mt-2\">\n                      {metric.change >= 0 ? (\n                        <TrendingUp className=\"h-4 w-4 text-green-500 mr-1\" />\n                      ) : (\n                        <TrendingDown className=\"h-4 w-4 text-red-500 mr-1\" />\n                      )}\n                      <span className={`text-sm font-medium ${metric.change >= 0 ? 'text-green-500' : 'text-red-500'}`}>\n                        {metric.change >= 0 ? '+' : ''}{metric.change.toFixed(1)}%\n                      </span>\n                      <span className=\"text-sm text-gray-600 dark:text-gray-400 ml-2\">vs last month</span>\n                    </div>\n                  </CardContent>\n                </Card>\n              </motion.div>\n            ))}\n          </motion.div>\n\n          {/* Charts Section */}\n          <motion.div variants={itemVariants} className=\"grid grid-cols-1 lg:grid-cols-3 gap-6 mb-8\">\n            {/* Bar Chart */}\n            <Card className=\"lg:col-span-2 dark:bg-gray-900 dark:border-gray-800\">\n              <CardHeader>\n                <CardTitle className=\"text-gray-900 dark:text-white\">Revenue Overview</CardTitle>\n                <CardDescription className=\"dark:text-gray-400\">Monthly revenue trends</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"h-64 flex items-end justify-between gap-2\">\n                  {chartData.map((point, index) => (\n                    <motion.div\n                      key={point.label}\n                      className=\"flex-1 flex flex-col items-center\"\n                      initial={{ height: 0 }}\n                      animate={{ height: 'auto' }}\n                      transition={{ delay: index * 0.1 }}\n                    >\n                      <motion.div\n                        className=\"w-full bg-gradient-to-t from-blue-500 to-blue-400 rounded-t-lg relative group cursor-pointer\"\n                        style={{ height: `${(point.value / maxChartValue) * 100}%` }}\n                        whileHover={{ scale: 1.05 }}\n                      >\n                        <div className=\"absolute -top-8 left-1/2 transform -translate-x-1/2 bg-gray-900 dark:bg-gray-700 text-white text-xs px-2 py-1 rounded opacity-0 group-hover:opacity-100 transition-opacity whitespace-nowrap\">\n                          ${point.value.toLocaleString()}\n                        </div>\n                      </motion.div>\n                      <span className=\"text-xs text-gray-600 dark:text-gray-400 mt-2\">{point.label}</span>\n                    </motion.div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Pie Chart */}\n            <Card className=\"dark:bg-gray-900 dark:border-gray-800\">\n              <CardHeader>\n                <CardTitle className=\"text-gray-900 dark:text-white\">Traffic Sources</CardTitle>\n                <CardDescription className=\"dark:text-gray-400\">Device breakdown</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"flex items-center justify-center h-64\">\n                  <div className=\"relative w-48 h-48\">\n                    <svg viewBox=\"0 0 100 100\" className=\"transform -rotate-90\">\n                      {pieData.reduce((acc, item, index) => {\n                        const total = pieData.reduce((sum, d) => sum + d.value, 0);\n                        const percentage = (item.value / total) * 100;\n                        const angle = (percentage / 100) * 360;\n                        const prevAngles = pieData.slice(0, index).reduce((sum, d) => sum + (d.value / total) * 360, 0);\n                        \n                        const colors = ['#3b82f6', '#8b5cf6', '#ec4899'];\n                        \n                        return [\n                          ...acc,\n                          <motion.circle\n                            key={item.label}\n                            cx=\"50\"\n                            cy=\"50\"\n                            r=\"40\"\n                            fill=\"none\"\n                            stroke={colors[index]}\n                            strokeWidth=\"20\"\n                            strokeDasharray={`${(angle / 360) * 251.2} 251.2`}\n                            strokeDashoffset={-((prevAngles / 360) * 251.2)}\n                            initial={{ strokeDasharray: '0 251.2' }}\n                            animate={{ strokeDasharray: `${(angle / 360) * 251.2} 251.2` }}\n                            transition={{ duration: 1, delay: index * 0.2 }}\n                          />\n                        ];\n                      }, [] as JSX.Element[])}\n                    </svg>\n                  </div>\n                </div>\n                <div className=\"space-y-2 mt-4\">\n                  {pieData.map((item, index) => {\n                    const colors = ['bg-blue-500', 'bg-purple-500', 'bg-pink-500'];\n                    return (\n                      <div key={item.label} className=\"flex items-center justify-between\">\n                        <div className=\"flex items-center gap-2\">\n                          <div className={`w-3 h-3 rounded-full ${colors[index]}`} />\n                          <span className=\"text-sm text-gray-600 dark:text-gray-400\">{item.label}</span>\n                        </div>\n                        <span className=\"text-sm font-medium text-gray-900 dark:text-white\">{item.value}%</span>\n                      </div>\n                    );\n                  })}\n                </div>\n              </CardContent>\n            </Card>\n          </motion.div>\n\n          {/* Data Table */}\n          <motion.div variants={itemVariants}>\n            <Card className=\"dark:bg-gray-900 dark:border-gray-800\">\n              <CardHeader>\n                <CardTitle className=\"text-gray-900 dark:text-white\">Top Products</CardTitle>\n                <CardDescription className=\"dark:text-gray-400\">Best performing products this month</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <Tabs defaultValue=\"all\" className=\"w-full\">\n                  <TabsList className=\"dark:bg-gray-800\">\n                    <TabsTrigger value=\"all\">All Products</TabsTrigger>\n                    <TabsTrigger value=\"trending\">Trending</TabsTrigger>\n                    <TabsTrigger value=\"declining\">Declining</TabsTrigger>\n                  </TabsList>\n                  <TabsContent value=\"all\" className=\"mt-4\">\n                    <div className=\"overflow-x-auto\">\n                      <table className=\"w-full\">\n                        <thead>\n                          <tr className=\"border-b dark:border-gray-800\">\n                            <th className=\"text-left py-3 px-4 text-sm font-medium text-gray-600 dark:text-gray-400\">Product</th>\n                            <th className=\"text-left py-3 px-4 text-sm font-medium text-gray-600 dark:text-gray-400\">Sales</th>\n                            <th className=\"text-left py-3 px-4 text-sm font-medium text-gray-600 dark:text-gray-400\">Revenue</th>\n                            <th className=\"text-left py-3 px-4 text-sm font-medium text-gray-600 dark:text-gray-400\">Status</th>\n                          </tr>\n                        </thead>\n                        <tbody>\n                          {tableData.map((row, index) => (\n                            <motion.tr\n                              key={row.id}\n                              className=\"border-b dark:border-gray-800 hover:bg-gray-50 dark:hover:bg-gray-800 transition-colors\"\n                              initial={{ opacity: 0, x: -20 }}\n                              animate={{ opacity: 1, x: 0 }}\n                              transition={{ delay: index * 0.05 }}\n                            >\n                              <td className=\"py-3 px-4 text-sm text-gray-900 dark:text-white font-medium\">{row.product}</td>\n                              <td className=\"py-3 px-4 text-sm text-gray-600 dark:text-gray-400\">{row.sales.toLocaleString()}</td>\n                              <td className=\"py-3 px-4 text-sm text-gray-900 dark:text-white font-medium\">{row.revenue}</td>\n                              <td className=\"py-3 px-4\">\n                                <div className=\"flex items-center gap-1\">\n                                  {row.status === 'up' && <TrendingUp className=\"h-4 w-4 text-green-500\" />}\n                                  {row.status === 'down' && <TrendingDown className=\"h-4 w-4 text-red-500\" />}\n                                  {row.status === 'stable' && <Activity className=\"h-4 w-4 text-gray-500\" />}\n                                  <span className={`text-sm ${\n                                    row.status === 'up' ? 'text-green-500' : \n                                    row.status === 'down' ? 'text-red-500' : \n                                    'text-gray-500'\n                                  }`}>\n                                    {row.status === 'up' ? 'Growing' : row.status === 'down' ? 'Declining' : 'Stable'}\n                                  </span>\n                                </div>\n                              </td>\n                            </motion.tr>\n                          ))}\n                        </tbody>\n                      </table>\n                    </div>\n                  </TabsContent>\n                  <TabsContent value=\"trending\" className=\"mt-4\">\n                    <div className=\"overflow-x-auto\">\n                      <table className=\"w-full\">\n                        <thead>\n                          <tr className=\"border-b dark:border-gray-800\">\n                            <th className=\"text-left py-3 px-4 text-sm font-medium text-gray-600 dark:text-gray-400\">Product</th>\n                            <th className=\"text-left py-3 px-4 text-sm font-medium text-gray-600 dark:text-gray-400\">Sales</th>\n                            <th className=\"text-left py-3 px-4 text-sm font-medium text-gray-600 dark:text-gray-400\">Revenue</th>\n                            <th className=\"text-left py-3 px-4 text-sm font-medium text-gray-600 dark:text-gray-400\">Status</th>\n                          </tr>\n                        </thead>\n                        <tbody>\n                          {tableData.filter(row => row.status === 'up').map((row, index) => (\n                            <motion.tr\n                              key={row.id}\n                              className=\"border-b dark:border-gray-800 hover:bg-gray-50 dark:hover:bg-gray-800 transition-colors\"\n                              initial={{ opacity: 0, x: -20 }}\n                              animate={{ opacity: 1, x: 0 }}\n                              transition={{ delay: index * 0.05 }}\n                            >\n                              <td className=\"py-3 px-4 text-sm text-gray-900 dark:text-white font-medium\">{row.product}</td>\n                              <td className=\"py-3 px-4 text-sm text-gray-600 dark:text-gray-400\">{row.sales.toLocaleString()}</td>\n                              <td className=\"py-3 px-4 text-sm text-gray-900 dark:text-white font-medium\">{row.revenue}</td>\n                              <td className=\"py-3 px-4\">\n                                <div className=\"flex items-center gap-1\">\n                                  <TrendingUp className=\"h-4 w-4 text-green-500\" />\n                                  <span className=\"text-sm text-green-500\">Growing</span>\n                                </div>\n                              </td>\n                            </motion.tr>\n                          ))}\n                        </tbody>\n                      </table>\n                    </div>\n                  </TabsContent>\n                  <TabsContent value=\"declining\" className=\"mt-4\">\n                    <div className=\"overflow-x-auto\">\n                      <table className=\"w-full\">\n                        <thead>\n                          <tr className=\"border-b dark:border-gray-800\">\n                            <th className=\"text-left py-3 px-4 text-sm font-medium text-gray-600 dark:text-gray-400\">Product</th>\n                            <th className=\"text-left py-3 px-4 text-sm font-medium text-gray-600 dark:text-gray-400\">Sales</th>\n                            <th className=\"text-left py-3 px-4 text-sm font-medium text-gray-600 dark:text-gray-400\">Revenue</th>\n                            <th className=\"text-left py-3 px-4 text-sm font-medium text-gray-600 dark:text-gray-400\">Status</th>\n                          </tr>\n                        </thead>\n                        <tbody>\n                          {tableData.filter(row => row.status === 'down').map((row, index) => (\n                            <motion.tr\n                              key={row.id}\n                              className=\"border-b dark:border-gray-800 hover:bg-gray-50 dark:hover:bg-gray-800 transition-colors\"\n                              initial={{ opacity: 0, x: -20 }}\n                              animate={{ opacity: 1, x: 0 }}\n                              transition={{ delay: index * 0.05 }}\n                            >\n                              <td className=\"py-3 px-4 text-sm text-gray-900 dark:text-white font-medium\">{row.product}</td>\n                              <td className=\"py-3 px-4 text-sm text-gray-600 dark:text-gray-400\">{row.sales.toLocaleString()}</td>\n                              <td className=\"py-3 px-4 text-sm text-gray-900 dark:text-white font-medium\">{row.revenue}</td>\n                              <td className=\"py-3 px-4\">\n                                <div className=\"flex items-center gap-1\">\n                                  <TrendingDown className=\"h-4 w-4 text-red-500\" />\n                                  <span className=\"text-sm text-red-500\">Declining</span>\n                                </div>\n                              </td>\n                            </motion.tr>\n                          ))}\n                        </tbody>\n                      </table>\n                    </div>\n                  </TabsContent>\n                </Tabs>\n              </CardContent>\n            </Card>\n          </motion.div>\n        </motion.div>\n      </div>\n    </div>\n  );\n}",
  "error": null,
  "overall_score": 45,
  "code_quality_score": 15,
  "architecture_score": 10,
  "performance_score": 8,
  "accessibility_score": 12,
  "metadata": {
    "document_id": "eval_room_4925665c9426",
    "prompt_category": "intermediate",
    "prompt_complexity": 6.0
  },
  "raw_response": {
    "document_id": "eval_room_4925665c9426",
    "mode": "sequential",
    "prompt": "Generate an analytics dashboard page with charts, data tables, real-time updates, dark mode, and responsive design",
    "content": "import { useState, useEffect } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Moon, Sun, TrendingUp, TrendingDown, Users, DollarSign, ShoppingCart, Activity } from 'lucide-react';\nimport { motion } from 'framer-motion';\n\ninterface MetricData {\n  label: string;\n  value: string;\n  change: number;\n  icon: any;\n}\n\ninterface ChartDataPoint {\n  label: string;\n  value: number;\n}\n\ninterface TableRow {\n  id: number;\n  product: string;\n  sales: number;\n  revenue: string;\n  status: 'up' | 'down' | 'stable';\n}\n\nexport default function AnalyticsDashboard() {\n  const [isDarkMode, setIsDarkMode] = useState(true);\n  const [metrics, setMetrics] = useState<MetricData[]>([\n    { label: 'Total Revenue', value: '$45,231', change: 12.5, icon: DollarSign },\n    { label: 'Active Users', value: '2,345', change: 8.2, icon: Users },\n    { label: 'Total Orders', value: '1,234', change: -3.1, icon: ShoppingCart },\n    { label: 'Conversion Rate', value: '3.24%', change: 5.7, icon: Activity },\n  ]);\n\n  const [chartData, setChartData] = useState<ChartDataPoint[]>([\n    { label: 'Jan', value: 4000 },\n    { label: 'Feb', value: 3000 },\n    { label: 'Mar', value: 5000 },\n    { label: 'Apr', value: 4500 },\n    { label: 'May', value: 6000 },\n    { label: 'Jun', value: 5500 },\n    { label: 'Jul', value: 7000 },\n  ]);\n\n  const [pieData, setPieData] = useState<ChartDataPoint[]>([\n    { label: 'Desktop', value: 45 },\n    { label: 'Mobile', value: 35 },\n    { label: 'Tablet', value: 20 },\n  ]);\n\n  const [tableData, setTableData] = useState<TableRow[]>([\n    { id: 1, product: 'Premium Widget', sales: 1234, revenue: '$12,340', status: 'up' },\n    { id: 2, product: 'Standard Package', sales: 987, revenue: '$9,870', status: 'up' },\n    { id: 3, product: 'Basic Plan', sales: 756, revenue: '$7,560', status: 'down' },\n    { id: 4, product: 'Enterprise Suite', sales: 543, revenue: '$54,300', status: 'up' },\n    { id: 5, product: 'Starter Kit', sales: 432, revenue: '$4,320', status: 'stable' },\n  ]);\n\n  useEffect(() => {\n    if (isDarkMode) {\n      document.documentElement.classList.add('dark');\n    } else {\n      document.documentElement.classList.remove('dark');\n    }\n  }, [isDarkMode]);\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setMetrics(prev => prev.map(metric => ({\n        ...metric,\n        value: metric.label === 'Total Revenue' \n          ? `$${(Math.random() * 50000 + 40000).toFixed(0)}`\n          : metric.label === 'Active Users'\n          ? `${(Math.random() * 1000 + 2000).toFixed(0)}`\n          : metric.label === 'Total Orders'\n          ? `${(Math.random() * 500 + 1000).toFixed(0)}`\n          : `${(Math.random() * 2 + 2.5).toFixed(2)}%`,\n        change: (Math.random() * 20 - 5),\n      })));\n\n      setChartData(prev => prev.map(point => ({\n        ...point,\n        value: Math.floor(Math.random() * 3000 + 4000),\n      })));\n    }, 3000);\n\n    return () => clearInterval(interval);\n  }, []);\n\n  const maxChartValue = Math.max(...chartData.map(d => d.value));\n\n  const containerVariants = {\n    hidden: { opacity: 0 },\n    visible: {\n      opacity: 1,\n      transition: {\n        staggerChildren: 0.1,\n      },\n    },\n  };\n\n  const itemVariants = {\n    hidden: { opacity: 0, y: 20 },\n    visible: { opacity: 1, y: 0 },\n  };\n\n  return (\n    <div className={`min-h-screen ${isDarkMode ? 'dark bg-gray-950' : 'bg-gray-50'} transition-colors duration-300`}>\n      <div className=\"container mx-auto p-4 md:p-6 lg:p-8\">\n        <motion.div\n          initial=\"hidden\"\n          animate=\"visible\"\n          variants={containerVariants}\n        >\n          {/* Header */}\n          <motion.div variants={itemVariants} className=\"flex flex-col md:flex-row justify-between items-start md:items-center mb-8 gap-4\">\n            <div>\n              <h1 className=\"text-3xl md:text-4xl font-bold text-gray-900 dark:text-white\">Analytics Dashboard</h1>\n              <p className=\"text-gray-600 dark:text-gray-400 mt-2\">Real-time insights and performance metrics</p>\n            </div>\n            <Button\n              onClick={() => setIsDarkMode(!isDarkMode)}\n              variant=\"outline\"\n              size=\"icon\"\n              className=\"dark:border-gray-700\"\n            >\n              {isDarkMode ? <Sun className=\"h-5 w-5\" /> : <Moon className=\"h-5 w-5\" />}\n            </Button>\n          </motion.div>\n\n          {/* Metrics Grid */}\n          <motion.div variants={itemVariants} className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 md:gap-6 mb-8\">\n            {metrics.map((metric, index) => (\n              <motion.div\n                key={metric.label}\n                whileHover={{ scale: 1.02 }}\n                transition={{ type: 'spring', stiffness: 300 }}\n              >\n                <Card className=\"dark:bg-gray-900 dark:border-gray-800\">\n                  <CardHeader className=\"flex flex-row items-center justify-between pb-2\">\n                    <CardTitle className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">\n                      {metric.label}\n                    </CardTitle>\n                    <metric.icon className=\"h-4 w-4 text-gray-600 dark:text-gray-400\" />\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-2xl font-bold text-gray-900 dark:text-white\">{metric.value}</div>\n                    <div className=\"flex items-center mt-2\">\n                      {metric.change >= 0 ? (\n                        <TrendingUp className=\"h-4 w-4 text-green-500 mr-1\" />\n                      ) : (\n                        <TrendingDown className=\"h-4 w-4 text-red-500 mr-1\" />\n                      )}\n                      <span className={`text-sm font-medium ${metric.change >= 0 ? 'text-green-500' : 'text-red-500'}`}>\n                        {metric.change >= 0 ? '+' : ''}{metric.change.toFixed(1)}%\n                      </span>\n                      <span className=\"text-sm text-gray-600 dark:text-gray-400 ml-2\">vs last month</span>\n                    </div>\n                  </CardContent>\n                </Card>\n              </motion.div>\n            ))}\n          </motion.div>\n\n          {/* Charts Section */}\n          <motion.div variants={itemVariants} className=\"grid grid-cols-1 lg:grid-cols-3 gap-6 mb-8\">\n            {/* Bar Chart */}\n            <Card className=\"lg:col-span-2 dark:bg-gray-900 dark:border-gray-800\">\n              <CardHeader>\n                <CardTitle className=\"text-gray-900 dark:text-white\">Revenue Overview</CardTitle>\n                <CardDescription className=\"dark:text-gray-400\">Monthly revenue trends</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"h-64 flex items-end justify-between gap-2\">\n                  {chartData.map((point, index) => (\n                    <motion.div\n                      key={point.label}\n                      className=\"flex-1 flex flex-col items-center\"\n                      initial={{ height: 0 }}\n                      animate={{ height: 'auto' }}\n                      transition={{ delay: index * 0.1 }}\n                    >\n                      <motion.div\n                        className=\"w-full bg-gradient-to-t from-blue-500 to-blue-400 rounded-t-lg relative group cursor-pointer\"\n                        style={{ height: `${(point.value / maxChartValue) * 100}%` }}\n                        whileHover={{ scale: 1.05 }}\n                      >\n                        <div className=\"absolute -top-8 left-1/2 transform -translate-x-1/2 bg-gray-900 dark:bg-gray-700 text-white text-xs px-2 py-1 rounded opacity-0 group-hover:opacity-100 transition-opacity whitespace-nowrap\">\n                          ${point.value.toLocaleString()}\n                        </div>\n                      </motion.div>\n                      <span className=\"text-xs text-gray-600 dark:text-gray-400 mt-2\">{point.label}</span>\n                    </motion.div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Pie Chart */}\n            <Card className=\"dark:bg-gray-900 dark:border-gray-800\">\n              <CardHeader>\n                <CardTitle className=\"text-gray-900 dark:text-white\">Traffic Sources</CardTitle>\n                <CardDescription className=\"dark:text-gray-400\">Device breakdown</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"flex items-center justify-center h-64\">\n                  <div className=\"relative w-48 h-48\">\n                    <svg viewBox=\"0 0 100 100\" className=\"transform -rotate-90\">\n                      {pieData.reduce((acc, item, index) => {\n                        const total = pieData.reduce((sum, d) => sum + d.value, 0);\n                        const percentage = (item.value / total) * 100;\n                        const angle = (percentage / 100) * 360;\n                        const prevAngles = pieData.slice(0, index).reduce((sum, d) => sum + (d.value / total) * 360, 0);\n                        \n                        const colors = ['#3b82f6', '#8b5cf6', '#ec4899'];\n                        \n                        return [\n                          ...acc,\n                          <motion.circle\n                            key={item.label}\n                            cx=\"50\"\n                            cy=\"50\"\n                            r=\"40\"\n                            fill=\"none\"\n                            stroke={colors[index]}\n                            strokeWidth=\"20\"\n                            strokeDasharray={`${(angle / 360) * 251.2} 251.2`}\n                            strokeDashoffset={-((prevAngles / 360) * 251.2)}\n                            initial={{ strokeDasharray: '0 251.2' }}\n                            animate={{ strokeDasharray: `${(angle / 360) * 251.2} 251.2` }}\n                            transition={{ duration: 1, delay: index * 0.2 }}\n                          />\n                        ];\n                      }, [] as JSX.Element[])}\n                    </svg>\n                  </div>\n                </div>\n                <div className=\"space-y-2 mt-4\">\n                  {pieData.map((item, index) => {\n                    const colors = ['bg-blue-500', 'bg-purple-500', 'bg-pink-500'];\n                    return (\n                      <div key={item.label} className=\"flex items-center justify-between\">\n                        <div className=\"flex items-center gap-2\">\n                          <div className={`w-3 h-3 rounded-full ${colors[index]}`} />\n                          <span className=\"text-sm text-gray-600 dark:text-gray-400\">{item.label}</span>\n                        </div>\n                        <span className=\"text-sm font-medium text-gray-900 dark:text-white\">{item.value}%</span>\n                      </div>\n                    );\n                  })}\n                </div>\n              </CardContent>\n            </Card>\n          </motion.div>\n\n          {/* Data Table */}\n          <motion.div variants={itemVariants}>\n            <Card className=\"dark:bg-gray-900 dark:border-gray-800\">\n              <CardHeader>\n                <CardTitle className=\"text-gray-900 dark:text-white\">Top Products</CardTitle>\n                <CardDescription className=\"dark:text-gray-400\">Best performing products this month</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <Tabs defaultValue=\"all\" className=\"w-full\">\n                  <TabsList className=\"dark:bg-gray-800\">\n                    <TabsTrigger value=\"all\">All Products</TabsTrigger>\n                    <TabsTrigger value=\"trending\">Trending</TabsTrigger>\n                    <TabsTrigger value=\"declining\">Declining</TabsTrigger>\n                  </TabsList>\n                  <TabsContent value=\"all\" className=\"mt-4\">\n                    <div className=\"overflow-x-auto\">\n                      <table className=\"w-full\">\n                        <thead>\n                          <tr className=\"border-b dark:border-gray-800\">\n                            <th className=\"text-left py-3 px-4 text-sm font-medium text-gray-600 dark:text-gray-400\">Product</th>\n                            <th className=\"text-left py-3 px-4 text-sm font-medium text-gray-600 dark:text-gray-400\">Sales</th>\n                            <th className=\"text-left py-3 px-4 text-sm font-medium text-gray-600 dark:text-gray-400\">Revenue</th>\n                            <th className=\"text-left py-3 px-4 text-sm font-medium text-gray-600 dark:text-gray-400\">Status</th>\n                          </tr>\n                        </thead>\n                        <tbody>\n                          {tableData.map((row, index) => (\n                            <motion.tr\n                              key={row.id}\n                              className=\"border-b dark:border-gray-800 hover:bg-gray-50 dark:hover:bg-gray-800 transition-colors\"\n                              initial={{ opacity: 0, x: -20 }}\n                              animate={{ opacity: 1, x: 0 }}\n                              transition={{ delay: index * 0.05 }}\n                            >\n                              <td className=\"py-3 px-4 text-sm text-gray-900 dark:text-white font-medium\">{row.product}</td>\n                              <td className=\"py-3 px-4 text-sm text-gray-600 dark:text-gray-400\">{row.sales.toLocaleString()}</td>\n                              <td className=\"py-3 px-4 text-sm text-gray-900 dark:text-white font-medium\">{row.revenue}</td>\n                              <td className=\"py-3 px-4\">\n                                <div className=\"flex items-center gap-1\">\n                                  {row.status === 'up' && <TrendingUp className=\"h-4 w-4 text-green-500\" />}\n                                  {row.status === 'down' && <TrendingDown className=\"h-4 w-4 text-red-500\" />}\n                                  {row.status === 'stable' && <Activity className=\"h-4 w-4 text-gray-500\" />}\n                                  <span className={`text-sm ${\n                                    row.status === 'up' ? 'text-green-500' : \n                                    row.status === 'down' ? 'text-red-500' : \n                                    'text-gray-500'\n                                  }`}>\n                                    {row.status === 'up' ? 'Growing' : row.status === 'down' ? 'Declining' : 'Stable'}\n                                  </span>\n                                </div>\n                              </td>\n                            </motion.tr>\n                          ))}\n                        </tbody>\n                      </table>\n                    </div>\n                  </TabsContent>\n                  <TabsContent value=\"trending\" className=\"mt-4\">\n                    <div className=\"overflow-x-auto\">\n                      <table className=\"w-full\">\n                        <thead>\n                          <tr className=\"border-b dark:border-gray-800\">\n                            <th className=\"text-left py-3 px-4 text-sm font-medium text-gray-600 dark:text-gray-400\">Product</th>\n                            <th className=\"text-left py-3 px-4 text-sm font-medium text-gray-600 dark:text-gray-400\">Sales</th>\n                            <th className=\"text-left py-3 px-4 text-sm font-medium text-gray-600 dark:text-gray-400\">Revenue</th>\n                            <th className=\"text-left py-3 px-4 text-sm font-medium text-gray-600 dark:text-gray-400\">Status</th>\n                          </tr>\n                        </thead>\n                        <tbody>\n                          {tableData.filter(row => row.status === 'up').map((row, index) => (\n                            <motion.tr\n                              key={row.id}\n                              className=\"border-b dark:border-gray-800 hover:bg-gray-50 dark:hover:bg-gray-800 transition-colors\"\n                              initial={{ opacity: 0, x: -20 }}\n                              animate={{ opacity: 1, x: 0 }}\n                              transition={{ delay: index * 0.05 }}\n                            >\n                              <td className=\"py-3 px-4 text-sm text-gray-900 dark:text-white font-medium\">{row.product}</td>\n                              <td className=\"py-3 px-4 text-sm text-gray-600 dark:text-gray-400\">{row.sales.toLocaleString()}</td>\n                              <td className=\"py-3 px-4 text-sm text-gray-900 dark:text-white font-medium\">{row.revenue}</td>\n                              <td className=\"py-3 px-4\">\n                                <div className=\"flex items-center gap-1\">\n                                  <TrendingUp className=\"h-4 w-4 text-green-500\" />\n                                  <span className=\"text-sm text-green-500\">Growing</span>\n                                </div>\n                              </td>\n                            </motion.tr>\n                          ))}\n                        </tbody>\n                      </table>\n                    </div>\n                  </TabsContent>\n                  <TabsContent value=\"declining\" className=\"mt-4\">\n                    <div className=\"overflow-x-auto\">\n                      <table className=\"w-full\">\n                        <thead>\n                          <tr className=\"border-b dark:border-gray-800\">\n                            <th className=\"text-left py-3 px-4 text-sm font-medium text-gray-600 dark:text-gray-400\">Product</th>\n                            <th className=\"text-left py-3 px-4 text-sm font-medium text-gray-600 dark:text-gray-400\">Sales</th>\n                            <th className=\"text-left py-3 px-4 text-sm font-medium text-gray-600 dark:text-gray-400\">Revenue</th>\n                            <th className=\"text-left py-3 px-4 text-sm font-medium text-gray-600 dark:text-gray-400\">Status</th>\n                          </tr>\n                        </thead>\n                        <tbody>\n                          {tableData.filter(row => row.status === 'down').map((row, index) => (\n                            <motion.tr\n                              key={row.id}\n                              className=\"border-b dark:border-gray-800 hover:bg-gray-50 dark:hover:bg-gray-800 transition-colors\"\n                              initial={{ opacity: 0, x: -20 }}\n                              animate={{ opacity: 1, x: 0 }}\n                              transition={{ delay: index * 0.05 }}\n                            >\n                              <td className=\"py-3 px-4 text-sm text-gray-900 dark:text-white font-medium\">{row.product}</td>\n                              <td className=\"py-3 px-4 text-sm text-gray-600 dark:text-gray-400\">{row.sales.toLocaleString()}</td>\n                              <td className=\"py-3 px-4 text-sm text-gray-900 dark:text-white font-medium\">{row.revenue}</td>\n                              <td className=\"py-3 px-4\">\n                                <div className=\"flex items-center gap-1\">\n                                  <TrendingDown className=\"h-4 w-4 text-red-500\" />\n                                  <span className=\"text-sm text-red-500\">Declining</span>\n                                </div>\n                              </td>\n                            </motion.tr>\n                          ))}\n                        </tbody>\n                      </table>\n                    </div>\n                  </TabsContent>\n                </Tabs>\n              </CardContent>\n            </Card>\n          </motion.div>\n        </motion.div>\n      </div>\n    </div>\n  );\n}",
    "error": null,
    "elapsed_time": 64.3190507888794,
    "success": true
  }
}