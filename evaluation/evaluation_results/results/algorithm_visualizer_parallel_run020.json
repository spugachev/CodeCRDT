{
  "prompt_id": "algorithm_visualizer",
  "prompt_name": "Algorithm Visualizer",
  "mode": "parallel",
  "run_number": 20,
  "timestamp": "2025-10-14T04:57:52.498888",
  "response_time": 94.38219833374023,
  "total_tokens": null,
  "response_content": "import { useState, useCallback } from 'react';import React from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Slider } from '@/components/ui/slider';\nimport { Play, Pause, RotateCcw, Zap, BarChart3 } from 'lucide-react';\nimport { motion } from 'framer-motion';\n\ninterface ArrayElement {\n  value: number;\n  id: string;\n  isComparing?: boolean;\n  isSwapping?: boolean;\n  isSorted?: boolean;\n}\n\ninterface AlgorithmStep {\n  array: ArrayElement[];\n  comparingIndices: number[];\n  swappingIndices: number[];\n  sortedIndices: number[];\n}\n\ntype AlgorithmType = 'bubble' | 'quick' | 'merge' | 'insertion';\n\nconst NEON_COLORS = [\n  '#00ffff',\n  '#ff00ff', \n  '#00ff00',\n  '#ffff00',\n  '#ff0066',\n  '#00ffaa'\n];\n\nconst mockAlgorithms = [\n  { id: 'bubble', name: 'Bubble Sort', complexity: 'O(n\u00b2)' },\n  { id: 'quick', name: 'Quick Sort', complexity: 'O(n log n)' },\n  { id: 'merge', name: 'Merge Sort', complexity: 'O(n log n)' },\n  { id: 'insertion', name: 'Insertion Sort', complexity: 'O(n\u00b2)' }\n];\n\nexport default function AlgorithmVisualizer() {\n  const [array, setArray] = useState<ArrayElement[]>([]);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [speed, setSpeed] = useState([50]);\n  const [arraySize, setArraySize] = useState([20]);\n  const [selectedAlgorithm, setSelectedAlgorithm] = useState<AlgorithmType>('bubble');\n  const [currentStep, setCurrentStep] = useState(0);\n  const [steps, setSteps] = useState<AlgorithmStep[]>([]);\n\n  const generateRandomArray = useCallback(() => {\n\n    const newArray: ArrayElement[] = Array.from({ length: arraySize[0] }, (_, index) => ({\n      value: Math.floor(Math.random() * 100) + 1,\n      id: `element-${index}-${Date.now()}`,\n      isComparing: false,\n      isSwapping: false,\n      isSorted: false\n    }));\n    \n    setArray(newArray);\n    setSteps([]);\n    setCurrentStep(0);\n    setIsPlaying(false);\n  }, [arraySize]);\n\n\n  const resetVisualization = useCallback(() => {\n\n    setIsPlaying(false);\n    setCurrentStep(0);\n    setSteps([]);\n    generateRandomArray();\n  }, [generateRandomArray]);\n\n  // Animation effect for step-by-step visualization\n  const animateSteps = useCallback(() => {\n    if (currentStep < steps.length && isPlaying) {\n      const timer = setTimeout(() => {\n        setCurrentStep(prev => prev + 1);\n      }, 1000 - speed[0] * 9.5); // Convert speed slider (0-100) to delay (1000ms-50ms)\n      \n      return () => clearTimeout(timer);\n    } else if (currentStep >= steps.length && isPlaying) {\n      setIsPlaying(false);\n    }\n  }, [currentStep, steps.length, isPlaying, speed]);\n\n  // Run animation effect\n  React.useEffect(() => {\n    const cleanup = animateSteps();\n    return cleanup;\n  }, [animateSteps]);\n  const startVisualization = useCallback(() => {\n    if (steps.length === 0) return;\n    if (currentStep >= steps.length) {\n      setCurrentStep(0);\n    }\n    setIsPlaying(true);\n  }, [steps, speed, currentStep]);\n\n  const pauseVisualization = useCallback(() => {\n\n    setIsPlaying(false);\n  }, []);\n\n  const generateSortingSteps = useCallback((algorithm: AlgorithmType) => {\n    const algorithmArray = [...array];\n    const newSteps: AlgorithmStep[] = [];\n\n    const addStep = (arr: ArrayElement[], comparing: number[] = [], swapping: number[] = [], sorted: number[] = []) => {\n      newSteps.push({\n        array: arr.map(el => ({ ...el })),\n        comparingIndices: [...comparing],\n        swappingIndices: [...swapping],\n        sortedIndices: [...sorted]\n      });\n    };\n\n    // Initial state\n    addStep(algorithmArray);\n\n    switch (algorithm) {\n      case 'bubble': {\n        const arr = [...algorithmArray];\n        const sortedIndices: number[] = [];\n        \n        for (let i = 0; i < arr.length - 1; i++) {\n          for (let j = 0; j < arr.length - i - 1; j++) {\n            // Comparing\n            addStep(arr, [j, j + 1], [], sortedIndices);\n            \n            if (arr[j].value > arr[j + 1].value) {\n              // Swapping\n              addStep(arr, [], [j, j + 1], sortedIndices);\n              [arr[j], arr[j + 1]] = [arr[j + 1], arr[j]];\n              addStep(arr, [], [], sortedIndices);\n            }\n          }\n          sortedIndices.push(arr.length - 1 - i);\n          addStep(arr, [], [], sortedIndices);\n        }\n        sortedIndices.push(0);\n        addStep(arr, [], [], sortedIndices);\n        break;\n      }\n\n      case 'insertion': {\n        const arr = [...algorithmArray];\n        const sortedIndices: number[] = [0];\n        addStep(arr, [], [], sortedIndices);\n\n        for (let i = 1; i < arr.length; i++) {\n          const key = arr[i];\n          let j = i - 1;\n\n          addStep(arr, [i], [], sortedIndices);\n\n          while (j >= 0 && arr[j].value > key.value) {\n            addStep(arr, [j, j + 1], [], sortedIndices);\n            addStep(arr, [], [j, j + 1], sortedIndices);\n            arr[j + 1] = arr[j];\n            addStep(arr, [], [], sortedIndices);\n            j--;\n          }\n\n          arr[j + 1] = key;\n          sortedIndices.push(i);\n          addStep(arr, [], [], sortedIndices);\n        }\n        break;\n      }\n\n      case 'quick': {\n        const arr = [...algorithmArray];\n        const sortedIndices: number[] = [];\n\n        const partition = (low: number, high: number): number => {\n          const pivot = arr[high].value;\n          let i = low - 1;\n\n          addStep(arr, [high], [], sortedIndices);\n\n          for (let j = low; j < high; j++) {\n            addStep(arr, [j, high], [], sortedIndices);\n\n            if (arr[j].value < pivot) {\n              i++;\n              if (i !== j) {\n                addStep(arr, [], [i, j], sortedIndices);\n                [arr[i], arr[j]] = [arr[j], arr[i]];\n                addStep(arr, [], [], sortedIndices);\n              }\n            }\n          }\n\n          addStep(arr, [], [i + 1, high], sortedIndices);\n          [arr[i + 1], arr[high]] = [arr[high], arr[i + 1]];\n          sortedIndices.push(i + 1);\n          addStep(arr, [], [], sortedIndices);\n\n          return i + 1;\n        };\n\n        const quickSort = (low: number, high: number) => {\n          if (low < high) {\n            const pi = partition(low, high);\n            quickSort(low, pi - 1);\n            quickSort(pi + 1, high);\n          } else if (low === high) {\n            sortedIndices.push(low);\n            addStep(arr, [], [], sortedIndices);\n          }\n        };\n\n        quickSort(0, arr.length - 1);\n        break;\n      }\n\n      case 'merge': {\n        const arr = [...algorithmArray];\n        const sortedIndices: number[] = [];\n\n        const merge = (left: number, mid: number, right: number) => {\n          const leftArr = arr.slice(left, mid + 1);\n          const rightArr = arr.slice(mid + 1, right + 1);\n          \n          let i = 0, j = 0, k = left;\n\n          while (i < leftArr.length && j < rightArr.length) {\n            addStep(arr, [left + i, mid + 1 + j], [], sortedIndices);\n\n            if (leftArr[i].value <= rightArr[j].value) {\n              arr[k] = leftArr[i];\n              i++;\n            } else {\n              addStep(arr, [], [k, mid + 1 + j], sortedIndices);\n              arr[k] = rightArr[j];\n              j++;\n            }\n            addStep(arr, [], [], sortedIndices);\n            k++;\n          }\n\n          while (i < leftArr.length) {\n            arr[k] = leftArr[i];\n            addStep(arr, [], [], sortedIndices);\n            i++;\n            k++;\n          }\n\n          while (j < rightArr.length) {\n            arr[k] = rightArr[j];\n            addStep(arr, [], [], sortedIndices);\n            j++;\n            k++;\n          }\n\n          if (left === 0 && right === arr.length - 1) {\n            for (let idx = left; idx <= right; idx++) {\n              sortedIndices.push(idx);\n            }\n          }\n          addStep(arr, [], [], sortedIndices);\n        };\n\n        const mergeSort = (left: number, right: number) => {\n          if (left < right) {\n            const mid = Math.floor((left + right) / 2);\n            mergeSort(left, mid);\n            mergeSort(mid + 1, right);\n            merge(left, mid, right);\n          }\n        };\n\n        mergeSort(0, arr.length - 1);\n        break;\n      }\n    }\n\n    setSteps(newSteps);\n    setCurrentStep(0);\n  }, [array]);\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-gray-900 via-purple-900 to-gray-900 p-8\">\n      <div className=\"max-w-7xl mx-auto space-y-8\">\n        <motion.div\n          initial={{ opacity: 0, y: -20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.8 }}\n          className=\"text-center space-y-4\"\n        >\n          <motion.h1\n            className=\"text-6xl font-bold bg-gradient-to-r from-cyan-400 via-purple-400 to-pink-400 bg-clip-text text-transparent\"\n            animate={{\n              textShadow: [\n                '0 0 20px rgba(0, 255, 255, 0.5)',\n                '0 0 40px rgba(255, 0, 255, 0.5)',\n                '0 0 20px rgba(0, 255, 255, 0.5)'\n              ]\n            }}\n            transition={{ duration: 2, repeat: Infinity }}\n          >\n            Algorithm Visualizer\n          </motion.h1>\n          \n          <div className=\"flex items-center justify-center gap-4\">\n            <motion.div\n              initial={{ scale: 0 }}\n              animate={{ scale: 1 }}\n              transition={{ delay: 0.3, type: 'spring', stiffness: 200 }}\n              className=\"flex items-center gap-2 px-6 py-3 bg-gray-800/50 backdrop-blur-sm rounded-full border border-cyan-500/30\"\n            >\n              <Zap className=\"w-5 h-5 text-cyan-400\" />\n              <span className=\"text-xl font-semibold text-cyan-300\">\n                {mockAlgorithms.find(a => a.id === selectedAlgorithm)?.name || 'Bubble Sort'}\n              </span>\n            </motion.div>\n            \n            <motion.div\n              initial={{ scale: 0 }}\n              animate={{ scale: 1 }}\n              transition={{ delay: 0.5, type: 'spring', stiffness: 200 }}\n              className=\"flex items-center gap-2 px-4 py-2 bg-purple-900/50 backdrop-blur-sm rounded-full border border-purple-500/50\"\n              style={{\n                boxShadow: '0 0 20px rgba(168, 85, 247, 0.4)'\n              }}\n            >\n              <BarChart3 className=\"w-4 h-4 text-purple-300\" />\n              <span className=\"text-sm font-mono text-purple-200\">\n                {mockAlgorithms.find(a => a.id === selectedAlgorithm)?.complexity || 'O(n\u00b2)'}\n              </span>\n            </motion.div>\n          </div>\n        </motion.div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-6\">\n          <div className=\"lg:col-span-1 space-y-6\">\n            <motion.div\n              initial={{ opacity: 0, x: -50 }}\n              animate={{ opacity: 1, x: 0 }}\n              className=\"bg-gray-900/50 backdrop-blur-lg border border-cyan-500/30 rounded-xl p-6 shadow-[0_0_30px_rgba(0,255,255,0.3)] hover:shadow-[0_0_50px_rgba(0,255,255,0.5)] transition-all duration-300\"\n            >\n              <div className=\"space-y-6\">\n                {/* Algorithm Selection */}\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center gap-2 text-cyan-400 font-semibold\">\n                    <Zap className=\"w-4 h-4\" />\n                    <span className=\"text-sm uppercase tracking-wider\">Algorithm</span>\n                  </div>\n                  <div className=\"grid grid-cols-1 gap-2\">\n                    {mockAlgorithms.map((algo) => (\n                      <motion.button\n                        key={algo.id}\n                        whileHover={{ scale: 1.02 }}\n                        whileTap={{ scale: 0.98 }}\n                        onClick={() => {\n                          setSelectedAlgorithm(algo.id as AlgorithmType);\n                          generateSortingSteps(algo.id as AlgorithmType);\n                        }}\n                        disabled={isPlaying}\n                        className={`p-3 rounded-lg border transition-all duration-300 text-left ${\n                          selectedAlgorithm === algo.id\n                            ? 'bg-cyan-500/20 border-cyan-400 shadow-[0_0_20px_rgba(0,255,255,0.4)]'\n                            : 'bg-gray-800/50 border-gray-700 hover:border-cyan-500/50 hover:bg-gray-800'\n                        } disabled:opacity-50 disabled:cursor-not-allowed`}\n                      >\n                        <div className=\"font-medium text-white text-sm\">{algo.name}</div>\n                        <div className=\"text-xs text-gray-400 mt-1\">{algo.complexity}</div>\n                      </motion.button>\n                    ))}\n                  </div>\n                </div>\n\n                {/* Speed Control */}\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center gap-2 text-purple-400 font-semibold\">\n                      <Zap className=\"w-4 h-4\" />\n                      <span className=\"text-sm uppercase tracking-wider\">Speed</span>\n                    </div>\n                    <span className=\"text-white font-mono text-sm\">{speed[0]}%</span>\n                  </div>\n                  <Slider\n                    value={speed}\n                    onValueChange={setSpeed}\n                    min={10}\n                    max={100}\n                    step={10}\n                    disabled={isPlaying}\n                    className=\"cursor-pointer\"\n                  />\n                </div>\n\n                {/* Array Size Control */}\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center gap-2 text-pink-400 font-semibold\">\n                      <BarChart3 className=\"w-4 h-4\" />\n                      <span className=\"text-sm uppercase tracking-wider\">Array Size</span>\n                    </div>\n                    <span className=\"text-white font-mono text-sm\">{arraySize[0]}</span>\n                  </div>\n                  <Slider\n                    value={arraySize}\n                    onValueChange={setArraySize}\n                    min={5}\n                    max={50}\n                    step={5}\n                    disabled={isPlaying}\n                    className=\"cursor-pointer\"\n                  />\n                </div>\n\n                {/* Control Buttons */}\n                <div className=\"space-y-3 pt-4 border-t border-gray-700/50\">\n                  <Button\n                    onClick={isPlaying ? pauseVisualization : startVisualization}\n                    disabled={steps.length === 0 || (currentStep >= steps.length && !isPlaying)}\n                    className=\"w-full bg-gradient-to-r from-cyan-500 to-blue-500 hover:from-cyan-400 hover:to-blue-400 text-white font-semibold shadow-[0_0_20px_rgba(0,255,255,0.5)] hover:shadow-[0_0_30px_rgba(0,255,255,0.7)] transition-all duration-300\"\n                  >\n                    {isPlaying ? (\n                      <>\n                        <Pause className=\"w-4 h-4 mr-2\" />\n                        Pause\n                      </>\n                    ) : (\n                      <>\n                        <Play className=\"w-4 h-4 mr-2\" />\n                        {currentStep >= steps.length ? 'Restart' : 'Play'}\n                      </>\n                    )}\n                  </Button>\n\n                  <Button\n                    onClick={resetVisualization}\n                    disabled={isPlaying}\n                    variant=\"outline\"\n                    className=\"w-full border-purple-500/50 text-purple-400 hover:bg-purple-500/20 hover:border-purple-400 hover:text-purple-300 shadow-[0_0_15px_rgba(168,85,247,0.3)] hover:shadow-[0_0_25px_rgba(168,85,247,0.5)] transition-all duration-300\"\n                  >\n                    <RotateCcw className=\"w-4 h-4 mr-2\" />\n                    Reset\n                  </Button>\n\n                  <Button\n                    onClick={generateRandomArray}\n                    disabled={isPlaying}\n                    variant=\"outline\"\n                    className=\"w-full border-pink-500/50 text-pink-400 hover:bg-pink-500/20 hover:border-pink-400 hover:text-pink-300 shadow-[0_0_15px_rgba(236,72,153,0.3)] hover:shadow-[0_0_25px_rgba(236,72,153,0.5)] transition-all duration-300\"\n                  >\n                    <BarChart3 className=\"w-4 h-4 mr-2\" />\n                    New Array\n                  </Button>\n                </div>\n\n                {/* Progress Indicator */}\n                {steps.length > 0 && (\n                  <div className=\"space-y-2 pt-4 border-t border-gray-700/50\">\n                    <div className=\"flex items-center justify-between text-xs text-gray-400\">\n                      <span>Progress</span>\n                      <span className=\"font-mono\">\n                        {currentStep} / {steps.length}\n                      </span>\n                    </div>\n                    <div className=\"h-2 bg-gray-800 rounded-full overflow-hidden\">\n                      <motion.div\n                        className=\"h-full bg-gradient-to-r from-cyan-500 via-purple-500 to-pink-500 shadow-[0_0_10px_rgba(0,255,255,0.5)]\"\n                        initial={{ width: 0 }}\n                        animate={{ width: `${(currentStep / steps.length) * 100}%` }}\n                        transition={{ duration: 0.3 }}\n                      />\n                    </div>\n                  </div>\n                )}\n              </div>\n            </motion.div>\n            \n            <div className=\"bg-gray-900/50 backdrop-blur-lg border border-cyan-500/30 rounded-xl p-6 shadow-2xl shadow-cyan-500/20\">\n              <div className=\"space-y-6\">\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center gap-2 text-cyan-400\">\n                    <Zap className=\"w-4 h-4\" />\n                    <span className=\"text-sm font-semibold tracking-wider\">ALGORITHM</span>\n                  </div>\n                  <div className=\"grid grid-cols-1 gap-3\">\n                    {mockAlgorithms.map((algo) => (\n                      <motion.button\n                        key={algo.id}\n                        onClick={() => setSelectedAlgorithm(algo.id as AlgorithmType)}\n                        className={`relative p-4 rounded-lg border-2 transition-all duration-300 text-left overflow-hidden group ${\n                          selectedAlgorithm === algo.id\n                            ? 'border-cyan-400 bg-cyan-500/20 shadow-lg shadow-cyan-500/50'\n                            : 'border-gray-700 bg-gray-800/50 hover:border-purple-500/50 hover:bg-purple-500/10'\n                        }`}\n                        whileHover={{ scale: 1.02 }}\n                        whileTap={{ scale: 0.98 }}\n                      >\n                        <div className={`absolute inset-0 bg-gradient-to-r ${\n                          selectedAlgorithm === algo.id\n                            ? 'from-cyan-500/20 to-purple-500/20'\n                            : 'from-purple-500/0 to-pink-500/0 group-hover:from-purple-500/10 group-hover:to-pink-500/10'\n                        } transition-all duration-300`} />\n                        <div className=\"relative z-10\">\n                          <div className={`font-bold text-sm mb-1 ${\n                            selectedAlgorithm === algo.id ? 'text-cyan-300' : 'text-gray-300'\n                          }`}>\n                            {algo.name}\n                          </div>\n                          <div className={`text-xs font-mono ${\n                            selectedAlgorithm === algo.id ? 'text-cyan-400' : 'text-gray-500'\n                          }`}>\n                            {algo.complexity}\n                          </div>\n                        </div>\n                        {selectedAlgorithm === algo.id && (\n                          <motion.div\n                            className=\"absolute top-2 right-2 w-2 h-2 bg-cyan-400 rounded-full\"\n                            animate={{ scale: [1, 1.2, 1], opacity: [1, 0.5, 1] }}\n                            transition={{ duration: 2, repeat: Infinity }}\n                          />\n                        )}\n                      </motion.button>\n                    ))}\n                  </div>\n                </div>\n\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <label className=\"text-cyan-400 text-sm font-medium flex items-center gap-2\">\n                      <Zap className=\"w-4 h-4\" />\n                      Speed\n                    </label>\n                    <span className=\"text-cyan-300 text-xs\">{speed[0]}ms</span>\n                  </div>\n                  <Slider\n                    value={speed}\n                    onValueChange={setSpeed}\n                    min={10}\n                    max={200}\n                    step={10}\n                    className=\"[&_[role=slider]]:bg-cyan-400 [&_[role=slider]]:border-cyan-300 [&_[role=slider]]:shadow-[0_0_15px_rgba(34,211,238,0.8)] [&_[role=slider]]:hover:shadow-[0_0_25px_rgba(34,211,238,1)] [&_[role=slider]]:transition-shadow [&_.relative]:bg-gray-700/50 [&_.relative]:border [&_.relative]:border-cyan-500/30 [&_.bg-primary]:bg-gradient-to-r [&_.bg-primary]:from-cyan-500 [&_.bg-primary]:to-purple-500 [&_.bg-primary]:shadow-[0_0_10px_rgba(34,211,238,0.5)]\"\n                  />\n                </div>\n\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <label className=\"text-cyan-400 text-sm font-medium flex items-center gap-2\">\n                      <BarChart3 className=\"w-4 h-4\" />\n                      Array Size\n                    </label>\n                    <span className=\"text-cyan-300 text-xs\">{arraySize[0]}</span>\n                  </div>\n                  <Slider\n                    value={arraySize}\n                    onValueChange={setArraySize}\n                    min={5}\n                    max={100}\n                    step={1}\n                    className=\"[&_[role=slider]]:bg-gradient-to-r [&_[role=slider]]:from-purple-500 [&_[role=slider]]:to-pink-500 [&_[role=slider]]:border-2 [&_[role=slider]]:border-purple-300 [&_[role=slider]]:shadow-lg [&_[role=slider]]:shadow-purple-500/50 [&_[role=slider]]:transition-all [&_[role=slider]]:hover:shadow-purple-400/70 [&_[role=slider]]:hover:scale-110 [&>span]:bg-gradient-to-r [&>span]:from-purple-500/30 [&>span]:to-pink-500/30 [&>span]:h-2\"\n                  /></parameter>\n</invoke>\n                </div>\n\n                <div className=\"flex gap-3 pt-4\">\n                  <motion.div className=\"flex-1\">\n                    <Button\n                      onClick={isPlaying ? pauseVisualization : startVisualization}\n                      disabled={array.length === 0 || (steps.length === 0 && !isPlaying)}\n                      className=\"w-full bg-gradient-to-r from-cyan-500 to-purple-500 hover:from-cyan-400 hover:to-purple-400 text-white font-semibold py-6 rounded-lg relative overflow-hidden group disabled:opacity-50 disabled:cursor-not-allowed\"\n                      whileHover={{ scale: 1.05 }}\n                      whileTap={{ scale: 0.95 }}\n                    >\n                      <motion.div\n                        className=\"absolute inset-0 bg-gradient-to-r from-cyan-400 to-purple-400 opacity-0 group-hover:opacity-100 blur-xl transition-opacity duration-300\"\n                        animate={{\n                          opacity: isPlaying ? [0.5, 0.8, 0.5] : 0\n                        }}\n                        transition={{\n                          duration: 2,\n                          repeat: isPlaying ? Infinity : 0\n                        }}\n                      />\n                      \n                      <motion.div\n                        className=\"relative flex items-center justify-center gap-2\"\n                        initial={false}\n                      >\n                        <motion.div\n                          animate={{\n                            rotate: isPlaying ? 0 : 0,\n                            scale: isPlaying ? 1 : 1\n                          }}\n                          transition={{ duration: 0.3 }}\n                        >\n                          {isPlaying ? (\n                            <motion.div\n                              initial={{ scale: 0, rotate: -90 }}\n                              animate={{ scale: 1, rotate: 0 }}\n                              exit={{ scale: 0, rotate: 90 }}\n                              transition={{ duration: 0.3 }}\n                            >\n                              <Pause className=\"w-5 h-5\" />\n                            </motion.div>\n                          ) : (\n                            <motion.div\n                              initial={{ scale: 0, rotate: 90 }}\n                              animate={{ scale: 1, rotate: 0 }}\n                              exit={{ scale: 0, rotate: -90 }}\n                              transition={{ duration: 0.3 }}\n                            >\n                              <Play className=\"w-5 h-5\" />\n                            </motion.div>\n                          )}\n                        </motion.div>\n                        \n                        <span className=\"text-lg\">\n                          {isPlaying ? 'Pause' : 'Start'}\n                        </span>\n                      </motion.div>\n                      \n                      <motion.div\n                        className=\"absolute inset-0 rounded-lg\"\n                        style={{\n                          boxShadow: isPlaying \n                            ? '0 0 30px rgba(0, 255, 255, 0.6), 0 0 60px rgba(168, 85, 247, 0.4)'\n                            : '0 0 20px rgba(0, 255, 255, 0.3)'\n                        }}\n                        animate={{\n                          boxShadow: isPlaying\n                            ? [\n                                '0 0 30px rgba(0, 255, 255, 0.6), 0 0 60px rgba(168, 85, 247, 0.4)',\n                                '0 0 40px rgba(168, 85, 247, 0.6), 0 0 80px rgba(0, 255, 255, 0.4)',\n                                '0 0 30px rgba(0, 255, 255, 0.6), 0 0 60px rgba(168, 85, 247, 0.4)'\n                              ]\n                            : '0 0 20px rgba(0, 255, 255, 0.3)'\n                        }}\n                        transition={{\n                          duration: 2,\n                          repeat: isPlaying ? Infinity : 0\n                        }}\n                      />\n                    </Button>\n                  </motion.div>\n                  <motion.button\n                    onClick={resetVisualization}\n                    disabled={isPlaying}\n                    className=\"flex-1 flex items-center justify-center gap-2 px-6 py-3 bg-gradient-to-r from-pink-600 to-purple-600 text-white rounded-lg font-semibold shadow-[0_0_20px_rgba(236,72,153,0.5)] hover:shadow-[0_0_40px_rgba(236,72,153,0.8)] transition-all duration-300 disabled:opacity-50 disabled:cursor-not-allowed border border-pink-400/50\"\n                    whileHover={{ scale: 1.05 }}\n                    whileTap={{ scale: 0.95, rotate: 360 }}\n                    transition={{ duration: 0.6 }}\n                  >\n                    <RotateCcw className=\"w-5 h-5\" />\n                    Reset\n                  </motion.button>\n                </div>\n              </div>\n            </div>\n\n            <motion.div\n              initial={{ opacity: 0, x: -50 }}\n              animate={{ opacity: 1, x: 0 }}\n              transition={{ delay: 0.2 }}\n              className=\"bg-gray-900/50 backdrop-blur-lg border border-purple-500/30 rounded-xl p-6 shadow-[0_0_30px_rgba(168,85,247,0.3)] hover:shadow-[0_0_50px_rgba(168,85,247,0.5)] transition-all duration-300\"\n            >\n              <div className=\"space-y-4\">\n                <div className=\"flex items-center gap-2 text-purple-400 font-semibold mb-4\">\n                  <BarChart3 className=\"w-5 h-5\" />\n                  <span className=\"text-sm uppercase tracking-wider\">Statistics</span>\n                </div>\n\n                <div className=\"space-y-4\">\n                  {/* Comparisons Counter */}\n                  <div className=\"bg-gray-800/50 rounded-lg p-4 border border-cyan-500/20 hover:border-cyan-500/40 transition-all duration-300\">\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"text-cyan-400 text-sm font-medium\">Comparisons</span>\n                      <motion.span\n                        key={currentStep}\n                        initial={{ scale: 1.2, color: '#00ffff' }}\n                        animate={{ scale: 1, color: '#22d3ee' }}\n                        className=\"text-2xl font-bold text-cyan-300 font-mono\"\n                      >\n                        {currentStep > 0 && steps[currentStep - 1]\n                          ? steps.slice(0, currentStep).filter(s => s.comparingIndices.length > 0).length\n                          : 0}\n                      </motion.span>\n                    </div>\n                    <div className=\"mt-2 h-1 bg-gray-700 rounded-full overflow-hidden\">\n                      <motion.div\n                        className=\"h-full bg-gradient-to-r from-cyan-500 to-blue-500\"\n                        initial={{ width: 0 }}\n                        animate={{\n                          width: steps.length > 0\n                            ? `${(steps.slice(0, currentStep).filter(s => s.comparingIndices.length > 0).length / steps.length) * 100}%`\n                            : '0%'\n                        }}\n                        transition={{ duration: 0.3 }}\n                      />\n                    </div>\n                  </div>\n\n                  {/* Swaps Counter */}\n                  <div className=\"bg-gray-800/50 rounded-lg p-4 border border-pink-500/20 hover:border-pink-500/40 transition-all duration-300\">\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"text-pink-400 text-sm font-medium\">Swaps</span>\n                      <motion.span\n                        key={`swap-${currentStep}`}\n                        initial={{ scale: 1.2, color: '#ff0066' }}\n                        animate={{ scale: 1, color: '#ec4899' }}\n                        className=\"text-2xl font-bold text-pink-300 font-mono\"\n                      >\n                        {currentStep > 0 && steps[currentStep - 1]\n                          ? steps.slice(0, currentStep).filter(s => s.swappingIndices.length > 0).length\n                          : 0}\n                      </motion.span>\n                    </div>\n                    <div className=\"mt-2 h-1 bg-gray-700 rounded-full overflow-hidden\">\n                      <motion.div\n                        className=\"h-full bg-gradient-to-r from-pink-500 to-purple-500\"\n                        initial={{ width: 0 }}\n                        animate={{\n                          width: steps.length > 0\n                            ? `${(steps.slice(0, currentStep).filter(s => s.swappingIndices.length > 0).length / steps.length) * 100}%`\n                            : '0%'\n                        }}\n                        transition={{ duration: 0.3 }}\n                      />\n                    </div>\n                  </div>\n\n                  {/* Progress */}\n                  <div className=\"bg-gray-800/50 rounded-lg p-4 border border-green-500/20 hover:border-green-500/40 transition-all duration-300\">\n                    <div className=\"flex items-center justify-between mb-2\">\n                      <span className=\"text-green-400 text-sm font-medium\">Progress</span>\n                      <motion.span\n                        key={`progress-${currentStep}`}\n                        initial={{ scale: 1.2 }}\n                        animate={{ scale: 1 }}\n                        className=\"text-2xl font-bold text-green-300 font-mono\"\n                      >\n                        {steps.length > 0 ? Math.round((currentStep / steps.length) * 100) : 0}%\n                      </motion.span>\n                    </div>\n                    <div className=\"h-2 bg-gray-700 rounded-full overflow-hidden\">\n                      <motion.div\n                        className=\"h-full bg-gradient-to-r from-green-500 via-emerald-500 to-cyan-500 relative\"\n                        initial={{ width: 0 }}\n                        animate={{\n                          width: steps.length > 0 ? `${(currentStep / steps.length) * 100}%` : '0%'\n                        }}\n                        transition={{ duration: 0.3 }}\n                      >\n                        <motion.div\n                          className=\"absolute inset-0 bg-white/30\"\n                          animate={{\n                            x: ['-100%', '100%']\n                          }}\n                          transition={{\n                            duration: 1,\n                            repeat: Infinity,\n                            ease: 'linear'\n                          }}\n                        />\n                      </motion.div>\n                    </div>\n                  </div>\n\n                  {/* Array Status */}\n                  <div className=\"bg-gray-800/50 rounded-lg p-4 border border-purple-500/20 hover:border-purple-500/40 transition-all duration-300\">\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"text-purple-400 text-sm font-medium\">Array Elements</span>\n                      <span className=\"text-xl font-bold text-purple-300 font-mono\">\n                        {array.length}\n                      </span>\n                    </div>\n                    <div className=\"mt-2 flex items-center justify-between text-xs\">\n                      <span className=\"text-gray-400\">Sorted</span>\n                      <span className=\"text-purple-300 font-mono\">\n                        {currentStep > 0 && steps[currentStep - 1]\n                          ? steps[currentStep - 1].sortedIndices.length\n                          : 0} / {array.length}\n                      </span>\n                    </div>\n                  </div>\n\n                  {/* Current Step */}\n                  <div className=\"bg-gradient-to-r from-purple-900/50 to-pink-900/50 rounded-lg p-4 border border-purple-400/30\">\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"text-purple-300 text-sm font-medium\">Current Step</span>\n                      <motion.span\n                        key={`step-${currentStep}`}\n                        initial={{ scale: 1.3, opacity: 0 }}\n                        animate={{ scale: 1, opacity: 1 }}\n                        className=\"text-xl font-bold text-purple-200 font-mono\"\n                      >\n                        {currentStep} / {steps.length}\n                      </motion.span>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </motion.div>\n          </div>\n\n          <div className=\"lg:col-span-3\">\n            <div className=\"bg-gray-900/50 backdrop-blur-lg border border-purple-500/30 rounded-xl p-8 shadow-2xl shadow-purple-500/20 min-h-[600px]\">\n              {array.length === 0 ? (\n                <motion.div\n                  initial={{ opacity: 0, scale: 0.8 }}\n                  animate={{ opacity: 1, scale: 1 }}\n                  className=\"absolute inset-0 flex flex-col items-center justify-center gap-6\"\n                >\n                  <motion.div\n                    animate={{\n                      rotate: [0, 360],\n                      scale: [1, 1.2, 1]\n                    }}\n                    transition={{\n                      duration: 3,\n                      repeat: Infinity,\n                      ease: \"easeInOut\"\n                    }}\n                  >\n                    <BarChart3 className=\"w-24 h-24 text-purple-400/50\" />\n                  </motion.div>\n                  <div className=\"text-center space-y-2\">\n                    <p className=\"text-2xl font-bold text-purple-300\">No Array Generated</p>\n                    <p className=\"text-gray-400\">Click \"Generate New Array\" to begin</p>\n                  </div>\n                </motion.div>\n              ) : (\n                <div className=\"relative w-full h-full flex items-end justify-center gap-1 px-4\">\n                  {/* Comparison Indicators */}\n                  {currentStep < steps.length && steps[currentStep].comparingIndices.map((index) => (\n                    <motion.div\n                      key={`compare-${index}`}\n                      initial={{ opacity: 0, y: -20 }}\n                      animate={{ opacity: 1, y: 0 }}\n                      exit={{ opacity: 0 }}\n                      className=\"absolute pointer-events-none\"\n                      style={{\n                        left: `${(index / array.length) * 100}%`,\n                        top: '0',\n                        transform: 'translateX(-50%)'\n                      }}\n                    >\n                      <motion.div\n                        animate={{\n                          scale: [1, 1.3, 1],\n                          opacity: [0.5, 1, 0.5]\n                        }}\n                        transition={{\n                          duration: 0.8,\n                          repeat: Infinity\n                        }}\n                        className=\"w-8 h-8 rounded-full bg-cyan-400/30 border-2 border-cyan-400 shadow-[0_0_30px_rgba(0,255,255,0.8)]\"\n                      />\n                    </motion.div>\n                  ))}\n\n                  {/* Swap Trail Effects */}\n                  {currentStep < steps.length && steps[currentStep].swappingIndices.map((index) => (\n                    <motion.div\n                      key={`swap-trail-${index}`}\n                      initial={{ opacity: 0, scale: 0.5 }}\n                      animate={{ opacity: [0, 1, 0], scale: [0.5, 2, 3] }}\n                      transition={{ duration: 0.6 }}\n                      className=\"absolute pointer-events-none\"\n                      style={{\n                        left: `${(index / array.length) * 100}%`,\n                        top: '50%',\n                        transform: 'translate(-50%, -50%)'\n                      }}\n                    >\n                      <div className=\"w-32 h-32 rounded-full bg-gradient-radial from-pink-500/50 via-purple-500/30 to-transparent blur-xl\" />\n                    </motion.div>\n                  ))}\n\n                  {/* Animated Bars */}\n                  {(currentStep < steps.length ? steps[currentStep].array : array).map((element, index) => {\n                    const isComparing = currentStep < steps.length && steps[currentStep].comparingIndices.includes(index);\n                    const isSwapping = currentStep < steps.length && steps[currentStep].swappingIndices.includes(index);\n                    const isSorted = currentStep < steps.length && steps[currentStep].sortedIndices.includes(index);\n                    \n                    const maxValue = Math.max(...array.map(el => el.value));\n                    const heightPercentage = (element.value / maxValue) * 100;\n                    \n                    let barColor = NEON_COLORS[index % NEON_COLORS.length];\n                    let glowColor = barColor;\n                    let shadowIntensity = '0.5';\n                    \n                    if (isSorted) {\n                      barColor = '#00ff00';\n                      glowColor = '#00ff00';\n                      shadowIntensity = '0.8';\n                    } else if (isSwapping) {\n                      barColor = '#ff0066';\n                      glowColor = '#ff0066';\n                      shadowIntensity = '1';\n                    } else if (isComparing) {\n                      barColor = '#ffff00';\n                      glowColor = '#ffff00';\n                      shadowIntensity = '0.9';\n                    }\n\n                    return (\n                      <motion.div\n                        key={element.id}\n                        layout\n                        initial={{ height: 0, opacity: 0 }}\n                        animate={{\n                          height: `${heightPercentage}%`,\n                          opacity: 1,\n                          scale: isSwapping ? [1, 1.1, 1] : isComparing ? [1, 1.05, 1] : 1,\n                          y: isSwapping ? [0, -10, 0] : 0\n                        }}\n                        transition={{\n                          height: { duration: 0.5, ease: \"easeOut\" },\n                          opacity: { duration: 0.3 },\n                          scale: { duration: 0.3, repeat: isSwapping || isComparing ? Infinity : 0 },\n                          y: { duration: 0.4, repeat: isSwapping ? 2 : 0 },\n                          layout: { duration: 0.5, ease: \"easeInOut\" }\n                        }}\n                        className=\"relative flex-1 min-w-[4px] max-w-[60px] rounded-t-lg group cursor-pointer\"\n                        style={{\n                          backgroundColor: barColor,\n                          boxShadow: `\n                            0 0 20px ${glowColor}${Math.floor(parseFloat(shadowIntensity) * 255).toString(16).padStart(2, '0')},\n                            0 0 40px ${glowColor}${Math.floor(parseFloat(shadowIntensity) * 0.6 * 255).toString(16).padStart(2, '0')},\n                            0 0 60px ${glowColor}${Math.floor(parseFloat(shadowIntensity) * 0.4 * 255).toString(16).padStart(2, '0')},\n                            inset 0 0 20px ${glowColor}${Math.floor(parseFloat(shadowIntensity) * 0.3 * 255).toString(16).padStart(2, '0')}\n                          `,\n                          border: `2px solid ${barColor}`,\n                          filter: isSorted ? 'brightness(1.3)' : isSwapping ? 'brightness(1.5)' : isComparing ? 'brightness(1.2)' : 'brightness(1)'\n                        }}\n                      >\n                        {/* Value Label */}\n                        <motion.div\n                          initial={{ opacity: 0 }}\n                          animate={{ opacity: array.length <= 30 ? 1 : 0 }}\n                          className=\"absolute -top-8 left-1/2 transform -translate-x-1/2 opacity-0 group-hover:opacity-100 transition-opacity duration-200\"\n                        >\n                          <div \n                            className=\"px-2 py-1 rounded text-xs font-bold whitespace-nowrap shadow-lg\"\n                            style={{\n                              backgroundColor: `${barColor}33`,\n                              color: barColor,\n                              border: `1px solid ${barColor}`,\n                              boxShadow: `0 0 10px ${glowColor}80`\n                            }}\n                          >\n                            {element.value}\n                          </div>\n                        </motion.div>\n\n                        {/* Sorted Checkmark */}\n                        {isSorted && (\n                          <motion.div\n                            initial={{ scale: 0, rotate: -180 }}\n                            animate={{ scale: 1, rotate: 0 }}\n                            className=\"absolute -top-6 left-1/2 transform -translate-x-1/2\"\n                          >\n                            <div className=\"w-6 h-6 rounded-full bg-green-500 flex items-center justify-center shadow-[0_0_20px_rgba(0,255,0,0.8)]\">\n                              <svg className=\"w-4 h-4 text-white\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={3} d=\"M5 13l4 4L19 7\" />\n                              </svg>\n                            </div>\n                          </motion.div>\n                        )}\n\n                        {/* Swap Indicator */}\n                        {isSwapping && (\n                          <motion.div\n                            animate={{\n                              rotate: [0, 360],\n                              scale: [1, 1.2, 1]\n                            }}\n                            transition={{\n                              duration: 0.6,\n                              repeat: Infinity\n                            }}\n                            className=\"absolute -top-8 left-1/2 transform -translate-x-1/2\"\n                          >\n                            <RotateCcw className=\"w-5 h-5 text-pink-400\" style={{\n                              filter: 'drop-shadow(0 0 8px rgba(255, 0, 102, 0.8))'\n                            }} />\n                          </motion.div>\n                        )}\n\n                        {/* Comparison Indicator */}\n                        {isComparing && !isSwapping && (\n                          <motion.div\n                            animate={{\n                              y: [-5, 5, -5],\n                              opacity: [0.5, 1, 0.5]\n                            }}\n                            transition={{\n                              duration: 0.8,\n                              repeat: Infinity\n                            }}\n                            className=\"absolute -top-8 left-1/2 transform -translate-x-1/2\"\n                          >\n                            <div className=\"w-3 h-3 rounded-full bg-yellow-400 shadow-[0_0_15px_rgba(255,255,0,0.9)]\" />\n                          </motion.div>\n                        )}\n\n                        {/* Particle Effect for Sorted */}\n                        {isSorted && (\n                          <>\n                            {[...Array(3)].map((_, i) => (\n                              <motion.div\n                                key={`particle-${i}`}\n                                initial={{ opacity: 1, y: 0, x: 0 }}\n                                animate={{\n                                  opacity: [1, 0],\n                                  y: [-20, -60],\n                                  x: [(i - 1) * 10, (i - 1) * 20]\n                                }}\n                                transition={{\n                                  duration: 1,\n                                  delay: i * 0.1,\n                                  repeat: Infinity,\n                                  repeatDelay: 1\n                                }}\n                                className=\"absolute top-0 left-1/2 w-1 h-1 rounded-full bg-green-400\"\n                                style={{\n                                  boxShadow: '0 0 10px rgba(0, 255, 0, 0.8)'\n                                }}\n                              />\n                            ))}\n                          </>\n                        )}\n                      </motion.div>\n                    );\n                  })}\n                </div>\n              )}\n              \n              <div className=\"relative h-full flex items-end justify-center gap-1\">\n                \n              </div>\n            </div>\n\n            \n            <motion.div\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ delay: 0.3, duration: 0.6 }}\n              className=\"mt-6 bg-gray-900/50 backdrop-blur-lg border border-purple-500/30 rounded-xl p-4 shadow-lg shadow-purple-500/20\"\n            >\n              <div className=\"space-y-2\">\n                <div className=\"flex items-center justify-between text-sm\">\n                  <span className=\"text-purple-300 font-semibold\">Progress</span>\n                  <span className=\"text-cyan-300 font-mono\">\n                    {steps.length > 0 ? Math.round((currentStep / steps.length) * 100) : 0}%\n                  </span>\n                </div>\n                <div className=\"relative h-3 bg-gray-800/50 rounded-full overflow-hidden border border-gray-700/50\">\n                  <motion.div\n                    className=\"absolute inset-y-0 left-0 bg-gradient-to-r from-cyan-500 via-purple-500 to-pink-500 rounded-full\"\n                    initial={{ width: '0%' }}\n                    animate={{ \n                      width: steps.length > 0 ? `${(currentStep / steps.length) * 100}%` : '0%',\n                      boxShadow: [\n                        '0 0 10px rgba(0, 255, 255, 0.5)',\n                        '0 0 20px rgba(168, 85, 247, 0.7)',\n                        '0 0 10px rgba(0, 255, 255, 0.5)'\n                      ]\n                    }}\n                    transition={{ \n                      width: { duration: 0.3, ease: 'easeOut' },\n                      boxShadow: { duration: 2, repeat: Infinity }\n                    }}\n                  />\n                  <motion.div\n                    className=\"absolute inset-0 bg-gradient-to-r from-transparent via-white/30 to-transparent\"\n                    animate={{\n                      x: ['-100%', '200%']\n                    }}\n                    transition={{\n                      duration: 2,\n                      repeat: Infinity,\n                      ease: 'linear'\n                    }}\n                    style={{\n                      width: '50%'\n                    }}\n                  />\n                </div>\n                <div className=\"flex items-center justify-between text-xs text-gray-400\">\n                  <span>Step {currentStep} of {steps.length}</span>\n                  {currentStep >= steps.length && steps.length > 0 && (\n                    <motion.span\n                      initial={{ opacity: 0, scale: 0.8 }}\n                      animate={{ opacity: 1, scale: 1 }}\n                      className=\"text-green-400 font-semibold\"\n                    >\n                      \u2713 Complete\n                    </motion.span>\n                  )}\n                </div>\n              </div>\n            </motion.div>\n          </div>\n        </div>\n\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ delay: 0.6, duration: 0.8 }}\n          className=\"bg-gray-900/50 backdrop-blur-lg border border-cyan-500/30 rounded-xl p-6 shadow-[0_0_30px_rgba(0,255,255,0.2)]\"\n        >\n          <div className=\"flex items-center gap-2 mb-4\">\n            <BarChart3 className=\"w-5 h-5 text-cyan-400\" />\n            <h3 className=\"text-lg font-semibold text-cyan-300 uppercase tracking-wider\">\n              Legend\n            </h3>\n          </div>\n          \n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n            <motion.div\n              className=\"flex items-center gap-3 p-3 bg-gray-800/50 rounded-lg border border-gray-700/50 hover:border-cyan-500/50 transition-all duration-300\"\n              whileHover={{ scale: 1.05 }}\n            >\n              <motion.div\n                className=\"w-4 h-8 bg-gradient-to-t from-cyan-400 to-cyan-300 rounded\"\n                style={{\n                  boxShadow: '0 0 20px rgba(0, 255, 255, 0.6), 0 0 40px rgba(0, 255, 255, 0.3)'\n                }}\n                animate={{\n                  boxShadow: [\n                    '0 0 20px rgba(0, 255, 255, 0.6), 0 0 40px rgba(0, 255, 255, 0.3)',\n                    '0 0 30px rgba(0, 255, 255, 0.8), 0 0 60px rgba(0, 255, 255, 0.5)',\n                    '0 0 20px rgba(0, 255, 255, 0.6), 0 0 40px rgba(0, 255, 255, 0.3)'\n                  ]\n                }}\n                transition={{ duration: 2, repeat: Infinity }}\n              />\n              <div>\n                <div className=\"text-sm font-semibold text-white\">Default</div>\n                <div className=\"text-xs text-gray-400\">Unsorted</div>\n              </div>\n            </motion.div>\n\n            <motion.div\n              className=\"flex items-center gap-3 p-3 bg-gray-800/50 rounded-lg border border-gray-700/50 hover:border-yellow-500/50 transition-all duration-300\"\n              whileHover={{ scale: 1.05 }}\n            >\n              <motion.div\n                className=\"w-4 h-8 bg-gradient-to-t from-yellow-400 to-yellow-300 rounded\"\n                style={{\n                  boxShadow: '0 0 20px rgba(255, 255, 0, 0.6), 0 0 40px rgba(255, 255, 0, 0.3)'\n                }}\n                animate={{\n                  boxShadow: [\n                    '0 0 20px rgba(255, 255, 0, 0.6), 0 0 40px rgba(255, 255, 0, 0.3)',\n                    '0 0 30px rgba(255, 255, 0, 0.8), 0 0 60px rgba(255, 255, 0, 0.5)',\n                    '0 0 20px rgba(255, 255, 0, 0.6), 0 0 40px rgba(255, 255, 0, 0.3)'\n                  ]\n                }}\n                transition={{ duration: 1.5, repeat: Infinity }}\n              />\n              <div>\n                <div className=\"text-sm font-semibold text-white\">Comparing</div>\n                <div className=\"text-xs text-gray-400\">Active check</div>\n              </div>\n            </motion.div>\n\n            <motion.div\n              className=\"flex items-center gap-3 p-3 bg-gray-800/50 rounded-lg border border-gray-700/50 hover:border-pink-500/50 transition-all duration-300\"\n              whileHover={{ scale: 1.05 }}\n            >\n              <motion.div\n                className=\"w-4 h-8 bg-gradient-to-t from-pink-500 to-pink-400 rounded\"\n                style={{\n                  boxShadow: '0 0 20px rgba(255, 0, 102, 0.6), 0 0 40px rgba(255, 0, 102, 0.3)'\n                }}\n                animate={{\n                  boxShadow: [\n                    '0 0 20px rgba(255, 0, 102, 0.6), 0 0 40px rgba(255, 0, 102, 0.3)',\n                    '0 0 30px rgba(255, 0, 102, 0.8), 0 0 60px rgba(255, 0, 102, 0.5)',\n                    '0 0 20px rgba(255, 0, 102, 0.6), 0 0 40px rgba(255, 0, 102, 0.3)'\n                  ],\n                  scale: [1, 1.1, 1]\n                }}\n                transition={{ duration: 1, repeat: Infinity }}\n              />\n              <div>\n                <div className=\"text-sm font-semibold text-white\">Swapping</div>\n                <div className=\"text-xs text-gray-400\">Exchanging</div>\n              </div>\n            </motion.div>\n\n            <motion.div\n              className=\"flex items-center gap-3 p-3 bg-gray-800/50 rounded-lg border border-gray-700/50 hover:border-green-500/50 transition-all duration-300\"\n              whileHover={{ scale: 1.05 }}\n            >\n              <motion.div\n                className=\"w-4 h-8 bg-gradient-to-t from-green-400 to-green-300 rounded\"\n                style={{\n                  boxShadow: '0 0 20px rgba(0, 255, 0, 0.6), 0 0 40px rgba(0, 255, 0, 0.3)'\n                }}\n                animate={{\n                  boxShadow: [\n                    '0 0 20px rgba(0, 255, 0, 0.6), 0 0 40px rgba(0, 255, 0, 0.3)',\n                    '0 0 30px rgba(0, 255, 0, 0.8), 0 0 60px rgba(0, 255, 0, 0.5)',\n                    '0 0 20px rgba(0, 255, 0, 0.6), 0 0 40px rgba(0, 255, 0, 0.3)'\n                  ]\n                }}\n                transition={{ duration: 2, repeat: Infinity }}\n              />\n              <div>\n                <div className=\"text-sm font-semibold text-white\">Sorted</div>\n                <div className=\"text-xs text-gray-400\">Complete</div>\n              </div>\n            </motion.div>\n          </div>\n\n          <motion.div\n            className=\"mt-4 p-3 bg-gradient-to-r from-purple-900/30 to-pink-900/30 rounded-lg border border-purple-500/30\"\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            transition={{ delay: 0.8 }}\n          >\n            <div className=\"flex items-start gap-2\">\n              <Zap className=\"w-4 h-4 text-purple-400 mt-0.5 flex-shrink-0\" />\n              <p className=\"text-xs text-gray-300 leading-relaxed\">\n                Watch the bars light up as the algorithm compares and swaps elements. \n                <span className=\"text-yellow-400 font-semibold\"> Yellow</span> indicates comparison,\n                <span className=\"text-pink-400 font-semibold\"> pink</span> shows swapping in progress, and\n                <span className=\"text-green-400 font-semibold\"> green</span> marks sorted elements.\n              </p>\n            </div>\n          </motion.div>\n        </motion.div>\n      </div>\n    </div>\n  );\n}\n",
  "error": null,
  "overall_score": 53,
  "code_quality_score": 14,
  "architecture_score": 12,
  "performance_score": 16,
  "accessibility_score": 11,
  "metadata": {
    "document_id": "eval_room_1de68a9b5398",
    "prompt_category": "creative",
    "prompt_complexity": 9.0
  },
  "raw_response": {
    "document_id": "eval_room_1de68a9b5398",
    "mode": "parallel",
    "prompt": "Build a captivating algorithm visualizer with neon colored bars, smooth height transitions, glowing comparison indicators, trail effects during swaps, and a futuristic dashboard design with animated controls",
    "content": "import { useState, useCallback } from 'react';import React from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Slider } from '@/components/ui/slider';\nimport { Play, Pause, RotateCcw, Zap, BarChart3 } from 'lucide-react';\nimport { motion } from 'framer-motion';\n\ninterface ArrayElement {\n  value: number;\n  id: string;\n  isComparing?: boolean;\n  isSwapping?: boolean;\n  isSorted?: boolean;\n}\n\ninterface AlgorithmStep {\n  array: ArrayElement[];\n  comparingIndices: number[];\n  swappingIndices: number[];\n  sortedIndices: number[];\n}\n\ntype AlgorithmType = 'bubble' | 'quick' | 'merge' | 'insertion';\n\nconst NEON_COLORS = [\n  '#00ffff',\n  '#ff00ff', \n  '#00ff00',\n  '#ffff00',\n  '#ff0066',\n  '#00ffaa'\n];\n\nconst mockAlgorithms = [\n  { id: 'bubble', name: 'Bubble Sort', complexity: 'O(n\u00b2)' },\n  { id: 'quick', name: 'Quick Sort', complexity: 'O(n log n)' },\n  { id: 'merge', name: 'Merge Sort', complexity: 'O(n log n)' },\n  { id: 'insertion', name: 'Insertion Sort', complexity: 'O(n\u00b2)' }\n];\n\nexport default function AlgorithmVisualizer() {\n  const [array, setArray] = useState<ArrayElement[]>([]);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [speed, setSpeed] = useState([50]);\n  const [arraySize, setArraySize] = useState([20]);\n  const [selectedAlgorithm, setSelectedAlgorithm] = useState<AlgorithmType>('bubble');\n  const [currentStep, setCurrentStep] = useState(0);\n  const [steps, setSteps] = useState<AlgorithmStep[]>([]);\n\n  const generateRandomArray = useCallback(() => {\n\n    const newArray: ArrayElement[] = Array.from({ length: arraySize[0] }, (_, index) => ({\n      value: Math.floor(Math.random() * 100) + 1,\n      id: `element-${index}-${Date.now()}`,\n      isComparing: false,\n      isSwapping: false,\n      isSorted: false\n    }));\n    \n    setArray(newArray);\n    setSteps([]);\n    setCurrentStep(0);\n    setIsPlaying(false);\n  }, [arraySize]);\n\n\n  const resetVisualization = useCallback(() => {\n\n    setIsPlaying(false);\n    setCurrentStep(0);\n    setSteps([]);\n    generateRandomArray();\n  }, [generateRandomArray]);\n\n  // Animation effect for step-by-step visualization\n  const animateSteps = useCallback(() => {\n    if (currentStep < steps.length && isPlaying) {\n      const timer = setTimeout(() => {\n        setCurrentStep(prev => prev + 1);\n      }, 1000 - speed[0] * 9.5); // Convert speed slider (0-100) to delay (1000ms-50ms)\n      \n      return () => clearTimeout(timer);\n    } else if (currentStep >= steps.length && isPlaying) {\n      setIsPlaying(false);\n    }\n  }, [currentStep, steps.length, isPlaying, speed]);\n\n  // Run animation effect\n  React.useEffect(() => {\n    const cleanup = animateSteps();\n    return cleanup;\n  }, [animateSteps]);\n  const startVisualization = useCallback(() => {\n    if (steps.length === 0) return;\n    if (currentStep >= steps.length) {\n      setCurrentStep(0);\n    }\n    setIsPlaying(true);\n  }, [steps, speed, currentStep]);\n\n  const pauseVisualization = useCallback(() => {\n\n    setIsPlaying(false);\n  }, []);\n\n  const generateSortingSteps = useCallback((algorithm: AlgorithmType) => {\n    const algorithmArray = [...array];\n    const newSteps: AlgorithmStep[] = [];\n\n    const addStep = (arr: ArrayElement[], comparing: number[] = [], swapping: number[] = [], sorted: number[] = []) => {\n      newSteps.push({\n        array: arr.map(el => ({ ...el })),\n        comparingIndices: [...comparing],\n        swappingIndices: [...swapping],\n        sortedIndices: [...sorted]\n      });\n    };\n\n    // Initial state\n    addStep(algorithmArray);\n\n    switch (algorithm) {\n      case 'bubble': {\n        const arr = [...algorithmArray];\n        const sortedIndices: number[] = [];\n        \n        for (let i = 0; i < arr.length - 1; i++) {\n          for (let j = 0; j < arr.length - i - 1; j++) {\n            // Comparing\n            addStep(arr, [j, j + 1], [], sortedIndices);\n            \n            if (arr[j].value > arr[j + 1].value) {\n              // Swapping\n              addStep(arr, [], [j, j + 1], sortedIndices);\n              [arr[j], arr[j + 1]] = [arr[j + 1], arr[j]];\n              addStep(arr, [], [], sortedIndices);\n            }\n          }\n          sortedIndices.push(arr.length - 1 - i);\n          addStep(arr, [], [], sortedIndices);\n        }\n        sortedIndices.push(0);\n        addStep(arr, [], [], sortedIndices);\n        break;\n      }\n\n      case 'insertion': {\n        const arr = [...algorithmArray];\n        const sortedIndices: number[] = [0];\n        addStep(arr, [], [], sortedIndices);\n\n        for (let i = 1; i < arr.length; i++) {\n          const key = arr[i];\n          let j = i - 1;\n\n          addStep(arr, [i], [], sortedIndices);\n\n          while (j >= 0 && arr[j].value > key.value) {\n            addStep(arr, [j, j + 1], [], sortedIndices);\n            addStep(arr, [], [j, j + 1], sortedIndices);\n            arr[j + 1] = arr[j];\n            addStep(arr, [], [], sortedIndices);\n            j--;\n          }\n\n          arr[j + 1] = key;\n          sortedIndices.push(i);\n          addStep(arr, [], [], sortedIndices);\n        }\n        break;\n      }\n\n      case 'quick': {\n        const arr = [...algorithmArray];\n        const sortedIndices: number[] = [];\n\n        const partition = (low: number, high: number): number => {\n          const pivot = arr[high].value;\n          let i = low - 1;\n\n          addStep(arr, [high], [], sortedIndices);\n\n          for (let j = low; j < high; j++) {\n            addStep(arr, [j, high], [], sortedIndices);\n\n            if (arr[j].value < pivot) {\n              i++;\n              if (i !== j) {\n                addStep(arr, [], [i, j], sortedIndices);\n                [arr[i], arr[j]] = [arr[j], arr[i]];\n                addStep(arr, [], [], sortedIndices);\n              }\n            }\n          }\n\n          addStep(arr, [], [i + 1, high], sortedIndices);\n          [arr[i + 1], arr[high]] = [arr[high], arr[i + 1]];\n          sortedIndices.push(i + 1);\n          addStep(arr, [], [], sortedIndices);\n\n          return i + 1;\n        };\n\n        const quickSort = (low: number, high: number) => {\n          if (low < high) {\n            const pi = partition(low, high);\n            quickSort(low, pi - 1);\n            quickSort(pi + 1, high);\n          } else if (low === high) {\n            sortedIndices.push(low);\n            addStep(arr, [], [], sortedIndices);\n          }\n        };\n\n        quickSort(0, arr.length - 1);\n        break;\n      }\n\n      case 'merge': {\n        const arr = [...algorithmArray];\n        const sortedIndices: number[] = [];\n\n        const merge = (left: number, mid: number, right: number) => {\n          const leftArr = arr.slice(left, mid + 1);\n          const rightArr = arr.slice(mid + 1, right + 1);\n          \n          let i = 0, j = 0, k = left;\n\n          while (i < leftArr.length && j < rightArr.length) {\n            addStep(arr, [left + i, mid + 1 + j], [], sortedIndices);\n\n            if (leftArr[i].value <= rightArr[j].value) {\n              arr[k] = leftArr[i];\n              i++;\n            } else {\n              addStep(arr, [], [k, mid + 1 + j], sortedIndices);\n              arr[k] = rightArr[j];\n              j++;\n            }\n            addStep(arr, [], [], sortedIndices);\n            k++;\n          }\n\n          while (i < leftArr.length) {\n            arr[k] = leftArr[i];\n            addStep(arr, [], [], sortedIndices);\n            i++;\n            k++;\n          }\n\n          while (j < rightArr.length) {\n            arr[k] = rightArr[j];\n            addStep(arr, [], [], sortedIndices);\n            j++;\n            k++;\n          }\n\n          if (left === 0 && right === arr.length - 1) {\n            for (let idx = left; idx <= right; idx++) {\n              sortedIndices.push(idx);\n            }\n          }\n          addStep(arr, [], [], sortedIndices);\n        };\n\n        const mergeSort = (left: number, right: number) => {\n          if (left < right) {\n            const mid = Math.floor((left + right) / 2);\n            mergeSort(left, mid);\n            mergeSort(mid + 1, right);\n            merge(left, mid, right);\n          }\n        };\n\n        mergeSort(0, arr.length - 1);\n        break;\n      }\n    }\n\n    setSteps(newSteps);\n    setCurrentStep(0);\n  }, [array]);\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-gray-900 via-purple-900 to-gray-900 p-8\">\n      <div className=\"max-w-7xl mx-auto space-y-8\">\n        <motion.div\n          initial={{ opacity: 0, y: -20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.8 }}\n          className=\"text-center space-y-4\"\n        >\n          <motion.h1\n            className=\"text-6xl font-bold bg-gradient-to-r from-cyan-400 via-purple-400 to-pink-400 bg-clip-text text-transparent\"\n            animate={{\n              textShadow: [\n                '0 0 20px rgba(0, 255, 255, 0.5)',\n                '0 0 40px rgba(255, 0, 255, 0.5)',\n                '0 0 20px rgba(0, 255, 255, 0.5)'\n              ]\n            }}\n            transition={{ duration: 2, repeat: Infinity }}\n          >\n            Algorithm Visualizer\n          </motion.h1>\n          \n          <div className=\"flex items-center justify-center gap-4\">\n            <motion.div\n              initial={{ scale: 0 }}\n              animate={{ scale: 1 }}\n              transition={{ delay: 0.3, type: 'spring', stiffness: 200 }}\n              className=\"flex items-center gap-2 px-6 py-3 bg-gray-800/50 backdrop-blur-sm rounded-full border border-cyan-500/30\"\n            >\n              <Zap className=\"w-5 h-5 text-cyan-400\" />\n              <span className=\"text-xl font-semibold text-cyan-300\">\n                {mockAlgorithms.find(a => a.id === selectedAlgorithm)?.name || 'Bubble Sort'}\n              </span>\n            </motion.div>\n            \n            <motion.div\n              initial={{ scale: 0 }}\n              animate={{ scale: 1 }}\n              transition={{ delay: 0.5, type: 'spring', stiffness: 200 }}\n              className=\"flex items-center gap-2 px-4 py-2 bg-purple-900/50 backdrop-blur-sm rounded-full border border-purple-500/50\"\n              style={{\n                boxShadow: '0 0 20px rgba(168, 85, 247, 0.4)'\n              }}\n            >\n              <BarChart3 className=\"w-4 h-4 text-purple-300\" />\n              <span className=\"text-sm font-mono text-purple-200\">\n                {mockAlgorithms.find(a => a.id === selectedAlgorithm)?.complexity || 'O(n\u00b2)'}\n              </span>\n            </motion.div>\n          </div>\n        </motion.div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-6\">\n          <div className=\"lg:col-span-1 space-y-6\">\n            <motion.div\n              initial={{ opacity: 0, x: -50 }}\n              animate={{ opacity: 1, x: 0 }}\n              className=\"bg-gray-900/50 backdrop-blur-lg border border-cyan-500/30 rounded-xl p-6 shadow-[0_0_30px_rgba(0,255,255,0.3)] hover:shadow-[0_0_50px_rgba(0,255,255,0.5)] transition-all duration-300\"\n            >\n              <div className=\"space-y-6\">\n                {/* Algorithm Selection */}\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center gap-2 text-cyan-400 font-semibold\">\n                    <Zap className=\"w-4 h-4\" />\n                    <span className=\"text-sm uppercase tracking-wider\">Algorithm</span>\n                  </div>\n                  <div className=\"grid grid-cols-1 gap-2\">\n                    {mockAlgorithms.map((algo) => (\n                      <motion.button\n                        key={algo.id}\n                        whileHover={{ scale: 1.02 }}\n                        whileTap={{ scale: 0.98 }}\n                        onClick={() => {\n                          setSelectedAlgorithm(algo.id as AlgorithmType);\n                          generateSortingSteps(algo.id as AlgorithmType);\n                        }}\n                        disabled={isPlaying}\n                        className={`p-3 rounded-lg border transition-all duration-300 text-left ${\n                          selectedAlgorithm === algo.id\n                            ? 'bg-cyan-500/20 border-cyan-400 shadow-[0_0_20px_rgba(0,255,255,0.4)]'\n                            : 'bg-gray-800/50 border-gray-700 hover:border-cyan-500/50 hover:bg-gray-800'\n                        } disabled:opacity-50 disabled:cursor-not-allowed`}\n                      >\n                        <div className=\"font-medium text-white text-sm\">{algo.name}</div>\n                        <div className=\"text-xs text-gray-400 mt-1\">{algo.complexity}</div>\n                      </motion.button>\n                    ))}\n                  </div>\n                </div>\n\n                {/* Speed Control */}\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center gap-2 text-purple-400 font-semibold\">\n                      <Zap className=\"w-4 h-4\" />\n                      <span className=\"text-sm uppercase tracking-wider\">Speed</span>\n                    </div>\n                    <span className=\"text-white font-mono text-sm\">{speed[0]}%</span>\n                  </div>\n                  <Slider\n                    value={speed}\n                    onValueChange={setSpeed}\n                    min={10}\n                    max={100}\n                    step={10}\n                    disabled={isPlaying}\n                    className=\"cursor-pointer\"\n                  />\n                </div>\n\n                {/* Array Size Control */}\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center gap-2 text-pink-400 font-semibold\">\n                      <BarChart3 className=\"w-4 h-4\" />\n                      <span className=\"text-sm uppercase tracking-wider\">Array Size</span>\n                    </div>\n                    <span className=\"text-white font-mono text-sm\">{arraySize[0]}</span>\n                  </div>\n                  <Slider\n                    value={arraySize}\n                    onValueChange={setArraySize}\n                    min={5}\n                    max={50}\n                    step={5}\n                    disabled={isPlaying}\n                    className=\"cursor-pointer\"\n                  />\n                </div>\n\n                {/* Control Buttons */}\n                <div className=\"space-y-3 pt-4 border-t border-gray-700/50\">\n                  <Button\n                    onClick={isPlaying ? pauseVisualization : startVisualization}\n                    disabled={steps.length === 0 || (currentStep >= steps.length && !isPlaying)}\n                    className=\"w-full bg-gradient-to-r from-cyan-500 to-blue-500 hover:from-cyan-400 hover:to-blue-400 text-white font-semibold shadow-[0_0_20px_rgba(0,255,255,0.5)] hover:shadow-[0_0_30px_rgba(0,255,255,0.7)] transition-all duration-300\"\n                  >\n                    {isPlaying ? (\n                      <>\n                        <Pause className=\"w-4 h-4 mr-2\" />\n                        Pause\n                      </>\n                    ) : (\n                      <>\n                        <Play className=\"w-4 h-4 mr-2\" />\n                        {currentStep >= steps.length ? 'Restart' : 'Play'}\n                      </>\n                    )}\n                  </Button>\n\n                  <Button\n                    onClick={resetVisualization}\n                    disabled={isPlaying}\n                    variant=\"outline\"\n                    className=\"w-full border-purple-500/50 text-purple-400 hover:bg-purple-500/20 hover:border-purple-400 hover:text-purple-300 shadow-[0_0_15px_rgba(168,85,247,0.3)] hover:shadow-[0_0_25px_rgba(168,85,247,0.5)] transition-all duration-300\"\n                  >\n                    <RotateCcw className=\"w-4 h-4 mr-2\" />\n                    Reset\n                  </Button>\n\n                  <Button\n                    onClick={generateRandomArray}\n                    disabled={isPlaying}\n                    variant=\"outline\"\n                    className=\"w-full border-pink-500/50 text-pink-400 hover:bg-pink-500/20 hover:border-pink-400 hover:text-pink-300 shadow-[0_0_15px_rgba(236,72,153,0.3)] hover:shadow-[0_0_25px_rgba(236,72,153,0.5)] transition-all duration-300\"\n                  >\n                    <BarChart3 className=\"w-4 h-4 mr-2\" />\n                    New Array\n                  </Button>\n                </div>\n\n                {/* Progress Indicator */}\n                {steps.length > 0 && (\n                  <div className=\"space-y-2 pt-4 border-t border-gray-700/50\">\n                    <div className=\"flex items-center justify-between text-xs text-gray-400\">\n                      <span>Progress</span>\n                      <span className=\"font-mono\">\n                        {currentStep} / {steps.length}\n                      </span>\n                    </div>\n                    <div className=\"h-2 bg-gray-800 rounded-full overflow-hidden\">\n                      <motion.div\n                        className=\"h-full bg-gradient-to-r from-cyan-500 via-purple-500 to-pink-500 shadow-[0_0_10px_rgba(0,255,255,0.5)]\"\n                        initial={{ width: 0 }}\n                        animate={{ width: `${(currentStep / steps.length) * 100}%` }}\n                        transition={{ duration: 0.3 }}\n                      />\n                    </div>\n                  </div>\n                )}\n              </div>\n            </motion.div>\n            \n            <div className=\"bg-gray-900/50 backdrop-blur-lg border border-cyan-500/30 rounded-xl p-6 shadow-2xl shadow-cyan-500/20\">\n              <div className=\"space-y-6\">\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center gap-2 text-cyan-400\">\n                    <Zap className=\"w-4 h-4\" />\n                    <span className=\"text-sm font-semibold tracking-wider\">ALGORITHM</span>\n                  </div>\n                  <div className=\"grid grid-cols-1 gap-3\">\n                    {mockAlgorithms.map((algo) => (\n                      <motion.button\n                        key={algo.id}\n                        onClick={() => setSelectedAlgorithm(algo.id as AlgorithmType)}\n                        className={`relative p-4 rounded-lg border-2 transition-all duration-300 text-left overflow-hidden group ${\n                          selectedAlgorithm === algo.id\n                            ? 'border-cyan-400 bg-cyan-500/20 shadow-lg shadow-cyan-500/50'\n                            : 'border-gray-700 bg-gray-800/50 hover:border-purple-500/50 hover:bg-purple-500/10'\n                        }`}\n                        whileHover={{ scale: 1.02 }}\n                        whileTap={{ scale: 0.98 }}\n                      >\n                        <div className={`absolute inset-0 bg-gradient-to-r ${\n                          selectedAlgorithm === algo.id\n                            ? 'from-cyan-500/20 to-purple-500/20'\n                            : 'from-purple-500/0 to-pink-500/0 group-hover:from-purple-500/10 group-hover:to-pink-500/10'\n                        } transition-all duration-300`} />\n                        <div className=\"relative z-10\">\n                          <div className={`font-bold text-sm mb-1 ${\n                            selectedAlgorithm === algo.id ? 'text-cyan-300' : 'text-gray-300'\n                          }`}>\n                            {algo.name}\n                          </div>\n                          <div className={`text-xs font-mono ${\n                            selectedAlgorithm === algo.id ? 'text-cyan-400' : 'text-gray-500'\n                          }`}>\n                            {algo.complexity}\n                          </div>\n                        </div>\n                        {selectedAlgorithm === algo.id && (\n                          <motion.div\n                            className=\"absolute top-2 right-2 w-2 h-2 bg-cyan-400 rounded-full\"\n                            animate={{ scale: [1, 1.2, 1], opacity: [1, 0.5, 1] }}\n                            transition={{ duration: 2, repeat: Infinity }}\n                          />\n                        )}\n                      </motion.button>\n                    ))}\n                  </div>\n                </div>\n\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <label className=\"text-cyan-400 text-sm font-medium flex items-center gap-2\">\n                      <Zap className=\"w-4 h-4\" />\n                      Speed\n                    </label>\n                    <span className=\"text-cyan-300 text-xs\">{speed[0]}ms</span>\n                  </div>\n                  <Slider\n                    value={speed}\n                    onValueChange={setSpeed}\n                    min={10}\n                    max={200}\n                    step={10}\n                    className=\"[&_[role=slider]]:bg-cyan-400 [&_[role=slider]]:border-cyan-300 [&_[role=slider]]:shadow-[0_0_15px_rgba(34,211,238,0.8)] [&_[role=slider]]:hover:shadow-[0_0_25px_rgba(34,211,238,1)] [&_[role=slider]]:transition-shadow [&_.relative]:bg-gray-700/50 [&_.relative]:border [&_.relative]:border-cyan-500/30 [&_.bg-primary]:bg-gradient-to-r [&_.bg-primary]:from-cyan-500 [&_.bg-primary]:to-purple-500 [&_.bg-primary]:shadow-[0_0_10px_rgba(34,211,238,0.5)]\"\n                  />\n                </div>\n\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <label className=\"text-cyan-400 text-sm font-medium flex items-center gap-2\">\n                      <BarChart3 className=\"w-4 h-4\" />\n                      Array Size\n                    </label>\n                    <span className=\"text-cyan-300 text-xs\">{arraySize[0]}</span>\n                  </div>\n                  <Slider\n                    value={arraySize}\n                    onValueChange={setArraySize}\n                    min={5}\n                    max={100}\n                    step={1}\n                    className=\"[&_[role=slider]]:bg-gradient-to-r [&_[role=slider]]:from-purple-500 [&_[role=slider]]:to-pink-500 [&_[role=slider]]:border-2 [&_[role=slider]]:border-purple-300 [&_[role=slider]]:shadow-lg [&_[role=slider]]:shadow-purple-500/50 [&_[role=slider]]:transition-all [&_[role=slider]]:hover:shadow-purple-400/70 [&_[role=slider]]:hover:scale-110 [&>span]:bg-gradient-to-r [&>span]:from-purple-500/30 [&>span]:to-pink-500/30 [&>span]:h-2\"\n                  /></parameter>\n</invoke>\n                </div>\n\n                <div className=\"flex gap-3 pt-4\">\n                  <motion.div className=\"flex-1\">\n                    <Button\n                      onClick={isPlaying ? pauseVisualization : startVisualization}\n                      disabled={array.length === 0 || (steps.length === 0 && !isPlaying)}\n                      className=\"w-full bg-gradient-to-r from-cyan-500 to-purple-500 hover:from-cyan-400 hover:to-purple-400 text-white font-semibold py-6 rounded-lg relative overflow-hidden group disabled:opacity-50 disabled:cursor-not-allowed\"\n                      whileHover={{ scale: 1.05 }}\n                      whileTap={{ scale: 0.95 }}\n                    >\n                      <motion.div\n                        className=\"absolute inset-0 bg-gradient-to-r from-cyan-400 to-purple-400 opacity-0 group-hover:opacity-100 blur-xl transition-opacity duration-300\"\n                        animate={{\n                          opacity: isPlaying ? [0.5, 0.8, 0.5] : 0\n                        }}\n                        transition={{\n                          duration: 2,\n                          repeat: isPlaying ? Infinity : 0\n                        }}\n                      />\n                      \n                      <motion.div\n                        className=\"relative flex items-center justify-center gap-2\"\n                        initial={false}\n                      >\n                        <motion.div\n                          animate={{\n                            rotate: isPlaying ? 0 : 0,\n                            scale: isPlaying ? 1 : 1\n                          }}\n                          transition={{ duration: 0.3 }}\n                        >\n                          {isPlaying ? (\n                            <motion.div\n                              initial={{ scale: 0, rotate: -90 }}\n                              animate={{ scale: 1, rotate: 0 }}\n                              exit={{ scale: 0, rotate: 90 }}\n                              transition={{ duration: 0.3 }}\n                            >\n                              <Pause className=\"w-5 h-5\" />\n                            </motion.div>\n                          ) : (\n                            <motion.div\n                              initial={{ scale: 0, rotate: 90 }}\n                              animate={{ scale: 1, rotate: 0 }}\n                              exit={{ scale: 0, rotate: -90 }}\n                              transition={{ duration: 0.3 }}\n                            >\n                              <Play className=\"w-5 h-5\" />\n                            </motion.div>\n                          )}\n                        </motion.div>\n                        \n                        <span className=\"text-lg\">\n                          {isPlaying ? 'Pause' : 'Start'}\n                        </span>\n                      </motion.div>\n                      \n                      <motion.div\n                        className=\"absolute inset-0 rounded-lg\"\n                        style={{\n                          boxShadow: isPlaying \n                            ? '0 0 30px rgba(0, 255, 255, 0.6), 0 0 60px rgba(168, 85, 247, 0.4)'\n                            : '0 0 20px rgba(0, 255, 255, 0.3)'\n                        }}\n                        animate={{\n                          boxShadow: isPlaying\n                            ? [\n                                '0 0 30px rgba(0, 255, 255, 0.6), 0 0 60px rgba(168, 85, 247, 0.4)',\n                                '0 0 40px rgba(168, 85, 247, 0.6), 0 0 80px rgba(0, 255, 255, 0.4)',\n                                '0 0 30px rgba(0, 255, 255, 0.6), 0 0 60px rgba(168, 85, 247, 0.4)'\n                              ]\n                            : '0 0 20px rgba(0, 255, 255, 0.3)'\n                        }}\n                        transition={{\n                          duration: 2,\n                          repeat: isPlaying ? Infinity : 0\n                        }}\n                      />\n                    </Button>\n                  </motion.div>\n                  <motion.button\n                    onClick={resetVisualization}\n                    disabled={isPlaying}\n                    className=\"flex-1 flex items-center justify-center gap-2 px-6 py-3 bg-gradient-to-r from-pink-600 to-purple-600 text-white rounded-lg font-semibold shadow-[0_0_20px_rgba(236,72,153,0.5)] hover:shadow-[0_0_40px_rgba(236,72,153,0.8)] transition-all duration-300 disabled:opacity-50 disabled:cursor-not-allowed border border-pink-400/50\"\n                    whileHover={{ scale: 1.05 }}\n                    whileTap={{ scale: 0.95, rotate: 360 }}\n                    transition={{ duration: 0.6 }}\n                  >\n                    <RotateCcw className=\"w-5 h-5\" />\n                    Reset\n                  </motion.button>\n                </div>\n              </div>\n            </div>\n\n            <motion.div\n              initial={{ opacity: 0, x: -50 }}\n              animate={{ opacity: 1, x: 0 }}\n              transition={{ delay: 0.2 }}\n              className=\"bg-gray-900/50 backdrop-blur-lg border border-purple-500/30 rounded-xl p-6 shadow-[0_0_30px_rgba(168,85,247,0.3)] hover:shadow-[0_0_50px_rgba(168,85,247,0.5)] transition-all duration-300\"\n            >\n              <div className=\"space-y-4\">\n                <div className=\"flex items-center gap-2 text-purple-400 font-semibold mb-4\">\n                  <BarChart3 className=\"w-5 h-5\" />\n                  <span className=\"text-sm uppercase tracking-wider\">Statistics</span>\n                </div>\n\n                <div className=\"space-y-4\">\n                  {/* Comparisons Counter */}\n                  <div className=\"bg-gray-800/50 rounded-lg p-4 border border-cyan-500/20 hover:border-cyan-500/40 transition-all duration-300\">\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"text-cyan-400 text-sm font-medium\">Comparisons</span>\n                      <motion.span\n                        key={currentStep}\n                        initial={{ scale: 1.2, color: '#00ffff' }}\n                        animate={{ scale: 1, color: '#22d3ee' }}\n                        className=\"text-2xl font-bold text-cyan-300 font-mono\"\n                      >\n                        {currentStep > 0 && steps[currentStep - 1]\n                          ? steps.slice(0, currentStep).filter(s => s.comparingIndices.length > 0).length\n                          : 0}\n                      </motion.span>\n                    </div>\n                    <div className=\"mt-2 h-1 bg-gray-700 rounded-full overflow-hidden\">\n                      <motion.div\n                        className=\"h-full bg-gradient-to-r from-cyan-500 to-blue-500\"\n                        initial={{ width: 0 }}\n                        animate={{\n                          width: steps.length > 0\n                            ? `${(steps.slice(0, currentStep).filter(s => s.comparingIndices.length > 0).length / steps.length) * 100}%`\n                            : '0%'\n                        }}\n                        transition={{ duration: 0.3 }}\n                      />\n                    </div>\n                  </div>\n\n                  {/* Swaps Counter */}\n                  <div className=\"bg-gray-800/50 rounded-lg p-4 border border-pink-500/20 hover:border-pink-500/40 transition-all duration-300\">\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"text-pink-400 text-sm font-medium\">Swaps</span>\n                      <motion.span\n                        key={`swap-${currentStep}`}\n                        initial={{ scale: 1.2, color: '#ff0066' }}\n                        animate={{ scale: 1, color: '#ec4899' }}\n                        className=\"text-2xl font-bold text-pink-300 font-mono\"\n                      >\n                        {currentStep > 0 && steps[currentStep - 1]\n                          ? steps.slice(0, currentStep).filter(s => s.swappingIndices.length > 0).length\n                          : 0}\n                      </motion.span>\n                    </div>\n                    <div className=\"mt-2 h-1 bg-gray-700 rounded-full overflow-hidden\">\n                      <motion.div\n                        className=\"h-full bg-gradient-to-r from-pink-500 to-purple-500\"\n                        initial={{ width: 0 }}\n                        animate={{\n                          width: steps.length > 0\n                            ? `${(steps.slice(0, currentStep).filter(s => s.swappingIndices.length > 0).length / steps.length) * 100}%`\n                            : '0%'\n                        }}\n                        transition={{ duration: 0.3 }}\n                      />\n                    </div>\n                  </div>\n\n                  {/* Progress */}\n                  <div className=\"bg-gray-800/50 rounded-lg p-4 border border-green-500/20 hover:border-green-500/40 transition-all duration-300\">\n                    <div className=\"flex items-center justify-between mb-2\">\n                      <span className=\"text-green-400 text-sm font-medium\">Progress</span>\n                      <motion.span\n                        key={`progress-${currentStep}`}\n                        initial={{ scale: 1.2 }}\n                        animate={{ scale: 1 }}\n                        className=\"text-2xl font-bold text-green-300 font-mono\"\n                      >\n                        {steps.length > 0 ? Math.round((currentStep / steps.length) * 100) : 0}%\n                      </motion.span>\n                    </div>\n                    <div className=\"h-2 bg-gray-700 rounded-full overflow-hidden\">\n                      <motion.div\n                        className=\"h-full bg-gradient-to-r from-green-500 via-emerald-500 to-cyan-500 relative\"\n                        initial={{ width: 0 }}\n                        animate={{\n                          width: steps.length > 0 ? `${(currentStep / steps.length) * 100}%` : '0%'\n                        }}\n                        transition={{ duration: 0.3 }}\n                      >\n                        <motion.div\n                          className=\"absolute inset-0 bg-white/30\"\n                          animate={{\n                            x: ['-100%', '100%']\n                          }}\n                          transition={{\n                            duration: 1,\n                            repeat: Infinity,\n                            ease: 'linear'\n                          }}\n                        />\n                      </motion.div>\n                    </div>\n                  </div>\n\n                  {/* Array Status */}\n                  <div className=\"bg-gray-800/50 rounded-lg p-4 border border-purple-500/20 hover:border-purple-500/40 transition-all duration-300\">\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"text-purple-400 text-sm font-medium\">Array Elements</span>\n                      <span className=\"text-xl font-bold text-purple-300 font-mono\">\n                        {array.length}\n                      </span>\n                    </div>\n                    <div className=\"mt-2 flex items-center justify-between text-xs\">\n                      <span className=\"text-gray-400\">Sorted</span>\n                      <span className=\"text-purple-300 font-mono\">\n                        {currentStep > 0 && steps[currentStep - 1]\n                          ? steps[currentStep - 1].sortedIndices.length\n                          : 0} / {array.length}\n                      </span>\n                    </div>\n                  </div>\n\n                  {/* Current Step */}\n                  <div className=\"bg-gradient-to-r from-purple-900/50 to-pink-900/50 rounded-lg p-4 border border-purple-400/30\">\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"text-purple-300 text-sm font-medium\">Current Step</span>\n                      <motion.span\n                        key={`step-${currentStep}`}\n                        initial={{ scale: 1.3, opacity: 0 }}\n                        animate={{ scale: 1, opacity: 1 }}\n                        className=\"text-xl font-bold text-purple-200 font-mono\"\n                      >\n                        {currentStep} / {steps.length}\n                      </motion.span>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </motion.div>\n          </div>\n\n          <div className=\"lg:col-span-3\">\n            <div className=\"bg-gray-900/50 backdrop-blur-lg border border-purple-500/30 rounded-xl p-8 shadow-2xl shadow-purple-500/20 min-h-[600px]\">\n              {array.length === 0 ? (\n                <motion.div\n                  initial={{ opacity: 0, scale: 0.8 }}\n                  animate={{ opacity: 1, scale: 1 }}\n                  className=\"absolute inset-0 flex flex-col items-center justify-center gap-6\"\n                >\n                  <motion.div\n                    animate={{\n                      rotate: [0, 360],\n                      scale: [1, 1.2, 1]\n                    }}\n                    transition={{\n                      duration: 3,\n                      repeat: Infinity,\n                      ease: \"easeInOut\"\n                    }}\n                  >\n                    <BarChart3 className=\"w-24 h-24 text-purple-400/50\" />\n                  </motion.div>\n                  <div className=\"text-center space-y-2\">\n                    <p className=\"text-2xl font-bold text-purple-300\">No Array Generated</p>\n                    <p className=\"text-gray-400\">Click \"Generate New Array\" to begin</p>\n                  </div>\n                </motion.div>\n              ) : (\n                <div className=\"relative w-full h-full flex items-end justify-center gap-1 px-4\">\n                  {/* Comparison Indicators */}\n                  {currentStep < steps.length && steps[currentStep].comparingIndices.map((index) => (\n                    <motion.div\n                      key={`compare-${index}`}\n                      initial={{ opacity: 0, y: -20 }}\n                      animate={{ opacity: 1, y: 0 }}\n                      exit={{ opacity: 0 }}\n                      className=\"absolute pointer-events-none\"\n                      style={{\n                        left: `${(index / array.length) * 100}%`,\n                        top: '0',\n                        transform: 'translateX(-50%)'\n                      }}\n                    >\n                      <motion.div\n                        animate={{\n                          scale: [1, 1.3, 1],\n                          opacity: [0.5, 1, 0.5]\n                        }}\n                        transition={{\n                          duration: 0.8,\n                          repeat: Infinity\n                        }}\n                        className=\"w-8 h-8 rounded-full bg-cyan-400/30 border-2 border-cyan-400 shadow-[0_0_30px_rgba(0,255,255,0.8)]\"\n                      />\n                    </motion.div>\n                  ))}\n\n                  {/* Swap Trail Effects */}\n                  {currentStep < steps.length && steps[currentStep].swappingIndices.map((index) => (\n                    <motion.div\n                      key={`swap-trail-${index}`}\n                      initial={{ opacity: 0, scale: 0.5 }}\n                      animate={{ opacity: [0, 1, 0], scale: [0.5, 2, 3] }}\n                      transition={{ duration: 0.6 }}\n                      className=\"absolute pointer-events-none\"\n                      style={{\n                        left: `${(index / array.length) * 100}%`,\n                        top: '50%',\n                        transform: 'translate(-50%, -50%)'\n                      }}\n                    >\n                      <div className=\"w-32 h-32 rounded-full bg-gradient-radial from-pink-500/50 via-purple-500/30 to-transparent blur-xl\" />\n                    </motion.div>\n                  ))}\n\n                  {/* Animated Bars */}\n                  {(currentStep < steps.length ? steps[currentStep].array : array).map((element, index) => {\n                    const isComparing = currentStep < steps.length && steps[currentStep].comparingIndices.includes(index);\n                    const isSwapping = currentStep < steps.length && steps[currentStep].swappingIndices.includes(index);\n                    const isSorted = currentStep < steps.length && steps[currentStep].sortedIndices.includes(index);\n                    \n                    const maxValue = Math.max(...array.map(el => el.value));\n                    const heightPercentage = (element.value / maxValue) * 100;\n                    \n                    let barColor = NEON_COLORS[index % NEON_COLORS.length];\n                    let glowColor = barColor;\n                    let shadowIntensity = '0.5';\n                    \n                    if (isSorted) {\n                      barColor = '#00ff00';\n                      glowColor = '#00ff00';\n                      shadowIntensity = '0.8';\n                    } else if (isSwapping) {\n                      barColor = '#ff0066';\n                      glowColor = '#ff0066';\n                      shadowIntensity = '1';\n                    } else if (isComparing) {\n                      barColor = '#ffff00';\n                      glowColor = '#ffff00';\n                      shadowIntensity = '0.9';\n                    }\n\n                    return (\n                      <motion.div\n                        key={element.id}\n                        layout\n                        initial={{ height: 0, opacity: 0 }}\n                        animate={{\n                          height: `${heightPercentage}%`,\n                          opacity: 1,\n                          scale: isSwapping ? [1, 1.1, 1] : isComparing ? [1, 1.05, 1] : 1,\n                          y: isSwapping ? [0, -10, 0] : 0\n                        }}\n                        transition={{\n                          height: { duration: 0.5, ease: \"easeOut\" },\n                          opacity: { duration: 0.3 },\n                          scale: { duration: 0.3, repeat: isSwapping || isComparing ? Infinity : 0 },\n                          y: { duration: 0.4, repeat: isSwapping ? 2 : 0 },\n                          layout: { duration: 0.5, ease: \"easeInOut\" }\n                        }}\n                        className=\"relative flex-1 min-w-[4px] max-w-[60px] rounded-t-lg group cursor-pointer\"\n                        style={{\n                          backgroundColor: barColor,\n                          boxShadow: `\n                            0 0 20px ${glowColor}${Math.floor(parseFloat(shadowIntensity) * 255).toString(16).padStart(2, '0')},\n                            0 0 40px ${glowColor}${Math.floor(parseFloat(shadowIntensity) * 0.6 * 255).toString(16).padStart(2, '0')},\n                            0 0 60px ${glowColor}${Math.floor(parseFloat(shadowIntensity) * 0.4 * 255).toString(16).padStart(2, '0')},\n                            inset 0 0 20px ${glowColor}${Math.floor(parseFloat(shadowIntensity) * 0.3 * 255).toString(16).padStart(2, '0')}\n                          `,\n                          border: `2px solid ${barColor}`,\n                          filter: isSorted ? 'brightness(1.3)' : isSwapping ? 'brightness(1.5)' : isComparing ? 'brightness(1.2)' : 'brightness(1)'\n                        }}\n                      >\n                        {/* Value Label */}\n                        <motion.div\n                          initial={{ opacity: 0 }}\n                          animate={{ opacity: array.length <= 30 ? 1 : 0 }}\n                          className=\"absolute -top-8 left-1/2 transform -translate-x-1/2 opacity-0 group-hover:opacity-100 transition-opacity duration-200\"\n                        >\n                          <div \n                            className=\"px-2 py-1 rounded text-xs font-bold whitespace-nowrap shadow-lg\"\n                            style={{\n                              backgroundColor: `${barColor}33`,\n                              color: barColor,\n                              border: `1px solid ${barColor}`,\n                              boxShadow: `0 0 10px ${glowColor}80`\n                            }}\n                          >\n                            {element.value}\n                          </div>\n                        </motion.div>\n\n                        {/* Sorted Checkmark */}\n                        {isSorted && (\n                          <motion.div\n                            initial={{ scale: 0, rotate: -180 }}\n                            animate={{ scale: 1, rotate: 0 }}\n                            className=\"absolute -top-6 left-1/2 transform -translate-x-1/2\"\n                          >\n                            <div className=\"w-6 h-6 rounded-full bg-green-500 flex items-center justify-center shadow-[0_0_20px_rgba(0,255,0,0.8)]\">\n                              <svg className=\"w-4 h-4 text-white\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={3} d=\"M5 13l4 4L19 7\" />\n                              </svg>\n                            </div>\n                          </motion.div>\n                        )}\n\n                        {/* Swap Indicator */}\n                        {isSwapping && (\n                          <motion.div\n                            animate={{\n                              rotate: [0, 360],\n                              scale: [1, 1.2, 1]\n                            }}\n                            transition={{\n                              duration: 0.6,\n                              repeat: Infinity\n                            }}\n                            className=\"absolute -top-8 left-1/2 transform -translate-x-1/2\"\n                          >\n                            <RotateCcw className=\"w-5 h-5 text-pink-400\" style={{\n                              filter: 'drop-shadow(0 0 8px rgba(255, 0, 102, 0.8))'\n                            }} />\n                          </motion.div>\n                        )}\n\n                        {/* Comparison Indicator */}\n                        {isComparing && !isSwapping && (\n                          <motion.div\n                            animate={{\n                              y: [-5, 5, -5],\n                              opacity: [0.5, 1, 0.5]\n                            }}\n                            transition={{\n                              duration: 0.8,\n                              repeat: Infinity\n                            }}\n                            className=\"absolute -top-8 left-1/2 transform -translate-x-1/2\"\n                          >\n                            <div className=\"w-3 h-3 rounded-full bg-yellow-400 shadow-[0_0_15px_rgba(255,255,0,0.9)]\" />\n                          </motion.div>\n                        )}\n\n                        {/* Particle Effect for Sorted */}\n                        {isSorted && (\n                          <>\n                            {[...Array(3)].map((_, i) => (\n                              <motion.div\n                                key={`particle-${i}`}\n                                initial={{ opacity: 1, y: 0, x: 0 }}\n                                animate={{\n                                  opacity: [1, 0],\n                                  y: [-20, -60],\n                                  x: [(i - 1) * 10, (i - 1) * 20]\n                                }}\n                                transition={{\n                                  duration: 1,\n                                  delay: i * 0.1,\n                                  repeat: Infinity,\n                                  repeatDelay: 1\n                                }}\n                                className=\"absolute top-0 left-1/2 w-1 h-1 rounded-full bg-green-400\"\n                                style={{\n                                  boxShadow: '0 0 10px rgba(0, 255, 0, 0.8)'\n                                }}\n                              />\n                            ))}\n                          </>\n                        )}\n                      </motion.div>\n                    );\n                  })}\n                </div>\n              )}\n              \n              <div className=\"relative h-full flex items-end justify-center gap-1\">\n                \n              </div>\n            </div>\n\n            \n            <motion.div\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ delay: 0.3, duration: 0.6 }}\n              className=\"mt-6 bg-gray-900/50 backdrop-blur-lg border border-purple-500/30 rounded-xl p-4 shadow-lg shadow-purple-500/20\"\n            >\n              <div className=\"space-y-2\">\n                <div className=\"flex items-center justify-between text-sm\">\n                  <span className=\"text-purple-300 font-semibold\">Progress</span>\n                  <span className=\"text-cyan-300 font-mono\">\n                    {steps.length > 0 ? Math.round((currentStep / steps.length) * 100) : 0}%\n                  </span>\n                </div>\n                <div className=\"relative h-3 bg-gray-800/50 rounded-full overflow-hidden border border-gray-700/50\">\n                  <motion.div\n                    className=\"absolute inset-y-0 left-0 bg-gradient-to-r from-cyan-500 via-purple-500 to-pink-500 rounded-full\"\n                    initial={{ width: '0%' }}\n                    animate={{ \n                      width: steps.length > 0 ? `${(currentStep / steps.length) * 100}%` : '0%',\n                      boxShadow: [\n                        '0 0 10px rgba(0, 255, 255, 0.5)',\n                        '0 0 20px rgba(168, 85, 247, 0.7)',\n                        '0 0 10px rgba(0, 255, 255, 0.5)'\n                      ]\n                    }}\n                    transition={{ \n                      width: { duration: 0.3, ease: 'easeOut' },\n                      boxShadow: { duration: 2, repeat: Infinity }\n                    }}\n                  />\n                  <motion.div\n                    className=\"absolute inset-0 bg-gradient-to-r from-transparent via-white/30 to-transparent\"\n                    animate={{\n                      x: ['-100%', '200%']\n                    }}\n                    transition={{\n                      duration: 2,\n                      repeat: Infinity,\n                      ease: 'linear'\n                    }}\n                    style={{\n                      width: '50%'\n                    }}\n                  />\n                </div>\n                <div className=\"flex items-center justify-between text-xs text-gray-400\">\n                  <span>Step {currentStep} of {steps.length}</span>\n                  {currentStep >= steps.length && steps.length > 0 && (\n                    <motion.span\n                      initial={{ opacity: 0, scale: 0.8 }}\n                      animate={{ opacity: 1, scale: 1 }}\n                      className=\"text-green-400 font-semibold\"\n                    >\n                      \u2713 Complete\n                    </motion.span>\n                  )}\n                </div>\n              </div>\n            </motion.div>\n          </div>\n        </div>\n\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ delay: 0.6, duration: 0.8 }}\n          className=\"bg-gray-900/50 backdrop-blur-lg border border-cyan-500/30 rounded-xl p-6 shadow-[0_0_30px_rgba(0,255,255,0.2)]\"\n        >\n          <div className=\"flex items-center gap-2 mb-4\">\n            <BarChart3 className=\"w-5 h-5 text-cyan-400\" />\n            <h3 className=\"text-lg font-semibold text-cyan-300 uppercase tracking-wider\">\n              Legend\n            </h3>\n          </div>\n          \n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n            <motion.div\n              className=\"flex items-center gap-3 p-3 bg-gray-800/50 rounded-lg border border-gray-700/50 hover:border-cyan-500/50 transition-all duration-300\"\n              whileHover={{ scale: 1.05 }}\n            >\n              <motion.div\n                className=\"w-4 h-8 bg-gradient-to-t from-cyan-400 to-cyan-300 rounded\"\n                style={{\n                  boxShadow: '0 0 20px rgba(0, 255, 255, 0.6), 0 0 40px rgba(0, 255, 255, 0.3)'\n                }}\n                animate={{\n                  boxShadow: [\n                    '0 0 20px rgba(0, 255, 255, 0.6), 0 0 40px rgba(0, 255, 255, 0.3)',\n                    '0 0 30px rgba(0, 255, 255, 0.8), 0 0 60px rgba(0, 255, 255, 0.5)',\n                    '0 0 20px rgba(0, 255, 255, 0.6), 0 0 40px rgba(0, 255, 255, 0.3)'\n                  ]\n                }}\n                transition={{ duration: 2, repeat: Infinity }}\n              />\n              <div>\n                <div className=\"text-sm font-semibold text-white\">Default</div>\n                <div className=\"text-xs text-gray-400\">Unsorted</div>\n              </div>\n            </motion.div>\n\n            <motion.div\n              className=\"flex items-center gap-3 p-3 bg-gray-800/50 rounded-lg border border-gray-700/50 hover:border-yellow-500/50 transition-all duration-300\"\n              whileHover={{ scale: 1.05 }}\n            >\n              <motion.div\n                className=\"w-4 h-8 bg-gradient-to-t from-yellow-400 to-yellow-300 rounded\"\n                style={{\n                  boxShadow: '0 0 20px rgba(255, 255, 0, 0.6), 0 0 40px rgba(255, 255, 0, 0.3)'\n                }}\n                animate={{\n                  boxShadow: [\n                    '0 0 20px rgba(255, 255, 0, 0.6), 0 0 40px rgba(255, 255, 0, 0.3)',\n                    '0 0 30px rgba(255, 255, 0, 0.8), 0 0 60px rgba(255, 255, 0, 0.5)',\n                    '0 0 20px rgba(255, 255, 0, 0.6), 0 0 40px rgba(255, 255, 0, 0.3)'\n                  ]\n                }}\n                transition={{ duration: 1.5, repeat: Infinity }}\n              />\n              <div>\n                <div className=\"text-sm font-semibold text-white\">Comparing</div>\n                <div className=\"text-xs text-gray-400\">Active check</div>\n              </div>\n            </motion.div>\n\n            <motion.div\n              className=\"flex items-center gap-3 p-3 bg-gray-800/50 rounded-lg border border-gray-700/50 hover:border-pink-500/50 transition-all duration-300\"\n              whileHover={{ scale: 1.05 }}\n            >\n              <motion.div\n                className=\"w-4 h-8 bg-gradient-to-t from-pink-500 to-pink-400 rounded\"\n                style={{\n                  boxShadow: '0 0 20px rgba(255, 0, 102, 0.6), 0 0 40px rgba(255, 0, 102, 0.3)'\n                }}\n                animate={{\n                  boxShadow: [\n                    '0 0 20px rgba(255, 0, 102, 0.6), 0 0 40px rgba(255, 0, 102, 0.3)',\n                    '0 0 30px rgba(255, 0, 102, 0.8), 0 0 60px rgba(255, 0, 102, 0.5)',\n                    '0 0 20px rgba(255, 0, 102, 0.6), 0 0 40px rgba(255, 0, 102, 0.3)'\n                  ],\n                  scale: [1, 1.1, 1]\n                }}\n                transition={{ duration: 1, repeat: Infinity }}\n              />\n              <div>\n                <div className=\"text-sm font-semibold text-white\">Swapping</div>\n                <div className=\"text-xs text-gray-400\">Exchanging</div>\n              </div>\n            </motion.div>\n\n            <motion.div\n              className=\"flex items-center gap-3 p-3 bg-gray-800/50 rounded-lg border border-gray-700/50 hover:border-green-500/50 transition-all duration-300\"\n              whileHover={{ scale: 1.05 }}\n            >\n              <motion.div\n                className=\"w-4 h-8 bg-gradient-to-t from-green-400 to-green-300 rounded\"\n                style={{\n                  boxShadow: '0 0 20px rgba(0, 255, 0, 0.6), 0 0 40px rgba(0, 255, 0, 0.3)'\n                }}\n                animate={{\n                  boxShadow: [\n                    '0 0 20px rgba(0, 255, 0, 0.6), 0 0 40px rgba(0, 255, 0, 0.3)',\n                    '0 0 30px rgba(0, 255, 0, 0.8), 0 0 60px rgba(0, 255, 0, 0.5)',\n                    '0 0 20px rgba(0, 255, 0, 0.6), 0 0 40px rgba(0, 255, 0, 0.3)'\n                  ]\n                }}\n                transition={{ duration: 2, repeat: Infinity }}\n              />\n              <div>\n                <div className=\"text-sm font-semibold text-white\">Sorted</div>\n                <div className=\"text-xs text-gray-400\">Complete</div>\n              </div>\n            </motion.div>\n          </div>\n\n          <motion.div\n            className=\"mt-4 p-3 bg-gradient-to-r from-purple-900/30 to-pink-900/30 rounded-lg border border-purple-500/30\"\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            transition={{ delay: 0.8 }}\n          >\n            <div className=\"flex items-start gap-2\">\n              <Zap className=\"w-4 h-4 text-purple-400 mt-0.5 flex-shrink-0\" />\n              <p className=\"text-xs text-gray-300 leading-relaxed\">\n                Watch the bars light up as the algorithm compares and swaps elements. \n                <span className=\"text-yellow-400 font-semibold\"> Yellow</span> indicates comparison,\n                <span className=\"text-pink-400 font-semibold\"> pink</span> shows swapping in progress, and\n                <span className=\"text-green-400 font-semibold\"> green</span> marks sorted elements.\n              </p>\n            </div>\n          </motion.div>\n        </motion.div>\n      </div>\n    </div>\n  );\n}\n",
    "error": null,
    "elapsed_time": 94.38219833374023,
    "success": true
  }
}