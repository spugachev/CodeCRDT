{
  "prompt_id": "dashboard",
  "prompt_name": "Analytics Dashboard",
  "mode": "sequential",
  "run_number": 44,
  "timestamp": "2025-10-14T06:48:57.935291",
  "response_time": 69.32932877540588,
  "total_tokens": null,
  "response_content": "import { useState, useEffect } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Moon, Sun, TrendingUp, TrendingDown, Users, DollarSign, ShoppingCart, Activity } from 'lucide-react';\nimport { motion } from 'framer-motion';\n\ninterface MetricData {\n  label: string;\n  value: string;\n  change: number;\n  icon: any;\n}\n\ninterface ChartDataPoint {\n  label: string;\n  value: number;\n}\n\ninterface TableRow {\n  id: number;\n  product: string;\n  sales: number;\n  revenue: string;\n  status: 'success' | 'warning' | 'danger';\n}\n\nexport default function AnalyticsDashboard() {\n  const [isDarkMode, setIsDarkMode] = useState(true);\n  const [metrics, setMetrics] = useState<MetricData[]>([\n    { label: 'Total Revenue', value: '$45,231', change: 12.5, icon: DollarSign },\n    { label: 'Active Users', value: '2,345', change: 8.2, icon: Users },\n    { label: 'Total Orders', value: '1,234', change: -3.1, icon: ShoppingCart },\n    { label: 'Conversion Rate', value: '3.24%', change: 5.7, icon: Activity },\n  ]);\n\n  const [chartData, setChartData] = useState<ChartDataPoint[]>([\n    { label: 'Jan', value: 4000 },\n    { label: 'Feb', value: 3000 },\n    { label: 'Mar', value: 5000 },\n    { label: 'Apr', value: 4500 },\n    { label: 'May', value: 6000 },\n    { label: 'Jun', value: 5500 },\n    { label: 'Jul', value: 7000 },\n  ]);\n\n  const [pieData, setPieData] = useState<ChartDataPoint[]>([\n    { label: 'Desktop', value: 45 },\n    { label: 'Mobile', value: 35 },\n    { label: 'Tablet', value: 20 },\n  ]);\n\n  const [tableData, setTableData] = useState<TableRow[]>([\n    { id: 1, product: 'Premium Subscription', sales: 1234, revenue: '$12,340', status: 'success' },\n    { id: 2, product: 'Basic Plan', sales: 856, revenue: '$8,560', status: 'success' },\n    { id: 3, product: 'Enterprise License', sales: 432, revenue: '$43,200', status: 'warning' },\n    { id: 4, product: 'Add-on Features', sales: 289, revenue: '$2,890', status: 'success' },\n    { id: 5, product: 'Consulting Services', sales: 156, revenue: '$15,600', status: 'danger' },\n  ]);\n\n  useEffect(() => {\n    if (isDarkMode) {\n      document.documentElement.classList.add('dark');\n    } else {\n      document.documentElement.classList.remove('dark');\n    }\n  }, [isDarkMode]);\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setMetrics(prev => prev.map(metric => ({\n        ...metric,\n        value: metric.label === 'Total Revenue' \n          ? `$${(Math.random() * 10000 + 40000).toFixed(0)}`\n          : metric.label === 'Active Users'\n          ? `${(Math.random() * 500 + 2000).toFixed(0)}`\n          : metric.label === 'Total Orders'\n          ? `${(Math.random() * 300 + 1000).toFixed(0)}`\n          : `${(Math.random() * 2 + 2.5).toFixed(2)}%`,\n        change: (Math.random() * 20 - 5),\n      })));\n\n      setChartData(prev => prev.map(point => ({\n        ...point,\n        value: Math.floor(Math.random() * 3000 + 3000),\n      })));\n    }, 3000);\n\n    return () => clearInterval(interval);\n  }, []);\n\n  const maxChartValue = Math.max(...chartData.map(d => d.value));\n\n  const containerVariants = {\n    hidden: { opacity: 0 },\n    visible: {\n      opacity: 1,\n      transition: {\n        staggerChildren: 0.1,\n      },\n    },\n  };\n\n  const itemVariants = {\n    hidden: { y: 20, opacity: 0 },\n    visible: {\n      y: 0,\n      opacity: 1,\n    },\n  };\n\n  return (\n    <div className={`min-h-screen ${isDarkMode ? 'dark bg-gray-950' : 'bg-gray-50'} transition-colors duration-300`}>\n      <div className=\"container mx-auto p-4 md:p-6 lg:p-8\">\n        <motion.div\n          initial={{ opacity: 0, y: -20 }}\n          animate={{ opacity: 1, y: 0 }}\n          className=\"flex flex-col md:flex-row justify-between items-start md:items-center mb-8 gap-4\"\n        >\n          <div>\n            <h1 className=\"text-3xl md:text-4xl font-bold text-gray-900 dark:text-white\">Analytics Dashboard</h1>\n            <p className=\"text-gray-600 dark:text-gray-400 mt-2\">Real-time insights and performance metrics</p>\n          </div>\n          <Button\n            onClick={() => setIsDarkMode(!isDarkMode)}\n            variant=\"outline\"\n            size=\"icon\"\n            className=\"dark:border-gray-700\"\n          >\n            {isDarkMode ? <Sun className=\"h-5 w-5\" /> : <Moon className=\"h-5 w-5\" />}\n          </Button>\n        </motion.div>\n\n        <motion.div\n          variants={containerVariants}\n          initial=\"hidden\"\n          animate=\"visible\"\n          className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 md:gap-6 mb-8\"\n        >\n          {metrics.map((metric, index) => {\n            const Icon = metric.icon;\n            return (\n              <motion.div key={index} variants={itemVariants}>\n                <Card className=\"dark:bg-gray-900 dark:border-gray-800\">\n                  <CardHeader className=\"flex flex-row items-center justify-between pb-2\">\n                    <CardTitle className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">\n                      {metric.label}\n                    </CardTitle>\n                    <Icon className=\"h-4 w-4 text-gray-600 dark:text-gray-400\" />\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-2xl font-bold text-gray-900 dark:text-white\">{metric.value}</div>\n                    <div className=\"flex items-center mt-2\">\n                      {metric.change >= 0 ? (\n                        <TrendingUp className=\"h-4 w-4 text-green-500 mr-1\" />\n                      ) : (\n                        <TrendingDown className=\"h-4 w-4 text-red-500 mr-1\" />\n                      )}\n                      <span className={`text-sm ${metric.change >= 0 ? 'text-green-500' : 'text-red-500'}`}>\n                        {metric.change >= 0 ? '+' : ''}{metric.change.toFixed(1)}%\n                      </span>\n                      <span className=\"text-sm text-gray-600 dark:text-gray-400 ml-2\">vs last month</span>\n                    </div>\n                  </CardContent>\n                </Card>\n              </motion.div>\n            );\n          })}\n        </motion.div>\n\n        <Tabs defaultValue=\"overview\" className=\"space-y-6\">\n          <TabsList className=\"dark:bg-gray-900 dark:border-gray-800\">\n            <TabsTrigger value=\"overview\">Overview</TabsTrigger>\n            <TabsTrigger value=\"analytics\">Analytics</TabsTrigger>\n            <TabsTrigger value=\"reports\">Reports</TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"overview\" className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n              <Card className=\"lg:col-span-2 dark:bg-gray-900 dark:border-gray-800\">\n                <CardHeader>\n                  <CardTitle className=\"dark:text-white\">Revenue Trend</CardTitle>\n                  <CardDescription className=\"dark:text-gray-400\">Monthly revenue over time</CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"h-80 flex items-end justify-between gap-2 px-4\">\n                    {chartData.map((point, index) => (\n                      <motion.div\n                        key={index}\n                        className=\"flex-1 flex flex-col items-center gap-2\"\n                        initial={{ height: 0 }}\n                        animate={{ height: 'auto' }}\n                        transition={{ delay: index * 0.1 }}\n                      >\n                        <motion.div\n                          className=\"w-full bg-blue-500 dark:bg-blue-600 rounded-t-lg relative group cursor-pointer\"\n                          style={{ height: `${(point.value / maxChartValue) * 250}px` }}\n                          whileHover={{ scale: 1.05 }}\n                        >\n                          <div className=\"absolute -top-8 left-1/2 transform -translate-x-1/2 bg-gray-900 dark:bg-gray-700 text-white text-xs px-2 py-1 rounded opacity-0 group-hover:opacity-100 transition-opacity whitespace-nowrap\">\n                            ${point.value.toLocaleString()}\n                          </div>\n                        </motion.div>\n                        <span className=\"text-xs text-gray-600 dark:text-gray-400\">{point.label}</span>\n                      </motion.div>\n                    ))}\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card className=\"dark:bg-gray-900 dark:border-gray-800\">\n                <CardHeader>\n                  <CardTitle className=\"dark:text-white\">Traffic Sources</CardTitle>\n                  <CardDescription className=\"dark:text-gray-400\">User distribution by device</CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-4\">\n                    {pieData.map((item, index) => {\n                      const colors = ['bg-blue-500', 'bg-purple-500', 'bg-pink-500'];\n                      return (\n                        <div key={index} className=\"space-y-2\">\n                          <div className=\"flex justify-between text-sm\">\n                            <span className=\"text-gray-600 dark:text-gray-400\">{item.label}</span>\n                            <span className=\"font-semibold text-gray-900 dark:text-white\">{item.value}%</span>\n                          </div>\n                          <div className=\"w-full bg-gray-200 dark:bg-gray-800 rounded-full h-2 overflow-hidden\">\n                            <motion.div\n                              className={`h-full ${colors[index]}`}\n                              initial={{ width: 0 }}\n                              animate={{ width: `${item.value}%` }}\n                              transition={{ duration: 1, delay: index * 0.2 }}\n                            />\n                          </div>\n                        </div>\n                      );\n                    })}\n                  </div>\n                  <div className=\"mt-8 pt-6 border-t dark:border-gray-800\">\n                    <div className=\"flex justify-center\">\n                      <div className=\"relative w-48 h-48\">\n                        <svg className=\"transform -rotate-90 w-48 h-48\">\n                          {pieData.map((item, index) => {\n                            const colors = ['#3b82f6', '#a855f7', '#ec4899'];\n                            const total = pieData.reduce((sum, d) => sum + d.value, 0);\n                            const percentage = (item.value / total) * 100;\n                            const offset = pieData.slice(0, index).reduce((sum, d) => sum + d.value, 0) / total * 100;\n                            const circumference = 2 * Math.PI * 70;\n                            const strokeDasharray = `${(percentage / 100) * circumference} ${circumference}`;\n                            const strokeDashoffset = -((offset / 100) * circumference);\n                            \n                            return (\n                              <motion.circle\n                                key={index}\n                                cx=\"96\"\n                                cy=\"96\"\n                                r=\"70\"\n                                stroke={colors[index]}\n                                strokeWidth=\"20\"\n                                fill=\"transparent\"\n                                strokeDasharray={strokeDasharray}\n                                strokeDashoffset={strokeDashoffset}\n                                initial={{ strokeDasharray: `0 ${circumference}` }}\n                                animate={{ strokeDasharray }}\n                                transition={{ duration: 1, delay: index * 0.2 }}\n                              />\n                            );\n                          })}\n                        </svg>\n                      </div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n\n            <Card className=\"dark:bg-gray-900 dark:border-gray-800\">\n              <CardHeader>\n                <CardTitle className=\"dark:text-white\">Top Products</CardTitle>\n                <CardDescription className=\"dark:text-gray-400\">Best performing products this month</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"overflow-x-auto\">\n                  <table className=\"w-full\">\n                    <thead>\n                      <tr className=\"border-b dark:border-gray-800\">\n                        <th className=\"text-left py-3 px-4 text-sm font-medium text-gray-600 dark:text-gray-400\">Product</th>\n                        <th className=\"text-left py-3 px-4 text-sm font-medium text-gray-600 dark:text-gray-400\">Sales</th>\n                        <th className=\"text-left py-3 px-4 text-sm font-medium text-gray-600 dark:text-gray-400\">Revenue</th>\n                        <th className=\"text-left py-3 px-4 text-sm font-medium text-gray-600 dark:text-gray-400\">Status</th>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      {tableData.map((row, index) => (\n                        <motion.tr\n                          key={row.id}\n                          initial={{ opacity: 0, x: -20 }}\n                          animate={{ opacity: 1, x: 0 }}\n                          transition={{ delay: index * 0.1 }}\n                          className=\"border-b dark:border-gray-800 hover:bg-gray-50 dark:hover:bg-gray-800 transition-colors\"\n                        >\n                          <td className=\"py-3 px-4 text-sm text-gray-900 dark:text-white\">{row.product}</td>\n                          <td className=\"py-3 px-4 text-sm text-gray-600 dark:text-gray-400\">{row.sales.toLocaleString()}</td>\n                          <td className=\"py-3 px-4 text-sm font-semibold text-gray-900 dark:text-white\">{row.revenue}</td>\n                          <td className=\"py-3 px-4\">\n                            <span\n                              className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${\n                                row.status === 'success'\n                                  ? 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200'\n                                  : row.status === 'warning'\n                                  ? 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200'\n                                  : 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200'\n                              }`}\n                            >\n                              {row.status === 'success' ? 'Active' : row.status === 'warning' ? 'Pending' : 'Low Stock'}\n                            </span>\n                          </td>\n                        </motion.tr>\n                      ))}\n                    </tbody>\n                  </table>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"analytics\" className=\"space-y-6\">\n            <Card className=\"dark:bg-gray-900 dark:border-gray-800\">\n              <CardHeader>\n                <CardTitle className=\"dark:text-white\">Detailed Analytics</CardTitle>\n                <CardDescription className=\"dark:text-gray-400\">In-depth performance metrics and insights</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                  <div className=\"space-y-4\">\n                    <h3 className=\"font-semibold text-gray-900 dark:text-white\">User Engagement</h3>\n                    <div className=\"space-y-3\">\n                      <div>\n                        <div className=\"flex justify-between text-sm mb-1\">\n                          <span className=\"text-gray-600 dark:text-gray-400\">Page Views</span>\n                          <span className=\"font-semibold text-gray-900 dark:text-white\">87%</span>\n                        </div>\n                        <div className=\"w-full bg-gray-200 dark:bg-gray-800 rounded-full h-2\">\n                          <motion.div\n                            className=\"h-full bg-blue-500 rounded-full\"\n                            initial={{ width: 0 }}\n                            animate={{ width: '87%' }}\n                            transition={{ duration: 1 }}\n                          />\n                        </div>\n                      </div>\n                      <div>\n                        <div className=\"flex justify-between text-sm mb-1\">\n                          <span className=\"text-gray-600 dark:text-gray-400\">Session Duration</span>\n                          <span className=\"font-semibold text-gray-900 dark:text-white\">72%</span>\n                        </div>\n                        <div className=\"w-full bg-gray-200 dark:bg-gray-800 rounded-full h-2\">\n                          <motion.div\n                            className=\"h-full bg-purple-500 rounded-full\"\n                            initial={{ width: 0 }}\n                            animate={{ width: '72%' }}\n                            transition={{ duration: 1, delay: 0.2 }}\n                          />\n                        </div>\n                      </div>\n                      <div>\n                        <div className=\"flex justify-between text-sm mb-1\">\n                          <span className=\"text-gray-600 dark:text-gray-400\">Bounce Rate</span>\n                          <span className=\"font-semibold text-gray-900 dark:text-white\">34%</span>\n                        </div>\n                        <div className=\"w-full bg-gray-200 dark:bg-gray-800 rounded-full h-2\">\n                          <motion.div\n                            className=\"h-full bg-pink-500 rounded-full\"\n                            initial={{ width: 0 }}\n                            animate={{ width: '34%' }}\n                            transition={{ duration: 1, delay: 0.4 }}\n                          />\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                  <div className=\"space-y-4\">\n                    <h3 className=\"font-semibold text-gray-900 dark:text-white\">Conversion Metrics</h3>\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <div className=\"p-4 bg-gray-50 dark:bg-gray-800 rounded-lg\">\n                        <div className=\"text-2xl font-bold text-gray-900 dark:text-white\">3.24%</div>\n                        <div className=\"text-sm text-gray-600 dark:text-gray-400\">Conversion Rate</div>\n                      </div>\n                      <div className=\"p-4 bg-gray-50 dark:bg-gray-800 rounded-lg\">\n                        <div className=\"text-2xl font-bold text-gray-900 dark:text-white\">$127</div>\n                        <div className=\"text-sm text-gray-600 dark:text-gray-400\">Avg Order Value</div>\n                      </div>\n                      <div className=\"p-4 bg-gray-50 dark:bg-gray-800 rounded-lg\">\n                        <div className=\"text-2xl font-bold text-gray-900 dark:text-white\">2.4</div>\n                        <div className=\"text-sm text-gray-600 dark:text-gray-400\">Items per Order</div>\n                      </div>\n                      <div className=\"p-4 bg-gray-50 dark:bg-gray-800 rounded-lg\">\n                        <div className=\"text-2xl font-bold text-gray-900 dark:text-white\">89%</div>\n                        <div className=\"text-sm text-gray-600 dark:text-gray-400\">Customer Satisfaction</div>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"reports\" className=\"space-y-6\">\n            <Card className=\"dark:bg-gray-900 dark:border-gray-800\">\n              <CardHeader>\n                <CardTitle className=\"dark:text-white\">Generated Reports</CardTitle>\n                <CardDescription className=\"dark:text-gray-400\">Download and view your analytics reports</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  {['Monthly Performance Report', 'Quarterly Sales Analysis', 'Annual Revenue Summary', 'Customer Insights Report'].map((report, index) => (\n                    <motion.div\n                      key={index}\n                      initial={{ opacity: 0, y: 20 }}\n                      animate={{ opacity: 1, y: 0 }}\n                      transition={{ delay: index * 0.1 }}\n                      className=\"flex items-center justify-between p-4 bg-gray-50 dark:bg-gray-800 rounded-lg hover:bg-gray-100 dark:hover:bg-gray-700 transition-colors\"\n                    >\n                      <div>\n                        <h4 className=\"font-semibold text-gray-900 dark:text-white\">{report}</h4>\n                        <p className=\"text-sm text-gray-600 dark:text-gray-400\">Generated on {new Date().toLocaleDateString()}</p>\n                      </div>\n                      <Button variant=\"outline\" size=\"sm\" className=\"dark:border-gray-700\">\n                        Download\n                      </Button>\n                    </motion.div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n      </div>\n    </div>\n  );\n}",
  "error": null,
  "overall_score": 52,
  "code_quality_score": 16,
  "architecture_score": 12,
  "performance_score": 10,
  "accessibility_score": 14,
  "metadata": {
    "document_id": "eval_room_570291377976",
    "prompt_category": "intermediate",
    "prompt_complexity": 6.0
  },
  "raw_response": {
    "document_id": "eval_room_570291377976",
    "mode": "sequential",
    "prompt": "Generate an analytics dashboard page with charts, data tables, real-time updates, dark mode, and responsive design",
    "content": "import { useState, useEffect } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Moon, Sun, TrendingUp, TrendingDown, Users, DollarSign, ShoppingCart, Activity } from 'lucide-react';\nimport { motion } from 'framer-motion';\n\ninterface MetricData {\n  label: string;\n  value: string;\n  change: number;\n  icon: any;\n}\n\ninterface ChartDataPoint {\n  label: string;\n  value: number;\n}\n\ninterface TableRow {\n  id: number;\n  product: string;\n  sales: number;\n  revenue: string;\n  status: 'success' | 'warning' | 'danger';\n}\n\nexport default function AnalyticsDashboard() {\n  const [isDarkMode, setIsDarkMode] = useState(true);\n  const [metrics, setMetrics] = useState<MetricData[]>([\n    { label: 'Total Revenue', value: '$45,231', change: 12.5, icon: DollarSign },\n    { label: 'Active Users', value: '2,345', change: 8.2, icon: Users },\n    { label: 'Total Orders', value: '1,234', change: -3.1, icon: ShoppingCart },\n    { label: 'Conversion Rate', value: '3.24%', change: 5.7, icon: Activity },\n  ]);\n\n  const [chartData, setChartData] = useState<ChartDataPoint[]>([\n    { label: 'Jan', value: 4000 },\n    { label: 'Feb', value: 3000 },\n    { label: 'Mar', value: 5000 },\n    { label: 'Apr', value: 4500 },\n    { label: 'May', value: 6000 },\n    { label: 'Jun', value: 5500 },\n    { label: 'Jul', value: 7000 },\n  ]);\n\n  const [pieData, setPieData] = useState<ChartDataPoint[]>([\n    { label: 'Desktop', value: 45 },\n    { label: 'Mobile', value: 35 },\n    { label: 'Tablet', value: 20 },\n  ]);\n\n  const [tableData, setTableData] = useState<TableRow[]>([\n    { id: 1, product: 'Premium Subscription', sales: 1234, revenue: '$12,340', status: 'success' },\n    { id: 2, product: 'Basic Plan', sales: 856, revenue: '$8,560', status: 'success' },\n    { id: 3, product: 'Enterprise License', sales: 432, revenue: '$43,200', status: 'warning' },\n    { id: 4, product: 'Add-on Features', sales: 289, revenue: '$2,890', status: 'success' },\n    { id: 5, product: 'Consulting Services', sales: 156, revenue: '$15,600', status: 'danger' },\n  ]);\n\n  useEffect(() => {\n    if (isDarkMode) {\n      document.documentElement.classList.add('dark');\n    } else {\n      document.documentElement.classList.remove('dark');\n    }\n  }, [isDarkMode]);\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setMetrics(prev => prev.map(metric => ({\n        ...metric,\n        value: metric.label === 'Total Revenue' \n          ? `$${(Math.random() * 10000 + 40000).toFixed(0)}`\n          : metric.label === 'Active Users'\n          ? `${(Math.random() * 500 + 2000).toFixed(0)}`\n          : metric.label === 'Total Orders'\n          ? `${(Math.random() * 300 + 1000).toFixed(0)}`\n          : `${(Math.random() * 2 + 2.5).toFixed(2)}%`,\n        change: (Math.random() * 20 - 5),\n      })));\n\n      setChartData(prev => prev.map(point => ({\n        ...point,\n        value: Math.floor(Math.random() * 3000 + 3000),\n      })));\n    }, 3000);\n\n    return () => clearInterval(interval);\n  }, []);\n\n  const maxChartValue = Math.max(...chartData.map(d => d.value));\n\n  const containerVariants = {\n    hidden: { opacity: 0 },\n    visible: {\n      opacity: 1,\n      transition: {\n        staggerChildren: 0.1,\n      },\n    },\n  };\n\n  const itemVariants = {\n    hidden: { y: 20, opacity: 0 },\n    visible: {\n      y: 0,\n      opacity: 1,\n    },\n  };\n\n  return (\n    <div className={`min-h-screen ${isDarkMode ? 'dark bg-gray-950' : 'bg-gray-50'} transition-colors duration-300`}>\n      <div className=\"container mx-auto p-4 md:p-6 lg:p-8\">\n        <motion.div\n          initial={{ opacity: 0, y: -20 }}\n          animate={{ opacity: 1, y: 0 }}\n          className=\"flex flex-col md:flex-row justify-between items-start md:items-center mb-8 gap-4\"\n        >\n          <div>\n            <h1 className=\"text-3xl md:text-4xl font-bold text-gray-900 dark:text-white\">Analytics Dashboard</h1>\n            <p className=\"text-gray-600 dark:text-gray-400 mt-2\">Real-time insights and performance metrics</p>\n          </div>\n          <Button\n            onClick={() => setIsDarkMode(!isDarkMode)}\n            variant=\"outline\"\n            size=\"icon\"\n            className=\"dark:border-gray-700\"\n          >\n            {isDarkMode ? <Sun className=\"h-5 w-5\" /> : <Moon className=\"h-5 w-5\" />}\n          </Button>\n        </motion.div>\n\n        <motion.div\n          variants={containerVariants}\n          initial=\"hidden\"\n          animate=\"visible\"\n          className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 md:gap-6 mb-8\"\n        >\n          {metrics.map((metric, index) => {\n            const Icon = metric.icon;\n            return (\n              <motion.div key={index} variants={itemVariants}>\n                <Card className=\"dark:bg-gray-900 dark:border-gray-800\">\n                  <CardHeader className=\"flex flex-row items-center justify-between pb-2\">\n                    <CardTitle className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">\n                      {metric.label}\n                    </CardTitle>\n                    <Icon className=\"h-4 w-4 text-gray-600 dark:text-gray-400\" />\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-2xl font-bold text-gray-900 dark:text-white\">{metric.value}</div>\n                    <div className=\"flex items-center mt-2\">\n                      {metric.change >= 0 ? (\n                        <TrendingUp className=\"h-4 w-4 text-green-500 mr-1\" />\n                      ) : (\n                        <TrendingDown className=\"h-4 w-4 text-red-500 mr-1\" />\n                      )}\n                      <span className={`text-sm ${metric.change >= 0 ? 'text-green-500' : 'text-red-500'}`}>\n                        {metric.change >= 0 ? '+' : ''}{metric.change.toFixed(1)}%\n                      </span>\n                      <span className=\"text-sm text-gray-600 dark:text-gray-400 ml-2\">vs last month</span>\n                    </div>\n                  </CardContent>\n                </Card>\n              </motion.div>\n            );\n          })}\n        </motion.div>\n\n        <Tabs defaultValue=\"overview\" className=\"space-y-6\">\n          <TabsList className=\"dark:bg-gray-900 dark:border-gray-800\">\n            <TabsTrigger value=\"overview\">Overview</TabsTrigger>\n            <TabsTrigger value=\"analytics\">Analytics</TabsTrigger>\n            <TabsTrigger value=\"reports\">Reports</TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"overview\" className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n              <Card className=\"lg:col-span-2 dark:bg-gray-900 dark:border-gray-800\">\n                <CardHeader>\n                  <CardTitle className=\"dark:text-white\">Revenue Trend</CardTitle>\n                  <CardDescription className=\"dark:text-gray-400\">Monthly revenue over time</CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"h-80 flex items-end justify-between gap-2 px-4\">\n                    {chartData.map((point, index) => (\n                      <motion.div\n                        key={index}\n                        className=\"flex-1 flex flex-col items-center gap-2\"\n                        initial={{ height: 0 }}\n                        animate={{ height: 'auto' }}\n                        transition={{ delay: index * 0.1 }}\n                      >\n                        <motion.div\n                          className=\"w-full bg-blue-500 dark:bg-blue-600 rounded-t-lg relative group cursor-pointer\"\n                          style={{ height: `${(point.value / maxChartValue) * 250}px` }}\n                          whileHover={{ scale: 1.05 }}\n                        >\n                          <div className=\"absolute -top-8 left-1/2 transform -translate-x-1/2 bg-gray-900 dark:bg-gray-700 text-white text-xs px-2 py-1 rounded opacity-0 group-hover:opacity-100 transition-opacity whitespace-nowrap\">\n                            ${point.value.toLocaleString()}\n                          </div>\n                        </motion.div>\n                        <span className=\"text-xs text-gray-600 dark:text-gray-400\">{point.label}</span>\n                      </motion.div>\n                    ))}\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card className=\"dark:bg-gray-900 dark:border-gray-800\">\n                <CardHeader>\n                  <CardTitle className=\"dark:text-white\">Traffic Sources</CardTitle>\n                  <CardDescription className=\"dark:text-gray-400\">User distribution by device</CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-4\">\n                    {pieData.map((item, index) => {\n                      const colors = ['bg-blue-500', 'bg-purple-500', 'bg-pink-500'];\n                      return (\n                        <div key={index} className=\"space-y-2\">\n                          <div className=\"flex justify-between text-sm\">\n                            <span className=\"text-gray-600 dark:text-gray-400\">{item.label}</span>\n                            <span className=\"font-semibold text-gray-900 dark:text-white\">{item.value}%</span>\n                          </div>\n                          <div className=\"w-full bg-gray-200 dark:bg-gray-800 rounded-full h-2 overflow-hidden\">\n                            <motion.div\n                              className={`h-full ${colors[index]}`}\n                              initial={{ width: 0 }}\n                              animate={{ width: `${item.value}%` }}\n                              transition={{ duration: 1, delay: index * 0.2 }}\n                            />\n                          </div>\n                        </div>\n                      );\n                    })}\n                  </div>\n                  <div className=\"mt-8 pt-6 border-t dark:border-gray-800\">\n                    <div className=\"flex justify-center\">\n                      <div className=\"relative w-48 h-48\">\n                        <svg className=\"transform -rotate-90 w-48 h-48\">\n                          {pieData.map((item, index) => {\n                            const colors = ['#3b82f6', '#a855f7', '#ec4899'];\n                            const total = pieData.reduce((sum, d) => sum + d.value, 0);\n                            const percentage = (item.value / total) * 100;\n                            const offset = pieData.slice(0, index).reduce((sum, d) => sum + d.value, 0) / total * 100;\n                            const circumference = 2 * Math.PI * 70;\n                            const strokeDasharray = `${(percentage / 100) * circumference} ${circumference}`;\n                            const strokeDashoffset = -((offset / 100) * circumference);\n                            \n                            return (\n                              <motion.circle\n                                key={index}\n                                cx=\"96\"\n                                cy=\"96\"\n                                r=\"70\"\n                                stroke={colors[index]}\n                                strokeWidth=\"20\"\n                                fill=\"transparent\"\n                                strokeDasharray={strokeDasharray}\n                                strokeDashoffset={strokeDashoffset}\n                                initial={{ strokeDasharray: `0 ${circumference}` }}\n                                animate={{ strokeDasharray }}\n                                transition={{ duration: 1, delay: index * 0.2 }}\n                              />\n                            );\n                          })}\n                        </svg>\n                      </div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n\n            <Card className=\"dark:bg-gray-900 dark:border-gray-800\">\n              <CardHeader>\n                <CardTitle className=\"dark:text-white\">Top Products</CardTitle>\n                <CardDescription className=\"dark:text-gray-400\">Best performing products this month</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"overflow-x-auto\">\n                  <table className=\"w-full\">\n                    <thead>\n                      <tr className=\"border-b dark:border-gray-800\">\n                        <th className=\"text-left py-3 px-4 text-sm font-medium text-gray-600 dark:text-gray-400\">Product</th>\n                        <th className=\"text-left py-3 px-4 text-sm font-medium text-gray-600 dark:text-gray-400\">Sales</th>\n                        <th className=\"text-left py-3 px-4 text-sm font-medium text-gray-600 dark:text-gray-400\">Revenue</th>\n                        <th className=\"text-left py-3 px-4 text-sm font-medium text-gray-600 dark:text-gray-400\">Status</th>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      {tableData.map((row, index) => (\n                        <motion.tr\n                          key={row.id}\n                          initial={{ opacity: 0, x: -20 }}\n                          animate={{ opacity: 1, x: 0 }}\n                          transition={{ delay: index * 0.1 }}\n                          className=\"border-b dark:border-gray-800 hover:bg-gray-50 dark:hover:bg-gray-800 transition-colors\"\n                        >\n                          <td className=\"py-3 px-4 text-sm text-gray-900 dark:text-white\">{row.product}</td>\n                          <td className=\"py-3 px-4 text-sm text-gray-600 dark:text-gray-400\">{row.sales.toLocaleString()}</td>\n                          <td className=\"py-3 px-4 text-sm font-semibold text-gray-900 dark:text-white\">{row.revenue}</td>\n                          <td className=\"py-3 px-4\">\n                            <span\n                              className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${\n                                row.status === 'success'\n                                  ? 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200'\n                                  : row.status === 'warning'\n                                  ? 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200'\n                                  : 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200'\n                              }`}\n                            >\n                              {row.status === 'success' ? 'Active' : row.status === 'warning' ? 'Pending' : 'Low Stock'}\n                            </span>\n                          </td>\n                        </motion.tr>\n                      ))}\n                    </tbody>\n                  </table>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"analytics\" className=\"space-y-6\">\n            <Card className=\"dark:bg-gray-900 dark:border-gray-800\">\n              <CardHeader>\n                <CardTitle className=\"dark:text-white\">Detailed Analytics</CardTitle>\n                <CardDescription className=\"dark:text-gray-400\">In-depth performance metrics and insights</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                  <div className=\"space-y-4\">\n                    <h3 className=\"font-semibold text-gray-900 dark:text-white\">User Engagement</h3>\n                    <div className=\"space-y-3\">\n                      <div>\n                        <div className=\"flex justify-between text-sm mb-1\">\n                          <span className=\"text-gray-600 dark:text-gray-400\">Page Views</span>\n                          <span className=\"font-semibold text-gray-900 dark:text-white\">87%</span>\n                        </div>\n                        <div className=\"w-full bg-gray-200 dark:bg-gray-800 rounded-full h-2\">\n                          <motion.div\n                            className=\"h-full bg-blue-500 rounded-full\"\n                            initial={{ width: 0 }}\n                            animate={{ width: '87%' }}\n                            transition={{ duration: 1 }}\n                          />\n                        </div>\n                      </div>\n                      <div>\n                        <div className=\"flex justify-between text-sm mb-1\">\n                          <span className=\"text-gray-600 dark:text-gray-400\">Session Duration</span>\n                          <span className=\"font-semibold text-gray-900 dark:text-white\">72%</span>\n                        </div>\n                        <div className=\"w-full bg-gray-200 dark:bg-gray-800 rounded-full h-2\">\n                          <motion.div\n                            className=\"h-full bg-purple-500 rounded-full\"\n                            initial={{ width: 0 }}\n                            animate={{ width: '72%' }}\n                            transition={{ duration: 1, delay: 0.2 }}\n                          />\n                        </div>\n                      </div>\n                      <div>\n                        <div className=\"flex justify-between text-sm mb-1\">\n                          <span className=\"text-gray-600 dark:text-gray-400\">Bounce Rate</span>\n                          <span className=\"font-semibold text-gray-900 dark:text-white\">34%</span>\n                        </div>\n                        <div className=\"w-full bg-gray-200 dark:bg-gray-800 rounded-full h-2\">\n                          <motion.div\n                            className=\"h-full bg-pink-500 rounded-full\"\n                            initial={{ width: 0 }}\n                            animate={{ width: '34%' }}\n                            transition={{ duration: 1, delay: 0.4 }}\n                          />\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                  <div className=\"space-y-4\">\n                    <h3 className=\"font-semibold text-gray-900 dark:text-white\">Conversion Metrics</h3>\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <div className=\"p-4 bg-gray-50 dark:bg-gray-800 rounded-lg\">\n                        <div className=\"text-2xl font-bold text-gray-900 dark:text-white\">3.24%</div>\n                        <div className=\"text-sm text-gray-600 dark:text-gray-400\">Conversion Rate</div>\n                      </div>\n                      <div className=\"p-4 bg-gray-50 dark:bg-gray-800 rounded-lg\">\n                        <div className=\"text-2xl font-bold text-gray-900 dark:text-white\">$127</div>\n                        <div className=\"text-sm text-gray-600 dark:text-gray-400\">Avg Order Value</div>\n                      </div>\n                      <div className=\"p-4 bg-gray-50 dark:bg-gray-800 rounded-lg\">\n                        <div className=\"text-2xl font-bold text-gray-900 dark:text-white\">2.4</div>\n                        <div className=\"text-sm text-gray-600 dark:text-gray-400\">Items per Order</div>\n                      </div>\n                      <div className=\"p-4 bg-gray-50 dark:bg-gray-800 rounded-lg\">\n                        <div className=\"text-2xl font-bold text-gray-900 dark:text-white\">89%</div>\n                        <div className=\"text-sm text-gray-600 dark:text-gray-400\">Customer Satisfaction</div>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"reports\" className=\"space-y-6\">\n            <Card className=\"dark:bg-gray-900 dark:border-gray-800\">\n              <CardHeader>\n                <CardTitle className=\"dark:text-white\">Generated Reports</CardTitle>\n                <CardDescription className=\"dark:text-gray-400\">Download and view your analytics reports</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  {['Monthly Performance Report', 'Quarterly Sales Analysis', 'Annual Revenue Summary', 'Customer Insights Report'].map((report, index) => (\n                    <motion.div\n                      key={index}\n                      initial={{ opacity: 0, y: 20 }}\n                      animate={{ opacity: 1, y: 0 }}\n                      transition={{ delay: index * 0.1 }}\n                      className=\"flex items-center justify-between p-4 bg-gray-50 dark:bg-gray-800 rounded-lg hover:bg-gray-100 dark:hover:bg-gray-700 transition-colors\"\n                    >\n                      <div>\n                        <h4 className=\"font-semibold text-gray-900 dark:text-white\">{report}</h4>\n                        <p className=\"text-sm text-gray-600 dark:text-gray-400\">Generated on {new Date().toLocaleDateString()}</p>\n                      </div>\n                      <Button variant=\"outline\" size=\"sm\" className=\"dark:border-gray-700\">\n                        Download\n                      </Button>\n                    </motion.div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n      </div>\n    </div>\n  );\n}",
    "error": null,
    "elapsed_time": 69.32932877540588,
    "success": true
  }
}