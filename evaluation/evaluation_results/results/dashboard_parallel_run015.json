{
  "prompt_id": "dashboard",
  "prompt_name": "Analytics Dashboard",
  "mode": "parallel",
  "run_number": 15,
  "timestamp": "2025-10-14T06:12:17.213987",
  "response_time": 99.37453818321228,
  "total_tokens": null,
  "response_content": "import { useState, useCallback } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\nimport { Badge } from '@/components/ui/badge';\nimport { Button } from '@/components/ui/button';\nimport { Moon, Sun, RefreshCw } from 'lucide-react';\nimport { ArrowUpDown, ChevronLeft, ChevronRight } from 'lucide-react';\nimport { AlertCircle, AlertTriangle, Info, CheckCircle } from 'lucide-react';\nimport { Progress } from '@/components/ui/progress';\nimport { TrendingUp, TrendingDown, ShoppingCart, UserPlus, DollarSign, Package } from 'lucide-react';\n\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, Legend } from 'recharts';\nimport { PieChart, Pie, Cell, ResponsiveContainer, Legend, Tooltip } from 'recharts';\nimport { motion } from 'framer-motion';\nimport { AreaChart, Area, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';\nimport { TrendingUp, TrendingDown, DollarSign, Users, ShoppingCart, Target } from 'lucide-react';\nimport { TrendingUp, TrendingDown, DollarSign, Users, ShoppingCart, Target } from 'lucide-react';\n\ninterface MetricData {\n  id: string;\n  label: string;\n  value: number;\n  change: number;\n  trend: 'up' | 'down';\n}\n\ninterface ChartDataPoint {\n  date: string;\n  revenue: number;\n  users: number;\n  orders: number;\n}\n\ninterface TableRow {\n  id: string;\n  product: string;\n  sales: number;\n  revenue: number;\n  status: 'active' | 'pending' | 'inactive';\n}\ninterface Alert {\n  id: string;\n  message: string;\n  severity: 'info' | 'warning' | 'error' | 'success';\n  timestamp: string;\n}\n\nconst mockMetrics: MetricData[] = [\n  { id: '1', label: 'Total Revenue', value: 45231, change: 12.5, trend: 'up' },\n  { id: '2', label: 'Active Users', value: 2350, change: 8.2, trend: 'up' },\n  { id: '3', label: 'Total Orders', value: 1543, change: -3.1, trend: 'down' },\n  { id: '4', label: 'Conversion Rate', value: 3.24, change: 5.7, trend: 'up' }\n];\n\nconst mockChartData: ChartDataPoint[] = [\n  { date: '2024-01-01', revenue: 12000, users: 450, orders: 230 },\n  { date: '2024-01-02', revenue: 15000, users: 520, orders: 280 },\n  { date: '2024-01-03', revenue: 13500, users: 490, orders: 250 },\n  { date: '2024-01-04', revenue: 18000, users: 610, orders: 320 },\n  { date: '2024-01-05', revenue: 16500, users: 580, orders: 295 },\n  { date: '2024-01-06', revenue: 20000, users: 680, orders: 350 },\n  { date: '2024-01-07', revenue: 22000, users: 720, orders: 380 }\n];\n\nconst mockTableData: TableRow[] = [\n  { id: '1', product: 'Premium Plan', sales: 234, revenue: 23400, status: 'active' },\n  { id: '2', product: 'Basic Plan', sales: 567, revenue: 11340, status: 'active' },\n  { id: '3', product: 'Enterprise Plan', sales: 89, revenue: 44500, status: 'active' },\n  { id: '4', product: 'Starter Plan', sales: 432, revenue: 4320, status: 'pending' },\n  { id: '5', product: 'Pro Plan', sales: 156, revenue: 15600, status: 'inactive' }\n];\nconst mockAlerts: Alert[] = [\n  { id: '1', message: 'System backup completed successfully', severity: 'success', timestamp: '2 min ago' },\n  { id: '2', message: 'High CPU usage detected on server 3', severity: 'warning', timestamp: '15 min ago' },\n  { id: '3', message: 'Failed login attempt from unknown IP', severity: 'error', timestamp: '1 hour ago' },\n  { id: '4', message: 'New user registration milestone reached', severity: 'info', timestamp: '2 hours ago' },\n  { id: '5', message: 'Database connection timeout', severity: 'error', timestamp: '3 hours ago' }\n];\n\nconst mockQuickStats = [\n  { id: '1', label: 'Goal Completion', value: 78, target: 100, icon: Target, color: 'text-blue-500' },\n  { id: '2', label: 'Customer Satisfaction', value: 92, target: 100, icon: Users, color: 'text-green-500' },\n  { id: '3', label: 'Sales Target', value: 65, target: 100, icon: DollarSign, color: 'text-purple-500' },\n  { id: '4', label: 'Order Fulfillment', value: 88, target: 100, icon: ShoppingCart, color: 'text-orange-500' }\n];\ninterface ActivityItem {\n  id: string;\n  type: 'sale' | 'user' | 'revenue' | 'order';\n  message: string;\n  timestamp: string;\n  icon: 'cart' | 'user' | 'dollar' | 'package';\n}\n\nconst mockActivityData: ActivityItem[] = [\n  { id: '1', type: 'sale', message: 'New sale: Premium Plan', timestamp: '2 minutes ago', icon: 'cart' },\n  { id: '2', type: 'user', message: 'New user registered', timestamp: '5 minutes ago', icon: 'user' },\n  { id: '3', type: 'revenue', message: 'Revenue milestone reached', timestamp: '12 minutes ago', icon: 'dollar' },\n  { id: '4', type: 'order', message: 'Order #1234 completed', timestamp: '18 minutes ago', icon: 'package' },\n  { id: '5', type: 'sale', message: 'New sale: Enterprise Plan', timestamp: '25 minutes ago', icon: 'cart' },\n  { id: '6', type: 'user', message: '5 new users registered', timestamp: '32 minutes ago', icon: 'user' },\n  { id: '7', type: 'order', message: 'Order #1233 completed', timestamp: '45 minutes ago', icon: 'package' },\n  { id: '8', type: 'revenue', message: 'Daily revenue updated', timestamp: '1 hour ago', icon: 'dollar' }\n];\nconst mockPieData = [\n  { name: 'Premium Plan', value: 23400, color: '#3b82f6' },\n  { name: 'Basic Plan', value: 11340, color: '#10b981' },\n  { name: 'Enterprise Plan', value: 44500, color: '#8b5cf6' },\n  { name: 'Starter Plan', value: 4320, color: '#f59e0b' },\n  { name: 'Pro Plan', value: 15600, color: '#ef4444' }\n];\n\ninterface CustomTooltipProps {\n  active?: boolean;\n  payload?: Array<{\n    value: number;\n    dataKey: string;\n    color: string;\n  }>;\n  label?: string;\n}\n\nconst CustomTooltip = ({ active, payload, label }: CustomTooltipProps) => {\n  if (active && payload && payload.length) {\n    return (\n      <div className=\"bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-lg shadow-lg p-3\">\n        <p className=\"text-sm font-medium text-gray-900 dark:text-white mb-2\">\n          {label}\n        </p>\n        {payload.map((entry, index) => (\n          <p key={index} className=\"text-sm text-gray-600 dark:text-gray-300\">\n            <span className=\"font-medium\" style={{ color: entry.color }}>\n              {entry.dataKey.charAt(0).toUpperCase() + entry.dataKey.slice(1)}:\n            </span>{' '}\n            ${entry.value.toLocaleString()}\n          </p>\n        ))}\n      </div>\n    );\n  }\n  return null;\n};\n\nconst UserChartComponent = ({ data, isDarkMode }: { data: ChartDataPoint[], isDarkMode: boolean }) => {\n  const CustomTooltip = ({ active, payload }: any) => {\n    if (active && payload && payload.length) {\n      return (\n        <div className={`p-3 rounded-lg shadow-lg ${isDarkMode ? 'bg-gray-800 border border-gray-700' : 'bg-white border border-gray-200'}`}>\n          <p className={`text-sm font-medium ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n            {new Date(payload[0].payload.date).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n          </p>\n          <p className={`text-sm ${isDarkMode ? 'text-blue-400' : 'text-blue-600'}`}>\n            Users: {payload[0].value.toLocaleString()}\n          </p>\n        </div>\n      );\n    }\n    return null;\n  };\n\n  return (\n    <motion.div\n      initial={{ opacity: 0, y: 20 }}\n      animate={{ opacity: 1, y: 0 }}\n      transition={{ duration: 0.5, delay: 0.2 }}\n      className=\"w-full h-[300px]\"\n    >\n      <ResponsiveContainer width=\"100%\" height=\"100%\">\n        <AreaChart data={data} margin={{ top: 10, right: 10, left: 0, bottom: 0 }}>\n          <defs>\n            <linearGradient id=\"userGradient\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n              <stop offset=\"5%\" stopColor=\"#3b82f6\" stopOpacity={0.8}/>\n              <stop offset=\"95%\" stopColor=\"#3b82f6\" stopOpacity={0.1}/>\n            </linearGradient>\n          </defs>\n          <CartesianGrid \n            strokeDasharray=\"3 3\" \n            stroke={isDarkMode ? '#374151' : '#e5e7eb'}\n            vertical={false}\n          />\n          <XAxis \n            dataKey=\"date\" \n            tickFormatter={(value) => new Date(value).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n            stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n            style={{ fontSize: '12px' }}\n            tickLine={false}\n          />\n          <YAxis \n            stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n            style={{ fontSize: '12px' }}\n            tickLine={false}\n            axisLine={false}\n          />\n          <Tooltip content={<CustomTooltip />} />\n          <Area \n            type=\"monotone\" \n            dataKey=\"users\" \n            stroke=\"#3b82f6\" \n            strokeWidth={2}\n            fill=\"url(#userGradient)\"\n            animationDuration={1000}\n            animationEasing=\"ease-in-out\"\n          />\n        </AreaChart>\n      </ResponsiveContainer>\n    </motion.div>\n  );\n};\n\nconst getStatusBadgeVariant = (status: TableRow['status']) => {\n  switch (status) {\n    case 'active':\n      return 'default';\n    case 'pending':\n      return 'secondary';\n    case 'inactive':\n      return 'outline';\n    default:\n      return 'default';\n  }\n};\n\nconst getStatusColor = (status: TableRow['status'], isDark: boolean) => {\n  switch (status) {\n    case 'active':\n      return isDark ? 'bg-green-900 text-green-300' : 'bg-green-100 text-green-800';\n    case 'pending':\n      return isDark ? 'bg-yellow-900 text-yellow-300' : 'bg-yellow-100 text-yellow-800';\n    case 'inactive':\n      return isDark ? 'bg-gray-700 text-gray-300' : 'bg-gray-100 text-gray-800';\n    default:\n      return '';\n  }\n};\n\nexport default function AnalyticsDashboard() {\n  const [isDarkMode, setIsDarkMode] = useState(false);\n  const [metrics, setMetrics] = useState<MetricData[]>(mockMetrics);\n  const [chartData, setChartData] = useState<ChartDataPoint[]>(mockChartData);\n  const [tableData, setTableData] = useState<TableRow[]>(mockTableData);\n  const [isRefreshing, setIsRefreshing] = useState(false);\n  const [sortColumn, setSortColumn] = useState<keyof TableRow>('revenue');\n  const [sortDirection, setSortDirection] = useState<'asc' | 'desc'>('desc');\n  const [currentPage, setCurrentPage] = useState(1);\n  const itemsPerPage = 3;\n\n  const handleSort = useCallback((column: keyof TableRow) => {\n    if (sortColumn === column) {\n      setSortDirection(prev => prev === 'asc' ? 'desc' : 'asc');\n    } else {\n      setSortColumn(column);\n      setSortDirection('desc');\n    }\n    setCurrentPage(1);\n  }, [sortColumn]);\n\n  const sortedData = useCallback(() => {\n    const sorted = [...tableData].sort((a, b) => {\n      const aValue = a[sortColumn];\n      const bValue = b[sortColumn];\n      \n      if (typeof aValue === 'number' && typeof bValue === 'number') {\n        return sortDirection === 'asc' ? aValue - bValue : bValue - aValue;\n      }\n      \n      if (typeof aValue === 'string' && typeof bValue === 'string') {\n        return sortDirection === 'asc' \n          ? aValue.localeCompare(bValue)\n          : bValue.localeCompare(aValue);\n      }\n      \n      return 0;\n    });\n    \n    return sorted;\n  }, [tableData, sortColumn, sortDirection]);\n\n  const paginatedData = useCallback(() => {\n    const sorted = sortedData();\n    const startIndex = (currentPage - 1) * itemsPerPage;\n    const endIndex = startIndex + itemsPerPage;\n    return sorted.slice(startIndex, endIndex);\n  }, [sortedData, currentPage]);\n\n  const totalPages = Math.ceil(tableData.length / itemsPerPage);\n\n  const handlePreviousPage = useCallback(() => {\n    setCurrentPage(prev => Math.max(1, prev - 1));\n  }, []);\n\n  const handleNextPage = useCallback(() => {\n    setCurrentPage(prev => Math.min(totalPages, prev + 1));\n  }, [totalPages]);\n</parameter>\n</invoke>\n\n  const toggleDarkMode = useCallback(() => {\n    setIsDarkMode(prev => !prev);\n  }, []);\n\n  const handleRefresh = useCallback(() => {\n    setIsRefreshing(true);\n\n    \n    setTimeout(() => {\n      // Generate updated mock metrics with random variations\n      const updatedMetrics = mockMetrics.map(metric => ({\n        ...metric,\n        value: metric.value + Math.floor(Math.random() * 200 - 100),\n        change: parseFloat((Math.random() * 20 - 5).toFixed(1)),\n        trend: Math.random() > 0.5 ? 'up' as const : 'down' as const\n      }));\n      \n      // Generate updated chart data with random variations\n      const updatedChartData = mockChartData.map(point => ({\n        ...point,\n        revenue: point.revenue + Math.floor(Math.random() * 4000 - 2000),\n        users: point.users + Math.floor(Math.random() * 100 - 50),\n        orders: point.orders + Math.floor(Math.random() * 50 - 25)\n      }));\n      \n      // Generate updated table data with random variations\n      const updatedTableData = mockTableData.map(row => ({\n        ...row,\n        sales: row.sales + Math.floor(Math.random() * 40 - 20),\n        revenue: row.revenue + Math.floor(Math.random() * 2000 - 1000)\n      }));\n      \n      setMetrics(updatedMetrics);\n      setChartData(updatedChartData);\n      setTableData(updatedTableData);\n      setIsRefreshing(false);\n    }, 1500);\n  }, []);\n\n  return (\n    <div className={`min-h-screen ${isDarkMode ? 'dark bg-gray-900' : 'bg-gray-50'}`}>\n      <div className=\"container mx-auto p-4 md:p-6 lg:p-8\">\n        <div className=\"flex flex-col md:flex-row justify-between items-start md:items-center gap-4 mb-8\">\n          <div>\n            <h1 className={`text-3xl md:text-4xl font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n              Analytics Dashboard\n            </h1>\n            <p className={`mt-2 ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n              Real-time insights and performance metrics\n            </p>\n          </div>\n          \n          <div className=\"flex gap-2\">\n            <Button\n              variant=\"outline\"\n              size=\"icon\"\n              onClick={toggleDarkMode}\n              className={isDarkMode ? 'border-gray-700' : ''}\n            >\n              {isDarkMode ? <Sun className=\"h-5 w-5\" /> : <Moon className=\"h-5 w-5\" />}\n            </Button>\n            \n            <Button\n              variant=\"outline\"\n              onClick={handleRefresh}\n              disabled={isRefreshing}\n              className={isDarkMode ? 'border-gray-700' : ''}\n            >\n              <RefreshCw className={`h-4 w-4 mr-2 ${isRefreshing ? 'animate-spin' : ''}`} />\n              Refresh\n            </Button>\n          </div>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 md:gap-6 mb-8\">\n          {metrics.map((metric, index) => {\n            const Icon = metric.id === '1' ? DollarSign : \n                        metric.id === '2' ? Users : \n                        metric.id === '3' ? ShoppingCart : Target;\n            \n            return (\n              <Card \n                key={metric.id} \n                className={`transition-all duration-300 hover:shadow-lg hover:-translate-y-1 ${\n                  isDarkMode ? 'bg-gray-800 border-gray-700' : 'bg-white'\n                }`}\n                style={{\n                  animation: `fadeInUp 0.5s ease-out ${index * 0.1}s both`\n                }}\n              >\n                <CardHeader className=\"flex flex-row items-center justify-between pb-2\">\n                  <CardTitle className={`text-sm font-medium ${\n                    isDarkMode ? 'text-gray-400' : 'text-gray-600'\n                  }`}>\n                    {metric.label}\n                  </CardTitle>\n                  <div className={`p-2 rounded-lg ${\n                    isDarkMode ? 'bg-gray-700' : 'bg-gray-100'\n                  }`}>\n                    <Icon className={`h-4 w-4 ${\n                      isDarkMode ? 'text-gray-300' : 'text-gray-600'\n                    }`} />\n                  </div>\n                </CardHeader>\n                <CardContent>\n                  <div className={`text-2xl font-bold ${\n                    isDarkMode ? 'text-white' : 'text-gray-900'\n                  }`}>\n                    {metric.id === '1' || metric.id === '4' \n                      ? metric.id === '1' \n                        ? `$${metric.value.toLocaleString()}` \n                        : `${metric.value}%`\n                      : metric.value.toLocaleString()\n                    }\n                  </div>\n                  <div className=\"flex items-center mt-2\">\n                    {metric.trend === 'up' ? (\n                      <TrendingUp className=\"h-4 w-4 text-green-500 mr-1\" />\n                    ) : (\n                      <TrendingDown className=\"h-4 w-4 text-red-500 mr-1\" />\n                    )}\n                    <span className={`text-sm font-medium ${\n                      metric.trend === 'up' ? 'text-green-500' : 'text-red-500'\n                    }`}>\n                      {metric.change > 0 ? '+' : ''}{metric.change}%\n                    </span>\n                    <span className={`text-sm ml-2 ${\n                      isDarkMode ? 'text-gray-400' : 'text-gray-600'\n                    }`}>\n                      vs last period\n                    </span>\n                  </div>\n                </CardContent>\n              </Card>\n            );\n          })}</parameter>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-4 md:gap-6 mb-8\">\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Revenue Overview</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Daily revenue trends\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"w-full h-[300px] md:h-[350px]\">\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <LineChart\n                    data={chartData}\n                    margin={{ top: 5, right: 10, left: 0, bottom: 5 }}\n                  >\n                    <CartesianGrid \n                      strokeDasharray=\"3 3\" \n                      stroke={isDarkMode ? '#374151' : '#e5e7eb'}\n                    />\n                    <XAxis \n                      dataKey=\"date\" \n                      stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                      tick={{ fill: isDarkMode ? '#9ca3af' : '#6b7280', fontSize: 12 }}\n                      tickFormatter={(value) => {\n                        const date = new Date(value);\n                        return `${date.getMonth() + 1}/${date.getDate()}`;\n                      }}\n                    />\n                    <YAxis \n                      stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                      tick={{ fill: isDarkMode ? '#9ca3af' : '#6b7280', fontSize: 12 }}\n                      tickFormatter={(value) => `$${(value / 1000).toFixed(0)}k`}\n                    />\n                    <Tooltip content={<CustomTooltip />} />\n                    <Line \n                      type=\"monotone\" \n                      dataKey=\"revenue\" \n                      stroke=\"#3b82f6\" \n                      strokeWidth={2}\n                      dot={{ fill: '#3b82f6', r: 4 }}\n                      activeDot={{ r: 6 }}\n                    />\n                  </LineChart>\n                </ResponsiveContainer>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>User Activity</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Active users over time\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <UserChartComponent data={chartData} isDarkMode={isDarkMode} />\n            </CardContent>\n          </Card>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-4 md:gap-6 mb-8\">\n          <Card className={`lg:col-span-2 ${isDarkMode ? 'bg-gray-800 border-gray-700' : ''}`}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Performance Metrics</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Combined view of key metrics\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <ResponsiveContainer width=\"100%\" height={300}>\n                <LineChart data={chartData}>\n                  <CartesianGrid strokeDasharray=\"3 3\" stroke={isDarkMode ? '#374151' : '#e5e7eb'} />\n                  <XAxis \n                    dataKey=\"date\" \n                    stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                    tick={{ fill: isDarkMode ? '#9ca3af' : '#6b7280' }}\n                    tickFormatter={(value) => new Date(value).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n                  />\n                  <YAxis \n                    stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                    tick={{ fill: isDarkMode ? '#9ca3af' : '#6b7280' }}\n                  />\n                  <Tooltip \n                    contentStyle={{\n                      backgroundColor: isDarkMode ? '#1f2937' : '#ffffff',\n                      border: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\n                      borderRadius: '6px',\n                      color: isDarkMode ? '#ffffff' : '#000000'\n                    }}\n                    labelFormatter={(value) => new Date(value).toLocaleDateString('en-US', { month: 'short', day: 'numeric', year: 'numeric' })}\n                  />\n                  <Legend \n                    wrapperStyle={{\n                      color: isDarkMode ? '#9ca3af' : '#6b7280'\n                    }}\n                  />\n                  <Line \n                    type=\"monotone\" \n                    dataKey=\"revenue\" \n                    stroke=\"#3b82f6\" \n                    strokeWidth={2}\n                    dot={{ fill: '#3b82f6', r: 4 }}\n                    activeDot={{ r: 6 }}\n                    name=\"Revenue ($)\"\n                  />\n                  <Line \n                    type=\"monotone\" \n                    dataKey=\"users\" \n                    stroke=\"#10b981\" \n                    strokeWidth={2}\n                    dot={{ fill: '#10b981', r: 4 }}\n                    activeDot={{ r: 6 }}\n                    name=\"Users\"\n                  />\n                  <Line \n                    type=\"monotone\" \n                    dataKey=\"orders\" \n                    stroke=\"#f59e0b\" \n                    strokeWidth={2}\n                    dot={{ fill: '#f59e0b', r: 4 }}\n                    activeDot={{ r: 6 }}\n                    name=\"Orders\"\n                  />\n                </LineChart>\n              </ResponsiveContainer>\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Distribution</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Sales by category\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"h-[300px]\">\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <PieChart>\n                    <Pie\n                      data={mockPieData}\n                      cx=\"50%\"\n                      cy=\"50%\"\n                      labelLine={false}\n                      label={({ name, percent }) => `${(percent * 100).toFixed(0)}%`}\n                      outerRadius={80}\n                      fill=\"#8884d8\"\n                      dataKey=\"value\"\n                      animationBegin={0}\n                      animationDuration={800}\n                    >\n                      {mockPieData.map((entry, index) => (\n                        <Cell key={`cell-${index}`} fill={entry.color} />\n                      ))}\n                    </Pie>\n                    <Tooltip\n                      contentStyle={{\n                        backgroundColor: isDarkMode ? '#1f2937' : '#ffffff',\n                        border: isDarkMode ? '1px solid #374151' : '1px solid #e5e7eb',\n                        borderRadius: '6px',\n                        color: isDarkMode ? '#ffffff' : '#000000'\n                      }}\n                      formatter={(value: number) => `$${value.toLocaleString()}`}\n                    />\n                    <Legend\n                      verticalAlign=\"bottom\"\n                      height={36}\n                      iconType=\"circle\"\n                      wrapperStyle={{\n                        color: isDarkMode ? '#9ca3af' : '#6b7280'\n                      }}\n                    />\n                  </PieChart>\n                </ResponsiveContainer>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n          <CardHeader>\n            <CardTitle className={isDarkMode ? 'text-white' : ''}>Top Products</CardTitle>\n            <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n              Best performing products by revenue\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            {/* TODO:DataTable Render sortable table with product data, status badges, and pagination */}\n          </CardContent>\n        </Card>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 md:gap-6 mt-8\">\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Recent Activity</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4 max-h-[400px] overflow-y-auto pr-2\">\n                {mockActivityData.map((activity) => {\n                  const IconComponent = \n                    activity.icon === 'cart' ? ShoppingCart :\n                    activity.icon === 'user' ? UserPlus :\n                    activity.icon === 'dollar' ? DollarSign :\n                    Package;\n                  \n                  const iconColor = \n                    activity.type === 'sale' ? 'text-blue-500' :\n                    activity.type === 'user' ? 'text-green-500' :\n                    activity.type === 'revenue' ? 'text-purple-500' :\n                    'text-orange-500';\n                  \n                  const bgColor = \n                    activity.type === 'sale' ? (isDarkMode ? 'bg-blue-500/10' : 'bg-blue-50') :\n                    activity.type === 'user' ? (isDarkMode ? 'bg-green-500/10' : 'bg-green-50') :\n                    activity.type === 'revenue' ? (isDarkMode ? 'bg-purple-500/10' : 'bg-purple-50') :\n                    (isDarkMode ? 'bg-orange-500/10' : 'bg-orange-50');\n\n                  return (\n                    <div key={activity.id} className=\"flex items-start gap-3 pb-3 border-b last:border-b-0 border-gray-200 dark:border-gray-700\">\n                      <div className={`p-2 rounded-lg ${bgColor}`}>\n                        <IconComponent className={`h-4 w-4 ${iconColor}`} />\n                      </div>\n                      <div className=\"flex-1 min-w-0\">\n                        <p className={`text-sm font-medium ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                          {activity.message}\n                        </p>\n                        <p className={`text-xs mt-1 ${isDarkMode ? 'text-gray-400' : 'text-gray-500'}`}>\n                          {activity.timestamp}\n                        </p>\n                      </div>\n                    </div>\n                  );\n                })}\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Quick Stats</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {mockQuickStats.map((stat) => {\n                  const Icon = stat.icon;\n                  const percentage = (stat.value / stat.target) * 100;\n                  \n                  return (\n                    <div key={stat.id} className=\"space-y-2\">\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"flex items-center gap-2\">\n                          <Icon className={`h-4 w-4 ${stat.color}`} />\n                          <span className={`text-sm font-medium ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>\n                            {stat.label}\n                          </span>\n                        </div>\n                        <span className={`text-sm font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                          {stat.value}%\n                        </span>\n                      </div>\n                      <Progress \n                        value={percentage} \n                        className={`h-2 ${isDarkMode ? 'bg-gray-700' : 'bg-gray-200'}`}\n                      />\n                      <div className=\"flex items-center justify-between text-xs\">\n                        <span className={isDarkMode ? 'text-gray-500' : 'text-gray-500'}>\n                          Target: {stat.target}%\n                        </span>\n                        {percentage >= 75 ? (\n                          <span className=\"flex items-center gap-1 text-green-500\">\n                            <TrendingUp className=\"h-3 w-3\" />\n                            On track\n                          </span>\n                        ) : (\n                          <span className=\"flex items-center gap-1 text-orange-500\">\n                            <TrendingDown className=\"h-3 w-3\" />\n                            Needs attention\n                          </span>\n                        )}\n                      </div>\n                    </div>\n                  );\n                })}\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Alerts</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-3 max-h-[300px] overflow-y-auto\">\n                {mockAlerts.map((alert) => {\n                  const severityConfig = {\n                    info: { icon: Info, color: 'text-blue-500', bg: 'bg-blue-50 dark:bg-blue-950/30', border: 'border-blue-200 dark:border-blue-800' },\n                    warning: { icon: AlertTriangle, color: 'text-yellow-500', bg: 'bg-yellow-50 dark:bg-yellow-950/30', border: 'border-yellow-200 dark:border-yellow-800' },\n                    error: { icon: AlertCircle, color: 'text-red-500', bg: 'bg-red-50 dark:bg-red-950/30', border: 'border-red-200 dark:border-red-800' },\n                    success: { icon: CheckCircle, color: 'text-green-500', bg: 'bg-green-50 dark:bg-green-950/30', border: 'border-green-200 dark:border-green-800' }\n                  };\n\n                  const config = severityConfig[alert.severity];\n                  const Icon = config.icon;\n\n                  return (\n                    <div\n                      key={alert.id}\n                      className={`flex items-start gap-3 p-3 rounded-lg border ${config.bg} ${config.border}`}\n                    >\n                      <Icon className={`h-5 w-5 ${config.color} flex-shrink-0 mt-0.5`} />\n                      <div className=\"flex-1 min-w-0\">\n                        <p className={`text-sm ${isDarkMode ? 'text-gray-200' : 'text-gray-900'}`}>\n                          {alert.message}\n                        </p>\n                        <p className={`text-xs mt-1 ${isDarkMode ? 'text-gray-500' : 'text-gray-500'}`}>\n                          {alert.timestamp}\n                        </p>\n                      </div>\n                    </div>\n                  );\n                })}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}",
  "error": null,
  "overall_score": 47,
  "code_quality_score": 12,
  "architecture_score": 10,
  "performance_score": 14,
  "accessibility_score": 11,
  "metadata": {
    "document_id": "eval_room_19ad47115985",
    "prompt_category": "intermediate",
    "prompt_complexity": 6.0
  },
  "raw_response": {
    "document_id": "eval_room_19ad47115985",
    "mode": "parallel",
    "prompt": "Generate an analytics dashboard page with charts, data tables, real-time updates, dark mode, and responsive design",
    "content": "import { useState, useCallback } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\nimport { Badge } from '@/components/ui/badge';\nimport { Button } from '@/components/ui/button';\nimport { Moon, Sun, RefreshCw } from 'lucide-react';\nimport { ArrowUpDown, ChevronLeft, ChevronRight } from 'lucide-react';\nimport { AlertCircle, AlertTriangle, Info, CheckCircle } from 'lucide-react';\nimport { Progress } from '@/components/ui/progress';\nimport { TrendingUp, TrendingDown, ShoppingCart, UserPlus, DollarSign, Package } from 'lucide-react';\n\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, Legend } from 'recharts';\nimport { PieChart, Pie, Cell, ResponsiveContainer, Legend, Tooltip } from 'recharts';\nimport { motion } from 'framer-motion';\nimport { AreaChart, Area, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';\nimport { TrendingUp, TrendingDown, DollarSign, Users, ShoppingCart, Target } from 'lucide-react';\nimport { TrendingUp, TrendingDown, DollarSign, Users, ShoppingCart, Target } from 'lucide-react';\n\ninterface MetricData {\n  id: string;\n  label: string;\n  value: number;\n  change: number;\n  trend: 'up' | 'down';\n}\n\ninterface ChartDataPoint {\n  date: string;\n  revenue: number;\n  users: number;\n  orders: number;\n}\n\ninterface TableRow {\n  id: string;\n  product: string;\n  sales: number;\n  revenue: number;\n  status: 'active' | 'pending' | 'inactive';\n}\ninterface Alert {\n  id: string;\n  message: string;\n  severity: 'info' | 'warning' | 'error' | 'success';\n  timestamp: string;\n}\n\nconst mockMetrics: MetricData[] = [\n  { id: '1', label: 'Total Revenue', value: 45231, change: 12.5, trend: 'up' },\n  { id: '2', label: 'Active Users', value: 2350, change: 8.2, trend: 'up' },\n  { id: '3', label: 'Total Orders', value: 1543, change: -3.1, trend: 'down' },\n  { id: '4', label: 'Conversion Rate', value: 3.24, change: 5.7, trend: 'up' }\n];\n\nconst mockChartData: ChartDataPoint[] = [\n  { date: '2024-01-01', revenue: 12000, users: 450, orders: 230 },\n  { date: '2024-01-02', revenue: 15000, users: 520, orders: 280 },\n  { date: '2024-01-03', revenue: 13500, users: 490, orders: 250 },\n  { date: '2024-01-04', revenue: 18000, users: 610, orders: 320 },\n  { date: '2024-01-05', revenue: 16500, users: 580, orders: 295 },\n  { date: '2024-01-06', revenue: 20000, users: 680, orders: 350 },\n  { date: '2024-01-07', revenue: 22000, users: 720, orders: 380 }\n];\n\nconst mockTableData: TableRow[] = [\n  { id: '1', product: 'Premium Plan', sales: 234, revenue: 23400, status: 'active' },\n  { id: '2', product: 'Basic Plan', sales: 567, revenue: 11340, status: 'active' },\n  { id: '3', product: 'Enterprise Plan', sales: 89, revenue: 44500, status: 'active' },\n  { id: '4', product: 'Starter Plan', sales: 432, revenue: 4320, status: 'pending' },\n  { id: '5', product: 'Pro Plan', sales: 156, revenue: 15600, status: 'inactive' }\n];\nconst mockAlerts: Alert[] = [\n  { id: '1', message: 'System backup completed successfully', severity: 'success', timestamp: '2 min ago' },\n  { id: '2', message: 'High CPU usage detected on server 3', severity: 'warning', timestamp: '15 min ago' },\n  { id: '3', message: 'Failed login attempt from unknown IP', severity: 'error', timestamp: '1 hour ago' },\n  { id: '4', message: 'New user registration milestone reached', severity: 'info', timestamp: '2 hours ago' },\n  { id: '5', message: 'Database connection timeout', severity: 'error', timestamp: '3 hours ago' }\n];\n\nconst mockQuickStats = [\n  { id: '1', label: 'Goal Completion', value: 78, target: 100, icon: Target, color: 'text-blue-500' },\n  { id: '2', label: 'Customer Satisfaction', value: 92, target: 100, icon: Users, color: 'text-green-500' },\n  { id: '3', label: 'Sales Target', value: 65, target: 100, icon: DollarSign, color: 'text-purple-500' },\n  { id: '4', label: 'Order Fulfillment', value: 88, target: 100, icon: ShoppingCart, color: 'text-orange-500' }\n];\ninterface ActivityItem {\n  id: string;\n  type: 'sale' | 'user' | 'revenue' | 'order';\n  message: string;\n  timestamp: string;\n  icon: 'cart' | 'user' | 'dollar' | 'package';\n}\n\nconst mockActivityData: ActivityItem[] = [\n  { id: '1', type: 'sale', message: 'New sale: Premium Plan', timestamp: '2 minutes ago', icon: 'cart' },\n  { id: '2', type: 'user', message: 'New user registered', timestamp: '5 minutes ago', icon: 'user' },\n  { id: '3', type: 'revenue', message: 'Revenue milestone reached', timestamp: '12 minutes ago', icon: 'dollar' },\n  { id: '4', type: 'order', message: 'Order #1234 completed', timestamp: '18 minutes ago', icon: 'package' },\n  { id: '5', type: 'sale', message: 'New sale: Enterprise Plan', timestamp: '25 minutes ago', icon: 'cart' },\n  { id: '6', type: 'user', message: '5 new users registered', timestamp: '32 minutes ago', icon: 'user' },\n  { id: '7', type: 'order', message: 'Order #1233 completed', timestamp: '45 minutes ago', icon: 'package' },\n  { id: '8', type: 'revenue', message: 'Daily revenue updated', timestamp: '1 hour ago', icon: 'dollar' }\n];\nconst mockPieData = [\n  { name: 'Premium Plan', value: 23400, color: '#3b82f6' },\n  { name: 'Basic Plan', value: 11340, color: '#10b981' },\n  { name: 'Enterprise Plan', value: 44500, color: '#8b5cf6' },\n  { name: 'Starter Plan', value: 4320, color: '#f59e0b' },\n  { name: 'Pro Plan', value: 15600, color: '#ef4444' }\n];\n\ninterface CustomTooltipProps {\n  active?: boolean;\n  payload?: Array<{\n    value: number;\n    dataKey: string;\n    color: string;\n  }>;\n  label?: string;\n}\n\nconst CustomTooltip = ({ active, payload, label }: CustomTooltipProps) => {\n  if (active && payload && payload.length) {\n    return (\n      <div className=\"bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-lg shadow-lg p-3\">\n        <p className=\"text-sm font-medium text-gray-900 dark:text-white mb-2\">\n          {label}\n        </p>\n        {payload.map((entry, index) => (\n          <p key={index} className=\"text-sm text-gray-600 dark:text-gray-300\">\n            <span className=\"font-medium\" style={{ color: entry.color }}>\n              {entry.dataKey.charAt(0).toUpperCase() + entry.dataKey.slice(1)}:\n            </span>{' '}\n            ${entry.value.toLocaleString()}\n          </p>\n        ))}\n      </div>\n    );\n  }\n  return null;\n};\n\nconst UserChartComponent = ({ data, isDarkMode }: { data: ChartDataPoint[], isDarkMode: boolean }) => {\n  const CustomTooltip = ({ active, payload }: any) => {\n    if (active && payload && payload.length) {\n      return (\n        <div className={`p-3 rounded-lg shadow-lg ${isDarkMode ? 'bg-gray-800 border border-gray-700' : 'bg-white border border-gray-200'}`}>\n          <p className={`text-sm font-medium ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n            {new Date(payload[0].payload.date).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n          </p>\n          <p className={`text-sm ${isDarkMode ? 'text-blue-400' : 'text-blue-600'}`}>\n            Users: {payload[0].value.toLocaleString()}\n          </p>\n        </div>\n      );\n    }\n    return null;\n  };\n\n  return (\n    <motion.div\n      initial={{ opacity: 0, y: 20 }}\n      animate={{ opacity: 1, y: 0 }}\n      transition={{ duration: 0.5, delay: 0.2 }}\n      className=\"w-full h-[300px]\"\n    >\n      <ResponsiveContainer width=\"100%\" height=\"100%\">\n        <AreaChart data={data} margin={{ top: 10, right: 10, left: 0, bottom: 0 }}>\n          <defs>\n            <linearGradient id=\"userGradient\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n              <stop offset=\"5%\" stopColor=\"#3b82f6\" stopOpacity={0.8}/>\n              <stop offset=\"95%\" stopColor=\"#3b82f6\" stopOpacity={0.1}/>\n            </linearGradient>\n          </defs>\n          <CartesianGrid \n            strokeDasharray=\"3 3\" \n            stroke={isDarkMode ? '#374151' : '#e5e7eb'}\n            vertical={false}\n          />\n          <XAxis \n            dataKey=\"date\" \n            tickFormatter={(value) => new Date(value).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n            stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n            style={{ fontSize: '12px' }}\n            tickLine={false}\n          />\n          <YAxis \n            stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n            style={{ fontSize: '12px' }}\n            tickLine={false}\n            axisLine={false}\n          />\n          <Tooltip content={<CustomTooltip />} />\n          <Area \n            type=\"monotone\" \n            dataKey=\"users\" \n            stroke=\"#3b82f6\" \n            strokeWidth={2}\n            fill=\"url(#userGradient)\"\n            animationDuration={1000}\n            animationEasing=\"ease-in-out\"\n          />\n        </AreaChart>\n      </ResponsiveContainer>\n    </motion.div>\n  );\n};\n\nconst getStatusBadgeVariant = (status: TableRow['status']) => {\n  switch (status) {\n    case 'active':\n      return 'default';\n    case 'pending':\n      return 'secondary';\n    case 'inactive':\n      return 'outline';\n    default:\n      return 'default';\n  }\n};\n\nconst getStatusColor = (status: TableRow['status'], isDark: boolean) => {\n  switch (status) {\n    case 'active':\n      return isDark ? 'bg-green-900 text-green-300' : 'bg-green-100 text-green-800';\n    case 'pending':\n      return isDark ? 'bg-yellow-900 text-yellow-300' : 'bg-yellow-100 text-yellow-800';\n    case 'inactive':\n      return isDark ? 'bg-gray-700 text-gray-300' : 'bg-gray-100 text-gray-800';\n    default:\n      return '';\n  }\n};\n\nexport default function AnalyticsDashboard() {\n  const [isDarkMode, setIsDarkMode] = useState(false);\n  const [metrics, setMetrics] = useState<MetricData[]>(mockMetrics);\n  const [chartData, setChartData] = useState<ChartDataPoint[]>(mockChartData);\n  const [tableData, setTableData] = useState<TableRow[]>(mockTableData);\n  const [isRefreshing, setIsRefreshing] = useState(false);\n  const [sortColumn, setSortColumn] = useState<keyof TableRow>('revenue');\n  const [sortDirection, setSortDirection] = useState<'asc' | 'desc'>('desc');\n  const [currentPage, setCurrentPage] = useState(1);\n  const itemsPerPage = 3;\n\n  const handleSort = useCallback((column: keyof TableRow) => {\n    if (sortColumn === column) {\n      setSortDirection(prev => prev === 'asc' ? 'desc' : 'asc');\n    } else {\n      setSortColumn(column);\n      setSortDirection('desc');\n    }\n    setCurrentPage(1);\n  }, [sortColumn]);\n\n  const sortedData = useCallback(() => {\n    const sorted = [...tableData].sort((a, b) => {\n      const aValue = a[sortColumn];\n      const bValue = b[sortColumn];\n      \n      if (typeof aValue === 'number' && typeof bValue === 'number') {\n        return sortDirection === 'asc' ? aValue - bValue : bValue - aValue;\n      }\n      \n      if (typeof aValue === 'string' && typeof bValue === 'string') {\n        return sortDirection === 'asc' \n          ? aValue.localeCompare(bValue)\n          : bValue.localeCompare(aValue);\n      }\n      \n      return 0;\n    });\n    \n    return sorted;\n  }, [tableData, sortColumn, sortDirection]);\n\n  const paginatedData = useCallback(() => {\n    const sorted = sortedData();\n    const startIndex = (currentPage - 1) * itemsPerPage;\n    const endIndex = startIndex + itemsPerPage;\n    return sorted.slice(startIndex, endIndex);\n  }, [sortedData, currentPage]);\n\n  const totalPages = Math.ceil(tableData.length / itemsPerPage);\n\n  const handlePreviousPage = useCallback(() => {\n    setCurrentPage(prev => Math.max(1, prev - 1));\n  }, []);\n\n  const handleNextPage = useCallback(() => {\n    setCurrentPage(prev => Math.min(totalPages, prev + 1));\n  }, [totalPages]);\n</parameter>\n</invoke>\n\n  const toggleDarkMode = useCallback(() => {\n    setIsDarkMode(prev => !prev);\n  }, []);\n\n  const handleRefresh = useCallback(() => {\n    setIsRefreshing(true);\n\n    \n    setTimeout(() => {\n      // Generate updated mock metrics with random variations\n      const updatedMetrics = mockMetrics.map(metric => ({\n        ...metric,\n        value: metric.value + Math.floor(Math.random() * 200 - 100),\n        change: parseFloat((Math.random() * 20 - 5).toFixed(1)),\n        trend: Math.random() > 0.5 ? 'up' as const : 'down' as const\n      }));\n      \n      // Generate updated chart data with random variations\n      const updatedChartData = mockChartData.map(point => ({\n        ...point,\n        revenue: point.revenue + Math.floor(Math.random() * 4000 - 2000),\n        users: point.users + Math.floor(Math.random() * 100 - 50),\n        orders: point.orders + Math.floor(Math.random() * 50 - 25)\n      }));\n      \n      // Generate updated table data with random variations\n      const updatedTableData = mockTableData.map(row => ({\n        ...row,\n        sales: row.sales + Math.floor(Math.random() * 40 - 20),\n        revenue: row.revenue + Math.floor(Math.random() * 2000 - 1000)\n      }));\n      \n      setMetrics(updatedMetrics);\n      setChartData(updatedChartData);\n      setTableData(updatedTableData);\n      setIsRefreshing(false);\n    }, 1500);\n  }, []);\n\n  return (\n    <div className={`min-h-screen ${isDarkMode ? 'dark bg-gray-900' : 'bg-gray-50'}`}>\n      <div className=\"container mx-auto p-4 md:p-6 lg:p-8\">\n        <div className=\"flex flex-col md:flex-row justify-between items-start md:items-center gap-4 mb-8\">\n          <div>\n            <h1 className={`text-3xl md:text-4xl font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n              Analytics Dashboard\n            </h1>\n            <p className={`mt-2 ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n              Real-time insights and performance metrics\n            </p>\n          </div>\n          \n          <div className=\"flex gap-2\">\n            <Button\n              variant=\"outline\"\n              size=\"icon\"\n              onClick={toggleDarkMode}\n              className={isDarkMode ? 'border-gray-700' : ''}\n            >\n              {isDarkMode ? <Sun className=\"h-5 w-5\" /> : <Moon className=\"h-5 w-5\" />}\n            </Button>\n            \n            <Button\n              variant=\"outline\"\n              onClick={handleRefresh}\n              disabled={isRefreshing}\n              className={isDarkMode ? 'border-gray-700' : ''}\n            >\n              <RefreshCw className={`h-4 w-4 mr-2 ${isRefreshing ? 'animate-spin' : ''}`} />\n              Refresh\n            </Button>\n          </div>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 md:gap-6 mb-8\">\n          {metrics.map((metric, index) => {\n            const Icon = metric.id === '1' ? DollarSign : \n                        metric.id === '2' ? Users : \n                        metric.id === '3' ? ShoppingCart : Target;\n            \n            return (\n              <Card \n                key={metric.id} \n                className={`transition-all duration-300 hover:shadow-lg hover:-translate-y-1 ${\n                  isDarkMode ? 'bg-gray-800 border-gray-700' : 'bg-white'\n                }`}\n                style={{\n                  animation: `fadeInUp 0.5s ease-out ${index * 0.1}s both`\n                }}\n              >\n                <CardHeader className=\"flex flex-row items-center justify-between pb-2\">\n                  <CardTitle className={`text-sm font-medium ${\n                    isDarkMode ? 'text-gray-400' : 'text-gray-600'\n                  }`}>\n                    {metric.label}\n                  </CardTitle>\n                  <div className={`p-2 rounded-lg ${\n                    isDarkMode ? 'bg-gray-700' : 'bg-gray-100'\n                  }`}>\n                    <Icon className={`h-4 w-4 ${\n                      isDarkMode ? 'text-gray-300' : 'text-gray-600'\n                    }`} />\n                  </div>\n                </CardHeader>\n                <CardContent>\n                  <div className={`text-2xl font-bold ${\n                    isDarkMode ? 'text-white' : 'text-gray-900'\n                  }`}>\n                    {metric.id === '1' || metric.id === '4' \n                      ? metric.id === '1' \n                        ? `$${metric.value.toLocaleString()}` \n                        : `${metric.value}%`\n                      : metric.value.toLocaleString()\n                    }\n                  </div>\n                  <div className=\"flex items-center mt-2\">\n                    {metric.trend === 'up' ? (\n                      <TrendingUp className=\"h-4 w-4 text-green-500 mr-1\" />\n                    ) : (\n                      <TrendingDown className=\"h-4 w-4 text-red-500 mr-1\" />\n                    )}\n                    <span className={`text-sm font-medium ${\n                      metric.trend === 'up' ? 'text-green-500' : 'text-red-500'\n                    }`}>\n                      {metric.change > 0 ? '+' : ''}{metric.change}%\n                    </span>\n                    <span className={`text-sm ml-2 ${\n                      isDarkMode ? 'text-gray-400' : 'text-gray-600'\n                    }`}>\n                      vs last period\n                    </span>\n                  </div>\n                </CardContent>\n              </Card>\n            );\n          })}</parameter>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-4 md:gap-6 mb-8\">\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Revenue Overview</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Daily revenue trends\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"w-full h-[300px] md:h-[350px]\">\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <LineChart\n                    data={chartData}\n                    margin={{ top: 5, right: 10, left: 0, bottom: 5 }}\n                  >\n                    <CartesianGrid \n                      strokeDasharray=\"3 3\" \n                      stroke={isDarkMode ? '#374151' : '#e5e7eb'}\n                    />\n                    <XAxis \n                      dataKey=\"date\" \n                      stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                      tick={{ fill: isDarkMode ? '#9ca3af' : '#6b7280', fontSize: 12 }}\n                      tickFormatter={(value) => {\n                        const date = new Date(value);\n                        return `${date.getMonth() + 1}/${date.getDate()}`;\n                      }}\n                    />\n                    <YAxis \n                      stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                      tick={{ fill: isDarkMode ? '#9ca3af' : '#6b7280', fontSize: 12 }}\n                      tickFormatter={(value) => `$${(value / 1000).toFixed(0)}k`}\n                    />\n                    <Tooltip content={<CustomTooltip />} />\n                    <Line \n                      type=\"monotone\" \n                      dataKey=\"revenue\" \n                      stroke=\"#3b82f6\" \n                      strokeWidth={2}\n                      dot={{ fill: '#3b82f6', r: 4 }}\n                      activeDot={{ r: 6 }}\n                    />\n                  </LineChart>\n                </ResponsiveContainer>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>User Activity</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Active users over time\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <UserChartComponent data={chartData} isDarkMode={isDarkMode} />\n            </CardContent>\n          </Card>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-4 md:gap-6 mb-8\">\n          <Card className={`lg:col-span-2 ${isDarkMode ? 'bg-gray-800 border-gray-700' : ''}`}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Performance Metrics</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Combined view of key metrics\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <ResponsiveContainer width=\"100%\" height={300}>\n                <LineChart data={chartData}>\n                  <CartesianGrid strokeDasharray=\"3 3\" stroke={isDarkMode ? '#374151' : '#e5e7eb'} />\n                  <XAxis \n                    dataKey=\"date\" \n                    stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                    tick={{ fill: isDarkMode ? '#9ca3af' : '#6b7280' }}\n                    tickFormatter={(value) => new Date(value).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n                  />\n                  <YAxis \n                    stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                    tick={{ fill: isDarkMode ? '#9ca3af' : '#6b7280' }}\n                  />\n                  <Tooltip \n                    contentStyle={{\n                      backgroundColor: isDarkMode ? '#1f2937' : '#ffffff',\n                      border: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\n                      borderRadius: '6px',\n                      color: isDarkMode ? '#ffffff' : '#000000'\n                    }}\n                    labelFormatter={(value) => new Date(value).toLocaleDateString('en-US', { month: 'short', day: 'numeric', year: 'numeric' })}\n                  />\n                  <Legend \n                    wrapperStyle={{\n                      color: isDarkMode ? '#9ca3af' : '#6b7280'\n                    }}\n                  />\n                  <Line \n                    type=\"monotone\" \n                    dataKey=\"revenue\" \n                    stroke=\"#3b82f6\" \n                    strokeWidth={2}\n                    dot={{ fill: '#3b82f6', r: 4 }}\n                    activeDot={{ r: 6 }}\n                    name=\"Revenue ($)\"\n                  />\n                  <Line \n                    type=\"monotone\" \n                    dataKey=\"users\" \n                    stroke=\"#10b981\" \n                    strokeWidth={2}\n                    dot={{ fill: '#10b981', r: 4 }}\n                    activeDot={{ r: 6 }}\n                    name=\"Users\"\n                  />\n                  <Line \n                    type=\"monotone\" \n                    dataKey=\"orders\" \n                    stroke=\"#f59e0b\" \n                    strokeWidth={2}\n                    dot={{ fill: '#f59e0b', r: 4 }}\n                    activeDot={{ r: 6 }}\n                    name=\"Orders\"\n                  />\n                </LineChart>\n              </ResponsiveContainer>\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Distribution</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Sales by category\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"h-[300px]\">\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <PieChart>\n                    <Pie\n                      data={mockPieData}\n                      cx=\"50%\"\n                      cy=\"50%\"\n                      labelLine={false}\n                      label={({ name, percent }) => `${(percent * 100).toFixed(0)}%`}\n                      outerRadius={80}\n                      fill=\"#8884d8\"\n                      dataKey=\"value\"\n                      animationBegin={0}\n                      animationDuration={800}\n                    >\n                      {mockPieData.map((entry, index) => (\n                        <Cell key={`cell-${index}`} fill={entry.color} />\n                      ))}\n                    </Pie>\n                    <Tooltip\n                      contentStyle={{\n                        backgroundColor: isDarkMode ? '#1f2937' : '#ffffff',\n                        border: isDarkMode ? '1px solid #374151' : '1px solid #e5e7eb',\n                        borderRadius: '6px',\n                        color: isDarkMode ? '#ffffff' : '#000000'\n                      }}\n                      formatter={(value: number) => `$${value.toLocaleString()}`}\n                    />\n                    <Legend\n                      verticalAlign=\"bottom\"\n                      height={36}\n                      iconType=\"circle\"\n                      wrapperStyle={{\n                        color: isDarkMode ? '#9ca3af' : '#6b7280'\n                      }}\n                    />\n                  </PieChart>\n                </ResponsiveContainer>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n          <CardHeader>\n            <CardTitle className={isDarkMode ? 'text-white' : ''}>Top Products</CardTitle>\n            <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n              Best performing products by revenue\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            {/* TODO:DataTable Render sortable table with product data, status badges, and pagination */}\n          </CardContent>\n        </Card>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 md:gap-6 mt-8\">\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Recent Activity</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4 max-h-[400px] overflow-y-auto pr-2\">\n                {mockActivityData.map((activity) => {\n                  const IconComponent = \n                    activity.icon === 'cart' ? ShoppingCart :\n                    activity.icon === 'user' ? UserPlus :\n                    activity.icon === 'dollar' ? DollarSign :\n                    Package;\n                  \n                  const iconColor = \n                    activity.type === 'sale' ? 'text-blue-500' :\n                    activity.type === 'user' ? 'text-green-500' :\n                    activity.type === 'revenue' ? 'text-purple-500' :\n                    'text-orange-500';\n                  \n                  const bgColor = \n                    activity.type === 'sale' ? (isDarkMode ? 'bg-blue-500/10' : 'bg-blue-50') :\n                    activity.type === 'user' ? (isDarkMode ? 'bg-green-500/10' : 'bg-green-50') :\n                    activity.type === 'revenue' ? (isDarkMode ? 'bg-purple-500/10' : 'bg-purple-50') :\n                    (isDarkMode ? 'bg-orange-500/10' : 'bg-orange-50');\n\n                  return (\n                    <div key={activity.id} className=\"flex items-start gap-3 pb-3 border-b last:border-b-0 border-gray-200 dark:border-gray-700\">\n                      <div className={`p-2 rounded-lg ${bgColor}`}>\n                        <IconComponent className={`h-4 w-4 ${iconColor}`} />\n                      </div>\n                      <div className=\"flex-1 min-w-0\">\n                        <p className={`text-sm font-medium ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                          {activity.message}\n                        </p>\n                        <p className={`text-xs mt-1 ${isDarkMode ? 'text-gray-400' : 'text-gray-500'}`}>\n                          {activity.timestamp}\n                        </p>\n                      </div>\n                    </div>\n                  );\n                })}\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Quick Stats</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {mockQuickStats.map((stat) => {\n                  const Icon = stat.icon;\n                  const percentage = (stat.value / stat.target) * 100;\n                  \n                  return (\n                    <div key={stat.id} className=\"space-y-2\">\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"flex items-center gap-2\">\n                          <Icon className={`h-4 w-4 ${stat.color}`} />\n                          <span className={`text-sm font-medium ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>\n                            {stat.label}\n                          </span>\n                        </div>\n                        <span className={`text-sm font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                          {stat.value}%\n                        </span>\n                      </div>\n                      <Progress \n                        value={percentage} \n                        className={`h-2 ${isDarkMode ? 'bg-gray-700' : 'bg-gray-200'}`}\n                      />\n                      <div className=\"flex items-center justify-between text-xs\">\n                        <span className={isDarkMode ? 'text-gray-500' : 'text-gray-500'}>\n                          Target: {stat.target}%\n                        </span>\n                        {percentage >= 75 ? (\n                          <span className=\"flex items-center gap-1 text-green-500\">\n                            <TrendingUp className=\"h-3 w-3\" />\n                            On track\n                          </span>\n                        ) : (\n                          <span className=\"flex items-center gap-1 text-orange-500\">\n                            <TrendingDown className=\"h-3 w-3\" />\n                            Needs attention\n                          </span>\n                        )}\n                      </div>\n                    </div>\n                  );\n                })}\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Alerts</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-3 max-h-[300px] overflow-y-auto\">\n                {mockAlerts.map((alert) => {\n                  const severityConfig = {\n                    info: { icon: Info, color: 'text-blue-500', bg: 'bg-blue-50 dark:bg-blue-950/30', border: 'border-blue-200 dark:border-blue-800' },\n                    warning: { icon: AlertTriangle, color: 'text-yellow-500', bg: 'bg-yellow-50 dark:bg-yellow-950/30', border: 'border-yellow-200 dark:border-yellow-800' },\n                    error: { icon: AlertCircle, color: 'text-red-500', bg: 'bg-red-50 dark:bg-red-950/30', border: 'border-red-200 dark:border-red-800' },\n                    success: { icon: CheckCircle, color: 'text-green-500', bg: 'bg-green-50 dark:bg-green-950/30', border: 'border-green-200 dark:border-green-800' }\n                  };\n\n                  const config = severityConfig[alert.severity];\n                  const Icon = config.icon;\n\n                  return (\n                    <div\n                      key={alert.id}\n                      className={`flex items-start gap-3 p-3 rounded-lg border ${config.bg} ${config.border}`}\n                    >\n                      <Icon className={`h-5 w-5 ${config.color} flex-shrink-0 mt-0.5`} />\n                      <div className=\"flex-1 min-w-0\">\n                        <p className={`text-sm ${isDarkMode ? 'text-gray-200' : 'text-gray-900'}`}>\n                          {alert.message}\n                        </p>\n                        <p className={`text-xs mt-1 ${isDarkMode ? 'text-gray-500' : 'text-gray-500'}`}>\n                          {alert.timestamp}\n                        </p>\n                      </div>\n                    </div>\n                  );\n                })}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}",
    "error": null,
    "elapsed_time": 99.37453818321228,
    "success": true
  }
}