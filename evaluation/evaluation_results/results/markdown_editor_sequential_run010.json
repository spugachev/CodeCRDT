{
  "prompt_id": "markdown_editor",
  "prompt_name": "Premium Markdown Editor",
  "mode": "sequential",
  "run_number": 10,
  "timestamp": "2025-10-13T21:32:22.960166",
  "response_time": 79.33913850784302,
  "total_tokens": null,
  "response_content": "import { useState, useEffect, useRef } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Bold, Italic, Code, List, ListOrdered, Link2, Image, Eye, EyeOff, Heading1, Heading2, Quote } from 'lucide-react';\nimport { motion, AnimatePresence } from 'framer-motion';\n\nexport default function MarkdownEditor() {\n  const [markdown, setMarkdown] = useState(`# Welcome to Premium Markdown Editor\n\n## Features\n- **Bold** and *italic* text\n- \\`Inline code\\` with syntax highlighting\n- Code blocks with VS Code styling\n- Live preview with smooth transitions\n\n### Code Example\n\n\\`\\`\\`javascript\nfunction greet(name) {\n  console.log(\\`Hello, \\${name}!\\`);\n  return true;\n}\n\nconst user = \"Developer\";\ngreet(user);\n\\`\\`\\`\n\n### Lists\n1. First item\n2. Second item\n3. Third item\n\n- Bullet point\n- Another point\n  - Nested item\n\n> This is a blockquote with **bold** text and *italic* text.\n\n[Link to example](https://example.com)\n\n![Image description](https://via.placeholder.com/400x200)\n`);\n  \n  const [showPreview, setShowPreview] = useState(true);\n  const [showToolbar, setShowToolbar] = useState(false);\n  const [toolbarPosition, setToolbarPosition] = useState({ x: 0, y: 0 });\n  const textareaRef = useRef<HTMLTextAreaElement>(null);\n  const editorRef = useRef<HTMLDivElement>(null);\n\n  const handleSelection = () => {\n    const textarea = textareaRef.current;\n    if (!textarea) return;\n\n    const start = textarea.selectionStart;\n    const end = textarea.selectionEnd;\n\n    if (start !== end) {\n      const rect = textarea.getBoundingClientRect();\n      const lineHeight = 24;\n      const lines = textarea.value.substring(0, start).split('\\n').length;\n      \n      setToolbarPosition({\n        x: rect.left + (rect.width / 2),\n        y: rect.top + (lines * lineHeight) - 60\n      });\n      setShowToolbar(true);\n    } else {\n      setShowToolbar(false);\n    }\n  };\n\n  const insertMarkdown = (before: string, after: string = '') => {\n    const textarea = textareaRef.current;\n    if (!textarea) return;\n\n    const start = textarea.selectionStart;\n    const end = textarea.selectionEnd;\n    const selectedText = markdown.substring(start, end);\n    const newText = markdown.substring(0, start) + before + selectedText + after + markdown.substring(end);\n    \n    setMarkdown(newText);\n    \n    setTimeout(() => {\n      textarea.focus();\n      textarea.setSelectionRange(start + before.length, end + before.length);\n    }, 0);\n  };\n\n  const parseMarkdown = (text: string): string => {\n    let html = text;\n\n    // Code blocks with syntax highlighting\n    html = html.replace(/```(\\w+)?\\n([\\s\\S]*?)```/g, (_, lang, code) => {\n      const highlighted = highlightCode(code.trim(), lang || 'javascript');\n      return `<pre class=\"code-block\"><code class=\"language-${lang || 'javascript'}\">${highlighted}</code></pre>`;\n    });\n\n    // Inline code\n    html = html.replace(/`([^`]+)`/g, '<code class=\"inline-code\">$1</code>');\n\n    // Headers\n    html = html.replace(/^### (.*$)/gim, '<h3>$1</h3>');\n    html = html.replace(/^## (.*$)/gim, '<h2>$1</h2>');\n    html = html.replace(/^# (.*$)/gim, '<h1>$1</h1>');\n\n    // Bold\n    html = html.replace(/\\*\\*(.+?)\\*\\*/g, '<strong>$1</strong>');\n\n    // Italic\n    html = html.replace(/\\*(.+?)\\*/g, '<em>$1</em>');\n\n    // Links\n    html = html.replace(/\\[([^\\]]+)\\]\\(([^)]+)\\)/g, '<a href=\"$2\" target=\"_blank\" rel=\"noopener noreferrer\">$1</a>');\n\n    // Images\n    html = html.replace(/!\\[([^\\]]*)\\]\\(([^)]+)\\)/g, '<img src=\"$2\" alt=\"$1\" />');\n\n    // Blockquotes\n    html = html.replace(/^> (.+)$/gim, '<blockquote>$1</blockquote>');\n\n    // Ordered lists\n    html = html.replace(/^\\d+\\.\\s(.+)$/gim, '<li class=\"ordered\">$1</li>');\n    html = html.replace(/(<li class=\"ordered\">.*<\\/li>)/s, '<ol>$1</ol>');\n\n    // Unordered lists\n    html = html.replace(/^[-*]\\s(.+)$/gim, '<li class=\"unordered\">$1</li>');\n    html = html.replace(/(<li class=\"unordered\">.*<\\/li>)/s, '<ul>$1</ul>');\n\n    // Line breaks\n    html = html.replace(/\\n/g, '<br />');\n\n    return html;\n  };\n\n  const highlightCode = (code: string, lang: string): string => {\n    const keywords = ['function', 'const', 'let', 'var', 'return', 'if', 'else', 'for', 'while', 'class', 'import', 'export', 'default', 'async', 'await'];\n    const strings = /(\".*?\"|'.*?'|`.*?`)/g;\n    const comments = /(\\/\\/.*$|\\/\\*[\\s\\S]*?\\*\\/)/gm;\n    const numbers = /\\b(\\d+)\\b/g;\n\n    let highlighted = code\n      .replace(/</g, '&lt;')\n      .replace(/>/g, '&gt;');\n\n    // Comments\n    highlighted = highlighted.replace(comments, '<span class=\"token-comment\">$1</span>');\n\n    // Strings\n    highlighted = highlighted.replace(strings, '<span class=\"token-string\">$1</span>');\n\n    // Keywords\n    keywords.forEach(keyword => {\n      const regex = new RegExp(`\\\\b(${keyword})\\\\b`, 'g');\n      highlighted = highlighted.replace(regex, '<span class=\"token-keyword\">$1</span>');\n    });\n\n    // Numbers\n    highlighted = highlighted.replace(numbers, '<span class=\"token-number\">$1</span>');\n\n    // Functions\n    highlighted = highlighted.replace(/\\b([a-zA-Z_]\\w*)\\s*\\(/g, '<span class=\"token-function\">$1</span>(');\n\n    return highlighted;\n  };\n\n  return (\n    <div className=\"min-h-screen bg-[#0d1117] text-gray-100 p-8\">\n      <div className=\"max-w-7xl mx-auto\">\n        <div className=\"mb-8 flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-4xl font-bold bg-gradient-to-r from-blue-400 via-purple-400 to-pink-400 bg-clip-text text-transparent\">\n              Premium Markdown Editor\n            </h1>\n            <p className=\"text-gray-400 mt-2\">Write with style, preview in real-time</p>\n          </div>\n          <Button\n            onClick={() => setShowPreview(!showPreview)}\n            className=\"bg-[#21262d] hover:bg-[#30363d] text-gray-100 border border-[#30363d]\"\n          >\n            {showPreview ? (\n              <>\n                <EyeOff className=\"w-4 h-4 mr-2\" />\n                Hide Preview\n              </>\n            ) : (\n              <>\n                <Eye className=\"w-4 h-4 mr-2\" />\n                Show Preview\n              </>\n            )}\n          </Button>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n          {/* Editor */}\n          <div className=\"relative\" ref={editorRef}>\n            <div className=\"bg-[#161b22] rounded-lg border border-[#30363d] overflow-hidden shadow-2xl\">\n              <div className=\"bg-[#0d1117] px-4 py-3 border-b border-[#30363d] flex items-center justify-between\">\n                <div className=\"flex items-center gap-2\">\n                  <div className=\"w-3 h-3 rounded-full bg-red-500\"></div>\n                  <div className=\"w-3 h-3 rounded-full bg-yellow-500\"></div>\n                  <div className=\"w-3 h-3 rounded-full bg-green-500\"></div>\n                </div>\n                <span className=\"text-sm text-gray-400\">editor.md</span>\n              </div>\n              <textarea\n                ref={textareaRef}\n                value={markdown}\n                onChange={(e) => setMarkdown(e.target.value)}\n                onSelect={handleSelection}\n                onBlur={() => setTimeout(() => setShowToolbar(false), 200)}\n                className=\"w-full h-[600px] bg-[#0d1117] text-gray-100 p-6 font-mono text-sm resize-none focus:outline-none leading-relaxed\"\n                placeholder=\"Start writing your markdown...\"\n                style={{\n                  caretColor: '#58a6ff',\n                }}\n              />\n            </div>\n\n            {/* Floating Toolbar */}\n            <AnimatePresence>\n              {showToolbar && (\n                <motion.div\n                  initial={{ opacity: 0, y: 10, scale: 0.95 }}\n                  animate={{ opacity: 1, y: 0, scale: 1 }}\n                  exit={{ opacity: 0, y: 10, scale: 0.95 }}\n                  transition={{ duration: 0.2 }}\n                  className=\"fixed z-50 bg-[#161b22] border border-[#30363d] rounded-lg shadow-2xl p-2 flex items-center gap-1\"\n                  style={{\n                    left: `${toolbarPosition.x}px`,\n                    top: `${toolbarPosition.y}px`,\n                    transform: 'translateX(-50%)',\n                  }}\n                >\n                  <ToolbarButton icon={<Bold className=\"w-4 h-4\" />} onClick={() => insertMarkdown('**', '**')} />\n                  <ToolbarButton icon={<Italic className=\"w-4 h-4\" />} onClick={() => insertMarkdown('*', '*')} />\n                  <ToolbarButton icon={<Code className=\"w-4 h-4\" />} onClick={() => insertMarkdown('`', '`')} />\n                  <div className=\"w-px h-6 bg-[#30363d] mx-1\"></div>\n                  <ToolbarButton icon={<Heading1 className=\"w-4 h-4\" />} onClick={() => insertMarkdown('# ')} />\n                  <ToolbarButton icon={<Heading2 className=\"w-4 h-4\" />} onClick={() => insertMarkdown('## ')} />\n                  <div className=\"w-px h-6 bg-[#30363d] mx-1\"></div>\n                  <ToolbarButton icon={<List className=\"w-4 h-4\" />} onClick={() => insertMarkdown('- ')} />\n                  <ToolbarButton icon={<ListOrdered className=\"w-4 h-4\" />} onClick={() => insertMarkdown('1. ')} />\n                  <ToolbarButton icon={<Quote className=\"w-4 h-4\" />} onClick={() => insertMarkdown('> ')} />\n                  <div className=\"w-px h-6 bg-[#30363d] mx-1\"></div>\n                  <ToolbarButton icon={<Link2 className=\"w-4 h-4\" />} onClick={() => insertMarkdown('[', '](url)')} />\n                  <ToolbarButton icon={<Image className=\"w-4 h-4\" />} onClick={() => insertMarkdown('![alt](', ')')} />\n                </motion.div>\n              )}\n            </AnimatePresence>\n          </div>\n\n          {/* Preview */}\n          <AnimatePresence mode=\"wait\">\n            {showPreview && (\n              <motion.div\n                initial={{ opacity: 0, x: 20 }}\n                animate={{ opacity: 1, x: 0 }}\n                exit={{ opacity: 0, x: 20 }}\n                transition={{ duration: 0.3 }}\n                className=\"bg-[#161b22] rounded-lg border border-[#30363d] overflow-hidden shadow-2xl\"\n              >\n                <div className=\"bg-[#0d1117] px-4 py-3 border-b border-[#30363d] flex items-center justify-between\">\n                  <span className=\"text-sm text-gray-400\">Preview</span>\n                  <div className=\"flex items-center gap-2\">\n                    <div className=\"w-2 h-2 rounded-full bg-green-500 animate-pulse\"></div>\n                    <span className=\"text-xs text-gray-500\">Live</span>\n                  </div>\n                </div>\n                <motion.div\n                  key={markdown}\n                  initial={{ opacity: 0 }}\n                  animate={{ opacity: 1 }}\n                  transition={{ duration: 0.2 }}\n                  className=\"p-6 h-[600px] overflow-y-auto markdown-preview\"\n                  dangerouslySetInnerHTML={{ __html: parseMarkdown(markdown) }}\n                />\n              </motion.div>\n            )}\n          </AnimatePresence>\n        </div>\n      </div>\n\n      <style jsx global>{`\n        .markdown-preview h1 {\n          font-size: 2.5rem;\n          font-weight: bold;\n          margin-bottom: 1rem;\n          color: #58a6ff;\n          border-bottom: 2px solid #30363d;\n          padding-bottom: 0.5rem;\n        }\n\n        .markdown-preview h2 {\n          font-size: 2rem;\n          font-weight: bold;\n          margin-top: 2rem;\n          margin-bottom: 1rem;\n          color: #79c0ff;\n          border-bottom: 1px solid #30363d;\n          padding-bottom: 0.5rem;\n        }\n\n        .markdown-preview h3 {\n          font-size: 1.5rem;\n          font-weight: bold;\n          margin-top: 1.5rem;\n          margin-bottom: 0.75rem;\n          color: #a5d6ff;\n        }\n\n        .markdown-preview strong {\n          color: #ffa657;\n          font-weight: 600;\n        }\n\n        .markdown-preview em {\n          color: #ff7b72;\n          font-style: italic;\n        }\n\n        .markdown-preview a {\n          color: #58a6ff;\n          text-decoration: underline;\n          transition: color 0.2s;\n        }\n\n        .markdown-preview a:hover {\n          color: #79c0ff;\n        }\n\n        .markdown-preview img {\n          max-width: 100%;\n          border-radius: 8px;\n          margin: 1rem 0;\n          border: 1px solid #30363d;\n        }\n\n        .markdown-preview blockquote {\n          border-left: 4px solid #58a6ff;\n          padding-left: 1rem;\n          margin: 1rem 0;\n          color: #8b949e;\n          font-style: italic;\n          background: #0d1117;\n          padding: 1rem;\n          border-radius: 4px;\n        }\n\n        .markdown-preview ul {\n          list-style: none;\n          margin: 1rem 0;\n          padding-left: 0;\n        }\n\n        .markdown-preview ul li {\n          position: relative;\n          padding-left: 1.5rem;\n          margin: 0.5rem 0;\n          color: #c9d1d9;\n        }\n\n        .markdown-preview ul li::before {\n          content: \"\u2022\";\n          position: absolute;\n          left: 0;\n          color: #58a6ff;\n          font-weight: bold;\n        }\n\n        .markdown-preview ol {\n          list-style: none;\n          counter-reset: item;\n          margin: 1rem 0;\n          padding-left: 0;\n        }\n\n        .markdown-preview ol li {\n          position: relative;\n          padding-left: 2rem;\n          margin: 0.5rem 0;\n          counter-increment: item;\n          color: #c9d1d9;\n        }\n\n        .markdown-preview ol li::before {\n          content: counter(item) \".\";\n          position: absolute;\n          left: 0;\n          color: #58a6ff;\n          font-weight: bold;\n        }\n\n        .markdown-preview .inline-code {\n          background: #1f2937;\n          color: #ff7b72;\n          padding: 0.2rem 0.4rem;\n          border-radius: 4px;\n          font-family: 'Courier New', monospace;\n          font-size: 0.9em;\n          border: 1px solid #30363d;\n        }\n\n        .markdown-preview .code-block {\n          background: #0d1117;\n          border: 1px solid #30363d;\n          border-radius: 8px;\n          padding: 1.5rem;\n          margin: 1.5rem 0;\n          overflow-x: auto;\n          box-shadow: 0 4px 6px rgba(0, 0, 0, 0.3);\n        }\n\n        .markdown-preview .code-block code {\n          font-family: 'Courier New', monospace;\n          font-size: 0.9rem;\n          line-height: 1.6;\n          color: #c9d1d9;\n          display: block;\n        }\n\n        .markdown-preview .token-keyword {\n          color: #ff7b72;\n          font-weight: 600;\n        }\n\n        .markdown-preview .token-string {\n          color: #a5d6ff;\n        }\n\n        .markdown-preview .token-comment {\n          color: #8b949e;\n          font-style: italic;\n        }\n\n        .markdown-preview .token-number {\n          color: #79c0ff;\n        }\n\n        .markdown-preview .token-function {\n          color: #d2a8ff;\n          font-weight: 500;\n        }\n\n        .markdown-preview br {\n          display: block;\n          content: \"\";\n          margin: 0.5rem 0;\n        }\n\n        .markdown-preview p {\n          margin: 1rem 0;\n          line-height: 1.7;\n          color: #c9d1d9;\n        }\n\n        /* Scrollbar styling */\n        .markdown-preview::-webkit-scrollbar,\n        textarea::-webkit-scrollbar {\n          width: 8px;\n        }\n\n        .markdown-preview::-webkit-scrollbar-track,\n        textarea::-webkit-scrollbar-track {\n          background: #0d1117;\n        }\n\n        .markdown-preview::-webkit-scrollbar-thumb,\n        textarea::-webkit-scrollbar-thumb {\n          background: #30363d;\n          border-radius: 4px;\n        }\n\n        .markdown-preview::-webkit-scrollbar-thumb:hover,\n        textarea::-webkit-scrollbar-thumb:hover {\n          background: #484f58;\n        }\n      `}</style>\n    </div>\n  );\n}\n\nfunction ToolbarButton({ icon, onClick }: { icon: React.ReactNode; onClick: () => void }) {\n  return (\n    <motion.button\n      whileHover={{ scale: 1.1, backgroundColor: '#30363d' }}\n      whileTap={{ scale: 0.95 }}\n      onClick={onClick}\n      className=\"p-2 rounded hover:bg-[#30363d] text-gray-400 hover:text-gray-100 transition-colors\"\n    >\n      {icon}\n    </motion.button>\n  );\n}",
  "error": null,
  "overall_score": 51,
  "code_quality_score": 16,
  "architecture_score": 14,
  "performance_score": 10,
  "accessibility_score": 11,
  "metadata": {
    "document_id": "eval_room_0aa08db5b757",
    "prompt_category": "productivity",
    "prompt_complexity": 8.0
  },
  "raw_response": {
    "document_id": "eval_room_0aa08db5b757",
    "mode": "sequential",
    "prompt": "Create a premium markdown editor with dark theme, syntax highlighting with vibrant colors, smooth live preview transitions, floating toolbar with hover effects, and code block styling like VS Code",
    "content": "import { useState, useEffect, useRef } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Bold, Italic, Code, List, ListOrdered, Link2, Image, Eye, EyeOff, Heading1, Heading2, Quote } from 'lucide-react';\nimport { motion, AnimatePresence } from 'framer-motion';\n\nexport default function MarkdownEditor() {\n  const [markdown, setMarkdown] = useState(`# Welcome to Premium Markdown Editor\n\n## Features\n- **Bold** and *italic* text\n- \\`Inline code\\` with syntax highlighting\n- Code blocks with VS Code styling\n- Live preview with smooth transitions\n\n### Code Example\n\n\\`\\`\\`javascript\nfunction greet(name) {\n  console.log(\\`Hello, \\${name}!\\`);\n  return true;\n}\n\nconst user = \"Developer\";\ngreet(user);\n\\`\\`\\`\n\n### Lists\n1. First item\n2. Second item\n3. Third item\n\n- Bullet point\n- Another point\n  - Nested item\n\n> This is a blockquote with **bold** text and *italic* text.\n\n[Link to example](https://example.com)\n\n![Image description](https://via.placeholder.com/400x200)\n`);\n  \n  const [showPreview, setShowPreview] = useState(true);\n  const [showToolbar, setShowToolbar] = useState(false);\n  const [toolbarPosition, setToolbarPosition] = useState({ x: 0, y: 0 });\n  const textareaRef = useRef<HTMLTextAreaElement>(null);\n  const editorRef = useRef<HTMLDivElement>(null);\n\n  const handleSelection = () => {\n    const textarea = textareaRef.current;\n    if (!textarea) return;\n\n    const start = textarea.selectionStart;\n    const end = textarea.selectionEnd;\n\n    if (start !== end) {\n      const rect = textarea.getBoundingClientRect();\n      const lineHeight = 24;\n      const lines = textarea.value.substring(0, start).split('\\n').length;\n      \n      setToolbarPosition({\n        x: rect.left + (rect.width / 2),\n        y: rect.top + (lines * lineHeight) - 60\n      });\n      setShowToolbar(true);\n    } else {\n      setShowToolbar(false);\n    }\n  };\n\n  const insertMarkdown = (before: string, after: string = '') => {\n    const textarea = textareaRef.current;\n    if (!textarea) return;\n\n    const start = textarea.selectionStart;\n    const end = textarea.selectionEnd;\n    const selectedText = markdown.substring(start, end);\n    const newText = markdown.substring(0, start) + before + selectedText + after + markdown.substring(end);\n    \n    setMarkdown(newText);\n    \n    setTimeout(() => {\n      textarea.focus();\n      textarea.setSelectionRange(start + before.length, end + before.length);\n    }, 0);\n  };\n\n  const parseMarkdown = (text: string): string => {\n    let html = text;\n\n    // Code blocks with syntax highlighting\n    html = html.replace(/```(\\w+)?\\n([\\s\\S]*?)```/g, (_, lang, code) => {\n      const highlighted = highlightCode(code.trim(), lang || 'javascript');\n      return `<pre class=\"code-block\"><code class=\"language-${lang || 'javascript'}\">${highlighted}</code></pre>`;\n    });\n\n    // Inline code\n    html = html.replace(/`([^`]+)`/g, '<code class=\"inline-code\">$1</code>');\n\n    // Headers\n    html = html.replace(/^### (.*$)/gim, '<h3>$1</h3>');\n    html = html.replace(/^## (.*$)/gim, '<h2>$1</h2>');\n    html = html.replace(/^# (.*$)/gim, '<h1>$1</h1>');\n\n    // Bold\n    html = html.replace(/\\*\\*(.+?)\\*\\*/g, '<strong>$1</strong>');\n\n    // Italic\n    html = html.replace(/\\*(.+?)\\*/g, '<em>$1</em>');\n\n    // Links\n    html = html.replace(/\\[([^\\]]+)\\]\\(([^)]+)\\)/g, '<a href=\"$2\" target=\"_blank\" rel=\"noopener noreferrer\">$1</a>');\n\n    // Images\n    html = html.replace(/!\\[([^\\]]*)\\]\\(([^)]+)\\)/g, '<img src=\"$2\" alt=\"$1\" />');\n\n    // Blockquotes\n    html = html.replace(/^> (.+)$/gim, '<blockquote>$1</blockquote>');\n\n    // Ordered lists\n    html = html.replace(/^\\d+\\.\\s(.+)$/gim, '<li class=\"ordered\">$1</li>');\n    html = html.replace(/(<li class=\"ordered\">.*<\\/li>)/s, '<ol>$1</ol>');\n\n    // Unordered lists\n    html = html.replace(/^[-*]\\s(.+)$/gim, '<li class=\"unordered\">$1</li>');\n    html = html.replace(/(<li class=\"unordered\">.*<\\/li>)/s, '<ul>$1</ul>');\n\n    // Line breaks\n    html = html.replace(/\\n/g, '<br />');\n\n    return html;\n  };\n\n  const highlightCode = (code: string, lang: string): string => {\n    const keywords = ['function', 'const', 'let', 'var', 'return', 'if', 'else', 'for', 'while', 'class', 'import', 'export', 'default', 'async', 'await'];\n    const strings = /(\".*?\"|'.*?'|`.*?`)/g;\n    const comments = /(\\/\\/.*$|\\/\\*[\\s\\S]*?\\*\\/)/gm;\n    const numbers = /\\b(\\d+)\\b/g;\n\n    let highlighted = code\n      .replace(/</g, '&lt;')\n      .replace(/>/g, '&gt;');\n\n    // Comments\n    highlighted = highlighted.replace(comments, '<span class=\"token-comment\">$1</span>');\n\n    // Strings\n    highlighted = highlighted.replace(strings, '<span class=\"token-string\">$1</span>');\n\n    // Keywords\n    keywords.forEach(keyword => {\n      const regex = new RegExp(`\\\\b(${keyword})\\\\b`, 'g');\n      highlighted = highlighted.replace(regex, '<span class=\"token-keyword\">$1</span>');\n    });\n\n    // Numbers\n    highlighted = highlighted.replace(numbers, '<span class=\"token-number\">$1</span>');\n\n    // Functions\n    highlighted = highlighted.replace(/\\b([a-zA-Z_]\\w*)\\s*\\(/g, '<span class=\"token-function\">$1</span>(');\n\n    return highlighted;\n  };\n\n  return (\n    <div className=\"min-h-screen bg-[#0d1117] text-gray-100 p-8\">\n      <div className=\"max-w-7xl mx-auto\">\n        <div className=\"mb-8 flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-4xl font-bold bg-gradient-to-r from-blue-400 via-purple-400 to-pink-400 bg-clip-text text-transparent\">\n              Premium Markdown Editor\n            </h1>\n            <p className=\"text-gray-400 mt-2\">Write with style, preview in real-time</p>\n          </div>\n          <Button\n            onClick={() => setShowPreview(!showPreview)}\n            className=\"bg-[#21262d] hover:bg-[#30363d] text-gray-100 border border-[#30363d]\"\n          >\n            {showPreview ? (\n              <>\n                <EyeOff className=\"w-4 h-4 mr-2\" />\n                Hide Preview\n              </>\n            ) : (\n              <>\n                <Eye className=\"w-4 h-4 mr-2\" />\n                Show Preview\n              </>\n            )}\n          </Button>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n          {/* Editor */}\n          <div className=\"relative\" ref={editorRef}>\n            <div className=\"bg-[#161b22] rounded-lg border border-[#30363d] overflow-hidden shadow-2xl\">\n              <div className=\"bg-[#0d1117] px-4 py-3 border-b border-[#30363d] flex items-center justify-between\">\n                <div className=\"flex items-center gap-2\">\n                  <div className=\"w-3 h-3 rounded-full bg-red-500\"></div>\n                  <div className=\"w-3 h-3 rounded-full bg-yellow-500\"></div>\n                  <div className=\"w-3 h-3 rounded-full bg-green-500\"></div>\n                </div>\n                <span className=\"text-sm text-gray-400\">editor.md</span>\n              </div>\n              <textarea\n                ref={textareaRef}\n                value={markdown}\n                onChange={(e) => setMarkdown(e.target.value)}\n                onSelect={handleSelection}\n                onBlur={() => setTimeout(() => setShowToolbar(false), 200)}\n                className=\"w-full h-[600px] bg-[#0d1117] text-gray-100 p-6 font-mono text-sm resize-none focus:outline-none leading-relaxed\"\n                placeholder=\"Start writing your markdown...\"\n                style={{\n                  caretColor: '#58a6ff',\n                }}\n              />\n            </div>\n\n            {/* Floating Toolbar */}\n            <AnimatePresence>\n              {showToolbar && (\n                <motion.div\n                  initial={{ opacity: 0, y: 10, scale: 0.95 }}\n                  animate={{ opacity: 1, y: 0, scale: 1 }}\n                  exit={{ opacity: 0, y: 10, scale: 0.95 }}\n                  transition={{ duration: 0.2 }}\n                  className=\"fixed z-50 bg-[#161b22] border border-[#30363d] rounded-lg shadow-2xl p-2 flex items-center gap-1\"\n                  style={{\n                    left: `${toolbarPosition.x}px`,\n                    top: `${toolbarPosition.y}px`,\n                    transform: 'translateX(-50%)',\n                  }}\n                >\n                  <ToolbarButton icon={<Bold className=\"w-4 h-4\" />} onClick={() => insertMarkdown('**', '**')} />\n                  <ToolbarButton icon={<Italic className=\"w-4 h-4\" />} onClick={() => insertMarkdown('*', '*')} />\n                  <ToolbarButton icon={<Code className=\"w-4 h-4\" />} onClick={() => insertMarkdown('`', '`')} />\n                  <div className=\"w-px h-6 bg-[#30363d] mx-1\"></div>\n                  <ToolbarButton icon={<Heading1 className=\"w-4 h-4\" />} onClick={() => insertMarkdown('# ')} />\n                  <ToolbarButton icon={<Heading2 className=\"w-4 h-4\" />} onClick={() => insertMarkdown('## ')} />\n                  <div className=\"w-px h-6 bg-[#30363d] mx-1\"></div>\n                  <ToolbarButton icon={<List className=\"w-4 h-4\" />} onClick={() => insertMarkdown('- ')} />\n                  <ToolbarButton icon={<ListOrdered className=\"w-4 h-4\" />} onClick={() => insertMarkdown('1. ')} />\n                  <ToolbarButton icon={<Quote className=\"w-4 h-4\" />} onClick={() => insertMarkdown('> ')} />\n                  <div className=\"w-px h-6 bg-[#30363d] mx-1\"></div>\n                  <ToolbarButton icon={<Link2 className=\"w-4 h-4\" />} onClick={() => insertMarkdown('[', '](url)')} />\n                  <ToolbarButton icon={<Image className=\"w-4 h-4\" />} onClick={() => insertMarkdown('![alt](', ')')} />\n                </motion.div>\n              )}\n            </AnimatePresence>\n          </div>\n\n          {/* Preview */}\n          <AnimatePresence mode=\"wait\">\n            {showPreview && (\n              <motion.div\n                initial={{ opacity: 0, x: 20 }}\n                animate={{ opacity: 1, x: 0 }}\n                exit={{ opacity: 0, x: 20 }}\n                transition={{ duration: 0.3 }}\n                className=\"bg-[#161b22] rounded-lg border border-[#30363d] overflow-hidden shadow-2xl\"\n              >\n                <div className=\"bg-[#0d1117] px-4 py-3 border-b border-[#30363d] flex items-center justify-between\">\n                  <span className=\"text-sm text-gray-400\">Preview</span>\n                  <div className=\"flex items-center gap-2\">\n                    <div className=\"w-2 h-2 rounded-full bg-green-500 animate-pulse\"></div>\n                    <span className=\"text-xs text-gray-500\">Live</span>\n                  </div>\n                </div>\n                <motion.div\n                  key={markdown}\n                  initial={{ opacity: 0 }}\n                  animate={{ opacity: 1 }}\n                  transition={{ duration: 0.2 }}\n                  className=\"p-6 h-[600px] overflow-y-auto markdown-preview\"\n                  dangerouslySetInnerHTML={{ __html: parseMarkdown(markdown) }}\n                />\n              </motion.div>\n            )}\n          </AnimatePresence>\n        </div>\n      </div>\n\n      <style jsx global>{`\n        .markdown-preview h1 {\n          font-size: 2.5rem;\n          font-weight: bold;\n          margin-bottom: 1rem;\n          color: #58a6ff;\n          border-bottom: 2px solid #30363d;\n          padding-bottom: 0.5rem;\n        }\n\n        .markdown-preview h2 {\n          font-size: 2rem;\n          font-weight: bold;\n          margin-top: 2rem;\n          margin-bottom: 1rem;\n          color: #79c0ff;\n          border-bottom: 1px solid #30363d;\n          padding-bottom: 0.5rem;\n        }\n\n        .markdown-preview h3 {\n          font-size: 1.5rem;\n          font-weight: bold;\n          margin-top: 1.5rem;\n          margin-bottom: 0.75rem;\n          color: #a5d6ff;\n        }\n\n        .markdown-preview strong {\n          color: #ffa657;\n          font-weight: 600;\n        }\n\n        .markdown-preview em {\n          color: #ff7b72;\n          font-style: italic;\n        }\n\n        .markdown-preview a {\n          color: #58a6ff;\n          text-decoration: underline;\n          transition: color 0.2s;\n        }\n\n        .markdown-preview a:hover {\n          color: #79c0ff;\n        }\n\n        .markdown-preview img {\n          max-width: 100%;\n          border-radius: 8px;\n          margin: 1rem 0;\n          border: 1px solid #30363d;\n        }\n\n        .markdown-preview blockquote {\n          border-left: 4px solid #58a6ff;\n          padding-left: 1rem;\n          margin: 1rem 0;\n          color: #8b949e;\n          font-style: italic;\n          background: #0d1117;\n          padding: 1rem;\n          border-radius: 4px;\n        }\n\n        .markdown-preview ul {\n          list-style: none;\n          margin: 1rem 0;\n          padding-left: 0;\n        }\n\n        .markdown-preview ul li {\n          position: relative;\n          padding-left: 1.5rem;\n          margin: 0.5rem 0;\n          color: #c9d1d9;\n        }\n\n        .markdown-preview ul li::before {\n          content: \"\u2022\";\n          position: absolute;\n          left: 0;\n          color: #58a6ff;\n          font-weight: bold;\n        }\n\n        .markdown-preview ol {\n          list-style: none;\n          counter-reset: item;\n          margin: 1rem 0;\n          padding-left: 0;\n        }\n\n        .markdown-preview ol li {\n          position: relative;\n          padding-left: 2rem;\n          margin: 0.5rem 0;\n          counter-increment: item;\n          color: #c9d1d9;\n        }\n\n        .markdown-preview ol li::before {\n          content: counter(item) \".\";\n          position: absolute;\n          left: 0;\n          color: #58a6ff;\n          font-weight: bold;\n        }\n\n        .markdown-preview .inline-code {\n          background: #1f2937;\n          color: #ff7b72;\n          padding: 0.2rem 0.4rem;\n          border-radius: 4px;\n          font-family: 'Courier New', monospace;\n          font-size: 0.9em;\n          border: 1px solid #30363d;\n        }\n\n        .markdown-preview .code-block {\n          background: #0d1117;\n          border: 1px solid #30363d;\n          border-radius: 8px;\n          padding: 1.5rem;\n          margin: 1.5rem 0;\n          overflow-x: auto;\n          box-shadow: 0 4px 6px rgba(0, 0, 0, 0.3);\n        }\n\n        .markdown-preview .code-block code {\n          font-family: 'Courier New', monospace;\n          font-size: 0.9rem;\n          line-height: 1.6;\n          color: #c9d1d9;\n          display: block;\n        }\n\n        .markdown-preview .token-keyword {\n          color: #ff7b72;\n          font-weight: 600;\n        }\n\n        .markdown-preview .token-string {\n          color: #a5d6ff;\n        }\n\n        .markdown-preview .token-comment {\n          color: #8b949e;\n          font-style: italic;\n        }\n\n        .markdown-preview .token-number {\n          color: #79c0ff;\n        }\n\n        .markdown-preview .token-function {\n          color: #d2a8ff;\n          font-weight: 500;\n        }\n\n        .markdown-preview br {\n          display: block;\n          content: \"\";\n          margin: 0.5rem 0;\n        }\n\n        .markdown-preview p {\n          margin: 1rem 0;\n          line-height: 1.7;\n          color: #c9d1d9;\n        }\n\n        /* Scrollbar styling */\n        .markdown-preview::-webkit-scrollbar,\n        textarea::-webkit-scrollbar {\n          width: 8px;\n        }\n\n        .markdown-preview::-webkit-scrollbar-track,\n        textarea::-webkit-scrollbar-track {\n          background: #0d1117;\n        }\n\n        .markdown-preview::-webkit-scrollbar-thumb,\n        textarea::-webkit-scrollbar-thumb {\n          background: #30363d;\n          border-radius: 4px;\n        }\n\n        .markdown-preview::-webkit-scrollbar-thumb:hover,\n        textarea::-webkit-scrollbar-thumb:hover {\n          background: #484f58;\n        }\n      `}</style>\n    </div>\n  );\n}\n\nfunction ToolbarButton({ icon, onClick }: { icon: React.ReactNode; onClick: () => void }) {\n  return (\n    <motion.button\n      whileHover={{ scale: 1.1, backgroundColor: '#30363d' }}\n      whileTap={{ scale: 0.95 }}\n      onClick={onClick}\n      className=\"p-2 rounded hover:bg-[#30363d] text-gray-400 hover:text-gray-100 transition-colors\"\n    >\n      {icon}\n    </motion.button>\n  );\n}",
    "error": null,
    "elapsed_time": 79.33913850784302,
    "success": true
  }
}