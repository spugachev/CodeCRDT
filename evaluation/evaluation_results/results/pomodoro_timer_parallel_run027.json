{
  "prompt_id": "pomodoro_timer",
  "prompt_name": "Pomodoro Timer",
  "mode": "parallel",
  "run_number": 27,
  "timestamp": "2025-10-13T21:34:24.788582",
  "response_time": 64.30864071846008,
  "total_tokens": null,
  "response_content": "import { useState, useCallback, useEffect, useRef } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Play, Pause, RotateCcw, Settings } from 'lucide-react';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport confetti from 'canvas-confetti';\n\ninterface TimerMode {\n  type: 'work' | 'shortBreak' | 'longBreak';\n  duration: number;\n  label: string;\n}\n\ninterface TimerSettings {\n  workDuration: number;\n  shortBreakDuration: number;\n  longBreakDuration: number;\n  longBreakInterval: number;\n}\n\ninterface Particle {\n  id: number;\n  x: number;\n  y: number;\n  size: number;\n  duration: number;\n  delay: number;\n}\n\nconst defaultSettings: TimerSettings = {\n  workDuration: 25,\n  shortBreakDuration: 5,\n  longBreakDuration: 15,\n  longBreakInterval: 4\n};\n\nconst timerModes: Record<string, { colors: string; gradient: string }> = {\n  work: {\n    colors: 'from-rose-500 via-pink-500 to-purple-500',\n    gradient: 'bg-gradient-to-br from-rose-500/20 via-pink-500/20 to-purple-500/20'\n  },\n  shortBreak: {\n    colors: 'from-cyan-500 via-blue-500 to-indigo-500',\n    gradient: 'bg-gradient-to-br from-cyan-500/20 via-blue-500/20 to-indigo-500/20'\n  },\n  longBreak: {\n    colors: 'from-emerald-500 via-teal-500 to-cyan-500',\n    gradient: 'bg-gradient-to-br from-emerald-500/20 via-teal-500/20 to-cyan-500/20'\n  }\n};\n\nexport default function PomodoroTimer() {\n  const [settings, setSettings] = useState<TimerSettings>(defaultSettings);\n  const [currentMode, setCurrentMode] = useState<'work' | 'shortBreak' | 'longBreak'>('work');\n  const [timeLeft, setTimeLeft] = useState(settings.workDuration * 60);\n  const [isRunning, setIsRunning] = useState(false);\n  const [completedPomodoros, setCompletedPomodoros] = useState(0);\n  const [showSettings, setShowSettings] = useState(false);\n  const [showCompletion, setShowCompletion] = useState(false);\n  const [particles, setParticles] = useState<Particle[]>([]);\n  \n  const intervalRef = useRef<NodeJS.Timeout | null>(null);\n  const audioRef = useRef<HTMLAudioElement | null>(null);\n\n  const totalTime = currentMode === 'work' \n    ? settings.workDuration * 60 \n    : currentMode === 'shortBreak'\n    ? settings.shortBreakDuration * 60\n    : settings.longBreakDuration * 60;\n\n  const progress = ((totalTime - timeLeft) / totalTime) * 100;\n\n  useEffect(() => {\n    const generatedParticles: Particle[] = Array.from({ length: 50 }, (_, i) => ({\n      id: i,\n      x: Math.random() * 100,\n      y: Math.random() * 100,\n      size: Math.random() * 4 + 2,\n      duration: Math.random() * 20 + 10,\n      delay: Math.random() * 5\n    }));\n    setParticles(generatedParticles);\n  }, []);\n\n  useEffect(() => {\n    if (isRunning && timeLeft > 0) {\n      intervalRef.current = setInterval(() => {\n        setTimeLeft((prev) => {\n          if (prev <= 1) {\n            setIsRunning(false);\n            setShowCompletion(true);\n            \n            // Play completion sound\n            if (audioRef.current) {\n              audioRef.current.play().catch(() => {});\n            }\n            \n            // Auto-switch to next mode\n            if (currentMode === 'work') {\n              setCompletedPomodoros((prev) => prev + 1);\n              const nextPomodoros = completedPomodoros + 1;\n              \n              if (nextPomodoros % settings.longBreakInterval === 0) {\n                setCurrentMode('longBreak');\n                return settings.longBreakDuration * 60;\n              } else {\n                setCurrentMode('shortBreak');\n                return settings.shortBreakDuration * 60;\n              }\n            } else {\n              setCurrentMode('work');\n              return settings.workDuration * 60;\n            }\n          }\n          return prev - 1;\n        });\n      }, 1000);\n    } else {\n      if (intervalRef.current) {\n        clearInterval(intervalRef.current);\n        intervalRef.current = null;\n      }\n    }\n    \n    return () => {\n      if (intervalRef.current) {\n        clearInterval(intervalRef.current);\n      }\n    };\n  }, [isRunning, timeLeft, currentMode, completedPomodoros, settings]);\n\n  const handlePlayPause = useCallback(() => {\n    setIsRunning(!isRunning);\n  }, [isRunning]);\n\n  const handleReset = useCallback(() => {\n\n    setIsRunning(false);\n    if (intervalRef.current) {\n      clearInterval(intervalRef.current);\n      intervalRef.current = null;\n    }\n    const duration = currentMode === 'work' \n      ? settings.workDuration * 60 \n      : currentMode === 'shortBreak'\n      ? settings.shortBreakDuration * 60\n      : settings.longBreakDuration * 60;\n    setTimeLeft(duration);\n  }, [currentMode, settings]);\n\n  const handleModeSwitch = useCallback((mode: 'work' | 'shortBreak' | 'longBreak') => {\n    setIsRunning(false);\n    setCurrentMode(mode);\n    const newDuration = mode === 'work' \n      ? settings.workDuration * 60 \n      : mode === 'shortBreak'\n      ? settings.shortBreakDuration * 60\n      : settings.longBreakDuration * 60;\n    setTimeLeft(newDuration);\n  }, [settings]);\n\n  const formatTime = useCallback((seconds: number): string => {\n    const mins = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;\n  }, []);\nfunction SettingsForm({ \n  settings, \n  onSave, \n  onCancel \n}: { \n  settings: TimerSettings; \n  onSave: (settings: TimerSettings) => void; \n  onCancel: () => void;\n}) {\n  const [localSettings, setLocalSettings] = useState<TimerSettings>(settings);\n\n  const handleInputChange = (field: keyof TimerSettings, value: string) => {\n    const numValue = parseInt(value) || 0;\n    setLocalSettings(prev => ({\n      ...prev,\n      [field]: numValue\n    }));\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"space-y-4\">\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"workDuration\" className=\"text-white text-sm font-medium\">\n            Work Duration (minutes)\n          </Label>\n          <Input\n            id=\"workDuration\"\n            type=\"number\"\n            min=\"1\"\n            max=\"60\"\n            value={localSettings.workDuration}\n            onChange={(e) => handleInputChange('workDuration', e.target.value)}\n            className=\"bg-white/10 border-white/20 text-white placeholder:text-white/50 focus:border-white/40 focus:ring-white/20\"\n          />\n        </div>\n\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"shortBreakDuration\" className=\"text-white text-sm font-medium\">\n            Short Break Duration (minutes)\n          </Label>\n          <Input\n            id=\"shortBreakDuration\"\n            type=\"number\"\n            min=\"1\"\n            max=\"30\"\n            value={localSettings.shortBreakDuration}\n            onChange={(e) => handleInputChange('shortBreakDuration', e.target.value)}\n            className=\"bg-white/10 border-white/20 text-white placeholder:text-white/50 focus:border-white/40 focus:ring-white/20\"\n          />\n        </div>\n\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"longBreakDuration\" className=\"text-white text-sm font-medium\">\n            Long Break Duration (minutes)\n          </Label>\n          <Input\n            id=\"longBreakDuration\"\n            type=\"number\"\n            min=\"1\"\n            max=\"60\"\n            value={localSettings.longBreakDuration}\n            onChange={(e) => handleInputChange('longBreakDuration', e.target.value)}\n            className=\"bg-white/10 border-white/20 text-white placeholder:text-white/50 focus:border-white/40 focus:ring-white/20\"\n          />\n        </div>\n\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"longBreakInterval\" className=\"text-white text-sm font-medium\">\n            Long Break Interval (pomodoros)\n          </Label>\n          <Input\n            id=\"longBreakInterval\"\n            type=\"number\"\n            min=\"2\"\n            max=\"10\"\n            value={localSettings.longBreakInterval}\n            onChange={(e) => handleInputChange('longBreakInterval', e.target.value)}\n            className=\"bg-white/10 border-white/20 text-white placeholder:text-white/50 focus:border-white/40 focus:ring-white/20\"\n          />\n        </div>\n      </div>\n\n      <div className=\"flex gap-3 pt-4\">\n        <Button\n          onClick={() => onSave(localSettings)}\n          className=\"flex-1 bg-white/20 hover:bg-white/30 text-white backdrop-blur-sm border border-white/30\"\n        >\n          Save Settings\n        </Button>\n        <Button\n          onClick={onCancel}\n          variant=\"ghost\"\n          className=\"flex-1 text-white hover:bg-white/20\"\n        >\n          Cancel\n        </Button>\n      </div>\n    </div>\n  );\n}\n  const handleSaveSettings = useCallback((newSettings: TimerSettings) => {\n    setSettings(newSettings);\n    setShowSettings(false);\n    // Reset timer with new settings\n    const newDuration = currentMode === 'work' \n      ? newSettings.workDuration * 60 \n      : currentMode === 'shortBreak'\n      ? newSettings.shortBreakDuration * 60\n      : newSettings.longBreakDuration * 60;\n    setTimeLeft(newDuration);\n    setIsRunning(false);\n  }, [currentMode]);\n\n  return (\n    <div className={`min-h-screen relative overflow-hidden transition-all duration-1000 ${timerModes[currentMode].gradient}`}>\n      <AnimatePresence>\n        {particles.map((particle) => (\n          <motion.div\n            key={particle.id}\n            className=\"absolute rounded-full bg-white/30 backdrop-blur-sm\"\n            style={{\n              left: `${particle.x}%`,\n              top: `${particle.y}%`,\n              width: particle.size,\n              height: particle.size,\n            }}\n            initial={{ opacity: 0, scale: 0 }}\n            animate={{\n              opacity: [0, 0.6, 0],\n              scale: [0, 1, 0],\n              y: [0, -100, -200],\n            }}\n            transition={{\n              duration: particle.duration,\n              delay: particle.delay,\n              repeat: Infinity,\n              ease: \"easeInOut\",\n            }}\n          />\n        ))}\n      </AnimatePresence>\n      \n      <div className=\"relative z-10 min-h-screen flex flex-col items-center justify-center p-8\">\n        <motion.div\n          initial={{ opacity: 0, y: -20 }}\n          animate={{ opacity: 1, y: 0 }}\n          className=\"w-full max-w-2xl\"\n        >\n          <div className=\"backdrop-blur-xl bg-white/10 rounded-3xl p-8 shadow-2xl border border-white/20\">\n            <div className=\"flex justify-between items-center mb-8\">\n              <h1 className=\"text-4xl font-bold text-white\">Pomodoro Timer</h1>\n              <Button\n                variant=\"ghost\"\n                size=\"icon\"\n                onClick={() => setShowSettings(!showSettings)}\n                className=\"text-white hover:bg-white/20\"\n              >\n                <Settings className=\"w-6 h-6\" />\n              </Button>\n            </div>\n\n            <div className=\"flex gap-2 mb-8\">\n              <Button\n                variant={currentMode === 'work' ? 'default' : 'ghost'}\n                onClick={() => handleModeSwitch('work')}\n                className={`flex-1 ${\n                  currentMode === 'work'\n                    ? 'bg-white text-rose-600 hover:bg-white/90'\n                    : 'text-white hover:bg-white/20'\n                }`}\n              >\n                Work\n              </Button>\n              <Button\n                variant={currentMode === 'shortBreak' ? 'default' : 'ghost'}\n                onClick={() => handleModeSwitch('shortBreak')}\n                className={`flex-1 ${\n                  currentMode === 'shortBreak'\n                    ? 'bg-white text-cyan-600 hover:bg-white/90'\n                    : 'text-white hover:bg-white/20'\n                }`}\n              >\n                Short Break\n              </Button>\n              <Button\n                variant={currentMode === 'longBreak' ? 'default' : 'ghost'}\n                onClick={() => handleModeSwitch('longBreak')}\n                className={`flex-1 ${\n                  currentMode === 'longBreak'\n                    ? 'bg-white text-emerald-600 hover:bg-white/90'\n                    : 'text-white hover:bg-white/20'\n                }`}\n              >\n                Long Break\n              </Button>\n            </div>\n\n            <div className=\"flex justify-center items-center my-12\">\n              <div className=\"relative\">\n                <svg className=\"w-80 h-80 transform -rotate-90\" viewBox=\"0 0 320 320\">\n                  {/* Background circle */}\n                  <circle\n                    cx=\"160\"\n                    cy=\"160\"\n                    r=\"140\"\n                    stroke=\"rgba(255, 255, 255, 0.1)\"\n                    strokeWidth=\"12\"\n                    fill=\"none\"\n                  />\n                  {/* Progress circle */}\n                  <motion.circle\n                    cx=\"160\"\n                    cy=\"160\"\n                    r=\"140\"\n                    stroke=\"url(#gradient)\"\n                    strokeWidth=\"12\"\n                    fill=\"none\"\n                    strokeLinecap=\"round\"\n                    strokeDasharray={2 * Math.PI * 140}\n                    strokeDashoffset={2 * Math.PI * 140 * (1 - progress / 100)}\n                    initial={{ strokeDashoffset: 2 * Math.PI * 140 }}\n                    animate={{ strokeDashoffset: 2 * Math.PI * 140 * (1 - progress / 100) }}\n                    transition={{ duration: 0.5, ease: \"easeInOut\" }}\n                  />\n                  <defs>\n                    <linearGradient id=\"gradient\" x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"100%\">\n                      <stop offset=\"0%\" stopColor=\"rgba(255, 255, 255, 0.9)\" />\n                      <stop offset=\"100%\" stopColor=\"rgba(255, 255, 255, 0.6)\" />\n                    </linearGradient>\n                  </defs>\n                </svg>\n                \n                {/* Timer display in center */}\n                <div className=\"absolute inset-0 flex flex-col items-center justify-center\">\n                  <motion.div\n                    key={timeLeft}\n                    initial={{ scale: 1 }}\n                    animate={{ scale: [1, 1.05, 1] }}\n                    transition={{ duration: 0.3 }}\n                    className=\"text-8xl font-bold text-white mb-4 tabular-nums\"\n                  >\n                    {formatTime(timeLeft)}\n                  </motion.div>\n                  <div className=\"text-xl text-white/80 capitalize\">\n                    {currentMode === 'work' ? 'Focus Time' : currentMode === 'shortBreak' ? 'Short Break' : 'Long Break'}\n                  </div>\n                  <div className=\"text-sm text-white/60 mt-2\">\n                    Pomodoros: {completedPomodoros}\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"text-center mb-8\">\n              <motion.div\n                key={timeLeft}\n                initial={{ scale: 1 }}\n                animate={{ scale: [1, 1.05, 1] }}\n                transition={{ duration: 0.3 }}\n                className=\"text-7xl font-bold text-white mb-4\"\n              >\n                {formatTime(timeLeft)}\n              </motion.div>\n              <p className=\"text-white/80 text-xl capitalize\">\n                {currentMode === 'work' ? 'Focus Time' : currentMode === 'shortBreak' ? 'Short Break' : 'Long Break'}\n              </p>\n            </div>\n\n            <div className=\"flex justify-center gap-4 mb-6\">\n              <Button\n                onClick={handlePlayPause}\n                size=\"lg\"\n                className=\"bg-white/20 hover:bg-white/30 text-white backdrop-blur-sm border border-white/30 px-8\"\n              >\n                {isRunning ? (\n                  <>\n                    <Pause className=\"w-5 h-5 mr-2\" />\n                    Pause\n                  </>\n                ) : (\n                  <>\n                    <Play className=\"w-5 h-5 mr-2\" />\n                    Start\n                  </>\n                )}\n              </Button>\n              <Button\n                onClick={handleReset}\n                size=\"lg\"\n                variant=\"ghost\"\n                className=\"text-white hover:bg-white/20\"\n              >\n                <RotateCcw className=\"w-5 h-5 mr-2\" />\n                Reset\n              </Button>\n            </div>\n\n            <div className=\"text-center text-white/60\">\n              <p>Completed Pomodoros: {completedPomodoros}</p>\n            </div>\n          </div>\n\n          <AnimatePresence>\n            {showSettings && (\n              <motion.div\n                initial={{ opacity: 0, y: 20, scale: 0.95 }}\n                animate={{ opacity: 1, y: 0, scale: 1 }}\n                exit={{ opacity: 0, y: 20, scale: 0.95 }}\n                transition={{ duration: 0.3, ease: \"easeOut\" }}\n                className=\"mt-6 backdrop-blur-xl bg-white/10 rounded-3xl p-8 shadow-2xl border border-white/20\"\n              >\n                <h2 className=\"text-2xl font-bold text-white mb-6\">Timer Settings</h2>\n                \n                <SettingsForm\n                  settings={settings}\n                  onSave={handleSaveSettings}\n                  onCancel={() => setShowSettings(false)}\n                />\n              </motion.div>\n            )}\n          </AnimatePresence>\n\n          <AnimatePresence>\n            {showCompletion && (\n              <motion.div\n                initial={{ opacity: 0, scale: 0.8 }}\n                animate={{ opacity: 1, scale: 1 }}\n                exit={{ opacity: 0, scale: 0.8 }}\n                className=\"fixed inset-0 z-50 flex items-center justify-center bg-black/50 backdrop-blur-sm\"\n                onClick={() => setShowCompletion(false)}\n              >\n                <motion.div\n                  initial={{ y: 50, opacity: 0 }}\n                  animate={{ y: 0, opacity: 1 }}\n                  transition={{ delay: 0.2 }}\n                  className=\"bg-white/20 backdrop-blur-xl rounded-3xl p-12 border border-white/30 text-center\"\n                >\n                  <motion.div\n                    initial={{ scale: 0 }}\n                    animate={{ scale: [0, 1.2, 1] }}\n                    transition={{ delay: 0.3, duration: 0.5 }}\n                    className=\"text-8xl mb-6\"\n                  >\n                    \ud83c\udf89\n                  </motion.div>\n                  <motion.h2\n                    initial={{ opacity: 0 }}\n                    animate={{ opacity: 1 }}\n                    transition={{ delay: 0.5 }}\n                    className=\"text-4xl font-bold text-white mb-4\"\n                  >\n                    {currentMode === 'work' ? 'Great Work!' : 'Break Complete!'}\n                  </motion.h2>\n                  <motion.p\n                    initial={{ opacity: 0 }}\n                    animate={{ opacity: 1 }}\n                    transition={{ delay: 0.6 }}\n                    className=\"text-white/80 text-xl\"\n                  >\n                    {currentMode === 'work' \n                      ? 'Time for a well-deserved break!' \n                      : 'Ready to focus again?'}\n                  </motion.p>\n                </motion.div>\n              </motion.div>\n            )}\n          </AnimatePresence>\n        </motion.div>\n      </div>\n    </div>\n  );\n}",
  "error": null,
  "overall_score": 60,
  "code_quality_score": 18,
  "architecture_score": 16,
  "performance_score": 14,
  "accessibility_score": 12,
  "metadata": {
    "document_id": "eval_room_548a22b9ee9a",
    "prompt_category": "productivity",
    "prompt_complexity": 7.0
  },
  "raw_response": {
    "document_id": "eval_room_548a22b9ee9a",
    "mode": "parallel",
    "prompt": "Build a gorgeous Pomodoro timer with a circular animated progress ring, glass morphism design, smooth color transitions between work/break modes, floating particles background, and satisfying completion animations with sound",
    "content": "import { useState, useCallback, useEffect, useRef } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Play, Pause, RotateCcw, Settings } from 'lucide-react';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport confetti from 'canvas-confetti';\n\ninterface TimerMode {\n  type: 'work' | 'shortBreak' | 'longBreak';\n  duration: number;\n  label: string;\n}\n\ninterface TimerSettings {\n  workDuration: number;\n  shortBreakDuration: number;\n  longBreakDuration: number;\n  longBreakInterval: number;\n}\n\ninterface Particle {\n  id: number;\n  x: number;\n  y: number;\n  size: number;\n  duration: number;\n  delay: number;\n}\n\nconst defaultSettings: TimerSettings = {\n  workDuration: 25,\n  shortBreakDuration: 5,\n  longBreakDuration: 15,\n  longBreakInterval: 4\n};\n\nconst timerModes: Record<string, { colors: string; gradient: string }> = {\n  work: {\n    colors: 'from-rose-500 via-pink-500 to-purple-500',\n    gradient: 'bg-gradient-to-br from-rose-500/20 via-pink-500/20 to-purple-500/20'\n  },\n  shortBreak: {\n    colors: 'from-cyan-500 via-blue-500 to-indigo-500',\n    gradient: 'bg-gradient-to-br from-cyan-500/20 via-blue-500/20 to-indigo-500/20'\n  },\n  longBreak: {\n    colors: 'from-emerald-500 via-teal-500 to-cyan-500',\n    gradient: 'bg-gradient-to-br from-emerald-500/20 via-teal-500/20 to-cyan-500/20'\n  }\n};\n\nexport default function PomodoroTimer() {\n  const [settings, setSettings] = useState<TimerSettings>(defaultSettings);\n  const [currentMode, setCurrentMode] = useState<'work' | 'shortBreak' | 'longBreak'>('work');\n  const [timeLeft, setTimeLeft] = useState(settings.workDuration * 60);\n  const [isRunning, setIsRunning] = useState(false);\n  const [completedPomodoros, setCompletedPomodoros] = useState(0);\n  const [showSettings, setShowSettings] = useState(false);\n  const [showCompletion, setShowCompletion] = useState(false);\n  const [particles, setParticles] = useState<Particle[]>([]);\n  \n  const intervalRef = useRef<NodeJS.Timeout | null>(null);\n  const audioRef = useRef<HTMLAudioElement | null>(null);\n\n  const totalTime = currentMode === 'work' \n    ? settings.workDuration * 60 \n    : currentMode === 'shortBreak'\n    ? settings.shortBreakDuration * 60\n    : settings.longBreakDuration * 60;\n\n  const progress = ((totalTime - timeLeft) / totalTime) * 100;\n\n  useEffect(() => {\n    const generatedParticles: Particle[] = Array.from({ length: 50 }, (_, i) => ({\n      id: i,\n      x: Math.random() * 100,\n      y: Math.random() * 100,\n      size: Math.random() * 4 + 2,\n      duration: Math.random() * 20 + 10,\n      delay: Math.random() * 5\n    }));\n    setParticles(generatedParticles);\n  }, []);\n\n  useEffect(() => {\n    if (isRunning && timeLeft > 0) {\n      intervalRef.current = setInterval(() => {\n        setTimeLeft((prev) => {\n          if (prev <= 1) {\n            setIsRunning(false);\n            setShowCompletion(true);\n            \n            // Play completion sound\n            if (audioRef.current) {\n              audioRef.current.play().catch(() => {});\n            }\n            \n            // Auto-switch to next mode\n            if (currentMode === 'work') {\n              setCompletedPomodoros((prev) => prev + 1);\n              const nextPomodoros = completedPomodoros + 1;\n              \n              if (nextPomodoros % settings.longBreakInterval === 0) {\n                setCurrentMode('longBreak');\n                return settings.longBreakDuration * 60;\n              } else {\n                setCurrentMode('shortBreak');\n                return settings.shortBreakDuration * 60;\n              }\n            } else {\n              setCurrentMode('work');\n              return settings.workDuration * 60;\n            }\n          }\n          return prev - 1;\n        });\n      }, 1000);\n    } else {\n      if (intervalRef.current) {\n        clearInterval(intervalRef.current);\n        intervalRef.current = null;\n      }\n    }\n    \n    return () => {\n      if (intervalRef.current) {\n        clearInterval(intervalRef.current);\n      }\n    };\n  }, [isRunning, timeLeft, currentMode, completedPomodoros, settings]);\n\n  const handlePlayPause = useCallback(() => {\n    setIsRunning(!isRunning);\n  }, [isRunning]);\n\n  const handleReset = useCallback(() => {\n\n    setIsRunning(false);\n    if (intervalRef.current) {\n      clearInterval(intervalRef.current);\n      intervalRef.current = null;\n    }\n    const duration = currentMode === 'work' \n      ? settings.workDuration * 60 \n      : currentMode === 'shortBreak'\n      ? settings.shortBreakDuration * 60\n      : settings.longBreakDuration * 60;\n    setTimeLeft(duration);\n  }, [currentMode, settings]);\n\n  const handleModeSwitch = useCallback((mode: 'work' | 'shortBreak' | 'longBreak') => {\n    setIsRunning(false);\n    setCurrentMode(mode);\n    const newDuration = mode === 'work' \n      ? settings.workDuration * 60 \n      : mode === 'shortBreak'\n      ? settings.shortBreakDuration * 60\n      : settings.longBreakDuration * 60;\n    setTimeLeft(newDuration);\n  }, [settings]);\n\n  const formatTime = useCallback((seconds: number): string => {\n    const mins = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;\n  }, []);\nfunction SettingsForm({ \n  settings, \n  onSave, \n  onCancel \n}: { \n  settings: TimerSettings; \n  onSave: (settings: TimerSettings) => void; \n  onCancel: () => void;\n}) {\n  const [localSettings, setLocalSettings] = useState<TimerSettings>(settings);\n\n  const handleInputChange = (field: keyof TimerSettings, value: string) => {\n    const numValue = parseInt(value) || 0;\n    setLocalSettings(prev => ({\n      ...prev,\n      [field]: numValue\n    }));\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"space-y-4\">\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"workDuration\" className=\"text-white text-sm font-medium\">\n            Work Duration (minutes)\n          </Label>\n          <Input\n            id=\"workDuration\"\n            type=\"number\"\n            min=\"1\"\n            max=\"60\"\n            value={localSettings.workDuration}\n            onChange={(e) => handleInputChange('workDuration', e.target.value)}\n            className=\"bg-white/10 border-white/20 text-white placeholder:text-white/50 focus:border-white/40 focus:ring-white/20\"\n          />\n        </div>\n\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"shortBreakDuration\" className=\"text-white text-sm font-medium\">\n            Short Break Duration (minutes)\n          </Label>\n          <Input\n            id=\"shortBreakDuration\"\n            type=\"number\"\n            min=\"1\"\n            max=\"30\"\n            value={localSettings.shortBreakDuration}\n            onChange={(e) => handleInputChange('shortBreakDuration', e.target.value)}\n            className=\"bg-white/10 border-white/20 text-white placeholder:text-white/50 focus:border-white/40 focus:ring-white/20\"\n          />\n        </div>\n\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"longBreakDuration\" className=\"text-white text-sm font-medium\">\n            Long Break Duration (minutes)\n          </Label>\n          <Input\n            id=\"longBreakDuration\"\n            type=\"number\"\n            min=\"1\"\n            max=\"60\"\n            value={localSettings.longBreakDuration}\n            onChange={(e) => handleInputChange('longBreakDuration', e.target.value)}\n            className=\"bg-white/10 border-white/20 text-white placeholder:text-white/50 focus:border-white/40 focus:ring-white/20\"\n          />\n        </div>\n\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"longBreakInterval\" className=\"text-white text-sm font-medium\">\n            Long Break Interval (pomodoros)\n          </Label>\n          <Input\n            id=\"longBreakInterval\"\n            type=\"number\"\n            min=\"2\"\n            max=\"10\"\n            value={localSettings.longBreakInterval}\n            onChange={(e) => handleInputChange('longBreakInterval', e.target.value)}\n            className=\"bg-white/10 border-white/20 text-white placeholder:text-white/50 focus:border-white/40 focus:ring-white/20\"\n          />\n        </div>\n      </div>\n\n      <div className=\"flex gap-3 pt-4\">\n        <Button\n          onClick={() => onSave(localSettings)}\n          className=\"flex-1 bg-white/20 hover:bg-white/30 text-white backdrop-blur-sm border border-white/30\"\n        >\n          Save Settings\n        </Button>\n        <Button\n          onClick={onCancel}\n          variant=\"ghost\"\n          className=\"flex-1 text-white hover:bg-white/20\"\n        >\n          Cancel\n        </Button>\n      </div>\n    </div>\n  );\n}\n  const handleSaveSettings = useCallback((newSettings: TimerSettings) => {\n    setSettings(newSettings);\n    setShowSettings(false);\n    // Reset timer with new settings\n    const newDuration = currentMode === 'work' \n      ? newSettings.workDuration * 60 \n      : currentMode === 'shortBreak'\n      ? newSettings.shortBreakDuration * 60\n      : newSettings.longBreakDuration * 60;\n    setTimeLeft(newDuration);\n    setIsRunning(false);\n  }, [currentMode]);\n\n  return (\n    <div className={`min-h-screen relative overflow-hidden transition-all duration-1000 ${timerModes[currentMode].gradient}`}>\n      <AnimatePresence>\n        {particles.map((particle) => (\n          <motion.div\n            key={particle.id}\n            className=\"absolute rounded-full bg-white/30 backdrop-blur-sm\"\n            style={{\n              left: `${particle.x}%`,\n              top: `${particle.y}%`,\n              width: particle.size,\n              height: particle.size,\n            }}\n            initial={{ opacity: 0, scale: 0 }}\n            animate={{\n              opacity: [0, 0.6, 0],\n              scale: [0, 1, 0],\n              y: [0, -100, -200],\n            }}\n            transition={{\n              duration: particle.duration,\n              delay: particle.delay,\n              repeat: Infinity,\n              ease: \"easeInOut\",\n            }}\n          />\n        ))}\n      </AnimatePresence>\n      \n      <div className=\"relative z-10 min-h-screen flex flex-col items-center justify-center p-8\">\n        <motion.div\n          initial={{ opacity: 0, y: -20 }}\n          animate={{ opacity: 1, y: 0 }}\n          className=\"w-full max-w-2xl\"\n        >\n          <div className=\"backdrop-blur-xl bg-white/10 rounded-3xl p-8 shadow-2xl border border-white/20\">\n            <div className=\"flex justify-between items-center mb-8\">\n              <h1 className=\"text-4xl font-bold text-white\">Pomodoro Timer</h1>\n              <Button\n                variant=\"ghost\"\n                size=\"icon\"\n                onClick={() => setShowSettings(!showSettings)}\n                className=\"text-white hover:bg-white/20\"\n              >\n                <Settings className=\"w-6 h-6\" />\n              </Button>\n            </div>\n\n            <div className=\"flex gap-2 mb-8\">\n              <Button\n                variant={currentMode === 'work' ? 'default' : 'ghost'}\n                onClick={() => handleModeSwitch('work')}\n                className={`flex-1 ${\n                  currentMode === 'work'\n                    ? 'bg-white text-rose-600 hover:bg-white/90'\n                    : 'text-white hover:bg-white/20'\n                }`}\n              >\n                Work\n              </Button>\n              <Button\n                variant={currentMode === 'shortBreak' ? 'default' : 'ghost'}\n                onClick={() => handleModeSwitch('shortBreak')}\n                className={`flex-1 ${\n                  currentMode === 'shortBreak'\n                    ? 'bg-white text-cyan-600 hover:bg-white/90'\n                    : 'text-white hover:bg-white/20'\n                }`}\n              >\n                Short Break\n              </Button>\n              <Button\n                variant={currentMode === 'longBreak' ? 'default' : 'ghost'}\n                onClick={() => handleModeSwitch('longBreak')}\n                className={`flex-1 ${\n                  currentMode === 'longBreak'\n                    ? 'bg-white text-emerald-600 hover:bg-white/90'\n                    : 'text-white hover:bg-white/20'\n                }`}\n              >\n                Long Break\n              </Button>\n            </div>\n\n            <div className=\"flex justify-center items-center my-12\">\n              <div className=\"relative\">\n                <svg className=\"w-80 h-80 transform -rotate-90\" viewBox=\"0 0 320 320\">\n                  {/* Background circle */}\n                  <circle\n                    cx=\"160\"\n                    cy=\"160\"\n                    r=\"140\"\n                    stroke=\"rgba(255, 255, 255, 0.1)\"\n                    strokeWidth=\"12\"\n                    fill=\"none\"\n                  />\n                  {/* Progress circle */}\n                  <motion.circle\n                    cx=\"160\"\n                    cy=\"160\"\n                    r=\"140\"\n                    stroke=\"url(#gradient)\"\n                    strokeWidth=\"12\"\n                    fill=\"none\"\n                    strokeLinecap=\"round\"\n                    strokeDasharray={2 * Math.PI * 140}\n                    strokeDashoffset={2 * Math.PI * 140 * (1 - progress / 100)}\n                    initial={{ strokeDashoffset: 2 * Math.PI * 140 }}\n                    animate={{ strokeDashoffset: 2 * Math.PI * 140 * (1 - progress / 100) }}\n                    transition={{ duration: 0.5, ease: \"easeInOut\" }}\n                  />\n                  <defs>\n                    <linearGradient id=\"gradient\" x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"100%\">\n                      <stop offset=\"0%\" stopColor=\"rgba(255, 255, 255, 0.9)\" />\n                      <stop offset=\"100%\" stopColor=\"rgba(255, 255, 255, 0.6)\" />\n                    </linearGradient>\n                  </defs>\n                </svg>\n                \n                {/* Timer display in center */}\n                <div className=\"absolute inset-0 flex flex-col items-center justify-center\">\n                  <motion.div\n                    key={timeLeft}\n                    initial={{ scale: 1 }}\n                    animate={{ scale: [1, 1.05, 1] }}\n                    transition={{ duration: 0.3 }}\n                    className=\"text-8xl font-bold text-white mb-4 tabular-nums\"\n                  >\n                    {formatTime(timeLeft)}\n                  </motion.div>\n                  <div className=\"text-xl text-white/80 capitalize\">\n                    {currentMode === 'work' ? 'Focus Time' : currentMode === 'shortBreak' ? 'Short Break' : 'Long Break'}\n                  </div>\n                  <div className=\"text-sm text-white/60 mt-2\">\n                    Pomodoros: {completedPomodoros}\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"text-center mb-8\">\n              <motion.div\n                key={timeLeft}\n                initial={{ scale: 1 }}\n                animate={{ scale: [1, 1.05, 1] }}\n                transition={{ duration: 0.3 }}\n                className=\"text-7xl font-bold text-white mb-4\"\n              >\n                {formatTime(timeLeft)}\n              </motion.div>\n              <p className=\"text-white/80 text-xl capitalize\">\n                {currentMode === 'work' ? 'Focus Time' : currentMode === 'shortBreak' ? 'Short Break' : 'Long Break'}\n              </p>\n            </div>\n\n            <div className=\"flex justify-center gap-4 mb-6\">\n              <Button\n                onClick={handlePlayPause}\n                size=\"lg\"\n                className=\"bg-white/20 hover:bg-white/30 text-white backdrop-blur-sm border border-white/30 px-8\"\n              >\n                {isRunning ? (\n                  <>\n                    <Pause className=\"w-5 h-5 mr-2\" />\n                    Pause\n                  </>\n                ) : (\n                  <>\n                    <Play className=\"w-5 h-5 mr-2\" />\n                    Start\n                  </>\n                )}\n              </Button>\n              <Button\n                onClick={handleReset}\n                size=\"lg\"\n                variant=\"ghost\"\n                className=\"text-white hover:bg-white/20\"\n              >\n                <RotateCcw className=\"w-5 h-5 mr-2\" />\n                Reset\n              </Button>\n            </div>\n\n            <div className=\"text-center text-white/60\">\n              <p>Completed Pomodoros: {completedPomodoros}</p>\n            </div>\n          </div>\n\n          <AnimatePresence>\n            {showSettings && (\n              <motion.div\n                initial={{ opacity: 0, y: 20, scale: 0.95 }}\n                animate={{ opacity: 1, y: 0, scale: 1 }}\n                exit={{ opacity: 0, y: 20, scale: 0.95 }}\n                transition={{ duration: 0.3, ease: \"easeOut\" }}\n                className=\"mt-6 backdrop-blur-xl bg-white/10 rounded-3xl p-8 shadow-2xl border border-white/20\"\n              >\n                <h2 className=\"text-2xl font-bold text-white mb-6\">Timer Settings</h2>\n                \n                <SettingsForm\n                  settings={settings}\n                  onSave={handleSaveSettings}\n                  onCancel={() => setShowSettings(false)}\n                />\n              </motion.div>\n            )}\n          </AnimatePresence>\n\n          <AnimatePresence>\n            {showCompletion && (\n              <motion.div\n                initial={{ opacity: 0, scale: 0.8 }}\n                animate={{ opacity: 1, scale: 1 }}\n                exit={{ opacity: 0, scale: 0.8 }}\n                className=\"fixed inset-0 z-50 flex items-center justify-center bg-black/50 backdrop-blur-sm\"\n                onClick={() => setShowCompletion(false)}\n              >\n                <motion.div\n                  initial={{ y: 50, opacity: 0 }}\n                  animate={{ y: 0, opacity: 1 }}\n                  transition={{ delay: 0.2 }}\n                  className=\"bg-white/20 backdrop-blur-xl rounded-3xl p-12 border border-white/30 text-center\"\n                >\n                  <motion.div\n                    initial={{ scale: 0 }}\n                    animate={{ scale: [0, 1.2, 1] }}\n                    transition={{ delay: 0.3, duration: 0.5 }}\n                    className=\"text-8xl mb-6\"\n                  >\n                    \ud83c\udf89\n                  </motion.div>\n                  <motion.h2\n                    initial={{ opacity: 0 }}\n                    animate={{ opacity: 1 }}\n                    transition={{ delay: 0.5 }}\n                    className=\"text-4xl font-bold text-white mb-4\"\n                  >\n                    {currentMode === 'work' ? 'Great Work!' : 'Break Complete!'}\n                  </motion.h2>\n                  <motion.p\n                    initial={{ opacity: 0 }}\n                    animate={{ opacity: 1 }}\n                    transition={{ delay: 0.6 }}\n                    className=\"text-white/80 text-xl\"\n                  >\n                    {currentMode === 'work' \n                      ? 'Time for a well-deserved break!' \n                      : 'Ready to focus again?'}\n                  </motion.p>\n                </motion.div>\n              </motion.div>\n            )}\n          </AnimatePresence>\n        </motion.div>\n      </div>\n    </div>\n  );\n}",
    "error": null,
    "elapsed_time": 64.30864071846008,
    "success": true
  }
}