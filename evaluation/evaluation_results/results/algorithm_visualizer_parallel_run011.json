{
  "prompt_id": "algorithm_visualizer",
  "prompt_name": "Algorithm Visualizer",
  "mode": "parallel",
  "run_number": 11,
  "timestamp": "2025-10-13T21:41:43.119965",
  "response_time": 74.35203123092651,
  "total_tokens": null,
  "response_content": "import { useState, useCallback } from 'react';\nimport { useEffect } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Slider } from '@/components/ui/slider';\nimport { Play, Pause, RotateCcw, Zap, BarChart3 } from 'lucide-react';\nimport { motion } from 'framer-motion';\n\ninterface ArrayElement {\n  value: number;\n  id: string;\n  isComparing?: boolean;\n  isSwapping?: boolean;\n  isSorted?: boolean;\n}\n\ninterface AlgorithmStep {\n  array: ArrayElement[];\n  comparingIndices: number[];\n  swappingIndices: number[];\n  sortedIndices: number[];\n}\n\ntype AlgorithmType = 'bubble' | 'quick' | 'merge' | 'insertion';\n\nconst NEON_COLORS = [\n  '#00ffff',\n  '#ff00ff', \n  '#00ff00',\n  '#ffff00',\n  '#ff0066',\n  '#00ffaa'\n];\n\nconst mockAlgorithms = [\n  { id: 'bubble', name: 'Bubble Sort', complexity: 'O(n\u00b2)' },\n  { id: 'quick', name: 'Quick Sort', complexity: 'O(n log n)' },\n  { id: 'merge', name: 'Merge Sort', complexity: 'O(n log n)' },\n  { id: 'insertion', name: 'Insertion Sort', complexity: 'O(n\u00b2)' }\n];\n\nexport default function AlgorithmVisualizer() {\n  const [array, setArray] = useState<ArrayElement[]>([]);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [speed, setSpeed] = useState([50]);\n  const [arraySize, setArraySize] = useState([20]);\n  const [selectedAlgorithm, setSelectedAlgorithm] = useState<AlgorithmType>('bubble');\n  const [currentStep, setCurrentStep] = useState(0);\n  const [steps, setSteps] = useState<AlgorithmStep[]>([]);\n  const [comparisons, setComparisons] = useState(0);\n  const [swaps, setSwaps] = useState(0);\n\n  const generateRandomArray = useCallback(() => {\n    const newArray: ArrayElement[] = Array.from({ length: arraySize[0] }, (_, index) => ({\n      value: Math.floor(Math.random() * 100) + 5,\n      id: `element-${index}-${Date.now()}`,\n      isComparing: false,\n      isSwapping: false,\n      isSorted: false\n    }));\n    \n    setArray(newArray);\n    setSteps([]);\n    setCurrentStep(0);\n    setComparisons(0);\n    setSwaps(0);\n    setIsPlaying(false);\n  }, [arraySize]);\n\n  const resetVisualization = useCallback(() => {\n    setIsPlaying(false);\n    setCurrentStep(0);\n    setSteps([]);\n    setComparisons(0);\n    setSwaps(0);\n    generateRandomArray();\n  }, [generateRandomArray]);\n\n  const handlePlayPause = useCallback(() => {\n    if (steps.length === 0) {\n      // Generate steps for the selected algorithm before playing\n      generateSteps();\n      return;\n    }\n\n    if (currentStep >= steps.length - 1 && isPlaying) {\n      // Animation completed\n      setIsPlaying(false);\n      return;\n    }\n\n    setIsPlaying(!isPlaying);\n  // Step-by-step animation effect\n  useEffect(() => {\n    if (!isPlaying || steps.length === 0) return;\n\n    const delay = 1000 - speed[0] * 9; // Convert speed slider to delay (100-910ms)\n    \n    const timer = setTimeout(() => {\n      if (currentStep < steps.length - 1) {\n        const nextStep = currentStep + 1;\n        setCurrentStep(nextStep);\n        \n        const step = steps[nextStep];\n        setArray(step.array);\n        \n        // Update statistics\n        if (step.comparingIndices.length > 0) {\n          setComparisons(prev => prev + 1);\n        }\n        if (step.swappingIndices.length > 0) {\n          setSwaps(prev => prev + 1);\n        }\n      } else {\n        // Animation completed\n        setIsPlaying(false);\n      }\n    }, delay);\n\n    return () => clearTimeout(timer);\n  }, [isPlaying, currentStep, steps, speed]);\n\n  // Generate steps for the selected algorithm\n  const generateSteps = useCallback(() => {\n    const newSteps: AlgorithmStep[] = [];\n    const arr = [...array];\n    let comparisonCount = 0;\n    let swapCount = 0;\n\n    // Initial state\n    newSteps.push({\n      array: arr.map(el => ({ ...el })),\n      comparingIndices: [],\n      swappingIndices: [],\n      sortedIndices: []\n    });\n\n    // Mock bubble sort implementation for demonstration\n    if (selectedAlgorithm === 'bubble') {\n      for (let i = 0; i < arr.length - 1; i++) {\n        for (let j = 0; j < arr.length - i - 1; j++) {\n          // Comparing step\n          newSteps.push({\n            array: arr.map((el, idx) => ({\n              ...el,\n              isComparing: idx === j || idx === j + 1\n            })),\n            comparingIndices: [j, j + 1],\n            swappingIndices: [],\n            sortedIndices: Array.from({ length: i }, (_, k) => arr.length - 1 - k)\n          });\n\n          if (arr[j].value > arr[j + 1].value) {\n            // Swapping step\n            [arr[j], arr[j + 1]] = [arr[j + 1], arr[j]];\n            \n            newSteps.push({\n              array: arr.map((el, idx) => ({\n                ...el,\n                isSwapping: idx === j || idx === j + 1\n              })),\n              comparingIndices: [],\n              swappingIndices: [j, j + 1],\n              sortedIndices: Array.from({ length: i }, (_, k) => arr.length - 1 - k)\n            });\n          }\n        }\n      }\n    }\n\n    // Final sorted state\n    newSteps.push({\n      array: arr.map(el => ({ ...el, isSorted: true })),\n      comparingIndices: [],\n      swappingIndices: [],\n      sortedIndices: Array.from({ length: arr.length }, (_, i) => i)\n    });\n\n    setSteps(newSteps);\n    setCurrentStep(0);\n    setComparisons(0);\n    setSwaps(0);\n    setIsPlaying(true);\n  }, [array, selectedAlgorithm]);\n\n    /* TODO:PlayPauseLogic Toggle play/pause and handle step-by-step animation */\n  }, [isPlaying, currentStep, steps, speed]);\n\n  const generateSteps = useCallback((algorithm: AlgorithmType) => {\n    const allSteps: AlgorithmStep[] = [];\n    let comparisonCount = 0;\n    let swapCount = 0;\n    const workingArray = [...array];\n\n    const recordStep = (comparingIndices: number[] = [], swappingIndices: number[] = [], sortedIndices: number[] = []) => {\n      allSteps.push({\n        array: workingArray.map((el, idx) => ({\n          ...el,\n          isComparing: comparingIndices.includes(idx),\n          isSwapping: swappingIndices.includes(idx),\n          isSorted: sortedIndices.includes(idx)\n        })),\n        comparingIndices,\n        swappingIndices,\n        sortedIndices\n      });\n    };\n\n    const swap = (i: number, j: number, sortedIndices: number[] = []) => {\n      [workingArray[i], workingArray[j]] = [workingArray[j], workingArray[i]];\n      swapCount++;\n      recordStep([], [i, j], sortedIndices);\n    };\n\n    const compare = (i: number, j: number, sortedIndices: number[] = []) => {\n      comparisonCount++;\n      recordStep([i, j], [], sortedIndices);\n    };\n\n    if (algorithm === 'bubble') {\n      const sortedIndices: number[] = [];\n      for (let i = 0; i < workingArray.length; i++) {\n        for (let j = 0; j < workingArray.length - i - 1; j++) {\n          compare(j, j + 1, sortedIndices);\n          if (workingArray[j].value > workingArray[j + 1].value) {\n            swap(j, j + 1, sortedIndices);\n          }\n        }\n        sortedIndices.push(workingArray.length - i - 1);\n        recordStep([], [], sortedIndices);\n      }\n    } else if (algorithm === 'quick') {\n      const sortedIndices: number[] = [];\n      \n      const partition = (low: number, high: number): number => {\n        const pivot = workingArray[high].value;\n        let i = low - 1;\n        \n        for (let j = low; j < high; j++) {\n          compare(j, high, sortedIndices);\n          if (workingArray[j].value < pivot) {\n            i++;\n            if (i !== j) {\n              swap(i, j, sortedIndices);\n            }\n          }\n        }\n        if (i + 1 !== high) {\n          swap(i + 1, high, sortedIndices);\n        }\n        sortedIndices.push(i + 1);\n        return i + 1;\n      };\n\n      const quickSort = (low: number, high: number) => {\n        if (low < high) {\n          const pi = partition(low, high);\n          quickSort(low, pi - 1);\n          quickSort(pi + 1, high);\n        } else if (low === high) {\n          sortedIndices.push(low);\n        }\n      };\n\n      quickSort(0, workingArray.length - 1);\n      recordStep([], [], sortedIndices);\n    } else if (algorithm === 'merge') {\n      const sortedIndices: number[] = [];\n      \n      const merge = (left: number, mid: number, right: number) => {\n        const leftArr = workingArray.slice(left, mid + 1);\n        const rightArr = workingArray.slice(mid + 1, right + 1);\n        \n        let i = 0, j = 0, k = left;\n        \n        while (i < leftArr.length && j < rightArr.length) {\n          compare(left + i, mid + 1 + j, sortedIndices);\n          if (leftArr[i].value <= rightArr[j].value) {\n            workingArray[k] = leftArr[i];\n            i++;\n          } else {\n            workingArray[k] = rightArr[j];\n            j++;\n          }\n          recordStep([], [k], sortedIndices);\n          k++;\n        }\n        \n        while (i < leftArr.length) {\n          workingArray[k] = leftArr[i];\n          recordStep([], [k], sortedIndices);\n          i++;\n          k++;\n        }\n        \n        while (j < rightArr.length) {\n          workingArray[k] = rightArr[j];\n          recordStep([], [k], sortedIndices);\n          j++;\n          k++;\n        }\n      };\n\n      const mergeSort = (left: number, right: number) => {\n        if (left < right) {\n          const mid = Math.floor((left + right) / 2);\n          mergeSort(left, mid);\n          mergeSort(mid + 1, right);\n          merge(left, mid, right);\n        }\n      };\n\n      mergeSort(0, workingArray.length - 1);\n      for (let i = 0; i < workingArray.length; i++) {\n        sortedIndices.push(i);\n      }\n      recordStep([], [], sortedIndices);\n    } else if (algorithm === 'insertion') {\n      const sortedIndices: number[] = [0];\n      \n      for (let i = 1; i < workingArray.length; i++) {\n        const key = workingArray[i];\n        let j = i - 1;\n        \n        compare(i, j, sortedIndices);\n        \n        while (j >= 0 && workingArray[j].value > key.value) {\n          workingArray[j + 1] = workingArray[j];\n          recordStep([], [j + 1], sortedIndices);\n          j--;\n          if (j >= 0) {\n            compare(j, i, sortedIndices);\n          }\n        }\n        \n        workingArray[j + 1] = key;\n        recordStep([], [j + 1], sortedIndices);\n        sortedIndices.push(i);\n      }\n      recordStep([], [], sortedIndices);\n    }\n\n    setSteps(allSteps);\n    setComparisons(comparisonCount);\n    setSwaps(swapCount);\n    setCurrentStep(0);\n  }, [array]);\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-gray-900 via-purple-900 to-gray-900 p-8\">\n      <div className=\"max-w-7xl mx-auto space-y-8\">\n                <motion.div\n          initial={{ opacity: 0, y: -20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.8 }}\n          className=\"text-center space-y-6\"\n        >\n          <motion.h1\n            className=\"text-6xl font-bold bg-gradient-to-r from-cyan-400 via-purple-400 to-pink-400 bg-clip-text text-transparent\"\n            animate={{\n              textShadow: [\n                '0 0 20px rgba(0, 255, 255, 0.5)',\n                '0 0 40px rgba(255, 0, 255, 0.5)',\n                '0 0 20px rgba(0, 255, 255, 0.5)'\n              ]\n            }}\n            transition={{ duration: 2, repeat: Infinity }}\n          >\n            Algorithm Visualizer\n          </motion.h1>\n\n          <div className=\"flex justify-center gap-4 flex-wrap\">\n            {mockAlgorithms.map((algo) => (\n              <motion.div\n                key={algo.id}\n                whileHover={{ scale: 1.05 }}\n                whileTap={{ scale: 0.95 }}\n              >\n                <Button\n                  onClick={() => setSelectedAlgorithm(algo.id as AlgorithmType)}\n                  variant={selectedAlgorithm === algo.id ? 'default' : 'outline'}\n                  className={`relative overflow-hidden transition-all duration-300 ${\n                    selectedAlgorithm === algo.id\n                      ? 'bg-gradient-to-r from-cyan-500 to-purple-500 text-white border-0 shadow-lg shadow-cyan-500/50'\n                      : 'bg-gray-800/50 border-cyan-500/30 text-cyan-300 hover:bg-gray-700/50 hover:border-cyan-400'\n                  }`}\n                >\n                  <span className=\"relative z-10 flex flex-col items-center\">\n                    <span className=\"font-semibold\">{algo.name}</span>\n                    <span className=\"text-xs opacity-80\">{algo.complexity}</span>\n                  </span>\n                  {selectedAlgorithm === algo.id && (\n                    <motion.div\n                      className=\"absolute inset-0 bg-gradient-to-r from-cyan-400/20 to-purple-400/20\"\n                      animate={{\n                        opacity: [0.5, 1, 0.5]\n                      }}\n                      transition={{ duration: 1.5, repeat: Infinity }}\n                    />\n                  )}\n                </Button>\n              </motion.div>\n            ))}\n          </div>\n        </motion.div>\n\n{/* Control Panel */}\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ delay: 0.4 }}\n          className=\"bg-gray-900/50 backdrop-blur-sm rounded-2xl border border-purple-500/30 p-6 shadow-2xl\"\n        >\n          <div className=\"space-y-6\">\n            {/* Play/Pause Controls */}\n            <div className=\"flex gap-3\">\n              <Button\n                onClick={handlePlayPause}\n                disabled={array.length === 0 || (currentStep >= steps.length - 1 && !isPlaying)}\n                className=\"flex-1 bg-gradient-to-r from-purple-600 to-pink-600 hover:from-purple-700 hover:to-pink-700 text-white border-0 shadow-lg shadow-purple-500/50\"\n              >\n                {isPlaying ? (\n                  <>\n                    <Pause className=\"w-4 h-4 mr-2\" />\n                    Pause\n                  </>\n                ) : (\n                  <>\n                    <Play className=\"w-4 h-4 mr-2\" />\n                    Play\n                  </>\n                )}\n              </Button>\n              <Button\n                onClick={resetVisualization}\n                variant=\"outline\"\n                className=\"border-purple-500/50 text-purple-300 hover:bg-purple-500/20\"\n              >\n                <RotateCcw className=\"w-4 h-4\" />\n              </Button>\n            </div>\n\n            {/* Speed Control */}\n            <div className=\"space-y-3\">\n              <div className=\"flex items-center justify-between\">\n                <label className=\"text-sm font-medium text-purple-300 flex items-center gap-2\">\n                  <Zap className=\"w-4 h-4\" />\n                  Speed\n                </label>\n                <span className=\"text-xs text-purple-400\">{speed[0]}%</span>\n              </div>\n              <Slider\n                value={speed}\n                onValueChange={setSpeed}\n                min={10}\n                max={100}\n                step={10}\n                className=\"cursor-pointer\"\n              />\n            </div>\n\n            {/* Array Size Control */}\n            <div className=\"space-y-3\">\n              <div className=\"flex items-center justify-between\">\n                <label className=\"text-sm font-medium text-purple-300 flex items-center gap-2\">\n                  <BarChart3 className=\"w-4 h-4\" />\n                  Array Size\n                </label>\n                <span className=\"text-xs text-purple-400\">{arraySize[0]}</span>\n              </div>\n              <Slider\n                value={arraySize}\n                onValueChange={setArraySize}\n                min={5}\n                max={50}\n                step={5}\n                className=\"cursor-pointer\"\n              />\n            </div>\n\n            {/* Generate Array Button */}\n            <Button\n              onClick={generateRandomArray}\n              className=\"w-full bg-gradient-to-r from-cyan-600 to-blue-600 hover:from-cyan-700 hover:to-blue-700 text-white border-0 shadow-lg shadow-cyan-500/50\"\n            >\n              Generate New Array\n            </Button>\n          </div>\n        </motion.div>\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            className=\"relative bg-gray-900/50 backdrop-blur-xl border border-cyan-500/30 rounded-xl p-6 overflow-hidden group hover:border-cyan-500/60 transition-all\"\n          >\n            <div className=\"absolute inset-0 bg-gradient-to-br from-cyan-500/10 to-transparent opacity-0 group-hover:opacity-100 transition-opacity\" />\n            <div className=\"relative z-10\">\n              <div className=\"flex items-center gap-3 mb-2\">\n                <BarChart3 className=\"w-5 h-5 text-cyan-400\" />\n                <span className=\"text-cyan-400 text-sm font-medium uppercase tracking-wider\">Comparisons</span>\n              </div>\n              <motion.div\n                key={comparisons}\n                initial={{ scale: 1.2, color: '#00ffff' }}\n                animate={{ scale: 1, color: '#ffffff' }}\n                className=\"text-4xl font-bold text-white\"\n              >\n                {comparisons}\n              </motion.div>\n            </div>\n            <div className=\"absolute -bottom-2 -right-2 w-24 h-24 bg-cyan-500/20 rounded-full blur-2xl\" />\n          </motion.div>\n\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ delay: 0.1 }}\n            className=\"relative bg-gray-900/50 backdrop-blur-xl border border-purple-500/30 rounded-xl p-6 overflow-hidden group hover:border-purple-500/60 transition-all\"\n          >\n            <div className=\"absolute inset-0 bg-gradient-to-br from-purple-500/10 to-transparent opacity-0 group-hover:opacity-100 transition-opacity\" />\n            <div className=\"relative z-10\">\n              <div className=\"flex items-center gap-3 mb-2\">\n                <Zap className=\"w-5 h-5 text-purple-400\" />\n                <span className=\"text-purple-400 text-sm font-medium uppercase tracking-wider\">Swaps</span>\n              </div>\n              <motion.div\n                key={swaps}\n                initial={{ scale: 1.2, color: '#ff00ff' }}\n                animate={{ scale: 1, color: '#ffffff' }}\n                className=\"text-4xl font-bold text-white\"\n              >\n                {swaps}\n              </motion.div>\n            </div>\n            <div className=\"absolute -bottom-2 -right-2 w-24 h-24 bg-purple-500/20 rounded-full blur-2xl\" />\n          </motion.div>\n\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ delay: 0.2 }}\n            className=\"relative bg-gray-900/50 backdrop-blur-xl border border-green-500/30 rounded-xl p-6 overflow-hidden group hover:border-green-500/60 transition-all\"\n          >\n            <div className=\"absolute inset-0 bg-gradient-to-br from-green-500/10 to-transparent opacity-0 group-hover:opacity-100 transition-opacity\" />\n            <div className=\"relative z-10\">\n              <div className=\"flex items-center gap-3 mb-2\">\n                <BarChart3 className=\"w-5 h-5 text-green-400\" />\n                <span className=\"text-green-400 text-sm font-medium uppercase tracking-wider\">Complexity</span>\n              </div>\n              <div className=\"text-4xl font-bold text-white\">\n                {mockAlgorithms.find(a => a.id === selectedAlgorithm)?.complexity}\n              </div>\n            </div>\n            <div className=\"absolute -bottom-2 -right-2 w-24 h-24 bg-green-500/20 rounded-full blur-2xl\" />\n          </motion.div>\n\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ delay: 0.3 }}\n            className=\"relative bg-gray-900/50 backdrop-blur-xl border border-yellow-500/30 rounded-xl p-6 overflow-hidden group hover:border-yellow-500/60 transition-all\"\n          >\n            <div className=\"absolute inset-0 bg-gradient-to-br from-yellow-500/10 to-transparent opacity-0 group-hover:opacity-100 transition-opacity\" />\n            <div className=\"relative z-10\">\n              <div className=\"flex items-center gap-3 mb-2\">\n                <BarChart3 className=\"w-5 h-5 text-yellow-400\" />\n                <span className=\"text-yellow-400 text-sm font-medium uppercase tracking-wider\">Array Size</span>\n              </div>\n              <div className=\"text-4xl font-bold text-white\">\n                {array.length}\n              </div>\n            </div>\n            <div className=\"absolute -bottom-2 -right-2 w-24 h-24 bg-yellow-500/20 rounded-full blur-2xl\" />\n          </motion.div>\n        </div>\n\n        <div className=\"relative\">\n          <div className=\"bg-gray-900/50 backdrop-blur-sm rounded-2xl border border-purple-500/30 p-8 shadow-2xl\">\n            <div className=\"flex items-end justify-center gap-1 h-96 relative\">\n              {array.length === 0 ? (\n                <div className=\"absolute inset-0 flex items-center justify-center\">\n                  <div className=\"text-center space-y-4\">\n                    <BarChart3 className=\"w-16 h-16 mx-auto text-purple-400/50\" />\n                    <p className=\"text-purple-300/70 text-lg\">Generate an array to start visualizing</p>\n                  </div>\n                </div>\n              ) : (\n                array.map((element, index) => {\n                  const isComparing = steps[currentStep]?.comparingIndices.includes(index);\n                  const isSwapping = steps[currentStep]?.swappingIndices.includes(index);\n                  const isSorted = steps[currentStep]?.sortedIndices.includes(index);\n                  \n                  return (\n                    <motion.div\n                      key={element.id}\n                      className=\"relative flex-1 min-w-0 group\"\n                      initial={{ height: 0, opacity: 0 }}\n                      animate={{\n                        height: `${(element.value / 100) * 100}%`,\n                        opacity: 1,\n                        y: isSwapping ? -20 : 0,\n                        scale: isComparing ? 1.1 : 1,\n                      }}\n                      transition={{\n                        height: { duration: 0.5, ease: \"easeOut\" },\n                        y: { duration: 0.3, ease: \"easeInOut\" },\n                        scale: { duration: 0.2 },\n                        opacity: { duration: 0.3 }\n                      }}\n                      style={{\n                        backgroundColor: isSorted \n                          ? '#00ff00' \n                          : isSwapping \n                          ? '#ff0066' \n                          : isComparing \n                          ? '#ffff00' \n                          : NEON_COLORS[index % NEON_COLORS.length],\n                        boxShadow: isSorted\n                          ? '0 0 20px #00ff00, 0 0 40px #00ff00, 0 0 60px #00ff00'\n                          : isSwapping\n                          ? '0 0 30px #ff0066, 0 0 60px #ff0066, 0 0 90px #ff0066'\n                          : isComparing\n                          ? '0 0 25px #ffff00, 0 0 50px #ffff00, 0 0 75px #ffff00'\n                          : `0 0 15px ${NEON_COLORS[index % NEON_COLORS.length]}, 0 0 30px ${NEON_COLORS[index % NEON_COLORS.length]}`,\n                      }}\n                    >\n                      {/* Trail effect for swapping */}\n                      {isSwapping && (\n                        <motion.div\n                          className=\"absolute inset-0 rounded-t-sm\"\n                          initial={{ opacity: 0.8, scale: 1 }}\n                          animate={{ opacity: 0, scale: 1.5 }}\n                          transition={{ duration: 0.6, repeat: Infinity }}\n                          style={{\n                            backgroundColor: '#ff0066',\n                            filter: 'blur(8px)',\n                          }}\n                        />\n                      )}\n                      \n                      {/* Value label on hover */}\n                      <div className=\"absolute -top-8 left-1/2 -translate-x-1/2 opacity-0 group-hover:opacity-100 transition-opacity duration-200 pointer-events-none\">\n                        <div className=\"bg-gray-900 border border-purple-500/50 rounded px-2 py-1 text-xs text-purple-300 whitespace-nowrap shadow-lg\">\n                          {element.value}\n                        </div>\n                      </div>\n                    </motion.div>\n                  );\n                })\n              )}\n            </div>\n          </div>\n        </div>\n\n                <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.6, delay: 0.4 }}\n          className=\"bg-gray-900/50 backdrop-blur-xl border border-cyan-500/30 rounded-2xl p-6 shadow-2xl\"\n        >\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            {/* Playback Controls */}\n            <div className=\"space-y-4\">\n              <h3 className=\"text-cyan-400 font-semibold text-sm uppercase tracking-wider flex items-center gap-2\">\n                <Zap className=\"w-4 h-4\" />\n                Playback Controls\n              </h3>\n              <div className=\"flex gap-3\">\n                <Button\n                  onClick={handlePlayPause}\n                  disabled={steps.length === 0}\n                  className=\"flex-1 bg-gradient-to-r from-cyan-500 to-blue-500 hover:from-cyan-400 hover:to-blue-400 text-white font-semibold shadow-lg shadow-cyan-500/50 transition-all duration-300 hover:shadow-cyan-500/70 hover:scale-105\"\n                >\n                  {isPlaying ? (\n                    <>\n                      <Pause className=\"w-4 h-4 mr-2\" />\n                      Pause\n                    </>\n                  ) : (\n                    <>\n                      <Play className=\"w-4 h-4 mr-2\" />\n                      Play\n                    </>\n                  )}\n                </Button>\n                <Button\n                  onClick={resetVisualization}\n                  variant=\"outline\"\n                  className=\"flex-1 border-purple-500/50 text-purple-400 hover:bg-purple-500/20 hover:border-purple-400 transition-all duration-300 hover:shadow-lg hover:shadow-purple-500/50 hover:scale-105\"\n                >\n                  <RotateCcw className=\"w-4 h-4 mr-2\" />\n                  Reset\n                </Button>\n              </div>\n            </div>\n\n            {/* Speed Control */}\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center justify-between\">\n                <h3 className=\"text-cyan-400 font-semibold text-sm uppercase tracking-wider flex items-center gap-2\">\n                  <Zap className=\"w-4 h-4\" />\n                  Animation Speed\n                </h3>\n                <span className=\"text-cyan-300 font-mono text-sm bg-cyan-500/20 px-3 py-1 rounded-full\">\n                  {speed[0]}ms\n                </span>\n              </div>\n              <Slider\n                value={speed}\n                onValueChange={setSpeed}\n                min={10}\n                max={200}\n                step={10}\n                className=\"cursor-pointer\"\n                disabled={isPlaying}\n              />\n              <div className=\"flex justify-between text-xs text-gray-400\">\n                <span>Fast</span>\n                <span>Slow</span>\n              </div>\n            </div>\n\n            {/* Array Size Control */}\n            <div className=\"space-y-4 md:col-span-2\">\n              <div className=\"flex items-center justify-between\">\n                <h3 className=\"text-cyan-400 font-semibold text-sm uppercase tracking-wider flex items-center gap-2\">\n                  <BarChart3 className=\"w-4 h-4\" />\n                  Array Size\n                </h3>\n                <span className=\"text-cyan-300 font-mono text-sm bg-cyan-500/20 px-3 py-1 rounded-full\">\n                  {arraySize[0]} elements\n                </span>\n              </div>\n              <Slider\n                value={arraySize}\n                onValueChange={setArraySize}\n                min={5}\n                max={100}\n                step={5}\n                className=\"cursor-pointer\"\n                disabled={isPlaying}\n              />\n              <div className=\"flex justify-between text-xs text-gray-400\">\n                <span>5</span>\n                <span>50</span>\n                <span>100</span>\n              </div>\n            </div>\n          </div>\n        </motion.div>\n\n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n          {mockAlgorithms.map((algo) => (\n            <motion.div\n              key={algo.id}\n              whileHover={{ scale: 1.05, y: -5 }}\n              whileTap={{ scale: 0.95 }}\n              onClick={() => {\n                setSelectedAlgorithm(algo.id as AlgorithmType);\n                setIsPlaying(false);\n                setCurrentStep(0);\n                setSteps([]);\n                setComparisons(0);\n                setSwaps(0);\n              }}\n              className={`relative cursor-pointer rounded-xl p-6 backdrop-blur-sm transition-all duration-300 ${\n                selectedAlgorithm === algo.id\n                  ? 'bg-gradient-to-br from-cyan-500/30 to-purple-500/30 border-2 border-cyan-400 shadow-[0_0_30px_rgba(0,255,255,0.5)]'\n                  : 'bg-gray-800/50 border-2 border-gray-700 hover:border-purple-500 hover:shadow-[0_0_20px_rgba(168,85,247,0.4)]'\n              }`}\n            >\n              <div className=\"flex items-center justify-between mb-3\">\n                <BarChart3 \n                  className={`w-6 h-6 ${\n                    selectedAlgorithm === algo.id ? 'text-cyan-400' : 'text-purple-400'\n                  }`}\n                />\n                {selectedAlgorithm === algo.id && (\n                  <motion.div\n                    initial={{ scale: 0 }}\n                    animate={{ scale: 1 }}\n                    className=\"w-3 h-3 rounded-full bg-cyan-400 shadow-[0_0_10px_rgba(0,255,255,0.8)]\"\n                  />\n                )}\n              </div>\n              <h3 className={`text-lg font-bold mb-2 ${\n                selectedAlgorithm === algo.id ? 'text-cyan-300' : 'text-white'\n              }`}>\n                {algo.name}\n              </h3>\n              <p className={`text-sm font-mono ${\n                selectedAlgorithm === algo.id ? 'text-cyan-200' : 'text-gray-400'\n              }`}>\n                {algo.complexity}\n              </p>\n              {selectedAlgorithm === algo.id && (\n                <motion.div\n                  layoutId=\"selectedGlow\"\n                  className=\"absolute inset-0 rounded-xl bg-gradient-to-br from-cyan-500/10 to-purple-500/10 pointer-events-none\"\n                  transition={{ type: \"spring\", stiffness: 300, damping: 30 }}\n                />\n              )}\n            </motion.div>\n          ))}\n        </div>\n\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.6, delay: 0.5 }}\n          className=\"bg-gray-900/50 backdrop-blur-xl border border-purple-500/30 rounded-2xl p-6 shadow-2xl\"\n        >\n          <div className=\"flex items-center gap-3 mb-6\">\n            <div className=\"p-2 bg-purple-500/20 rounded-lg\">\n              <BarChart3 className=\"w-5 h-5 text-purple-400\" />\n            </div>\n            <h3 className=\"text-xl font-bold text-white\">Legend</h3>\n          </div>\n\n          <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4\">\n            <motion.div\n              whileHover={{ scale: 1.05 }}\n              className=\"flex items-center gap-3 p-3 bg-gray-800/50 rounded-lg border border-gray-700/50\"\n            >\n              <div className=\"w-4 h-12 bg-cyan-400 rounded shadow-lg shadow-cyan-400/50\" />\n              <div>\n                <p className=\"text-sm font-semibold text-cyan-400\">Default</p>\n                <p className=\"text-xs text-gray-400\">Unsorted element</p>\n              </div>\n            </motion.div>\n\n            <motion.div\n              whileHover={{ scale: 1.05 }}\n              className=\"flex items-center gap-3 p-3 bg-gray-800/50 rounded-lg border border-gray-700/50\"\n            >\n              <div className=\"w-4 h-12 bg-yellow-400 rounded shadow-lg shadow-yellow-400/50 animate-pulse\" />\n              <div>\n                <p className=\"text-sm font-semibold text-yellow-400\">Comparing</p>\n                <p className=\"text-xs text-gray-400\">Being compared</p>\n              </div>\n            </motion.div>\n\n            <motion.div\n              whileHover={{ scale: 1.05 }}\n              className=\"flex items-center gap-3 p-3 bg-gray-800/50 rounded-lg border border-gray-700/50\"\n            >\n              <div className=\"w-4 h-12 bg-red-500 rounded shadow-lg shadow-red-500/50 animate-pulse\" />\n              <div>\n                <p className=\"text-sm font-semibold text-red-500\">Swapping</p>\n                <p className=\"text-xs text-gray-400\">Being swapped</p>\n              </div>\n            </motion.div>\n\n            <motion.div\n              whileHover={{ scale: 1.05 }}\n              className=\"flex items-center gap-3 p-3 bg-gray-800/50 rounded-lg border border-gray-700/50\"\n            >\n              <div className=\"w-4 h-12 bg-green-400 rounded shadow-lg shadow-green-400/50\" />\n              <div>\n                <p className=\"text-sm font-semibold text-green-400\">Sorted</p>\n                <p className=\"text-xs text-gray-400\">In final position</p>\n              </div>\n            </motion.div>\n          </div>\n        </motion.div>\n      </div>\n    </div>\n  );\n}",
  "error": null,
  "overall_score": 46,
  "code_quality_score": 14,
  "architecture_score": 12,
  "performance_score": 11,
  "accessibility_score": 9,
  "metadata": {
    "document_id": "eval_room_98247c674efc",
    "prompt_category": "creative",
    "prompt_complexity": 9.0
  },
  "raw_response": {
    "document_id": "eval_room_98247c674efc",
    "mode": "parallel",
    "prompt": "Build a captivating algorithm visualizer with neon colored bars, smooth height transitions, glowing comparison indicators, trail effects during swaps, and a futuristic dashboard design with animated controls",
    "content": "import { useState, useCallback } from 'react';\nimport { useEffect } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Slider } from '@/components/ui/slider';\nimport { Play, Pause, RotateCcw, Zap, BarChart3 } from 'lucide-react';\nimport { motion } from 'framer-motion';\n\ninterface ArrayElement {\n  value: number;\n  id: string;\n  isComparing?: boolean;\n  isSwapping?: boolean;\n  isSorted?: boolean;\n}\n\ninterface AlgorithmStep {\n  array: ArrayElement[];\n  comparingIndices: number[];\n  swappingIndices: number[];\n  sortedIndices: number[];\n}\n\ntype AlgorithmType = 'bubble' | 'quick' | 'merge' | 'insertion';\n\nconst NEON_COLORS = [\n  '#00ffff',\n  '#ff00ff', \n  '#00ff00',\n  '#ffff00',\n  '#ff0066',\n  '#00ffaa'\n];\n\nconst mockAlgorithms = [\n  { id: 'bubble', name: 'Bubble Sort', complexity: 'O(n\u00b2)' },\n  { id: 'quick', name: 'Quick Sort', complexity: 'O(n log n)' },\n  { id: 'merge', name: 'Merge Sort', complexity: 'O(n log n)' },\n  { id: 'insertion', name: 'Insertion Sort', complexity: 'O(n\u00b2)' }\n];\n\nexport default function AlgorithmVisualizer() {\n  const [array, setArray] = useState<ArrayElement[]>([]);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [speed, setSpeed] = useState([50]);\n  const [arraySize, setArraySize] = useState([20]);\n  const [selectedAlgorithm, setSelectedAlgorithm] = useState<AlgorithmType>('bubble');\n  const [currentStep, setCurrentStep] = useState(0);\n  const [steps, setSteps] = useState<AlgorithmStep[]>([]);\n  const [comparisons, setComparisons] = useState(0);\n  const [swaps, setSwaps] = useState(0);\n\n  const generateRandomArray = useCallback(() => {\n    const newArray: ArrayElement[] = Array.from({ length: arraySize[0] }, (_, index) => ({\n      value: Math.floor(Math.random() * 100) + 5,\n      id: `element-${index}-${Date.now()}`,\n      isComparing: false,\n      isSwapping: false,\n      isSorted: false\n    }));\n    \n    setArray(newArray);\n    setSteps([]);\n    setCurrentStep(0);\n    setComparisons(0);\n    setSwaps(0);\n    setIsPlaying(false);\n  }, [arraySize]);\n\n  const resetVisualization = useCallback(() => {\n    setIsPlaying(false);\n    setCurrentStep(0);\n    setSteps([]);\n    setComparisons(0);\n    setSwaps(0);\n    generateRandomArray();\n  }, [generateRandomArray]);\n\n  const handlePlayPause = useCallback(() => {\n    if (steps.length === 0) {\n      // Generate steps for the selected algorithm before playing\n      generateSteps();\n      return;\n    }\n\n    if (currentStep >= steps.length - 1 && isPlaying) {\n      // Animation completed\n      setIsPlaying(false);\n      return;\n    }\n\n    setIsPlaying(!isPlaying);\n  // Step-by-step animation effect\n  useEffect(() => {\n    if (!isPlaying || steps.length === 0) return;\n\n    const delay = 1000 - speed[0] * 9; // Convert speed slider to delay (100-910ms)\n    \n    const timer = setTimeout(() => {\n      if (currentStep < steps.length - 1) {\n        const nextStep = currentStep + 1;\n        setCurrentStep(nextStep);\n        \n        const step = steps[nextStep];\n        setArray(step.array);\n        \n        // Update statistics\n        if (step.comparingIndices.length > 0) {\n          setComparisons(prev => prev + 1);\n        }\n        if (step.swappingIndices.length > 0) {\n          setSwaps(prev => prev + 1);\n        }\n      } else {\n        // Animation completed\n        setIsPlaying(false);\n      }\n    }, delay);\n\n    return () => clearTimeout(timer);\n  }, [isPlaying, currentStep, steps, speed]);\n\n  // Generate steps for the selected algorithm\n  const generateSteps = useCallback(() => {\n    const newSteps: AlgorithmStep[] = [];\n    const arr = [...array];\n    let comparisonCount = 0;\n    let swapCount = 0;\n\n    // Initial state\n    newSteps.push({\n      array: arr.map(el => ({ ...el })),\n      comparingIndices: [],\n      swappingIndices: [],\n      sortedIndices: []\n    });\n\n    // Mock bubble sort implementation for demonstration\n    if (selectedAlgorithm === 'bubble') {\n      for (let i = 0; i < arr.length - 1; i++) {\n        for (let j = 0; j < arr.length - i - 1; j++) {\n          // Comparing step\n          newSteps.push({\n            array: arr.map((el, idx) => ({\n              ...el,\n              isComparing: idx === j || idx === j + 1\n            })),\n            comparingIndices: [j, j + 1],\n            swappingIndices: [],\n            sortedIndices: Array.from({ length: i }, (_, k) => arr.length - 1 - k)\n          });\n\n          if (arr[j].value > arr[j + 1].value) {\n            // Swapping step\n            [arr[j], arr[j + 1]] = [arr[j + 1], arr[j]];\n            \n            newSteps.push({\n              array: arr.map((el, idx) => ({\n                ...el,\n                isSwapping: idx === j || idx === j + 1\n              })),\n              comparingIndices: [],\n              swappingIndices: [j, j + 1],\n              sortedIndices: Array.from({ length: i }, (_, k) => arr.length - 1 - k)\n            });\n          }\n        }\n      }\n    }\n\n    // Final sorted state\n    newSteps.push({\n      array: arr.map(el => ({ ...el, isSorted: true })),\n      comparingIndices: [],\n      swappingIndices: [],\n      sortedIndices: Array.from({ length: arr.length }, (_, i) => i)\n    });\n\n    setSteps(newSteps);\n    setCurrentStep(0);\n    setComparisons(0);\n    setSwaps(0);\n    setIsPlaying(true);\n  }, [array, selectedAlgorithm]);\n\n    /* TODO:PlayPauseLogic Toggle play/pause and handle step-by-step animation */\n  }, [isPlaying, currentStep, steps, speed]);\n\n  const generateSteps = useCallback((algorithm: AlgorithmType) => {\n    const allSteps: AlgorithmStep[] = [];\n    let comparisonCount = 0;\n    let swapCount = 0;\n    const workingArray = [...array];\n\n    const recordStep = (comparingIndices: number[] = [], swappingIndices: number[] = [], sortedIndices: number[] = []) => {\n      allSteps.push({\n        array: workingArray.map((el, idx) => ({\n          ...el,\n          isComparing: comparingIndices.includes(idx),\n          isSwapping: swappingIndices.includes(idx),\n          isSorted: sortedIndices.includes(idx)\n        })),\n        comparingIndices,\n        swappingIndices,\n        sortedIndices\n      });\n    };\n\n    const swap = (i: number, j: number, sortedIndices: number[] = []) => {\n      [workingArray[i], workingArray[j]] = [workingArray[j], workingArray[i]];\n      swapCount++;\n      recordStep([], [i, j], sortedIndices);\n    };\n\n    const compare = (i: number, j: number, sortedIndices: number[] = []) => {\n      comparisonCount++;\n      recordStep([i, j], [], sortedIndices);\n    };\n\n    if (algorithm === 'bubble') {\n      const sortedIndices: number[] = [];\n      for (let i = 0; i < workingArray.length; i++) {\n        for (let j = 0; j < workingArray.length - i - 1; j++) {\n          compare(j, j + 1, sortedIndices);\n          if (workingArray[j].value > workingArray[j + 1].value) {\n            swap(j, j + 1, sortedIndices);\n          }\n        }\n        sortedIndices.push(workingArray.length - i - 1);\n        recordStep([], [], sortedIndices);\n      }\n    } else if (algorithm === 'quick') {\n      const sortedIndices: number[] = [];\n      \n      const partition = (low: number, high: number): number => {\n        const pivot = workingArray[high].value;\n        let i = low - 1;\n        \n        for (let j = low; j < high; j++) {\n          compare(j, high, sortedIndices);\n          if (workingArray[j].value < pivot) {\n            i++;\n            if (i !== j) {\n              swap(i, j, sortedIndices);\n            }\n          }\n        }\n        if (i + 1 !== high) {\n          swap(i + 1, high, sortedIndices);\n        }\n        sortedIndices.push(i + 1);\n        return i + 1;\n      };\n\n      const quickSort = (low: number, high: number) => {\n        if (low < high) {\n          const pi = partition(low, high);\n          quickSort(low, pi - 1);\n          quickSort(pi + 1, high);\n        } else if (low === high) {\n          sortedIndices.push(low);\n        }\n      };\n\n      quickSort(0, workingArray.length - 1);\n      recordStep([], [], sortedIndices);\n    } else if (algorithm === 'merge') {\n      const sortedIndices: number[] = [];\n      \n      const merge = (left: number, mid: number, right: number) => {\n        const leftArr = workingArray.slice(left, mid + 1);\n        const rightArr = workingArray.slice(mid + 1, right + 1);\n        \n        let i = 0, j = 0, k = left;\n        \n        while (i < leftArr.length && j < rightArr.length) {\n          compare(left + i, mid + 1 + j, sortedIndices);\n          if (leftArr[i].value <= rightArr[j].value) {\n            workingArray[k] = leftArr[i];\n            i++;\n          } else {\n            workingArray[k] = rightArr[j];\n            j++;\n          }\n          recordStep([], [k], sortedIndices);\n          k++;\n        }\n        \n        while (i < leftArr.length) {\n          workingArray[k] = leftArr[i];\n          recordStep([], [k], sortedIndices);\n          i++;\n          k++;\n        }\n        \n        while (j < rightArr.length) {\n          workingArray[k] = rightArr[j];\n          recordStep([], [k], sortedIndices);\n          j++;\n          k++;\n        }\n      };\n\n      const mergeSort = (left: number, right: number) => {\n        if (left < right) {\n          const mid = Math.floor((left + right) / 2);\n          mergeSort(left, mid);\n          mergeSort(mid + 1, right);\n          merge(left, mid, right);\n        }\n      };\n\n      mergeSort(0, workingArray.length - 1);\n      for (let i = 0; i < workingArray.length; i++) {\n        sortedIndices.push(i);\n      }\n      recordStep([], [], sortedIndices);\n    } else if (algorithm === 'insertion') {\n      const sortedIndices: number[] = [0];\n      \n      for (let i = 1; i < workingArray.length; i++) {\n        const key = workingArray[i];\n        let j = i - 1;\n        \n        compare(i, j, sortedIndices);\n        \n        while (j >= 0 && workingArray[j].value > key.value) {\n          workingArray[j + 1] = workingArray[j];\n          recordStep([], [j + 1], sortedIndices);\n          j--;\n          if (j >= 0) {\n            compare(j, i, sortedIndices);\n          }\n        }\n        \n        workingArray[j + 1] = key;\n        recordStep([], [j + 1], sortedIndices);\n        sortedIndices.push(i);\n      }\n      recordStep([], [], sortedIndices);\n    }\n\n    setSteps(allSteps);\n    setComparisons(comparisonCount);\n    setSwaps(swapCount);\n    setCurrentStep(0);\n  }, [array]);\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-gray-900 via-purple-900 to-gray-900 p-8\">\n      <div className=\"max-w-7xl mx-auto space-y-8\">\n                <motion.div\n          initial={{ opacity: 0, y: -20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.8 }}\n          className=\"text-center space-y-6\"\n        >\n          <motion.h1\n            className=\"text-6xl font-bold bg-gradient-to-r from-cyan-400 via-purple-400 to-pink-400 bg-clip-text text-transparent\"\n            animate={{\n              textShadow: [\n                '0 0 20px rgba(0, 255, 255, 0.5)',\n                '0 0 40px rgba(255, 0, 255, 0.5)',\n                '0 0 20px rgba(0, 255, 255, 0.5)'\n              ]\n            }}\n            transition={{ duration: 2, repeat: Infinity }}\n          >\n            Algorithm Visualizer\n          </motion.h1>\n\n          <div className=\"flex justify-center gap-4 flex-wrap\">\n            {mockAlgorithms.map((algo) => (\n              <motion.div\n                key={algo.id}\n                whileHover={{ scale: 1.05 }}\n                whileTap={{ scale: 0.95 }}\n              >\n                <Button\n                  onClick={() => setSelectedAlgorithm(algo.id as AlgorithmType)}\n                  variant={selectedAlgorithm === algo.id ? 'default' : 'outline'}\n                  className={`relative overflow-hidden transition-all duration-300 ${\n                    selectedAlgorithm === algo.id\n                      ? 'bg-gradient-to-r from-cyan-500 to-purple-500 text-white border-0 shadow-lg shadow-cyan-500/50'\n                      : 'bg-gray-800/50 border-cyan-500/30 text-cyan-300 hover:bg-gray-700/50 hover:border-cyan-400'\n                  }`}\n                >\n                  <span className=\"relative z-10 flex flex-col items-center\">\n                    <span className=\"font-semibold\">{algo.name}</span>\n                    <span className=\"text-xs opacity-80\">{algo.complexity}</span>\n                  </span>\n                  {selectedAlgorithm === algo.id && (\n                    <motion.div\n                      className=\"absolute inset-0 bg-gradient-to-r from-cyan-400/20 to-purple-400/20\"\n                      animate={{\n                        opacity: [0.5, 1, 0.5]\n                      }}\n                      transition={{ duration: 1.5, repeat: Infinity }}\n                    />\n                  )}\n                </Button>\n              </motion.div>\n            ))}\n          </div>\n        </motion.div>\n\n{/* Control Panel */}\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ delay: 0.4 }}\n          className=\"bg-gray-900/50 backdrop-blur-sm rounded-2xl border border-purple-500/30 p-6 shadow-2xl\"\n        >\n          <div className=\"space-y-6\">\n            {/* Play/Pause Controls */}\n            <div className=\"flex gap-3\">\n              <Button\n                onClick={handlePlayPause}\n                disabled={array.length === 0 || (currentStep >= steps.length - 1 && !isPlaying)}\n                className=\"flex-1 bg-gradient-to-r from-purple-600 to-pink-600 hover:from-purple-700 hover:to-pink-700 text-white border-0 shadow-lg shadow-purple-500/50\"\n              >\n                {isPlaying ? (\n                  <>\n                    <Pause className=\"w-4 h-4 mr-2\" />\n                    Pause\n                  </>\n                ) : (\n                  <>\n                    <Play className=\"w-4 h-4 mr-2\" />\n                    Play\n                  </>\n                )}\n              </Button>\n              <Button\n                onClick={resetVisualization}\n                variant=\"outline\"\n                className=\"border-purple-500/50 text-purple-300 hover:bg-purple-500/20\"\n              >\n                <RotateCcw className=\"w-4 h-4\" />\n              </Button>\n            </div>\n\n            {/* Speed Control */}\n            <div className=\"space-y-3\">\n              <div className=\"flex items-center justify-between\">\n                <label className=\"text-sm font-medium text-purple-300 flex items-center gap-2\">\n                  <Zap className=\"w-4 h-4\" />\n                  Speed\n                </label>\n                <span className=\"text-xs text-purple-400\">{speed[0]}%</span>\n              </div>\n              <Slider\n                value={speed}\n                onValueChange={setSpeed}\n                min={10}\n                max={100}\n                step={10}\n                className=\"cursor-pointer\"\n              />\n            </div>\n\n            {/* Array Size Control */}\n            <div className=\"space-y-3\">\n              <div className=\"flex items-center justify-between\">\n                <label className=\"text-sm font-medium text-purple-300 flex items-center gap-2\">\n                  <BarChart3 className=\"w-4 h-4\" />\n                  Array Size\n                </label>\n                <span className=\"text-xs text-purple-400\">{arraySize[0]}</span>\n              </div>\n              <Slider\n                value={arraySize}\n                onValueChange={setArraySize}\n                min={5}\n                max={50}\n                step={5}\n                className=\"cursor-pointer\"\n              />\n            </div>\n\n            {/* Generate Array Button */}\n            <Button\n              onClick={generateRandomArray}\n              className=\"w-full bg-gradient-to-r from-cyan-600 to-blue-600 hover:from-cyan-700 hover:to-blue-700 text-white border-0 shadow-lg shadow-cyan-500/50\"\n            >\n              Generate New Array\n            </Button>\n          </div>\n        </motion.div>\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            className=\"relative bg-gray-900/50 backdrop-blur-xl border border-cyan-500/30 rounded-xl p-6 overflow-hidden group hover:border-cyan-500/60 transition-all\"\n          >\n            <div className=\"absolute inset-0 bg-gradient-to-br from-cyan-500/10 to-transparent opacity-0 group-hover:opacity-100 transition-opacity\" />\n            <div className=\"relative z-10\">\n              <div className=\"flex items-center gap-3 mb-2\">\n                <BarChart3 className=\"w-5 h-5 text-cyan-400\" />\n                <span className=\"text-cyan-400 text-sm font-medium uppercase tracking-wider\">Comparisons</span>\n              </div>\n              <motion.div\n                key={comparisons}\n                initial={{ scale: 1.2, color: '#00ffff' }}\n                animate={{ scale: 1, color: '#ffffff' }}\n                className=\"text-4xl font-bold text-white\"\n              >\n                {comparisons}\n              </motion.div>\n            </div>\n            <div className=\"absolute -bottom-2 -right-2 w-24 h-24 bg-cyan-500/20 rounded-full blur-2xl\" />\n          </motion.div>\n\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ delay: 0.1 }}\n            className=\"relative bg-gray-900/50 backdrop-blur-xl border border-purple-500/30 rounded-xl p-6 overflow-hidden group hover:border-purple-500/60 transition-all\"\n          >\n            <div className=\"absolute inset-0 bg-gradient-to-br from-purple-500/10 to-transparent opacity-0 group-hover:opacity-100 transition-opacity\" />\n            <div className=\"relative z-10\">\n              <div className=\"flex items-center gap-3 mb-2\">\n                <Zap className=\"w-5 h-5 text-purple-400\" />\n                <span className=\"text-purple-400 text-sm font-medium uppercase tracking-wider\">Swaps</span>\n              </div>\n              <motion.div\n                key={swaps}\n                initial={{ scale: 1.2, color: '#ff00ff' }}\n                animate={{ scale: 1, color: '#ffffff' }}\n                className=\"text-4xl font-bold text-white\"\n              >\n                {swaps}\n              </motion.div>\n            </div>\n            <div className=\"absolute -bottom-2 -right-2 w-24 h-24 bg-purple-500/20 rounded-full blur-2xl\" />\n          </motion.div>\n\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ delay: 0.2 }}\n            className=\"relative bg-gray-900/50 backdrop-blur-xl border border-green-500/30 rounded-xl p-6 overflow-hidden group hover:border-green-500/60 transition-all\"\n          >\n            <div className=\"absolute inset-0 bg-gradient-to-br from-green-500/10 to-transparent opacity-0 group-hover:opacity-100 transition-opacity\" />\n            <div className=\"relative z-10\">\n              <div className=\"flex items-center gap-3 mb-2\">\n                <BarChart3 className=\"w-5 h-5 text-green-400\" />\n                <span className=\"text-green-400 text-sm font-medium uppercase tracking-wider\">Complexity</span>\n              </div>\n              <div className=\"text-4xl font-bold text-white\">\n                {mockAlgorithms.find(a => a.id === selectedAlgorithm)?.complexity}\n              </div>\n            </div>\n            <div className=\"absolute -bottom-2 -right-2 w-24 h-24 bg-green-500/20 rounded-full blur-2xl\" />\n          </motion.div>\n\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ delay: 0.3 }}\n            className=\"relative bg-gray-900/50 backdrop-blur-xl border border-yellow-500/30 rounded-xl p-6 overflow-hidden group hover:border-yellow-500/60 transition-all\"\n          >\n            <div className=\"absolute inset-0 bg-gradient-to-br from-yellow-500/10 to-transparent opacity-0 group-hover:opacity-100 transition-opacity\" />\n            <div className=\"relative z-10\">\n              <div className=\"flex items-center gap-3 mb-2\">\n                <BarChart3 className=\"w-5 h-5 text-yellow-400\" />\n                <span className=\"text-yellow-400 text-sm font-medium uppercase tracking-wider\">Array Size</span>\n              </div>\n              <div className=\"text-4xl font-bold text-white\">\n                {array.length}\n              </div>\n            </div>\n            <div className=\"absolute -bottom-2 -right-2 w-24 h-24 bg-yellow-500/20 rounded-full blur-2xl\" />\n          </motion.div>\n        </div>\n\n        <div className=\"relative\">\n          <div className=\"bg-gray-900/50 backdrop-blur-sm rounded-2xl border border-purple-500/30 p-8 shadow-2xl\">\n            <div className=\"flex items-end justify-center gap-1 h-96 relative\">\n              {array.length === 0 ? (\n                <div className=\"absolute inset-0 flex items-center justify-center\">\n                  <div className=\"text-center space-y-4\">\n                    <BarChart3 className=\"w-16 h-16 mx-auto text-purple-400/50\" />\n                    <p className=\"text-purple-300/70 text-lg\">Generate an array to start visualizing</p>\n                  </div>\n                </div>\n              ) : (\n                array.map((element, index) => {\n                  const isComparing = steps[currentStep]?.comparingIndices.includes(index);\n                  const isSwapping = steps[currentStep]?.swappingIndices.includes(index);\n                  const isSorted = steps[currentStep]?.sortedIndices.includes(index);\n                  \n                  return (\n                    <motion.div\n                      key={element.id}\n                      className=\"relative flex-1 min-w-0 group\"\n                      initial={{ height: 0, opacity: 0 }}\n                      animate={{\n                        height: `${(element.value / 100) * 100}%`,\n                        opacity: 1,\n                        y: isSwapping ? -20 : 0,\n                        scale: isComparing ? 1.1 : 1,\n                      }}\n                      transition={{\n                        height: { duration: 0.5, ease: \"easeOut\" },\n                        y: { duration: 0.3, ease: \"easeInOut\" },\n                        scale: { duration: 0.2 },\n                        opacity: { duration: 0.3 }\n                      }}\n                      style={{\n                        backgroundColor: isSorted \n                          ? '#00ff00' \n                          : isSwapping \n                          ? '#ff0066' \n                          : isComparing \n                          ? '#ffff00' \n                          : NEON_COLORS[index % NEON_COLORS.length],\n                        boxShadow: isSorted\n                          ? '0 0 20px #00ff00, 0 0 40px #00ff00, 0 0 60px #00ff00'\n                          : isSwapping\n                          ? '0 0 30px #ff0066, 0 0 60px #ff0066, 0 0 90px #ff0066'\n                          : isComparing\n                          ? '0 0 25px #ffff00, 0 0 50px #ffff00, 0 0 75px #ffff00'\n                          : `0 0 15px ${NEON_COLORS[index % NEON_COLORS.length]}, 0 0 30px ${NEON_COLORS[index % NEON_COLORS.length]}`,\n                      }}\n                    >\n                      {/* Trail effect for swapping */}\n                      {isSwapping && (\n                        <motion.div\n                          className=\"absolute inset-0 rounded-t-sm\"\n                          initial={{ opacity: 0.8, scale: 1 }}\n                          animate={{ opacity: 0, scale: 1.5 }}\n                          transition={{ duration: 0.6, repeat: Infinity }}\n                          style={{\n                            backgroundColor: '#ff0066',\n                            filter: 'blur(8px)',\n                          }}\n                        />\n                      )}\n                      \n                      {/* Value label on hover */}\n                      <div className=\"absolute -top-8 left-1/2 -translate-x-1/2 opacity-0 group-hover:opacity-100 transition-opacity duration-200 pointer-events-none\">\n                        <div className=\"bg-gray-900 border border-purple-500/50 rounded px-2 py-1 text-xs text-purple-300 whitespace-nowrap shadow-lg\">\n                          {element.value}\n                        </div>\n                      </div>\n                    </motion.div>\n                  );\n                })\n              )}\n            </div>\n          </div>\n        </div>\n\n                <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.6, delay: 0.4 }}\n          className=\"bg-gray-900/50 backdrop-blur-xl border border-cyan-500/30 rounded-2xl p-6 shadow-2xl\"\n        >\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            {/* Playback Controls */}\n            <div className=\"space-y-4\">\n              <h3 className=\"text-cyan-400 font-semibold text-sm uppercase tracking-wider flex items-center gap-2\">\n                <Zap className=\"w-4 h-4\" />\n                Playback Controls\n              </h3>\n              <div className=\"flex gap-3\">\n                <Button\n                  onClick={handlePlayPause}\n                  disabled={steps.length === 0}\n                  className=\"flex-1 bg-gradient-to-r from-cyan-500 to-blue-500 hover:from-cyan-400 hover:to-blue-400 text-white font-semibold shadow-lg shadow-cyan-500/50 transition-all duration-300 hover:shadow-cyan-500/70 hover:scale-105\"\n                >\n                  {isPlaying ? (\n                    <>\n                      <Pause className=\"w-4 h-4 mr-2\" />\n                      Pause\n                    </>\n                  ) : (\n                    <>\n                      <Play className=\"w-4 h-4 mr-2\" />\n                      Play\n                    </>\n                  )}\n                </Button>\n                <Button\n                  onClick={resetVisualization}\n                  variant=\"outline\"\n                  className=\"flex-1 border-purple-500/50 text-purple-400 hover:bg-purple-500/20 hover:border-purple-400 transition-all duration-300 hover:shadow-lg hover:shadow-purple-500/50 hover:scale-105\"\n                >\n                  <RotateCcw className=\"w-4 h-4 mr-2\" />\n                  Reset\n                </Button>\n              </div>\n            </div>\n\n            {/* Speed Control */}\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center justify-between\">\n                <h3 className=\"text-cyan-400 font-semibold text-sm uppercase tracking-wider flex items-center gap-2\">\n                  <Zap className=\"w-4 h-4\" />\n                  Animation Speed\n                </h3>\n                <span className=\"text-cyan-300 font-mono text-sm bg-cyan-500/20 px-3 py-1 rounded-full\">\n                  {speed[0]}ms\n                </span>\n              </div>\n              <Slider\n                value={speed}\n                onValueChange={setSpeed}\n                min={10}\n                max={200}\n                step={10}\n                className=\"cursor-pointer\"\n                disabled={isPlaying}\n              />\n              <div className=\"flex justify-between text-xs text-gray-400\">\n                <span>Fast</span>\n                <span>Slow</span>\n              </div>\n            </div>\n\n            {/* Array Size Control */}\n            <div className=\"space-y-4 md:col-span-2\">\n              <div className=\"flex items-center justify-between\">\n                <h3 className=\"text-cyan-400 font-semibold text-sm uppercase tracking-wider flex items-center gap-2\">\n                  <BarChart3 className=\"w-4 h-4\" />\n                  Array Size\n                </h3>\n                <span className=\"text-cyan-300 font-mono text-sm bg-cyan-500/20 px-3 py-1 rounded-full\">\n                  {arraySize[0]} elements\n                </span>\n              </div>\n              <Slider\n                value={arraySize}\n                onValueChange={setArraySize}\n                min={5}\n                max={100}\n                step={5}\n                className=\"cursor-pointer\"\n                disabled={isPlaying}\n              />\n              <div className=\"flex justify-between text-xs text-gray-400\">\n                <span>5</span>\n                <span>50</span>\n                <span>100</span>\n              </div>\n            </div>\n          </div>\n        </motion.div>\n\n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n          {mockAlgorithms.map((algo) => (\n            <motion.div\n              key={algo.id}\n              whileHover={{ scale: 1.05, y: -5 }}\n              whileTap={{ scale: 0.95 }}\n              onClick={() => {\n                setSelectedAlgorithm(algo.id as AlgorithmType);\n                setIsPlaying(false);\n                setCurrentStep(0);\n                setSteps([]);\n                setComparisons(0);\n                setSwaps(0);\n              }}\n              className={`relative cursor-pointer rounded-xl p-6 backdrop-blur-sm transition-all duration-300 ${\n                selectedAlgorithm === algo.id\n                  ? 'bg-gradient-to-br from-cyan-500/30 to-purple-500/30 border-2 border-cyan-400 shadow-[0_0_30px_rgba(0,255,255,0.5)]'\n                  : 'bg-gray-800/50 border-2 border-gray-700 hover:border-purple-500 hover:shadow-[0_0_20px_rgba(168,85,247,0.4)]'\n              }`}\n            >\n              <div className=\"flex items-center justify-between mb-3\">\n                <BarChart3 \n                  className={`w-6 h-6 ${\n                    selectedAlgorithm === algo.id ? 'text-cyan-400' : 'text-purple-400'\n                  }`}\n                />\n                {selectedAlgorithm === algo.id && (\n                  <motion.div\n                    initial={{ scale: 0 }}\n                    animate={{ scale: 1 }}\n                    className=\"w-3 h-3 rounded-full bg-cyan-400 shadow-[0_0_10px_rgba(0,255,255,0.8)]\"\n                  />\n                )}\n              </div>\n              <h3 className={`text-lg font-bold mb-2 ${\n                selectedAlgorithm === algo.id ? 'text-cyan-300' : 'text-white'\n              }`}>\n                {algo.name}\n              </h3>\n              <p className={`text-sm font-mono ${\n                selectedAlgorithm === algo.id ? 'text-cyan-200' : 'text-gray-400'\n              }`}>\n                {algo.complexity}\n              </p>\n              {selectedAlgorithm === algo.id && (\n                <motion.div\n                  layoutId=\"selectedGlow\"\n                  className=\"absolute inset-0 rounded-xl bg-gradient-to-br from-cyan-500/10 to-purple-500/10 pointer-events-none\"\n                  transition={{ type: \"spring\", stiffness: 300, damping: 30 }}\n                />\n              )}\n            </motion.div>\n          ))}\n        </div>\n\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.6, delay: 0.5 }}\n          className=\"bg-gray-900/50 backdrop-blur-xl border border-purple-500/30 rounded-2xl p-6 shadow-2xl\"\n        >\n          <div className=\"flex items-center gap-3 mb-6\">\n            <div className=\"p-2 bg-purple-500/20 rounded-lg\">\n              <BarChart3 className=\"w-5 h-5 text-purple-400\" />\n            </div>\n            <h3 className=\"text-xl font-bold text-white\">Legend</h3>\n          </div>\n\n          <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4\">\n            <motion.div\n              whileHover={{ scale: 1.05 }}\n              className=\"flex items-center gap-3 p-3 bg-gray-800/50 rounded-lg border border-gray-700/50\"\n            >\n              <div className=\"w-4 h-12 bg-cyan-400 rounded shadow-lg shadow-cyan-400/50\" />\n              <div>\n                <p className=\"text-sm font-semibold text-cyan-400\">Default</p>\n                <p className=\"text-xs text-gray-400\">Unsorted element</p>\n              </div>\n            </motion.div>\n\n            <motion.div\n              whileHover={{ scale: 1.05 }}\n              className=\"flex items-center gap-3 p-3 bg-gray-800/50 rounded-lg border border-gray-700/50\"\n            >\n              <div className=\"w-4 h-12 bg-yellow-400 rounded shadow-lg shadow-yellow-400/50 animate-pulse\" />\n              <div>\n                <p className=\"text-sm font-semibold text-yellow-400\">Comparing</p>\n                <p className=\"text-xs text-gray-400\">Being compared</p>\n              </div>\n            </motion.div>\n\n            <motion.div\n              whileHover={{ scale: 1.05 }}\n              className=\"flex items-center gap-3 p-3 bg-gray-800/50 rounded-lg border border-gray-700/50\"\n            >\n              <div className=\"w-4 h-12 bg-red-500 rounded shadow-lg shadow-red-500/50 animate-pulse\" />\n              <div>\n                <p className=\"text-sm font-semibold text-red-500\">Swapping</p>\n                <p className=\"text-xs text-gray-400\">Being swapped</p>\n              </div>\n            </motion.div>\n\n            <motion.div\n              whileHover={{ scale: 1.05 }}\n              className=\"flex items-center gap-3 p-3 bg-gray-800/50 rounded-lg border border-gray-700/50\"\n            >\n              <div className=\"w-4 h-12 bg-green-400 rounded shadow-lg shadow-green-400/50\" />\n              <div>\n                <p className=\"text-sm font-semibold text-green-400\">Sorted</p>\n                <p className=\"text-xs text-gray-400\">In final position</p>\n              </div>\n            </motion.div>\n          </div>\n        </motion.div>\n      </div>\n    </div>\n  );\n}",
    "error": null,
    "elapsed_time": 74.35203123092651,
    "success": true
  }
}