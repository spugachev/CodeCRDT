{
  "prompt_id": "algorithm_visualizer",
  "prompt_name": "Algorithm Visualizer",
  "mode": "parallel",
  "run_number": 30,
  "timestamp": "2025-10-13T20:29:50.693740",
  "response_time": 54.30928897857666,
  "total_tokens": null,
  "response_content": "import { useState, useCallback } from 'react';\nimport { useEffect } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Slider } from '@/components/ui/slider';\nimport { Play, Pause, RotateCcw, Zap, BarChart3 } from 'lucide-react';\n\nimport { motion } from 'framer-motion';\nimport { Card } from '@/components/ui/card';\n\n\ninterface ArrayElement {\n  value: number;\n  id: string;\n  isComparing?: boolean;\n  isSwapping?: boolean;\n  isSorted?: boolean;\n}\n\ninterface AlgorithmStep {\n  array: ArrayElement[];\n  comparingIndices: number[];\n  swappingIndices: number[];\n  sortedIndices: number[];\n}\n\ntype AlgorithmType = 'bubble' | 'quick' | 'merge' | 'insertion';\n\nconst NEON_COLORS = [\n  '#00ffff',\n  '#ff00ff', \n  '#00ff00',\n  '#ffff00',\n  '#ff0066',\n  '#00ffaa'\n];\n\nconst mockAlgorithms = [\n  { id: 'bubble', name: 'Bubble Sort', complexity: 'O(n\u00b2)' },\n  { id: 'quick', name: 'Quick Sort', complexity: 'O(n log n)' },\n  { id: 'merge', name: 'Merge Sort', complexity: 'O(n log n)' },\n  { id: 'insertion', name: 'Insertion Sort', complexity: 'O(n\u00b2)' }\n];\n\nexport default function AlgorithmVisualizer() {\n  const [array, setArray] = useState<ArrayElement[]>([]);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [speed, setSpeed] = useState([50]);\n  const [arraySize, setArraySize] = useState([20]);\n  const [selectedAlgorithm, setSelectedAlgorithm] = useState<AlgorithmType>('bubble');\n  const [currentStep, setCurrentStep] = useState(0);\n  const [steps, setSteps] = useState<AlgorithmStep[]>([]);\n  const [comparisons, setComparisons] = useState(0);\n  const [swaps, setSwaps] = useState(0);\n\n  const generateRandomArray = useCallback(() => {\n    const newArray: ArrayElement[] = Array.from({ length: arraySize[0] }, (_, index) => ({\n      value: Math.floor(Math.random() * 100) + 5,\n      id: `element-${index}-${Date.now()}`,\n      isComparing: false,\n      isSwapping: false,\n      isSorted: false\n    }));\n    setArray(newArray);\n    setSteps([]);\n    setCurrentStep(0);\n    setIsPlaying(false);\n  }, [arraySize]);\n\n  const resetVisualization = useCallback(() => {\n\n    setIsPlaying(false);\n    setCurrentStep(0);\n    setSteps([]);\n    generateRandomArray();\n  }, [generateRandomArray]);\n\n  const animateSteps = useCallback(() => {\n    if (currentStep >= steps.length) {\n      setIsPlaying(false);\n      return;\n    }\n\n    const step = steps[currentStep];\n    setArray(step.array);\n    setCurrentStep(prev => prev + 1);\n  }, [currentStep, steps]);\n\n  const startVisualization = useCallback(() => {\n    if (steps.length === 0 || currentStep >= steps.length) {\n      return;\n    }\n    setIsPlaying(true);\n    \n  }, [steps, speed, currentStep]);\n  useEffect(() => {\n    if (!isPlaying) return;\n\n    const delay = 1000 - (speed[0] * 9.5);\n    const timer = setTimeout(() => {\n      animateSteps();\n    }, delay);\n\n    return () => clearTimeout(timer);\n  }, [isPlaying, speed, animateSteps]);\n\n  const pauseVisualization = useCallback(() => {\n\n    setIsPlaying(false);\n  }, []);\n\n  const generateSortingSteps = useCallback((algorithm: AlgorithmType) => {\n    const sortedArray = [...array];\n    const newSteps: AlgorithmStep[] = [];\n\n    const addStep = (arr: ArrayElement[], comparing: number[] = [], swapping: number[] = [], sorted: number[] = []) => {\n      newSteps.push({\n        array: arr.map(el => ({ ...el })),\n        comparingIndices: [...comparing],\n        swappingIndices: [...swapping],\n        sortedIndices: [...sorted]\n      });\n    };\n\n    // Initial state\n    addStep(sortedArray);\n\n    switch (algorithm) {\n      case 'bubble': {\n        const sortedSet = new Set<number>();\n        for (let i = 0; i < sortedArray.length - 1; i++) {\n          for (let j = 0; j < sortedArray.length - i - 1; j++) {\n            // Comparing\n            addStep(sortedArray, [j, j + 1], [], Array.from(sortedSet));\n            \n            if (sortedArray[j].value > sortedArray[j + 1].value) {\n              // Swapping\n              addStep(sortedArray, [], [j, j + 1], Array.from(sortedSet));\n              [sortedArray[j], sortedArray[j + 1]] = [sortedArray[j + 1], sortedArray[j]];\n              addStep(sortedArray, [], [], Array.from(sortedSet));\n            }\n          }\n          sortedSet.add(sortedArray.length - i - 1);\n          addStep(sortedArray, [], [], Array.from(sortedSet));\n        }\n        sortedSet.add(0);\n        addStep(sortedArray, [], [], Array.from(sortedSet));\n        break;\n      }\n\n      case 'insertion': {\n        const sortedSet = new Set<number>([0]);\n        addStep(sortedArray, [], [], [0]);\n        \n        for (let i = 1; i < sortedArray.length; i++) {\n          const key = sortedArray[i];\n          let j = i - 1;\n          \n          addStep(sortedArray, [i], [], Array.from(sortedSet));\n          \n          while (j >= 0 && sortedArray[j].value > key.value) {\n            addStep(sortedArray, [j, j + 1], [], Array.from(sortedSet));\n            addStep(sortedArray, [], [j, j + 1], Array.from(sortedSet));\n            sortedArray[j + 1] = sortedArray[j];\n            addStep(sortedArray, [], [], Array.from(sortedSet));\n            j--;\n          }\n          \n          sortedArray[j + 1] = key;\n          sortedSet.add(i);\n          addStep(sortedArray, [], [], Array.from(sortedSet));\n        }\n        break;\n      }\n\n      case 'quick': {\n        const sortedSet = new Set<number>();\n        \n        const partition = (low: number, high: number): number => {\n          const pivot = sortedArray[high];\n          addStep(sortedArray, [high], [], Array.from(sortedSet));\n          let i = low - 1;\n\n          for (let j = low; j < high; j++) {\n            addStep(sortedArray, [j, high], [], Array.from(sortedSet));\n            \n            if (sortedArray[j].value < pivot.value) {\n              i++;\n              if (i !== j) {\n                addStep(sortedArray, [], [i, j], Array.from(sortedSet));\n                [sortedArray[i], sortedArray[j]] = [sortedArray[j], sortedArray[i]];\n                addStep(sortedArray, [], [], Array.from(sortedSet));\n              }\n            }\n          }\n          \n          addStep(sortedArray, [], [i + 1, high], Array.from(sortedSet));\n          [sortedArray[i + 1], sortedArray[high]] = [sortedArray[high], sortedArray[i + 1]];\n          addStep(sortedArray, [], [], Array.from(sortedSet));\n          \n          return i + 1;\n        };\n\n        const quickSort = (low: number, high: number) => {\n          if (low < high) {\n            const pi = partition(low, high);\n            sortedSet.add(pi);\n            addStep(sortedArray, [], [], Array.from(sortedSet));\n            \n            quickSort(low, pi - 1);\n            quickSort(pi + 1, high);\n          } else if (low === high) {\n            sortedSet.add(low);\n            addStep(sortedArray, [], [], Array.from(sortedSet));\n          }\n        };\n\n        quickSort(0, sortedArray.length - 1);\n        break;\n      }\n\n      case 'merge': {\n        const sortedSet = new Set<number>();\n        \n        const merge = (left: number, mid: number, right: number) => {\n          const leftArr = sortedArray.slice(left, mid + 1);\n          const rightArr = sortedArray.slice(mid + 1, right + 1);\n          \n          let i = 0, j = 0, k = left;\n          \n          while (i < leftArr.length && j < rightArr.length) {\n            addStep(sortedArray, [left + i, mid + 1 + j], [], Array.from(sortedSet));\n            \n            if (leftArr[i].value <= rightArr[j].value) {\n              sortedArray[k] = leftArr[i];\n              i++;\n            } else {\n              sortedArray[k] = rightArr[j];\n              j++;\n            }\n            addStep(sortedArray, [], [k], Array.from(sortedSet));\n            k++;\n          }\n          \n          while (i < leftArr.length) {\n            sortedArray[k] = leftArr[i];\n            addStep(sortedArray, [], [k], Array.from(sortedSet));\n            i++;\n            k++;\n          }\n          \n          while (j < rightArr.length) {\n            sortedArray[k] = rightArr[j];\n            addStep(sortedArray, [], [k], Array.from(sortedSet));\n            j++;\n            k++;\n          }\n          \n          for (let idx = left; idx <= right; idx++) {\n            sortedSet.add(idx);\n          }\n          addStep(sortedArray, [], [], Array.from(sortedSet));\n        };\n\n        const mergeSort = (left: number, right: number) => {\n          if (left < right) {\n            const mid = Math.floor((left + right) / 2);\n            mergeSort(left, mid);\n            mergeSort(mid + 1, right);\n            merge(left, mid, right);\n          } else if (left === right) {\n            sortedSet.add(left);\n            addStep(sortedArray, [], [], Array.from(sortedSet));\n          }\n        };\n\n        mergeSort(0, sortedArray.length - 1);\n        break;\n      }\n    }\n\n    setSteps(newSteps);\n    setCurrentStep(0);\n  }, [array]);\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-gray-900 via-purple-900 to-gray-900 p-8\">\n      <div className=\"max-w-7xl mx-auto space-y-8\">\n        <motion.div\n          initial={{ opacity: 0, y: -20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.8 }}\n          className=\"text-center space-y-6\"\n        >\n          <motion.h1\n            className=\"text-6xl font-bold bg-gradient-to-r from-cyan-400 via-purple-400 to-pink-400 bg-clip-text text-transparent\"\n            animate={{\n              textShadow: [\n                '0 0 20px rgba(0, 255, 255, 0.5)',\n                '0 0 40px rgba(255, 0, 255, 0.5)',\n                '0 0 20px rgba(0, 255, 255, 0.5)'\n              ]\n            }}\n            transition={{ duration: 2, repeat: Infinity }}\n          >\n            <BarChart3 className=\"inline-block mr-4 mb-2\" size={48} />\n            Algorithm Visualizer\n          </motion.h1>\n\n          <div className=\"flex items-center justify-center gap-6 flex-wrap\">\n            <div className=\"flex gap-3\">\n              {mockAlgorithms.map((algo) => (\n                <motion.button\n                  key={algo.id}\n                  onClick={() => setSelectedAlgorithm(algo.id as AlgorithmType)}\n                  className={`px-6 py-3 rounded-lg font-semibold transition-all ${\n                    selectedAlgorithm === algo.id\n                      ? 'bg-gradient-to-r from-cyan-500 to-purple-500 text-white shadow-lg shadow-cyan-500/50'\n                      : 'bg-gray-800 text-gray-300 hover:bg-gray-700'\n                  }`}\n                  whileHover={{ scale: 1.05 }}\n                  whileTap={{ scale: 0.95 }}\n                >\n                  {algo.name}\n                </motion.button>\n              ))}\n            </div>\n\n            <motion.div\n              className=\"px-6 py-3 rounded-lg bg-gradient-to-r from-purple-600 to-pink-600 text-white font-mono font-bold shadow-lg\"\n              animate={{\n                boxShadow: [\n                  '0 0 20px rgba(168, 85, 247, 0.6)',\n                  '0 0 40px rgba(236, 72, 153, 0.6)',\n                  '0 0 20px rgba(168, 85, 247, 0.6)'\n                ]\n              }}\n              transition={{ duration: 2, repeat: Infinity }}\n            >\n              <Zap className=\"inline-block mr-2 mb-1\" size={20} />\n              {mockAlgorithms.find(a => a.id === selectedAlgorithm)?.complexity}\n            </motion.div>\n          </div>\n        </motion.div>\n\n                <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.6, delay: 0.2 }}\n          className=\"relative bg-gray-900/50 backdrop-blur-xl border border-cyan-500/30 rounded-2xl p-6 shadow-2xl\"\n        >\n          <div className=\"absolute inset-0 bg-gradient-to-r from-cyan-500/5 via-purple-500/5 to-pink-500/5 rounded-2xl\" />\n          \n          <div className=\"relative space-y-6\">\n            {/* Control Buttons */}\n            <div className=\"flex items-center justify-center gap-4\">\n              <Button\n                onClick={isPlaying ? pauseVisualization : startVisualization}\n                disabled={steps.length === 0}\n                className=\"relative group bg-gradient-to-r from-cyan-600 to-blue-600 hover:from-cyan-500 hover:to-blue-500 text-white px-8 py-6 rounded-xl shadow-lg shadow-cyan-500/50 transition-all duration-300 hover:shadow-cyan-500/80 hover:scale-105 disabled:opacity-50 disabled:cursor-not-allowed\"\n              >\n                <div className=\"absolute inset-0 bg-gradient-to-r from-cyan-400 to-blue-400 rounded-xl opacity-0 group-hover:opacity-20 blur transition-opacity\" />\n                {isPlaying ? (\n                  <Pause className=\"w-6 h-6\" />\n                ) : (\n                  <Play className=\"w-6 h-6\" />\n                )}\n                <span className=\"ml-2 font-semibold\">\n                  {isPlaying ? 'Pause' : 'Play'}\n                </span>\n              </Button>\n\n              <Button\n                onClick={resetVisualization}\n                className=\"relative group bg-gradient-to-r from-purple-600 to-pink-600 hover:from-purple-500 hover:to-pink-500 text-white px-8 py-6 rounded-xl shadow-lg shadow-purple-500/50 transition-all duration-300 hover:shadow-purple-500/80 hover:scale-105\"\n              >\n                <div className=\"absolute inset-0 bg-gradient-to-r from-purple-400 to-pink-400 rounded-xl opacity-0 group-hover:opacity-20 blur transition-opacity\" />\n                <RotateCcw className=\"w-6 h-6\" />\n                <span className=\"ml-2 font-semibold\">Reset</span>\n              </Button>\n\n              <Button\n                onClick={() => generateSortingSteps(selectedAlgorithm)}\n                disabled={array.length === 0 || isPlaying}\n                className=\"relative group bg-gradient-to-r from-green-600 to-emerald-600 hover:from-green-500 hover:to-emerald-500 text-white px-8 py-6 rounded-xl shadow-lg shadow-green-500/50 transition-all duration-300 hover:shadow-green-500/80 hover:scale-105 disabled:opacity-50 disabled:cursor-not-allowed\"\n              >\n                <div className=\"absolute inset-0 bg-gradient-to-r from-green-400 to-emerald-400 rounded-xl opacity-0 group-hover:opacity-20 blur transition-opacity\" />\n                <Zap className=\"w-6 h-6\" />\n                <span className=\"ml-2 font-semibold\">Generate</span>\n              </Button>\n            </div>\n\n            {/* Sliders */}\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              {/* Speed Control */}\n              <div className=\"space-y-3\">\n                <div className=\"flex items-center justify-between\">\n                  <label className=\"text-cyan-400 font-semibold flex items-center gap-2\">\n                    <Zap className=\"w-4 h-4\" />\n                    Speed\n                  </label>\n                  <span className=\"text-cyan-300 font-mono text-sm bg-cyan-500/10 px-3 py-1 rounded-lg border border-cyan-500/30\">\n                    {speed[0]}ms\n                  </span>\n                </div>\n                <div className=\"relative\">\n                  <Slider\n                    value={speed}\n                    onValueChange={setSpeed}\n                    min={10}\n                    max={200}\n                    step={10}\n                    disabled={isPlaying}\n                    className=\"cursor-pointer\"\n                  />\n                  <div className=\"absolute -bottom-6 left-0 right-0 flex justify-between text-xs text-gray-500\">\n                    <span>Fast</span>\n                    <span>Slow</span>\n                  </div>\n                </div>\n              </div>\n\n              {/* Array Size Control */}\n              <div className=\"space-y-3\">\n                <div className=\"flex items-center justify-between\">\n                  <label className=\"text-purple-400 font-semibold flex items-center gap-2\">\n                    <BarChart3 className=\"w-4 h-4\" />\n                    Array Size\n                  </label>\n                  <span className=\"text-purple-300 font-mono text-sm bg-purple-500/10 px-3 py-1 rounded-lg border border-purple-500/30\">\n                    {arraySize[0]}\n                  </span>\n                </div>\n                <div className=\"relative\">\n                  <Slider\n                    value={arraySize}\n                    onValueChange={setArraySize}\n                    min={5}\n                    max={100}\n                    step={5}\n                    disabled={isPlaying}\n                    className=\"cursor-pointer\"\n                  />\n                  <div className=\"absolute -bottom-6 left-0 right-0 flex justify-between text-xs text-gray-500\">\n                    <span>5</span>\n                    <span>100</span>\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            {/* Progress Indicator */}\n            {steps.length > 0 && (\n              <motion.div\n                initial={{ opacity: 0 }}\n                animate={{ opacity: 1 }}\n                className=\"pt-4 border-t border-cyan-500/20\"\n              >\n                <div className=\"flex items-center justify-between text-sm mb-2\">\n                  <span className=\"text-gray-400\">Progress</span>\n                  <span className=\"text-cyan-400 font-mono\">\n                    {currentStep} / {steps.length}\n                  </span>\n                </div>\n                <div className=\"h-2 bg-gray-800 rounded-full overflow-hidden\">\n                  <motion.div\n                    className=\"h-full bg-gradient-to-r from-cyan-500 via-purple-500 to-pink-500\"\n                    initial={{ width: 0 }}\n                    animate={{ width: `${(currentStep / steps.length) * 100}%` }}\n                    transition={{ duration: 0.3 }}\n                  />\n                </div>\n              </motion.div>\n            )}\n          </div>\n        </motion.div>\n\n        <div className=\"relative bg-gray-950/50 backdrop-blur-sm rounded-2xl border border-purple-500/30 p-8 overflow-hidden\">\n          {/* Neon grid background */}\n          <div className=\"absolute inset-0 opacity-20\">\n            <div className=\"absolute inset-0\" style={{\n              backgroundImage: `\n                linear-gradient(to right, #00ffff 1px, transparent 1px),\n                linear-gradient(to bottom, #00ffff 1px, transparent 1px)\n              `,\n              backgroundSize: '40px 40px'\n            }} />\n          </div>\n\n          {/* Visualization bars */}\n          <div className=\"relative h-96 flex items-end justify-center gap-1 px-4\">\n            {array.length === 0 ? (\n              <div className=\"absolute inset-0 flex items-center justify-center\">\n                <div className=\"text-center space-y-4\">\n                  <BarChart3 className=\"w-16 h-16 mx-auto text-purple-400/50\" />\n                  <p className=\"text-purple-300/70 text-lg\">Generate an array to start visualizing</p>\n                </div>\n              </div>\n            ) : (\n              array.map((element, index) => {\n                const maxValue = Math.max(...array.map(el => el.value));\n                const heightPercentage = (element.value / maxValue) * 100;\n                const isComparing = element.isComparing;\n                const isSwapping = element.isSwapping;\n                const isSorted = element.isSorted;\n\n                let barColor = NEON_COLORS[index % NEON_COLORS.length];\n                let glowColor = barColor;\n                \n                if (isSorted) {\n                  barColor = '#00ff00';\n                  glowColor = '#00ff00';\n                } else if (isSwapping) {\n                  barColor = '#ff0066';\n                  glowColor = '#ff0066';\n                } else if (isComparing) {\n                  barColor = '#ffff00';\n                  glowColor = '#ffff00';\n                }\n\n                return (\n                  <motion.div\n                    key={element.id}\n                    className=\"relative flex-1 min-w-[4px] max-w-[60px] rounded-t-lg\"\n                    initial={{ height: 0, opacity: 0 }}\n                    animate={{\n                      height: `${heightPercentage}%`,\n                      opacity: 1,\n                      backgroundColor: barColor,\n                      boxShadow: [\n                        `0 0 10px ${glowColor}`,\n                        `0 0 20px ${glowColor}`,\n                        `0 0 10px ${glowColor}`\n                      ]\n                    }}\n                    transition={{\n                      height: { duration: 0.3, ease: \"easeOut\" },\n                      backgroundColor: { duration: 0.2 },\n                      boxShadow: { duration: 0.5, repeat: isComparing || isSwapping ? Infinity : 0 }\n                    }}\n                    style={{\n                      backgroundColor: barColor,\n                      boxShadow: `0 0 15px ${glowColor}, 0 0 30px ${glowColor}40`\n                    }}\n                  >\n                    {/* Trail effect for swapping */}\n                    {isSwapping && (\n                      <motion.div\n                        className=\"absolute inset-0 rounded-t-lg\"\n                        initial={{ opacity: 0 }}\n                        animate={{ \n                          opacity: [0.8, 0],\n                          scale: [1, 1.2]\n                        }}\n                        transition={{ \n                          duration: 0.6,\n                          repeat: Infinity\n                        }}\n                        style={{\n                          backgroundColor: barColor,\n                          filter: 'blur(8px)'\n                        }}\n                      />\n                    )}\n\n                    {/* Value label */}\n                    {array.length <= 30 && (\n                      <div className=\"absolute -top-6 left-1/2 -translate-x-1/2 text-xs font-mono text-white/80\">\n                        {element.value}\n                      </div>\n                    )}\n                  </motion.div>\n                );\n              })\n            )}\n          </div>\n        </div></parameter>\n\n        \n\n      </div>\n    </div>\n  );\n}",
  "error": null,
  "overall_score": 59,
  "code_quality_score": 18,
  "architecture_score": 14,
  "performance_score": 16,
  "accessibility_score": 11,
  "metadata": {
    "document_id": "eval_room_e954e905684a",
    "prompt_category": "creative",
    "prompt_complexity": 9.0
  },
  "raw_response": {
    "document_id": "eval_room_e954e905684a",
    "mode": "parallel",
    "prompt": "Build a captivating algorithm visualizer with neon colored bars, smooth height transitions, glowing comparison indicators, trail effects during swaps, and a futuristic dashboard design with animated controls",
    "content": "import { useState, useCallback } from 'react';\nimport { useEffect } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Slider } from '@/components/ui/slider';\nimport { Play, Pause, RotateCcw, Zap, BarChart3 } from 'lucide-react';\n\nimport { motion } from 'framer-motion';\nimport { Card } from '@/components/ui/card';\n\n\ninterface ArrayElement {\n  value: number;\n  id: string;\n  isComparing?: boolean;\n  isSwapping?: boolean;\n  isSorted?: boolean;\n}\n\ninterface AlgorithmStep {\n  array: ArrayElement[];\n  comparingIndices: number[];\n  swappingIndices: number[];\n  sortedIndices: number[];\n}\n\ntype AlgorithmType = 'bubble' | 'quick' | 'merge' | 'insertion';\n\nconst NEON_COLORS = [\n  '#00ffff',\n  '#ff00ff', \n  '#00ff00',\n  '#ffff00',\n  '#ff0066',\n  '#00ffaa'\n];\n\nconst mockAlgorithms = [\n  { id: 'bubble', name: 'Bubble Sort', complexity: 'O(n\u00b2)' },\n  { id: 'quick', name: 'Quick Sort', complexity: 'O(n log n)' },\n  { id: 'merge', name: 'Merge Sort', complexity: 'O(n log n)' },\n  { id: 'insertion', name: 'Insertion Sort', complexity: 'O(n\u00b2)' }\n];\n\nexport default function AlgorithmVisualizer() {\n  const [array, setArray] = useState<ArrayElement[]>([]);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [speed, setSpeed] = useState([50]);\n  const [arraySize, setArraySize] = useState([20]);\n  const [selectedAlgorithm, setSelectedAlgorithm] = useState<AlgorithmType>('bubble');\n  const [currentStep, setCurrentStep] = useState(0);\n  const [steps, setSteps] = useState<AlgorithmStep[]>([]);\n  const [comparisons, setComparisons] = useState(0);\n  const [swaps, setSwaps] = useState(0);\n\n  const generateRandomArray = useCallback(() => {\n    const newArray: ArrayElement[] = Array.from({ length: arraySize[0] }, (_, index) => ({\n      value: Math.floor(Math.random() * 100) + 5,\n      id: `element-${index}-${Date.now()}`,\n      isComparing: false,\n      isSwapping: false,\n      isSorted: false\n    }));\n    setArray(newArray);\n    setSteps([]);\n    setCurrentStep(0);\n    setIsPlaying(false);\n  }, [arraySize]);\n\n  const resetVisualization = useCallback(() => {\n\n    setIsPlaying(false);\n    setCurrentStep(0);\n    setSteps([]);\n    generateRandomArray();\n  }, [generateRandomArray]);\n\n  const animateSteps = useCallback(() => {\n    if (currentStep >= steps.length) {\n      setIsPlaying(false);\n      return;\n    }\n\n    const step = steps[currentStep];\n    setArray(step.array);\n    setCurrentStep(prev => prev + 1);\n  }, [currentStep, steps]);\n\n  const startVisualization = useCallback(() => {\n    if (steps.length === 0 || currentStep >= steps.length) {\n      return;\n    }\n    setIsPlaying(true);\n    \n  }, [steps, speed, currentStep]);\n  useEffect(() => {\n    if (!isPlaying) return;\n\n    const delay = 1000 - (speed[0] * 9.5);\n    const timer = setTimeout(() => {\n      animateSteps();\n    }, delay);\n\n    return () => clearTimeout(timer);\n  }, [isPlaying, speed, animateSteps]);\n\n  const pauseVisualization = useCallback(() => {\n\n    setIsPlaying(false);\n  }, []);\n\n  const generateSortingSteps = useCallback((algorithm: AlgorithmType) => {\n    const sortedArray = [...array];\n    const newSteps: AlgorithmStep[] = [];\n\n    const addStep = (arr: ArrayElement[], comparing: number[] = [], swapping: number[] = [], sorted: number[] = []) => {\n      newSteps.push({\n        array: arr.map(el => ({ ...el })),\n        comparingIndices: [...comparing],\n        swappingIndices: [...swapping],\n        sortedIndices: [...sorted]\n      });\n    };\n\n    // Initial state\n    addStep(sortedArray);\n\n    switch (algorithm) {\n      case 'bubble': {\n        const sortedSet = new Set<number>();\n        for (let i = 0; i < sortedArray.length - 1; i++) {\n          for (let j = 0; j < sortedArray.length - i - 1; j++) {\n            // Comparing\n            addStep(sortedArray, [j, j + 1], [], Array.from(sortedSet));\n            \n            if (sortedArray[j].value > sortedArray[j + 1].value) {\n              // Swapping\n              addStep(sortedArray, [], [j, j + 1], Array.from(sortedSet));\n              [sortedArray[j], sortedArray[j + 1]] = [sortedArray[j + 1], sortedArray[j]];\n              addStep(sortedArray, [], [], Array.from(sortedSet));\n            }\n          }\n          sortedSet.add(sortedArray.length - i - 1);\n          addStep(sortedArray, [], [], Array.from(sortedSet));\n        }\n        sortedSet.add(0);\n        addStep(sortedArray, [], [], Array.from(sortedSet));\n        break;\n      }\n\n      case 'insertion': {\n        const sortedSet = new Set<number>([0]);\n        addStep(sortedArray, [], [], [0]);\n        \n        for (let i = 1; i < sortedArray.length; i++) {\n          const key = sortedArray[i];\n          let j = i - 1;\n          \n          addStep(sortedArray, [i], [], Array.from(sortedSet));\n          \n          while (j >= 0 && sortedArray[j].value > key.value) {\n            addStep(sortedArray, [j, j + 1], [], Array.from(sortedSet));\n            addStep(sortedArray, [], [j, j + 1], Array.from(sortedSet));\n            sortedArray[j + 1] = sortedArray[j];\n            addStep(sortedArray, [], [], Array.from(sortedSet));\n            j--;\n          }\n          \n          sortedArray[j + 1] = key;\n          sortedSet.add(i);\n          addStep(sortedArray, [], [], Array.from(sortedSet));\n        }\n        break;\n      }\n\n      case 'quick': {\n        const sortedSet = new Set<number>();\n        \n        const partition = (low: number, high: number): number => {\n          const pivot = sortedArray[high];\n          addStep(sortedArray, [high], [], Array.from(sortedSet));\n          let i = low - 1;\n\n          for (let j = low; j < high; j++) {\n            addStep(sortedArray, [j, high], [], Array.from(sortedSet));\n            \n            if (sortedArray[j].value < pivot.value) {\n              i++;\n              if (i !== j) {\n                addStep(sortedArray, [], [i, j], Array.from(sortedSet));\n                [sortedArray[i], sortedArray[j]] = [sortedArray[j], sortedArray[i]];\n                addStep(sortedArray, [], [], Array.from(sortedSet));\n              }\n            }\n          }\n          \n          addStep(sortedArray, [], [i + 1, high], Array.from(sortedSet));\n          [sortedArray[i + 1], sortedArray[high]] = [sortedArray[high], sortedArray[i + 1]];\n          addStep(sortedArray, [], [], Array.from(sortedSet));\n          \n          return i + 1;\n        };\n\n        const quickSort = (low: number, high: number) => {\n          if (low < high) {\n            const pi = partition(low, high);\n            sortedSet.add(pi);\n            addStep(sortedArray, [], [], Array.from(sortedSet));\n            \n            quickSort(low, pi - 1);\n            quickSort(pi + 1, high);\n          } else if (low === high) {\n            sortedSet.add(low);\n            addStep(sortedArray, [], [], Array.from(sortedSet));\n          }\n        };\n\n        quickSort(0, sortedArray.length - 1);\n        break;\n      }\n\n      case 'merge': {\n        const sortedSet = new Set<number>();\n        \n        const merge = (left: number, mid: number, right: number) => {\n          const leftArr = sortedArray.slice(left, mid + 1);\n          const rightArr = sortedArray.slice(mid + 1, right + 1);\n          \n          let i = 0, j = 0, k = left;\n          \n          while (i < leftArr.length && j < rightArr.length) {\n            addStep(sortedArray, [left + i, mid + 1 + j], [], Array.from(sortedSet));\n            \n            if (leftArr[i].value <= rightArr[j].value) {\n              sortedArray[k] = leftArr[i];\n              i++;\n            } else {\n              sortedArray[k] = rightArr[j];\n              j++;\n            }\n            addStep(sortedArray, [], [k], Array.from(sortedSet));\n            k++;\n          }\n          \n          while (i < leftArr.length) {\n            sortedArray[k] = leftArr[i];\n            addStep(sortedArray, [], [k], Array.from(sortedSet));\n            i++;\n            k++;\n          }\n          \n          while (j < rightArr.length) {\n            sortedArray[k] = rightArr[j];\n            addStep(sortedArray, [], [k], Array.from(sortedSet));\n            j++;\n            k++;\n          }\n          \n          for (let idx = left; idx <= right; idx++) {\n            sortedSet.add(idx);\n          }\n          addStep(sortedArray, [], [], Array.from(sortedSet));\n        };\n\n        const mergeSort = (left: number, right: number) => {\n          if (left < right) {\n            const mid = Math.floor((left + right) / 2);\n            mergeSort(left, mid);\n            mergeSort(mid + 1, right);\n            merge(left, mid, right);\n          } else if (left === right) {\n            sortedSet.add(left);\n            addStep(sortedArray, [], [], Array.from(sortedSet));\n          }\n        };\n\n        mergeSort(0, sortedArray.length - 1);\n        break;\n      }\n    }\n\n    setSteps(newSteps);\n    setCurrentStep(0);\n  }, [array]);\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-gray-900 via-purple-900 to-gray-900 p-8\">\n      <div className=\"max-w-7xl mx-auto space-y-8\">\n        <motion.div\n          initial={{ opacity: 0, y: -20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.8 }}\n          className=\"text-center space-y-6\"\n        >\n          <motion.h1\n            className=\"text-6xl font-bold bg-gradient-to-r from-cyan-400 via-purple-400 to-pink-400 bg-clip-text text-transparent\"\n            animate={{\n              textShadow: [\n                '0 0 20px rgba(0, 255, 255, 0.5)',\n                '0 0 40px rgba(255, 0, 255, 0.5)',\n                '0 0 20px rgba(0, 255, 255, 0.5)'\n              ]\n            }}\n            transition={{ duration: 2, repeat: Infinity }}\n          >\n            <BarChart3 className=\"inline-block mr-4 mb-2\" size={48} />\n            Algorithm Visualizer\n          </motion.h1>\n\n          <div className=\"flex items-center justify-center gap-6 flex-wrap\">\n            <div className=\"flex gap-3\">\n              {mockAlgorithms.map((algo) => (\n                <motion.button\n                  key={algo.id}\n                  onClick={() => setSelectedAlgorithm(algo.id as AlgorithmType)}\n                  className={`px-6 py-3 rounded-lg font-semibold transition-all ${\n                    selectedAlgorithm === algo.id\n                      ? 'bg-gradient-to-r from-cyan-500 to-purple-500 text-white shadow-lg shadow-cyan-500/50'\n                      : 'bg-gray-800 text-gray-300 hover:bg-gray-700'\n                  }`}\n                  whileHover={{ scale: 1.05 }}\n                  whileTap={{ scale: 0.95 }}\n                >\n                  {algo.name}\n                </motion.button>\n              ))}\n            </div>\n\n            <motion.div\n              className=\"px-6 py-3 rounded-lg bg-gradient-to-r from-purple-600 to-pink-600 text-white font-mono font-bold shadow-lg\"\n              animate={{\n                boxShadow: [\n                  '0 0 20px rgba(168, 85, 247, 0.6)',\n                  '0 0 40px rgba(236, 72, 153, 0.6)',\n                  '0 0 20px rgba(168, 85, 247, 0.6)'\n                ]\n              }}\n              transition={{ duration: 2, repeat: Infinity }}\n            >\n              <Zap className=\"inline-block mr-2 mb-1\" size={20} />\n              {mockAlgorithms.find(a => a.id === selectedAlgorithm)?.complexity}\n            </motion.div>\n          </div>\n        </motion.div>\n\n                <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.6, delay: 0.2 }}\n          className=\"relative bg-gray-900/50 backdrop-blur-xl border border-cyan-500/30 rounded-2xl p-6 shadow-2xl\"\n        >\n          <div className=\"absolute inset-0 bg-gradient-to-r from-cyan-500/5 via-purple-500/5 to-pink-500/5 rounded-2xl\" />\n          \n          <div className=\"relative space-y-6\">\n            {/* Control Buttons */}\n            <div className=\"flex items-center justify-center gap-4\">\n              <Button\n                onClick={isPlaying ? pauseVisualization : startVisualization}\n                disabled={steps.length === 0}\n                className=\"relative group bg-gradient-to-r from-cyan-600 to-blue-600 hover:from-cyan-500 hover:to-blue-500 text-white px-8 py-6 rounded-xl shadow-lg shadow-cyan-500/50 transition-all duration-300 hover:shadow-cyan-500/80 hover:scale-105 disabled:opacity-50 disabled:cursor-not-allowed\"\n              >\n                <div className=\"absolute inset-0 bg-gradient-to-r from-cyan-400 to-blue-400 rounded-xl opacity-0 group-hover:opacity-20 blur transition-opacity\" />\n                {isPlaying ? (\n                  <Pause className=\"w-6 h-6\" />\n                ) : (\n                  <Play className=\"w-6 h-6\" />\n                )}\n                <span className=\"ml-2 font-semibold\">\n                  {isPlaying ? 'Pause' : 'Play'}\n                </span>\n              </Button>\n\n              <Button\n                onClick={resetVisualization}\n                className=\"relative group bg-gradient-to-r from-purple-600 to-pink-600 hover:from-purple-500 hover:to-pink-500 text-white px-8 py-6 rounded-xl shadow-lg shadow-purple-500/50 transition-all duration-300 hover:shadow-purple-500/80 hover:scale-105\"\n              >\n                <div className=\"absolute inset-0 bg-gradient-to-r from-purple-400 to-pink-400 rounded-xl opacity-0 group-hover:opacity-20 blur transition-opacity\" />\n                <RotateCcw className=\"w-6 h-6\" />\n                <span className=\"ml-2 font-semibold\">Reset</span>\n              </Button>\n\n              <Button\n                onClick={() => generateSortingSteps(selectedAlgorithm)}\n                disabled={array.length === 0 || isPlaying}\n                className=\"relative group bg-gradient-to-r from-green-600 to-emerald-600 hover:from-green-500 hover:to-emerald-500 text-white px-8 py-6 rounded-xl shadow-lg shadow-green-500/50 transition-all duration-300 hover:shadow-green-500/80 hover:scale-105 disabled:opacity-50 disabled:cursor-not-allowed\"\n              >\n                <div className=\"absolute inset-0 bg-gradient-to-r from-green-400 to-emerald-400 rounded-xl opacity-0 group-hover:opacity-20 blur transition-opacity\" />\n                <Zap className=\"w-6 h-6\" />\n                <span className=\"ml-2 font-semibold\">Generate</span>\n              </Button>\n            </div>\n\n            {/* Sliders */}\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              {/* Speed Control */}\n              <div className=\"space-y-3\">\n                <div className=\"flex items-center justify-between\">\n                  <label className=\"text-cyan-400 font-semibold flex items-center gap-2\">\n                    <Zap className=\"w-4 h-4\" />\n                    Speed\n                  </label>\n                  <span className=\"text-cyan-300 font-mono text-sm bg-cyan-500/10 px-3 py-1 rounded-lg border border-cyan-500/30\">\n                    {speed[0]}ms\n                  </span>\n                </div>\n                <div className=\"relative\">\n                  <Slider\n                    value={speed}\n                    onValueChange={setSpeed}\n                    min={10}\n                    max={200}\n                    step={10}\n                    disabled={isPlaying}\n                    className=\"cursor-pointer\"\n                  />\n                  <div className=\"absolute -bottom-6 left-0 right-0 flex justify-between text-xs text-gray-500\">\n                    <span>Fast</span>\n                    <span>Slow</span>\n                  </div>\n                </div>\n              </div>\n\n              {/* Array Size Control */}\n              <div className=\"space-y-3\">\n                <div className=\"flex items-center justify-between\">\n                  <label className=\"text-purple-400 font-semibold flex items-center gap-2\">\n                    <BarChart3 className=\"w-4 h-4\" />\n                    Array Size\n                  </label>\n                  <span className=\"text-purple-300 font-mono text-sm bg-purple-500/10 px-3 py-1 rounded-lg border border-purple-500/30\">\n                    {arraySize[0]}\n                  </span>\n                </div>\n                <div className=\"relative\">\n                  <Slider\n                    value={arraySize}\n                    onValueChange={setArraySize}\n                    min={5}\n                    max={100}\n                    step={5}\n                    disabled={isPlaying}\n                    className=\"cursor-pointer\"\n                  />\n                  <div className=\"absolute -bottom-6 left-0 right-0 flex justify-between text-xs text-gray-500\">\n                    <span>5</span>\n                    <span>100</span>\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            {/* Progress Indicator */}\n            {steps.length > 0 && (\n              <motion.div\n                initial={{ opacity: 0 }}\n                animate={{ opacity: 1 }}\n                className=\"pt-4 border-t border-cyan-500/20\"\n              >\n                <div className=\"flex items-center justify-between text-sm mb-2\">\n                  <span className=\"text-gray-400\">Progress</span>\n                  <span className=\"text-cyan-400 font-mono\">\n                    {currentStep} / {steps.length}\n                  </span>\n                </div>\n                <div className=\"h-2 bg-gray-800 rounded-full overflow-hidden\">\n                  <motion.div\n                    className=\"h-full bg-gradient-to-r from-cyan-500 via-purple-500 to-pink-500\"\n                    initial={{ width: 0 }}\n                    animate={{ width: `${(currentStep / steps.length) * 100}%` }}\n                    transition={{ duration: 0.3 }}\n                  />\n                </div>\n              </motion.div>\n            )}\n          </div>\n        </motion.div>\n\n        <div className=\"relative bg-gray-950/50 backdrop-blur-sm rounded-2xl border border-purple-500/30 p-8 overflow-hidden\">\n          {/* Neon grid background */}\n          <div className=\"absolute inset-0 opacity-20\">\n            <div className=\"absolute inset-0\" style={{\n              backgroundImage: `\n                linear-gradient(to right, #00ffff 1px, transparent 1px),\n                linear-gradient(to bottom, #00ffff 1px, transparent 1px)\n              `,\n              backgroundSize: '40px 40px'\n            }} />\n          </div>\n\n          {/* Visualization bars */}\n          <div className=\"relative h-96 flex items-end justify-center gap-1 px-4\">\n            {array.length === 0 ? (\n              <div className=\"absolute inset-0 flex items-center justify-center\">\n                <div className=\"text-center space-y-4\">\n                  <BarChart3 className=\"w-16 h-16 mx-auto text-purple-400/50\" />\n                  <p className=\"text-purple-300/70 text-lg\">Generate an array to start visualizing</p>\n                </div>\n              </div>\n            ) : (\n              array.map((element, index) => {\n                const maxValue = Math.max(...array.map(el => el.value));\n                const heightPercentage = (element.value / maxValue) * 100;\n                const isComparing = element.isComparing;\n                const isSwapping = element.isSwapping;\n                const isSorted = element.isSorted;\n\n                let barColor = NEON_COLORS[index % NEON_COLORS.length];\n                let glowColor = barColor;\n                \n                if (isSorted) {\n                  barColor = '#00ff00';\n                  glowColor = '#00ff00';\n                } else if (isSwapping) {\n                  barColor = '#ff0066';\n                  glowColor = '#ff0066';\n                } else if (isComparing) {\n                  barColor = '#ffff00';\n                  glowColor = '#ffff00';\n                }\n\n                return (\n                  <motion.div\n                    key={element.id}\n                    className=\"relative flex-1 min-w-[4px] max-w-[60px] rounded-t-lg\"\n                    initial={{ height: 0, opacity: 0 }}\n                    animate={{\n                      height: `${heightPercentage}%`,\n                      opacity: 1,\n                      backgroundColor: barColor,\n                      boxShadow: [\n                        `0 0 10px ${glowColor}`,\n                        `0 0 20px ${glowColor}`,\n                        `0 0 10px ${glowColor}`\n                      ]\n                    }}\n                    transition={{\n                      height: { duration: 0.3, ease: \"easeOut\" },\n                      backgroundColor: { duration: 0.2 },\n                      boxShadow: { duration: 0.5, repeat: isComparing || isSwapping ? Infinity : 0 }\n                    }}\n                    style={{\n                      backgroundColor: barColor,\n                      boxShadow: `0 0 15px ${glowColor}, 0 0 30px ${glowColor}40`\n                    }}\n                  >\n                    {/* Trail effect for swapping */}\n                    {isSwapping && (\n                      <motion.div\n                        className=\"absolute inset-0 rounded-t-lg\"\n                        initial={{ opacity: 0 }}\n                        animate={{ \n                          opacity: [0.8, 0],\n                          scale: [1, 1.2]\n                        }}\n                        transition={{ \n                          duration: 0.6,\n                          repeat: Infinity\n                        }}\n                        style={{\n                          backgroundColor: barColor,\n                          filter: 'blur(8px)'\n                        }}\n                      />\n                    )}\n\n                    {/* Value label */}\n                    {array.length <= 30 && (\n                      <div className=\"absolute -top-6 left-1/2 -translate-x-1/2 text-xs font-mono text-white/80\">\n                        {element.value}\n                      </div>\n                    )}\n                  </motion.div>\n                );\n              })\n            )}\n          </div>\n        </div></parameter>\n\n        \n\n      </div>\n    </div>\n  );\n}",
    "error": null,
    "elapsed_time": 54.30928897857666,
    "success": true
  }
}