{
  "prompt_id": "algorithm_visualizer",
  "prompt_name": "Algorithm Visualizer",
  "mode": "parallel",
  "run_number": 27,
  "timestamp": "2025-10-14T12:27:14.744781",
  "response_time": 54.31487965583801,
  "total_tokens": null,
  "response_content": "import { useState, useCallback } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Slider } from '@/components/ui/slider';\nimport { Play, Pause, RotateCcw, Zap, BarChart3 } from 'lucide-react';\nimport { motion } from 'framer-motion';\n\ninterface ArrayElement {\n  value: number;\n  id: string;\n  isComparing?: boolean;\n  isSwapping?: boolean;\n  isSorted?: boolean;\n}\n\ninterface AlgorithmStep {\n  array: ArrayElement[];\n  comparingIndices: number[];\n  swappingIndices: number[];\n  sortedIndices: number[];\n}\n\ntype AlgorithmType = 'bubble' | 'quick' | 'merge' | 'insertion';\n\nconst NEON_COLORS = [\n  '#00ffff',\n  '#ff00ff', \n  '#00ff00',\n  '#ffff00',\n  '#ff0066',\n  '#00ffaa'\n];\n\nconst mockAlgorithms = [\n  { id: 'bubble', name: 'Bubble Sort', complexity: 'O(n\u00b2)' },\n  { id: 'quick', name: 'Quick Sort', complexity: 'O(n log n)' },\n  { id: 'merge', name: 'Merge Sort', complexity: 'O(n log n)' },\n  { id: 'insertion', name: 'Insertion Sort', complexity: 'O(n\u00b2)' }\n];\n\nexport default function AlgorithmVisualizer() {\n  const [array, setArray] = useState<ArrayElement[]>([]);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [speed, setSpeed] = useState([50]);\n  const [arraySize, setArraySize] = useState([20]);\n  const [selectedAlgorithm, setSelectedAlgorithm] = useState<AlgorithmType>('bubble');\n  const [currentStep, setCurrentStep] = useState(0);\n  const [steps, setSteps] = useState<AlgorithmStep[]>([]);\n  const [comparisons, setComparisons] = useState(0);\n  const [swaps, setSwaps] = useState(0);\n\n  const generateRandomArray = useCallback(() => {\n    const newArray: ArrayElement[] = Array.from({ length: arraySize[0] }, (_, index) => ({\n      value: Math.floor(Math.random() * 100) + 5,\n      id: `element-${index}-${Date.now()}`,\n      isComparing: false,\n      isSwapping: false,\n      isSorted: false\n    }));\n    \n    setArray(newArray);\n    setSteps([]);\n    setCurrentStep(0);\n    setComparisons(0);\n    setSwaps(0);\n    setIsPlaying(false);\n  }, [arraySize]);\n\n  const resetVisualization = useCallback(() => {\n    setIsPlaying(false);\n    setCurrentStep(0);\n    setSteps([]);\n    setComparisons(0);\n    setSwaps(0);\n    generateRandomArray();\n  }, [generateRandomArray]);\n\n  const handlePlayPause = useCallback(() => {\n\nif (!steps.length) return;\n    \n    if (!isPlaying) {\n      setIsPlaying(true);\n    } else {\n      setIsPlaying(false);\n    }\n  }, [isPlaying, steps.length]);\n\n  // Effect to handle step-by-step animation\n  useCallback(() => {\n    if (!isPlaying || currentStep >= steps.length - 1) {\n      if (currentStep >= steps.length - 1 && isPlaying) {\n        setIsPlaying(false);\n      }\n      return;\n    }\n\n    const delay = 1000 - speed[0] * 9.5; // Convert speed (0-100) to delay (1000ms-50ms)\n    const timer = setTimeout(() => {\n      const step = steps[currentStep + 1];\n      setArray(step.array);\n      setCurrentStep(currentStep + 1);\n      \n      // Update statistics\n      if (step.comparingIndices.length > 0) {\n        setComparisons(prev => prev + 1);\n      }\n      if (step.swappingIndices.length > 0) {\n        setSwaps(prev => prev + 1);\n      }\n    }, delay);\n\n    return () => clearTimeout(timer);\n  }, [isPlaying, currentStep, steps, speed])();\n\n  // Cleanup effect\n  useCallback(() => {\n    if (isPlaying && currentStep >= steps.length - 1) {\n      setIsPlaying(false);\n    }\n  }, [isPlaying, currentStep, steps.length])();\n\n  }, [</parameter>\n</invoke> currentStep, steps, speed]);\n\n  const generateSteps = useCallback((algorithm: AlgorithmType) => {\n    if (array.length === 0) return;\n\n    const newSteps: AlgorithmStep[] = [];\n    const arr = [...array];\n    let comparisonCount = 0;\n    let swapCount = 0;\n\n    const recordStep = (\n      currentArray: ArrayElement[],\n      comparing: number[] = [],\n      swapping: number[] = [],\n      sorted: number[] = []\n    ) => {\n      newSteps.push({\n        array: currentArray.map((el, idx) => ({\n          ...el,\n          isComparing: comparing.includes(idx),\n          isSwapping: swapping.includes(idx),\n          isSorted: sorted.includes(idx)\n        })),\n        comparingIndices: comparing,\n        swappingIndices: swapping,\n        sortedIndices: sorted\n      });\n    };\n\n    const swap = (arr: ArrayElement[], i: number, j: number, sortedIndices: number[] = []) => {\n      comparisonCount++;\n      recordStep([...arr], [i, j], [], sortedIndices);\n      \n      swapCount++;\n      [arr[i], arr[j]] = [arr[j], arr[i]];\n      recordStep([...arr], [], [i, j], sortedIndices);\n    };\n\n    const compare = (arr: ArrayElement[], i: number, j: number, sortedIndices: number[] = []) => {\n      comparisonCount++;\n      recordStep([...arr], [i, j], [], sortedIndices);\n    };\n\n    switch (algorithm) {\n      case 'bubble': {\n        const n = arr.length;\n        const sortedIndices: number[] = [];\n        \n        for (let i = 0; i < n - 1; i++) {\n          let swapped = false;\n          for (let j = 0; j < n - i - 1; j++) {\n            compare(arr, j, j + 1, sortedIndices);\n            \n            if (arr[j].value > arr[j + 1].value) {\n              swap(arr, j, j + 1, sortedIndices);\n              swapped = true;\n            }\n          }\n          sortedIndices.push(n - i - 1);\n          recordStep([...arr], [], [], sortedIndices);\n          \n          if (!swapped) break;\n        }\n        \n        for (let i = 0; i < n; i++) {\n          if (!sortedIndices.includes(i)) sortedIndices.push(i);\n        }\n        recordStep([...arr], [], [], sortedIndices);\n        break;\n      }\n\n      case 'quick': {\n        const sortedIndices: number[] = [];\n        \n        const partition = (low: number, high: number): number => {\n          const pivot = arr[high].value;\n          let i = low - 1;\n\n          for (let j = low; j < high; j++) {\n            compare(arr, j, high, sortedIndices);\n            \n            if (arr[j].value < pivot) {\n              i++;\n              if (i !== j) {\n                swap(arr, i, j, sortedIndices);\n              }\n            }\n          }\n          \n          if (i + 1 !== high) {\n            swap(arr, i + 1, high, sortedIndices);\n          }\n          return i + 1;\n        };\n\n        const quickSort = (low: number, high: number) => {\n          if (low < high) {\n            const pi = partition(low, high);\n            sortedIndices.push(pi);\n            recordStep([...arr], [], [], sortedIndices);\n            \n            quickSort(low, pi - 1);\n            quickSort(pi + 1, high);\n          } else if (low === high) {\n            sortedIndices.push(low);\n            recordStep([...arr], [], [], sortedIndices);\n          }\n        };\n\n        quickSort(0, arr.length - 1);\n        \n        for (let i = 0; i < arr.length; i++) {\n          if (!sortedIndices.includes(i)) sortedIndices.push(i);\n        }\n        recordStep([...arr], [], [], sortedIndices);\n        break;\n      }\n\n      case 'merge': {\n        const sortedIndices: number[] = [];\n        \n        const merge = (left: number, mid: number, right: number) => {\n          const leftArr = arr.slice(left, mid + 1);\n          const rightArr = arr.slice(mid + 1, right + 1);\n          \n          let i = 0, j = 0, k = left;\n          \n          while (i < leftArr.length && j < rightArr.length) {\n            compare(arr, left + i, mid + 1 + j, sortedIndices);\n            \n            if (leftArr[i].value <= rightArr[j].value) {\n              arr[k] = leftArr[i];\n              i++;\n            } else {\n              arr[k] = rightArr[j];\n              j++;\n            }\n            recordStep([...arr], [], [k], sortedIndices);\n            k++;\n          }\n          \n          while (i < leftArr.length) {\n            arr[k] = leftArr[i];\n            recordStep([...arr], [], [k], sortedIndices);\n            i++;\n            k++;\n          }\n          \n          while (j < rightArr.length) {\n            arr[k] = rightArr[j];\n            recordStep([...arr], [], [k], sortedIndices);\n            j++;\n            k++;\n          }\n        };\n\n        const mergeSort = (left: number, right: number) => {\n          if (left < right) {\n            const mid = Math.floor((left + right) / 2);\n            mergeSort(left, mid);\n            mergeSort(mid + 1, right);\n            merge(left, mid, right);\n            \n            if (left === 0 && right === arr.length - 1) {\n              for (let i = 0; i < arr.length; i++) {\n                sortedIndices.push(i);\n              }\n              recordStep([...arr], [], [], sortedIndices);\n            }\n          }\n        };\n\n        mergeSort(0, arr.length - 1);\n        break;\n      }\n\n      case 'insertion': {\n        const sortedIndices: number[] = [0];\n        recordStep([...arr], [], [], sortedIndices);\n        \n        for (let i = 1; i < arr.length; i++) {\n          const key = arr[i];\n          let j = i - 1;\n          \n          compare(arr, i, j, sortedIndices);\n          \n          while (j >= 0 && arr[j].value > key.value) {\n            comparisonCount++;\n            arr[j + 1] = arr[j];\n            recordStep([...arr], [j, j + 1], [], sortedIndices);\n            j--;\n            \n            if (j >= 0) {\n              compare(arr, j, i, sortedIndices);\n            }\n          }\n          \n          arr[j + 1] = key;\n          recordStep([...arr], [], [j + 1], sortedIndices);\n          sortedIndices.push(i);\n          recordStep([...arr], [], [], sortedIndices);\n        }\n        break;\n      }\n    }\n\n    setSteps(newSteps);\n    setComparisons(comparisonCount);\n    setSwaps(swapCount);\n    setCurrentStep(0);\n    setIsPlaying(false);\n  }, [array]);\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-gray-900 via-purple-900 to-gray-900 p-8\">\n      <div className=\"max-w-7xl mx-auto space-y-8\">\n        <motion.div\n          initial={{ opacity: 0, y: -20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.8 }}\n          className=\"text-center space-y-6\"\n        >\n          <motion.h1\n            className=\"text-6xl font-bold bg-gradient-to-r from-cyan-400 via-purple-400 to-pink-400 bg-clip-text text-transparent\"\n            animate={{\n              textShadow: [\n                '0 0 20px rgba(0, 255, 255, 0.5)',\n                '0 0 40px rgba(255, 0, 255, 0.5)',\n                '0 0 20px rgba(0, 255, 255, 0.5)'\n              ]\n            }}\n            transition={{ duration: 2, repeat: Infinity }}\n          >\n            Algorithm Visualizer\n          </motion.h1>\n          \n          <div className=\"flex justify-center gap-4 flex-wrap\">\n            {mockAlgorithms.map((algo) => (\n              <motion.div\n                key={algo.id}\n                whileHover={{ scale: 1.05 }}\n                whileTap={{ scale: 0.95 }}\n              >\n                <Button\n                  onClick={() => setSelectedAlgorithm(algo.id as AlgorithmType)}\n                  variant={selectedAlgorithm === algo.id ? 'default' : 'outline'}\n                  className={`relative overflow-hidden transition-all duration-300 ${\n                    selectedAlgorithm === algo.id\n                      ? 'bg-gradient-to-r from-cyan-500 to-purple-500 text-white border-0 shadow-lg shadow-cyan-500/50'\n                      : 'bg-gray-800/50 border-cyan-500/30 text-cyan-300 hover:bg-gray-700/50 hover:border-cyan-400'\n                  }`}\n                >\n                  <span className=\"relative z-10 flex flex-col items-center\">\n                    <span className=\"font-semibold\">{algo.name}</span>\n                    <span className=\"text-xs opacity-80\">{algo.complexity}</span>\n                  </span>\n                  {selectedAlgorithm === algo.id && (\n                    <motion.div\n                      className=\"absolute inset-0 bg-gradient-to-r from-cyan-400/20 to-purple-400/20\"\n                      animate={{\n                        opacity: [0.5, 1, 0.5]\n                      }}\n                      transition={{ duration: 1.5, repeat: Infinity }}\n                    />\n                  )}\n                </Button>\n              </motion.div>\n            ))}\n          </div>\n        </motion.div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            className=\"relative bg-gray-900/50 backdrop-blur-xl border border-cyan-500/30 rounded-xl p-6 overflow-hidden group hover:border-cyan-500/60 transition-all\"\n          >\n            <div className=\"absolute inset-0 bg-gradient-to-br from-cyan-500/10 to-transparent opacity-0 group-hover:opacity-100 transition-opacity\" />\n            <div className=\"relative z-10\">\n              <div className=\"flex items-center gap-3 mb-2\">\n                <BarChart3 className=\"w-5 h-5 text-cyan-400\" />\n                <span className=\"text-cyan-400 text-sm font-medium uppercase tracking-wider\">Comparisons</span>\n              </div>\n              <motion.div\n                key={comparisons}\n                initial={{ scale: 1.2, color: '#00ffff' }}\n                animate={{ scale: 1, color: '#ffffff' }}\n                className=\"text-4xl font-bold text-white\"\n              >\n                {comparisons}\n              </motion.div>\n            </div>\n            <div className=\"absolute -bottom-2 -right-2 w-24 h-24 bg-cyan-500/20 rounded-full blur-2xl\" />\n          </motion.div>\n\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ delay: 0.1 }}\n            className=\"relative bg-gray-900/50 backdrop-blur-xl border border-purple-500/30 rounded-xl p-6 overflow-hidden group hover:border-purple-500/60 transition-all\"\n          >\n            <div className=\"absolute inset-0 bg-gradient-to-br from-purple-500/10 to-transparent opacity-0 group-hover:opacity-100 transition-opacity\" />\n            <div className=\"relative z-10\">\n              <div className=\"flex items-center gap-3 mb-2\">\n                <Zap className=\"w-5 h-5 text-purple-400\" />\n                <span className=\"text-purple-400 text-sm font-medium uppercase tracking-wider\">Swaps</span>\n              </div>\n              <motion.div\n                key={swaps}\n                initial={{ scale: 1.2, color: '#ff00ff' }}\n                animate={{ scale: 1, color: '#ffffff' }}\n                className=\"text-4xl font-bold text-white\"\n              >\n                {swaps}\n              </motion.div>\n            </div>\n            <div className=\"absolute -bottom-2 -right-2 w-24 h-24 bg-purple-500/20 rounded-full blur-2xl\" />\n          </motion.div>\n\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ delay: 0.2 }}\n            className=\"relative bg-gray-900/50 backdrop-blur-xl border border-green-500/30 rounded-xl p-6 overflow-hidden group hover:border-green-500/60 transition-all\"\n          >\n            <div className=\"absolute inset-0 bg-gradient-to-br from-green-500/10 to-transparent opacity-0 group-hover:opacity-100 transition-opacity\" />\n            <div className=\"relative z-10\">\n              <div className=\"flex items-center gap-3 mb-2\">\n                <BarChart3 className=\"w-5 h-5 text-green-400\" />\n                <span className=\"text-green-400 text-sm font-medium uppercase tracking-wider\">Complexity</span>\n              </div>\n              <div className=\"text-4xl font-bold text-white\">\n                {mockAlgorithms.find(a => a.id === selectedAlgorithm)?.complexity}\n              </div>\n            </div>\n            <div className=\"absolute -bottom-2 -right-2 w-24 h-24 bg-green-500/20 rounded-full blur-2xl\" />\n          </motion.div>\n\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ delay: 0.3 }}\n            className=\"relative bg-gray-900/50 backdrop-blur-xl border border-yellow-500/30 rounded-xl p-6 overflow-hidden group hover:border-yellow-500/60 transition-all\"\n          >\n            <div className=\"absolute inset-0 bg-gradient-to-br from-yellow-500/10 to-transparent opacity-0 group-hover:opacity-100 transition-opacity\" />\n            <div className=\"relative z-10\">\n              <div className=\"flex items-center gap-3 mb-2\">\n                <BarChart3 className=\"w-5 h-5 text-yellow-400\" />\n                <span className=\"text-yellow-400 text-sm font-medium uppercase tracking-wider\">Array Size</span>\n              </div>\n              <div className=\"text-4xl font-bold text-white\">\n                {array.length}\n              </div>\n            </div>\n            <div className=\"absolute -bottom-2 -right-2 w-24 h-24 bg-yellow-500/20 rounded-full blur-2xl\" />\n          </motion.div>\n        </div>\n\n        <div className=\"relative\">\n          <div className=\"bg-gray-900/50 backdrop-blur-sm rounded-2xl border border-purple-500/30 p-8 shadow-2xl\">\n            <div className=\"flex items-end justify-center gap-1 h-96 relative\">\n              {array.length === 0 ? (\n                <div className=\"absolute inset-0 flex items-center justify-center\">\n                  <div className=\"text-center space-y-4\">\n                    <BarChart3 className=\"w-16 h-16 mx-auto text-purple-400/50\" />\n                    <p className=\"text-purple-300/70 text-lg\">Generate an array to start visualizing</p>\n                  </div>\n                </div>\n              ) : (\n                array.map((element, index) => {\n                  const isComparing = steps[currentStep]?.comparingIndices.includes(index);\n                  const isSwapping = steps[currentStep]?.swappingIndices.includes(index);\n                  const isSorted = steps[currentStep]?.sortedIndices.includes(index);\n                  \n                  const barColor = isSorted \n                    ? '#00ff00' \n                    : isSwapping \n                    ? '#ff0066' \n                    : isComparing \n                    ? '#ffff00' \n                    : element.value ? NEON_COLORS[element.value % NEON_COLORS.length] : '#00ffff';\n\n                  return (\n                    <motion.div\n                      key={element.id}\n                      className=\"relative flex-1 min-w-0\"\n                      initial={{ opacity: 0, scale: 0 }}\n                      animate={{ \n                        opacity: 1, \n                        scale: 1,\n                        y: isSwapping ? [-10, 0] : 0\n                      }}\n                      transition={{ \n                        duration: 0.3,\n                        y: { duration: 0.2, repeat: isSwapping ? 1 : 0, repeatType: \"reverse\" }\n                      }}\n                    >\n                      <motion.div\n                        className=\"w-full rounded-t-lg relative\"\n                        style={{\n                          backgroundColor: barColor,\n                          boxShadow: `0 0 20px ${barColor}, 0 0 40px ${barColor}40`,\n                        }}\n                        animate={{\n                          height: `${(element.value / 100) * 100}%`,\n                          boxShadow: isComparing || isSwapping\n                            ? `0 0 30px ${barColor}, 0 0 60px ${barColor}, 0 0 90px ${barColor}80`\n                            : `0 0 20px ${barColor}, 0 0 40px ${barColor}40`,\n                        }}\n                        transition={{\n                          height: { duration: 0.5, ease: \"easeInOut\" },\n                          boxShadow: { duration: 0.3 }\n                        }}\n                      >\n                        {/* Trail effect for swapping */}\n                        {isSwapping && (\n                          <motion.div\n                            className=\"absolute inset-0 rounded-t-lg\"\n                            style={{\n                              backgroundColor: barColor,\n                              opacity: 0.5,\n                            }}\n                            animate={{\n                              opacity: [0.5, 0],\n                              scale: [1, 1.2],\n                            }}\n                            transition={{\n                              duration: 0.6,\n                              repeat: Infinity,\n                            }}\n                          />\n                        )}\n                        \n                        {/* Glow pulse for comparing */}\n                        {isComparing && (\n                          <motion.div\n                            className=\"absolute -inset-1 rounded-t-lg\"\n                            style={{\n                              background: `radial-gradient(circle, ${barColor}80 0%, transparent 70%)`,\n                            }}\n                            animate={{\n                              opacity: [0.8, 0.3, 0.8],\n                            }}\n                            transition={{\n                              duration: 0.8,\n                              repeat: Infinity,\n                            }}\n                          />\n                        )}\n                      </motion.div>\n                      \n                      {/* Value label */}\n                      {array.length <= 30 && (\n                        <motion.div\n                          className=\"absolute -bottom-6 left-1/2 transform -translate-x-1/2 text-xs font-mono\"\n                          style={{ color: barColor }}\n                          animate={{\n                            scale: isComparing || isSwapping ? 1.2 : 1,\n                            fontWeight: isComparing || isSwapping ? 700 : 400,\n                          }}\n                        >\n                          {element.value}\n                        </motion.div>\n                      )}\n                    </motion.div>\n                  );\n                })\n              )}\n            </div>\n          </div>\n        </div>\n\n                <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.6, delay: 0.4 }}\n          className=\"bg-gray-800/50 backdrop-blur-xl rounded-2xl p-6 border border-cyan-500/30 shadow-2xl\"\n        >\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            {/* Playback Controls */}\n            <div className=\"space-y-4\">\n              <h3 className=\"text-cyan-400 font-semibold text-lg flex items-center gap-2\">\n                <Zap className=\"w-5 h-5\" />\n                Playback Controls\n              </h3>\n              <div className=\"flex gap-3\">\n                <Button\n                  onClick={handlePlayPause}\n                  disabled={steps.length === 0}\n                  className=\"flex-1 bg-gradient-to-r from-cyan-500 to-blue-500 hover:from-cyan-600 hover:to-blue-600 text-white font-semibold py-6 rounded-xl shadow-lg hover:shadow-cyan-500/50 transition-all duration-300 disabled:opacity-50 disabled:cursor-not-allowed\"\n                >\n                  {isPlaying ? (\n                    <>\n                      <Pause className=\"w-5 h-5 mr-2\" />\n                      Pause\n                    </>\n                  ) : (\n                    <>\n                      <Play className=\"w-5 h-5 mr-2\" />\n                      Play\n                    </>\n                  )}\n                </Button>\n                <Button\n                  onClick={resetVisualization}\n                  className=\"bg-gradient-to-r from-purple-500 to-pink-500 hover:from-purple-600 hover:to-pink-600 text-white font-semibold py-6 px-6 rounded-xl shadow-lg hover:shadow-purple-500/50 transition-all duration-300\"\n                >\n                  <RotateCcw className=\"w-5 h-5\" />\n                </Button>\n              </div>\n            </div>\n\n            {/* Speed Control */}\n            <div className=\"space-y-4\">\n              <h3 className=\"text-cyan-400 font-semibold text-lg flex items-center justify-between\">\n                <span className=\"flex items-center gap-2\">\n                  <Zap className=\"w-5 h-5\" />\n                  Animation Speed\n                </span>\n                <span className=\"text-sm text-cyan-300\">{speed[0]}%</span>\n              </h3>\n              <div className=\"relative\">\n                <Slider\n                  value={speed}\n                  onValueChange={setSpeed}\n                  min={10}\n                  max={100}\n                  step={10}\n                  className=\"cursor-pointer\"\n                  disabled={isPlaying}\n                />\n                <div className=\"flex justify-between text-xs text-gray-400 mt-2\">\n                  <span>Slow</span>\n                  <span>Fast</span>\n                </div>\n              </div>\n            </div>\n\n            {/* Array Size Control */}\n            <div className=\"space-y-4 md:col-span-2\">\n              <h3 className=\"text-cyan-400 font-semibold text-lg flex items-center justify-between\">\n                <span className=\"flex items-center gap-2\">\n                  <BarChart3 className=\"w-5 h-5\" />\n                  Array Size\n                </span>\n                <span className=\"text-sm text-cyan-300\">{arraySize[0]} elements</span>\n              </h3>\n              <div className=\"relative\">\n                <Slider\n                  value={arraySize}\n                  onValueChange={setArraySize}\n                  min={5}\n                  max={100}\n                  step={5}\n                  className=\"cursor-pointer\"\n                  disabled={isPlaying}\n                />\n                <div className=\"flex justify-between text-xs text-gray-400 mt-2\">\n                  <span>5</span>\n                  <span>25</span>\n                  <span>50</span>\n                  <span>75</span>\n                  <span>100</span>\n                </div>\n              </div>\n            </div>\n          </div>\n        </motion.div>\n\n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n          {mockAlgorithms.map((algo) => (\n            <motion.div\n              key={algo.id}\n              whileHover={{ scale: 1.05, y: -5 }}\n              whileTap={{ scale: 0.95 }}\n              onClick={() => {\n                setSelectedAlgorithm(algo.id as AlgorithmType);\n                setCurrentStep(0);\n                setSteps([]);\n                setComparisons(0);\n                setSwaps(0);\n                setIsPlaying(false);\n              }}\n              className={`relative cursor-pointer rounded-xl p-6 transition-all duration-300 ${\n                selectedAlgorithm === algo.id\n                  ? 'bg-gradient-to-br from-cyan-500/20 to-purple-500/20 border-2 border-cyan-400 shadow-[0_0_30px_rgba(0,255,255,0.5)]'\n                  : 'bg-gray-800/50 border-2 border-gray-700 hover:border-purple-500 hover:shadow-[0_0_20px_rgba(168,85,247,0.4)]'\n              }`}\n            >\n              <div className=\"flex items-center justify-between mb-3\">\n                <BarChart3 \n                  className={`w-6 h-6 ${\n                    selectedAlgorithm === algo.id ? 'text-cyan-400' : 'text-gray-400'\n                  }`}\n                />\n                {selectedAlgorithm === algo.id && (\n                  <motion.div\n                    initial={{ scale: 0 }}\n                    animate={{ scale: 1 }}\n                    className=\"w-3 h-3 rounded-full bg-cyan-400 shadow-[0_0_10px_rgba(0,255,255,0.8)]\"\n                  />\n                )}\n              </div>\n              <h3 className={`text-lg font-bold mb-2 ${\n                selectedAlgorithm === algo.id ? 'text-cyan-300' : 'text-white'\n              }`}>\n                {algo.name}\n              </h3>\n              <p className={`text-sm font-mono ${\n                selectedAlgorithm === algo.id ? 'text-purple-300' : 'text-gray-400'\n              }`}>\n                {algo.complexity}\n              </p>\n              {selectedAlgorithm === algo.id && (\n                <motion.div\n                  layoutId=\"selectedGlow\"\n                  className=\"absolute inset-0 rounded-xl bg-gradient-to-br from-cyan-500/10 to-purple-500/10 pointer-events-none\"\n                  transition={{ type: \"spring\", stiffness: 300, damping: 30 }}\n                />\n              )}\n            </motion.div>\n          ))}\n        </div>\n\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ delay: 0.6 }}\n          className=\"bg-gray-900/50 backdrop-blur-xl rounded-2xl p-6 border border-purple-500/30 shadow-2xl\"\n        >\n          <div className=\"flex items-center gap-2 mb-4\">\n            <BarChart3 className=\"w-5 h-5 text-cyan-400\" />\n            <h3 className=\"text-lg font-semibold text-white\">Legend</h3>\n          </div>\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n            <div className=\"flex items-center gap-3\">\n              <div className=\"w-8 h-8 rounded-lg bg-cyan-500/20 border-2 border-cyan-400 shadow-[0_0_15px_rgba(0,255,255,0.5)]\" />\n              <div>\n                <p className=\"text-sm font-medium text-white\">Comparing</p>\n                <p className=\"text-xs text-gray-400\">Active comparison</p>\n              </div>\n            </div>\n            <div className=\"flex items-center gap-3\">\n              <div className=\"w-8 h-8 rounded-lg bg-pink-500/20 border-2 border-pink-400 shadow-[0_0_15px_rgba(255,0,102,0.5)]\" />\n              <div>\n                <p className=\"text-sm font-medium text-white\">Swapping</p>\n                <p className=\"text-xs text-gray-400\">Elements swapping</p>\n              </div>\n            </div>\n            <div className=\"flex items-center gap-3\">\n              <div className=\"w-8 h-8 rounded-lg bg-green-500/20 border-2 border-green-400 shadow-[0_0_15px_rgba(0,255,0,0.5)]\" />\n              <div>\n                <p className=\"text-sm font-medium text-white\">Sorted</p>\n                <p className=\"text-xs text-gray-400\">In final position</p>\n              </div>\n            </div>\n            <div className=\"flex items-center gap-3\">\n              <div className=\"w-8 h-8 rounded-lg bg-purple-500/20 border-2 border-purple-400 shadow-[0_0_15px_rgba(168,85,247,0.5)]\" />\n              <div>\n                <p className=\"text-sm font-medium text-white\">Unsorted</p>\n                <p className=\"text-xs text-gray-400\">Awaiting sort</p>\n              </div>\n            </div>\n          </div>\n        </motion.div>\n      </div>\n    </div>\n  );\n}",
  "error": null,
  "overall_score": 50,
  "code_quality_score": 12,
  "architecture_score": 14,
  "performance_score": 11,
  "accessibility_score": 13,
  "metadata": {
    "document_id": "eval_room_f909528b3e25",
    "prompt_category": "creative",
    "prompt_complexity": 9.0
  },
  "raw_response": {
    "document_id": "eval_room_f909528b3e25",
    "mode": "parallel",
    "prompt": "Build a captivating algorithm visualizer with neon colored bars, smooth height transitions, glowing comparison indicators, trail effects during swaps, and a futuristic dashboard design with animated controls",
    "content": "import { useState, useCallback } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Slider } from '@/components/ui/slider';\nimport { Play, Pause, RotateCcw, Zap, BarChart3 } from 'lucide-react';\nimport { motion } from 'framer-motion';\n\ninterface ArrayElement {\n  value: number;\n  id: string;\n  isComparing?: boolean;\n  isSwapping?: boolean;\n  isSorted?: boolean;\n}\n\ninterface AlgorithmStep {\n  array: ArrayElement[];\n  comparingIndices: number[];\n  swappingIndices: number[];\n  sortedIndices: number[];\n}\n\ntype AlgorithmType = 'bubble' | 'quick' | 'merge' | 'insertion';\n\nconst NEON_COLORS = [\n  '#00ffff',\n  '#ff00ff', \n  '#00ff00',\n  '#ffff00',\n  '#ff0066',\n  '#00ffaa'\n];\n\nconst mockAlgorithms = [\n  { id: 'bubble', name: 'Bubble Sort', complexity: 'O(n\u00b2)' },\n  { id: 'quick', name: 'Quick Sort', complexity: 'O(n log n)' },\n  { id: 'merge', name: 'Merge Sort', complexity: 'O(n log n)' },\n  { id: 'insertion', name: 'Insertion Sort', complexity: 'O(n\u00b2)' }\n];\n\nexport default function AlgorithmVisualizer() {\n  const [array, setArray] = useState<ArrayElement[]>([]);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [speed, setSpeed] = useState([50]);\n  const [arraySize, setArraySize] = useState([20]);\n  const [selectedAlgorithm, setSelectedAlgorithm] = useState<AlgorithmType>('bubble');\n  const [currentStep, setCurrentStep] = useState(0);\n  const [steps, setSteps] = useState<AlgorithmStep[]>([]);\n  const [comparisons, setComparisons] = useState(0);\n  const [swaps, setSwaps] = useState(0);\n\n  const generateRandomArray = useCallback(() => {\n    const newArray: ArrayElement[] = Array.from({ length: arraySize[0] }, (_, index) => ({\n      value: Math.floor(Math.random() * 100) + 5,\n      id: `element-${index}-${Date.now()}`,\n      isComparing: false,\n      isSwapping: false,\n      isSorted: false\n    }));\n    \n    setArray(newArray);\n    setSteps([]);\n    setCurrentStep(0);\n    setComparisons(0);\n    setSwaps(0);\n    setIsPlaying(false);\n  }, [arraySize]);\n\n  const resetVisualization = useCallback(() => {\n    setIsPlaying(false);\n    setCurrentStep(0);\n    setSteps([]);\n    setComparisons(0);\n    setSwaps(0);\n    generateRandomArray();\n  }, [generateRandomArray]);\n\n  const handlePlayPause = useCallback(() => {\n\nif (!steps.length) return;\n    \n    if (!isPlaying) {\n      setIsPlaying(true);\n    } else {\n      setIsPlaying(false);\n    }\n  }, [isPlaying, steps.length]);\n\n  // Effect to handle step-by-step animation\n  useCallback(() => {\n    if (!isPlaying || currentStep >= steps.length - 1) {\n      if (currentStep >= steps.length - 1 && isPlaying) {\n        setIsPlaying(false);\n      }\n      return;\n    }\n\n    const delay = 1000 - speed[0] * 9.5; // Convert speed (0-100) to delay (1000ms-50ms)\n    const timer = setTimeout(() => {\n      const step = steps[currentStep + 1];\n      setArray(step.array);\n      setCurrentStep(currentStep + 1);\n      \n      // Update statistics\n      if (step.comparingIndices.length > 0) {\n        setComparisons(prev => prev + 1);\n      }\n      if (step.swappingIndices.length > 0) {\n        setSwaps(prev => prev + 1);\n      }\n    }, delay);\n\n    return () => clearTimeout(timer);\n  }, [isPlaying, currentStep, steps, speed])();\n\n  // Cleanup effect\n  useCallback(() => {\n    if (isPlaying && currentStep >= steps.length - 1) {\n      setIsPlaying(false);\n    }\n  }, [isPlaying, currentStep, steps.length])();\n\n  }, [</parameter>\n</invoke> currentStep, steps, speed]);\n\n  const generateSteps = useCallback((algorithm: AlgorithmType) => {\n    if (array.length === 0) return;\n\n    const newSteps: AlgorithmStep[] = [];\n    const arr = [...array];\n    let comparisonCount = 0;\n    let swapCount = 0;\n\n    const recordStep = (\n      currentArray: ArrayElement[],\n      comparing: number[] = [],\n      swapping: number[] = [],\n      sorted: number[] = []\n    ) => {\n      newSteps.push({\n        array: currentArray.map((el, idx) => ({\n          ...el,\n          isComparing: comparing.includes(idx),\n          isSwapping: swapping.includes(idx),\n          isSorted: sorted.includes(idx)\n        })),\n        comparingIndices: comparing,\n        swappingIndices: swapping,\n        sortedIndices: sorted\n      });\n    };\n\n    const swap = (arr: ArrayElement[], i: number, j: number, sortedIndices: number[] = []) => {\n      comparisonCount++;\n      recordStep([...arr], [i, j], [], sortedIndices);\n      \n      swapCount++;\n      [arr[i], arr[j]] = [arr[j], arr[i]];\n      recordStep([...arr], [], [i, j], sortedIndices);\n    };\n\n    const compare = (arr: ArrayElement[], i: number, j: number, sortedIndices: number[] = []) => {\n      comparisonCount++;\n      recordStep([...arr], [i, j], [], sortedIndices);\n    };\n\n    switch (algorithm) {\n      case 'bubble': {\n        const n = arr.length;\n        const sortedIndices: number[] = [];\n        \n        for (let i = 0; i < n - 1; i++) {\n          let swapped = false;\n          for (let j = 0; j < n - i - 1; j++) {\n            compare(arr, j, j + 1, sortedIndices);\n            \n            if (arr[j].value > arr[j + 1].value) {\n              swap(arr, j, j + 1, sortedIndices);\n              swapped = true;\n            }\n          }\n          sortedIndices.push(n - i - 1);\n          recordStep([...arr], [], [], sortedIndices);\n          \n          if (!swapped) break;\n        }\n        \n        for (let i = 0; i < n; i++) {\n          if (!sortedIndices.includes(i)) sortedIndices.push(i);\n        }\n        recordStep([...arr], [], [], sortedIndices);\n        break;\n      }\n\n      case 'quick': {\n        const sortedIndices: number[] = [];\n        \n        const partition = (low: number, high: number): number => {\n          const pivot = arr[high].value;\n          let i = low - 1;\n\n          for (let j = low; j < high; j++) {\n            compare(arr, j, high, sortedIndices);\n            \n            if (arr[j].value < pivot) {\n              i++;\n              if (i !== j) {\n                swap(arr, i, j, sortedIndices);\n              }\n            }\n          }\n          \n          if (i + 1 !== high) {\n            swap(arr, i + 1, high, sortedIndices);\n          }\n          return i + 1;\n        };\n\n        const quickSort = (low: number, high: number) => {\n          if (low < high) {\n            const pi = partition(low, high);\n            sortedIndices.push(pi);\n            recordStep([...arr], [], [], sortedIndices);\n            \n            quickSort(low, pi - 1);\n            quickSort(pi + 1, high);\n          } else if (low === high) {\n            sortedIndices.push(low);\n            recordStep([...arr], [], [], sortedIndices);\n          }\n        };\n\n        quickSort(0, arr.length - 1);\n        \n        for (let i = 0; i < arr.length; i++) {\n          if (!sortedIndices.includes(i)) sortedIndices.push(i);\n        }\n        recordStep([...arr], [], [], sortedIndices);\n        break;\n      }\n\n      case 'merge': {\n        const sortedIndices: number[] = [];\n        \n        const merge = (left: number, mid: number, right: number) => {\n          const leftArr = arr.slice(left, mid + 1);\n          const rightArr = arr.slice(mid + 1, right + 1);\n          \n          let i = 0, j = 0, k = left;\n          \n          while (i < leftArr.length && j < rightArr.length) {\n            compare(arr, left + i, mid + 1 + j, sortedIndices);\n            \n            if (leftArr[i].value <= rightArr[j].value) {\n              arr[k] = leftArr[i];\n              i++;\n            } else {\n              arr[k] = rightArr[j];\n              j++;\n            }\n            recordStep([...arr], [], [k], sortedIndices);\n            k++;\n          }\n          \n          while (i < leftArr.length) {\n            arr[k] = leftArr[i];\n            recordStep([...arr], [], [k], sortedIndices);\n            i++;\n            k++;\n          }\n          \n          while (j < rightArr.length) {\n            arr[k] = rightArr[j];\n            recordStep([...arr], [], [k], sortedIndices);\n            j++;\n            k++;\n          }\n        };\n\n        const mergeSort = (left: number, right: number) => {\n          if (left < right) {\n            const mid = Math.floor((left + right) / 2);\n            mergeSort(left, mid);\n            mergeSort(mid + 1, right);\n            merge(left, mid, right);\n            \n            if (left === 0 && right === arr.length - 1) {\n              for (let i = 0; i < arr.length; i++) {\n                sortedIndices.push(i);\n              }\n              recordStep([...arr], [], [], sortedIndices);\n            }\n          }\n        };\n\n        mergeSort(0, arr.length - 1);\n        break;\n      }\n\n      case 'insertion': {\n        const sortedIndices: number[] = [0];\n        recordStep([...arr], [], [], sortedIndices);\n        \n        for (let i = 1; i < arr.length; i++) {\n          const key = arr[i];\n          let j = i - 1;\n          \n          compare(arr, i, j, sortedIndices);\n          \n          while (j >= 0 && arr[j].value > key.value) {\n            comparisonCount++;\n            arr[j + 1] = arr[j];\n            recordStep([...arr], [j, j + 1], [], sortedIndices);\n            j--;\n            \n            if (j >= 0) {\n              compare(arr, j, i, sortedIndices);\n            }\n          }\n          \n          arr[j + 1] = key;\n          recordStep([...arr], [], [j + 1], sortedIndices);\n          sortedIndices.push(i);\n          recordStep([...arr], [], [], sortedIndices);\n        }\n        break;\n      }\n    }\n\n    setSteps(newSteps);\n    setComparisons(comparisonCount);\n    setSwaps(swapCount);\n    setCurrentStep(0);\n    setIsPlaying(false);\n  }, [array]);\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-gray-900 via-purple-900 to-gray-900 p-8\">\n      <div className=\"max-w-7xl mx-auto space-y-8\">\n        <motion.div\n          initial={{ opacity: 0, y: -20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.8 }}\n          className=\"text-center space-y-6\"\n        >\n          <motion.h1\n            className=\"text-6xl font-bold bg-gradient-to-r from-cyan-400 via-purple-400 to-pink-400 bg-clip-text text-transparent\"\n            animate={{\n              textShadow: [\n                '0 0 20px rgba(0, 255, 255, 0.5)',\n                '0 0 40px rgba(255, 0, 255, 0.5)',\n                '0 0 20px rgba(0, 255, 255, 0.5)'\n              ]\n            }}\n            transition={{ duration: 2, repeat: Infinity }}\n          >\n            Algorithm Visualizer\n          </motion.h1>\n          \n          <div className=\"flex justify-center gap-4 flex-wrap\">\n            {mockAlgorithms.map((algo) => (\n              <motion.div\n                key={algo.id}\n                whileHover={{ scale: 1.05 }}\n                whileTap={{ scale: 0.95 }}\n              >\n                <Button\n                  onClick={() => setSelectedAlgorithm(algo.id as AlgorithmType)}\n                  variant={selectedAlgorithm === algo.id ? 'default' : 'outline'}\n                  className={`relative overflow-hidden transition-all duration-300 ${\n                    selectedAlgorithm === algo.id\n                      ? 'bg-gradient-to-r from-cyan-500 to-purple-500 text-white border-0 shadow-lg shadow-cyan-500/50'\n                      : 'bg-gray-800/50 border-cyan-500/30 text-cyan-300 hover:bg-gray-700/50 hover:border-cyan-400'\n                  }`}\n                >\n                  <span className=\"relative z-10 flex flex-col items-center\">\n                    <span className=\"font-semibold\">{algo.name}</span>\n                    <span className=\"text-xs opacity-80\">{algo.complexity}</span>\n                  </span>\n                  {selectedAlgorithm === algo.id && (\n                    <motion.div\n                      className=\"absolute inset-0 bg-gradient-to-r from-cyan-400/20 to-purple-400/20\"\n                      animate={{\n                        opacity: [0.5, 1, 0.5]\n                      }}\n                      transition={{ duration: 1.5, repeat: Infinity }}\n                    />\n                  )}\n                </Button>\n              </motion.div>\n            ))}\n          </div>\n        </motion.div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            className=\"relative bg-gray-900/50 backdrop-blur-xl border border-cyan-500/30 rounded-xl p-6 overflow-hidden group hover:border-cyan-500/60 transition-all\"\n          >\n            <div className=\"absolute inset-0 bg-gradient-to-br from-cyan-500/10 to-transparent opacity-0 group-hover:opacity-100 transition-opacity\" />\n            <div className=\"relative z-10\">\n              <div className=\"flex items-center gap-3 mb-2\">\n                <BarChart3 className=\"w-5 h-5 text-cyan-400\" />\n                <span className=\"text-cyan-400 text-sm font-medium uppercase tracking-wider\">Comparisons</span>\n              </div>\n              <motion.div\n                key={comparisons}\n                initial={{ scale: 1.2, color: '#00ffff' }}\n                animate={{ scale: 1, color: '#ffffff' }}\n                className=\"text-4xl font-bold text-white\"\n              >\n                {comparisons}\n              </motion.div>\n            </div>\n            <div className=\"absolute -bottom-2 -right-2 w-24 h-24 bg-cyan-500/20 rounded-full blur-2xl\" />\n          </motion.div>\n\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ delay: 0.1 }}\n            className=\"relative bg-gray-900/50 backdrop-blur-xl border border-purple-500/30 rounded-xl p-6 overflow-hidden group hover:border-purple-500/60 transition-all\"\n          >\n            <div className=\"absolute inset-0 bg-gradient-to-br from-purple-500/10 to-transparent opacity-0 group-hover:opacity-100 transition-opacity\" />\n            <div className=\"relative z-10\">\n              <div className=\"flex items-center gap-3 mb-2\">\n                <Zap className=\"w-5 h-5 text-purple-400\" />\n                <span className=\"text-purple-400 text-sm font-medium uppercase tracking-wider\">Swaps</span>\n              </div>\n              <motion.div\n                key={swaps}\n                initial={{ scale: 1.2, color: '#ff00ff' }}\n                animate={{ scale: 1, color: '#ffffff' }}\n                className=\"text-4xl font-bold text-white\"\n              >\n                {swaps}\n              </motion.div>\n            </div>\n            <div className=\"absolute -bottom-2 -right-2 w-24 h-24 bg-purple-500/20 rounded-full blur-2xl\" />\n          </motion.div>\n\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ delay: 0.2 }}\n            className=\"relative bg-gray-900/50 backdrop-blur-xl border border-green-500/30 rounded-xl p-6 overflow-hidden group hover:border-green-500/60 transition-all\"\n          >\n            <div className=\"absolute inset-0 bg-gradient-to-br from-green-500/10 to-transparent opacity-0 group-hover:opacity-100 transition-opacity\" />\n            <div className=\"relative z-10\">\n              <div className=\"flex items-center gap-3 mb-2\">\n                <BarChart3 className=\"w-5 h-5 text-green-400\" />\n                <span className=\"text-green-400 text-sm font-medium uppercase tracking-wider\">Complexity</span>\n              </div>\n              <div className=\"text-4xl font-bold text-white\">\n                {mockAlgorithms.find(a => a.id === selectedAlgorithm)?.complexity}\n              </div>\n            </div>\n            <div className=\"absolute -bottom-2 -right-2 w-24 h-24 bg-green-500/20 rounded-full blur-2xl\" />\n          </motion.div>\n\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ delay: 0.3 }}\n            className=\"relative bg-gray-900/50 backdrop-blur-xl border border-yellow-500/30 rounded-xl p-6 overflow-hidden group hover:border-yellow-500/60 transition-all\"\n          >\n            <div className=\"absolute inset-0 bg-gradient-to-br from-yellow-500/10 to-transparent opacity-0 group-hover:opacity-100 transition-opacity\" />\n            <div className=\"relative z-10\">\n              <div className=\"flex items-center gap-3 mb-2\">\n                <BarChart3 className=\"w-5 h-5 text-yellow-400\" />\n                <span className=\"text-yellow-400 text-sm font-medium uppercase tracking-wider\">Array Size</span>\n              </div>\n              <div className=\"text-4xl font-bold text-white\">\n                {array.length}\n              </div>\n            </div>\n            <div className=\"absolute -bottom-2 -right-2 w-24 h-24 bg-yellow-500/20 rounded-full blur-2xl\" />\n          </motion.div>\n        </div>\n\n        <div className=\"relative\">\n          <div className=\"bg-gray-900/50 backdrop-blur-sm rounded-2xl border border-purple-500/30 p-8 shadow-2xl\">\n            <div className=\"flex items-end justify-center gap-1 h-96 relative\">\n              {array.length === 0 ? (\n                <div className=\"absolute inset-0 flex items-center justify-center\">\n                  <div className=\"text-center space-y-4\">\n                    <BarChart3 className=\"w-16 h-16 mx-auto text-purple-400/50\" />\n                    <p className=\"text-purple-300/70 text-lg\">Generate an array to start visualizing</p>\n                  </div>\n                </div>\n              ) : (\n                array.map((element, index) => {\n                  const isComparing = steps[currentStep]?.comparingIndices.includes(index);\n                  const isSwapping = steps[currentStep]?.swappingIndices.includes(index);\n                  const isSorted = steps[currentStep]?.sortedIndices.includes(index);\n                  \n                  const barColor = isSorted \n                    ? '#00ff00' \n                    : isSwapping \n                    ? '#ff0066' \n                    : isComparing \n                    ? '#ffff00' \n                    : element.value ? NEON_COLORS[element.value % NEON_COLORS.length] : '#00ffff';\n\n                  return (\n                    <motion.div\n                      key={element.id}\n                      className=\"relative flex-1 min-w-0\"\n                      initial={{ opacity: 0, scale: 0 }}\n                      animate={{ \n                        opacity: 1, \n                        scale: 1,\n                        y: isSwapping ? [-10, 0] : 0\n                      }}\n                      transition={{ \n                        duration: 0.3,\n                        y: { duration: 0.2, repeat: isSwapping ? 1 : 0, repeatType: \"reverse\" }\n                      }}\n                    >\n                      <motion.div\n                        className=\"w-full rounded-t-lg relative\"\n                        style={{\n                          backgroundColor: barColor,\n                          boxShadow: `0 0 20px ${barColor}, 0 0 40px ${barColor}40`,\n                        }}\n                        animate={{\n                          height: `${(element.value / 100) * 100}%`,\n                          boxShadow: isComparing || isSwapping\n                            ? `0 0 30px ${barColor}, 0 0 60px ${barColor}, 0 0 90px ${barColor}80`\n                            : `0 0 20px ${barColor}, 0 0 40px ${barColor}40`,\n                        }}\n                        transition={{\n                          height: { duration: 0.5, ease: \"easeInOut\" },\n                          boxShadow: { duration: 0.3 }\n                        }}\n                      >\n                        {/* Trail effect for swapping */}\n                        {isSwapping && (\n                          <motion.div\n                            className=\"absolute inset-0 rounded-t-lg\"\n                            style={{\n                              backgroundColor: barColor,\n                              opacity: 0.5,\n                            }}\n                            animate={{\n                              opacity: [0.5, 0],\n                              scale: [1, 1.2],\n                            }}\n                            transition={{\n                              duration: 0.6,\n                              repeat: Infinity,\n                            }}\n                          />\n                        )}\n                        \n                        {/* Glow pulse for comparing */}\n                        {isComparing && (\n                          <motion.div\n                            className=\"absolute -inset-1 rounded-t-lg\"\n                            style={{\n                              background: `radial-gradient(circle, ${barColor}80 0%, transparent 70%)`,\n                            }}\n                            animate={{\n                              opacity: [0.8, 0.3, 0.8],\n                            }}\n                            transition={{\n                              duration: 0.8,\n                              repeat: Infinity,\n                            }}\n                          />\n                        )}\n                      </motion.div>\n                      \n                      {/* Value label */}\n                      {array.length <= 30 && (\n                        <motion.div\n                          className=\"absolute -bottom-6 left-1/2 transform -translate-x-1/2 text-xs font-mono\"\n                          style={{ color: barColor }}\n                          animate={{\n                            scale: isComparing || isSwapping ? 1.2 : 1,\n                            fontWeight: isComparing || isSwapping ? 700 : 400,\n                          }}\n                        >\n                          {element.value}\n                        </motion.div>\n                      )}\n                    </motion.div>\n                  );\n                })\n              )}\n            </div>\n          </div>\n        </div>\n\n                <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.6, delay: 0.4 }}\n          className=\"bg-gray-800/50 backdrop-blur-xl rounded-2xl p-6 border border-cyan-500/30 shadow-2xl\"\n        >\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            {/* Playback Controls */}\n            <div className=\"space-y-4\">\n              <h3 className=\"text-cyan-400 font-semibold text-lg flex items-center gap-2\">\n                <Zap className=\"w-5 h-5\" />\n                Playback Controls\n              </h3>\n              <div className=\"flex gap-3\">\n                <Button\n                  onClick={handlePlayPause}\n                  disabled={steps.length === 0}\n                  className=\"flex-1 bg-gradient-to-r from-cyan-500 to-blue-500 hover:from-cyan-600 hover:to-blue-600 text-white font-semibold py-6 rounded-xl shadow-lg hover:shadow-cyan-500/50 transition-all duration-300 disabled:opacity-50 disabled:cursor-not-allowed\"\n                >\n                  {isPlaying ? (\n                    <>\n                      <Pause className=\"w-5 h-5 mr-2\" />\n                      Pause\n                    </>\n                  ) : (\n                    <>\n                      <Play className=\"w-5 h-5 mr-2\" />\n                      Play\n                    </>\n                  )}\n                </Button>\n                <Button\n                  onClick={resetVisualization}\n                  className=\"bg-gradient-to-r from-purple-500 to-pink-500 hover:from-purple-600 hover:to-pink-600 text-white font-semibold py-6 px-6 rounded-xl shadow-lg hover:shadow-purple-500/50 transition-all duration-300\"\n                >\n                  <RotateCcw className=\"w-5 h-5\" />\n                </Button>\n              </div>\n            </div>\n\n            {/* Speed Control */}\n            <div className=\"space-y-4\">\n              <h3 className=\"text-cyan-400 font-semibold text-lg flex items-center justify-between\">\n                <span className=\"flex items-center gap-2\">\n                  <Zap className=\"w-5 h-5\" />\n                  Animation Speed\n                </span>\n                <span className=\"text-sm text-cyan-300\">{speed[0]}%</span>\n              </h3>\n              <div className=\"relative\">\n                <Slider\n                  value={speed}\n                  onValueChange={setSpeed}\n                  min={10}\n                  max={100}\n                  step={10}\n                  className=\"cursor-pointer\"\n                  disabled={isPlaying}\n                />\n                <div className=\"flex justify-between text-xs text-gray-400 mt-2\">\n                  <span>Slow</span>\n                  <span>Fast</span>\n                </div>\n              </div>\n            </div>\n\n            {/* Array Size Control */}\n            <div className=\"space-y-4 md:col-span-2\">\n              <h3 className=\"text-cyan-400 font-semibold text-lg flex items-center justify-between\">\n                <span className=\"flex items-center gap-2\">\n                  <BarChart3 className=\"w-5 h-5\" />\n                  Array Size\n                </span>\n                <span className=\"text-sm text-cyan-300\">{arraySize[0]} elements</span>\n              </h3>\n              <div className=\"relative\">\n                <Slider\n                  value={arraySize}\n                  onValueChange={setArraySize}\n                  min={5}\n                  max={100}\n                  step={5}\n                  className=\"cursor-pointer\"\n                  disabled={isPlaying}\n                />\n                <div className=\"flex justify-between text-xs text-gray-400 mt-2\">\n                  <span>5</span>\n                  <span>25</span>\n                  <span>50</span>\n                  <span>75</span>\n                  <span>100</span>\n                </div>\n              </div>\n            </div>\n          </div>\n        </motion.div>\n\n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n          {mockAlgorithms.map((algo) => (\n            <motion.div\n              key={algo.id}\n              whileHover={{ scale: 1.05, y: -5 }}\n              whileTap={{ scale: 0.95 }}\n              onClick={() => {\n                setSelectedAlgorithm(algo.id as AlgorithmType);\n                setCurrentStep(0);\n                setSteps([]);\n                setComparisons(0);\n                setSwaps(0);\n                setIsPlaying(false);\n              }}\n              className={`relative cursor-pointer rounded-xl p-6 transition-all duration-300 ${\n                selectedAlgorithm === algo.id\n                  ? 'bg-gradient-to-br from-cyan-500/20 to-purple-500/20 border-2 border-cyan-400 shadow-[0_0_30px_rgba(0,255,255,0.5)]'\n                  : 'bg-gray-800/50 border-2 border-gray-700 hover:border-purple-500 hover:shadow-[0_0_20px_rgba(168,85,247,0.4)]'\n              }`}\n            >\n              <div className=\"flex items-center justify-between mb-3\">\n                <BarChart3 \n                  className={`w-6 h-6 ${\n                    selectedAlgorithm === algo.id ? 'text-cyan-400' : 'text-gray-400'\n                  }`}\n                />\n                {selectedAlgorithm === algo.id && (\n                  <motion.div\n                    initial={{ scale: 0 }}\n                    animate={{ scale: 1 }}\n                    className=\"w-3 h-3 rounded-full bg-cyan-400 shadow-[0_0_10px_rgba(0,255,255,0.8)]\"\n                  />\n                )}\n              </div>\n              <h3 className={`text-lg font-bold mb-2 ${\n                selectedAlgorithm === algo.id ? 'text-cyan-300' : 'text-white'\n              }`}>\n                {algo.name}\n              </h3>\n              <p className={`text-sm font-mono ${\n                selectedAlgorithm === algo.id ? 'text-purple-300' : 'text-gray-400'\n              }`}>\n                {algo.complexity}\n              </p>\n              {selectedAlgorithm === algo.id && (\n                <motion.div\n                  layoutId=\"selectedGlow\"\n                  className=\"absolute inset-0 rounded-xl bg-gradient-to-br from-cyan-500/10 to-purple-500/10 pointer-events-none\"\n                  transition={{ type: \"spring\", stiffness: 300, damping: 30 }}\n                />\n              )}\n            </motion.div>\n          ))}\n        </div>\n\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ delay: 0.6 }}\n          className=\"bg-gray-900/50 backdrop-blur-xl rounded-2xl p-6 border border-purple-500/30 shadow-2xl\"\n        >\n          <div className=\"flex items-center gap-2 mb-4\">\n            <BarChart3 className=\"w-5 h-5 text-cyan-400\" />\n            <h3 className=\"text-lg font-semibold text-white\">Legend</h3>\n          </div>\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n            <div className=\"flex items-center gap-3\">\n              <div className=\"w-8 h-8 rounded-lg bg-cyan-500/20 border-2 border-cyan-400 shadow-[0_0_15px_rgba(0,255,255,0.5)]\" />\n              <div>\n                <p className=\"text-sm font-medium text-white\">Comparing</p>\n                <p className=\"text-xs text-gray-400\">Active comparison</p>\n              </div>\n            </div>\n            <div className=\"flex items-center gap-3\">\n              <div className=\"w-8 h-8 rounded-lg bg-pink-500/20 border-2 border-pink-400 shadow-[0_0_15px_rgba(255,0,102,0.5)]\" />\n              <div>\n                <p className=\"text-sm font-medium text-white\">Swapping</p>\n                <p className=\"text-xs text-gray-400\">Elements swapping</p>\n              </div>\n            </div>\n            <div className=\"flex items-center gap-3\">\n              <div className=\"w-8 h-8 rounded-lg bg-green-500/20 border-2 border-green-400 shadow-[0_0_15px_rgba(0,255,0,0.5)]\" />\n              <div>\n                <p className=\"text-sm font-medium text-white\">Sorted</p>\n                <p className=\"text-xs text-gray-400\">In final position</p>\n              </div>\n            </div>\n            <div className=\"flex items-center gap-3\">\n              <div className=\"w-8 h-8 rounded-lg bg-purple-500/20 border-2 border-purple-400 shadow-[0_0_15px_rgba(168,85,247,0.5)]\" />\n              <div>\n                <p className=\"text-sm font-medium text-white\">Unsorted</p>\n                <p className=\"text-xs text-gray-400\">Awaiting sort</p>\n              </div>\n            </div>\n          </div>\n        </motion.div>\n      </div>\n    </div>\n  );\n}",
    "error": null,
    "elapsed_time": 54.31487965583801,
    "success": true
  }
}