{
  "prompt_id": "algorithm_visualizer",
  "prompt_name": "Algorithm Visualizer",
  "mode": "parallel",
  "run_number": 23,
  "timestamp": "2025-10-14T09:13:38.776778",
  "response_time": 129.41721773147583,
  "total_tokens": null,
  "response_content": "import { useState, useCallback } from 'react';\nimport { useEffect } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Slider } from '@/components/ui/slider';\nimport { Play, Pause, RotateCcw, Zap, BarChart3 } from 'lucide-react';\nimport { motion } from 'framer-motion';\n\ninterface ArrayElement {\n  value: number;\n  id: string;\n  isComparing?: boolean;\n  isSwapping?: boolean;\n  isSorted?: boolean;\n}\n\ninterface AlgorithmStep {\n  array: ArrayElement[];\n  comparingIndices: number[];\n  swappingIndices: number[];\n  sortedIndices: number[];\n}\n\ntype AlgorithmType = 'bubble' | 'quick' | 'merge' | 'insertion';\n\nconst NEON_COLORS = [\n  '#00ffff',\n  '#ff00ff', \n  '#00ff00',\n  '#ffff00',\n  '#ff0066',\n  '#00ffaa'\n];\n\nconst mockAlgorithms = [\n  { id: 'bubble', name: 'Bubble Sort', complexity: 'O(n\u00b2)' },\n  { id: 'quick', name: 'Quick Sort', complexity: 'O(n log n)' },\n  { id: 'merge', name: 'Merge Sort', complexity: 'O(n log n)' },\n  { id: 'insertion', name: 'Insertion Sort', complexity: 'O(n\u00b2)' }\n];\n\nexport default function AlgorithmVisualizer() {\n  const [array, setArray] = useState<ArrayElement[]>([]);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [speed, setSpeed] = useState([50]);\n  const [arraySize, setArraySize] = useState([20]);\n  const [selectedAlgorithm, setSelectedAlgorithm] = useState<AlgorithmType>('bubble');\n  const [currentStep, setCurrentStep] = useState(0);\n  const [steps, setSteps] = useState<AlgorithmStep[]>([]);\n  const [comparisons, setComparisons] = useState(0);\n  const [swaps, setSwaps] = useState(0);\n\n  const generateRandomArray = useCallback(() => {\n    const newArray: ArrayElement[] = Array.from({ length: arraySize[0] }, (_, index) => ({\n      value: Math.floor(Math.random() * 100) + 5,\n      id: `element-${index}-${Date.now()}`,\n      isComparing: false,\n      isSwapping: false,\n      isSorted: false\n    }));\n    setArray(newArray);\n    setSteps([]);\n    setCurrentStep(0);\n    setIsPlaying(false);\n  }, [arraySize]);\n\n  const resetVisualization = useCallback(() => {\n\n    setIsPlaying(false);\n    setCurrentStep(0);\n    setSteps([]);\n    generateRandomArray();\n  }, [generateRandomArray]);\n\n  const animateSteps = useCallback(() => {\n    if (currentStep >= steps.length) {\n      setIsPlaying(false);\n      return;\n    }\n\n    const step = steps[currentStep];\n    setArray(step.array);\n    setCurrentStep(prev => prev + 1);\n  }, [currentStep, steps]);\n  useEffect(() => {\n    if (!isPlaying) return;\n\n    const delay = 1000 - (speed[0] * 9.5);\n    const timer = setTimeout(animateSteps, delay);\n\n    return () => clearTimeout(timer);\n  }, [isPlaying, speed, animateSteps]);\n  const startVisualization = useCallback(() => {    if (steps.length === 0) return;\n    if (currentStep >= steps.length) {\n      setCurrentStep(0);\n    }\n    setIsPlaying(true);</parameter>\n</invoke>\n    \n  }, [steps, speed, currentStep]);\n\n  const pauseVisualization = useCallback(() => {\n    setIsPlaying(false);\n\n    /* TODO:PauseAnimation Set isPlaying false, preserve current step */\n  }, []);\n\n  const generateSortingSteps = useCallback((algorithm: AlgorithmType) => {\n    const sortedArray = [...array];\n    const stepsList: AlgorithmStep[] = [];\n\n    const addStep = (arr: ArrayElement[], comparing: number[] = [], swapping: number[] = [], sorted: number[] = []) => {\n      stepsList.push({\n        array: arr.map(el => ({ ...el })),\n        comparingIndices: [...comparing],\n        swappingIndices: [...swapping],\n        sortedIndices: [...sorted]\n      });\n    };\n\n    // Initial state\n    addStep(sortedArray);\n\n    if (algorithm === 'bubble') {\n      const n = sortedArray.length;\n      const sortedSet = new Set<number>();\n      \n      for (let i = 0; i < n - 1; i++) {\n        for (let j = 0; j < n - i - 1; j++) {\n          // Comparing\n          addStep(sortedArray, [j, j + 1], [], Array.from(sortedSet));\n          \n          if (sortedArray[j].value > sortedArray[j + 1].value) {\n            // Swapping\n            addStep(sortedArray, [], [j, j + 1], Array.from(sortedSet));\n            [sortedArray[j], sortedArray[j + 1]] = [sortedArray[j + 1], sortedArray[j]];\n            addStep(sortedArray, [], [], Array.from(sortedSet));\n          }\n        }\n        sortedSet.add(n - i - 1);\n        addStep(sortedArray, [], [], Array.from(sortedSet));\n      }\n      sortedSet.add(0);\n      addStep(sortedArray, [], [], Array.from(sortedSet));\n    } else if (algorithm === 'insertion') {\n      const sortedSet = new Set<number>([0]);\n      \n      for (let i = 1; i < sortedArray.length; i++) {\n        const key = sortedArray[i];\n        let j = i - 1;\n        \n        addStep(sortedArray, [i], [], Array.from(sortedSet));\n        \n        while (j >= 0 && sortedArray[j].value > key.value) {\n          addStep(sortedArray, [j, j + 1], [], Array.from(sortedSet));\n          addStep(sortedArray, [], [j, j + 1], Array.from(sortedSet));\n          sortedArray[j + 1] = sortedArray[j];\n          addStep(sortedArray, [], [], Array.from(sortedSet));\n          j--;\n        }\n        \n        sortedArray[j + 1] = key;\n        sortedSet.add(i);\n        addStep(sortedArray, [], [], Array.from(sortedSet));\n      }\n    } else if (algorithm === 'quick') {\n      const sortedSet = new Set<number>();\n      \n      const partition = (low: number, high: number): number => {\n        const pivot = sortedArray[high];\n        addStep(sortedArray, [high], [], Array.from(sortedSet));\n        let i = low - 1;\n        \n        for (let j = low; j < high; j++) {\n          addStep(sortedArray, [j, high], [], Array.from(sortedSet));\n          \n          if (sortedArray[j].value < pivot.value) {\n            i++;\n            if (i !== j) {\n              addStep(sortedArray, [], [i, j], Array.from(sortedSet));\n              [sortedArray[i], sortedArray[j]] = [sortedArray[j], sortedArray[i]];\n              addStep(sortedArray, [], [], Array.from(sortedSet));\n            }\n          }\n        }\n        \n        addStep(sortedArray, [], [i + 1, high], Array.from(sortedSet));\n        [sortedArray[i + 1], sortedArray[high]] = [sortedArray[high], sortedArray[i + 1]];\n        sortedSet.add(i + 1);\n        addStep(sortedArray, [], [], Array.from(sortedSet));\n        \n        return i + 1;\n      };\n      \n      const quickSort = (low: number, high: number) => {\n        if (low < high) {\n          const pi = partition(low, high);\n          quickSort(low, pi - 1);\n          quickSort(pi + 1, high);\n        } else if (low === high) {\n          sortedSet.add(low);\n          addStep(sortedArray, [], [], Array.from(sortedSet));\n        }\n      };\n      \n      quickSort(0, sortedArray.length - 1);\n    } else if (algorithm === 'merge') {\n      const sortedSet = new Set<number>();\n      \n      const merge = (left: number, mid: number, right: number) => {\n        const leftArr = sortedArray.slice(left, mid + 1);\n        const rightArr = sortedArray.slice(mid + 1, right + 1);\n        \n        let i = 0, j = 0, k = left;\n        \n        while (i < leftArr.length && j < rightArr.length) {\n          addStep(sortedArray, [left + i, mid + 1 + j], [], Array.from(sortedSet));\n          \n          if (leftArr[i].value <= rightArr[j].value) {\n            sortedArray[k] = leftArr[i];\n            i++;\n          } else {\n            sortedArray[k] = rightArr[j];\n            j++;\n          }\n          addStep(sortedArray, [], [], Array.from(sortedSet));\n          k++;\n        }\n        \n        while (i < leftArr.length) {\n          sortedArray[k] = leftArr[i];\n          addStep(sortedArray, [], [], Array.from(sortedSet));\n          i++;\n          k++;\n        }\n        \n        while (j < rightArr.length) {\n          sortedArray[k] = rightArr[j];\n          addStep(sortedArray, [], [], Array.from(sortedSet));\n          j++;\n          k++;\n        }\n        \n        if (left === right) {\n          sortedSet.add(left);\n        } else if (right - left + 1 === sortedArray.length) {\n          for (let idx = left; idx <= right; idx++) {\n            sortedSet.add(idx);\n          }\n        }\n        addStep(sortedArray, [], [], Array.from(sortedSet));\n      };\n      \n      const mergeSort = (left: number, right: number) => {\n        if (left < right) {\n          const mid = Math.floor((left + right) / 2);\n          mergeSort(left, mid);\n          mergeSort(mid + 1, right);\n          merge(left, mid, right);\n        } else {\n          sortedSet.add(left);\n          addStep(sortedArray, [], [], Array.from(sortedSet));\n        }\n      };\n      \n      mergeSort(0, sortedArray.length - 1);\n    }\n\n    setSteps(stepsList);\n    setCurrentStep(0);\n  }, [array]);\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-gray-900 via-purple-900 to-gray-900 p-8\">\n      <div className=\"max-w-7xl mx-auto space-y-8\">\n        <motion.div\n          initial={{ opacity: 0, y: -20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.8 }}\n          className=\"text-center space-y-4\"\n        >\n          <motion.h1\n            className=\"text-6xl font-bold bg-gradient-to-r from-cyan-400 via-purple-400 to-pink-400 bg-clip-text text-transparent\"\n            animate={{\n              textShadow: [\n                '0 0 20px rgba(0, 255, 255, 0.5)',\n                '0 0 40px rgba(255, 0, 255, 0.5)',\n                '0 0 20px rgba(0, 255, 255, 0.5)'\n              ]\n            }}\n            transition={{ duration: 2, repeat: Infinity }}\n          >\n            Algorithm Visualizer\n          </motion.h1>\n          \n          <div className=\"flex items-center justify-center gap-4\">\n            <motion.div\n              initial={{ scale: 0 }}\n              animate={{ scale: 1 }}\n              transition={{ delay: 0.3, type: 'spring' }}\n              className=\"flex items-center gap-2 px-6 py-3 bg-gray-800/50 backdrop-blur-sm rounded-full border border-cyan-500/30\"\n            >\n              <Zap className=\"w-5 h-5 text-cyan-400\" />\n              <span className=\"text-xl font-semibold text-cyan-300\">\n                {mockAlgorithms.find(a => a.id === selectedAlgorithm)?.name || 'Bubble Sort'}\n              </span>\n            </motion.div>\n            \n            <motion.div\n              initial={{ scale: 0 }}\n              animate={{ scale: 1 }}\n              transition={{ delay: 0.5, type: 'spring' }}\n              className=\"px-4 py-2 bg-gradient-to-r from-purple-500/20 to-pink-500/20 backdrop-blur-sm rounded-full border border-purple-400/50\"\n            >\n              <div className=\"flex items-center gap-2\">\n                <BarChart3 className=\"w-4 h-4 text-purple-300\" />\n                <span className=\"text-sm font-mono text-purple-200\">\n                  {mockAlgorithms.find(a => a.id === selectedAlgorithm)?.complexity || 'O(n\u00b2)'}\n                </span>\n              </div>\n            </motion.div>\n          </div>\n        </motion.div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-6\">\n          <div className=\"lg:col-span-1 space-y-6\">\n            <motion.div\n              initial={{ opacity: 0, x: -50 }}\n              animate={{ opacity: 1, x: 0 }}\n              className=\"bg-gray-900/50 backdrop-blur-lg border border-cyan-500/30 rounded-xl p-6 shadow-[0_0_30px_rgba(0,255,255,0.3)] hover:shadow-[0_0_50px_rgba(0,255,255,0.5)] transition-shadow duration-300\"\n            >\n              <div className=\"space-y-6\">\n                {/* Algorithm Selection */}\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center gap-2 text-cyan-400\">\n                    <Zap className=\"w-4 h-4\" />\n                    <h3 className=\"text-sm font-semibold uppercase tracking-wider\">Algorithm</h3>\n                  </div>\n                  <div className=\"grid grid-cols-1 gap-2\">\n                    {mockAlgorithms.map((algo) => (\n                      <button\n                        key={algo.id}\n                        onClick={() => setSelectedAlgorithm(algo.id as AlgorithmType)}\n                        disabled={isPlaying}\n                        className={`p-3 rounded-lg border transition-all duration-300 text-left ${\n                          selectedAlgorithm === algo.id\n                            ? 'bg-cyan-500/20 border-cyan-400 shadow-[0_0_20px_rgba(0,255,255,0.4)]'\n                            : 'bg-gray-800/50 border-gray-700 hover:border-cyan-500/50 hover:bg-gray-800'\n                        } disabled:opacity-50 disabled:cursor-not-allowed`}\n                      >\n                        <div className=\"font-medium text-white text-sm\">{algo.name}</div>\n                        <div className=\"text-xs text-gray-400 mt-1\">{algo.complexity}</div>\n                      </button>\n                    ))}\n                  </div>\n                </div>\n\n                {/* Speed Control */}\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center gap-2 text-purple-400\">\n                      <BarChart3 className=\"w-4 h-4\" />\n                      <h3 className=\"text-sm font-semibold uppercase tracking-wider\">Speed</h3>\n                    </div>\n                    <span className=\"text-xs text-gray-400 bg-gray-800/50 px-2 py-1 rounded border border-purple-500/30\">\n                      {speed[0]}%\n                    </span>\n                  </div>\n                  <Slider\n                    value={speed}\n                    onValueChange={setSpeed}\n                    min={10}\n                    max={100}\n                    step={10}\n                    className=\"[&_[role=slider]]:bg-purple-500 [&_[role=slider]]:border-purple-400 [&_[role=slider]]:shadow-[0_0_10px_rgba(168,85,247,0.6)]\"\n                  />\n                </div>\n\n                {/* Array Size Control */}\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center gap-2 text-pink-400\">\n                      <BarChart3 className=\"w-4 h-4\" />\n                      <h3 className=\"text-sm font-semibold uppercase tracking-wider\">Array Size</h3>\n                    </div>\n                    <span className=\"text-xs text-gray-400 bg-gray-800/50 px-2 py-1 rounded border border-pink-500/30\">\n                      {arraySize[0]}\n                    </span>\n                  </div>\n                  <Slider\n                    value={arraySize}\n                    onValueChange={setArraySize}\n                    min={5}\n                    max={50}\n                    step={5}\n                    disabled={isPlaying}\n                    className=\"[&_[role=slider]]:bg-pink-500 [&_[role=slider]]:border-pink-400 [&_[role=slider]]:shadow-[0_0_10px_rgba(236,72,153,0.6)]\"\n                  />\n                </div>\n\n                {/* Control Buttons */}\n                <div className=\"space-y-2 pt-4 border-t border-gray-700/50\">\n                  <Button\n                    onClick={isPlaying ? pauseVisualization : startVisualization}\n                    disabled={steps.length === 0 || (currentStep >= steps.length && !isPlaying)}\n                    className=\"w-full bg-gradient-to-r from-cyan-600 to-blue-600 hover:from-cyan-500 hover:to-blue-500 text-white shadow-[0_0_20px_rgba(0,255,255,0.4)] hover:shadow-[0_0_30px_rgba(0,255,255,0.6)] transition-all duration-300\"\n                  >\n                    {isPlaying ? (\n                      <>\n                        <Pause className=\"w-4 h-4 mr-2\" />\n                        Pause\n                      </>\n                    ) : (\n                      <>\n                        <Play className=\"w-4 h-4 mr-2\" />\n                        {currentStep >= steps.length ? 'Start' : 'Resume'}\n                      </>\n                    )}\n                  </Button>\n\n                  <Button\n                    onClick={resetVisualization}\n                    variant=\"outline\"\n                    className=\"w-full border-purple-500/50 text-purple-400 hover:bg-purple-500/20 hover:border-purple-400 shadow-[0_0_15px_rgba(168,85,247,0.3)] hover:shadow-[0_0_25px_rgba(168,85,247,0.5)] transition-all duration-300\"\n                  >\n                    <RotateCcw className=\"w-4 h-4 mr-2\" />\n                    Reset\n                  </Button>\n\n                  <Button\n                    onClick={generateRandomArray}\n                    disabled={isPlaying}\n                    variant=\"outline\"\n                    className=\"w-full border-pink-500/50 text-pink-400 hover:bg-pink-500/20 hover:border-pink-400 shadow-[0_0_15px_rgba(236,72,153,0.3)] hover:shadow-[0_0_25px_rgba(236,72,153,0.5)] transition-all duration-300 disabled:opacity-50 disabled:cursor-not-allowed\"\n                  >\n                    <Zap className=\"w-4 h-4 mr-2\" />\n                    New Array\n                  </Button>\n                </div>\n\n                {/* Stats Display */}\n                <div className=\"pt-4 border-t border-gray-700/50 space-y-2\">\n                  <div className=\"flex justify-between text-xs\">\n                    <span className=\"text-gray-400\">Current Step:</span>\n                    <span className=\"text-cyan-400 font-mono\">{currentStep} / {steps.length}</span>\n                  </div>\n                  <div className=\"flex justify-between text-xs\">\n                    <span className=\"text-gray-400\">Array Length:</span>\n                    <span className=\"text-purple-400 font-mono\">{array.length}</span>\n                  </div>\n                </div>\n              </div>\n            </motion.div>\n            \n            <div className=\"bg-gray-900/50 backdrop-blur-lg border border-cyan-500/30 rounded-xl p-6 shadow-2xl shadow-cyan-500/20\">\n              <div className=\"space-y-6\">\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center gap-2 text-cyan-400\">\n                    <Zap className=\"w-4 h-4\" />\n                    <span className=\"text-sm font-semibold tracking-wider\">ALGORITHM</span>\n                  </div>\n                  <div className=\"grid grid-cols-1 gap-3\">\n                    {mockAlgorithms.map((algo) => (\n                      <motion.button\n                        key={algo.id}\n                        onClick={() => setSelectedAlgorithm(algo.id as AlgorithmType)}\n                        className={`relative p-4 rounded-lg border-2 transition-all duration-300 text-left overflow-hidden group ${\n                          selectedAlgorithm === algo.id\n                            ? 'border-cyan-400 bg-cyan-500/20 shadow-lg shadow-cyan-500/50'\n                            : 'border-gray-700 bg-gray-800/50 hover:border-cyan-500/50 hover:bg-cyan-500/10'\n                        }`}\n                        whileHover={{ scale: 1.02 }}\n                        whileTap={{ scale: 0.98 }}\n                      >\n                        <div className={`absolute inset-0 bg-gradient-to-r from-cyan-500/0 via-cyan-500/20 to-cyan-500/0 opacity-0 group-hover:opacity-100 transition-opacity duration-500 ${\n                          selectedAlgorithm === algo.id ? 'opacity-100' : ''\n                        }`} />\n                        <div className=\"relative z-10\">\n                          <div className=\"font-semibold text-white mb-1\">{algo.name}</div>\n                          <div className={`text-xs font-mono ${\n                            selectedAlgorithm === algo.id ? 'text-cyan-300' : 'text-gray-400'\n                          }`}>\n                            {algo.complexity}\n                          </div>\n                        </div>\n                        {selectedAlgorithm === algo.id && (\n                          <motion.div\n                            className=\"absolute top-2 right-2 w-2 h-2 bg-cyan-400 rounded-full\"\n                            animate={{ scale: [1, 1.2, 1], opacity: [1, 0.5, 1] }}\n                            transition={{ duration: 2, repeat: Infinity }}\n                          />\n                        )}\n                      </motion.button>\n                    ))}\n                  </div>\n                </div>\n\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <label className=\"text-cyan-400 text-sm font-medium flex items-center gap-2\">\n                      <Zap className=\"w-4 h-4\" />\n                      Speed\n                    </label>\n                    <span className=\"text-cyan-300 text-xs\">{speed[0]}ms</span>\n                  </div>\n                  <Slider\n                    value={speed}\n                    onValueChange={setSpeed}\n                    min={10}\n                    max={200}\n                    step={10}\n                    className=\"[&_[role=slider]]:bg-cyan-400 [&_[role=slider]]:border-cyan-300 [&_[role=slider]]:shadow-[0_0_15px_rgba(34,211,238,0.8)] [&_[role=slider]]:hover:shadow-[0_0_25px_rgba(34,211,238,1)] [&_[role=slider]]:transition-shadow [&_.relative]:bg-gray-700/50 [&_.relative]:border [&_.relative]:border-cyan-500/30 [&_.bg-primary]:bg-gradient-to-r [&_.bg-primary]:from-cyan-500 [&_.bg-primary]:to-purple-500 [&_.bg-primary]:shadow-[0_0_10px_rgba(34,211,238,0.5)]\"\n                  />\n                </div>\n\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <label className=\"text-cyan-400 text-sm font-medium flex items-center gap-2\">\n                      <BarChart3 className=\"w-4 h-4\" />\n                      Array Size\n                    </label>\n                    <span className=\"text-cyan-300 text-xs\">{arraySize[0]}</span>\n                  </div>\n                  <Slider\n                    value={arraySize}\n                    onValueChange={setArraySize}\n                    min={5}\n                    max={50}\n                    step={1}\n                    className=\"[&_[role=slider]]:bg-gradient-to-r [&_[role=slider]]:from-purple-500 [&_[role=slider]]:to-pink-500 [&_[role=slider]]:border-2 [&_[role=slider]]:border-purple-300 [&_[role=slider]]:shadow-lg [&_[role=slider]]:shadow-purple-500/50 [&_[role=slider]]:transition-all [&_[role=slider]]:hover:shadow-purple-500/80 [&_[role=slider]]:hover:scale-110 [&>span]:bg-gradient-to-r [&>span]:from-purple-500/30 [&>span]:to-pink-500/30 [&>span]:h-2 [&>span]:rounded-full\"\n                  />\n                </div>\n\n                <div className=\"flex gap-3 pt-4\">\n                  <motion.button\n                    onClick={isPlaying ? pauseVisualization : startVisualization}\n                    disabled={array.length === 0 || (steps.length === 0 && !isPlaying)}\n                    whileHover={{ scale: 1.05 }}\n                    whileTap={{ scale: 0.95 }}\n                    className=\"flex-1 relative group disabled:opacity-50 disabled:cursor-not-allowed\"\n                  >\n                    <div className=\"absolute inset-0 bg-gradient-to-r from-cyan-500 to-blue-500 rounded-lg blur-lg opacity-50 group-hover:opacity-75 transition-opacity duration-300\" />\n                    <div className=\"relative bg-gradient-to-r from-cyan-600 to-blue-600 hover:from-cyan-500 hover:to-blue-500 text-white font-semibold py-3 px-6 rounded-lg flex items-center justify-center gap-2 transition-all duration-300 border border-cyan-400/50\">\n                      <motion.div\n                        initial={false}\n                        animate={{ \n                          rotate: isPlaying ? 0 : 0,\n                          scale: isPlaying ? 1 : 1\n                        }}\n                        transition={{ duration: 0.3 }}\n                      >\n                        {isPlaying ? (\n                          <Pause className=\"w-5 h-5\" />\n                        ) : (\n                          <Play className=\"w-5 h-5\" />\n                        )}\n                      </motion.div>\n                      <span className=\"text-sm tracking-wider\">\n                        {isPlaying ? 'PAUSE' : 'PLAY'}\n                      </span>\n                    </div>\n                  </motion.button>\n                  <motion.div whileTap={{ rotate: 360 }} transition={{ duration: 0.6, ease: \"easeInOut\" }}>\n                    <Button\n                      onClick={resetVisualization}\n                      variant=\"outline\"\n                      size=\"lg\"\n                      className=\"relative group bg-gradient-to-r from-pink-500/20 to-purple-500/20 border-2 border-pink-500/50 hover:border-pink-400 text-pink-300 hover:text-pink-200 shadow-lg shadow-pink-500/30 hover:shadow-pink-500/60 hover:shadow-2xl transition-all duration-300 overflow-hidden\"\n                    >\n                      <div className=\"absolute inset-0 bg-gradient-to-r from-pink-500/0 via-pink-500/30 to-pink-500/0 opacity-0 group-hover:opacity-100 transition-opacity duration-500\" />\n                      <motion.div\n                        className=\"relative z-10 flex items-center gap-2\"\n                        whileHover={{ scale: 1.05 }}\n                      >\n                        <RotateCcw className=\"w-5 h-5\" />\n                        <span className=\"font-semibold\">Reset</span>\n                      </motion.div>\n                      <div className=\"absolute inset-0 opacity-0 group-hover:opacity-100 transition-opacity duration-300\">\n                        <div className=\"absolute inset-0 bg-pink-500/10 blur-xl\" />\n                      </div>\n                    </Button>\n                  </motion.div>\n                </div>\n              </div>\n            </div>\n\n            \n            <motion.div\n              initial={{ opacity: 0, x: -50 }}\n              animate={{ opacity: 1, x: 0 }}\n              transition={{ delay: 0.2 }}\n              className=\"bg-gray-900/50 backdrop-blur-lg border border-purple-500/30 rounded-xl p-6 shadow-[0_0_30px_rgba(168,85,247,0.3)] hover:shadow-[0_0_50px_rgba(168,85,247,0.5)] transition-shadow duration-300\"\n            >\n              <div className=\"space-y-4\">\n                <div className=\"flex items-center gap-2 text-purple-400 mb-4\">\n                  <BarChart3 className=\"w-5 h-5\" />\n                  <h3 className=\"text-sm font-semibold uppercase tracking-wide\">Statistics</h3>\n                </div>\n\n                <div className=\"space-y-4\">\n                  {/* Comparisons Counter */}\n                  <motion.div\n                    className=\"relative p-4 rounded-lg bg-gradient-to-br from-cyan-500/10 to-cyan-500/5 border border-cyan-500/30 overflow-hidden group\"\n                    whileHover={{ scale: 1.02 }}\n                  >\n                    <div className=\"absolute inset-0 bg-gradient-to-r from-cyan-500/0 via-cyan-500/20 to-cyan-500/0 opacity-0 group-hover:opacity-100 transition-opacity duration-500\" />\n                    <div className=\"relative z-10\">\n                      <div className=\"text-xs text-cyan-400 font-medium mb-1 uppercase tracking-wider\">Comparisons</div>\n                      <motion.div\n                        className=\"text-3xl font-bold text-cyan-300\"\n                        key={comparisons}\n                        initial={{ scale: 1.2, color: '#00ffff' }}\n                        animate={{ scale: 1, color: '#67e8f9' }}\n                        transition={{ duration: 0.3 }}\n                      >\n                        {comparisons}\n                      </motion.div>\n                    </div>\n                    <motion.div\n                      className=\"absolute top-2 right-2 w-2 h-2 bg-cyan-400 rounded-full\"\n                      animate={{ scale: [1, 1.5, 1], opacity: [1, 0.3, 1] }}\n                      transition={{ duration: 2, repeat: Infinity }}\n                    />\n                  </motion.div>\n\n                  {/* Swaps Counter */}\n                  <motion.div\n                    className=\"relative p-4 rounded-lg bg-gradient-to-br from-pink-500/10 to-pink-500/5 border border-pink-500/30 overflow-hidden group\"\n                    whileHover={{ scale: 1.02 }}\n                  >\n                    <div className=\"absolute inset-0 bg-gradient-to-r from-pink-500/0 via-pink-500/20 to-pink-500/0 opacity-0 group-hover:opacity-100 transition-opacity duration-500\" />\n                    <div className=\"relative z-10\">\n                      <div className=\"text-xs text-pink-400 font-medium mb-1 uppercase tracking-wider\">Swaps</div>\n                      <motion.div\n                        className=\"text-3xl font-bold text-pink-300\"\n                        key={swaps}\n                        initial={{ scale: 1.2, color: '#ff0066' }}\n                        animate={{ scale: 1, color: '#f9a8d4' }}\n                        transition={{ duration: 0.3 }}\n                      >\n                        {swaps}\n                      </motion.div>\n                    </div>\n                    <motion.div\n                      className=\"absolute top-2 right-2 w-2 h-2 bg-pink-400 rounded-full\"\n                      animate={{ scale: [1, 1.5, 1], opacity: [1, 0.3, 1] }}\n                      transition={{ duration: 2, repeat: Infinity, delay: 0.5 }}\n                    />\n                  </motion.div>\n\n                  {/* Progress Bar */}\n                  <motion.div\n                    className=\"relative p-4 rounded-lg bg-gradient-to-br from-purple-500/10 to-purple-500/5 border border-purple-500/30 overflow-hidden\"\n                    whileHover={{ scale: 1.02 }}\n                  >\n                    <div className=\"relative z-10\">\n                      <div className=\"flex items-center justify-between mb-2\">\n                        <div className=\"text-xs text-purple-400 font-medium uppercase tracking-wider\">Progress</div>\n                        <div className=\"text-sm text-purple-300 font-bold\">\n                          {steps.length > 0 ? Math.round((currentStep / steps.length) * 100) : 0}%\n                        </div>\n                      </div>\n                      <div className=\"relative h-3 bg-gray-800/50 rounded-full overflow-hidden border border-purple-500/20\">\n                        <motion.div\n                          className=\"absolute inset-y-0 left-0 bg-gradient-to-r from-purple-500 via-pink-500 to-cyan-500 rounded-full shadow-[0_0_15px_rgba(168,85,247,0.8)]\"\n                          initial={{ width: 0 }}\n                          animate={{\n                            width: steps.length > 0 ? `${(currentStep / steps.length) * 100}%` : '0%'\n                          }}\n                          transition={{ duration: 0.3 }}\n                        />\n                        <motion.div\n                          className=\"absolute inset-0 bg-gradient-to-r from-transparent via-white/30 to-transparent\"\n                          animate={{ x: ['-100%', '200%'] }}\n                          transition={{ duration: 2, repeat: Infinity, ease: 'linear' }}\n                        />\n                      </div>\n                      <div className=\"flex items-center justify-between mt-2\">\n                        <div className=\"text-xs text-gray-400\">Step {currentStep}</div>\n                        <div className=\"text-xs text-gray-400\">of {steps.length}</div>\n                      </div>\n                    </div>\n                  </motion.div>\n\n                  {/* Array Size Info */}\n                  <motion.div\n                    className=\"relative p-4 rounded-lg bg-gradient-to-br from-green-500/10 to-green-500/5 border border-green-500/30 overflow-hidden group\"\n                    whileHover={{ scale: 1.02 }}\n                  >\n                    <div className=\"absolute inset-0 bg-gradient-to-r from-green-500/0 via-green-500/20 to-green-500/0 opacity-0 group-hover:opacity-100 transition-opacity duration-500\" />\n                    <div className=\"relative z-10\">\n                      <div className=\"text-xs text-green-400 font-medium mb-1 uppercase tracking-wider\">Array Size</div>\n                      <div className=\"text-3xl font-bold text-green-300\">\n                        {array.length}\n                      </div>\n                    </div>\n                    <motion.div\n                      className=\"absolute top-2 right-2 w-2 h-2 bg-green-400 rounded-full\"\n                      animate={{ scale: [1, 1.5, 1], opacity: [1, 0.3, 1] }}\n                      transition={{ duration: 2, repeat: Infinity, delay: 1 }}\n                    />\n                  </motion.div>\n\n                  {/* Status Indicator */}\n                  <motion.div\n                    className=\"relative p-4 rounded-lg bg-gradient-to-br from-yellow-500/10 to-yellow-500/5 border border-yellow-500/30 overflow-hidden\"\n                    animate={{\n                      borderColor: isPlaying\n                        ? ['rgba(234, 179, 8, 0.3)', 'rgba(234, 179, 8, 0.6)', 'rgba(234, 179, 8, 0.3)']\n                        : 'rgba(234, 179, 8, 0.3)'\n                    }}\n                    transition={{ duration: 2, repeat: Infinity }}\n                  >\n                    <div className=\"relative z-10 flex items-center justify-between\">\n                      <div className=\"text-xs text-yellow-400 font-medium uppercase tracking-wider\">Status</div>\n                      <div className=\"flex items-center gap-2\">\n                        <motion.div\n                          className={`w-2 h-2 rounded-full ${isPlaying ? 'bg-green-400' : 'bg-gray-500'}`}\n                          animate={isPlaying ? { scale: [1, 1.3, 1], opacity: [1, 0.5, 1] } : {}}\n                          transition={{ duration: 1, repeat: Infinity }}\n                        />\n                        <span className={`text-sm font-semibold ${isPlaying ? 'text-green-300' : 'text-gray-400'}`}>\n                          {isPlaying ? 'Running' : currentStep >= steps.length && steps.length > 0 ? 'Complete' : 'Idle'}\n                        </span>\n                      </div>\n                    </div>\n                  </motion.div>\n                </div>\n              </div>\n            </motion.div>\n          </div>\n\n          <div className=\"lg:col-span-3\">\n            <div className=\"bg-gray-900/50 backdrop-blur-lg border border-purple-500/30 rounded-xl p-8 shadow-2xl shadow-purple-500/20 min-h-[600px]\">\n                            {array.length === 0 ? (\n                <div className=\"absolute inset-0 flex items-center justify-center\">\n                  <motion.div\n                    initial={{ opacity: 0, scale: 0.8 }}\n                    animate={{ opacity: 1, scale: 1 }}\n                    className=\"text-center space-y-4\"\n                  >\n                    <motion.div\n                      animate={{\n                        rotate: [0, 360],\n                        scale: [1, 1.2, 1]\n                      }}\n                      transition={{ duration: 3, repeat: Infinity }}\n                      className=\"inline-block\"\n                    >\n                      <BarChart3 className=\"w-16 h-16 text-cyan-400\" />\n                    </motion.div>\n                    <p className=\"text-cyan-300 text-lg font-medium\">\n                      Generate an array to start visualizing\n                    </p>\n                  </motion.div>\n                </div>\n              ) : (\n                <div className=\"relative h-full w-full flex items-end justify-center gap-1 px-4\">\n                  {array.map((element, index) => {\n                    const maxValue = Math.max(...array.map(e => e.value));\n                    const heightPercentage = (element.value / maxValue) * 100;\n                    const isComparing = element.isComparing;\n                    const isSwapping = element.isSwapping;\n                    const isSorted = element.isSorted;\n                    \n                    let barColor = NEON_COLORS[index % NEON_COLORS.length];\n                    let glowColor = barColor;\n                    \n                    if (isSorted) {\n                      barColor = '#00ff00';\n                      glowColor = '#00ff00';\n                    } else if (isSwapping) {\n                      barColor = '#ff0066';\n                      glowColor = '#ff0066';\n                    } else if (isComparing) {\n                      barColor = '#ffff00';\n                      glowColor = '#ffff00';\n                    }\n\n                    return (\n                      <div key={element.id} className=\"relative flex-1 flex flex-col items-center justify-end\" style={{ maxWidth: '60px' }}>\n                        {/* Comparison Indicator */}\n                        {isComparing && (\n                          <motion.div\n                            initial={{ opacity: 0, y: -20 }}\n                            animate={{ \n                              opacity: [0, 1, 0],\n                              y: [-20, -40, -60],\n                              scale: [0.8, 1.2, 0.8]\n                            }}\n                            transition={{ duration: 0.8, repeat: Infinity }}\n                            className=\"absolute -top-16 left-1/2 -translate-x-1/2 z-20\"\n                          >\n                            <div className=\"w-8 h-8 rounded-full bg-yellow-400 flex items-center justify-center shadow-[0_0_20px_rgba(255,255,0,0.8)]\">\n                              <Zap className=\"w-4 h-4 text-gray-900\" />\n                            </div>\n                          </motion.div>\n                        )}\n\n                        {/* Swap Trail Effect */}\n                        {isSwapping && (\n                          <>\n                            <motion.div\n                              initial={{ opacity: 0, scale: 0.5 }}\n                              animate={{ \n                                opacity: [0, 0.8, 0],\n                                scale: [0.5, 2, 3],\n                              }}\n                              transition={{ duration: 0.6, repeat: Infinity }}\n                              className=\"absolute inset-0 rounded-lg blur-xl z-0\"\n                              style={{\n                                background: `radial-gradient(circle, ${glowColor}80 0%, transparent 70%)`,\n                              }}\n                            />\n                            <motion.div\n                              animate={{\n                                rotate: [0, 360],\n                              }}\n                              transition={{ duration: 1, repeat: Infinity, ease: \"linear\" }}\n                              className=\"absolute -top-12 left-1/2 -translate-x-1/2 z-20\"\n                            >\n                              <div className=\"relative\">\n                                <motion.div\n                                  animate={{\n                                    scale: [1, 1.3, 1],\n                                    opacity: [0.5, 1, 0.5]\n                                  }}\n                                  transition={{ duration: 0.5, repeat: Infinity }}\n                                  className=\"absolute inset-0 rounded-full blur-md\"\n                                  style={{ backgroundColor: glowColor }}\n                                />\n                                <RotateCcw className=\"w-6 h-6 relative z-10\" style={{ color: glowColor }} />\n                              </div>\n                            </motion.div>\n                          </>\n                        )}\n\n                        {/* Sorted Indicator */}\n                        {isSorted && (\n                          <motion.div\n                            initial={{ opacity: 0, scale: 0 }}\n                            animate={{ opacity: 1, scale: 1 }}\n                            transition={{ type: 'spring', stiffness: 500, damping: 15 }}\n                            className=\"absolute -top-10 left-1/2 -translate-x-1/2 z-20\"\n                          >\n                            <motion.div\n                              animate={{\n                                rotate: [0, 360],\n                              }}\n                              transition={{ duration: 2, repeat: Infinity, ease: \"linear\" }}\n                            >\n                              <div className=\"w-6 h-6 rounded-full bg-green-400 flex items-center justify-center shadow-[0_0_15px_rgba(0,255,0,0.8)]\">\n                                <div className=\"w-2 h-3 border-r-2 border-b-2 border-gray-900 rotate-45 -mt-1\" />\n                              </div>\n                            </motion.div>\n                          </motion.div>\n                        )}\n\n                        {/* Animated Bar */}\n                        <motion.div\n                          layout\n                          initial={{ height: 0, opacity: 0 }}\n                          animate={{ \n                            height: `${heightPercentage}%`,\n                            opacity: 1,\n                            scale: isSwapping ? [1, 1.1, 1] : 1,\n                          }}\n                          transition={{\n                            height: { duration: 0.5, ease: 'easeOut' },\n                            opacity: { duration: 0.3 },\n                            scale: { duration: 0.3, repeat: isSwapping ? Infinity : 0 }\n                          }}\n                          className=\"w-full rounded-t-lg relative overflow-hidden\"\n                          style={{\n                            backgroundColor: barColor,\n                            boxShadow: `0 0 20px ${glowColor}80, 0 0 40px ${glowColor}40, inset 0 0 20px ${glowColor}40`,\n                            minHeight: '20px'\n                          }}\n                        >\n                          {/* Inner glow effect */}\n                          <motion.div\n                            animate={{\n                              opacity: [0.3, 0.6, 0.3],\n                            }}\n                            transition={{ duration: 1.5, repeat: Infinity }}\n                            className=\"absolute inset-0 bg-gradient-to-t from-transparent via-white/30 to-transparent\"\n                          />\n                          \n                          {/* Shimmer effect */}\n                          <motion.div\n                            animate={{\n                              x: ['-100%', '200%'],\n                            }}\n                            transition={{ duration: 2, repeat: Infinity, ease: 'linear' }}\n                            className=\"absolute inset-0 w-1/3 bg-gradient-to-r from-transparent via-white/40 to-transparent skew-x-12\"\n                          />\n\n                          {/* Value label */}\n                          <div className=\"absolute inset-0 flex items-center justify-center\">\n                            <motion.span\n                              initial={{ scale: 0 }}\n                              animate={{ scale: 1 }}\n                              className=\"text-xs font-bold text-gray-900 drop-shadow-lg\"\n                            >\n                              {element.value}\n                            </motion.span>\n                          </div>\n                        </motion.div>\n\n                        {/* Base glow */}\n                        <motion.div\n                          animate={{\n                            opacity: isComparing || isSwapping ? [0.5, 1, 0.5] : 0.3,\n                          }}\n                          transition={{ duration: 0.5, repeat: Infinity }}\n                          className=\"absolute bottom-0 w-full h-2 blur-sm\"\n                          style={{\n                            backgroundColor: glowColor,\n                          }}\n                        />\n                      </div>\n                    );\n                  })}\n                </div>\n              )}</parameter>\n</invoke>\n                {array.map((element, index) => {\n                  const maxValue = Math.max(...array.map(el => el.value), 100);\n                  const heightPercentage = (element.value / maxValue) * 100;\n                  const colorIndex = index % NEON_COLORS.length;\n                  const neonColor = NEON_COLORS[colorIndex];\n                  \n                  return (\n                    <motion.div\n                      key={element.id}\n                      className=\"relative flex-1 min-w-[4px] max-w-[60px] rounded-t-lg\"\n                      initial={{ height: 0, opacity: 0 }}\n                      animate={{\n                        height: `${heightPercentage}%`,\n                        opacity: 1,\n                        backgroundColor: element.isSorted \n                          ? '#00ff00'\n                          : element.isSwapping\n                          ? '#ff0066'\n                          : element.isComparing\n                          ? '#ffff00'\n                          : neonColor,\n                        boxShadow: element.isSorted\n                          ? [\n                              `0 0 20px rgba(0, 255, 0, 0.8)`,\n                              `0 0 40px rgba(0, 255, 0, 0.6)`,\n                              `0 0 20px rgba(0, 255, 0, 0.8)`\n                            ]\n                          : element.isSwapping\n                          ? [\n                              `0 0 30px rgba(255, 0, 102, 1)`,\n                              `0 0 60px rgba(255, 0, 102, 0.8)`,\n                              `0 0 30px rgba(255, 0, 102, 1)`\n                            ]\n                          : element.isComparing\n                          ? [\n                              `0 0 25px rgba(255, 255, 0, 0.9)`,\n                              `0 0 50px rgba(255, 255, 0, 0.7)`,\n                              `0 0 25px rgba(255, 255, 0, 0.9)`\n                            ]\n                          : [\n                              `0 0 15px ${neonColor}80`,\n                              `0 0 30px ${neonColor}60`,\n                              `0 0 15px ${neonColor}80`\n                            ],\n                        scale: element.isSwapping ? [1, 1.1, 1] : element.isComparing ? 1.05 : 1\n                      }}\n                      transition={{\n                        height: { duration: 0.5, ease: 'easeInOut' },\n                        backgroundColor: { duration: 0.3 },\n                        boxShadow: { duration: 1.5, repeat: Infinity },\n                        scale: { duration: 0.3 }\n                      }}\n                      style={{\n                        background: element.isSorted\n                          ? 'linear-gradient(to top, #00ff00, #00ff88)'\n                          : element.isSwapping\n                          ? 'linear-gradient(to top, #ff0066, #ff66aa)'\n                          : element.isComparing\n                          ? 'linear-gradient(to top, #ffff00, #ffff88)'\n                          : `linear-gradient(to top, ${neonColor}, ${neonColor}dd)`,\n                        border: `2px solid ${element.isSorted ? '#00ff00' : element.isSwapping ? '#ff0066' : element.isComparing ? '#ffff00' : neonColor}`,\n                        position: 'relative',\n                        overflow: 'visible'\n                      }}\n                    >\n                      {/* Glow effect overlay */}\n                      <motion.div\n                        className=\"absolute inset-0 rounded-t-lg\"\n                        animate={{\n                          opacity: [0.3, 0.6, 0.3]\n                        }}\n                        transition={{\n                          duration: 2,\n                          repeat: Infinity,\n                          ease: 'easeInOut'\n                        }}\n                        style={{\n                          background: `radial-gradient(circle at 50% 0%, ${element.isSorted ? '#00ff00' : element.isSwapping ? '#ff0066' : element.isComparing ? '#ffff00' : neonColor}88, transparent 70%)`,\n                          pointerEvents: 'none'\n                        }}\n                      />\n                      \n                      {/* Value label */}\n                      <motion.div\n                        className=\"absolute -top-8 left-1/2 transform -translate-x-1/2 text-xs font-mono font-bold whitespace-nowrap\"\n                        initial={{ opacity: 0, y: 10 }}\n                        animate={{ \n                          opacity: element.isComparing || element.isSwapping ? 1 : 0.7,\n                          y: 0,\n                          scale: element.isComparing || element.isSwapping ? 1.2 : 1\n                        }}\n                        transition={{ duration: 0.3 }}\n                        style={{\n                          color: element.isSorted ? '#00ff00' : element.isSwapping ? '#ff0066' : element.isComparing ? '#ffff00' : neonColor,\n                          textShadow: `0 0 10px ${element.isSorted ? '#00ff00' : element.isSwapping ? '#ff0066' : element.isComparing ? '#ffff00' : neonColor}`,\n                          filter: 'drop-shadow(0 0 5px rgba(0,0,0,0.8))'\n                        }}\n                      >\n                        {element.value}\n                      </motion.div>\n\n                      {/* Particle effect for sorted elements */}\n                      {element.isSorted && (\n                        <>\n                          {[...Array(3)].map((_, i) => (\n                            <motion.div\n                              key={`particle-${i}`}\n                              className=\"absolute w-1 h-1 bg-green-400 rounded-full\"\n                              initial={{ \n                                x: 0, \n                                y: 0, \n                                opacity: 1,\n                                scale: 1\n                              }}\n                              animate={{\n                                x: [0, (Math.random() - 0.5) * 40],\n                                y: [0, -30 - Math.random() * 20],\n                                opacity: [1, 0],\n                                scale: [1, 0]\n                              }}\n                              transition={{\n                                duration: 1 + Math.random(),\n                                repeat: Infinity,\n                                delay: i * 0.3,\n                                ease: 'easeOut'\n                              }}\n                              style={{\n                                left: '50%',\n                                top: '0',\n                                boxShadow: '0 0 8px rgba(0, 255, 0, 0.8)'\n                              }}\n                            />\n                          ))}\n                        </>\n                      )}\n                    </motion.div>\n                  );\n                })\n              </div>\n\n                            {array.length > 0 && (\n                <div className=\"absolute inset-0 pointer-events-none\">\n                  {array.map((element, index) => {\n                    const isComparing = steps[currentStep]?.comparingIndices.includes(index);\n                    \n                    if (!isComparing) return null;\n\n                    const barWidth = Math.max(100 / array.length - 2, 8);\n                    const leftPosition = (index * (100 / array.length)) + (barWidth / 2);\n\n                    return (\n                      <motion.div\n                        key={`comparison-${element.id}-${index}`}\n                        initial={{ opacity: 0, y: 20, scale: 0.5 }}\n                        animate={{ \n                          opacity: [0, 1, 1, 0],\n                          y: [20, -40, -40, -60],\n                          scale: [0.5, 1.2, 1.2, 0.8]\n                        }}\n                        transition={{ \n                          duration: 0.8,\n                          times: [0, 0.3, 0.7, 1],\n                          repeat: Infinity,\n                          repeatDelay: 0.2\n                        }}\n                        className=\"absolute bottom-0\"\n                        style={{\n                          left: `${leftPosition}%`,\n                          transform: 'translateX(-50%)'\n                        }}\n                      >\n                        <motion.div\n                          className=\"relative\"\n                          animate={{\n                            rotate: [0, 10, -10, 0]\n                          }}\n                          transition={{\n                            duration: 0.6,\n                            repeat: Infinity\n                          }}\n                        >\n                          <div className=\"w-8 h-8 rounded-full bg-gradient-to-br from-cyan-400 to-blue-500 flex items-center justify-center shadow-[0_0_30px_rgba(34,211,238,0.8)]\">\n                            <Zap className=\"w-4 h-4 text-white\" />\n                          </div>\n                          <motion.div\n                            className=\"absolute inset-0 rounded-full bg-cyan-400\"\n                            animate={{\n                              scale: [1, 1.8, 1.8],\n                              opacity: [0.6, 0, 0]\n                            }}\n                            transition={{\n                              duration: 1.5,\n                              repeat: Infinity\n                            }}\n                          />\n                        </motion.div>\n                        \n                        <motion.div\n                          className=\"absolute top-full mt-2 left-1/2 -translate-x-1/2 whitespace-nowrap\"\n                          animate={{\n                            opacity: [0.7, 1, 0.7]\n                          }}\n                          transition={{\n                            duration: 1,\n                            repeat: Infinity\n                          }}\n                        >\n                          <div className=\"bg-cyan-500/90 backdrop-blur-sm px-3 py-1 rounded-full border border-cyan-300 shadow-lg shadow-cyan-500/50\">\n                            <span className=\"text-xs font-bold text-white\">\n                              {element.value}\n                            </span>\n                          </div>\n                        </motion.div>\n\n                        <motion.div\n                          className=\"absolute top-1/2 left-1/2 w-1 bg-gradient-to-b from-cyan-400 to-transparent\"\n                          style={{\n                            height: '200px',\n                            transform: 'translateX(-50%)'\n                          }}\n                          animate={{\n                            opacity: [0, 0.6, 0],\n                            scaleY: [0, 1, 1]\n                          }}\n                          transition={{\n                            duration: 0.8,\n                            repeat: Infinity\n                          }}\n                        />\n                      </motion.div>\n                    );\n                  })}\n\n                  {steps[currentStep]?.comparingIndices.length === 2 && (\n                    <motion.div\n                      key={`comparison-line-${currentStep}`}\n                      initial={{ opacity: 0, scaleX: 0 }}\n                      animate={{ \n                        opacity: [0, 0.8, 0.8, 0],\n                        scaleX: [0, 1, 1, 0.8]\n                      }}\n                      transition={{ \n                        duration: 1,\n                        repeat: Infinity\n                      }}\n                      className=\"absolute\"\n                      style={{\n                        left: `${(steps[currentStep].comparingIndices[0] * (100 / array.length)) + (Math.max(100 / array.length - 2, 8) / 2)}%`,\n                        width: `${Math.abs(steps[currentStep].comparingIndices[1] - steps[currentStep].comparingIndices[0]) * (100 / array.length)}%`,\n                        top: '30%',\n                        height: '2px',\n                        background: 'linear-gradient(90deg, rgba(34,211,238,0) 0%, rgba(34,211,238,1) 50%, rgba(34,211,238,0) 100%)',\n                        boxShadow: '0 0 20px rgba(34,211,238,0.8)',\n                        transformOrigin: 'left center'\n                      }}\n                    >\n                      <motion.div\n                        className=\"absolute inset-0\"\n                        animate={{\n                          x: ['-100%', '200%']\n                        }}\n                        transition={{\n                          duration: 1.5,\n                          repeat: Infinity,\n                          ease: 'linear'\n                        }}\n                      >\n                        <div className=\"w-20 h-full bg-gradient-to-r from-transparent via-white to-transparent opacity-60\" />\n                      </motion.div>\n                    </motion.div>\n                  )}\n                </div>\n              )}\n              \n                            {steps.length > 0 && currentStep > 0 && steps[currentStep - 1]?.swappingIndices.length === 2 && (\n                <>\n                  {steps[currentStep - 1].swappingIndices.map((swapIndex, idx) => {\n                    const element = array[swapIndex];\n                    if (!element) return null;\n                    \n                    const maxValue = Math.max(...array.map(el => el.value), 100);\n                    const heightPercentage = (element.value / maxValue) * 100;\n                    const totalElements = array.length;\n                    const elementWidth = 100 / totalElements;\n                    const leftPosition = (swapIndex / totalElements) * 100;\n                    const colorIndex = swapIndex % NEON_COLORS.length;\n                    const neonColor = NEON_COLORS[colorIndex];\n                    \n                    return (\n                      <motion.div\n                        key={`swap-trail-${swapIndex}-${currentStep}`}\n                        className=\"absolute bottom-0 rounded-t-lg pointer-events-none\"\n                        style={{\n                          left: `${leftPosition}%`,\n                          width: `${elementWidth}%`,\n                          height: `${heightPercentage}%`,\n                          backgroundColor: neonColor,\n                          boxShadow: `0 0 30px ${neonColor}, 0 0 60px ${neonColor}`,\n                          filter: 'blur(4px)',\n                        }}\n                        initial={{ opacity: 0.8, scale: 1 }}\n                        animate={{ \n                          opacity: 0,\n                          scale: 1.2,\n                          filter: 'blur(12px)'\n                        }}\n                        transition={{ \n                          duration: 0.6,\n                          ease: \"easeOut\"\n                        }}\n                      />\n                    );\n                  })}\n                  \n                  <motion.div\n                    key={`swap-connection-${currentStep}`}\n                    className=\"absolute pointer-events-none\"\n                    style={{\n                      left: `${(Math.min(...steps[currentStep - 1].swappingIndices) / array.length) * 100}%`,\n                      width: `${(Math.abs(steps[currentStep - 1].swappingIndices[1] - steps[currentStep - 1].swappingIndices[0]) / array.length) * 100}%`,\n                      top: '50%',\n                      height: '4px',\n                      background: `linear-gradient(90deg, \n                        ${NEON_COLORS[steps[currentStep - 1].swappingIndices[0] % NEON_COLORS.length]}, \n                        ${NEON_COLORS[steps[currentStep - 1].swappingIndices[1] % NEON_COLORS.length]})`,\n                      boxShadow: `0 0 20px ${NEON_COLORS[steps[currentStep - 1].swappingIndices[0] % NEON_COLORS.length]}`,\n                      filter: 'blur(2px)',\n                    }}\n                    initial={{ opacity: 0.9, scaleX: 0 }}\n                    animate={{ \n                      opacity: 0,\n                      scaleX: 1,\n                      filter: 'blur(8px)'\n                    }}\n                    transition={{ \n                      duration: 0.5,\n                      ease: \"easeInOut\"\n                    }}\n                  />\n                </>\n              )}\n            </div>\n          </div>\n        </div>\n\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ delay: 0.4, duration: 0.8 }}\n          className=\"bg-gray-900/50 backdrop-blur-lg border border-cyan-500/30 rounded-xl p-6 shadow-2xl shadow-cyan-500/10\"\n        >\n          <div className=\"flex items-center gap-2 mb-4\">\n            <BarChart3 className=\"w-5 h-5 text-cyan-400\" />\n            <h3 className=\"text-lg font-semibold text-cyan-300 uppercase tracking-wider\">Legend</h3>\n          </div>\n          \n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n            <motion.div\n              className=\"flex items-center gap-3 p-3 bg-gray-800/50 rounded-lg border border-gray-700/50 hover:border-cyan-500/50 transition-all duration-300\"\n              whileHover={{ scale: 1.05, boxShadow: '0 0 20px rgba(0, 255, 255, 0.3)' }}\n            >\n              <motion.div\n                className=\"w-6 h-12 rounded bg-gradient-to-t from-cyan-500 to-cyan-400\"\n                animate={{\n                  boxShadow: [\n                    '0 0 15px rgba(0, 255, 255, 0.8)',\n                    '0 0 30px rgba(0, 255, 255, 0.6)',\n                    '0 0 15px rgba(0, 255, 255, 0.8)'\n                  ]\n                }}\n                transition={{ duration: 2, repeat: Infinity }}\n              />\n              <div>\n                <div className=\"text-sm font-semibold text-white\">Unsorted</div>\n                <div className=\"text-xs text-gray-400\">Default state</div>\n              </div>\n            </motion.div>\n\n            <motion.div\n              className=\"flex items-center gap-3 p-3 bg-gray-800/50 rounded-lg border border-gray-700/50 hover:border-yellow-500/50 transition-all duration-300\"\n              whileHover={{ scale: 1.05, boxShadow: '0 0 20px rgba(255, 255, 0, 0.3)' }}\n            >\n              <motion.div\n                className=\"w-6 h-12 rounded bg-gradient-to-t from-yellow-500 to-yellow-400\"\n                animate={{\n                  boxShadow: [\n                    '0 0 25px rgba(255, 255, 0, 0.9)',\n                    '0 0 50px rgba(255, 255, 0, 0.7)',\n                    '0 0 25px rgba(255, 255, 0, 0.9)'\n                  ],\n                  scale: [1, 1.05, 1]\n                }}\n                transition={{ duration: 1.5, repeat: Infinity }}\n              />\n              <div>\n                <div className=\"text-sm font-semibold text-white\">Comparing</div>\n                <div className=\"text-xs text-gray-400\">Being compared</div>\n              </div>\n            </motion.div>\n\n            <motion.div\n              className=\"flex items-center gap-3 p-3 bg-gray-800/50 rounded-lg border border-gray-700/50 hover:border-pink-500/50 transition-all duration-300\"\n              whileHover={{ scale: 1.05, boxShadow: '0 0 20px rgba(255, 0, 102, 0.3)' }}\n            >\n              <motion.div\n                className=\"w-6 h-12 rounded bg-gradient-to-t from-pink-600 to-pink-500\"\n                animate={{\n                  boxShadow: [\n                    '0 0 30px rgba(255, 0, 102, 1)',\n                    '0 0 60px rgba(255, 0, 102, 0.8)',\n                    '0 0 30px rgba(255, 0, 102, 1)'\n                  ],\n                  scale: [1, 1.1, 1]\n                }}\n                transition={{ duration: 1, repeat: Infinity }}\n              />\n              <div>\n                <div className=\"text-sm font-semibold text-white\">Swapping</div>\n                <div className=\"text-xs text-gray-400\">Being swapped</div>\n              </div>\n            </motion.div>\n\n            <motion.div\n              className=\"flex items-center gap-3 p-3 bg-gray-800/50 rounded-lg border border-gray-700/50 hover:border-green-500/50 transition-all duration-300\"\n              whileHover={{ scale: 1.05, boxShadow: '0 0 20px rgba(0, 255, 0, 0.3)' }}\n            >\n              <motion.div\n                className=\"w-6 h-12 rounded bg-gradient-to-t from-green-500 to-green-400\"\n                animate={{\n                  boxShadow: [\n                    '0 0 20px rgba(0, 255, 0, 0.8)',\n                    '0 0 40px rgba(0, 255, 0, 0.6)',\n                    '0 0 20px rgba(0, 255, 0, 0.8)'\n                  ]\n                }}\n                transition={{ duration: 2, repeat: Infinity }}\n              />\n              <div>\n                <div className=\"text-sm font-semibold text-white\">Sorted</div>\n                <div className=\"text-xs text-gray-400\">In final position</div>\n              </div>\n            </motion.div>\n          </div>\n\n          <motion.div\n            className=\"mt-4 p-4 bg-gradient-to-r from-purple-500/10 to-pink-500/10 rounded-lg border border-purple-500/30\"\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            transition={{ delay: 0.6 }}\n          >\n            <div className=\"flex items-start gap-3\">\n              <motion.div\n                animate={{ rotate: 360 }}\n                transition={{ duration: 3, repeat: Infinity, ease: \"linear\" }}\n              >\n                <Zap className=\"w-5 h-5 text-purple-400 flex-shrink-0 mt-0.5\" />\n              </motion.div>\n              <div>\n                <div className=\"text-sm font-semibold text-purple-300 mb-1\">Pro Tip</div>\n                <div className=\"text-xs text-gray-400 leading-relaxed\">\n                  Watch the neon glow intensify during comparisons and swaps. Each algorithm has unique patterns - try them all!\n                </div>\n              </div>\n            </div>\n          </motion.div>\n        </motion.div>\n      </div>\n    </div>\n  );\n}",
  "error": null,
  "overall_score": 41,
  "code_quality_score": 12,
  "architecture_score": 10,
  "performance_score": 8,
  "accessibility_score": 11,
  "metadata": {
    "document_id": "eval_room_0c3d904a978d",
    "prompt_category": "creative",
    "prompt_complexity": 9.0
  },
  "raw_response": {
    "document_id": "eval_room_0c3d904a978d",
    "mode": "parallel",
    "prompt": "Build a captivating algorithm visualizer with neon colored bars, smooth height transitions, glowing comparison indicators, trail effects during swaps, and a futuristic dashboard design with animated controls",
    "content": "import { useState, useCallback } from 'react';\nimport { useEffect } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Slider } from '@/components/ui/slider';\nimport { Play, Pause, RotateCcw, Zap, BarChart3 } from 'lucide-react';\nimport { motion } from 'framer-motion';\n\ninterface ArrayElement {\n  value: number;\n  id: string;\n  isComparing?: boolean;\n  isSwapping?: boolean;\n  isSorted?: boolean;\n}\n\ninterface AlgorithmStep {\n  array: ArrayElement[];\n  comparingIndices: number[];\n  swappingIndices: number[];\n  sortedIndices: number[];\n}\n\ntype AlgorithmType = 'bubble' | 'quick' | 'merge' | 'insertion';\n\nconst NEON_COLORS = [\n  '#00ffff',\n  '#ff00ff', \n  '#00ff00',\n  '#ffff00',\n  '#ff0066',\n  '#00ffaa'\n];\n\nconst mockAlgorithms = [\n  { id: 'bubble', name: 'Bubble Sort', complexity: 'O(n\u00b2)' },\n  { id: 'quick', name: 'Quick Sort', complexity: 'O(n log n)' },\n  { id: 'merge', name: 'Merge Sort', complexity: 'O(n log n)' },\n  { id: 'insertion', name: 'Insertion Sort', complexity: 'O(n\u00b2)' }\n];\n\nexport default function AlgorithmVisualizer() {\n  const [array, setArray] = useState<ArrayElement[]>([]);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [speed, setSpeed] = useState([50]);\n  const [arraySize, setArraySize] = useState([20]);\n  const [selectedAlgorithm, setSelectedAlgorithm] = useState<AlgorithmType>('bubble');\n  const [currentStep, setCurrentStep] = useState(0);\n  const [steps, setSteps] = useState<AlgorithmStep[]>([]);\n  const [comparisons, setComparisons] = useState(0);\n  const [swaps, setSwaps] = useState(0);\n\n  const generateRandomArray = useCallback(() => {\n    const newArray: ArrayElement[] = Array.from({ length: arraySize[0] }, (_, index) => ({\n      value: Math.floor(Math.random() * 100) + 5,\n      id: `element-${index}-${Date.now()}`,\n      isComparing: false,\n      isSwapping: false,\n      isSorted: false\n    }));\n    setArray(newArray);\n    setSteps([]);\n    setCurrentStep(0);\n    setIsPlaying(false);\n  }, [arraySize]);\n\n  const resetVisualization = useCallback(() => {\n\n    setIsPlaying(false);\n    setCurrentStep(0);\n    setSteps([]);\n    generateRandomArray();\n  }, [generateRandomArray]);\n\n  const animateSteps = useCallback(() => {\n    if (currentStep >= steps.length) {\n      setIsPlaying(false);\n      return;\n    }\n\n    const step = steps[currentStep];\n    setArray(step.array);\n    setCurrentStep(prev => prev + 1);\n  }, [currentStep, steps]);\n  useEffect(() => {\n    if (!isPlaying) return;\n\n    const delay = 1000 - (speed[0] * 9.5);\n    const timer = setTimeout(animateSteps, delay);\n\n    return () => clearTimeout(timer);\n  }, [isPlaying, speed, animateSteps]);\n  const startVisualization = useCallback(() => {    if (steps.length === 0) return;\n    if (currentStep >= steps.length) {\n      setCurrentStep(0);\n    }\n    setIsPlaying(true);</parameter>\n</invoke>\n    \n  }, [steps, speed, currentStep]);\n\n  const pauseVisualization = useCallback(() => {\n    setIsPlaying(false);\n\n    /* TODO:PauseAnimation Set isPlaying false, preserve current step */\n  }, []);\n\n  const generateSortingSteps = useCallback((algorithm: AlgorithmType) => {\n    const sortedArray = [...array];\n    const stepsList: AlgorithmStep[] = [];\n\n    const addStep = (arr: ArrayElement[], comparing: number[] = [], swapping: number[] = [], sorted: number[] = []) => {\n      stepsList.push({\n        array: arr.map(el => ({ ...el })),\n        comparingIndices: [...comparing],\n        swappingIndices: [...swapping],\n        sortedIndices: [...sorted]\n      });\n    };\n\n    // Initial state\n    addStep(sortedArray);\n\n    if (algorithm === 'bubble') {\n      const n = sortedArray.length;\n      const sortedSet = new Set<number>();\n      \n      for (let i = 0; i < n - 1; i++) {\n        for (let j = 0; j < n - i - 1; j++) {\n          // Comparing\n          addStep(sortedArray, [j, j + 1], [], Array.from(sortedSet));\n          \n          if (sortedArray[j].value > sortedArray[j + 1].value) {\n            // Swapping\n            addStep(sortedArray, [], [j, j + 1], Array.from(sortedSet));\n            [sortedArray[j], sortedArray[j + 1]] = [sortedArray[j + 1], sortedArray[j]];\n            addStep(sortedArray, [], [], Array.from(sortedSet));\n          }\n        }\n        sortedSet.add(n - i - 1);\n        addStep(sortedArray, [], [], Array.from(sortedSet));\n      }\n      sortedSet.add(0);\n      addStep(sortedArray, [], [], Array.from(sortedSet));\n    } else if (algorithm === 'insertion') {\n      const sortedSet = new Set<number>([0]);\n      \n      for (let i = 1; i < sortedArray.length; i++) {\n        const key = sortedArray[i];\n        let j = i - 1;\n        \n        addStep(sortedArray, [i], [], Array.from(sortedSet));\n        \n        while (j >= 0 && sortedArray[j].value > key.value) {\n          addStep(sortedArray, [j, j + 1], [], Array.from(sortedSet));\n          addStep(sortedArray, [], [j, j + 1], Array.from(sortedSet));\n          sortedArray[j + 1] = sortedArray[j];\n          addStep(sortedArray, [], [], Array.from(sortedSet));\n          j--;\n        }\n        \n        sortedArray[j + 1] = key;\n        sortedSet.add(i);\n        addStep(sortedArray, [], [], Array.from(sortedSet));\n      }\n    } else if (algorithm === 'quick') {\n      const sortedSet = new Set<number>();\n      \n      const partition = (low: number, high: number): number => {\n        const pivot = sortedArray[high];\n        addStep(sortedArray, [high], [], Array.from(sortedSet));\n        let i = low - 1;\n        \n        for (let j = low; j < high; j++) {\n          addStep(sortedArray, [j, high], [], Array.from(sortedSet));\n          \n          if (sortedArray[j].value < pivot.value) {\n            i++;\n            if (i !== j) {\n              addStep(sortedArray, [], [i, j], Array.from(sortedSet));\n              [sortedArray[i], sortedArray[j]] = [sortedArray[j], sortedArray[i]];\n              addStep(sortedArray, [], [], Array.from(sortedSet));\n            }\n          }\n        }\n        \n        addStep(sortedArray, [], [i + 1, high], Array.from(sortedSet));\n        [sortedArray[i + 1], sortedArray[high]] = [sortedArray[high], sortedArray[i + 1]];\n        sortedSet.add(i + 1);\n        addStep(sortedArray, [], [], Array.from(sortedSet));\n        \n        return i + 1;\n      };\n      \n      const quickSort = (low: number, high: number) => {\n        if (low < high) {\n          const pi = partition(low, high);\n          quickSort(low, pi - 1);\n          quickSort(pi + 1, high);\n        } else if (low === high) {\n          sortedSet.add(low);\n          addStep(sortedArray, [], [], Array.from(sortedSet));\n        }\n      };\n      \n      quickSort(0, sortedArray.length - 1);\n    } else if (algorithm === 'merge') {\n      const sortedSet = new Set<number>();\n      \n      const merge = (left: number, mid: number, right: number) => {\n        const leftArr = sortedArray.slice(left, mid + 1);\n        const rightArr = sortedArray.slice(mid + 1, right + 1);\n        \n        let i = 0, j = 0, k = left;\n        \n        while (i < leftArr.length && j < rightArr.length) {\n          addStep(sortedArray, [left + i, mid + 1 + j], [], Array.from(sortedSet));\n          \n          if (leftArr[i].value <= rightArr[j].value) {\n            sortedArray[k] = leftArr[i];\n            i++;\n          } else {\n            sortedArray[k] = rightArr[j];\n            j++;\n          }\n          addStep(sortedArray, [], [], Array.from(sortedSet));\n          k++;\n        }\n        \n        while (i < leftArr.length) {\n          sortedArray[k] = leftArr[i];\n          addStep(sortedArray, [], [], Array.from(sortedSet));\n          i++;\n          k++;\n        }\n        \n        while (j < rightArr.length) {\n          sortedArray[k] = rightArr[j];\n          addStep(sortedArray, [], [], Array.from(sortedSet));\n          j++;\n          k++;\n        }\n        \n        if (left === right) {\n          sortedSet.add(left);\n        } else if (right - left + 1 === sortedArray.length) {\n          for (let idx = left; idx <= right; idx++) {\n            sortedSet.add(idx);\n          }\n        }\n        addStep(sortedArray, [], [], Array.from(sortedSet));\n      };\n      \n      const mergeSort = (left: number, right: number) => {\n        if (left < right) {\n          const mid = Math.floor((left + right) / 2);\n          mergeSort(left, mid);\n          mergeSort(mid + 1, right);\n          merge(left, mid, right);\n        } else {\n          sortedSet.add(left);\n          addStep(sortedArray, [], [], Array.from(sortedSet));\n        }\n      };\n      \n      mergeSort(0, sortedArray.length - 1);\n    }\n\n    setSteps(stepsList);\n    setCurrentStep(0);\n  }, [array]);\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-gray-900 via-purple-900 to-gray-900 p-8\">\n      <div className=\"max-w-7xl mx-auto space-y-8\">\n        <motion.div\n          initial={{ opacity: 0, y: -20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.8 }}\n          className=\"text-center space-y-4\"\n        >\n          <motion.h1\n            className=\"text-6xl font-bold bg-gradient-to-r from-cyan-400 via-purple-400 to-pink-400 bg-clip-text text-transparent\"\n            animate={{\n              textShadow: [\n                '0 0 20px rgba(0, 255, 255, 0.5)',\n                '0 0 40px rgba(255, 0, 255, 0.5)',\n                '0 0 20px rgba(0, 255, 255, 0.5)'\n              ]\n            }}\n            transition={{ duration: 2, repeat: Infinity }}\n          >\n            Algorithm Visualizer\n          </motion.h1>\n          \n          <div className=\"flex items-center justify-center gap-4\">\n            <motion.div\n              initial={{ scale: 0 }}\n              animate={{ scale: 1 }}\n              transition={{ delay: 0.3, type: 'spring' }}\n              className=\"flex items-center gap-2 px-6 py-3 bg-gray-800/50 backdrop-blur-sm rounded-full border border-cyan-500/30\"\n            >\n              <Zap className=\"w-5 h-5 text-cyan-400\" />\n              <span className=\"text-xl font-semibold text-cyan-300\">\n                {mockAlgorithms.find(a => a.id === selectedAlgorithm)?.name || 'Bubble Sort'}\n              </span>\n            </motion.div>\n            \n            <motion.div\n              initial={{ scale: 0 }}\n              animate={{ scale: 1 }}\n              transition={{ delay: 0.5, type: 'spring' }}\n              className=\"px-4 py-2 bg-gradient-to-r from-purple-500/20 to-pink-500/20 backdrop-blur-sm rounded-full border border-purple-400/50\"\n            >\n              <div className=\"flex items-center gap-2\">\n                <BarChart3 className=\"w-4 h-4 text-purple-300\" />\n                <span className=\"text-sm font-mono text-purple-200\">\n                  {mockAlgorithms.find(a => a.id === selectedAlgorithm)?.complexity || 'O(n\u00b2)'}\n                </span>\n              </div>\n            </motion.div>\n          </div>\n        </motion.div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-6\">\n          <div className=\"lg:col-span-1 space-y-6\">\n            <motion.div\n              initial={{ opacity: 0, x: -50 }}\n              animate={{ opacity: 1, x: 0 }}\n              className=\"bg-gray-900/50 backdrop-blur-lg border border-cyan-500/30 rounded-xl p-6 shadow-[0_0_30px_rgba(0,255,255,0.3)] hover:shadow-[0_0_50px_rgba(0,255,255,0.5)] transition-shadow duration-300\"\n            >\n              <div className=\"space-y-6\">\n                {/* Algorithm Selection */}\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center gap-2 text-cyan-400\">\n                    <Zap className=\"w-4 h-4\" />\n                    <h3 className=\"text-sm font-semibold uppercase tracking-wider\">Algorithm</h3>\n                  </div>\n                  <div className=\"grid grid-cols-1 gap-2\">\n                    {mockAlgorithms.map((algo) => (\n                      <button\n                        key={algo.id}\n                        onClick={() => setSelectedAlgorithm(algo.id as AlgorithmType)}\n                        disabled={isPlaying}\n                        className={`p-3 rounded-lg border transition-all duration-300 text-left ${\n                          selectedAlgorithm === algo.id\n                            ? 'bg-cyan-500/20 border-cyan-400 shadow-[0_0_20px_rgba(0,255,255,0.4)]'\n                            : 'bg-gray-800/50 border-gray-700 hover:border-cyan-500/50 hover:bg-gray-800'\n                        } disabled:opacity-50 disabled:cursor-not-allowed`}\n                      >\n                        <div className=\"font-medium text-white text-sm\">{algo.name}</div>\n                        <div className=\"text-xs text-gray-400 mt-1\">{algo.complexity}</div>\n                      </button>\n                    ))}\n                  </div>\n                </div>\n\n                {/* Speed Control */}\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center gap-2 text-purple-400\">\n                      <BarChart3 className=\"w-4 h-4\" />\n                      <h3 className=\"text-sm font-semibold uppercase tracking-wider\">Speed</h3>\n                    </div>\n                    <span className=\"text-xs text-gray-400 bg-gray-800/50 px-2 py-1 rounded border border-purple-500/30\">\n                      {speed[0]}%\n                    </span>\n                  </div>\n                  <Slider\n                    value={speed}\n                    onValueChange={setSpeed}\n                    min={10}\n                    max={100}\n                    step={10}\n                    className=\"[&_[role=slider]]:bg-purple-500 [&_[role=slider]]:border-purple-400 [&_[role=slider]]:shadow-[0_0_10px_rgba(168,85,247,0.6)]\"\n                  />\n                </div>\n\n                {/* Array Size Control */}\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center gap-2 text-pink-400\">\n                      <BarChart3 className=\"w-4 h-4\" />\n                      <h3 className=\"text-sm font-semibold uppercase tracking-wider\">Array Size</h3>\n                    </div>\n                    <span className=\"text-xs text-gray-400 bg-gray-800/50 px-2 py-1 rounded border border-pink-500/30\">\n                      {arraySize[0]}\n                    </span>\n                  </div>\n                  <Slider\n                    value={arraySize}\n                    onValueChange={setArraySize}\n                    min={5}\n                    max={50}\n                    step={5}\n                    disabled={isPlaying}\n                    className=\"[&_[role=slider]]:bg-pink-500 [&_[role=slider]]:border-pink-400 [&_[role=slider]]:shadow-[0_0_10px_rgba(236,72,153,0.6)]\"\n                  />\n                </div>\n\n                {/* Control Buttons */}\n                <div className=\"space-y-2 pt-4 border-t border-gray-700/50\">\n                  <Button\n                    onClick={isPlaying ? pauseVisualization : startVisualization}\n                    disabled={steps.length === 0 || (currentStep >= steps.length && !isPlaying)}\n                    className=\"w-full bg-gradient-to-r from-cyan-600 to-blue-600 hover:from-cyan-500 hover:to-blue-500 text-white shadow-[0_0_20px_rgba(0,255,255,0.4)] hover:shadow-[0_0_30px_rgba(0,255,255,0.6)] transition-all duration-300\"\n                  >\n                    {isPlaying ? (\n                      <>\n                        <Pause className=\"w-4 h-4 mr-2\" />\n                        Pause\n                      </>\n                    ) : (\n                      <>\n                        <Play className=\"w-4 h-4 mr-2\" />\n                        {currentStep >= steps.length ? 'Start' : 'Resume'}\n                      </>\n                    )}\n                  </Button>\n\n                  <Button\n                    onClick={resetVisualization}\n                    variant=\"outline\"\n                    className=\"w-full border-purple-500/50 text-purple-400 hover:bg-purple-500/20 hover:border-purple-400 shadow-[0_0_15px_rgba(168,85,247,0.3)] hover:shadow-[0_0_25px_rgba(168,85,247,0.5)] transition-all duration-300\"\n                  >\n                    <RotateCcw className=\"w-4 h-4 mr-2\" />\n                    Reset\n                  </Button>\n\n                  <Button\n                    onClick={generateRandomArray}\n                    disabled={isPlaying}\n                    variant=\"outline\"\n                    className=\"w-full border-pink-500/50 text-pink-400 hover:bg-pink-500/20 hover:border-pink-400 shadow-[0_0_15px_rgba(236,72,153,0.3)] hover:shadow-[0_0_25px_rgba(236,72,153,0.5)] transition-all duration-300 disabled:opacity-50 disabled:cursor-not-allowed\"\n                  >\n                    <Zap className=\"w-4 h-4 mr-2\" />\n                    New Array\n                  </Button>\n                </div>\n\n                {/* Stats Display */}\n                <div className=\"pt-4 border-t border-gray-700/50 space-y-2\">\n                  <div className=\"flex justify-between text-xs\">\n                    <span className=\"text-gray-400\">Current Step:</span>\n                    <span className=\"text-cyan-400 font-mono\">{currentStep} / {steps.length}</span>\n                  </div>\n                  <div className=\"flex justify-between text-xs\">\n                    <span className=\"text-gray-400\">Array Length:</span>\n                    <span className=\"text-purple-400 font-mono\">{array.length}</span>\n                  </div>\n                </div>\n              </div>\n            </motion.div>\n            \n            <div className=\"bg-gray-900/50 backdrop-blur-lg border border-cyan-500/30 rounded-xl p-6 shadow-2xl shadow-cyan-500/20\">\n              <div className=\"space-y-6\">\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center gap-2 text-cyan-400\">\n                    <Zap className=\"w-4 h-4\" />\n                    <span className=\"text-sm font-semibold tracking-wider\">ALGORITHM</span>\n                  </div>\n                  <div className=\"grid grid-cols-1 gap-3\">\n                    {mockAlgorithms.map((algo) => (\n                      <motion.button\n                        key={algo.id}\n                        onClick={() => setSelectedAlgorithm(algo.id as AlgorithmType)}\n                        className={`relative p-4 rounded-lg border-2 transition-all duration-300 text-left overflow-hidden group ${\n                          selectedAlgorithm === algo.id\n                            ? 'border-cyan-400 bg-cyan-500/20 shadow-lg shadow-cyan-500/50'\n                            : 'border-gray-700 bg-gray-800/50 hover:border-cyan-500/50 hover:bg-cyan-500/10'\n                        }`}\n                        whileHover={{ scale: 1.02 }}\n                        whileTap={{ scale: 0.98 }}\n                      >\n                        <div className={`absolute inset-0 bg-gradient-to-r from-cyan-500/0 via-cyan-500/20 to-cyan-500/0 opacity-0 group-hover:opacity-100 transition-opacity duration-500 ${\n                          selectedAlgorithm === algo.id ? 'opacity-100' : ''\n                        }`} />\n                        <div className=\"relative z-10\">\n                          <div className=\"font-semibold text-white mb-1\">{algo.name}</div>\n                          <div className={`text-xs font-mono ${\n                            selectedAlgorithm === algo.id ? 'text-cyan-300' : 'text-gray-400'\n                          }`}>\n                            {algo.complexity}\n                          </div>\n                        </div>\n                        {selectedAlgorithm === algo.id && (\n                          <motion.div\n                            className=\"absolute top-2 right-2 w-2 h-2 bg-cyan-400 rounded-full\"\n                            animate={{ scale: [1, 1.2, 1], opacity: [1, 0.5, 1] }}\n                            transition={{ duration: 2, repeat: Infinity }}\n                          />\n                        )}\n                      </motion.button>\n                    ))}\n                  </div>\n                </div>\n\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <label className=\"text-cyan-400 text-sm font-medium flex items-center gap-2\">\n                      <Zap className=\"w-4 h-4\" />\n                      Speed\n                    </label>\n                    <span className=\"text-cyan-300 text-xs\">{speed[0]}ms</span>\n                  </div>\n                  <Slider\n                    value={speed}\n                    onValueChange={setSpeed}\n                    min={10}\n                    max={200}\n                    step={10}\n                    className=\"[&_[role=slider]]:bg-cyan-400 [&_[role=slider]]:border-cyan-300 [&_[role=slider]]:shadow-[0_0_15px_rgba(34,211,238,0.8)] [&_[role=slider]]:hover:shadow-[0_0_25px_rgba(34,211,238,1)] [&_[role=slider]]:transition-shadow [&_.relative]:bg-gray-700/50 [&_.relative]:border [&_.relative]:border-cyan-500/30 [&_.bg-primary]:bg-gradient-to-r [&_.bg-primary]:from-cyan-500 [&_.bg-primary]:to-purple-500 [&_.bg-primary]:shadow-[0_0_10px_rgba(34,211,238,0.5)]\"\n                  />\n                </div>\n\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <label className=\"text-cyan-400 text-sm font-medium flex items-center gap-2\">\n                      <BarChart3 className=\"w-4 h-4\" />\n                      Array Size\n                    </label>\n                    <span className=\"text-cyan-300 text-xs\">{arraySize[0]}</span>\n                  </div>\n                  <Slider\n                    value={arraySize}\n                    onValueChange={setArraySize}\n                    min={5}\n                    max={50}\n                    step={1}\n                    className=\"[&_[role=slider]]:bg-gradient-to-r [&_[role=slider]]:from-purple-500 [&_[role=slider]]:to-pink-500 [&_[role=slider]]:border-2 [&_[role=slider]]:border-purple-300 [&_[role=slider]]:shadow-lg [&_[role=slider]]:shadow-purple-500/50 [&_[role=slider]]:transition-all [&_[role=slider]]:hover:shadow-purple-500/80 [&_[role=slider]]:hover:scale-110 [&>span]:bg-gradient-to-r [&>span]:from-purple-500/30 [&>span]:to-pink-500/30 [&>span]:h-2 [&>span]:rounded-full\"\n                  />\n                </div>\n\n                <div className=\"flex gap-3 pt-4\">\n                  <motion.button\n                    onClick={isPlaying ? pauseVisualization : startVisualization}\n                    disabled={array.length === 0 || (steps.length === 0 && !isPlaying)}\n                    whileHover={{ scale: 1.05 }}\n                    whileTap={{ scale: 0.95 }}\n                    className=\"flex-1 relative group disabled:opacity-50 disabled:cursor-not-allowed\"\n                  >\n                    <div className=\"absolute inset-0 bg-gradient-to-r from-cyan-500 to-blue-500 rounded-lg blur-lg opacity-50 group-hover:opacity-75 transition-opacity duration-300\" />\n                    <div className=\"relative bg-gradient-to-r from-cyan-600 to-blue-600 hover:from-cyan-500 hover:to-blue-500 text-white font-semibold py-3 px-6 rounded-lg flex items-center justify-center gap-2 transition-all duration-300 border border-cyan-400/50\">\n                      <motion.div\n                        initial={false}\n                        animate={{ \n                          rotate: isPlaying ? 0 : 0,\n                          scale: isPlaying ? 1 : 1\n                        }}\n                        transition={{ duration: 0.3 }}\n                      >\n                        {isPlaying ? (\n                          <Pause className=\"w-5 h-5\" />\n                        ) : (\n                          <Play className=\"w-5 h-5\" />\n                        )}\n                      </motion.div>\n                      <span className=\"text-sm tracking-wider\">\n                        {isPlaying ? 'PAUSE' : 'PLAY'}\n                      </span>\n                    </div>\n                  </motion.button>\n                  <motion.div whileTap={{ rotate: 360 }} transition={{ duration: 0.6, ease: \"easeInOut\" }}>\n                    <Button\n                      onClick={resetVisualization}\n                      variant=\"outline\"\n                      size=\"lg\"\n                      className=\"relative group bg-gradient-to-r from-pink-500/20 to-purple-500/20 border-2 border-pink-500/50 hover:border-pink-400 text-pink-300 hover:text-pink-200 shadow-lg shadow-pink-500/30 hover:shadow-pink-500/60 hover:shadow-2xl transition-all duration-300 overflow-hidden\"\n                    >\n                      <div className=\"absolute inset-0 bg-gradient-to-r from-pink-500/0 via-pink-500/30 to-pink-500/0 opacity-0 group-hover:opacity-100 transition-opacity duration-500\" />\n                      <motion.div\n                        className=\"relative z-10 flex items-center gap-2\"\n                        whileHover={{ scale: 1.05 }}\n                      >\n                        <RotateCcw className=\"w-5 h-5\" />\n                        <span className=\"font-semibold\">Reset</span>\n                      </motion.div>\n                      <div className=\"absolute inset-0 opacity-0 group-hover:opacity-100 transition-opacity duration-300\">\n                        <div className=\"absolute inset-0 bg-pink-500/10 blur-xl\" />\n                      </div>\n                    </Button>\n                  </motion.div>\n                </div>\n              </div>\n            </div>\n\n            \n            <motion.div\n              initial={{ opacity: 0, x: -50 }}\n              animate={{ opacity: 1, x: 0 }}\n              transition={{ delay: 0.2 }}\n              className=\"bg-gray-900/50 backdrop-blur-lg border border-purple-500/30 rounded-xl p-6 shadow-[0_0_30px_rgba(168,85,247,0.3)] hover:shadow-[0_0_50px_rgba(168,85,247,0.5)] transition-shadow duration-300\"\n            >\n              <div className=\"space-y-4\">\n                <div className=\"flex items-center gap-2 text-purple-400 mb-4\">\n                  <BarChart3 className=\"w-5 h-5\" />\n                  <h3 className=\"text-sm font-semibold uppercase tracking-wide\">Statistics</h3>\n                </div>\n\n                <div className=\"space-y-4\">\n                  {/* Comparisons Counter */}\n                  <motion.div\n                    className=\"relative p-4 rounded-lg bg-gradient-to-br from-cyan-500/10 to-cyan-500/5 border border-cyan-500/30 overflow-hidden group\"\n                    whileHover={{ scale: 1.02 }}\n                  >\n                    <div className=\"absolute inset-0 bg-gradient-to-r from-cyan-500/0 via-cyan-500/20 to-cyan-500/0 opacity-0 group-hover:opacity-100 transition-opacity duration-500\" />\n                    <div className=\"relative z-10\">\n                      <div className=\"text-xs text-cyan-400 font-medium mb-1 uppercase tracking-wider\">Comparisons</div>\n                      <motion.div\n                        className=\"text-3xl font-bold text-cyan-300\"\n                        key={comparisons}\n                        initial={{ scale: 1.2, color: '#00ffff' }}\n                        animate={{ scale: 1, color: '#67e8f9' }}\n                        transition={{ duration: 0.3 }}\n                      >\n                        {comparisons}\n                      </motion.div>\n                    </div>\n                    <motion.div\n                      className=\"absolute top-2 right-2 w-2 h-2 bg-cyan-400 rounded-full\"\n                      animate={{ scale: [1, 1.5, 1], opacity: [1, 0.3, 1] }}\n                      transition={{ duration: 2, repeat: Infinity }}\n                    />\n                  </motion.div>\n\n                  {/* Swaps Counter */}\n                  <motion.div\n                    className=\"relative p-4 rounded-lg bg-gradient-to-br from-pink-500/10 to-pink-500/5 border border-pink-500/30 overflow-hidden group\"\n                    whileHover={{ scale: 1.02 }}\n                  >\n                    <div className=\"absolute inset-0 bg-gradient-to-r from-pink-500/0 via-pink-500/20 to-pink-500/0 opacity-0 group-hover:opacity-100 transition-opacity duration-500\" />\n                    <div className=\"relative z-10\">\n                      <div className=\"text-xs text-pink-400 font-medium mb-1 uppercase tracking-wider\">Swaps</div>\n                      <motion.div\n                        className=\"text-3xl font-bold text-pink-300\"\n                        key={swaps}\n                        initial={{ scale: 1.2, color: '#ff0066' }}\n                        animate={{ scale: 1, color: '#f9a8d4' }}\n                        transition={{ duration: 0.3 }}\n                      >\n                        {swaps}\n                      </motion.div>\n                    </div>\n                    <motion.div\n                      className=\"absolute top-2 right-2 w-2 h-2 bg-pink-400 rounded-full\"\n                      animate={{ scale: [1, 1.5, 1], opacity: [1, 0.3, 1] }}\n                      transition={{ duration: 2, repeat: Infinity, delay: 0.5 }}\n                    />\n                  </motion.div>\n\n                  {/* Progress Bar */}\n                  <motion.div\n                    className=\"relative p-4 rounded-lg bg-gradient-to-br from-purple-500/10 to-purple-500/5 border border-purple-500/30 overflow-hidden\"\n                    whileHover={{ scale: 1.02 }}\n                  >\n                    <div className=\"relative z-10\">\n                      <div className=\"flex items-center justify-between mb-2\">\n                        <div className=\"text-xs text-purple-400 font-medium uppercase tracking-wider\">Progress</div>\n                        <div className=\"text-sm text-purple-300 font-bold\">\n                          {steps.length > 0 ? Math.round((currentStep / steps.length) * 100) : 0}%\n                        </div>\n                      </div>\n                      <div className=\"relative h-3 bg-gray-800/50 rounded-full overflow-hidden border border-purple-500/20\">\n                        <motion.div\n                          className=\"absolute inset-y-0 left-0 bg-gradient-to-r from-purple-500 via-pink-500 to-cyan-500 rounded-full shadow-[0_0_15px_rgba(168,85,247,0.8)]\"\n                          initial={{ width: 0 }}\n                          animate={{\n                            width: steps.length > 0 ? `${(currentStep / steps.length) * 100}%` : '0%'\n                          }}\n                          transition={{ duration: 0.3 }}\n                        />\n                        <motion.div\n                          className=\"absolute inset-0 bg-gradient-to-r from-transparent via-white/30 to-transparent\"\n                          animate={{ x: ['-100%', '200%'] }}\n                          transition={{ duration: 2, repeat: Infinity, ease: 'linear' }}\n                        />\n                      </div>\n                      <div className=\"flex items-center justify-between mt-2\">\n                        <div className=\"text-xs text-gray-400\">Step {currentStep}</div>\n                        <div className=\"text-xs text-gray-400\">of {steps.length}</div>\n                      </div>\n                    </div>\n                  </motion.div>\n\n                  {/* Array Size Info */}\n                  <motion.div\n                    className=\"relative p-4 rounded-lg bg-gradient-to-br from-green-500/10 to-green-500/5 border border-green-500/30 overflow-hidden group\"\n                    whileHover={{ scale: 1.02 }}\n                  >\n                    <div className=\"absolute inset-0 bg-gradient-to-r from-green-500/0 via-green-500/20 to-green-500/0 opacity-0 group-hover:opacity-100 transition-opacity duration-500\" />\n                    <div className=\"relative z-10\">\n                      <div className=\"text-xs text-green-400 font-medium mb-1 uppercase tracking-wider\">Array Size</div>\n                      <div className=\"text-3xl font-bold text-green-300\">\n                        {array.length}\n                      </div>\n                    </div>\n                    <motion.div\n                      className=\"absolute top-2 right-2 w-2 h-2 bg-green-400 rounded-full\"\n                      animate={{ scale: [1, 1.5, 1], opacity: [1, 0.3, 1] }}\n                      transition={{ duration: 2, repeat: Infinity, delay: 1 }}\n                    />\n                  </motion.div>\n\n                  {/* Status Indicator */}\n                  <motion.div\n                    className=\"relative p-4 rounded-lg bg-gradient-to-br from-yellow-500/10 to-yellow-500/5 border border-yellow-500/30 overflow-hidden\"\n                    animate={{\n                      borderColor: isPlaying\n                        ? ['rgba(234, 179, 8, 0.3)', 'rgba(234, 179, 8, 0.6)', 'rgba(234, 179, 8, 0.3)']\n                        : 'rgba(234, 179, 8, 0.3)'\n                    }}\n                    transition={{ duration: 2, repeat: Infinity }}\n                  >\n                    <div className=\"relative z-10 flex items-center justify-between\">\n                      <div className=\"text-xs text-yellow-400 font-medium uppercase tracking-wider\">Status</div>\n                      <div className=\"flex items-center gap-2\">\n                        <motion.div\n                          className={`w-2 h-2 rounded-full ${isPlaying ? 'bg-green-400' : 'bg-gray-500'}`}\n                          animate={isPlaying ? { scale: [1, 1.3, 1], opacity: [1, 0.5, 1] } : {}}\n                          transition={{ duration: 1, repeat: Infinity }}\n                        />\n                        <span className={`text-sm font-semibold ${isPlaying ? 'text-green-300' : 'text-gray-400'}`}>\n                          {isPlaying ? 'Running' : currentStep >= steps.length && steps.length > 0 ? 'Complete' : 'Idle'}\n                        </span>\n                      </div>\n                    </div>\n                  </motion.div>\n                </div>\n              </div>\n            </motion.div>\n          </div>\n\n          <div className=\"lg:col-span-3\">\n            <div className=\"bg-gray-900/50 backdrop-blur-lg border border-purple-500/30 rounded-xl p-8 shadow-2xl shadow-purple-500/20 min-h-[600px]\">\n                            {array.length === 0 ? (\n                <div className=\"absolute inset-0 flex items-center justify-center\">\n                  <motion.div\n                    initial={{ opacity: 0, scale: 0.8 }}\n                    animate={{ opacity: 1, scale: 1 }}\n                    className=\"text-center space-y-4\"\n                  >\n                    <motion.div\n                      animate={{\n                        rotate: [0, 360],\n                        scale: [1, 1.2, 1]\n                      }}\n                      transition={{ duration: 3, repeat: Infinity }}\n                      className=\"inline-block\"\n                    >\n                      <BarChart3 className=\"w-16 h-16 text-cyan-400\" />\n                    </motion.div>\n                    <p className=\"text-cyan-300 text-lg font-medium\">\n                      Generate an array to start visualizing\n                    </p>\n                  </motion.div>\n                </div>\n              ) : (\n                <div className=\"relative h-full w-full flex items-end justify-center gap-1 px-4\">\n                  {array.map((element, index) => {\n                    const maxValue = Math.max(...array.map(e => e.value));\n                    const heightPercentage = (element.value / maxValue) * 100;\n                    const isComparing = element.isComparing;\n                    const isSwapping = element.isSwapping;\n                    const isSorted = element.isSorted;\n                    \n                    let barColor = NEON_COLORS[index % NEON_COLORS.length];\n                    let glowColor = barColor;\n                    \n                    if (isSorted) {\n                      barColor = '#00ff00';\n                      glowColor = '#00ff00';\n                    } else if (isSwapping) {\n                      barColor = '#ff0066';\n                      glowColor = '#ff0066';\n                    } else if (isComparing) {\n                      barColor = '#ffff00';\n                      glowColor = '#ffff00';\n                    }\n\n                    return (\n                      <div key={element.id} className=\"relative flex-1 flex flex-col items-center justify-end\" style={{ maxWidth: '60px' }}>\n                        {/* Comparison Indicator */}\n                        {isComparing && (\n                          <motion.div\n                            initial={{ opacity: 0, y: -20 }}\n                            animate={{ \n                              opacity: [0, 1, 0],\n                              y: [-20, -40, -60],\n                              scale: [0.8, 1.2, 0.8]\n                            }}\n                            transition={{ duration: 0.8, repeat: Infinity }}\n                            className=\"absolute -top-16 left-1/2 -translate-x-1/2 z-20\"\n                          >\n                            <div className=\"w-8 h-8 rounded-full bg-yellow-400 flex items-center justify-center shadow-[0_0_20px_rgba(255,255,0,0.8)]\">\n                              <Zap className=\"w-4 h-4 text-gray-900\" />\n                            </div>\n                          </motion.div>\n                        )}\n\n                        {/* Swap Trail Effect */}\n                        {isSwapping && (\n                          <>\n                            <motion.div\n                              initial={{ opacity: 0, scale: 0.5 }}\n                              animate={{ \n                                opacity: [0, 0.8, 0],\n                                scale: [0.5, 2, 3],\n                              }}\n                              transition={{ duration: 0.6, repeat: Infinity }}\n                              className=\"absolute inset-0 rounded-lg blur-xl z-0\"\n                              style={{\n                                background: `radial-gradient(circle, ${glowColor}80 0%, transparent 70%)`,\n                              }}\n                            />\n                            <motion.div\n                              animate={{\n                                rotate: [0, 360],\n                              }}\n                              transition={{ duration: 1, repeat: Infinity, ease: \"linear\" }}\n                              className=\"absolute -top-12 left-1/2 -translate-x-1/2 z-20\"\n                            >\n                              <div className=\"relative\">\n                                <motion.div\n                                  animate={{\n                                    scale: [1, 1.3, 1],\n                                    opacity: [0.5, 1, 0.5]\n                                  }}\n                                  transition={{ duration: 0.5, repeat: Infinity }}\n                                  className=\"absolute inset-0 rounded-full blur-md\"\n                                  style={{ backgroundColor: glowColor }}\n                                />\n                                <RotateCcw className=\"w-6 h-6 relative z-10\" style={{ color: glowColor }} />\n                              </div>\n                            </motion.div>\n                          </>\n                        )}\n\n                        {/* Sorted Indicator */}\n                        {isSorted && (\n                          <motion.div\n                            initial={{ opacity: 0, scale: 0 }}\n                            animate={{ opacity: 1, scale: 1 }}\n                            transition={{ type: 'spring', stiffness: 500, damping: 15 }}\n                            className=\"absolute -top-10 left-1/2 -translate-x-1/2 z-20\"\n                          >\n                            <motion.div\n                              animate={{\n                                rotate: [0, 360],\n                              }}\n                              transition={{ duration: 2, repeat: Infinity, ease: \"linear\" }}\n                            >\n                              <div className=\"w-6 h-6 rounded-full bg-green-400 flex items-center justify-center shadow-[0_0_15px_rgba(0,255,0,0.8)]\">\n                                <div className=\"w-2 h-3 border-r-2 border-b-2 border-gray-900 rotate-45 -mt-1\" />\n                              </div>\n                            </motion.div>\n                          </motion.div>\n                        )}\n\n                        {/* Animated Bar */}\n                        <motion.div\n                          layout\n                          initial={{ height: 0, opacity: 0 }}\n                          animate={{ \n                            height: `${heightPercentage}%`,\n                            opacity: 1,\n                            scale: isSwapping ? [1, 1.1, 1] : 1,\n                          }}\n                          transition={{\n                            height: { duration: 0.5, ease: 'easeOut' },\n                            opacity: { duration: 0.3 },\n                            scale: { duration: 0.3, repeat: isSwapping ? Infinity : 0 }\n                          }}\n                          className=\"w-full rounded-t-lg relative overflow-hidden\"\n                          style={{\n                            backgroundColor: barColor,\n                            boxShadow: `0 0 20px ${glowColor}80, 0 0 40px ${glowColor}40, inset 0 0 20px ${glowColor}40`,\n                            minHeight: '20px'\n                          }}\n                        >\n                          {/* Inner glow effect */}\n                          <motion.div\n                            animate={{\n                              opacity: [0.3, 0.6, 0.3],\n                            }}\n                            transition={{ duration: 1.5, repeat: Infinity }}\n                            className=\"absolute inset-0 bg-gradient-to-t from-transparent via-white/30 to-transparent\"\n                          />\n                          \n                          {/* Shimmer effect */}\n                          <motion.div\n                            animate={{\n                              x: ['-100%', '200%'],\n                            }}\n                            transition={{ duration: 2, repeat: Infinity, ease: 'linear' }}\n                            className=\"absolute inset-0 w-1/3 bg-gradient-to-r from-transparent via-white/40 to-transparent skew-x-12\"\n                          />\n\n                          {/* Value label */}\n                          <div className=\"absolute inset-0 flex items-center justify-center\">\n                            <motion.span\n                              initial={{ scale: 0 }}\n                              animate={{ scale: 1 }}\n                              className=\"text-xs font-bold text-gray-900 drop-shadow-lg\"\n                            >\n                              {element.value}\n                            </motion.span>\n                          </div>\n                        </motion.div>\n\n                        {/* Base glow */}\n                        <motion.div\n                          animate={{\n                            opacity: isComparing || isSwapping ? [0.5, 1, 0.5] : 0.3,\n                          }}\n                          transition={{ duration: 0.5, repeat: Infinity }}\n                          className=\"absolute bottom-0 w-full h-2 blur-sm\"\n                          style={{\n                            backgroundColor: glowColor,\n                          }}\n                        />\n                      </div>\n                    );\n                  })}\n                </div>\n              )}</parameter>\n</invoke>\n                {array.map((element, index) => {\n                  const maxValue = Math.max(...array.map(el => el.value), 100);\n                  const heightPercentage = (element.value / maxValue) * 100;\n                  const colorIndex = index % NEON_COLORS.length;\n                  const neonColor = NEON_COLORS[colorIndex];\n                  \n                  return (\n                    <motion.div\n                      key={element.id}\n                      className=\"relative flex-1 min-w-[4px] max-w-[60px] rounded-t-lg\"\n                      initial={{ height: 0, opacity: 0 }}\n                      animate={{\n                        height: `${heightPercentage}%`,\n                        opacity: 1,\n                        backgroundColor: element.isSorted \n                          ? '#00ff00'\n                          : element.isSwapping\n                          ? '#ff0066'\n                          : element.isComparing\n                          ? '#ffff00'\n                          : neonColor,\n                        boxShadow: element.isSorted\n                          ? [\n                              `0 0 20px rgba(0, 255, 0, 0.8)`,\n                              `0 0 40px rgba(0, 255, 0, 0.6)`,\n                              `0 0 20px rgba(0, 255, 0, 0.8)`\n                            ]\n                          : element.isSwapping\n                          ? [\n                              `0 0 30px rgba(255, 0, 102, 1)`,\n                              `0 0 60px rgba(255, 0, 102, 0.8)`,\n                              `0 0 30px rgba(255, 0, 102, 1)`\n                            ]\n                          : element.isComparing\n                          ? [\n                              `0 0 25px rgba(255, 255, 0, 0.9)`,\n                              `0 0 50px rgba(255, 255, 0, 0.7)`,\n                              `0 0 25px rgba(255, 255, 0, 0.9)`\n                            ]\n                          : [\n                              `0 0 15px ${neonColor}80`,\n                              `0 0 30px ${neonColor}60`,\n                              `0 0 15px ${neonColor}80`\n                            ],\n                        scale: element.isSwapping ? [1, 1.1, 1] : element.isComparing ? 1.05 : 1\n                      }}\n                      transition={{\n                        height: { duration: 0.5, ease: 'easeInOut' },\n                        backgroundColor: { duration: 0.3 },\n                        boxShadow: { duration: 1.5, repeat: Infinity },\n                        scale: { duration: 0.3 }\n                      }}\n                      style={{\n                        background: element.isSorted\n                          ? 'linear-gradient(to top, #00ff00, #00ff88)'\n                          : element.isSwapping\n                          ? 'linear-gradient(to top, #ff0066, #ff66aa)'\n                          : element.isComparing\n                          ? 'linear-gradient(to top, #ffff00, #ffff88)'\n                          : `linear-gradient(to top, ${neonColor}, ${neonColor}dd)`,\n                        border: `2px solid ${element.isSorted ? '#00ff00' : element.isSwapping ? '#ff0066' : element.isComparing ? '#ffff00' : neonColor}`,\n                        position: 'relative',\n                        overflow: 'visible'\n                      }}\n                    >\n                      {/* Glow effect overlay */}\n                      <motion.div\n                        className=\"absolute inset-0 rounded-t-lg\"\n                        animate={{\n                          opacity: [0.3, 0.6, 0.3]\n                        }}\n                        transition={{\n                          duration: 2,\n                          repeat: Infinity,\n                          ease: 'easeInOut'\n                        }}\n                        style={{\n                          background: `radial-gradient(circle at 50% 0%, ${element.isSorted ? '#00ff00' : element.isSwapping ? '#ff0066' : element.isComparing ? '#ffff00' : neonColor}88, transparent 70%)`,\n                          pointerEvents: 'none'\n                        }}\n                      />\n                      \n                      {/* Value label */}\n                      <motion.div\n                        className=\"absolute -top-8 left-1/2 transform -translate-x-1/2 text-xs font-mono font-bold whitespace-nowrap\"\n                        initial={{ opacity: 0, y: 10 }}\n                        animate={{ \n                          opacity: element.isComparing || element.isSwapping ? 1 : 0.7,\n                          y: 0,\n                          scale: element.isComparing || element.isSwapping ? 1.2 : 1\n                        }}\n                        transition={{ duration: 0.3 }}\n                        style={{\n                          color: element.isSorted ? '#00ff00' : element.isSwapping ? '#ff0066' : element.isComparing ? '#ffff00' : neonColor,\n                          textShadow: `0 0 10px ${element.isSorted ? '#00ff00' : element.isSwapping ? '#ff0066' : element.isComparing ? '#ffff00' : neonColor}`,\n                          filter: 'drop-shadow(0 0 5px rgba(0,0,0,0.8))'\n                        }}\n                      >\n                        {element.value}\n                      </motion.div>\n\n                      {/* Particle effect for sorted elements */}\n                      {element.isSorted && (\n                        <>\n                          {[...Array(3)].map((_, i) => (\n                            <motion.div\n                              key={`particle-${i}`}\n                              className=\"absolute w-1 h-1 bg-green-400 rounded-full\"\n                              initial={{ \n                                x: 0, \n                                y: 0, \n                                opacity: 1,\n                                scale: 1\n                              }}\n                              animate={{\n                                x: [0, (Math.random() - 0.5) * 40],\n                                y: [0, -30 - Math.random() * 20],\n                                opacity: [1, 0],\n                                scale: [1, 0]\n                              }}\n                              transition={{\n                                duration: 1 + Math.random(),\n                                repeat: Infinity,\n                                delay: i * 0.3,\n                                ease: 'easeOut'\n                              }}\n                              style={{\n                                left: '50%',\n                                top: '0',\n                                boxShadow: '0 0 8px rgba(0, 255, 0, 0.8)'\n                              }}\n                            />\n                          ))}\n                        </>\n                      )}\n                    </motion.div>\n                  );\n                })\n              </div>\n\n                            {array.length > 0 && (\n                <div className=\"absolute inset-0 pointer-events-none\">\n                  {array.map((element, index) => {\n                    const isComparing = steps[currentStep]?.comparingIndices.includes(index);\n                    \n                    if (!isComparing) return null;\n\n                    const barWidth = Math.max(100 / array.length - 2, 8);\n                    const leftPosition = (index * (100 / array.length)) + (barWidth / 2);\n\n                    return (\n                      <motion.div\n                        key={`comparison-${element.id}-${index}`}\n                        initial={{ opacity: 0, y: 20, scale: 0.5 }}\n                        animate={{ \n                          opacity: [0, 1, 1, 0],\n                          y: [20, -40, -40, -60],\n                          scale: [0.5, 1.2, 1.2, 0.8]\n                        }}\n                        transition={{ \n                          duration: 0.8,\n                          times: [0, 0.3, 0.7, 1],\n                          repeat: Infinity,\n                          repeatDelay: 0.2\n                        }}\n                        className=\"absolute bottom-0\"\n                        style={{\n                          left: `${leftPosition}%`,\n                          transform: 'translateX(-50%)'\n                        }}\n                      >\n                        <motion.div\n                          className=\"relative\"\n                          animate={{\n                            rotate: [0, 10, -10, 0]\n                          }}\n                          transition={{\n                            duration: 0.6,\n                            repeat: Infinity\n                          }}\n                        >\n                          <div className=\"w-8 h-8 rounded-full bg-gradient-to-br from-cyan-400 to-blue-500 flex items-center justify-center shadow-[0_0_30px_rgba(34,211,238,0.8)]\">\n                            <Zap className=\"w-4 h-4 text-white\" />\n                          </div>\n                          <motion.div\n                            className=\"absolute inset-0 rounded-full bg-cyan-400\"\n                            animate={{\n                              scale: [1, 1.8, 1.8],\n                              opacity: [0.6, 0, 0]\n                            }}\n                            transition={{\n                              duration: 1.5,\n                              repeat: Infinity\n                            }}\n                          />\n                        </motion.div>\n                        \n                        <motion.div\n                          className=\"absolute top-full mt-2 left-1/2 -translate-x-1/2 whitespace-nowrap\"\n                          animate={{\n                            opacity: [0.7, 1, 0.7]\n                          }}\n                          transition={{\n                            duration: 1,\n                            repeat: Infinity\n                          }}\n                        >\n                          <div className=\"bg-cyan-500/90 backdrop-blur-sm px-3 py-1 rounded-full border border-cyan-300 shadow-lg shadow-cyan-500/50\">\n                            <span className=\"text-xs font-bold text-white\">\n                              {element.value}\n                            </span>\n                          </div>\n                        </motion.div>\n\n                        <motion.div\n                          className=\"absolute top-1/2 left-1/2 w-1 bg-gradient-to-b from-cyan-400 to-transparent\"\n                          style={{\n                            height: '200px',\n                            transform: 'translateX(-50%)'\n                          }}\n                          animate={{\n                            opacity: [0, 0.6, 0],\n                            scaleY: [0, 1, 1]\n                          }}\n                          transition={{\n                            duration: 0.8,\n                            repeat: Infinity\n                          }}\n                        />\n                      </motion.div>\n                    );\n                  })}\n\n                  {steps[currentStep]?.comparingIndices.length === 2 && (\n                    <motion.div\n                      key={`comparison-line-${currentStep}`}\n                      initial={{ opacity: 0, scaleX: 0 }}\n                      animate={{ \n                        opacity: [0, 0.8, 0.8, 0],\n                        scaleX: [0, 1, 1, 0.8]\n                      }}\n                      transition={{ \n                        duration: 1,\n                        repeat: Infinity\n                      }}\n                      className=\"absolute\"\n                      style={{\n                        left: `${(steps[currentStep].comparingIndices[0] * (100 / array.length)) + (Math.max(100 / array.length - 2, 8) / 2)}%`,\n                        width: `${Math.abs(steps[currentStep].comparingIndices[1] - steps[currentStep].comparingIndices[0]) * (100 / array.length)}%`,\n                        top: '30%',\n                        height: '2px',\n                        background: 'linear-gradient(90deg, rgba(34,211,238,0) 0%, rgba(34,211,238,1) 50%, rgba(34,211,238,0) 100%)',\n                        boxShadow: '0 0 20px rgba(34,211,238,0.8)',\n                        transformOrigin: 'left center'\n                      }}\n                    >\n                      <motion.div\n                        className=\"absolute inset-0\"\n                        animate={{\n                          x: ['-100%', '200%']\n                        }}\n                        transition={{\n                          duration: 1.5,\n                          repeat: Infinity,\n                          ease: 'linear'\n                        }}\n                      >\n                        <div className=\"w-20 h-full bg-gradient-to-r from-transparent via-white to-transparent opacity-60\" />\n                      </motion.div>\n                    </motion.div>\n                  )}\n                </div>\n              )}\n              \n                            {steps.length > 0 && currentStep > 0 && steps[currentStep - 1]?.swappingIndices.length === 2 && (\n                <>\n                  {steps[currentStep - 1].swappingIndices.map((swapIndex, idx) => {\n                    const element = array[swapIndex];\n                    if (!element) return null;\n                    \n                    const maxValue = Math.max(...array.map(el => el.value), 100);\n                    const heightPercentage = (element.value / maxValue) * 100;\n                    const totalElements = array.length;\n                    const elementWidth = 100 / totalElements;\n                    const leftPosition = (swapIndex / totalElements) * 100;\n                    const colorIndex = swapIndex % NEON_COLORS.length;\n                    const neonColor = NEON_COLORS[colorIndex];\n                    \n                    return (\n                      <motion.div\n                        key={`swap-trail-${swapIndex}-${currentStep}`}\n                        className=\"absolute bottom-0 rounded-t-lg pointer-events-none\"\n                        style={{\n                          left: `${leftPosition}%`,\n                          width: `${elementWidth}%`,\n                          height: `${heightPercentage}%`,\n                          backgroundColor: neonColor,\n                          boxShadow: `0 0 30px ${neonColor}, 0 0 60px ${neonColor}`,\n                          filter: 'blur(4px)',\n                        }}\n                        initial={{ opacity: 0.8, scale: 1 }}\n                        animate={{ \n                          opacity: 0,\n                          scale: 1.2,\n                          filter: 'blur(12px)'\n                        }}\n                        transition={{ \n                          duration: 0.6,\n                          ease: \"easeOut\"\n                        }}\n                      />\n                    );\n                  })}\n                  \n                  <motion.div\n                    key={`swap-connection-${currentStep}`}\n                    className=\"absolute pointer-events-none\"\n                    style={{\n                      left: `${(Math.min(...steps[currentStep - 1].swappingIndices) / array.length) * 100}%`,\n                      width: `${(Math.abs(steps[currentStep - 1].swappingIndices[1] - steps[currentStep - 1].swappingIndices[0]) / array.length) * 100}%`,\n                      top: '50%',\n                      height: '4px',\n                      background: `linear-gradient(90deg, \n                        ${NEON_COLORS[steps[currentStep - 1].swappingIndices[0] % NEON_COLORS.length]}, \n                        ${NEON_COLORS[steps[currentStep - 1].swappingIndices[1] % NEON_COLORS.length]})`,\n                      boxShadow: `0 0 20px ${NEON_COLORS[steps[currentStep - 1].swappingIndices[0] % NEON_COLORS.length]}`,\n                      filter: 'blur(2px)',\n                    }}\n                    initial={{ opacity: 0.9, scaleX: 0 }}\n                    animate={{ \n                      opacity: 0,\n                      scaleX: 1,\n                      filter: 'blur(8px)'\n                    }}\n                    transition={{ \n                      duration: 0.5,\n                      ease: \"easeInOut\"\n                    }}\n                  />\n                </>\n              )}\n            </div>\n          </div>\n        </div>\n\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ delay: 0.4, duration: 0.8 }}\n          className=\"bg-gray-900/50 backdrop-blur-lg border border-cyan-500/30 rounded-xl p-6 shadow-2xl shadow-cyan-500/10\"\n        >\n          <div className=\"flex items-center gap-2 mb-4\">\n            <BarChart3 className=\"w-5 h-5 text-cyan-400\" />\n            <h3 className=\"text-lg font-semibold text-cyan-300 uppercase tracking-wider\">Legend</h3>\n          </div>\n          \n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n            <motion.div\n              className=\"flex items-center gap-3 p-3 bg-gray-800/50 rounded-lg border border-gray-700/50 hover:border-cyan-500/50 transition-all duration-300\"\n              whileHover={{ scale: 1.05, boxShadow: '0 0 20px rgba(0, 255, 255, 0.3)' }}\n            >\n              <motion.div\n                className=\"w-6 h-12 rounded bg-gradient-to-t from-cyan-500 to-cyan-400\"\n                animate={{\n                  boxShadow: [\n                    '0 0 15px rgba(0, 255, 255, 0.8)',\n                    '0 0 30px rgba(0, 255, 255, 0.6)',\n                    '0 0 15px rgba(0, 255, 255, 0.8)'\n                  ]\n                }}\n                transition={{ duration: 2, repeat: Infinity }}\n              />\n              <div>\n                <div className=\"text-sm font-semibold text-white\">Unsorted</div>\n                <div className=\"text-xs text-gray-400\">Default state</div>\n              </div>\n            </motion.div>\n\n            <motion.div\n              className=\"flex items-center gap-3 p-3 bg-gray-800/50 rounded-lg border border-gray-700/50 hover:border-yellow-500/50 transition-all duration-300\"\n              whileHover={{ scale: 1.05, boxShadow: '0 0 20px rgba(255, 255, 0, 0.3)' }}\n            >\n              <motion.div\n                className=\"w-6 h-12 rounded bg-gradient-to-t from-yellow-500 to-yellow-400\"\n                animate={{\n                  boxShadow: [\n                    '0 0 25px rgba(255, 255, 0, 0.9)',\n                    '0 0 50px rgba(255, 255, 0, 0.7)',\n                    '0 0 25px rgba(255, 255, 0, 0.9)'\n                  ],\n                  scale: [1, 1.05, 1]\n                }}\n                transition={{ duration: 1.5, repeat: Infinity }}\n              />\n              <div>\n                <div className=\"text-sm font-semibold text-white\">Comparing</div>\n                <div className=\"text-xs text-gray-400\">Being compared</div>\n              </div>\n            </motion.div>\n\n            <motion.div\n              className=\"flex items-center gap-3 p-3 bg-gray-800/50 rounded-lg border border-gray-700/50 hover:border-pink-500/50 transition-all duration-300\"\n              whileHover={{ scale: 1.05, boxShadow: '0 0 20px rgba(255, 0, 102, 0.3)' }}\n            >\n              <motion.div\n                className=\"w-6 h-12 rounded bg-gradient-to-t from-pink-600 to-pink-500\"\n                animate={{\n                  boxShadow: [\n                    '0 0 30px rgba(255, 0, 102, 1)',\n                    '0 0 60px rgba(255, 0, 102, 0.8)',\n                    '0 0 30px rgba(255, 0, 102, 1)'\n                  ],\n                  scale: [1, 1.1, 1]\n                }}\n                transition={{ duration: 1, repeat: Infinity }}\n              />\n              <div>\n                <div className=\"text-sm font-semibold text-white\">Swapping</div>\n                <div className=\"text-xs text-gray-400\">Being swapped</div>\n              </div>\n            </motion.div>\n\n            <motion.div\n              className=\"flex items-center gap-3 p-3 bg-gray-800/50 rounded-lg border border-gray-700/50 hover:border-green-500/50 transition-all duration-300\"\n              whileHover={{ scale: 1.05, boxShadow: '0 0 20px rgba(0, 255, 0, 0.3)' }}\n            >\n              <motion.div\n                className=\"w-6 h-12 rounded bg-gradient-to-t from-green-500 to-green-400\"\n                animate={{\n                  boxShadow: [\n                    '0 0 20px rgba(0, 255, 0, 0.8)',\n                    '0 0 40px rgba(0, 255, 0, 0.6)',\n                    '0 0 20px rgba(0, 255, 0, 0.8)'\n                  ]\n                }}\n                transition={{ duration: 2, repeat: Infinity }}\n              />\n              <div>\n                <div className=\"text-sm font-semibold text-white\">Sorted</div>\n                <div className=\"text-xs text-gray-400\">In final position</div>\n              </div>\n            </motion.div>\n          </div>\n\n          <motion.div\n            className=\"mt-4 p-4 bg-gradient-to-r from-purple-500/10 to-pink-500/10 rounded-lg border border-purple-500/30\"\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            transition={{ delay: 0.6 }}\n          >\n            <div className=\"flex items-start gap-3\">\n              <motion.div\n                animate={{ rotate: 360 }}\n                transition={{ duration: 3, repeat: Infinity, ease: \"linear\" }}\n              >\n                <Zap className=\"w-5 h-5 text-purple-400 flex-shrink-0 mt-0.5\" />\n              </motion.div>\n              <div>\n                <div className=\"text-sm font-semibold text-purple-300 mb-1\">Pro Tip</div>\n                <div className=\"text-xs text-gray-400 leading-relaxed\">\n                  Watch the neon glow intensify during comparisons and swaps. Each algorithm has unique patterns - try them all!\n                </div>\n              </div>\n            </div>\n          </motion.div>\n        </motion.div>\n      </div>\n    </div>\n  );\n}",
    "error": null,
    "elapsed_time": 129.41721773147583,
    "success": true
  }
}