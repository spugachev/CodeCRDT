{
  "prompt_id": "markdown_editor",
  "prompt_name": "Premium Markdown Editor",
  "mode": "parallel",
  "run_number": 2,
  "timestamp": "2025-10-13T21:49:02.571930",
  "response_time": 84.32756185531616,
  "total_tokens": null,
  "response_content": "import { useState, useCallback } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Bold, Italic, Code, List, ListOrdered, Link, Image, Eye, EyeOff } from 'lucide-react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { useMemo } from 'react';\n\ninterface ToolbarButton {\n  id: string;\n  icon: any;\n  label: string;\n  action: string;\n}\n\nconst toolbarButtons: ToolbarButton[] = [\n  { id: 'bold', icon: Bold, label: 'Bold', action: '**text**' },\n  { id: 'italic', icon: Italic, label: 'Italic', action: '*text*' },\n  { id: 'code', icon: Code, label: 'Code', action: '`code`' },\n  { id: 'list', icon: List, label: 'Bullet List', action: '- item' },\n  { id: 'ordered', icon: ListOrdered, label: 'Numbered List', action: '1. item' },\n  { id: 'link', icon: Link, label: 'Link', action: '[text](url)' },\n  { id: 'image', icon: Image, label: 'Image', action: '![alt](url)' }\n];\n\n// Markdown parser utility\nconst parseMarkdown = (markdown: string): string => {\n  let html = markdown;\n\n  // Code blocks with syntax highlighting\n  html = html.replace(/```(\\w+)?\\n([\\s\\S]*?)```/g, (match, lang, code) => {\n    const language = lang || 'plaintext';\n    const highlightedCode = highlightCode(code.trim(), language);\n    return `<pre class=\"code-block\"><div class=\"code-header\"><span class=\"code-lang\">${language}</span></div><code class=\"language-${language}\">${highlightedCode}</code></pre>`;\n  });\n\n  // Inline code\n  html = html.replace(/`([^`]+)`/g, '<code class=\"inline-code\">$1</code>');\n\n  // Headers\n  html = html.replace(/^### (.*$)/gim, '<h3>$1</h3>');\n  html = html.replace(/^## (.*$)/gim, '<h2>$1</h2>');\n  html = html.replace(/^# (.*$)/gim, '<h1>$1</h1>');\n\n  // Bold\n  html = html.replace(/\\*\\*(.+?)\\*\\*/g, '<strong>$1</strong>');\n\n  // Italic\n  html = html.replace(/\\*(.+?)\\*/g, '<em>$1</em>');\n\n  // Links\n  html = html.replace(/\\[([^\\]]+)\\]\\(([^)]+)\\)/g, '<a href=\"$2\" target=\"_blank\" rel=\"noopener noreferrer\">$1</a>');\n\n  // Images\n  html = html.replace(/!\\[([^\\]]*)\\]\\(([^)]+)\\)/g, '<img src=\"$2\" alt=\"$1\" />');\n\n  // Blockquotes\n  html = html.replace(/^> (.+)/gim, '<blockquote>$1</blockquote>');\n\n  // Horizontal rules\n  html = html.replace(/^---$/gim, '<hr />');\n\n  // Unordered lists\n  html = html.replace(/^\\- (.+)/gim, '<li class=\"unordered\">$1</li>');\n\n  // Ordered lists\n  html = html.replace(/^\\d+\\. (.+)/gim, '<li class=\"ordered\">$1</li>');\n\n  // Wrap list items\n  html = html.replace(/(<li class=\"unordered\">.*<\\/li>)/s, '<ul>$1</ul>');\n  html = html.replace(/(<li class=\"ordered\">.*<\\/li>)/s, '<ol>$1</ol>');\n\n  // Paragraphs\n  html = html.split('\\n\\n').map(para => {\n    if (para.match(/^<(h[1-6]|ul|ol|pre|blockquote|hr)/)) {\n      return para;\n    }\n    return para.trim() ? `<p>${para}</p>` : '';\n  }).join('\\n');\n\n  return html;\n};\n\n// Syntax highlighter for code blocks\nconst highlightCode = (code: string, language: string): string => {\n  const escapeHtml = (str: string) => \n    str.replace(/&/g, '&amp;')\n       .replace(/</g, '&lt;')\n       .replace(/>/g, '&gt;')\n       .replace(/\"/g, '&quot;')\n       .replace(/'/g, '&#039;');\n\n  let highlighted = escapeHtml(code);\n\n  if (language === 'javascript' || language === 'typescript') {\n    // Keywords\n    highlighted = highlighted.replace(/\\b(function|const|let|var|return|if|else|for|while|class|import|export|from|default|async|await|try|catch|throw|new)\\b/g, '<span class=\"keyword\">$1</span>');\n    // Strings\n    highlighted = highlighted.replace(/(['\"`])(.*?)\\1/g, '<span class=\"string\">$1$2$1</span>');\n    // Functions\n    highlighted = highlighted.replace(/\\b([a-zA-Z_$][a-zA-Z0-9_$]*)\\s*\\(/g, '<span class=\"function\">$1</span>(');\n    // Comments\n    highlighted = highlighted.replace(/(\\/\\/.*$)/gm, '<span class=\"comment\">$1</span>');\n  } else if (language === 'python') {\n    // Keywords\n    highlighted = highlighted.replace(/\\b(def|return|if|else|elif|for|while|class|import|from|as|try|except|raise|with|lambda|pass|break|continue)\\b/g, '<span class=\"keyword\">$1</span>');\n    // Strings\n    highlighted = highlighted.replace(/(['\"])(.*?)\\1/g, '<span class=\"string\">$1$2$1</span>');\n    // Functions\n    highlighted = highlighted.replace(/\\b([a-zA-Z_][a-zA-Z0-9_]*)\\s*\\(/g, '<span class=\"function\">$1</span>(');\n    // Comments\n    highlighted = highlighted.replace(/(#.*$)/gm, '<span class=\"comment\">$1</span>');\n  }\n\n  // Numbers\n  highlighted = highlighted.replace(/\\b(\\d+)\\b/g, '<span class=\"number\">$1</span>');\n\n  return highlighted;\n};\n\nconst mockMarkdownContent = `# Welcome to Premium Markdown Editor\n\n## Features\n\nThis is a **bold** statement and this is *italic* text.\n\n### Code Blocks\n\n\\`\\`\\`javascript\nfunction greet(name) {\n  console.log(\\`Hello, \\${name}!\\`);\n  return true;\n}\n\\`\\`\\`\n\n\\`\\`\\`python\ndef calculate(x, y):\n    result = x + y\n    return result\n\\`\\`\\`\n\n### Lists\n\n- First item\n- Second item\n- Third item\n\n1. Numbered one\n2. Numbered two\n3. Numbered three\n\n### Inline Code\n\nUse \\`const variable = 'value'\\` for inline code.\n\n### Links and Images\n\n[Visit Example](https://example.com)\n\n> This is a blockquote with important information.\n\n---\n\n**End of document**\n`;\n\n// MarkdownPreview Component\nfunction MarkdownPreview({ markdown }: { markdown: string }) {\n  const htmlContent = useMemo(() => parseMarkdown(markdown), [markdown]);\n\n  return (\n    <div \n      className=\"markdown-preview prose prose-invert max-w-none\"\n      dangerouslySetInnerHTML={{ __html: htmlContent }}\n      style={{\n        '--tw-prose-body': '#e6edf3',\n        '--tw-prose-headings': '#ffffff',\n        '--tw-prose-links': '#58a6ff',\n        '--tw-prose-bold': '#ffffff',\n        '--tw-prose-code': '#ff7b72',\n        '--tw-prose-quotes': '#8b949e',\n      } as React.CSSProperties}\n    />\n  );\n}\n\nexport default function MarkdownEditor() {\n  const [markdown, setMarkdown] = useState(mockMarkdownContent);\n  const [showPreview, setShowPreview] = useState(true);\n  const [cursorPosition, setCursorPosition] = useState(0);\n\n  const handleMarkdownChange = useCallback((e: React.ChangeEvent<HTMLTextAreaElement>) => {\n    setMarkdown(e.target.value);\n    setCursorPosition(e.target.selectionStart);\n  }, []);\n\n  const togglePreview = useCallback(() => {\n    setShowPreview(prev => !prev);\n  }, []);\n  // Calculate stats\n  const wordCount = markdown.trim() ? markdown.trim().split(/\\s+/).length : 0;\n  const charCount = markdown.length;\n  const readingTime = Math.ceil(wordCount / 200); // Average reading speed: 200 words per minute\n\n  const handleToolbarAction = useCallback((action: string) => {\n    const textareaRef = document.querySelector('textarea') as HTMLTextAreaElement;\n    if (!textareaRef) return;\n\n    const start = cursorPosition;\n    const end = cursorPosition;\n    const before = markdown.substring(0, start);\n    const after = markdown.substring(end);\n    \n    // Insert the markdown syntax at cursor position\n    const newMarkdown = before + action + after;\n    setMarkdown(newMarkdown);\n    \n    // Calculate new cursor position (after the inserted text)\n    const newCursorPos = start + action.length;\n    \n    // Update cursor position and focus textarea\n    setTimeout(() => {\n      textareaRef.focus();\n      textareaRef.setSelectionRange(newCursorPos, newCursorPos);\n      setCursorPosition(newCursorPos);\n    }, 0);\n  }, [markdown, cursorPosition]);\n\n  // Add global styles for markdown preview\n  const previewStyles = `\n    .markdown-preview h1 {\n      font-size: 2em;\n      font-weight: 700;\n      margin-top: 1.5em;\n      margin-bottom: 0.5em;\n      padding-bottom: 0.3em;\n      border-bottom: 1px solid #30363d;\n      color: #ffffff;\n    }\n    .markdown-preview h2 {\n      font-size: 1.5em;\n      font-weight: 600;\n      margin-top: 1.5em;\n      margin-bottom: 0.5em;\n      padding-bottom: 0.3em;\n      border-bottom: 1px solid #30363d;\n      color: #ffffff;\n    }\n    .markdown-preview h3 {\n      font-size: 1.25em;\n      font-weight: 600;\n      margin-top: 1.5em;\n      margin-bottom: 0.5em;\n      color: #ffffff;\n    }\n    .markdown-preview p {\n      margin-top: 0;\n      margin-bottom: 1em;\n      line-height: 1.7;\n      color: #e6edf3;\n    }\n    .markdown-preview strong {\n      font-weight: 600;\n      color: #ffffff;\n    }\n    .markdown-preview em {\n      font-style: italic;\n      color: #e6edf3;\n    }\n    .markdown-preview a {\n      color: #58a6ff;\n      text-decoration: none;\n      transition: color 0.2s;\n    }\n    .markdown-preview a:hover {\n      color: #79c0ff;\n      text-decoration: underline;\n    }\n    .markdown-preview code.inline-code {\n      background: #161b22;\n      color: #ff7b72;\n      padding: 0.2em 0.4em;\n      border-radius: 6px;\n      font-size: 0.85em;\n      font-family: ui-monospace, SFMono-Regular, 'SF Mono', Menlo, Consolas, 'Liberation Mono', monospace;\n      border: 1px solid #30363d;\n    }\n    .markdown-preview pre.code-block {\n      background: #161b22;\n      border: 1px solid #30363d;\n      border-radius: 6px;\n      padding: 0;\n      margin: 1em 0;\n      overflow-x: auto;\n    }\n    .markdown-preview .code-header {\n      background: #0d1117;\n      border-bottom: 1px solid #30363d;\n      padding: 0.5em 1em;\n      font-size: 0.75em;\n      color: #8b949e;\n      font-weight: 600;\n      text-transform: uppercase;\n    }\n    .markdown-preview .code-lang {\n      color: #58a6ff;\n    }\n    .markdown-preview pre.code-block code {\n      display: block;\n      padding: 1em;\n      font-size: 0.875em;\n      line-height: 1.6;\n      font-family: ui-monospace, SFMono-Regular, 'SF Mono', Menlo, Consolas, 'Liberation Mono', monospace;\n      color: #e6edf3;\n    }\n    .markdown-preview .keyword {\n      color: #ff7b72;\n      font-weight: 600;\n    }\n    .markdown-preview .string {\n      color: #a5d6ff;\n    }\n    .markdown-preview .function {\n      color: #d2a8ff;\n      font-weight: 500;\n    }\n    .markdown-preview .comment {\n      color: #8b949e;\n      font-style: italic;\n    }\n    .markdown-preview .number {\n      color: #79c0ff;\n    }\n    .markdown-preview ul, .markdown-preview ol {\n      margin: 1em 0;\n      padding-left: 2em;\n    }\n    .markdown-preview li {\n      margin: 0.25em 0;\n      line-height: 1.7;\n      color: #e6edf3;\n    }\n    .markdown-preview ul li {\n      list-style-type: disc;\n    }\n    .markdown-preview ol li {\n      list-style-type: decimal;\n    }\n    .markdown-preview blockquote {\n      border-left: 4px solid #58a6ff;\n      padding-left: 1em;\n      margin: 1em 0;\n      color: #8b949e;\n      font-style: italic;\n    }\n    .markdown-preview hr {\n      border: none;\n      border-top: 1px solid #30363d;\n      margin: 2em 0;\n    }\n    .markdown-preview img {\n      max-width: 100%;\n      height: auto;\n      border-radius: 6px;\n      margin: 1em 0;\n    }\n  `;\n\n  return (\n    <div className=\"min-h-screen bg-[#0d1117] text-gray-100\">\n      <div className=\"container mx-auto px-4 py-6\">\n        <style dangerouslySetInnerHTML={{ __html: previewStyles }} />\n        {/* Header */}\n        <div className=\"mb-6 flex items-center justify-between\">\n          <h1 className=\"text-3xl font-bold bg-gradient-to-r from-blue-400 to-purple-500 bg-clip-text text-transparent\">\n            Premium Markdown Editor\n          </h1>\n          <Button\n            onClick={togglePreview}\n            variant=\"outline\"\n            className=\"bg-[#161b22] border-[#30363d] hover:bg-[#1f2937] text-gray-300\"\n          >\n            {showPreview ? <EyeOff className=\"w-4 h-4 mr-2\" /> : <Eye className=\"w-4 h-4 mr-2\" />}\n            {showPreview ? 'Hide Preview' : 'Show Preview'}\n          </Button>\n        </div>\n\n        {/* Floating Toolbar */}\n        <motion.div\n          initial={{ opacity: 0, y: -20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.5 }}\n          className=\"mb-6 bg-[#161b22] border border-[#30363d] rounded-lg p-3 shadow-xl\"\n        >\n          <div className=\"flex flex-wrap gap-2 justify-center\">\n            {toolbarButtons.map((button, index) => (\n              <motion.div\n                key={button.id}\n                initial={{ opacity: 0, scale: 0.8 }}\n                animate={{ opacity: 1, scale: 1 }}\n                transition={{ delay: index * 0.05, duration: 0.3 }}\n                whileHover={{ scale: 1.1, y: -2 }}\n                whileTap={{ scale: 0.95 }}\n              >\n                <Button\n                  onClick={() => handleToolbarAction(button.action)}\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  className=\"bg-[#0d1117] border border-[#30363d] hover:bg-gradient-to-r hover:from-blue-500/20 hover:to-purple-500/20 hover:border-blue-400/50 text-gray-300 hover:text-white transition-all duration-300 group relative\"\n                  title={button.label}\n                >\n                  <button.icon className=\"w-4 h-4 group-hover:text-blue-400 transition-colors duration-300\" />\n                  <span className=\"absolute -bottom-8 left-1/2 transform -translate-x-1/2 bg-[#1f2937] text-xs px-2 py-1 rounded opacity-0 group-hover:opacity-100 transition-opacity duration-300 whitespace-nowrap pointer-events-none z-10\">\n                    {button.label}\n                  </span>\n                </Button>\n              </motion.div>\n            ))}\n          </div>\n        </motion.div>\n\n        {/* Editor Layout */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n          {/* Editor Panel */}\n          <motion.div\n            layout\n            className=\"relative\"\n          >\n            <div className=\"bg-[#0d1117] border border-[#30363d] rounded-lg overflow-hidden shadow-2xl\">\n              <div className=\"bg-[#161b22] px-4 py-3 border-b border-[#30363d] flex items-center justify-between\">\n                <span className=\"text-sm font-medium text-gray-400\">Editor</span>\n                <div className=\"flex gap-2\">\n                  <div className=\"w-3 h-3 rounded-full bg-red-500\"></div>\n                  <div className=\"w-3 h-3 rounded-full bg-yellow-500\"></div>\n                  <div className=\"w-3 h-3 rounded-full bg-green-500\"></div>\n                </div>\n              </div>\n              <textarea\n                value={markdown}\n                onChange={handleMarkdownChange}\n                className=\"w-full h-[600px] bg-[#0d1117] text-gray-100 p-6 font-mono text-sm resize-none focus:outline-none\"\n                placeholder=\"Start writing your markdown...\"\n                spellCheck={false}\n              />\n            </div>\n          </motion.div>\n\n          {/* Preview Panel */}\n          <AnimatePresence mode=\"wait\">\n            {showPreview && (\n              <motion.div\n                initial={{ opacity: 0, x: 20 }}\n                animate={{ opacity: 1, x: 0 }}\n                exit={{ opacity: 0, x: 20 }}\n                transition={{ duration: 0.3 }}\n                className=\"relative\"\n              >\n                <div className=\"bg-[#0d1117] border border-[#30363d] rounded-lg overflow-hidden shadow-2xl\">\n                  <div className=\"bg-[#161b22] px-4 py-3 border-b border-[#30363d]\">\n                    <span className=\"text-sm font-medium text-gray-400\">Preview</span>\n                  </div>\n                  <div className=\"p-6 h-[600px] overflow-y-auto\">\n                    <MarkdownPreview markdown={markdown} />\n                  </div>\n                </div>\n              </motion.div>\n            )}\n          </AnimatePresence>\n        </div>\n\n        {/* Stats Bar */}\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.5, delay: 0.2 }}\n          className=\"mt-6 bg-[#161b22] border border-[#30363d] rounded-lg p-4\"\n        >\n          <div className=\"flex items-center justify-center gap-8 text-sm\">\n            <div className=\"flex items-center gap-2\">\n              <span className=\"text-gray-400\">Words:</span>\n              <span className=\"font-semibold text-blue-400\">{wordCount}</span>\n            </div>\n            <div className=\"w-px h-4 bg-[#30363d]\"></div>\n            <div className=\"flex items-center gap-2\">\n              <span className=\"text-gray-400\">Characters:</span>\n              <span className=\"font-semibold text-purple-400\">{charCount}</span>\n            </div>\n            <div className=\"w-px h-4 bg-[#30363d]\"></div>\n            <div className=\"flex items-center gap-2\">\n              <span className=\"text-gray-400\">Reading Time:</span>\n              <span className=\"font-semibold text-green-400\">\n                {readingTime} {readingTime === 1 ? 'min' : 'mins'}\n              </span>\n            </div>\n          </div>\n        </motion.div>\n      </div>\n    </div>\n  );\n}",
  "error": null,
  "overall_score": 59,
  "code_quality_score": 16,
  "architecture_score": 14,
  "performance_score": 18,
  "accessibility_score": 11,
  "metadata": {
    "document_id": "eval_room_fbf1a4fcdb1f",
    "prompt_category": "productivity",
    "prompt_complexity": 8.0
  },
  "raw_response": {
    "document_id": "eval_room_fbf1a4fcdb1f",
    "mode": "parallel",
    "prompt": "Create a premium markdown editor with dark theme, syntax highlighting with vibrant colors, smooth live preview transitions, floating toolbar with hover effects, and code block styling like VS Code",
    "content": "import { useState, useCallback } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Bold, Italic, Code, List, ListOrdered, Link, Image, Eye, EyeOff } from 'lucide-react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { useMemo } from 'react';\n\ninterface ToolbarButton {\n  id: string;\n  icon: any;\n  label: string;\n  action: string;\n}\n\nconst toolbarButtons: ToolbarButton[] = [\n  { id: 'bold', icon: Bold, label: 'Bold', action: '**text**' },\n  { id: 'italic', icon: Italic, label: 'Italic', action: '*text*' },\n  { id: 'code', icon: Code, label: 'Code', action: '`code`' },\n  { id: 'list', icon: List, label: 'Bullet List', action: '- item' },\n  { id: 'ordered', icon: ListOrdered, label: 'Numbered List', action: '1. item' },\n  { id: 'link', icon: Link, label: 'Link', action: '[text](url)' },\n  { id: 'image', icon: Image, label: 'Image', action: '![alt](url)' }\n];\n\n// Markdown parser utility\nconst parseMarkdown = (markdown: string): string => {\n  let html = markdown;\n\n  // Code blocks with syntax highlighting\n  html = html.replace(/```(\\w+)?\\n([\\s\\S]*?)```/g, (match, lang, code) => {\n    const language = lang || 'plaintext';\n    const highlightedCode = highlightCode(code.trim(), language);\n    return `<pre class=\"code-block\"><div class=\"code-header\"><span class=\"code-lang\">${language}</span></div><code class=\"language-${language}\">${highlightedCode}</code></pre>`;\n  });\n\n  // Inline code\n  html = html.replace(/`([^`]+)`/g, '<code class=\"inline-code\">$1</code>');\n\n  // Headers\n  html = html.replace(/^### (.*$)/gim, '<h3>$1</h3>');\n  html = html.replace(/^## (.*$)/gim, '<h2>$1</h2>');\n  html = html.replace(/^# (.*$)/gim, '<h1>$1</h1>');\n\n  // Bold\n  html = html.replace(/\\*\\*(.+?)\\*\\*/g, '<strong>$1</strong>');\n\n  // Italic\n  html = html.replace(/\\*(.+?)\\*/g, '<em>$1</em>');\n\n  // Links\n  html = html.replace(/\\[([^\\]]+)\\]\\(([^)]+)\\)/g, '<a href=\"$2\" target=\"_blank\" rel=\"noopener noreferrer\">$1</a>');\n\n  // Images\n  html = html.replace(/!\\[([^\\]]*)\\]\\(([^)]+)\\)/g, '<img src=\"$2\" alt=\"$1\" />');\n\n  // Blockquotes\n  html = html.replace(/^> (.+)/gim, '<blockquote>$1</blockquote>');\n\n  // Horizontal rules\n  html = html.replace(/^---$/gim, '<hr />');\n\n  // Unordered lists\n  html = html.replace(/^\\- (.+)/gim, '<li class=\"unordered\">$1</li>');\n\n  // Ordered lists\n  html = html.replace(/^\\d+\\. (.+)/gim, '<li class=\"ordered\">$1</li>');\n\n  // Wrap list items\n  html = html.replace(/(<li class=\"unordered\">.*<\\/li>)/s, '<ul>$1</ul>');\n  html = html.replace(/(<li class=\"ordered\">.*<\\/li>)/s, '<ol>$1</ol>');\n\n  // Paragraphs\n  html = html.split('\\n\\n').map(para => {\n    if (para.match(/^<(h[1-6]|ul|ol|pre|blockquote|hr)/)) {\n      return para;\n    }\n    return para.trim() ? `<p>${para}</p>` : '';\n  }).join('\\n');\n\n  return html;\n};\n\n// Syntax highlighter for code blocks\nconst highlightCode = (code: string, language: string): string => {\n  const escapeHtml = (str: string) => \n    str.replace(/&/g, '&amp;')\n       .replace(/</g, '&lt;')\n       .replace(/>/g, '&gt;')\n       .replace(/\"/g, '&quot;')\n       .replace(/'/g, '&#039;');\n\n  let highlighted = escapeHtml(code);\n\n  if (language === 'javascript' || language === 'typescript') {\n    // Keywords\n    highlighted = highlighted.replace(/\\b(function|const|let|var|return|if|else|for|while|class|import|export|from|default|async|await|try|catch|throw|new)\\b/g, '<span class=\"keyword\">$1</span>');\n    // Strings\n    highlighted = highlighted.replace(/(['\"`])(.*?)\\1/g, '<span class=\"string\">$1$2$1</span>');\n    // Functions\n    highlighted = highlighted.replace(/\\b([a-zA-Z_$][a-zA-Z0-9_$]*)\\s*\\(/g, '<span class=\"function\">$1</span>(');\n    // Comments\n    highlighted = highlighted.replace(/(\\/\\/.*$)/gm, '<span class=\"comment\">$1</span>');\n  } else if (language === 'python') {\n    // Keywords\n    highlighted = highlighted.replace(/\\b(def|return|if|else|elif|for|while|class|import|from|as|try|except|raise|with|lambda|pass|break|continue)\\b/g, '<span class=\"keyword\">$1</span>');\n    // Strings\n    highlighted = highlighted.replace(/(['\"])(.*?)\\1/g, '<span class=\"string\">$1$2$1</span>');\n    // Functions\n    highlighted = highlighted.replace(/\\b([a-zA-Z_][a-zA-Z0-9_]*)\\s*\\(/g, '<span class=\"function\">$1</span>(');\n    // Comments\n    highlighted = highlighted.replace(/(#.*$)/gm, '<span class=\"comment\">$1</span>');\n  }\n\n  // Numbers\n  highlighted = highlighted.replace(/\\b(\\d+)\\b/g, '<span class=\"number\">$1</span>');\n\n  return highlighted;\n};\n\nconst mockMarkdownContent = `# Welcome to Premium Markdown Editor\n\n## Features\n\nThis is a **bold** statement and this is *italic* text.\n\n### Code Blocks\n\n\\`\\`\\`javascript\nfunction greet(name) {\n  console.log(\\`Hello, \\${name}!\\`);\n  return true;\n}\n\\`\\`\\`\n\n\\`\\`\\`python\ndef calculate(x, y):\n    result = x + y\n    return result\n\\`\\`\\`\n\n### Lists\n\n- First item\n- Second item\n- Third item\n\n1. Numbered one\n2. Numbered two\n3. Numbered three\n\n### Inline Code\n\nUse \\`const variable = 'value'\\` for inline code.\n\n### Links and Images\n\n[Visit Example](https://example.com)\n\n> This is a blockquote with important information.\n\n---\n\n**End of document**\n`;\n\n// MarkdownPreview Component\nfunction MarkdownPreview({ markdown }: { markdown: string }) {\n  const htmlContent = useMemo(() => parseMarkdown(markdown), [markdown]);\n\n  return (\n    <div \n      className=\"markdown-preview prose prose-invert max-w-none\"\n      dangerouslySetInnerHTML={{ __html: htmlContent }}\n      style={{\n        '--tw-prose-body': '#e6edf3',\n        '--tw-prose-headings': '#ffffff',\n        '--tw-prose-links': '#58a6ff',\n        '--tw-prose-bold': '#ffffff',\n        '--tw-prose-code': '#ff7b72',\n        '--tw-prose-quotes': '#8b949e',\n      } as React.CSSProperties}\n    />\n  );\n}\n\nexport default function MarkdownEditor() {\n  const [markdown, setMarkdown] = useState(mockMarkdownContent);\n  const [showPreview, setShowPreview] = useState(true);\n  const [cursorPosition, setCursorPosition] = useState(0);\n\n  const handleMarkdownChange = useCallback((e: React.ChangeEvent<HTMLTextAreaElement>) => {\n    setMarkdown(e.target.value);\n    setCursorPosition(e.target.selectionStart);\n  }, []);\n\n  const togglePreview = useCallback(() => {\n    setShowPreview(prev => !prev);\n  }, []);\n  // Calculate stats\n  const wordCount = markdown.trim() ? markdown.trim().split(/\\s+/).length : 0;\n  const charCount = markdown.length;\n  const readingTime = Math.ceil(wordCount / 200); // Average reading speed: 200 words per minute\n\n  const handleToolbarAction = useCallback((action: string) => {\n    const textareaRef = document.querySelector('textarea') as HTMLTextAreaElement;\n    if (!textareaRef) return;\n\n    const start = cursorPosition;\n    const end = cursorPosition;\n    const before = markdown.substring(0, start);\n    const after = markdown.substring(end);\n    \n    // Insert the markdown syntax at cursor position\n    const newMarkdown = before + action + after;\n    setMarkdown(newMarkdown);\n    \n    // Calculate new cursor position (after the inserted text)\n    const newCursorPos = start + action.length;\n    \n    // Update cursor position and focus textarea\n    setTimeout(() => {\n      textareaRef.focus();\n      textareaRef.setSelectionRange(newCursorPos, newCursorPos);\n      setCursorPosition(newCursorPos);\n    }, 0);\n  }, [markdown, cursorPosition]);\n\n  // Add global styles for markdown preview\n  const previewStyles = `\n    .markdown-preview h1 {\n      font-size: 2em;\n      font-weight: 700;\n      margin-top: 1.5em;\n      margin-bottom: 0.5em;\n      padding-bottom: 0.3em;\n      border-bottom: 1px solid #30363d;\n      color: #ffffff;\n    }\n    .markdown-preview h2 {\n      font-size: 1.5em;\n      font-weight: 600;\n      margin-top: 1.5em;\n      margin-bottom: 0.5em;\n      padding-bottom: 0.3em;\n      border-bottom: 1px solid #30363d;\n      color: #ffffff;\n    }\n    .markdown-preview h3 {\n      font-size: 1.25em;\n      font-weight: 600;\n      margin-top: 1.5em;\n      margin-bottom: 0.5em;\n      color: #ffffff;\n    }\n    .markdown-preview p {\n      margin-top: 0;\n      margin-bottom: 1em;\n      line-height: 1.7;\n      color: #e6edf3;\n    }\n    .markdown-preview strong {\n      font-weight: 600;\n      color: #ffffff;\n    }\n    .markdown-preview em {\n      font-style: italic;\n      color: #e6edf3;\n    }\n    .markdown-preview a {\n      color: #58a6ff;\n      text-decoration: none;\n      transition: color 0.2s;\n    }\n    .markdown-preview a:hover {\n      color: #79c0ff;\n      text-decoration: underline;\n    }\n    .markdown-preview code.inline-code {\n      background: #161b22;\n      color: #ff7b72;\n      padding: 0.2em 0.4em;\n      border-radius: 6px;\n      font-size: 0.85em;\n      font-family: ui-monospace, SFMono-Regular, 'SF Mono', Menlo, Consolas, 'Liberation Mono', monospace;\n      border: 1px solid #30363d;\n    }\n    .markdown-preview pre.code-block {\n      background: #161b22;\n      border: 1px solid #30363d;\n      border-radius: 6px;\n      padding: 0;\n      margin: 1em 0;\n      overflow-x: auto;\n    }\n    .markdown-preview .code-header {\n      background: #0d1117;\n      border-bottom: 1px solid #30363d;\n      padding: 0.5em 1em;\n      font-size: 0.75em;\n      color: #8b949e;\n      font-weight: 600;\n      text-transform: uppercase;\n    }\n    .markdown-preview .code-lang {\n      color: #58a6ff;\n    }\n    .markdown-preview pre.code-block code {\n      display: block;\n      padding: 1em;\n      font-size: 0.875em;\n      line-height: 1.6;\n      font-family: ui-monospace, SFMono-Regular, 'SF Mono', Menlo, Consolas, 'Liberation Mono', monospace;\n      color: #e6edf3;\n    }\n    .markdown-preview .keyword {\n      color: #ff7b72;\n      font-weight: 600;\n    }\n    .markdown-preview .string {\n      color: #a5d6ff;\n    }\n    .markdown-preview .function {\n      color: #d2a8ff;\n      font-weight: 500;\n    }\n    .markdown-preview .comment {\n      color: #8b949e;\n      font-style: italic;\n    }\n    .markdown-preview .number {\n      color: #79c0ff;\n    }\n    .markdown-preview ul, .markdown-preview ol {\n      margin: 1em 0;\n      padding-left: 2em;\n    }\n    .markdown-preview li {\n      margin: 0.25em 0;\n      line-height: 1.7;\n      color: #e6edf3;\n    }\n    .markdown-preview ul li {\n      list-style-type: disc;\n    }\n    .markdown-preview ol li {\n      list-style-type: decimal;\n    }\n    .markdown-preview blockquote {\n      border-left: 4px solid #58a6ff;\n      padding-left: 1em;\n      margin: 1em 0;\n      color: #8b949e;\n      font-style: italic;\n    }\n    .markdown-preview hr {\n      border: none;\n      border-top: 1px solid #30363d;\n      margin: 2em 0;\n    }\n    .markdown-preview img {\n      max-width: 100%;\n      height: auto;\n      border-radius: 6px;\n      margin: 1em 0;\n    }\n  `;\n\n  return (\n    <div className=\"min-h-screen bg-[#0d1117] text-gray-100\">\n      <div className=\"container mx-auto px-4 py-6\">\n        <style dangerouslySetInnerHTML={{ __html: previewStyles }} />\n        {/* Header */}\n        <div className=\"mb-6 flex items-center justify-between\">\n          <h1 className=\"text-3xl font-bold bg-gradient-to-r from-blue-400 to-purple-500 bg-clip-text text-transparent\">\n            Premium Markdown Editor\n          </h1>\n          <Button\n            onClick={togglePreview}\n            variant=\"outline\"\n            className=\"bg-[#161b22] border-[#30363d] hover:bg-[#1f2937] text-gray-300\"\n          >\n            {showPreview ? <EyeOff className=\"w-4 h-4 mr-2\" /> : <Eye className=\"w-4 h-4 mr-2\" />}\n            {showPreview ? 'Hide Preview' : 'Show Preview'}\n          </Button>\n        </div>\n\n        {/* Floating Toolbar */}\n        <motion.div\n          initial={{ opacity: 0, y: -20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.5 }}\n          className=\"mb-6 bg-[#161b22] border border-[#30363d] rounded-lg p-3 shadow-xl\"\n        >\n          <div className=\"flex flex-wrap gap-2 justify-center\">\n            {toolbarButtons.map((button, index) => (\n              <motion.div\n                key={button.id}\n                initial={{ opacity: 0, scale: 0.8 }}\n                animate={{ opacity: 1, scale: 1 }}\n                transition={{ delay: index * 0.05, duration: 0.3 }}\n                whileHover={{ scale: 1.1, y: -2 }}\n                whileTap={{ scale: 0.95 }}\n              >\n                <Button\n                  onClick={() => handleToolbarAction(button.action)}\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  className=\"bg-[#0d1117] border border-[#30363d] hover:bg-gradient-to-r hover:from-blue-500/20 hover:to-purple-500/20 hover:border-blue-400/50 text-gray-300 hover:text-white transition-all duration-300 group relative\"\n                  title={button.label}\n                >\n                  <button.icon className=\"w-4 h-4 group-hover:text-blue-400 transition-colors duration-300\" />\n                  <span className=\"absolute -bottom-8 left-1/2 transform -translate-x-1/2 bg-[#1f2937] text-xs px-2 py-1 rounded opacity-0 group-hover:opacity-100 transition-opacity duration-300 whitespace-nowrap pointer-events-none z-10\">\n                    {button.label}\n                  </span>\n                </Button>\n              </motion.div>\n            ))}\n          </div>\n        </motion.div>\n\n        {/* Editor Layout */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n          {/* Editor Panel */}\n          <motion.div\n            layout\n            className=\"relative\"\n          >\n            <div className=\"bg-[#0d1117] border border-[#30363d] rounded-lg overflow-hidden shadow-2xl\">\n              <div className=\"bg-[#161b22] px-4 py-3 border-b border-[#30363d] flex items-center justify-between\">\n                <span className=\"text-sm font-medium text-gray-400\">Editor</span>\n                <div className=\"flex gap-2\">\n                  <div className=\"w-3 h-3 rounded-full bg-red-500\"></div>\n                  <div className=\"w-3 h-3 rounded-full bg-yellow-500\"></div>\n                  <div className=\"w-3 h-3 rounded-full bg-green-500\"></div>\n                </div>\n              </div>\n              <textarea\n                value={markdown}\n                onChange={handleMarkdownChange}\n                className=\"w-full h-[600px] bg-[#0d1117] text-gray-100 p-6 font-mono text-sm resize-none focus:outline-none\"\n                placeholder=\"Start writing your markdown...\"\n                spellCheck={false}\n              />\n            </div>\n          </motion.div>\n\n          {/* Preview Panel */}\n          <AnimatePresence mode=\"wait\">\n            {showPreview && (\n              <motion.div\n                initial={{ opacity: 0, x: 20 }}\n                animate={{ opacity: 1, x: 0 }}\n                exit={{ opacity: 0, x: 20 }}\n                transition={{ duration: 0.3 }}\n                className=\"relative\"\n              >\n                <div className=\"bg-[#0d1117] border border-[#30363d] rounded-lg overflow-hidden shadow-2xl\">\n                  <div className=\"bg-[#161b22] px-4 py-3 border-b border-[#30363d]\">\n                    <span className=\"text-sm font-medium text-gray-400\">Preview</span>\n                  </div>\n                  <div className=\"p-6 h-[600px] overflow-y-auto\">\n                    <MarkdownPreview markdown={markdown} />\n                  </div>\n                </div>\n              </motion.div>\n            )}\n          </AnimatePresence>\n        </div>\n\n        {/* Stats Bar */}\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.5, delay: 0.2 }}\n          className=\"mt-6 bg-[#161b22] border border-[#30363d] rounded-lg p-4\"\n        >\n          <div className=\"flex items-center justify-center gap-8 text-sm\">\n            <div className=\"flex items-center gap-2\">\n              <span className=\"text-gray-400\">Words:</span>\n              <span className=\"font-semibold text-blue-400\">{wordCount}</span>\n            </div>\n            <div className=\"w-px h-4 bg-[#30363d]\"></div>\n            <div className=\"flex items-center gap-2\">\n              <span className=\"text-gray-400\">Characters:</span>\n              <span className=\"font-semibold text-purple-400\">{charCount}</span>\n            </div>\n            <div className=\"w-px h-4 bg-[#30363d]\"></div>\n            <div className=\"flex items-center gap-2\">\n              <span className=\"text-gray-400\">Reading Time:</span>\n              <span className=\"font-semibold text-green-400\">\n                {readingTime} {readingTime === 1 ? 'min' : 'mins'}\n              </span>\n            </div>\n          </div>\n        </motion.div>\n      </div>\n    </div>\n  );\n}",
    "error": null,
    "elapsed_time": 84.32756185531616,
    "success": true
  }
}