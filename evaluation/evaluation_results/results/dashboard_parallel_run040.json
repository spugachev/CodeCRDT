{
  "prompt_id": "dashboard",
  "prompt_name": "Analytics Dashboard",
  "mode": "parallel",
  "run_number": 40,
  "timestamp": "2025-10-14T02:28:34.782027",
  "response_time": 99.38362860679626,
  "total_tokens": null,
  "response_content": "import { useState, useCallback } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Moon, Sun, RefreshCw } from 'lucide-react';\nimport { ArrowUpDown, ChevronLeft, ChevronRight } from 'lucide-react';\nimport { Badge } from '@/components/ui/badge';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\n\nimport { TrendingUp, TrendingDown, ShoppingCart, UserPlus, DollarSign, Package } from 'lucide-react';\n\nimport { BarChart3 } from 'lucide-react';\nimport { motion } from 'framer-motion';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';\nimport { motion } from 'framer-motion';\nimport { TrendingUp, Users }, AlertTriangle, CheckCircle, XCircle, X } from 'lucide-react';\nimport { TrendingDown, DollarSign, ShoppingCart, Target } from 'lucide-react';\nimport { TrendingUp, TrendingDown, DollarSign, Users, ShoppingCart, Target } from 'lucide-react';\nimport { motion } from 'framer-motion';\n\ninterface MetricData {\n  id: string;\n  label: string;\n  value: number;\n  change: number;\n  trend: 'up' | 'down';\n}\n\ninterface ChartDataPoint {\n  date: string;\n  revenue: number;\n  users: number;\n  orders: number;\n}\n\ninterface TableRow {\n  id: string;\n  product: string;\n  sales: number;\n  revenue: number;\n  status: 'active' | 'pending' | 'inactive';\n}\ninterface Alert {\n  id: string;\n  message: string;\n  severity: 'info' | 'warning' | 'error' | 'success';\n  timestamp: string;\n}\ninterface ActivityItem {\n  id: string;\n  type: 'sale' | 'user' | 'revenue' | 'order';\n  message: string;\n  timestamp: string;\n  icon: 'cart' | 'user' | 'dollar' | 'package';\n}\n\nconst mockActivityData: ActivityItem[] = [\n  { id: '1', type: 'sale', message: 'New sale: Premium Plan', timestamp: '2 minutes ago', icon: 'cart' },\n  { id: '2', type: 'user', message: 'New user registered', timestamp: '5 minutes ago', icon: 'user' },\n  { id: '3', type: 'revenue', message: 'Revenue milestone reached', timestamp: '12 minutes ago', icon: 'dollar' },\n  { id: '4', type: 'order', message: 'Order #1543 completed', timestamp: '18 minutes ago', icon: 'package' },\n  { id: '5', type: 'sale', message: 'New sale: Enterprise Plan', timestamp: '25 minutes ago', icon: 'cart' },\n  { id: '6', type: 'user', message: '10 new users today', timestamp: '32 minutes ago', icon: 'user' }\n];\n\nconst mockMetrics: MetricData[] = [\n  { id: '1', label: 'Total Revenue', value: 45231, change: 12.5, trend: 'up' },\n  { id: '2', label: 'Active Users', value: 2350, change: 8.2, trend: 'up' },\n  { id: '3', label: 'Total Orders', value: 1543, change: -3.1, trend: 'down' },\n  { id: '4', label: 'Conversion Rate', value: 3.24, change: 5.7, trend: 'up' }\n];\n\nconst mockChartData: ChartDataPoint[] = [\n  { date: '2024-01-01', revenue: 12000, users: 450, orders: 230 },\n  { date: '2024-01-02', revenue: 15000, users: 520, orders: 280 },\n  { date: '2024-01-03', revenue: 13500, users: 490, orders: 250 },\n  { date: '2024-01-04', revenue: 18000, users: 610, orders: 320 },\n  { date: '2024-01-05', revenue: 16500, users: 580, orders: 295 },\n  { date: '2024-01-06', revenue: 20000, users: 680, orders: 350 },\n  { date: '2024-01-07', revenue: 22000, users: 720, orders: 380 }\n];\n\nconst mockTableData: TableRow[] = [\n  { id: '1', product: 'Premium Plan', sales: 234, revenue: 23400, status: 'active' },\n  { id: '2', product: 'Basic Plan', sales: 567, revenue: 11340, status: 'active' },\n  { id: '3', product: 'Enterprise Plan', sales: 89, revenue: 44500, status: 'active' },\n  { id: '4', product: 'Starter Plan', sales: 432, revenue: 4320, status: 'pending' },\n  { id: '5', product: 'Pro Plan', sales: 156, revenue: 15600, status: 'inactive' }\n];\nconst mockAlerts: Alert[] = [\n  { id: '1', message: 'Revenue target achieved for Q1', severity: 'success', timestamp: '2 minutes ago' },\n  { id: '2', message: 'Server response time increased by 15%', severity: 'warning', timestamp: '15 minutes ago' },\n  { id: '3', message: 'New user registration spike detected', severity: 'info', timestamp: '1 hour ago' },\n  { id: '4', message: 'Payment gateway error rate above threshold', severity: 'error', timestamp: '2 hours ago' },\n  { id: '5', message: 'Database backup completed successfully', severity: 'success', timestamp: '3 hours ago' }\n];\nconst mockQuickStats = [\n  { \n    id: '1', \n    label: 'Avg Order Value', \n    value: 156.78, \n    change: 4.3, \n    trend: 'up' as const,\n    icon: DollarSign,\n    sparklineData: [120, 135, 145, 140, 150, 156, 157]\n  },\n  { \n    id: '2', \n    label: 'Cart Abandonment', \n    value: 23.5, \n    change: -2.1, \n    trend: 'down' as const,\n    icon: ShoppingCart,\n    sparklineData: [28, 27, 26, 25, 24, 23.5, 23.5]\n  },\n  { \n    id: '3', \n    label: 'Goal Completion', \n    value: 87.2, \n    change: 6.8, \n    trend: 'up' as const,\n    icon: Target,\n    sparklineData: [75, 78, 82, 84, 85, 86, 87]\n  }\n];\nconst ActivityFeed = ({ isDarkMode }: { isDarkMode: boolean }) => {\n  const getIcon = (iconType: string) => {\n    const iconClass = isDarkMode ? 'text-blue-400' : 'text-blue-600';\n    switch (iconType) {\n      case 'cart':\n        return <ShoppingCart className={`h-4 w-4 ${iconClass}`} />;\n      case 'user':\n        return <UserPlus className={`h-4 w-4 ${iconClass}`} />;\n      case 'dollar':\n        return <DollarSign className={`h-4 w-4 ${iconClass}`} />;\n      case 'package':\n        return <Package className={`h-4 w-4 ${iconClass}`} />;\n      default:\n        return <ShoppingCart className={`h-4 w-4 ${iconClass}`} />;\n    }\n  };\n\n  return (\n    <div className=\"space-y-4\">\n      {mockActivityData.map((activity, index) => (\n        <div\n          key={activity.id}\n          className=\"flex items-start gap-3 animate-in fade-in slide-in-from-left-2\"\n          style={{ animationDelay: `${index * 50}ms`, animationFillMode: 'backwards' }}\n        >\n          <div className={`flex-shrink-0 w-8 h-8 rounded-full flex items-center justify-center ${\n            isDarkMode ? 'bg-blue-900/30 border border-blue-800' : 'bg-blue-50 border border-blue-200'\n          }`}>\n            {getIcon(activity.icon)}\n          </div>\n          \n          <div className=\"flex-1 min-w-0\">\n            <p className={`text-sm font-medium ${isDarkMode ? 'text-gray-200' : 'text-gray-900'}`}>\n              {activity.message}\n            </p>\n            <p className={`text-xs mt-0.5 ${isDarkMode ? 'text-gray-500' : 'text-gray-500'}`}>\n              {activity.timestamp}\n            </p>\n          </div>\n          \n          {index < mockActivityData.length - 1 && (\n            <div className={`absolute left-[15px] top-8 w-0.5 h-12 ${\n              isDarkMode ? 'bg-gray-700' : 'bg-gray-200'\n            }`} style={{ marginTop: '8px' }} />\n          )}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nconst pieChartColors = [\n  '#3b82f6', // blue\n  '#10b981', // green\n  '#f59e0b', // amber\n  '#ef4444', // red\n  '#8b5cf6'  // purple\n];\n\ninterface PieChartData {\n  label: string;\n  value: number;\n  color: string;\n  percentage: number;\n}\n\nconst PieChart = ({ data, isDarkMode }: { data: PieChartData[], isDarkMode: boolean }) => {\n  const size = 200;\n  const center = size / 2;\n  const radius = size / 2 - 10;\n  \n  let currentAngle = -90;\n  \n  const createArc = (startAngle: number, endAngle: number) => {\n    const start = polarToCartesian(center, center, radius, endAngle);\n    const end = polarToCartesian(center, center, radius, startAngle);\n    const largeArcFlag = endAngle - startAngle <= 180 ? 0 : 1;\n    \n    return [\n      `M ${center} ${center}`,\n      `L ${start.x} ${start.y}`,\n      `A ${radius} ${radius} 0 ${largeArcFlag} 0 ${end.x} ${end.y}`,\n      'Z'\n    ].join(' ');\n  };\n  \n  const polarToCartesian = (centerX: number, centerY: number, radius: number, angleInDegrees: number) => {\n    const angleInRadians = (angleInDegrees * Math.PI) / 180;\n    return {\n      x: centerX + radius * Math.cos(angleInRadians),\n      y: centerY + radius * Math.sin(angleInRadians)\n    };\n  };\n  \n  return (\n    <div className=\"flex flex-col items-center gap-6\">\n      <svg width={size} height={size} viewBox={`0 0 ${size} ${size}`}>\n        {data.map((item, index) => {\n          const angle = (item.percentage / 100) * 360;\n          const path = createArc(currentAngle, currentAngle + angle);\n          currentAngle += angle;\n          \n          return (\n            <motion.path\n              key={item.label}\n              d={path}\n              fill={item.color}\n              initial={{ opacity: 0, scale: 0 }}\n              animate={{ opacity: 1, scale: 1 }}\n              transition={{ duration: 0.5, delay: index * 0.1 }}\n              className=\"hover:opacity-80 transition-opacity cursor-pointer\"\n            />\n          );\n        })}\n      </svg>\n      \n      <div className=\"grid grid-cols-1 gap-2 w-full\">\n        {data.map((item, index) => (\n          <motion.div\n            key={item.label}\n            initial={{ opacity: 0, x: -20 }}\n            animate={{ opacity: 1, x: 0 }}\n            transition={{ duration: 0.3, delay: index * 0.1 }}\n            className=\"flex items-center justify-between gap-2\"\n          >\n            <div className=\"flex items-center gap-2\">\n              <div\n                className=\"w-3 h-3 rounded-full\"\n                style={{ backgroundColor: item.color }}\n              />\n              <span className={`text-sm ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>\n                {item.label}\n              </span>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <span className={`text-sm font-medium ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                {item.value}\n              </span>\n              <span className={`text-xs ${isDarkMode ? 'text-gray-400' : 'text-gray-500'}`}>\n                ({item.percentage.toFixed(1)}%)\n              </span>\n            </div>\n          </motion.div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nconst CustomTooltip = ({ active, payload, isDark }: any) => {\n  if (active && payload && payload.length) {\n    return (\n      <div className={`p-3 rounded-lg shadow-lg border ${isDark ? 'bg-gray-800 border-gray-700' : 'bg-white border-gray-200'}`}>\n        <p className={`text-sm font-medium mb-2 ${isDark ? 'text-gray-300' : 'text-gray-600'}`}>\n          {payload[0].payload.date}\n        </p>\n        <p className={`text-sm font-semibold ${isDark ? 'text-white' : 'text-gray-900'}`}>\n          Revenue: ${payload[0].value.toLocaleString()}\n        </p>\n      </div>\n    );\n  }\n  return null;\n};\n\nconst Sparkline = ({ data, trend, isDark }: { data: number[], trend: 'up' | 'down', isDark: boolean }) => {\n  const max = Math.max(...data);\n  const min = Math.min(...data);\n  const range = max - min;\n  \n  const points = data.map((value, index) => {\n    const x = (index / (data.length - 1)) * 100;\n    const y = 100 - ((value - min) / range) * 100;\n    return `${x},${y}`;\n  }).join(' ');\n  \n  return (\n    <svg className=\"w-full h-12\" viewBox=\"0 0 100 100\" preserveAspectRatio=\"none\">\n      <polyline\n        points={points}\n        fill=\"none\"\n        stroke={trend === 'up' ? (isDark ? '#10b981' : '#059669') : (isDark ? '#ef4444' : '#dc2626')}\n        strokeWidth=\"2\"\n        vectorEffect=\"non-scaling-stroke\"\n      />\n    </svg>\n  );\n};\n\nexport default function AnalyticsDashboard() {\n  const [isDarkMode, setIsDarkMode] = useState(false);\n  const [metrics, setMetrics] = useState<MetricData[]>(mockMetrics);\n  const [chartData, setChartData] = useState<ChartDataPoint[]>(mockChartData);\n  const [tableData, setTableData] = useState<TableRow[]>(mockTableData);\n  const [isRefreshing, setIsRefreshing] = useState(false);\n  const [alerts, setAlerts] = useState<Alert[]>(mockAlerts);\n\n  const toggleDarkMode = useCallback(() => {\n    setIsDarkMode(prev => !prev);\n  }, []);\n  const dismissAlert = useCallback((id: string) => {\n    setAlerts(prev => prev.filter(alert => alert.id !== id));\n  }, []);\n\n  const [sortColumn, setSortColumn] = useState<keyof TableRow>('revenue');\n  const [sortDirection, setSortDirection] = useState<'asc' | 'desc'>('desc');\n  const [currentPage, setCurrentPage] = useState(1);\n  const itemsPerPage = 3;\n\n  const handleSort = useCallback((column: keyof TableRow) => {\n    if (sortColumn === column) {\n      setSortDirection(prev => prev === 'asc' ? 'desc' : 'asc');\n    } else {\n      setSortColumn(column);\n      setSortDirection('desc');\n    }\n  }, [sortColumn]);\n\n  const sortedTableData = [...tableData].sort((a, b) => {\n    const aValue = a[sortColumn];\n    const bValue = b[sortColumn];\n    \n    if (typeof aValue === 'number' && typeof bValue === 'number') {\n      return sortDirection === 'asc' ? aValue - bValue : bValue - aValue;\n    }\n    \n    if (typeof aValue === 'string' && typeof bValue === 'string') {\n      return sortDirection === 'asc' \n        ? aValue.localeCompare(bValue)\n        : bValue.localeCompare(aValue);\n    }\n    \n    return 0;\n  });\n\n  const totalPages = Math.ceil(sortedTableData.length / itemsPerPage);\n  const paginatedData = sortedTableData.slice(\n    (currentPage - 1) * itemsPerPage,\n    currentPage * itemsPerPage\n  );\n\n  const getStatusBadgeVariant = (status: TableRow['status']) => {\n    switch (status) {\n      case 'active':\n        return 'default';\n      case 'pending':\n        return 'secondary';\n      case 'inactive':\n        return 'outline';\n      default:\n        return 'default';\n    }\n  };\n\n  const handleRefresh = useCallback(() => {\n    setIsRefreshing(true);\n    \n    setTimeout(() => {\n      const randomVariation = () => (Math.random() - 0.5) * 20;\n      \n      const updatedMetrics = mockMetrics.map(m => ({\n        ...m,\n        value: Math.max(0, m.value + randomVariation()),\n        change: parseFloat((Math.random() * 20 - 5).toFixed(1))\n      }));\n      \n      const updatedChartData = mockChartData.map(d => ({\n        ...d,\n        revenue: Math.max(0, d.revenue + randomVariation() * 100),\n        users: Math.max(0, d.users + randomVariation() * 10),\n        orders: Math.max(0, d.orders + randomVariation() * 5)\n      }));\n      \n      setMetrics(updatedMetrics);\n      setChartData(updatedChartData);\n      setIsRefreshing(false);\n    }, 1500);\n  }, []);</parameter>\n\n<xcrdt_code_output crdtPosition=\"AK2DwI4F4zQB\">\n              <div className=\"space-y-6\">\n                {chartData.map((dataPoint, index) => {\n                  const maxValue = Math.max(\n                    ...chartData.map(d => Math.max(d.revenue / 100, d.users, d.orders))\n                  );\n                  \n                  return (\n                    <div key={dataPoint.date} className=\"space-y-2\">\n                      <div className={`text-sm font-medium ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>\n                        {new Date(dataPoint.date).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n                      </div>\n                      \n                      <div className=\"flex gap-2 items-end h-24\">\n                        {/* Revenue Bar */}\n                        <div className=\"flex-1 relative group\">\n                          <div\n                            className=\"bg-blue-500 rounded-t transition-all duration-500 hover:bg-blue-600 cursor-pointer\"\n                            style={{\n                              height: `${(dataPoint.revenue / 100 / maxValue) * 100}%`,\n                              minHeight: '4px'\n                            }}\n                          >\n                            <div className=\"absolute bottom-full left-1/2 transform -translate-x-1/2 mb-2 px-2 py-1 bg-gray-900 text-white text-xs rounded opacity-0 group-hover:opacity-100 transition-opacity whitespace-nowrap pointer-events-none z-10\">\n                              Revenue: ${dataPoint.revenue.toLocaleString()}\n                            </div>\n                          </div>\n                          <div className={`text-xs text-center mt-1 ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                            Rev\n                          </div>\n                        </div>\n                        \n                        {/* Users Bar */}\n                        <div className=\"flex-1 relative group\">\n                          <div\n                            className=\"bg-green-500 rounded-t transition-all duration-500 hover:bg-green-600 cursor-pointer\"\n                            style={{\n                              height: `${(dataPoint.users / maxValue) * 100}%`,\n                              minHeight: '4px'\n                            }}\n                          >\n                            <div className=\"absolute bottom-full left-1/2 transform -translate-x-1/2 mb-2 px-2 py-1 bg-gray-900 text-white text-xs rounded opacity-0 group-hover:opacity-100 transition-opacity whitespace-nowrap pointer-events-none z-10\">\n                              Users: {dataPoint.users.toLocaleString()}\n                            </div>\n                          </div>\n                          <div className={`text-xs text-center mt-1 ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                            Users\n                          </div>\n                        </div>\n                        \n                        {/* Orders Bar */}\n                        <div className=\"flex-1 relative group\">\n                          <div\n                            className=\"bg-purple-500 rounded-t transition-all duration-500 hover:bg-purple-600 cursor-pointer\"\n                            style={{\n                              height: `${(dataPoint.orders / maxValue) * 100}%`,\n                              minHeight: '4px'\n                            }}\n                          >\n                            <div className=\"absolute bottom-full left-1/2 transform -translate-x-1/2 mb-2 px-2 py-1 bg-gray-900 text-white text-xs rounded opacity-0 group-hover:opacity-100 transition-opacity whitespace-nowrap pointer-events-none z-10\">\n                              Orders: {dataPoint.orders.toLocaleString()}\n                            </div>\n                          </div>\n                          <div className={`text-xs text-center mt-1 ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                            Orders\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  );\n                })}\n                \n                {/* Legend */}\n                <div className=\"flex justify-center gap-6 pt-4 border-t border-gray-200 dark:border-gray-700\">\n                  <div className=\"flex items-center gap-2\">\n                    <div className=\"w-3 h-3 bg-blue-500 rounded\"></div>\n                    <span className={`text-sm ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>\n                      Revenue ($100s)\n                    </span>\n                  </div>\n                  <div className=\"flex items-center gap-2\">\n                    <div className=\"w-3 h-3 bg-green-500 rounded\"></div>\n                    <span className={`text-sm ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>\n                      Users\n                    </span>\n                  </div>\n                  <div className=\"flex items-center gap-2\">\n                    <div className=\"w-3 h-3 bg-purple-500 rounded\"></div>\n                    <span className={`text-sm ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>\n                      Orders\n                    </span>\n                  </div>\n                </div>\n              </div>mVariation = () => (Math.random() - 0.5) * 20;\n      \n      const updatedMetrics = mockMetrics.map(metric => ({\n        ...metric,\n        value: Math.round(metric.value + (metric.value * randomVariation() / 100)),\n        change: parseFloat((Math.random() * 20 - 5).toFixed(1)),\n        trend: Math.random() > 0.5 ? 'up' as const : 'down' as const\n      }));\n      \n      const updatedChartData = mockChartData.map(point => ({\n        ...point,\n        revenue: Math.round(point.revenue + (point.revenue * randomVariation() / 100)),\n        users: Math.round(point.users + (point.users * randomVariation() / 100)),\n        orders: Math.round(point.orders + (point.orders * randomVariation() / 100))\n      }));\n      \n      const updatedTableData = mockTableData.map(row => ({\n        ...row,\n        sales: Math.round(row.sales + (row.sales * randomVariation() / 100)),\n        revenue: Math.round(row.revenue + (row.revenue * randomVariation() / 100))\n      }));\n      \n      setMetrics(updatedMetrics);\n      setChartData(updatedChartData);\n      setTableData(updatedTableData);\n      setIsRefreshing(false);\n    }, 1500);\n  }, []);\n\n  return (\n    <div className={`min-h-screen ${isDarkMode ? 'dark bg-gray-900' : 'bg-gray-50'}`}>\n      <div className=\"container mx-auto p-4 md:p-6 lg:p-8\">\n        <div className=\"flex flex-col md:flex-row justify-between items-start md:items-center gap-4 mb-8\">\n          <div>\n            <h1 className={`text-3xl md:text-4xl font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n              Analytics Dashboard\n            </h1>\n            <p className={`mt-2 ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n              Real-time insights and performance metrics\n            </p>\n          </div>\n          \n          <div className=\"flex gap-2\">\n            <Button\n              variant=\"outline\"\n              size=\"icon\"\n              onClick={toggleDarkMode}\n              className={isDarkMode ? 'border-gray-700' : ''}\n            >\n              {isDarkMode ? <Sun className=\"h-5 w-5\" /> : <Moon className=\"h-5 w-5\" />}\n            </Button>\n            \n            <Button\n              variant=\"outline\"\n              onClick={handleRefresh}\n              disabled={isRefreshing}\n              className={isDarkMode ? 'border-gray-700' : ''}\n            >\n              <RefreshCw className={`h-4 w-4 mr-2 ${isRefreshing ? 'animate-spin' : ''}`} />\n              Refresh\n            </Button>\n          </div>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 md:gap-6 mb-8\">\n          {metrics.map((metric, index) => {\n            const Icon = metric.id === '1' ? DollarSign : \n                        metric.id === '2' ? Users : \n                        metric.id === '3' ? ShoppingCart : Target;\n            \n            const TrendIcon = metric.trend === 'up' ? TrendingUp : TrendingDown;\n            const trendColor = metric.trend === 'up' ? 'text-green-500' : 'text-red-500';\n            const trendBgColor = metric.trend === 'up' ? 'bg-green-50 dark:bg-green-900/20' : 'bg-red-50 dark:bg-red-900/20';\n\n            return (\n              <motion.div\n                key={metric.id}\n                initial={{ opacity: 0, y: 20 }}\n                animate={{ opacity: 1, y: 0 }}\n                transition={{ duration: 0.4, delay: index * 0.1 }}\n              >\n                <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n                  <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                    <CardTitle className={`text-sm font-medium ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                      {metric.label}\n                    </CardTitle>\n                    <div className={`p-2 rounded-lg ${isDarkMode ? 'bg-gray-700' : 'bg-gray-100'}`}>\n                      <Icon className={`h-4 w-4 ${isDarkMode ? 'text-gray-300' : 'text-gray-600'}`} />\n                    </div>\n                  </CardHeader>\n                  <CardContent>\n                    <motion.div\n                      initial={{ scale: 0.5 }}\n                      animate={{ scale: 1 }}\n                      transition={{ duration: 0.5, delay: index * 0.1 + 0.2 }}\n                      className={`text-2xl font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}\n                    >\n                      {metric.id === '1' || metric.id === '3' ? \n                        `$${metric.value.toLocaleString()}` : \n                        metric.id === '4' ? \n                        `${metric.value}%` : \n                        metric.value.toLocaleString()\n                      }\n                    </motion.div>\n                    <div className=\"flex items-center mt-2\">\n                      <div className={`flex items-center gap-1 px-2 py-1 rounded-full ${trendBgColor}`}>\n                        <TrendIcon className={`h-3 w-3 ${trendColor}`} />\n                        <span className={`text-xs font-medium ${trendColor}`}>\n                          {Math.abs(metric.change)}%\n                        </span>\n                      </div>\n                      <span className={`text-xs ml-2 ${isDarkMode ? 'text-gray-400' : 'text-gray-500'}`}>\n                        vs last period\n                      </span>\n                    </div>\n                  </CardContent>\n                </Card>\n              </motion.div>\n            );\n          })}\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-4 md:gap-6 mb-8\">\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Revenue Overview</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Daily revenue trends\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"w-full h-[300px] md:h-[350px]\">\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <LineChart\n                    data={chartData}\n                    margin={{ top: 5, right: 10, left: 0, bottom: 5 }}\n                  >\n                    <CartesianGrid \n                      strokeDasharray=\"3 3\" \n                      stroke={isDarkMode ? '#374151' : '#e5e7eb'}\n                    />\n                    <XAxis \n                      dataKey=\"date\" \n                      stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                      tick={{ fill: isDarkMode ? '#9ca3af' : '#6b7280', fontSize: 12 }}\n                      tickFormatter={(value) => new Date(value).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n                    />\n                    <YAxis \n                      stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                      tick={{ fill: isDarkMode ? '#9ca3af' : '#6b7280', fontSize: 12 }}\n                      tickFormatter={(value) => `$${(value / 1000).toFixed(0)}k`}\n                    />\n                    <Tooltip content={<CustomTooltip isDark={isDarkMode} />} />\n                    <Line \n                      type=\"monotone\" \n                      dataKey=\"revenue\" \n                      stroke=\"#3b82f6\" \n                      strokeWidth={2}\n                      dot={{ fill: '#3b82f6', r: 4 }}\n                      activeDot={{ r: 6, fill: '#2563eb' }}\n                    />\n                  </LineChart>\n                </ResponsiveContainer>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>User Growth</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Active users over time\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"relative h-64 md:h-80\">\n                <svg className=\"w-full h-full\" viewBox=\"0 0 700 300\" preserveAspectRatio=\"none\">\n                  <defs>\n                    <linearGradient id=\"userGradient\" x1=\"0%\" y1=\"0%\" x2=\"0%\" y2=\"100%\">\n                      <stop offset=\"0%\" stopColor=\"#3b82f6\" stopOpacity=\"0.4\" />\n                      <stop offset=\"100%\" stopColor=\"#3b82f6\" stopOpacity=\"0.05\" />\n                    </linearGradient>\n                  </defs>\n                  \n                  {/* Grid lines */}\n                  {[0, 1, 2, 3, 4].map((i) => (\n                    <line\n                      key={i}\n                      x1=\"0\"\n                      y1={i * 60 + 30}\n                      x2=\"700\"\n                      y2={i * 60 + 30}\n                      stroke={isDarkMode ? '#374151' : '#e5e7eb'}\n                      strokeWidth=\"1\"\n                      strokeDasharray=\"4 4\"\n                    />\n                  ))}\n                  \n                  {/* Area path */}\n                  <motion.path\n                    initial={{ opacity: 0 }}\n                    animate={{ opacity: 1 }}\n                    transition={{ duration: 0.8, delay: 0.2 }}\n                    d={(() => {\n                      const maxUsers = Math.max(...chartData.map(d => d.users));\n                      const points = chartData.map((d, i) => {\n                        const x = (i / (chartData.length - 1)) * 700;\n                        const y = 270 - ((d.users / maxUsers) * 240);\n                        return `${x},${y}`;\n                      });\n                      return `M 0,270 L ${points.join(' L ')} L 700,270 Z`;\n                    })()}\n                    fill=\"url(#userGradient)\"\n                  />\n                  \n                  {/* Line path */}\n                  <motion.path\n                    initial={{ pathLength: 0 }}\n                    animate={{ pathLength: 1 }}\n                    transition={{ duration: 1.5, ease: \"easeInOut\" }}\n                    d={(() => {\n                      const maxUsers = Math.max(...chartData.map(d => d.users));\n                      const points = chartData.map((d, i) => {\n                        const x = (i / (chartData.length - 1)) * 700;\n                        const y = 270 - ((d.users / maxUsers) * 240);\n                        return `${x},${y}`;\n                      });\n                      return `M ${points.join(' L ')}`;\n                    })()}\n                    fill=\"none\"\n                    stroke=\"#3b82f6\"\n                    strokeWidth=\"3\"\n                    strokeLinecap=\"round\"\n                    strokeLinejoin=\"round\"\n                  />\n                  \n                  {/* Data points */}\n                  {chartData.map((d, i) => {\n                    const maxUsers = Math.max(...chartData.map(d => d.users));\n                    const x = (i / (chartData.length - 1)) * 700;\n                    const y = 270 - ((d.users / maxUsers) * 240);\n                    \n                    return (\n                      <motion.g\n                        key={i}\n                        initial={{ scale: 0, opacity: 0 }}\n                        animate={{ scale: 1, opacity: 1 }}\n                        transition={{ duration: 0.3, delay: 0.8 + i * 0.1 }}\n                      >\n                        <circle\n                          cx={x}\n                          cy={y}\n                          r=\"5\"\n                          fill=\"#3b82f6\"\n                          stroke={isDarkMode ? '#1f2937' : '#ffffff'}\n                          strokeWidth=\"2\"\n                          className=\"cursor-pointer hover:r-7 transition-all\"\n                        />\n                        <title>{`${new Date(d.date).toLocaleDateString()}: ${d.users} users`}</title>\n                      </motion.g>\n                    );\n                  })}\n                </svg>\n                \n                {/* X-axis labels */}\n                <div className=\"flex justify-between mt-2 px-1\">\n                  {chartData.map((d, i) => (\n                    <motion.span\n                      key={i}\n                      initial={{ opacity: 0, y: -10 }}\n                      animate={{ opacity: 1, y: 0 }}\n                      transition={{ duration: 0.4, delay: 1 + i * 0.05 }}\n                      className={`text-xs ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}\n                    >\n                      {new Date(d.date).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n                    </motion.span>\n                  ))}\n                </div>\n                \n                {/* Stats summary */}\n                <motion.div\n                  initial={{ opacity: 0, y: 20 }}\n                  animate={{ opacity: 1, y: 0 }}\n                  transition={{ duration: 0.6, delay: 1.2 }}\n                  className=\"flex items-center justify-between mt-4 pt-4 border-t\"\n                  style={{ borderColor: isDarkMode ? '#374151' : '#e5e7eb' }}\n                >\n                  <div className=\"flex items-center gap-2\">\n                    <Users className={`h-5 w-5 ${isDarkMode ? 'text-blue-400' : 'text-blue-600'}`} />\n                    <div>\n                      <p className={`text-sm ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                        Total Users\n                      </p>\n                      <p className={`text-xl font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                        {chartData.reduce((sum, d) => sum + d.users, 0).toLocaleString()}\n                      </p>\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex items-center gap-2\">\n                    <TrendingUp className=\"h-5 w-5 text-green-500\" />\n                    <div className=\"text-right\">\n                      <p className={`text-sm ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                        Growth\n                      </p>\n                      <p className=\"text-xl font-bold text-green-500\">\n                        +{(((chartData[chartData.length - 1].users - chartData[0].users) / chartData[0].users) * 100).toFixed(1)}%\n                      </p>\n                    </div>\n                  </div>\n                </motion.div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-4 md:gap-6 mb-8\">\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Orders Distribution</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                By product category\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <PieChart\n                data={(() => {\n                  const total = chartData.reduce((sum, item) => sum + item.orders, 0);\n                  return chartData.slice(0, 5).map((item, index) => ({\n                    label: item.date,\n                    value: item.orders,\n                    color: pieChartColors[index],\n                    percentage: (item.orders / total) * 100\n                  }));\n                })()}\n                isDarkMode={isDarkMode}\n              />\n            </CardContent>\n          </Card>\n\n          <Card className={`lg:col-span-2 ${isDarkMode ? 'bg-gray-800 border-gray-700' : ''}`}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Performance Metrics</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Combined view of key indicators\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              \n            </CardContent>\n          </Card>\n        </div>\n\n        <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n          <CardHeader>\n            <CardTitle className={isDarkMode ? 'text-white' : ''}>Top Products</CardTitle>\n            <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n              Best performing products by revenue\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              <div className=\"overflow-x-auto\">\n                <Table>\n                  <TableHeader>\n                    <TableRow className={isDarkMode ? 'border-gray-700' : ''}>\n                      <TableHead className={isDarkMode ? 'text-gray-300' : ''}>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => handleSort('product')}\n                          className={`flex items-center gap-1 ${isDarkMode ? 'hover:bg-gray-700' : ''}`}\n                        >\n                          Product\n                          <ArrowUpDown className=\"h-4 w-4\" />\n                        </Button>\n                      </TableHead>\n                      <TableHead className={isDarkMode ? 'text-gray-300' : ''}>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => handleSort('sales')}\n                          className={`flex items-center gap-1 ${isDarkMode ? 'hover:bg-gray-700' : ''}`}\n                        >\n                          Sales\n                          <ArrowUpDown className=\"h-4 w-4\" />\n                        </Button>\n                      </TableHead>\n                      <TableHead className={isDarkMode ? 'text-gray-300' : ''}>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => handleSort('revenue')}\n                          className={`flex items-center gap-1 ${isDarkMode ? 'hover:bg-gray-700' : ''}`}\n                        >\n                          Revenue\n                          <ArrowUpDown className=\"h-4 w-4\" />\n                        </Button>\n                      </TableHead>\n                      <TableHead className={isDarkMode ? 'text-gray-300' : ''}>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => handleSort('status')}\n                          className={`flex items-center gap-1 ${isDarkMode ? 'hover:bg-gray-700' : ''}`}\n                        >\n                          Status\n                          <ArrowUpDown className=\"h-4 w-4\" />\n                        </Button>\n                      </TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {paginatedData.map((row) => (\n                      <TableRow \n                        key={row.id}\n                        className={isDarkMode ? 'border-gray-700 hover:bg-gray-700/50' : ''}\n                      >\n                        <TableCell className={`font-medium ${isDarkMode ? 'text-gray-200' : ''}`}>\n                          {row.product}\n                        </TableCell>\n                        <TableCell className={isDarkMode ? 'text-gray-300' : ''}>\n                          {row.sales.toLocaleString()}\n                        </TableCell>\n                        <TableCell className={isDarkMode ? 'text-gray-300' : ''}>\n                          ${row.revenue.toLocaleString()}\n                        </TableCell>\n                        <TableCell>\n                          <Badge \n                            variant={getStatusBadgeVariant(row.status)}\n                            className=\"capitalize\"\n                          >\n                            {row.status}\n                          </Badge>\n                        </TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              </div>\n\n              <div className=\"flex flex-col sm:flex-row items-center justify-between gap-4 pt-4\">\n                <p className={`text-sm ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                  Showing {((currentPage - 1) * itemsPerPage) + 1} to {Math.min(currentPage * itemsPerPage, sortedTableData.length)} of {sortedTableData.length} products\n                </p>\n                \n                <div className=\"flex items-center gap-2\">\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => setCurrentPage(prev => Math.max(1, prev - 1))}\n                    disabled={currentPage === 1}\n                    className={isDarkMode ? 'border-gray-700' : ''}\n                  >\n                    <ChevronLeft className=\"h-4 w-4\" />\n                    Previous\n                  </Button>\n                  \n                  <div className=\"flex items-center gap-1\">\n                    {Array.from({ length: totalPages }, (_, i) => i + 1).map((page) => (\n                      <Button\n                        key={page}\n                        variant={currentPage === page ? 'default' : 'outline'}\n                        size=\"sm\"\n                        onClick={() => setCurrentPage(page)}\n                        className={`w-8 h-8 p-0 ${isDarkMode && currentPage !== page ? 'border-gray-700' : ''}`}\n                      >\n                        {page}\n                      </Button>\n                    ))}\n                  </div>\n                  \n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => setCurrentPage(prev => Math.min(totalPages, prev + 1))}\n                    disabled={currentPage === totalPages}\n                    className={isDarkMode ? 'border-gray-700' : ''}\n                  >\n                    Next\n                    <ChevronRight className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 md:gap-6 mt-8\">\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Recent Activity</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <ActivityFeed isDarkMode={isDarkMode} />\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Quick Stats</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {mockQuickStats.map((stat, index) => {\n                  const Icon = stat.icon;\n                  return (\n                    <motion.div\n                      key={stat.id}\n                      initial={{ opacity: 0, x: -20 }}\n                      animate={{ opacity: 1, x: 0 }}\n                      transition={{ delay: index * 0.1 }}\n                      className={`p-4 rounded-lg border ${\n                        isDarkMode ? 'bg-gray-700/50 border-gray-600' : 'bg-white border-gray-200'\n                      }`}\n                    >\n                      <div className=\"flex items-start justify-between mb-3\">\n                        <div className=\"flex items-center gap-2\">\n                          <div className={`p-2 rounded-lg ${\n                            isDarkMode ? 'bg-gray-600' : 'bg-gray-100'\n                          }`}>\n                            <Icon className={`h-4 w-4 ${isDarkMode ? 'text-gray-300' : 'text-gray-600'}`} />\n                          </div>\n                          <div>\n                            <p className={`text-sm ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                              {stat.label}\n                            </p>\n                            <p className={`text-2xl font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                              {stat.label.includes('Value') || stat.label.includes('Order') \n                                ? `$${stat.value.toFixed(2)}` \n                                : `${stat.value}%`}\n                            </p>\n                          </div>\n                        </div>\n                        <div className={`flex items-center gap-1 px-2 py-1 rounded-full text-xs font-medium ${\n                          stat.trend === 'up'\n                            ? isDarkMode ? 'bg-green-900/30 text-green-400' : 'bg-green-100 text-green-700'\n                            : isDarkMode ? 'bg-red-900/30 text-red-400' : 'bg-red-100 text-red-700'\n                        }`}>\n                          {stat.trend === 'up' ? (\n                            <TrendingUp className=\"h-3 w-3\" />\n                          ) : (\n                            <TrendingDown className=\"h-3 w-3\" />\n                          )}\n                          {Math.abs(stat.change)}%\n                        </div>\n                      </div>\n                      <Sparkline data={stat.sparklineData} trend={stat.trend} isDark={isDarkMode} />\n                    </motion.div>\n                  );\n                })}\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Alerts</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-3\">\n                {alerts.length === 0 ? (\n                  <p className={`text-sm ${isDarkMode ? 'text-gray-400' : 'text-gray-500'}`}>\n                    No alerts at this time\n                  </p>\n                ) : (\n                  alerts.map((alert, index) => {\n                    const severityConfig = {\n                      success: {\n                        icon: CheckCircle,\n                        bgColor: isDarkMode ? 'bg-green-900/20' : 'bg-green-50',\n                        borderColor: 'border-green-500',\n                        iconColor: 'text-green-500',\n                        textColor: isDarkMode ? 'text-green-400' : 'text-green-700'\n                      },\n                      warning: {\n                        icon: AlertTriangle,\n                        bgColor: isDarkMode ? 'bg-yellow-900/20' : 'bg-yellow-50',\n                        borderColor: 'border-yellow-500',\n                        iconColor: 'text-yellow-500',\n                        textColor: isDarkMode ? 'text-yellow-400' : 'text-yellow-700'\n                      },\n                      error: {\n                        icon: XCircle,\n                        bgColor: isDarkMode ? 'bg-red-900/20' : 'bg-red-50',\n                        borderColor: 'border-red-500',\n                        iconColor: 'text-red-500',\n                        textColor: isDarkMode ? 'text-red-400' : 'text-red-700'\n                      },\n                      info: {\n                        icon: AlertTriangle,\n                        bgColor: isDarkMode ? 'bg-blue-900/20' : 'bg-blue-50',\n                        borderColor: 'border-blue-500',\n                        iconColor: 'text-blue-500',\n                        textColor: isDarkMode ? 'text-blue-400' : 'text-blue-700'\n                      }\n                    };\n\n                    const config = severityConfig[alert.severity];\n                    const Icon = config.icon;\n\n                    return (\n                      <motion.div\n                        key={alert.id}\n                        initial={{ opacity: 0, x: -20 }}\n                        animate={{ opacity: 1, x: 0 }}\n                        exit={{ opacity: 0, x: 20 }}\n                        transition={{ delay: index * 0.1 }}\n                        className={`relative p-3 rounded-lg border-l-4 ${config.bgColor} ${config.borderColor}`}\n                      >\n                        <div className=\"flex items-start gap-3\">\n                          <Icon className={`h-5 w-5 mt-0.5 flex-shrink-0 ${config.iconColor}`} />\n                          <div className=\"flex-1 min-w-0\">\n                            <p className={`text-sm font-medium ${config.textColor}`}>\n                              {alert.message}\n                            </p>\n                            <p className={`text-xs mt-1 ${isDarkMode ? 'text-gray-500' : 'text-gray-400'}`}>\n                              {alert.timestamp}\n                            </p>\n                          </div>\n                          <button\n                            onClick={() => dismissAlert(alert.id)}\n                            className={`flex-shrink-0 p-1 rounded hover:bg-gray-200 dark:hover:bg-gray-700 transition-colors ${\n                              isDarkMode ? 'text-gray-400 hover:text-gray-300' : 'text-gray-500 hover:text-gray-700'\n                            }`}\n                            aria-label=\"Dismiss alert\"\n                          >\n                            <X className=\"h-4 w-4\" />\n                          </button>\n                        </div>\n                      </motion.div>\n                    );\n                  })\n                )}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}",
  "error": null,
  "overall_score": 59,
  "code_quality_score": 12,
  "architecture_score": 14,
  "performance_score": 16,
  "accessibility_score": 17,
  "metadata": {
    "document_id": "eval_room_038179e13ebd",
    "prompt_category": "intermediate",
    "prompt_complexity": 6.0
  },
  "raw_response": {
    "document_id": "eval_room_038179e13ebd",
    "mode": "parallel",
    "prompt": "Generate an analytics dashboard page with charts, data tables, real-time updates, dark mode, and responsive design",
    "content": "import { useState, useCallback } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Moon, Sun, RefreshCw } from 'lucide-react';\nimport { ArrowUpDown, ChevronLeft, ChevronRight } from 'lucide-react';\nimport { Badge } from '@/components/ui/badge';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\n\nimport { TrendingUp, TrendingDown, ShoppingCart, UserPlus, DollarSign, Package } from 'lucide-react';\n\nimport { BarChart3 } from 'lucide-react';\nimport { motion } from 'framer-motion';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';\nimport { motion } from 'framer-motion';\nimport { TrendingUp, Users }, AlertTriangle, CheckCircle, XCircle, X } from 'lucide-react';\nimport { TrendingDown, DollarSign, ShoppingCart, Target } from 'lucide-react';\nimport { TrendingUp, TrendingDown, DollarSign, Users, ShoppingCart, Target } from 'lucide-react';\nimport { motion } from 'framer-motion';\n\ninterface MetricData {\n  id: string;\n  label: string;\n  value: number;\n  change: number;\n  trend: 'up' | 'down';\n}\n\ninterface ChartDataPoint {\n  date: string;\n  revenue: number;\n  users: number;\n  orders: number;\n}\n\ninterface TableRow {\n  id: string;\n  product: string;\n  sales: number;\n  revenue: number;\n  status: 'active' | 'pending' | 'inactive';\n}\ninterface Alert {\n  id: string;\n  message: string;\n  severity: 'info' | 'warning' | 'error' | 'success';\n  timestamp: string;\n}\ninterface ActivityItem {\n  id: string;\n  type: 'sale' | 'user' | 'revenue' | 'order';\n  message: string;\n  timestamp: string;\n  icon: 'cart' | 'user' | 'dollar' | 'package';\n}\n\nconst mockActivityData: ActivityItem[] = [\n  { id: '1', type: 'sale', message: 'New sale: Premium Plan', timestamp: '2 minutes ago', icon: 'cart' },\n  { id: '2', type: 'user', message: 'New user registered', timestamp: '5 minutes ago', icon: 'user' },\n  { id: '3', type: 'revenue', message: 'Revenue milestone reached', timestamp: '12 minutes ago', icon: 'dollar' },\n  { id: '4', type: 'order', message: 'Order #1543 completed', timestamp: '18 minutes ago', icon: 'package' },\n  { id: '5', type: 'sale', message: 'New sale: Enterprise Plan', timestamp: '25 minutes ago', icon: 'cart' },\n  { id: '6', type: 'user', message: '10 new users today', timestamp: '32 minutes ago', icon: 'user' }\n];\n\nconst mockMetrics: MetricData[] = [\n  { id: '1', label: 'Total Revenue', value: 45231, change: 12.5, trend: 'up' },\n  { id: '2', label: 'Active Users', value: 2350, change: 8.2, trend: 'up' },\n  { id: '3', label: 'Total Orders', value: 1543, change: -3.1, trend: 'down' },\n  { id: '4', label: 'Conversion Rate', value: 3.24, change: 5.7, trend: 'up' }\n];\n\nconst mockChartData: ChartDataPoint[] = [\n  { date: '2024-01-01', revenue: 12000, users: 450, orders: 230 },\n  { date: '2024-01-02', revenue: 15000, users: 520, orders: 280 },\n  { date: '2024-01-03', revenue: 13500, users: 490, orders: 250 },\n  { date: '2024-01-04', revenue: 18000, users: 610, orders: 320 },\n  { date: '2024-01-05', revenue: 16500, users: 580, orders: 295 },\n  { date: '2024-01-06', revenue: 20000, users: 680, orders: 350 },\n  { date: '2024-01-07', revenue: 22000, users: 720, orders: 380 }\n];\n\nconst mockTableData: TableRow[] = [\n  { id: '1', product: 'Premium Plan', sales: 234, revenue: 23400, status: 'active' },\n  { id: '2', product: 'Basic Plan', sales: 567, revenue: 11340, status: 'active' },\n  { id: '3', product: 'Enterprise Plan', sales: 89, revenue: 44500, status: 'active' },\n  { id: '4', product: 'Starter Plan', sales: 432, revenue: 4320, status: 'pending' },\n  { id: '5', product: 'Pro Plan', sales: 156, revenue: 15600, status: 'inactive' }\n];\nconst mockAlerts: Alert[] = [\n  { id: '1', message: 'Revenue target achieved for Q1', severity: 'success', timestamp: '2 minutes ago' },\n  { id: '2', message: 'Server response time increased by 15%', severity: 'warning', timestamp: '15 minutes ago' },\n  { id: '3', message: 'New user registration spike detected', severity: 'info', timestamp: '1 hour ago' },\n  { id: '4', message: 'Payment gateway error rate above threshold', severity: 'error', timestamp: '2 hours ago' },\n  { id: '5', message: 'Database backup completed successfully', severity: 'success', timestamp: '3 hours ago' }\n];\nconst mockQuickStats = [\n  { \n    id: '1', \n    label: 'Avg Order Value', \n    value: 156.78, \n    change: 4.3, \n    trend: 'up' as const,\n    icon: DollarSign,\n    sparklineData: [120, 135, 145, 140, 150, 156, 157]\n  },\n  { \n    id: '2', \n    label: 'Cart Abandonment', \n    value: 23.5, \n    change: -2.1, \n    trend: 'down' as const,\n    icon: ShoppingCart,\n    sparklineData: [28, 27, 26, 25, 24, 23.5, 23.5]\n  },\n  { \n    id: '3', \n    label: 'Goal Completion', \n    value: 87.2, \n    change: 6.8, \n    trend: 'up' as const,\n    icon: Target,\n    sparklineData: [75, 78, 82, 84, 85, 86, 87]\n  }\n];\nconst ActivityFeed = ({ isDarkMode }: { isDarkMode: boolean }) => {\n  const getIcon = (iconType: string) => {\n    const iconClass = isDarkMode ? 'text-blue-400' : 'text-blue-600';\n    switch (iconType) {\n      case 'cart':\n        return <ShoppingCart className={`h-4 w-4 ${iconClass}`} />;\n      case 'user':\n        return <UserPlus className={`h-4 w-4 ${iconClass}`} />;\n      case 'dollar':\n        return <DollarSign className={`h-4 w-4 ${iconClass}`} />;\n      case 'package':\n        return <Package className={`h-4 w-4 ${iconClass}`} />;\n      default:\n        return <ShoppingCart className={`h-4 w-4 ${iconClass}`} />;\n    }\n  };\n\n  return (\n    <div className=\"space-y-4\">\n      {mockActivityData.map((activity, index) => (\n        <div\n          key={activity.id}\n          className=\"flex items-start gap-3 animate-in fade-in slide-in-from-left-2\"\n          style={{ animationDelay: `${index * 50}ms`, animationFillMode: 'backwards' }}\n        >\n          <div className={`flex-shrink-0 w-8 h-8 rounded-full flex items-center justify-center ${\n            isDarkMode ? 'bg-blue-900/30 border border-blue-800' : 'bg-blue-50 border border-blue-200'\n          }`}>\n            {getIcon(activity.icon)}\n          </div>\n          \n          <div className=\"flex-1 min-w-0\">\n            <p className={`text-sm font-medium ${isDarkMode ? 'text-gray-200' : 'text-gray-900'}`}>\n              {activity.message}\n            </p>\n            <p className={`text-xs mt-0.5 ${isDarkMode ? 'text-gray-500' : 'text-gray-500'}`}>\n              {activity.timestamp}\n            </p>\n          </div>\n          \n          {index < mockActivityData.length - 1 && (\n            <div className={`absolute left-[15px] top-8 w-0.5 h-12 ${\n              isDarkMode ? 'bg-gray-700' : 'bg-gray-200'\n            }`} style={{ marginTop: '8px' }} />\n          )}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nconst pieChartColors = [\n  '#3b82f6', // blue\n  '#10b981', // green\n  '#f59e0b', // amber\n  '#ef4444', // red\n  '#8b5cf6'  // purple\n];\n\ninterface PieChartData {\n  label: string;\n  value: number;\n  color: string;\n  percentage: number;\n}\n\nconst PieChart = ({ data, isDarkMode }: { data: PieChartData[], isDarkMode: boolean }) => {\n  const size = 200;\n  const center = size / 2;\n  const radius = size / 2 - 10;\n  \n  let currentAngle = -90;\n  \n  const createArc = (startAngle: number, endAngle: number) => {\n    const start = polarToCartesian(center, center, radius, endAngle);\n    const end = polarToCartesian(center, center, radius, startAngle);\n    const largeArcFlag = endAngle - startAngle <= 180 ? 0 : 1;\n    \n    return [\n      `M ${center} ${center}`,\n      `L ${start.x} ${start.y}`,\n      `A ${radius} ${radius} 0 ${largeArcFlag} 0 ${end.x} ${end.y}`,\n      'Z'\n    ].join(' ');\n  };\n  \n  const polarToCartesian = (centerX: number, centerY: number, radius: number, angleInDegrees: number) => {\n    const angleInRadians = (angleInDegrees * Math.PI) / 180;\n    return {\n      x: centerX + radius * Math.cos(angleInRadians),\n      y: centerY + radius * Math.sin(angleInRadians)\n    };\n  };\n  \n  return (\n    <div className=\"flex flex-col items-center gap-6\">\n      <svg width={size} height={size} viewBox={`0 0 ${size} ${size}`}>\n        {data.map((item, index) => {\n          const angle = (item.percentage / 100) * 360;\n          const path = createArc(currentAngle, currentAngle + angle);\n          currentAngle += angle;\n          \n          return (\n            <motion.path\n              key={item.label}\n              d={path}\n              fill={item.color}\n              initial={{ opacity: 0, scale: 0 }}\n              animate={{ opacity: 1, scale: 1 }}\n              transition={{ duration: 0.5, delay: index * 0.1 }}\n              className=\"hover:opacity-80 transition-opacity cursor-pointer\"\n            />\n          );\n        })}\n      </svg>\n      \n      <div className=\"grid grid-cols-1 gap-2 w-full\">\n        {data.map((item, index) => (\n          <motion.div\n            key={item.label}\n            initial={{ opacity: 0, x: -20 }}\n            animate={{ opacity: 1, x: 0 }}\n            transition={{ duration: 0.3, delay: index * 0.1 }}\n            className=\"flex items-center justify-between gap-2\"\n          >\n            <div className=\"flex items-center gap-2\">\n              <div\n                className=\"w-3 h-3 rounded-full\"\n                style={{ backgroundColor: item.color }}\n              />\n              <span className={`text-sm ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>\n                {item.label}\n              </span>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <span className={`text-sm font-medium ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                {item.value}\n              </span>\n              <span className={`text-xs ${isDarkMode ? 'text-gray-400' : 'text-gray-500'}`}>\n                ({item.percentage.toFixed(1)}%)\n              </span>\n            </div>\n          </motion.div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nconst CustomTooltip = ({ active, payload, isDark }: any) => {\n  if (active && payload && payload.length) {\n    return (\n      <div className={`p-3 rounded-lg shadow-lg border ${isDark ? 'bg-gray-800 border-gray-700' : 'bg-white border-gray-200'}`}>\n        <p className={`text-sm font-medium mb-2 ${isDark ? 'text-gray-300' : 'text-gray-600'}`}>\n          {payload[0].payload.date}\n        </p>\n        <p className={`text-sm font-semibold ${isDark ? 'text-white' : 'text-gray-900'}`}>\n          Revenue: ${payload[0].value.toLocaleString()}\n        </p>\n      </div>\n    );\n  }\n  return null;\n};\n\nconst Sparkline = ({ data, trend, isDark }: { data: number[], trend: 'up' | 'down', isDark: boolean }) => {\n  const max = Math.max(...data);\n  const min = Math.min(...data);\n  const range = max - min;\n  \n  const points = data.map((value, index) => {\n    const x = (index / (data.length - 1)) * 100;\n    const y = 100 - ((value - min) / range) * 100;\n    return `${x},${y}`;\n  }).join(' ');\n  \n  return (\n    <svg className=\"w-full h-12\" viewBox=\"0 0 100 100\" preserveAspectRatio=\"none\">\n      <polyline\n        points={points}\n        fill=\"none\"\n        stroke={trend === 'up' ? (isDark ? '#10b981' : '#059669') : (isDark ? '#ef4444' : '#dc2626')}\n        strokeWidth=\"2\"\n        vectorEffect=\"non-scaling-stroke\"\n      />\n    </svg>\n  );\n};\n\nexport default function AnalyticsDashboard() {\n  const [isDarkMode, setIsDarkMode] = useState(false);\n  const [metrics, setMetrics] = useState<MetricData[]>(mockMetrics);\n  const [chartData, setChartData] = useState<ChartDataPoint[]>(mockChartData);\n  const [tableData, setTableData] = useState<TableRow[]>(mockTableData);\n  const [isRefreshing, setIsRefreshing] = useState(false);\n  const [alerts, setAlerts] = useState<Alert[]>(mockAlerts);\n\n  const toggleDarkMode = useCallback(() => {\n    setIsDarkMode(prev => !prev);\n  }, []);\n  const dismissAlert = useCallback((id: string) => {\n    setAlerts(prev => prev.filter(alert => alert.id !== id));\n  }, []);\n\n  const [sortColumn, setSortColumn] = useState<keyof TableRow>('revenue');\n  const [sortDirection, setSortDirection] = useState<'asc' | 'desc'>('desc');\n  const [currentPage, setCurrentPage] = useState(1);\n  const itemsPerPage = 3;\n\n  const handleSort = useCallback((column: keyof TableRow) => {\n    if (sortColumn === column) {\n      setSortDirection(prev => prev === 'asc' ? 'desc' : 'asc');\n    } else {\n      setSortColumn(column);\n      setSortDirection('desc');\n    }\n  }, [sortColumn]);\n\n  const sortedTableData = [...tableData].sort((a, b) => {\n    const aValue = a[sortColumn];\n    const bValue = b[sortColumn];\n    \n    if (typeof aValue === 'number' && typeof bValue === 'number') {\n      return sortDirection === 'asc' ? aValue - bValue : bValue - aValue;\n    }\n    \n    if (typeof aValue === 'string' && typeof bValue === 'string') {\n      return sortDirection === 'asc' \n        ? aValue.localeCompare(bValue)\n        : bValue.localeCompare(aValue);\n    }\n    \n    return 0;\n  });\n\n  const totalPages = Math.ceil(sortedTableData.length / itemsPerPage);\n  const paginatedData = sortedTableData.slice(\n    (currentPage - 1) * itemsPerPage,\n    currentPage * itemsPerPage\n  );\n\n  const getStatusBadgeVariant = (status: TableRow['status']) => {\n    switch (status) {\n      case 'active':\n        return 'default';\n      case 'pending':\n        return 'secondary';\n      case 'inactive':\n        return 'outline';\n      default:\n        return 'default';\n    }\n  };\n\n  const handleRefresh = useCallback(() => {\n    setIsRefreshing(true);\n    \n    setTimeout(() => {\n      const randomVariation = () => (Math.random() - 0.5) * 20;\n      \n      const updatedMetrics = mockMetrics.map(m => ({\n        ...m,\n        value: Math.max(0, m.value + randomVariation()),\n        change: parseFloat((Math.random() * 20 - 5).toFixed(1))\n      }));\n      \n      const updatedChartData = mockChartData.map(d => ({\n        ...d,\n        revenue: Math.max(0, d.revenue + randomVariation() * 100),\n        users: Math.max(0, d.users + randomVariation() * 10),\n        orders: Math.max(0, d.orders + randomVariation() * 5)\n      }));\n      \n      setMetrics(updatedMetrics);\n      setChartData(updatedChartData);\n      setIsRefreshing(false);\n    }, 1500);\n  }, []);</parameter>\n\n<xcrdt_code_output crdtPosition=\"AK2DwI4F4zQB\">\n              <div className=\"space-y-6\">\n                {chartData.map((dataPoint, index) => {\n                  const maxValue = Math.max(\n                    ...chartData.map(d => Math.max(d.revenue / 100, d.users, d.orders))\n                  );\n                  \n                  return (\n                    <div key={dataPoint.date} className=\"space-y-2\">\n                      <div className={`text-sm font-medium ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>\n                        {new Date(dataPoint.date).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n                      </div>\n                      \n                      <div className=\"flex gap-2 items-end h-24\">\n                        {/* Revenue Bar */}\n                        <div className=\"flex-1 relative group\">\n                          <div\n                            className=\"bg-blue-500 rounded-t transition-all duration-500 hover:bg-blue-600 cursor-pointer\"\n                            style={{\n                              height: `${(dataPoint.revenue / 100 / maxValue) * 100}%`,\n                              minHeight: '4px'\n                            }}\n                          >\n                            <div className=\"absolute bottom-full left-1/2 transform -translate-x-1/2 mb-2 px-2 py-1 bg-gray-900 text-white text-xs rounded opacity-0 group-hover:opacity-100 transition-opacity whitespace-nowrap pointer-events-none z-10\">\n                              Revenue: ${dataPoint.revenue.toLocaleString()}\n                            </div>\n                          </div>\n                          <div className={`text-xs text-center mt-1 ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                            Rev\n                          </div>\n                        </div>\n                        \n                        {/* Users Bar */}\n                        <div className=\"flex-1 relative group\">\n                          <div\n                            className=\"bg-green-500 rounded-t transition-all duration-500 hover:bg-green-600 cursor-pointer\"\n                            style={{\n                              height: `${(dataPoint.users / maxValue) * 100}%`,\n                              minHeight: '4px'\n                            }}\n                          >\n                            <div className=\"absolute bottom-full left-1/2 transform -translate-x-1/2 mb-2 px-2 py-1 bg-gray-900 text-white text-xs rounded opacity-0 group-hover:opacity-100 transition-opacity whitespace-nowrap pointer-events-none z-10\">\n                              Users: {dataPoint.users.toLocaleString()}\n                            </div>\n                          </div>\n                          <div className={`text-xs text-center mt-1 ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                            Users\n                          </div>\n                        </div>\n                        \n                        {/* Orders Bar */}\n                        <div className=\"flex-1 relative group\">\n                          <div\n                            className=\"bg-purple-500 rounded-t transition-all duration-500 hover:bg-purple-600 cursor-pointer\"\n                            style={{\n                              height: `${(dataPoint.orders / maxValue) * 100}%`,\n                              minHeight: '4px'\n                            }}\n                          >\n                            <div className=\"absolute bottom-full left-1/2 transform -translate-x-1/2 mb-2 px-2 py-1 bg-gray-900 text-white text-xs rounded opacity-0 group-hover:opacity-100 transition-opacity whitespace-nowrap pointer-events-none z-10\">\n                              Orders: {dataPoint.orders.toLocaleString()}\n                            </div>\n                          </div>\n                          <div className={`text-xs text-center mt-1 ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                            Orders\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  );\n                })}\n                \n                {/* Legend */}\n                <div className=\"flex justify-center gap-6 pt-4 border-t border-gray-200 dark:border-gray-700\">\n                  <div className=\"flex items-center gap-2\">\n                    <div className=\"w-3 h-3 bg-blue-500 rounded\"></div>\n                    <span className={`text-sm ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>\n                      Revenue ($100s)\n                    </span>\n                  </div>\n                  <div className=\"flex items-center gap-2\">\n                    <div className=\"w-3 h-3 bg-green-500 rounded\"></div>\n                    <span className={`text-sm ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>\n                      Users\n                    </span>\n                  </div>\n                  <div className=\"flex items-center gap-2\">\n                    <div className=\"w-3 h-3 bg-purple-500 rounded\"></div>\n                    <span className={`text-sm ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>\n                      Orders\n                    </span>\n                  </div>\n                </div>\n              </div>mVariation = () => (Math.random() - 0.5) * 20;\n      \n      const updatedMetrics = mockMetrics.map(metric => ({\n        ...metric,\n        value: Math.round(metric.value + (metric.value * randomVariation() / 100)),\n        change: parseFloat((Math.random() * 20 - 5).toFixed(1)),\n        trend: Math.random() > 0.5 ? 'up' as const : 'down' as const\n      }));\n      \n      const updatedChartData = mockChartData.map(point => ({\n        ...point,\n        revenue: Math.round(point.revenue + (point.revenue * randomVariation() / 100)),\n        users: Math.round(point.users + (point.users * randomVariation() / 100)),\n        orders: Math.round(point.orders + (point.orders * randomVariation() / 100))\n      }));\n      \n      const updatedTableData = mockTableData.map(row => ({\n        ...row,\n        sales: Math.round(row.sales + (row.sales * randomVariation() / 100)),\n        revenue: Math.round(row.revenue + (row.revenue * randomVariation() / 100))\n      }));\n      \n      setMetrics(updatedMetrics);\n      setChartData(updatedChartData);\n      setTableData(updatedTableData);\n      setIsRefreshing(false);\n    }, 1500);\n  }, []);\n\n  return (\n    <div className={`min-h-screen ${isDarkMode ? 'dark bg-gray-900' : 'bg-gray-50'}`}>\n      <div className=\"container mx-auto p-4 md:p-6 lg:p-8\">\n        <div className=\"flex flex-col md:flex-row justify-between items-start md:items-center gap-4 mb-8\">\n          <div>\n            <h1 className={`text-3xl md:text-4xl font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n              Analytics Dashboard\n            </h1>\n            <p className={`mt-2 ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n              Real-time insights and performance metrics\n            </p>\n          </div>\n          \n          <div className=\"flex gap-2\">\n            <Button\n              variant=\"outline\"\n              size=\"icon\"\n              onClick={toggleDarkMode}\n              className={isDarkMode ? 'border-gray-700' : ''}\n            >\n              {isDarkMode ? <Sun className=\"h-5 w-5\" /> : <Moon className=\"h-5 w-5\" />}\n            </Button>\n            \n            <Button\n              variant=\"outline\"\n              onClick={handleRefresh}\n              disabled={isRefreshing}\n              className={isDarkMode ? 'border-gray-700' : ''}\n            >\n              <RefreshCw className={`h-4 w-4 mr-2 ${isRefreshing ? 'animate-spin' : ''}`} />\n              Refresh\n            </Button>\n          </div>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 md:gap-6 mb-8\">\n          {metrics.map((metric, index) => {\n            const Icon = metric.id === '1' ? DollarSign : \n                        metric.id === '2' ? Users : \n                        metric.id === '3' ? ShoppingCart : Target;\n            \n            const TrendIcon = metric.trend === 'up' ? TrendingUp : TrendingDown;\n            const trendColor = metric.trend === 'up' ? 'text-green-500' : 'text-red-500';\n            const trendBgColor = metric.trend === 'up' ? 'bg-green-50 dark:bg-green-900/20' : 'bg-red-50 dark:bg-red-900/20';\n\n            return (\n              <motion.div\n                key={metric.id}\n                initial={{ opacity: 0, y: 20 }}\n                animate={{ opacity: 1, y: 0 }}\n                transition={{ duration: 0.4, delay: index * 0.1 }}\n              >\n                <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n                  <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                    <CardTitle className={`text-sm font-medium ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                      {metric.label}\n                    </CardTitle>\n                    <div className={`p-2 rounded-lg ${isDarkMode ? 'bg-gray-700' : 'bg-gray-100'}`}>\n                      <Icon className={`h-4 w-4 ${isDarkMode ? 'text-gray-300' : 'text-gray-600'}`} />\n                    </div>\n                  </CardHeader>\n                  <CardContent>\n                    <motion.div\n                      initial={{ scale: 0.5 }}\n                      animate={{ scale: 1 }}\n                      transition={{ duration: 0.5, delay: index * 0.1 + 0.2 }}\n                      className={`text-2xl font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}\n                    >\n                      {metric.id === '1' || metric.id === '3' ? \n                        `$${metric.value.toLocaleString()}` : \n                        metric.id === '4' ? \n                        `${metric.value}%` : \n                        metric.value.toLocaleString()\n                      }\n                    </motion.div>\n                    <div className=\"flex items-center mt-2\">\n                      <div className={`flex items-center gap-1 px-2 py-1 rounded-full ${trendBgColor}`}>\n                        <TrendIcon className={`h-3 w-3 ${trendColor}`} />\n                        <span className={`text-xs font-medium ${trendColor}`}>\n                          {Math.abs(metric.change)}%\n                        </span>\n                      </div>\n                      <span className={`text-xs ml-2 ${isDarkMode ? 'text-gray-400' : 'text-gray-500'}`}>\n                        vs last period\n                      </span>\n                    </div>\n                  </CardContent>\n                </Card>\n              </motion.div>\n            );\n          })}\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-4 md:gap-6 mb-8\">\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Revenue Overview</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Daily revenue trends\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"w-full h-[300px] md:h-[350px]\">\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <LineChart\n                    data={chartData}\n                    margin={{ top: 5, right: 10, left: 0, bottom: 5 }}\n                  >\n                    <CartesianGrid \n                      strokeDasharray=\"3 3\" \n                      stroke={isDarkMode ? '#374151' : '#e5e7eb'}\n                    />\n                    <XAxis \n                      dataKey=\"date\" \n                      stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                      tick={{ fill: isDarkMode ? '#9ca3af' : '#6b7280', fontSize: 12 }}\n                      tickFormatter={(value) => new Date(value).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n                    />\n                    <YAxis \n                      stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                      tick={{ fill: isDarkMode ? '#9ca3af' : '#6b7280', fontSize: 12 }}\n                      tickFormatter={(value) => `$${(value / 1000).toFixed(0)}k`}\n                    />\n                    <Tooltip content={<CustomTooltip isDark={isDarkMode} />} />\n                    <Line \n                      type=\"monotone\" \n                      dataKey=\"revenue\" \n                      stroke=\"#3b82f6\" \n                      strokeWidth={2}\n                      dot={{ fill: '#3b82f6', r: 4 }}\n                      activeDot={{ r: 6, fill: '#2563eb' }}\n                    />\n                  </LineChart>\n                </ResponsiveContainer>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>User Growth</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Active users over time\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"relative h-64 md:h-80\">\n                <svg className=\"w-full h-full\" viewBox=\"0 0 700 300\" preserveAspectRatio=\"none\">\n                  <defs>\n                    <linearGradient id=\"userGradient\" x1=\"0%\" y1=\"0%\" x2=\"0%\" y2=\"100%\">\n                      <stop offset=\"0%\" stopColor=\"#3b82f6\" stopOpacity=\"0.4\" />\n                      <stop offset=\"100%\" stopColor=\"#3b82f6\" stopOpacity=\"0.05\" />\n                    </linearGradient>\n                  </defs>\n                  \n                  {/* Grid lines */}\n                  {[0, 1, 2, 3, 4].map((i) => (\n                    <line\n                      key={i}\n                      x1=\"0\"\n                      y1={i * 60 + 30}\n                      x2=\"700\"\n                      y2={i * 60 + 30}\n                      stroke={isDarkMode ? '#374151' : '#e5e7eb'}\n                      strokeWidth=\"1\"\n                      strokeDasharray=\"4 4\"\n                    />\n                  ))}\n                  \n                  {/* Area path */}\n                  <motion.path\n                    initial={{ opacity: 0 }}\n                    animate={{ opacity: 1 }}\n                    transition={{ duration: 0.8, delay: 0.2 }}\n                    d={(() => {\n                      const maxUsers = Math.max(...chartData.map(d => d.users));\n                      const points = chartData.map((d, i) => {\n                        const x = (i / (chartData.length - 1)) * 700;\n                        const y = 270 - ((d.users / maxUsers) * 240);\n                        return `${x},${y}`;\n                      });\n                      return `M 0,270 L ${points.join(' L ')} L 700,270 Z`;\n                    })()}\n                    fill=\"url(#userGradient)\"\n                  />\n                  \n                  {/* Line path */}\n                  <motion.path\n                    initial={{ pathLength: 0 }}\n                    animate={{ pathLength: 1 }}\n                    transition={{ duration: 1.5, ease: \"easeInOut\" }}\n                    d={(() => {\n                      const maxUsers = Math.max(...chartData.map(d => d.users));\n                      const points = chartData.map((d, i) => {\n                        const x = (i / (chartData.length - 1)) * 700;\n                        const y = 270 - ((d.users / maxUsers) * 240);\n                        return `${x},${y}`;\n                      });\n                      return `M ${points.join(' L ')}`;\n                    })()}\n                    fill=\"none\"\n                    stroke=\"#3b82f6\"\n                    strokeWidth=\"3\"\n                    strokeLinecap=\"round\"\n                    strokeLinejoin=\"round\"\n                  />\n                  \n                  {/* Data points */}\n                  {chartData.map((d, i) => {\n                    const maxUsers = Math.max(...chartData.map(d => d.users));\n                    const x = (i / (chartData.length - 1)) * 700;\n                    const y = 270 - ((d.users / maxUsers) * 240);\n                    \n                    return (\n                      <motion.g\n                        key={i}\n                        initial={{ scale: 0, opacity: 0 }}\n                        animate={{ scale: 1, opacity: 1 }}\n                        transition={{ duration: 0.3, delay: 0.8 + i * 0.1 }}\n                      >\n                        <circle\n                          cx={x}\n                          cy={y}\n                          r=\"5\"\n                          fill=\"#3b82f6\"\n                          stroke={isDarkMode ? '#1f2937' : '#ffffff'}\n                          strokeWidth=\"2\"\n                          className=\"cursor-pointer hover:r-7 transition-all\"\n                        />\n                        <title>{`${new Date(d.date).toLocaleDateString()}: ${d.users} users`}</title>\n                      </motion.g>\n                    );\n                  })}\n                </svg>\n                \n                {/* X-axis labels */}\n                <div className=\"flex justify-between mt-2 px-1\">\n                  {chartData.map((d, i) => (\n                    <motion.span\n                      key={i}\n                      initial={{ opacity: 0, y: -10 }}\n                      animate={{ opacity: 1, y: 0 }}\n                      transition={{ duration: 0.4, delay: 1 + i * 0.05 }}\n                      className={`text-xs ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}\n                    >\n                      {new Date(d.date).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n                    </motion.span>\n                  ))}\n                </div>\n                \n                {/* Stats summary */}\n                <motion.div\n                  initial={{ opacity: 0, y: 20 }}\n                  animate={{ opacity: 1, y: 0 }}\n                  transition={{ duration: 0.6, delay: 1.2 }}\n                  className=\"flex items-center justify-between mt-4 pt-4 border-t\"\n                  style={{ borderColor: isDarkMode ? '#374151' : '#e5e7eb' }}\n                >\n                  <div className=\"flex items-center gap-2\">\n                    <Users className={`h-5 w-5 ${isDarkMode ? 'text-blue-400' : 'text-blue-600'}`} />\n                    <div>\n                      <p className={`text-sm ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                        Total Users\n                      </p>\n                      <p className={`text-xl font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                        {chartData.reduce((sum, d) => sum + d.users, 0).toLocaleString()}\n                      </p>\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex items-center gap-2\">\n                    <TrendingUp className=\"h-5 w-5 text-green-500\" />\n                    <div className=\"text-right\">\n                      <p className={`text-sm ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                        Growth\n                      </p>\n                      <p className=\"text-xl font-bold text-green-500\">\n                        +{(((chartData[chartData.length - 1].users - chartData[0].users) / chartData[0].users) * 100).toFixed(1)}%\n                      </p>\n                    </div>\n                  </div>\n                </motion.div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-4 md:gap-6 mb-8\">\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Orders Distribution</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                By product category\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <PieChart\n                data={(() => {\n                  const total = chartData.reduce((sum, item) => sum + item.orders, 0);\n                  return chartData.slice(0, 5).map((item, index) => ({\n                    label: item.date,\n                    value: item.orders,\n                    color: pieChartColors[index],\n                    percentage: (item.orders / total) * 100\n                  }));\n                })()}\n                isDarkMode={isDarkMode}\n              />\n            </CardContent>\n          </Card>\n\n          <Card className={`lg:col-span-2 ${isDarkMode ? 'bg-gray-800 border-gray-700' : ''}`}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Performance Metrics</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Combined view of key indicators\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              \n            </CardContent>\n          </Card>\n        </div>\n\n        <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n          <CardHeader>\n            <CardTitle className={isDarkMode ? 'text-white' : ''}>Top Products</CardTitle>\n            <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n              Best performing products by revenue\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              <div className=\"overflow-x-auto\">\n                <Table>\n                  <TableHeader>\n                    <TableRow className={isDarkMode ? 'border-gray-700' : ''}>\n                      <TableHead className={isDarkMode ? 'text-gray-300' : ''}>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => handleSort('product')}\n                          className={`flex items-center gap-1 ${isDarkMode ? 'hover:bg-gray-700' : ''}`}\n                        >\n                          Product\n                          <ArrowUpDown className=\"h-4 w-4\" />\n                        </Button>\n                      </TableHead>\n                      <TableHead className={isDarkMode ? 'text-gray-300' : ''}>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => handleSort('sales')}\n                          className={`flex items-center gap-1 ${isDarkMode ? 'hover:bg-gray-700' : ''}`}\n                        >\n                          Sales\n                          <ArrowUpDown className=\"h-4 w-4\" />\n                        </Button>\n                      </TableHead>\n                      <TableHead className={isDarkMode ? 'text-gray-300' : ''}>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => handleSort('revenue')}\n                          className={`flex items-center gap-1 ${isDarkMode ? 'hover:bg-gray-700' : ''}`}\n                        >\n                          Revenue\n                          <ArrowUpDown className=\"h-4 w-4\" />\n                        </Button>\n                      </TableHead>\n                      <TableHead className={isDarkMode ? 'text-gray-300' : ''}>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => handleSort('status')}\n                          className={`flex items-center gap-1 ${isDarkMode ? 'hover:bg-gray-700' : ''}`}\n                        >\n                          Status\n                          <ArrowUpDown className=\"h-4 w-4\" />\n                        </Button>\n                      </TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {paginatedData.map((row) => (\n                      <TableRow \n                        key={row.id}\n                        className={isDarkMode ? 'border-gray-700 hover:bg-gray-700/50' : ''}\n                      >\n                        <TableCell className={`font-medium ${isDarkMode ? 'text-gray-200' : ''}`}>\n                          {row.product}\n                        </TableCell>\n                        <TableCell className={isDarkMode ? 'text-gray-300' : ''}>\n                          {row.sales.toLocaleString()}\n                        </TableCell>\n                        <TableCell className={isDarkMode ? 'text-gray-300' : ''}>\n                          ${row.revenue.toLocaleString()}\n                        </TableCell>\n                        <TableCell>\n                          <Badge \n                            variant={getStatusBadgeVariant(row.status)}\n                            className=\"capitalize\"\n                          >\n                            {row.status}\n                          </Badge>\n                        </TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              </div>\n\n              <div className=\"flex flex-col sm:flex-row items-center justify-between gap-4 pt-4\">\n                <p className={`text-sm ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                  Showing {((currentPage - 1) * itemsPerPage) + 1} to {Math.min(currentPage * itemsPerPage, sortedTableData.length)} of {sortedTableData.length} products\n                </p>\n                \n                <div className=\"flex items-center gap-2\">\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => setCurrentPage(prev => Math.max(1, prev - 1))}\n                    disabled={currentPage === 1}\n                    className={isDarkMode ? 'border-gray-700' : ''}\n                  >\n                    <ChevronLeft className=\"h-4 w-4\" />\n                    Previous\n                  </Button>\n                  \n                  <div className=\"flex items-center gap-1\">\n                    {Array.from({ length: totalPages }, (_, i) => i + 1).map((page) => (\n                      <Button\n                        key={page}\n                        variant={currentPage === page ? 'default' : 'outline'}\n                        size=\"sm\"\n                        onClick={() => setCurrentPage(page)}\n                        className={`w-8 h-8 p-0 ${isDarkMode && currentPage !== page ? 'border-gray-700' : ''}`}\n                      >\n                        {page}\n                      </Button>\n                    ))}\n                  </div>\n                  \n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => setCurrentPage(prev => Math.min(totalPages, prev + 1))}\n                    disabled={currentPage === totalPages}\n                    className={isDarkMode ? 'border-gray-700' : ''}\n                  >\n                    Next\n                    <ChevronRight className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 md:gap-6 mt-8\">\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Recent Activity</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <ActivityFeed isDarkMode={isDarkMode} />\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Quick Stats</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {mockQuickStats.map((stat, index) => {\n                  const Icon = stat.icon;\n                  return (\n                    <motion.div\n                      key={stat.id}\n                      initial={{ opacity: 0, x: -20 }}\n                      animate={{ opacity: 1, x: 0 }}\n                      transition={{ delay: index * 0.1 }}\n                      className={`p-4 rounded-lg border ${\n                        isDarkMode ? 'bg-gray-700/50 border-gray-600' : 'bg-white border-gray-200'\n                      }`}\n                    >\n                      <div className=\"flex items-start justify-between mb-3\">\n                        <div className=\"flex items-center gap-2\">\n                          <div className={`p-2 rounded-lg ${\n                            isDarkMode ? 'bg-gray-600' : 'bg-gray-100'\n                          }`}>\n                            <Icon className={`h-4 w-4 ${isDarkMode ? 'text-gray-300' : 'text-gray-600'}`} />\n                          </div>\n                          <div>\n                            <p className={`text-sm ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                              {stat.label}\n                            </p>\n                            <p className={`text-2xl font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                              {stat.label.includes('Value') || stat.label.includes('Order') \n                                ? `$${stat.value.toFixed(2)}` \n                                : `${stat.value}%`}\n                            </p>\n                          </div>\n                        </div>\n                        <div className={`flex items-center gap-1 px-2 py-1 rounded-full text-xs font-medium ${\n                          stat.trend === 'up'\n                            ? isDarkMode ? 'bg-green-900/30 text-green-400' : 'bg-green-100 text-green-700'\n                            : isDarkMode ? 'bg-red-900/30 text-red-400' : 'bg-red-100 text-red-700'\n                        }`}>\n                          {stat.trend === 'up' ? (\n                            <TrendingUp className=\"h-3 w-3\" />\n                          ) : (\n                            <TrendingDown className=\"h-3 w-3\" />\n                          )}\n                          {Math.abs(stat.change)}%\n                        </div>\n                      </div>\n                      <Sparkline data={stat.sparklineData} trend={stat.trend} isDark={isDarkMode} />\n                    </motion.div>\n                  );\n                })}\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Alerts</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-3\">\n                {alerts.length === 0 ? (\n                  <p className={`text-sm ${isDarkMode ? 'text-gray-400' : 'text-gray-500'}`}>\n                    No alerts at this time\n                  </p>\n                ) : (\n                  alerts.map((alert, index) => {\n                    const severityConfig = {\n                      success: {\n                        icon: CheckCircle,\n                        bgColor: isDarkMode ? 'bg-green-900/20' : 'bg-green-50',\n                        borderColor: 'border-green-500',\n                        iconColor: 'text-green-500',\n                        textColor: isDarkMode ? 'text-green-400' : 'text-green-700'\n                      },\n                      warning: {\n                        icon: AlertTriangle,\n                        bgColor: isDarkMode ? 'bg-yellow-900/20' : 'bg-yellow-50',\n                        borderColor: 'border-yellow-500',\n                        iconColor: 'text-yellow-500',\n                        textColor: isDarkMode ? 'text-yellow-400' : 'text-yellow-700'\n                      },\n                      error: {\n                        icon: XCircle,\n                        bgColor: isDarkMode ? 'bg-red-900/20' : 'bg-red-50',\n                        borderColor: 'border-red-500',\n                        iconColor: 'text-red-500',\n                        textColor: isDarkMode ? 'text-red-400' : 'text-red-700'\n                      },\n                      info: {\n                        icon: AlertTriangle,\n                        bgColor: isDarkMode ? 'bg-blue-900/20' : 'bg-blue-50',\n                        borderColor: 'border-blue-500',\n                        iconColor: 'text-blue-500',\n                        textColor: isDarkMode ? 'text-blue-400' : 'text-blue-700'\n                      }\n                    };\n\n                    const config = severityConfig[alert.severity];\n                    const Icon = config.icon;\n\n                    return (\n                      <motion.div\n                        key={alert.id}\n                        initial={{ opacity: 0, x: -20 }}\n                        animate={{ opacity: 1, x: 0 }}\n                        exit={{ opacity: 0, x: 20 }}\n                        transition={{ delay: index * 0.1 }}\n                        className={`relative p-3 rounded-lg border-l-4 ${config.bgColor} ${config.borderColor}`}\n                      >\n                        <div className=\"flex items-start gap-3\">\n                          <Icon className={`h-5 w-5 mt-0.5 flex-shrink-0 ${config.iconColor}`} />\n                          <div className=\"flex-1 min-w-0\">\n                            <p className={`text-sm font-medium ${config.textColor}`}>\n                              {alert.message}\n                            </p>\n                            <p className={`text-xs mt-1 ${isDarkMode ? 'text-gray-500' : 'text-gray-400'}`}>\n                              {alert.timestamp}\n                            </p>\n                          </div>\n                          <button\n                            onClick={() => dismissAlert(alert.id)}\n                            className={`flex-shrink-0 p-1 rounded hover:bg-gray-200 dark:hover:bg-gray-700 transition-colors ${\n                              isDarkMode ? 'text-gray-400 hover:text-gray-300' : 'text-gray-500 hover:text-gray-700'\n                            }`}\n                            aria-label=\"Dismiss alert\"\n                          >\n                            <X className=\"h-4 w-4\" />\n                          </button>\n                        </div>\n                      </motion.div>\n                    );\n                  })\n                )}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}",
    "error": null,
    "elapsed_time": 99.38362860679626,
    "success": true
  }
}