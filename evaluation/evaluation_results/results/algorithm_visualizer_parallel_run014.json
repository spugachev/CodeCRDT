{
  "prompt_id": "algorithm_visualizer",
  "prompt_name": "Algorithm Visualizer",
  "mode": "parallel",
  "run_number": 14,
  "timestamp": "2025-10-13T20:34:20.343974",
  "response_time": 104.38258004188538,
  "total_tokens": null,
  "response_content": "import { useState, useCallback } from 'react';\nimport { useEffect } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Slider } from '@/components/ui/slider';\nimport { Play, Pause, RotateCcw, Zap, BarChart3 } from 'lucide-react';\nimport { motion } from 'framer-motion';\n\ninterface ArrayElement {\n  value: number;\n  id: string;\n  isComparing?: boolean;\n  isSwapping?: boolean;\n  isSorted?: boolean;\n}\n\ninterface AlgorithmStep {\n  array: ArrayElement[];\n  comparingIndices: number[];\n  swappingIndices: number[];\n  sortedIndices: number[];\n}\n\ntype AlgorithmType = 'bubble' | 'quick' | 'merge' | 'insertion';\n\nconst NEON_COLORS = [\n  '#00ffff',\n  '#ff00ff', \n  '#00ff00',\n  '#ffff00',\n  '#ff0066',\n  '#00ffaa'\n];\n\nconst mockAlgorithms = [\n  { id: 'bubble', name: 'Bubble Sort', complexity: 'O(n\u00b2)' },\n  { id: 'quick', name: 'Quick Sort', complexity: 'O(n log n)' },\n  { id: 'merge', name: 'Merge Sort', complexity: 'O(n log n)' },\n  { id: 'insertion', name: 'Insertion Sort', complexity: 'O(n\u00b2)' }\n];\n\nexport default function AlgorithmVisualizer() {\n  const [array, setArray] = useState<ArrayElement[]>([]);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [speed, setSpeed] = useState([50]);\n  const [arraySize, setArraySize] = useState([20]);\n  const [selectedAlgorithm, setSelectedAlgorithm] = useState<AlgorithmType>('bubble');\n  const [currentStep, setCurrentStep] = useState(0);\n  const [steps, setSteps] = useState<AlgorithmStep[]>([]);\n\n  const generateRandomArray = useCallback(() => {\n    const newArray: ArrayElement[] = Array.from({ length: arraySize[0] }, (_, i) => ({\n      value: Math.floor(Math.random() * 100) + 5,\n      id: `element-${i}-${Date.now()}`,\n      isComparing: false,\n      isSwapping: false,\n      isSorted: false\n    }));\n    setArray(newArray);\n    setSteps([]);\n    setCurrentStep(0);\n    setIsPlaying(false);\n  }, [arraySize]);\n\n  const resetVisualization = useCallback(() => {\n\nsetIsPlaying(false);\n    setCurrentStep(0);\n    setSteps([]);\n    generateRandomArray();\n    }, [generateRandomArray]);\n\n  const animateSteps = useCallback(() => {\n    if (currentStep >= steps.length) {\n      setIsPlaying(false);\n      return;\n    }\n\n    const step = steps[currentStep];\n    setArray(step.array);\n    setCurrentStep(prev => prev + 1);\n  }, [currentStep, steps]);\n  useEffect(() => {\n    if (!isPlaying) return;\n\n    const delay = 1000 - (speed[0] * 9.5);\n    const timer = setTimeout(() => {\n      animateSteps();\n    }, delay);\n\n    return () => clearTimeout(timer);\n  }, [isPlaying, speed, animateSteps]);\n  const startVisualization = useCallback(() => {\n    if (steps.length === 0) return;\n    if (currentStep >= steps.length) {\n      setCurrentStep(0);\n    }\n    setIsPlaying(true);\n    \n  }, [steps, speed, currentStep]);\n\n  const pauseVisualization = useCallback(() => {    setIsPlaying(false);\n  }, []);\n\n  const generateSortingSteps = useCallback((algorithm: AlgorithmType) => {\n    const sortedArray = [...array];\n    const newSteps: AlgorithmStep[] = [];\n\n    const addStep = (arr: ArrayElement[], comparing: number[] = [], swapping: number[] = [], sorted: number[] = []) => {\n      newSteps.push({\n        array: arr.map(el => ({ ...el })),\n        comparingIndices: [...comparing],\n        swappingIndices: [...swapping],\n        sortedIndices: [...sorted]\n      });\n    };\n\n    // Initial state\n    addStep(sortedArray);\n\n    switch (algorithm) {\n      case 'bubble': {\n        const sortedSet = new Set<number>();\n        for (let i = 0; i < sortedArray.length - 1; i++) {\n          for (let j = 0; j < sortedArray.length - i - 1; j++) {\n            // Comparing\n            addStep(sortedArray, [j, j + 1], [], Array.from(sortedSet));\n            \n            if (sortedArray[j].value > sortedArray[j + 1].value) {\n              // Swapping\n              addStep(sortedArray, [], [j, j + 1], Array.from(sortedSet));\n              [sortedArray[j], sortedArray[j + 1]] = [sortedArray[j + 1], sortedArray[j]];\n              addStep(sortedArray, [], [], Array.from(sortedSet));\n            }\n          }\n          sortedSet.add(sortedArray.length - i - 1);\n          addStep(sortedArray, [], [], Array.from(sortedSet));\n        }\n        sortedSet.add(0);\n        addStep(sortedArray, [], [], Array.from(sortedSet));\n        break;\n      }\n\n      case 'insertion': {\n        const sortedSet = new Set<number>([0]);\n        addStep(sortedArray, [], [], [0]);\n        \n        for (let i = 1; i < sortedArray.length; i++) {\n          const key = sortedArray[i];\n          let j = i - 1;\n          \n          addStep(sortedArray, [i], [], Array.from(sortedSet));\n          \n          while (j >= 0 && sortedArray[j].value > key.value) {\n            addStep(sortedArray, [j, j + 1], [], Array.from(sortedSet));\n            addStep(sortedArray, [], [j, j + 1], Array.from(sortedSet));\n            sortedArray[j + 1] = sortedArray[j];\n            addStep(sortedArray, [], [], Array.from(sortedSet));\n            j--;\n          }\n          \n          sortedArray[j + 1] = key;\n          sortedSet.add(i);\n          addStep(sortedArray, [], [], Array.from(sortedSet));\n        }\n        break;\n      }\n\n      case 'quick': {\n        const sortedSet = new Set<number>();\n        \n        const partition = (low: number, high: number): number => {\n          const pivot = sortedArray[high];\n          addStep(sortedArray, [high], [], Array.from(sortedSet));\n          let i = low - 1;\n\n          for (let j = low; j < high; j++) {\n            addStep(sortedArray, [j, high], [], Array.from(sortedSet));\n            \n            if (sortedArray[j].value < pivot.value) {\n              i++;\n              if (i !== j) {\n                addStep(sortedArray, [], [i, j], Array.from(sortedSet));\n                [sortedArray[i], sortedArray[j]] = [sortedArray[j], sortedArray[i]];\n                addStep(sortedArray, [], [], Array.from(sortedSet));\n              }\n            }\n          }\n\n          addStep(sortedArray, [], [i + 1, high], Array.from(sortedSet));\n          [sortedArray[i + 1], sortedArray[high]] = [sortedArray[high], sortedArray[i + 1]];\n          addStep(sortedArray, [], [], Array.from(sortedSet));\n          \n          return i + 1;\n        };\n\n        const quickSort = (low: number, high: number) => {\n          if (low < high) {\n            const pi = partition(low, high);\n            sortedSet.add(pi);\n            addStep(sortedArray, [], [], Array.from(sortedSet));\n            \n            quickSort(low, pi - 1);\n            quickSort(pi + 1, high);\n          } else if (low === high) {\n            sortedSet.add(low);\n            addStep(sortedArray, [], [], Array.from(sortedSet));\n          }\n        };\n\n        quickSort(0, sortedArray.length - 1);\n        break;\n      }\n\n      case 'merge': {\n        const sortedSet = new Set<number>();\n        \n        const merge = (left: number, mid: number, right: number) => {\n          const leftArr = sortedArray.slice(left, mid + 1);\n          const rightArr = sortedArray.slice(mid + 1, right + 1);\n          \n          let i = 0, j = 0, k = left;\n\n          while (i < leftArr.length && j < rightArr.length) {\n            addStep(sortedArray, [left + i, mid + 1 + j], [], Array.from(sortedSet));\n            \n            if (leftArr[i].value <= rightArr[j].value) {\n              sortedArray[k] = leftArr[i];\n              i++;\n            } else {\n              sortedArray[k] = rightArr[j];\n              j++;\n            }\n            addStep(sortedArray, [], [k], Array.from(sortedSet));\n            k++;\n          }\n\n          while (i < leftArr.length) {\n            sortedArray[k] = leftArr[i];\n            addStep(sortedArray, [], [k], Array.from(sortedSet));\n            i++;\n            k++;\n          }\n\n          while (j < rightArr.length) {\n            sortedArray[k] = rightArr[j];\n            addStep(sortedArray, [], [k], Array.from(sortedSet));\n            j++;\n            k++;\n          }\n\n          for (let idx = left; idx <= right; idx++) {\n            sortedSet.add(idx);\n          }\n          addStep(sortedArray, [], [], Array.from(sortedSet));\n        };\n\n        const mergeSort = (left: number, right: number) => {\n          if (left < right) {\n            const mid = Math.floor((left + right) / 2);\n            mergeSort(left, mid);\n            mergeSort(mid + 1, right);\n            merge(left, mid, right);\n          } else if (left === right) {\n            sortedSet.add(left);\n            addStep(sortedArray, [], [], Array.from(sortedSet));\n          }\n        };\n\n        mergeSort(0, sortedArray.length - 1);\n        break;\n      }\n    }\n\n    setSteps(newSteps);\n    setCurrentStep(0);\n  }, [array]);\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-gray-900 via-purple-900 to-gray-900 p-8\">\n      <div className=\"max-w-7xl mx-auto space-y-8\">\n        <motion.div\n          initial={{ opacity: 0, y: -20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.8 }}\n          className=\"text-center space-y-4\"\n        >\n          <motion.h1\n            className=\"text-6xl font-bold bg-gradient-to-r from-cyan-400 via-purple-400 to-pink-400 bg-clip-text text-transparent\"\n            animate={{\n              textShadow: [\n                '0 0 20px rgba(0, 255, 255, 0.5)',\n                '0 0 40px rgba(255, 0, 255, 0.5)',\n                '0 0 20px rgba(0, 255, 255, 0.5)'\n              ]\n            }}\n            transition={{ duration: 2, repeat: Infinity }}\n          >\n            Algorithm Visualizer\n          </motion.h1>\n          \n          <div className=\"flex items-center justify-center gap-4\">\n            <motion.div\n              initial={{ scale: 0 }}\n              animate={{ scale: 1 }}\n              transition={{ delay: 0.3, type: 'spring' }}\n              className=\"px-6 py-2 bg-purple-500/20 border border-purple-400/50 rounded-full backdrop-blur-sm\"\n            >\n              <span className=\"text-2xl font-semibold text-purple-300\">\n                {mockAlgorithms.find(a => a.id === selectedAlgorithm)?.name || 'Bubble Sort'}\n              </span>\n            </motion.div>\n            \n            <motion.div\n              initial={{ scale: 0 }}\n              animate={{ scale: 1 }}\n              transition={{ delay: 0.5, type: 'spring' }}\n              className=\"px-4 py-2 bg-cyan-500/20 border border-cyan-400/50 rounded-full backdrop-blur-sm relative overflow-hidden\"\n            >\n              <motion.div\n                className=\"absolute inset-0 bg-gradient-to-r from-transparent via-cyan-400/20 to-transparent\"\n                animate={{ x: ['-100%', '200%'] }}\n                transition={{ duration: 2, repeat: Infinity, ease: 'linear' }}\n              />\n              <div className=\"relative flex items-center gap-2\">\n                <Zap className=\"w-4 h-4 text-cyan-400\" />\n                <span className=\"text-lg font-mono text-cyan-300\">\n                  {mockAlgorithms.find(a => a.id === selectedAlgorithm)?.complexity || 'O(n\u00b2)'}\n                </span>\n              </div>\n            </motion.div>\n          </div>\n        </motion.div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-6\">\n          <div className=\"lg:col-span-1 space-y-6\">\n            <motion.div\n              initial={{ opacity: 0, x: -50 }}\n              animate={{ opacity: 1, x: 0 }}\n              className=\"bg-gray-900/50 backdrop-blur-lg border border-cyan-500/30 rounded-xl p-6 shadow-[0_0_30px_rgba(0,255,255,0.3)] hover:shadow-[0_0_50px_rgba(0,255,255,0.5)] transition-shadow duration-300\"\n            >\n              <div className=\"space-y-6\">\n                {/* Algorithm Selection */}\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center gap-2 text-cyan-400\">\n                    <Zap className=\"w-4 h-4\" />\n                    <h3 className=\"text-sm font-semibold uppercase tracking-wider\">Algorithm</h3>\n                  </div>\n                  <div className=\"grid grid-cols-1 gap-2\">\n                    {mockAlgorithms.map((algo) => (\n                      <button\n                        key={algo.id}\n                        onClick={() => setSelectedAlgorithm(algo.id as AlgorithmType)}\n                        disabled={isPlaying}\n                        className={`p-3 rounded-lg border transition-all duration-300 text-left ${\n                          selectedAlgorithm === algo.id\n                            ? 'bg-cyan-500/20 border-cyan-400 shadow-[0_0_20px_rgba(0,255,255,0.4)]'\n                            : 'bg-gray-800/50 border-gray-700 hover:border-cyan-500/50 hover:bg-gray-800'\n                        } disabled:opacity-50 disabled:cursor-not-allowed`}\n                      >\n                        <div className=\"font-medium text-white\">{algo.name}</div>\n                        <div className=\"text-xs text-gray-400 mt-1\">{algo.complexity}</div>\n                      </button>\n                    ))}\n                  </div>\n                </div>\n\n                {/* Array Size Control */}\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center gap-2 text-purple-400\">\n                    <BarChart3 className=\"w-4 h-4\" />\n                    <h3 className=\"text-sm font-semibold uppercase tracking-wider\">Array Size</h3>\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Slider\n                      value={arraySize}\n                      onValueChange={setArraySize}\n                      min={5}\n                      max={50}\n                      step={1}\n                      disabled={isPlaying}\n                      className=\"cursor-pointer\"\n                    />\n                    <div className=\"text-center\">\n                      <span className=\"text-2xl font-bold text-white bg-gradient-to-r from-cyan-400 to-purple-400 bg-clip-text text-transparent\">\n                        {arraySize[0]}\n                      </span>\n                      <span className=\"text-xs text-gray-400 ml-2\">elements</span>\n                    </div>\n                  </div>\n                </div>\n\n                {/* Speed Control */}\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center gap-2 text-pink-400\">\n                    <Zap className=\"w-4 h-4\" />\n                    <h3 className=\"text-sm font-semibold uppercase tracking-wider\">Speed</h3>\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Slider\n                      value={speed}\n                      onValueChange={setSpeed}\n                      min={10}\n                      max={100}\n                      step={10}\n                      className=\"cursor-pointer\"\n                    />\n                    <div className=\"text-center\">\n                      <span className=\"text-2xl font-bold text-white bg-gradient-to-r from-pink-400 to-yellow-400 bg-clip-text text-transparent\">\n                        {speed[0]}%\n                      </span>\n                    </div>\n                  </div>\n                </div>\n\n                {/* Control Buttons */}\n                <div className=\"space-y-3 pt-4 border-t border-gray-700/50\">\n                  <Button\n                    onClick={isPlaying ? pauseVisualization : startVisualization}\n                    disabled={steps.length === 0 || (currentStep >= steps.length && !isPlaying)}\n                    className=\"w-full bg-gradient-to-r from-cyan-500 to-blue-500 hover:from-cyan-600 hover:to-blue-600 text-white font-semibold shadow-[0_0_20px_rgba(0,255,255,0.5)] hover:shadow-[0_0_30px_rgba(0,255,255,0.7)] transition-all duration-300\"\n                  >\n                    {isPlaying ? (\n                      <>\n                        <Pause className=\"w-4 h-4 mr-2\" />\n                        Pause\n                      </>\n                    ) : (\n                      <>\n                        <Play className=\"w-4 h-4 mr-2\" />\n                        {currentStep >= steps.length ? 'Start' : 'Resume'}\n                      </>\n                    )}\n                  </Button>\n\n                  <Button\n                    onClick={resetVisualization}\n                    variant=\"outline\"\n                    className=\"w-full border-purple-500/50 text-purple-400 hover:bg-purple-500/20 hover:border-purple-400 shadow-[0_0_15px_rgba(168,85,247,0.3)] hover:shadow-[0_0_25px_rgba(168,85,247,0.5)] transition-all duration-300\"\n                  >\n                    <RotateCcw className=\"w-4 h-4 mr-2\" />\n                    Reset\n                  </Button>\n\n                  <Button\n                    onClick={() => {\n                      generateSortingSteps(selectedAlgorithm);\n                      setCurrentStep(0);\n                    }}\n                    disabled={isPlaying || array.length === 0}\n                    variant=\"outline\"\n                    className=\"w-full border-pink-500/50 text-pink-400 hover:bg-pink-500/20 hover:border-pink-400 shadow-[0_0_15px_rgba(255,0,102,0.3)] hover:shadow-[0_0_25px_rgba(255,0,102,0.5)] transition-all duration-300\"\n                  >\n                    <Zap className=\"w-4 h-4 mr-2\" />\n                    Generate Steps\n                  </Button>\n                </div>\n\n                {/* Stats Display */}\n                <div className=\"pt-4 border-t border-gray-700/50 space-y-2\">\n                  <div className=\"flex justify-between text-sm\">\n                    <span className=\"text-gray-400\">Current Step:</span>\n                    <span className=\"text-cyan-400 font-mono font-bold\">{currentStep}</span>\n                  </div>\n                  <div className=\"flex justify-between text-sm\">\n                    <span className=\"text-gray-400\">Total Steps:</span>\n                    <span className=\"text-purple-400 font-mono font-bold\">{steps.length}</span>\n                  </div>\n                  <div className=\"mt-3 h-2 bg-gray-800 rounded-full overflow-hidden\">\n                    <motion.div\n                      className=\"h-full bg-gradient-to-r from-cyan-500 via-purple-500 to-pink-500\"\n                      initial={{ width: 0 }}\n                      animate={{ width: steps.length > 0 ? `${(currentStep / steps.length) * 100}%` : '0%' }}\n                      transition={{ duration: 0.3 }}\n                    />\n                  </div>\n                </div>\n              </div>\n            </motion.div>\n            \n            <div className=\"bg-gray-900/50 backdrop-blur-lg border border-cyan-500/30 rounded-xl p-6 shadow-2xl shadow-cyan-500/20\">\n              <div className=\"space-y-6\">\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center gap-2 text-cyan-400 mb-2\">\n                    <Zap className=\"w-4 h-4\" />\n                    <span className=\"text-sm font-semibold tracking-wider\">ALGORITHM</span>\n                  </div>\n                  <div className=\"grid grid-cols-1 gap-3\">\n                    {mockAlgorithms.map((algo) => (\n                      <motion.button\n                        key={algo.id}\n                        onClick={() => setSelectedAlgorithm(algo.id as AlgorithmType)}\n                        className={`relative p-4 rounded-lg border-2 transition-all duration-300 text-left ${\n                          selectedAlgorithm === algo.id\n                            ? 'border-cyan-400 bg-cyan-500/20 shadow-lg shadow-cyan-500/50'\n                            : 'border-gray-700 bg-gray-800/50 hover:border-cyan-500/50 hover:bg-cyan-500/10'\n                        }`}\n                        whileHover={{ scale: 1.02 }}\n                        whileTap={{ scale: 0.98 }}\n                      >\n                        <div className=\"flex flex-col gap-1\">\n                          <span className={`font-semibold ${\n                            selectedAlgorithm === algo.id ? 'text-cyan-300' : 'text-gray-300'\n                          }`}>\n                            {algo.name}\n                          </span>\n                          <span className={`text-xs font-mono ${\n                            selectedAlgorithm === algo.id ? 'text-cyan-400' : 'text-gray-500'\n                          }`}>\n                            {algo.complexity}\n                          </span>\n                        </div>\n                        {selectedAlgorithm === algo.id && (\n                          <motion.div\n                            className=\"absolute inset-0 rounded-lg border-2 border-cyan-400\"\n                            initial={{ opacity: 0 }}\n                            animate={{ opacity: [0.5, 1, 0.5] }}\n                            transition={{ duration: 2, repeat: Infinity }}\n                          />\n                        )}\n                      </motion.button>\n                    ))}\n                  </div>\n                </div></parameter>\n\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <label className=\"text-cyan-400 text-sm font-medium flex items-center gap-2\">\n                      <Zap className=\"w-4 h-4\" />\n                      Speed\n                    </label>\n                    <span className=\"text-cyan-300 text-xs\">{speed[0]}ms</span>\n                  </div>\n                  <Slider\n                    value={speed}\n                    onValueChange={setSpeed}\n                    min={10}\n                    max={200}\n                    step={10}\n                    className=\"[&_[role=slider]]:bg-cyan-400 [&_[role=slider]]:border-cyan-300 [&_[role=slider]]:shadow-[0_0_15px_rgba(34,211,238,0.8)] [&_[role=slider]]:hover:shadow-[0_0_25px_rgba(34,211,238,1)] [&_[role=slider]]:transition-shadow [&_.relative]:bg-gray-700/50 [&_.relative]:border [&_.relative]:border-cyan-500/30 [&_.bg-primary]:bg-gradient-to-r [&_.bg-primary]:from-cyan-500 [&_.bg-primary]:to-purple-500 [&_.bg-primary]:shadow-[0_0_10px_rgba(34,211,238,0.5)]\"\n                  />\n                </div>\n\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <label className=\"text-cyan-400 text-sm font-medium flex items-center gap-2\">\n                      <BarChart3 className=\"w-4 h-4\" />\n                      Array Size\n                    </label>\n                    <span className=\"text-cyan-300 text-xs\">{arraySize[0]}</span>\n                  </div>\n                  <Slider\n                    value={arraySize}\n                    onValueChange={setArraySize}\n                    min={5}\n                    max={50}\n                    step={1}\n                    className=\"[&_[role=slider]]:bg-gradient-to-r [&_[role=slider]]:from-purple-500 [&_[role=slider]]:to-pink-500 [&_[role=slider]]:border-2 [&_[role=slider]]:border-purple-300 [&_[role=slider]]:shadow-lg [&_[role=slider]]:shadow-purple-500/50 [&_[role=slider]]:transition-all [&_[role=slider]]:hover:shadow-xl [&_[role=slider]]:hover:shadow-purple-500/70 [&>span]:bg-gradient-to-r [&>span]:from-purple-500/30 [&>span]:to-pink-500/30 [&>span]:h-2\"\n                    disabled={isPlaying}\n                  />\n</parameter>\n</invoke>\n                </div>\n\n                <div className=\"flex gap-3 pt-4\">\n                  <motion.button\n                    onClick={isPlaying ? pauseVisualization : startVisualization}\n                    disabled={array.length === 0 || (steps.length === 0 && !isPlaying)}\n                    className=\"relative flex-1 group overflow-hidden\"\n                    whileHover={{ scale: 1.05 }}\n                    whileTap={{ scale: 0.95 }}\n                  >\n                    <motion.div\n                      className={`relative px-6 py-3 rounded-lg font-semibold text-white transition-all duration-300 ${\n                        isPlaying\n                          ? 'bg-gradient-to-r from-yellow-500 to-orange-500 shadow-[0_0_30px_rgba(251,191,36,0.6)]'\n                          : 'bg-gradient-to-r from-cyan-500 to-purple-500 shadow-[0_0_30px_rgba(34,211,238,0.6)]'\n                      } disabled:opacity-50 disabled:cursor-not-allowed`}\n                      animate={{\n                        boxShadow: isPlaying\n                          ? [\n                              '0 0 30px rgba(251,191,36,0.6)',\n                              '0 0 50px rgba(251,191,36,0.8)',\n                              '0 0 30px rgba(251,191,36,0.6)'\n                            ]\n                          : [\n                              '0 0 30px rgba(34,211,238,0.6)',\n                              '0 0 50px rgba(34,211,238,0.8)',\n                              '0 0 30px rgba(34,211,238,0.6)'\n                            ]\n                      }}\n                      transition={{ duration: 2, repeat: Infinity }}\n                    >\n                      <motion.div\n                        className=\"absolute inset-0 bg-gradient-to-r from-transparent via-white/30 to-transparent\"\n                        animate={{ x: ['-200%', '200%'] }}\n                        transition={{ duration: 2, repeat: Infinity, ease: 'linear' }}\n                      />\n                      <div className=\"relative flex items-center justify-center gap-2\">\n                        <motion.div\n                          key={isPlaying ? 'pause' : 'play'}\n                          initial={{ scale: 0, rotate: -180 }}\n                          animate={{ scale: 1, rotate: 0 }}\n                          exit={{ scale: 0, rotate: 180 }}\n                          transition={{ type: 'spring', stiffness: 200, damping: 15 }}\n                        >\n                          {isPlaying ? (\n                            <Pause className=\"w-5 h-5\" fill=\"currentColor\" />\n                          ) : (\n                            <Play className=\"w-5 h-5\" fill=\"currentColor\" />\n                          )}\n                        </motion.div>\n                        <span className=\"text-sm uppercase tracking-wider\">\n                          {isPlaying ? 'Pause' : 'Play'}\n                        </span>\n                      </div>\n                    </motion.div>\n                  </motion.button>\n                  <motion.button\n                    onClick={resetVisualization}\n                    className=\"flex-1 bg-gradient-to-r from-pink-500 to-rose-500 hover:from-pink-600 hover:to-rose-600 text-white font-semibold py-3 px-4 rounded-lg shadow-[0_0_20px_rgba(236,72,153,0.5)] hover:shadow-[0_0_30px_rgba(236,72,153,0.8)] transition-all duration-300 flex items-center justify-center gap-2\"\n                    whileHover={{ scale: 1.05 }}\n                    whileTap={{ scale: 0.95, rotate: 360 }}\n                    transition={{ \n                      rotate: { duration: 0.6, ease: \"easeInOut\" },\n                      scale: { duration: 0.2 }\n                    }}\n                  >\n                    <motion.div\n                      animate={{ rotate: 0 }}\n                      whileTap={{ rotate: 360 }}\n                      transition={{ duration: 0.6, ease: \"easeInOut\" }}\n                    >\n                      <RotateCcw className=\"w-4 h-4\" />\n                    </motion.div>\n                    Reset\n                  </motion.button></parameter>\n                </div>\n              </div>\n            </div>\n\n            {/* TODO:StatsPanel Real-time statistics panel showing comparisons, swaps, and progress */}\n          </div>\n\n          <div className=\"lg:col-span-3\">\n            <div className=\"bg-gray-900/50 backdrop-blur-lg border border-purple-500/30 rounded-xl p-8 shadow-2xl shadow-purple-500/20 min-h-[600px]\">\n                            {array.length === 0 ? (\n                <motion.div\n                  initial={{ opacity: 0, scale: 0.8 }}\n                  animate={{ opacity: 1, scale: 1 }}\n                  className=\"flex flex-col items-center justify-center h-full space-y-6\"\n                >\n                  <motion.div\n                    animate={{\n                      rotate: [0, 360],\n                      scale: [1, 1.2, 1]\n                    }}\n                    transition={{\n                      duration: 3,\n                      repeat: Infinity,\n                      ease: \"easeInOut\"\n                    }}\n                  >\n                    <BarChart3 className=\"w-24 h-24 text-cyan-400\" style={{\n                      filter: 'drop-shadow(0 0 20px rgba(0, 255, 255, 0.6))'\n                    }} />\n                  </motion.div>\n                  <div className=\"text-center space-y-2\">\n                    <h3 className=\"text-2xl font-bold text-cyan-300\">\n                      Ready to Visualize\n                    </h3>\n                    <p className=\"text-gray-400\">\n                      Click \"Generate Steps\" to create an array and start sorting\n                    </p>\n                  </div>\n                </motion.div>\n              ) : (\n                <div className=\"relative w-full h-full\">\n                  {/* Comparison Indicators */}\n                  {steps[currentStep]?.comparingIndices.map((index, i) => {\n                    const barWidth = 100 / array.length;\n                    const leftPosition = index * barWidth;\n                    \n                    return (\n                      <motion.div\n                        key={`compare-${index}-${i}`}\n                        initial={{ opacity: 0, y: -20 }}\n                        animate={{ \n                          opacity: [0.5, 1, 0.5],\n                          y: 0,\n                          scale: [1, 1.1, 1]\n                        }}\n                        transition={{\n                          duration: 0.5,\n                          repeat: Infinity,\n                          ease: \"easeInOut\"\n                        }}\n                        className=\"absolute top-0 pointer-events-none z-10\"\n                        style={{\n                          left: `${leftPosition}%`,\n                          width: `${barWidth}%`\n                        }}\n                      >\n                        <div className=\"flex justify-center\">\n                          <motion.div\n                            className=\"w-3 h-3 rounded-full bg-yellow-400\"\n                            style={{\n                              boxShadow: '0 0 20px rgba(255, 255, 0, 0.8), 0 0 40px rgba(255, 255, 0, 0.4)'\n                            }}\n                            animate={{\n                              boxShadow: [\n                                '0 0 20px rgba(255, 255, 0, 0.8), 0 0 40px rgba(255, 255, 0, 0.4)',\n                                '0 0 30px rgba(255, 255, 0, 1), 0 0 60px rgba(255, 255, 0, 0.6)',\n                                '0 0 20px rgba(255, 255, 0, 0.8), 0 0 40px rgba(255, 255, 0, 0.4)'\n                              ]\n                            }}\n                            transition={{ duration: 0.8, repeat: Infinity }}\n                          />\n                        </div>\n                        <motion.div\n                          className=\"w-0.5 h-12 bg-gradient-to-b from-yellow-400 to-transparent mx-auto\"\n                          style={{\n                            boxShadow: '0 0 10px rgba(255, 255, 0, 0.6)'\n                          }}\n                          animate={{\n                            opacity: [0.6, 1, 0.6]\n                          }}\n                          transition={{ duration: 0.8, repeat: Infinity }}\n                        />\n                      </motion.div>\n                    );\n                  })}\n\n                  {/* Swap Indicators */}\n                  {steps[currentStep]?.swappingIndices.map((index, i) => {\n                    const barWidth = 100 / array.length;\n                    const leftPosition = index * barWidth;\n                    \n                    return (\n                      <motion.div\n                        key={`swap-${index}-${i}`}\n                        initial={{ opacity: 0, scale: 0 }}\n                        animate={{ \n                          opacity: [0, 1, 0],\n                          scale: [0.5, 1.5, 0.5],\n                          rotate: [0, 180, 360]\n                        }}\n                        transition={{\n                          duration: 0.6,\n                          repeat: Infinity,\n                          ease: \"easeOut\"\n                        }}\n                        className=\"absolute top-0 pointer-events-none z-20\"\n                        style={{\n                          left: `${leftPosition}%`,\n                          width: `${barWidth}%`\n                        }}\n                      >\n                        <div className=\"flex justify-center\">\n                          <motion.div\n                            className=\"w-4 h-4 rounded-full bg-pink-500 border-2 border-pink-300\"\n                            style={{\n                              boxShadow: '0 0 25px rgba(255, 0, 102, 1), 0 0 50px rgba(255, 0, 102, 0.6)'\n                            }}\n                          />\n                        </div>\n                      </motion.div>\n                    );\n                  })}\n\n                  {/* Animated Bars */}\n                  <div className=\"flex items-end justify-center gap-1 h-full px-4\">\n                    {array.map((element, index) => {\n                      const isComparing = steps[currentStep]?.comparingIndices.includes(index);\n                      const isSwapping = steps[currentStep]?.swappingIndices.includes(index);\n                      const isSorted = steps[currentStep]?.sortedIndices.includes(index);\n                      \n                      const maxValue = Math.max(...array.map(el => el.value));\n                      const heightPercentage = (element.value / maxValue) * 100;\n                      \n                      let barColor = NEON_COLORS[index % NEON_COLORS.length];\n                      let glowColor = barColor;\n                      \n                      if (isSorted) {\n                        barColor = '#00ff00';\n                        glowColor = '#00ff00';\n                      } else if (isSwapping) {\n                        barColor = '#ff0066';\n                        glowColor = '#ff0066';\n                      } else if (isComparing) {\n                        barColor = '#ffff00';\n                        glowColor = '#ffff00';\n                      }\n\n                      return (\n                        <motion.div\n                          key={element.id}\n                          layout\n                          initial={{ height: 0, opacity: 0 }}\n                          animate={{\n                            height: `${heightPercentage}%`,\n                            opacity: 1,\n                            scale: isSwapping ? [1, 1.1, 1] : 1,\n                            y: isSwapping ? [0, -10, 0] : 0\n                          }}\n                          transition={{\n                            height: { duration: 0.3, ease: \"easeOut\" },\n                            opacity: { duration: 0.2 },\n                            scale: { duration: 0.3, repeat: isSwapping ? Infinity : 0 },\n                            y: { duration: 0.3, repeat: isSwapping ? Infinity : 0 },\n                            layout: { duration: 0.4, ease: \"easeInOut\" }\n                          }}\n                          className=\"relative flex-1 min-w-[4px] rounded-t-lg\"\n                          style={{\n                            backgroundColor: barColor,\n                            boxShadow: `\n                              0 0 10px ${glowColor},\n                              0 0 20px ${glowColor}80,\n                              0 0 30px ${glowColor}40,\n                              inset 0 0 10px ${glowColor}40\n                            `,\n                            border: `1px solid ${glowColor}`,\n                            minHeight: '8px'\n                          }}\n                        >\n                          {/* Swap Trail Effect */}\n                          {isSwapping && (\n                            <>\n                              <motion.div\n                                className=\"absolute inset-0 rounded-t-lg\"\n                                animate={{\n                                  opacity: [0.8, 0],\n                                  scale: [1, 1.3]\n                                }}\n                                transition={{\n                                  duration: 0.6,\n                                  repeat: Infinity,\n                                  ease: \"easeOut\"\n                                }}\n                                style={{\n                                  backgroundColor: barColor,\n                                  filter: 'blur(8px)'\n                                }}\n                              />\n                              <motion.div\n                                className=\"absolute -top-2 left-1/2 transform -translate-x-1/2 w-1 h-full\"\n                                animate={{\n                                  opacity: [0, 1, 0],\n                                  scaleY: [0, 1.5, 0]\n                                }}\n                                transition={{\n                                  duration: 0.5,\n                                  repeat: Infinity,\n                                  ease: \"easeOut\"\n                                }}\n                                style={{\n                                  backgroundColor: barColor,\n                                  boxShadow: `0 0 20px ${glowColor}, 0 0 40px ${glowColor}`,\n                                  filter: 'blur(4px)'\n                                }}\n                              />\n                            </>\n                          )}\n\n                          {/* Glow Pulse for Comparing */}\n                          {isComparing && (\n                            <motion.div\n                              className=\"absolute inset-0 rounded-t-lg\"\n                              animate={{\n                                opacity: [0.3, 0.7, 0.3],\n                                scale: [1, 1.05, 1]\n                              }}\n                              transition={{\n                                duration: 0.6,\n                                repeat: Infinity,\n                                ease: \"easeInOut\"\n                              }}\n                              style={{\n                                backgroundColor: barColor,\n                                filter: 'blur(6px)'\n                              }}\n                            />\n                          )}\n\n                          {/* Sorted Celebration Effect */}\n                          {isSorted && (\n                            <motion.div\n                              className=\"absolute inset-0 rounded-t-lg\"\n                              initial={{ opacity: 0 }}\n                              animate={{\n                                opacity: [0, 0.6, 0],\n                                scale: [1, 1.2, 1]\n                              }}\n                              transition={{\n                                duration: 1,\n                                ease: \"easeOut\"\n                              }}\n                              style={{\n                                backgroundColor: '#00ff00',\n                                filter: 'blur(10px)'\n                              }}\n                            />\n                          )}\n\n                          {/* Value Label */}\n                          {array.length <= 30 && (\n                            <motion.div\n                              initial={{ opacity: 0 }}\n                              animate={{ opacity: 1 }}\n                              className=\"absolute -bottom-6 left-1/2 transform -translate-x-1/2 text-xs font-mono font-bold whitespace-nowrap\"\n                              style={{\n                                color: barColor,\n                                textShadow: `0 0 5px ${glowColor}`\n                              }}\n                            >\n                              {element.value}\n                            </motion.div>\n                          )}\n\n                          {/* Inner Gradient Shine */}\n                          <div\n                            className=\"absolute inset-0 rounded-t-lg opacity-30\"\n                            style={{\n                              background: `linear-gradient(to top, transparent, ${barColor})`\n                            }}\n                          />\n                        </motion.div>\n                      );\n                    })}\n                  </div>\n\n                  {/* Step Counter */}\n                  <motion.div\n                    initial={{ opacity: 0, y: 20 }}\n                    animate={{ opacity: 1, y: 0 }}\n                    className=\"absolute bottom-4 right-4 bg-gray-900/80 backdrop-blur-sm border border-cyan-500/50 rounded-lg px-4 py-2\"\n                    style={{\n                      boxShadow: '0 0 20px rgba(0, 255, 255, 0.3)'\n                    }}\n                  >\n                    <div className=\"text-center\">\n                      <div className=\"text-xs text-cyan-400 font-semibold uppercase tracking-wider\">\n                        Step\n                      </div>\n                      <div className=\"text-2xl font-bold text-white\">\n                        <span className=\"bg-gradient-to-r from-cyan-400 to-purple-400 bg-clip-text text-transparent\">\n                          {currentStep}\n                        </span>\n                        <span className=\"text-gray-500 text-sm\"> / {steps.length}</span>\n                      </div>\n                    </div>\n                  </motion.div>\n                </div>\n              )}\n              \n              <div className=\"flex items-end justify-center gap-1 h-[500px]\">\n                \n              </div>\n\n              <div className=\"mt-6 space-y-3\">\n                <div className=\"flex items-center justify-between text-sm\">\n                  <span className=\"text-gray-400 font-medium\">Sorting Progress</span>\n                  <span className=\"text-cyan-400 font-mono font-bold\">\n                    {steps.length > 0 ? Math.round((currentStep / steps.length) * 100) : 0}%\n                  </span>\n                </div>\n                \n                <div className=\"relative h-4 bg-gray-800/80 rounded-full overflow-hidden border border-gray-700/50 shadow-inner\">\n                  {/* Background glow effect */}\n                  <motion.div\n                    className=\"absolute inset-0 bg-gradient-to-r from-cyan-500/20 via-purple-500/20 to-pink-500/20\"\n                    animate={{\n                      opacity: [0.3, 0.6, 0.3]\n                    }}\n                    transition={{\n                      duration: 2,\n                      repeat: Infinity,\n                      ease: \"easeInOut\"\n                    }}\n                  />\n                  \n                  {/* Progress fill */}\n                  <motion.div\n                    className=\"absolute inset-y-0 left-0 bg-gradient-to-r from-cyan-500 via-purple-500 to-pink-500 shadow-[0_0_20px_rgba(0,255,255,0.6)]\"\n                    initial={{ width: 0 }}\n                    animate={{ \n                      width: steps.length > 0 ? `${(currentStep / steps.length) * 100}%` : '0%'\n                    }}\n                    transition={{ \n                      duration: 0.5,\n                      ease: \"easeOut\"\n                    }}\n                  />\n                  \n                  {/* Animated shimmer effect */}\n                  {currentStep > 0 && currentStep < steps.length && (\n                    <motion.div\n                      className=\"absolute inset-y-0 w-20 bg-gradient-to-r from-transparent via-white/40 to-transparent\"\n                      style={{\n                        left: steps.length > 0 ? `${(currentStep / steps.length) * 100}%` : '0%'\n                      }}\n                      animate={{\n                        x: ['-100%', '100%']\n                      }}\n                      transition={{\n                        duration: 1.5,\n                        repeat: Infinity,\n                        ease: \"linear\"\n                      }}\n                    />\n                  )}\n                  \n                  {/* Completion pulse */}\n                  {currentStep >= steps.length && steps.length > 0 && (\n                    <motion.div\n                      className=\"absolute inset-0 bg-gradient-to-r from-cyan-400 via-purple-400 to-pink-400\"\n                      animate={{\n                        opacity: [0.5, 1, 0.5],\n                        boxShadow: [\n                          '0 0 20px rgba(0,255,255,0.6)',\n                          '0 0 40px rgba(168,85,247,0.8)',\n                          '0 0 20px rgba(0,255,255,0.6)'\n                        ]\n                      }}\n                      transition={{\n                        duration: 1.5,\n                        repeat: Infinity,\n                        ease: \"easeInOut\"\n                      }}\n                    />\n                  )}\n                </div>\n                \n                {/* Status text */}\n                <div className=\"text-center\">\n                  {currentStep === 0 && steps.length === 0 && (\n                    <motion.span\n                      className=\"text-xs text-gray-500\"\n                      initial={{ opacity: 0 }}\n                      animate={{ opacity: 1 }}\n                    >\n                      Generate steps to begin\n                    </motion.span>\n                  )}\n                  {currentStep > 0 && currentStep < steps.length && (\n                    <motion.span\n                      className=\"text-xs text-cyan-400 font-medium\"\n                      animate={{\n                        opacity: [0.7, 1, 0.7]\n                      }}\n                      transition={{\n                        duration: 1.5,\n                        repeat: Infinity\n                      }}\n                    >\n                      Sorting in progress...\n                    </motion.span>\n                  )}\n                  {currentStep >= steps.length && steps.length > 0 && (\n                    <motion.span\n                      className=\"text-xs font-bold bg-gradient-to-r from-cyan-400 via-purple-400 to-pink-400 bg-clip-text text-transparent\"\n                      initial={{ scale: 0.8, opacity: 0 }}\n                      animate={{ \n                        scale: [1, 1.05, 1],\n                        opacity: 1\n                      }}\n                      transition={{\n                        scale: {\n                          duration: 1,\n                          repeat: Infinity,\n                          ease: \"easeInOut\"\n                        },\n                        opacity: {\n                          duration: 0.3\n                        }\n                      }}\n                    >\n                      \u2728 Sorting Complete! \u2728\n                    </motion.span>\n                  )}\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <motion.div\n          initial={{ opacity: 0, y: 50 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.8, delay: 0.4 }}\n          className=\"bg-gray-900/50 backdrop-blur-lg border border-cyan-500/30 rounded-xl p-6 shadow-[0_0_30px_rgba(0,255,255,0.2)]\"\n        >\n          <div className=\"flex items-center gap-2 mb-6\">\n            <BarChart3 className=\"w-5 h-5 text-cyan-400\" />\n            <h3 className=\"text-xl font-semibold text-cyan-400 uppercase tracking-wider\">Legend</h3>\n          </div>\n          \n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n            {/* Default State */}\n            <motion.div\n              className=\"flex items-center gap-3 p-4 bg-gray-800/50 rounded-lg border border-gray-700/50 hover:border-cyan-500/50 transition-all duration-300\"\n              whileHover={{ scale: 1.05 }}\n            >\n              <motion.div\n                className=\"w-6 h-12 rounded bg-gradient-to-t from-cyan-500 to-cyan-300 shadow-[0_0_15px_rgba(0,255,255,0.6)]\"\n                animate={{\n                  boxShadow: [\n                    '0 0 15px rgba(0,255,255,0.6)',\n                    '0 0 25px rgba(0,255,255,0.8)',\n                    '0 0 15px rgba(0,255,255,0.6)'\n                  ]\n                }}\n                transition={{ duration: 2, repeat: Infinity }}\n              />\n              <div>\n                <div className=\"text-sm font-semibold text-white\">Default</div>\n                <div className=\"text-xs text-gray-400\">Unsorted</div>\n              </div>\n            </motion.div>\n\n            {/* Comparing State */}\n            <motion.div\n              className=\"flex items-center gap-3 p-4 bg-gray-800/50 rounded-lg border border-gray-700/50 hover:border-yellow-500/50 transition-all duration-300\"\n              whileHover={{ scale: 1.05 }}\n            >\n              <motion.div\n                className=\"w-6 h-12 rounded bg-gradient-to-t from-yellow-500 to-yellow-300 shadow-[0_0_20px_rgba(255,255,0,0.8)]\"\n                animate={{\n                  scale: [1, 1.1, 1],\n                  boxShadow: [\n                    '0 0 20px rgba(255,255,0,0.8)',\n                    '0 0 35px rgba(255,255,0,1)',\n                    '0 0 20px rgba(255,255,0,0.8)'\n                  ]\n                }}\n                transition={{ duration: 1, repeat: Infinity }}\n              />\n              <div>\n                <div className=\"text-sm font-semibold text-white\">Comparing</div>\n                <div className=\"text-xs text-gray-400\">Active check</div>\n              </div>\n            </motion.div>\n\n            {/* Swapping State */}\n            <motion.div\n              className=\"flex items-center gap-3 p-4 bg-gray-800/50 rounded-lg border border-gray-700/50 hover:border-pink-500/50 transition-all duration-300\"\n              whileHover={{ scale: 1.05 }}\n            >\n              <motion.div\n                className=\"w-6 h-12 rounded bg-gradient-to-t from-pink-500 to-pink-300 shadow-[0_0_20px_rgba(255,0,102,0.8)]\"\n                animate={{\n                  x: [-3, 3, -3],\n                  boxShadow: [\n                    '0 0 20px rgba(255,0,102,0.8)',\n                    '0 0 35px rgba(255,0,102,1)',\n                    '0 0 20px rgba(255,0,102,0.8)'\n                  ]\n                }}\n                transition={{ duration: 0.8, repeat: Infinity }}\n              />\n              <div>\n                <div className=\"text-sm font-semibold text-white\">Swapping</div>\n                <div className=\"text-xs text-gray-400\">Exchanging</div>\n              </div>\n            </motion.div>\n\n            {/* Sorted State */}\n            <motion.div\n              className=\"flex items-center gap-3 p-4 bg-gray-800/50 rounded-lg border border-gray-700/50 hover:border-green-500/50 transition-all duration-300\"\n              whileHover={{ scale: 1.05 }}\n            >\n              <motion.div\n                className=\"w-6 h-12 rounded bg-gradient-to-t from-green-500 to-green-300 shadow-[0_0_20px_rgba(0,255,170,0.8)]\"\n                animate={{\n                  boxShadow: [\n                    '0 0 20px rgba(0,255,170,0.8)',\n                    '0 0 30px rgba(0,255,170,1)',\n                    '0 0 20px rgba(0,255,170,0.8)'\n                  ]\n                }}\n                transition={{ duration: 1.5, repeat: Infinity }}\n              />\n              <div>\n                <div className=\"text-sm font-semibold text-white\">Sorted</div>\n                <div className=\"text-xs text-gray-400\">Complete</div>\n              </div>\n            </motion.div>\n          </div>\n\n          {/* Additional Info */}\n          <motion.div\n            className=\"mt-6 p-4 bg-gradient-to-r from-purple-500/10 to-cyan-500/10 border border-purple-500/30 rounded-lg\"\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            transition={{ delay: 0.6 }}\n          >\n            <div className=\"flex items-start gap-3\">\n              <motion.div\n                animate={{ rotate: 360 }}\n                transition={{ duration: 3, repeat: Infinity, ease: \"linear\" }}\n              >\n                <Zap className=\"w-5 h-5 text-purple-400 flex-shrink-0 mt-0.5\" />\n              </motion.div>\n              <div className=\"text-sm text-gray-300\">\n                <span className=\"font-semibold text-purple-400\">Pro Tip:</span> Watch the glowing effects to track algorithm progress in real-time. Bars pulse and change colors as they're compared, swapped, and sorted.\n              </div>\n            </div>\n          </motion.div>\n        </motion.div>\n      </div>\n    </div>\n  );\n}",
  "error": null,
  "overall_score": 43,
  "code_quality_score": 14,
  "architecture_score": 11,
  "performance_score": 10,
  "accessibility_score": 8,
  "metadata": {
    "document_id": "eval_room_ff8e4b5d177d",
    "prompt_category": "creative",
    "prompt_complexity": 9.0
  },
  "raw_response": {
    "document_id": "eval_room_ff8e4b5d177d",
    "mode": "parallel",
    "prompt": "Build a captivating algorithm visualizer with neon colored bars, smooth height transitions, glowing comparison indicators, trail effects during swaps, and a futuristic dashboard design with animated controls",
    "content": "import { useState, useCallback } from 'react';\nimport { useEffect } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Slider } from '@/components/ui/slider';\nimport { Play, Pause, RotateCcw, Zap, BarChart3 } from 'lucide-react';\nimport { motion } from 'framer-motion';\n\ninterface ArrayElement {\n  value: number;\n  id: string;\n  isComparing?: boolean;\n  isSwapping?: boolean;\n  isSorted?: boolean;\n}\n\ninterface AlgorithmStep {\n  array: ArrayElement[];\n  comparingIndices: number[];\n  swappingIndices: number[];\n  sortedIndices: number[];\n}\n\ntype AlgorithmType = 'bubble' | 'quick' | 'merge' | 'insertion';\n\nconst NEON_COLORS = [\n  '#00ffff',\n  '#ff00ff', \n  '#00ff00',\n  '#ffff00',\n  '#ff0066',\n  '#00ffaa'\n];\n\nconst mockAlgorithms = [\n  { id: 'bubble', name: 'Bubble Sort', complexity: 'O(n\u00b2)' },\n  { id: 'quick', name: 'Quick Sort', complexity: 'O(n log n)' },\n  { id: 'merge', name: 'Merge Sort', complexity: 'O(n log n)' },\n  { id: 'insertion', name: 'Insertion Sort', complexity: 'O(n\u00b2)' }\n];\n\nexport default function AlgorithmVisualizer() {\n  const [array, setArray] = useState<ArrayElement[]>([]);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [speed, setSpeed] = useState([50]);\n  const [arraySize, setArraySize] = useState([20]);\n  const [selectedAlgorithm, setSelectedAlgorithm] = useState<AlgorithmType>('bubble');\n  const [currentStep, setCurrentStep] = useState(0);\n  const [steps, setSteps] = useState<AlgorithmStep[]>([]);\n\n  const generateRandomArray = useCallback(() => {\n    const newArray: ArrayElement[] = Array.from({ length: arraySize[0] }, (_, i) => ({\n      value: Math.floor(Math.random() * 100) + 5,\n      id: `element-${i}-${Date.now()}`,\n      isComparing: false,\n      isSwapping: false,\n      isSorted: false\n    }));\n    setArray(newArray);\n    setSteps([]);\n    setCurrentStep(0);\n    setIsPlaying(false);\n  }, [arraySize]);\n\n  const resetVisualization = useCallback(() => {\n\nsetIsPlaying(false);\n    setCurrentStep(0);\n    setSteps([]);\n    generateRandomArray();\n    }, [generateRandomArray]);\n\n  const animateSteps = useCallback(() => {\n    if (currentStep >= steps.length) {\n      setIsPlaying(false);\n      return;\n    }\n\n    const step = steps[currentStep];\n    setArray(step.array);\n    setCurrentStep(prev => prev + 1);\n  }, [currentStep, steps]);\n  useEffect(() => {\n    if (!isPlaying) return;\n\n    const delay = 1000 - (speed[0] * 9.5);\n    const timer = setTimeout(() => {\n      animateSteps();\n    }, delay);\n\n    return () => clearTimeout(timer);\n  }, [isPlaying, speed, animateSteps]);\n  const startVisualization = useCallback(() => {\n    if (steps.length === 0) return;\n    if (currentStep >= steps.length) {\n      setCurrentStep(0);\n    }\n    setIsPlaying(true);\n    \n  }, [steps, speed, currentStep]);\n\n  const pauseVisualization = useCallback(() => {    setIsPlaying(false);\n  }, []);\n\n  const generateSortingSteps = useCallback((algorithm: AlgorithmType) => {\n    const sortedArray = [...array];\n    const newSteps: AlgorithmStep[] = [];\n\n    const addStep = (arr: ArrayElement[], comparing: number[] = [], swapping: number[] = [], sorted: number[] = []) => {\n      newSteps.push({\n        array: arr.map(el => ({ ...el })),\n        comparingIndices: [...comparing],\n        swappingIndices: [...swapping],\n        sortedIndices: [...sorted]\n      });\n    };\n\n    // Initial state\n    addStep(sortedArray);\n\n    switch (algorithm) {\n      case 'bubble': {\n        const sortedSet = new Set<number>();\n        for (let i = 0; i < sortedArray.length - 1; i++) {\n          for (let j = 0; j < sortedArray.length - i - 1; j++) {\n            // Comparing\n            addStep(sortedArray, [j, j + 1], [], Array.from(sortedSet));\n            \n            if (sortedArray[j].value > sortedArray[j + 1].value) {\n              // Swapping\n              addStep(sortedArray, [], [j, j + 1], Array.from(sortedSet));\n              [sortedArray[j], sortedArray[j + 1]] = [sortedArray[j + 1], sortedArray[j]];\n              addStep(sortedArray, [], [], Array.from(sortedSet));\n            }\n          }\n          sortedSet.add(sortedArray.length - i - 1);\n          addStep(sortedArray, [], [], Array.from(sortedSet));\n        }\n        sortedSet.add(0);\n        addStep(sortedArray, [], [], Array.from(sortedSet));\n        break;\n      }\n\n      case 'insertion': {\n        const sortedSet = new Set<number>([0]);\n        addStep(sortedArray, [], [], [0]);\n        \n        for (let i = 1; i < sortedArray.length; i++) {\n          const key = sortedArray[i];\n          let j = i - 1;\n          \n          addStep(sortedArray, [i], [], Array.from(sortedSet));\n          \n          while (j >= 0 && sortedArray[j].value > key.value) {\n            addStep(sortedArray, [j, j + 1], [], Array.from(sortedSet));\n            addStep(sortedArray, [], [j, j + 1], Array.from(sortedSet));\n            sortedArray[j + 1] = sortedArray[j];\n            addStep(sortedArray, [], [], Array.from(sortedSet));\n            j--;\n          }\n          \n          sortedArray[j + 1] = key;\n          sortedSet.add(i);\n          addStep(sortedArray, [], [], Array.from(sortedSet));\n        }\n        break;\n      }\n\n      case 'quick': {\n        const sortedSet = new Set<number>();\n        \n        const partition = (low: number, high: number): number => {\n          const pivot = sortedArray[high];\n          addStep(sortedArray, [high], [], Array.from(sortedSet));\n          let i = low - 1;\n\n          for (let j = low; j < high; j++) {\n            addStep(sortedArray, [j, high], [], Array.from(sortedSet));\n            \n            if (sortedArray[j].value < pivot.value) {\n              i++;\n              if (i !== j) {\n                addStep(sortedArray, [], [i, j], Array.from(sortedSet));\n                [sortedArray[i], sortedArray[j]] = [sortedArray[j], sortedArray[i]];\n                addStep(sortedArray, [], [], Array.from(sortedSet));\n              }\n            }\n          }\n\n          addStep(sortedArray, [], [i + 1, high], Array.from(sortedSet));\n          [sortedArray[i + 1], sortedArray[high]] = [sortedArray[high], sortedArray[i + 1]];\n          addStep(sortedArray, [], [], Array.from(sortedSet));\n          \n          return i + 1;\n        };\n\n        const quickSort = (low: number, high: number) => {\n          if (low < high) {\n            const pi = partition(low, high);\n            sortedSet.add(pi);\n            addStep(sortedArray, [], [], Array.from(sortedSet));\n            \n            quickSort(low, pi - 1);\n            quickSort(pi + 1, high);\n          } else if (low === high) {\n            sortedSet.add(low);\n            addStep(sortedArray, [], [], Array.from(sortedSet));\n          }\n        };\n\n        quickSort(0, sortedArray.length - 1);\n        break;\n      }\n\n      case 'merge': {\n        const sortedSet = new Set<number>();\n        \n        const merge = (left: number, mid: number, right: number) => {\n          const leftArr = sortedArray.slice(left, mid + 1);\n          const rightArr = sortedArray.slice(mid + 1, right + 1);\n          \n          let i = 0, j = 0, k = left;\n\n          while (i < leftArr.length && j < rightArr.length) {\n            addStep(sortedArray, [left + i, mid + 1 + j], [], Array.from(sortedSet));\n            \n            if (leftArr[i].value <= rightArr[j].value) {\n              sortedArray[k] = leftArr[i];\n              i++;\n            } else {\n              sortedArray[k] = rightArr[j];\n              j++;\n            }\n            addStep(sortedArray, [], [k], Array.from(sortedSet));\n            k++;\n          }\n\n          while (i < leftArr.length) {\n            sortedArray[k] = leftArr[i];\n            addStep(sortedArray, [], [k], Array.from(sortedSet));\n            i++;\n            k++;\n          }\n\n          while (j < rightArr.length) {\n            sortedArray[k] = rightArr[j];\n            addStep(sortedArray, [], [k], Array.from(sortedSet));\n            j++;\n            k++;\n          }\n\n          for (let idx = left; idx <= right; idx++) {\n            sortedSet.add(idx);\n          }\n          addStep(sortedArray, [], [], Array.from(sortedSet));\n        };\n\n        const mergeSort = (left: number, right: number) => {\n          if (left < right) {\n            const mid = Math.floor((left + right) / 2);\n            mergeSort(left, mid);\n            mergeSort(mid + 1, right);\n            merge(left, mid, right);\n          } else if (left === right) {\n            sortedSet.add(left);\n            addStep(sortedArray, [], [], Array.from(sortedSet));\n          }\n        };\n\n        mergeSort(0, sortedArray.length - 1);\n        break;\n      }\n    }\n\n    setSteps(newSteps);\n    setCurrentStep(0);\n  }, [array]);\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-gray-900 via-purple-900 to-gray-900 p-8\">\n      <div className=\"max-w-7xl mx-auto space-y-8\">\n        <motion.div\n          initial={{ opacity: 0, y: -20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.8 }}\n          className=\"text-center space-y-4\"\n        >\n          <motion.h1\n            className=\"text-6xl font-bold bg-gradient-to-r from-cyan-400 via-purple-400 to-pink-400 bg-clip-text text-transparent\"\n            animate={{\n              textShadow: [\n                '0 0 20px rgba(0, 255, 255, 0.5)',\n                '0 0 40px rgba(255, 0, 255, 0.5)',\n                '0 0 20px rgba(0, 255, 255, 0.5)'\n              ]\n            }}\n            transition={{ duration: 2, repeat: Infinity }}\n          >\n            Algorithm Visualizer\n          </motion.h1>\n          \n          <div className=\"flex items-center justify-center gap-4\">\n            <motion.div\n              initial={{ scale: 0 }}\n              animate={{ scale: 1 }}\n              transition={{ delay: 0.3, type: 'spring' }}\n              className=\"px-6 py-2 bg-purple-500/20 border border-purple-400/50 rounded-full backdrop-blur-sm\"\n            >\n              <span className=\"text-2xl font-semibold text-purple-300\">\n                {mockAlgorithms.find(a => a.id === selectedAlgorithm)?.name || 'Bubble Sort'}\n              </span>\n            </motion.div>\n            \n            <motion.div\n              initial={{ scale: 0 }}\n              animate={{ scale: 1 }}\n              transition={{ delay: 0.5, type: 'spring' }}\n              className=\"px-4 py-2 bg-cyan-500/20 border border-cyan-400/50 rounded-full backdrop-blur-sm relative overflow-hidden\"\n            >\n              <motion.div\n                className=\"absolute inset-0 bg-gradient-to-r from-transparent via-cyan-400/20 to-transparent\"\n                animate={{ x: ['-100%', '200%'] }}\n                transition={{ duration: 2, repeat: Infinity, ease: 'linear' }}\n              />\n              <div className=\"relative flex items-center gap-2\">\n                <Zap className=\"w-4 h-4 text-cyan-400\" />\n                <span className=\"text-lg font-mono text-cyan-300\">\n                  {mockAlgorithms.find(a => a.id === selectedAlgorithm)?.complexity || 'O(n\u00b2)'}\n                </span>\n              </div>\n            </motion.div>\n          </div>\n        </motion.div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-6\">\n          <div className=\"lg:col-span-1 space-y-6\">\n            <motion.div\n              initial={{ opacity: 0, x: -50 }}\n              animate={{ opacity: 1, x: 0 }}\n              className=\"bg-gray-900/50 backdrop-blur-lg border border-cyan-500/30 rounded-xl p-6 shadow-[0_0_30px_rgba(0,255,255,0.3)] hover:shadow-[0_0_50px_rgba(0,255,255,0.5)] transition-shadow duration-300\"\n            >\n              <div className=\"space-y-6\">\n                {/* Algorithm Selection */}\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center gap-2 text-cyan-400\">\n                    <Zap className=\"w-4 h-4\" />\n                    <h3 className=\"text-sm font-semibold uppercase tracking-wider\">Algorithm</h3>\n                  </div>\n                  <div className=\"grid grid-cols-1 gap-2\">\n                    {mockAlgorithms.map((algo) => (\n                      <button\n                        key={algo.id}\n                        onClick={() => setSelectedAlgorithm(algo.id as AlgorithmType)}\n                        disabled={isPlaying}\n                        className={`p-3 rounded-lg border transition-all duration-300 text-left ${\n                          selectedAlgorithm === algo.id\n                            ? 'bg-cyan-500/20 border-cyan-400 shadow-[0_0_20px_rgba(0,255,255,0.4)]'\n                            : 'bg-gray-800/50 border-gray-700 hover:border-cyan-500/50 hover:bg-gray-800'\n                        } disabled:opacity-50 disabled:cursor-not-allowed`}\n                      >\n                        <div className=\"font-medium text-white\">{algo.name}</div>\n                        <div className=\"text-xs text-gray-400 mt-1\">{algo.complexity}</div>\n                      </button>\n                    ))}\n                  </div>\n                </div>\n\n                {/* Array Size Control */}\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center gap-2 text-purple-400\">\n                    <BarChart3 className=\"w-4 h-4\" />\n                    <h3 className=\"text-sm font-semibold uppercase tracking-wider\">Array Size</h3>\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Slider\n                      value={arraySize}\n                      onValueChange={setArraySize}\n                      min={5}\n                      max={50}\n                      step={1}\n                      disabled={isPlaying}\n                      className=\"cursor-pointer\"\n                    />\n                    <div className=\"text-center\">\n                      <span className=\"text-2xl font-bold text-white bg-gradient-to-r from-cyan-400 to-purple-400 bg-clip-text text-transparent\">\n                        {arraySize[0]}\n                      </span>\n                      <span className=\"text-xs text-gray-400 ml-2\">elements</span>\n                    </div>\n                  </div>\n                </div>\n\n                {/* Speed Control */}\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center gap-2 text-pink-400\">\n                    <Zap className=\"w-4 h-4\" />\n                    <h3 className=\"text-sm font-semibold uppercase tracking-wider\">Speed</h3>\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Slider\n                      value={speed}\n                      onValueChange={setSpeed}\n                      min={10}\n                      max={100}\n                      step={10}\n                      className=\"cursor-pointer\"\n                    />\n                    <div className=\"text-center\">\n                      <span className=\"text-2xl font-bold text-white bg-gradient-to-r from-pink-400 to-yellow-400 bg-clip-text text-transparent\">\n                        {speed[0]}%\n                      </span>\n                    </div>\n                  </div>\n                </div>\n\n                {/* Control Buttons */}\n                <div className=\"space-y-3 pt-4 border-t border-gray-700/50\">\n                  <Button\n                    onClick={isPlaying ? pauseVisualization : startVisualization}\n                    disabled={steps.length === 0 || (currentStep >= steps.length && !isPlaying)}\n                    className=\"w-full bg-gradient-to-r from-cyan-500 to-blue-500 hover:from-cyan-600 hover:to-blue-600 text-white font-semibold shadow-[0_0_20px_rgba(0,255,255,0.5)] hover:shadow-[0_0_30px_rgba(0,255,255,0.7)] transition-all duration-300\"\n                  >\n                    {isPlaying ? (\n                      <>\n                        <Pause className=\"w-4 h-4 mr-2\" />\n                        Pause\n                      </>\n                    ) : (\n                      <>\n                        <Play className=\"w-4 h-4 mr-2\" />\n                        {currentStep >= steps.length ? 'Start' : 'Resume'}\n                      </>\n                    )}\n                  </Button>\n\n                  <Button\n                    onClick={resetVisualization}\n                    variant=\"outline\"\n                    className=\"w-full border-purple-500/50 text-purple-400 hover:bg-purple-500/20 hover:border-purple-400 shadow-[0_0_15px_rgba(168,85,247,0.3)] hover:shadow-[0_0_25px_rgba(168,85,247,0.5)] transition-all duration-300\"\n                  >\n                    <RotateCcw className=\"w-4 h-4 mr-2\" />\n                    Reset\n                  </Button>\n\n                  <Button\n                    onClick={() => {\n                      generateSortingSteps(selectedAlgorithm);\n                      setCurrentStep(0);\n                    }}\n                    disabled={isPlaying || array.length === 0}\n                    variant=\"outline\"\n                    className=\"w-full border-pink-500/50 text-pink-400 hover:bg-pink-500/20 hover:border-pink-400 shadow-[0_0_15px_rgba(255,0,102,0.3)] hover:shadow-[0_0_25px_rgba(255,0,102,0.5)] transition-all duration-300\"\n                  >\n                    <Zap className=\"w-4 h-4 mr-2\" />\n                    Generate Steps\n                  </Button>\n                </div>\n\n                {/* Stats Display */}\n                <div className=\"pt-4 border-t border-gray-700/50 space-y-2\">\n                  <div className=\"flex justify-between text-sm\">\n                    <span className=\"text-gray-400\">Current Step:</span>\n                    <span className=\"text-cyan-400 font-mono font-bold\">{currentStep}</span>\n                  </div>\n                  <div className=\"flex justify-between text-sm\">\n                    <span className=\"text-gray-400\">Total Steps:</span>\n                    <span className=\"text-purple-400 font-mono font-bold\">{steps.length}</span>\n                  </div>\n                  <div className=\"mt-3 h-2 bg-gray-800 rounded-full overflow-hidden\">\n                    <motion.div\n                      className=\"h-full bg-gradient-to-r from-cyan-500 via-purple-500 to-pink-500\"\n                      initial={{ width: 0 }}\n                      animate={{ width: steps.length > 0 ? `${(currentStep / steps.length) * 100}%` : '0%' }}\n                      transition={{ duration: 0.3 }}\n                    />\n                  </div>\n                </div>\n              </div>\n            </motion.div>\n            \n            <div className=\"bg-gray-900/50 backdrop-blur-lg border border-cyan-500/30 rounded-xl p-6 shadow-2xl shadow-cyan-500/20\">\n              <div className=\"space-y-6\">\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center gap-2 text-cyan-400 mb-2\">\n                    <Zap className=\"w-4 h-4\" />\n                    <span className=\"text-sm font-semibold tracking-wider\">ALGORITHM</span>\n                  </div>\n                  <div className=\"grid grid-cols-1 gap-3\">\n                    {mockAlgorithms.map((algo) => (\n                      <motion.button\n                        key={algo.id}\n                        onClick={() => setSelectedAlgorithm(algo.id as AlgorithmType)}\n                        className={`relative p-4 rounded-lg border-2 transition-all duration-300 text-left ${\n                          selectedAlgorithm === algo.id\n                            ? 'border-cyan-400 bg-cyan-500/20 shadow-lg shadow-cyan-500/50'\n                            : 'border-gray-700 bg-gray-800/50 hover:border-cyan-500/50 hover:bg-cyan-500/10'\n                        }`}\n                        whileHover={{ scale: 1.02 }}\n                        whileTap={{ scale: 0.98 }}\n                      >\n                        <div className=\"flex flex-col gap-1\">\n                          <span className={`font-semibold ${\n                            selectedAlgorithm === algo.id ? 'text-cyan-300' : 'text-gray-300'\n                          }`}>\n                            {algo.name}\n                          </span>\n                          <span className={`text-xs font-mono ${\n                            selectedAlgorithm === algo.id ? 'text-cyan-400' : 'text-gray-500'\n                          }`}>\n                            {algo.complexity}\n                          </span>\n                        </div>\n                        {selectedAlgorithm === algo.id && (\n                          <motion.div\n                            className=\"absolute inset-0 rounded-lg border-2 border-cyan-400\"\n                            initial={{ opacity: 0 }}\n                            animate={{ opacity: [0.5, 1, 0.5] }}\n                            transition={{ duration: 2, repeat: Infinity }}\n                          />\n                        )}\n                      </motion.button>\n                    ))}\n                  </div>\n                </div></parameter>\n\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <label className=\"text-cyan-400 text-sm font-medium flex items-center gap-2\">\n                      <Zap className=\"w-4 h-4\" />\n                      Speed\n                    </label>\n                    <span className=\"text-cyan-300 text-xs\">{speed[0]}ms</span>\n                  </div>\n                  <Slider\n                    value={speed}\n                    onValueChange={setSpeed}\n                    min={10}\n                    max={200}\n                    step={10}\n                    className=\"[&_[role=slider]]:bg-cyan-400 [&_[role=slider]]:border-cyan-300 [&_[role=slider]]:shadow-[0_0_15px_rgba(34,211,238,0.8)] [&_[role=slider]]:hover:shadow-[0_0_25px_rgba(34,211,238,1)] [&_[role=slider]]:transition-shadow [&_.relative]:bg-gray-700/50 [&_.relative]:border [&_.relative]:border-cyan-500/30 [&_.bg-primary]:bg-gradient-to-r [&_.bg-primary]:from-cyan-500 [&_.bg-primary]:to-purple-500 [&_.bg-primary]:shadow-[0_0_10px_rgba(34,211,238,0.5)]\"\n                  />\n                </div>\n\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <label className=\"text-cyan-400 text-sm font-medium flex items-center gap-2\">\n                      <BarChart3 className=\"w-4 h-4\" />\n                      Array Size\n                    </label>\n                    <span className=\"text-cyan-300 text-xs\">{arraySize[0]}</span>\n                  </div>\n                  <Slider\n                    value={arraySize}\n                    onValueChange={setArraySize}\n                    min={5}\n                    max={50}\n                    step={1}\n                    className=\"[&_[role=slider]]:bg-gradient-to-r [&_[role=slider]]:from-purple-500 [&_[role=slider]]:to-pink-500 [&_[role=slider]]:border-2 [&_[role=slider]]:border-purple-300 [&_[role=slider]]:shadow-lg [&_[role=slider]]:shadow-purple-500/50 [&_[role=slider]]:transition-all [&_[role=slider]]:hover:shadow-xl [&_[role=slider]]:hover:shadow-purple-500/70 [&>span]:bg-gradient-to-r [&>span]:from-purple-500/30 [&>span]:to-pink-500/30 [&>span]:h-2\"\n                    disabled={isPlaying}\n                  />\n</parameter>\n</invoke>\n                </div>\n\n                <div className=\"flex gap-3 pt-4\">\n                  <motion.button\n                    onClick={isPlaying ? pauseVisualization : startVisualization}\n                    disabled={array.length === 0 || (steps.length === 0 && !isPlaying)}\n                    className=\"relative flex-1 group overflow-hidden\"\n                    whileHover={{ scale: 1.05 }}\n                    whileTap={{ scale: 0.95 }}\n                  >\n                    <motion.div\n                      className={`relative px-6 py-3 rounded-lg font-semibold text-white transition-all duration-300 ${\n                        isPlaying\n                          ? 'bg-gradient-to-r from-yellow-500 to-orange-500 shadow-[0_0_30px_rgba(251,191,36,0.6)]'\n                          : 'bg-gradient-to-r from-cyan-500 to-purple-500 shadow-[0_0_30px_rgba(34,211,238,0.6)]'\n                      } disabled:opacity-50 disabled:cursor-not-allowed`}\n                      animate={{\n                        boxShadow: isPlaying\n                          ? [\n                              '0 0 30px rgba(251,191,36,0.6)',\n                              '0 0 50px rgba(251,191,36,0.8)',\n                              '0 0 30px rgba(251,191,36,0.6)'\n                            ]\n                          : [\n                              '0 0 30px rgba(34,211,238,0.6)',\n                              '0 0 50px rgba(34,211,238,0.8)',\n                              '0 0 30px rgba(34,211,238,0.6)'\n                            ]\n                      }}\n                      transition={{ duration: 2, repeat: Infinity }}\n                    >\n                      <motion.div\n                        className=\"absolute inset-0 bg-gradient-to-r from-transparent via-white/30 to-transparent\"\n                        animate={{ x: ['-200%', '200%'] }}\n                        transition={{ duration: 2, repeat: Infinity, ease: 'linear' }}\n                      />\n                      <div className=\"relative flex items-center justify-center gap-2\">\n                        <motion.div\n                          key={isPlaying ? 'pause' : 'play'}\n                          initial={{ scale: 0, rotate: -180 }}\n                          animate={{ scale: 1, rotate: 0 }}\n                          exit={{ scale: 0, rotate: 180 }}\n                          transition={{ type: 'spring', stiffness: 200, damping: 15 }}\n                        >\n                          {isPlaying ? (\n                            <Pause className=\"w-5 h-5\" fill=\"currentColor\" />\n                          ) : (\n                            <Play className=\"w-5 h-5\" fill=\"currentColor\" />\n                          )}\n                        </motion.div>\n                        <span className=\"text-sm uppercase tracking-wider\">\n                          {isPlaying ? 'Pause' : 'Play'}\n                        </span>\n                      </div>\n                    </motion.div>\n                  </motion.button>\n                  <motion.button\n                    onClick={resetVisualization}\n                    className=\"flex-1 bg-gradient-to-r from-pink-500 to-rose-500 hover:from-pink-600 hover:to-rose-600 text-white font-semibold py-3 px-4 rounded-lg shadow-[0_0_20px_rgba(236,72,153,0.5)] hover:shadow-[0_0_30px_rgba(236,72,153,0.8)] transition-all duration-300 flex items-center justify-center gap-2\"\n                    whileHover={{ scale: 1.05 }}\n                    whileTap={{ scale: 0.95, rotate: 360 }}\n                    transition={{ \n                      rotate: { duration: 0.6, ease: \"easeInOut\" },\n                      scale: { duration: 0.2 }\n                    }}\n                  >\n                    <motion.div\n                      animate={{ rotate: 0 }}\n                      whileTap={{ rotate: 360 }}\n                      transition={{ duration: 0.6, ease: \"easeInOut\" }}\n                    >\n                      <RotateCcw className=\"w-4 h-4\" />\n                    </motion.div>\n                    Reset\n                  </motion.button></parameter>\n                </div>\n              </div>\n            </div>\n\n            {/* TODO:StatsPanel Real-time statistics panel showing comparisons, swaps, and progress */}\n          </div>\n\n          <div className=\"lg:col-span-3\">\n            <div className=\"bg-gray-900/50 backdrop-blur-lg border border-purple-500/30 rounded-xl p-8 shadow-2xl shadow-purple-500/20 min-h-[600px]\">\n                            {array.length === 0 ? (\n                <motion.div\n                  initial={{ opacity: 0, scale: 0.8 }}\n                  animate={{ opacity: 1, scale: 1 }}\n                  className=\"flex flex-col items-center justify-center h-full space-y-6\"\n                >\n                  <motion.div\n                    animate={{\n                      rotate: [0, 360],\n                      scale: [1, 1.2, 1]\n                    }}\n                    transition={{\n                      duration: 3,\n                      repeat: Infinity,\n                      ease: \"easeInOut\"\n                    }}\n                  >\n                    <BarChart3 className=\"w-24 h-24 text-cyan-400\" style={{\n                      filter: 'drop-shadow(0 0 20px rgba(0, 255, 255, 0.6))'\n                    }} />\n                  </motion.div>\n                  <div className=\"text-center space-y-2\">\n                    <h3 className=\"text-2xl font-bold text-cyan-300\">\n                      Ready to Visualize\n                    </h3>\n                    <p className=\"text-gray-400\">\n                      Click \"Generate Steps\" to create an array and start sorting\n                    </p>\n                  </div>\n                </motion.div>\n              ) : (\n                <div className=\"relative w-full h-full\">\n                  {/* Comparison Indicators */}\n                  {steps[currentStep]?.comparingIndices.map((index, i) => {\n                    const barWidth = 100 / array.length;\n                    const leftPosition = index * barWidth;\n                    \n                    return (\n                      <motion.div\n                        key={`compare-${index}-${i}`}\n                        initial={{ opacity: 0, y: -20 }}\n                        animate={{ \n                          opacity: [0.5, 1, 0.5],\n                          y: 0,\n                          scale: [1, 1.1, 1]\n                        }}\n                        transition={{\n                          duration: 0.5,\n                          repeat: Infinity,\n                          ease: \"easeInOut\"\n                        }}\n                        className=\"absolute top-0 pointer-events-none z-10\"\n                        style={{\n                          left: `${leftPosition}%`,\n                          width: `${barWidth}%`\n                        }}\n                      >\n                        <div className=\"flex justify-center\">\n                          <motion.div\n                            className=\"w-3 h-3 rounded-full bg-yellow-400\"\n                            style={{\n                              boxShadow: '0 0 20px rgba(255, 255, 0, 0.8), 0 0 40px rgba(255, 255, 0, 0.4)'\n                            }}\n                            animate={{\n                              boxShadow: [\n                                '0 0 20px rgba(255, 255, 0, 0.8), 0 0 40px rgba(255, 255, 0, 0.4)',\n                                '0 0 30px rgba(255, 255, 0, 1), 0 0 60px rgba(255, 255, 0, 0.6)',\n                                '0 0 20px rgba(255, 255, 0, 0.8), 0 0 40px rgba(255, 255, 0, 0.4)'\n                              ]\n                            }}\n                            transition={{ duration: 0.8, repeat: Infinity }}\n                          />\n                        </div>\n                        <motion.div\n                          className=\"w-0.5 h-12 bg-gradient-to-b from-yellow-400 to-transparent mx-auto\"\n                          style={{\n                            boxShadow: '0 0 10px rgba(255, 255, 0, 0.6)'\n                          }}\n                          animate={{\n                            opacity: [0.6, 1, 0.6]\n                          }}\n                          transition={{ duration: 0.8, repeat: Infinity }}\n                        />\n                      </motion.div>\n                    );\n                  })}\n\n                  {/* Swap Indicators */}\n                  {steps[currentStep]?.swappingIndices.map((index, i) => {\n                    const barWidth = 100 / array.length;\n                    const leftPosition = index * barWidth;\n                    \n                    return (\n                      <motion.div\n                        key={`swap-${index}-${i}`}\n                        initial={{ opacity: 0, scale: 0 }}\n                        animate={{ \n                          opacity: [0, 1, 0],\n                          scale: [0.5, 1.5, 0.5],\n                          rotate: [0, 180, 360]\n                        }}\n                        transition={{\n                          duration: 0.6,\n                          repeat: Infinity,\n                          ease: \"easeOut\"\n                        }}\n                        className=\"absolute top-0 pointer-events-none z-20\"\n                        style={{\n                          left: `${leftPosition}%`,\n                          width: `${barWidth}%`\n                        }}\n                      >\n                        <div className=\"flex justify-center\">\n                          <motion.div\n                            className=\"w-4 h-4 rounded-full bg-pink-500 border-2 border-pink-300\"\n                            style={{\n                              boxShadow: '0 0 25px rgba(255, 0, 102, 1), 0 0 50px rgba(255, 0, 102, 0.6)'\n                            }}\n                          />\n                        </div>\n                      </motion.div>\n                    );\n                  })}\n\n                  {/* Animated Bars */}\n                  <div className=\"flex items-end justify-center gap-1 h-full px-4\">\n                    {array.map((element, index) => {\n                      const isComparing = steps[currentStep]?.comparingIndices.includes(index);\n                      const isSwapping = steps[currentStep]?.swappingIndices.includes(index);\n                      const isSorted = steps[currentStep]?.sortedIndices.includes(index);\n                      \n                      const maxValue = Math.max(...array.map(el => el.value));\n                      const heightPercentage = (element.value / maxValue) * 100;\n                      \n                      let barColor = NEON_COLORS[index % NEON_COLORS.length];\n                      let glowColor = barColor;\n                      \n                      if (isSorted) {\n                        barColor = '#00ff00';\n                        glowColor = '#00ff00';\n                      } else if (isSwapping) {\n                        barColor = '#ff0066';\n                        glowColor = '#ff0066';\n                      } else if (isComparing) {\n                        barColor = '#ffff00';\n                        glowColor = '#ffff00';\n                      }\n\n                      return (\n                        <motion.div\n                          key={element.id}\n                          layout\n                          initial={{ height: 0, opacity: 0 }}\n                          animate={{\n                            height: `${heightPercentage}%`,\n                            opacity: 1,\n                            scale: isSwapping ? [1, 1.1, 1] : 1,\n                            y: isSwapping ? [0, -10, 0] : 0\n                          }}\n                          transition={{\n                            height: { duration: 0.3, ease: \"easeOut\" },\n                            opacity: { duration: 0.2 },\n                            scale: { duration: 0.3, repeat: isSwapping ? Infinity : 0 },\n                            y: { duration: 0.3, repeat: isSwapping ? Infinity : 0 },\n                            layout: { duration: 0.4, ease: \"easeInOut\" }\n                          }}\n                          className=\"relative flex-1 min-w-[4px] rounded-t-lg\"\n                          style={{\n                            backgroundColor: barColor,\n                            boxShadow: `\n                              0 0 10px ${glowColor},\n                              0 0 20px ${glowColor}80,\n                              0 0 30px ${glowColor}40,\n                              inset 0 0 10px ${glowColor}40\n                            `,\n                            border: `1px solid ${glowColor}`,\n                            minHeight: '8px'\n                          }}\n                        >\n                          {/* Swap Trail Effect */}\n                          {isSwapping && (\n                            <>\n                              <motion.div\n                                className=\"absolute inset-0 rounded-t-lg\"\n                                animate={{\n                                  opacity: [0.8, 0],\n                                  scale: [1, 1.3]\n                                }}\n                                transition={{\n                                  duration: 0.6,\n                                  repeat: Infinity,\n                                  ease: \"easeOut\"\n                                }}\n                                style={{\n                                  backgroundColor: barColor,\n                                  filter: 'blur(8px)'\n                                }}\n                              />\n                              <motion.div\n                                className=\"absolute -top-2 left-1/2 transform -translate-x-1/2 w-1 h-full\"\n                                animate={{\n                                  opacity: [0, 1, 0],\n                                  scaleY: [0, 1.5, 0]\n                                }}\n                                transition={{\n                                  duration: 0.5,\n                                  repeat: Infinity,\n                                  ease: \"easeOut\"\n                                }}\n                                style={{\n                                  backgroundColor: barColor,\n                                  boxShadow: `0 0 20px ${glowColor}, 0 0 40px ${glowColor}`,\n                                  filter: 'blur(4px)'\n                                }}\n                              />\n                            </>\n                          )}\n\n                          {/* Glow Pulse for Comparing */}\n                          {isComparing && (\n                            <motion.div\n                              className=\"absolute inset-0 rounded-t-lg\"\n                              animate={{\n                                opacity: [0.3, 0.7, 0.3],\n                                scale: [1, 1.05, 1]\n                              }}\n                              transition={{\n                                duration: 0.6,\n                                repeat: Infinity,\n                                ease: \"easeInOut\"\n                              }}\n                              style={{\n                                backgroundColor: barColor,\n                                filter: 'blur(6px)'\n                              }}\n                            />\n                          )}\n\n                          {/* Sorted Celebration Effect */}\n                          {isSorted && (\n                            <motion.div\n                              className=\"absolute inset-0 rounded-t-lg\"\n                              initial={{ opacity: 0 }}\n                              animate={{\n                                opacity: [0, 0.6, 0],\n                                scale: [1, 1.2, 1]\n                              }}\n                              transition={{\n                                duration: 1,\n                                ease: \"easeOut\"\n                              }}\n                              style={{\n                                backgroundColor: '#00ff00',\n                                filter: 'blur(10px)'\n                              }}\n                            />\n                          )}\n\n                          {/* Value Label */}\n                          {array.length <= 30 && (\n                            <motion.div\n                              initial={{ opacity: 0 }}\n                              animate={{ opacity: 1 }}\n                              className=\"absolute -bottom-6 left-1/2 transform -translate-x-1/2 text-xs font-mono font-bold whitespace-nowrap\"\n                              style={{\n                                color: barColor,\n                                textShadow: `0 0 5px ${glowColor}`\n                              }}\n                            >\n                              {element.value}\n                            </motion.div>\n                          )}\n\n                          {/* Inner Gradient Shine */}\n                          <div\n                            className=\"absolute inset-0 rounded-t-lg opacity-30\"\n                            style={{\n                              background: `linear-gradient(to top, transparent, ${barColor})`\n                            }}\n                          />\n                        </motion.div>\n                      );\n                    })}\n                  </div>\n\n                  {/* Step Counter */}\n                  <motion.div\n                    initial={{ opacity: 0, y: 20 }}\n                    animate={{ opacity: 1, y: 0 }}\n                    className=\"absolute bottom-4 right-4 bg-gray-900/80 backdrop-blur-sm border border-cyan-500/50 rounded-lg px-4 py-2\"\n                    style={{\n                      boxShadow: '0 0 20px rgba(0, 255, 255, 0.3)'\n                    }}\n                  >\n                    <div className=\"text-center\">\n                      <div className=\"text-xs text-cyan-400 font-semibold uppercase tracking-wider\">\n                        Step\n                      </div>\n                      <div className=\"text-2xl font-bold text-white\">\n                        <span className=\"bg-gradient-to-r from-cyan-400 to-purple-400 bg-clip-text text-transparent\">\n                          {currentStep}\n                        </span>\n                        <span className=\"text-gray-500 text-sm\"> / {steps.length}</span>\n                      </div>\n                    </div>\n                  </motion.div>\n                </div>\n              )}\n              \n              <div className=\"flex items-end justify-center gap-1 h-[500px]\">\n                \n              </div>\n\n              <div className=\"mt-6 space-y-3\">\n                <div className=\"flex items-center justify-between text-sm\">\n                  <span className=\"text-gray-400 font-medium\">Sorting Progress</span>\n                  <span className=\"text-cyan-400 font-mono font-bold\">\n                    {steps.length > 0 ? Math.round((currentStep / steps.length) * 100) : 0}%\n                  </span>\n                </div>\n                \n                <div className=\"relative h-4 bg-gray-800/80 rounded-full overflow-hidden border border-gray-700/50 shadow-inner\">\n                  {/* Background glow effect */}\n                  <motion.div\n                    className=\"absolute inset-0 bg-gradient-to-r from-cyan-500/20 via-purple-500/20 to-pink-500/20\"\n                    animate={{\n                      opacity: [0.3, 0.6, 0.3]\n                    }}\n                    transition={{\n                      duration: 2,\n                      repeat: Infinity,\n                      ease: \"easeInOut\"\n                    }}\n                  />\n                  \n                  {/* Progress fill */}\n                  <motion.div\n                    className=\"absolute inset-y-0 left-0 bg-gradient-to-r from-cyan-500 via-purple-500 to-pink-500 shadow-[0_0_20px_rgba(0,255,255,0.6)]\"\n                    initial={{ width: 0 }}\n                    animate={{ \n                      width: steps.length > 0 ? `${(currentStep / steps.length) * 100}%` : '0%'\n                    }}\n                    transition={{ \n                      duration: 0.5,\n                      ease: \"easeOut\"\n                    }}\n                  />\n                  \n                  {/* Animated shimmer effect */}\n                  {currentStep > 0 && currentStep < steps.length && (\n                    <motion.div\n                      className=\"absolute inset-y-0 w-20 bg-gradient-to-r from-transparent via-white/40 to-transparent\"\n                      style={{\n                        left: steps.length > 0 ? `${(currentStep / steps.length) * 100}%` : '0%'\n                      }}\n                      animate={{\n                        x: ['-100%', '100%']\n                      }}\n                      transition={{\n                        duration: 1.5,\n                        repeat: Infinity,\n                        ease: \"linear\"\n                      }}\n                    />\n                  )}\n                  \n                  {/* Completion pulse */}\n                  {currentStep >= steps.length && steps.length > 0 && (\n                    <motion.div\n                      className=\"absolute inset-0 bg-gradient-to-r from-cyan-400 via-purple-400 to-pink-400\"\n                      animate={{\n                        opacity: [0.5, 1, 0.5],\n                        boxShadow: [\n                          '0 0 20px rgba(0,255,255,0.6)',\n                          '0 0 40px rgba(168,85,247,0.8)',\n                          '0 0 20px rgba(0,255,255,0.6)'\n                        ]\n                      }}\n                      transition={{\n                        duration: 1.5,\n                        repeat: Infinity,\n                        ease: \"easeInOut\"\n                      }}\n                    />\n                  )}\n                </div>\n                \n                {/* Status text */}\n                <div className=\"text-center\">\n                  {currentStep === 0 && steps.length === 0 && (\n                    <motion.span\n                      className=\"text-xs text-gray-500\"\n                      initial={{ opacity: 0 }}\n                      animate={{ opacity: 1 }}\n                    >\n                      Generate steps to begin\n                    </motion.span>\n                  )}\n                  {currentStep > 0 && currentStep < steps.length && (\n                    <motion.span\n                      className=\"text-xs text-cyan-400 font-medium\"\n                      animate={{\n                        opacity: [0.7, 1, 0.7]\n                      }}\n                      transition={{\n                        duration: 1.5,\n                        repeat: Infinity\n                      }}\n                    >\n                      Sorting in progress...\n                    </motion.span>\n                  )}\n                  {currentStep >= steps.length && steps.length > 0 && (\n                    <motion.span\n                      className=\"text-xs font-bold bg-gradient-to-r from-cyan-400 via-purple-400 to-pink-400 bg-clip-text text-transparent\"\n                      initial={{ scale: 0.8, opacity: 0 }}\n                      animate={{ \n                        scale: [1, 1.05, 1],\n                        opacity: 1\n                      }}\n                      transition={{\n                        scale: {\n                          duration: 1,\n                          repeat: Infinity,\n                          ease: \"easeInOut\"\n                        },\n                        opacity: {\n                          duration: 0.3\n                        }\n                      }}\n                    >\n                      \u2728 Sorting Complete! \u2728\n                    </motion.span>\n                  )}\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <motion.div\n          initial={{ opacity: 0, y: 50 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.8, delay: 0.4 }}\n          className=\"bg-gray-900/50 backdrop-blur-lg border border-cyan-500/30 rounded-xl p-6 shadow-[0_0_30px_rgba(0,255,255,0.2)]\"\n        >\n          <div className=\"flex items-center gap-2 mb-6\">\n            <BarChart3 className=\"w-5 h-5 text-cyan-400\" />\n            <h3 className=\"text-xl font-semibold text-cyan-400 uppercase tracking-wider\">Legend</h3>\n          </div>\n          \n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n            {/* Default State */}\n            <motion.div\n              className=\"flex items-center gap-3 p-4 bg-gray-800/50 rounded-lg border border-gray-700/50 hover:border-cyan-500/50 transition-all duration-300\"\n              whileHover={{ scale: 1.05 }}\n            >\n              <motion.div\n                className=\"w-6 h-12 rounded bg-gradient-to-t from-cyan-500 to-cyan-300 shadow-[0_0_15px_rgba(0,255,255,0.6)]\"\n                animate={{\n                  boxShadow: [\n                    '0 0 15px rgba(0,255,255,0.6)',\n                    '0 0 25px rgba(0,255,255,0.8)',\n                    '0 0 15px rgba(0,255,255,0.6)'\n                  ]\n                }}\n                transition={{ duration: 2, repeat: Infinity }}\n              />\n              <div>\n                <div className=\"text-sm font-semibold text-white\">Default</div>\n                <div className=\"text-xs text-gray-400\">Unsorted</div>\n              </div>\n            </motion.div>\n\n            {/* Comparing State */}\n            <motion.div\n              className=\"flex items-center gap-3 p-4 bg-gray-800/50 rounded-lg border border-gray-700/50 hover:border-yellow-500/50 transition-all duration-300\"\n              whileHover={{ scale: 1.05 }}\n            >\n              <motion.div\n                className=\"w-6 h-12 rounded bg-gradient-to-t from-yellow-500 to-yellow-300 shadow-[0_0_20px_rgba(255,255,0,0.8)]\"\n                animate={{\n                  scale: [1, 1.1, 1],\n                  boxShadow: [\n                    '0 0 20px rgba(255,255,0,0.8)',\n                    '0 0 35px rgba(255,255,0,1)',\n                    '0 0 20px rgba(255,255,0,0.8)'\n                  ]\n                }}\n                transition={{ duration: 1, repeat: Infinity }}\n              />\n              <div>\n                <div className=\"text-sm font-semibold text-white\">Comparing</div>\n                <div className=\"text-xs text-gray-400\">Active check</div>\n              </div>\n            </motion.div>\n\n            {/* Swapping State */}\n            <motion.div\n              className=\"flex items-center gap-3 p-4 bg-gray-800/50 rounded-lg border border-gray-700/50 hover:border-pink-500/50 transition-all duration-300\"\n              whileHover={{ scale: 1.05 }}\n            >\n              <motion.div\n                className=\"w-6 h-12 rounded bg-gradient-to-t from-pink-500 to-pink-300 shadow-[0_0_20px_rgba(255,0,102,0.8)]\"\n                animate={{\n                  x: [-3, 3, -3],\n                  boxShadow: [\n                    '0 0 20px rgba(255,0,102,0.8)',\n                    '0 0 35px rgba(255,0,102,1)',\n                    '0 0 20px rgba(255,0,102,0.8)'\n                  ]\n                }}\n                transition={{ duration: 0.8, repeat: Infinity }}\n              />\n              <div>\n                <div className=\"text-sm font-semibold text-white\">Swapping</div>\n                <div className=\"text-xs text-gray-400\">Exchanging</div>\n              </div>\n            </motion.div>\n\n            {/* Sorted State */}\n            <motion.div\n              className=\"flex items-center gap-3 p-4 bg-gray-800/50 rounded-lg border border-gray-700/50 hover:border-green-500/50 transition-all duration-300\"\n              whileHover={{ scale: 1.05 }}\n            >\n              <motion.div\n                className=\"w-6 h-12 rounded bg-gradient-to-t from-green-500 to-green-300 shadow-[0_0_20px_rgba(0,255,170,0.8)]\"\n                animate={{\n                  boxShadow: [\n                    '0 0 20px rgba(0,255,170,0.8)',\n                    '0 0 30px rgba(0,255,170,1)',\n                    '0 0 20px rgba(0,255,170,0.8)'\n                  ]\n                }}\n                transition={{ duration: 1.5, repeat: Infinity }}\n              />\n              <div>\n                <div className=\"text-sm font-semibold text-white\">Sorted</div>\n                <div className=\"text-xs text-gray-400\">Complete</div>\n              </div>\n            </motion.div>\n          </div>\n\n          {/* Additional Info */}\n          <motion.div\n            className=\"mt-6 p-4 bg-gradient-to-r from-purple-500/10 to-cyan-500/10 border border-purple-500/30 rounded-lg\"\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            transition={{ delay: 0.6 }}\n          >\n            <div className=\"flex items-start gap-3\">\n              <motion.div\n                animate={{ rotate: 360 }}\n                transition={{ duration: 3, repeat: Infinity, ease: \"linear\" }}\n              >\n                <Zap className=\"w-5 h-5 text-purple-400 flex-shrink-0 mt-0.5\" />\n              </motion.div>\n              <div className=\"text-sm text-gray-300\">\n                <span className=\"font-semibold text-purple-400\">Pro Tip:</span> Watch the glowing effects to track algorithm progress in real-time. Bars pulse and change colors as they're compared, swapped, and sorted.\n              </div>\n            </div>\n          </motion.div>\n        </motion.div>\n      </div>\n    </div>\n  );\n}",
    "error": null,
    "elapsed_time": 104.38258004188538,
    "success": true
  }
}