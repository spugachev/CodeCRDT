{
  "prompt_id": "algorithm_visualizer",
  "prompt_name": "Algorithm Visualizer",
  "mode": "parallel",
  "run_number": 28,
  "timestamp": "2025-10-14T09:59:36.233532",
  "response_time": 209.55418968200684,
  "total_tokens": null,
  "response_content": "import { useState, useCallback } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Slider } from '@/components/ui/slider';\nimport { Play, Pause, RotateCcw, Zap, BarChart3 } from 'lucide-react';\nimport { motion } from 'framer-motion';\n\ninterface ArrayElement {\n  value: number;\n  id: string;\n  isComparing?: boolean;\n  isSwapping?: boolean;\n  isSorted?: boolean;\n}\n\ninterface AlgorithmStep {\n  array: ArrayElement[];\n  comparingIndices: number[];\n  swappingIndices: number[];\n  sortedIndices: number[];\n}\n\ntype AlgorithmType = 'bubble' | 'quick' | 'merge' | 'insertion';\n\nconst NEON_COLORS = [\n  '#00ffff',\n  '#ff00ff', \n  '#00ff00',\n  '#ffff00',\n  '#ff0066',\n  '#00ffaa'\n];\n\nconst mockAlgorithms = [\n  { id: 'bubble', name: 'Bubble Sort', complexity: 'O(n\u00b2)' },\n  { id: 'quick', name: 'Quick Sort', complexity: 'O(n log n)' },\n  { id: 'merge', name: 'Merge Sort', complexity: 'O(n log n)' },\n  { id: 'insertion', name: 'Insertion Sort', complexity: 'O(n\u00b2)' }\n];\n\nconst useAnimationLoop = (\n  steps: AlgorithmStep[],\n  currentStep: number,\n  speed: number[],\n  isPlaying: boolean,\n  onStepChange: (step: number) => void,\n  onComplete: () => void\n) => {\n  const [animationId, setAnimationId] = useState<NodeJS.Timeout | null>(null);\n\n  const cleanup = useCallback(() => {\n    if (animationId) {\n      clearTimeout(animationId);\n      setAnimationId(null);\n    }\n  }, [animationId]);\n\n  const animate = useCallback(() => {\n    if (currentStep < steps.length - 1) {\n      const delay = 1000 - speed[0] * 9.5; // Convert speed slider to delay (50 = 525ms, 100 = 50ms)\n      const id = setTimeout(() => {\n        onStepChange(currentStep + 1);\n      }, delay);\n      setAnimationId(id);\n    } else {\n      onComplete();\n    }\n  }, [currentStep, steps.length, speed, onStepChange, onComplete]);\n\n  // Run animation when playing\n  if (isPlaying && steps.length > 0) {\n    animate();\n  }\n\n  // Cleanup on unmount or when stopping\n  return cleanup;\n};\nexport default function AlgorithmVisualizer() {\n  const [array, setArray] = useState<ArrayElement[]>([]);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [speed, setSpeed] = useState([50]);\n  const [arraySize, setArraySize] = useState([20]);\n  const [selectedAlgorithm, setSelectedAlgorithm] = useState<AlgorithmType>('bubble');\n  const [currentStep, setCurrentStep] = useState(0);\n  const [steps, setSteps] = useState<AlgorithmStep[]>([]);\n\n  const generateRandomArray = useCallback(() => {\n    const newArray: ArrayElement[] = Array.from({ length: arraySize[0] }, (_, index) => ({\n      value: Math.floor(Math.random() * 100) + 1,\n      id: `element-${Date.now()}-${index}`,\n      isComparing: false,\n      isSwapping: false,\n      isSorted: false\n    }));\n    setArray(newArray);\n    setSteps([]);\n    setCurrentStep(0);\n    setIsPlaying(false);\n  }, [arraySize]);\n\n  const resetVisualization = useCallback(() => {\n\n    setIsPlaying(false);\n    setCurrentStep(0);\n    setSteps([]);\n    generateRandomArray();\n  }, [generateRandomArray]);\n\n  const startVisualization = useCallback(() => {\n    if (steps.length === 0) return;\n    if (currentStep >= steps.length - 1) {\n      setCurrentStep(0);\n    }\n    setIsPlaying(true);\n  \n  }, [steps, speed, currentStep]);\n\n  const pauseVisualization = useCallback(() => {\n\n    setIsPlaying(false);\n  }, []);\n\n  const generateSortingSteps = useCallback((algorithm: AlgorithmType) => {\n    const sortedArray = [...array];\n    const algorithmSteps: AlgorithmStep[] = [];\n    \n    // Helper to create a step snapshot\n    const createStep = (\n      arr: ArrayElement[],\n      comparing: number[] = [],\n      swapping: number[] = [],\n      sorted: number[] = []\n    ) => {\n      algorithmSteps.push({\n        array: arr.map((el, idx) => ({\n          ...el,\n          isComparing: comparing.includes(idx),\n          isSwapping: swapping.includes(idx),\n          isSorted: sorted.includes(idx)\n        })),\n        comparingIndices: comparing,\n        swappingIndices: swapping,\n        sortedIndices: sorted\n      });\n    };\n\n    // Initial state\n    createStep([...sortedArray]);\n\n    switch (algorithm) {\n      case 'bubble': {\n        const n = sortedArray.length;\n        const sortedIndices: number[] = [];\n        \n        for (let i = 0; i < n - 1; i++) {\n          for (let j = 0; j < n - i - 1; j++) {\n            // Comparing\n            createStep([...sortedArray], [j, j + 1], [], sortedIndices);\n            \n            if (sortedArray[j].value > sortedArray[j + 1].value) {\n              // Swapping\n              createStep([...sortedArray], [], [j, j + 1], sortedIndices);\n              [sortedArray[j], sortedArray[j + 1]] = [sortedArray[j + 1], sortedArray[j]];\n              createStep([...sortedArray], [], [j, j + 1], sortedIndices);\n            }\n          }\n          sortedIndices.push(n - i - 1);\n          createStep([...sortedArray], [], [], sortedIndices);\n        }\n        sortedIndices.push(0);\n        createStep([...sortedArray], [], [], sortedIndices);\n        break;\n      }\n\n      case 'insertion': {\n        const sortedIndices: number[] = [0];\n        \n        for (let i = 1; i < sortedArray.length; i++) {\n          const key = sortedArray[i];\n          let j = i - 1;\n          \n          createStep([...sortedArray], [i], [], sortedIndices);\n          \n          while (j >= 0 && sortedArray[j].value > key.value) {\n            createStep([...sortedArray], [j, j + 1], [], sortedIndices);\n            createStep([...sortedArray], [], [j, j + 1], sortedIndices);\n            sortedArray[j + 1] = sortedArray[j];\n            createStep([...sortedArray], [], [j, j + 1], sortedIndices);\n            j--;\n          }\n          \n          sortedArray[j + 1] = key;\n          sortedIndices.push(i);\n          createStep([...sortedArray], [], [], sortedIndices);\n        }\n        break;\n      }\n\n      case 'quick': {\n        const sortedIndices: number[] = [];\n        \n        const partition = (low: number, high: number): number => {\n          const pivot = sortedArray[high];\n          let i = low - 1;\n          \n          createStep([...sortedArray], [high], [], sortedIndices);\n          \n          for (let j = low; j < high; j++) {\n            createStep([...sortedArray], [j, high], [], sortedIndices);\n            \n            if (sortedArray[j].value < pivot.value) {\n              i++;\n              if (i !== j) {\n                createStep([...sortedArray], [], [i, j], sortedIndices);\n                [sortedArray[i], sortedArray[j]] = [sortedArray[j], sortedArray[i]];\n                createStep([...sortedArray], [], [i, j], sortedIndices);\n              }\n            }\n          }\n          \n          createStep([...sortedArray], [], [i + 1, high], sortedIndices);\n          [sortedArray[i + 1], sortedArray[high]] = [sortedArray[high], sortedArray[i + 1]];\n          createStep([...sortedArray], [], [i + 1, high], sortedIndices);\n          sortedIndices.push(i + 1);\n          \n          return i + 1;\n        };\n        \n        const quickSort = (low: number, high: number) => {\n          if (low < high) {\n            const pi = partition(low, high);\n            quickSort(low, pi - 1);\n            quickSort(pi + 1, high);\n          } else if (low === high) {\n            sortedIndices.push(low);\n            createStep([...sortedArray], [], [], sortedIndices);\n          }\n        };\n        \n        quickSort(0, sortedArray.length - 1);\n        break;\n      }\n\n      case 'merge': {\n        const sortedIndices: number[] = [];\n        \n        const merge = (left: number, mid: number, right: number) => {\n          const leftArr = sortedArray.slice(left, mid + 1);\n          const rightArr = sortedArray.slice(mid + 1, right + 1);\n          \n          let i = 0, j = 0, k = left;\n          \n          while (i < leftArr.length && j < rightArr.length) {\n            createStep([...sortedArray], [left + i, mid + 1 + j], [], sortedIndices);\n            \n            if (leftArr[i].value <= rightArr[j].value) {\n              createStep([...sortedArray], [], [k], sortedIndices);\n              sortedArray[k] = leftArr[i];\n              createStep([...sortedArray], [], [k], sortedIndices);\n              i++;\n            } else {\n              createStep([...sortedArray], [], [k], sortedIndices);\n              sortedArray[k] = rightArr[j];\n              createStep([...sortedArray], [], [k], sortedIndices);\n              j++;\n            }\n            k++;\n          }\n          \n          while (i < leftArr.length) {\n            sortedArray[k] = leftArr[i];\n            createStep([...sortedArray], [], [k], sortedIndices);\n            i++;\n            k++;\n          }\n          \n          while (j < rightArr.length) {\n            sortedArray[k] = rightArr[j];\n            createStep([...sortedArray], [], [k], sortedIndices);\n            j++;\n            k++;\n          }\n          \n          if (left === 0 && right === sortedArray.length - 1) {\n            for (let idx = 0; idx < sortedArray.length; idx++) {\n              sortedIndices.push(idx);\n            }\n          }\n          createStep([...sortedArray], [], [], sortedIndices);\n        };\n        \n        const mergeSort = (left: number, right: number) => {\n          if (left < right) {\n            const mid = Math.floor((left + right) / 2);\n            mergeSort(left, mid);\n            mergeSort(mid + 1, right);\n            merge(left, mid, right);\n          }\n        };\n        \n        mergeSort(0, sortedArray.length - 1);\n        break;\n      }\n    }\n\n    setSteps(algorithmSteps);\n    setCurrentStep(0);\n  }, [array]);\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-gray-900 via-purple-900 to-gray-900 p-8\">\n      <div className=\"max-w-7xl mx-auto space-y-8\">\n        <motion.div\n          initial={{ opacity: 0, y: -20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.8 }}\n          className=\"text-center space-y-4\"\n        >\n          <motion.h1\n            className=\"text-6xl font-bold bg-gradient-to-r from-cyan-400 via-purple-400 to-pink-400 bg-clip-text text-transparent\"\n            animate={{\n              textShadow: [\n                '0 0 20px rgba(0, 255, 255, 0.5)',\n                '0 0 40px rgba(255, 0, 255, 0.5)',\n                '0 0 20px rgba(0, 255, 255, 0.5)'\n              ]\n            }}\n            transition={{ duration: 2, repeat: Infinity }}\n          >\n            Algorithm Visualizer\n          </motion.h1>\n          \n          <div className=\"flex items-center justify-center gap-4\">\n            <motion.div\n              initial={{ scale: 0 }}\n              animate={{ scale: 1 }}\n              transition={{ delay: 0.3, type: 'spring', stiffness: 200 }}\n              className=\"px-6 py-3 bg-gradient-to-r from-purple-600/30 to-pink-600/30 rounded-lg border border-purple-500/50 backdrop-blur-sm\"\n            >\n              <div className=\"flex items-center gap-3\">\n                <Zap className=\"w-5 h-5 text-yellow-400\" />\n                <span className=\"text-xl font-semibold text-white\">\n                  {mockAlgorithms.find(a => a.id === selectedAlgorithm)?.name || 'Bubble Sort'}\n                </span>\n              </div>\n            </motion.div>\n            \n            <motion.div\n              initial={{ scale: 0 }}\n              animate={{ scale: 1 }}\n              transition={{ delay: 0.5, type: 'spring', stiffness: 200 }}\n              className=\"px-4 py-2 bg-cyan-500/20 rounded-full border border-cyan-400/50 backdrop-blur-sm\"\n            >\n              <div className=\"flex items-center gap-2\">\n                <BarChart3 className=\"w-4 h-4 text-cyan-400\" />\n                <span className=\"text-sm font-mono text-cyan-300\">\n                  {mockAlgorithms.find(a => a.id === selectedAlgorithm)?.complexity || 'O(n\u00b2)'}\n                </span>\n              </div>\n            </motion.div>\n          </div>\n        </motion.div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-6\">\n          <div className=\"lg:col-span-1 space-y-6\">\n            <motion.div\n              initial={{ opacity: 0, x: -50 }}\n              animate={{ opacity: 1, x: 0 }}\n              className=\"bg-gray-900/50 backdrop-blur-lg border border-cyan-500/30 rounded-xl p-6 shadow-2xl shadow-cyan-500/20\"\n            >\n              <div className=\"space-y-6\">\n                {/* Algorithm Selection */}\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center gap-2 mb-4\">\n                    <Zap className=\"w-5 h-5 text-cyan-400\" />\n                    <h3 className=\"text-cyan-400 font-bold text-lg tracking-wider\">ALGORITHM</h3>\n                  </div>\n                  <div className=\"grid grid-cols-1 gap-2\">\n                    {mockAlgorithms.map((algo) => (\n                      <motion.button\n                        key={algo.id}\n                        whileHover={{ scale: 1.02 }}\n                        whileTap={{ scale: 0.98 }}\n                        onClick={() => setSelectedAlgorithm(algo.id as AlgorithmType)}\n                        className={`p-3 rounded-lg border transition-all duration-300 text-left ${\n                          selectedAlgorithm === algo.id\n                            ? 'bg-cyan-500/20 border-cyan-400 shadow-lg shadow-cyan-500/50'\n                            : 'bg-gray-800/50 border-gray-700 hover:border-cyan-500/50'\n                        }`}\n                      >\n                        <div className=\"font-semibold text-white\">{algo.name}</div>\n                        <div className=\"text-xs text-gray-400 mt-1\">{algo.complexity}</div>\n                      </motion.button>\n                    ))}\n                  </div>\n                </div>\n\n                {/* Array Size Control */}\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center gap-2\">\n                      <BarChart3 className=\"w-4 h-4 text-purple-400\" />\n                      <label className=\"text-purple-400 font-semibold text-sm tracking-wide\">\n                        ARRAY SIZE\n                      </label>\n                    </div>\n                    <span className=\"text-white font-bold text-lg\">{arraySize[0]}</span>\n                  </div>\n                  <Slider\n                    value={arraySize}\n                    onValueChange={setArraySize}\n                    min={5}\n                    max={50}\n                    step={1}\n                    className=\"cursor-pointer\"\n                    disabled={isPlaying}\n                  />\n                </div>\n\n                {/* Speed Control */}\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center gap-2\">\n                      <Zap className=\"w-4 h-4 text-yellow-400\" />\n                      <label className=\"text-yellow-400 font-semibold text-sm tracking-wide\">\n                        SPEED\n                      </label>\n                    </div>\n                    <span className=\"text-white font-bold text-lg\">{speed[0]}%</span>\n                  </div>\n                  <Slider\n                    value={speed}\n                    onValueChange={setSpeed}\n                    min={10}\n                    max={100}\n                    step={10}\n                    className=\"cursor-pointer\"\n                  />\n                </div>\n\n                {/* Control Buttons */}\n                <div className=\"space-y-3 pt-4 border-t border-gray-700/50\">\n                  <Button\n                    onClick={isPlaying ? pauseVisualization : startVisualization}\n                    disabled={steps.length === 0 || (currentStep >= steps.length && !isPlaying)}\n                    className=\"w-full bg-gradient-to-r from-cyan-500 to-blue-500 hover:from-cyan-600 hover:to-blue-600 text-white font-bold py-6 rounded-lg shadow-lg shadow-cyan-500/50 transition-all duration-300\"\n                  >\n                    {isPlaying ? (\n                      <>\n                        <Pause className=\"w-5 h-5 mr-2\" />\n                        PAUSE\n                      </>\n                    ) : (\n                      <>\n                        <Play className=\"w-5 h-5 mr-2\" />\n                        START\n                      </>\n                    )}\n                  </Button>\n\n                  <Button\n                    onClick={resetVisualization}\n                    variant=\"outline\"\n                    className=\"w-full border-2 border-purple-500/50 bg-purple-500/10 hover:bg-purple-500/20 text-purple-300 font-bold py-6 rounded-lg shadow-lg shadow-purple-500/30 transition-all duration-300\"\n                  >\n                    <RotateCcw className=\"w-5 h-5 mr-2\" />\n                    RESET\n                  </Button>\n\n                  <Button\n                    onClick={() => generateSortingSteps(selectedAlgorithm)}\n                    disabled={isPlaying || array.length === 0}\n                    className=\"w-full bg-gradient-to-r from-purple-500 to-pink-500 hover:from-purple-600 hover:to-pink-600 text-white font-bold py-6 rounded-lg shadow-lg shadow-purple-500/50 transition-all duration-300\"\n                  >\n                    <Zap className=\"w-5 h-5 mr-2\" />\n                    GENERATE\n                  </Button>\n                </div>\n\n                {/* Stats Display */}\n                <div className=\"pt-4 border-t border-gray-700/50 space-y-2\">\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-gray-400 text-sm\">Current Step:</span>\n                    <span className=\"text-cyan-400 font-bold\">{currentStep}</span>\n                  </div>\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-gray-400 text-sm\">Total Steps:</span>\n                    <span className=\"text-cyan-400 font-bold\">{steps.length}</span>\n                  </div>\n                  <div className=\"w-full bg-gray-800 rounded-full h-2 overflow-hidden\">\n                    <motion.div\n                      className=\"h-full bg-gradient-to-r from-cyan-500 to-purple-500\"\n                      initial={{ width: 0 }}\n                      animate={{ width: steps.length > 0 ? `${(currentStep / steps.length) * 100}%` : '0%' }}\n                      transition={{ duration: 0.3 }}\n                    />\n                  </div>\n                </div>\n              </div>\n            </motion.div>\n            \n            <div className=\"bg-gray-900/50 backdrop-blur-lg border border-cyan-500/30 rounded-xl p-6 shadow-2xl shadow-cyan-500/20\">\n              <div className=\"space-y-6\">\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center gap-2 text-cyan-400\">\n                    <Zap className=\"w-4 h-4\" />\n                    <span className=\"text-sm font-semibold tracking-wider\">ALGORITHM</span>\n                  </div>\n                  <div className=\"grid grid-cols-1 gap-3\">\n                    {mockAlgorithms.map((algo) => (\n                      <motion.button\n                        key={algo.id}\n                        onClick={() => setSelectedAlgorithm(algo.id as AlgorithmType)}\n                        className={`relative p-4 rounded-lg border-2 transition-all duration-300 text-left overflow-hidden group ${\n                          selectedAlgorithm === algo.id\n                            ? 'border-cyan-400 bg-cyan-500/20 shadow-lg shadow-cyan-500/50'\n                            : 'border-gray-700 bg-gray-800/50 hover:border-cyan-500/50 hover:bg-cyan-500/10'\n                        }`}\n                        whileHover={{ scale: 1.02 }}\n                        whileTap={{ scale: 0.98 }}\n                      >\n                        <div className={`absolute inset-0 bg-gradient-to-r from-cyan-500/0 via-cyan-500/20 to-cyan-500/0 opacity-0 group-hover:opacity-100 transition-opacity duration-500 ${\n                          selectedAlgorithm === algo.id ? 'opacity-100' : ''\n                        }`} />\n                        <div className=\"relative z-10\">\n                          <div className=\"font-semibold text-white mb-1\">{algo.name}</div>\n                          <div className={`text-xs font-mono ${\n                            selectedAlgorithm === algo.id ? 'text-cyan-300' : 'text-gray-400'\n                          }`}>\n                            {algo.complexity}\n                          </div>\n                        </div>\n                        {selectedAlgorithm === algo.id && (\n                          <motion.div\n                            className=\"absolute top-2 right-2\"\n                            initial={{ scale: 0, rotate: -180 }}\n                            animate={{ scale: 1, rotate: 0 }}\n                            transition={{ type: 'spring', stiffness: 200, damping: 15 }}\n                          >\n                            <div className=\"w-2 h-2 rounded-full bg-cyan-400 shadow-lg shadow-cyan-400/80\" />\n                          </motion.div>\n                        )}\n                      </motion.button>\n                    ))}\n                  </div>\n                </div>\n\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <label className=\"text-cyan-400 text-sm font-medium flex items-center gap-2\">\n                      <Zap className=\"w-4 h-4\" />\n                      Speed\n                    </label>\n                    <span className=\"text-cyan-300 text-xs\">{speed[0]}ms</span>\n                  </div>\n                  <Slider\n                    value={speed}\n                    onValueChange={setSpeed}\n                    min={10}\n                    max={200}\n                    step={10}\n                    className=\"[&_[role=slider]]:bg-cyan-400 [&_[role=slider]]:border-cyan-300 [&_[role=slider]]:shadow-[0_0_15px_rgba(34,211,238,0.8)] [&_[role=slider]]:hover:shadow-[0_0_25px_rgba(34,211,238,1)] [&_[role=slider]]:transition-shadow [&_.relative]:bg-gray-700/50 [&_.relative]:border [&_.relative]:border-cyan-500/30 [&_.bg-primary]:bg-gradient-to-r [&_.bg-primary]:from-cyan-500 [&_.bg-primary]:to-purple-500 [&_.bg-primary]:shadow-[0_0_10px_rgba(34,211,238,0.5)]\"\n                  />\n                </div>\n\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <label className=\"text-cyan-400 text-sm font-medium flex items-center gap-2\">\n                      <BarChart3 className=\"w-4 h-4\" />\n                      Array Size\n                    </label>\n                    <span className=\"text-cyan-300 text-xs\">{arraySize[0]}</span>\n                  </div>\n                  <Slider\n                    value={arraySize}\n                    onValueChange={setArraySize}\n                    min={5}\n                    max={100}\n                    step={1}\n                    className=\"[&_[role=slider]]:bg-gradient-to-r [&_[role=slider]]:from-cyan-400 [&_[role=slider]]:to-purple-500 [&_[role=slider]]:border-2 [&_[role=slider]]:border-cyan-300 [&_[role=slider]]:shadow-lg [&_[role=slider]]:shadow-cyan-500/50 [&_[role=slider]]:transition-all [&_[role=slider]]:hover:shadow-xl [&_[role=slider]]:hover:shadow-cyan-400/60 [&>span]:bg-gradient-to-r [&>span]:from-cyan-500/30 [&>span]:to-purple-500/30 [&>span]:h-2\"\n                  />\n                </div>\n\n                <div className=\"flex gap-3 pt-4\">\n                  \n                  <motion.button\n                    onClick={resetVisualization}\n                    className=\"flex-1 px-6 py-3 bg-gradient-to-r from-pink-600/30 to-red-600/30 border-2 border-pink-500/50 rounded-lg text-white font-semibold hover:from-pink-600/50 hover:to-red-600/50 hover:border-pink-400 transition-all duration-300 shadow-lg shadow-pink-500/30 hover:shadow-pink-500/60 hover:shadow-xl flex items-center justify-center gap-2 group\"\n                    whileHover={{ scale: 1.05 }}\n                    whileTap={{ scale: 0.95, rotate: 360 }}\n                    transition={{ type: \"spring\", stiffness: 400, damping: 17 }}\n                  >\n                    <motion.div\n                      animate={{ rotate: 0 }}\n                      whileHover={{ rotate: 180 }}\n                      transition={{ duration: 0.5 }}\n                    >\n                      <RotateCcw className=\"w-5 h-5\" />\n                    </motion.div>\n                    <span>Reset</span>\n                  </motion.button>\n                </div>\n              </div>\n            </div>\n\n            <motion.div\n            initial={{ opacity: 0, x: -50 }}\n            animate={{ opacity: 1, x: 0 }}\n            transition={{ delay: 0.2 }}\n            className=\"bg-gray-900/50 backdrop-blur-lg border border-purple-500/30 rounded-xl p-6 shadow-2xl shadow-purple-500/20\"\n          >\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center gap-2 mb-4\">\n                <BarChart3 className=\"w-5 h-5 text-purple-400\" />\n                <h3 className=\"text-purple-400 font-bold text-lg tracking-wider\">STATISTICS</h3>\n              </div>\n\n              <div className=\"grid grid-cols-1 gap-4\">\n                {/* Comparisons Counter */}\n                <motion.div\n                  className=\"relative overflow-hidden rounded-lg bg-gradient-to-br from-cyan-500/10 to-cyan-600/5 border border-cyan-500/30 p-4\"\n                  whileHover={{ scale: 1.02 }}\n                  transition={{ type: 'spring', stiffness: 300 }}\n                >\n                  <div className=\"absolute inset-0 bg-gradient-to-r from-cyan-500/0 via-cyan-500/10 to-cyan-500/0 animate-pulse\" />\n                  <div className=\"relative z-10\">\n                    <div className=\"text-xs text-cyan-400 font-semibold tracking-wider mb-2\">COMPARISONS</div>\n                    <motion.div\n                      className=\"text-3xl font-bold text-white font-mono\"\n                      key={currentStep}\n                      initial={{ scale: 1.2, color: '#00ffff' }}\n                      animate={{ scale: 1, color: '#ffffff' }}\n                      transition={{ duration: 0.3 }}\n                    >\n                      {steps[currentStep]?.comparingIndices.length > 0 ? \n                        steps.slice(0, currentStep + 1).filter(s => s.comparingIndices.length > 0).length : \n                        0}\n                    </motion.div>\n                    <div className=\"mt-2 h-1 bg-gray-800 rounded-full overflow-hidden\">\n                      <motion.div\n                        className=\"h-full bg-gradient-to-r from-cyan-400 to-cyan-600 shadow-[0_0_10px_rgba(34,211,238,0.8)]\"\n                        initial={{ width: 0 }}\n                        animate={{ \n                          width: steps.length > 0 ? `${(steps.slice(0, currentStep + 1).filter(s => s.comparingIndices.length > 0).length / Math.max(steps.filter(s => s.comparingIndices.length > 0).length, 1)) * 100}%` : '0%'\n                        }}\n                        transition={{ duration: 0.5 }}\n                      />\n                    </div>\n                  </div>\n                </motion.div>\n\n                {/* Swaps Counter */}\n                <motion.div\n                  className=\"relative overflow-hidden rounded-lg bg-gradient-to-br from-pink-500/10 to-pink-600/5 border border-pink-500/30 p-4\"\n                  whileHover={{ scale: 1.02 }}\n                  transition={{ type: 'spring', stiffness: 300 }}\n                >\n                  <div className=\"absolute inset-0 bg-gradient-to-r from-pink-500/0 via-pink-500/10 to-pink-500/0 animate-pulse\" style={{ animationDelay: '0.5s' }} />\n                  <div className=\"relative z-10\">\n                    <div className=\"text-xs text-pink-400 font-semibold tracking-wider mb-2\">SWAPS</div>\n                    <motion.div\n                      className=\"text-3xl font-bold text-white font-mono\"\n                      key={`swap-${currentStep}`}\n                      initial={{ scale: 1.2, color: '#ff00ff' }}\n                      animate={{ scale: 1, color: '#ffffff' }}\n                      transition={{ duration: 0.3 }}\n                    >\n                      {steps[currentStep]?.swappingIndices.length > 0 ? \n                        steps.slice(0, currentStep + 1).filter(s => s.swappingIndices.length > 0).length : \n                        0}\n                    </motion.div>\n                    <div className=\"mt-2 h-1 bg-gray-800 rounded-full overflow-hidden\">\n                      <motion.div\n                        className=\"h-full bg-gradient-to-r from-pink-400 to-pink-600 shadow-[0_0_10px_rgba(255,0,255,0.8)]\"\n                        initial={{ width: 0 }}\n                        animate={{ \n                          width: steps.length > 0 ? `${(steps.slice(0, currentStep + 1).filter(s => s.swappingIndices.length > 0).length / Math.max(steps.filter(s => s.swappingIndices.length > 0).length, 1)) * 100}%` : '0%'\n                        }}\n                        transition={{ duration: 0.5 }}\n                      />\n                    </div>\n                  </div>\n                </motion.div>\n\n                {/* Progress */}\n                <motion.div\n                  className=\"relative overflow-hidden rounded-lg bg-gradient-to-br from-purple-500/10 to-purple-600/5 border border-purple-500/30 p-4\"\n                  whileHover={{ scale: 1.02 }}\n                  transition={{ type: 'spring', stiffness: 300 }}\n                >\n                  <div className=\"absolute inset-0 bg-gradient-to-r from-purple-500/0 via-purple-500/10 to-purple-500/0 animate-pulse\" style={{ animationDelay: '1s' }} />\n                  <div className=\"relative z-10\">\n                    <div className=\"text-xs text-purple-400 font-semibold tracking-wider mb-2\">PROGRESS</div>\n                    <motion.div\n                      className=\"text-3xl font-bold text-white font-mono\"\n                      key={`progress-${currentStep}`}\n                      initial={{ scale: 1.2, color: '#a855f7' }}\n                      animate={{ scale: 1, color: '#ffffff' }}\n                      transition={{ duration: 0.3 }}\n                    >\n                      {steps.length > 0 ? Math.round((currentStep / Math.max(steps.length - 1, 1)) * 100) : 0}%\n                    </motion.div>\n                    <div className=\"mt-2 h-1 bg-gray-800 rounded-full overflow-hidden\">\n                      <motion.div\n                        className=\"h-full bg-gradient-to-r from-purple-400 via-pink-500 to-cyan-400 shadow-[0_0_10px_rgba(168,85,247,0.8)]\"\n                        initial={{ width: 0 }}\n                        animate={{ \n                          width: steps.length > 0 ? `${(currentStep / Math.max(steps.length - 1, 1)) * 100}%` : '0%'\n                        }}\n                        transition={{ duration: 0.5 }}\n                      />\n                    </div>\n                  </div>\n                </motion.div>\n\n                {/* Array Size Info */}\n                <motion.div\n                  className=\"relative overflow-hidden rounded-lg bg-gradient-to-br from-yellow-500/10 to-yellow-600/5 border border-yellow-500/30 p-4\"\n                  whileHover={{ scale: 1.02 }}\n                  transition={{ type: 'spring', stiffness: 300 }}\n                >\n                  <div className=\"relative z-10\">\n                    <div className=\"text-xs text-yellow-400 font-semibold tracking-wider mb-2\">ARRAY SIZE</div>\n                    <div className=\"text-3xl font-bold text-white font-mono\">\n                      {array.length}\n                    </div>\n                    <div className=\"mt-2 text-xs text-yellow-300/70\">\n                      {steps[currentStep]?.sortedIndices.length || 0} / {array.length} sorted\n                    </div>\n                  </div>\n                </motion.div>\n\n                {/* Current Step */}\n                <motion.div\n                  className=\"relative overflow-hidden rounded-lg bg-gradient-to-br from-green-500/10 to-green-600/5 border border-green-500/30 p-4\"\n                  whileHover={{ scale: 1.02 }}\n                  transition={{ type: 'spring', stiffness: 300 }}\n                >\n                  <div className=\"relative z-10\">\n                    <div className=\"text-xs text-green-400 font-semibold tracking-wider mb-2\">CURRENT STEP</div>\n                    <div className=\"text-3xl font-bold text-white font-mono\">\n                      {currentStep}\n                    </div>\n                    <div className=\"mt-2 text-xs text-green-300/70\">\n                      of {Math.max(steps.length - 1, 0)} total steps\n                    </div>\n                  </div>\n                </motion.div>\n              </div>\n            </div>\n          </motion.div>\n          </div>\n\n          <div className=\"lg:col-span-3\">\n\n            <div className=\"bg-gray-900/50 backdrop-blur-lg border border-purple-500/30 rounded-xl p-8 shadow-2xl shadow-purple-500/20 min-h-[600px]\">\n\n\n\n              {array.length === 0 ? (\n                <motion.div\n                  initial={{ opacity: 0, scale: 0.8 }}\n                  animate={{ opacity: 1, scale: 1 }}\n                  className=\"absolute inset-0 flex flex-col items-center justify-center gap-6\"\n                >\n                  <motion.div\n                    animate={{\n                      rotate: [0, 360],\n                      scale: [1, 1.2, 1]\n                    }}\n                    transition={{\n                      duration: 3,\n                      repeat: Infinity,\n                      ease: \"easeInOut\"\n                    }}\n                  >\n                    <BarChart3 className=\"w-24 h-24 text-purple-400/50\" />\n                  </motion.div>\n                  <div className=\"text-center space-y-2\">\n                    <p className=\"text-2xl font-bold text-purple-300\">Generate an Array to Start</p>\n                    <p className=\"text-gray-400\">Click the reset button to create a random array</p>\n                  </div>\n                </motion.div>\n              ) : (\n                <div className=\"relative w-full h-full flex items-end justify-center gap-1 px-4\">\n                  {/* Animated Bars */}\n                  {(steps.length > 0 && currentStep < steps.length ? steps[currentStep].array : array).map((element, index) => {\n                    const maxValue = Math.max(...array.map(el => el.value));\n                    const heightPercentage = (element.value / maxValue) * 100;\n                    \n                    let barColor = NEON_COLORS[index % NEON_COLORS.length];\n                    let glowIntensity = 0.3;\n                    \n                    if (element.isSorted) {\n                      barColor = '#00ff00';\n                      glowIntensity = 0.8;\n                    } else if (element.isSwapping) {\n                      barColor = '#ff0066';\n                      glowIntensity = 1;\n                    } else if (element.isComparing) {\n                      barColor = '#ffff00';\n                      glowIntensity = 0.9;\n                    }\n                    \n                    return (\n                      <motion.div\n                        key={element.id}\n                        layout\n                        initial={{ height: 0, opacity: 0 }}\n                        animate={{\n                          height: `${heightPercentage}%`,\n                          opacity: 1,\n                          boxShadow: [\n                            `0 0 ${10 * glowIntensity}px ${barColor}`,\n                            `0 0 ${20 * glowIntensity}px ${barColor}`,\n                            `0 0 ${10 * glowIntensity}px ${barColor}`\n                          ]\n                        }}\n                        transition={{\n                          height: { duration: 0.3, ease: \"easeOut\" },\n                          opacity: { duration: 0.5 },\n                          boxShadow: { duration: 0.5, repeat: Infinity }\n                        }}\n                        className=\"relative flex-1 min-w-[4px] max-w-[60px] rounded-t-lg\"\n                        style={{\n                          backgroundColor: barColor,\n                          border: `1px solid ${barColor}`,\n                        }}\n                      >\n                        {/* Value label */}\n                        {array.length <= 30 && (\n                          <motion.div\n                            initial={{ opacity: 0 }}\n                            animate={{ opacity: 1 }}\n                            className=\"absolute -top-6 left-1/2 -translate-x-1/2 text-xs font-mono font-bold whitespace-nowrap\"\n                            style={{ color: barColor }}\n                          >\n                            {element.value}\n                          </motion.div>\n                        )}\n                        \n                        {/* Swap trail effect */}\n                        {element.isSwapping && (\n                          <motion.div\n                            className=\"absolute inset-0 rounded-t-lg\"\n                            style={{\n                              background: `linear-gradient(to top, ${barColor}, transparent)`,\n                            }}\n                            animate={{\n                              opacity: [0.8, 0, 0.8],\n                              scale: [1, 1.2, 1]\n                            }}\n                            transition={{\n                              duration: 0.6,\n                              repeat: Infinity\n                            }}\n                          />\n                        )}\n                        \n                        {/* Glow effect for comparing */}\n                        {element.isComparing && (\n                          <motion.div\n                            className=\"absolute -inset-1 rounded-t-lg blur-sm\"\n                            style={{ backgroundColor: barColor }}\n                            animate={{\n                              opacity: [0.5, 1, 0.5]\n                            }}\n                            transition={{\n                              duration: 0.4,\n                              repeat: Infinity\n                            }}\n                          />\n                        )}\n                        \n                        {/* Sorted checkmark */}\n                        {element.isSorted && array.length <= 50 && (\n                          <motion.div\n                            initial={{ scale: 0, rotate: -180 }}\n                            animate={{ scale: 1, rotate: 0 }}\n                            className=\"absolute -top-8 left-1/2 -translate-x-1/2\"\n                          >\n                            <div className=\"w-4 h-4 rounded-full bg-green-400 flex items-center justify-center shadow-lg shadow-green-400/50\">\n                              <div className=\"w-2 h-2 border-b-2 border-r-2 border-white transform rotate-45 -translate-y-[1px]\" />\n                            </div>\n                          </motion.div>\n                        )}\n                      </motion.div>\n                    );\n                  })}\n                  \n                  {/* Comparison Indicators */}\n                  {steps.length > 0 && currentStep < steps.length && steps[currentStep].comparingIndices.length > 0 && (\n                    <div className=\"absolute top-0 left-0 right-0 h-full pointer-events-none\">\n                      {steps[currentStep].comparingIndices.map((idx, i) => {\n                        const totalBars = steps[currentStep].array.length;\n                        const barWidth = 100 / totalBars;\n                        const leftPosition = (idx * barWidth) + (barWidth / 2);\n                        \n                        return (\n                          <motion.div\n                            key={`compare-${idx}-${i}`}\n                            initial={{ opacity: 0, y: -20 }}\n                            animate={{ opacity: 1, y: 0 }}\n                            exit={{ opacity: 0 }}\n                            className=\"absolute top-4\"\n                            style={{ left: `${leftPosition}%` }}\n                          >\n                            <motion.div\n                              animate={{\n                                y: [0, -10, 0],\n                                rotate: [0, 10, -10, 0]\n                              }}\n                              transition={{\n                                duration: 1,\n                                repeat: Infinity\n                              }}\n                              className=\"w-8 h-8 -translate-x-1/2\"\n                            >\n                              <div className=\"w-full h-full rounded-full bg-yellow-400 flex items-center justify-center shadow-lg shadow-yellow-400/80\">\n                                <Zap className=\"w-4 h-4 text-gray-900\" />\n                              </div>\n                            </motion.div>\n                          </motion.div>\n                        );\n                      })}\n                    </div>\n                  )}\n                  \n                  {/* Swap Trail Effects */}\n                  {steps.length > 0 && currentStep < steps.length && steps[currentStep].swappingIndices.length >= 2 && (\n                    <div className=\"absolute top-0 left-0 right-0 h-full pointer-events-none overflow-hidden\">\n                      <motion.div\n                        initial={{ pathLength: 0, opacity: 0 }}\n                        animate={{ pathLength: 1, opacity: [0, 1, 0] }}\n                        transition={{ duration: 0.8 }}\n                        className=\"absolute inset-0\"\n                      >\n                        <svg className=\"w-full h-full\">\n                          <motion.path\n                            d={`M ${(steps[currentStep].swappingIndices[0] / steps[currentStep].array.length) * 100}% 50% Q 50% 20%, ${(steps[currentStep].swappingIndices[1] / steps[currentStep].array.length) * 100}% 50%`}\n                            stroke=\"#ff0066\"\n                            strokeWidth=\"3\"\n                            fill=\"none\"\n                            initial={{ pathLength: 0 }}\n                            animate={{ pathLength: 1 }}\n                            transition={{ duration: 0.5 }}\n                            style={{\n                              filter: 'drop-shadow(0 0 8px #ff0066)'\n                            }}\n                          />\n                        </svg>\n                      </motion.div>\n                    </div>\n                  )}\n                </div>\n              )}\n              \n              <div className=\"relative h-full flex items-end justify-center gap-1\">\n\n                {array.length > 0 ? (\n                  array.map((element, index) => {\n                    const currentStepData = steps[currentStep];\n                    const isComparing = currentStepData?.comparingIndices.includes(index);\n                    const isSwapping = currentStepData?.swappingIndices.includes(index);\n                    const isSorted = currentStepData?.sortedIndices.includes(index);\n                    \n                    const maxValue = Math.max(...array.map(el => el.value));\n                    const heightPercentage = (element.value / maxValue) * 100;\n                    \n                    const colorIndex = index % NEON_COLORS.length;\n                    const neonColor = NEON_COLORS[colorIndex];\n                    \n                    let barColor = neonColor;\n                    let glowIntensity = 0.3;\n                    \n                    if (isSorted) {\n                      barColor = '#00ff00';\n                      glowIntensity = 0.8;\n                    } else if (isSwapping) {\n                      barColor = '#ff0066';\n                      glowIntensity = 1;\n                    } else if (isComparing) {\n                      barColor = '#ffff00';\n                      glowIntensity = 0.7;\n                    }\n                    \n                    return (\n                      <motion.div\n                        key={element.id}\n                        className=\"relative flex-1 min-w-[4px] max-w-[60px] group\"\n                        initial={{ opacity: 0, scale: 0 }}\n                        animate={{ \n                          opacity: 1, \n                          scale: 1,\n                          y: isSwapping ? [-10, 0] : 0\n                        }}\n                        transition={{ \n                          duration: 0.3,\n                          y: { duration: 0.2, repeat: isSwapping ? 1 : 0 }\n                        }}\n                      >\n                        <motion.div\n                          className=\"w-full rounded-t-lg relative overflow-hidden\"\n                          style={{\n                            backgroundColor: barColor,\n                            boxShadow: `\n                              0 0 ${glowIntensity * 20}px ${barColor},\n                              0 0 ${glowIntensity * 40}px ${barColor},\n                              inset 0 0 ${glowIntensity * 10}px rgba(255, 255, 255, 0.5)\n                            `,\n                            border: `1px solid ${barColor}`,\n                          }}\n                          animate={{\n                            height: `${heightPercentage}%`,\n                            boxShadow: [\n                              `0 0 ${glowIntensity * 20}px ${barColor}, 0 0 ${glowIntensity * 40}px ${barColor}, inset 0 0 ${glowIntensity * 10}px rgba(255, 255, 255, 0.5)`,\n                              `0 0 ${glowIntensity * 30}px ${barColor}, 0 0 ${glowIntensity * 60}px ${barColor}, inset 0 0 ${glowIntensity * 15}px rgba(255, 255, 255, 0.7)`,\n                              `0 0 ${glowIntensity * 20}px ${barColor}, 0 0 ${glowIntensity * 40}px ${barColor}, inset 0 0 ${glowIntensity * 10}px rgba(255, 255, 255, 0.5)`\n                            ]\n                          }}\n                          transition={{\n                            height: { duration: 0.5, ease: 'easeInOut' },\n                            boxShadow: { duration: 1, repeat: Infinity, ease: 'easeInOut' }\n                          }}\n                        >\n                          {/* Shimmer effect */}\n                          <motion.div\n                            className=\"absolute inset-0 bg-gradient-to-t from-transparent via-white/30 to-transparent\"\n                            animate={{\n                              y: ['-100%', '200%']\n                            }}\n                            transition={{\n                              duration: 2,\n                              repeat: Infinity,\n                              ease: 'linear',\n                              repeatDelay: 1\n                            }}\n                          />\n                          \n                          {/* Pulse effect for comparing/swapping */}\n                          {(isComparing || isSwapping) && (\n                            <motion.div\n                              className=\"absolute inset-0\"\n                              style={{\n                                backgroundColor: barColor,\n                                opacity: 0.5\n                              }}\n                              animate={{\n                                opacity: [0.5, 0, 0.5]\n                              }}\n                              transition={{\n                                duration: 0.6,\n                                repeat: Infinity,\n                                ease: 'easeInOut'\n                              }}\n                            />\n                          )}\n                        </motion.div>\n                        \n                        {/* Value label */}\n                        <motion.div\n                          className=\"absolute -bottom-6 left-1/2 transform -translate-x-1/2 text-xs font-mono font-bold opacity-0 group-hover:opacity-100 transition-opacity whitespace-nowrap\"\n                          style={{\n                            color: barColor,\n                            textShadow: `0 0 10px ${barColor}`\n                          }}\n                        >\n                          {element.value}\n                        </motion.div>\n                        \n                        {/* Sorted checkmark */}\n                        {isSorted && (\n                          <motion.div\n                            className=\"absolute -top-8 left-1/2 transform -translate-x-1/2\"\n                            initial={{ scale: 0, rotate: -180 }}\n                            animate={{ scale: 1, rotate: 0 }}\n                            transition={{ type: 'spring', stiffness: 300, damping: 20 }}\n                          >\n                            <div \n                              className=\"w-6 h-6 rounded-full flex items-center justify-center\"\n                              style={{\n                                backgroundColor: '#00ff00',\n                                boxShadow: '0 0 20px #00ff00'\n                              }}\n                            >\n                              <span className=\"text-gray-900 text-xs font-bold\">\u2713</span>\n                            </div>\n                          </motion.div>\n                        )}\n                      </motion.div>\n                    );\n                  })\n                ) : (\n                  <motion.div\n                    className=\"absolute inset-0 flex items-center justify-center\"\n                    initial={{ opacity: 0 }}\n                    animate={{ opacity: 1 }}\n                  >\n                    <div className=\"text-center space-y-4\">\n                      <motion.div\n                        animate={{\n                          scale: [1, 1.2, 1],\n                          rotate: [0, 360]\n                        }}\n                        transition={{\n                          duration: 2,\n                          repeat: Infinity,\n                          ease: 'easeInOut'\n                        }}\n                      >\n                        <BarChart3 className=\"w-16 h-16 text-cyan-400 mx-auto\" style={{\n                          filter: 'drop-shadow(0 0 20px rgba(34, 211, 238, 0.8))'\n                        }} />\n                      </motion.div>\n                      <p className=\"text-cyan-400 text-lg font-semibold\">\n                        Generate an array to start visualizing\n                      </p>\n                      <p className=\"text-gray-400 text-sm\">\n                        Click the reset button to create a random array\n                      </p>\n                    </div>\n                  </motion.div>\n                )}\n              </div>\n\n              \n              \n                            {steps.length > 0 && currentStep < steps.length && (\n                <>\n                  {steps[currentStep].swappingIndices.map((index, i) => {\n                    const element = steps[currentStep].array[index];\n                    const maxValue = Math.max(...steps[currentStep].array.map(el => el.value));\n                    const heightPercent = (element.value / maxValue) * 100;\n                    const barWidth = 100 / steps[currentStep].array.length;\n                    const xPosition = index * barWidth;\n\n                    return (\n                      <motion.div\n                        key={`trail-${element.id}-${currentStep}-${i}`}\n                        className=\"absolute bottom-0 rounded-t-lg pointer-events-none\"\n                        style={{\n                          left: `${xPosition}%`,\n                          width: `${barWidth}%`,\n                          height: `${heightPercent}%`,\n                          background: `linear-gradient(to top, ${NEON_COLORS[index % NEON_COLORS.length]}, transparent)`,\n                          filter: 'blur(8px)',\n                          opacity: 0.6,\n                        }}\n                        initial={{ opacity: 0.8, scale: 1 }}\n                        animate={{ \n                          opacity: 0,\n                          scale: 1.2,\n                          filter: 'blur(20px)'\n                        }}\n                        transition={{ \n                          duration: 0.6,\n                          ease: 'easeOut'\n                        }}\n                      />\n                    );\n                  })}\n                  \n                  {steps[currentStep].swappingIndices.map((index, i) => (\n                    <motion.div\n                      key={`particle-trail-${index}-${currentStep}-${i}`}\n                      className=\"absolute pointer-events-none\"\n                      style={{\n                        left: `${(index * 100 / steps[currentStep].array.length) + (50 / steps[currentStep].array.length)}%`,\n                        bottom: `${(steps[currentStep].array[index].value / Math.max(...steps[currentStep].array.map(el => el.value))) * 50}%`,\n                      }}\n                    >\n                      {[...Array(8)].map((_, particleIndex) => (\n                        <motion.div\n                          key={`particle-${particleIndex}`}\n                          className=\"absolute w-2 h-2 rounded-full\"\n                          style={{\n                            background: NEON_COLORS[index % NEON_COLORS.length],\n                            boxShadow: `0 0 10px ${NEON_COLORS[index % NEON_COLORS.length]}`,\n                          }}\n                          initial={{ \n                            opacity: 1,\n                            scale: 1,\n                            x: 0,\n                            y: 0\n                          }}\n                          animate={{ \n                            opacity: 0,\n                            scale: 0,\n                            x: Math.cos((particleIndex / 8) * Math.PI * 2) * 40,\n                            y: Math.sin((particleIndex / 8) * Math.PI * 2) * 40,\n                          }}\n                          transition={{ \n                            duration: 0.8,\n                            ease: 'easeOut',\n                            delay: particleIndex * 0.02\n                          }}\n                        />\n                      ))}\n                    </motion.div>\n                  ))}\n\n                  {steps[currentStep].swappingIndices.length === 2 && (\n                    <motion.div\n                      key={`swap-line-${currentStep}`}\n                      className=\"absolute pointer-events-none\"\n                      style={{\n                        left: `${(steps[currentStep].swappingIndices[0] * 100 / steps[currentStep].array.length) + (50 / steps[currentStep].array.length)}%`,\n                        right: `${100 - ((steps[currentStep].swappingIndices[1] * 100 / steps[currentStep].array.length) + (50 / steps[currentStep].array.length))}%`,\n                        top: '50%',\n                        height: '2px',\n                        background: `linear-gradient(to right, ${NEON_COLORS[steps[currentStep].swappingIndices[0] % NEON_COLORS.length]}, ${NEON_COLORS[steps[currentStep].swappingIndices[1] % NEON_COLORS.length]})`,\n                        boxShadow: `0 0 20px ${NEON_COLORS[steps[currentStep].swappingIndices[0] % NEON_COLORS.length]}`,\n                      }}\n                      initial={{ opacity: 0, scaleX: 0 }}\n                      animate={{ \n                        opacity: [0, 1, 1, 0],\n                        scaleX: [0, 1, 1, 1],\n                      }}\n                      transition={{ \n                        duration: 0.6,\n                        times: [0, 0.2, 0.8, 1]\n                      }}\n                    />\n                  )}\n                  {steps.length > 0 && currentStep < steps.length && (\n                    <>\n                      {/* Comparison Indicators */}\n                      {steps[currentStep].comparingIndices.map((index, i) => {\n                        const barWidth = 100 / (steps[currentStep].array.length || 1);\n                        const leftPosition = index * barWidth + barWidth / 2;\n                        \n                        return (\n                          <motion.div\n                            key={`compare-${index}-${i}`}\n                            className=\"absolute pointer-events-none\"\n                            style={{\n                              left: `${leftPosition}%`,\n                              top: '10%',\n                              transform: 'translateX(-50%)'\n                            }}\n                            initial={{ opacity: 0, y: -20, scale: 0 }}\n                            animate={{ \n                              opacity: [0, 1, 1, 0],\n                              y: [-20, 0, 0, 10],\n                              scale: [0, 1.2, 1, 0.8],\n                            }}\n                            transition={{\n                              duration: 0.8,\n                              repeat: Infinity,\n                              ease: \"easeInOut\"\n                            }}\n                          >\n                            <div className=\"relative\">\n                              {/* Glowing ring */}\n                              <motion.div\n                                className=\"absolute inset-0 rounded-full\"\n                                style={{\n                                  width: '40px',\n                                  height: '40px',\n                                  background: `radial-gradient(circle, ${NEON_COLORS[0]}40, transparent)`,\n                                  boxShadow: `0 0 20px ${NEON_COLORS[0]}, 0 0 40px ${NEON_COLORS[0]}80`,\n                                }}\n                                animate={{\n                                  scale: [1, 1.5, 1],\n                                  opacity: [0.6, 0.2, 0.6]\n                                }}\n                                transition={{\n                                  duration: 1,\n                                  repeat: Infinity,\n                                  ease: \"easeInOut\"\n                                }}\n                              />\n                              \n                              {/* Center indicator */}\n                              <div \n                                className=\"relative w-10 h-10 rounded-full flex items-center justify-center border-2\"\n                                style={{\n                                  borderColor: NEON_COLORS[0],\n                                  backgroundColor: `${NEON_COLORS[0]}20`,\n                                  boxShadow: `0 0 15px ${NEON_COLORS[0]}, inset 0 0 15px ${NEON_COLORS[0]}40`\n                                }}\n                              >\n                                <motion.div\n                                  className=\"w-3 h-3 rounded-full\"\n                                  style={{\n                                    backgroundColor: NEON_COLORS[0],\n                                    boxShadow: `0 0 10px ${NEON_COLORS[0]}`\n                                  }}\n                                  animate={{\n                                    scale: [1, 1.3, 1],\n                                  }}\n                                  transition={{\n                                    duration: 0.5,\n                                    repeat: Infinity,\n                                    ease: \"easeInOut\"\n                                  }}\n                                />\n                              </div>\n                              \n                              {/* Floating label */}\n                              <motion.div\n                                className=\"absolute -top-8 left-1/2 transform -translate-x-1/2 whitespace-nowrap\"\n                                animate={{\n                                  y: [-2, 2, -2],\n                                }}\n                                transition={{\n                                  duration: 1.5,\n                                  repeat: Infinity,\n                                  ease: \"easeInOut\"\n                                }}\n                              >\n                                <span \n                                  className=\"text-xs font-bold px-2 py-1 rounded\"\n                                  style={{\n                                    color: NEON_COLORS[0],\n                                    backgroundColor: `${NEON_COLORS[0]}20`,\n                                    textShadow: `0 0 10px ${NEON_COLORS[0]}`,\n                                    border: `1px solid ${NEON_COLORS[0]}60`\n                                  }}\n                                >\n                                  COMPARE\n                                </span>\n                              </motion.div>\n                              \n                              {/* Vertical beam */}\n                              <motion.div\n                                className=\"absolute left-1/2 transform -translate-x-1/2\"\n                                style={{\n                                  top: '40px',\n                                  width: '2px',\n                                  height: '100px',\n                                  background: `linear-gradient(to bottom, ${NEON_COLORS[0]}, transparent)`,\n                                  boxShadow: `0 0 10px ${NEON_COLORS[0]}`\n                                }}\n                                animate={{\n                                  opacity: [0.8, 0.3, 0.8],\n                                  scaleY: [1, 1.1, 1]\n                                }}\n                                transition={{\n                                  duration: 1,\n                                  repeat: Infinity,\n                                  ease: \"easeInOut\"\n                                }}\n                              />\n                            </div>\n                          </motion.div>\n                        );\n                      })}\n                    </>\n                  )}\n                </>\n              )}\n            </div>\n          </div>\n        </div>\n\n\n        \n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ delay: 0.4, duration: 0.6 }}\n          className=\"bg-gray-900/50 backdrop-blur-lg border border-cyan-500/30 rounded-xl p-6 shadow-2xl shadow-cyan-500/20\"\n        >\n          <div className=\"flex items-center gap-2 mb-6\">\n            <BarChart3 className=\"w-5 h-5 text-cyan-400\" />\n            <h3 className=\"text-cyan-400 font-bold text-lg tracking-wider\">LEGEND</h3>\n          </div>\n\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n            {/* Default State */}\n            <motion.div\n              className=\"relative overflow-hidden rounded-lg bg-gray-800/50 border border-gray-700 p-4 group hover:border-cyan-500/50 transition-all duration-300\"\n              whileHover={{ scale: 1.05, y: -2 }}\n              transition={{ type: 'spring', stiffness: 300 }}\n            >\n              <div className=\"absolute inset-0 bg-gradient-to-br from-cyan-500/0 via-cyan-500/5 to-cyan-500/0 opacity-0 group-hover:opacity-100 transition-opacity duration-500\" />\n              <div className=\"relative z-10 space-y-3\">\n                <motion.div\n                  className=\"w-full h-12 bg-gradient-to-t from-gray-600 to-gray-400 rounded-md shadow-lg\"\n                  animate={{\n                    boxShadow: [\n                      '0 4px 15px rgba(156, 163, 175, 0.3)',\n                      '0 4px 20px rgba(156, 163, 175, 0.5)',\n                      '0 4px 15px rgba(156, 163, 175, 0.3)'\n                    ]\n                  }}\n                  transition={{ duration: 2, repeat: Infinity }}\n                />\n                <div className=\"text-center\">\n                  <div className=\"text-xs font-semibold text-gray-300 tracking-wide\">DEFAULT</div>\n                  <div className=\"text-[10px] text-gray-500 mt-1\">Unsorted</div>\n                </div>\n              </div>\n            </motion.div>\n\n            {/* Comparing State */}\n            <motion.div\n              className=\"relative overflow-hidden rounded-lg bg-gray-800/50 border border-yellow-700/50 p-4 group hover:border-yellow-500/70 transition-all duration-300\"\n              whileHover={{ scale: 1.05, y: -2 }}\n              transition={{ type: 'spring', stiffness: 300 }}\n            >\n              <div className=\"absolute inset-0 bg-gradient-to-br from-yellow-500/0 via-yellow-500/10 to-yellow-500/0 opacity-0 group-hover:opacity-100 transition-opacity duration-500\" />\n              <div className=\"relative z-10 space-y-3\">\n                <motion.div\n                  className=\"w-full h-12 bg-gradient-to-t from-yellow-600 to-yellow-400 rounded-md shadow-lg\"\n                  animate={{\n                    boxShadow: [\n                      '0 4px 20px rgba(250, 204, 21, 0.5)',\n                      '0 4px 30px rgba(250, 204, 21, 0.8)',\n                      '0 4px 20px rgba(250, 204, 21, 0.5)'\n                    ],\n                    scale: [1, 1.05, 1]\n                  }}\n                  transition={{ duration: 1.5, repeat: Infinity }}\n                />\n                <div className=\"text-center\">\n                  <div className=\"text-xs font-semibold text-yellow-300 tracking-wide flex items-center justify-center gap-1\">\n                    <motion.div\n                      animate={{ rotate: 360 }}\n                      transition={{ duration: 2, repeat: Infinity, ease: 'linear' }}\n                    >\n                      <Zap className=\"w-3 h-3\" />\n                    </motion.div>\n                    COMPARING\n                  </div>\n                  <div className=\"text-[10px] text-yellow-500/70 mt-1\">Active Check</div>\n                </div>\n              </div>\n            </motion.div>\n\n            {/* Swapping State */}\n            <motion.div\n              className=\"relative overflow-hidden rounded-lg bg-gray-800/50 border border-pink-700/50 p-4 group hover:border-pink-500/70 transition-all duration-300\"\n              whileHover={{ scale: 1.05, y: -2 }}\n              transition={{ type: 'spring', stiffness: 300 }}\n            >\n              <div className=\"absolute inset-0 bg-gradient-to-br from-pink-500/0 via-pink-500/10 to-pink-500/0 opacity-0 group-hover:opacity-100 transition-opacity duration-500\" />\n              <div className=\"relative z-10 space-y-3\">\n                <motion.div\n                  className=\"w-full h-12 bg-gradient-to-t from-pink-600 to-pink-400 rounded-md shadow-lg\"\n                  animate={{\n                    boxShadow: [\n                      '0 4px 20px rgba(236, 72, 153, 0.5)',\n                      '0 4px 35px rgba(236, 72, 153, 0.9)',\n                      '0 4px 20px rgba(236, 72, 153, 0.5)'\n                    ],\n                    x: [-2, 2, -2]\n                  }}\n                  transition={{ duration: 0.8, repeat: Infinity }}\n                />\n                <div className=\"text-center\">\n                  <div className=\"text-xs font-semibold text-pink-300 tracking-wide flex items-center justify-center gap-1\">\n                    <motion.div\n                      animate={{ x: [-3, 3, -3] }}\n                      transition={{ duration: 0.6, repeat: Infinity }}\n                    >\n                      <RotateCcw className=\"w-3 h-3\" />\n                    </motion.div>\n                    SWAPPING\n                  </div>\n                  <div className=\"text-[10px] text-pink-500/70 mt-1\">Exchanging</div>\n                </div>\n              </div>\n            </motion.div>\n\n            {/* Sorted State */}\n            <motion.div\n              className=\"relative overflow-hidden rounded-lg bg-gray-800/50 border border-green-700/50 p-4 group hover:border-green-500/70 transition-all duration-300\"\n              whileHover={{ scale: 1.05, y: -2 }}\n              transition={{ type: 'spring', stiffness: 300 }}\n            >\n              <div className=\"absolute inset-0 bg-gradient-to-br from-green-500/0 via-green-500/10 to-green-500/0 opacity-0 group-hover:opacity-100 transition-opacity duration-500\" />\n              <div className=\"relative z-10 space-y-3\">\n                <motion.div\n                  className=\"w-full h-12 bg-gradient-to-t from-green-600 to-green-400 rounded-md shadow-lg\"\n                  animate={{\n                    boxShadow: [\n                      '0 4px 20px rgba(34, 197, 94, 0.5)',\n                      '0 4px 30px rgba(34, 197, 94, 0.7)',\n                      '0 4px 20px rgba(34, 197, 94, 0.5)'\n                    ]\n                  }}\n                  transition={{ duration: 2, repeat: Infinity }}\n                />\n                <div className=\"text-center\">\n                  <div className=\"text-xs font-semibold text-green-300 tracking-wide flex items-center justify-center gap-1\">\n                    <motion.div\n                      animate={{ scale: [1, 1.2, 1] }}\n                      transition={{ duration: 1, repeat: Infinity }}\n                    >\n                      \u2713\n                    </motion.div>\n                    SORTED\n                  </div>\n                  <div className=\"text-[10px] text-green-500/70 mt-1\">Complete</div>\n                </div>\n              </div>\n            </motion.div>\n          </div>\n\n          {/* Additional Info */}\n          <motion.div\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            transition={{ delay: 0.8 }}\n            className=\"mt-6 pt-4 border-t border-gray-700/50\"\n          >\n            <div className=\"flex items-center justify-center gap-6 text-xs text-gray-400\">\n              <div className=\"flex items-center gap-2\">\n                <motion.div\n                  className=\"w-2 h-2 rounded-full bg-cyan-400\"\n                  animate={{\n                    boxShadow: [\n                      '0 0 5px rgba(34, 211, 238, 0.5)',\n                      '0 0 15px rgba(34, 211, 238, 0.8)',\n                      '0 0 5px rgba(34, 211, 238, 0.5)'\n                    ]\n                  }}\n                  transition={{ duration: 2, repeat: Infinity }}\n                />\n                <span>Real-time Animation</span>\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <motion.div\n                  className=\"w-2 h-2 rounded-full bg-purple-400\"\n                  animate={{\n                    boxShadow: [\n                      '0 0 5px rgba(168, 85, 247, 0.5)',\n                      '0 0 15px rgba(168, 85, 247, 0.8)',\n                      '0 0 5px rgba(168, 85, 247, 0.5)'\n                    ]\n                  }}\n                  transition={{ duration: 2, repeat: Infinity, delay: 0.5 }}\n                />\n                <span>Step-by-Step</span>\n              </div>\n            </div>\n          </motion.div>\n        </motion.div>\n      </div>\n    </div>\n  );\n}",
  "error": null,
  "overall_score": 36,
  "code_quality_score": 12,
  "architecture_score": 10,
  "performance_score": 8,
  "accessibility_score": 6,
  "metadata": {
    "document_id": "eval_room_8e4af09464ae",
    "prompt_category": "creative",
    "prompt_complexity": 9.0
  },
  "raw_response": {
    "document_id": "eval_room_8e4af09464ae",
    "mode": "parallel",
    "prompt": "Build a captivating algorithm visualizer with neon colored bars, smooth height transitions, glowing comparison indicators, trail effects during swaps, and a futuristic dashboard design with animated controls",
    "content": "import { useState, useCallback } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Slider } from '@/components/ui/slider';\nimport { Play, Pause, RotateCcw, Zap, BarChart3 } from 'lucide-react';\nimport { motion } from 'framer-motion';\n\ninterface ArrayElement {\n  value: number;\n  id: string;\n  isComparing?: boolean;\n  isSwapping?: boolean;\n  isSorted?: boolean;\n}\n\ninterface AlgorithmStep {\n  array: ArrayElement[];\n  comparingIndices: number[];\n  swappingIndices: number[];\n  sortedIndices: number[];\n}\n\ntype AlgorithmType = 'bubble' | 'quick' | 'merge' | 'insertion';\n\nconst NEON_COLORS = [\n  '#00ffff',\n  '#ff00ff', \n  '#00ff00',\n  '#ffff00',\n  '#ff0066',\n  '#00ffaa'\n];\n\nconst mockAlgorithms = [\n  { id: 'bubble', name: 'Bubble Sort', complexity: 'O(n\u00b2)' },\n  { id: 'quick', name: 'Quick Sort', complexity: 'O(n log n)' },\n  { id: 'merge', name: 'Merge Sort', complexity: 'O(n log n)' },\n  { id: 'insertion', name: 'Insertion Sort', complexity: 'O(n\u00b2)' }\n];\n\nconst useAnimationLoop = (\n  steps: AlgorithmStep[],\n  currentStep: number,\n  speed: number[],\n  isPlaying: boolean,\n  onStepChange: (step: number) => void,\n  onComplete: () => void\n) => {\n  const [animationId, setAnimationId] = useState<NodeJS.Timeout | null>(null);\n\n  const cleanup = useCallback(() => {\n    if (animationId) {\n      clearTimeout(animationId);\n      setAnimationId(null);\n    }\n  }, [animationId]);\n\n  const animate = useCallback(() => {\n    if (currentStep < steps.length - 1) {\n      const delay = 1000 - speed[0] * 9.5; // Convert speed slider to delay (50 = 525ms, 100 = 50ms)\n      const id = setTimeout(() => {\n        onStepChange(currentStep + 1);\n      }, delay);\n      setAnimationId(id);\n    } else {\n      onComplete();\n    }\n  }, [currentStep, steps.length, speed, onStepChange, onComplete]);\n\n  // Run animation when playing\n  if (isPlaying && steps.length > 0) {\n    animate();\n  }\n\n  // Cleanup on unmount or when stopping\n  return cleanup;\n};\nexport default function AlgorithmVisualizer() {\n  const [array, setArray] = useState<ArrayElement[]>([]);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [speed, setSpeed] = useState([50]);\n  const [arraySize, setArraySize] = useState([20]);\n  const [selectedAlgorithm, setSelectedAlgorithm] = useState<AlgorithmType>('bubble');\n  const [currentStep, setCurrentStep] = useState(0);\n  const [steps, setSteps] = useState<AlgorithmStep[]>([]);\n\n  const generateRandomArray = useCallback(() => {\n    const newArray: ArrayElement[] = Array.from({ length: arraySize[0] }, (_, index) => ({\n      value: Math.floor(Math.random() * 100) + 1,\n      id: `element-${Date.now()}-${index}`,\n      isComparing: false,\n      isSwapping: false,\n      isSorted: false\n    }));\n    setArray(newArray);\n    setSteps([]);\n    setCurrentStep(0);\n    setIsPlaying(false);\n  }, [arraySize]);\n\n  const resetVisualization = useCallback(() => {\n\n    setIsPlaying(false);\n    setCurrentStep(0);\n    setSteps([]);\n    generateRandomArray();\n  }, [generateRandomArray]);\n\n  const startVisualization = useCallback(() => {\n    if (steps.length === 0) return;\n    if (currentStep >= steps.length - 1) {\n      setCurrentStep(0);\n    }\n    setIsPlaying(true);\n  \n  }, [steps, speed, currentStep]);\n\n  const pauseVisualization = useCallback(() => {\n\n    setIsPlaying(false);\n  }, []);\n\n  const generateSortingSteps = useCallback((algorithm: AlgorithmType) => {\n    const sortedArray = [...array];\n    const algorithmSteps: AlgorithmStep[] = [];\n    \n    // Helper to create a step snapshot\n    const createStep = (\n      arr: ArrayElement[],\n      comparing: number[] = [],\n      swapping: number[] = [],\n      sorted: number[] = []\n    ) => {\n      algorithmSteps.push({\n        array: arr.map((el, idx) => ({\n          ...el,\n          isComparing: comparing.includes(idx),\n          isSwapping: swapping.includes(idx),\n          isSorted: sorted.includes(idx)\n        })),\n        comparingIndices: comparing,\n        swappingIndices: swapping,\n        sortedIndices: sorted\n      });\n    };\n\n    // Initial state\n    createStep([...sortedArray]);\n\n    switch (algorithm) {\n      case 'bubble': {\n        const n = sortedArray.length;\n        const sortedIndices: number[] = [];\n        \n        for (let i = 0; i < n - 1; i++) {\n          for (let j = 0; j < n - i - 1; j++) {\n            // Comparing\n            createStep([...sortedArray], [j, j + 1], [], sortedIndices);\n            \n            if (sortedArray[j].value > sortedArray[j + 1].value) {\n              // Swapping\n              createStep([...sortedArray], [], [j, j + 1], sortedIndices);\n              [sortedArray[j], sortedArray[j + 1]] = [sortedArray[j + 1], sortedArray[j]];\n              createStep([...sortedArray], [], [j, j + 1], sortedIndices);\n            }\n          }\n          sortedIndices.push(n - i - 1);\n          createStep([...sortedArray], [], [], sortedIndices);\n        }\n        sortedIndices.push(0);\n        createStep([...sortedArray], [], [], sortedIndices);\n        break;\n      }\n\n      case 'insertion': {\n        const sortedIndices: number[] = [0];\n        \n        for (let i = 1; i < sortedArray.length; i++) {\n          const key = sortedArray[i];\n          let j = i - 1;\n          \n          createStep([...sortedArray], [i], [], sortedIndices);\n          \n          while (j >= 0 && sortedArray[j].value > key.value) {\n            createStep([...sortedArray], [j, j + 1], [], sortedIndices);\n            createStep([...sortedArray], [], [j, j + 1], sortedIndices);\n            sortedArray[j + 1] = sortedArray[j];\n            createStep([...sortedArray], [], [j, j + 1], sortedIndices);\n            j--;\n          }\n          \n          sortedArray[j + 1] = key;\n          sortedIndices.push(i);\n          createStep([...sortedArray], [], [], sortedIndices);\n        }\n        break;\n      }\n\n      case 'quick': {\n        const sortedIndices: number[] = [];\n        \n        const partition = (low: number, high: number): number => {\n          const pivot = sortedArray[high];\n          let i = low - 1;\n          \n          createStep([...sortedArray], [high], [], sortedIndices);\n          \n          for (let j = low; j < high; j++) {\n            createStep([...sortedArray], [j, high], [], sortedIndices);\n            \n            if (sortedArray[j].value < pivot.value) {\n              i++;\n              if (i !== j) {\n                createStep([...sortedArray], [], [i, j], sortedIndices);\n                [sortedArray[i], sortedArray[j]] = [sortedArray[j], sortedArray[i]];\n                createStep([...sortedArray], [], [i, j], sortedIndices);\n              }\n            }\n          }\n          \n          createStep([...sortedArray], [], [i + 1, high], sortedIndices);\n          [sortedArray[i + 1], sortedArray[high]] = [sortedArray[high], sortedArray[i + 1]];\n          createStep([...sortedArray], [], [i + 1, high], sortedIndices);\n          sortedIndices.push(i + 1);\n          \n          return i + 1;\n        };\n        \n        const quickSort = (low: number, high: number) => {\n          if (low < high) {\n            const pi = partition(low, high);\n            quickSort(low, pi - 1);\n            quickSort(pi + 1, high);\n          } else if (low === high) {\n            sortedIndices.push(low);\n            createStep([...sortedArray], [], [], sortedIndices);\n          }\n        };\n        \n        quickSort(0, sortedArray.length - 1);\n        break;\n      }\n\n      case 'merge': {\n        const sortedIndices: number[] = [];\n        \n        const merge = (left: number, mid: number, right: number) => {\n          const leftArr = sortedArray.slice(left, mid + 1);\n          const rightArr = sortedArray.slice(mid + 1, right + 1);\n          \n          let i = 0, j = 0, k = left;\n          \n          while (i < leftArr.length && j < rightArr.length) {\n            createStep([...sortedArray], [left + i, mid + 1 + j], [], sortedIndices);\n            \n            if (leftArr[i].value <= rightArr[j].value) {\n              createStep([...sortedArray], [], [k], sortedIndices);\n              sortedArray[k] = leftArr[i];\n              createStep([...sortedArray], [], [k], sortedIndices);\n              i++;\n            } else {\n              createStep([...sortedArray], [], [k], sortedIndices);\n              sortedArray[k] = rightArr[j];\n              createStep([...sortedArray], [], [k], sortedIndices);\n              j++;\n            }\n            k++;\n          }\n          \n          while (i < leftArr.length) {\n            sortedArray[k] = leftArr[i];\n            createStep([...sortedArray], [], [k], sortedIndices);\n            i++;\n            k++;\n          }\n          \n          while (j < rightArr.length) {\n            sortedArray[k] = rightArr[j];\n            createStep([...sortedArray], [], [k], sortedIndices);\n            j++;\n            k++;\n          }\n          \n          if (left === 0 && right === sortedArray.length - 1) {\n            for (let idx = 0; idx < sortedArray.length; idx++) {\n              sortedIndices.push(idx);\n            }\n          }\n          createStep([...sortedArray], [], [], sortedIndices);\n        };\n        \n        const mergeSort = (left: number, right: number) => {\n          if (left < right) {\n            const mid = Math.floor((left + right) / 2);\n            mergeSort(left, mid);\n            mergeSort(mid + 1, right);\n            merge(left, mid, right);\n          }\n        };\n        \n        mergeSort(0, sortedArray.length - 1);\n        break;\n      }\n    }\n\n    setSteps(algorithmSteps);\n    setCurrentStep(0);\n  }, [array]);\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-gray-900 via-purple-900 to-gray-900 p-8\">\n      <div className=\"max-w-7xl mx-auto space-y-8\">\n        <motion.div\n          initial={{ opacity: 0, y: -20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.8 }}\n          className=\"text-center space-y-4\"\n        >\n          <motion.h1\n            className=\"text-6xl font-bold bg-gradient-to-r from-cyan-400 via-purple-400 to-pink-400 bg-clip-text text-transparent\"\n            animate={{\n              textShadow: [\n                '0 0 20px rgba(0, 255, 255, 0.5)',\n                '0 0 40px rgba(255, 0, 255, 0.5)',\n                '0 0 20px rgba(0, 255, 255, 0.5)'\n              ]\n            }}\n            transition={{ duration: 2, repeat: Infinity }}\n          >\n            Algorithm Visualizer\n          </motion.h1>\n          \n          <div className=\"flex items-center justify-center gap-4\">\n            <motion.div\n              initial={{ scale: 0 }}\n              animate={{ scale: 1 }}\n              transition={{ delay: 0.3, type: 'spring', stiffness: 200 }}\n              className=\"px-6 py-3 bg-gradient-to-r from-purple-600/30 to-pink-600/30 rounded-lg border border-purple-500/50 backdrop-blur-sm\"\n            >\n              <div className=\"flex items-center gap-3\">\n                <Zap className=\"w-5 h-5 text-yellow-400\" />\n                <span className=\"text-xl font-semibold text-white\">\n                  {mockAlgorithms.find(a => a.id === selectedAlgorithm)?.name || 'Bubble Sort'}\n                </span>\n              </div>\n            </motion.div>\n            \n            <motion.div\n              initial={{ scale: 0 }}\n              animate={{ scale: 1 }}\n              transition={{ delay: 0.5, type: 'spring', stiffness: 200 }}\n              className=\"px-4 py-2 bg-cyan-500/20 rounded-full border border-cyan-400/50 backdrop-blur-sm\"\n            >\n              <div className=\"flex items-center gap-2\">\n                <BarChart3 className=\"w-4 h-4 text-cyan-400\" />\n                <span className=\"text-sm font-mono text-cyan-300\">\n                  {mockAlgorithms.find(a => a.id === selectedAlgorithm)?.complexity || 'O(n\u00b2)'}\n                </span>\n              </div>\n            </motion.div>\n          </div>\n        </motion.div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-6\">\n          <div className=\"lg:col-span-1 space-y-6\">\n            <motion.div\n              initial={{ opacity: 0, x: -50 }}\n              animate={{ opacity: 1, x: 0 }}\n              className=\"bg-gray-900/50 backdrop-blur-lg border border-cyan-500/30 rounded-xl p-6 shadow-2xl shadow-cyan-500/20\"\n            >\n              <div className=\"space-y-6\">\n                {/* Algorithm Selection */}\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center gap-2 mb-4\">\n                    <Zap className=\"w-5 h-5 text-cyan-400\" />\n                    <h3 className=\"text-cyan-400 font-bold text-lg tracking-wider\">ALGORITHM</h3>\n                  </div>\n                  <div className=\"grid grid-cols-1 gap-2\">\n                    {mockAlgorithms.map((algo) => (\n                      <motion.button\n                        key={algo.id}\n                        whileHover={{ scale: 1.02 }}\n                        whileTap={{ scale: 0.98 }}\n                        onClick={() => setSelectedAlgorithm(algo.id as AlgorithmType)}\n                        className={`p-3 rounded-lg border transition-all duration-300 text-left ${\n                          selectedAlgorithm === algo.id\n                            ? 'bg-cyan-500/20 border-cyan-400 shadow-lg shadow-cyan-500/50'\n                            : 'bg-gray-800/50 border-gray-700 hover:border-cyan-500/50'\n                        }`}\n                      >\n                        <div className=\"font-semibold text-white\">{algo.name}</div>\n                        <div className=\"text-xs text-gray-400 mt-1\">{algo.complexity}</div>\n                      </motion.button>\n                    ))}\n                  </div>\n                </div>\n\n                {/* Array Size Control */}\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center gap-2\">\n                      <BarChart3 className=\"w-4 h-4 text-purple-400\" />\n                      <label className=\"text-purple-400 font-semibold text-sm tracking-wide\">\n                        ARRAY SIZE\n                      </label>\n                    </div>\n                    <span className=\"text-white font-bold text-lg\">{arraySize[0]}</span>\n                  </div>\n                  <Slider\n                    value={arraySize}\n                    onValueChange={setArraySize}\n                    min={5}\n                    max={50}\n                    step={1}\n                    className=\"cursor-pointer\"\n                    disabled={isPlaying}\n                  />\n                </div>\n\n                {/* Speed Control */}\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center gap-2\">\n                      <Zap className=\"w-4 h-4 text-yellow-400\" />\n                      <label className=\"text-yellow-400 font-semibold text-sm tracking-wide\">\n                        SPEED\n                      </label>\n                    </div>\n                    <span className=\"text-white font-bold text-lg\">{speed[0]}%</span>\n                  </div>\n                  <Slider\n                    value={speed}\n                    onValueChange={setSpeed}\n                    min={10}\n                    max={100}\n                    step={10}\n                    className=\"cursor-pointer\"\n                  />\n                </div>\n\n                {/* Control Buttons */}\n                <div className=\"space-y-3 pt-4 border-t border-gray-700/50\">\n                  <Button\n                    onClick={isPlaying ? pauseVisualization : startVisualization}\n                    disabled={steps.length === 0 || (currentStep >= steps.length && !isPlaying)}\n                    className=\"w-full bg-gradient-to-r from-cyan-500 to-blue-500 hover:from-cyan-600 hover:to-blue-600 text-white font-bold py-6 rounded-lg shadow-lg shadow-cyan-500/50 transition-all duration-300\"\n                  >\n                    {isPlaying ? (\n                      <>\n                        <Pause className=\"w-5 h-5 mr-2\" />\n                        PAUSE\n                      </>\n                    ) : (\n                      <>\n                        <Play className=\"w-5 h-5 mr-2\" />\n                        START\n                      </>\n                    )}\n                  </Button>\n\n                  <Button\n                    onClick={resetVisualization}\n                    variant=\"outline\"\n                    className=\"w-full border-2 border-purple-500/50 bg-purple-500/10 hover:bg-purple-500/20 text-purple-300 font-bold py-6 rounded-lg shadow-lg shadow-purple-500/30 transition-all duration-300\"\n                  >\n                    <RotateCcw className=\"w-5 h-5 mr-2\" />\n                    RESET\n                  </Button>\n\n                  <Button\n                    onClick={() => generateSortingSteps(selectedAlgorithm)}\n                    disabled={isPlaying || array.length === 0}\n                    className=\"w-full bg-gradient-to-r from-purple-500 to-pink-500 hover:from-purple-600 hover:to-pink-600 text-white font-bold py-6 rounded-lg shadow-lg shadow-purple-500/50 transition-all duration-300\"\n                  >\n                    <Zap className=\"w-5 h-5 mr-2\" />\n                    GENERATE\n                  </Button>\n                </div>\n\n                {/* Stats Display */}\n                <div className=\"pt-4 border-t border-gray-700/50 space-y-2\">\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-gray-400 text-sm\">Current Step:</span>\n                    <span className=\"text-cyan-400 font-bold\">{currentStep}</span>\n                  </div>\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-gray-400 text-sm\">Total Steps:</span>\n                    <span className=\"text-cyan-400 font-bold\">{steps.length}</span>\n                  </div>\n                  <div className=\"w-full bg-gray-800 rounded-full h-2 overflow-hidden\">\n                    <motion.div\n                      className=\"h-full bg-gradient-to-r from-cyan-500 to-purple-500\"\n                      initial={{ width: 0 }}\n                      animate={{ width: steps.length > 0 ? `${(currentStep / steps.length) * 100}%` : '0%' }}\n                      transition={{ duration: 0.3 }}\n                    />\n                  </div>\n                </div>\n              </div>\n            </motion.div>\n            \n            <div className=\"bg-gray-900/50 backdrop-blur-lg border border-cyan-500/30 rounded-xl p-6 shadow-2xl shadow-cyan-500/20\">\n              <div className=\"space-y-6\">\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center gap-2 text-cyan-400\">\n                    <Zap className=\"w-4 h-4\" />\n                    <span className=\"text-sm font-semibold tracking-wider\">ALGORITHM</span>\n                  </div>\n                  <div className=\"grid grid-cols-1 gap-3\">\n                    {mockAlgorithms.map((algo) => (\n                      <motion.button\n                        key={algo.id}\n                        onClick={() => setSelectedAlgorithm(algo.id as AlgorithmType)}\n                        className={`relative p-4 rounded-lg border-2 transition-all duration-300 text-left overflow-hidden group ${\n                          selectedAlgorithm === algo.id\n                            ? 'border-cyan-400 bg-cyan-500/20 shadow-lg shadow-cyan-500/50'\n                            : 'border-gray-700 bg-gray-800/50 hover:border-cyan-500/50 hover:bg-cyan-500/10'\n                        }`}\n                        whileHover={{ scale: 1.02 }}\n                        whileTap={{ scale: 0.98 }}\n                      >\n                        <div className={`absolute inset-0 bg-gradient-to-r from-cyan-500/0 via-cyan-500/20 to-cyan-500/0 opacity-0 group-hover:opacity-100 transition-opacity duration-500 ${\n                          selectedAlgorithm === algo.id ? 'opacity-100' : ''\n                        }`} />\n                        <div className=\"relative z-10\">\n                          <div className=\"font-semibold text-white mb-1\">{algo.name}</div>\n                          <div className={`text-xs font-mono ${\n                            selectedAlgorithm === algo.id ? 'text-cyan-300' : 'text-gray-400'\n                          }`}>\n                            {algo.complexity}\n                          </div>\n                        </div>\n                        {selectedAlgorithm === algo.id && (\n                          <motion.div\n                            className=\"absolute top-2 right-2\"\n                            initial={{ scale: 0, rotate: -180 }}\n                            animate={{ scale: 1, rotate: 0 }}\n                            transition={{ type: 'spring', stiffness: 200, damping: 15 }}\n                          >\n                            <div className=\"w-2 h-2 rounded-full bg-cyan-400 shadow-lg shadow-cyan-400/80\" />\n                          </motion.div>\n                        )}\n                      </motion.button>\n                    ))}\n                  </div>\n                </div>\n\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <label className=\"text-cyan-400 text-sm font-medium flex items-center gap-2\">\n                      <Zap className=\"w-4 h-4\" />\n                      Speed\n                    </label>\n                    <span className=\"text-cyan-300 text-xs\">{speed[0]}ms</span>\n                  </div>\n                  <Slider\n                    value={speed}\n                    onValueChange={setSpeed}\n                    min={10}\n                    max={200}\n                    step={10}\n                    className=\"[&_[role=slider]]:bg-cyan-400 [&_[role=slider]]:border-cyan-300 [&_[role=slider]]:shadow-[0_0_15px_rgba(34,211,238,0.8)] [&_[role=slider]]:hover:shadow-[0_0_25px_rgba(34,211,238,1)] [&_[role=slider]]:transition-shadow [&_.relative]:bg-gray-700/50 [&_.relative]:border [&_.relative]:border-cyan-500/30 [&_.bg-primary]:bg-gradient-to-r [&_.bg-primary]:from-cyan-500 [&_.bg-primary]:to-purple-500 [&_.bg-primary]:shadow-[0_0_10px_rgba(34,211,238,0.5)]\"\n                  />\n                </div>\n\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <label className=\"text-cyan-400 text-sm font-medium flex items-center gap-2\">\n                      <BarChart3 className=\"w-4 h-4\" />\n                      Array Size\n                    </label>\n                    <span className=\"text-cyan-300 text-xs\">{arraySize[0]}</span>\n                  </div>\n                  <Slider\n                    value={arraySize}\n                    onValueChange={setArraySize}\n                    min={5}\n                    max={100}\n                    step={1}\n                    className=\"[&_[role=slider]]:bg-gradient-to-r [&_[role=slider]]:from-cyan-400 [&_[role=slider]]:to-purple-500 [&_[role=slider]]:border-2 [&_[role=slider]]:border-cyan-300 [&_[role=slider]]:shadow-lg [&_[role=slider]]:shadow-cyan-500/50 [&_[role=slider]]:transition-all [&_[role=slider]]:hover:shadow-xl [&_[role=slider]]:hover:shadow-cyan-400/60 [&>span]:bg-gradient-to-r [&>span]:from-cyan-500/30 [&>span]:to-purple-500/30 [&>span]:h-2\"\n                  />\n                </div>\n\n                <div className=\"flex gap-3 pt-4\">\n                  \n                  <motion.button\n                    onClick={resetVisualization}\n                    className=\"flex-1 px-6 py-3 bg-gradient-to-r from-pink-600/30 to-red-600/30 border-2 border-pink-500/50 rounded-lg text-white font-semibold hover:from-pink-600/50 hover:to-red-600/50 hover:border-pink-400 transition-all duration-300 shadow-lg shadow-pink-500/30 hover:shadow-pink-500/60 hover:shadow-xl flex items-center justify-center gap-2 group\"\n                    whileHover={{ scale: 1.05 }}\n                    whileTap={{ scale: 0.95, rotate: 360 }}\n                    transition={{ type: \"spring\", stiffness: 400, damping: 17 }}\n                  >\n                    <motion.div\n                      animate={{ rotate: 0 }}\n                      whileHover={{ rotate: 180 }}\n                      transition={{ duration: 0.5 }}\n                    >\n                      <RotateCcw className=\"w-5 h-5\" />\n                    </motion.div>\n                    <span>Reset</span>\n                  </motion.button>\n                </div>\n              </div>\n            </div>\n\n            <motion.div\n            initial={{ opacity: 0, x: -50 }}\n            animate={{ opacity: 1, x: 0 }}\n            transition={{ delay: 0.2 }}\n            className=\"bg-gray-900/50 backdrop-blur-lg border border-purple-500/30 rounded-xl p-6 shadow-2xl shadow-purple-500/20\"\n          >\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center gap-2 mb-4\">\n                <BarChart3 className=\"w-5 h-5 text-purple-400\" />\n                <h3 className=\"text-purple-400 font-bold text-lg tracking-wider\">STATISTICS</h3>\n              </div>\n\n              <div className=\"grid grid-cols-1 gap-4\">\n                {/* Comparisons Counter */}\n                <motion.div\n                  className=\"relative overflow-hidden rounded-lg bg-gradient-to-br from-cyan-500/10 to-cyan-600/5 border border-cyan-500/30 p-4\"\n                  whileHover={{ scale: 1.02 }}\n                  transition={{ type: 'spring', stiffness: 300 }}\n                >\n                  <div className=\"absolute inset-0 bg-gradient-to-r from-cyan-500/0 via-cyan-500/10 to-cyan-500/0 animate-pulse\" />\n                  <div className=\"relative z-10\">\n                    <div className=\"text-xs text-cyan-400 font-semibold tracking-wider mb-2\">COMPARISONS</div>\n                    <motion.div\n                      className=\"text-3xl font-bold text-white font-mono\"\n                      key={currentStep}\n                      initial={{ scale: 1.2, color: '#00ffff' }}\n                      animate={{ scale: 1, color: '#ffffff' }}\n                      transition={{ duration: 0.3 }}\n                    >\n                      {steps[currentStep]?.comparingIndices.length > 0 ? \n                        steps.slice(0, currentStep + 1).filter(s => s.comparingIndices.length > 0).length : \n                        0}\n                    </motion.div>\n                    <div className=\"mt-2 h-1 bg-gray-800 rounded-full overflow-hidden\">\n                      <motion.div\n                        className=\"h-full bg-gradient-to-r from-cyan-400 to-cyan-600 shadow-[0_0_10px_rgba(34,211,238,0.8)]\"\n                        initial={{ width: 0 }}\n                        animate={{ \n                          width: steps.length > 0 ? `${(steps.slice(0, currentStep + 1).filter(s => s.comparingIndices.length > 0).length / Math.max(steps.filter(s => s.comparingIndices.length > 0).length, 1)) * 100}%` : '0%'\n                        }}\n                        transition={{ duration: 0.5 }}\n                      />\n                    </div>\n                  </div>\n                </motion.div>\n\n                {/* Swaps Counter */}\n                <motion.div\n                  className=\"relative overflow-hidden rounded-lg bg-gradient-to-br from-pink-500/10 to-pink-600/5 border border-pink-500/30 p-4\"\n                  whileHover={{ scale: 1.02 }}\n                  transition={{ type: 'spring', stiffness: 300 }}\n                >\n                  <div className=\"absolute inset-0 bg-gradient-to-r from-pink-500/0 via-pink-500/10 to-pink-500/0 animate-pulse\" style={{ animationDelay: '0.5s' }} />\n                  <div className=\"relative z-10\">\n                    <div className=\"text-xs text-pink-400 font-semibold tracking-wider mb-2\">SWAPS</div>\n                    <motion.div\n                      className=\"text-3xl font-bold text-white font-mono\"\n                      key={`swap-${currentStep}`}\n                      initial={{ scale: 1.2, color: '#ff00ff' }}\n                      animate={{ scale: 1, color: '#ffffff' }}\n                      transition={{ duration: 0.3 }}\n                    >\n                      {steps[currentStep]?.swappingIndices.length > 0 ? \n                        steps.slice(0, currentStep + 1).filter(s => s.swappingIndices.length > 0).length : \n                        0}\n                    </motion.div>\n                    <div className=\"mt-2 h-1 bg-gray-800 rounded-full overflow-hidden\">\n                      <motion.div\n                        className=\"h-full bg-gradient-to-r from-pink-400 to-pink-600 shadow-[0_0_10px_rgba(255,0,255,0.8)]\"\n                        initial={{ width: 0 }}\n                        animate={{ \n                          width: steps.length > 0 ? `${(steps.slice(0, currentStep + 1).filter(s => s.swappingIndices.length > 0).length / Math.max(steps.filter(s => s.swappingIndices.length > 0).length, 1)) * 100}%` : '0%'\n                        }}\n                        transition={{ duration: 0.5 }}\n                      />\n                    </div>\n                  </div>\n                </motion.div>\n\n                {/* Progress */}\n                <motion.div\n                  className=\"relative overflow-hidden rounded-lg bg-gradient-to-br from-purple-500/10 to-purple-600/5 border border-purple-500/30 p-4\"\n                  whileHover={{ scale: 1.02 }}\n                  transition={{ type: 'spring', stiffness: 300 }}\n                >\n                  <div className=\"absolute inset-0 bg-gradient-to-r from-purple-500/0 via-purple-500/10 to-purple-500/0 animate-pulse\" style={{ animationDelay: '1s' }} />\n                  <div className=\"relative z-10\">\n                    <div className=\"text-xs text-purple-400 font-semibold tracking-wider mb-2\">PROGRESS</div>\n                    <motion.div\n                      className=\"text-3xl font-bold text-white font-mono\"\n                      key={`progress-${currentStep}`}\n                      initial={{ scale: 1.2, color: '#a855f7' }}\n                      animate={{ scale: 1, color: '#ffffff' }}\n                      transition={{ duration: 0.3 }}\n                    >\n                      {steps.length > 0 ? Math.round((currentStep / Math.max(steps.length - 1, 1)) * 100) : 0}%\n                    </motion.div>\n                    <div className=\"mt-2 h-1 bg-gray-800 rounded-full overflow-hidden\">\n                      <motion.div\n                        className=\"h-full bg-gradient-to-r from-purple-400 via-pink-500 to-cyan-400 shadow-[0_0_10px_rgba(168,85,247,0.8)]\"\n                        initial={{ width: 0 }}\n                        animate={{ \n                          width: steps.length > 0 ? `${(currentStep / Math.max(steps.length - 1, 1)) * 100}%` : '0%'\n                        }}\n                        transition={{ duration: 0.5 }}\n                      />\n                    </div>\n                  </div>\n                </motion.div>\n\n                {/* Array Size Info */}\n                <motion.div\n                  className=\"relative overflow-hidden rounded-lg bg-gradient-to-br from-yellow-500/10 to-yellow-600/5 border border-yellow-500/30 p-4\"\n                  whileHover={{ scale: 1.02 }}\n                  transition={{ type: 'spring', stiffness: 300 }}\n                >\n                  <div className=\"relative z-10\">\n                    <div className=\"text-xs text-yellow-400 font-semibold tracking-wider mb-2\">ARRAY SIZE</div>\n                    <div className=\"text-3xl font-bold text-white font-mono\">\n                      {array.length}\n                    </div>\n                    <div className=\"mt-2 text-xs text-yellow-300/70\">\n                      {steps[currentStep]?.sortedIndices.length || 0} / {array.length} sorted\n                    </div>\n                  </div>\n                </motion.div>\n\n                {/* Current Step */}\n                <motion.div\n                  className=\"relative overflow-hidden rounded-lg bg-gradient-to-br from-green-500/10 to-green-600/5 border border-green-500/30 p-4\"\n                  whileHover={{ scale: 1.02 }}\n                  transition={{ type: 'spring', stiffness: 300 }}\n                >\n                  <div className=\"relative z-10\">\n                    <div className=\"text-xs text-green-400 font-semibold tracking-wider mb-2\">CURRENT STEP</div>\n                    <div className=\"text-3xl font-bold text-white font-mono\">\n                      {currentStep}\n                    </div>\n                    <div className=\"mt-2 text-xs text-green-300/70\">\n                      of {Math.max(steps.length - 1, 0)} total steps\n                    </div>\n                  </div>\n                </motion.div>\n              </div>\n            </div>\n          </motion.div>\n          </div>\n\n          <div className=\"lg:col-span-3\">\n\n            <div className=\"bg-gray-900/50 backdrop-blur-lg border border-purple-500/30 rounded-xl p-8 shadow-2xl shadow-purple-500/20 min-h-[600px]\">\n\n\n\n              {array.length === 0 ? (\n                <motion.div\n                  initial={{ opacity: 0, scale: 0.8 }}\n                  animate={{ opacity: 1, scale: 1 }}\n                  className=\"absolute inset-0 flex flex-col items-center justify-center gap-6\"\n                >\n                  <motion.div\n                    animate={{\n                      rotate: [0, 360],\n                      scale: [1, 1.2, 1]\n                    }}\n                    transition={{\n                      duration: 3,\n                      repeat: Infinity,\n                      ease: \"easeInOut\"\n                    }}\n                  >\n                    <BarChart3 className=\"w-24 h-24 text-purple-400/50\" />\n                  </motion.div>\n                  <div className=\"text-center space-y-2\">\n                    <p className=\"text-2xl font-bold text-purple-300\">Generate an Array to Start</p>\n                    <p className=\"text-gray-400\">Click the reset button to create a random array</p>\n                  </div>\n                </motion.div>\n              ) : (\n                <div className=\"relative w-full h-full flex items-end justify-center gap-1 px-4\">\n                  {/* Animated Bars */}\n                  {(steps.length > 0 && currentStep < steps.length ? steps[currentStep].array : array).map((element, index) => {\n                    const maxValue = Math.max(...array.map(el => el.value));\n                    const heightPercentage = (element.value / maxValue) * 100;\n                    \n                    let barColor = NEON_COLORS[index % NEON_COLORS.length];\n                    let glowIntensity = 0.3;\n                    \n                    if (element.isSorted) {\n                      barColor = '#00ff00';\n                      glowIntensity = 0.8;\n                    } else if (element.isSwapping) {\n                      barColor = '#ff0066';\n                      glowIntensity = 1;\n                    } else if (element.isComparing) {\n                      barColor = '#ffff00';\n                      glowIntensity = 0.9;\n                    }\n                    \n                    return (\n                      <motion.div\n                        key={element.id}\n                        layout\n                        initial={{ height: 0, opacity: 0 }}\n                        animate={{\n                          height: `${heightPercentage}%`,\n                          opacity: 1,\n                          boxShadow: [\n                            `0 0 ${10 * glowIntensity}px ${barColor}`,\n                            `0 0 ${20 * glowIntensity}px ${barColor}`,\n                            `0 0 ${10 * glowIntensity}px ${barColor}`\n                          ]\n                        }}\n                        transition={{\n                          height: { duration: 0.3, ease: \"easeOut\" },\n                          opacity: { duration: 0.5 },\n                          boxShadow: { duration: 0.5, repeat: Infinity }\n                        }}\n                        className=\"relative flex-1 min-w-[4px] max-w-[60px] rounded-t-lg\"\n                        style={{\n                          backgroundColor: barColor,\n                          border: `1px solid ${barColor}`,\n                        }}\n                      >\n                        {/* Value label */}\n                        {array.length <= 30 && (\n                          <motion.div\n                            initial={{ opacity: 0 }}\n                            animate={{ opacity: 1 }}\n                            className=\"absolute -top-6 left-1/2 -translate-x-1/2 text-xs font-mono font-bold whitespace-nowrap\"\n                            style={{ color: barColor }}\n                          >\n                            {element.value}\n                          </motion.div>\n                        )}\n                        \n                        {/* Swap trail effect */}\n                        {element.isSwapping && (\n                          <motion.div\n                            className=\"absolute inset-0 rounded-t-lg\"\n                            style={{\n                              background: `linear-gradient(to top, ${barColor}, transparent)`,\n                            }}\n                            animate={{\n                              opacity: [0.8, 0, 0.8],\n                              scale: [1, 1.2, 1]\n                            }}\n                            transition={{\n                              duration: 0.6,\n                              repeat: Infinity\n                            }}\n                          />\n                        )}\n                        \n                        {/* Glow effect for comparing */}\n                        {element.isComparing && (\n                          <motion.div\n                            className=\"absolute -inset-1 rounded-t-lg blur-sm\"\n                            style={{ backgroundColor: barColor }}\n                            animate={{\n                              opacity: [0.5, 1, 0.5]\n                            }}\n                            transition={{\n                              duration: 0.4,\n                              repeat: Infinity\n                            }}\n                          />\n                        )}\n                        \n                        {/* Sorted checkmark */}\n                        {element.isSorted && array.length <= 50 && (\n                          <motion.div\n                            initial={{ scale: 0, rotate: -180 }}\n                            animate={{ scale: 1, rotate: 0 }}\n                            className=\"absolute -top-8 left-1/2 -translate-x-1/2\"\n                          >\n                            <div className=\"w-4 h-4 rounded-full bg-green-400 flex items-center justify-center shadow-lg shadow-green-400/50\">\n                              <div className=\"w-2 h-2 border-b-2 border-r-2 border-white transform rotate-45 -translate-y-[1px]\" />\n                            </div>\n                          </motion.div>\n                        )}\n                      </motion.div>\n                    );\n                  })}\n                  \n                  {/* Comparison Indicators */}\n                  {steps.length > 0 && currentStep < steps.length && steps[currentStep].comparingIndices.length > 0 && (\n                    <div className=\"absolute top-0 left-0 right-0 h-full pointer-events-none\">\n                      {steps[currentStep].comparingIndices.map((idx, i) => {\n                        const totalBars = steps[currentStep].array.length;\n                        const barWidth = 100 / totalBars;\n                        const leftPosition = (idx * barWidth) + (barWidth / 2);\n                        \n                        return (\n                          <motion.div\n                            key={`compare-${idx}-${i}`}\n                            initial={{ opacity: 0, y: -20 }}\n                            animate={{ opacity: 1, y: 0 }}\n                            exit={{ opacity: 0 }}\n                            className=\"absolute top-4\"\n                            style={{ left: `${leftPosition}%` }}\n                          >\n                            <motion.div\n                              animate={{\n                                y: [0, -10, 0],\n                                rotate: [0, 10, -10, 0]\n                              }}\n                              transition={{\n                                duration: 1,\n                                repeat: Infinity\n                              }}\n                              className=\"w-8 h-8 -translate-x-1/2\"\n                            >\n                              <div className=\"w-full h-full rounded-full bg-yellow-400 flex items-center justify-center shadow-lg shadow-yellow-400/80\">\n                                <Zap className=\"w-4 h-4 text-gray-900\" />\n                              </div>\n                            </motion.div>\n                          </motion.div>\n                        );\n                      })}\n                    </div>\n                  )}\n                  \n                  {/* Swap Trail Effects */}\n                  {steps.length > 0 && currentStep < steps.length && steps[currentStep].swappingIndices.length >= 2 && (\n                    <div className=\"absolute top-0 left-0 right-0 h-full pointer-events-none overflow-hidden\">\n                      <motion.div\n                        initial={{ pathLength: 0, opacity: 0 }}\n                        animate={{ pathLength: 1, opacity: [0, 1, 0] }}\n                        transition={{ duration: 0.8 }}\n                        className=\"absolute inset-0\"\n                      >\n                        <svg className=\"w-full h-full\">\n                          <motion.path\n                            d={`M ${(steps[currentStep].swappingIndices[0] / steps[currentStep].array.length) * 100}% 50% Q 50% 20%, ${(steps[currentStep].swappingIndices[1] / steps[currentStep].array.length) * 100}% 50%`}\n                            stroke=\"#ff0066\"\n                            strokeWidth=\"3\"\n                            fill=\"none\"\n                            initial={{ pathLength: 0 }}\n                            animate={{ pathLength: 1 }}\n                            transition={{ duration: 0.5 }}\n                            style={{\n                              filter: 'drop-shadow(0 0 8px #ff0066)'\n                            }}\n                          />\n                        </svg>\n                      </motion.div>\n                    </div>\n                  )}\n                </div>\n              )}\n              \n              <div className=\"relative h-full flex items-end justify-center gap-1\">\n\n                {array.length > 0 ? (\n                  array.map((element, index) => {\n                    const currentStepData = steps[currentStep];\n                    const isComparing = currentStepData?.comparingIndices.includes(index);\n                    const isSwapping = currentStepData?.swappingIndices.includes(index);\n                    const isSorted = currentStepData?.sortedIndices.includes(index);\n                    \n                    const maxValue = Math.max(...array.map(el => el.value));\n                    const heightPercentage = (element.value / maxValue) * 100;\n                    \n                    const colorIndex = index % NEON_COLORS.length;\n                    const neonColor = NEON_COLORS[colorIndex];\n                    \n                    let barColor = neonColor;\n                    let glowIntensity = 0.3;\n                    \n                    if (isSorted) {\n                      barColor = '#00ff00';\n                      glowIntensity = 0.8;\n                    } else if (isSwapping) {\n                      barColor = '#ff0066';\n                      glowIntensity = 1;\n                    } else if (isComparing) {\n                      barColor = '#ffff00';\n                      glowIntensity = 0.7;\n                    }\n                    \n                    return (\n                      <motion.div\n                        key={element.id}\n                        className=\"relative flex-1 min-w-[4px] max-w-[60px] group\"\n                        initial={{ opacity: 0, scale: 0 }}\n                        animate={{ \n                          opacity: 1, \n                          scale: 1,\n                          y: isSwapping ? [-10, 0] : 0\n                        }}\n                        transition={{ \n                          duration: 0.3,\n                          y: { duration: 0.2, repeat: isSwapping ? 1 : 0 }\n                        }}\n                      >\n                        <motion.div\n                          className=\"w-full rounded-t-lg relative overflow-hidden\"\n                          style={{\n                            backgroundColor: barColor,\n                            boxShadow: `\n                              0 0 ${glowIntensity * 20}px ${barColor},\n                              0 0 ${glowIntensity * 40}px ${barColor},\n                              inset 0 0 ${glowIntensity * 10}px rgba(255, 255, 255, 0.5)\n                            `,\n                            border: `1px solid ${barColor}`,\n                          }}\n                          animate={{\n                            height: `${heightPercentage}%`,\n                            boxShadow: [\n                              `0 0 ${glowIntensity * 20}px ${barColor}, 0 0 ${glowIntensity * 40}px ${barColor}, inset 0 0 ${glowIntensity * 10}px rgba(255, 255, 255, 0.5)`,\n                              `0 0 ${glowIntensity * 30}px ${barColor}, 0 0 ${glowIntensity * 60}px ${barColor}, inset 0 0 ${glowIntensity * 15}px rgba(255, 255, 255, 0.7)`,\n                              `0 0 ${glowIntensity * 20}px ${barColor}, 0 0 ${glowIntensity * 40}px ${barColor}, inset 0 0 ${glowIntensity * 10}px rgba(255, 255, 255, 0.5)`\n                            ]\n                          }}\n                          transition={{\n                            height: { duration: 0.5, ease: 'easeInOut' },\n                            boxShadow: { duration: 1, repeat: Infinity, ease: 'easeInOut' }\n                          }}\n                        >\n                          {/* Shimmer effect */}\n                          <motion.div\n                            className=\"absolute inset-0 bg-gradient-to-t from-transparent via-white/30 to-transparent\"\n                            animate={{\n                              y: ['-100%', '200%']\n                            }}\n                            transition={{\n                              duration: 2,\n                              repeat: Infinity,\n                              ease: 'linear',\n                              repeatDelay: 1\n                            }}\n                          />\n                          \n                          {/* Pulse effect for comparing/swapping */}\n                          {(isComparing || isSwapping) && (\n                            <motion.div\n                              className=\"absolute inset-0\"\n                              style={{\n                                backgroundColor: barColor,\n                                opacity: 0.5\n                              }}\n                              animate={{\n                                opacity: [0.5, 0, 0.5]\n                              }}\n                              transition={{\n                                duration: 0.6,\n                                repeat: Infinity,\n                                ease: 'easeInOut'\n                              }}\n                            />\n                          )}\n                        </motion.div>\n                        \n                        {/* Value label */}\n                        <motion.div\n                          className=\"absolute -bottom-6 left-1/2 transform -translate-x-1/2 text-xs font-mono font-bold opacity-0 group-hover:opacity-100 transition-opacity whitespace-nowrap\"\n                          style={{\n                            color: barColor,\n                            textShadow: `0 0 10px ${barColor}`\n                          }}\n                        >\n                          {element.value}\n                        </motion.div>\n                        \n                        {/* Sorted checkmark */}\n                        {isSorted && (\n                          <motion.div\n                            className=\"absolute -top-8 left-1/2 transform -translate-x-1/2\"\n                            initial={{ scale: 0, rotate: -180 }}\n                            animate={{ scale: 1, rotate: 0 }}\n                            transition={{ type: 'spring', stiffness: 300, damping: 20 }}\n                          >\n                            <div \n                              className=\"w-6 h-6 rounded-full flex items-center justify-center\"\n                              style={{\n                                backgroundColor: '#00ff00',\n                                boxShadow: '0 0 20px #00ff00'\n                              }}\n                            >\n                              <span className=\"text-gray-900 text-xs font-bold\">\u2713</span>\n                            </div>\n                          </motion.div>\n                        )}\n                      </motion.div>\n                    );\n                  })\n                ) : (\n                  <motion.div\n                    className=\"absolute inset-0 flex items-center justify-center\"\n                    initial={{ opacity: 0 }}\n                    animate={{ opacity: 1 }}\n                  >\n                    <div className=\"text-center space-y-4\">\n                      <motion.div\n                        animate={{\n                          scale: [1, 1.2, 1],\n                          rotate: [0, 360]\n                        }}\n                        transition={{\n                          duration: 2,\n                          repeat: Infinity,\n                          ease: 'easeInOut'\n                        }}\n                      >\n                        <BarChart3 className=\"w-16 h-16 text-cyan-400 mx-auto\" style={{\n                          filter: 'drop-shadow(0 0 20px rgba(34, 211, 238, 0.8))'\n                        }} />\n                      </motion.div>\n                      <p className=\"text-cyan-400 text-lg font-semibold\">\n                        Generate an array to start visualizing\n                      </p>\n                      <p className=\"text-gray-400 text-sm\">\n                        Click the reset button to create a random array\n                      </p>\n                    </div>\n                  </motion.div>\n                )}\n              </div>\n\n              \n              \n                            {steps.length > 0 && currentStep < steps.length && (\n                <>\n                  {steps[currentStep].swappingIndices.map((index, i) => {\n                    const element = steps[currentStep].array[index];\n                    const maxValue = Math.max(...steps[currentStep].array.map(el => el.value));\n                    const heightPercent = (element.value / maxValue) * 100;\n                    const barWidth = 100 / steps[currentStep].array.length;\n                    const xPosition = index * barWidth;\n\n                    return (\n                      <motion.div\n                        key={`trail-${element.id}-${currentStep}-${i}`}\n                        className=\"absolute bottom-0 rounded-t-lg pointer-events-none\"\n                        style={{\n                          left: `${xPosition}%`,\n                          width: `${barWidth}%`,\n                          height: `${heightPercent}%`,\n                          background: `linear-gradient(to top, ${NEON_COLORS[index % NEON_COLORS.length]}, transparent)`,\n                          filter: 'blur(8px)',\n                          opacity: 0.6,\n                        }}\n                        initial={{ opacity: 0.8, scale: 1 }}\n                        animate={{ \n                          opacity: 0,\n                          scale: 1.2,\n                          filter: 'blur(20px)'\n                        }}\n                        transition={{ \n                          duration: 0.6,\n                          ease: 'easeOut'\n                        }}\n                      />\n                    );\n                  })}\n                  \n                  {steps[currentStep].swappingIndices.map((index, i) => (\n                    <motion.div\n                      key={`particle-trail-${index}-${currentStep}-${i}`}\n                      className=\"absolute pointer-events-none\"\n                      style={{\n                        left: `${(index * 100 / steps[currentStep].array.length) + (50 / steps[currentStep].array.length)}%`,\n                        bottom: `${(steps[currentStep].array[index].value / Math.max(...steps[currentStep].array.map(el => el.value))) * 50}%`,\n                      }}\n                    >\n                      {[...Array(8)].map((_, particleIndex) => (\n                        <motion.div\n                          key={`particle-${particleIndex}`}\n                          className=\"absolute w-2 h-2 rounded-full\"\n                          style={{\n                            background: NEON_COLORS[index % NEON_COLORS.length],\n                            boxShadow: `0 0 10px ${NEON_COLORS[index % NEON_COLORS.length]}`,\n                          }}\n                          initial={{ \n                            opacity: 1,\n                            scale: 1,\n                            x: 0,\n                            y: 0\n                          }}\n                          animate={{ \n                            opacity: 0,\n                            scale: 0,\n                            x: Math.cos((particleIndex / 8) * Math.PI * 2) * 40,\n                            y: Math.sin((particleIndex / 8) * Math.PI * 2) * 40,\n                          }}\n                          transition={{ \n                            duration: 0.8,\n                            ease: 'easeOut',\n                            delay: particleIndex * 0.02\n                          }}\n                        />\n                      ))}\n                    </motion.div>\n                  ))}\n\n                  {steps[currentStep].swappingIndices.length === 2 && (\n                    <motion.div\n                      key={`swap-line-${currentStep}`}\n                      className=\"absolute pointer-events-none\"\n                      style={{\n                        left: `${(steps[currentStep].swappingIndices[0] * 100 / steps[currentStep].array.length) + (50 / steps[currentStep].array.length)}%`,\n                        right: `${100 - ((steps[currentStep].swappingIndices[1] * 100 / steps[currentStep].array.length) + (50 / steps[currentStep].array.length))}%`,\n                        top: '50%',\n                        height: '2px',\n                        background: `linear-gradient(to right, ${NEON_COLORS[steps[currentStep].swappingIndices[0] % NEON_COLORS.length]}, ${NEON_COLORS[steps[currentStep].swappingIndices[1] % NEON_COLORS.length]})`,\n                        boxShadow: `0 0 20px ${NEON_COLORS[steps[currentStep].swappingIndices[0] % NEON_COLORS.length]}`,\n                      }}\n                      initial={{ opacity: 0, scaleX: 0 }}\n                      animate={{ \n                        opacity: [0, 1, 1, 0],\n                        scaleX: [0, 1, 1, 1],\n                      }}\n                      transition={{ \n                        duration: 0.6,\n                        times: [0, 0.2, 0.8, 1]\n                      }}\n                    />\n                  )}\n                  {steps.length > 0 && currentStep < steps.length && (\n                    <>\n                      {/* Comparison Indicators */}\n                      {steps[currentStep].comparingIndices.map((index, i) => {\n                        const barWidth = 100 / (steps[currentStep].array.length || 1);\n                        const leftPosition = index * barWidth + barWidth / 2;\n                        \n                        return (\n                          <motion.div\n                            key={`compare-${index}-${i}`}\n                            className=\"absolute pointer-events-none\"\n                            style={{\n                              left: `${leftPosition}%`,\n                              top: '10%',\n                              transform: 'translateX(-50%)'\n                            }}\n                            initial={{ opacity: 0, y: -20, scale: 0 }}\n                            animate={{ \n                              opacity: [0, 1, 1, 0],\n                              y: [-20, 0, 0, 10],\n                              scale: [0, 1.2, 1, 0.8],\n                            }}\n                            transition={{\n                              duration: 0.8,\n                              repeat: Infinity,\n                              ease: \"easeInOut\"\n                            }}\n                          >\n                            <div className=\"relative\">\n                              {/* Glowing ring */}\n                              <motion.div\n                                className=\"absolute inset-0 rounded-full\"\n                                style={{\n                                  width: '40px',\n                                  height: '40px',\n                                  background: `radial-gradient(circle, ${NEON_COLORS[0]}40, transparent)`,\n                                  boxShadow: `0 0 20px ${NEON_COLORS[0]}, 0 0 40px ${NEON_COLORS[0]}80`,\n                                }}\n                                animate={{\n                                  scale: [1, 1.5, 1],\n                                  opacity: [0.6, 0.2, 0.6]\n                                }}\n                                transition={{\n                                  duration: 1,\n                                  repeat: Infinity,\n                                  ease: \"easeInOut\"\n                                }}\n                              />\n                              \n                              {/* Center indicator */}\n                              <div \n                                className=\"relative w-10 h-10 rounded-full flex items-center justify-center border-2\"\n                                style={{\n                                  borderColor: NEON_COLORS[0],\n                                  backgroundColor: `${NEON_COLORS[0]}20`,\n                                  boxShadow: `0 0 15px ${NEON_COLORS[0]}, inset 0 0 15px ${NEON_COLORS[0]}40`\n                                }}\n                              >\n                                <motion.div\n                                  className=\"w-3 h-3 rounded-full\"\n                                  style={{\n                                    backgroundColor: NEON_COLORS[0],\n                                    boxShadow: `0 0 10px ${NEON_COLORS[0]}`\n                                  }}\n                                  animate={{\n                                    scale: [1, 1.3, 1],\n                                  }}\n                                  transition={{\n                                    duration: 0.5,\n                                    repeat: Infinity,\n                                    ease: \"easeInOut\"\n                                  }}\n                                />\n                              </div>\n                              \n                              {/* Floating label */}\n                              <motion.div\n                                className=\"absolute -top-8 left-1/2 transform -translate-x-1/2 whitespace-nowrap\"\n                                animate={{\n                                  y: [-2, 2, -2],\n                                }}\n                                transition={{\n                                  duration: 1.5,\n                                  repeat: Infinity,\n                                  ease: \"easeInOut\"\n                                }}\n                              >\n                                <span \n                                  className=\"text-xs font-bold px-2 py-1 rounded\"\n                                  style={{\n                                    color: NEON_COLORS[0],\n                                    backgroundColor: `${NEON_COLORS[0]}20`,\n                                    textShadow: `0 0 10px ${NEON_COLORS[0]}`,\n                                    border: `1px solid ${NEON_COLORS[0]}60`\n                                  }}\n                                >\n                                  COMPARE\n                                </span>\n                              </motion.div>\n                              \n                              {/* Vertical beam */}\n                              <motion.div\n                                className=\"absolute left-1/2 transform -translate-x-1/2\"\n                                style={{\n                                  top: '40px',\n                                  width: '2px',\n                                  height: '100px',\n                                  background: `linear-gradient(to bottom, ${NEON_COLORS[0]}, transparent)`,\n                                  boxShadow: `0 0 10px ${NEON_COLORS[0]}`\n                                }}\n                                animate={{\n                                  opacity: [0.8, 0.3, 0.8],\n                                  scaleY: [1, 1.1, 1]\n                                }}\n                                transition={{\n                                  duration: 1,\n                                  repeat: Infinity,\n                                  ease: \"easeInOut\"\n                                }}\n                              />\n                            </div>\n                          </motion.div>\n                        );\n                      })}\n                    </>\n                  )}\n                </>\n              )}\n            </div>\n          </div>\n        </div>\n\n\n        \n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ delay: 0.4, duration: 0.6 }}\n          className=\"bg-gray-900/50 backdrop-blur-lg border border-cyan-500/30 rounded-xl p-6 shadow-2xl shadow-cyan-500/20\"\n        >\n          <div className=\"flex items-center gap-2 mb-6\">\n            <BarChart3 className=\"w-5 h-5 text-cyan-400\" />\n            <h3 className=\"text-cyan-400 font-bold text-lg tracking-wider\">LEGEND</h3>\n          </div>\n\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n            {/* Default State */}\n            <motion.div\n              className=\"relative overflow-hidden rounded-lg bg-gray-800/50 border border-gray-700 p-4 group hover:border-cyan-500/50 transition-all duration-300\"\n              whileHover={{ scale: 1.05, y: -2 }}\n              transition={{ type: 'spring', stiffness: 300 }}\n            >\n              <div className=\"absolute inset-0 bg-gradient-to-br from-cyan-500/0 via-cyan-500/5 to-cyan-500/0 opacity-0 group-hover:opacity-100 transition-opacity duration-500\" />\n              <div className=\"relative z-10 space-y-3\">\n                <motion.div\n                  className=\"w-full h-12 bg-gradient-to-t from-gray-600 to-gray-400 rounded-md shadow-lg\"\n                  animate={{\n                    boxShadow: [\n                      '0 4px 15px rgba(156, 163, 175, 0.3)',\n                      '0 4px 20px rgba(156, 163, 175, 0.5)',\n                      '0 4px 15px rgba(156, 163, 175, 0.3)'\n                    ]\n                  }}\n                  transition={{ duration: 2, repeat: Infinity }}\n                />\n                <div className=\"text-center\">\n                  <div className=\"text-xs font-semibold text-gray-300 tracking-wide\">DEFAULT</div>\n                  <div className=\"text-[10px] text-gray-500 mt-1\">Unsorted</div>\n                </div>\n              </div>\n            </motion.div>\n\n            {/* Comparing State */}\n            <motion.div\n              className=\"relative overflow-hidden rounded-lg bg-gray-800/50 border border-yellow-700/50 p-4 group hover:border-yellow-500/70 transition-all duration-300\"\n              whileHover={{ scale: 1.05, y: -2 }}\n              transition={{ type: 'spring', stiffness: 300 }}\n            >\n              <div className=\"absolute inset-0 bg-gradient-to-br from-yellow-500/0 via-yellow-500/10 to-yellow-500/0 opacity-0 group-hover:opacity-100 transition-opacity duration-500\" />\n              <div className=\"relative z-10 space-y-3\">\n                <motion.div\n                  className=\"w-full h-12 bg-gradient-to-t from-yellow-600 to-yellow-400 rounded-md shadow-lg\"\n                  animate={{\n                    boxShadow: [\n                      '0 4px 20px rgba(250, 204, 21, 0.5)',\n                      '0 4px 30px rgba(250, 204, 21, 0.8)',\n                      '0 4px 20px rgba(250, 204, 21, 0.5)'\n                    ],\n                    scale: [1, 1.05, 1]\n                  }}\n                  transition={{ duration: 1.5, repeat: Infinity }}\n                />\n                <div className=\"text-center\">\n                  <div className=\"text-xs font-semibold text-yellow-300 tracking-wide flex items-center justify-center gap-1\">\n                    <motion.div\n                      animate={{ rotate: 360 }}\n                      transition={{ duration: 2, repeat: Infinity, ease: 'linear' }}\n                    >\n                      <Zap className=\"w-3 h-3\" />\n                    </motion.div>\n                    COMPARING\n                  </div>\n                  <div className=\"text-[10px] text-yellow-500/70 mt-1\">Active Check</div>\n                </div>\n              </div>\n            </motion.div>\n\n            {/* Swapping State */}\n            <motion.div\n              className=\"relative overflow-hidden rounded-lg bg-gray-800/50 border border-pink-700/50 p-4 group hover:border-pink-500/70 transition-all duration-300\"\n              whileHover={{ scale: 1.05, y: -2 }}\n              transition={{ type: 'spring', stiffness: 300 }}\n            >\n              <div className=\"absolute inset-0 bg-gradient-to-br from-pink-500/0 via-pink-500/10 to-pink-500/0 opacity-0 group-hover:opacity-100 transition-opacity duration-500\" />\n              <div className=\"relative z-10 space-y-3\">\n                <motion.div\n                  className=\"w-full h-12 bg-gradient-to-t from-pink-600 to-pink-400 rounded-md shadow-lg\"\n                  animate={{\n                    boxShadow: [\n                      '0 4px 20px rgba(236, 72, 153, 0.5)',\n                      '0 4px 35px rgba(236, 72, 153, 0.9)',\n                      '0 4px 20px rgba(236, 72, 153, 0.5)'\n                    ],\n                    x: [-2, 2, -2]\n                  }}\n                  transition={{ duration: 0.8, repeat: Infinity }}\n                />\n                <div className=\"text-center\">\n                  <div className=\"text-xs font-semibold text-pink-300 tracking-wide flex items-center justify-center gap-1\">\n                    <motion.div\n                      animate={{ x: [-3, 3, -3] }}\n                      transition={{ duration: 0.6, repeat: Infinity }}\n                    >\n                      <RotateCcw className=\"w-3 h-3\" />\n                    </motion.div>\n                    SWAPPING\n                  </div>\n                  <div className=\"text-[10px] text-pink-500/70 mt-1\">Exchanging</div>\n                </div>\n              </div>\n            </motion.div>\n\n            {/* Sorted State */}\n            <motion.div\n              className=\"relative overflow-hidden rounded-lg bg-gray-800/50 border border-green-700/50 p-4 group hover:border-green-500/70 transition-all duration-300\"\n              whileHover={{ scale: 1.05, y: -2 }}\n              transition={{ type: 'spring', stiffness: 300 }}\n            >\n              <div className=\"absolute inset-0 bg-gradient-to-br from-green-500/0 via-green-500/10 to-green-500/0 opacity-0 group-hover:opacity-100 transition-opacity duration-500\" />\n              <div className=\"relative z-10 space-y-3\">\n                <motion.div\n                  className=\"w-full h-12 bg-gradient-to-t from-green-600 to-green-400 rounded-md shadow-lg\"\n                  animate={{\n                    boxShadow: [\n                      '0 4px 20px rgba(34, 197, 94, 0.5)',\n                      '0 4px 30px rgba(34, 197, 94, 0.7)',\n                      '0 4px 20px rgba(34, 197, 94, 0.5)'\n                    ]\n                  }}\n                  transition={{ duration: 2, repeat: Infinity }}\n                />\n                <div className=\"text-center\">\n                  <div className=\"text-xs font-semibold text-green-300 tracking-wide flex items-center justify-center gap-1\">\n                    <motion.div\n                      animate={{ scale: [1, 1.2, 1] }}\n                      transition={{ duration: 1, repeat: Infinity }}\n                    >\n                      \u2713\n                    </motion.div>\n                    SORTED\n                  </div>\n                  <div className=\"text-[10px] text-green-500/70 mt-1\">Complete</div>\n                </div>\n              </div>\n            </motion.div>\n          </div>\n\n          {/* Additional Info */}\n          <motion.div\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            transition={{ delay: 0.8 }}\n            className=\"mt-6 pt-4 border-t border-gray-700/50\"\n          >\n            <div className=\"flex items-center justify-center gap-6 text-xs text-gray-400\">\n              <div className=\"flex items-center gap-2\">\n                <motion.div\n                  className=\"w-2 h-2 rounded-full bg-cyan-400\"\n                  animate={{\n                    boxShadow: [\n                      '0 0 5px rgba(34, 211, 238, 0.5)',\n                      '0 0 15px rgba(34, 211, 238, 0.8)',\n                      '0 0 5px rgba(34, 211, 238, 0.5)'\n                    ]\n                  }}\n                  transition={{ duration: 2, repeat: Infinity }}\n                />\n                <span>Real-time Animation</span>\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <motion.div\n                  className=\"w-2 h-2 rounded-full bg-purple-400\"\n                  animate={{\n                    boxShadow: [\n                      '0 0 5px rgba(168, 85, 247, 0.5)',\n                      '0 0 15px rgba(168, 85, 247, 0.8)',\n                      '0 0 5px rgba(168, 85, 247, 0.5)'\n                    ]\n                  }}\n                  transition={{ duration: 2, repeat: Infinity, delay: 0.5 }}\n                />\n                <span>Step-by-Step</span>\n              </div>\n            </div>\n          </motion.div>\n        </motion.div>\n      </div>\n    </div>\n  );\n}",
    "error": null,
    "elapsed_time": 209.55418968200684,
    "success": true
  }
}