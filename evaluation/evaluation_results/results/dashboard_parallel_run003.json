{
  "prompt_id": "dashboard",
  "prompt_name": "Analytics Dashboard",
  "mode": "parallel",
  "run_number": 3,
  "timestamp": "2025-10-14T09:42:02.126052",
  "response_time": 74.33630800247192,
  "total_tokens": null,
  "response_content": "import { useState, useCallback } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Moon, Sun, RefreshCw } from 'lucide-react';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';\nimport { motion } from 'framer-motion';\nimport { TrendingUp } from 'lucide-react';\nimport { TrendingUp, TrendingDown, DollarSign, Users, ShoppingCart, Target } from 'lucide-react';\n\nimport { motion } from 'framer-motion';\nimport { Badge } from '@/components/ui/badge';\nimport { ArrowUpDown } from 'lucide-react';\n\ninterface MetricData {\n  id: string;\n  label: string;\n  value: number;\n  change: number;\n  trend: 'up' | 'down';\n}\n\ninterface ChartDataPoint {\n  date: string;\n  revenue: number;\n  users: number;\n  orders: number;\n}\n\ninterface TableRow {\n  id: string;\n  product: string;\n  sales: number;\n  revenue: number;\n  status: 'active' | 'pending' | 'inactive';\n}\ninterface ActivityEvent {\n  id: string;\n  type: 'sale' | 'user' | 'system' | 'alert';\n  message: string;\n  timestamp: string;\n  icon?: string;\n}\n\nconst mockMetrics: MetricData[] = [\n  { id: '1', label: 'Total Revenue', value: 45231, change: 12.5, trend: 'up' },\n  { id: '2', label: 'Active Users', value: 2350, change: 8.2, trend: 'up' },\n  { id: '3', label: 'Total Orders', value: 1543, change: -3.1, trend: 'down' },\n  { id: '4', label: 'Conversion Rate', value: 3.24, change: 5.7, trend: 'up' }\n];\n\nconst mockChartData: ChartDataPoint[] = [\n  { date: '2024-01-01', revenue: 12000, users: 450, orders: 230 },\n  { date: '2024-01-02', revenue: 15000, users: 520, orders: 280 },\n  { date: '2024-01-03', revenue: 13500, users: 490, orders: 250 },\n  { date: '2024-01-04', revenue: 18000, users: 610, orders: 320 },\n  { date: '2024-01-05', revenue: 16500, users: 580, orders: 295 },\n  { date: '2024-01-06', revenue: 20000, users: 680, orders: 360 },\n  { date: '2024-01-07', revenue: 22000, users: 720, orders: 390 }\n];\n\nconst mockTableData: TableRow[] = [\n  { id: '1', product: 'Premium Plan', sales: 234, revenue: 23400, status: 'active' },\n  { id: '2', product: 'Basic Plan', sales: 567, revenue: 11340, status: 'active' },\n  { id: '3', product: 'Enterprise Plan', sales: 89, revenue: 17800, status: 'active' },\n  { id: '4', product: 'Starter Plan', sales: 432, revenue: 4320, status: 'pending' },\n  { id: '5', product: 'Pro Plan', sales: 156, revenue: 15600, status: 'inactive' }\n];\nconst mockActivityData: ActivityEvent[] = [\n  { id: '1', type: 'sale', message: 'New order #1234 - Premium Plan', timestamp: '2 minutes ago' },\n  { id: '2', type: 'user', message: 'New user registration: john@example.com', timestamp: '5 minutes ago' },\n  { id: '3', type: 'system', message: 'Database backup completed successfully', timestamp: '12 minutes ago' },\n  { id: '4', type: 'sale', message: 'Payment received: $299.00', timestamp: '18 minutes ago' },\n  { id: '5', type: 'alert', message: 'Server response time increased', timestamp: '25 minutes ago' },\n  { id: '6', type: 'user', message: 'User upgraded to Enterprise Plan', timestamp: '32 minutes ago' },\n  { id: '7', type: 'sale', message: 'New order #1233 - Basic Plan', timestamp: '45 minutes ago' },\n  { id: '8', type: 'system', message: 'System update deployed v2.1.0', timestamp: '1 hour ago' },\n  { id: '9', type: 'user', message: 'Password reset requested', timestamp: '1 hour ago' },\n  { id: '10', type: 'sale', message: 'Refund processed: $49.00', timestamp: '2 hours ago' }\n];\n\nconst getActivityIcon = (type: string) => {\n  switch (type) {\n    case 'sale':\n      return ShoppingCart;\n    case 'user':\n      return Users;\n    case 'system':\n      return Target;\n    case 'alert':\n      return TrendingDown;\n    default:\n      return Target;\n  }\n};\n\nconst getActivityColor = (type: string, isDarkMode: boolean) => {\n  switch (type) {\n    case 'sale':\n      return isDarkMode ? 'text-green-400' : 'text-green-600';\n    case 'user':\n      return isDarkMode ? 'text-blue-400' : 'text-blue-600';\n    case 'system':\n      return isDarkMode ? 'text-purple-400' : 'text-purple-600';\n    case 'alert':\n      return isDarkMode ? 'text-orange-400' : 'text-orange-600';\n    default:\n      return isDarkMode ? 'text-gray-400' : 'text-gray-600';\n  }\n};\n\nconst RevenueChart = ({ data, isDarkMode }: { data: ChartDataPoint[], isDarkMode: boolean }) => {\n  const [hoveredPoint, setHoveredPoint] = useState<number | null>(null);\n  \n  const maxRevenue = Math.max(...data.map(d => d.revenue));\n  const minRevenue = Math.min(...data.map(d => d.revenue));\n  const range = maxRevenue - minRevenue;\n  const padding = range * 0.1;\n  \n  const chartHeight = 250;\n  const chartWidth = 100; // percentage\n  \n  const getYPosition = (value: number) => {\n    const normalizedValue = (value - minRevenue + padding) / (range + 2 * padding);\n    return chartHeight - (normalizedValue * chartHeight);\n  };\n  \n  const getXPosition = (index: number) => {\n    return (index / (data.length - 1)) * 100;\n  };\n  \n  const pathData = data.map((point, index) => {\n    const x = getXPosition(index);\n    const y = getYPosition(point.revenue);\n    return `${index === 0 ? 'M' : 'L'} ${x} ${y}`;\n  }).join(' ');\n  \n  const areaPathData = `${pathData} L ${getXPosition(data.length - 1)} ${chartHeight} L 0 ${chartHeight} Z`;\n  \n  const formatCurrency = (value: number) => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0\n    }).format(value);\n  };\n  \n  const formatDate = (dateString: string) => {\n    const date = new Date(dateString);\n    return date.toLocaleDateString('en-US', { month: 'short', day: 'numeric' });\n  };\n  \n  return (\n    <div className=\"w-full\">\n      <div className=\"relative\" style={{ height: `${chartHeight}px` }}>\n        <svg\n          viewBox={`0 0 100 ${chartHeight}`}\n          preserveAspectRatio=\"none\"\n          className=\"w-full h-full\"\n        >\n          {/* Grid lines */}\n          {[0, 1, 2, 3, 4].map((i) => {\n            const y = (chartHeight / 4) * i;\n            return (\n              <line\n                key={i}\n                x1=\"0\"\n                y1={y}\n                x2=\"100\"\n                y2={y}\n                stroke={isDarkMode ? '#374151' : '#e5e7eb'}\n                strokeWidth=\"0.2\"\n              />\n            );\n          })}\n          \n          {/* Area gradient */}\n          <defs>\n            <linearGradient id=\"revenueGradient\" x1=\"0%\" y1=\"0%\" x2=\"0%\" y2=\"100%\">\n              <stop offset=\"0%\" stopColor=\"#3b82f6\" stopOpacity=\"0.3\" />\n              <stop offset=\"100%\" stopColor=\"#3b82f6\" stopOpacity=\"0\" />\n            </linearGradient>\n          </defs>\n          \n          {/* Area fill */}\n          <path\n            d={areaPathData}\n            fill=\"url(#revenueGradient)\"\n          />\n          \n          {/* Line */}\n          <path\n            d={pathData}\n            fill=\"none\"\n            stroke=\"#3b82f6\"\n            strokeWidth=\"0.5\"\n            vectorEffect=\"non-scaling-stroke\"\n          />\n          \n          {/* Data points */}\n          {data.map((point, index) => {\n            const x = getXPosition(index);\n            const y = getYPosition(point.revenue);\n            const isHovered = hoveredPoint === index;\n            \n            return (\n              <g key={index}>\n                <circle\n                  cx={x}\n                  cy={y}\n                  r={isHovered ? \"1.5\" : \"0.8\"}\n                  fill=\"#3b82f6\"\n                  stroke={isDarkMode ? '#1f2937' : '#ffffff'}\n                  strokeWidth=\"0.3\"\n                  vectorEffect=\"non-scaling-stroke\"\n                  className=\"transition-all duration-200 cursor-pointer\"\n                  onMouseEnter={() => setHoveredPoint(index)}\n                  onMouseLeave={() => setHoveredPoint(null)}\n                />\n                {/* Invisible larger hit area */}\n                <circle\n                  cx={x}\n                  cy={y}\n                  r=\"3\"\n                  fill=\"transparent\"\n                  className=\"cursor-pointer\"\n                  onMouseEnter={() => setHoveredPoint(index)}\n                  onMouseLeave={() => setHoveredPoint(null)}\n                />\n              </g>\n            );\n          })}\n        </svg>\n        \n        {/* Tooltip */}\n        {hoveredPoint !== null && (\n          <div\n            className={`absolute z-10 px-3 py-2 rounded-lg shadow-lg border transition-opacity duration-200 ${\n              isDarkMode ? 'bg-gray-700 border-gray-600 text-white' : 'bg-white border-gray-200 text-gray-900'\n            }`}\n            style={{\n              left: `${getXPosition(hoveredPoint)}%`,\n              top: `${getYPosition(data[hoveredPoint].revenue)}px`,\n              transform: 'translate(-50%, -120%)',\n              pointerEvents: 'none'\n            }}\n          >\n            <div className=\"text-xs font-medium mb-1\">\n              {formatDate(data[hoveredPoint].date)}\n            </div>\n            <div className=\"text-sm font-bold flex items-center gap-1\">\n              <TrendingUp className=\"h-3 w-3 text-blue-500\" />\n              {formatCurrency(data[hoveredPoint].revenue)}\n            </div>\n            <div className={`text-xs mt-1 ${isDarkMode ? 'text-gray-400' : 'text-gray-500'}`}>\n              {data[hoveredPoint].orders} orders\n            </div>\n          </div>\n        )}\n      </div>\n      \n      {/* X-axis labels */}\n      <div className=\"flex justify-between mt-4 px-1\">\n        {data.map((point, index) => {\n          if (index % Math.ceil(data.length / 4) === 0 || index === data.length - 1) {\n            return (\n              <div\n                key={index}\n                className={`text-xs ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}\n              >\n                {formatDate(point.date)}\n              </div>\n            );\n          }\n          return null;\n        })}\n      </div>\n      \n      {/* Y-axis labels */}\n      <div className=\"flex justify-between items-center mt-4\">\n        <div className={`text-xs ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n          Min: {formatCurrency(minRevenue)}\n        </div>\n        <div className={`text-xs ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n          Max: {formatCurrency(maxRevenue)}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst getMetricIcon = (label: string) => {\n  switch (label) {\n    case 'Total Revenue':\n      return DollarSign;\n    case 'Active Users':\n      return Users;\n    case 'Total Orders':\n      return ShoppingCart;\n    case 'Conversion Rate':\n      return Target;\n    default:\n      return DollarSign;\n  }\n};\n\nconst formatMetricValue = (label: string, value: number) => {\n  if (label === 'Total Revenue') {\n    return `$${value.toLocaleString()}`;\n  } else if (label === 'Conversion Rate') {\n    return `${value}%`;\n  }\n  return value.toLocaleString();\n};\n\nconst UserAreaChart = ({ data, isDarkMode }: { data: ChartDataPoint[], isDarkMode: boolean }) => {\n  const [hoveredIndex, setHoveredIndex] = useState<number | null>(null);\n  \n  const maxUsers = Math.max(...data.map(d => d.users));\n  const minUsers = Math.min(...data.map(d => d.users));\n  const range = maxUsers - minUsers;\n  const padding = range * 0.1;\n  \n  const chartHeight = 200;\n  const chartWidth = 100;\n  \n  const points = data.map((point, index) => {\n    const x = (index / (data.length - 1)) * chartWidth;\n    const normalizedValue = ((point.users - minUsers + padding) / (range + 2 * padding));\n    const y = chartHeight - (normalizedValue * chartHeight);\n    return { x, y, ...point };\n  });\n  \n  const pathData = points.map((p, i) => \n    `${i === 0 ? 'M' : 'L'} ${p.x} ${p.y}`\n  ).join(' ');\n  \n  const areaPath = `${pathData} L ${chartWidth} ${chartHeight} L 0 ${chartHeight} Z`;\n  \n  return (\n    <div className=\"relative w-full h-[200px]\">\n      <svg\n        viewBox={`0 0 ${chartWidth} ${chartHeight}`}\n        className=\"w-full h-full\"\n        preserveAspectRatio=\"none\"\n      >\n        <defs>\n          <linearGradient id=\"userGradient\" x1=\"0%\" y1=\"0%\" x2=\"0%\" y2=\"100%\">\n            <stop offset=\"0%\" stopColor=\"#3b82f6\" stopOpacity=\"0.6\" />\n            <stop offset=\"50%\" stopColor=\"#3b82f6\" stopOpacity=\"0.3\" />\n            <stop offset=\"100%\" stopColor=\"#3b82f6\" stopOpacity=\"0.05\" />\n          </linearGradient>\n        </defs>\n        \n        <motion.path\n          d={areaPath}\n          fill=\"url(#userGradient)\"\n          initial={{ opacity: 0 }}\n          animate={{ opacity: 1 }}\n          transition={{ duration: 0.5 }}\n        />\n        \n        <motion.path\n          d={pathData}\n          fill=\"none\"\n          stroke=\"#3b82f6\"\n          strokeWidth=\"0.5\"\n          initial={{ pathLength: 0 }}\n          animate={{ pathLength: 1 }}\n          transition={{ duration: 1, ease: \"easeInOut\" }}\n        />\n        \n        {points.map((point, index) => (\n          <g key={index}>\n            <motion.circle\n              cx={point.x}\n              cy={point.y}\n              r={hoveredIndex === index ? \"1.2\" : \"0.8\"}\n              fill=\"#3b82f6\"\n              stroke={isDarkMode ? \"#1f2937\" : \"#ffffff\"}\n              strokeWidth=\"0.3\"\n              initial={{ scale: 0 }}\n              animate={{ scale: 1 }}\n              transition={{ delay: index * 0.1, duration: 0.3 }}\n              onMouseEnter={() => setHoveredIndex(index)}\n              onMouseLeave={() => setHoveredIndex(null)}\n              className=\"cursor-pointer\"\n              style={{ transformOrigin: `${point.x}px ${point.y}px` }}\n            />\n          </g>\n        ))}\n      </svg>\n      \n      <div className=\"absolute top-0 left-0 w-full h-full flex justify-between items-end pointer-events-none\">\n        {points.map((point, index) => (\n          <div\n            key={index}\n            className=\"flex-1 h-full relative\"\n            style={{ pointerEvents: 'auto' }}\n            onMouseEnter={() => setHoveredIndex(index)}\n            onMouseLeave={() => setHoveredIndex(null)}\n          >\n            {hoveredIndex === index && (\n              <motion.div\n                initial={{ opacity: 0, y: 10 }}\n                animate={{ opacity: 1, y: 0 }}\n                className={`absolute bottom-full left-1/2 transform -translate-x-1/2 mb-2 px-3 py-2 rounded-lg shadow-lg ${\n                  isDarkMode ? 'bg-gray-700 text-white' : 'bg-white text-gray-900'\n                } text-xs whitespace-nowrap z-10`}\n              >\n                <div className=\"font-semibold\">{point.users.toLocaleString()} users</div>\n                <div className={isDarkMode ? 'text-gray-400' : 'text-gray-600'}>\n                  {new Date(point.date).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n                </div>\n              </motion.div>\n            )}\n          </div>\n        ))}\n      </div>\n      \n      <div className=\"flex justify-between mt-4\">\n        {data.map((point, index) => (\n          <div\n            key={index}\n            className={`text-xs ${isDarkMode ? 'text-gray-400' : 'text-gray-600'} flex-1 text-center`}\n          >\n            {new Date(point.date).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default function AnalyticsDashboard() {\n  const [isDarkMode, setIsDarkMode] = useState(false);\n  const [metrics, setMetrics] = useState<MetricData[]>(mockMetrics);\n  const [chartData, setChartData] = useState<ChartDataPoint[]>(mockChartData);\n  const [tableData, setTableData] = useState<TableRow[]>(mockTableData);\n  const [isRefreshing, setIsRefreshing] = useState(false);\n\n  const toggleDarkMode = useCallback(() => {\n    setIsDarkMode(prev => !prev);\n  }, []);\n\n  const handleRefresh = useCallback(() => {\n    setIsRefreshing(true);\n    \n    setTimeout(() => {\n      // Generate updated metrics with random variations\n      const updatedMetrics = mockMetrics.map(metric => ({\n        ...metric,\n        value: metric.value + Math.floor(Math.random() * 200 - 100),\n        change: parseFloat((Math.random() * 20 - 5).toFixed(1)),\n        trend: Math.random() > 0.5 ? 'up' as const : 'down' as const\n      }));\n      \n      // Generate updated chart data with random variations\n      const updatedChartData = mockChartData.map(point => ({\n        ...point,\n        revenue: point.revenue + Math.floor(Math.random() * 4000 - 2000),\n        users: point.users + Math.floor(Math.random() * 100 - 50),\n        orders: point.orders + Math.floor(Math.random() * 50 - 25)\n      }));\n      \n      // Generate updated table data with random variations\n      const updatedTableData = mockTableData.map(row => ({\n        ...row,\n        sales: row.sales + Math.floor(Math.random() * 40 - 20),\n        revenue: row.revenue + Math.floor(Math.random() * 2000 - 1000)\n      }));\n      \n      setMetrics(updatedMetrics);\n      setChartData(updatedChartData);\n      setTableData(updatedTableData);\n      setIsRefreshing(false);\n    }, 1500);\n  }, []);\n\n  return (\n    <div className={`min-h-screen transition-colors duration-300 ${isDarkMode ? 'dark bg-gray-900' : 'bg-gray-50'}`}>\n      <div className=\"container mx-auto p-4 md:p-6 lg:p-8\">\n        <div className=\"flex flex-col md:flex-row md:items-center md:justify-between mb-8 gap-4\">\n          <div>\n            <h1 className={`text-3xl md:text-4xl font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n              Analytics Dashboard\n            </h1>\n            <p className={`mt-2 ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n              Real-time insights and performance metrics\n            </p>\n          </div>\n          \n          <div className=\"flex items-center gap-3\">\n            <Button\n              variant=\"outline\"\n              size=\"icon\"\n              onClick={toggleDarkMode}\n              className={isDarkMode ? 'border-gray-700 hover:bg-gray-800' : ''}\n            >\n              {isDarkMode ? <Sun className=\"h-5 w-5\" /> : <Moon className=\"h-5 w-5\" />}\n            </Button>\n            \n            <Button\n              variant=\"outline\"\n              onClick={handleRefresh}\n              disabled={isRefreshing}\n              className={isDarkMode ? 'border-gray-700 hover:bg-gray-800' : ''}\n            >\n              <RefreshCw className={`h-4 w-4 mr-2 ${isRefreshing ? 'animate-spin' : ''}`} />\n              Refresh\n            </Button>\n          </div>\n        </div>\n\n        <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 md:gap-6 mb-8\">\n          {metrics.map((metric, index) => {\n            const IconComponent = getMetricIcon(metric.label);\n            const isPositive = metric.trend === 'up';\n            \n            return (\n              <motion.div\n                key={metric.id}\n                initial={{ opacity: 0, y: 20 }}\n                animate={{ opacity: 1, y: 0 }}\n                transition={{ duration: 0.4, delay: index * 0.1 }}\n              >\n                <Card className={`${isDarkMode ? 'bg-gray-800 border-gray-700' : 'bg-white'} hover:shadow-lg transition-shadow duration-300`}>\n                  <CardHeader className=\"flex flex-row items-center justify-between pb-2\">\n                    <CardTitle className={`text-sm font-medium ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                      {metric.label}\n                    </CardTitle>\n                    <div className={`p-2 rounded-lg ${isDarkMode ? 'bg-gray-700' : 'bg-gray-100'}`}>\n                      <IconComponent className={`h-4 w-4 ${isDarkMode ? 'text-gray-300' : 'text-gray-600'}`} />\n                    </div>\n                  </CardHeader>\n                  <CardContent>\n                    <div className={`text-2xl md:text-3xl font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                      {formatMetricValue(metric.label, metric.value)}\n                    </div>\n                    <div className=\"flex items-center mt-2\">\n                      {isPositive ? (\n                        <TrendingUp className=\"h-4 w-4 text-green-500 mr-1\" />\n                      ) : (\n                        <TrendingDown className=\"h-4 w-4 text-red-500 mr-1\" />\n                      )}\n                      <span className={`text-sm font-medium ${isPositive ? 'text-green-500' : 'text-red-500'}`}>\n                        {isPositive ? '+' : ''}{metric.change}%\n                      </span>\n                      <span className={`text-sm ml-2 ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                        vs last period\n                      </span>\n                    </div>\n                  </CardContent>\n                </Card>\n              </motion.div>\n            );\n          })}\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6 mb-8\">\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Revenue Overview</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Daily revenue trends for the past week\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <RevenueChart data={chartData} isDarkMode={isDarkMode} />\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>User Activity</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Active users and engagement metrics\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <UserAreaChart data={chartData} isDarkMode={isDarkMode} />\n            </CardContent>\n          </Card>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6 mb-8\">\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Orders Distribution</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Order volume by category\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"h-[300px] w-full\">\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <BarChart data={chartData}>\n                    <CartesianGrid \n                      strokeDasharray=\"3 3\" \n                      stroke={isDarkMode ? '#374151' : '#e5e7eb'}\n                    />\n                    <XAxis \n                      dataKey=\"date\" \n                      stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                      fontSize={12}\n                      tickFormatter={(value) => new Date(value).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n                    />\n                    <YAxis \n                      stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                      fontSize={12}\n                    />\n                    <Tooltip \n                      contentStyle={{\n                        backgroundColor: isDarkMode ? '#1f2937' : '#ffffff',\n                        border: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\n                        borderRadius: '8px',\n                        color: isDarkMode ? '#f3f4f6' : '#111827'\n                      }}\n                      labelStyle={{\n                        color: isDarkMode ? '#f3f4f6' : '#111827',\n                        fontWeight: 'bold',\n                        marginBottom: '4px'\n                      }}\n                      formatter={(value: number) => [value, 'Orders']}\n                      labelFormatter={(label) => new Date(label).toLocaleDateString('en-US', { month: 'long', day: 'numeric', year: 'numeric' })}\n                    />\n                    <Bar \n                      dataKey=\"orders\" \n                      fill=\"#8b5cf6\"\n                      radius={[8, 8, 0, 0]}\n                      maxBarSize={60}\n                    />\n                  </BarChart>\n                </ResponsiveContainer>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className={`lg:col-span-2 ${isDarkMode ? 'bg-gray-800 border-gray-700' : ''}`}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Performance Comparison</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Multi-metric comparison over time\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"h-[300px] w-full\">\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <LineChart\n                    data={chartData}\n                    margin={{ top: 5, right: 30, left: 20, bottom: 5 }}\n                  >\n                    <CartesianGrid \n                      strokeDasharray=\"3 3\" \n                      stroke={isDarkMode ? '#374151' : '#e5e7eb'}\n                    />\n                    <XAxis \n                      dataKey=\"date\" \n                      stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                      tick={{ fill: isDarkMode ? '#9ca3af' : '#6b7280' }}\n                      tickFormatter={(value) => new Date(value).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n                    />\n                    <YAxis \n                      stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                      tick={{ fill: isDarkMode ? '#9ca3af' : '#6b7280' }}\n                    />\n                    <Tooltip \n                      contentStyle={{\n                        backgroundColor: isDarkMode ? '#1f2937' : '#ffffff',\n                        border: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\n                        borderRadius: '8px',\n                        color: isDarkMode ? '#ffffff' : '#000000'\n                      }}\n                      labelFormatter={(value) => new Date(value).toLocaleDateString('en-US', { month: 'long', day: 'numeric', year: 'numeric' })}\n                      formatter={(value: number, name: string) => {\n                        if (name === 'revenue') return [`$${value.toLocaleString()}`, 'Revenue'];\n                        if (name === 'users') return [value.toLocaleString(), 'Users'];\n                        if (name === 'orders') return [value.toLocaleString(), 'Orders'];\n                        return [value, name];\n                      }}\n                    />\n                    <Legend \n                      wrapperStyle={{ color: isDarkMode ? '#9ca3af' : '#6b7280' }}\n                      formatter={(value) => {\n                        if (value === 'revenue') return 'Revenue';\n                        if (value === 'users') return 'Users';\n                        if (value === 'orders') return 'Orders';\n                        return value;\n                      }}\n                    />\n                    <Line \n                      type=\"monotone\" \n                      dataKey=\"revenue\" \n                      stroke=\"#3b82f6\" \n                      strokeWidth={2}\n                      dot={{ fill: '#3b82f6', r: 4 }}\n                      activeDot={{ r: 6 }}\n                    />\n                    <Line \n                      type=\"monotone\" \n                      dataKey=\"users\" \n                      stroke=\"#10b981\" \n                      strokeWidth={2}\n                      dot={{ fill: '#10b981', r: 4 }}\n                      activeDot={{ r: 6 }}\n                    />\n                    <Line \n                      type=\"monotone\" \n                      dataKey=\"orders\" \n                      stroke=\"#f59e0b\" \n                      strokeWidth={2}\n                      dot={{ fill: '#f59e0b', r: 4 }}\n                      activeDot={{ r: 6 }}\n                    />\n                  </LineChart>\n                </ResponsiveContainer>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n          <CardHeader>\n            <CardTitle className={isDarkMode ? 'text-white' : ''}>Top Products</CardTitle>\n            <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n              Best performing products by sales and revenue\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"overflow-x-auto\">\n              <table className=\"w-full\">\n                <thead>\n                  <tr className={`border-b ${isDarkMode ? 'border-gray-700' : 'border-gray-200'}`}>\n                    <th className={`text-left py-3 px-4 font-semibold ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>\n                      <button\n                        onClick={() => {\n                          const sorted = [...tableData].sort((a, b) => \n                            a.product.localeCompare(b.product)\n                          );\n                          setTableData(sorted);\n                        }}\n                        className=\"flex items-center gap-1 hover:opacity-70 transition-opacity\"\n                      >\n                        Product\n                        <ArrowUpDown className=\"h-4 w-4\" />\n                      </button>\n                    </th>\n                    <th className={`text-right py-3 px-4 font-semibold ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>\n                      <button\n                        onClick={() => {\n                          const sorted = [...tableData].sort((a, b) => b.sales - a.sales);\n                          setTableData(sorted);\n                        }}\n                        className=\"flex items-center justify-end gap-1 hover:opacity-70 transition-opacity ml-auto\"\n                      >\n                        Sales\n                        <ArrowUpDown className=\"h-4 w-4\" />\n                      </button>\n                    </th>\n                    <th className={`text-right py-3 px-4 font-semibold ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>\n                      <button\n                        onClick={() => {\n                          const sorted = [...tableData].sort((a, b) => b.revenue - a.revenue);\n                          setTableData(sorted);\n                        }}\n                        className=\"flex items-center justify-end gap-1 hover:opacity-70 transition-opacity ml-auto\"\n                      >\n                        Revenue\n                        <ArrowUpDown className=\"h-4 w-4\" />\n                      </button>\n                    </th>\n                    <th className={`text-center py-3 px-4 font-semibold ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>\n                      Status\n                    </th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {tableData.map((row, index) => (\n                    <motion.tr\n                      key={row.id}\n                      initial={{ opacity: 0, y: 10 }}\n                      animate={{ opacity: 1, y: 0 }}\n                      transition={{ delay: index * 0.05 }}\n                      className={`border-b ${isDarkMode ? 'border-gray-700 hover:bg-gray-750' : 'border-gray-100 hover:bg-gray-50'} transition-colors`}\n                    >\n                      <td className={`py-4 px-4 font-medium ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                        {row.product}\n                      </td>\n                      <td className={`py-4 px-4 text-right ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>\n                        {row.sales.toLocaleString()}\n                      </td>\n                      <td className={`py-4 px-4 text-right font-semibold ${isDarkMode ? 'text-green-400' : 'text-green-600'}`}>\n                        ${row.revenue.toLocaleString()}\n                      </td>\n                      <td className=\"py-4 px-4 text-center\">\n                        <Badge\n                          variant={row.status === 'active' ? 'default' : row.status === 'pending' ? 'secondary' : 'outline'}\n                          className={\n                            row.status === 'active'\n                              ? 'bg-green-500 hover:bg-green-600 text-white'\n                              : row.status === 'pending'\n                              ? isDarkMode ? 'bg-yellow-600 hover:bg-yellow-700 text-white' : 'bg-yellow-500 hover:bg-yellow-600 text-white'\n                              : isDarkMode ? 'border-gray-600 text-gray-400' : 'border-gray-300 text-gray-600'\n                          }\n                        >\n                          {row.status.charAt(0).toUpperCase() + row.status.slice(1)}\n                        </Badge>\n                      </td>\n                    </motion.tr>\n                  ))}\n                </tbody>\n              </table>\n            </div>\n          </CardContent>\n        </Card>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mt-8\">\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Conversion Funnel</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                User journey and drop-off rates\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n                            <div className=\"space-y-4\">\n                {[\n                  { stage: 'Visitors', value: 10000, percentage: 100, color: 'bg-blue-500' },\n                  { stage: 'Sign Ups', value: 5000, percentage: 50, color: 'bg-indigo-500' },\n                  { stage: 'Active Users', value: 2350, percentage: 23.5, color: 'bg-purple-500' },\n                  { stage: 'Paying Customers', value: 1543, percentage: 15.4, color: 'bg-pink-500' },\n                  { stage: 'Repeat Buyers', value: 892, percentage: 8.9, color: 'bg-rose-500' }\n                ].map((item, index) => (\n                  <motion.div\n                    key={item.stage}\n                    initial={{ opacity: 0, x: -20 }}\n                    animate={{ opacity: 1, x: 0 }}\n                    transition={{ delay: index * 0.1 }}\n                    className=\"relative\"\n                  >\n                    <div className=\"flex items-center justify-between mb-2\">\n                      <span className={`text-sm font-medium ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>\n                        {item.stage}\n                      </span>\n                      <div className=\"flex items-center gap-2\">\n                        <span className={`text-sm font-semibold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                          {item.value.toLocaleString()}\n                        </span>\n                        <span className={`text-xs ${isDarkMode ? 'text-gray-400' : 'text-gray-500'}`}>\n                          ({item.percentage}%)\n                        </span>\n                      </div>\n                    </div>\n                    <div className={`h-12 rounded-lg ${isDarkMode ? 'bg-gray-700' : 'bg-gray-200'} overflow-hidden`}>\n                      <motion.div\n                        initial={{ width: 0 }}\n                        animate={{ width: `${item.percentage}%` }}\n                        transition={{ duration: 0.8, delay: index * 0.1, ease: 'easeOut' }}\n                        className={`h-full ${item.color} flex items-center justify-center`}\n                      >\n                        {item.percentage > 15 && (\n                          <span className=\"text-white text-xs font-semibold\">\n                            {item.percentage}%\n                          </span>\n                        )}\n                      </motion.div>\n                    </div>\n                    {index < 4 && (\n                      <div className=\"flex justify-end mt-1\">\n                        <span className={`text-xs ${isDarkMode ? 'text-gray-500' : 'text-gray-400'}`}>\n                          \u2193 {((1 - ([5000, 2350, 1543, 892][index] / [10000, 5000, 2350, 1543][index])) * 100).toFixed(1)}% drop-off\n                        </span>\n                      </div>\n                    )}\n                  </motion.div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Traffic Sources</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Visitor sources breakdown\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n                            <div className=\"space-y-6\">\n                <div className=\"flex justify-center\">\n                  <div className=\"relative w-48 h-48\">\n                    <svg viewBox=\"0 0 200 200\" className=\"transform -rotate-90\">\n                      {/* Organic - 40% */}\n                      <circle\n                        cx=\"100\"\n                        cy=\"100\"\n                        r=\"80\"\n                        fill=\"none\"\n                        stroke=\"#3b82f6\"\n                        strokeWidth=\"40\"\n                        strokeDasharray=\"201 502\"\n                        strokeDashoffset=\"0\"\n                        className=\"transition-all duration-500\"\n                      />\n                      {/* Direct - 25% */}\n                      <circle\n                        cx=\"100\"\n                        cy=\"100\"\n                        r=\"80\"\n                        fill=\"none\"\n                        stroke=\"#8b5cf6\"\n                        strokeWidth=\"40\"\n                        strokeDasharray=\"126 502\"\n                        strokeDashoffset=\"-201\"\n                        className=\"transition-all duration-500\"\n                      />\n                      {/* Social - 20% */}\n                      <circle\n                        cx=\"100\"\n                        cy=\"100\"\n                        r=\"80\"\n                        fill=\"none\"\n                        stroke=\"#10b981\"\n                        strokeWidth=\"40\"\n                        strokeDasharray=\"100 502\"\n                        strokeDashoffset=\"-327\"\n                        className=\"transition-all duration-500\"\n                      />\n                      {/* Referral - 15% */}\n                      <circle\n                        cx=\"100\"\n                        cy=\"100\"\n                        r=\"80\"\n                        fill=\"none\"\n                        stroke=\"#f59e0b\"\n                        strokeWidth=\"40\"\n                        strokeDasharray=\"75 502\"\n                        strokeDashoffset=\"-427\"\n                        className=\"transition-all duration-500\"\n                      />\n                    </svg>\n                    <div className=\"absolute inset-0 flex items-center justify-center\">\n                      <div className=\"text-center\">\n                        <p className={`text-2xl font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                          100%\n                        </p>\n                        <p className={`text-xs ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                          Total Traffic\n                        </p>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n                \n                <div className=\"space-y-3\">\n                  <motion.div\n                    initial={{ opacity: 0, x: -20 }}\n                    animate={{ opacity: 1, x: 0 }}\n                    transition={{ delay: 0.1 }}\n                    className=\"flex items-center justify-between\"\n                  >\n                    <div className=\"flex items-center gap-2\">\n                      <div className=\"w-3 h-3 rounded-full bg-blue-500\"></div>\n                      <span className={`text-sm ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>\n                        Organic Search\n                      </span>\n                    </div>\n                    <span className={`text-sm font-semibold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                      40%\n                    </span>\n                  </motion.div>\n                  \n                  <motion.div\n                    initial={{ opacity: 0, x: -20 }}\n                    animate={{ opacity: 1, x: 0 }}\n                    transition={{ delay: 0.2 }}\n                    className=\"flex items-center justify-between\"\n                  >\n                    <div className=\"flex items-center gap-2\">\n                      <div className=\"w-3 h-3 rounded-full bg-purple-500\"></div>\n                      <span className={`text-sm ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>\n                        Direct Traffic\n                      </span>\n                    </div>\n                    <span className={`text-sm font-semibold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                      25%\n                    </span>\n                  </motion.div>\n                  \n                  <motion.div\n                    initial={{ opacity: 0, x: -20 }}\n                    animate={{ opacity: 1, x: 0 }}\n                    transition={{ delay: 0.3 }}\n                    className=\"flex items-center justify-between\"\n                  >\n                    <div className=\"flex items-center gap-2\">\n                      <div className=\"w-3 h-3 rounded-full bg-green-500\"></div>\n                      <span className={`text-sm ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>\n                        Social Media\n                      </span>\n                    </div>\n                    <span className={`text-sm font-semibold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                      20%\n                    </span>\n                  </motion.div>\n                  \n                  <motion.div\n                    initial={{ opacity: 0, x: -20 }}\n                    animate={{ opacity: 1, x: 0 }}\n                    transition={{ delay: 0.4 }}\n                    className=\"flex items-center justify-between\"\n                  >\n                    <div className=\"flex items-center gap-2\">\n                      <div className=\"w-3 h-3 rounded-full bg-amber-500\"></div>\n                      <span className={`text-sm ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>\n                        Referral Links\n                      </span>\n                    </div>\n                    <span className={`text-sm font-semibold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                      15%\n                    </span>\n                  </motion.div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Recent Activity</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Latest system events\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"max-h-[400px] overflow-y-auto space-y-4 pr-2\">\n                {mockActivityData.map((activity, index) => {\n                  const Icon = getActivityIcon(activity.type);\n                  const colorClass = getActivityColor(activity.type, isDarkMode);\n                  \n                  return (\n                    <motion.div\n                      key={activity.id}\n                      initial={{ opacity: 0, x: -20 }}\n                      animate={{ opacity: 1, x: 0 }}\n                      transition={{ delay: index * 0.05 }}\n                      className={`flex items-start gap-3 p-3 rounded-lg transition-colors ${\n                        isDarkMode ? 'hover:bg-gray-700/50' : 'hover:bg-gray-50'\n                      }`}\n                    >\n                      <div className={`p-2 rounded-full ${\n                        isDarkMode ? 'bg-gray-700' : 'bg-gray-100'\n                      }`}>\n                        <Icon className={`h-4 w-4 ${colorClass}`} />\n                      </div>\n                      \n                      <div className=\"flex-1 min-w-0\">\n                        <p className={`text-sm ${\n                          isDarkMode ? 'text-gray-200' : 'text-gray-900'\n                        }`}>\n                          {activity.message}\n                        </p>\n                        <p className={`text-xs mt-1 ${\n                          isDarkMode ? 'text-gray-500' : 'text-gray-500'\n                        }`}>\n                          {activity.timestamp}\n                        </p>\n                      </div>\n                    </motion.div>\n                  );\n                })}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}",
  "error": null,
  "overall_score": 53,
  "code_quality_score": 16,
  "architecture_score": 14,
  "performance_score": 12,
  "accessibility_score": 11,
  "metadata": {
    "document_id": "eval_room_7796c29d98f2",
    "prompt_category": "intermediate",
    "prompt_complexity": 6.0
  },
  "raw_response": {
    "document_id": "eval_room_7796c29d98f2",
    "mode": "parallel",
    "prompt": "Generate an analytics dashboard page with charts, data tables, real-time updates, dark mode, and responsive design",
    "content": "import { useState, useCallback } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Moon, Sun, RefreshCw } from 'lucide-react';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';\nimport { motion } from 'framer-motion';\nimport { TrendingUp } from 'lucide-react';\nimport { TrendingUp, TrendingDown, DollarSign, Users, ShoppingCart, Target } from 'lucide-react';\n\nimport { motion } from 'framer-motion';\nimport { Badge } from '@/components/ui/badge';\nimport { ArrowUpDown } from 'lucide-react';\n\ninterface MetricData {\n  id: string;\n  label: string;\n  value: number;\n  change: number;\n  trend: 'up' | 'down';\n}\n\ninterface ChartDataPoint {\n  date: string;\n  revenue: number;\n  users: number;\n  orders: number;\n}\n\ninterface TableRow {\n  id: string;\n  product: string;\n  sales: number;\n  revenue: number;\n  status: 'active' | 'pending' | 'inactive';\n}\ninterface ActivityEvent {\n  id: string;\n  type: 'sale' | 'user' | 'system' | 'alert';\n  message: string;\n  timestamp: string;\n  icon?: string;\n}\n\nconst mockMetrics: MetricData[] = [\n  { id: '1', label: 'Total Revenue', value: 45231, change: 12.5, trend: 'up' },\n  { id: '2', label: 'Active Users', value: 2350, change: 8.2, trend: 'up' },\n  { id: '3', label: 'Total Orders', value: 1543, change: -3.1, trend: 'down' },\n  { id: '4', label: 'Conversion Rate', value: 3.24, change: 5.7, trend: 'up' }\n];\n\nconst mockChartData: ChartDataPoint[] = [\n  { date: '2024-01-01', revenue: 12000, users: 450, orders: 230 },\n  { date: '2024-01-02', revenue: 15000, users: 520, orders: 280 },\n  { date: '2024-01-03', revenue: 13500, users: 490, orders: 250 },\n  { date: '2024-01-04', revenue: 18000, users: 610, orders: 320 },\n  { date: '2024-01-05', revenue: 16500, users: 580, orders: 295 },\n  { date: '2024-01-06', revenue: 20000, users: 680, orders: 360 },\n  { date: '2024-01-07', revenue: 22000, users: 720, orders: 390 }\n];\n\nconst mockTableData: TableRow[] = [\n  { id: '1', product: 'Premium Plan', sales: 234, revenue: 23400, status: 'active' },\n  { id: '2', product: 'Basic Plan', sales: 567, revenue: 11340, status: 'active' },\n  { id: '3', product: 'Enterprise Plan', sales: 89, revenue: 17800, status: 'active' },\n  { id: '4', product: 'Starter Plan', sales: 432, revenue: 4320, status: 'pending' },\n  { id: '5', product: 'Pro Plan', sales: 156, revenue: 15600, status: 'inactive' }\n];\nconst mockActivityData: ActivityEvent[] = [\n  { id: '1', type: 'sale', message: 'New order #1234 - Premium Plan', timestamp: '2 minutes ago' },\n  { id: '2', type: 'user', message: 'New user registration: john@example.com', timestamp: '5 minutes ago' },\n  { id: '3', type: 'system', message: 'Database backup completed successfully', timestamp: '12 minutes ago' },\n  { id: '4', type: 'sale', message: 'Payment received: $299.00', timestamp: '18 minutes ago' },\n  { id: '5', type: 'alert', message: 'Server response time increased', timestamp: '25 minutes ago' },\n  { id: '6', type: 'user', message: 'User upgraded to Enterprise Plan', timestamp: '32 minutes ago' },\n  { id: '7', type: 'sale', message: 'New order #1233 - Basic Plan', timestamp: '45 minutes ago' },\n  { id: '8', type: 'system', message: 'System update deployed v2.1.0', timestamp: '1 hour ago' },\n  { id: '9', type: 'user', message: 'Password reset requested', timestamp: '1 hour ago' },\n  { id: '10', type: 'sale', message: 'Refund processed: $49.00', timestamp: '2 hours ago' }\n];\n\nconst getActivityIcon = (type: string) => {\n  switch (type) {\n    case 'sale':\n      return ShoppingCart;\n    case 'user':\n      return Users;\n    case 'system':\n      return Target;\n    case 'alert':\n      return TrendingDown;\n    default:\n      return Target;\n  }\n};\n\nconst getActivityColor = (type: string, isDarkMode: boolean) => {\n  switch (type) {\n    case 'sale':\n      return isDarkMode ? 'text-green-400' : 'text-green-600';\n    case 'user':\n      return isDarkMode ? 'text-blue-400' : 'text-blue-600';\n    case 'system':\n      return isDarkMode ? 'text-purple-400' : 'text-purple-600';\n    case 'alert':\n      return isDarkMode ? 'text-orange-400' : 'text-orange-600';\n    default:\n      return isDarkMode ? 'text-gray-400' : 'text-gray-600';\n  }\n};\n\nconst RevenueChart = ({ data, isDarkMode }: { data: ChartDataPoint[], isDarkMode: boolean }) => {\n  const [hoveredPoint, setHoveredPoint] = useState<number | null>(null);\n  \n  const maxRevenue = Math.max(...data.map(d => d.revenue));\n  const minRevenue = Math.min(...data.map(d => d.revenue));\n  const range = maxRevenue - minRevenue;\n  const padding = range * 0.1;\n  \n  const chartHeight = 250;\n  const chartWidth = 100; // percentage\n  \n  const getYPosition = (value: number) => {\n    const normalizedValue = (value - minRevenue + padding) / (range + 2 * padding);\n    return chartHeight - (normalizedValue * chartHeight);\n  };\n  \n  const getXPosition = (index: number) => {\n    return (index / (data.length - 1)) * 100;\n  };\n  \n  const pathData = data.map((point, index) => {\n    const x = getXPosition(index);\n    const y = getYPosition(point.revenue);\n    return `${index === 0 ? 'M' : 'L'} ${x} ${y}`;\n  }).join(' ');\n  \n  const areaPathData = `${pathData} L ${getXPosition(data.length - 1)} ${chartHeight} L 0 ${chartHeight} Z`;\n  \n  const formatCurrency = (value: number) => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0\n    }).format(value);\n  };\n  \n  const formatDate = (dateString: string) => {\n    const date = new Date(dateString);\n    return date.toLocaleDateString('en-US', { month: 'short', day: 'numeric' });\n  };\n  \n  return (\n    <div className=\"w-full\">\n      <div className=\"relative\" style={{ height: `${chartHeight}px` }}>\n        <svg\n          viewBox={`0 0 100 ${chartHeight}`}\n          preserveAspectRatio=\"none\"\n          className=\"w-full h-full\"\n        >\n          {/* Grid lines */}\n          {[0, 1, 2, 3, 4].map((i) => {\n            const y = (chartHeight / 4) * i;\n            return (\n              <line\n                key={i}\n                x1=\"0\"\n                y1={y}\n                x2=\"100\"\n                y2={y}\n                stroke={isDarkMode ? '#374151' : '#e5e7eb'}\n                strokeWidth=\"0.2\"\n              />\n            );\n          })}\n          \n          {/* Area gradient */}\n          <defs>\n            <linearGradient id=\"revenueGradient\" x1=\"0%\" y1=\"0%\" x2=\"0%\" y2=\"100%\">\n              <stop offset=\"0%\" stopColor=\"#3b82f6\" stopOpacity=\"0.3\" />\n              <stop offset=\"100%\" stopColor=\"#3b82f6\" stopOpacity=\"0\" />\n            </linearGradient>\n          </defs>\n          \n          {/* Area fill */}\n          <path\n            d={areaPathData}\n            fill=\"url(#revenueGradient)\"\n          />\n          \n          {/* Line */}\n          <path\n            d={pathData}\n            fill=\"none\"\n            stroke=\"#3b82f6\"\n            strokeWidth=\"0.5\"\n            vectorEffect=\"non-scaling-stroke\"\n          />\n          \n          {/* Data points */}\n          {data.map((point, index) => {\n            const x = getXPosition(index);\n            const y = getYPosition(point.revenue);\n            const isHovered = hoveredPoint === index;\n            \n            return (\n              <g key={index}>\n                <circle\n                  cx={x}\n                  cy={y}\n                  r={isHovered ? \"1.5\" : \"0.8\"}\n                  fill=\"#3b82f6\"\n                  stroke={isDarkMode ? '#1f2937' : '#ffffff'}\n                  strokeWidth=\"0.3\"\n                  vectorEffect=\"non-scaling-stroke\"\n                  className=\"transition-all duration-200 cursor-pointer\"\n                  onMouseEnter={() => setHoveredPoint(index)}\n                  onMouseLeave={() => setHoveredPoint(null)}\n                />\n                {/* Invisible larger hit area */}\n                <circle\n                  cx={x}\n                  cy={y}\n                  r=\"3\"\n                  fill=\"transparent\"\n                  className=\"cursor-pointer\"\n                  onMouseEnter={() => setHoveredPoint(index)}\n                  onMouseLeave={() => setHoveredPoint(null)}\n                />\n              </g>\n            );\n          })}\n        </svg>\n        \n        {/* Tooltip */}\n        {hoveredPoint !== null && (\n          <div\n            className={`absolute z-10 px-3 py-2 rounded-lg shadow-lg border transition-opacity duration-200 ${\n              isDarkMode ? 'bg-gray-700 border-gray-600 text-white' : 'bg-white border-gray-200 text-gray-900'\n            }`}\n            style={{\n              left: `${getXPosition(hoveredPoint)}%`,\n              top: `${getYPosition(data[hoveredPoint].revenue)}px`,\n              transform: 'translate(-50%, -120%)',\n              pointerEvents: 'none'\n            }}\n          >\n            <div className=\"text-xs font-medium mb-1\">\n              {formatDate(data[hoveredPoint].date)}\n            </div>\n            <div className=\"text-sm font-bold flex items-center gap-1\">\n              <TrendingUp className=\"h-3 w-3 text-blue-500\" />\n              {formatCurrency(data[hoveredPoint].revenue)}\n            </div>\n            <div className={`text-xs mt-1 ${isDarkMode ? 'text-gray-400' : 'text-gray-500'}`}>\n              {data[hoveredPoint].orders} orders\n            </div>\n          </div>\n        )}\n      </div>\n      \n      {/* X-axis labels */}\n      <div className=\"flex justify-between mt-4 px-1\">\n        {data.map((point, index) => {\n          if (index % Math.ceil(data.length / 4) === 0 || index === data.length - 1) {\n            return (\n              <div\n                key={index}\n                className={`text-xs ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}\n              >\n                {formatDate(point.date)}\n              </div>\n            );\n          }\n          return null;\n        })}\n      </div>\n      \n      {/* Y-axis labels */}\n      <div className=\"flex justify-between items-center mt-4\">\n        <div className={`text-xs ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n          Min: {formatCurrency(minRevenue)}\n        </div>\n        <div className={`text-xs ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n          Max: {formatCurrency(maxRevenue)}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst getMetricIcon = (label: string) => {\n  switch (label) {\n    case 'Total Revenue':\n      return DollarSign;\n    case 'Active Users':\n      return Users;\n    case 'Total Orders':\n      return ShoppingCart;\n    case 'Conversion Rate':\n      return Target;\n    default:\n      return DollarSign;\n  }\n};\n\nconst formatMetricValue = (label: string, value: number) => {\n  if (label === 'Total Revenue') {\n    return `$${value.toLocaleString()}`;\n  } else if (label === 'Conversion Rate') {\n    return `${value}%`;\n  }\n  return value.toLocaleString();\n};\n\nconst UserAreaChart = ({ data, isDarkMode }: { data: ChartDataPoint[], isDarkMode: boolean }) => {\n  const [hoveredIndex, setHoveredIndex] = useState<number | null>(null);\n  \n  const maxUsers = Math.max(...data.map(d => d.users));\n  const minUsers = Math.min(...data.map(d => d.users));\n  const range = maxUsers - minUsers;\n  const padding = range * 0.1;\n  \n  const chartHeight = 200;\n  const chartWidth = 100;\n  \n  const points = data.map((point, index) => {\n    const x = (index / (data.length - 1)) * chartWidth;\n    const normalizedValue = ((point.users - minUsers + padding) / (range + 2 * padding));\n    const y = chartHeight - (normalizedValue * chartHeight);\n    return { x, y, ...point };\n  });\n  \n  const pathData = points.map((p, i) => \n    `${i === 0 ? 'M' : 'L'} ${p.x} ${p.y}`\n  ).join(' ');\n  \n  const areaPath = `${pathData} L ${chartWidth} ${chartHeight} L 0 ${chartHeight} Z`;\n  \n  return (\n    <div className=\"relative w-full h-[200px]\">\n      <svg\n        viewBox={`0 0 ${chartWidth} ${chartHeight}`}\n        className=\"w-full h-full\"\n        preserveAspectRatio=\"none\"\n      >\n        <defs>\n          <linearGradient id=\"userGradient\" x1=\"0%\" y1=\"0%\" x2=\"0%\" y2=\"100%\">\n            <stop offset=\"0%\" stopColor=\"#3b82f6\" stopOpacity=\"0.6\" />\n            <stop offset=\"50%\" stopColor=\"#3b82f6\" stopOpacity=\"0.3\" />\n            <stop offset=\"100%\" stopColor=\"#3b82f6\" stopOpacity=\"0.05\" />\n          </linearGradient>\n        </defs>\n        \n        <motion.path\n          d={areaPath}\n          fill=\"url(#userGradient)\"\n          initial={{ opacity: 0 }}\n          animate={{ opacity: 1 }}\n          transition={{ duration: 0.5 }}\n        />\n        \n        <motion.path\n          d={pathData}\n          fill=\"none\"\n          stroke=\"#3b82f6\"\n          strokeWidth=\"0.5\"\n          initial={{ pathLength: 0 }}\n          animate={{ pathLength: 1 }}\n          transition={{ duration: 1, ease: \"easeInOut\" }}\n        />\n        \n        {points.map((point, index) => (\n          <g key={index}>\n            <motion.circle\n              cx={point.x}\n              cy={point.y}\n              r={hoveredIndex === index ? \"1.2\" : \"0.8\"}\n              fill=\"#3b82f6\"\n              stroke={isDarkMode ? \"#1f2937\" : \"#ffffff\"}\n              strokeWidth=\"0.3\"\n              initial={{ scale: 0 }}\n              animate={{ scale: 1 }}\n              transition={{ delay: index * 0.1, duration: 0.3 }}\n              onMouseEnter={() => setHoveredIndex(index)}\n              onMouseLeave={() => setHoveredIndex(null)}\n              className=\"cursor-pointer\"\n              style={{ transformOrigin: `${point.x}px ${point.y}px` }}\n            />\n          </g>\n        ))}\n      </svg>\n      \n      <div className=\"absolute top-0 left-0 w-full h-full flex justify-between items-end pointer-events-none\">\n        {points.map((point, index) => (\n          <div\n            key={index}\n            className=\"flex-1 h-full relative\"\n            style={{ pointerEvents: 'auto' }}\n            onMouseEnter={() => setHoveredIndex(index)}\n            onMouseLeave={() => setHoveredIndex(null)}\n          >\n            {hoveredIndex === index && (\n              <motion.div\n                initial={{ opacity: 0, y: 10 }}\n                animate={{ opacity: 1, y: 0 }}\n                className={`absolute bottom-full left-1/2 transform -translate-x-1/2 mb-2 px-3 py-2 rounded-lg shadow-lg ${\n                  isDarkMode ? 'bg-gray-700 text-white' : 'bg-white text-gray-900'\n                } text-xs whitespace-nowrap z-10`}\n              >\n                <div className=\"font-semibold\">{point.users.toLocaleString()} users</div>\n                <div className={isDarkMode ? 'text-gray-400' : 'text-gray-600'}>\n                  {new Date(point.date).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n                </div>\n              </motion.div>\n            )}\n          </div>\n        ))}\n      </div>\n      \n      <div className=\"flex justify-between mt-4\">\n        {data.map((point, index) => (\n          <div\n            key={index}\n            className={`text-xs ${isDarkMode ? 'text-gray-400' : 'text-gray-600'} flex-1 text-center`}\n          >\n            {new Date(point.date).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default function AnalyticsDashboard() {\n  const [isDarkMode, setIsDarkMode] = useState(false);\n  const [metrics, setMetrics] = useState<MetricData[]>(mockMetrics);\n  const [chartData, setChartData] = useState<ChartDataPoint[]>(mockChartData);\n  const [tableData, setTableData] = useState<TableRow[]>(mockTableData);\n  const [isRefreshing, setIsRefreshing] = useState(false);\n\n  const toggleDarkMode = useCallback(() => {\n    setIsDarkMode(prev => !prev);\n  }, []);\n\n  const handleRefresh = useCallback(() => {\n    setIsRefreshing(true);\n    \n    setTimeout(() => {\n      // Generate updated metrics with random variations\n      const updatedMetrics = mockMetrics.map(metric => ({\n        ...metric,\n        value: metric.value + Math.floor(Math.random() * 200 - 100),\n        change: parseFloat((Math.random() * 20 - 5).toFixed(1)),\n        trend: Math.random() > 0.5 ? 'up' as const : 'down' as const\n      }));\n      \n      // Generate updated chart data with random variations\n      const updatedChartData = mockChartData.map(point => ({\n        ...point,\n        revenue: point.revenue + Math.floor(Math.random() * 4000 - 2000),\n        users: point.users + Math.floor(Math.random() * 100 - 50),\n        orders: point.orders + Math.floor(Math.random() * 50 - 25)\n      }));\n      \n      // Generate updated table data with random variations\n      const updatedTableData = mockTableData.map(row => ({\n        ...row,\n        sales: row.sales + Math.floor(Math.random() * 40 - 20),\n        revenue: row.revenue + Math.floor(Math.random() * 2000 - 1000)\n      }));\n      \n      setMetrics(updatedMetrics);\n      setChartData(updatedChartData);\n      setTableData(updatedTableData);\n      setIsRefreshing(false);\n    }, 1500);\n  }, []);\n\n  return (\n    <div className={`min-h-screen transition-colors duration-300 ${isDarkMode ? 'dark bg-gray-900' : 'bg-gray-50'}`}>\n      <div className=\"container mx-auto p-4 md:p-6 lg:p-8\">\n        <div className=\"flex flex-col md:flex-row md:items-center md:justify-between mb-8 gap-4\">\n          <div>\n            <h1 className={`text-3xl md:text-4xl font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n              Analytics Dashboard\n            </h1>\n            <p className={`mt-2 ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n              Real-time insights and performance metrics\n            </p>\n          </div>\n          \n          <div className=\"flex items-center gap-3\">\n            <Button\n              variant=\"outline\"\n              size=\"icon\"\n              onClick={toggleDarkMode}\n              className={isDarkMode ? 'border-gray-700 hover:bg-gray-800' : ''}\n            >\n              {isDarkMode ? <Sun className=\"h-5 w-5\" /> : <Moon className=\"h-5 w-5\" />}\n            </Button>\n            \n            <Button\n              variant=\"outline\"\n              onClick={handleRefresh}\n              disabled={isRefreshing}\n              className={isDarkMode ? 'border-gray-700 hover:bg-gray-800' : ''}\n            >\n              <RefreshCw className={`h-4 w-4 mr-2 ${isRefreshing ? 'animate-spin' : ''}`} />\n              Refresh\n            </Button>\n          </div>\n        </div>\n\n        <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 md:gap-6 mb-8\">\n          {metrics.map((metric, index) => {\n            const IconComponent = getMetricIcon(metric.label);\n            const isPositive = metric.trend === 'up';\n            \n            return (\n              <motion.div\n                key={metric.id}\n                initial={{ opacity: 0, y: 20 }}\n                animate={{ opacity: 1, y: 0 }}\n                transition={{ duration: 0.4, delay: index * 0.1 }}\n              >\n                <Card className={`${isDarkMode ? 'bg-gray-800 border-gray-700' : 'bg-white'} hover:shadow-lg transition-shadow duration-300`}>\n                  <CardHeader className=\"flex flex-row items-center justify-between pb-2\">\n                    <CardTitle className={`text-sm font-medium ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                      {metric.label}\n                    </CardTitle>\n                    <div className={`p-2 rounded-lg ${isDarkMode ? 'bg-gray-700' : 'bg-gray-100'}`}>\n                      <IconComponent className={`h-4 w-4 ${isDarkMode ? 'text-gray-300' : 'text-gray-600'}`} />\n                    </div>\n                  </CardHeader>\n                  <CardContent>\n                    <div className={`text-2xl md:text-3xl font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                      {formatMetricValue(metric.label, metric.value)}\n                    </div>\n                    <div className=\"flex items-center mt-2\">\n                      {isPositive ? (\n                        <TrendingUp className=\"h-4 w-4 text-green-500 mr-1\" />\n                      ) : (\n                        <TrendingDown className=\"h-4 w-4 text-red-500 mr-1\" />\n                      )}\n                      <span className={`text-sm font-medium ${isPositive ? 'text-green-500' : 'text-red-500'}`}>\n                        {isPositive ? '+' : ''}{metric.change}%\n                      </span>\n                      <span className={`text-sm ml-2 ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                        vs last period\n                      </span>\n                    </div>\n                  </CardContent>\n                </Card>\n              </motion.div>\n            );\n          })}\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6 mb-8\">\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Revenue Overview</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Daily revenue trends for the past week\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <RevenueChart data={chartData} isDarkMode={isDarkMode} />\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>User Activity</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Active users and engagement metrics\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <UserAreaChart data={chartData} isDarkMode={isDarkMode} />\n            </CardContent>\n          </Card>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6 mb-8\">\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Orders Distribution</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Order volume by category\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"h-[300px] w-full\">\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <BarChart data={chartData}>\n                    <CartesianGrid \n                      strokeDasharray=\"3 3\" \n                      stroke={isDarkMode ? '#374151' : '#e5e7eb'}\n                    />\n                    <XAxis \n                      dataKey=\"date\" \n                      stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                      fontSize={12}\n                      tickFormatter={(value) => new Date(value).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n                    />\n                    <YAxis \n                      stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                      fontSize={12}\n                    />\n                    <Tooltip \n                      contentStyle={{\n                        backgroundColor: isDarkMode ? '#1f2937' : '#ffffff',\n                        border: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\n                        borderRadius: '8px',\n                        color: isDarkMode ? '#f3f4f6' : '#111827'\n                      }}\n                      labelStyle={{\n                        color: isDarkMode ? '#f3f4f6' : '#111827',\n                        fontWeight: 'bold',\n                        marginBottom: '4px'\n                      }}\n                      formatter={(value: number) => [value, 'Orders']}\n                      labelFormatter={(label) => new Date(label).toLocaleDateString('en-US', { month: 'long', day: 'numeric', year: 'numeric' })}\n                    />\n                    <Bar \n                      dataKey=\"orders\" \n                      fill=\"#8b5cf6\"\n                      radius={[8, 8, 0, 0]}\n                      maxBarSize={60}\n                    />\n                  </BarChart>\n                </ResponsiveContainer>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className={`lg:col-span-2 ${isDarkMode ? 'bg-gray-800 border-gray-700' : ''}`}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Performance Comparison</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Multi-metric comparison over time\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"h-[300px] w-full\">\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <LineChart\n                    data={chartData}\n                    margin={{ top: 5, right: 30, left: 20, bottom: 5 }}\n                  >\n                    <CartesianGrid \n                      strokeDasharray=\"3 3\" \n                      stroke={isDarkMode ? '#374151' : '#e5e7eb'}\n                    />\n                    <XAxis \n                      dataKey=\"date\" \n                      stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                      tick={{ fill: isDarkMode ? '#9ca3af' : '#6b7280' }}\n                      tickFormatter={(value) => new Date(value).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n                    />\n                    <YAxis \n                      stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                      tick={{ fill: isDarkMode ? '#9ca3af' : '#6b7280' }}\n                    />\n                    <Tooltip \n                      contentStyle={{\n                        backgroundColor: isDarkMode ? '#1f2937' : '#ffffff',\n                        border: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\n                        borderRadius: '8px',\n                        color: isDarkMode ? '#ffffff' : '#000000'\n                      }}\n                      labelFormatter={(value) => new Date(value).toLocaleDateString('en-US', { month: 'long', day: 'numeric', year: 'numeric' })}\n                      formatter={(value: number, name: string) => {\n                        if (name === 'revenue') return [`$${value.toLocaleString()}`, 'Revenue'];\n                        if (name === 'users') return [value.toLocaleString(), 'Users'];\n                        if (name === 'orders') return [value.toLocaleString(), 'Orders'];\n                        return [value, name];\n                      }}\n                    />\n                    <Legend \n                      wrapperStyle={{ color: isDarkMode ? '#9ca3af' : '#6b7280' }}\n                      formatter={(value) => {\n                        if (value === 'revenue') return 'Revenue';\n                        if (value === 'users') return 'Users';\n                        if (value === 'orders') return 'Orders';\n                        return value;\n                      }}\n                    />\n                    <Line \n                      type=\"monotone\" \n                      dataKey=\"revenue\" \n                      stroke=\"#3b82f6\" \n                      strokeWidth={2}\n                      dot={{ fill: '#3b82f6', r: 4 }}\n                      activeDot={{ r: 6 }}\n                    />\n                    <Line \n                      type=\"monotone\" \n                      dataKey=\"users\" \n                      stroke=\"#10b981\" \n                      strokeWidth={2}\n                      dot={{ fill: '#10b981', r: 4 }}\n                      activeDot={{ r: 6 }}\n                    />\n                    <Line \n                      type=\"monotone\" \n                      dataKey=\"orders\" \n                      stroke=\"#f59e0b\" \n                      strokeWidth={2}\n                      dot={{ fill: '#f59e0b', r: 4 }}\n                      activeDot={{ r: 6 }}\n                    />\n                  </LineChart>\n                </ResponsiveContainer>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n          <CardHeader>\n            <CardTitle className={isDarkMode ? 'text-white' : ''}>Top Products</CardTitle>\n            <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n              Best performing products by sales and revenue\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"overflow-x-auto\">\n              <table className=\"w-full\">\n                <thead>\n                  <tr className={`border-b ${isDarkMode ? 'border-gray-700' : 'border-gray-200'}`}>\n                    <th className={`text-left py-3 px-4 font-semibold ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>\n                      <button\n                        onClick={() => {\n                          const sorted = [...tableData].sort((a, b) => \n                            a.product.localeCompare(b.product)\n                          );\n                          setTableData(sorted);\n                        }}\n                        className=\"flex items-center gap-1 hover:opacity-70 transition-opacity\"\n                      >\n                        Product\n                        <ArrowUpDown className=\"h-4 w-4\" />\n                      </button>\n                    </th>\n                    <th className={`text-right py-3 px-4 font-semibold ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>\n                      <button\n                        onClick={() => {\n                          const sorted = [...tableData].sort((a, b) => b.sales - a.sales);\n                          setTableData(sorted);\n                        }}\n                        className=\"flex items-center justify-end gap-1 hover:opacity-70 transition-opacity ml-auto\"\n                      >\n                        Sales\n                        <ArrowUpDown className=\"h-4 w-4\" />\n                      </button>\n                    </th>\n                    <th className={`text-right py-3 px-4 font-semibold ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>\n                      <button\n                        onClick={() => {\n                          const sorted = [...tableData].sort((a, b) => b.revenue - a.revenue);\n                          setTableData(sorted);\n                        }}\n                        className=\"flex items-center justify-end gap-1 hover:opacity-70 transition-opacity ml-auto\"\n                      >\n                        Revenue\n                        <ArrowUpDown className=\"h-4 w-4\" />\n                      </button>\n                    </th>\n                    <th className={`text-center py-3 px-4 font-semibold ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>\n                      Status\n                    </th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {tableData.map((row, index) => (\n                    <motion.tr\n                      key={row.id}\n                      initial={{ opacity: 0, y: 10 }}\n                      animate={{ opacity: 1, y: 0 }}\n                      transition={{ delay: index * 0.05 }}\n                      className={`border-b ${isDarkMode ? 'border-gray-700 hover:bg-gray-750' : 'border-gray-100 hover:bg-gray-50'} transition-colors`}\n                    >\n                      <td className={`py-4 px-4 font-medium ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                        {row.product}\n                      </td>\n                      <td className={`py-4 px-4 text-right ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>\n                        {row.sales.toLocaleString()}\n                      </td>\n                      <td className={`py-4 px-4 text-right font-semibold ${isDarkMode ? 'text-green-400' : 'text-green-600'}`}>\n                        ${row.revenue.toLocaleString()}\n                      </td>\n                      <td className=\"py-4 px-4 text-center\">\n                        <Badge\n                          variant={row.status === 'active' ? 'default' : row.status === 'pending' ? 'secondary' : 'outline'}\n                          className={\n                            row.status === 'active'\n                              ? 'bg-green-500 hover:bg-green-600 text-white'\n                              : row.status === 'pending'\n                              ? isDarkMode ? 'bg-yellow-600 hover:bg-yellow-700 text-white' : 'bg-yellow-500 hover:bg-yellow-600 text-white'\n                              : isDarkMode ? 'border-gray-600 text-gray-400' : 'border-gray-300 text-gray-600'\n                          }\n                        >\n                          {row.status.charAt(0).toUpperCase() + row.status.slice(1)}\n                        </Badge>\n                      </td>\n                    </motion.tr>\n                  ))}\n                </tbody>\n              </table>\n            </div>\n          </CardContent>\n        </Card>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mt-8\">\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Conversion Funnel</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                User journey and drop-off rates\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n                            <div className=\"space-y-4\">\n                {[\n                  { stage: 'Visitors', value: 10000, percentage: 100, color: 'bg-blue-500' },\n                  { stage: 'Sign Ups', value: 5000, percentage: 50, color: 'bg-indigo-500' },\n                  { stage: 'Active Users', value: 2350, percentage: 23.5, color: 'bg-purple-500' },\n                  { stage: 'Paying Customers', value: 1543, percentage: 15.4, color: 'bg-pink-500' },\n                  { stage: 'Repeat Buyers', value: 892, percentage: 8.9, color: 'bg-rose-500' }\n                ].map((item, index) => (\n                  <motion.div\n                    key={item.stage}\n                    initial={{ opacity: 0, x: -20 }}\n                    animate={{ opacity: 1, x: 0 }}\n                    transition={{ delay: index * 0.1 }}\n                    className=\"relative\"\n                  >\n                    <div className=\"flex items-center justify-between mb-2\">\n                      <span className={`text-sm font-medium ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>\n                        {item.stage}\n                      </span>\n                      <div className=\"flex items-center gap-2\">\n                        <span className={`text-sm font-semibold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                          {item.value.toLocaleString()}\n                        </span>\n                        <span className={`text-xs ${isDarkMode ? 'text-gray-400' : 'text-gray-500'}`}>\n                          ({item.percentage}%)\n                        </span>\n                      </div>\n                    </div>\n                    <div className={`h-12 rounded-lg ${isDarkMode ? 'bg-gray-700' : 'bg-gray-200'} overflow-hidden`}>\n                      <motion.div\n                        initial={{ width: 0 }}\n                        animate={{ width: `${item.percentage}%` }}\n                        transition={{ duration: 0.8, delay: index * 0.1, ease: 'easeOut' }}\n                        className={`h-full ${item.color} flex items-center justify-center`}\n                      >\n                        {item.percentage > 15 && (\n                          <span className=\"text-white text-xs font-semibold\">\n                            {item.percentage}%\n                          </span>\n                        )}\n                      </motion.div>\n                    </div>\n                    {index < 4 && (\n                      <div className=\"flex justify-end mt-1\">\n                        <span className={`text-xs ${isDarkMode ? 'text-gray-500' : 'text-gray-400'}`}>\n                          \u2193 {((1 - ([5000, 2350, 1543, 892][index] / [10000, 5000, 2350, 1543][index])) * 100).toFixed(1)}% drop-off\n                        </span>\n                      </div>\n                    )}\n                  </motion.div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Traffic Sources</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Visitor sources breakdown\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n                            <div className=\"space-y-6\">\n                <div className=\"flex justify-center\">\n                  <div className=\"relative w-48 h-48\">\n                    <svg viewBox=\"0 0 200 200\" className=\"transform -rotate-90\">\n                      {/* Organic - 40% */}\n                      <circle\n                        cx=\"100\"\n                        cy=\"100\"\n                        r=\"80\"\n                        fill=\"none\"\n                        stroke=\"#3b82f6\"\n                        strokeWidth=\"40\"\n                        strokeDasharray=\"201 502\"\n                        strokeDashoffset=\"0\"\n                        className=\"transition-all duration-500\"\n                      />\n                      {/* Direct - 25% */}\n                      <circle\n                        cx=\"100\"\n                        cy=\"100\"\n                        r=\"80\"\n                        fill=\"none\"\n                        stroke=\"#8b5cf6\"\n                        strokeWidth=\"40\"\n                        strokeDasharray=\"126 502\"\n                        strokeDashoffset=\"-201\"\n                        className=\"transition-all duration-500\"\n                      />\n                      {/* Social - 20% */}\n                      <circle\n                        cx=\"100\"\n                        cy=\"100\"\n                        r=\"80\"\n                        fill=\"none\"\n                        stroke=\"#10b981\"\n                        strokeWidth=\"40\"\n                        strokeDasharray=\"100 502\"\n                        strokeDashoffset=\"-327\"\n                        className=\"transition-all duration-500\"\n                      />\n                      {/* Referral - 15% */}\n                      <circle\n                        cx=\"100\"\n                        cy=\"100\"\n                        r=\"80\"\n                        fill=\"none\"\n                        stroke=\"#f59e0b\"\n                        strokeWidth=\"40\"\n                        strokeDasharray=\"75 502\"\n                        strokeDashoffset=\"-427\"\n                        className=\"transition-all duration-500\"\n                      />\n                    </svg>\n                    <div className=\"absolute inset-0 flex items-center justify-center\">\n                      <div className=\"text-center\">\n                        <p className={`text-2xl font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                          100%\n                        </p>\n                        <p className={`text-xs ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                          Total Traffic\n                        </p>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n                \n                <div className=\"space-y-3\">\n                  <motion.div\n                    initial={{ opacity: 0, x: -20 }}\n                    animate={{ opacity: 1, x: 0 }}\n                    transition={{ delay: 0.1 }}\n                    className=\"flex items-center justify-between\"\n                  >\n                    <div className=\"flex items-center gap-2\">\n                      <div className=\"w-3 h-3 rounded-full bg-blue-500\"></div>\n                      <span className={`text-sm ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>\n                        Organic Search\n                      </span>\n                    </div>\n                    <span className={`text-sm font-semibold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                      40%\n                    </span>\n                  </motion.div>\n                  \n                  <motion.div\n                    initial={{ opacity: 0, x: -20 }}\n                    animate={{ opacity: 1, x: 0 }}\n                    transition={{ delay: 0.2 }}\n                    className=\"flex items-center justify-between\"\n                  >\n                    <div className=\"flex items-center gap-2\">\n                      <div className=\"w-3 h-3 rounded-full bg-purple-500\"></div>\n                      <span className={`text-sm ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>\n                        Direct Traffic\n                      </span>\n                    </div>\n                    <span className={`text-sm font-semibold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                      25%\n                    </span>\n                  </motion.div>\n                  \n                  <motion.div\n                    initial={{ opacity: 0, x: -20 }}\n                    animate={{ opacity: 1, x: 0 }}\n                    transition={{ delay: 0.3 }}\n                    className=\"flex items-center justify-between\"\n                  >\n                    <div className=\"flex items-center gap-2\">\n                      <div className=\"w-3 h-3 rounded-full bg-green-500\"></div>\n                      <span className={`text-sm ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>\n                        Social Media\n                      </span>\n                    </div>\n                    <span className={`text-sm font-semibold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                      20%\n                    </span>\n                  </motion.div>\n                  \n                  <motion.div\n                    initial={{ opacity: 0, x: -20 }}\n                    animate={{ opacity: 1, x: 0 }}\n                    transition={{ delay: 0.4 }}\n                    className=\"flex items-center justify-between\"\n                  >\n                    <div className=\"flex items-center gap-2\">\n                      <div className=\"w-3 h-3 rounded-full bg-amber-500\"></div>\n                      <span className={`text-sm ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>\n                        Referral Links\n                      </span>\n                    </div>\n                    <span className={`text-sm font-semibold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                      15%\n                    </span>\n                  </motion.div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Recent Activity</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Latest system events\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"max-h-[400px] overflow-y-auto space-y-4 pr-2\">\n                {mockActivityData.map((activity, index) => {\n                  const Icon = getActivityIcon(activity.type);\n                  const colorClass = getActivityColor(activity.type, isDarkMode);\n                  \n                  return (\n                    <motion.div\n                      key={activity.id}\n                      initial={{ opacity: 0, x: -20 }}\n                      animate={{ opacity: 1, x: 0 }}\n                      transition={{ delay: index * 0.05 }}\n                      className={`flex items-start gap-3 p-3 rounded-lg transition-colors ${\n                        isDarkMode ? 'hover:bg-gray-700/50' : 'hover:bg-gray-50'\n                      }`}\n                    >\n                      <div className={`p-2 rounded-full ${\n                        isDarkMode ? 'bg-gray-700' : 'bg-gray-100'\n                      }`}>\n                        <Icon className={`h-4 w-4 ${colorClass}`} />\n                      </div>\n                      \n                      <div className=\"flex-1 min-w-0\">\n                        <p className={`text-sm ${\n                          isDarkMode ? 'text-gray-200' : 'text-gray-900'\n                        }`}>\n                          {activity.message}\n                        </p>\n                        <p className={`text-xs mt-1 ${\n                          isDarkMode ? 'text-gray-500' : 'text-gray-500'\n                        }`}>\n                          {activity.timestamp}\n                        </p>\n                      </div>\n                    </motion.div>\n                  );\n                })}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}",
    "error": null,
    "elapsed_time": 74.33630800247192,
    "success": true
  }
}