{
  "prompt_id": "dashboard",
  "prompt_name": "Analytics Dashboard",
  "mode": "parallel",
  "run_number": 2,
  "timestamp": "2025-10-13T19:43:42.271775",
  "response_time": 89.37174892425537,
  "total_tokens": null,
  "response_content": "import { useState, useCallback } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Moon, Sun, RefreshCw } from 'lucide-react';\ninterface FunnelStage {\n  label: string;\n  value: number;\n  color: string;\n}\n\nconst mockFunnelData: FunnelStage[] = [\n  { label: 'Visitors', value: 10000, color: 'bg-blue-500' },\n  { label: 'Sign Ups', value: 5000, color: 'bg-indigo-500' },\n  { label: 'Active Users', value: 2350, color: 'bg-purple-500' },\n  { label: 'Paying Customers', value: 1543, color: 'bg-pink-500' },\n  { label: 'Retained', value: 980, color: 'bg-rose-500' }\n];\nimport { ArrowUpDown, ArrowUp, ArrowDown } from 'lucide-react';\nimport { Badge } from '@/components/ui/badge';\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from '@/components/ui/table';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\nimport { BarChart3 } from 'lucide-react';\nimport { motion } from 'framer-motion';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';\nimport { PieChart, Pie, Cell } from 'recharts';\nimport { TrendingUp, TrendingDown, DollarSign, Users, ShoppingCart, Target }, Bell, CheckCircle, AlertCircle, Info from 'lucide-react';\nimport { motion } from 'framer-motion';\n\n\ninterface MetricData {\n  id: string;\n  label: string;\n  value: number;\n  change: number;\n  trend: 'up' | 'down';\n}\n\ninterface ChartDataPoint {\n  date: string;\n  revenue: number;\n  users: number;\n  orders: number;\n}\n\ninterface TableRow {\n  id: string;\n  product: string;\n  sales: number;\n  revenue: number;\n  status: 'active' | 'pending' | 'inactive';\n}\n\nconst mockMetrics: MetricData[] = [\n  { id: '1', label: 'Total Revenue', value: 45231, change: 12.5, trend: 'up' },\n  { id: '2', label: 'Active Users', value: 2350, change: 8.2, trend: 'up' },\n  { id: '3', label: 'Total Orders', value: 1543, change: -3.1, trend: 'down' },\n  { id: '4', label: 'Conversion Rate', value: 3.24, change: 5.7, trend: 'up' }\n];\n\nconst mockChartData: ChartDataPoint[] = [\n  { date: '2024-01-01', revenue: 12000, users: 450, orders: 230 },\n  { date: '2024-01-02', revenue: 15000, users: 520, orders: 280 },\n  { date: '2024-01-03', revenue: 13500, users: 490, orders: 250 },\n  { date: '2024-01-04', revenue: 18000, users: 610, orders: 320 },\n  { date: '2024-01-05', revenue: 16500, users: 580, orders: 295 },\n  { date: '2024-01-06', revenue: 20000, users: 680, orders: 360 },\n  { date: '2024-01-07', revenue: 22000, users: 720, orders: 390 }\n];\n\nconst mockTableData: TableRow[] = [\n  { id: '1', product: 'Premium Plan', sales: 234, revenue: 23400, status: 'active' },\n  { id: '2', product: 'Basic Plan', sales: 567, revenue: 11340, status: 'active' },\n  { id: '3', product: 'Enterprise Plan', sales: 89, revenue: 17800, status: 'active' },\n  { id: '4', product: 'Starter Plan', sales: 432, revenue: 4320, status: 'pending' },\n  { id: '5', product: 'Pro Plan', sales: 156, revenue: 15600, status: 'inactive' }\n];\n\ninterface ActivityEvent {\n  id: string;\n  type: 'success' | 'warning' | 'info' | 'error';\n  message: string;\n  timestamp: string;\n}\n\nconst mockActivityData: ActivityEvent[] = [\n  { id: '1', type: 'success', message: 'New order #1234 completed', timestamp: '2 minutes ago' },\n  { id: '2', type: 'info', message: 'User John Doe logged in', timestamp: '5 minutes ago' },\n  { id: '3', type: 'success', message: 'Payment processed successfully', timestamp: '12 minutes ago' },\n  { id: '4', type: 'warning', message: 'Low stock alert for Product A', timestamp: '18 minutes ago' },\n  { id: '5', type: 'info', message: 'New user registration', timestamp: '25 minutes ago' },\n  { id: '6', type: 'success', message: 'Report generated successfully', timestamp: '32 minutes ago' },\n  { id: '7', type: 'error', message: 'Failed login attempt detected', timestamp: '45 minutes ago' },\n  { id: '8', type: 'info', message: 'System backup completed', timestamp: '1 hour ago' }\n];\nconst mockTrafficData = [\n  { name: 'Organic Search', value: 4200, color: '#3b82f6' },\n  { name: 'Direct', value: 2800, color: '#10b981' },\n  { name: 'Social Media', value: 1900, color: '#f59e0b' },\n  { name: 'Referral', value: 1200, color: '#8b5cf6' },\n  { name: 'Email', value: 850, color: '#ec4899' }\n];\n\nconst UserAreaChart = ({ data, isDarkMode }: { data: ChartDataPoint[], isDarkMode: boolean }) => {\n  const [hoveredPoint, setHoveredPoint] = useState<number | null>(null);\n  \n  const maxUsers = Math.max(...data.map(d => d.users));\n  const minUsers = Math.min(...data.map(d => d.users));\n  const range = maxUsers - minUsers;\n  const padding = range * 0.1;\n  \n  const chartHeight = 200;\n  const chartWidth = 100;\n  \n  const points = data.map((point, index) => ({\n    x: (index / (data.length - 1)) * chartWidth,\n    y: chartHeight - ((point.users - minUsers + padding) / (range + 2 * padding)) * chartHeight,\n    users: point.users,\n    date: point.date\n  }));\n  \n  const pathData = points.map((p, i) => \n    `${i === 0 ? 'M' : 'L'} ${p.x} ${p.y}`\n  ).join(' ');\n  \n  const areaPath = `${pathData} L ${chartWidth} ${chartHeight} L 0 ${chartHeight} Z`;\n  \n  return (\n    <div className=\"relative w-full h-[200px]\">\n      <svg\n        viewBox={`0 0 ${chartWidth} ${chartHeight}`}\n        className=\"w-full h-full\"\n        preserveAspectRatio=\"none\"\n      >\n        <defs>\n          <linearGradient id=\"userGradient\" x1=\"0%\" y1=\"0%\" x2=\"0%\" y2=\"100%\">\n            <stop offset=\"0%\" stopColor=\"#3b82f6\" stopOpacity=\"0.6\" />\n            <stop offset=\"50%\" stopColor=\"#3b82f6\" stopOpacity=\"0.3\" />\n            <stop offset=\"100%\" stopColor=\"#3b82f6\" stopOpacity=\"0.05\" />\n          </linearGradient>\n        </defs>\n        \n        <motion.path\n          d={areaPath}\n          fill=\"url(#userGradient)\"\n          initial={{ opacity: 0 }}\n          animate={{ opacity: 1 }}\n          transition={{ duration: 0.5 }}\n        />\n        \n        <motion.path\n          d={pathData}\n          fill=\"none\"\n          stroke=\"#3b82f6\"\n          strokeWidth=\"0.5\"\n          initial={{ pathLength: 0 }}\n          animate={{ pathLength: 1 }}\n          transition={{ duration: 1, ease: \"easeInOut\" }}\n        />\n        \n        {points.map((point, index) => (\n          <g key={index}>\n            <motion.circle\n              cx={point.x}\n              cy={point.y}\n              r={hoveredPoint === index ? \"1.5\" : \"1\"}\n              fill=\"#3b82f6\"\n              initial={{ scale: 0 }}\n              animate={{ scale: 1 }}\n              transition={{ delay: index * 0.1, duration: 0.3 }}\n              onMouseEnter={() => setHoveredPoint(index)}\n              onMouseLeave={() => setHoveredPoint(null)}\n              className=\"cursor-pointer\"\n              style={{ transformOrigin: `${point.x}px ${point.y}px` }}\n            />\n            \n            {hoveredPoint === index && (\n              <g>\n                <motion.rect\n                  x={point.x - 15}\n                  y={point.y - 25}\n                  width=\"30\"\n                  height=\"20\"\n                  rx=\"2\"\n                  fill={isDarkMode ? '#1f2937' : '#ffffff'}\n                  stroke={isDarkMode ? '#374151' : '#e5e7eb'}\n                  strokeWidth=\"0.3\"\n                  initial={{ opacity: 0, scale: 0.8 }}\n                  animate={{ opacity: 1, scale: 1 }}\n                  transition={{ duration: 0.2 }}\n                />\n                <motion.text\n                  x={point.x}\n                  y={point.y - 15}\n                  textAnchor=\"middle\"\n                  fontSize=\"4\"\n                  fill={isDarkMode ? '#ffffff' : '#000000'}\n                  fontWeight=\"600\"\n                  initial={{ opacity: 0 }}\n                  animate={{ opacity: 1 }}\n                  transition={{ duration: 0.2 }}\n                >\n                  {point.users}\n                </motion.text>\n                <motion.text\n                  x={point.x}\n                  y={point.y - 10}\n                  textAnchor=\"middle\"\n                  fontSize=\"3\"\n                  fill={isDarkMode ? '#9ca3af' : '#6b7280'}\n                  initial={{ opacity: 0 }}\n                  animate={{ opacity: 1 }}\n                  transition={{ duration: 0.2 }}\n                >\n                  users\n                </motion.text>\n              </g>\n            )}\n          </g>\n        ))}\n      </svg>\n      \n      <div className=\"flex justify-between mt-4 px-2\">\n        {data.map((point, index) => (\n          index % Math.ceil(data.length / 4) === 0 && (\n            <span\n              key={index}\n              className={`text-xs ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}\n            >\n              {new Date(point.date).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n            </span>\n          )\n        ))}\n      </div>\n    </div>\n  );\n};\n\nconst FunnelChart = ({ data, isDarkMode }: { data: FunnelStage[], isDarkMode: boolean }) => {\n  const maxValue = data[0]?.value || 1;\n\n  return (\n    <div className=\"space-y-4\">\n      {data.map((stage, index) => {\n        const percentage = ((stage.value / maxValue) * 100).toFixed(1);\n        const width = (stage.value / maxValue) * 100;\n        const dropOffRate = index > 0 \n          ? (((data[index - 1].value - stage.value) / data[index - 1].value) * 100).toFixed(1)\n          : null;\n\n        return (\n          <div key={stage.label} className=\"space-y-2\">\n            <div className=\"flex items-center justify-between text-sm\">\n              <span className={`font-medium ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>\n                {stage.label}\n              </span>\n              <div className=\"flex items-center gap-3\">\n                {dropOffRate && (\n                  <span className={`text-xs ${isDarkMode ? 'text-red-400' : 'text-red-600'}`}>\n                    -{dropOffRate}% drop\n                  </span>\n                )}\n                <span className={`font-semibold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                  {stage.value.toLocaleString()}\n                </span>\n              </div>\n            </div>\n            \n            <div className=\"relative\">\n              <div \n                className={`h-12 rounded-lg transition-all duration-500 flex items-center justify-center ${stage.color} bg-opacity-80 hover:bg-opacity-100`}\n                style={{ width: `${width}%`, minWidth: '120px' }}\n              >\n                <span className=\"text-white font-semibold text-sm\">\n                  {percentage}%\n                </span>\n              </div>\n            </div>\n          </div>\n        );\n      })}\n      \n      <div className={`mt-6 pt-4 border-t ${isDarkMode ? 'border-gray-700' : 'border-gray-200'}`}>\n        <div className=\"flex items-center justify-between text-sm\">\n          <span className={isDarkMode ? 'text-gray-400' : 'text-gray-600'}>\n            Overall Conversion Rate\n          </span>\n          <span className={`font-bold text-lg ${isDarkMode ? 'text-green-400' : 'text-green-600'}`}>\n            {((data[data.length - 1].value / data[0].value) * 100).toFixed(1)}%\n          </span>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default function AnalyticsDashboard() {\n  type SortField = 'product' | 'sales' | 'revenue' | 'status';\n  type SortDirection = 'asc' | 'desc' | null;\n  const [sortField, setSortField] = useState<SortField | null>(null);\n  const [sortDirection, setSortDirection] = useState<SortDirection>(null);\n  const [isDarkMode, setIsDarkMode] = useState(false);\n  const [metrics, setMetrics] = useState<MetricData[]>(mockMetrics);\n  const [chartData, setChartData] = useState<ChartDataPoint[]>(mockChartData);\n  const [tableData, setTableData] = useState<TableRow[]>(mockTableData);\n  const [isRefreshing, setIsRefreshing] = useState(false);\n  const [funnelData, setFunnelData] = useState<FunnelStage[]>(mockFunnelData);\n\n  const toggleDarkMode = useCallback(() => {\n    setIsDarkMode(prev => !prev);\n  }, []);\n\n  const getMaxOrders = useCallback(() => {\n    return Math.max(...chartData.map(d => d.orders));\n  }, [chartData]);\n  const handleRefresh = useCallback(() => {\n    setIsRefreshing(true);\n    \n    setTimeout(() => {\n      // Generate updated mock metrics with random variations\n      const updatedMetrics = mockMetrics.map(metric => ({\n        ...metric,\n        value: metric.value + Math.floor(Math.random() * 200 - 100),\n        change: parseFloat((Math.random() * 20 - 5).toFixed(1)),\n        trend: Math.random() > 0.5\n ? 'up' as const : 'down' as const\n      }));\n\n      // Generate updated chart data with random variations\n      const updatedChartData = mockChartData.map(point => ({\n        ...point,\n        revenue: point.revenue + Math.floor(Math.random() * 4000 - 2000),\n        users: point.users + Math.floor(Math.random() * 100 - 50),\n        orders: point.orders + Math.floor(Math.random() * 50 - 25)\n      }));\n\n      // Generate updated table data with random variations\n      const updatedTableData = mockTableData.map(row => ({\n        ...row,\n        sales: row.sales + Math.floor(Math.random() * 40 - 20),\n        revenue: row.revenue + Math.floor(Math.random() * 2000 - 1000)\n      }));\n\n      // Generate updated funnel data with random variations\n      const updatedFunnelData = mockFunnelData.map((stage, index) => ({\n        ...stage,\n        value: stage.value + Math.floor(Math.random() * 200 - 100)\n      }));\n\n      setMetrics(updatedMetrics);\n      setChartData(updatedChartData);\n      setTableData(updatedTableData);\n      setFunnelData(updatedFunnelData);\n      setIsRefreshing(false);\n    }, 1500)</parameter>\n</invoke>e: row.revenue + Math.floor(Math.random() * 2000 - 1000)\n      }));\n\n      setMetrics(updatedMetrics);\n      setChartData(updatedChartData);\n      setTableData(updatedTableData);\n      setIsRefreshing(false);\n    }, 1500);\n  }, []);\n\n  const handleSort = useCallback((field: SortField) => {\n    if (sortField === field) {\n      if (sortDirection === 'asc') {\n        setSortDirection('desc');\n      } else if (sortDirection === 'desc') {\n        setSortDirection(null);\n        setSortField(null);\n      }\n    } else {\n      setSortField(field);\n      setSortDirection('asc');\n    }\n  }, [sortField, sortDirection]);\n\n  const getSortedTableData = useCallback(() => {\n    if (!sortField || !sortDirection) {\n      return tableData;\n    }\n\n    return [...tableData].sort((a, b) => {\n      let aValue = a[sortField];\n      let bValue = b[sortField];\n\n      if (typeof aValue === 'string') {\n        aValue = aValue.toLowerCase();\n        bValue = (bValue as string).toLowerCase();\n      }\n\n      if (aValue < bValue) {\n        return sortDirection === 'asc' ? -1 : 1;\n      }\n      if (aValue > bValue) {\n        return sortDirection === 'asc' ? 1 : -1;\n      }\n      return 0;\n    });\n  }, [tableData, sortField, sortDirection]);\n\n  const formatCurrency = (value: number) => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0\n    }).format(value);\n  };\n\n  const formatNumber = (value: number) => {\n    return new Intl.NumberFormat('en-US').format(value);\n  };\n\n  const getStatusBadgeVariant = (status: TableRow['status']) => {\n    switch (status) {\n      case 'active':\n        return 'default';\n      case 'pending':\n        return 'secondary';\n      case 'inactive':\n        return 'outline';\n      default:\n        return 'default';\n    }\n  };\n\n  const SortIcon = ({ field }: { field: SortField }) => {\n    if (sortField !== field) {\n      return <ArrowUpDown className=\"ml-2 h-4 w-4\" />;\n    }\n    if (sortDirection === 'asc') {\n      return <ArrowUp className=\"ml-2 h-4 w-4\" />;\n    }\n    return <ArrowDown className=\"ml-2 h-4 w-4\" />;\n</parameter>\n</invoke> ? 'up' as const : 'down' as const\n      }));\n\n      // Generate updated chart data with random variations\n      const updatedChartData = mockChartData.map(point => ({\n        ...point,\n        revenue: point.revenue + Math.floor(Math.random() * 4000 - 2000),\n        users: point.users + Math.floor(Math.random() * 100 - 50),\n        orders: point.orders + Math.floor(Math.random() * 50 - 25)\n      }));\n\n      // Generate updated table data with random variations\n      const updatedTableData = mockTableData.map(row => ({\n        ...row,\n        sales: row.sales + Math.floor(Math.random() * 40 - 20),\n        revenue: row.revenue + Math.floor(Math.random() * 2000 - 1000)\n      }));\n\n      setMetrics(updatedMetrics);\n      setChartData(updatedChartData);\n      setTableData(updatedTableData);\n      setIsRefreshing(false);\n    }, 1500);\n  }, []);\n\n  return (\n    <div className={`min-h-screen transition-colors duration-300 ${isDarkMode ? 'dark bg-gray-900' : 'bg-gray-50'}`}>\n      <div className=\"container mx-auto p-4 md:p-6 lg:p-8\">\n        <div className=\"flex flex-col md:flex-row md:items-center md:justify-between mb-8 gap-4\">\n          <div>\n            <h1 className={`text-3xl md:text-4xl font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n              Analytics Dashboard\n            </h1>\n            <p className={`mt-2 ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n              Real-time insights and performance metrics\n            </p>\n          </div>\n          \n          <div className=\"flex items-center gap-3\">\n            <Button\n              variant=\"outline\"\n              size=\"icon\"\n              onClick={toggleDarkMode}\n              className={isDarkMode ? 'border-gray-700 hover:bg-gray-800' : ''}\n            >\n              {isDarkMode ? <Sun className=\"h-5 w-5\" /> : <Moon className=\"h-5 w-5\" />}\n            </Button>\n            \n            <Button\n              variant=\"outline\"\n              onClick={handleRefresh}\n              disabled={isRefreshing}\n              className={isDarkMode ? 'border-gray-700 hover:bg-gray-800' : ''}\n            >\n              <RefreshCw className={`h-4 w-4 mr-2 ${isRefreshing ? 'animate-spin' : ''}`} />\n              Refresh\n            </Button>\n          </div>\n        </div>\n\n        <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 md:gap-6 mb-8\">\n          {metrics.map((metric, index) => {\n            const Icon = metric.label === 'Total Revenue' ? DollarSign :\n                        metric.label === 'Active Users' ? Users :\n                        metric.label === 'Total Orders' ? ShoppingCart :\n                        Target;\n            \n            return (\n              <motion.div\n                key={metric.id}\n                initial={{ opacity: 0, y: 20 }}\n                animate={{ opacity: 1, y: 0 }}\n                transition={{ duration: 0.4, delay: index * 0.1 }}\n              >\n                <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n                  <CardHeader className=\"flex flex-row items-center justify-between pb-2\">\n                    <CardTitle className={`text-sm font-medium ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                      {metric.label}\n                    </CardTitle>\n                    <div className={`p-2 rounded-lg ${isDarkMode ? 'bg-gray-700' : 'bg-gray-100'}`}>\n                      <Icon className={`h-4 w-4 ${isDarkMode ? 'text-gray-300' : 'text-gray-600'}`} />\n                    </div>\n                  </CardHeader>\n                  <CardContent>\n                    <div className={`text-2xl font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                      {metric.label === 'Total Revenue' ? `$${metric.value.toLocaleString()}` :\n                       metric.label === 'Conversion Rate' ? `${metric.value}%` :\n                       metric.value.toLocaleString()}\n                    </div>\n                    <div className=\"flex items-center mt-2\">\n                      {metric.trend === 'up' ? (\n                        <TrendingUp className=\"h-4 w-4 text-green-500 mr-1\" />\n                      ) : (\n                        <TrendingDown className=\"h-4 w-4 text-red-500 mr-1\" />\n                      )}\n                      <span className={`text-sm font-medium ${metric.trend === 'up' ? 'text-green-500' : 'text-red-500'}`}>\n                        {metric.change > 0 ? '+' : ''}{metric.change}%\n                      </span>\n                      <span className={`text-sm ml-2 ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                        vs last period\n                      </span>\n                    </div>\n                  </CardContent>\n                </Card>\n              </motion.div>\n            );\n          })}\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6 mb-8\">\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Revenue Overview</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Daily revenue trends for the past week\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"h-[300px] w-full\">\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <LineChart\n                    data={chartData}\n                    margin={{ top: 5, right: 10, left: 0, bottom: 5 }}\n                  >\n                    <CartesianGrid \n                      strokeDasharray=\"3 3\" \n                      stroke={isDarkMode ? '#374151' : '#e5e7eb'}\n                    />\n                    <XAxis \n                      dataKey=\"date\" \n                      stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                      fontSize={12}\n                      tickFormatter={(value) => new Date(value).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n                    />\n                    <YAxis \n                      stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                      fontSize={12}\n                      tickFormatter={(value) => `$${(value / 1000).toFixed(0)}k`}\n                    />\n                    <Tooltip \n                      contentStyle={{\n                        backgroundColor: isDarkMode ? '#1f2937' : '#ffffff',\n                        border: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\n                        borderRadius: '8px',\n                        color: isDarkMode ? '#ffffff' : '#000000'\n                      }}\n                      labelFormatter={(value) => new Date(value).toLocaleDateString('en-US', { month: 'long', day: 'numeric', year: 'numeric' })}\n                      formatter={(value: number) => [`$${value.toLocaleString()}`, 'Revenue']}\n                    />\n                    <Line \n                      type=\"monotone\" \n                      dataKey=\"revenue\" \n                      stroke=\"#3b82f6\" \n                      strokeWidth={2}\n                      dot={{ fill: '#3b82f6', r: 4 }}\n                      activeDot={{ r: 6, fill: '#2563eb' }}\n                    />\n                  </LineChart>\n                </ResponsiveContainer>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>User Activity</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Active users and engagement metrics\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <UserAreaChart data={chartData} isDarkMode={isDarkMode} />\n            </CardContent>\n          </Card>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6 mb-8\">\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Orders Distribution</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Order volume by category\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {chartData.map((dataPoint, index) => {\n                  const maxOrders = getMaxOrders();\n                  const percentage = (dataPoint.orders / maxOrders) * 100;\n                  const barColor = percentage > 75 ? 'bg-green-500' : percentage > 50 ? 'bg-blue-500' : percentage > 25 ? 'bg-yellow-500' : 'bg-red-500';\n                  \n                  return (\n                    <div key={index} className=\"space-y-2\">\n                      <div className=\"flex items-center justify-between text-sm\">\n                        <span className={isDarkMode ? 'text-gray-300' : 'text-gray-700'}>\n                          {new Date(dataPoint.date).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n                        </span>\n                        <span className={`font-semibold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                          {dataPoint.orders}\n                        </span>\n                      </div>\n                      <div className={`w-full h-8 rounded-full overflow-hidden ${isDarkMode ? 'bg-gray-700' : 'bg-gray-200'}`}>\n                        <div\n                          className={`h-full ${barColor} transition-all duration-500 ease-out flex items-center justify-end pr-3`}\n                          style={{ width: `${percentage}%` }}\n                        >\n                          {percentage > 20 && (\n                            <BarChart3 className=\"h-4 w-4 text-white\" />\n                          )}\n                        </div>\n                      </div>\n                    </div>\n                  );\n                })}\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className={`lg:col-span-2 ${isDarkMode ? 'bg-gray-800 border-gray-700' : ''}`}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Performance Comparison</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Multi-metric comparison over time\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <ResponsiveContainer width=\"100%\" height={300}>\n                <LineChart data={chartData}>\n                  <CartesianGrid strokeDasharray=\"3 3\" stroke={isDarkMode ? '#374151' : '#e5e7eb'} />\n                  <XAxis \n                    dataKey=\"date\" \n                    stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                    tick={{ fill: isDarkMode ? '#9ca3af' : '#6b7280' }}\n                    tickFormatter={(value) => new Date(value).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n                  />\n                  <YAxis \n                    stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                    tick={{ fill: isDarkMode ? '#9ca3af' : '#6b7280' }}\n                  />\n                  <Tooltip \n                    contentStyle={{\n                      backgroundColor: isDarkMode ? '#1f2937' : '#ffffff',\n                      border: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\n                      borderRadius: '8px',\n                      color: isDarkMode ? '#ffffff' : '#000000'\n                    }}\n                    labelFormatter={(value) => new Date(value).toLocaleDateString('en-US', { month: 'long', day: 'numeric', year: 'numeric' })}\n                  />\n                  <Legend \n                    wrapperStyle={{\n                      color: isDarkMode ? '#9ca3af' : '#6b7280'\n                    }}\n                  />\n                  <Line \n                    type=\"monotone\" \n                    dataKey=\"revenue\" \n                    stroke=\"#3b82f6\" \n                    strokeWidth={2}\n                    dot={{ fill: '#3b82f6', r: 4 }}\n                    activeDot={{ r: 6 }}\n                    name=\"Revenue ($)\"\n                  />\n                  <Line \n                    type=\"monotone\" \n                    dataKey=\"users\" \n                    stroke=\"#10b981\" \n                    strokeWidth={2}\n                    dot={{ fill: '#10b981', r: 4 }}\n                    activeDot={{ r: 6 }}\n                    name=\"Users\"\n                  />\n                  <Line \n                    type=\"monotone\" \n                    dataKey=\"orders\" \n                    stroke=\"#f59e0b\" \n                    strokeWidth={2}\n                    dot={{ fill: '#f59e0b', r: 4 }}\n                    activeDot={{ r: 6 }}\n                    name=\"Orders\"\n                  />\n                </LineChart>\n              </ResponsiveContainer>\n            </CardContent>\n          </Card>\n        </div>\n\n        <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n          <CardHeader>\n            <CardTitle className={isDarkMode ? 'text-white' : ''}>Top Products</CardTitle>\n            <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n              Best performing products by sales and revenue\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            {/* TODO:ProductTable Render responsive data table with sorting, status badges, and formatted numbers */}\n          </CardContent>\n        </Card>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mt-8\">\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Conversion Funnel</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                User journey and drop-off rates\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              {/* TODO:FunnelChart Render funnel visualization with percentages and stage labels */}\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Traffic Sources</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Visitor sources breakdown\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                <ResponsiveContainer width=\"100%\" height={200}>\n                  <PieChart>\n                    <Pie\n                      data={mockTrafficData}\n                      cx=\"50%\"\n                      cy=\"50%\"\n                      innerRadius={60}\n                      outerRadius={80}\n                      paddingAngle={2}\n                      dataKey=\"value\"\n                    >\n                      {mockTrafficData.map((entry, index) => (\n                        <Cell key={`cell-${index}`} fill={entry.color} />\n                      ))}\n                    </Pie>\n                    <Tooltip\n                      contentStyle={{\n                        backgroundColor: isDarkMode ? '#1f2937' : '#ffffff',\n                        border: isDarkMode ? '1px solid #374151' : '1px solid #e5e7eb',\n                        borderRadius: '6px',\n                        color: isDarkMode ? '#ffffff' : '#000000'\n                      }}\n                    />\n                  </PieChart>\n                </ResponsiveContainer>\n\n                <div className=\"space-y-2\">\n                  {mockTrafficData.map((source) => {\n                    const total = mockTrafficData.reduce((sum, item) => sum + item.value, 0);\n                    const percentage = ((source.value / total) * 100).toFixed(1);\n                    \n                    return (\n                      <div key={source.name} className=\"flex items-center justify-between\">\n                        <div className=\"flex items-center gap-2\">\n                          <div\n                            className=\"w-3 h-3 rounded-full\"\n                            style={{ backgroundColor: source.color }}\n                          />\n                          <span className={`text-sm ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>\n                            {source.name}\n                          </span>\n                        </div>\n                        <div className=\"flex items-center gap-2\">\n                          <span className={`text-sm font-medium ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                            {percentage}%\n                          </span>\n                          <span className={`text-sm ${isDarkMode ? 'text-gray-500' : 'text-gray-500'}`}>\n                            ({source.value.toLocaleString()})\n                          </span>\n                        </div>\n                      </div>\n                    );\n                  })}\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Recent Activity</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Latest system events\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-3 max-h-[400px] overflow-y-auto pr-2\">\n                {mockActivityData.map((activity, index) => {\n                  const getIcon = () => {\n                    switch (activity.type) {\n                      case 'success':\n                        return <CheckCircle className=\"h-5 w-5 text-green-500\" />;\n                      case 'warning':\n                        return <AlertCircle className=\"h-5 w-5 text-yellow-500\" />;\n                      case 'error':\n                        return <AlertCircle className=\"h-5 w-5 text-red-500\" />;\n                      case 'info':\n                        return <Info className=\"h-5 w-5 text-blue-500\" />;\n                      default:\n                        return <Bell className=\"h-5 w-5 text-gray-500\" />;\n                    }\n                  };\n\n                  const getBgColor = () => {\n                    if (isDarkMode) {\n                      switch (activity.type) {\n                        case 'success':\n                          return 'bg-green-500/10';\n                        case 'warning':\n                          return 'bg-yellow-500/10';\n                        case 'error':\n                          return 'bg-red-500/10';\n                        case 'info':\n                          return 'bg-blue-500/10';\n                        default:\n                          return 'bg-gray-500/10';\n                      }\n                    } else {\n                      switch (activity.type) {\n                        case 'success':\n                          return 'bg-green-50';\n                        case 'warning':\n                          return 'bg-yellow-50';\n                        case 'error':\n                          return 'bg-red-50';\n                        case 'info':\n                          return 'bg-blue-50';\n                        default:\n                          return 'bg-gray-50';\n                      }\n                    }\n                  };\n\n                  return (\n                    <motion.div\n                      key={activity.id}\n                      initial={{ opacity: 0, x: -20 }}\n                      animate={{ opacity: 1, x: 0 }}\n                      transition={{ delay: index * 0.05 }}\n                      className={`flex items-start gap-3 p-3 rounded-lg ${getBgColor()} transition-colors`}\n                    >\n                      <div className=\"flex-shrink-0 mt-0.5\">\n                        {getIcon()}\n                      </div>\n                      <div className=\"flex-1 min-w-0\">\n                        <p className={`text-sm font-medium ${isDarkMode ? 'text-gray-200' : 'text-gray-900'}`}>\n                          {activity.message}\n                        </p>\n                        <p className={`text-xs mt-1 ${isDarkMode ? 'text-gray-500' : 'text-gray-500'}`}>\n                          {activity.timestamp}\n                        </p>\n                      </div>\n                    </motion.div>\n                  );\n                })}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}",
  "error": null,
  "overall_score": 47,
  "code_quality_score": 12,
  "architecture_score": 10,
  "performance_score": 14,
  "accessibility_score": 11,
  "metadata": {
    "document_id": "eval_room_cd95299c06fe",
    "prompt_category": "intermediate",
    "prompt_complexity": 6.0
  },
  "raw_response": {
    "document_id": "eval_room_cd95299c06fe",
    "mode": "parallel",
    "prompt": "Generate an analytics dashboard page with charts, data tables, real-time updates, dark mode, and responsive design",
    "content": "import { useState, useCallback } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Moon, Sun, RefreshCw } from 'lucide-react';\ninterface FunnelStage {\n  label: string;\n  value: number;\n  color: string;\n}\n\nconst mockFunnelData: FunnelStage[] = [\n  { label: 'Visitors', value: 10000, color: 'bg-blue-500' },\n  { label: 'Sign Ups', value: 5000, color: 'bg-indigo-500' },\n  { label: 'Active Users', value: 2350, color: 'bg-purple-500' },\n  { label: 'Paying Customers', value: 1543, color: 'bg-pink-500' },\n  { label: 'Retained', value: 980, color: 'bg-rose-500' }\n];\nimport { ArrowUpDown, ArrowUp, ArrowDown } from 'lucide-react';\nimport { Badge } from '@/components/ui/badge';\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from '@/components/ui/table';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\nimport { BarChart3 } from 'lucide-react';\nimport { motion } from 'framer-motion';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';\nimport { PieChart, Pie, Cell } from 'recharts';\nimport { TrendingUp, TrendingDown, DollarSign, Users, ShoppingCart, Target }, Bell, CheckCircle, AlertCircle, Info from 'lucide-react';\nimport { motion } from 'framer-motion';\n\n\ninterface MetricData {\n  id: string;\n  label: string;\n  value: number;\n  change: number;\n  trend: 'up' | 'down';\n}\n\ninterface ChartDataPoint {\n  date: string;\n  revenue: number;\n  users: number;\n  orders: number;\n}\n\ninterface TableRow {\n  id: string;\n  product: string;\n  sales: number;\n  revenue: number;\n  status: 'active' | 'pending' | 'inactive';\n}\n\nconst mockMetrics: MetricData[] = [\n  { id: '1', label: 'Total Revenue', value: 45231, change: 12.5, trend: 'up' },\n  { id: '2', label: 'Active Users', value: 2350, change: 8.2, trend: 'up' },\n  { id: '3', label: 'Total Orders', value: 1543, change: -3.1, trend: 'down' },\n  { id: '4', label: 'Conversion Rate', value: 3.24, change: 5.7, trend: 'up' }\n];\n\nconst mockChartData: ChartDataPoint[] = [\n  { date: '2024-01-01', revenue: 12000, users: 450, orders: 230 },\n  { date: '2024-01-02', revenue: 15000, users: 520, orders: 280 },\n  { date: '2024-01-03', revenue: 13500, users: 490, orders: 250 },\n  { date: '2024-01-04', revenue: 18000, users: 610, orders: 320 },\n  { date: '2024-01-05', revenue: 16500, users: 580, orders: 295 },\n  { date: '2024-01-06', revenue: 20000, users: 680, orders: 360 },\n  { date: '2024-01-07', revenue: 22000, users: 720, orders: 390 }\n];\n\nconst mockTableData: TableRow[] = [\n  { id: '1', product: 'Premium Plan', sales: 234, revenue: 23400, status: 'active' },\n  { id: '2', product: 'Basic Plan', sales: 567, revenue: 11340, status: 'active' },\n  { id: '3', product: 'Enterprise Plan', sales: 89, revenue: 17800, status: 'active' },\n  { id: '4', product: 'Starter Plan', sales: 432, revenue: 4320, status: 'pending' },\n  { id: '5', product: 'Pro Plan', sales: 156, revenue: 15600, status: 'inactive' }\n];\n\ninterface ActivityEvent {\n  id: string;\n  type: 'success' | 'warning' | 'info' | 'error';\n  message: string;\n  timestamp: string;\n}\n\nconst mockActivityData: ActivityEvent[] = [\n  { id: '1', type: 'success', message: 'New order #1234 completed', timestamp: '2 minutes ago' },\n  { id: '2', type: 'info', message: 'User John Doe logged in', timestamp: '5 minutes ago' },\n  { id: '3', type: 'success', message: 'Payment processed successfully', timestamp: '12 minutes ago' },\n  { id: '4', type: 'warning', message: 'Low stock alert for Product A', timestamp: '18 minutes ago' },\n  { id: '5', type: 'info', message: 'New user registration', timestamp: '25 minutes ago' },\n  { id: '6', type: 'success', message: 'Report generated successfully', timestamp: '32 minutes ago' },\n  { id: '7', type: 'error', message: 'Failed login attempt detected', timestamp: '45 minutes ago' },\n  { id: '8', type: 'info', message: 'System backup completed', timestamp: '1 hour ago' }\n];\nconst mockTrafficData = [\n  { name: 'Organic Search', value: 4200, color: '#3b82f6' },\n  { name: 'Direct', value: 2800, color: '#10b981' },\n  { name: 'Social Media', value: 1900, color: '#f59e0b' },\n  { name: 'Referral', value: 1200, color: '#8b5cf6' },\n  { name: 'Email', value: 850, color: '#ec4899' }\n];\n\nconst UserAreaChart = ({ data, isDarkMode }: { data: ChartDataPoint[], isDarkMode: boolean }) => {\n  const [hoveredPoint, setHoveredPoint] = useState<number | null>(null);\n  \n  const maxUsers = Math.max(...data.map(d => d.users));\n  const minUsers = Math.min(...data.map(d => d.users));\n  const range = maxUsers - minUsers;\n  const padding = range * 0.1;\n  \n  const chartHeight = 200;\n  const chartWidth = 100;\n  \n  const points = data.map((point, index) => ({\n    x: (index / (data.length - 1)) * chartWidth,\n    y: chartHeight - ((point.users - minUsers + padding) / (range + 2 * padding)) * chartHeight,\n    users: point.users,\n    date: point.date\n  }));\n  \n  const pathData = points.map((p, i) => \n    `${i === 0 ? 'M' : 'L'} ${p.x} ${p.y}`\n  ).join(' ');\n  \n  const areaPath = `${pathData} L ${chartWidth} ${chartHeight} L 0 ${chartHeight} Z`;\n  \n  return (\n    <div className=\"relative w-full h-[200px]\">\n      <svg\n        viewBox={`0 0 ${chartWidth} ${chartHeight}`}\n        className=\"w-full h-full\"\n        preserveAspectRatio=\"none\"\n      >\n        <defs>\n          <linearGradient id=\"userGradient\" x1=\"0%\" y1=\"0%\" x2=\"0%\" y2=\"100%\">\n            <stop offset=\"0%\" stopColor=\"#3b82f6\" stopOpacity=\"0.6\" />\n            <stop offset=\"50%\" stopColor=\"#3b82f6\" stopOpacity=\"0.3\" />\n            <stop offset=\"100%\" stopColor=\"#3b82f6\" stopOpacity=\"0.05\" />\n          </linearGradient>\n        </defs>\n        \n        <motion.path\n          d={areaPath}\n          fill=\"url(#userGradient)\"\n          initial={{ opacity: 0 }}\n          animate={{ opacity: 1 }}\n          transition={{ duration: 0.5 }}\n        />\n        \n        <motion.path\n          d={pathData}\n          fill=\"none\"\n          stroke=\"#3b82f6\"\n          strokeWidth=\"0.5\"\n          initial={{ pathLength: 0 }}\n          animate={{ pathLength: 1 }}\n          transition={{ duration: 1, ease: \"easeInOut\" }}\n        />\n        \n        {points.map((point, index) => (\n          <g key={index}>\n            <motion.circle\n              cx={point.x}\n              cy={point.y}\n              r={hoveredPoint === index ? \"1.5\" : \"1\"}\n              fill=\"#3b82f6\"\n              initial={{ scale: 0 }}\n              animate={{ scale: 1 }}\n              transition={{ delay: index * 0.1, duration: 0.3 }}\n              onMouseEnter={() => setHoveredPoint(index)}\n              onMouseLeave={() => setHoveredPoint(null)}\n              className=\"cursor-pointer\"\n              style={{ transformOrigin: `${point.x}px ${point.y}px` }}\n            />\n            \n            {hoveredPoint === index && (\n              <g>\n                <motion.rect\n                  x={point.x - 15}\n                  y={point.y - 25}\n                  width=\"30\"\n                  height=\"20\"\n                  rx=\"2\"\n                  fill={isDarkMode ? '#1f2937' : '#ffffff'}\n                  stroke={isDarkMode ? '#374151' : '#e5e7eb'}\n                  strokeWidth=\"0.3\"\n                  initial={{ opacity: 0, scale: 0.8 }}\n                  animate={{ opacity: 1, scale: 1 }}\n                  transition={{ duration: 0.2 }}\n                />\n                <motion.text\n                  x={point.x}\n                  y={point.y - 15}\n                  textAnchor=\"middle\"\n                  fontSize=\"4\"\n                  fill={isDarkMode ? '#ffffff' : '#000000'}\n                  fontWeight=\"600\"\n                  initial={{ opacity: 0 }}\n                  animate={{ opacity: 1 }}\n                  transition={{ duration: 0.2 }}\n                >\n                  {point.users}\n                </motion.text>\n                <motion.text\n                  x={point.x}\n                  y={point.y - 10}\n                  textAnchor=\"middle\"\n                  fontSize=\"3\"\n                  fill={isDarkMode ? '#9ca3af' : '#6b7280'}\n                  initial={{ opacity: 0 }}\n                  animate={{ opacity: 1 }}\n                  transition={{ duration: 0.2 }}\n                >\n                  users\n                </motion.text>\n              </g>\n            )}\n          </g>\n        ))}\n      </svg>\n      \n      <div className=\"flex justify-between mt-4 px-2\">\n        {data.map((point, index) => (\n          index % Math.ceil(data.length / 4) === 0 && (\n            <span\n              key={index}\n              className={`text-xs ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}\n            >\n              {new Date(point.date).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n            </span>\n          )\n        ))}\n      </div>\n    </div>\n  );\n};\n\nconst FunnelChart = ({ data, isDarkMode }: { data: FunnelStage[], isDarkMode: boolean }) => {\n  const maxValue = data[0]?.value || 1;\n\n  return (\n    <div className=\"space-y-4\">\n      {data.map((stage, index) => {\n        const percentage = ((stage.value / maxValue) * 100).toFixed(1);\n        const width = (stage.value / maxValue) * 100;\n        const dropOffRate = index > 0 \n          ? (((data[index - 1].value - stage.value) / data[index - 1].value) * 100).toFixed(1)\n          : null;\n\n        return (\n          <div key={stage.label} className=\"space-y-2\">\n            <div className=\"flex items-center justify-between text-sm\">\n              <span className={`font-medium ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>\n                {stage.label}\n              </span>\n              <div className=\"flex items-center gap-3\">\n                {dropOffRate && (\n                  <span className={`text-xs ${isDarkMode ? 'text-red-400' : 'text-red-600'}`}>\n                    -{dropOffRate}% drop\n                  </span>\n                )}\n                <span className={`font-semibold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                  {stage.value.toLocaleString()}\n                </span>\n              </div>\n            </div>\n            \n            <div className=\"relative\">\n              <div \n                className={`h-12 rounded-lg transition-all duration-500 flex items-center justify-center ${stage.color} bg-opacity-80 hover:bg-opacity-100`}\n                style={{ width: `${width}%`, minWidth: '120px' }}\n              >\n                <span className=\"text-white font-semibold text-sm\">\n                  {percentage}%\n                </span>\n              </div>\n            </div>\n          </div>\n        );\n      })}\n      \n      <div className={`mt-6 pt-4 border-t ${isDarkMode ? 'border-gray-700' : 'border-gray-200'}`}>\n        <div className=\"flex items-center justify-between text-sm\">\n          <span className={isDarkMode ? 'text-gray-400' : 'text-gray-600'}>\n            Overall Conversion Rate\n          </span>\n          <span className={`font-bold text-lg ${isDarkMode ? 'text-green-400' : 'text-green-600'}`}>\n            {((data[data.length - 1].value / data[0].value) * 100).toFixed(1)}%\n          </span>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default function AnalyticsDashboard() {\n  type SortField = 'product' | 'sales' | 'revenue' | 'status';\n  type SortDirection = 'asc' | 'desc' | null;\n  const [sortField, setSortField] = useState<SortField | null>(null);\n  const [sortDirection, setSortDirection] = useState<SortDirection>(null);\n  const [isDarkMode, setIsDarkMode] = useState(false);\n  const [metrics, setMetrics] = useState<MetricData[]>(mockMetrics);\n  const [chartData, setChartData] = useState<ChartDataPoint[]>(mockChartData);\n  const [tableData, setTableData] = useState<TableRow[]>(mockTableData);\n  const [isRefreshing, setIsRefreshing] = useState(false);\n  const [funnelData, setFunnelData] = useState<FunnelStage[]>(mockFunnelData);\n\n  const toggleDarkMode = useCallback(() => {\n    setIsDarkMode(prev => !prev);\n  }, []);\n\n  const getMaxOrders = useCallback(() => {\n    return Math.max(...chartData.map(d => d.orders));\n  }, [chartData]);\n  const handleRefresh = useCallback(() => {\n    setIsRefreshing(true);\n    \n    setTimeout(() => {\n      // Generate updated mock metrics with random variations\n      const updatedMetrics = mockMetrics.map(metric => ({\n        ...metric,\n        value: metric.value + Math.floor(Math.random() * 200 - 100),\n        change: parseFloat((Math.random() * 20 - 5).toFixed(1)),\n        trend: Math.random() > 0.5\n ? 'up' as const : 'down' as const\n      }));\n\n      // Generate updated chart data with random variations\n      const updatedChartData = mockChartData.map(point => ({\n        ...point,\n        revenue: point.revenue + Math.floor(Math.random() * 4000 - 2000),\n        users: point.users + Math.floor(Math.random() * 100 - 50),\n        orders: point.orders + Math.floor(Math.random() * 50 - 25)\n      }));\n\n      // Generate updated table data with random variations\n      const updatedTableData = mockTableData.map(row => ({\n        ...row,\n        sales: row.sales + Math.floor(Math.random() * 40 - 20),\n        revenue: row.revenue + Math.floor(Math.random() * 2000 - 1000)\n      }));\n\n      // Generate updated funnel data with random variations\n      const updatedFunnelData = mockFunnelData.map((stage, index) => ({\n        ...stage,\n        value: stage.value + Math.floor(Math.random() * 200 - 100)\n      }));\n\n      setMetrics(updatedMetrics);\n      setChartData(updatedChartData);\n      setTableData(updatedTableData);\n      setFunnelData(updatedFunnelData);\n      setIsRefreshing(false);\n    }, 1500)</parameter>\n</invoke>e: row.revenue + Math.floor(Math.random() * 2000 - 1000)\n      }));\n\n      setMetrics(updatedMetrics);\n      setChartData(updatedChartData);\n      setTableData(updatedTableData);\n      setIsRefreshing(false);\n    }, 1500);\n  }, []);\n\n  const handleSort = useCallback((field: SortField) => {\n    if (sortField === field) {\n      if (sortDirection === 'asc') {\n        setSortDirection('desc');\n      } else if (sortDirection === 'desc') {\n        setSortDirection(null);\n        setSortField(null);\n      }\n    } else {\n      setSortField(field);\n      setSortDirection('asc');\n    }\n  }, [sortField, sortDirection]);\n\n  const getSortedTableData = useCallback(() => {\n    if (!sortField || !sortDirection) {\n      return tableData;\n    }\n\n    return [...tableData].sort((a, b) => {\n      let aValue = a[sortField];\n      let bValue = b[sortField];\n\n      if (typeof aValue === 'string') {\n        aValue = aValue.toLowerCase();\n        bValue = (bValue as string).toLowerCase();\n      }\n\n      if (aValue < bValue) {\n        return sortDirection === 'asc' ? -1 : 1;\n      }\n      if (aValue > bValue) {\n        return sortDirection === 'asc' ? 1 : -1;\n      }\n      return 0;\n    });\n  }, [tableData, sortField, sortDirection]);\n\n  const formatCurrency = (value: number) => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0\n    }).format(value);\n  };\n\n  const formatNumber = (value: number) => {\n    return new Intl.NumberFormat('en-US').format(value);\n  };\n\n  const getStatusBadgeVariant = (status: TableRow['status']) => {\n    switch (status) {\n      case 'active':\n        return 'default';\n      case 'pending':\n        return 'secondary';\n      case 'inactive':\n        return 'outline';\n      default:\n        return 'default';\n    }\n  };\n\n  const SortIcon = ({ field }: { field: SortField }) => {\n    if (sortField !== field) {\n      return <ArrowUpDown className=\"ml-2 h-4 w-4\" />;\n    }\n    if (sortDirection === 'asc') {\n      return <ArrowUp className=\"ml-2 h-4 w-4\" />;\n    }\n    return <ArrowDown className=\"ml-2 h-4 w-4\" />;\n</parameter>\n</invoke> ? 'up' as const : 'down' as const\n      }));\n\n      // Generate updated chart data with random variations\n      const updatedChartData = mockChartData.map(point => ({\n        ...point,\n        revenue: point.revenue + Math.floor(Math.random() * 4000 - 2000),\n        users: point.users + Math.floor(Math.random() * 100 - 50),\n        orders: point.orders + Math.floor(Math.random() * 50 - 25)\n      }));\n\n      // Generate updated table data with random variations\n      const updatedTableData = mockTableData.map(row => ({\n        ...row,\n        sales: row.sales + Math.floor(Math.random() * 40 - 20),\n        revenue: row.revenue + Math.floor(Math.random() * 2000 - 1000)\n      }));\n\n      setMetrics(updatedMetrics);\n      setChartData(updatedChartData);\n      setTableData(updatedTableData);\n      setIsRefreshing(false);\n    }, 1500);\n  }, []);\n\n  return (\n    <div className={`min-h-screen transition-colors duration-300 ${isDarkMode ? 'dark bg-gray-900' : 'bg-gray-50'}`}>\n      <div className=\"container mx-auto p-4 md:p-6 lg:p-8\">\n        <div className=\"flex flex-col md:flex-row md:items-center md:justify-between mb-8 gap-4\">\n          <div>\n            <h1 className={`text-3xl md:text-4xl font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n              Analytics Dashboard\n            </h1>\n            <p className={`mt-2 ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n              Real-time insights and performance metrics\n            </p>\n          </div>\n          \n          <div className=\"flex items-center gap-3\">\n            <Button\n              variant=\"outline\"\n              size=\"icon\"\n              onClick={toggleDarkMode}\n              className={isDarkMode ? 'border-gray-700 hover:bg-gray-800' : ''}\n            >\n              {isDarkMode ? <Sun className=\"h-5 w-5\" /> : <Moon className=\"h-5 w-5\" />}\n            </Button>\n            \n            <Button\n              variant=\"outline\"\n              onClick={handleRefresh}\n              disabled={isRefreshing}\n              className={isDarkMode ? 'border-gray-700 hover:bg-gray-800' : ''}\n            >\n              <RefreshCw className={`h-4 w-4 mr-2 ${isRefreshing ? 'animate-spin' : ''}`} />\n              Refresh\n            </Button>\n          </div>\n        </div>\n\n        <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 md:gap-6 mb-8\">\n          {metrics.map((metric, index) => {\n            const Icon = metric.label === 'Total Revenue' ? DollarSign :\n                        metric.label === 'Active Users' ? Users :\n                        metric.label === 'Total Orders' ? ShoppingCart :\n                        Target;\n            \n            return (\n              <motion.div\n                key={metric.id}\n                initial={{ opacity: 0, y: 20 }}\n                animate={{ opacity: 1, y: 0 }}\n                transition={{ duration: 0.4, delay: index * 0.1 }}\n              >\n                <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n                  <CardHeader className=\"flex flex-row items-center justify-between pb-2\">\n                    <CardTitle className={`text-sm font-medium ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                      {metric.label}\n                    </CardTitle>\n                    <div className={`p-2 rounded-lg ${isDarkMode ? 'bg-gray-700' : 'bg-gray-100'}`}>\n                      <Icon className={`h-4 w-4 ${isDarkMode ? 'text-gray-300' : 'text-gray-600'}`} />\n                    </div>\n                  </CardHeader>\n                  <CardContent>\n                    <div className={`text-2xl font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                      {metric.label === 'Total Revenue' ? `$${metric.value.toLocaleString()}` :\n                       metric.label === 'Conversion Rate' ? `${metric.value}%` :\n                       metric.value.toLocaleString()}\n                    </div>\n                    <div className=\"flex items-center mt-2\">\n                      {metric.trend === 'up' ? (\n                        <TrendingUp className=\"h-4 w-4 text-green-500 mr-1\" />\n                      ) : (\n                        <TrendingDown className=\"h-4 w-4 text-red-500 mr-1\" />\n                      )}\n                      <span className={`text-sm font-medium ${metric.trend === 'up' ? 'text-green-500' : 'text-red-500'}`}>\n                        {metric.change > 0 ? '+' : ''}{metric.change}%\n                      </span>\n                      <span className={`text-sm ml-2 ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                        vs last period\n                      </span>\n                    </div>\n                  </CardContent>\n                </Card>\n              </motion.div>\n            );\n          })}\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6 mb-8\">\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Revenue Overview</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Daily revenue trends for the past week\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"h-[300px] w-full\">\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <LineChart\n                    data={chartData}\n                    margin={{ top: 5, right: 10, left: 0, bottom: 5 }}\n                  >\n                    <CartesianGrid \n                      strokeDasharray=\"3 3\" \n                      stroke={isDarkMode ? '#374151' : '#e5e7eb'}\n                    />\n                    <XAxis \n                      dataKey=\"date\" \n                      stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                      fontSize={12}\n                      tickFormatter={(value) => new Date(value).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n                    />\n                    <YAxis \n                      stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                      fontSize={12}\n                      tickFormatter={(value) => `$${(value / 1000).toFixed(0)}k`}\n                    />\n                    <Tooltip \n                      contentStyle={{\n                        backgroundColor: isDarkMode ? '#1f2937' : '#ffffff',\n                        border: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\n                        borderRadius: '8px',\n                        color: isDarkMode ? '#ffffff' : '#000000'\n                      }}\n                      labelFormatter={(value) => new Date(value).toLocaleDateString('en-US', { month: 'long', day: 'numeric', year: 'numeric' })}\n                      formatter={(value: number) => [`$${value.toLocaleString()}`, 'Revenue']}\n                    />\n                    <Line \n                      type=\"monotone\" \n                      dataKey=\"revenue\" \n                      stroke=\"#3b82f6\" \n                      strokeWidth={2}\n                      dot={{ fill: '#3b82f6', r: 4 }}\n                      activeDot={{ r: 6, fill: '#2563eb' }}\n                    />\n                  </LineChart>\n                </ResponsiveContainer>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>User Activity</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Active users and engagement metrics\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <UserAreaChart data={chartData} isDarkMode={isDarkMode} />\n            </CardContent>\n          </Card>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6 mb-8\">\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Orders Distribution</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Order volume by category\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {chartData.map((dataPoint, index) => {\n                  const maxOrders = getMaxOrders();\n                  const percentage = (dataPoint.orders / maxOrders) * 100;\n                  const barColor = percentage > 75 ? 'bg-green-500' : percentage > 50 ? 'bg-blue-500' : percentage > 25 ? 'bg-yellow-500' : 'bg-red-500';\n                  \n                  return (\n                    <div key={index} className=\"space-y-2\">\n                      <div className=\"flex items-center justify-between text-sm\">\n                        <span className={isDarkMode ? 'text-gray-300' : 'text-gray-700'}>\n                          {new Date(dataPoint.date).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n                        </span>\n                        <span className={`font-semibold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                          {dataPoint.orders}\n                        </span>\n                      </div>\n                      <div className={`w-full h-8 rounded-full overflow-hidden ${isDarkMode ? 'bg-gray-700' : 'bg-gray-200'}`}>\n                        <div\n                          className={`h-full ${barColor} transition-all duration-500 ease-out flex items-center justify-end pr-3`}\n                          style={{ width: `${percentage}%` }}\n                        >\n                          {percentage > 20 && (\n                            <BarChart3 className=\"h-4 w-4 text-white\" />\n                          )}\n                        </div>\n                      </div>\n                    </div>\n                  );\n                })}\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className={`lg:col-span-2 ${isDarkMode ? 'bg-gray-800 border-gray-700' : ''}`}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Performance Comparison</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Multi-metric comparison over time\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <ResponsiveContainer width=\"100%\" height={300}>\n                <LineChart data={chartData}>\n                  <CartesianGrid strokeDasharray=\"3 3\" stroke={isDarkMode ? '#374151' : '#e5e7eb'} />\n                  <XAxis \n                    dataKey=\"date\" \n                    stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                    tick={{ fill: isDarkMode ? '#9ca3af' : '#6b7280' }}\n                    tickFormatter={(value) => new Date(value).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n                  />\n                  <YAxis \n                    stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                    tick={{ fill: isDarkMode ? '#9ca3af' : '#6b7280' }}\n                  />\n                  <Tooltip \n                    contentStyle={{\n                      backgroundColor: isDarkMode ? '#1f2937' : '#ffffff',\n                      border: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\n                      borderRadius: '8px',\n                      color: isDarkMode ? '#ffffff' : '#000000'\n                    }}\n                    labelFormatter={(value) => new Date(value).toLocaleDateString('en-US', { month: 'long', day: 'numeric', year: 'numeric' })}\n                  />\n                  <Legend \n                    wrapperStyle={{\n                      color: isDarkMode ? '#9ca3af' : '#6b7280'\n                    }}\n                  />\n                  <Line \n                    type=\"monotone\" \n                    dataKey=\"revenue\" \n                    stroke=\"#3b82f6\" \n                    strokeWidth={2}\n                    dot={{ fill: '#3b82f6', r: 4 }}\n                    activeDot={{ r: 6 }}\n                    name=\"Revenue ($)\"\n                  />\n                  <Line \n                    type=\"monotone\" \n                    dataKey=\"users\" \n                    stroke=\"#10b981\" \n                    strokeWidth={2}\n                    dot={{ fill: '#10b981', r: 4 }}\n                    activeDot={{ r: 6 }}\n                    name=\"Users\"\n                  />\n                  <Line \n                    type=\"monotone\" \n                    dataKey=\"orders\" \n                    stroke=\"#f59e0b\" \n                    strokeWidth={2}\n                    dot={{ fill: '#f59e0b', r: 4 }}\n                    activeDot={{ r: 6 }}\n                    name=\"Orders\"\n                  />\n                </LineChart>\n              </ResponsiveContainer>\n            </CardContent>\n          </Card>\n        </div>\n\n        <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n          <CardHeader>\n            <CardTitle className={isDarkMode ? 'text-white' : ''}>Top Products</CardTitle>\n            <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n              Best performing products by sales and revenue\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            {/* TODO:ProductTable Render responsive data table with sorting, status badges, and formatted numbers */}\n          </CardContent>\n        </Card>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mt-8\">\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Conversion Funnel</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                User journey and drop-off rates\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              {/* TODO:FunnelChart Render funnel visualization with percentages and stage labels */}\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Traffic Sources</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Visitor sources breakdown\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                <ResponsiveContainer width=\"100%\" height={200}>\n                  <PieChart>\n                    <Pie\n                      data={mockTrafficData}\n                      cx=\"50%\"\n                      cy=\"50%\"\n                      innerRadius={60}\n                      outerRadius={80}\n                      paddingAngle={2}\n                      dataKey=\"value\"\n                    >\n                      {mockTrafficData.map((entry, index) => (\n                        <Cell key={`cell-${index}`} fill={entry.color} />\n                      ))}\n                    </Pie>\n                    <Tooltip\n                      contentStyle={{\n                        backgroundColor: isDarkMode ? '#1f2937' : '#ffffff',\n                        border: isDarkMode ? '1px solid #374151' : '1px solid #e5e7eb',\n                        borderRadius: '6px',\n                        color: isDarkMode ? '#ffffff' : '#000000'\n                      }}\n                    />\n                  </PieChart>\n                </ResponsiveContainer>\n\n                <div className=\"space-y-2\">\n                  {mockTrafficData.map((source) => {\n                    const total = mockTrafficData.reduce((sum, item) => sum + item.value, 0);\n                    const percentage = ((source.value / total) * 100).toFixed(1);\n                    \n                    return (\n                      <div key={source.name} className=\"flex items-center justify-between\">\n                        <div className=\"flex items-center gap-2\">\n                          <div\n                            className=\"w-3 h-3 rounded-full\"\n                            style={{ backgroundColor: source.color }}\n                          />\n                          <span className={`text-sm ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>\n                            {source.name}\n                          </span>\n                        </div>\n                        <div className=\"flex items-center gap-2\">\n                          <span className={`text-sm font-medium ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                            {percentage}%\n                          </span>\n                          <span className={`text-sm ${isDarkMode ? 'text-gray-500' : 'text-gray-500'}`}>\n                            ({source.value.toLocaleString()})\n                          </span>\n                        </div>\n                      </div>\n                    );\n                  })}\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Recent Activity</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Latest system events\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-3 max-h-[400px] overflow-y-auto pr-2\">\n                {mockActivityData.map((activity, index) => {\n                  const getIcon = () => {\n                    switch (activity.type) {\n                      case 'success':\n                        return <CheckCircle className=\"h-5 w-5 text-green-500\" />;\n                      case 'warning':\n                        return <AlertCircle className=\"h-5 w-5 text-yellow-500\" />;\n                      case 'error':\n                        return <AlertCircle className=\"h-5 w-5 text-red-500\" />;\n                      case 'info':\n                        return <Info className=\"h-5 w-5 text-blue-500\" />;\n                      default:\n                        return <Bell className=\"h-5 w-5 text-gray-500\" />;\n                    }\n                  };\n\n                  const getBgColor = () => {\n                    if (isDarkMode) {\n                      switch (activity.type) {\n                        case 'success':\n                          return 'bg-green-500/10';\n                        case 'warning':\n                          return 'bg-yellow-500/10';\n                        case 'error':\n                          return 'bg-red-500/10';\n                        case 'info':\n                          return 'bg-blue-500/10';\n                        default:\n                          return 'bg-gray-500/10';\n                      }\n                    } else {\n                      switch (activity.type) {\n                        case 'success':\n                          return 'bg-green-50';\n                        case 'warning':\n                          return 'bg-yellow-50';\n                        case 'error':\n                          return 'bg-red-50';\n                        case 'info':\n                          return 'bg-blue-50';\n                        default:\n                          return 'bg-gray-50';\n                      }\n                    }\n                  };\n\n                  return (\n                    <motion.div\n                      key={activity.id}\n                      initial={{ opacity: 0, x: -20 }}\n                      animate={{ opacity: 1, x: 0 }}\n                      transition={{ delay: index * 0.05 }}\n                      className={`flex items-start gap-3 p-3 rounded-lg ${getBgColor()} transition-colors`}\n                    >\n                      <div className=\"flex-shrink-0 mt-0.5\">\n                        {getIcon()}\n                      </div>\n                      <div className=\"flex-1 min-w-0\">\n                        <p className={`text-sm font-medium ${isDarkMode ? 'text-gray-200' : 'text-gray-900'}`}>\n                          {activity.message}\n                        </p>\n                        <p className={`text-xs mt-1 ${isDarkMode ? 'text-gray-500' : 'text-gray-500'}`}>\n                          {activity.timestamp}\n                        </p>\n                      </div>\n                    </motion.div>\n                  );\n                })}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}",
    "error": null,
    "elapsed_time": 89.37174892425537,
    "success": true
  }
}