{
  "prompt_id": "dashboard",
  "prompt_name": "Analytics Dashboard",
  "mode": "parallel",
  "run_number": 37,
  "timestamp": "2025-10-13T22:38:41.352548",
  "response_time": 89.36295413970947,
  "total_tokens": null,
  "response_content": "import { useState, useCallback } from 'react';\nimport { useEffect } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\nimport { Badge } from '@/components/ui/badge';\nimport { Button } from '@/components/ui/button';\nimport { Moon, Sun, RefreshCw } from 'lucide-react';\nimport { Activity, TrendingUp, Database, Wifi } from 'lucide-react';\nimport { ArrowUpDown, ChevronLeft, ChevronRight } from 'lucide-react';\n\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\n\nimport { PieChart, Pie, Cell, ResponsiveContainer, Legend, Tooltip } from 'recharts';\nimport { AreaChart, Area, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';\nimport { TrendingUp, TrendingDown, DollarSign, Users, ShoppingCart, Target } from 'lucide-react';\nimport { motion } from 'framer-motion';\n\ninterface MetricData {\n  id: string;\n  label: string;\n  value: number;\n  change: number;\n  trend: 'up' | 'down';\n}\n\ninterface ChartDataPoint {\n  date: string;\n  revenue: number;\n  users: number;\n  orders: number;\n}\n\ninterface TableRow {\n  id: string;\n  product: string;\n  sales: number;\n  revenue: number;\n  status: 'active' | 'pending' | 'inactive';\n}\n\nconst mockMetrics: MetricData[] = [\n  { id: '1', label: 'Total Revenue', value: 45231, change: 12.5, trend: 'up' },\n  { id: '2', label: 'Active Users', value: 2350, change: 8.2, trend: 'up' },\n  { id: '3', label: 'Total Orders', value: 1543, change: -3.1, trend: 'down' },\n  { id: '4', label: 'Conversion Rate', value: 3.24, change: 5.7, trend: 'up' }\n];\n\nconst mockChartData: ChartDataPoint[] = [\n  { date: '2024-01-01', revenue: 12000, users: 450, orders: 230 },\n  { date: '2024-01-02', revenue: 15000, users: 520, orders: 280 },\n  { date: '2024-01-03', revenue: 13500, users: 490, orders: 250 },\n  { date: '2024-01-04', revenue: 18000, users: 610, orders: 320 },\n  { date: '2024-01-05', revenue: 16500, users: 580, orders: 295 },\n  { date: '2024-01-06', revenue: 20000, users: 680, orders: 350 },\n  { date: '2024-01-07', revenue: 22000, users: 720, orders: 380 }\n];\n\nconst mockTableData: TableRow[] = [\n  { id: '1', product: 'Premium Plan', sales: 234, revenue: 23400, status: 'active' },\n  { id: '2', product: 'Basic Plan', sales: 567, revenue: 11340, status: 'active' },\n  { id: '3', product: 'Enterprise Plan', sales: 89, revenue: 17800, status: 'active' },\n  { id: '4', product: 'Starter Plan', sales: 432, revenue: 4320, status: 'pending' },\n  { id: '5', product: 'Pro Plan', sales: 156, revenue: 15600, status: 'active' }\n];\n\ntype SortField = 'product' | 'sales' | 'revenue' | 'status';\ntype SortDirection = 'asc' | 'desc';\n\nconst ITEMS_PER_PAGE = 3;\n\nexport default function AnalyticsDashboard() {\n  const [isDarkMode, setIsDarkMode] = useState(false);\n  const [metrics, setMetrics] = useState<MetricData[]>(mockMetrics);\n  const [chartData, setChartData] = useState<ChartDataPoint[]>(mockChartData);\n  const [tableData, setTableData] = useState<TableRow[]>(mockTableData);\n  const [isRefreshing, setIsRefreshing] = useState(false);\n  const [sortField, setSortField] = useState<SortField>('revenue');\n  const [sortDirection, setSortDirection] = useState<SortDirection>('desc');\n  const [currentPage, setCurrentPage] = useState(1);\n  const [lastUpdate, setLastUpdate] = useState(new Date());\n  const [isLive, setIsLive] = useState(true);\n  const [updateCount, setUpdateCount] = useState(0);\n\n  const toggleDarkMode = useCallback(() => {\n    setIsDarkMode(prev => !prev);\n  }, []);\n\n  const handleSort = useCallback((field: SortField) => {\n    if (sortField === field) {\n      setSortDirection(prev => prev === 'asc' ? 'desc' : 'asc');\n    } else {\n      setSortField(field);\n      setSortDirection('asc');\n    }\n    setCurrentPage(1);\n  }, [sortField]);\n\n  const sortedData = useCallback(() => {\n    const sorted = [...tableData].sort((a, b) => {\n      let aValue = a[sortField];\n      let bValue = b[sortField];\n\n      if (typeof aValue === 'string') {\n        aValue = aValue.toLowerCase();\n        bValue = (bValue as string).toLowerCase();\n      }\n\n      if (aValue < bValue) return sortDirection === 'asc' ? -1 : 1;\n      if (aValue > bValue) return sortDirection === 'asc' ? 1 : -1;\n      return 0;\n    });\n\n    return sorted;\n  }, [tableData, sortField, sortDirection]);\n\n  const paginatedData = useCallback(() => {\n    const sorted = sortedData();\n    const startIndex = (currentPage - 1) * ITEMS_PER_PAGE;\n    const endIndex = startIndex + ITEMS_PER_PAGE;\n    return sorted.slice(startIndex, endIndex);\n  }, [sortedData, currentPage]);\n\n  const totalPages = Math.ceil(tableData.length / ITEMS_PER_PAGE);\n\n  const getStatusBadgeVariant = (status: TableRow['status']) => {\n    switch (status) {\n      case 'active':\n        return 'default';\n      case 'pending':\n        return 'secondary';\n      case 'inactive':\n        return 'outline';\n      default:\n        return 'default';\n    }\n  };\n\n  // Simulate real-time updates\n  useEffect(() => {\n    if (!isLive) return;\n\n    const interval = setInterval(() => {\n      setLastUpdate(new Date());\n      setUpdateCount(prev => prev + 1);\n    }, 5000); // Update every 5 seconds\n\n    return () => clearInterval(interval);\n  }, [isLive]);\n\n  const handleRefresh = useCallback(() => {\n    setIsRefreshing(true);\n    \n    setTimeout(() => {\n      // Generate updated metrics with random variations\n      const updatedMetrics = mockMetrics.map(metric => ({\n        ...metric,\n        value: metric.value + Math.floor(Math.random() * 200 - 100),\n        change: parseFloat((Math.random() * 20 - 5).toFixed(1)),\n        trend: Math.random() > 0.5 ? 'up' as const : 'down' as const\n      }));\n      \n      // Generate updated chart data with random variations\n      const updatedChartData = mockChartData.map(point => ({\n        ...point,\n        revenue: point.revenue + Math.floor(Math.random() * 4000 - 2000),\n        users: point.users + Math.floor(Math.random() * 100 - 50),\n        orders: point.orders + Math.floor(Math.random() * 50 - 25)\n      }));\n      \n      // Generate updated table data with random variations\n      const updatedTableData = mockTableData.map(row => ({\n        ...row,\n        sales: row.sales + Math.floor(Math.random() * 40 - 20),\n        revenue: row.revenue + Math.floor(Math.random() * 2000 - 1000)\n      }));\n      \n      setMetrics(updatedMetrics);\n      setChartData(updatedChartData);\n      setTableData(updatedTableData);\n      setIsRefreshing(false);\n    }, 1500);\n  }, []);\n\n  return (\n    <div className={`min-h-screen ${isDarkMode ? 'dark bg-gray-900' : 'bg-gray-50'}`}>\n      <div className=\"container mx-auto p-4 md:p-6 lg:p-8\">\n        <div className=\"flex flex-col md:flex-row justify-between items-start md:items-center gap-4 mb-8\">\n          <div>\n            <h1 className={`text-3xl md:text-4xl font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n              Analytics Dashboard\n            </h1>\n            <p className={`mt-2 ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n              Real-time insights and performance metrics\n            </p>\n          </div>\n          \n          <div className=\"flex gap-2\">\n            <Button\n              variant=\"outline\"\n              size=\"icon\"\n              onClick={toggleDarkMode}\n              className={isDarkMode ? 'border-gray-700' : ''}\n            >\n              {isDarkMode ? <Sun className=\"h-5 w-5\" /> : <Moon className=\"h-5 w-5\" />}\n            </Button>\n            \n            <Button\n              variant=\"outline\"\n              onClick={handleRefresh}\n              disabled={isRefreshing}\n              className={isDarkMode ? 'border-gray-700' : ''}\n            >\n              <RefreshCw className={`h-4 w-4 mr-2 ${isRefreshing ? 'animate-spin' : ''}`} />\n              Refresh\n            </Button>\n          </div>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 md:gap-6 mb-8\">\n          {metrics.map((metric, index) => {\n            const Icon = metric.label.includes('Revenue') ? DollarSign :\n                        metric.label.includes('Users') ? Users :\n                        metric.label.includes('Orders') ? ShoppingCart :\n                        Target;\n            \n            const TrendIcon = metric.trend === 'up' ? TrendingUp : TrendingDown;\n            \n            return (\n              <motion.div\n                key={metric.id}\n                initial={{ opacity: 0, y: 20 }}\n                animate={{ opacity: 1, y: 0 }}\n                transition={{ duration: 0.4, delay: index * 0.1 }}\n              >\n                <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n                  <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                    <CardTitle className={`text-sm font-medium ${isDarkMode ? 'text-gray-300' : 'text-gray-600'}`}>\n                      {metric.label}\n                    </CardTitle>\n                    <Icon className={`h-4 w-4 ${isDarkMode ? 'text-gray-400' : 'text-gray-500'}`} />\n                  </CardHeader>\n                  <CardContent>\n                    <div className={`text-2xl font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                      {metric.label.includes('Rate') ? `${metric.value}%` : \n                       metric.label.includes('Revenue') ? `$${metric.value.toLocaleString()}` :\n                       metric.value.toLocaleString()}\n                    </div>\n                    <div className=\"flex items-center mt-2\">\n                      <TrendIcon \n                        className={`h-4 w-4 mr-1 ${\n                          metric.trend === 'up' ? 'text-green-500' : 'text-red-500'\n                        }`} \n                      />\n                      <span className={`text-sm font-medium ${\n                        metric.trend === 'up' ? 'text-green-500' : 'text-red-500'\n                      }`}>\n                        {Math.abs(metric.change)}%\n                      </span>\n                      <span className={`text-sm ml-2 ${isDarkMode ? 'text-gray-400' : 'text-gray-500'}`}>\n                        vs last period\n                      </span>\n                    </div>\n                  </CardContent>\n                </Card>\n              </motion.div>\n            );\n          })}\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-4 md:gap-6 mb-8\">\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Revenue Overview</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Daily revenue trends\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"h-[300px] w-full\">\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <LineChart\n                    data={chartData}\n                    margin={{ top: 5, right: 10, left: 0, bottom: 5 }}\n                  >\n                    <CartesianGrid \n                      strokeDasharray=\"3 3\" \n                      stroke={isDarkMode ? '#374151' : '#e5e7eb'}\n                    />\n                    <XAxis \n                      dataKey=\"date\" \n                      stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                      fontSize={12}\n                      tickFormatter={(value) => {\n                        const date = new Date(value);\n                        return `${date.getMonth() + 1}/${date.getDate()}`;\n                      }}\n                    />\n                    <YAxis \n                      stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                      fontSize={12}\n                      tickFormatter={(value) => `$${(value / 1000).toFixed(0)}k`}\n                    />\n                    <Tooltip \n                      contentStyle={{\n                        backgroundColor: isDarkMode ? '#1f2937' : '#ffffff',\n                        border: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\n                        borderRadius: '6px',\n                        color: isDarkMode ? '#ffffff' : '#000000'\n                      }}\n                      labelStyle={{\n                        color: isDarkMode ? '#9ca3af' : '#6b7280',\n                        marginBottom: '4px'\n                      }}\n                      formatter={(value: number) => [`$${value.toLocaleString()}`, 'Revenue']}\n                      labelFormatter={(label) => {\n                        const date = new Date(label);\n                        return date.toLocaleDateString('en-US', { \n                          month: 'short', \n                          day: 'numeric', \n                          year: 'numeric' \n                        });\n                      }}\n                    />\n                    <Line \n                      type=\"monotone\" \n                      dataKey=\"revenue\" \n                      stroke=\"#3b82f6\" \n                      strokeWidth={2}\n                      dot={{ fill: '#3b82f6', r: 4 }}\n                      activeDot={{ r: 6, fill: '#2563eb' }}\n                    />\n                  </LineChart>\n                </ResponsiveContainer>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>User Growth</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Active users over time\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"h-[300px] w-full\">\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <AreaChart\n                    data={chartData}\n                    margin={{ top: 10, right: 10, left: 0, bottom: 0 }}\n                  >\n                    <defs>\n                      <linearGradient id=\"userGradient\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                        <stop offset=\"5%\" stopColor=\"#8b5cf6\" stopOpacity={0.8} />\n                        <stop offset=\"95%\" stopColor=\"#8b5cf6\" stopOpacity={0.1} />\n                      </linearGradient>\n                    </defs>\n                    <CartesianGrid \n                      strokeDasharray=\"3 3\" \n                      stroke={isDarkMode ? '#374151' : '#e5e7eb'}\n                      opacity={0.5}\n                    />\n                    <XAxis\n                      dataKey=\"date\"\n                      tickFormatter={(value) => new Date(value).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n                      stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                      fontSize={12}\n                      tickLine={false}\n                    />\n                    <YAxis\n                      stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                      fontSize={12}\n                      tickLine={false}\n                      axisLine={false}\n                    />\n                    <Tooltip\n                      contentStyle={{\n                        backgroundColor: isDarkMode ? '#1f2937' : '#ffffff',\n                        border: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\n                        borderRadius: '8px',\n                        color: isDarkMode ? '#ffffff' : '#000000'\n                      }}\n                      labelFormatter={(value) => new Date(value).toLocaleDateString('en-US', { month: 'long', day: 'numeric', year: 'numeric' })}\n                      formatter={(value: number) => [value.toLocaleString(), 'Users']}\n                    />\n                    <Area\n                      type=\"monotone\"\n                      dataKey=\"users\"\n                      stroke=\"#8b5cf6\"\n                      strokeWidth={2}\n                      fill=\"url(#userGradient)\"\n                      animationDuration={1000}\n                      animationEasing=\"ease-in-out\"\n                    />\n                  </AreaChart>\n                </ResponsiveContainer>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-4 md:gap-6 mb-8\">\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Orders Distribution</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                By product category\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"h-[300px]\">\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <PieChart>\n                    <Pie\n                      data={tableData}\n                      cx=\"50%\"\n                      cy=\"50%\"\n                      labelLine={false}\n                      label={({ product, sales }) => `${product}: ${sales}`}\n                      outerRadius={80}\n                      fill=\"#8884d8\"\n                      dataKey=\"sales\"\n                    >\n                      {tableData.map((entry, index) => (\n                        <Cell \n                          key={`cell-${entry.id}`} \n                          fill={['#3b82f6', '#8b5cf6', '#ec4899', '#f59e0b', '#10b981'][index % 5]} \n                        />\n                      ))}\n                    </Pie>\n                    <Tooltip \n                      contentStyle={{\n                        backgroundColor: isDarkMode ? '#1f2937' : '#ffffff',\n                        border: isDarkMode ? '1px solid #374151' : '1px solid #e5e7eb',\n                        borderRadius: '6px',\n                        color: isDarkMode ? '#ffffff' : '#000000'\n                      }}\n                      formatter={(value: number) => [`${value} orders`, 'Sales']}\n                    />\n                    <Legend \n                      wrapperStyle={{\n                        color: isDarkMode ? '#ffffff' : '#000000'\n                      }}\n                    />\n                  </PieChart>\n                </ResponsiveContainer>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className={`lg:col-span-2 ${isDarkMode ? 'bg-gray-800 border-gray-700' : ''}`}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Performance Metrics</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Combined view of key indicators\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"h-[300px] w-full\">\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <BarChart\n                    data={chartData}\n                    margin={{ top: 20, right: 30, left: 20, bottom: 5 }}\n                  >\n                    <CartesianGrid \n                      strokeDasharray=\"3 3\" \n                      stroke={isDarkMode ? '#374151' : '#e5e7eb'}\n                    />\n                    <XAxis \n                      dataKey=\"date\" \n                      stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                      tick={{ fill: isDarkMode ? '#9ca3af' : '#6b7280' }}\n                      tickFormatter={(value) => new Date(value).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n                    />\n                    <YAxis \n                      stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                      tick={{ fill: isDarkMode ? '#9ca3af' : '#6b7280' }}\n                    />\n                    <Tooltip \n                      contentStyle={{\n                        backgroundColor: isDarkMode ? '#1f2937' : '#ffffff',\n                        border: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\n                        borderRadius: '8px',\n                        color: isDarkMode ? '#f3f4f6' : '#111827'\n                      }}\n                      labelStyle={{ color: isDarkMode ? '#f3f4f6' : '#111827' }}\n                      formatter={(value: number) => value.toLocaleString()}\n                      labelFormatter={(label) => new Date(label).toLocaleDateString('en-US', { month: 'long', day: 'numeric', year: 'numeric' })}\n                    />\n                    <Legend \n                      wrapperStyle={{ color: isDarkMode ? '#9ca3af' : '#6b7280' }}\n                      iconType=\"rect\"\n                    />\n                    <Bar \n                      dataKey=\"revenue\" \n                      fill=\"#3b82f6\" \n                      radius={[8, 8, 0, 0]}\n                      name=\"Revenue ($)\"\n                    />\n                    <Bar \n                      dataKey=\"users\" \n                      fill=\"#10b981\" \n                      radius={[8, 8, 0, 0]}\n                      name=\"Users\"\n                    />\n                    <Bar \n                      dataKey=\"orders\" \n                      fill=\"#f59e0b\" \n                      radius={[8, 8, 0, 0]}\n                      name=\"Orders\"\n                    />\n                  </BarChart>\n                </ResponsiveContainer>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n          <CardHeader>\n            <CardTitle className={isDarkMode ? 'text-white' : ''}>Top Products</CardTitle>\n            <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n              Best performing products by revenue\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              <div className=\"overflow-x-auto\">\n                <Table>\n                  <TableHeader>\n                    <TableRow className={isDarkMode ? 'border-gray-700' : ''}>\n                      <TableHead className={isDarkMode ? 'text-gray-300' : ''}>\n                        <Button\n                          variant=\"ghost\"\n                          onClick={() => handleSort('product')}\n                          className={`flex items-center gap-1 ${isDarkMode ? 'hover:bg-gray-700' : ''}`}\n                        >\n                          Product\n                          <ArrowUpDown className=\"h-4 w-4\" />\n                        </Button>\n                      </TableHead>\n                      <TableHead className={isDarkMode ? 'text-gray-300' : ''}>\n                        <Button\n                          variant=\"ghost\"\n                          onClick={() => handleSort('sales')}\n                          className={`flex items-center gap-1 ${isDarkMode ? 'hover:bg-gray-700' : ''}`}\n                        >\n                          Sales\n                          <ArrowUpDown className=\"h-4 w-4\" />\n                        </Button>\n                      </TableHead>\n                      <TableHead className={isDarkMode ? 'text-gray-300' : ''}>\n                        <Button\n                          variant=\"ghost\"\n                          onClick={() => handleSort('revenue')}\n                          className={`flex items-center gap-1 ${isDarkMode ? 'hover:bg-gray-700' : ''}`}\n                        >\n                          Revenue\n                          <ArrowUpDown className=\"h-4 w-4\" />\n                        </Button>\n                      </TableHead>\n                      <TableHead className={isDarkMode ? 'text-gray-300' : ''}>\n                        <Button\n                          variant=\"ghost\"\n                          onClick={() => handleSort('status')}\n                          className={`flex items-center gap-1 ${isDarkMode ? 'hover:bg-gray-700' : ''}`}\n                        >\n                          Status\n                          <ArrowUpDown className=\"h-4 w-4\" />\n                        </Button>\n                      </TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {paginatedData().map((row) => (\n                      <TableRow \n                        key={row.id}\n                        className={isDarkMode ? 'border-gray-700 hover:bg-gray-700/50' : ''}\n                      >\n                        <TableCell className={`font-medium ${isDarkMode ? 'text-gray-200' : ''}`}>\n                          {row.product}\n                        </TableCell>\n                        <TableCell className={isDarkMode ? 'text-gray-300' : ''}>\n                          {row.sales.toLocaleString()}\n                        </TableCell>\n                        <TableCell className={isDarkMode ? 'text-gray-300' : ''}>\n                          ${row.revenue.toLocaleString()}\n                        </TableCell>\n                        <TableCell>\n                          <Badge \n                            variant={getStatusBadgeVariant(row.status)}\n                            className=\"capitalize\"\n                          >\n                            {row.status}\n                          </Badge>\n                        </TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              </div>\n\n              <div className=\"flex flex-col sm:flex-row items-center justify-between gap-4 pt-4\">\n                <p className={`text-sm ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                  Showing {((currentPage - 1) * ITEMS_PER_PAGE) + 1} to {Math.min(currentPage * ITEMS_PER_PAGE, tableData.length)} of {tableData.length} products\n                </p>\n                \n                <div className=\"flex items-center gap-2\">\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => setCurrentPage(prev => Math.max(1, prev - 1))}\n                    disabled={currentPage === 1}\n                    className={isDarkMode ? 'border-gray-700' : ''}\n                  >\n                    <ChevronLeft className=\"h-4 w-4\" />\n                    Previous\n                  </Button>\n                  \n                  <div className=\"flex items-center gap-1\">\n                    {Array.from({ length: totalPages }, (_, i) => i + 1).map((page) => (\n                      <Button\n                        key={page}\n                        variant={currentPage === page ? 'default' : 'outline'}\n                        size=\"sm\"\n                        onClick={() => setCurrentPage(page)}\n                        className={`w-8 h-8 p-0 ${isDarkMode && currentPage !== page ? 'border-gray-700' : ''}`}\n                      >\n                        {page}\n                      </Button>\n                    ))}\n                  </div>\n                  \n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => setCurrentPage(prev => Math.min(totalPages, prev + 1))}\n                    disabled={currentPage === totalPages}\n                    className={isDarkMode ? 'border-gray-700' : ''}\n                  >\n                    Next\n                    <ChevronRight className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 md:gap-6 mt-8\">\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader className=\"pb-3\">\n              <div className=\"flex items-center justify-between\">\n                <CardTitle className={`text-lg ${isDarkMode ? 'text-white' : ''}`}>\n                  Live Status\n                </CardTitle>\n                <div className=\"flex items-center gap-2\">\n                  {isLive && (\n                    <span className=\"relative flex h-3 w-3\">\n                      <span className=\"animate-ping absolute inline-flex h-full w-full rounded-full bg-green-400 opacity-75\"></span>\n                      <span className=\"relative inline-flex rounded-full h-3 w-3 bg-green-500\"></span>\n                    </span>\n                  )}\n                  <Wifi className={`h-4 w-4 ${isLive ? 'text-green-500' : 'text-gray-400'}`} />\n                </div>\n              </div>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-2\">\n                <div className=\"flex items-center justify-between\">\n                  <span className={`text-sm ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                    Connection\n                  </span>\n                  <span className={`text-sm font-medium ${isLive ? 'text-green-500' : 'text-gray-400'}`}>\n                    {isLive ? 'Active' : 'Inactive'}\n                  </span>\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <span className={`text-sm ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                    Last Update\n                  </span>\n                  <span className={`text-sm font-medium ${isDarkMode ? 'text-gray-300' : 'text-gray-900'}`}>\n                    {lastUpdate.toLocaleTimeString()}\n                  </span>\n                </div>\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => setIsLive(!isLive)}\n                  className={`w-full mt-2 ${isDarkMode ? 'border-gray-700' : ''}`}\n                >\n                  {isLive ? 'Pause' : 'Resume'} Updates\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader className=\"pb-3\">\n              <div className=\"flex items-center justify-between\">\n                <CardTitle className={`text-lg ${isDarkMode ? 'text-white' : ''}`}>\n                  Data Sync\n                </CardTitle>\n                <Database className={`h-5 w-5 ${isDarkMode ? 'text-blue-400' : 'text-blue-500'}`} />\n              </div>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-2\">\n                <div className=\"flex items-center justify-between\">\n                  <span className={`text-sm ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                    Updates Received\n                  </span>\n                  <span className={`text-sm font-medium ${isDarkMode ? 'text-gray-300' : 'text-gray-900'}`}>\n                    {updateCount}\n                  </span>\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <span className={`text-sm ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                    Sync Status\n                  </span>\n                  <span className=\"text-sm font-medium text-blue-500\">\n                    Synchronized\n                  </span>\n                </div>\n                <div className=\"w-full bg-gray-200 dark:bg-gray-700 rounded-full h-2 mt-2\">\n                  <div \n                    className=\"bg-blue-500 h-2 rounded-full transition-all duration-500\"\n                    style={{ width: '100%' }}\n                  ></div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader className=\"pb-3\">\n              <div className=\"flex items-center justify-between\">\n                <CardTitle className={`text-lg ${isDarkMode ? 'text-white' : ''}`}>\n                  Activity Monitor\n                </CardTitle>\n                <Activity className={`h-5 w-5 ${isDarkMode ? 'text-purple-400' : 'text-purple-500'}`} />\n              </div>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-2\">\n                <div className=\"flex items-center justify-between\">\n                  <span className={`text-sm ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                    Active Sessions\n                  </span>\n                  <span className={`text-sm font-medium ${isDarkMode ? 'text-gray-300' : 'text-gray-900'}`}>\n                    {Math.floor(Math.random() * 50) + 150}\n                  </span>\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <span className={`text-sm ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                    Performance\n                  </span>\n                  <div className=\"flex items-center gap-1\">\n                    <TrendingUp className=\"h-3 w-3 text-green-500\" />\n                    <span className=\"text-sm font-medium text-green-500\">\n                      Optimal\n                    </span>\n                  </div>\n                </div>\n                <div className=\"flex items-center gap-2 mt-2 p-2 rounded-md bg-purple-50 dark:bg-purple-900/20\">\n                  <span className=\"relative flex h-2 w-2\">\n                    <span className=\"animate-ping absolute inline-flex h-full w-full rounded-full bg-purple-400 opacity-75\"></span>\n                    <span className=\"relative inline-flex rounded-full h-2 w-2 bg-purple-500\"></span>\n                  </span>\n                  <span className={`text-xs ${isDarkMode ? 'text-purple-300' : 'text-purple-700'}`}>\n                    Real-time monitoring active\n                  </span>\n                </div>\n              </div>\n            </CardContent>\n          </Card></parameter>\n</invoke>\n        </div>\n      </div>\n    </div>\n  );\n}",
  "error": null,
  "overall_score": 59,
  "code_quality_score": 16,
  "architecture_score": 12,
  "performance_score": 14,
  "accessibility_score": 17,
  "metadata": {
    "document_id": "eval_room_c670354c59aa",
    "prompt_category": "intermediate",
    "prompt_complexity": 6.0
  },
  "raw_response": {
    "document_id": "eval_room_c670354c59aa",
    "mode": "parallel",
    "prompt": "Generate an analytics dashboard page with charts, data tables, real-time updates, dark mode, and responsive design",
    "content": "import { useState, useCallback } from 'react';\nimport { useEffect } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\nimport { Badge } from '@/components/ui/badge';\nimport { Button } from '@/components/ui/button';\nimport { Moon, Sun, RefreshCw } from 'lucide-react';\nimport { Activity, TrendingUp, Database, Wifi } from 'lucide-react';\nimport { ArrowUpDown, ChevronLeft, ChevronRight } from 'lucide-react';\n\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\n\nimport { PieChart, Pie, Cell, ResponsiveContainer, Legend, Tooltip } from 'recharts';\nimport { AreaChart, Area, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';\nimport { TrendingUp, TrendingDown, DollarSign, Users, ShoppingCart, Target } from 'lucide-react';\nimport { motion } from 'framer-motion';\n\ninterface MetricData {\n  id: string;\n  label: string;\n  value: number;\n  change: number;\n  trend: 'up' | 'down';\n}\n\ninterface ChartDataPoint {\n  date: string;\n  revenue: number;\n  users: number;\n  orders: number;\n}\n\ninterface TableRow {\n  id: string;\n  product: string;\n  sales: number;\n  revenue: number;\n  status: 'active' | 'pending' | 'inactive';\n}\n\nconst mockMetrics: MetricData[] = [\n  { id: '1', label: 'Total Revenue', value: 45231, change: 12.5, trend: 'up' },\n  { id: '2', label: 'Active Users', value: 2350, change: 8.2, trend: 'up' },\n  { id: '3', label: 'Total Orders', value: 1543, change: -3.1, trend: 'down' },\n  { id: '4', label: 'Conversion Rate', value: 3.24, change: 5.7, trend: 'up' }\n];\n\nconst mockChartData: ChartDataPoint[] = [\n  { date: '2024-01-01', revenue: 12000, users: 450, orders: 230 },\n  { date: '2024-01-02', revenue: 15000, users: 520, orders: 280 },\n  { date: '2024-01-03', revenue: 13500, users: 490, orders: 250 },\n  { date: '2024-01-04', revenue: 18000, users: 610, orders: 320 },\n  { date: '2024-01-05', revenue: 16500, users: 580, orders: 295 },\n  { date: '2024-01-06', revenue: 20000, users: 680, orders: 350 },\n  { date: '2024-01-07', revenue: 22000, users: 720, orders: 380 }\n];\n\nconst mockTableData: TableRow[] = [\n  { id: '1', product: 'Premium Plan', sales: 234, revenue: 23400, status: 'active' },\n  { id: '2', product: 'Basic Plan', sales: 567, revenue: 11340, status: 'active' },\n  { id: '3', product: 'Enterprise Plan', sales: 89, revenue: 17800, status: 'active' },\n  { id: '4', product: 'Starter Plan', sales: 432, revenue: 4320, status: 'pending' },\n  { id: '5', product: 'Pro Plan', sales: 156, revenue: 15600, status: 'active' }\n];\n\ntype SortField = 'product' | 'sales' | 'revenue' | 'status';\ntype SortDirection = 'asc' | 'desc';\n\nconst ITEMS_PER_PAGE = 3;\n\nexport default function AnalyticsDashboard() {\n  const [isDarkMode, setIsDarkMode] = useState(false);\n  const [metrics, setMetrics] = useState<MetricData[]>(mockMetrics);\n  const [chartData, setChartData] = useState<ChartDataPoint[]>(mockChartData);\n  const [tableData, setTableData] = useState<TableRow[]>(mockTableData);\n  const [isRefreshing, setIsRefreshing] = useState(false);\n  const [sortField, setSortField] = useState<SortField>('revenue');\n  const [sortDirection, setSortDirection] = useState<SortDirection>('desc');\n  const [currentPage, setCurrentPage] = useState(1);\n  const [lastUpdate, setLastUpdate] = useState(new Date());\n  const [isLive, setIsLive] = useState(true);\n  const [updateCount, setUpdateCount] = useState(0);\n\n  const toggleDarkMode = useCallback(() => {\n    setIsDarkMode(prev => !prev);\n  }, []);\n\n  const handleSort = useCallback((field: SortField) => {\n    if (sortField === field) {\n      setSortDirection(prev => prev === 'asc' ? 'desc' : 'asc');\n    } else {\n      setSortField(field);\n      setSortDirection('asc');\n    }\n    setCurrentPage(1);\n  }, [sortField]);\n\n  const sortedData = useCallback(() => {\n    const sorted = [...tableData].sort((a, b) => {\n      let aValue = a[sortField];\n      let bValue = b[sortField];\n\n      if (typeof aValue === 'string') {\n        aValue = aValue.toLowerCase();\n        bValue = (bValue as string).toLowerCase();\n      }\n\n      if (aValue < bValue) return sortDirection === 'asc' ? -1 : 1;\n      if (aValue > bValue) return sortDirection === 'asc' ? 1 : -1;\n      return 0;\n    });\n\n    return sorted;\n  }, [tableData, sortField, sortDirection]);\n\n  const paginatedData = useCallback(() => {\n    const sorted = sortedData();\n    const startIndex = (currentPage - 1) * ITEMS_PER_PAGE;\n    const endIndex = startIndex + ITEMS_PER_PAGE;\n    return sorted.slice(startIndex, endIndex);\n  }, [sortedData, currentPage]);\n\n  const totalPages = Math.ceil(tableData.length / ITEMS_PER_PAGE);\n\n  const getStatusBadgeVariant = (status: TableRow['status']) => {\n    switch (status) {\n      case 'active':\n        return 'default';\n      case 'pending':\n        return 'secondary';\n      case 'inactive':\n        return 'outline';\n      default:\n        return 'default';\n    }\n  };\n\n  // Simulate real-time updates\n  useEffect(() => {\n    if (!isLive) return;\n\n    const interval = setInterval(() => {\n      setLastUpdate(new Date());\n      setUpdateCount(prev => prev + 1);\n    }, 5000); // Update every 5 seconds\n\n    return () => clearInterval(interval);\n  }, [isLive]);\n\n  const handleRefresh = useCallback(() => {\n    setIsRefreshing(true);\n    \n    setTimeout(() => {\n      // Generate updated metrics with random variations\n      const updatedMetrics = mockMetrics.map(metric => ({\n        ...metric,\n        value: metric.value + Math.floor(Math.random() * 200 - 100),\n        change: parseFloat((Math.random() * 20 - 5).toFixed(1)),\n        trend: Math.random() > 0.5 ? 'up' as const : 'down' as const\n      }));\n      \n      // Generate updated chart data with random variations\n      const updatedChartData = mockChartData.map(point => ({\n        ...point,\n        revenue: point.revenue + Math.floor(Math.random() * 4000 - 2000),\n        users: point.users + Math.floor(Math.random() * 100 - 50),\n        orders: point.orders + Math.floor(Math.random() * 50 - 25)\n      }));\n      \n      // Generate updated table data with random variations\n      const updatedTableData = mockTableData.map(row => ({\n        ...row,\n        sales: row.sales + Math.floor(Math.random() * 40 - 20),\n        revenue: row.revenue + Math.floor(Math.random() * 2000 - 1000)\n      }));\n      \n      setMetrics(updatedMetrics);\n      setChartData(updatedChartData);\n      setTableData(updatedTableData);\n      setIsRefreshing(false);\n    }, 1500);\n  }, []);\n\n  return (\n    <div className={`min-h-screen ${isDarkMode ? 'dark bg-gray-900' : 'bg-gray-50'}`}>\n      <div className=\"container mx-auto p-4 md:p-6 lg:p-8\">\n        <div className=\"flex flex-col md:flex-row justify-between items-start md:items-center gap-4 mb-8\">\n          <div>\n            <h1 className={`text-3xl md:text-4xl font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n              Analytics Dashboard\n            </h1>\n            <p className={`mt-2 ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n              Real-time insights and performance metrics\n            </p>\n          </div>\n          \n          <div className=\"flex gap-2\">\n            <Button\n              variant=\"outline\"\n              size=\"icon\"\n              onClick={toggleDarkMode}\n              className={isDarkMode ? 'border-gray-700' : ''}\n            >\n              {isDarkMode ? <Sun className=\"h-5 w-5\" /> : <Moon className=\"h-5 w-5\" />}\n            </Button>\n            \n            <Button\n              variant=\"outline\"\n              onClick={handleRefresh}\n              disabled={isRefreshing}\n              className={isDarkMode ? 'border-gray-700' : ''}\n            >\n              <RefreshCw className={`h-4 w-4 mr-2 ${isRefreshing ? 'animate-spin' : ''}`} />\n              Refresh\n            </Button>\n          </div>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 md:gap-6 mb-8\">\n          {metrics.map((metric, index) => {\n            const Icon = metric.label.includes('Revenue') ? DollarSign :\n                        metric.label.includes('Users') ? Users :\n                        metric.label.includes('Orders') ? ShoppingCart :\n                        Target;\n            \n            const TrendIcon = metric.trend === 'up' ? TrendingUp : TrendingDown;\n            \n            return (\n              <motion.div\n                key={metric.id}\n                initial={{ opacity: 0, y: 20 }}\n                animate={{ opacity: 1, y: 0 }}\n                transition={{ duration: 0.4, delay: index * 0.1 }}\n              >\n                <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n                  <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                    <CardTitle className={`text-sm font-medium ${isDarkMode ? 'text-gray-300' : 'text-gray-600'}`}>\n                      {metric.label}\n                    </CardTitle>\n                    <Icon className={`h-4 w-4 ${isDarkMode ? 'text-gray-400' : 'text-gray-500'}`} />\n                  </CardHeader>\n                  <CardContent>\n                    <div className={`text-2xl font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                      {metric.label.includes('Rate') ? `${metric.value}%` : \n                       metric.label.includes('Revenue') ? `$${metric.value.toLocaleString()}` :\n                       metric.value.toLocaleString()}\n                    </div>\n                    <div className=\"flex items-center mt-2\">\n                      <TrendIcon \n                        className={`h-4 w-4 mr-1 ${\n                          metric.trend === 'up' ? 'text-green-500' : 'text-red-500'\n                        }`} \n                      />\n                      <span className={`text-sm font-medium ${\n                        metric.trend === 'up' ? 'text-green-500' : 'text-red-500'\n                      }`}>\n                        {Math.abs(metric.change)}%\n                      </span>\n                      <span className={`text-sm ml-2 ${isDarkMode ? 'text-gray-400' : 'text-gray-500'}`}>\n                        vs last period\n                      </span>\n                    </div>\n                  </CardContent>\n                </Card>\n              </motion.div>\n            );\n          })}\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-4 md:gap-6 mb-8\">\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Revenue Overview</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Daily revenue trends\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"h-[300px] w-full\">\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <LineChart\n                    data={chartData}\n                    margin={{ top: 5, right: 10, left: 0, bottom: 5 }}\n                  >\n                    <CartesianGrid \n                      strokeDasharray=\"3 3\" \n                      stroke={isDarkMode ? '#374151' : '#e5e7eb'}\n                    />\n                    <XAxis \n                      dataKey=\"date\" \n                      stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                      fontSize={12}\n                      tickFormatter={(value) => {\n                        const date = new Date(value);\n                        return `${date.getMonth() + 1}/${date.getDate()}`;\n                      }}\n                    />\n                    <YAxis \n                      stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                      fontSize={12}\n                      tickFormatter={(value) => `$${(value / 1000).toFixed(0)}k`}\n                    />\n                    <Tooltip \n                      contentStyle={{\n                        backgroundColor: isDarkMode ? '#1f2937' : '#ffffff',\n                        border: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\n                        borderRadius: '6px',\n                        color: isDarkMode ? '#ffffff' : '#000000'\n                      }}\n                      labelStyle={{\n                        color: isDarkMode ? '#9ca3af' : '#6b7280',\n                        marginBottom: '4px'\n                      }}\n                      formatter={(value: number) => [`$${value.toLocaleString()}`, 'Revenue']}\n                      labelFormatter={(label) => {\n                        const date = new Date(label);\n                        return date.toLocaleDateString('en-US', { \n                          month: 'short', \n                          day: 'numeric', \n                          year: 'numeric' \n                        });\n                      }}\n                    />\n                    <Line \n                      type=\"monotone\" \n                      dataKey=\"revenue\" \n                      stroke=\"#3b82f6\" \n                      strokeWidth={2}\n                      dot={{ fill: '#3b82f6', r: 4 }}\n                      activeDot={{ r: 6, fill: '#2563eb' }}\n                    />\n                  </LineChart>\n                </ResponsiveContainer>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>User Growth</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Active users over time\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"h-[300px] w-full\">\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <AreaChart\n                    data={chartData}\n                    margin={{ top: 10, right: 10, left: 0, bottom: 0 }}\n                  >\n                    <defs>\n                      <linearGradient id=\"userGradient\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                        <stop offset=\"5%\" stopColor=\"#8b5cf6\" stopOpacity={0.8} />\n                        <stop offset=\"95%\" stopColor=\"#8b5cf6\" stopOpacity={0.1} />\n                      </linearGradient>\n                    </defs>\n                    <CartesianGrid \n                      strokeDasharray=\"3 3\" \n                      stroke={isDarkMode ? '#374151' : '#e5e7eb'}\n                      opacity={0.5}\n                    />\n                    <XAxis\n                      dataKey=\"date\"\n                      tickFormatter={(value) => new Date(value).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n                      stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                      fontSize={12}\n                      tickLine={false}\n                    />\n                    <YAxis\n                      stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                      fontSize={12}\n                      tickLine={false}\n                      axisLine={false}\n                    />\n                    <Tooltip\n                      contentStyle={{\n                        backgroundColor: isDarkMode ? '#1f2937' : '#ffffff',\n                        border: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\n                        borderRadius: '8px',\n                        color: isDarkMode ? '#ffffff' : '#000000'\n                      }}\n                      labelFormatter={(value) => new Date(value).toLocaleDateString('en-US', { month: 'long', day: 'numeric', year: 'numeric' })}\n                      formatter={(value: number) => [value.toLocaleString(), 'Users']}\n                    />\n                    <Area\n                      type=\"monotone\"\n                      dataKey=\"users\"\n                      stroke=\"#8b5cf6\"\n                      strokeWidth={2}\n                      fill=\"url(#userGradient)\"\n                      animationDuration={1000}\n                      animationEasing=\"ease-in-out\"\n                    />\n                  </AreaChart>\n                </ResponsiveContainer>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-4 md:gap-6 mb-8\">\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Orders Distribution</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                By product category\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"h-[300px]\">\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <PieChart>\n                    <Pie\n                      data={tableData}\n                      cx=\"50%\"\n                      cy=\"50%\"\n                      labelLine={false}\n                      label={({ product, sales }) => `${product}: ${sales}`}\n                      outerRadius={80}\n                      fill=\"#8884d8\"\n                      dataKey=\"sales\"\n                    >\n                      {tableData.map((entry, index) => (\n                        <Cell \n                          key={`cell-${entry.id}`} \n                          fill={['#3b82f6', '#8b5cf6', '#ec4899', '#f59e0b', '#10b981'][index % 5]} \n                        />\n                      ))}\n                    </Pie>\n                    <Tooltip \n                      contentStyle={{\n                        backgroundColor: isDarkMode ? '#1f2937' : '#ffffff',\n                        border: isDarkMode ? '1px solid #374151' : '1px solid #e5e7eb',\n                        borderRadius: '6px',\n                        color: isDarkMode ? '#ffffff' : '#000000'\n                      }}\n                      formatter={(value: number) => [`${value} orders`, 'Sales']}\n                    />\n                    <Legend \n                      wrapperStyle={{\n                        color: isDarkMode ? '#ffffff' : '#000000'\n                      }}\n                    />\n                  </PieChart>\n                </ResponsiveContainer>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className={`lg:col-span-2 ${isDarkMode ? 'bg-gray-800 border-gray-700' : ''}`}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Performance Metrics</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Combined view of key indicators\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"h-[300px] w-full\">\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <BarChart\n                    data={chartData}\n                    margin={{ top: 20, right: 30, left: 20, bottom: 5 }}\n                  >\n                    <CartesianGrid \n                      strokeDasharray=\"3 3\" \n                      stroke={isDarkMode ? '#374151' : '#e5e7eb'}\n                    />\n                    <XAxis \n                      dataKey=\"date\" \n                      stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                      tick={{ fill: isDarkMode ? '#9ca3af' : '#6b7280' }}\n                      tickFormatter={(value) => new Date(value).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n                    />\n                    <YAxis \n                      stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                      tick={{ fill: isDarkMode ? '#9ca3af' : '#6b7280' }}\n                    />\n                    <Tooltip \n                      contentStyle={{\n                        backgroundColor: isDarkMode ? '#1f2937' : '#ffffff',\n                        border: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\n                        borderRadius: '8px',\n                        color: isDarkMode ? '#f3f4f6' : '#111827'\n                      }}\n                      labelStyle={{ color: isDarkMode ? '#f3f4f6' : '#111827' }}\n                      formatter={(value: number) => value.toLocaleString()}\n                      labelFormatter={(label) => new Date(label).toLocaleDateString('en-US', { month: 'long', day: 'numeric', year: 'numeric' })}\n                    />\n                    <Legend \n                      wrapperStyle={{ color: isDarkMode ? '#9ca3af' : '#6b7280' }}\n                      iconType=\"rect\"\n                    />\n                    <Bar \n                      dataKey=\"revenue\" \n                      fill=\"#3b82f6\" \n                      radius={[8, 8, 0, 0]}\n                      name=\"Revenue ($)\"\n                    />\n                    <Bar \n                      dataKey=\"users\" \n                      fill=\"#10b981\" \n                      radius={[8, 8, 0, 0]}\n                      name=\"Users\"\n                    />\n                    <Bar \n                      dataKey=\"orders\" \n                      fill=\"#f59e0b\" \n                      radius={[8, 8, 0, 0]}\n                      name=\"Orders\"\n                    />\n                  </BarChart>\n                </ResponsiveContainer>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n          <CardHeader>\n            <CardTitle className={isDarkMode ? 'text-white' : ''}>Top Products</CardTitle>\n            <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n              Best performing products by revenue\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              <div className=\"overflow-x-auto\">\n                <Table>\n                  <TableHeader>\n                    <TableRow className={isDarkMode ? 'border-gray-700' : ''}>\n                      <TableHead className={isDarkMode ? 'text-gray-300' : ''}>\n                        <Button\n                          variant=\"ghost\"\n                          onClick={() => handleSort('product')}\n                          className={`flex items-center gap-1 ${isDarkMode ? 'hover:bg-gray-700' : ''}`}\n                        >\n                          Product\n                          <ArrowUpDown className=\"h-4 w-4\" />\n                        </Button>\n                      </TableHead>\n                      <TableHead className={isDarkMode ? 'text-gray-300' : ''}>\n                        <Button\n                          variant=\"ghost\"\n                          onClick={() => handleSort('sales')}\n                          className={`flex items-center gap-1 ${isDarkMode ? 'hover:bg-gray-700' : ''}`}\n                        >\n                          Sales\n                          <ArrowUpDown className=\"h-4 w-4\" />\n                        </Button>\n                      </TableHead>\n                      <TableHead className={isDarkMode ? 'text-gray-300' : ''}>\n                        <Button\n                          variant=\"ghost\"\n                          onClick={() => handleSort('revenue')}\n                          className={`flex items-center gap-1 ${isDarkMode ? 'hover:bg-gray-700' : ''}`}\n                        >\n                          Revenue\n                          <ArrowUpDown className=\"h-4 w-4\" />\n                        </Button>\n                      </TableHead>\n                      <TableHead className={isDarkMode ? 'text-gray-300' : ''}>\n                        <Button\n                          variant=\"ghost\"\n                          onClick={() => handleSort('status')}\n                          className={`flex items-center gap-1 ${isDarkMode ? 'hover:bg-gray-700' : ''}`}\n                        >\n                          Status\n                          <ArrowUpDown className=\"h-4 w-4\" />\n                        </Button>\n                      </TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {paginatedData().map((row) => (\n                      <TableRow \n                        key={row.id}\n                        className={isDarkMode ? 'border-gray-700 hover:bg-gray-700/50' : ''}\n                      >\n                        <TableCell className={`font-medium ${isDarkMode ? 'text-gray-200' : ''}`}>\n                          {row.product}\n                        </TableCell>\n                        <TableCell className={isDarkMode ? 'text-gray-300' : ''}>\n                          {row.sales.toLocaleString()}\n                        </TableCell>\n                        <TableCell className={isDarkMode ? 'text-gray-300' : ''}>\n                          ${row.revenue.toLocaleString()}\n                        </TableCell>\n                        <TableCell>\n                          <Badge \n                            variant={getStatusBadgeVariant(row.status)}\n                            className=\"capitalize\"\n                          >\n                            {row.status}\n                          </Badge>\n                        </TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              </div>\n\n              <div className=\"flex flex-col sm:flex-row items-center justify-between gap-4 pt-4\">\n                <p className={`text-sm ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                  Showing {((currentPage - 1) * ITEMS_PER_PAGE) + 1} to {Math.min(currentPage * ITEMS_PER_PAGE, tableData.length)} of {tableData.length} products\n                </p>\n                \n                <div className=\"flex items-center gap-2\">\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => setCurrentPage(prev => Math.max(1, prev - 1))}\n                    disabled={currentPage === 1}\n                    className={isDarkMode ? 'border-gray-700' : ''}\n                  >\n                    <ChevronLeft className=\"h-4 w-4\" />\n                    Previous\n                  </Button>\n                  \n                  <div className=\"flex items-center gap-1\">\n                    {Array.from({ length: totalPages }, (_, i) => i + 1).map((page) => (\n                      <Button\n                        key={page}\n                        variant={currentPage === page ? 'default' : 'outline'}\n                        size=\"sm\"\n                        onClick={() => setCurrentPage(page)}\n                        className={`w-8 h-8 p-0 ${isDarkMode && currentPage !== page ? 'border-gray-700' : ''}`}\n                      >\n                        {page}\n                      </Button>\n                    ))}\n                  </div>\n                  \n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => setCurrentPage(prev => Math.min(totalPages, prev + 1))}\n                    disabled={currentPage === totalPages}\n                    className={isDarkMode ? 'border-gray-700' : ''}\n                  >\n                    Next\n                    <ChevronRight className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 md:gap-6 mt-8\">\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader className=\"pb-3\">\n              <div className=\"flex items-center justify-between\">\n                <CardTitle className={`text-lg ${isDarkMode ? 'text-white' : ''}`}>\n                  Live Status\n                </CardTitle>\n                <div className=\"flex items-center gap-2\">\n                  {isLive && (\n                    <span className=\"relative flex h-3 w-3\">\n                      <span className=\"animate-ping absolute inline-flex h-full w-full rounded-full bg-green-400 opacity-75\"></span>\n                      <span className=\"relative inline-flex rounded-full h-3 w-3 bg-green-500\"></span>\n                    </span>\n                  )}\n                  <Wifi className={`h-4 w-4 ${isLive ? 'text-green-500' : 'text-gray-400'}`} />\n                </div>\n              </div>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-2\">\n                <div className=\"flex items-center justify-between\">\n                  <span className={`text-sm ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                    Connection\n                  </span>\n                  <span className={`text-sm font-medium ${isLive ? 'text-green-500' : 'text-gray-400'}`}>\n                    {isLive ? 'Active' : 'Inactive'}\n                  </span>\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <span className={`text-sm ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                    Last Update\n                  </span>\n                  <span className={`text-sm font-medium ${isDarkMode ? 'text-gray-300' : 'text-gray-900'}`}>\n                    {lastUpdate.toLocaleTimeString()}\n                  </span>\n                </div>\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => setIsLive(!isLive)}\n                  className={`w-full mt-2 ${isDarkMode ? 'border-gray-700' : ''}`}\n                >\n                  {isLive ? 'Pause' : 'Resume'} Updates\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader className=\"pb-3\">\n              <div className=\"flex items-center justify-between\">\n                <CardTitle className={`text-lg ${isDarkMode ? 'text-white' : ''}`}>\n                  Data Sync\n                </CardTitle>\n                <Database className={`h-5 w-5 ${isDarkMode ? 'text-blue-400' : 'text-blue-500'}`} />\n              </div>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-2\">\n                <div className=\"flex items-center justify-between\">\n                  <span className={`text-sm ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                    Updates Received\n                  </span>\n                  <span className={`text-sm font-medium ${isDarkMode ? 'text-gray-300' : 'text-gray-900'}`}>\n                    {updateCount}\n                  </span>\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <span className={`text-sm ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                    Sync Status\n                  </span>\n                  <span className=\"text-sm font-medium text-blue-500\">\n                    Synchronized\n                  </span>\n                </div>\n                <div className=\"w-full bg-gray-200 dark:bg-gray-700 rounded-full h-2 mt-2\">\n                  <div \n                    className=\"bg-blue-500 h-2 rounded-full transition-all duration-500\"\n                    style={{ width: '100%' }}\n                  ></div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader className=\"pb-3\">\n              <div className=\"flex items-center justify-between\">\n                <CardTitle className={`text-lg ${isDarkMode ? 'text-white' : ''}`}>\n                  Activity Monitor\n                </CardTitle>\n                <Activity className={`h-5 w-5 ${isDarkMode ? 'text-purple-400' : 'text-purple-500'}`} />\n              </div>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-2\">\n                <div className=\"flex items-center justify-between\">\n                  <span className={`text-sm ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                    Active Sessions\n                  </span>\n                  <span className={`text-sm font-medium ${isDarkMode ? 'text-gray-300' : 'text-gray-900'}`}>\n                    {Math.floor(Math.random() * 50) + 150}\n                  </span>\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <span className={`text-sm ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                    Performance\n                  </span>\n                  <div className=\"flex items-center gap-1\">\n                    <TrendingUp className=\"h-3 w-3 text-green-500\" />\n                    <span className=\"text-sm font-medium text-green-500\">\n                      Optimal\n                    </span>\n                  </div>\n                </div>\n                <div className=\"flex items-center gap-2 mt-2 p-2 rounded-md bg-purple-50 dark:bg-purple-900/20\">\n                  <span className=\"relative flex h-2 w-2\">\n                    <span className=\"animate-ping absolute inline-flex h-full w-full rounded-full bg-purple-400 opacity-75\"></span>\n                    <span className=\"relative inline-flex rounded-full h-2 w-2 bg-purple-500\"></span>\n                  </span>\n                  <span className={`text-xs ${isDarkMode ? 'text-purple-300' : 'text-purple-700'}`}>\n                    Real-time monitoring active\n                  </span>\n                </div>\n              </div>\n            </CardContent>\n          </Card></parameter>\n</invoke>\n        </div>\n      </div>\n    </div>\n  );\n}",
    "error": null,
    "elapsed_time": 89.36295413970947,
    "success": true
  }
}