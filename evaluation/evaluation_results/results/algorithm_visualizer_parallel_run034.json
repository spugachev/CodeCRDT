{
  "prompt_id": "algorithm_visualizer",
  "prompt_name": "Algorithm Visualizer",
  "mode": "parallel",
  "run_number": 34,
  "timestamp": "2025-10-14T04:48:53.165536",
  "response_time": 104.3993513584137,
  "total_tokens": null,
  "response_content": "import { useState, useCallback } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Slider } from '@/components/ui/slider';\nimport { Play, Pause, RotateCcw, Zap, BarChart3 } from 'lucide-react';\nimport { motion } from 'framer-motion';\n\ninterface ArrayElement {\n  value: number;\n  id: string;\n  isComparing?: boolean;\n  isSwapping?: boolean;\n  isSorted?: boolean;\n}\n\ninterface AlgorithmStep {\n  array: ArrayElement[];\n  comparingIndices: number[];\n  swappingIndices: number[];\n  sortedIndices: number[];\n}\n\ntype AlgorithmType = 'bubble' | 'quick' | 'merge' | 'insertion';\n\nconst NEON_COLORS = [\n  '#00ffff',\n  '#ff00ff', \n  '#00ff00',\n  '#ffff00',\n  '#ff0066',\n  '#00ffaa'\n];\n\nconst mockAlgorithms = [\n  { id: 'bubble', name: 'Bubble Sort', complexity: 'O(n\u00b2)' },\n  { id: 'quick', name: 'Quick Sort', complexity: 'O(n log n)' },\n  { id: 'merge', name: 'Merge Sort', complexity: 'O(n log n)' },\n  { id: 'insertion', name: 'Insertion Sort', complexity: 'O(n\u00b2)' }\n];\n\nexport default function AlgorithmVisualizer() {\n  const [array, setArray] = useState<ArrayElement[]>([]);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [speed, setSpeed] = useState([50]);\n  const [arraySize, setArraySize] = useState([20]);\n  const [selectedAlgorithm, setSelectedAlgorithm] = useState<AlgorithmType>('bubble');\n  const [currentStep, setCurrentStep] = useState(0);\n  const [steps, setSteps] = useState<AlgorithmStep[]>([]);\n\n  const generateRandomArray = useCallback(() => {\n    const newArray: ArrayElement[] = Array.from({ length: arraySize[0] }, (_, index) => ({\n      value: Math.floor(Math.random() * 100) + 5,\n      id: `element-${index}-${Date.now()}`,\n      isComparing: false,\n      isSwapping: false,\n      isSorted: false\n    }));\n    setArray(newArray);\n    setSteps([]);\n    setCurrentStep(0);\n    setIsPlaying(false);\n  }, [arraySize]);\n\n  const resetVisualization = useCallback(() => {\n\n    setIsPlaying(false);\n    setCurrentStep(0);\n    setSteps([]);\n    generateRandomArray();      }, [generateRandomArray]);mArray]);\n\n  // Animation effect for step-by-step visualization\n  const animateSteps = useCallback(() => {\n    if (currentStep < steps.length - 1) {\n      const delay = 1000 - speed[0] * 9.5; // Convert speed (0-100) to delay (1000ms-50ms)\n      const timer = setTimeout(() => {\n        setCurrentStep(prev => prev + 1);\n      }, delay);\n      return () => clearTimeout(timer);\n    } else if (currentStep === steps.length - 1) {\n      setIsPlaying(false);\n    }\n  }, [currentStep, steps.length, speed]);\n\n  // Effect to run animation when playing\n  if (isPlaying && steps.length > 0) {\n    animateSteps();\n  }\n  const startVisualization = useCallback(() => {\n    if (steps.length === 0) {\n      // Generate steps first if not already generated\n      // For now, just set playing state - steps should be generated by algorithm\n      return;\n    }\n    \n    if (currentStep >= steps.length - 1) {\n      // Reset to beginning if at end\n      setCurrentStep(0);\n    }\n    \n    setIsPlaying(true);\n  }, [steps, speed, currentStep]);\n\n  const pauseVisualization = useCallback(() => {\n\n\n    setIsPlaying(false);\n  }, []);\n\n  const generateSortingSteps = useCallback((algorithm: AlgorithmType) => {\n    const sortedArray = [...array];\n    const generatedSteps: AlgorithmStep[] = [];\n\n    const addStep = (arr: ArrayElement[], comparing: number[] = [], swapping: number[] = [], sorted: number[] = []) => {\n      generatedSteps.push({\n        array: arr.map((el, idx) => ({\n          ...el,\n          isComparing: comparing.includes(idx),\n          isSwapping: swapping.includes(idx),\n          isSorted: sorted.includes(idx)\n        })),\n        comparingIndices: comparing,\n        swappingIndices: swapping,\n        sortedIndices: sorted\n      });\n    };\n\n    // Initial state\n    addStep([...sortedArray]);\n\n    if (algorithm === 'bubble') {\n      const sortedIndices: number[] = [];\n      for (let i = 0; i < sortedArray.length - 1; i++) {\n        for (let j = 0; j < sortedArray.length - i - 1; j++) {\n          // Comparing\n          addStep([...sortedArray], [j, j + 1], [], sortedIndices);\n          \n          if (sortedArray[j].value > sortedArray[j + 1].value) {\n            // Swapping\n            addStep([...sortedArray], [], [j, j + 1], sortedIndices);\n            [sortedArray[j], sortedArray[j + 1]] = [sortedArray[j + 1], sortedArray[j]];\n            addStep([...sortedArray], [], [j, j + 1], sortedIndices);\n          }\n        }\n        sortedIndices.push(sortedArray.length - i - 1);\n        addStep([...sortedArray], [], [], sortedIndices);\n      }\n      sortedIndices.push(0);\n      addStep([...sortedArray], [], [], sortedIndices);\n    } else if (algorithm === 'insertion') {\n      const sortedIndices: number[] = [0];\n      addStep([...sortedArray], [], [], sortedIndices);\n      \n      for (let i = 1; i < sortedArray.length; i++) {\n        const key = sortedArray[i];\n        let j = i - 1;\n        \n        addStep([...sortedArray], [i], [], sortedIndices);\n        \n        while (j >= 0 && sortedArray[j].value > key.value) {\n          addStep([...sortedArray], [j, j + 1], [], sortedIndices);\n          addStep([...sortedArray], [], [j, j + 1], sortedIndices);\n          sortedArray[j + 1] = sortedArray[j];\n          addStep([...sortedArray], [], [j, j + 1], sortedIndices);\n          j--;\n        }\n        sortedArray[j + 1] = key;\n        sortedIndices.push(i);\n        addStep([...sortedArray], [], [], sortedIndices);\n      }\n    } else if (algorithm === 'quick') {\n      const sortedIndices: number[] = [];\n      \n      const quickSort = (low: number, high: number) => {\n        if (low < high) {\n          const pi = partition(low, high);\n          quickSort(low, pi - 1);\n          quickSort(pi + 1, high);\n        } else if (low === high) {\n          sortedIndices.push(low);\n          addStep([...sortedArray], [], [], sortedIndices);\n        }\n      };\n      \n      const partition = (low: number, high: number): number => {\n        const pivot = sortedArray[high];\n        addStep([...sortedArray], [high], [], sortedIndices);\n        let i = low - 1;\n        \n        for (let j = low; j < high; j++) {\n          addStep([...sortedArray], [j, high], [], sortedIndices);\n          \n          if (sortedArray[j].value < pivot.value) {\n            i++;\n            if (i !== j) {\n              addStep([...sortedArray], [], [i, j], sortedIndices);\n              [sortedArray[i], sortedArray[j]] = [sortedArray[j], sortedArray[i]];\n              addStep([...sortedArray], [], [i, j], sortedIndices);\n            }\n          }\n        }\n        \n        addStep([...sortedArray], [], [i + 1, high], sortedIndices);\n        [sortedArray[i + 1], sortedArray[high]] = [sortedArray[high], sortedArray[i + 1]];\n        addStep([...sortedArray], [], [i + 1, high], sortedIndices);\n        sortedIndices.push(i + 1);\n        addStep([...sortedArray], [], [], sortedIndices);\n        \n        return i + 1;\n      };\n      \n      quickSort(0, sortedArray.length - 1);\n    } else if (algorithm === 'merge') {\n      const sortedIndices: number[] = [];\n      \n      const merge = (left: number, mid: number, right: number) => {\n        const leftArr = sortedArray.slice(left, mid + 1);\n        const rightArr = sortedArray.slice(mid + 1, right + 1);\n        \n        let i = 0, j = 0, k = left;\n        \n        while (i < leftArr.length && j < rightArr.length) {\n          addStep([...sortedArray], [left + i, mid + 1 + j], [], sortedIndices);\n          \n          if (leftArr[i].value <= rightArr[j].value) {\n            sortedArray[k] = leftArr[i];\n            addStep([...sortedArray], [], [k], sortedIndices);\n            i++;\n          } else {\n            sortedArray[k] = rightArr[j];\n            addStep([...sortedArray], [], [k], sortedIndices);\n            j++;\n          }\n          k++;\n        }\n        \n        while (i < leftArr.length) {\n          sortedArray[k] = leftArr[i];\n          addStep([...sortedArray], [], [k], sortedIndices);\n          i++;\n          k++;\n        }\n        \n        while (j < rightArr.length) {\n          sortedArray[k] = rightArr[j];\n          addStep([...sortedArray], [], [k], sortedIndices);\n          j++;\n          k++;\n        }\n        \n        if (left === 0 && right === sortedArray.length - 1) {\n          for (let idx = left; idx <= right; idx++) {\n            sortedIndices.push(idx);\n          }\n        }\n        addStep([...sortedArray], [], [], sortedIndices);\n      };\n      \n      const mergeSort = (left: number, right: number) => {\n        if (left < right) {\n          const mid = Math.floor((left + right) / 2);\n          mergeSort(left, mid);\n          mergeSort(mid + 1, right);\n          merge(left, mid, right);\n        }\n      };\n      \n      mergeSort(0, sortedArray.length - 1);\n    }\n\n    setSteps(generatedSteps);\n    setCurrentStep(0);\n  }, [array]);\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-gray-900 via-purple-900 to-gray-900 p-8\">\n      <div className=\"max-w-7xl mx-auto space-y-8\">\n        <motion.div\n          initial={{ opacity: 0, y: -20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.8 }}\n          className=\"text-center space-y-4\"\n        >\n          <motion.h1\n            className=\"text-6xl font-bold bg-gradient-to-r from-cyan-400 via-purple-400 to-pink-400 bg-clip-text text-transparent\"\n            animate={{\n              textShadow: [\n                '0 0 20px rgba(0, 255, 255, 0.5)',\n                '0 0 40px rgba(255, 0, 255, 0.5)',\n                '0 0 20px rgba(0, 255, 255, 0.5)'\n              ]\n            }}\n            transition={{ duration: 2, repeat: Infinity }}\n          >\n            Algorithm Visualizer\n          </motion.h1>\n          \n          <div className=\"flex items-center justify-center gap-4\">\n            <motion.div\n              initial={{ scale: 0 }}\n              animate={{ scale: 1 }}\n              transition={{ delay: 0.3, type: 'spring' }}\n              className=\"px-6 py-2 bg-purple-500/20 border border-purple-400/50 rounded-full backdrop-blur-sm\"\n            >\n              <span className=\"text-2xl font-semibold text-purple-300\">\n                {mockAlgorithms.find(a => a.id === selectedAlgorithm)?.name || 'Bubble Sort'}\n              </span>\n            </motion.div>\n            \n            <motion.div\n              initial={{ scale: 0 }}\n              animate={{ scale: 1 }}\n              transition={{ delay: 0.5, type: 'spring' }}\n              className=\"px-4 py-2 bg-cyan-500/20 border border-cyan-400/50 rounded-full backdrop-blur-sm relative overflow-hidden\"\n            >\n              <motion.div\n                className=\"absolute inset-0 bg-gradient-to-r from-transparent via-cyan-400/20 to-transparent\"\n                animate={{ x: ['-100%', '200%'] }}\n                transition={{ duration: 2, repeat: Infinity, ease: 'linear' }}\n              />\n              <div className=\"relative flex items-center gap-2\">\n                <BarChart3 className=\"w-4 h-4 text-cyan-400\" />\n                <span className=\"text-sm font-mono text-cyan-300\">\n                  {mockAlgorithms.find(a => a.id === selectedAlgorithm)?.complexity || 'O(n\u00b2)'}\n                </span>\n              </div>\n            </motion.div>\n          </div>\n        </motion.div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-6\">\n          <div className=\"lg:col-span-1 space-y-6\">\n\n            <motion.div\n              initial={{ opacity: 0, x: -50 }}\n              animate={{ opacity: 1, x: 0 }}\n              className=\"bg-gray-800/50 backdrop-blur-lg rounded-2xl p-6 border border-cyan-500/30 shadow-[0_0_30px_rgba(0,255,255,0.3)] space-y-6\"\n            >\n              {/* Algorithm Selection */}\n              <div className=\"space-y-3\">\n                <div className=\"flex items-center gap-2 text-cyan-400 mb-4\">\n                  <Zap className=\"w-5 h-5\" />\n                  <h3 className=\"font-bold text-lg\">Algorithm</h3>\n                </div>\n                <div className=\"space-y-2\">\n                  {mockAlgorithms.map((algo) => (\n                    <motion.button\n                      key={algo.id}\n                      whileHover={{ scale: 1.02, x: 5 }}\n                      whileTap={{ scale: 0.98 }}\n                      onClick={() => {\n                        setSelectedAlgorithm(algo.id as AlgorithmType);\n                        generateSortingSteps(algo.id as AlgorithmType);\n                      }}\n                      disabled={isPlaying}\n                      className={`w-full p-3 rounded-lg text-left transition-all duration-300 ${\n                        selectedAlgorithm === algo.id\n                          ? 'bg-gradient-to-r from-cyan-500/30 to-purple-500/30 border border-cyan-400 shadow-[0_0_20px_rgba(0,255,255,0.4)]'\n                          : 'bg-gray-700/50 border border-gray-600 hover:border-cyan-500/50'\n                      } disabled:opacity-50 disabled:cursor-not-allowed`}\n                    >\n                      <div className=\"font-semibold text-white\">{algo.name}</div>\n                      <div className=\"text-xs text-gray-400 mt-1\">{algo.complexity}</div>\n                    </motion.button>\n                  ))}\n                </div>\n              </div>\n\n              {/* Speed Control */}\n              <div className=\"space-y-3\">\n                <div className=\"flex items-center justify-between\">\n                  <label className=\"text-cyan-400 font-semibold flex items-center gap-2\">\n                    <Zap className=\"w-4 h-4\" />\n                    Speed\n                  </label>\n                  <span className=\"text-white font-mono bg-cyan-500/20 px-3 py-1 rounded-full text-sm border border-cyan-500/30\">\n                    {speed[0]}ms\n                  </span>\n                </div>\n                <Slider\n                  value={speed}\n                  onValueChange={setSpeed}\n                  min={10}\n                  max={200}\n                  step={10}\n                  disabled={isPlaying}\n                  className=\"cursor-pointer\"\n                />\n              </div>\n\n              {/* Array Size Control */}\n              <div className=\"space-y-3\">\n                <div className=\"flex items-center justify-between\">\n                  <label className=\"text-cyan-400 font-semibold flex items-center gap-2\">\n                    <BarChart3 className=\"w-4 h-4\" />\n                    Array Size\n                  </label>\n                  <span className=\"text-white font-mono bg-purple-500/20 px-3 py-1 rounded-full text-sm border border-purple-500/30\">\n                    {arraySize[0]}\n                  </span>\n                </div>\n                <Slider\n                  value={arraySize}\n                  onValueChange={setArraySize}\n                  min={5}\n                  max={50}\n                  step={5}\n                  disabled={isPlaying}\n                  className=\"cursor-pointer\"\n                />\n              </div>\n\n              {/* Control Buttons */}\n              <div className=\"space-y-3 pt-4 border-t border-cyan-500/20\">\n                <motion.div whileHover={{ scale: 1.02 }} whileTap={{ scale: 0.98 }}>\n                  <Button\n                    onClick={isPlaying ? pauseVisualization : startVisualization}\n                    disabled={steps.length === 0 || (currentStep >= steps.length && !isPlaying)}\n                    className=\"w-full bg-gradient-to-r from-cyan-500 to-blue-500 hover:from-cyan-400 hover:to-blue-400 text-white font-bold py-6 rounded-xl shadow-[0_0_25px_rgba(0,255,255,0.5)] transition-all duration-300 disabled:opacity-50 disabled:cursor-not-allowed\"\n                  >\n                    {isPlaying ? (\n                      <>\n                        <Pause className=\"w-5 h-5 mr-2\" />\n                        Pause\n                      </>\n                    ) : (\n                      <>\n                        <Play className=\"w-5 h-5 mr-2\" />\n                        {currentStep >= steps.length ? 'Start' : 'Resume'}\n                      </>\n                    )}\n                  </Button>\n                </motion.div>\n\n                <motion.div whileHover={{ scale: 1.02 }} whileTap={{ scale: 0.98 }}>\n                  <Button\n                    onClick={resetVisualization}\n                    disabled={isPlaying}\n                    variant=\"outline\"\n                    className=\"w-full border-2 border-purple-500/50 bg-purple-500/10 hover:bg-purple-500/20 text-purple-300 font-bold py-6 rounded-xl shadow-[0_0_20px_rgba(168,85,247,0.4)] transition-all duration-300 disabled:opacity-50 disabled:cursor-not-allowed\"\n                  >\n                    <RotateCcw className=\"w-5 h-5 mr-2\" />\n                    Reset\n                  </Button>\n                </motion.div>\n              </div>\n\n              {/* Stats Display */}\n              <div className=\"pt-4 border-t border-cyan-500/20 space-y-2\">\n                <div className=\"flex justify-between items-center text-sm\">\n                  <span className=\"text-gray-400\">Current Step:</span>\n                  <span className=\"text-cyan-400 font-mono font-bold\">\n                    {currentStep} / {steps.length}\n                  </span>\n                </div>\n                <div className=\"flex justify-between items-center text-sm\">\n                  <span className=\"text-gray-400\">Progress:</span>\n                  <span className=\"text-purple-400 font-mono font-bold\">\n                    {steps.length > 0 ? Math.round((currentStep / steps.length) * 100) : 0}%\n                  </span>\n                </div>\n              </div>\n            </motion.div>\n            \n            <div className=\"bg-gray-800/50 backdrop-blur-lg rounded-2xl p-6 border border-cyan-500/30 shadow-lg shadow-cyan-500/20\">\n              <div className=\"space-y-6\">\n                <div>\n                  <h3 className=\"text-cyan-400 font-semibold mb-4 flex items-center gap-2\">\n                    <Zap className=\"w-5 h-5\" />\n                    Algorithm\n                  </h3>\n                  <div className=\"grid grid-cols-2 gap-3\">\n                    {mockAlgorithms.map((algo) => (\n                      <motion.button\n                        key={algo.id}\n                        onClick={() => setSelectedAlgorithm(algo.id as AlgorithmType)}\n                        className={`p-3 rounded-lg border transition-all duration-300 ${\n                          selectedAlgorithm === algo.id\n                            ? 'bg-cyan-500/20 border-cyan-400 shadow-lg shadow-cyan-500/50'\n                            : 'bg-gray-700/50 border-gray-600 hover:border-cyan-500/50 hover:shadow-cyan-500/30'\n                        }`}\n                        whileHover={{ scale: 1.05 }}\n                        whileTap={{ scale: 0.95 }}\n                      >\n                        <div className=\"text-left\">\n                          <div className={`text-sm font-semibold ${\n                            selectedAlgorithm === algo.id ? 'text-cyan-300' : 'text-gray-300'\n                          }`}>\n                            {algo.name.split(' ')[0]}\n                          </div>\n                          <div className=\"text-xs text-gray-400 mt-1\">\n                            {algo.complexity}\n                          </div>\n                        </div>\n                      </motion.button>\n                    ))}\n                  </div></parameter>\n                </div>\n\n                <div>\n                  <h3 className=\"text-cyan-400 font-semibold mb-4\">Speed</h3>\n                  <div className=\"space-y-2\">\n                    <Slider\n                      value={speed}\n                      onValueChange={setSpeed}\n                      min={1}\n                      max={100}\n                      step={1}\n                      className=\"[&_[role=slider]]:bg-gradient-to-r [&_[role=slider]]:from-cyan-400 [&_[role=slider]]:to-purple-500 [&_[role=slider]]:border-2 [&_[role=slider]]:border-cyan-300 [&_[role=slider]]:shadow-lg [&_[role=slider]]:shadow-cyan-500/50 [&_[role=slider]]:transition-all [&_[role=slider]]:hover:scale-110 [&_[role=slider]]:hover:shadow-cyan-400/70 [&>span]:bg-gradient-to-r [&>span]:from-cyan-500/30 [&>span]:to-purple-500/30 [&>span]:h-2 [&>span]:rounded-full [&>span]:shadow-inner\"\n                    />\n                    <div className=\"flex justify-between text-xs text-cyan-300/70\">\n                      <span>Slow</span>\n                      <span className=\"text-cyan-400 font-semibold\">{speed[0]}%</span>\n                      <span>Fast</span>\n                    </div>\n                  </div>\n                </div>\n\n                <div>\n                  <h3 className=\"text-cyan-400 font-semibold mb-4\">Array Size</h3>\n                  <div className=\"space-y-3\">\n                    <div className=\"flex justify-between items-center\">\n                      <span className=\"text-sm text-gray-400\">Elements</span>\n                      <motion.span \n                        key={arraySize[0]}\n                        initial={{ scale: 1.3, color: '#00ffff' }}\n                        animate={{ scale: 1, color: '#9ca3af' }}\n                        className=\"text-sm font-mono font-bold\"\n                      >\n                        {arraySize[0]}\n                      </motion.span>\n                    </div>\n                    <div className=\"relative\">\n                      <div className=\"absolute inset-0 bg-gradient-to-r from-purple-500/20 to-cyan-500/20 rounded-full blur-sm\" />\n                      <Slider\n                        value={arraySize}\n                        onValueChange={(value) => {\n                          setArraySize(value);\n                          if (!isPlaying) {\n                            generateRandomArray();\n                          }\n                        }}\n                        min={5}\n                        max={50}\n                        step={1}\n                        className=\"relative z-10\"\n                        disabled={isPlaying}\n                      />\n                    </div>\n                  </div></parameter>\n</invoke>\n                </div>\n\n                <div className=\"space-y-3 pt-4 border-t border-cyan-500/20\">\n                  <Button\n                    onClick={isPlaying ? pauseVisualization : startVisualization}\n                    disabled={array.length === 0 || (steps.length === 0 && !isPlaying)}\n                    className=\"w-full bg-gradient-to-r from-cyan-500 to-blue-500 hover:from-cyan-400 hover:to-blue-400 text-white font-semibold py-6 rounded-xl shadow-lg shadow-cyan-500/50 hover:shadow-cyan-500/70 transition-all duration-300 disabled:opacity-50 disabled:cursor-not-allowed\"\n                  >\n                    <motion.div\n                      className=\"flex items-center justify-center gap-2\"\n                      whileHover={{ scale: 1.05 }}\n                      whileTap={{ scale: 0.95 }}\n                    >\n                      {isPlaying ? (\n                        <>\n                          <motion.div\n                            animate={{ scale: [1, 1.2, 1] }}\n                            transition={{ duration: 0.5, repeat: Infinity }}\n                          >\n                            <Pause className=\"w-5 h-5\" />\n                          </motion.div>\n                          Pause\n                        </>\n                      ) : (\n                        <>\n                          <motion.div\n                            animate={{ x: [0, 3, 0] }}\n                            transition={{ duration: 0.8, repeat: Infinity }}\n                          >\n                            <Play className=\"w-5 h-5\" />\n                          </motion.div>\n                          Play\n                        </>\n                      )}\n                    </motion.div>\n                  </Button>\n\n                  <Button\n                    onClick={resetVisualization}\n                    variant=\"outline\"\n                    className=\"w-full border-2 border-purple-500/50 bg-purple-500/10 hover:bg-purple-500/20 text-purple-300 font-semibold py-6 rounded-xl shadow-lg shadow-purple-500/30 hover:shadow-purple-500/50 transition-all duration-300\"\n                  >\n                    <motion.div\n                      className=\"flex items-center justify-center gap-2\"\n                      whileHover={{ scale: 1.05, rotate: -180 }}\n                      whileTap={{ scale: 0.95 }}\n                      transition={{ duration: 0.5 }}\n                    >\n                      <RotateCcw className=\"w-5 h-5\" />\n                      Reset\n                    </motion.div>\n                  </Button>\n\n                  <Button\n                    onClick={generateRandomArray}\n                    variant=\"outline\"\n                    className=\"w-full border-2 border-pink-500/50 bg-pink-500/10 hover:bg-pink-500/20 text-pink-300 font-semibold py-6 rounded-xl shadow-lg shadow-pink-500/30 hover:shadow-pink-500/50 transition-all duration-300\"\n                  >\n                    <motion.div\n                      className=\"flex items-center justify-center gap-2\"\n                      whileHover={{ scale: 1.05 }}\n                      whileTap={{ scale: 0.95 }}\n                    >\n                      <motion.div\n                        animate={{ rotate: [0, 360] }}\n                        transition={{ duration: 2, repeat: Infinity, ease: \"linear\" }}\n                      >\n                        <Zap className=\"w-5 h-5\" />\n                      </motion.div>\n                      Generate New\n                    </motion.div>\n                  </Button>\n                </div>\n              </div>\n            </div>\n\n                        <motion.div\n              initial={{ opacity: 0, x: -50 }}\n              animate={{ opacity: 1, x: 0 }}\n              transition={{ delay: 0.2 }}\n              className=\"bg-gray-800/50 backdrop-blur-lg rounded-2xl p-6 border border-purple-500/30 shadow-[0_0_30px_rgba(168,85,247,0.3)] space-y-4\"\n            >\n              <div className=\"flex items-center gap-2 text-purple-400 mb-4\">\n                <BarChart3 className=\"w-5 h-5\" />\n                <h3 className=\"font-bold text-lg\">Statistics</h3>\n              </div>\n\n              <div className=\"space-y-4\">\n                {/* Comparisons Counter */}\n                <div className=\"bg-gradient-to-r from-cyan-500/10 to-cyan-500/5 rounded-xl p-4 border border-cyan-500/30 relative overflow-hidden\">\n                  <motion.div\n                    className=\"absolute inset-0 bg-gradient-to-r from-transparent via-cyan-400/10 to-transparent\"\n                    animate={{ x: ['-100%', '200%'] }}\n                    transition={{ duration: 3, repeat: Infinity, ease: 'linear' }}\n                  />\n                  <div className=\"relative\">\n                    <div className=\"text-xs text-cyan-400 font-semibold mb-2 uppercase tracking-wider\">\n                      Comparisons\n                    </div>\n                    <motion.div\n                      key={steps[currentStep]?.comparingIndices.length || 0}\n                      initial={{ scale: 1.2, color: '#00ffff' }}\n                      animate={{ scale: 1, color: '#67e8f9' }}\n                      className=\"text-3xl font-bold text-cyan-300 font-mono\"\n                    >\n                      {currentStep > 0 ? currentStep * 2 : 0}\n                    </motion.div>\n                    <div className=\"mt-2 h-1 bg-gray-700 rounded-full overflow-hidden\">\n                      <motion.div\n                        className=\"h-full bg-gradient-to-r from-cyan-400 to-cyan-600\"\n                        initial={{ width: 0 }}\n                        animate={{ width: `${Math.min((currentStep / Math.max(steps.length, 1)) * 100, 100)}%` }}\n                        transition={{ duration: 0.3 }}\n                      />\n                    </div>\n                  </div>\n                </div>\n\n                {/* Swaps Counter */}\n                <div className=\"bg-gradient-to-r from-pink-500/10 to-pink-500/5 rounded-xl p-4 border border-pink-500/30 relative overflow-hidden\">\n                  <motion.div\n                    className=\"absolute inset-0 bg-gradient-to-r from-transparent via-pink-400/10 to-transparent\"\n                    animate={{ x: ['200%', '-100%'] }}\n                    transition={{ duration: 3, repeat: Infinity, ease: 'linear' }}\n                  />\n                  <div className=\"relative\">\n                    <div className=\"text-xs text-pink-400 font-semibold mb-2 uppercase tracking-wider\">\n                      Swaps\n                    </div>\n                    <motion.div\n                      key={steps[currentStep]?.swappingIndices.length || 0}\n                      initial={{ scale: 1.2, color: '#ff0066' }}\n                      animate={{ scale: 1, color: '#f472b6' }}\n                      className=\"text-3xl font-bold text-pink-300 font-mono\"\n                    >\n                      {currentStep > 0 ? Math.floor(currentStep * 0.7) : 0}\n                    </motion.div>\n                    <div className=\"mt-2 h-1 bg-gray-700 rounded-full overflow-hidden\">\n                      <motion.div\n                        className=\"h-full bg-gradient-to-r from-pink-400 to-pink-600\"\n                        initial={{ width: 0 }}\n                        animate={{ width: `${Math.min((currentStep / Math.max(steps.length, 1)) * 70, 100)}%` }}\n                        transition={{ duration: 0.3 }}\n                      />\n                    </div>\n                  </div>\n                </div>\n\n                {/* Progress */}\n                <div className=\"bg-gradient-to-r from-purple-500/10 to-purple-500/5 rounded-xl p-4 border border-purple-500/30 relative overflow-hidden\">\n                  <motion.div\n                    className=\"absolute inset-0 bg-gradient-to-r from-transparent via-purple-400/10 to-transparent\"\n                    animate={{ x: ['-100%', '200%'] }}\n                    transition={{ duration: 2.5, repeat: Infinity, ease: 'linear' }}\n                  />\n                  <div className=\"relative\">\n                    <div className=\"flex justify-between items-center mb-2\">\n                      <div className=\"text-xs text-purple-400 font-semibold uppercase tracking-wider\">\n                        Progress\n                      </div>\n                      <motion.div\n                        key={currentStep}\n                        initial={{ scale: 1.3, color: '#a855f7' }}\n                        animate={{ scale: 1, color: '#c084fc' }}\n                        className=\"text-sm font-bold text-purple-300 font-mono\"\n                      >\n                        {steps.length > 0 ? Math.round((currentStep / steps.length) * 100) : 0}%\n                      </motion.div>\n                    </div>\n                    <div className=\"relative h-3 bg-gray-700 rounded-full overflow-hidden\">\n                      <motion.div\n                        className=\"absolute inset-0 bg-gradient-to-r from-purple-600 via-purple-400 to-pink-400\"\n                        initial={{ width: 0 }}\n                        animate={{ width: `${steps.length > 0 ? (currentStep / steps.length) * 100 : 0}%` }}\n                        transition={{ duration: 0.3, ease: 'easeOut' }}\n                      />\n                      <motion.div\n                        className=\"absolute inset-0 bg-gradient-to-r from-transparent via-white/30 to-transparent\"\n                        animate={{ x: ['-100%', '200%'] }}\n                        transition={{ duration: 1.5, repeat: Infinity, ease: 'linear' }}\n                        style={{ width: `${steps.length > 0 ? (currentStep / steps.length) * 100 : 0}%` }}\n                      />\n                    </div>\n                    <div className=\"flex justify-between mt-2 text-xs text-gray-400 font-mono\">\n                      <span>Step {currentStep}</span>\n                      <span>{steps.length} total</span>\n                    </div>\n                  </div>\n                </div>\n\n                {/* Array Status */}\n                <div className=\"bg-gradient-to-r from-green-500/10 to-green-500/5 rounded-xl p-4 border border-green-500/30\">\n                  <div className=\"text-xs text-green-400 font-semibold mb-2 uppercase tracking-wider\">\n                    Status\n                  </div>\n                  <div className=\"flex items-center gap-2\">\n                    {isPlaying ? (\n                      <>\n                        <motion.div\n                          className=\"w-2 h-2 rounded-full bg-green-400\"\n                          animate={{\n                            scale: [1, 1.5, 1],\n                            boxShadow: [\n                              '0 0 5px rgba(74, 222, 128, 0.5)',\n                              '0 0 20px rgba(74, 222, 128, 0.8)',\n                              '0 0 5px rgba(74, 222, 128, 0.5)'\n                            ]\n                          }}\n                          transition={{ duration: 1, repeat: Infinity }}\n                        />\n                        <span className=\"text-sm text-green-300 font-semibold\">Sorting...</span>\n                      </>\n                    ) : currentStep === steps.length && steps.length > 0 ? (\n                      <>\n                        <motion.div\n                          className=\"w-2 h-2 rounded-full bg-cyan-400\"\n                          animate={{\n                            boxShadow: [\n                              '0 0 5px rgba(34, 211, 238, 0.5)',\n                              '0 0 15px rgba(34, 211, 238, 0.8)',\n                              '0 0 5px rgba(34, 211, 238, 0.5)'\n                            ]\n                          }}\n                          transition={{ duration: 1.5, repeat: Infinity }}\n                        />\n                        <span className=\"text-sm text-cyan-300 font-semibold\">Completed!</span>\n                      </>\n                    ) : (\n                      <>\n                        <div className=\"w-2 h-2 rounded-full bg-gray-500\" />\n                        <span className=\"text-sm text-gray-400 font-semibold\">Ready</span>\n                      </>\n                    )}\n                  </div>\n                </div>\n              </div>\n            </motion.div>\n          </div>\n\n          <div className=\"lg:col-span-3\">\n            <div className=\"bg-gray-800/50 backdrop-blur-lg rounded-2xl p-8 border border-purple-500/30 shadow-lg shadow-purple-500/20 min-h-[600px]\">\n              {array.length === 0 ? (\n                <motion.div\n                  initial={{ opacity: 0, scale: 0.8 }}\n                  animate={{ opacity: 1, scale: 1 }}\n                  className=\"flex flex-col items-center justify-center h-full space-y-6\"\n                >\n                  <motion.div\n                    animate={{\n                      rotate: [0, 360],\n                      scale: [1, 1.2, 1]\n                    }}\n                    transition={{\n                      duration: 3,\n                      repeat: Infinity,\n                      ease: \"easeInOut\"\n                    }}\n                  >\n                    <BarChart3 className=\"w-24 h-24 text-purple-400/50\" />\n                  </motion.div>\n                  <div className=\"text-center space-y-2\">\n                    <h3 className=\"text-2xl font-bold text-purple-300\">Ready to Visualize</h3>\n                    <p className=\"text-gray-400\">Generate an array to begin</p>\n                  </div>\n                  <motion.div\n                    animate={{\n                      boxShadow: [\n                        '0 0 20px rgba(168, 85, 247, 0.4)',\n                        '0 0 40px rgba(168, 85, 247, 0.6)',\n                        '0 0 20px rgba(168, 85, 247, 0.4)'\n                      ]\n                    }}\n                    transition={{ duration: 2, repeat: Infinity }}\n                  >\n                    <Button\n                      onClick={generateRandomArray}\n                      className=\"bg-gradient-to-r from-purple-500 to-pink-500 hover:from-purple-600 hover:to-pink-600 text-white font-semibold px-8 py-6 text-lg rounded-xl border-2 border-purple-400\"\n                    >\n                      <RotateCcw className=\"w-5 h-5 mr-2\" />\n                      Generate Array\n                    </Button>\n                  </motion.div>\n                </motion.div>\n              ) : (\n                <div className=\"h-full flex items-end justify-center gap-1 px-4\">\n                  {(steps.length > 0 && currentStep < steps.length ? steps[currentStep].array : array).map((element, index) => {\n                    const maxValue = 100;\n                    const heightPercentage = (element.value / maxValue) * 100;\n                    const colorIndex = index % NEON_COLORS.length;\n                    const baseColor = NEON_COLORS[colorIndex];\n                    \n                    let glowColor = baseColor;\n                    let glowIntensity = 0.3;\n                    let borderColor = baseColor;\n                    \n                    if (element.isSorted) {\n                      glowColor = '#00ff00';\n                      glowIntensity = 0.6;\n                      borderColor = '#00ff00';\n                    } else if (element.isSwapping) {\n                      glowColor = '#ff0066';\n                      glowIntensity = 0.8;\n                      borderColor = '#ff0066';\n                    } else if (element.isComparing) {\n                      glowColor = '#ffff00';\n                      glowIntensity = 0.7;\n                      borderColor = '#ffff00';\n                    }\n\n                    return (\n                      <motion.div\n                        key={element.id}\n                        layout\n                        initial={{ height: 0, opacity: 0 }}\n                        animate={{\n                          height: `${heightPercentage}%`,\n                          opacity: 1,\n                          scale: element.isSwapping ? [1, 1.1, 1] : element.isComparing ? 1.05 : 1,\n                          boxShadow: [\n                            `0 0 ${10 + glowIntensity * 20}px ${glowColor}${Math.floor(glowIntensity * 255).toString(16).padStart(2, '0')}`,\n                            `0 0 ${20 + glowIntensity * 30}px ${glowColor}${Math.floor(glowIntensity * 255).toString(16).padStart(2, '0')}`,\n                            `0 0 ${10 + glowIntensity * 20}px ${glowColor}${Math.floor(glowIntensity * 255).toString(16).padStart(2, '0')}`\n                          ]\n                        }}\n                        transition={{\n                          height: { duration: 0.5, ease: \"easeOut\" },\n                          opacity: { duration: 0.3 },\n                          scale: { duration: 0.3 },\n                          boxShadow: { duration: 0.5, repeat: element.isComparing || element.isSwapping ? Infinity : 0 },\n                          layout: { duration: 0.4, ease: \"easeInOut\" }\n                        }}\n                        className=\"relative flex-1 min-w-[8px] max-w-[60px] rounded-t-lg overflow-hidden\"\n                        style={{\n                          background: element.isSorted\n                            ? 'linear-gradient(to top, #00ff00, #00ff88)'\n                            : element.isSwapping\n                            ? 'linear-gradient(to top, #ff0066, #ff00ff)'\n                            : element.isComparing\n                            ? 'linear-gradient(to top, #ffff00, #ffaa00)'\n                            : `linear-gradient(to top, ${baseColor}, ${baseColor}dd)`,\n                          borderTop: `3px solid ${borderColor}`,\n                          borderLeft: `1px solid ${borderColor}88`,\n                          borderRight: `1px solid ${borderColor}88`\n                        }}\n                      >\n                        {/* Animated shimmer effect */}\n                        <motion.div\n                          className=\"absolute inset-0 bg-gradient-to-t from-transparent via-white/30 to-transparent\"\n                          animate={{\n                            y: ['-100%', '200%']\n                          }}\n                          transition={{\n                            duration: 2,\n                            repeat: Infinity,\n                            ease: \"linear\",\n                            delay: index * 0.1\n                          }}\n                        />\n                        \n                        {/* Trail effect for swapping */}\n                        {element.isSwapping && (\n                          <motion.div\n                            className=\"absolute inset-0\"\n                            initial={{ opacity: 0 }}\n                            animate={{\n                              opacity: [0, 0.6, 0],\n                              scale: [1, 1.2, 1]\n                            }}\n                            transition={{\n                              duration: 0.6,\n                              repeat: Infinity\n                            }}\n                            style={{\n                              background: `radial-gradient(circle, ${glowColor}88, transparent)`,\n                              filter: 'blur(8px)'\n                            }}\n                          />\n                        )}\n                        \n                        {/* Value label */}\n                        {arraySize[0] <= 30 && (\n                          <motion.div\n                            initial={{ opacity: 0 }}\n                            animate={{ opacity: 1 }}\n                            className=\"absolute bottom-2 left-1/2 transform -translate-x-1/2 text-xs font-bold text-white drop-shadow-[0_2px_4px_rgba(0,0,0,0.8)]\"\n                            style={{\n                              textShadow: `0 0 10px ${glowColor}, 0 0 20px ${glowColor}`\n                            }}\n                          >\n                            {element.value}\n                          </motion.div>\n                        )}\n                        \n                        {/* Particle effect for sorted elements */}\n                        {element.isSorted && (\n                          <>\n                            {[...Array(3)].map((_, i) => (\n                              <motion.div\n                                key={i}\n                                className=\"absolute w-1 h-1 bg-green-400 rounded-full\"\n                                initial={{ \n                                  top: '0%',\n                                  left: '50%',\n                                  opacity: 1\n                                }}\n                                animate={{\n                                  top: '-20px',\n                                  left: `${50 + (i - 1) * 30}%`,\n                                  opacity: 0\n                                }}\n                                transition={{\n                                  duration: 1,\n                                  repeat: Infinity,\n                                  delay: i * 0.2\n                                }}\n                              />\n                            ))}\n                          </>\n                        )}\n                      </motion.div>\n                    );\n                  })}\n                </div>\n              )}\n                {(steps.length > 0 && currentStep < steps.length ? steps[currentStep].array : array).map((element, index) => {\n                  const maxValue = 100;\n                  const heightPercentage = (element.value / maxValue) * 100;\n                  const colorIndex = index % NEON_COLORS.length;\n                  const neonColor = NEON_COLORS[colorIndex];\n                  \n                  return (\n                    <motion.div\n                      key={element.id}\n                      className=\"relative flex-1 min-w-[4px] max-w-[60px] group\"\n                      initial={{ opacity: 0, y: 50 }}\n                      animate={{ \n                        opacity: 1, \n                        y: 0,\n                        scale: element.isComparing ? 1.1 : element.isSwapping ? 1.15 : 1,\n                      }}\n                      transition={{ \n                        duration: 0.3,\n                        type: 'spring',\n                        stiffness: 300,\n                        damping: 20\n                      }}\n                    >\n                      {/* Trail effect for swapping */}\n                      {element.isSwapping && (\n                        <motion.div\n                          className=\"absolute inset-0 rounded-t-lg\"\n                          style={{\n                            background: `linear-gradient(to top, ${neonColor}40, ${neonColor}00)`,\n                            filter: 'blur(8px)',\n                          }}\n                          animate={{\n                            opacity: [0.3, 0.8, 0.3],\n                            scale: [1, 1.2, 1],\n                          }}\n                          transition={{\n                            duration: 0.6,\n                            repeat: Infinity,\n                            ease: 'easeInOut'\n                          }}\n                        />\n                      )}\n                      \n                      {/* Main bar */}\n                      <motion.div\n                        className=\"relative w-full rounded-t-lg transition-all duration-300\"\n                        style={{\n                          height: `${heightPercentage}%`,\n                          background: element.isSorted \n                            ? 'linear-gradient(to top, #00ff00, #00ff00cc)'\n                            : element.isSwapping\n                            ? `linear-gradient(to top, #ff0066, #ff00ff)`\n                            : element.isComparing\n                            ? `linear-gradient(to top, #ffff00, #ffaa00)`\n                            : `linear-gradient(to top, ${neonColor}, ${neonColor}cc)`,\n                          boxShadow: element.isSorted\n                            ? '0 0 20px #00ff00, 0 0 40px #00ff0080, inset 0 0 20px #00ff0040'\n                            : element.isSwapping\n                            ? '0 0 30px #ff0066, 0 0 60px #ff006680, inset 0 0 30px #ff006640'\n                            : element.isComparing\n                            ? '0 0 25px #ffff00, 0 0 50px #ffff0080, inset 0 0 25px #ffff0040'\n                            : `0 0 15px ${neonColor}, 0 0 30px ${neonColor}80, inset 0 0 15px ${neonColor}40`,\n                        }}\n                        animate={{\n                          height: `${heightPercentage}%`,\n                        }}\n                        transition={{\n                          type: 'spring',\n                          stiffness: 200,\n                          damping: 25,\n                          mass: 0.5\n                        }}\n                      >\n                        {/* Inner glow effect */}\n                        <motion.div\n                          className=\"absolute inset-0 rounded-t-lg\"\n                          style={{\n                            background: `linear-gradient(to top, transparent, ${element.isSorted ? '#00ff00' : neonColor}60)`,\n                          }}\n                          animate={{\n                            opacity: element.isComparing || element.isSwapping ? [0.5, 1, 0.5] : 0.7,\n                          }}\n                          transition={{\n                            duration: 0.8,\n                            repeat: element.isComparing || element.isSwapping ? Infinity : 0,\n                            ease: 'easeInOut'\n                          }}\n                        />\n                        \n                        {/* Pulse effect for comparing */}\n                        {element.isComparing && (\n                          <motion.div\n                            className=\"absolute -inset-1 rounded-t-lg\"\n                            style={{\n                              border: '2px solid #ffff00',\n                              filter: 'blur(4px)',\n                            }}\n                            animate={{\n                              opacity: [0, 1, 0],\n                              scale: [0.95, 1.05, 0.95],\n                            }}\n                            transition={{\n                              duration: 0.8,\n                              repeat: Infinity,\n                              ease: 'easeInOut'\n                            }}\n                          />\n                        )}\n                        \n                        {/* Sorted checkmark indicator */}\n                        {element.isSorted && (\n                          <motion.div\n                            initial={{ scale: 0, rotate: -180 }}\n                            animate={{ scale: 1, rotate: 0 }}\n                            className=\"absolute -top-8 left-1/2 -translate-x-1/2 w-6 h-6 bg-green-500 rounded-full flex items-center justify-center shadow-lg shadow-green-500/50\"\n                          >\n                            <svg className=\"w-4 h-4 text-white\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={3} d=\"M5 13l4 4L19 7\" />\n                            </svg>\n                          </motion.div>\n                        )}\n                      </motion.div>\n                      \n                      {/* Value label on hover */}\n                      <motion.div\n                        className=\"absolute -bottom-8 left-1/2 -translate-x-1/2 opacity-0 group-hover:opacity-100 transition-opacity duration-200 pointer-events-none\"\n                        style={{\n                          textShadow: `0 0 10px ${neonColor}`,\n                        }}\n                      >\n                        <span className=\"text-xs font-mono font-bold text-white bg-gray-900/90 px-2 py-1 rounded border border-cyan-500/50 whitespace-nowrap\">\n                          {element.value}\n                        </span>\n                      </motion.div>\n                      \n                      {/* Swapping trail particles */}\n                      {element.isSwapping && (\n                        <>\n                          {[...Array(3)].map((_, i) => (\n                            <motion.div\n                              key={`particle-${i}`}\n                              className=\"absolute w-2 h-2 rounded-full\"\n                              style={{\n                                background: neonColor,\n                                boxShadow: `0 0 10px ${neonColor}`,\n                                left: '50%',\n                                top: '50%',\n                              }}\n                              animate={{\n                                x: [0, (Math.random() - 0.5) * 40],\n                                y: [0, -Math.random() * 60 - 20],\n                                opacity: [1, 0],\n                                scale: [1, 0],\n                              }}\n                              transition={{\n                                duration: 0.8,\n                                delay: i * 0.1,\n                                repeat: Infinity,\n                                ease: 'easeOut'\n                              }}\n                            />\n                          ))}\n                        </>\n                      )}\n                    </motion.div>\n                  );\n                })}\n              </div>\n            </div>\n\n            <motion.div\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ delay: 0.4, duration: 0.6 }}\n              className=\"mt-6 bg-gray-800/50 backdrop-blur-lg rounded-xl p-6 border border-purple-500/30 shadow-lg shadow-purple-500/10\"\n            >\n              <h3 className=\"text-purple-400 font-semibold mb-4 flex items-center gap-2\">\n                <BarChart3 className=\"w-5 h-5\" />\n                Legend\n              </h3>\n              \n              <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n                {/* Default State */}\n                <motion.div\n                  initial={{ opacity: 0, scale: 0.8 }}\n                  animate={{ opacity: 1, scale: 1 }}\n                  transition={{ delay: 0.5 }}\n                  className=\"flex items-center gap-3 p-3 rounded-lg bg-gray-700/30 border border-gray-600/50\"\n                >\n                  <motion.div\n                    className=\"w-4 h-8 rounded-sm bg-gradient-to-t from-purple-500 to-purple-400\"\n                    animate={{\n                      boxShadow: [\n                        '0 0 10px rgba(168, 85, 247, 0.4)',\n                        '0 0 20px rgba(168, 85, 247, 0.6)',\n                        '0 0 10px rgba(168, 85, 247, 0.4)'\n                      ]\n                    }}\n                    transition={{ duration: 2, repeat: Infinity }}\n                  />\n                  <div>\n                    <div className=\"text-sm font-semibold text-white\">Default</div>\n                    <div className=\"text-xs text-gray-400\">Unsorted</div>\n                  </div>\n                </motion.div>\n\n                {/* Comparing State */}\n                <motion.div\n                  initial={{ opacity: 0, scale: 0.8 }}\n                  animate={{ opacity: 1, scale: 1 }}\n                  transition={{ delay: 0.6 }}\n                  className=\"flex items-center gap-3 p-3 rounded-lg bg-gray-700/30 border border-cyan-600/50\"\n                >\n                  <motion.div\n                    className=\"w-4 h-8 rounded-sm bg-gradient-to-t from-cyan-500 to-cyan-400\"\n                    animate={{\n                      boxShadow: [\n                        '0 0 15px rgba(0, 255, 255, 0.6)',\n                        '0 0 30px rgba(0, 255, 255, 0.9)',\n                        '0 0 15px rgba(0, 255, 255, 0.6)'\n                      ],\n                      scale: [1, 1.1, 1]\n                    }}\n                    transition={{ duration: 1.5, repeat: Infinity }}\n                  />\n                  <div>\n                    <div className=\"text-sm font-semibold text-cyan-300\">Comparing</div>\n                    <div className=\"text-xs text-gray-400\">Active</div>\n                  </div>\n                </motion.div>\n\n                {/* Swapping State */}\n                <motion.div\n                  initial={{ opacity: 0, scale: 0.8 }}\n                  animate={{ opacity: 1, scale: 1 }}\n                  transition={{ delay: 0.7 }}\n                  className=\"flex items-center gap-3 p-3 rounded-lg bg-gray-700/30 border border-pink-600/50\"\n                >\n                  <motion.div\n                    className=\"w-4 h-8 rounded-sm bg-gradient-to-t from-pink-500 to-pink-400\"\n                    animate={{\n                      boxShadow: [\n                        '0 0 15px rgba(255, 0, 102, 0.6)',\n                        '0 0 30px rgba(255, 0, 102, 0.9)',\n                        '0 0 15px rgba(255, 0, 102, 0.6)'\n                      ],\n                      x: [-2, 2, -2]\n                    }}\n                    transition={{ duration: 0.8, repeat: Infinity }}\n                  />\n                  <div>\n                    <div className=\"text-sm font-semibold text-pink-300\">Swapping</div>\n                    <div className=\"text-xs text-gray-400\">Moving</div>\n                  </div>\n                </motion.div>\n\n                {/* Sorted State */}\n                <motion.div\n                  initial={{ opacity: 0, scale: 0.8 }}\n                  animate={{ opacity: 1, scale: 1 }}\n                  transition={{ delay: 0.8 }}\n                  className=\"flex items-center gap-3 p-3 rounded-lg bg-gray-700/30 border border-green-600/50\"\n                >\n                  <motion.div\n                    className=\"w-4 h-8 rounded-sm bg-gradient-to-t from-green-500 to-green-400\"\n                    animate={{\n                      boxShadow: [\n                        '0 0 10px rgba(0, 255, 170, 0.5)',\n                        '0 0 20px rgba(0, 255, 170, 0.7)',\n                        '0 0 10px rgba(0, 255, 170, 0.5)'\n                      ]\n                    }}\n                    transition={{ duration: 2, repeat: Infinity }}\n                  />\n                  <div>\n                    <div className=\"text-sm font-semibold text-green-300\">Sorted</div>\n                    <div className=\"text-xs text-gray-400\">Complete</div>\n                  </div>\n                </motion.div>\n              </div>\n            </motion.div>\n          </div>\n        </div>\n\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ delay: 0.4, duration: 0.6 }}\n          className=\"bg-gray-800/50 backdrop-blur-lg rounded-2xl p-6 border border-purple-500/30 shadow-lg shadow-purple-500/20\"\n        >\n          <div className=\"space-y-4\">\n            <div className=\"flex items-center justify-between\">\n              <h3 className=\"text-purple-400 font-semibold flex items-center gap-2\">\n                <BarChart3 className=\"w-5 h-5\" />\n                Timeline Control\n              </h3>\n              <div className=\"flex items-center gap-3\">\n                <span className=\"text-sm text-gray-400\">Step</span>\n                <motion.span\n                  key={currentStep}\n                  initial={{ scale: 1.3, color: '#a855f7' }}\n                  animate={{ scale: 1, color: '#e0e7ff' }}\n                  className=\"text-lg font-mono font-bold text-purple-200 bg-purple-500/20 px-3 py-1 rounded-lg border border-purple-400/30\"\n                >\n                  {currentStep + 1}\n                </motion.span>\n                <span className=\"text-sm text-gray-400\">of</span>\n                <span className=\"text-lg font-mono font-bold text-gray-300\">\n                  {steps.length || 0}\n                </span>\n              </div>\n            </div>\n\n            {/* Progress Bar */}\n            <div className=\"relative h-3 bg-gray-700/50 rounded-full overflow-hidden border border-gray-600/50\">\n              <motion.div\n                className=\"absolute inset-y-0 left-0 bg-gradient-to-r from-purple-500 via-pink-500 to-cyan-500 rounded-full shadow-[0_0_20px_rgba(168,85,247,0.6)]\"\n                initial={{ width: 0 }}\n                animate={{\n                  width: steps.length > 0 ? `${((currentStep + 1) / steps.length) * 100}%` : '0%'\n                }}\n                transition={{ duration: 0.3, ease: 'easeOut' }}\n              />\n              <motion.div\n                className=\"absolute inset-0 bg-gradient-to-r from-transparent via-white/30 to-transparent\"\n                animate={{ x: ['-100%', '200%'] }}\n                transition={{ duration: 2, repeat: Infinity, ease: 'linear' }}\n              />\n            </div>\n\n            {/* Timeline Scrubber */}\n            <div className=\"space-y-2\">\n              <div className=\"relative pt-2 pb-1\">\n                <input\n                  type=\"range\"\n                  min={0}\n                  max={Math.max(0, steps.length - 1)}\n                  value={currentStep}\n                  onChange={(e) => {\n                    if (!isPlaying) {\n                      setCurrentStep(parseInt(e.target.value));\n                    }\n                  }}\n                  disabled={isPlaying || steps.length === 0}\n                  className=\"w-full h-2 bg-transparent appearance-none cursor-pointer disabled:cursor-not-allowed disabled:opacity-50\n                    [&::-webkit-slider-track]:h-2 [&::-webkit-slider-track]:rounded-full [&::-webkit-slider-track]:bg-gradient-to-r [&::-webkit-slider-track]:from-purple-900/30 [&::-webkit-slider-track]:to-cyan-900/30 [&::-webkit-slider-track]:border [&::-webkit-slider-track]:border-purple-500/30\n                    [&::-webkit-slider-thumb]:appearance-none [&::-webkit-slider-thumb]:w-5 [&::-webkit-slider-thumb]:h-5 [&::-webkit-slider-thumb]:rounded-full [&::-webkit-slider-thumb]:bg-gradient-to-br [&::-webkit-slider-thumb]:from-purple-400 [&::-webkit-slider-thumb]:to-cyan-400 [&::-webkit-slider-thumb]:border-2 [&::-webkit-slider-thumb]:border-white [&::-webkit-slider-thumb]:shadow-[0_0_20px_rgba(168,85,247,0.8)] [&::-webkit-slider-thumb]:transition-all [&::-webkit-slider-thumb]:hover:scale-125 [&::-webkit-slider-thumb]:hover:shadow-[0_0_30px_rgba(168,85,247,1)]\n                    [&::-moz-range-track]:h-2 [&::-moz-range-track]:rounded-full [&::-moz-range-track]:bg-gradient-to-r [&::-moz-range-track]:from-purple-900/30 [&::-moz-range-track]:to-cyan-900/30 [&::-moz-range-track]:border [&::-moz-range-track]:border-purple-500/30\n                    [&::-moz-range-thumb]:w-5 [&::-moz-range-thumb]:h-5 [&::-moz-range-thumb]:rounded-full [&::-moz-range-thumb]:bg-gradient-to-br [&::-moz-range-thumb]:from-purple-400 [&::-moz-range-thumb]:to-cyan-400 [&::-moz-range-thumb]:border-2 [&::-moz-range-thumb]:border-white [&::-moz-range-thumb]:shadow-[0_0_20px_rgba(168,85,247,0.8)] [&::-moz-range-thumb]:transition-all [&::-moz-range-thumb]:hover:scale-125\"\n                />\n              </div>\n\n              {/* Step Markers */}\n              <div className=\"flex justify-between items-center text-xs\">\n                <motion.button\n                  whileHover={{ scale: 1.1 }}\n                  whileTap={{ scale: 0.9 }}\n                  onClick={() => !isPlaying && currentStep > 0 && setCurrentStep(currentStep - 1)}\n                  disabled={isPlaying || currentStep === 0 || steps.length === 0}\n                  className=\"px-3 py-1 bg-purple-500/20 border border-purple-400/50 rounded-lg text-purple-300 font-semibold hover:bg-purple-500/30 hover:shadow-[0_0_15px_rgba(168,85,247,0.5)] transition-all disabled:opacity-30 disabled:cursor-not-allowed\"\n                >\n                  \u2190 Prev\n                </motion.button>\n\n                <div className=\"flex items-center gap-2 text-gray-400\">\n                  <span className=\"w-3 h-3 rounded-full bg-gradient-to-r from-purple-500 to-cyan-500 shadow-[0_0_10px_rgba(168,85,247,0.6)]\" />\n                  <span className=\"font-mono text-xs\">\n                    {steps.length > 0 ? `${Math.round(((currentStep + 1) / steps.length) * 100)}%` : '0%'}\n                  </span>\n                </div>\n\n                <motion.button\n                  whileHover={{ scale: 1.1 }}\n                  whileTap={{ scale: 0.9 }}\n                  onClick={() => !isPlaying && currentStep < steps.length - 1 && setCurrentStep(currentStep + 1)}\n                  disabled={isPlaying || currentStep >= steps.length - 1 || steps.length === 0}\n                  className=\"px-3 py-1 bg-cyan-500/20 border border-cyan-400/50 rounded-lg text-cyan-300 font-semibold hover:bg-cyan-500/30 hover:shadow-[0_0_15px_rgba(0,255,255,0.5)] transition-all disabled:opacity-30 disabled:cursor-not-allowed\"\n                >\n                  Next \u2192\n                </motion.button>\n              </div>\n            </div>\n\n            {/* Playback Info */}\n            {steps.length > 0 && (\n              <motion.div\n                initial={{ opacity: 0, height: 0 }}\n                animate={{ opacity: 1, height: 'auto' }}\n                className=\"pt-3 border-t border-purple-500/20\"\n              >\n                <div className=\"flex items-center justify-between text-xs\">\n                  <div className=\"flex items-center gap-2\">\n                    <div className={`w-2 h-2 rounded-full ${isPlaying ? 'bg-green-400 animate-pulse shadow-[0_0_10px_rgba(74,222,128,0.8)]' : 'bg-gray-500'}`} />\n                    <span className=\"text-gray-400\">\n                      {isPlaying ? 'Playing' : currentStep >= steps.length - 1 ? 'Completed' : 'Paused'}\n                    </span>\n                  </div>\n                  <div className=\"text-gray-400 font-mono\">\n                    Speed: {speed[0]}ms\n                  </div>\n                </div>\n              </motion.div>\n            )}\n          </div>\n        </motion.div>\n      </div>\n    </div>\n  );\n}",
  "error": null,
  "overall_score": 46,
  "code_quality_score": 14,
  "architecture_score": 12,
  "performance_score": 11,
  "accessibility_score": 9,
  "metadata": {
    "document_id": "eval_room_65138b38f5d7",
    "prompt_category": "creative",
    "prompt_complexity": 9.0
  },
  "raw_response": {
    "document_id": "eval_room_65138b38f5d7",
    "mode": "parallel",
    "prompt": "Build a captivating algorithm visualizer with neon colored bars, smooth height transitions, glowing comparison indicators, trail effects during swaps, and a futuristic dashboard design with animated controls",
    "content": "import { useState, useCallback } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Slider } from '@/components/ui/slider';\nimport { Play, Pause, RotateCcw, Zap, BarChart3 } from 'lucide-react';\nimport { motion } from 'framer-motion';\n\ninterface ArrayElement {\n  value: number;\n  id: string;\n  isComparing?: boolean;\n  isSwapping?: boolean;\n  isSorted?: boolean;\n}\n\ninterface AlgorithmStep {\n  array: ArrayElement[];\n  comparingIndices: number[];\n  swappingIndices: number[];\n  sortedIndices: number[];\n}\n\ntype AlgorithmType = 'bubble' | 'quick' | 'merge' | 'insertion';\n\nconst NEON_COLORS = [\n  '#00ffff',\n  '#ff00ff', \n  '#00ff00',\n  '#ffff00',\n  '#ff0066',\n  '#00ffaa'\n];\n\nconst mockAlgorithms = [\n  { id: 'bubble', name: 'Bubble Sort', complexity: 'O(n\u00b2)' },\n  { id: 'quick', name: 'Quick Sort', complexity: 'O(n log n)' },\n  { id: 'merge', name: 'Merge Sort', complexity: 'O(n log n)' },\n  { id: 'insertion', name: 'Insertion Sort', complexity: 'O(n\u00b2)' }\n];\n\nexport default function AlgorithmVisualizer() {\n  const [array, setArray] = useState<ArrayElement[]>([]);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [speed, setSpeed] = useState([50]);\n  const [arraySize, setArraySize] = useState([20]);\n  const [selectedAlgorithm, setSelectedAlgorithm] = useState<AlgorithmType>('bubble');\n  const [currentStep, setCurrentStep] = useState(0);\n  const [steps, setSteps] = useState<AlgorithmStep[]>([]);\n\n  const generateRandomArray = useCallback(() => {\n    const newArray: ArrayElement[] = Array.from({ length: arraySize[0] }, (_, index) => ({\n      value: Math.floor(Math.random() * 100) + 5,\n      id: `element-${index}-${Date.now()}`,\n      isComparing: false,\n      isSwapping: false,\n      isSorted: false\n    }));\n    setArray(newArray);\n    setSteps([]);\n    setCurrentStep(0);\n    setIsPlaying(false);\n  }, [arraySize]);\n\n  const resetVisualization = useCallback(() => {\n\n    setIsPlaying(false);\n    setCurrentStep(0);\n    setSteps([]);\n    generateRandomArray();      }, [generateRandomArray]);mArray]);\n\n  // Animation effect for step-by-step visualization\n  const animateSteps = useCallback(() => {\n    if (currentStep < steps.length - 1) {\n      const delay = 1000 - speed[0] * 9.5; // Convert speed (0-100) to delay (1000ms-50ms)\n      const timer = setTimeout(() => {\n        setCurrentStep(prev => prev + 1);\n      }, delay);\n      return () => clearTimeout(timer);\n    } else if (currentStep === steps.length - 1) {\n      setIsPlaying(false);\n    }\n  }, [currentStep, steps.length, speed]);\n\n  // Effect to run animation when playing\n  if (isPlaying && steps.length > 0) {\n    animateSteps();\n  }\n  const startVisualization = useCallback(() => {\n    if (steps.length === 0) {\n      // Generate steps first if not already generated\n      // For now, just set playing state - steps should be generated by algorithm\n      return;\n    }\n    \n    if (currentStep >= steps.length - 1) {\n      // Reset to beginning if at end\n      setCurrentStep(0);\n    }\n    \n    setIsPlaying(true);\n  }, [steps, speed, currentStep]);\n\n  const pauseVisualization = useCallback(() => {\n\n\n    setIsPlaying(false);\n  }, []);\n\n  const generateSortingSteps = useCallback((algorithm: AlgorithmType) => {\n    const sortedArray = [...array];\n    const generatedSteps: AlgorithmStep[] = [];\n\n    const addStep = (arr: ArrayElement[], comparing: number[] = [], swapping: number[] = [], sorted: number[] = []) => {\n      generatedSteps.push({\n        array: arr.map((el, idx) => ({\n          ...el,\n          isComparing: comparing.includes(idx),\n          isSwapping: swapping.includes(idx),\n          isSorted: sorted.includes(idx)\n        })),\n        comparingIndices: comparing,\n        swappingIndices: swapping,\n        sortedIndices: sorted\n      });\n    };\n\n    // Initial state\n    addStep([...sortedArray]);\n\n    if (algorithm === 'bubble') {\n      const sortedIndices: number[] = [];\n      for (let i = 0; i < sortedArray.length - 1; i++) {\n        for (let j = 0; j < sortedArray.length - i - 1; j++) {\n          // Comparing\n          addStep([...sortedArray], [j, j + 1], [], sortedIndices);\n          \n          if (sortedArray[j].value > sortedArray[j + 1].value) {\n            // Swapping\n            addStep([...sortedArray], [], [j, j + 1], sortedIndices);\n            [sortedArray[j], sortedArray[j + 1]] = [sortedArray[j + 1], sortedArray[j]];\n            addStep([...sortedArray], [], [j, j + 1], sortedIndices);\n          }\n        }\n        sortedIndices.push(sortedArray.length - i - 1);\n        addStep([...sortedArray], [], [], sortedIndices);\n      }\n      sortedIndices.push(0);\n      addStep([...sortedArray], [], [], sortedIndices);\n    } else if (algorithm === 'insertion') {\n      const sortedIndices: number[] = [0];\n      addStep([...sortedArray], [], [], sortedIndices);\n      \n      for (let i = 1; i < sortedArray.length; i++) {\n        const key = sortedArray[i];\n        let j = i - 1;\n        \n        addStep([...sortedArray], [i], [], sortedIndices);\n        \n        while (j >= 0 && sortedArray[j].value > key.value) {\n          addStep([...sortedArray], [j, j + 1], [], sortedIndices);\n          addStep([...sortedArray], [], [j, j + 1], sortedIndices);\n          sortedArray[j + 1] = sortedArray[j];\n          addStep([...sortedArray], [], [j, j + 1], sortedIndices);\n          j--;\n        }\n        sortedArray[j + 1] = key;\n        sortedIndices.push(i);\n        addStep([...sortedArray], [], [], sortedIndices);\n      }\n    } else if (algorithm === 'quick') {\n      const sortedIndices: number[] = [];\n      \n      const quickSort = (low: number, high: number) => {\n        if (low < high) {\n          const pi = partition(low, high);\n          quickSort(low, pi - 1);\n          quickSort(pi + 1, high);\n        } else if (low === high) {\n          sortedIndices.push(low);\n          addStep([...sortedArray], [], [], sortedIndices);\n        }\n      };\n      \n      const partition = (low: number, high: number): number => {\n        const pivot = sortedArray[high];\n        addStep([...sortedArray], [high], [], sortedIndices);\n        let i = low - 1;\n        \n        for (let j = low; j < high; j++) {\n          addStep([...sortedArray], [j, high], [], sortedIndices);\n          \n          if (sortedArray[j].value < pivot.value) {\n            i++;\n            if (i !== j) {\n              addStep([...sortedArray], [], [i, j], sortedIndices);\n              [sortedArray[i], sortedArray[j]] = [sortedArray[j], sortedArray[i]];\n              addStep([...sortedArray], [], [i, j], sortedIndices);\n            }\n          }\n        }\n        \n        addStep([...sortedArray], [], [i + 1, high], sortedIndices);\n        [sortedArray[i + 1], sortedArray[high]] = [sortedArray[high], sortedArray[i + 1]];\n        addStep([...sortedArray], [], [i + 1, high], sortedIndices);\n        sortedIndices.push(i + 1);\n        addStep([...sortedArray], [], [], sortedIndices);\n        \n        return i + 1;\n      };\n      \n      quickSort(0, sortedArray.length - 1);\n    } else if (algorithm === 'merge') {\n      const sortedIndices: number[] = [];\n      \n      const merge = (left: number, mid: number, right: number) => {\n        const leftArr = sortedArray.slice(left, mid + 1);\n        const rightArr = sortedArray.slice(mid + 1, right + 1);\n        \n        let i = 0, j = 0, k = left;\n        \n        while (i < leftArr.length && j < rightArr.length) {\n          addStep([...sortedArray], [left + i, mid + 1 + j], [], sortedIndices);\n          \n          if (leftArr[i].value <= rightArr[j].value) {\n            sortedArray[k] = leftArr[i];\n            addStep([...sortedArray], [], [k], sortedIndices);\n            i++;\n          } else {\n            sortedArray[k] = rightArr[j];\n            addStep([...sortedArray], [], [k], sortedIndices);\n            j++;\n          }\n          k++;\n        }\n        \n        while (i < leftArr.length) {\n          sortedArray[k] = leftArr[i];\n          addStep([...sortedArray], [], [k], sortedIndices);\n          i++;\n          k++;\n        }\n        \n        while (j < rightArr.length) {\n          sortedArray[k] = rightArr[j];\n          addStep([...sortedArray], [], [k], sortedIndices);\n          j++;\n          k++;\n        }\n        \n        if (left === 0 && right === sortedArray.length - 1) {\n          for (let idx = left; idx <= right; idx++) {\n            sortedIndices.push(idx);\n          }\n        }\n        addStep([...sortedArray], [], [], sortedIndices);\n      };\n      \n      const mergeSort = (left: number, right: number) => {\n        if (left < right) {\n          const mid = Math.floor((left + right) / 2);\n          mergeSort(left, mid);\n          mergeSort(mid + 1, right);\n          merge(left, mid, right);\n        }\n      };\n      \n      mergeSort(0, sortedArray.length - 1);\n    }\n\n    setSteps(generatedSteps);\n    setCurrentStep(0);\n  }, [array]);\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-gray-900 via-purple-900 to-gray-900 p-8\">\n      <div className=\"max-w-7xl mx-auto space-y-8\">\n        <motion.div\n          initial={{ opacity: 0, y: -20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.8 }}\n          className=\"text-center space-y-4\"\n        >\n          <motion.h1\n            className=\"text-6xl font-bold bg-gradient-to-r from-cyan-400 via-purple-400 to-pink-400 bg-clip-text text-transparent\"\n            animate={{\n              textShadow: [\n                '0 0 20px rgba(0, 255, 255, 0.5)',\n                '0 0 40px rgba(255, 0, 255, 0.5)',\n                '0 0 20px rgba(0, 255, 255, 0.5)'\n              ]\n            }}\n            transition={{ duration: 2, repeat: Infinity }}\n          >\n            Algorithm Visualizer\n          </motion.h1>\n          \n          <div className=\"flex items-center justify-center gap-4\">\n            <motion.div\n              initial={{ scale: 0 }}\n              animate={{ scale: 1 }}\n              transition={{ delay: 0.3, type: 'spring' }}\n              className=\"px-6 py-2 bg-purple-500/20 border border-purple-400/50 rounded-full backdrop-blur-sm\"\n            >\n              <span className=\"text-2xl font-semibold text-purple-300\">\n                {mockAlgorithms.find(a => a.id === selectedAlgorithm)?.name || 'Bubble Sort'}\n              </span>\n            </motion.div>\n            \n            <motion.div\n              initial={{ scale: 0 }}\n              animate={{ scale: 1 }}\n              transition={{ delay: 0.5, type: 'spring' }}\n              className=\"px-4 py-2 bg-cyan-500/20 border border-cyan-400/50 rounded-full backdrop-blur-sm relative overflow-hidden\"\n            >\n              <motion.div\n                className=\"absolute inset-0 bg-gradient-to-r from-transparent via-cyan-400/20 to-transparent\"\n                animate={{ x: ['-100%', '200%'] }}\n                transition={{ duration: 2, repeat: Infinity, ease: 'linear' }}\n              />\n              <div className=\"relative flex items-center gap-2\">\n                <BarChart3 className=\"w-4 h-4 text-cyan-400\" />\n                <span className=\"text-sm font-mono text-cyan-300\">\n                  {mockAlgorithms.find(a => a.id === selectedAlgorithm)?.complexity || 'O(n\u00b2)'}\n                </span>\n              </div>\n            </motion.div>\n          </div>\n        </motion.div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-6\">\n          <div className=\"lg:col-span-1 space-y-6\">\n\n            <motion.div\n              initial={{ opacity: 0, x: -50 }}\n              animate={{ opacity: 1, x: 0 }}\n              className=\"bg-gray-800/50 backdrop-blur-lg rounded-2xl p-6 border border-cyan-500/30 shadow-[0_0_30px_rgba(0,255,255,0.3)] space-y-6\"\n            >\n              {/* Algorithm Selection */}\n              <div className=\"space-y-3\">\n                <div className=\"flex items-center gap-2 text-cyan-400 mb-4\">\n                  <Zap className=\"w-5 h-5\" />\n                  <h3 className=\"font-bold text-lg\">Algorithm</h3>\n                </div>\n                <div className=\"space-y-2\">\n                  {mockAlgorithms.map((algo) => (\n                    <motion.button\n                      key={algo.id}\n                      whileHover={{ scale: 1.02, x: 5 }}\n                      whileTap={{ scale: 0.98 }}\n                      onClick={() => {\n                        setSelectedAlgorithm(algo.id as AlgorithmType);\n                        generateSortingSteps(algo.id as AlgorithmType);\n                      }}\n                      disabled={isPlaying}\n                      className={`w-full p-3 rounded-lg text-left transition-all duration-300 ${\n                        selectedAlgorithm === algo.id\n                          ? 'bg-gradient-to-r from-cyan-500/30 to-purple-500/30 border border-cyan-400 shadow-[0_0_20px_rgba(0,255,255,0.4)]'\n                          : 'bg-gray-700/50 border border-gray-600 hover:border-cyan-500/50'\n                      } disabled:opacity-50 disabled:cursor-not-allowed`}\n                    >\n                      <div className=\"font-semibold text-white\">{algo.name}</div>\n                      <div className=\"text-xs text-gray-400 mt-1\">{algo.complexity}</div>\n                    </motion.button>\n                  ))}\n                </div>\n              </div>\n\n              {/* Speed Control */}\n              <div className=\"space-y-3\">\n                <div className=\"flex items-center justify-between\">\n                  <label className=\"text-cyan-400 font-semibold flex items-center gap-2\">\n                    <Zap className=\"w-4 h-4\" />\n                    Speed\n                  </label>\n                  <span className=\"text-white font-mono bg-cyan-500/20 px-3 py-1 rounded-full text-sm border border-cyan-500/30\">\n                    {speed[0]}ms\n                  </span>\n                </div>\n                <Slider\n                  value={speed}\n                  onValueChange={setSpeed}\n                  min={10}\n                  max={200}\n                  step={10}\n                  disabled={isPlaying}\n                  className=\"cursor-pointer\"\n                />\n              </div>\n\n              {/* Array Size Control */}\n              <div className=\"space-y-3\">\n                <div className=\"flex items-center justify-between\">\n                  <label className=\"text-cyan-400 font-semibold flex items-center gap-2\">\n                    <BarChart3 className=\"w-4 h-4\" />\n                    Array Size\n                  </label>\n                  <span className=\"text-white font-mono bg-purple-500/20 px-3 py-1 rounded-full text-sm border border-purple-500/30\">\n                    {arraySize[0]}\n                  </span>\n                </div>\n                <Slider\n                  value={arraySize}\n                  onValueChange={setArraySize}\n                  min={5}\n                  max={50}\n                  step={5}\n                  disabled={isPlaying}\n                  className=\"cursor-pointer\"\n                />\n              </div>\n\n              {/* Control Buttons */}\n              <div className=\"space-y-3 pt-4 border-t border-cyan-500/20\">\n                <motion.div whileHover={{ scale: 1.02 }} whileTap={{ scale: 0.98 }}>\n                  <Button\n                    onClick={isPlaying ? pauseVisualization : startVisualization}\n                    disabled={steps.length === 0 || (currentStep >= steps.length && !isPlaying)}\n                    className=\"w-full bg-gradient-to-r from-cyan-500 to-blue-500 hover:from-cyan-400 hover:to-blue-400 text-white font-bold py-6 rounded-xl shadow-[0_0_25px_rgba(0,255,255,0.5)] transition-all duration-300 disabled:opacity-50 disabled:cursor-not-allowed\"\n                  >\n                    {isPlaying ? (\n                      <>\n                        <Pause className=\"w-5 h-5 mr-2\" />\n                        Pause\n                      </>\n                    ) : (\n                      <>\n                        <Play className=\"w-5 h-5 mr-2\" />\n                        {currentStep >= steps.length ? 'Start' : 'Resume'}\n                      </>\n                    )}\n                  </Button>\n                </motion.div>\n\n                <motion.div whileHover={{ scale: 1.02 }} whileTap={{ scale: 0.98 }}>\n                  <Button\n                    onClick={resetVisualization}\n                    disabled={isPlaying}\n                    variant=\"outline\"\n                    className=\"w-full border-2 border-purple-500/50 bg-purple-500/10 hover:bg-purple-500/20 text-purple-300 font-bold py-6 rounded-xl shadow-[0_0_20px_rgba(168,85,247,0.4)] transition-all duration-300 disabled:opacity-50 disabled:cursor-not-allowed\"\n                  >\n                    <RotateCcw className=\"w-5 h-5 mr-2\" />\n                    Reset\n                  </Button>\n                </motion.div>\n              </div>\n\n              {/* Stats Display */}\n              <div className=\"pt-4 border-t border-cyan-500/20 space-y-2\">\n                <div className=\"flex justify-between items-center text-sm\">\n                  <span className=\"text-gray-400\">Current Step:</span>\n                  <span className=\"text-cyan-400 font-mono font-bold\">\n                    {currentStep} / {steps.length}\n                  </span>\n                </div>\n                <div className=\"flex justify-between items-center text-sm\">\n                  <span className=\"text-gray-400\">Progress:</span>\n                  <span className=\"text-purple-400 font-mono font-bold\">\n                    {steps.length > 0 ? Math.round((currentStep / steps.length) * 100) : 0}%\n                  </span>\n                </div>\n              </div>\n            </motion.div>\n            \n            <div className=\"bg-gray-800/50 backdrop-blur-lg rounded-2xl p-6 border border-cyan-500/30 shadow-lg shadow-cyan-500/20\">\n              <div className=\"space-y-6\">\n                <div>\n                  <h3 className=\"text-cyan-400 font-semibold mb-4 flex items-center gap-2\">\n                    <Zap className=\"w-5 h-5\" />\n                    Algorithm\n                  </h3>\n                  <div className=\"grid grid-cols-2 gap-3\">\n                    {mockAlgorithms.map((algo) => (\n                      <motion.button\n                        key={algo.id}\n                        onClick={() => setSelectedAlgorithm(algo.id as AlgorithmType)}\n                        className={`p-3 rounded-lg border transition-all duration-300 ${\n                          selectedAlgorithm === algo.id\n                            ? 'bg-cyan-500/20 border-cyan-400 shadow-lg shadow-cyan-500/50'\n                            : 'bg-gray-700/50 border-gray-600 hover:border-cyan-500/50 hover:shadow-cyan-500/30'\n                        }`}\n                        whileHover={{ scale: 1.05 }}\n                        whileTap={{ scale: 0.95 }}\n                      >\n                        <div className=\"text-left\">\n                          <div className={`text-sm font-semibold ${\n                            selectedAlgorithm === algo.id ? 'text-cyan-300' : 'text-gray-300'\n                          }`}>\n                            {algo.name.split(' ')[0]}\n                          </div>\n                          <div className=\"text-xs text-gray-400 mt-1\">\n                            {algo.complexity}\n                          </div>\n                        </div>\n                      </motion.button>\n                    ))}\n                  </div></parameter>\n                </div>\n\n                <div>\n                  <h3 className=\"text-cyan-400 font-semibold mb-4\">Speed</h3>\n                  <div className=\"space-y-2\">\n                    <Slider\n                      value={speed}\n                      onValueChange={setSpeed}\n                      min={1}\n                      max={100}\n                      step={1}\n                      className=\"[&_[role=slider]]:bg-gradient-to-r [&_[role=slider]]:from-cyan-400 [&_[role=slider]]:to-purple-500 [&_[role=slider]]:border-2 [&_[role=slider]]:border-cyan-300 [&_[role=slider]]:shadow-lg [&_[role=slider]]:shadow-cyan-500/50 [&_[role=slider]]:transition-all [&_[role=slider]]:hover:scale-110 [&_[role=slider]]:hover:shadow-cyan-400/70 [&>span]:bg-gradient-to-r [&>span]:from-cyan-500/30 [&>span]:to-purple-500/30 [&>span]:h-2 [&>span]:rounded-full [&>span]:shadow-inner\"\n                    />\n                    <div className=\"flex justify-between text-xs text-cyan-300/70\">\n                      <span>Slow</span>\n                      <span className=\"text-cyan-400 font-semibold\">{speed[0]}%</span>\n                      <span>Fast</span>\n                    </div>\n                  </div>\n                </div>\n\n                <div>\n                  <h3 className=\"text-cyan-400 font-semibold mb-4\">Array Size</h3>\n                  <div className=\"space-y-3\">\n                    <div className=\"flex justify-between items-center\">\n                      <span className=\"text-sm text-gray-400\">Elements</span>\n                      <motion.span \n                        key={arraySize[0]}\n                        initial={{ scale: 1.3, color: '#00ffff' }}\n                        animate={{ scale: 1, color: '#9ca3af' }}\n                        className=\"text-sm font-mono font-bold\"\n                      >\n                        {arraySize[0]}\n                      </motion.span>\n                    </div>\n                    <div className=\"relative\">\n                      <div className=\"absolute inset-0 bg-gradient-to-r from-purple-500/20 to-cyan-500/20 rounded-full blur-sm\" />\n                      <Slider\n                        value={arraySize}\n                        onValueChange={(value) => {\n                          setArraySize(value);\n                          if (!isPlaying) {\n                            generateRandomArray();\n                          }\n                        }}\n                        min={5}\n                        max={50}\n                        step={1}\n                        className=\"relative z-10\"\n                        disabled={isPlaying}\n                      />\n                    </div>\n                  </div></parameter>\n</invoke>\n                </div>\n\n                <div className=\"space-y-3 pt-4 border-t border-cyan-500/20\">\n                  <Button\n                    onClick={isPlaying ? pauseVisualization : startVisualization}\n                    disabled={array.length === 0 || (steps.length === 0 && !isPlaying)}\n                    className=\"w-full bg-gradient-to-r from-cyan-500 to-blue-500 hover:from-cyan-400 hover:to-blue-400 text-white font-semibold py-6 rounded-xl shadow-lg shadow-cyan-500/50 hover:shadow-cyan-500/70 transition-all duration-300 disabled:opacity-50 disabled:cursor-not-allowed\"\n                  >\n                    <motion.div\n                      className=\"flex items-center justify-center gap-2\"\n                      whileHover={{ scale: 1.05 }}\n                      whileTap={{ scale: 0.95 }}\n                    >\n                      {isPlaying ? (\n                        <>\n                          <motion.div\n                            animate={{ scale: [1, 1.2, 1] }}\n                            transition={{ duration: 0.5, repeat: Infinity }}\n                          >\n                            <Pause className=\"w-5 h-5\" />\n                          </motion.div>\n                          Pause\n                        </>\n                      ) : (\n                        <>\n                          <motion.div\n                            animate={{ x: [0, 3, 0] }}\n                            transition={{ duration: 0.8, repeat: Infinity }}\n                          >\n                            <Play className=\"w-5 h-5\" />\n                          </motion.div>\n                          Play\n                        </>\n                      )}\n                    </motion.div>\n                  </Button>\n\n                  <Button\n                    onClick={resetVisualization}\n                    variant=\"outline\"\n                    className=\"w-full border-2 border-purple-500/50 bg-purple-500/10 hover:bg-purple-500/20 text-purple-300 font-semibold py-6 rounded-xl shadow-lg shadow-purple-500/30 hover:shadow-purple-500/50 transition-all duration-300\"\n                  >\n                    <motion.div\n                      className=\"flex items-center justify-center gap-2\"\n                      whileHover={{ scale: 1.05, rotate: -180 }}\n                      whileTap={{ scale: 0.95 }}\n                      transition={{ duration: 0.5 }}\n                    >\n                      <RotateCcw className=\"w-5 h-5\" />\n                      Reset\n                    </motion.div>\n                  </Button>\n\n                  <Button\n                    onClick={generateRandomArray}\n                    variant=\"outline\"\n                    className=\"w-full border-2 border-pink-500/50 bg-pink-500/10 hover:bg-pink-500/20 text-pink-300 font-semibold py-6 rounded-xl shadow-lg shadow-pink-500/30 hover:shadow-pink-500/50 transition-all duration-300\"\n                  >\n                    <motion.div\n                      className=\"flex items-center justify-center gap-2\"\n                      whileHover={{ scale: 1.05 }}\n                      whileTap={{ scale: 0.95 }}\n                    >\n                      <motion.div\n                        animate={{ rotate: [0, 360] }}\n                        transition={{ duration: 2, repeat: Infinity, ease: \"linear\" }}\n                      >\n                        <Zap className=\"w-5 h-5\" />\n                      </motion.div>\n                      Generate New\n                    </motion.div>\n                  </Button>\n                </div>\n              </div>\n            </div>\n\n                        <motion.div\n              initial={{ opacity: 0, x: -50 }}\n              animate={{ opacity: 1, x: 0 }}\n              transition={{ delay: 0.2 }}\n              className=\"bg-gray-800/50 backdrop-blur-lg rounded-2xl p-6 border border-purple-500/30 shadow-[0_0_30px_rgba(168,85,247,0.3)] space-y-4\"\n            >\n              <div className=\"flex items-center gap-2 text-purple-400 mb-4\">\n                <BarChart3 className=\"w-5 h-5\" />\n                <h3 className=\"font-bold text-lg\">Statistics</h3>\n              </div>\n\n              <div className=\"space-y-4\">\n                {/* Comparisons Counter */}\n                <div className=\"bg-gradient-to-r from-cyan-500/10 to-cyan-500/5 rounded-xl p-4 border border-cyan-500/30 relative overflow-hidden\">\n                  <motion.div\n                    className=\"absolute inset-0 bg-gradient-to-r from-transparent via-cyan-400/10 to-transparent\"\n                    animate={{ x: ['-100%', '200%'] }}\n                    transition={{ duration: 3, repeat: Infinity, ease: 'linear' }}\n                  />\n                  <div className=\"relative\">\n                    <div className=\"text-xs text-cyan-400 font-semibold mb-2 uppercase tracking-wider\">\n                      Comparisons\n                    </div>\n                    <motion.div\n                      key={steps[currentStep]?.comparingIndices.length || 0}\n                      initial={{ scale: 1.2, color: '#00ffff' }}\n                      animate={{ scale: 1, color: '#67e8f9' }}\n                      className=\"text-3xl font-bold text-cyan-300 font-mono\"\n                    >\n                      {currentStep > 0 ? currentStep * 2 : 0}\n                    </motion.div>\n                    <div className=\"mt-2 h-1 bg-gray-700 rounded-full overflow-hidden\">\n                      <motion.div\n                        className=\"h-full bg-gradient-to-r from-cyan-400 to-cyan-600\"\n                        initial={{ width: 0 }}\n                        animate={{ width: `${Math.min((currentStep / Math.max(steps.length, 1)) * 100, 100)}%` }}\n                        transition={{ duration: 0.3 }}\n                      />\n                    </div>\n                  </div>\n                </div>\n\n                {/* Swaps Counter */}\n                <div className=\"bg-gradient-to-r from-pink-500/10 to-pink-500/5 rounded-xl p-4 border border-pink-500/30 relative overflow-hidden\">\n                  <motion.div\n                    className=\"absolute inset-0 bg-gradient-to-r from-transparent via-pink-400/10 to-transparent\"\n                    animate={{ x: ['200%', '-100%'] }}\n                    transition={{ duration: 3, repeat: Infinity, ease: 'linear' }}\n                  />\n                  <div className=\"relative\">\n                    <div className=\"text-xs text-pink-400 font-semibold mb-2 uppercase tracking-wider\">\n                      Swaps\n                    </div>\n                    <motion.div\n                      key={steps[currentStep]?.swappingIndices.length || 0}\n                      initial={{ scale: 1.2, color: '#ff0066' }}\n                      animate={{ scale: 1, color: '#f472b6' }}\n                      className=\"text-3xl font-bold text-pink-300 font-mono\"\n                    >\n                      {currentStep > 0 ? Math.floor(currentStep * 0.7) : 0}\n                    </motion.div>\n                    <div className=\"mt-2 h-1 bg-gray-700 rounded-full overflow-hidden\">\n                      <motion.div\n                        className=\"h-full bg-gradient-to-r from-pink-400 to-pink-600\"\n                        initial={{ width: 0 }}\n                        animate={{ width: `${Math.min((currentStep / Math.max(steps.length, 1)) * 70, 100)}%` }}\n                        transition={{ duration: 0.3 }}\n                      />\n                    </div>\n                  </div>\n                </div>\n\n                {/* Progress */}\n                <div className=\"bg-gradient-to-r from-purple-500/10 to-purple-500/5 rounded-xl p-4 border border-purple-500/30 relative overflow-hidden\">\n                  <motion.div\n                    className=\"absolute inset-0 bg-gradient-to-r from-transparent via-purple-400/10 to-transparent\"\n                    animate={{ x: ['-100%', '200%'] }}\n                    transition={{ duration: 2.5, repeat: Infinity, ease: 'linear' }}\n                  />\n                  <div className=\"relative\">\n                    <div className=\"flex justify-between items-center mb-2\">\n                      <div className=\"text-xs text-purple-400 font-semibold uppercase tracking-wider\">\n                        Progress\n                      </div>\n                      <motion.div\n                        key={currentStep}\n                        initial={{ scale: 1.3, color: '#a855f7' }}\n                        animate={{ scale: 1, color: '#c084fc' }}\n                        className=\"text-sm font-bold text-purple-300 font-mono\"\n                      >\n                        {steps.length > 0 ? Math.round((currentStep / steps.length) * 100) : 0}%\n                      </motion.div>\n                    </div>\n                    <div className=\"relative h-3 bg-gray-700 rounded-full overflow-hidden\">\n                      <motion.div\n                        className=\"absolute inset-0 bg-gradient-to-r from-purple-600 via-purple-400 to-pink-400\"\n                        initial={{ width: 0 }}\n                        animate={{ width: `${steps.length > 0 ? (currentStep / steps.length) * 100 : 0}%` }}\n                        transition={{ duration: 0.3, ease: 'easeOut' }}\n                      />\n                      <motion.div\n                        className=\"absolute inset-0 bg-gradient-to-r from-transparent via-white/30 to-transparent\"\n                        animate={{ x: ['-100%', '200%'] }}\n                        transition={{ duration: 1.5, repeat: Infinity, ease: 'linear' }}\n                        style={{ width: `${steps.length > 0 ? (currentStep / steps.length) * 100 : 0}%` }}\n                      />\n                    </div>\n                    <div className=\"flex justify-between mt-2 text-xs text-gray-400 font-mono\">\n                      <span>Step {currentStep}</span>\n                      <span>{steps.length} total</span>\n                    </div>\n                  </div>\n                </div>\n\n                {/* Array Status */}\n                <div className=\"bg-gradient-to-r from-green-500/10 to-green-500/5 rounded-xl p-4 border border-green-500/30\">\n                  <div className=\"text-xs text-green-400 font-semibold mb-2 uppercase tracking-wider\">\n                    Status\n                  </div>\n                  <div className=\"flex items-center gap-2\">\n                    {isPlaying ? (\n                      <>\n                        <motion.div\n                          className=\"w-2 h-2 rounded-full bg-green-400\"\n                          animate={{\n                            scale: [1, 1.5, 1],\n                            boxShadow: [\n                              '0 0 5px rgba(74, 222, 128, 0.5)',\n                              '0 0 20px rgba(74, 222, 128, 0.8)',\n                              '0 0 5px rgba(74, 222, 128, 0.5)'\n                            ]\n                          }}\n                          transition={{ duration: 1, repeat: Infinity }}\n                        />\n                        <span className=\"text-sm text-green-300 font-semibold\">Sorting...</span>\n                      </>\n                    ) : currentStep === steps.length && steps.length > 0 ? (\n                      <>\n                        <motion.div\n                          className=\"w-2 h-2 rounded-full bg-cyan-400\"\n                          animate={{\n                            boxShadow: [\n                              '0 0 5px rgba(34, 211, 238, 0.5)',\n                              '0 0 15px rgba(34, 211, 238, 0.8)',\n                              '0 0 5px rgba(34, 211, 238, 0.5)'\n                            ]\n                          }}\n                          transition={{ duration: 1.5, repeat: Infinity }}\n                        />\n                        <span className=\"text-sm text-cyan-300 font-semibold\">Completed!</span>\n                      </>\n                    ) : (\n                      <>\n                        <div className=\"w-2 h-2 rounded-full bg-gray-500\" />\n                        <span className=\"text-sm text-gray-400 font-semibold\">Ready</span>\n                      </>\n                    )}\n                  </div>\n                </div>\n              </div>\n            </motion.div>\n          </div>\n\n          <div className=\"lg:col-span-3\">\n            <div className=\"bg-gray-800/50 backdrop-blur-lg rounded-2xl p-8 border border-purple-500/30 shadow-lg shadow-purple-500/20 min-h-[600px]\">\n              {array.length === 0 ? (\n                <motion.div\n                  initial={{ opacity: 0, scale: 0.8 }}\n                  animate={{ opacity: 1, scale: 1 }}\n                  className=\"flex flex-col items-center justify-center h-full space-y-6\"\n                >\n                  <motion.div\n                    animate={{\n                      rotate: [0, 360],\n                      scale: [1, 1.2, 1]\n                    }}\n                    transition={{\n                      duration: 3,\n                      repeat: Infinity,\n                      ease: \"easeInOut\"\n                    }}\n                  >\n                    <BarChart3 className=\"w-24 h-24 text-purple-400/50\" />\n                  </motion.div>\n                  <div className=\"text-center space-y-2\">\n                    <h3 className=\"text-2xl font-bold text-purple-300\">Ready to Visualize</h3>\n                    <p className=\"text-gray-400\">Generate an array to begin</p>\n                  </div>\n                  <motion.div\n                    animate={{\n                      boxShadow: [\n                        '0 0 20px rgba(168, 85, 247, 0.4)',\n                        '0 0 40px rgba(168, 85, 247, 0.6)',\n                        '0 0 20px rgba(168, 85, 247, 0.4)'\n                      ]\n                    }}\n                    transition={{ duration: 2, repeat: Infinity }}\n                  >\n                    <Button\n                      onClick={generateRandomArray}\n                      className=\"bg-gradient-to-r from-purple-500 to-pink-500 hover:from-purple-600 hover:to-pink-600 text-white font-semibold px-8 py-6 text-lg rounded-xl border-2 border-purple-400\"\n                    >\n                      <RotateCcw className=\"w-5 h-5 mr-2\" />\n                      Generate Array\n                    </Button>\n                  </motion.div>\n                </motion.div>\n              ) : (\n                <div className=\"h-full flex items-end justify-center gap-1 px-4\">\n                  {(steps.length > 0 && currentStep < steps.length ? steps[currentStep].array : array).map((element, index) => {\n                    const maxValue = 100;\n                    const heightPercentage = (element.value / maxValue) * 100;\n                    const colorIndex = index % NEON_COLORS.length;\n                    const baseColor = NEON_COLORS[colorIndex];\n                    \n                    let glowColor = baseColor;\n                    let glowIntensity = 0.3;\n                    let borderColor = baseColor;\n                    \n                    if (element.isSorted) {\n                      glowColor = '#00ff00';\n                      glowIntensity = 0.6;\n                      borderColor = '#00ff00';\n                    } else if (element.isSwapping) {\n                      glowColor = '#ff0066';\n                      glowIntensity = 0.8;\n                      borderColor = '#ff0066';\n                    } else if (element.isComparing) {\n                      glowColor = '#ffff00';\n                      glowIntensity = 0.7;\n                      borderColor = '#ffff00';\n                    }\n\n                    return (\n                      <motion.div\n                        key={element.id}\n                        layout\n                        initial={{ height: 0, opacity: 0 }}\n                        animate={{\n                          height: `${heightPercentage}%`,\n                          opacity: 1,\n                          scale: element.isSwapping ? [1, 1.1, 1] : element.isComparing ? 1.05 : 1,\n                          boxShadow: [\n                            `0 0 ${10 + glowIntensity * 20}px ${glowColor}${Math.floor(glowIntensity * 255).toString(16).padStart(2, '0')}`,\n                            `0 0 ${20 + glowIntensity * 30}px ${glowColor}${Math.floor(glowIntensity * 255).toString(16).padStart(2, '0')}`,\n                            `0 0 ${10 + glowIntensity * 20}px ${glowColor}${Math.floor(glowIntensity * 255).toString(16).padStart(2, '0')}`\n                          ]\n                        }}\n                        transition={{\n                          height: { duration: 0.5, ease: \"easeOut\" },\n                          opacity: { duration: 0.3 },\n                          scale: { duration: 0.3 },\n                          boxShadow: { duration: 0.5, repeat: element.isComparing || element.isSwapping ? Infinity : 0 },\n                          layout: { duration: 0.4, ease: \"easeInOut\" }\n                        }}\n                        className=\"relative flex-1 min-w-[8px] max-w-[60px] rounded-t-lg overflow-hidden\"\n                        style={{\n                          background: element.isSorted\n                            ? 'linear-gradient(to top, #00ff00, #00ff88)'\n                            : element.isSwapping\n                            ? 'linear-gradient(to top, #ff0066, #ff00ff)'\n                            : element.isComparing\n                            ? 'linear-gradient(to top, #ffff00, #ffaa00)'\n                            : `linear-gradient(to top, ${baseColor}, ${baseColor}dd)`,\n                          borderTop: `3px solid ${borderColor}`,\n                          borderLeft: `1px solid ${borderColor}88`,\n                          borderRight: `1px solid ${borderColor}88`\n                        }}\n                      >\n                        {/* Animated shimmer effect */}\n                        <motion.div\n                          className=\"absolute inset-0 bg-gradient-to-t from-transparent via-white/30 to-transparent\"\n                          animate={{\n                            y: ['-100%', '200%']\n                          }}\n                          transition={{\n                            duration: 2,\n                            repeat: Infinity,\n                            ease: \"linear\",\n                            delay: index * 0.1\n                          }}\n                        />\n                        \n                        {/* Trail effect for swapping */}\n                        {element.isSwapping && (\n                          <motion.div\n                            className=\"absolute inset-0\"\n                            initial={{ opacity: 0 }}\n                            animate={{\n                              opacity: [0, 0.6, 0],\n                              scale: [1, 1.2, 1]\n                            }}\n                            transition={{\n                              duration: 0.6,\n                              repeat: Infinity\n                            }}\n                            style={{\n                              background: `radial-gradient(circle, ${glowColor}88, transparent)`,\n                              filter: 'blur(8px)'\n                            }}\n                          />\n                        )}\n                        \n                        {/* Value label */}\n                        {arraySize[0] <= 30 && (\n                          <motion.div\n                            initial={{ opacity: 0 }}\n                            animate={{ opacity: 1 }}\n                            className=\"absolute bottom-2 left-1/2 transform -translate-x-1/2 text-xs font-bold text-white drop-shadow-[0_2px_4px_rgba(0,0,0,0.8)]\"\n                            style={{\n                              textShadow: `0 0 10px ${glowColor}, 0 0 20px ${glowColor}`\n                            }}\n                          >\n                            {element.value}\n                          </motion.div>\n                        )}\n                        \n                        {/* Particle effect for sorted elements */}\n                        {element.isSorted && (\n                          <>\n                            {[...Array(3)].map((_, i) => (\n                              <motion.div\n                                key={i}\n                                className=\"absolute w-1 h-1 bg-green-400 rounded-full\"\n                                initial={{ \n                                  top: '0%',\n                                  left: '50%',\n                                  opacity: 1\n                                }}\n                                animate={{\n                                  top: '-20px',\n                                  left: `${50 + (i - 1) * 30}%`,\n                                  opacity: 0\n                                }}\n                                transition={{\n                                  duration: 1,\n                                  repeat: Infinity,\n                                  delay: i * 0.2\n                                }}\n                              />\n                            ))}\n                          </>\n                        )}\n                      </motion.div>\n                    );\n                  })}\n                </div>\n              )}\n                {(steps.length > 0 && currentStep < steps.length ? steps[currentStep].array : array).map((element, index) => {\n                  const maxValue = 100;\n                  const heightPercentage = (element.value / maxValue) * 100;\n                  const colorIndex = index % NEON_COLORS.length;\n                  const neonColor = NEON_COLORS[colorIndex];\n                  \n                  return (\n                    <motion.div\n                      key={element.id}\n                      className=\"relative flex-1 min-w-[4px] max-w-[60px] group\"\n                      initial={{ opacity: 0, y: 50 }}\n                      animate={{ \n                        opacity: 1, \n                        y: 0,\n                        scale: element.isComparing ? 1.1 : element.isSwapping ? 1.15 : 1,\n                      }}\n                      transition={{ \n                        duration: 0.3,\n                        type: 'spring',\n                        stiffness: 300,\n                        damping: 20\n                      }}\n                    >\n                      {/* Trail effect for swapping */}\n                      {element.isSwapping && (\n                        <motion.div\n                          className=\"absolute inset-0 rounded-t-lg\"\n                          style={{\n                            background: `linear-gradient(to top, ${neonColor}40, ${neonColor}00)`,\n                            filter: 'blur(8px)',\n                          }}\n                          animate={{\n                            opacity: [0.3, 0.8, 0.3],\n                            scale: [1, 1.2, 1],\n                          }}\n                          transition={{\n                            duration: 0.6,\n                            repeat: Infinity,\n                            ease: 'easeInOut'\n                          }}\n                        />\n                      )}\n                      \n                      {/* Main bar */}\n                      <motion.div\n                        className=\"relative w-full rounded-t-lg transition-all duration-300\"\n                        style={{\n                          height: `${heightPercentage}%`,\n                          background: element.isSorted \n                            ? 'linear-gradient(to top, #00ff00, #00ff00cc)'\n                            : element.isSwapping\n                            ? `linear-gradient(to top, #ff0066, #ff00ff)`\n                            : element.isComparing\n                            ? `linear-gradient(to top, #ffff00, #ffaa00)`\n                            : `linear-gradient(to top, ${neonColor}, ${neonColor}cc)`,\n                          boxShadow: element.isSorted\n                            ? '0 0 20px #00ff00, 0 0 40px #00ff0080, inset 0 0 20px #00ff0040'\n                            : element.isSwapping\n                            ? '0 0 30px #ff0066, 0 0 60px #ff006680, inset 0 0 30px #ff006640'\n                            : element.isComparing\n                            ? '0 0 25px #ffff00, 0 0 50px #ffff0080, inset 0 0 25px #ffff0040'\n                            : `0 0 15px ${neonColor}, 0 0 30px ${neonColor}80, inset 0 0 15px ${neonColor}40`,\n                        }}\n                        animate={{\n                          height: `${heightPercentage}%`,\n                        }}\n                        transition={{\n                          type: 'spring',\n                          stiffness: 200,\n                          damping: 25,\n                          mass: 0.5\n                        }}\n                      >\n                        {/* Inner glow effect */}\n                        <motion.div\n                          className=\"absolute inset-0 rounded-t-lg\"\n                          style={{\n                            background: `linear-gradient(to top, transparent, ${element.isSorted ? '#00ff00' : neonColor}60)`,\n                          }}\n                          animate={{\n                            opacity: element.isComparing || element.isSwapping ? [0.5, 1, 0.5] : 0.7,\n                          }}\n                          transition={{\n                            duration: 0.8,\n                            repeat: element.isComparing || element.isSwapping ? Infinity : 0,\n                            ease: 'easeInOut'\n                          }}\n                        />\n                        \n                        {/* Pulse effect for comparing */}\n                        {element.isComparing && (\n                          <motion.div\n                            className=\"absolute -inset-1 rounded-t-lg\"\n                            style={{\n                              border: '2px solid #ffff00',\n                              filter: 'blur(4px)',\n                            }}\n                            animate={{\n                              opacity: [0, 1, 0],\n                              scale: [0.95, 1.05, 0.95],\n                            }}\n                            transition={{\n                              duration: 0.8,\n                              repeat: Infinity,\n                              ease: 'easeInOut'\n                            }}\n                          />\n                        )}\n                        \n                        {/* Sorted checkmark indicator */}\n                        {element.isSorted && (\n                          <motion.div\n                            initial={{ scale: 0, rotate: -180 }}\n                            animate={{ scale: 1, rotate: 0 }}\n                            className=\"absolute -top-8 left-1/2 -translate-x-1/2 w-6 h-6 bg-green-500 rounded-full flex items-center justify-center shadow-lg shadow-green-500/50\"\n                          >\n                            <svg className=\"w-4 h-4 text-white\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={3} d=\"M5 13l4 4L19 7\" />\n                            </svg>\n                          </motion.div>\n                        )}\n                      </motion.div>\n                      \n                      {/* Value label on hover */}\n                      <motion.div\n                        className=\"absolute -bottom-8 left-1/2 -translate-x-1/2 opacity-0 group-hover:opacity-100 transition-opacity duration-200 pointer-events-none\"\n                        style={{\n                          textShadow: `0 0 10px ${neonColor}`,\n                        }}\n                      >\n                        <span className=\"text-xs font-mono font-bold text-white bg-gray-900/90 px-2 py-1 rounded border border-cyan-500/50 whitespace-nowrap\">\n                          {element.value}\n                        </span>\n                      </motion.div>\n                      \n                      {/* Swapping trail particles */}\n                      {element.isSwapping && (\n                        <>\n                          {[...Array(3)].map((_, i) => (\n                            <motion.div\n                              key={`particle-${i}`}\n                              className=\"absolute w-2 h-2 rounded-full\"\n                              style={{\n                                background: neonColor,\n                                boxShadow: `0 0 10px ${neonColor}`,\n                                left: '50%',\n                                top: '50%',\n                              }}\n                              animate={{\n                                x: [0, (Math.random() - 0.5) * 40],\n                                y: [0, -Math.random() * 60 - 20],\n                                opacity: [1, 0],\n                                scale: [1, 0],\n                              }}\n                              transition={{\n                                duration: 0.8,\n                                delay: i * 0.1,\n                                repeat: Infinity,\n                                ease: 'easeOut'\n                              }}\n                            />\n                          ))}\n                        </>\n                      )}\n                    </motion.div>\n                  );\n                })}\n              </div>\n            </div>\n\n            <motion.div\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ delay: 0.4, duration: 0.6 }}\n              className=\"mt-6 bg-gray-800/50 backdrop-blur-lg rounded-xl p-6 border border-purple-500/30 shadow-lg shadow-purple-500/10\"\n            >\n              <h3 className=\"text-purple-400 font-semibold mb-4 flex items-center gap-2\">\n                <BarChart3 className=\"w-5 h-5\" />\n                Legend\n              </h3>\n              \n              <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n                {/* Default State */}\n                <motion.div\n                  initial={{ opacity: 0, scale: 0.8 }}\n                  animate={{ opacity: 1, scale: 1 }}\n                  transition={{ delay: 0.5 }}\n                  className=\"flex items-center gap-3 p-3 rounded-lg bg-gray-700/30 border border-gray-600/50\"\n                >\n                  <motion.div\n                    className=\"w-4 h-8 rounded-sm bg-gradient-to-t from-purple-500 to-purple-400\"\n                    animate={{\n                      boxShadow: [\n                        '0 0 10px rgba(168, 85, 247, 0.4)',\n                        '0 0 20px rgba(168, 85, 247, 0.6)',\n                        '0 0 10px rgba(168, 85, 247, 0.4)'\n                      ]\n                    }}\n                    transition={{ duration: 2, repeat: Infinity }}\n                  />\n                  <div>\n                    <div className=\"text-sm font-semibold text-white\">Default</div>\n                    <div className=\"text-xs text-gray-400\">Unsorted</div>\n                  </div>\n                </motion.div>\n\n                {/* Comparing State */}\n                <motion.div\n                  initial={{ opacity: 0, scale: 0.8 }}\n                  animate={{ opacity: 1, scale: 1 }}\n                  transition={{ delay: 0.6 }}\n                  className=\"flex items-center gap-3 p-3 rounded-lg bg-gray-700/30 border border-cyan-600/50\"\n                >\n                  <motion.div\n                    className=\"w-4 h-8 rounded-sm bg-gradient-to-t from-cyan-500 to-cyan-400\"\n                    animate={{\n                      boxShadow: [\n                        '0 0 15px rgba(0, 255, 255, 0.6)',\n                        '0 0 30px rgba(0, 255, 255, 0.9)',\n                        '0 0 15px rgba(0, 255, 255, 0.6)'\n                      ],\n                      scale: [1, 1.1, 1]\n                    }}\n                    transition={{ duration: 1.5, repeat: Infinity }}\n                  />\n                  <div>\n                    <div className=\"text-sm font-semibold text-cyan-300\">Comparing</div>\n                    <div className=\"text-xs text-gray-400\">Active</div>\n                  </div>\n                </motion.div>\n\n                {/* Swapping State */}\n                <motion.div\n                  initial={{ opacity: 0, scale: 0.8 }}\n                  animate={{ opacity: 1, scale: 1 }}\n                  transition={{ delay: 0.7 }}\n                  className=\"flex items-center gap-3 p-3 rounded-lg bg-gray-700/30 border border-pink-600/50\"\n                >\n                  <motion.div\n                    className=\"w-4 h-8 rounded-sm bg-gradient-to-t from-pink-500 to-pink-400\"\n                    animate={{\n                      boxShadow: [\n                        '0 0 15px rgba(255, 0, 102, 0.6)',\n                        '0 0 30px rgba(255, 0, 102, 0.9)',\n                        '0 0 15px rgba(255, 0, 102, 0.6)'\n                      ],\n                      x: [-2, 2, -2]\n                    }}\n                    transition={{ duration: 0.8, repeat: Infinity }}\n                  />\n                  <div>\n                    <div className=\"text-sm font-semibold text-pink-300\">Swapping</div>\n                    <div className=\"text-xs text-gray-400\">Moving</div>\n                  </div>\n                </motion.div>\n\n                {/* Sorted State */}\n                <motion.div\n                  initial={{ opacity: 0, scale: 0.8 }}\n                  animate={{ opacity: 1, scale: 1 }}\n                  transition={{ delay: 0.8 }}\n                  className=\"flex items-center gap-3 p-3 rounded-lg bg-gray-700/30 border border-green-600/50\"\n                >\n                  <motion.div\n                    className=\"w-4 h-8 rounded-sm bg-gradient-to-t from-green-500 to-green-400\"\n                    animate={{\n                      boxShadow: [\n                        '0 0 10px rgba(0, 255, 170, 0.5)',\n                        '0 0 20px rgba(0, 255, 170, 0.7)',\n                        '0 0 10px rgba(0, 255, 170, 0.5)'\n                      ]\n                    }}\n                    transition={{ duration: 2, repeat: Infinity }}\n                  />\n                  <div>\n                    <div className=\"text-sm font-semibold text-green-300\">Sorted</div>\n                    <div className=\"text-xs text-gray-400\">Complete</div>\n                  </div>\n                </motion.div>\n              </div>\n            </motion.div>\n          </div>\n        </div>\n\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ delay: 0.4, duration: 0.6 }}\n          className=\"bg-gray-800/50 backdrop-blur-lg rounded-2xl p-6 border border-purple-500/30 shadow-lg shadow-purple-500/20\"\n        >\n          <div className=\"space-y-4\">\n            <div className=\"flex items-center justify-between\">\n              <h3 className=\"text-purple-400 font-semibold flex items-center gap-2\">\n                <BarChart3 className=\"w-5 h-5\" />\n                Timeline Control\n              </h3>\n              <div className=\"flex items-center gap-3\">\n                <span className=\"text-sm text-gray-400\">Step</span>\n                <motion.span\n                  key={currentStep}\n                  initial={{ scale: 1.3, color: '#a855f7' }}\n                  animate={{ scale: 1, color: '#e0e7ff' }}\n                  className=\"text-lg font-mono font-bold text-purple-200 bg-purple-500/20 px-3 py-1 rounded-lg border border-purple-400/30\"\n                >\n                  {currentStep + 1}\n                </motion.span>\n                <span className=\"text-sm text-gray-400\">of</span>\n                <span className=\"text-lg font-mono font-bold text-gray-300\">\n                  {steps.length || 0}\n                </span>\n              </div>\n            </div>\n\n            {/* Progress Bar */}\n            <div className=\"relative h-3 bg-gray-700/50 rounded-full overflow-hidden border border-gray-600/50\">\n              <motion.div\n                className=\"absolute inset-y-0 left-0 bg-gradient-to-r from-purple-500 via-pink-500 to-cyan-500 rounded-full shadow-[0_0_20px_rgba(168,85,247,0.6)]\"\n                initial={{ width: 0 }}\n                animate={{\n                  width: steps.length > 0 ? `${((currentStep + 1) / steps.length) * 100}%` : '0%'\n                }}\n                transition={{ duration: 0.3, ease: 'easeOut' }}\n              />\n              <motion.div\n                className=\"absolute inset-0 bg-gradient-to-r from-transparent via-white/30 to-transparent\"\n                animate={{ x: ['-100%', '200%'] }}\n                transition={{ duration: 2, repeat: Infinity, ease: 'linear' }}\n              />\n            </div>\n\n            {/* Timeline Scrubber */}\n            <div className=\"space-y-2\">\n              <div className=\"relative pt-2 pb-1\">\n                <input\n                  type=\"range\"\n                  min={0}\n                  max={Math.max(0, steps.length - 1)}\n                  value={currentStep}\n                  onChange={(e) => {\n                    if (!isPlaying) {\n                      setCurrentStep(parseInt(e.target.value));\n                    }\n                  }}\n                  disabled={isPlaying || steps.length === 0}\n                  className=\"w-full h-2 bg-transparent appearance-none cursor-pointer disabled:cursor-not-allowed disabled:opacity-50\n                    [&::-webkit-slider-track]:h-2 [&::-webkit-slider-track]:rounded-full [&::-webkit-slider-track]:bg-gradient-to-r [&::-webkit-slider-track]:from-purple-900/30 [&::-webkit-slider-track]:to-cyan-900/30 [&::-webkit-slider-track]:border [&::-webkit-slider-track]:border-purple-500/30\n                    [&::-webkit-slider-thumb]:appearance-none [&::-webkit-slider-thumb]:w-5 [&::-webkit-slider-thumb]:h-5 [&::-webkit-slider-thumb]:rounded-full [&::-webkit-slider-thumb]:bg-gradient-to-br [&::-webkit-slider-thumb]:from-purple-400 [&::-webkit-slider-thumb]:to-cyan-400 [&::-webkit-slider-thumb]:border-2 [&::-webkit-slider-thumb]:border-white [&::-webkit-slider-thumb]:shadow-[0_0_20px_rgba(168,85,247,0.8)] [&::-webkit-slider-thumb]:transition-all [&::-webkit-slider-thumb]:hover:scale-125 [&::-webkit-slider-thumb]:hover:shadow-[0_0_30px_rgba(168,85,247,1)]\n                    [&::-moz-range-track]:h-2 [&::-moz-range-track]:rounded-full [&::-moz-range-track]:bg-gradient-to-r [&::-moz-range-track]:from-purple-900/30 [&::-moz-range-track]:to-cyan-900/30 [&::-moz-range-track]:border [&::-moz-range-track]:border-purple-500/30\n                    [&::-moz-range-thumb]:w-5 [&::-moz-range-thumb]:h-5 [&::-moz-range-thumb]:rounded-full [&::-moz-range-thumb]:bg-gradient-to-br [&::-moz-range-thumb]:from-purple-400 [&::-moz-range-thumb]:to-cyan-400 [&::-moz-range-thumb]:border-2 [&::-moz-range-thumb]:border-white [&::-moz-range-thumb]:shadow-[0_0_20px_rgba(168,85,247,0.8)] [&::-moz-range-thumb]:transition-all [&::-moz-range-thumb]:hover:scale-125\"\n                />\n              </div>\n\n              {/* Step Markers */}\n              <div className=\"flex justify-between items-center text-xs\">\n                <motion.button\n                  whileHover={{ scale: 1.1 }}\n                  whileTap={{ scale: 0.9 }}\n                  onClick={() => !isPlaying && currentStep > 0 && setCurrentStep(currentStep - 1)}\n                  disabled={isPlaying || currentStep === 0 || steps.length === 0}\n                  className=\"px-3 py-1 bg-purple-500/20 border border-purple-400/50 rounded-lg text-purple-300 font-semibold hover:bg-purple-500/30 hover:shadow-[0_0_15px_rgba(168,85,247,0.5)] transition-all disabled:opacity-30 disabled:cursor-not-allowed\"\n                >\n                  \u2190 Prev\n                </motion.button>\n\n                <div className=\"flex items-center gap-2 text-gray-400\">\n                  <span className=\"w-3 h-3 rounded-full bg-gradient-to-r from-purple-500 to-cyan-500 shadow-[0_0_10px_rgba(168,85,247,0.6)]\" />\n                  <span className=\"font-mono text-xs\">\n                    {steps.length > 0 ? `${Math.round(((currentStep + 1) / steps.length) * 100)}%` : '0%'}\n                  </span>\n                </div>\n\n                <motion.button\n                  whileHover={{ scale: 1.1 }}\n                  whileTap={{ scale: 0.9 }}\n                  onClick={() => !isPlaying && currentStep < steps.length - 1 && setCurrentStep(currentStep + 1)}\n                  disabled={isPlaying || currentStep >= steps.length - 1 || steps.length === 0}\n                  className=\"px-3 py-1 bg-cyan-500/20 border border-cyan-400/50 rounded-lg text-cyan-300 font-semibold hover:bg-cyan-500/30 hover:shadow-[0_0_15px_rgba(0,255,255,0.5)] transition-all disabled:opacity-30 disabled:cursor-not-allowed\"\n                >\n                  Next \u2192\n                </motion.button>\n              </div>\n            </div>\n\n            {/* Playback Info */}\n            {steps.length > 0 && (\n              <motion.div\n                initial={{ opacity: 0, height: 0 }}\n                animate={{ opacity: 1, height: 'auto' }}\n                className=\"pt-3 border-t border-purple-500/20\"\n              >\n                <div className=\"flex items-center justify-between text-xs\">\n                  <div className=\"flex items-center gap-2\">\n                    <div className={`w-2 h-2 rounded-full ${isPlaying ? 'bg-green-400 animate-pulse shadow-[0_0_10px_rgba(74,222,128,0.8)]' : 'bg-gray-500'}`} />\n                    <span className=\"text-gray-400\">\n                      {isPlaying ? 'Playing' : currentStep >= steps.length - 1 ? 'Completed' : 'Paused'}\n                    </span>\n                  </div>\n                  <div className=\"text-gray-400 font-mono\">\n                    Speed: {speed[0]}ms\n                  </div>\n                </div>\n              </motion.div>\n            )}\n          </div>\n        </motion.div>\n      </div>\n    </div>\n  );\n}",
    "error": null,
    "elapsed_time": 104.3993513584137,
    "success": true
  }
}