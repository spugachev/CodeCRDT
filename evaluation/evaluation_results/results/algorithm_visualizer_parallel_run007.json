{
  "prompt_id": "algorithm_visualizer",
  "prompt_name": "Algorithm Visualizer",
  "mode": "parallel",
  "run_number": 7,
  "timestamp": "2025-10-13T20:56:35.135414",
  "response_time": 119.40489840507507,
  "total_tokens": null,
  "response_content": "import { useState, useCallback } from 'react';\nimport { useEffect } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Slider } from '@/components/ui/slider';\nimport { Play, Pause, RotateCcw, Zap, BarChart3 } from 'lucide-react';\n\nimport { Activity, ArrowUpDown, TrendingUp } from 'lucide-react';import { motion } from 'framer-motion';\n\ninterface ArrayElement {\n  value: number;\n  id: string;\n  isComparing?: boolean;\n  isSwapping?: boolean;\n  isSorted?: boolean;\n}\n\ninterface AlgorithmStep {\n  array: ArrayElement[];\n  comparingIndices: number[];\n  swappingIndices: number[];\n  sortedIndices: number[];\n}\n\ntype AlgorithmType = 'bubble' | 'quick' | 'merge' | 'insertion';\n\nconst NEON_COLORS = [\n  '#00ffff',\n  '#ff00ff', \n  '#00ff00',\n  '#ffff00',\n  '#ff0066',\n  '#00ffaa'\n];\n\nconst mockAlgorithms = [\n  { id: 'bubble', name: 'Bubble Sort', complexity: 'O(n\u00b2)' },\n  { id: 'quick', name: 'Quick Sort', complexity: 'O(n log n)' },\n  { id: 'merge', name: 'Merge Sort', complexity: 'O(n log n)' },\n  { id: 'insertion', name: 'Insertion Sort', complexity: 'O(n\u00b2)' }\n];\n\nexport default function AlgorithmVisualizer() {\n  const [array, setArray] = useState<ArrayElement[]>([]);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [speed, setSpeed] = useState([50]);\n  const [arraySize, setArraySize] = useState([20]);\n  const [selectedAlgorithm, setSelectedAlgorithm] = useState<AlgorithmType>('bubble');\n  const [currentStep, setCurrentStep] = useState(0);\n  const [steps, setSteps] = useState<AlgorithmStep[]>([]);\n  const [comparisons, setComparisons] = useState(0);\n  const [swaps, setSwaps] = useState(0);\n\n  const getBarColor = useCallback((element: ArrayElement, index: number) => {\n    if (element.isSorted) return '#00ff00';\n    if (element.isSwapping) return '#ff0066';\n    if (element.isComparing) return '#ffff00';\n    return NEON_COLORS[index % NEON_COLORS.length];\n  }, []);\n\n  const getBarGlow = useCallback((element: ArrayElement) => {\n    if (element.isSorted) return '0 0 20px rgba(0, 255, 0, 0.8), 0 0 40px rgba(0, 255, 0, 0.4)';\n    if (element.isSwapping) return '0 0 30px rgba(255, 0, 102, 0.9), 0 0 60px rgba(255, 0, 102, 0.5)';\n    if (element.isComparing) return '0 0 25px rgba(255, 255, 0, 0.9), 0 0 50px rgba(255, 255, 0, 0.5)';\n    return '0 0 15px rgba(0, 255, 255, 0.5), 0 0 30px rgba(0, 255, 255, 0.2)';\n  }, []);\n  const generateRandomArray = useCallback(() => {\n    const newArray: ArrayElement[] = Array.from({ length: arraySize[0] }, (_, index) => ({\n      value: Math.floor(Math.random() * 100) + 1,\n      id: `element-${Date.now()}-${index}`,\n      isComparing: false,\n      isSwapping: false,\n      isSorted: false\n    }));\n    setArray(newArray);\n    setSteps([]);\n    setCurrentStep(0);\n    setIsPlaying(false);\n  }, [arraySize]);\n\n  const resetVisualization = useCallback(() => {\n\n    setIsPlaying(false);\n    setCurrentStep(0);\n    setSteps([]);\n    generateRandomArray();\n  }, [generateRandomArray]);\n\n  const animateSteps = useCallback(() => {\n    if (currentStep >= steps.length) {\n      setIsPlaying(false);\n      return;\n    }\n\n    const step = steps[currentStep];\n    setArray(step.array);\n    setCurrentStep(prev => prev + 1);\n  }, [currentStep, steps]);\n\n  useEffect(() => {\n    if (!isPlaying) return;\n\n    const delay = 1000 - (speed[0] * 9.5);\n    const timer = setTimeout(() => {\n      animateSteps();\n    }, delay);\n\n    return () => clearTimeout(timer);\n  }, [isPlaying, speed, animateSteps]);\n  const startVisualization = useCallback(() => {\n    if (steps.length === 0 || currentStep >= steps.length) return;\n    setIsPlaying(true);\n  }, [steps, speed, currentStep]);\n\n  const pauseVisualization = useCallback(() => {\n    setIsPlaying(false);\n  }, []);\n\n  const generateSortingSteps = useCallback((algorithm: AlgorithmType) => {\n        if (array.length === 0) return;\n\n    const steps: AlgorithmStep[] = [];\n    const arr = array.map(el => ({ ...el }));\n\n    const addStep = (\n      currentArray: ArrayElement[],\n      comparing: number[] = [],\n      swapping: number[] = [],\n      sorted: number[] = []\n    ) => {\n      steps.push({\n        array: currentArray.map(el => ({ ...el })),\n        comparingIndices: [...comparing],\n        swappingIndices: [...swapping],\n        sortedIndices: [...sorted]\n      });\n    };\n\n    if (algorithm === 'bubble') {\n      const sortedIndices: number[] = [];\n      for (let i = 0; i < arr.length - 1; i++) {\n        for (let j = 0; j < arr.length - i - 1; j++) {\n          addStep(arr, [j, j + 1], [], sortedIndices);\n          \n          if (arr[j].value > arr[j + 1].value) {\n            addStep(arr, [], [j, j + 1], sortedIndices);\n            [arr[j], arr[j + 1]] = [arr[j + 1], arr[j]];\n            addStep(arr, [], [], sortedIndices);\n          }\n        }\n        sortedIndices.push(arr.length - i - 1);\n        addStep(arr, [], [], sortedIndices);\n      }\n      sortedIndices.push(0);\n      addStep(arr, [], [], sortedIndices);\n    } else if (algorithm === 'insertion') {\n      const sortedIndices: number[] = [0];\n      addStep(arr, [], [], sortedIndices);\n      \n      for (let i = 1; i < arr.length; i++) {\n        const key = arr[i];\n        let j = i - 1;\n        \n        addStep(arr, [i], [], sortedIndices);\n        \n        while (j >= 0 && arr[j].value > key.value) {\n          addStep(arr, [j, j + 1], [], sortedIndices);\n          addStep(arr, [], [j, j + 1], sortedIndices);\n          arr[j + 1] = arr[j];\n          addStep(arr, [], [], sortedIndices);\n          j--;\n        }\n        \n        arr[j + 1] = key;\n        sortedIndices.push(i);\n        addStep(arr, [], [], sortedIndices);\n      }\n    } else if (algorithm === 'quick') {\n      const sortedIndices: number[] = [];\n      \n      const partition = (low: number, high: number): number => {\n        const pivot = arr[high];\n        addStep(arr, [high], [], sortedIndices);\n        let i = low - 1;\n        \n        for (let j = low; j < high; j++) {\n          addStep(arr, [j, high], [], sortedIndices);\n          \n          if (arr[j].value < pivot.value) {\n            i++;\n            addStep(arr, [], [i, j], sortedIndices);\n            [arr[i], arr[j]] = [arr[j], arr[i]];\n            addStep(arr, [], [], sortedIndices);\n          }\n        }\n        \n        addStep(arr, [], [i + 1, high], sortedIndices);\n        [arr[i + 1], arr[high]] = [arr[high], arr[i + 1]];\n        sortedIndices.push(i + 1);\n        addStep(arr, [], [], sortedIndices);\n        \n        return i + 1;\n      };\n      \n      const quickSort = (low: number, high: number) => {\n        if (low < high) {\n          const pi = partition(low, high);\n          quickSort(low, pi - 1);\n          quickSort(pi + 1, high);\n        } else if (low === high) {\n          sortedIndices.push(low);\n          addStep(arr, [], [], sortedIndices);\n        }\n      };\n      \n      quickSort(0, arr.length - 1);\n    } else if (algorithm === 'merge') {\n      const sortedIndices: number[] = [];\n      \n      const merge = (left: number, mid: number, right: number) => {\n        const leftArr = arr.slice(left, mid + 1);\n        const rightArr = arr.slice(mid + 1, right + 1);\n        \n        let i = 0, j = 0, k = left;\n        \n        while (i < leftArr.length && j < rightArr.length) {\n          addStep(arr, [left + i, mid + 1 + j], [], sortedIndices);\n          \n          if (leftArr[i].value <= rightArr[j].value) {\n            addStep(arr, [], [k], sortedIndices);\n            arr[k] = leftArr[i];\n            i++;\n          } else {\n            addStep(arr, [], [k], sortedIndices);\n            arr[k] = rightArr[j];\n            j++;\n          }\n          k++;\n          addStep(arr, [], [], sortedIndices);\n        }\n        \n        while (i < leftArr.length) {\n          addStep(arr, [], [k], sortedIndices);\n          arr[k] = leftArr[i];\n          i++;\n          k++;\n          addStep(arr, [], [], sortedIndices);\n        }\n        \n        while (j < rightArr.length) {\n          addStep(arr, [], [k], sortedIndices);\n          arr[k] = rightArr[j];\n          j++;\n          k++;\n          addStep(arr, [], [], sortedIndices);\n        }\n        \n        if (left === 0 && right === arr.length - 1) {\n          for (let idx = 0; idx < arr.length; idx++) {\n            sortedIndices.push(idx);\n          }\n        }\n        addStep(arr, [], [], sortedIndices);\n      };\n      \n      const mergeSort = (left: number, right: number) => {\n        if (left < right) {\n          const mid = Math.floor((left + right) / 2);\n          mergeSort(left, mid);\n          mergeSort(mid + 1, right);\n          merge(left, mid, right);\n        }\n      };\n      \n      mergeSort(0, arr.length - 1);\n    }\n\n    setSteps(steps);\n    setCurrentStep(0);\n  }, [array]);\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-gray-900 via-purple-900 to-gray-900 p-8\">\n      <div className=\"max-w-7xl mx-auto space-y-8\">\n        <motion.div\n          initial={{ opacity: 0, y: -20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.8 }}\n          className=\"text-center space-y-4\"\n        >\n          <motion.h1\n            className=\"text-6xl font-bold bg-gradient-to-r from-cyan-400 via-purple-400 to-pink-400 bg-clip-text text-transparent\"\n            animate={{\n              textShadow: [\n                '0 0 20px rgba(0, 255, 255, 0.5)',\n                '0 0 40px rgba(255, 0, 255, 0.5)',\n                '0 0 20px rgba(0, 255, 255, 0.5)'\n              ]\n            }}\n            transition={{ duration: 2, repeat: Infinity }}\n          >\n            Algorithm Visualizer\n          </motion.h1>\n          \n          <div className=\"flex items-center justify-center gap-4\">\n            <motion.div\n              initial={{ scale: 0 }}\n              animate={{ scale: 1 }}\n              transition={{ delay: 0.3, type: 'spring', stiffness: 200 }}\n              className=\"flex items-center gap-2 px-6 py-3 bg-gray-800/50 backdrop-blur-sm rounded-full border border-cyan-500/30\"\n            >\n              <Zap className=\"w-5 h-5 text-cyan-400\" />\n              <span className=\"text-xl font-semibold text-cyan-300\">\n                {mockAlgorithms.find(a => a.id === selectedAlgorithm)?.name || 'Bubble Sort'}\n              </span>\n            </motion.div>\n            \n            <motion.div\n              initial={{ scale: 0 }}\n              animate={{ scale: 1 }}\n              transition={{ delay: 0.5, type: 'spring', stiffness: 200 }}\n              className=\"relative px-5 py-2 bg-gradient-to-r from-purple-600/20 to-pink-600/20 backdrop-blur-sm rounded-full border border-purple-400/50\"\n            >\n              <motion.div\n                className=\"absolute inset-0 bg-gradient-to-r from-purple-600/30 to-pink-600/30 rounded-full blur-md\"\n                animate={{\n                  opacity: [0.5, 1, 0.5]\n                }}\n                transition={{ duration: 2, repeat: Infinity }}\n              />\n              <div className=\"relative flex items-center gap-2\">\n                <BarChart3 className=\"w-4 h-4 text-purple-300\" />\n                <span className=\"text-sm font-mono text-purple-200\">\n                  {mockAlgorithms.find(a => a.id === selectedAlgorithm)?.complexity || 'O(n\u00b2)'}\n                </span>\n              </div>\n            </motion.div>\n          </div>\n        </motion.div></parameter>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-6\">\n          <div className=\"lg:col-span-1 space-y-6\">\n            <motion.div\n              initial={{ opacity: 0, x: -50 }}\n              animate={{ opacity: 1, x: 0 }}\n              transition={{ duration: 0.6 }}\n              className=\"bg-gray-800/50 backdrop-blur-lg rounded-2xl p-6 border border-cyan-500/30 shadow-[0_0_30px_rgba(0,255,255,0.3)]\"\n            >\n              <div className=\"space-y-6\">\n                {/* Algorithm Selection */}\n                <div className=\"space-y-3\">\n                  <h3 className=\"text-cyan-400 font-semibold text-sm uppercase tracking-wider flex items-center gap-2\">\n                    <Zap className=\"w-4 h-4\" />\n                    Algorithm\n                  </h3>\n                  <div className=\"space-y-2\">\n                    {mockAlgorithms.map((algo) => (\n                      <button\n                        key={algo.id}\n                        onClick={() => {\n                          setSelectedAlgorithm(algo.id as AlgorithmType);\n                          generateSortingSteps(algo.id as AlgorithmType);\n                        }}\n                        disabled={isPlaying}\n                        className={`w-full text-left px-4 py-3 rounded-lg transition-all duration-300 ${\n                          selectedAlgorithm === algo.id\n                            ? 'bg-cyan-500/20 border-2 border-cyan-400 shadow-[0_0_20px_rgba(0,255,255,0.4)]'\n                            : 'bg-gray-700/30 border-2 border-gray-600/30 hover:border-cyan-500/50 hover:shadow-[0_0_15px_rgba(0,255,255,0.2)]'\n                        } disabled:opacity-50 disabled:cursor-not-allowed`}\n                      >\n                        <div className=\"flex justify-between items-center\">\n                          <span className=\"text-white font-medium\">{algo.name}</span>\n                          <span className=\"text-xs text-gray-400 font-mono\">{algo.complexity}</span>\n                        </div>\n                      </button>\n                    ))}\n                  </div>\n                </div>\n\n                {/* Array Size Control */}\n                <div className=\"space-y-3\">\n                  <div className=\"flex justify-between items-center\">\n                    <h3 className=\"text-purple-400 font-semibold text-sm uppercase tracking-wider flex items-center gap-2\">\n                      <BarChart3 className=\"w-4 h-4\" />\n                      Array Size\n                    </h3>\n                    <span className=\"text-white font-mono text-lg\">{arraySize[0]}</span>\n                  </div>\n                  <Slider\n                    value={arraySize}\n                    onValueChange={(value) => {\n                      setArraySize(value);\n                      generateRandomArray();\n                    }}\n                    min={5}\n                    max={50}\n                    step={1}\n                    disabled={isPlaying}\n                    className=\"cursor-pointer\"\n                  />\n                </div>\n\n                {/* Speed Control */}\n                <div className=\"space-y-3\">\n                  <div className=\"flex justify-between items-center\">\n                    <h3 className=\"text-pink-400 font-semibold text-sm uppercase tracking-wider\">\n                      Speed\n                    </h3>\n                    <span className=\"text-white font-mono text-lg\">{speed[0]}%</span>\n                  </div>\n                  <Slider\n                    value={speed}\n                    onValueChange={setSpeed}\n                    min={10}\n                    max={100}\n                    step={10}\n                    className=\"cursor-pointer\"\n                  />\n                </div>\n\n                {/* Control Buttons */}\n                <div className=\"space-y-3 pt-4 border-t border-gray-700/50\">\n                  <Button\n                    onClick={isPlaying ? pauseVisualization : startVisualization}\n                    disabled={steps.length === 0 || currentStep >= steps.length}\n                    className=\"w-full bg-gradient-to-r from-cyan-500 to-blue-500 hover:from-cyan-400 hover:to-blue-400 text-white font-semibold py-6 rounded-lg shadow-[0_0_25px_rgba(0,255,255,0.5)] hover:shadow-[0_0_35px_rgba(0,255,255,0.7)] transition-all duration-300 disabled:opacity-50 disabled:cursor-not-allowed\"\n                  >\n                    {isPlaying ? (\n                      <span className=\"flex items-center justify-center gap-2\">\n                        <Pause className=\"w-5 h-5\" />\n                        Pause\n                      </span>\n                    ) : (\n                      <span className=\"flex items-center justify-center gap-2\">\n                        <Play className=\"w-5 h-5\" />\n                        {currentStep >= steps.length ? 'Completed' : 'Start'}\n                      </span>\n                    )}\n                  </Button>\n\n                  <Button\n                    onClick={resetVisualization}\n                    disabled={isPlaying}\n                    className=\"w-full bg-gradient-to-r from-purple-500 to-pink-500 hover:from-purple-400 hover:to-pink-400 text-white font-semibold py-6 rounded-lg shadow-[0_0_25px_rgba(255,0,255,0.5)] hover:shadow-[0_0_35px_rgba(255,0,255,0.7)] transition-all duration-300 disabled:opacity-50 disabled:cursor-not-allowed\"\n                  >\n                    <span className=\"flex items-center justify-center gap-2\">\n                      <RotateCcw className=\"w-5 h-5\" />\n                      Reset\n                    </span>\n                  </Button>\n                </div>\n\n                {/* Stats Display */}\n                <div className=\"pt-4 border-t border-gray-700/50 space-y-2\">\n                  <div className=\"flex justify-between items-center text-sm\">\n                    <span className=\"text-gray-400\">Current Step</span>\n                    <span className=\"text-cyan-400 font-mono font-semibold\">\n                      {currentStep} / {steps.length}\n                    </span>\n                  </div>\n                  <div className=\"w-full bg-gray-700/30 rounded-full h-2 overflow-hidden\">\n                    <motion.div\n                      className=\"h-full bg-gradient-to-r from-cyan-500 to-purple-500 shadow-[0_0_10px_rgba(0,255,255,0.8)]\"\n                      initial={{ width: 0 }}\n                      animate={{ width: `${steps.length > 0 ? (currentStep / steps.length) * 100 : 0}%` }}\n                      transition={{ duration: 0.3 }}\n                    />\n                  </div>\n                </div>\n              </div>\n            </motion.div>\n            \n            <div className=\"bg-gray-800/50 backdrop-blur-lg rounded-2xl p-6 border border-cyan-500/30 shadow-lg shadow-cyan-500/20\">\n              <div className=\"space-y-6\">\n                <div>\n                  <h3 className=\"text-cyan-400 font-semibold mb-4 flex items-center gap-2\">\n                    <Zap className=\"w-5 h-5\" />\n                    Algorithm\n                  </h3>\n                  <div className=\"grid grid-cols-2 gap-2\">\n                    {mockAlgorithms.map((algo) => (\n                      <Button\n                        key={algo.id}\n                        onClick={() => setSelectedAlgorithm(algo.id as AlgorithmType)}\n                        variant={selectedAlgorithm === algo.id ? 'default' : 'outline'}\n                        className={`\n                          relative overflow-hidden transition-all duration-300\n                          ${selectedAlgorithm === algo.id \n                            ? 'bg-cyan-500 text-gray-900 border-cyan-400 shadow-lg shadow-cyan-500/50' \n                            : 'bg-gray-700/50 text-cyan-300 border-cyan-500/30 hover:border-cyan-400 hover:shadow-md hover:shadow-cyan-500/30'\n                          }\n                        `}\n                      >\n                        <span className=\"relative z-10 text-xs font-medium\">\n                          {algo.name.split(' ')[0]}\n                        </span>\n                        {selectedAlgorithm === algo.id && (\n                          <motion.div\n                            layoutId=\"activeAlgorithm\"\n                            className=\"absolute inset-0 bg-gradient-to-r from-cyan-400 to-cyan-600\"\n                            initial={false}\n                            transition={{ type: 'spring', stiffness: 300, damping: 30 }}\n                          />\n                        )}\n                      </Button>\n                    ))}\n                  </div>\n                </div>\n\n                <div>\n                  <h3 className=\"text-cyan-400 font-semibold mb-4 flex items-center gap-2\">\n                    <BarChart3 className=\"w-5 h-5\" />\n                    Array Size: {arraySize[0]}\n                  </h3>\n                  <Slider\n                    value={arraySize}\n                    onValueChange={setArraySize}\n                    min={5}\n                    max={50}\n                    step={1}\n                    className=\"[&_[role=slider]]:bg-cyan-400 [&_[role=slider]]:border-cyan-300 [&_[role=slider]]:shadow-lg [&_[role=slider]]:shadow-cyan-400/50 [&_[role=slider]]:transition-all [&_[role=slider]]:hover:shadow-cyan-400/80 [&_.relative]:bg-gray-700 [&_.bg-primary]:bg-gradient-to-r [&_.bg-primary]:from-cyan-500 [&_.bg-primary]:to-purple-500\"\n                  />\n                </div>\n\n                <div>\n                  <h3 className=\"text-cyan-400 font-semibold mb-4\">\n                    Speed: {speed[0]}ms\n                  </h3>\n                  <Slider\n                    value={speed}\n                    onValueChange={setSpeed}\n                    min={10}\n                    max={500}\n                    step={10}\n                    className=\"[&_[role=slider]]:bg-gradient-to-r [&_[role=slider]]:from-purple-500 [&_[role=slider]]:to-pink-500 [&_[role=slider]]:border-0 [&_[role=slider]]:shadow-lg [&_[role=slider]]:shadow-purple-500/50 [&_[role=slider]]:transition-shadow [&_[role=slider]]:hover:shadow-xl [&_[role=slider]]:hover:shadow-purple-500/70 [&_[role=slider]]:h-5 [&_[role=slider]]:w-5 [&_[role=track]]:bg-gradient-to-r [&_[role=track]]:from-purple-900/50 [&_[role=track]]:to-pink-900/50 [&_[role=track]]:h-2 [&_[role=range]]:bg-gradient-to-r [&_[role=range]]:from-purple-500 [&_[role=range]]:to-pink-500 [&_[role=range]]:shadow-lg [&_[role=range]]:shadow-purple-500/30\"\n                  /></parameter>\n                </div>\n\n                <div className=\"space-y-3 pt-4 border-t border-cyan-500/20\">\n                  <Button\n                    onClick={isPlaying ? pauseVisualization : startVisualization}\n                    disabled={array.length === 0 || (currentStep >= steps.length && steps.length > 0)}\n                    className=\"w-full relative overflow-hidden bg-gradient-to-r from-cyan-600 to-blue-600 hover:from-cyan-500 hover:to-blue-500 text-white font-semibold py-6 rounded-xl border-2 border-cyan-400/50 shadow-[0_0_30px_rgba(0,255,255,0.4)] hover:shadow-[0_0_50px_rgba(0,255,255,0.6)] transition-all duration-300 disabled:opacity-50 disabled:cursor-not-allowed disabled:shadow-none\"\n                  >\n                    <motion.div\n                      className=\"absolute inset-0 bg-gradient-to-r from-cyan-400/0 via-white/30 to-cyan-400/0\"\n                      animate={{\n                        x: ['-100%', '100%']\n                      }}\n                      transition={{\n                        duration: 2,\n                        repeat: Infinity,\n                        ease: 'linear'\n                      }}\n                    />\n                    <motion.div\n                      className=\"relative flex items-center justify-center gap-2\"\n                      whileHover={{ scale: 1.05 }}\n                      whileTap={{ scale: 0.95 }}\n                    >\n                      <motion.div\n                        key={isPlaying ? 'pause' : 'play'}\n                        initial={{ scale: 0, rotate: -180 }}\n                        animate={{ scale: 1, rotate: 0 }}\n                        exit={{ scale: 0, rotate: 180 }}\n                        transition={{ type: 'spring', stiffness: 200, damping: 15 }}\n                      >\n                        {isPlaying ? (\n                          <Pause className=\"w-5 h-5\" fill=\"currentColor\" />\n                        ) : (\n                          <Play className=\"w-5 h-5\" fill=\"currentColor\" />\n                        )}\n                      </motion.div>\n                      <span className=\"text-lg\">\n                        {isPlaying ? 'Pause' : 'Play'}\n                      </span>\n                    </motion.div>\n                  </Button>\n                  \n                  <motion.div whileTap={{ rotate: 360 }} transition={{ duration: 0.6 }}>\n                    <Button\n                      onClick={resetVisualization}\n                      disabled={isPlaying}\n                      className=\"w-full bg-gradient-to-r from-orange-500 to-red-500 hover:from-orange-600 hover:to-red-600 text-white border-0 shadow-lg shadow-orange-500/50 hover:shadow-xl hover:shadow-orange-500/70 transition-all duration-300 disabled:opacity-50 disabled:cursor-not-allowed\"\n                    >\n                      <RotateCcw className=\"w-4 h-4 mr-2\" />\n                      Reset\n                    </Button>\n                  </motion.div>\n                  \n                  <motion.div\n                    whileHover={{ scale: 1.05 }}\n                    whileTap={{ scale: 0.95 }}\n                  >\n                    <Button\n                      onClick={generateRandomArray}\n                      disabled={isPlaying}\n                      className=\"w-full bg-gradient-to-r from-green-500 to-emerald-500 hover:from-green-600 hover:to-emerald-600 text-white border-0 shadow-lg shadow-green-500/50 disabled:opacity-50 disabled:cursor-not-allowed relative overflow-hidden\"\n                    >\n                      <motion.div\n                        className=\"absolute inset-0 bg-white/20\"\n                        animate={{\n                          scale: [1, 1.5, 1.5, 1],\n                          opacity: [0.5, 0, 0, 0.5]\n                        }}\n                        transition={{\n                          duration: 2,\n                          repeat: Infinity,\n                          ease: \"easeInOut\"\n                        }}\n                      />\n                      <BarChart3 className=\"w-4 h-4 mr-2\" />\n                      <span className=\"relative z-10\">Generate Array</span>\n                    </Button>\n                  </motion.div>\n                </div>\n              </div>\n            </div>\n\n                        <motion.div\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ duration: 0.6, delay: 0.2 }}\n              className=\"bg-gray-800/50 backdrop-blur-lg rounded-2xl p-6 border border-purple-500/30 shadow-[0_0_30px_rgba(168,85,247,0.3)]\"\n            >\n              <h3 className=\"text-purple-400 font-semibold mb-4 flex items-center gap-2 text-sm uppercase tracking-wider\">\n                <Activity className=\"w-5 h-5\" />\n                Statistics\n              </h3>\n              \n              <div className=\"grid grid-cols-3 gap-4\">\n                {/* Current Step */}\n                <motion.div\n                  whileHover={{ scale: 1.05 }}\n                  className=\"relative overflow-hidden bg-gradient-to-br from-cyan-900/30 to-cyan-800/20 rounded-xl p-4 border border-cyan-500/40 shadow-lg\"\n                >\n                  <motion.div\n                    className=\"absolute inset-0 bg-gradient-to-br from-cyan-500/10 to-transparent\"\n                    animate={{\n                      opacity: [0.3, 0.6, 0.3]\n                    }}\n                    transition={{ duration: 2, repeat: Infinity }}\n                  />\n                  <div className=\"relative z-10\">\n                    <div className=\"flex items-center gap-2 mb-2\">\n                      <TrendingUp className=\"w-4 h-4 text-cyan-400\" />\n                      <p className=\"text-xs text-cyan-300 font-medium uppercase tracking-wide\">Step</p>\n                    </div>\n                    <motion.p\n                      key={currentStep}\n                      initial={{ scale: 1.5, opacity: 0 }}\n                      animate={{ scale: 1, opacity: 1 }}\n                      transition={{ type: 'spring', stiffness: 300, damping: 20 }}\n                      className=\"text-3xl font-bold text-white font-mono\"\n                    >\n                      {currentStep}\n                    </motion.p>\n                    <p className=\"text-xs text-cyan-400/70 mt-1\">of {steps.length}</p>\n                  </div>\n                </motion.div>\n\n                {/* Comparisons */}\n                <motion.div\n                  whileHover={{ scale: 1.05 }}\n                  className=\"relative overflow-hidden bg-gradient-to-br from-purple-900/30 to-purple-800/20 rounded-xl p-4 border border-purple-500/40 shadow-lg\"\n                >\n                  <motion.div\n                    className=\"absolute inset-0 bg-gradient-to-br from-purple-500/10 to-transparent\"\n                    animate={{\n                      opacity: [0.3, 0.6, 0.3]\n                    }}\n                    transition={{ duration: 2, repeat: Infinity, delay: 0.3 }}\n                  />\n                  <div className=\"relative z-10\">\n                    <div className=\"flex items-center gap-2 mb-2\">\n                      <BarChart3 className=\"w-4 h-4 text-purple-400\" />\n                      <p className=\"text-xs text-purple-300 font-medium uppercase tracking-wide\">Compares</p>\n                    </div>\n                    <motion.p\n                      key={comparisons}\n                      initial={{ scale: 1.5, opacity: 0 }}\n                      animate={{ scale: 1, opacity: 1 }}\n                      transition={{ type: 'spring', stiffness: 300, damping: 20 }}\n                      className=\"text-3xl font-bold text-white font-mono\"\n                    >\n                      {comparisons}\n                    </motion.p>\n                    <p className=\"text-xs text-purple-400/70 mt-1\">operations</p>\n                  </div>\n                </motion.div>\n\n                {/* Swaps */}\n                <motion.div\n                  whileHover={{ scale: 1.05 }}\n                  className=\"relative overflow-hidden bg-gradient-to-br from-pink-900/30 to-pink-800/20 rounded-xl p-4 border border-pink-500/40 shadow-lg\"\n                >\n                  <motion.div\n                    className=\"absolute inset-0 bg-gradient-to-br from-pink-500/10 to-transparent\"\n                    animate={{\n                      opacity: [0.3, 0.6, 0.3]\n                    }}\n                    transition={{ duration: 2, repeat: Infinity, delay: 0.6 }}\n                  />\n                  <div className=\"relative z-10\">\n                    <div className=\"flex items-center gap-2 mb-2\">\n                      <ArrowUpDown className=\"w-4 h-4 text-pink-400\" />\n                      <p className=\"text-xs text-pink-300 font-medium uppercase tracking-wide\">Swaps</p>\n                    </div>\n                    <motion.p\n                      key={swaps}\n                      initial={{ scale: 1.5, opacity: 0 }}\n                      animate={{ scale: 1, opacity: 1 }}\n                      transition={{ type: 'spring', stiffness: 300, damping: 20 }}\n                      className=\"text-3xl font-bold text-white font-mono\"\n                    >\n                      {swaps}\n                    </motion.p>\n                    <p className=\"text-xs text-pink-400/70 mt-1\">operations</p>\n                  </div>\n                </motion.div>\n              </div>\n\n              {/* Progress Bar */}\n              <div className=\"mt-6\">\n                <div className=\"flex justify-between items-center mb-2\">\n                  <span className=\"text-xs text-gray-400 uppercase tracking-wide\">Progress</span>\n                  <span className=\"text-xs text-gray-300 font-mono\">\n                    {steps.length > 0 ? Math.round((currentStep / steps.length) * 100) : 0}%\n                  </span>\n                </div>\n                <div className=\"relative h-2 bg-gray-700/50 rounded-full overflow-hidden\">\n                  <motion.div\n                    className=\"absolute inset-y-0 left-0 bg-gradient-to-r from-cyan-500 via-purple-500 to-pink-500 rounded-full shadow-lg shadow-purple-500/50\"\n                    initial={{ width: 0 }}\n                    animate={{ \n                      width: steps.length > 0 ? `${(currentStep / steps.length) * 100}%` : '0%'\n                    }}\n                    transition={{ duration: 0.3, ease: 'easeOut' }}\n                  />\n                  <motion.div\n                    className=\"absolute inset-0 bg-gradient-to-r from-transparent via-white/30 to-transparent\"\n                    animate={{\n                      x: ['-100%', '200%']\n                    }}\n                    transition={{\n                      duration: 2,\n                      repeat: Infinity,\n                      ease: 'linear'\n                    }}\n                  />\n                </div>\n              </div>\n            </motion.div>\n          </div>\n\n          <div className=\"lg:col-span-3\">\n            <div className=\"bg-gray-800/50 backdrop-blur-lg rounded-2xl p-8 border border-purple-500/30 shadow-lg shadow-purple-500/20 min-h-[600px]\">\n              {array.length === 0 ? (\n                <motion.div\n                  initial={{ opacity: 0, scale: 0.8 }}\n                  animate={{ opacity: 1, scale: 1 }}\n                  className=\"flex flex-col items-center justify-center h-full space-y-6\"\n                >\n                  <motion.div\n                    animate={{\n                      rotate: [0, 360],\n                      scale: [1, 1.2, 1]\n                    }}\n                    transition={{\n                      duration: 3,\n                      repeat: Infinity,\n                      ease: \"easeInOut\"\n                    }}\n                  >\n                    <Zap className=\"w-24 h-24 text-cyan-400\" style={{\n                      filter: 'drop-shadow(0 0 30px rgba(0, 255, 255, 0.8))'\n                    }} />\n                  </motion.div>\n                  <p className=\"text-2xl text-cyan-300 font-semibold\">\n                    Generate an array to start visualizing\n                  </p>\n                </motion.div>\n              ) : (\n                <div className=\"h-full flex items-end justify-center gap-1 px-4\">\n                  {array.map((element, index) => {\n                    const maxValue = Math.max(...array.map(el => el.value));\n                    const heightPercentage = (element.value / maxValue) * 100;\n                    const barColor = getBarColor(element, index);\n                    const barGlow = getBarGlow(element);\n\n                    return (\n                      <motion.div\n                        key={element.id}\n                        layout\n                        initial={{ opacity: 0, y: 50, scale: 0.5 }}\n                        animate={{\n                          opacity: 1,\n                          y: 0,\n                          scale: element.isSwapping ? 1.1 : 1,\n                          height: `${heightPercentage}%`\n                        }}\n                        exit={{ opacity: 0, scale: 0.5 }}\n                        transition={{\n                          layout: { type: 'spring', stiffness: 300, damping: 30 },\n                          height: { duration: 0.3, ease: 'easeInOut' },\n                          scale: { duration: 0.2 },\n                          opacity: { duration: 0.3 }\n                        }}\n                        className=\"relative flex-1 min-w-[4px] max-w-[60px] rounded-t-lg\"\n                        style={{\n                          backgroundColor: barColor,\n                          boxShadow: barGlow\n                        }}\n                      >\n                        {/* Trail effect for swapping */}\n                        {element.isSwapping && (\n                          <motion.div\n                            className=\"absolute inset-0 rounded-t-lg\"\n                            style={{\n                              backgroundColor: barColor,\n                              opacity: 0.5\n                            }}\n                            animate={{\n                              scale: [1, 1.5, 2],\n                              opacity: [0.5, 0.3, 0]\n                            }}\n                            transition={{\n                              duration: 0.6,\n                              repeat: Infinity,\n                              ease: 'easeOut'\n                            }}\n                          />\n                        )}\n\n                        {/* Pulse effect for comparing */}\n                        {element.isComparing && (\n                          <motion.div\n                            className=\"absolute inset-0 rounded-t-lg border-2 border-yellow-300\"\n                            animate={{\n                              opacity: [1, 0.3, 1]\n                            }}\n                            transition={{\n                              duration: 0.5,\n                              repeat: Infinity,\n                              ease: 'easeInOut'\n                            }}\n                          />\n                        )}\n\n                        {/* Sparkle effect for sorted */}\n                        {element.isSorted && (\n                          <motion.div\n                            className=\"absolute -top-2 left-1/2 transform -translate-x-1/2\"\n                            initial={{ scale: 0, rotate: 0 }}\n                            animate={{\n                              scale: [0, 1.5, 0],\n                              rotate: [0, 180, 360],\n                              opacity: [0, 1, 0]\n                            }}\n                            transition={{\n                              duration: 1,\n                              ease: 'easeOut'\n                            }}\n                          >\n                            <div className=\"w-3 h-3 bg-green-400 rounded-full\"\n                              style={{\n                                boxShadow: '0 0 10px rgba(0, 255, 0, 0.8)'\n                              }}\n                            />\n                          </motion.div>\n                        )}\n\n                        {/* Value label for larger arrays */}\n                        {arraySize[0] <= 20 && (\n                          <motion.div\n                            className=\"absolute -bottom-6 left-1/2 transform -translate-x-1/2 text-xs font-mono text-gray-400\"\n                            initial={{ opacity: 0 }}\n                            animate={{ opacity: 1 }}\n                            transition={{ delay: 0.2 }}\n                          >\n                            {element.value}\n                          </motion.div>\n                        )}\n\n                        {/* Top glow indicator */}\n                        <motion.div\n                          className=\"absolute -top-1 left-0 right-0 h-1 rounded-full\"\n                          style={{\n                            backgroundColor: barColor,\n                            filter: 'blur(4px)',\n                            opacity: 0.8\n                          }}\n                          animate={{\n                            opacity: element.isComparing || element.isSwapping ? [0.8, 1, 0.8] : 0.8\n                          }}\n                          transition={{\n                            duration: 0.5,\n                            repeat: element.isComparing || element.isSwapping ? Infinity : 0\n                          }}\n                        />\n                      </motion.div>\n                    );\n                  })}\n                </div>\n              )}</parameter>\n              \n              <div className=\"h-full flex items-end justify-center gap-1\">\n                {array.map((element, index) => {\n                  const isComparing = steps[currentStep]?.comparingIndices.includes(index);\n                  const isSwapping = steps[currentStep]?.swappingIndices.includes(index);\n                  const isSorted = steps[currentStep]?.sortedIndices.includes(index);\n                  \n                  const barColor = isSorted \n                    ? '#00ff00' \n                    : isSwapping \n                    ? '#ff0066' \n                    : isComparing \n                    ? '#ffff00' \n                    : NEON_COLORS[index % NEON_COLORS.length];\n                  \n                  const maxHeight = 500;\n                  const barHeight = (element.value / 100) * maxHeight;\n                  \n                  return (\n                    <motion.div\n                      key={element.id}\n                      layout\n                      initial={{ height: 0, opacity: 0 }}\n                      animate={{\n                        height: barHeight,\n                        opacity: 1,\n                        scale: isComparing ? 1.1 : isSwapping ? 1.15 : 1,\n                        y: isSwapping ? -20 : 0\n                      }}\n                      transition={{\n                        height: { type: 'spring', stiffness: 100, damping: 20 },\n                        scale: { type: 'spring', stiffness: 300, damping: 15 },\n                        y: { type: 'spring', stiffness: 200, damping: 10 },\n                        layout: { type: 'spring', stiffness: 300, damping: 30 }\n                      }}\n                      className=\"relative rounded-t-lg\"\n                      style={{\n                        width: `${Math.max(8, 600 / arraySize[0])}px`,\n                        backgroundColor: barColor,\n                        boxShadow: `\n                          0 0 ${isSwapping ? '40px' : isComparing ? '30px' : '20px'} ${barColor},\n                          0 0 ${isSwapping ? '60px' : isComparing ? '45px' : '30px'} ${barColor}80,\n                          inset 0 0 ${isSwapping ? '20px' : isComparing ? '15px' : '10px'} ${barColor}40\n                        `,\n                        border: `2px solid ${barColor}`,\n                        filter: `brightness(${isSwapping ? 1.5 : isComparing ? 1.3 : 1})`\n                      }}\n                    >\n                      {/* Glow effect overlay */}\n                      <motion.div\n                        className=\"absolute inset-0 rounded-t-lg\"\n                        animate={{\n                          opacity: isSwapping ? [0.5, 1, 0.5] : isComparing ? [0.3, 0.7, 0.3] : [0.2, 0.4, 0.2]\n                        }}\n                        transition={{\n                          duration: isSwapping ? 0.3 : isComparing ? 0.5 : 1,\n                          repeat: Infinity,\n                          ease: 'easeInOut'\n                        }}\n                        style={{\n                          background: `linear-gradient(to top, transparent, ${barColor}60)`,\n                          boxShadow: `inset 0 0 20px ${barColor}80`\n                        }}\n                      />\n                      \n                      {/* Trail effect for swapping */}\n                      {isSwapping && (\n                        <motion.div\n                          className=\"absolute inset-0 rounded-t-lg\"\n                          initial={{ opacity: 0, y: 0 }}\n                          animate={{\n                            opacity: [0, 0.8, 0],\n                            y: [0, 30, 60],\n                            scaleY: [1, 0.8, 0.3]\n                          }}\n                          transition={{\n                            duration: 0.6,\n                            repeat: Infinity,\n                            ease: 'easeOut'\n                          }}\n                          style={{\n                            backgroundColor: barColor,\n                            filter: 'blur(8px)',\n                            zIndex: -1\n                          }}\n                        />\n                      )}\n                      \n                      {/* Value label */}\n                      <motion.div\n                        className=\"absolute -top-8 left-1/2 transform -translate-x-1/2 text-xs font-mono font-bold whitespace-nowrap\"\n                        animate={{\n                          scale: isSwapping ? [1, 1.3, 1] : isComparing ? [1, 1.2, 1] : 1,\n                          y: isSwapping ? [-5, -10, -5] : 0\n                        }}\n                        transition={{\n                          duration: 0.3,\n                          repeat: isSwapping || isComparing ? Infinity : 0\n                        }}\n                        style={{\n                          color: barColor,\n                          textShadow: `0 0 10px ${barColor}, 0 0 20px ${barColor}80`,\n                          fontSize: arraySize[0] > 30 ? '10px' : '12px'\n                        }}\n                      >\n                        {element.value}\n                      </motion.div>\n                      \n                      {/* Sorted checkmark indicator */}\n                      {isSorted && (\n                        <motion.div\n                          initial={{ scale: 0, rotate: -180 }}\n                          animate={{ scale: 1, rotate: 0 }}\n                          transition={{ type: 'spring', stiffness: 200, damping: 10 }}\n                          className=\"absolute -top-6 left-1/2 transform -translate-x-1/2\"\n                        >\n                          <div \n                            className=\"w-4 h-4 rounded-full flex items-center justify-center\"\n                            style={{\n                              backgroundColor: '#00ff00',\n                              boxShadow: '0 0 15px #00ff00, 0 0 25px #00ff0080'\n                            }}\n                          >\n                            <span className=\"text-gray-900 text-xs font-bold\">\u2713</span>\n                          </div>\n                        </motion.div>\n                      )}\n                      \n                      {/* Particle effects for swapping */}\n                      {isSwapping && (\n                        <>\n                          {[...Array(3)].map((_, i) => (\n                            <motion.div\n                              key={i}\n                              className=\"absolute w-2 h-2 rounded-full\"\n                              initial={{ \n                                x: 0, \n                                y: 0, \n                                opacity: 1,\n                                scale: 1\n                              }}\n                              animate={{\n                                x: [0, (Math.random() - 0.5) * 40],\n                                y: [0, -40 - Math.random() * 30],\n                                opacity: [1, 0],\n                                scale: [1, 0]\n                              }}\n                              transition={{\n                                duration: 0.8,\n                                delay: i * 0.1,\n                                repeat: Infinity,\n                                ease: 'easeOut'\n                              }}\n                              style={{\n                                backgroundColor: barColor,\n                                boxShadow: `0 0 10px ${barColor}`,\n                                left: '50%',\n                                top: '0'\n                              }}\n                            />\n                          ))}\n                        </>\n                      )}\n                    </motion.div>\n                  );\n                })}\n              </div>\n            </div>\n\n            <motion.div\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ duration: 0.6, delay: 0.3 }}\n              className=\"mt-6 bg-gray-800/50 backdrop-blur-lg rounded-2xl p-6 border border-purple-500/30 shadow-lg shadow-purple-500/20\"\n            >\n              <h3 className=\"text-purple-400 font-semibold text-sm uppercase tracking-wider mb-4 flex items-center gap-2\">\n                <BarChart3 className=\"w-4 h-4\" />\n                Bar States Legend\n              </h3>\n              <div className=\"grid grid-cols-2 gap-4\">\n                <motion.div\n                  whileHover={{ scale: 1.05 }}\n                  className=\"flex items-center gap-3 p-3 bg-gray-700/30 rounded-lg border border-gray-600/30\"\n                >\n                  <div className=\"w-6 h-12 bg-gradient-to-t from-cyan-500 to-cyan-300 rounded shadow-[0_0_15px_rgba(0,255,255,0.6)]\" />\n                  <div>\n                    <div className=\"text-white font-medium text-sm\">Normal</div>\n                    <div className=\"text-gray-400 text-xs\">Unsorted element</div>\n                  </div>\n                </motion.div>\n\n                <motion.div\n                  whileHover={{ scale: 1.05 }}\n                  className=\"flex items-center gap-3 p-3 bg-gray-700/30 rounded-lg border border-gray-600/30\"\n                >\n                  <div className=\"w-6 h-12 bg-gradient-to-t from-yellow-500 to-yellow-300 rounded shadow-[0_0_20px_rgba(255,255,0,0.8)] animate-pulse\" />\n                  <div>\n                    <div className=\"text-white font-medium text-sm\">Comparing</div>\n                    <div className=\"text-gray-400 text-xs\">Being compared</div>\n                  </div>\n                </motion.div>\n\n                <motion.div\n                  whileHover={{ scale: 1.05 }}\n                  className=\"flex items-center gap-3 p-3 bg-gray-700/30 rounded-lg border border-gray-600/30\"\n                >\n                  <div className=\"w-6 h-12 bg-gradient-to-t from-red-500 to-red-300 rounded shadow-[0_0_25px_rgba(255,0,0,0.8)]\" />\n                  <div>\n                    <div className=\"text-white font-medium text-sm\">Swapping</div>\n                    <div className=\"text-gray-400 text-xs\">Position changing</div>\n                  </div>\n                </motion.div>\n\n                <motion.div\n                  whileHover={{ scale: 1.05 }}\n                  className=\"flex items-center gap-3 p-3 bg-gray-700/30 rounded-lg border border-gray-600/30\"\n                >\n                  <div className=\"w-6 h-12 bg-gradient-to-t from-green-500 to-green-300 rounded shadow-[0_0_20px_rgba(0,255,0,0.7)]\" />\n                  <div>\n                    <div className=\"text-white font-medium text-sm\">Sorted</div>\n                    <div className=\"text-gray-400 text-xs\">In final position</div>\n                  </div>\n                </motion.div>\n              </div>\n            </motion.div>\n          </div>\n        </div>\n\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.8, delay: 0.4 }}\n          className=\"bg-gray-800/50 backdrop-blur-lg rounded-2xl p-8 border border-cyan-500/30 shadow-[0_0_30px_rgba(0,255,255,0.2)]\"\n        >\n          <div className=\"space-y-6\">\n            <div className=\"flex items-center gap-3 mb-6\">\n              <motion.div\n                animate={{\n                  rotate: [0, 360],\n                }}\n                transition={{ duration: 3, repeat: Infinity, ease: \"linear\" }}\n              >\n                <BarChart3 className=\"w-8 h-8 text-cyan-400\" />\n              </motion.div>\n              <h2 className=\"text-3xl font-bold bg-gradient-to-r from-cyan-400 to-purple-400 bg-clip-text text-transparent\">\n                Algorithm Complexity\n              </h2>\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              {/* Time Complexity */}\n              <motion.div\n                whileHover={{ scale: 1.02 }}\n                className=\"bg-gradient-to-br from-cyan-900/30 to-blue-900/30 rounded-xl p-6 border border-cyan-500/40 shadow-[0_0_20px_rgba(0,255,255,0.2)]\"\n              >\n                <div className=\"flex items-center gap-2 mb-4\">\n                  <Zap className=\"w-5 h-5 text-cyan-400\" />\n                  <h3 className=\"text-xl font-semibold text-cyan-300\">Time Complexity</h3>\n                </div>\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-baseline gap-2\">\n                    <span className=\"text-gray-400 text-sm\">Best Case:</span>\n                    <span className=\"text-2xl font-mono font-bold text-green-400\">\n                      {selectedAlgorithm === 'bubble' && 'O(n)'}\n                      {selectedAlgorithm === 'insertion' && 'O(n)'}\n                      {selectedAlgorithm === 'quick' && 'O(n log n)'}\n                      {selectedAlgorithm === 'merge' && 'O(n log n)'}\n                    </span>\n                  </div>\n                  <div className=\"flex items-baseline gap-2\">\n                    <span className=\"text-gray-400 text-sm\">Average Case:</span>\n                    <span className=\"text-2xl font-mono font-bold text-yellow-400\">\n                      {selectedAlgorithm === 'bubble' && 'O(n\u00b2)'}\n                      {selectedAlgorithm === 'insertion' && 'O(n\u00b2)'}\n                      {selectedAlgorithm === 'quick' && 'O(n log n)'}\n                      {selectedAlgorithm === 'merge' && 'O(n log n)'}\n                    </span>\n                  </div>\n                  <div className=\"flex items-baseline gap-2\">\n                    <span className=\"text-gray-400 text-sm\">Worst Case:</span>\n                    <span className=\"text-2xl font-mono font-bold text-red-400\">\n                      {selectedAlgorithm === 'bubble' && 'O(n\u00b2)'}\n                      {selectedAlgorithm === 'insertion' && 'O(n\u00b2)'}\n                      {selectedAlgorithm === 'quick' && 'O(n\u00b2)'}\n                      {selectedAlgorithm === 'merge' && 'O(n log n)'}\n                    </span>\n                  </div>\n                </div>\n              </motion.div>\n\n              {/* Space Complexity */}\n              <motion.div\n                whileHover={{ scale: 1.02 }}\n                className=\"bg-gradient-to-br from-purple-900/30 to-pink-900/30 rounded-xl p-6 border border-purple-500/40 shadow-[0_0_20px_rgba(255,0,255,0.2)]\"\n              >\n                <div className=\"flex items-center gap-2 mb-4\">\n                  <BarChart3 className=\"w-5 h-5 text-purple-400\" />\n                  <h3 className=\"text-xl font-semibold text-purple-300\">Space Complexity</h3>\n                </div>\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-baseline gap-2\">\n                    <span className=\"text-gray-400 text-sm\">Auxiliary Space:</span>\n                    <span className=\"text-3xl font-mono font-bold text-purple-400\">\n                      {selectedAlgorithm === 'bubble' && 'O(1)'}\n                      {selectedAlgorithm === 'insertion' && 'O(1)'}\n                      {selectedAlgorithm === 'quick' && 'O(log n)'}\n                      {selectedAlgorithm === 'merge' && 'O(n)'}\n                    </span>\n                  </div>\n                  <p className=\"text-sm text-gray-400 mt-4\">\n                    {selectedAlgorithm === 'bubble' && 'In-place sorting with constant extra space'}\n                    {selectedAlgorithm === 'insertion' && 'In-place sorting with constant extra space'}\n                    {selectedAlgorithm === 'quick' && 'Recursive stack space for partitioning'}\n                    {selectedAlgorithm === 'merge' && 'Requires additional array for merging'}\n                  </p>\n                </div>\n              </motion.div>\n            </div>\n\n            {/* Algorithm Description */}\n            <motion.div\n              initial={{ opacity: 0 }}\n              animate={{ opacity: 1 }}\n              transition={{ delay: 0.6 }}\n              className=\"bg-gradient-to-r from-gray-800/50 to-gray-900/50 rounded-xl p-6 border border-gray-600/30\"\n            >\n              <h3 className=\"text-lg font-semibold text-cyan-300 mb-3 flex items-center gap-2\">\n                <Zap className=\"w-4 h-4\" />\n                How It Works\n              </h3>\n              <p className=\"text-gray-300 leading-relaxed\">\n                {selectedAlgorithm === 'bubble' && \n                  'Bubble Sort repeatedly steps through the list, compares adjacent elements and swaps them if they are in the wrong order. The pass through the list is repeated until the list is sorted. Larger elements \"bubble\" to the end of the array.'}\n                {selectedAlgorithm === 'insertion' && \n                  'Insertion Sort builds the final sorted array one item at a time. It iterates through an input array and removes one element per iteration, finds the place the element belongs in the sorted list, and inserts it there. It repeats until no input elements remain.'}\n                {selectedAlgorithm === 'quick' && \n                  'Quick Sort picks an element as a pivot and partitions the array around the pivot. Elements smaller than the pivot go to the left, larger elements go to the right. It then recursively sorts the sub-arrays. The efficiency depends on the pivot selection.'}\n                {selectedAlgorithm === 'merge' && \n                  'Merge Sort divides the array into two halves, recursively sorts them, and then merges the two sorted halves. The merge operation is the key process that assumes that the two halves are sorted and merges them into a single sorted array.'}\n              </p>\n            </motion.div>\n\n            {/* Characteristics */}\n            <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n              <motion.div\n                whileHover={{ y: -5 }}\n                className=\"bg-gray-700/30 rounded-lg p-4 border border-cyan-500/20 text-center\"\n              >\n                <div className=\"text-2xl font-bold text-cyan-400 mb-1\">\n                  {selectedAlgorithm === 'bubble' || selectedAlgorithm === 'insertion' ? '\u2713' : '\u2717'}\n                </div>\n                <div className=\"text-xs text-gray-400\">Stable</div>\n              </motion.div>\n\n              <motion.div\n                whileHover={{ y: -5 }}\n                className=\"bg-gray-700/30 rounded-lg p-4 border border-purple-500/20 text-center\"\n              >\n                <div className=\"text-2xl font-bold text-purple-400 mb-1\">\n                  {selectedAlgorithm === 'merge' ? '\u2717' : '\u2713'}\n                </div>\n                <div className=\"text-xs text-gray-400\">In-Place</div>\n              </motion.div>\n\n              <motion.div\n                whileHover={{ y: -5 }}\n                className=\"bg-gray-700/30 rounded-lg p-4 border border-pink-500/20 text-center\"\n              >\n                <div className=\"text-2xl font-bold text-pink-400 mb-1\">\n                  {selectedAlgorithm === 'bubble' || selectedAlgorithm === 'insertion' ? '\u2713' : '\u2717'}\n                </div>\n                <div className=\"text-xs text-gray-400\">Adaptive</div>\n              </motion.div>\n\n              <motion.div\n                whileHover={{ y: -5 }}\n                className=\"bg-gray-700/30 rounded-lg p-4 border border-yellow-500/20 text-center\"\n              >\n                <div className=\"text-2xl font-bold text-yellow-400 mb-1\">\n                  {selectedAlgorithm === 'quick' || selectedAlgorithm === 'merge' ? '\u2713' : '\u2717'}\n                </div>\n                <div className=\"text-xs text-gray-400\">Divide & Conquer</div>\n              </motion.div>\n            </div>\n          </div>\n        </motion.div>\n      </div>\n    </div>\n  );\n}",
  "error": null,
  "overall_score": 47,
  "code_quality_score": 14,
  "architecture_score": 12,
  "performance_score": 10,
  "accessibility_score": 11,
  "metadata": {
    "document_id": "eval_room_2e22fbe6bb2b",
    "prompt_category": "creative",
    "prompt_complexity": 9.0
  },
  "raw_response": {
    "document_id": "eval_room_2e22fbe6bb2b",
    "mode": "parallel",
    "prompt": "Build a captivating algorithm visualizer with neon colored bars, smooth height transitions, glowing comparison indicators, trail effects during swaps, and a futuristic dashboard design with animated controls",
    "content": "import { useState, useCallback } from 'react';\nimport { useEffect } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Slider } from '@/components/ui/slider';\nimport { Play, Pause, RotateCcw, Zap, BarChart3 } from 'lucide-react';\n\nimport { Activity, ArrowUpDown, TrendingUp } from 'lucide-react';import { motion } from 'framer-motion';\n\ninterface ArrayElement {\n  value: number;\n  id: string;\n  isComparing?: boolean;\n  isSwapping?: boolean;\n  isSorted?: boolean;\n}\n\ninterface AlgorithmStep {\n  array: ArrayElement[];\n  comparingIndices: number[];\n  swappingIndices: number[];\n  sortedIndices: number[];\n}\n\ntype AlgorithmType = 'bubble' | 'quick' | 'merge' | 'insertion';\n\nconst NEON_COLORS = [\n  '#00ffff',\n  '#ff00ff', \n  '#00ff00',\n  '#ffff00',\n  '#ff0066',\n  '#00ffaa'\n];\n\nconst mockAlgorithms = [\n  { id: 'bubble', name: 'Bubble Sort', complexity: 'O(n\u00b2)' },\n  { id: 'quick', name: 'Quick Sort', complexity: 'O(n log n)' },\n  { id: 'merge', name: 'Merge Sort', complexity: 'O(n log n)' },\n  { id: 'insertion', name: 'Insertion Sort', complexity: 'O(n\u00b2)' }\n];\n\nexport default function AlgorithmVisualizer() {\n  const [array, setArray] = useState<ArrayElement[]>([]);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [speed, setSpeed] = useState([50]);\n  const [arraySize, setArraySize] = useState([20]);\n  const [selectedAlgorithm, setSelectedAlgorithm] = useState<AlgorithmType>('bubble');\n  const [currentStep, setCurrentStep] = useState(0);\n  const [steps, setSteps] = useState<AlgorithmStep[]>([]);\n  const [comparisons, setComparisons] = useState(0);\n  const [swaps, setSwaps] = useState(0);\n\n  const getBarColor = useCallback((element: ArrayElement, index: number) => {\n    if (element.isSorted) return '#00ff00';\n    if (element.isSwapping) return '#ff0066';\n    if (element.isComparing) return '#ffff00';\n    return NEON_COLORS[index % NEON_COLORS.length];\n  }, []);\n\n  const getBarGlow = useCallback((element: ArrayElement) => {\n    if (element.isSorted) return '0 0 20px rgba(0, 255, 0, 0.8), 0 0 40px rgba(0, 255, 0, 0.4)';\n    if (element.isSwapping) return '0 0 30px rgba(255, 0, 102, 0.9), 0 0 60px rgba(255, 0, 102, 0.5)';\n    if (element.isComparing) return '0 0 25px rgba(255, 255, 0, 0.9), 0 0 50px rgba(255, 255, 0, 0.5)';\n    return '0 0 15px rgba(0, 255, 255, 0.5), 0 0 30px rgba(0, 255, 255, 0.2)';\n  }, []);\n  const generateRandomArray = useCallback(() => {\n    const newArray: ArrayElement[] = Array.from({ length: arraySize[0] }, (_, index) => ({\n      value: Math.floor(Math.random() * 100) + 1,\n      id: `element-${Date.now()}-${index}`,\n      isComparing: false,\n      isSwapping: false,\n      isSorted: false\n    }));\n    setArray(newArray);\n    setSteps([]);\n    setCurrentStep(0);\n    setIsPlaying(false);\n  }, [arraySize]);\n\n  const resetVisualization = useCallback(() => {\n\n    setIsPlaying(false);\n    setCurrentStep(0);\n    setSteps([]);\n    generateRandomArray();\n  }, [generateRandomArray]);\n\n  const animateSteps = useCallback(() => {\n    if (currentStep >= steps.length) {\n      setIsPlaying(false);\n      return;\n    }\n\n    const step = steps[currentStep];\n    setArray(step.array);\n    setCurrentStep(prev => prev + 1);\n  }, [currentStep, steps]);\n\n  useEffect(() => {\n    if (!isPlaying) return;\n\n    const delay = 1000 - (speed[0] * 9.5);\n    const timer = setTimeout(() => {\n      animateSteps();\n    }, delay);\n\n    return () => clearTimeout(timer);\n  }, [isPlaying, speed, animateSteps]);\n  const startVisualization = useCallback(() => {\n    if (steps.length === 0 || currentStep >= steps.length) return;\n    setIsPlaying(true);\n  }, [steps, speed, currentStep]);\n\n  const pauseVisualization = useCallback(() => {\n    setIsPlaying(false);\n  }, []);\n\n  const generateSortingSteps = useCallback((algorithm: AlgorithmType) => {\n        if (array.length === 0) return;\n\n    const steps: AlgorithmStep[] = [];\n    const arr = array.map(el => ({ ...el }));\n\n    const addStep = (\n      currentArray: ArrayElement[],\n      comparing: number[] = [],\n      swapping: number[] = [],\n      sorted: number[] = []\n    ) => {\n      steps.push({\n        array: currentArray.map(el => ({ ...el })),\n        comparingIndices: [...comparing],\n        swappingIndices: [...swapping],\n        sortedIndices: [...sorted]\n      });\n    };\n\n    if (algorithm === 'bubble') {\n      const sortedIndices: number[] = [];\n      for (let i = 0; i < arr.length - 1; i++) {\n        for (let j = 0; j < arr.length - i - 1; j++) {\n          addStep(arr, [j, j + 1], [], sortedIndices);\n          \n          if (arr[j].value > arr[j + 1].value) {\n            addStep(arr, [], [j, j + 1], sortedIndices);\n            [arr[j], arr[j + 1]] = [arr[j + 1], arr[j]];\n            addStep(arr, [], [], sortedIndices);\n          }\n        }\n        sortedIndices.push(arr.length - i - 1);\n        addStep(arr, [], [], sortedIndices);\n      }\n      sortedIndices.push(0);\n      addStep(arr, [], [], sortedIndices);\n    } else if (algorithm === 'insertion') {\n      const sortedIndices: number[] = [0];\n      addStep(arr, [], [], sortedIndices);\n      \n      for (let i = 1; i < arr.length; i++) {\n        const key = arr[i];\n        let j = i - 1;\n        \n        addStep(arr, [i], [], sortedIndices);\n        \n        while (j >= 0 && arr[j].value > key.value) {\n          addStep(arr, [j, j + 1], [], sortedIndices);\n          addStep(arr, [], [j, j + 1], sortedIndices);\n          arr[j + 1] = arr[j];\n          addStep(arr, [], [], sortedIndices);\n          j--;\n        }\n        \n        arr[j + 1] = key;\n        sortedIndices.push(i);\n        addStep(arr, [], [], sortedIndices);\n      }\n    } else if (algorithm === 'quick') {\n      const sortedIndices: number[] = [];\n      \n      const partition = (low: number, high: number): number => {\n        const pivot = arr[high];\n        addStep(arr, [high], [], sortedIndices);\n        let i = low - 1;\n        \n        for (let j = low; j < high; j++) {\n          addStep(arr, [j, high], [], sortedIndices);\n          \n          if (arr[j].value < pivot.value) {\n            i++;\n            addStep(arr, [], [i, j], sortedIndices);\n            [arr[i], arr[j]] = [arr[j], arr[i]];\n            addStep(arr, [], [], sortedIndices);\n          }\n        }\n        \n        addStep(arr, [], [i + 1, high], sortedIndices);\n        [arr[i + 1], arr[high]] = [arr[high], arr[i + 1]];\n        sortedIndices.push(i + 1);\n        addStep(arr, [], [], sortedIndices);\n        \n        return i + 1;\n      };\n      \n      const quickSort = (low: number, high: number) => {\n        if (low < high) {\n          const pi = partition(low, high);\n          quickSort(low, pi - 1);\n          quickSort(pi + 1, high);\n        } else if (low === high) {\n          sortedIndices.push(low);\n          addStep(arr, [], [], sortedIndices);\n        }\n      };\n      \n      quickSort(0, arr.length - 1);\n    } else if (algorithm === 'merge') {\n      const sortedIndices: number[] = [];\n      \n      const merge = (left: number, mid: number, right: number) => {\n        const leftArr = arr.slice(left, mid + 1);\n        const rightArr = arr.slice(mid + 1, right + 1);\n        \n        let i = 0, j = 0, k = left;\n        \n        while (i < leftArr.length && j < rightArr.length) {\n          addStep(arr, [left + i, mid + 1 + j], [], sortedIndices);\n          \n          if (leftArr[i].value <= rightArr[j].value) {\n            addStep(arr, [], [k], sortedIndices);\n            arr[k] = leftArr[i];\n            i++;\n          } else {\n            addStep(arr, [], [k], sortedIndices);\n            arr[k] = rightArr[j];\n            j++;\n          }\n          k++;\n          addStep(arr, [], [], sortedIndices);\n        }\n        \n        while (i < leftArr.length) {\n          addStep(arr, [], [k], sortedIndices);\n          arr[k] = leftArr[i];\n          i++;\n          k++;\n          addStep(arr, [], [], sortedIndices);\n        }\n        \n        while (j < rightArr.length) {\n          addStep(arr, [], [k], sortedIndices);\n          arr[k] = rightArr[j];\n          j++;\n          k++;\n          addStep(arr, [], [], sortedIndices);\n        }\n        \n        if (left === 0 && right === arr.length - 1) {\n          for (let idx = 0; idx < arr.length; idx++) {\n            sortedIndices.push(idx);\n          }\n        }\n        addStep(arr, [], [], sortedIndices);\n      };\n      \n      const mergeSort = (left: number, right: number) => {\n        if (left < right) {\n          const mid = Math.floor((left + right) / 2);\n          mergeSort(left, mid);\n          mergeSort(mid + 1, right);\n          merge(left, mid, right);\n        }\n      };\n      \n      mergeSort(0, arr.length - 1);\n    }\n\n    setSteps(steps);\n    setCurrentStep(0);\n  }, [array]);\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-gray-900 via-purple-900 to-gray-900 p-8\">\n      <div className=\"max-w-7xl mx-auto space-y-8\">\n        <motion.div\n          initial={{ opacity: 0, y: -20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.8 }}\n          className=\"text-center space-y-4\"\n        >\n          <motion.h1\n            className=\"text-6xl font-bold bg-gradient-to-r from-cyan-400 via-purple-400 to-pink-400 bg-clip-text text-transparent\"\n            animate={{\n              textShadow: [\n                '0 0 20px rgba(0, 255, 255, 0.5)',\n                '0 0 40px rgba(255, 0, 255, 0.5)',\n                '0 0 20px rgba(0, 255, 255, 0.5)'\n              ]\n            }}\n            transition={{ duration: 2, repeat: Infinity }}\n          >\n            Algorithm Visualizer\n          </motion.h1>\n          \n          <div className=\"flex items-center justify-center gap-4\">\n            <motion.div\n              initial={{ scale: 0 }}\n              animate={{ scale: 1 }}\n              transition={{ delay: 0.3, type: 'spring', stiffness: 200 }}\n              className=\"flex items-center gap-2 px-6 py-3 bg-gray-800/50 backdrop-blur-sm rounded-full border border-cyan-500/30\"\n            >\n              <Zap className=\"w-5 h-5 text-cyan-400\" />\n              <span className=\"text-xl font-semibold text-cyan-300\">\n                {mockAlgorithms.find(a => a.id === selectedAlgorithm)?.name || 'Bubble Sort'}\n              </span>\n            </motion.div>\n            \n            <motion.div\n              initial={{ scale: 0 }}\n              animate={{ scale: 1 }}\n              transition={{ delay: 0.5, type: 'spring', stiffness: 200 }}\n              className=\"relative px-5 py-2 bg-gradient-to-r from-purple-600/20 to-pink-600/20 backdrop-blur-sm rounded-full border border-purple-400/50\"\n            >\n              <motion.div\n                className=\"absolute inset-0 bg-gradient-to-r from-purple-600/30 to-pink-600/30 rounded-full blur-md\"\n                animate={{\n                  opacity: [0.5, 1, 0.5]\n                }}\n                transition={{ duration: 2, repeat: Infinity }}\n              />\n              <div className=\"relative flex items-center gap-2\">\n                <BarChart3 className=\"w-4 h-4 text-purple-300\" />\n                <span className=\"text-sm font-mono text-purple-200\">\n                  {mockAlgorithms.find(a => a.id === selectedAlgorithm)?.complexity || 'O(n\u00b2)'}\n                </span>\n              </div>\n            </motion.div>\n          </div>\n        </motion.div></parameter>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-6\">\n          <div className=\"lg:col-span-1 space-y-6\">\n            <motion.div\n              initial={{ opacity: 0, x: -50 }}\n              animate={{ opacity: 1, x: 0 }}\n              transition={{ duration: 0.6 }}\n              className=\"bg-gray-800/50 backdrop-blur-lg rounded-2xl p-6 border border-cyan-500/30 shadow-[0_0_30px_rgba(0,255,255,0.3)]\"\n            >\n              <div className=\"space-y-6\">\n                {/* Algorithm Selection */}\n                <div className=\"space-y-3\">\n                  <h3 className=\"text-cyan-400 font-semibold text-sm uppercase tracking-wider flex items-center gap-2\">\n                    <Zap className=\"w-4 h-4\" />\n                    Algorithm\n                  </h3>\n                  <div className=\"space-y-2\">\n                    {mockAlgorithms.map((algo) => (\n                      <button\n                        key={algo.id}\n                        onClick={() => {\n                          setSelectedAlgorithm(algo.id as AlgorithmType);\n                          generateSortingSteps(algo.id as AlgorithmType);\n                        }}\n                        disabled={isPlaying}\n                        className={`w-full text-left px-4 py-3 rounded-lg transition-all duration-300 ${\n                          selectedAlgorithm === algo.id\n                            ? 'bg-cyan-500/20 border-2 border-cyan-400 shadow-[0_0_20px_rgba(0,255,255,0.4)]'\n                            : 'bg-gray-700/30 border-2 border-gray-600/30 hover:border-cyan-500/50 hover:shadow-[0_0_15px_rgba(0,255,255,0.2)]'\n                        } disabled:opacity-50 disabled:cursor-not-allowed`}\n                      >\n                        <div className=\"flex justify-between items-center\">\n                          <span className=\"text-white font-medium\">{algo.name}</span>\n                          <span className=\"text-xs text-gray-400 font-mono\">{algo.complexity}</span>\n                        </div>\n                      </button>\n                    ))}\n                  </div>\n                </div>\n\n                {/* Array Size Control */}\n                <div className=\"space-y-3\">\n                  <div className=\"flex justify-between items-center\">\n                    <h3 className=\"text-purple-400 font-semibold text-sm uppercase tracking-wider flex items-center gap-2\">\n                      <BarChart3 className=\"w-4 h-4\" />\n                      Array Size\n                    </h3>\n                    <span className=\"text-white font-mono text-lg\">{arraySize[0]}</span>\n                  </div>\n                  <Slider\n                    value={arraySize}\n                    onValueChange={(value) => {\n                      setArraySize(value);\n                      generateRandomArray();\n                    }}\n                    min={5}\n                    max={50}\n                    step={1}\n                    disabled={isPlaying}\n                    className=\"cursor-pointer\"\n                  />\n                </div>\n\n                {/* Speed Control */}\n                <div className=\"space-y-3\">\n                  <div className=\"flex justify-between items-center\">\n                    <h3 className=\"text-pink-400 font-semibold text-sm uppercase tracking-wider\">\n                      Speed\n                    </h3>\n                    <span className=\"text-white font-mono text-lg\">{speed[0]}%</span>\n                  </div>\n                  <Slider\n                    value={speed}\n                    onValueChange={setSpeed}\n                    min={10}\n                    max={100}\n                    step={10}\n                    className=\"cursor-pointer\"\n                  />\n                </div>\n\n                {/* Control Buttons */}\n                <div className=\"space-y-3 pt-4 border-t border-gray-700/50\">\n                  <Button\n                    onClick={isPlaying ? pauseVisualization : startVisualization}\n                    disabled={steps.length === 0 || currentStep >= steps.length}\n                    className=\"w-full bg-gradient-to-r from-cyan-500 to-blue-500 hover:from-cyan-400 hover:to-blue-400 text-white font-semibold py-6 rounded-lg shadow-[0_0_25px_rgba(0,255,255,0.5)] hover:shadow-[0_0_35px_rgba(0,255,255,0.7)] transition-all duration-300 disabled:opacity-50 disabled:cursor-not-allowed\"\n                  >\n                    {isPlaying ? (\n                      <span className=\"flex items-center justify-center gap-2\">\n                        <Pause className=\"w-5 h-5\" />\n                        Pause\n                      </span>\n                    ) : (\n                      <span className=\"flex items-center justify-center gap-2\">\n                        <Play className=\"w-5 h-5\" />\n                        {currentStep >= steps.length ? 'Completed' : 'Start'}\n                      </span>\n                    )}\n                  </Button>\n\n                  <Button\n                    onClick={resetVisualization}\n                    disabled={isPlaying}\n                    className=\"w-full bg-gradient-to-r from-purple-500 to-pink-500 hover:from-purple-400 hover:to-pink-400 text-white font-semibold py-6 rounded-lg shadow-[0_0_25px_rgba(255,0,255,0.5)] hover:shadow-[0_0_35px_rgba(255,0,255,0.7)] transition-all duration-300 disabled:opacity-50 disabled:cursor-not-allowed\"\n                  >\n                    <span className=\"flex items-center justify-center gap-2\">\n                      <RotateCcw className=\"w-5 h-5\" />\n                      Reset\n                    </span>\n                  </Button>\n                </div>\n\n                {/* Stats Display */}\n                <div className=\"pt-4 border-t border-gray-700/50 space-y-2\">\n                  <div className=\"flex justify-between items-center text-sm\">\n                    <span className=\"text-gray-400\">Current Step</span>\n                    <span className=\"text-cyan-400 font-mono font-semibold\">\n                      {currentStep} / {steps.length}\n                    </span>\n                  </div>\n                  <div className=\"w-full bg-gray-700/30 rounded-full h-2 overflow-hidden\">\n                    <motion.div\n                      className=\"h-full bg-gradient-to-r from-cyan-500 to-purple-500 shadow-[0_0_10px_rgba(0,255,255,0.8)]\"\n                      initial={{ width: 0 }}\n                      animate={{ width: `${steps.length > 0 ? (currentStep / steps.length) * 100 : 0}%` }}\n                      transition={{ duration: 0.3 }}\n                    />\n                  </div>\n                </div>\n              </div>\n            </motion.div>\n            \n            <div className=\"bg-gray-800/50 backdrop-blur-lg rounded-2xl p-6 border border-cyan-500/30 shadow-lg shadow-cyan-500/20\">\n              <div className=\"space-y-6\">\n                <div>\n                  <h3 className=\"text-cyan-400 font-semibold mb-4 flex items-center gap-2\">\n                    <Zap className=\"w-5 h-5\" />\n                    Algorithm\n                  </h3>\n                  <div className=\"grid grid-cols-2 gap-2\">\n                    {mockAlgorithms.map((algo) => (\n                      <Button\n                        key={algo.id}\n                        onClick={() => setSelectedAlgorithm(algo.id as AlgorithmType)}\n                        variant={selectedAlgorithm === algo.id ? 'default' : 'outline'}\n                        className={`\n                          relative overflow-hidden transition-all duration-300\n                          ${selectedAlgorithm === algo.id \n                            ? 'bg-cyan-500 text-gray-900 border-cyan-400 shadow-lg shadow-cyan-500/50' \n                            : 'bg-gray-700/50 text-cyan-300 border-cyan-500/30 hover:border-cyan-400 hover:shadow-md hover:shadow-cyan-500/30'\n                          }\n                        `}\n                      >\n                        <span className=\"relative z-10 text-xs font-medium\">\n                          {algo.name.split(' ')[0]}\n                        </span>\n                        {selectedAlgorithm === algo.id && (\n                          <motion.div\n                            layoutId=\"activeAlgorithm\"\n                            className=\"absolute inset-0 bg-gradient-to-r from-cyan-400 to-cyan-600\"\n                            initial={false}\n                            transition={{ type: 'spring', stiffness: 300, damping: 30 }}\n                          />\n                        )}\n                      </Button>\n                    ))}\n                  </div>\n                </div>\n\n                <div>\n                  <h3 className=\"text-cyan-400 font-semibold mb-4 flex items-center gap-2\">\n                    <BarChart3 className=\"w-5 h-5\" />\n                    Array Size: {arraySize[0]}\n                  </h3>\n                  <Slider\n                    value={arraySize}\n                    onValueChange={setArraySize}\n                    min={5}\n                    max={50}\n                    step={1}\n                    className=\"[&_[role=slider]]:bg-cyan-400 [&_[role=slider]]:border-cyan-300 [&_[role=slider]]:shadow-lg [&_[role=slider]]:shadow-cyan-400/50 [&_[role=slider]]:transition-all [&_[role=slider]]:hover:shadow-cyan-400/80 [&_.relative]:bg-gray-700 [&_.bg-primary]:bg-gradient-to-r [&_.bg-primary]:from-cyan-500 [&_.bg-primary]:to-purple-500\"\n                  />\n                </div>\n\n                <div>\n                  <h3 className=\"text-cyan-400 font-semibold mb-4\">\n                    Speed: {speed[0]}ms\n                  </h3>\n                  <Slider\n                    value={speed}\n                    onValueChange={setSpeed}\n                    min={10}\n                    max={500}\n                    step={10}\n                    className=\"[&_[role=slider]]:bg-gradient-to-r [&_[role=slider]]:from-purple-500 [&_[role=slider]]:to-pink-500 [&_[role=slider]]:border-0 [&_[role=slider]]:shadow-lg [&_[role=slider]]:shadow-purple-500/50 [&_[role=slider]]:transition-shadow [&_[role=slider]]:hover:shadow-xl [&_[role=slider]]:hover:shadow-purple-500/70 [&_[role=slider]]:h-5 [&_[role=slider]]:w-5 [&_[role=track]]:bg-gradient-to-r [&_[role=track]]:from-purple-900/50 [&_[role=track]]:to-pink-900/50 [&_[role=track]]:h-2 [&_[role=range]]:bg-gradient-to-r [&_[role=range]]:from-purple-500 [&_[role=range]]:to-pink-500 [&_[role=range]]:shadow-lg [&_[role=range]]:shadow-purple-500/30\"\n                  /></parameter>\n                </div>\n\n                <div className=\"space-y-3 pt-4 border-t border-cyan-500/20\">\n                  <Button\n                    onClick={isPlaying ? pauseVisualization : startVisualization}\n                    disabled={array.length === 0 || (currentStep >= steps.length && steps.length > 0)}\n                    className=\"w-full relative overflow-hidden bg-gradient-to-r from-cyan-600 to-blue-600 hover:from-cyan-500 hover:to-blue-500 text-white font-semibold py-6 rounded-xl border-2 border-cyan-400/50 shadow-[0_0_30px_rgba(0,255,255,0.4)] hover:shadow-[0_0_50px_rgba(0,255,255,0.6)] transition-all duration-300 disabled:opacity-50 disabled:cursor-not-allowed disabled:shadow-none\"\n                  >\n                    <motion.div\n                      className=\"absolute inset-0 bg-gradient-to-r from-cyan-400/0 via-white/30 to-cyan-400/0\"\n                      animate={{\n                        x: ['-100%', '100%']\n                      }}\n                      transition={{\n                        duration: 2,\n                        repeat: Infinity,\n                        ease: 'linear'\n                      }}\n                    />\n                    <motion.div\n                      className=\"relative flex items-center justify-center gap-2\"\n                      whileHover={{ scale: 1.05 }}\n                      whileTap={{ scale: 0.95 }}\n                    >\n                      <motion.div\n                        key={isPlaying ? 'pause' : 'play'}\n                        initial={{ scale: 0, rotate: -180 }}\n                        animate={{ scale: 1, rotate: 0 }}\n                        exit={{ scale: 0, rotate: 180 }}\n                        transition={{ type: 'spring', stiffness: 200, damping: 15 }}\n                      >\n                        {isPlaying ? (\n                          <Pause className=\"w-5 h-5\" fill=\"currentColor\" />\n                        ) : (\n                          <Play className=\"w-5 h-5\" fill=\"currentColor\" />\n                        )}\n                      </motion.div>\n                      <span className=\"text-lg\">\n                        {isPlaying ? 'Pause' : 'Play'}\n                      </span>\n                    </motion.div>\n                  </Button>\n                  \n                  <motion.div whileTap={{ rotate: 360 }} transition={{ duration: 0.6 }}>\n                    <Button\n                      onClick={resetVisualization}\n                      disabled={isPlaying}\n                      className=\"w-full bg-gradient-to-r from-orange-500 to-red-500 hover:from-orange-600 hover:to-red-600 text-white border-0 shadow-lg shadow-orange-500/50 hover:shadow-xl hover:shadow-orange-500/70 transition-all duration-300 disabled:opacity-50 disabled:cursor-not-allowed\"\n                    >\n                      <RotateCcw className=\"w-4 h-4 mr-2\" />\n                      Reset\n                    </Button>\n                  </motion.div>\n                  \n                  <motion.div\n                    whileHover={{ scale: 1.05 }}\n                    whileTap={{ scale: 0.95 }}\n                  >\n                    <Button\n                      onClick={generateRandomArray}\n                      disabled={isPlaying}\n                      className=\"w-full bg-gradient-to-r from-green-500 to-emerald-500 hover:from-green-600 hover:to-emerald-600 text-white border-0 shadow-lg shadow-green-500/50 disabled:opacity-50 disabled:cursor-not-allowed relative overflow-hidden\"\n                    >\n                      <motion.div\n                        className=\"absolute inset-0 bg-white/20\"\n                        animate={{\n                          scale: [1, 1.5, 1.5, 1],\n                          opacity: [0.5, 0, 0, 0.5]\n                        }}\n                        transition={{\n                          duration: 2,\n                          repeat: Infinity,\n                          ease: \"easeInOut\"\n                        }}\n                      />\n                      <BarChart3 className=\"w-4 h-4 mr-2\" />\n                      <span className=\"relative z-10\">Generate Array</span>\n                    </Button>\n                  </motion.div>\n                </div>\n              </div>\n            </div>\n\n                        <motion.div\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ duration: 0.6, delay: 0.2 }}\n              className=\"bg-gray-800/50 backdrop-blur-lg rounded-2xl p-6 border border-purple-500/30 shadow-[0_0_30px_rgba(168,85,247,0.3)]\"\n            >\n              <h3 className=\"text-purple-400 font-semibold mb-4 flex items-center gap-2 text-sm uppercase tracking-wider\">\n                <Activity className=\"w-5 h-5\" />\n                Statistics\n              </h3>\n              \n              <div className=\"grid grid-cols-3 gap-4\">\n                {/* Current Step */}\n                <motion.div\n                  whileHover={{ scale: 1.05 }}\n                  className=\"relative overflow-hidden bg-gradient-to-br from-cyan-900/30 to-cyan-800/20 rounded-xl p-4 border border-cyan-500/40 shadow-lg\"\n                >\n                  <motion.div\n                    className=\"absolute inset-0 bg-gradient-to-br from-cyan-500/10 to-transparent\"\n                    animate={{\n                      opacity: [0.3, 0.6, 0.3]\n                    }}\n                    transition={{ duration: 2, repeat: Infinity }}\n                  />\n                  <div className=\"relative z-10\">\n                    <div className=\"flex items-center gap-2 mb-2\">\n                      <TrendingUp className=\"w-4 h-4 text-cyan-400\" />\n                      <p className=\"text-xs text-cyan-300 font-medium uppercase tracking-wide\">Step</p>\n                    </div>\n                    <motion.p\n                      key={currentStep}\n                      initial={{ scale: 1.5, opacity: 0 }}\n                      animate={{ scale: 1, opacity: 1 }}\n                      transition={{ type: 'spring', stiffness: 300, damping: 20 }}\n                      className=\"text-3xl font-bold text-white font-mono\"\n                    >\n                      {currentStep}\n                    </motion.p>\n                    <p className=\"text-xs text-cyan-400/70 mt-1\">of {steps.length}</p>\n                  </div>\n                </motion.div>\n\n                {/* Comparisons */}\n                <motion.div\n                  whileHover={{ scale: 1.05 }}\n                  className=\"relative overflow-hidden bg-gradient-to-br from-purple-900/30 to-purple-800/20 rounded-xl p-4 border border-purple-500/40 shadow-lg\"\n                >\n                  <motion.div\n                    className=\"absolute inset-0 bg-gradient-to-br from-purple-500/10 to-transparent\"\n                    animate={{\n                      opacity: [0.3, 0.6, 0.3]\n                    }}\n                    transition={{ duration: 2, repeat: Infinity, delay: 0.3 }}\n                  />\n                  <div className=\"relative z-10\">\n                    <div className=\"flex items-center gap-2 mb-2\">\n                      <BarChart3 className=\"w-4 h-4 text-purple-400\" />\n                      <p className=\"text-xs text-purple-300 font-medium uppercase tracking-wide\">Compares</p>\n                    </div>\n                    <motion.p\n                      key={comparisons}\n                      initial={{ scale: 1.5, opacity: 0 }}\n                      animate={{ scale: 1, opacity: 1 }}\n                      transition={{ type: 'spring', stiffness: 300, damping: 20 }}\n                      className=\"text-3xl font-bold text-white font-mono\"\n                    >\n                      {comparisons}\n                    </motion.p>\n                    <p className=\"text-xs text-purple-400/70 mt-1\">operations</p>\n                  </div>\n                </motion.div>\n\n                {/* Swaps */}\n                <motion.div\n                  whileHover={{ scale: 1.05 }}\n                  className=\"relative overflow-hidden bg-gradient-to-br from-pink-900/30 to-pink-800/20 rounded-xl p-4 border border-pink-500/40 shadow-lg\"\n                >\n                  <motion.div\n                    className=\"absolute inset-0 bg-gradient-to-br from-pink-500/10 to-transparent\"\n                    animate={{\n                      opacity: [0.3, 0.6, 0.3]\n                    }}\n                    transition={{ duration: 2, repeat: Infinity, delay: 0.6 }}\n                  />\n                  <div className=\"relative z-10\">\n                    <div className=\"flex items-center gap-2 mb-2\">\n                      <ArrowUpDown className=\"w-4 h-4 text-pink-400\" />\n                      <p className=\"text-xs text-pink-300 font-medium uppercase tracking-wide\">Swaps</p>\n                    </div>\n                    <motion.p\n                      key={swaps}\n                      initial={{ scale: 1.5, opacity: 0 }}\n                      animate={{ scale: 1, opacity: 1 }}\n                      transition={{ type: 'spring', stiffness: 300, damping: 20 }}\n                      className=\"text-3xl font-bold text-white font-mono\"\n                    >\n                      {swaps}\n                    </motion.p>\n                    <p className=\"text-xs text-pink-400/70 mt-1\">operations</p>\n                  </div>\n                </motion.div>\n              </div>\n\n              {/* Progress Bar */}\n              <div className=\"mt-6\">\n                <div className=\"flex justify-between items-center mb-2\">\n                  <span className=\"text-xs text-gray-400 uppercase tracking-wide\">Progress</span>\n                  <span className=\"text-xs text-gray-300 font-mono\">\n                    {steps.length > 0 ? Math.round((currentStep / steps.length) * 100) : 0}%\n                  </span>\n                </div>\n                <div className=\"relative h-2 bg-gray-700/50 rounded-full overflow-hidden\">\n                  <motion.div\n                    className=\"absolute inset-y-0 left-0 bg-gradient-to-r from-cyan-500 via-purple-500 to-pink-500 rounded-full shadow-lg shadow-purple-500/50\"\n                    initial={{ width: 0 }}\n                    animate={{ \n                      width: steps.length > 0 ? `${(currentStep / steps.length) * 100}%` : '0%'\n                    }}\n                    transition={{ duration: 0.3, ease: 'easeOut' }}\n                  />\n                  <motion.div\n                    className=\"absolute inset-0 bg-gradient-to-r from-transparent via-white/30 to-transparent\"\n                    animate={{\n                      x: ['-100%', '200%']\n                    }}\n                    transition={{\n                      duration: 2,\n                      repeat: Infinity,\n                      ease: 'linear'\n                    }}\n                  />\n                </div>\n              </div>\n            </motion.div>\n          </div>\n\n          <div className=\"lg:col-span-3\">\n            <div className=\"bg-gray-800/50 backdrop-blur-lg rounded-2xl p-8 border border-purple-500/30 shadow-lg shadow-purple-500/20 min-h-[600px]\">\n              {array.length === 0 ? (\n                <motion.div\n                  initial={{ opacity: 0, scale: 0.8 }}\n                  animate={{ opacity: 1, scale: 1 }}\n                  className=\"flex flex-col items-center justify-center h-full space-y-6\"\n                >\n                  <motion.div\n                    animate={{\n                      rotate: [0, 360],\n                      scale: [1, 1.2, 1]\n                    }}\n                    transition={{\n                      duration: 3,\n                      repeat: Infinity,\n                      ease: \"easeInOut\"\n                    }}\n                  >\n                    <Zap className=\"w-24 h-24 text-cyan-400\" style={{\n                      filter: 'drop-shadow(0 0 30px rgba(0, 255, 255, 0.8))'\n                    }} />\n                  </motion.div>\n                  <p className=\"text-2xl text-cyan-300 font-semibold\">\n                    Generate an array to start visualizing\n                  </p>\n                </motion.div>\n              ) : (\n                <div className=\"h-full flex items-end justify-center gap-1 px-4\">\n                  {array.map((element, index) => {\n                    const maxValue = Math.max(...array.map(el => el.value));\n                    const heightPercentage = (element.value / maxValue) * 100;\n                    const barColor = getBarColor(element, index);\n                    const barGlow = getBarGlow(element);\n\n                    return (\n                      <motion.div\n                        key={element.id}\n                        layout\n                        initial={{ opacity: 0, y: 50, scale: 0.5 }}\n                        animate={{\n                          opacity: 1,\n                          y: 0,\n                          scale: element.isSwapping ? 1.1 : 1,\n                          height: `${heightPercentage}%`\n                        }}\n                        exit={{ opacity: 0, scale: 0.5 }}\n                        transition={{\n                          layout: { type: 'spring', stiffness: 300, damping: 30 },\n                          height: { duration: 0.3, ease: 'easeInOut' },\n                          scale: { duration: 0.2 },\n                          opacity: { duration: 0.3 }\n                        }}\n                        className=\"relative flex-1 min-w-[4px] max-w-[60px] rounded-t-lg\"\n                        style={{\n                          backgroundColor: barColor,\n                          boxShadow: barGlow\n                        }}\n                      >\n                        {/* Trail effect for swapping */}\n                        {element.isSwapping && (\n                          <motion.div\n                            className=\"absolute inset-0 rounded-t-lg\"\n                            style={{\n                              backgroundColor: barColor,\n                              opacity: 0.5\n                            }}\n                            animate={{\n                              scale: [1, 1.5, 2],\n                              opacity: [0.5, 0.3, 0]\n                            }}\n                            transition={{\n                              duration: 0.6,\n                              repeat: Infinity,\n                              ease: 'easeOut'\n                            }}\n                          />\n                        )}\n\n                        {/* Pulse effect for comparing */}\n                        {element.isComparing && (\n                          <motion.div\n                            className=\"absolute inset-0 rounded-t-lg border-2 border-yellow-300\"\n                            animate={{\n                              opacity: [1, 0.3, 1]\n                            }}\n                            transition={{\n                              duration: 0.5,\n                              repeat: Infinity,\n                              ease: 'easeInOut'\n                            }}\n                          />\n                        )}\n\n                        {/* Sparkle effect for sorted */}\n                        {element.isSorted && (\n                          <motion.div\n                            className=\"absolute -top-2 left-1/2 transform -translate-x-1/2\"\n                            initial={{ scale: 0, rotate: 0 }}\n                            animate={{\n                              scale: [0, 1.5, 0],\n                              rotate: [0, 180, 360],\n                              opacity: [0, 1, 0]\n                            }}\n                            transition={{\n                              duration: 1,\n                              ease: 'easeOut'\n                            }}\n                          >\n                            <div className=\"w-3 h-3 bg-green-400 rounded-full\"\n                              style={{\n                                boxShadow: '0 0 10px rgba(0, 255, 0, 0.8)'\n                              }}\n                            />\n                          </motion.div>\n                        )}\n\n                        {/* Value label for larger arrays */}\n                        {arraySize[0] <= 20 && (\n                          <motion.div\n                            className=\"absolute -bottom-6 left-1/2 transform -translate-x-1/2 text-xs font-mono text-gray-400\"\n                            initial={{ opacity: 0 }}\n                            animate={{ opacity: 1 }}\n                            transition={{ delay: 0.2 }}\n                          >\n                            {element.value}\n                          </motion.div>\n                        )}\n\n                        {/* Top glow indicator */}\n                        <motion.div\n                          className=\"absolute -top-1 left-0 right-0 h-1 rounded-full\"\n                          style={{\n                            backgroundColor: barColor,\n                            filter: 'blur(4px)',\n                            opacity: 0.8\n                          }}\n                          animate={{\n                            opacity: element.isComparing || element.isSwapping ? [0.8, 1, 0.8] : 0.8\n                          }}\n                          transition={{\n                            duration: 0.5,\n                            repeat: element.isComparing || element.isSwapping ? Infinity : 0\n                          }}\n                        />\n                      </motion.div>\n                    );\n                  })}\n                </div>\n              )}</parameter>\n              \n              <div className=\"h-full flex items-end justify-center gap-1\">\n                {array.map((element, index) => {\n                  const isComparing = steps[currentStep]?.comparingIndices.includes(index);\n                  const isSwapping = steps[currentStep]?.swappingIndices.includes(index);\n                  const isSorted = steps[currentStep]?.sortedIndices.includes(index);\n                  \n                  const barColor = isSorted \n                    ? '#00ff00' \n                    : isSwapping \n                    ? '#ff0066' \n                    : isComparing \n                    ? '#ffff00' \n                    : NEON_COLORS[index % NEON_COLORS.length];\n                  \n                  const maxHeight = 500;\n                  const barHeight = (element.value / 100) * maxHeight;\n                  \n                  return (\n                    <motion.div\n                      key={element.id}\n                      layout\n                      initial={{ height: 0, opacity: 0 }}\n                      animate={{\n                        height: barHeight,\n                        opacity: 1,\n                        scale: isComparing ? 1.1 : isSwapping ? 1.15 : 1,\n                        y: isSwapping ? -20 : 0\n                      }}\n                      transition={{\n                        height: { type: 'spring', stiffness: 100, damping: 20 },\n                        scale: { type: 'spring', stiffness: 300, damping: 15 },\n                        y: { type: 'spring', stiffness: 200, damping: 10 },\n                        layout: { type: 'spring', stiffness: 300, damping: 30 }\n                      }}\n                      className=\"relative rounded-t-lg\"\n                      style={{\n                        width: `${Math.max(8, 600 / arraySize[0])}px`,\n                        backgroundColor: barColor,\n                        boxShadow: `\n                          0 0 ${isSwapping ? '40px' : isComparing ? '30px' : '20px'} ${barColor},\n                          0 0 ${isSwapping ? '60px' : isComparing ? '45px' : '30px'} ${barColor}80,\n                          inset 0 0 ${isSwapping ? '20px' : isComparing ? '15px' : '10px'} ${barColor}40\n                        `,\n                        border: `2px solid ${barColor}`,\n                        filter: `brightness(${isSwapping ? 1.5 : isComparing ? 1.3 : 1})`\n                      }}\n                    >\n                      {/* Glow effect overlay */}\n                      <motion.div\n                        className=\"absolute inset-0 rounded-t-lg\"\n                        animate={{\n                          opacity: isSwapping ? [0.5, 1, 0.5] : isComparing ? [0.3, 0.7, 0.3] : [0.2, 0.4, 0.2]\n                        }}\n                        transition={{\n                          duration: isSwapping ? 0.3 : isComparing ? 0.5 : 1,\n                          repeat: Infinity,\n                          ease: 'easeInOut'\n                        }}\n                        style={{\n                          background: `linear-gradient(to top, transparent, ${barColor}60)`,\n                          boxShadow: `inset 0 0 20px ${barColor}80`\n                        }}\n                      />\n                      \n                      {/* Trail effect for swapping */}\n                      {isSwapping && (\n                        <motion.div\n                          className=\"absolute inset-0 rounded-t-lg\"\n                          initial={{ opacity: 0, y: 0 }}\n                          animate={{\n                            opacity: [0, 0.8, 0],\n                            y: [0, 30, 60],\n                            scaleY: [1, 0.8, 0.3]\n                          }}\n                          transition={{\n                            duration: 0.6,\n                            repeat: Infinity,\n                            ease: 'easeOut'\n                          }}\n                          style={{\n                            backgroundColor: barColor,\n                            filter: 'blur(8px)',\n                            zIndex: -1\n                          }}\n                        />\n                      )}\n                      \n                      {/* Value label */}\n                      <motion.div\n                        className=\"absolute -top-8 left-1/2 transform -translate-x-1/2 text-xs font-mono font-bold whitespace-nowrap\"\n                        animate={{\n                          scale: isSwapping ? [1, 1.3, 1] : isComparing ? [1, 1.2, 1] : 1,\n                          y: isSwapping ? [-5, -10, -5] : 0\n                        }}\n                        transition={{\n                          duration: 0.3,\n                          repeat: isSwapping || isComparing ? Infinity : 0\n                        }}\n                        style={{\n                          color: barColor,\n                          textShadow: `0 0 10px ${barColor}, 0 0 20px ${barColor}80`,\n                          fontSize: arraySize[0] > 30 ? '10px' : '12px'\n                        }}\n                      >\n                        {element.value}\n                      </motion.div>\n                      \n                      {/* Sorted checkmark indicator */}\n                      {isSorted && (\n                        <motion.div\n                          initial={{ scale: 0, rotate: -180 }}\n                          animate={{ scale: 1, rotate: 0 }}\n                          transition={{ type: 'spring', stiffness: 200, damping: 10 }}\n                          className=\"absolute -top-6 left-1/2 transform -translate-x-1/2\"\n                        >\n                          <div \n                            className=\"w-4 h-4 rounded-full flex items-center justify-center\"\n                            style={{\n                              backgroundColor: '#00ff00',\n                              boxShadow: '0 0 15px #00ff00, 0 0 25px #00ff0080'\n                            }}\n                          >\n                            <span className=\"text-gray-900 text-xs font-bold\">\u2713</span>\n                          </div>\n                        </motion.div>\n                      )}\n                      \n                      {/* Particle effects for swapping */}\n                      {isSwapping && (\n                        <>\n                          {[...Array(3)].map((_, i) => (\n                            <motion.div\n                              key={i}\n                              className=\"absolute w-2 h-2 rounded-full\"\n                              initial={{ \n                                x: 0, \n                                y: 0, \n                                opacity: 1,\n                                scale: 1\n                              }}\n                              animate={{\n                                x: [0, (Math.random() - 0.5) * 40],\n                                y: [0, -40 - Math.random() * 30],\n                                opacity: [1, 0],\n                                scale: [1, 0]\n                              }}\n                              transition={{\n                                duration: 0.8,\n                                delay: i * 0.1,\n                                repeat: Infinity,\n                                ease: 'easeOut'\n                              }}\n                              style={{\n                                backgroundColor: barColor,\n                                boxShadow: `0 0 10px ${barColor}`,\n                                left: '50%',\n                                top: '0'\n                              }}\n                            />\n                          ))}\n                        </>\n                      )}\n                    </motion.div>\n                  );\n                })}\n              </div>\n            </div>\n\n            <motion.div\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ duration: 0.6, delay: 0.3 }}\n              className=\"mt-6 bg-gray-800/50 backdrop-blur-lg rounded-2xl p-6 border border-purple-500/30 shadow-lg shadow-purple-500/20\"\n            >\n              <h3 className=\"text-purple-400 font-semibold text-sm uppercase tracking-wider mb-4 flex items-center gap-2\">\n                <BarChart3 className=\"w-4 h-4\" />\n                Bar States Legend\n              </h3>\n              <div className=\"grid grid-cols-2 gap-4\">\n                <motion.div\n                  whileHover={{ scale: 1.05 }}\n                  className=\"flex items-center gap-3 p-3 bg-gray-700/30 rounded-lg border border-gray-600/30\"\n                >\n                  <div className=\"w-6 h-12 bg-gradient-to-t from-cyan-500 to-cyan-300 rounded shadow-[0_0_15px_rgba(0,255,255,0.6)]\" />\n                  <div>\n                    <div className=\"text-white font-medium text-sm\">Normal</div>\n                    <div className=\"text-gray-400 text-xs\">Unsorted element</div>\n                  </div>\n                </motion.div>\n\n                <motion.div\n                  whileHover={{ scale: 1.05 }}\n                  className=\"flex items-center gap-3 p-3 bg-gray-700/30 rounded-lg border border-gray-600/30\"\n                >\n                  <div className=\"w-6 h-12 bg-gradient-to-t from-yellow-500 to-yellow-300 rounded shadow-[0_0_20px_rgba(255,255,0,0.8)] animate-pulse\" />\n                  <div>\n                    <div className=\"text-white font-medium text-sm\">Comparing</div>\n                    <div className=\"text-gray-400 text-xs\">Being compared</div>\n                  </div>\n                </motion.div>\n\n                <motion.div\n                  whileHover={{ scale: 1.05 }}\n                  className=\"flex items-center gap-3 p-3 bg-gray-700/30 rounded-lg border border-gray-600/30\"\n                >\n                  <div className=\"w-6 h-12 bg-gradient-to-t from-red-500 to-red-300 rounded shadow-[0_0_25px_rgba(255,0,0,0.8)]\" />\n                  <div>\n                    <div className=\"text-white font-medium text-sm\">Swapping</div>\n                    <div className=\"text-gray-400 text-xs\">Position changing</div>\n                  </div>\n                </motion.div>\n\n                <motion.div\n                  whileHover={{ scale: 1.05 }}\n                  className=\"flex items-center gap-3 p-3 bg-gray-700/30 rounded-lg border border-gray-600/30\"\n                >\n                  <div className=\"w-6 h-12 bg-gradient-to-t from-green-500 to-green-300 rounded shadow-[0_0_20px_rgba(0,255,0,0.7)]\" />\n                  <div>\n                    <div className=\"text-white font-medium text-sm\">Sorted</div>\n                    <div className=\"text-gray-400 text-xs\">In final position</div>\n                  </div>\n                </motion.div>\n              </div>\n            </motion.div>\n          </div>\n        </div>\n\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.8, delay: 0.4 }}\n          className=\"bg-gray-800/50 backdrop-blur-lg rounded-2xl p-8 border border-cyan-500/30 shadow-[0_0_30px_rgba(0,255,255,0.2)]\"\n        >\n          <div className=\"space-y-6\">\n            <div className=\"flex items-center gap-3 mb-6\">\n              <motion.div\n                animate={{\n                  rotate: [0, 360],\n                }}\n                transition={{ duration: 3, repeat: Infinity, ease: \"linear\" }}\n              >\n                <BarChart3 className=\"w-8 h-8 text-cyan-400\" />\n              </motion.div>\n              <h2 className=\"text-3xl font-bold bg-gradient-to-r from-cyan-400 to-purple-400 bg-clip-text text-transparent\">\n                Algorithm Complexity\n              </h2>\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              {/* Time Complexity */}\n              <motion.div\n                whileHover={{ scale: 1.02 }}\n                className=\"bg-gradient-to-br from-cyan-900/30 to-blue-900/30 rounded-xl p-6 border border-cyan-500/40 shadow-[0_0_20px_rgba(0,255,255,0.2)]\"\n              >\n                <div className=\"flex items-center gap-2 mb-4\">\n                  <Zap className=\"w-5 h-5 text-cyan-400\" />\n                  <h3 className=\"text-xl font-semibold text-cyan-300\">Time Complexity</h3>\n                </div>\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-baseline gap-2\">\n                    <span className=\"text-gray-400 text-sm\">Best Case:</span>\n                    <span className=\"text-2xl font-mono font-bold text-green-400\">\n                      {selectedAlgorithm === 'bubble' && 'O(n)'}\n                      {selectedAlgorithm === 'insertion' && 'O(n)'}\n                      {selectedAlgorithm === 'quick' && 'O(n log n)'}\n                      {selectedAlgorithm === 'merge' && 'O(n log n)'}\n                    </span>\n                  </div>\n                  <div className=\"flex items-baseline gap-2\">\n                    <span className=\"text-gray-400 text-sm\">Average Case:</span>\n                    <span className=\"text-2xl font-mono font-bold text-yellow-400\">\n                      {selectedAlgorithm === 'bubble' && 'O(n\u00b2)'}\n                      {selectedAlgorithm === 'insertion' && 'O(n\u00b2)'}\n                      {selectedAlgorithm === 'quick' && 'O(n log n)'}\n                      {selectedAlgorithm === 'merge' && 'O(n log n)'}\n                    </span>\n                  </div>\n                  <div className=\"flex items-baseline gap-2\">\n                    <span className=\"text-gray-400 text-sm\">Worst Case:</span>\n                    <span className=\"text-2xl font-mono font-bold text-red-400\">\n                      {selectedAlgorithm === 'bubble' && 'O(n\u00b2)'}\n                      {selectedAlgorithm === 'insertion' && 'O(n\u00b2)'}\n                      {selectedAlgorithm === 'quick' && 'O(n\u00b2)'}\n                      {selectedAlgorithm === 'merge' && 'O(n log n)'}\n                    </span>\n                  </div>\n                </div>\n              </motion.div>\n\n              {/* Space Complexity */}\n              <motion.div\n                whileHover={{ scale: 1.02 }}\n                className=\"bg-gradient-to-br from-purple-900/30 to-pink-900/30 rounded-xl p-6 border border-purple-500/40 shadow-[0_0_20px_rgba(255,0,255,0.2)]\"\n              >\n                <div className=\"flex items-center gap-2 mb-4\">\n                  <BarChart3 className=\"w-5 h-5 text-purple-400\" />\n                  <h3 className=\"text-xl font-semibold text-purple-300\">Space Complexity</h3>\n                </div>\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-baseline gap-2\">\n                    <span className=\"text-gray-400 text-sm\">Auxiliary Space:</span>\n                    <span className=\"text-3xl font-mono font-bold text-purple-400\">\n                      {selectedAlgorithm === 'bubble' && 'O(1)'}\n                      {selectedAlgorithm === 'insertion' && 'O(1)'}\n                      {selectedAlgorithm === 'quick' && 'O(log n)'}\n                      {selectedAlgorithm === 'merge' && 'O(n)'}\n                    </span>\n                  </div>\n                  <p className=\"text-sm text-gray-400 mt-4\">\n                    {selectedAlgorithm === 'bubble' && 'In-place sorting with constant extra space'}\n                    {selectedAlgorithm === 'insertion' && 'In-place sorting with constant extra space'}\n                    {selectedAlgorithm === 'quick' && 'Recursive stack space for partitioning'}\n                    {selectedAlgorithm === 'merge' && 'Requires additional array for merging'}\n                  </p>\n                </div>\n              </motion.div>\n            </div>\n\n            {/* Algorithm Description */}\n            <motion.div\n              initial={{ opacity: 0 }}\n              animate={{ opacity: 1 }}\n              transition={{ delay: 0.6 }}\n              className=\"bg-gradient-to-r from-gray-800/50 to-gray-900/50 rounded-xl p-6 border border-gray-600/30\"\n            >\n              <h3 className=\"text-lg font-semibold text-cyan-300 mb-3 flex items-center gap-2\">\n                <Zap className=\"w-4 h-4\" />\n                How It Works\n              </h3>\n              <p className=\"text-gray-300 leading-relaxed\">\n                {selectedAlgorithm === 'bubble' && \n                  'Bubble Sort repeatedly steps through the list, compares adjacent elements and swaps them if they are in the wrong order. The pass through the list is repeated until the list is sorted. Larger elements \"bubble\" to the end of the array.'}\n                {selectedAlgorithm === 'insertion' && \n                  'Insertion Sort builds the final sorted array one item at a time. It iterates through an input array and removes one element per iteration, finds the place the element belongs in the sorted list, and inserts it there. It repeats until no input elements remain.'}\n                {selectedAlgorithm === 'quick' && \n                  'Quick Sort picks an element as a pivot and partitions the array around the pivot. Elements smaller than the pivot go to the left, larger elements go to the right. It then recursively sorts the sub-arrays. The efficiency depends on the pivot selection.'}\n                {selectedAlgorithm === 'merge' && \n                  'Merge Sort divides the array into two halves, recursively sorts them, and then merges the two sorted halves. The merge operation is the key process that assumes that the two halves are sorted and merges them into a single sorted array.'}\n              </p>\n            </motion.div>\n\n            {/* Characteristics */}\n            <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n              <motion.div\n                whileHover={{ y: -5 }}\n                className=\"bg-gray-700/30 rounded-lg p-4 border border-cyan-500/20 text-center\"\n              >\n                <div className=\"text-2xl font-bold text-cyan-400 mb-1\">\n                  {selectedAlgorithm === 'bubble' || selectedAlgorithm === 'insertion' ? '\u2713' : '\u2717'}\n                </div>\n                <div className=\"text-xs text-gray-400\">Stable</div>\n              </motion.div>\n\n              <motion.div\n                whileHover={{ y: -5 }}\n                className=\"bg-gray-700/30 rounded-lg p-4 border border-purple-500/20 text-center\"\n              >\n                <div className=\"text-2xl font-bold text-purple-400 mb-1\">\n                  {selectedAlgorithm === 'merge' ? '\u2717' : '\u2713'}\n                </div>\n                <div className=\"text-xs text-gray-400\">In-Place</div>\n              </motion.div>\n\n              <motion.div\n                whileHover={{ y: -5 }}\n                className=\"bg-gray-700/30 rounded-lg p-4 border border-pink-500/20 text-center\"\n              >\n                <div className=\"text-2xl font-bold text-pink-400 mb-1\">\n                  {selectedAlgorithm === 'bubble' || selectedAlgorithm === 'insertion' ? '\u2713' : '\u2717'}\n                </div>\n                <div className=\"text-xs text-gray-400\">Adaptive</div>\n              </motion.div>\n\n              <motion.div\n                whileHover={{ y: -5 }}\n                className=\"bg-gray-700/30 rounded-lg p-4 border border-yellow-500/20 text-center\"\n              >\n                <div className=\"text-2xl font-bold text-yellow-400 mb-1\">\n                  {selectedAlgorithm === 'quick' || selectedAlgorithm === 'merge' ? '\u2713' : '\u2717'}\n                </div>\n                <div className=\"text-xs text-gray-400\">Divide & Conquer</div>\n              </motion.div>\n            </div>\n          </div>\n        </motion.div>\n      </div>\n    </div>\n  );\n}",
    "error": null,
    "elapsed_time": 119.40489840507507,
    "success": true
  }
}