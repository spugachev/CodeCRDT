{
  "prompt_id": "pomodoro_timer",
  "prompt_name": "Pomodoro Timer",
  "mode": "parallel",
  "run_number": 18,
  "timestamp": "2025-10-14T12:10:44.063364",
  "response_time": 69.33143758773804,
  "total_tokens": null,
  "response_content": "import { useState, useCallback, useEffect, useRef } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Play, Pause, RotateCcw, Settings } from 'lucide-react';\nimport { motion, AnimatePresence } from 'framer-motion';\n\ninterface TimerMode {\n  type: 'work' | 'shortBreak' | 'longBreak';\n  duration: number;\n  label: string;\n}\n\ninterface TimerSettings {\n  workDuration: number;\n  shortBreakDuration: number;\n  longBreakDuration: number;\n  longBreakInterval: number;\n}\n\ninterface Particle {\n  id: number;\n  x: number;\n  y: number;\n  size: number;\n  duration: number;\n  delay: number;\n}\n\nconst defaultSettings: TimerSettings = {\n  workDuration: 25,\n  shortBreakDuration: 5,\n  longBreakDuration: 15,\n  longBreakInterval: 4\n};\n\nconst timerModes: Record<string, { colors: string; gradient: string }> = {\n  work: {\n    colors: 'from-rose-500 via-pink-500 to-purple-500',\n    gradient: 'bg-gradient-to-br from-rose-500/20 via-pink-500/20 to-purple-500/20'\n  },\n  shortBreak: {\n    colors: 'from-cyan-500 via-blue-500 to-indigo-500',\n    gradient: 'bg-gradient-to-br from-cyan-500/20 via-blue-500/20 to-indigo-500/20'\n  },\n  longBreak: {\n    colors: 'from-emerald-500 via-teal-500 to-cyan-500',\n    gradient: 'bg-gradient-to-br from-emerald-500/20 via-teal-500/20 to-cyan-500/20'\n  }\n};\n\nexport default function PomodoroTimer() {\n  const [settings, setSettings] = useState<TimerSettings>(defaultSettings);\n  const [currentMode, setCurrentMode] = useState<'work' | 'shortBreak' | 'longBreak'>('work');\n  const [timeLeft, setTimeLeft] = useState(settings.workDuration * 60);\n  const [isRunning, setIsRunning] = useState(false);\n  const [completedPomodoros, setCompletedPomodoros] = useState(0);\n  const [showSettings, setShowSettings] = useState(false);\n  const [showCompletion, setShowCompletion] = useState(false);\n  const [particles, setParticles] = useState<Particle[]>([]);\n  \n  const intervalRef = useRef<NodeJS.Timeout | null>(null);\n  const audioRef = useRef<HTMLAudioElement | null>(null);\n\n  const totalTime = currentMode === 'work' \n    ? settings.workDuration * 60 \n    : currentMode === 'shortBreak'\n    ? settings.shortBreakDuration * 60\n    : settings.longBreakDuration * 60;\n\n  const progress = ((totalTime - timeLeft) / totalTime) * 100;\n\n  useEffect(() => {\n    const generatedParticles: Particle[] = Array.from({ length: 50 }, (_, i) => ({\n      id: i,\n      x: Math.random() * 100,\n      y: Math.random() * 100,\n      size: Math.random() * 4 + 2,\n      duration: Math.random() * 10 + 10,\n      delay: Math.random() * 5\n    }));\n    setParticles(generatedParticles);\n  }, []);\n\n  useEffect(() => {\n    if (isRunning && timeLeft > 0) {\n      intervalRef.current = setInterval(() => {\n        setTimeLeft((prev) => {\n          if (prev <= 1) {\n            setIsRunning(false);\n            \n            // Play completion sound\n            if (audioRef.current) {\n              audioRef.current.play().catch(() => {});\n            }\n            \n            // Show completion animation\n            setShowCompletion(true);\n            setTimeout(() => setShowCompletion(false), 2000);\n            \n            // Handle mode switching\n            if (currentMode === 'work') {\n              const newCompletedPomodoros = completedPomodoros + 1;\n              setCompletedPomodoros(newCompletedPomodoros);\n              \n              // Switch to long break after longBreakInterval pomodoros, otherwise short break\n              if (newCompletedPomodoros % settings.longBreakInterval === 0) {\n                setCurrentMode('longBreak');\n                setTimeLeft(settings.longBreakDuration * 60);\n              } else {\n                setCurrentMode('shortBreak');\n                setTimeLeft(settings.shortBreakDuration * 60);\n              }\n            } else {\n              // After any break, return to work\n              setCurrentMode('work');\n              setTimeLeft(settings.workDuration * 60);\n            }\n            \n            return 0;\n          }\n          return prev - 1;\n        });\n      }, 1000);\n    } else {\n      if (intervalRef.current) {\n        clearInterval(intervalRef.current);\n        intervalRef.current = null;\n      }\n    }\n    \n    return () => {\n      if (intervalRef.current) {\n        clearInterval(intervalRef.current);\n      }\n    };\n  }, [isRunning, timeLeft, currentMode, completedPomodoros, settings]);\n\n  const handlePlayPause = useCallback(() => {\n    setIsRunning(!isRunning);\n  }, [isRunning]);\n\n  const handleReset = useCallback(() => {\n    setIsRunning(false);\n    if (intervalRef.current) {\n      clearInterval(intervalRef.current);\n      intervalRef.current = null;\n    }\n    const duration = currentMode === 'work' \n      ? settings.workDuration * 60 \n      : currentMode === 'shortBreak'\n      ? settings.shortBreakDuration * 60\n      : settings.longBreakDuration * 60;\n    setTimeLeft(duration);\n  }, [currentMode, settings]);\n\n  const handleModeSwitch = useCallback((mode: 'work' | 'shortBreak' | 'longBreak') => {\n    setIsRunning(false);\n    setCurrentMode(mode);\n    const newDuration = mode === 'work' \n      ? settings.workDuration * 60 \n      : mode === 'shortBreak'\n      ? settings.shortBreakDuration * 60\n      : settings.longBreakDuration * 60;\n    setTimeLeft(newDuration);\n  }, [settings]);\n\n  const formatTime = useCallback((seconds: number): string => {\n    const mins = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;\n  }, []);\n\n  return (\n    <div className={`min-h-screen relative overflow-hidden transition-all duration-1000 ${timerModes[currentMode].gradient}`}>\n      <div className=\"absolute inset-0 overflow-hidden pointer-events-none\">\n        {particles.map((particle) => (\n          <motion.div\n            key={particle.id}\n            className=\"absolute rounded-full bg-white/30 backdrop-blur-sm\"\n            style={{\n              left: `${particle.x}%`,\n              top: `${particle.y}%`,\n              width: particle.size,\n              height: particle.size,\n            }}\n            animate={{\n              y: [0, -30, 0],\n              opacity: [0.2, 0.6, 0.2],\n              scale: [1, 1.2, 1],\n            }}\n            transition={{\n              duration: particle.duration,\n              delay: particle.delay,\n              repeat: Infinity,\n              ease: \"easeInOut\",\n            }}\n          />\n        ))}\n      </div>\n      \n      <div className=\"relative z-10 min-h-screen flex flex-col items-center justify-center p-8\">\n        <motion.div\n          initial={{ opacity: 0, y: -20 }}\n          animate={{ opacity: 1, y: 0 }}\n          className=\"w-full max-w-2xl\"\n        >\n          <div className=\"backdrop-blur-xl bg-white/10 rounded-3xl p-8 shadow-2xl border border-white/20\">\n            <div className=\"flex justify-between items-center mb-8\">\n              <h1 className=\"text-4xl font-bold text-white\">Pomodoro Timer</h1>\n              <Button\n                variant=\"ghost\"\n                size=\"icon\"\n                onClick={() => setShowSettings(!showSettings)}\n                className=\"text-white hover:bg-white/20\"\n              >\n                <Settings className=\"w-6 h-6\" />\n              </Button>\n            </div>\n\n            <div className=\"flex gap-2 mb-8\">\n              <Button\n                variant={currentMode === 'work' ? 'default' : 'ghost'}\n                onClick={() => handleModeSwitch('work')}\n                className={`flex-1 ${\n                  currentMode === 'work'\n                    ? 'bg-white text-rose-600 hover:bg-white/90'\n                    : 'text-white hover:bg-white/20'\n                }`}\n              >\n                Work\n              </Button>\n              <Button\n                variant={currentMode === 'shortBreak' ? 'default' : 'ghost'}\n                onClick={() => handleModeSwitch('shortBreak')}\n                className={`flex-1 ${\n                  currentMode === 'shortBreak'\n                    ? 'bg-white text-cyan-600 hover:bg-white/90'\n                    : 'text-white hover:bg-white/20'\n                }`}\n              >\n                Short Break\n              </Button>\n              <Button\n                variant={currentMode === 'longBreak' ? 'default' : 'ghost'}\n                onClick={() => handleModeSwitch('longBreak')}\n                className={`flex-1 ${\n                  currentMode === 'longBreak'\n                    ? 'bg-white text-emerald-600 hover:bg-white/90'\n                    : 'text-white hover:bg-white/20'\n                }`}\n              >\n                Long Break\n              </Button>\n            </div>\n\n            <div className=\"flex justify-center items-center my-12\">\n              <div className=\"relative\">\n                <svg className=\"transform -rotate-90\" width=\"320\" height=\"320\">\n                  {/* Background circle */}\n                  <circle\n                    cx=\"160\"\n                    cy=\"160\"\n                    r=\"140\"\n                    stroke=\"rgba(255, 255, 255, 0.1)\"\n                    strokeWidth=\"12\"\n                    fill=\"none\"\n                  />\n                  {/* Progress circle */}\n                  <motion.circle\n                    cx=\"160\"\n                    cy=\"160\"\n                    r=\"140\"\n                    stroke=\"url(#gradient)\"\n                    strokeWidth=\"12\"\n                    fill=\"none\"\n                    strokeLinecap=\"round\"\n                    strokeDasharray={2 * Math.PI * 140}\n                    strokeDashoffset={2 * Math.PI * 140 * (1 - progress / 100)}\n                    initial={{ strokeDashoffset: 2 * Math.PI * 140 }}\n                    animate={{ strokeDashoffset: 2 * Math.PI * 140 * (1 - progress / 100) }}\n                    transition={{ duration: 0.5, ease: \"easeInOut\" }}\n                  />\n                  <defs>\n                    <linearGradient id=\"gradient\" x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"100%\">\n                      <stop offset=\"0%\" stopColor={currentMode === 'work' ? '#f43f5e' : currentMode === 'shortBreak' ? '#06b6d4' : '#10b981'} />\n                      <stop offset=\"50%\" stopColor={currentMode === 'work' ? '#ec4899' : currentMode === 'shortBreak' ? '#3b82f6' : '#14b8a6'} />\n                      <stop offset=\"100%\" stopColor={currentMode === 'work' ? '#a855f7' : currentMode === 'shortBreak' ? '#6366f1' : '#06b6d4'} />\n                    </linearGradient>\n                  </defs>\n                </svg>\n                \n                {/* Timer display in center */}\n                <div className=\"absolute inset-0 flex flex-col items-center justify-center\">\n                  <motion.div\n                    key={timeLeft}\n                    initial={{ scale: 1 }}\n                    animate={{ scale: [1, 1.05, 1] }}\n                    transition={{ duration: 0.3 }}\n                    className=\"text-7xl font-bold text-white mb-2\"\n                  >\n                    {formatTime(timeLeft)}\n                  </motion.div>\n                  <div className=\"text-white/60 text-lg font-medium uppercase tracking-wider\">\n                    {currentMode === 'work' ? 'Focus Time' : currentMode === 'shortBreak' ? 'Short Break' : 'Long Break'}\n                  </div>\n                  <div className=\"text-white/40 text-sm mt-2\">\n                    Session {completedPomodoros + 1}\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"flex justify-center gap-4 mb-8\">\n              <Button\n                size=\"lg\"\n                onClick={handlePlayPause}\n                className=\"bg-white/20 hover:bg-white/30 text-white backdrop-blur-sm px-8\"\n              >\n                {isRunning ? <Pause className=\"w-6 h-6 mr-2\" /> : <Play className=\"w-6 h-6 mr-2\" />}\n                {isRunning ? 'Pause' : 'Start'}\n              </Button>\n              <Button\n                size=\"lg\"\n                variant=\"outline\"\n                onClick={handleReset}\n                className=\"border-white/30 text-white hover:bg-white/20 backdrop-blur-sm\"\n              >\n                <RotateCcw className=\"w-5 h-5 mr-2\" />\n                Reset\n              </Button>\n            </div>\n\n            <div className=\"mt-6 text-center\">\n              <p className=\"text-white/80 text-sm mb-3\">Completed Pomodoros</p>\n              <div className=\"flex justify-center gap-2 flex-wrap\">\n                {Array.from({ length: Math.max(completedPomodoros, 4) }, (_, i) => (\n                  <motion.div\n                    key={i}\n                    initial={{ scale: 0, rotate: -180 }}\n                    animate={{ \n                      scale: i < completedPomodoros ? 1 : 0.5,\n                      rotate: 0,\n                      opacity: i < completedPomodoros ? 1 : 0.3\n                    }}\n                    transition={{ \n                      type: \"spring\",\n                      stiffness: 260,\n                      damping: 20,\n                      delay: i * 0.1\n                    }}\n                    className={`w-10 h-10 rounded-full flex items-center justify-center font-bold text-sm\n                      ${i < completedPomodoros \n                        ? 'bg-gradient-to-br from-yellow-400 to-orange-500 text-white shadow-lg' \n                        : 'bg-white/10 text-white/40 border border-white/20'\n                      }\n                      ${(i + 1) % settings.longBreakInterval === 0 && i < completedPomodoros\n                        ? 'ring-4 ring-emerald-400/50'\n                        : ''\n                      }`}\n                  >\n                    {i < completedPomodoros ? '\u2713' : i + 1}\n                  </motion.div>\n                ))}\n              </div>\n            </div>\n          </div>\n\n          <AnimatePresence>\n            {showSettings && (\n              <motion.div\n                initial={{ opacity: 0, scale: 0.9, y: 20 }}\n                animate={{ opacity: 1, scale: 1, y: 0 }}\n                exit={{ opacity: 0, scale: 0.9, y: 20 }}\n                className=\"mt-6 backdrop-blur-xl bg-white/10 rounded-3xl p-8 shadow-2xl border border-white/20\"\n              >\n                <h2 className=\"text-2xl font-bold text-white mb-6\">Settings</h2>\n                <div className=\"space-y-6\">\n                  <div>\n                    <label className=\"block text-white/90 text-sm font-medium mb-2\">\n                      Work Duration (minutes)\n                    </label>\n                    <input\n                      type=\"number\"\n                      min=\"1\"\n                      max=\"60\"\n                      value={settings.workDuration}\n                      onChange={(e) => setSettings({ ...settings, workDuration: parseInt(e.target.value) || 1 })}\n                      className=\"w-full px-4 py-3 rounded-xl bg-white/20 backdrop-blur-sm border border-white/30 text-white placeholder-white/50 focus:outline-none focus:ring-2 focus:ring-white/50\"\n                    />\n                  </div>\n                  <div>\n                    <label className=\"block text-white/90 text-sm font-medium mb-2\">\n                      Short Break Duration (minutes)\n                    </label>\n                    <input\n                      type=\"number\"\n                      min=\"1\"\n                      max=\"30\"\n                      value={settings.shortBreakDuration}\n                      onChange={(e) => setSettings({ ...settings, shortBreakDuration: parseInt(e.target.value) || 1 })}\n                      className=\"w-full px-4 py-3 rounded-xl bg-white/20 backdrop-blur-sm border border-white/30 text-white placeholder-white/50 focus:outline-none focus:ring-2 focus:ring-white/50\"\n                    />\n                  </div>\n                  <div>\n                    <label className=\"block text-white/90 text-sm font-medium mb-2\">\n                      Long Break Duration (minutes)\n                    </label>\n                    <input\n                      type=\"number\"\n                      min=\"1\"\n                      max=\"60\"\n                      value={settings.longBreakDuration}\n                      onChange={(e) => setSettings({ ...settings, longBreakDuration: parseInt(e.target.value) || 1 })}\n                      className=\"w-full px-4 py-3 rounded-xl bg-white/20 backdrop-blur-sm border border-white/30 text-white placeholder-white/50 focus:outline-none focus:ring-2 focus:ring-white/50\"\n                    />\n                  </div>\n                  <div>\n                    <label className=\"block text-white/90 text-sm font-medium mb-2\">\n                      Long Break Interval (pomodoros)\n                    </label>\n                    <input\n                      type=\"number\"\n                      min=\"1\"\n                      max=\"10\"\n                      value={settings.longBreakInterval}\n                      onChange={(e) => setSettings({ ...settings, longBreakInterval: parseInt(e.target.value) || 1 })}\n                      className=\"w-full px-4 py-3 rounded-xl bg-white/20 backdrop-blur-sm border border-white/30 text-white placeholder-white/50 focus:outline-none focus:ring-2 focus:ring-white/50\"\n                    />\n                  </div>\n                  <div className=\"flex gap-4 pt-4\">\n                    <Button\n                      onClick={() => {\n                        setShowSettings(false);\n                        handleReset();\n                      }}\n                      className=\"flex-1 bg-white/20 hover:bg-white/30 text-white backdrop-blur-sm\"\n                    >\n                      Save\n                    </Button>\n                    <Button\n                      variant=\"outline\"\n                      onClick={() => {\n                        setSettings(defaultSettings);\n                        setShowSettings(false);\n                      }}\n                      className=\"flex-1 border-white/30 text-white hover:bg-white/20 backdrop-blur-sm\"\n                    >\n                      Cancel\n                    </Button>\n                  </div>\n                </div>\n              </motion.div>\n            )}\n          </AnimatePresence>\n        </motion.div>\n      </div>\n\n      <AnimatePresence>\n        {showCompletion && (\n          <motion.div\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            exit={{ opacity: 0 }}\n            className=\"fixed inset-0 z-50 flex items-center justify-center bg-black/50 backdrop-blur-sm\"\n            onClick={() => setShowCompletion(false)}\n          >\n            <motion.div\n              initial={{ scale: 0, rotate: -180 }}\n              animate={{ scale: 1, rotate: 0 }}\n              exit={{ scale: 0, rotate: 180 }}\n              transition={{ type: \"spring\", duration: 0.8 }}\n              className=\"bg-white rounded-3xl p-12 shadow-2xl max-w-md mx-4 relative overflow-hidden\"\n              onClick={(e) => e.stopPropagation()}\n            >\n              {/* Confetti particles */}\n              {Array.from({ length: 100 }).map((_, i) => (\n                <motion.div\n                  key={i}\n                  initial={{\n                    x: 0,\n                    y: 0,\n                    opacity: 1,\n                    scale: 1\n                  }}\n                  animate={{\n                    x: (Math.random() - 0.5) * 600,\n                    y: Math.random() * 600 - 100,\n                    opacity: 0,\n                    scale: 0,\n                    rotate: Math.random() * 720\n                  }}\n                  transition={{\n                    duration: Math.random() * 2 + 1,\n                    ease: \"easeOut\",\n                    delay: Math.random() * 0.3\n                  }}\n                  className=\"absolute top-1/2 left-1/2 w-3 h-3 rounded-full\"\n                  style={{\n                    backgroundColor: [\n                      '#ef4444', '#f59e0b', '#10b981', '#3b82f6', \n                      '#8b5cf6', '#ec4899', '#f97316', '#06b6d4'\n                    ][Math.floor(Math.random() * 8)]\n                  }}\n                />\n              ))}\n\n              {/* Celebration content */}\n              <motion.div\n                initial={{ scale: 0 }}\n                animate={{ scale: [0, 1.2, 1] }}\n                transition={{ delay: 0.3, duration: 0.5 }}\n                className=\"text-center relative z-10\"\n              >\n                <motion.div\n                  animate={{ \n                    rotate: [0, -10, 10, -10, 10, 0],\n                    scale: [1, 1.1, 1, 1.1, 1]\n                  }}\n                  transition={{ \n                    duration: 0.6,\n                    delay: 0.5,\n                    repeat: 2\n                  }}\n                  className=\"text-8xl mb-6\"\n                >\n                  \ud83c\udf89\n                </motion.div>\n                \n                <motion.h2\n                  initial={{ opacity: 0, y: 20 }}\n                  animate={{ opacity: 1, y: 0 }}\n                  transition={{ delay: 0.6 }}\n                  className=\"text-4xl font-bold mb-4 bg-gradient-to-r from-rose-500 via-purple-500 to-indigo-500 bg-clip-text text-transparent\"\n                >\n                  {currentMode === 'work' ? 'Great Work!' : 'Break Complete!'}\n                </motion.h2>\n                \n                <motion.p\n                  initial={{ opacity: 0 }}\n                  animate={{ opacity: 1 }}\n                  transition={{ delay: 0.8 }}\n                  className=\"text-gray-600 text-lg mb-8\"\n                >\n                  {currentMode === 'work' \n                    ? `You've completed ${completedPomodoros} pomodoro${completedPomodoros !== 1 ? 's' : ''}!`\n                    : 'Time to get back to work!'}\n                </motion.p>\n\n                <motion.div\n                  initial={{ opacity: 0, y: 20 }}\n                  animate={{ opacity: 1, y: 0 }}\n                  transition={{ delay: 1 }}\n                >\n                  <Button\n                    size=\"lg\"\n                    onClick={() => setShowCompletion(false)}\n                    className=\"bg-gradient-to-r from-rose-500 via-purple-500 to-indigo-500 text-white px-8 py-6 text-lg hover:shadow-xl transition-shadow\"\n                  >\n                    Continue\n                  </Button>\n                </motion.div>\n              </motion.div>\n\n              {/* Sparkle effects */}\n              {[...Array(8)].map((_, i) => (\n                <motion.div\n                  key={`sparkle-${i}`}\n                  initial={{ scale: 0, opacity: 1 }}\n                  animate={{\n                    scale: [0, 1, 0],\n                    opacity: [0, 1, 0],\n                    rotate: [0, 180]\n                  }}\n                  transition={{\n                    duration: 1.5,\n                    delay: i * 0.1,\n                    repeat: Infinity,\n                    repeatDelay: 1\n                  }}\n                  className=\"absolute text-yellow-400 text-2xl\"\n                  style={{\n                    top: `${20 + (i * 10)}%`,\n                    left: `${10 + (i % 2) * 70}%`\n                  }}\n                >\n                  \u2728\n                </motion.div>\n              ))}\n            </motion.div>\n          </motion.div>\n        )}\n      </AnimatePresence>\n    </div>\n  );\n}\n",
  "error": null,
  "overall_score": 59,
  "code_quality_score": 18,
  "architecture_score": 14,
  "performance_score": 16,
  "accessibility_score": 11,
  "metadata": {
    "document_id": "eval_room_d2d730a27605",
    "prompt_category": "productivity",
    "prompt_complexity": 7.0
  },
  "raw_response": {
    "document_id": "eval_room_d2d730a27605",
    "mode": "parallel",
    "prompt": "Build a gorgeous Pomodoro timer with a circular animated progress ring, glass morphism design, smooth color transitions between work/break modes, floating particles background, and satisfying completion animations with sound",
    "content": "import { useState, useCallback, useEffect, useRef } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Play, Pause, RotateCcw, Settings } from 'lucide-react';\nimport { motion, AnimatePresence } from 'framer-motion';\n\ninterface TimerMode {\n  type: 'work' | 'shortBreak' | 'longBreak';\n  duration: number;\n  label: string;\n}\n\ninterface TimerSettings {\n  workDuration: number;\n  shortBreakDuration: number;\n  longBreakDuration: number;\n  longBreakInterval: number;\n}\n\ninterface Particle {\n  id: number;\n  x: number;\n  y: number;\n  size: number;\n  duration: number;\n  delay: number;\n}\n\nconst defaultSettings: TimerSettings = {\n  workDuration: 25,\n  shortBreakDuration: 5,\n  longBreakDuration: 15,\n  longBreakInterval: 4\n};\n\nconst timerModes: Record<string, { colors: string; gradient: string }> = {\n  work: {\n    colors: 'from-rose-500 via-pink-500 to-purple-500',\n    gradient: 'bg-gradient-to-br from-rose-500/20 via-pink-500/20 to-purple-500/20'\n  },\n  shortBreak: {\n    colors: 'from-cyan-500 via-blue-500 to-indigo-500',\n    gradient: 'bg-gradient-to-br from-cyan-500/20 via-blue-500/20 to-indigo-500/20'\n  },\n  longBreak: {\n    colors: 'from-emerald-500 via-teal-500 to-cyan-500',\n    gradient: 'bg-gradient-to-br from-emerald-500/20 via-teal-500/20 to-cyan-500/20'\n  }\n};\n\nexport default function PomodoroTimer() {\n  const [settings, setSettings] = useState<TimerSettings>(defaultSettings);\n  const [currentMode, setCurrentMode] = useState<'work' | 'shortBreak' | 'longBreak'>('work');\n  const [timeLeft, setTimeLeft] = useState(settings.workDuration * 60);\n  const [isRunning, setIsRunning] = useState(false);\n  const [completedPomodoros, setCompletedPomodoros] = useState(0);\n  const [showSettings, setShowSettings] = useState(false);\n  const [showCompletion, setShowCompletion] = useState(false);\n  const [particles, setParticles] = useState<Particle[]>([]);\n  \n  const intervalRef = useRef<NodeJS.Timeout | null>(null);\n  const audioRef = useRef<HTMLAudioElement | null>(null);\n\n  const totalTime = currentMode === 'work' \n    ? settings.workDuration * 60 \n    : currentMode === 'shortBreak'\n    ? settings.shortBreakDuration * 60\n    : settings.longBreakDuration * 60;\n\n  const progress = ((totalTime - timeLeft) / totalTime) * 100;\n\n  useEffect(() => {\n    const generatedParticles: Particle[] = Array.from({ length: 50 }, (_, i) => ({\n      id: i,\n      x: Math.random() * 100,\n      y: Math.random() * 100,\n      size: Math.random() * 4 + 2,\n      duration: Math.random() * 10 + 10,\n      delay: Math.random() * 5\n    }));\n    setParticles(generatedParticles);\n  }, []);\n\n  useEffect(() => {\n    if (isRunning && timeLeft > 0) {\n      intervalRef.current = setInterval(() => {\n        setTimeLeft((prev) => {\n          if (prev <= 1) {\n            setIsRunning(false);\n            \n            // Play completion sound\n            if (audioRef.current) {\n              audioRef.current.play().catch(() => {});\n            }\n            \n            // Show completion animation\n            setShowCompletion(true);\n            setTimeout(() => setShowCompletion(false), 2000);\n            \n            // Handle mode switching\n            if (currentMode === 'work') {\n              const newCompletedPomodoros = completedPomodoros + 1;\n              setCompletedPomodoros(newCompletedPomodoros);\n              \n              // Switch to long break after longBreakInterval pomodoros, otherwise short break\n              if (newCompletedPomodoros % settings.longBreakInterval === 0) {\n                setCurrentMode('longBreak');\n                setTimeLeft(settings.longBreakDuration * 60);\n              } else {\n                setCurrentMode('shortBreak');\n                setTimeLeft(settings.shortBreakDuration * 60);\n              }\n            } else {\n              // After any break, return to work\n              setCurrentMode('work');\n              setTimeLeft(settings.workDuration * 60);\n            }\n            \n            return 0;\n          }\n          return prev - 1;\n        });\n      }, 1000);\n    } else {\n      if (intervalRef.current) {\n        clearInterval(intervalRef.current);\n        intervalRef.current = null;\n      }\n    }\n    \n    return () => {\n      if (intervalRef.current) {\n        clearInterval(intervalRef.current);\n      }\n    };\n  }, [isRunning, timeLeft, currentMode, completedPomodoros, settings]);\n\n  const handlePlayPause = useCallback(() => {\n    setIsRunning(!isRunning);\n  }, [isRunning]);\n\n  const handleReset = useCallback(() => {\n    setIsRunning(false);\n    if (intervalRef.current) {\n      clearInterval(intervalRef.current);\n      intervalRef.current = null;\n    }\n    const duration = currentMode === 'work' \n      ? settings.workDuration * 60 \n      : currentMode === 'shortBreak'\n      ? settings.shortBreakDuration * 60\n      : settings.longBreakDuration * 60;\n    setTimeLeft(duration);\n  }, [currentMode, settings]);\n\n  const handleModeSwitch = useCallback((mode: 'work' | 'shortBreak' | 'longBreak') => {\n    setIsRunning(false);\n    setCurrentMode(mode);\n    const newDuration = mode === 'work' \n      ? settings.workDuration * 60 \n      : mode === 'shortBreak'\n      ? settings.shortBreakDuration * 60\n      : settings.longBreakDuration * 60;\n    setTimeLeft(newDuration);\n  }, [settings]);\n\n  const formatTime = useCallback((seconds: number): string => {\n    const mins = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;\n  }, []);\n\n  return (\n    <div className={`min-h-screen relative overflow-hidden transition-all duration-1000 ${timerModes[currentMode].gradient}`}>\n      <div className=\"absolute inset-0 overflow-hidden pointer-events-none\">\n        {particles.map((particle) => (\n          <motion.div\n            key={particle.id}\n            className=\"absolute rounded-full bg-white/30 backdrop-blur-sm\"\n            style={{\n              left: `${particle.x}%`,\n              top: `${particle.y}%`,\n              width: particle.size,\n              height: particle.size,\n            }}\n            animate={{\n              y: [0, -30, 0],\n              opacity: [0.2, 0.6, 0.2],\n              scale: [1, 1.2, 1],\n            }}\n            transition={{\n              duration: particle.duration,\n              delay: particle.delay,\n              repeat: Infinity,\n              ease: \"easeInOut\",\n            }}\n          />\n        ))}\n      </div>\n      \n      <div className=\"relative z-10 min-h-screen flex flex-col items-center justify-center p-8\">\n        <motion.div\n          initial={{ opacity: 0, y: -20 }}\n          animate={{ opacity: 1, y: 0 }}\n          className=\"w-full max-w-2xl\"\n        >\n          <div className=\"backdrop-blur-xl bg-white/10 rounded-3xl p-8 shadow-2xl border border-white/20\">\n            <div className=\"flex justify-between items-center mb-8\">\n              <h1 className=\"text-4xl font-bold text-white\">Pomodoro Timer</h1>\n              <Button\n                variant=\"ghost\"\n                size=\"icon\"\n                onClick={() => setShowSettings(!showSettings)}\n                className=\"text-white hover:bg-white/20\"\n              >\n                <Settings className=\"w-6 h-6\" />\n              </Button>\n            </div>\n\n            <div className=\"flex gap-2 mb-8\">\n              <Button\n                variant={currentMode === 'work' ? 'default' : 'ghost'}\n                onClick={() => handleModeSwitch('work')}\n                className={`flex-1 ${\n                  currentMode === 'work'\n                    ? 'bg-white text-rose-600 hover:bg-white/90'\n                    : 'text-white hover:bg-white/20'\n                }`}\n              >\n                Work\n              </Button>\n              <Button\n                variant={currentMode === 'shortBreak' ? 'default' : 'ghost'}\n                onClick={() => handleModeSwitch('shortBreak')}\n                className={`flex-1 ${\n                  currentMode === 'shortBreak'\n                    ? 'bg-white text-cyan-600 hover:bg-white/90'\n                    : 'text-white hover:bg-white/20'\n                }`}\n              >\n                Short Break\n              </Button>\n              <Button\n                variant={currentMode === 'longBreak' ? 'default' : 'ghost'}\n                onClick={() => handleModeSwitch('longBreak')}\n                className={`flex-1 ${\n                  currentMode === 'longBreak'\n                    ? 'bg-white text-emerald-600 hover:bg-white/90'\n                    : 'text-white hover:bg-white/20'\n                }`}\n              >\n                Long Break\n              </Button>\n            </div>\n\n            <div className=\"flex justify-center items-center my-12\">\n              <div className=\"relative\">\n                <svg className=\"transform -rotate-90\" width=\"320\" height=\"320\">\n                  {/* Background circle */}\n                  <circle\n                    cx=\"160\"\n                    cy=\"160\"\n                    r=\"140\"\n                    stroke=\"rgba(255, 255, 255, 0.1)\"\n                    strokeWidth=\"12\"\n                    fill=\"none\"\n                  />\n                  {/* Progress circle */}\n                  <motion.circle\n                    cx=\"160\"\n                    cy=\"160\"\n                    r=\"140\"\n                    stroke=\"url(#gradient)\"\n                    strokeWidth=\"12\"\n                    fill=\"none\"\n                    strokeLinecap=\"round\"\n                    strokeDasharray={2 * Math.PI * 140}\n                    strokeDashoffset={2 * Math.PI * 140 * (1 - progress / 100)}\n                    initial={{ strokeDashoffset: 2 * Math.PI * 140 }}\n                    animate={{ strokeDashoffset: 2 * Math.PI * 140 * (1 - progress / 100) }}\n                    transition={{ duration: 0.5, ease: \"easeInOut\" }}\n                  />\n                  <defs>\n                    <linearGradient id=\"gradient\" x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"100%\">\n                      <stop offset=\"0%\" stopColor={currentMode === 'work' ? '#f43f5e' : currentMode === 'shortBreak' ? '#06b6d4' : '#10b981'} />\n                      <stop offset=\"50%\" stopColor={currentMode === 'work' ? '#ec4899' : currentMode === 'shortBreak' ? '#3b82f6' : '#14b8a6'} />\n                      <stop offset=\"100%\" stopColor={currentMode === 'work' ? '#a855f7' : currentMode === 'shortBreak' ? '#6366f1' : '#06b6d4'} />\n                    </linearGradient>\n                  </defs>\n                </svg>\n                \n                {/* Timer display in center */}\n                <div className=\"absolute inset-0 flex flex-col items-center justify-center\">\n                  <motion.div\n                    key={timeLeft}\n                    initial={{ scale: 1 }}\n                    animate={{ scale: [1, 1.05, 1] }}\n                    transition={{ duration: 0.3 }}\n                    className=\"text-7xl font-bold text-white mb-2\"\n                  >\n                    {formatTime(timeLeft)}\n                  </motion.div>\n                  <div className=\"text-white/60 text-lg font-medium uppercase tracking-wider\">\n                    {currentMode === 'work' ? 'Focus Time' : currentMode === 'shortBreak' ? 'Short Break' : 'Long Break'}\n                  </div>\n                  <div className=\"text-white/40 text-sm mt-2\">\n                    Session {completedPomodoros + 1}\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"flex justify-center gap-4 mb-8\">\n              <Button\n                size=\"lg\"\n                onClick={handlePlayPause}\n                className=\"bg-white/20 hover:bg-white/30 text-white backdrop-blur-sm px-8\"\n              >\n                {isRunning ? <Pause className=\"w-6 h-6 mr-2\" /> : <Play className=\"w-6 h-6 mr-2\" />}\n                {isRunning ? 'Pause' : 'Start'}\n              </Button>\n              <Button\n                size=\"lg\"\n                variant=\"outline\"\n                onClick={handleReset}\n                className=\"border-white/30 text-white hover:bg-white/20 backdrop-blur-sm\"\n              >\n                <RotateCcw className=\"w-5 h-5 mr-2\" />\n                Reset\n              </Button>\n            </div>\n\n            <div className=\"mt-6 text-center\">\n              <p className=\"text-white/80 text-sm mb-3\">Completed Pomodoros</p>\n              <div className=\"flex justify-center gap-2 flex-wrap\">\n                {Array.from({ length: Math.max(completedPomodoros, 4) }, (_, i) => (\n                  <motion.div\n                    key={i}\n                    initial={{ scale: 0, rotate: -180 }}\n                    animate={{ \n                      scale: i < completedPomodoros ? 1 : 0.5,\n                      rotate: 0,\n                      opacity: i < completedPomodoros ? 1 : 0.3\n                    }}\n                    transition={{ \n                      type: \"spring\",\n                      stiffness: 260,\n                      damping: 20,\n                      delay: i * 0.1\n                    }}\n                    className={`w-10 h-10 rounded-full flex items-center justify-center font-bold text-sm\n                      ${i < completedPomodoros \n                        ? 'bg-gradient-to-br from-yellow-400 to-orange-500 text-white shadow-lg' \n                        : 'bg-white/10 text-white/40 border border-white/20'\n                      }\n                      ${(i + 1) % settings.longBreakInterval === 0 && i < completedPomodoros\n                        ? 'ring-4 ring-emerald-400/50'\n                        : ''\n                      }`}\n                  >\n                    {i < completedPomodoros ? '\u2713' : i + 1}\n                  </motion.div>\n                ))}\n              </div>\n            </div>\n          </div>\n\n          <AnimatePresence>\n            {showSettings && (\n              <motion.div\n                initial={{ opacity: 0, scale: 0.9, y: 20 }}\n                animate={{ opacity: 1, scale: 1, y: 0 }}\n                exit={{ opacity: 0, scale: 0.9, y: 20 }}\n                className=\"mt-6 backdrop-blur-xl bg-white/10 rounded-3xl p-8 shadow-2xl border border-white/20\"\n              >\n                <h2 className=\"text-2xl font-bold text-white mb-6\">Settings</h2>\n                <div className=\"space-y-6\">\n                  <div>\n                    <label className=\"block text-white/90 text-sm font-medium mb-2\">\n                      Work Duration (minutes)\n                    </label>\n                    <input\n                      type=\"number\"\n                      min=\"1\"\n                      max=\"60\"\n                      value={settings.workDuration}\n                      onChange={(e) => setSettings({ ...settings, workDuration: parseInt(e.target.value) || 1 })}\n                      className=\"w-full px-4 py-3 rounded-xl bg-white/20 backdrop-blur-sm border border-white/30 text-white placeholder-white/50 focus:outline-none focus:ring-2 focus:ring-white/50\"\n                    />\n                  </div>\n                  <div>\n                    <label className=\"block text-white/90 text-sm font-medium mb-2\">\n                      Short Break Duration (minutes)\n                    </label>\n                    <input\n                      type=\"number\"\n                      min=\"1\"\n                      max=\"30\"\n                      value={settings.shortBreakDuration}\n                      onChange={(e) => setSettings({ ...settings, shortBreakDuration: parseInt(e.target.value) || 1 })}\n                      className=\"w-full px-4 py-3 rounded-xl bg-white/20 backdrop-blur-sm border border-white/30 text-white placeholder-white/50 focus:outline-none focus:ring-2 focus:ring-white/50\"\n                    />\n                  </div>\n                  <div>\n                    <label className=\"block text-white/90 text-sm font-medium mb-2\">\n                      Long Break Duration (minutes)\n                    </label>\n                    <input\n                      type=\"number\"\n                      min=\"1\"\n                      max=\"60\"\n                      value={settings.longBreakDuration}\n                      onChange={(e) => setSettings({ ...settings, longBreakDuration: parseInt(e.target.value) || 1 })}\n                      className=\"w-full px-4 py-3 rounded-xl bg-white/20 backdrop-blur-sm border border-white/30 text-white placeholder-white/50 focus:outline-none focus:ring-2 focus:ring-white/50\"\n                    />\n                  </div>\n                  <div>\n                    <label className=\"block text-white/90 text-sm font-medium mb-2\">\n                      Long Break Interval (pomodoros)\n                    </label>\n                    <input\n                      type=\"number\"\n                      min=\"1\"\n                      max=\"10\"\n                      value={settings.longBreakInterval}\n                      onChange={(e) => setSettings({ ...settings, longBreakInterval: parseInt(e.target.value) || 1 })}\n                      className=\"w-full px-4 py-3 rounded-xl bg-white/20 backdrop-blur-sm border border-white/30 text-white placeholder-white/50 focus:outline-none focus:ring-2 focus:ring-white/50\"\n                    />\n                  </div>\n                  <div className=\"flex gap-4 pt-4\">\n                    <Button\n                      onClick={() => {\n                        setShowSettings(false);\n                        handleReset();\n                      }}\n                      className=\"flex-1 bg-white/20 hover:bg-white/30 text-white backdrop-blur-sm\"\n                    >\n                      Save\n                    </Button>\n                    <Button\n                      variant=\"outline\"\n                      onClick={() => {\n                        setSettings(defaultSettings);\n                        setShowSettings(false);\n                      }}\n                      className=\"flex-1 border-white/30 text-white hover:bg-white/20 backdrop-blur-sm\"\n                    >\n                      Cancel\n                    </Button>\n                  </div>\n                </div>\n              </motion.div>\n            )}\n          </AnimatePresence>\n        </motion.div>\n      </div>\n\n      <AnimatePresence>\n        {showCompletion && (\n          <motion.div\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            exit={{ opacity: 0 }}\n            className=\"fixed inset-0 z-50 flex items-center justify-center bg-black/50 backdrop-blur-sm\"\n            onClick={() => setShowCompletion(false)}\n          >\n            <motion.div\n              initial={{ scale: 0, rotate: -180 }}\n              animate={{ scale: 1, rotate: 0 }}\n              exit={{ scale: 0, rotate: 180 }}\n              transition={{ type: \"spring\", duration: 0.8 }}\n              className=\"bg-white rounded-3xl p-12 shadow-2xl max-w-md mx-4 relative overflow-hidden\"\n              onClick={(e) => e.stopPropagation()}\n            >\n              {/* Confetti particles */}\n              {Array.from({ length: 100 }).map((_, i) => (\n                <motion.div\n                  key={i}\n                  initial={{\n                    x: 0,\n                    y: 0,\n                    opacity: 1,\n                    scale: 1\n                  }}\n                  animate={{\n                    x: (Math.random() - 0.5) * 600,\n                    y: Math.random() * 600 - 100,\n                    opacity: 0,\n                    scale: 0,\n                    rotate: Math.random() * 720\n                  }}\n                  transition={{\n                    duration: Math.random() * 2 + 1,\n                    ease: \"easeOut\",\n                    delay: Math.random() * 0.3\n                  }}\n                  className=\"absolute top-1/2 left-1/2 w-3 h-3 rounded-full\"\n                  style={{\n                    backgroundColor: [\n                      '#ef4444', '#f59e0b', '#10b981', '#3b82f6', \n                      '#8b5cf6', '#ec4899', '#f97316', '#06b6d4'\n                    ][Math.floor(Math.random() * 8)]\n                  }}\n                />\n              ))}\n\n              {/* Celebration content */}\n              <motion.div\n                initial={{ scale: 0 }}\n                animate={{ scale: [0, 1.2, 1] }}\n                transition={{ delay: 0.3, duration: 0.5 }}\n                className=\"text-center relative z-10\"\n              >\n                <motion.div\n                  animate={{ \n                    rotate: [0, -10, 10, -10, 10, 0],\n                    scale: [1, 1.1, 1, 1.1, 1]\n                  }}\n                  transition={{ \n                    duration: 0.6,\n                    delay: 0.5,\n                    repeat: 2\n                  }}\n                  className=\"text-8xl mb-6\"\n                >\n                  \ud83c\udf89\n                </motion.div>\n                \n                <motion.h2\n                  initial={{ opacity: 0, y: 20 }}\n                  animate={{ opacity: 1, y: 0 }}\n                  transition={{ delay: 0.6 }}\n                  className=\"text-4xl font-bold mb-4 bg-gradient-to-r from-rose-500 via-purple-500 to-indigo-500 bg-clip-text text-transparent\"\n                >\n                  {currentMode === 'work' ? 'Great Work!' : 'Break Complete!'}\n                </motion.h2>\n                \n                <motion.p\n                  initial={{ opacity: 0 }}\n                  animate={{ opacity: 1 }}\n                  transition={{ delay: 0.8 }}\n                  className=\"text-gray-600 text-lg mb-8\"\n                >\n                  {currentMode === 'work' \n                    ? `You've completed ${completedPomodoros} pomodoro${completedPomodoros !== 1 ? 's' : ''}!`\n                    : 'Time to get back to work!'}\n                </motion.p>\n\n                <motion.div\n                  initial={{ opacity: 0, y: 20 }}\n                  animate={{ opacity: 1, y: 0 }}\n                  transition={{ delay: 1 }}\n                >\n                  <Button\n                    size=\"lg\"\n                    onClick={() => setShowCompletion(false)}\n                    className=\"bg-gradient-to-r from-rose-500 via-purple-500 to-indigo-500 text-white px-8 py-6 text-lg hover:shadow-xl transition-shadow\"\n                  >\n                    Continue\n                  </Button>\n                </motion.div>\n              </motion.div>\n\n              {/* Sparkle effects */}\n              {[...Array(8)].map((_, i) => (\n                <motion.div\n                  key={`sparkle-${i}`}\n                  initial={{ scale: 0, opacity: 1 }}\n                  animate={{\n                    scale: [0, 1, 0],\n                    opacity: [0, 1, 0],\n                    rotate: [0, 180]\n                  }}\n                  transition={{\n                    duration: 1.5,\n                    delay: i * 0.1,\n                    repeat: Infinity,\n                    repeatDelay: 1\n                  }}\n                  className=\"absolute text-yellow-400 text-2xl\"\n                  style={{\n                    top: `${20 + (i * 10)}%`,\n                    left: `${10 + (i % 2) * 70}%`\n                  }}\n                >\n                  \u2728\n                </motion.div>\n              ))}\n            </motion.div>\n          </motion.div>\n        )}\n      </AnimatePresence>\n    </div>\n  );\n}\n",
    "error": null,
    "elapsed_time": 69.33143758773804,
    "success": true
  }
}