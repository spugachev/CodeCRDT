{
  "prompt_id": "algorithm_visualizer",
  "prompt_name": "Algorithm Visualizer",
  "mode": "parallel",
  "run_number": 13,
  "timestamp": "2025-10-13T22:16:56.590622",
  "response_time": 104.38164472579956,
  "total_tokens": null,
  "response_content": "import { useState, useCallback } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Slider } from '@/components/ui/slider';\nimport { Play, Pause, RotateCcw, Zap, BarChart3 } from 'lucide-react';\nimport { motion } from 'framer-motion';\n\ninterface ArrayElement {\n  value: number;\n  id: string;\n  isComparing?: boolean;\n  isSwapping?: boolean;\n  isSorted?: boolean;\n}\n\ninterface AlgorithmStep {\n  array: ArrayElement[];\n  comparingIndices: number[];\n  swappingIndices: number[];\n  sortedIndices: number[];\n}\n\ntype AlgorithmType = 'bubble' | 'quick' | 'merge' | 'insertion';\n\nconst NEON_COLORS = [\n  '#00ffff',\n  '#ff00ff', \n  '#00ff00',\n  '#ffff00',\n  '#ff0066',\n  '#00ffaa'\n];\n\nconst mockAlgorithms = [\n  { id: 'bubble', name: 'Bubble Sort', complexity: 'O(n\u00b2)' },\n  { id: 'quick', name: 'Quick Sort', complexity: 'O(n log n)' },\n  { id: 'merge', name: 'Merge Sort', complexity: 'O(n log n)' },\n  { id: 'insertion', name: 'Insertion Sort', complexity: 'O(n\u00b2)' }\n];\n\nconst useAnimationLoop = (\n  steps: AlgorithmStep[],\n  currentStep: number,\n  speed: number[],\n  isPlaying: boolean,\n  onStepChange: (step: number) => void,\n  onComplete: () => void\n) => {\n  const [animationId, setAnimationId] = useState<NodeJS.Timeout | null>(null);\n\n  const cleanup = useCallback(() => {\n    if (animationId) {\n      clearTimeout(animationId);\n      setAnimationId(null);\n    }\n  }, [animationId]);\n\n  const animate = useCallback(() => {\n    if (currentStep < steps.length - 1) {\n      const delay = 1000 - speed[0] * 9.5;\n      const id = setTimeout(() => {\n        onStepChange(currentStep + 1);\n      }, delay);\n      setAnimationId(id);\n    } else {\n      onComplete();\n    }\n  }, [currentStep, steps.length, speed, onStepChange, onComplete]);\n\n  return { animate, cleanup };\n};\nexport default function AlgorithmVisualizer() {\n  const [array, setArray] = useState<ArrayElement[]>([]);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [speed, setSpeed] = useState([50]);\n  const [arraySize, setArraySize] = useState([20]);\n  const [selectedAlgorithm, setSelectedAlgorithm] = useState<AlgorithmType>('bubble');\n  const [currentStep, setCurrentStep] = useState(0);\n  const [steps, setSteps] = useState<AlgorithmStep[]>([]);\n  const [comparisons, setComparisons] = useState(0);\n  const [swaps, setSwaps] = useState(0);\n\n  const generateRandomArray = useCallback(() => {\n    const newArray: ArrayElement[] = Array.from({ length: arraySize[0] }, (_, index) => ({\n      value: Math.floor(Math.random() * 100) + 5,\n      id: `element-${index}-${Date.now()}`,\n      isComparing: false,\n      isSwapping: false,\n      isSorted: false\n    }));\n    setArray(newArray);\n    setSteps([]);\n    setCurrentStep(0);\n    setIsPlaying(false);\n  }, [arraySize]);\n\n  const resetVisualization = useCallback(() => {\n    setIsPlaying(false);\n    setCurrentStep(0);\n    setSteps([]);\n    generateRandomArray();\n\n    \n  }, [generateRandomArray]);\n\n  const startVisualization = useCallback(() => {\n    if (steps.length === 0) return;\n    if (currentStep >= steps.length - 1) {\n      setCurrentStep(0);\n    }\n    setIsPlaying(true);\n  }, [steps, speed, currentStep]);\n\n  const pauseVisualization = useCallback(() => {\n\n    setIsPlaying(false);\n  }, []);\n\n  const generateSortingSteps = useCallback((algorithm: AlgorithmType) => {\n    const algorithmArray = [...array];\n    const newSteps: AlgorithmStep[] = [];\n\n    const addStep = (arr: ArrayElement[], comparing: number[] = [], swapping: number[] = [], sorted: number[] = []) => {\n      newSteps.push({\n        array: arr.map(el => ({ ...el })),\n        comparingIndices: [...comparing],\n        swappingIndices: [...swapping],\n        sortedIndices: [...sorted]\n      });\n    };\n\n    // Initial state\n    addStep(algorithmArray);\n\n    switch (algorithm) {\n      case 'bubble': {\n        const arr = [...algorithmArray];\n        const sortedIndices: number[] = [];\n        \n        for (let i = 0; i < arr.length - 1; i++) {\n          for (let j = 0; j < arr.length - i - 1; j++) {\n            // Comparing\n            addStep(arr, [j, j + 1], [], sortedIndices);\n            \n            if (arr[j].value > arr[j + 1].value) {\n              // Swapping\n              addStep(arr, [], [j, j + 1], sortedIndices);\n              [arr[j], arr[j + 1]] = [arr[j + 1], arr[j]];\n              addStep(arr, [], [], sortedIndices);\n            }\n          }\n          sortedIndices.push(arr.length - i - 1);\n          addStep(arr, [], [], sortedIndices);\n        }\n        sortedIndices.push(0);\n        addStep(arr, [], [], sortedIndices);\n        break;\n      }\n\n      case 'insertion': {\n        const arr = [...algorithmArray];\n        const sortedIndices: number[] = [0];\n        addStep(arr, [], [], sortedIndices);\n\n        for (let i = 1; i < arr.length; i++) {\n          const key = arr[i];\n          let j = i - 1;\n          \n          addStep(arr, [i], [], sortedIndices);\n          \n          while (j >= 0 && arr[j].value > key.value) {\n            addStep(arr, [j, j + 1], [], sortedIndices);\n            addStep(arr, [], [j, j + 1], sortedIndices);\n            arr[j + 1] = arr[j];\n            addStep(arr, [], [], sortedIndices);\n            j--;\n          }\n          \n          arr[j + 1] = key;\n          sortedIndices.push(i);\n          addStep(arr, [], [], sortedIndices);\n        }\n        break;\n      }\n\n      case 'quick': {\n        const arr = [...algorithmArray];\n        const sortedIndices: number[] = [];\n\n        const partition = (low: number, high: number): number => {\n          const pivot = arr[high].value;\n          let i = low - 1;\n\n          for (let j = low; j < high; j++) {\n            addStep(arr, [j, high], [], sortedIndices);\n            \n            if (arr[j].value < pivot) {\n              i++;\n              addStep(arr, [], [i, j], sortedIndices);\n              [arr[i], arr[j]] = [arr[j], arr[i]];\n              addStep(arr, [], [], sortedIndices);\n            }\n          }\n          \n          addStep(arr, [], [i + 1, high], sortedIndices);\n          [arr[i + 1], arr[high]] = [arr[high], arr[i + 1]];\n          sortedIndices.push(i + 1);\n          addStep(arr, [], [], sortedIndices);\n          \n          return i + 1;\n        };\n\n        const quickSort = (low: number, high: number) => {\n          if (low < high) {\n            const pi = partition(low, high);\n            quickSort(low, pi - 1);\n            quickSort(pi + 1, high);\n          } else if (low === high) {\n            sortedIndices.push(low);\n            addStep(arr, [], [], sortedIndices);\n          }\n        };\n\n        quickSort(0, arr.length - 1);\n        break;\n      }\n\n      case 'merge': {\n        const arr = [...algorithmArray];\n        const sortedIndices: number[] = [];\n\n        const merge = (left: number, mid: number, right: number) => {\n          const leftArr = arr.slice(left, mid + 1);\n          const rightArr = arr.slice(mid + 1, right + 1);\n          \n          let i = 0, j = 0, k = left;\n\n          while (i < leftArr.length && j < rightArr.length) {\n            addStep(arr, [left + i, mid + 1 + j], [], sortedIndices);\n            \n            if (leftArr[i].value <= rightArr[j].value) {\n              arr[k] = leftArr[i];\n              i++;\n            } else {\n              arr[k] = rightArr[j];\n              j++;\n            }\n            addStep(arr, [], [k], sortedIndices);\n            k++;\n          }\n\n          while (i < leftArr.length) {\n            arr[k] = leftArr[i];\n            addStep(arr, [], [k], sortedIndices);\n            i++;\n            k++;\n          }\n\n          while (j < rightArr.length) {\n            arr[k] = rightArr[j];\n            addStep(arr, [], [k], sortedIndices);\n            j++;\n            k++;\n          }\n\n          addStep(arr, [], [], sortedIndices);\n        };\n\n        const mergeSort = (left: number, right: number) => {\n          if (left < right) {\n            const mid = Math.floor((left + right) / 2);\n            mergeSort(left, mid);\n            mergeSort(mid + 1, right);\n            merge(left, mid, right);\n          } else if (left === right) {\n            sortedIndices.push(left);\n            addStep(arr, [], [], sortedIndices);\n          }\n        };\n\n        mergeSort(0, arr.length - 1);\n        \n        // Mark all as sorted at the end\n        for (let i = 0; i < arr.length; i++) {\n          if (!sortedIndices.includes(i)) {\n            sortedIndices.push(i);\n          }\n        }\n        addStep(arr, [], [], sortedIndices);\n        break;\n      }\n    }\n\n    setSteps(newSteps);\n    setCurrentStep(0);\n  }, [array]);\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-gray-900 via-purple-900 to-gray-900 p-8\">\n      <div className=\"max-w-7xl mx-auto space-y-8\">\n        <motion.div\n          initial={{ opacity: 0, y: -20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.8 }}\n          className=\"text-center space-y-4\"\n        >\n          <motion.h1\n            className=\"text-6xl font-bold bg-gradient-to-r from-cyan-400 via-purple-400 to-pink-400 bg-clip-text text-transparent\"\n            animate={{\n              textShadow: [\n                '0 0 20px rgba(0, 255, 255, 0.5)',\n                '0 0 40px rgba(255, 0, 255, 0.5)',\n                '0 0 20px rgba(0, 255, 255, 0.5)'\n              ]\n            }}\n            transition={{ duration: 2, repeat: Infinity }}\n          >\n            Algorithm Visualizer\n          </motion.h1>\n          \n          <div className=\"flex items-center justify-center gap-4\">\n            <motion.div\n              initial={{ scale: 0 }}\n              animate={{ scale: 1 }}\n              transition={{ delay: 0.3, type: 'spring' }}\n              className=\"px-6 py-2 bg-purple-500/20 border border-purple-400/50 rounded-full backdrop-blur-sm\"\n            >\n              <span className=\"text-2xl font-semibold text-purple-300\">\n                {mockAlgorithms.find(a => a.id === selectedAlgorithm)?.name}\n              </span>\n            </motion.div>\n            \n            <motion.div\n              initial={{ scale: 0 }}\n              animate={{ scale: 1 }}\n              transition={{ delay: 0.5, type: 'spring' }}\n              className=\"px-4 py-2 bg-cyan-500/20 border border-cyan-400/50 rounded-full backdrop-blur-sm relative overflow-hidden\"\n            >\n              <motion.div\n                className=\"absolute inset-0 bg-gradient-to-r from-transparent via-cyan-400/20 to-transparent\"\n                animate={{ x: ['-100%', '100%'] }}\n                transition={{ duration: 2, repeat: Infinity }}\n              />\n              <span className=\"text-lg font-mono text-cyan-300 relative z-10\">\n                {mockAlgorithms.find(a => a.id === selectedAlgorithm)?.complexity}\n              </span>\n            </motion.div>\n          </div>\n        </motion.div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-6\">\n          <div className=\"lg:col-span-1 space-y-6\">\n            <motion.div\n              initial={{ opacity: 0, x: -50 }}\n              animate={{ opacity: 1, x: 0 }}\n              className=\"bg-gray-900/50 backdrop-blur-lg border border-cyan-500/30 rounded-xl p-6 shadow-[0_0_30px_rgba(0,255,255,0.3)] hover:shadow-[0_0_50px_rgba(0,255,255,0.5)] transition-all duration-300\"\n            >\n              <div className=\"space-y-6\">\n                {/* Algorithm Selection */}\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center gap-2 text-cyan-400\">\n                    <Zap className=\"w-4 h-4\" />\n                    <h3 className=\"text-sm font-semibold uppercase tracking-wider\">Algorithm</h3>\n                  </div>\n                  <div className=\"grid grid-cols-1 gap-2\">\n                    {mockAlgorithms.map((algo) => (\n                      <button\n                        key={algo.id}\n                        onClick={() => setSelectedAlgorithm(algo.id as AlgorithmType)}\n                        disabled={isPlaying}\n                        className={`p-3 rounded-lg border transition-all duration-300 text-left ${\n                          selectedAlgorithm === algo.id\n                            ? 'bg-cyan-500/20 border-cyan-400 shadow-[0_0_20px_rgba(0,255,255,0.4)]'\n                            : 'bg-gray-800/50 border-gray-700 hover:border-cyan-500/50 hover:bg-gray-800'\n                        } disabled:opacity-50 disabled:cursor-not-allowed`}\n                      >\n                        <div className=\"font-medium text-white\">{algo.name}</div>\n                        <div className=\"text-xs text-gray-400 mt-1\">{algo.complexity}</div>\n                      </button>\n                    ))}\n                  </div>\n                </div>\n\n                {/* Array Size Control */}\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center gap-2 text-purple-400\">\n                    <BarChart3 className=\"w-4 h-4\" />\n                    <h3 className=\"text-sm font-semibold uppercase tracking-wider\">Array Size</h3>\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Slider\n                      value={arraySize}\n                      onValueChange={setArraySize}\n                      min={5}\n                      max={50}\n                      step={1}\n                      disabled={isPlaying}\n                      className=\"cursor-pointer\"\n                    />\n                    <div className=\"text-center\">\n                      <span className=\"text-2xl font-bold text-white bg-purple-500/20 px-4 py-1 rounded-lg border border-purple-400/30 shadow-[0_0_15px_rgba(168,85,247,0.3)]\">\n                        {arraySize[0]}\n                      </span>\n                    </div>\n                  </div>\n                </div>\n\n                {/* Speed Control */}\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center gap-2 text-pink-400\">\n                    <Zap className=\"w-4 h-4\" />\n                    <h3 className=\"text-sm font-semibold uppercase tracking-wider\">Speed</h3>\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Slider\n                      value={speed}\n                      onValueChange={setSpeed}\n                      min={10}\n                      max={100}\n                      step={10}\n                      className=\"cursor-pointer\"\n                    />\n                    <div className=\"flex justify-between text-xs text-gray-400\">\n                      <span>Slow</span>\n                      <span className=\"text-pink-400 font-semibold\">{speed[0]}%</span>\n                      <span>Fast</span>\n                    </div>\n                  </div>\n                </div>\n\n                {/* Control Buttons */}\n                <div className=\"space-y-2 pt-4 border-t border-gray-700/50\">\n                  <Button\n                    onClick={isPlaying ? pauseVisualization : startVisualization}\n                    disabled={steps.length === 0 || currentStep >= steps.length}\n                    className=\"w-full bg-gradient-to-r from-cyan-500 to-blue-500 hover:from-cyan-400 hover:to-blue-400 text-white font-semibold shadow-[0_0_20px_rgba(0,255,255,0.5)] hover:shadow-[0_0_30px_rgba(0,255,255,0.7)] transition-all duration-300\"\n                  >\n                    {isPlaying ? (\n                      <>\n                        <Pause className=\"w-4 h-4 mr-2\" />\n                        Pause\n                      </>\n                    ) : (\n                      <>\n                        <Play className=\"w-4 h-4 mr-2\" />\n                        {currentStep > 0 ? 'Resume' : 'Start'}\n                      </>\n                    )}\n                  </Button>\n                  <Button\n                    onClick={resetVisualization}\n                    variant=\"outline\"\n                    className=\"w-full border-pink-500/50 text-pink-400 hover:bg-pink-500/20 hover:border-pink-400 shadow-[0_0_15px_rgba(236,72,153,0.3)] hover:shadow-[0_0_25px_rgba(236,72,153,0.5)] transition-all duration-300\"\n                  >\n                    <RotateCcw className=\"w-4 h-4 mr-2\" />\n                    Reset\n                  </Button>\n                  <Button\n                    onClick={() => {\n                      generateRandomArray();\n                      generateSortingSteps(selectedAlgorithm);\n                    }}\n                    variant=\"outline\"\n                    disabled={isPlaying}\n                    className=\"w-full border-purple-500/50 text-purple-400 hover:bg-purple-500/20 hover:border-purple-400 shadow-[0_0_15px_rgba(168,85,247,0.3)] hover:shadow-[0_0_25px_rgba(168,85,247,0.5)] transition-all duration-300 disabled:opacity-50 disabled:cursor-not-allowed\"\n                  >\n                    <Zap className=\"w-4 h-4 mr-2\" />\n                    Generate New\n                  </Button>\n                </div>\n\n                {/* Stats Display */}\n                <div className=\"pt-4 border-t border-gray-700/50 space-y-2\">\n                  <div className=\"flex justify-between text-sm\">\n                    <span className=\"text-gray-400\">Current Step:</span>\n                    <span className=\"text-cyan-400 font-semibold\">{currentStep} / {steps.length}</span>\n                  </div>\n                  <div className=\"flex justify-between text-sm\">\n                    <span className=\"text-gray-400\">Array Length:</span>\n                    <span className=\"text-purple-400 font-semibold\">{array.length}</span>\n                  </div>\n                </div>\n              </div>\n            </motion.div>\n            \n            <div className=\"bg-gray-900/50 backdrop-blur-lg border border-cyan-500/30 rounded-xl p-6 shadow-2xl shadow-cyan-500/20\">\n              <div className=\"space-y-6\">\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center gap-2 text-cyan-400\">\n                    <Zap className=\"w-4 h-4\" />\n                    <span className=\"text-sm font-semibold tracking-wider\">ALGORITHM</span>\n                  </div>\n                  <div className=\"grid grid-cols-1 gap-3\">\n                    {mockAlgorithms.map((algo) => (\n                      <motion.button\n                        key={algo.id}\n                        onClick={() => setSelectedAlgorithm(algo.id as AlgorithmType)}\n                        className={`relative p-4 rounded-lg border-2 transition-all duration-300 text-left overflow-hidden group ${\n                          selectedAlgorithm === algo.id\n                            ? 'border-cyan-400 bg-cyan-500/20 shadow-lg shadow-cyan-500/50'\n                            : 'border-gray-700 bg-gray-800/50 hover:border-cyan-500/50 hover:bg-cyan-500/10'\n                        }`}\n                        whileHover={{ scale: 1.02 }}\n                        whileTap={{ scale: 0.98 }}\n                      >\n                        <div className={`absolute inset-0 bg-gradient-to-r from-cyan-500/0 via-cyan-500/20 to-cyan-500/0 opacity-0 group-hover:opacity-100 transition-opacity duration-500 ${\n                          selectedAlgorithm === algo.id ? 'opacity-100' : ''\n                        }`} />\n                        <div className=\"relative z-10\">\n                          <div className=\"font-semibold text-white mb-1\">{algo.name}</div>\n                          <div className={`text-xs font-mono ${\n                            selectedAlgorithm === algo.id ? 'text-cyan-300' : 'text-gray-400'\n                          }`}>\n                            {algo.complexity}\n                          </div>\n                        </div>\n                        {selectedAlgorithm === algo.id && (\n                          <motion.div\n                            className=\"absolute top-2 right-2\"\n                            initial={{ scale: 0, rotate: -180 }}\n                            animate={{ scale: 1, rotate: 0 }}\n                            transition={{ type: 'spring', stiffness: 200, damping: 15 }}\n                          >\n                            <div className=\"w-2 h-2 rounded-full bg-cyan-400 shadow-lg shadow-cyan-400/80\" />\n                          </motion.div>\n                        )}\n                      </motion.button>\n                    ))}\n                  </div>\n                </div>\n\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <label className=\"text-cyan-400 text-sm font-medium flex items-center gap-2\">\n                      <Zap className=\"w-4 h-4\" />\n                      Speed\n                    </label>\n                    <span className=\"text-cyan-300 text-xs\">{speed[0]}ms</span>\n                  </div>\n                  <Slider\n                    value={speed}\n                    onValueChange={setSpeed}\n                    min={10}\n                    max={200}\n                    step={10}\n                    className=\"[&_[role=slider]]:bg-cyan-400 [&_[role=slider]]:border-cyan-300 [&_[role=slider]]:shadow-[0_0_15px_rgba(34,211,238,0.8)] [&_[role=slider]]:hover:shadow-[0_0_25px_rgba(34,211,238,1)] [&_[role=slider]]:transition-shadow [&_.relative]:bg-gray-700/50 [&_.relative]:border [&_.relative]:border-cyan-500/30 [&_.bg-primary]:bg-gradient-to-r [&_.bg-primary]:from-cyan-500 [&_.bg-primary]:to-purple-500 [&_.bg-primary]:shadow-[0_0_10px_rgba(34,211,238,0.5)]\"\n                  />\n                </div>\n\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <label className=\"text-cyan-400 text-sm font-medium flex items-center gap-2\">\n                      <BarChart3 className=\"w-4 h-4\" />\n                      Array Size\n                    </label>\n                    <span className=\"text-cyan-300 text-xs\">{arraySize[0]}</span>\n                  </div>\n                  <Slider\n                    value={arraySize}\n                    onValueChange={setArraySize}\n                    min={5}\n                    max={100}\n                    step={1}\n                    className=\"[&_[role=slider]]:bg-gradient-to-r [&_[role=slider]]:from-purple-500 [&_[role=slider]]:to-pink-500 [&_[role=slider]]:border-2 [&_[role=slider]]:border-purple-300 [&_[role=slider]]:shadow-lg [&_[role=slider]]:shadow-purple-500/50 [&_[role=slider]]:transition-all [&_[role=slider]]:hover:shadow-xl [&_[role=slider]]:hover:shadow-purple-400/60 [&_[role=slider]]:hover:scale-110 [&>span]:bg-gradient-to-r [&>span]:from-purple-500/30 [&>span]:to-pink-500/30 [&>span]:h-2 [&>span]:rounded-full\"\n                  />\n                </div>\n\n                <div className=\"flex gap-3 pt-4\">\n                  <motion.button\n                    onClick={isPlaying ? pauseVisualization : startVisualization}\n                    disabled={array.length === 0 || (steps.length === 0 && !isPlaying)}\n                    className=\"flex-1 relative group overflow-hidden\"\n                    whileHover={{ scale: 1.05 }}\n                    whileTap={{ scale: 0.95 }}\n                  >\n                    <motion.div\n                      className={`relative px-6 py-3 rounded-lg font-semibold text-sm uppercase tracking-wider transition-all duration-300 ${\n                        array.length === 0 || (steps.length === 0 && !isPlaying)\n                          ? 'bg-gray-700/50 text-gray-500 cursor-not-allowed'\n                          : isPlaying\n                          ? 'bg-gradient-to-r from-pink-500 to-purple-500 text-white shadow-[0_0_30px_rgba(236,72,153,0.6)]'\n                          : 'bg-gradient-to-r from-cyan-500 to-blue-500 text-white shadow-[0_0_30px_rgba(6,182,212,0.6)]'\n                      }`}\n                      animate={\n                        array.length > 0 && (steps.length > 0 || isPlaying)\n                          ? {\n                              boxShadow: isPlaying\n                                ? [\n                                    '0 0 30px rgba(236,72,153,0.6)',\n                                    '0 0 50px rgba(236,72,153,0.8)',\n                                    '0 0 30px rgba(236,72,153,0.6)'\n                                  ]\n                                : [\n                                    '0 0 30px rgba(6,182,212,0.6)',\n                                    '0 0 50px rgba(6,182,212,0.8)',\n                                    '0 0 30px rgba(6,182,212,0.6)'\n                                  ]\n                            }\n                          : {}\n                      }\n                      transition={{ duration: 1.5, repeat: Infinity }}\n                    >\n                      <div className=\"flex items-center justify-center gap-2\">\n                        <motion.div\n                          key={isPlaying ? 'pause' : 'play'}\n                          initial={{ scale: 0, rotate: -180 }}\n                          animate={{ scale: 1, rotate: 0 }}\n                          exit={{ scale: 0, rotate: 180 }}\n                          transition={{ type: 'spring', stiffness: 200, damping: 15 }}\n                        >\n                          {isPlaying ? (\n                            <Pause className=\"w-5 h-5\" fill=\"currentColor\" />\n                          ) : (\n                            <Play className=\"w-5 h-5\" fill=\"currentColor\" />\n                          )}\n                        </motion.div>\n                        <span>{isPlaying ? 'Pause' : 'Play'}</span>\n                      </div>\n                    </motion.div>\n                    \n                    {/* Animated background glow */}\n                    {array.length > 0 && (steps.length > 0 || isPlaying) && (\n                      <motion.div\n                        className={`absolute inset-0 rounded-lg blur-xl -z-10 ${\n                          isPlaying\n                            ? 'bg-gradient-to-r from-pink-500 to-purple-500'\n                            : 'bg-gradient-to-r from-cyan-500 to-blue-500'\n                        }`}\n                        animate={{\n                          opacity: [0.3, 0.6, 0.3],\n                          scale: [1, 1.1, 1]\n                        }}\n                        transition={{ duration: 2, repeat: Infinity }}\n                      />\n                    )}\n                  </motion.button></parameter>\n</invoke>\n                  <motion.button\n                    onClick={resetVisualization}\n                    className=\"flex-1 relative overflow-hidden group bg-gradient-to-r from-pink-500/20 to-purple-500/20 border-2 border-pink-500/50 rounded-lg px-6 py-3 hover:border-pink-400 transition-all duration-300 shadow-lg shadow-pink-500/30 hover:shadow-pink-500/60 hover:shadow-xl\"\n                    whileHover={{ scale: 1.05 }}\n                    whileTap={{ scale: 0.95, rotate: 360 }}\n                    transition={{ type: \"spring\", stiffness: 400, damping: 17 }}\n                  >\n                    <motion.div\n                      className=\"absolute inset-0 bg-gradient-to-r from-pink-500/0 via-pink-500/30 to-pink-500/0\"\n                      animate={{ x: ['-100%', '100%'] }}\n                      transition={{ duration: 2, repeat: Infinity, ease: \"linear\" }}\n                    />\n                    <div className=\"relative z-10 flex items-center justify-center gap-2\">\n                      <motion.div\n                        whileHover={{ rotate: 360 }}\n                        transition={{ duration: 0.6, ease: \"easeInOut\" }}\n                      >\n                        <RotateCcw className=\"w-5 h-5 text-pink-300\" />\n                      </motion.div>\n                      <span className=\"font-semibold text-white\">Reset</span>\n                    </div>\n                    <motion.div\n                      className=\"absolute inset-0 rounded-lg opacity-0 group-hover:opacity-100 transition-opacity duration-300\"\n                      style={{\n                        boxShadow: '0 0 20px rgba(236, 72, 153, 0.6), inset 0 0 20px rgba(236, 72, 153, 0.2)'\n                      }}\n                    />\n                  </motion.button>\n                </div>\n              </div>\n            </div>\n\n            <motion.div\n              initial={{ opacity: 0, x: -50 }}\n              animate={{ opacity: 1, x: 0 }}\n              transition={{ delay: 0.2 }}\n              className=\"bg-gray-900/50 backdrop-blur-lg border border-purple-500/30 rounded-xl p-6 shadow-[0_0_30px_rgba(168,85,247,0.3)] hover:shadow-[0_0_50px_rgba(168,85,247,0.5)] transition-all duration-300\"\n            >\n              <div className=\"space-y-4\">\n                <div className=\"flex items-center gap-2 text-purple-400 mb-4\">\n                  <BarChart3 className=\"w-5 h-5\" />\n                  <h3 className=\"text-sm font-semibold uppercase tracking-wider\">Statistics</h3>\n                </div>\n\n                <div className=\"grid grid-cols-1 gap-4\">\n                  {/* Comparisons Counter */}\n                  <motion.div\n                    className=\"relative overflow-hidden rounded-lg bg-gradient-to-br from-cyan-500/10 to-cyan-500/5 border border-cyan-400/30 p-4\"\n                    whileHover={{ scale: 1.02 }}\n                    transition={{ type: 'spring', stiffness: 300 }}\n                  >\n                    <motion.div\n                      className=\"absolute inset-0 bg-gradient-to-r from-transparent via-cyan-400/10 to-transparent\"\n                      animate={{ x: ['-100%', '100%'] }}\n                      transition={{ duration: 3, repeat: Infinity, ease: 'linear' }}\n                    />\n                    <div className=\"relative z-10\">\n                      <div className=\"text-xs text-cyan-300 uppercase tracking-wider mb-2\">Comparisons</div>\n                      <motion.div\n                        key={comparisons}\n                        initial={{ scale: 1.5, opacity: 0 }}\n                        animate={{ scale: 1, opacity: 1 }}\n                        className=\"text-3xl font-bold text-white\"\n                      >\n                        {comparisons}\n                      </motion.div>\n                    </div>\n                    <div className=\"absolute top-2 right-2\">\n                      <motion.div\n                        className=\"w-2 h-2 bg-cyan-400 rounded-full\"\n                        animate={{\n                          boxShadow: [\n                            '0 0 5px rgba(34,211,238,0.5)',\n                            '0 0 20px rgba(34,211,238,1)',\n                            '0 0 5px rgba(34,211,238,0.5)'\n                          ]\n                        }}\n                        transition={{ duration: 2, repeat: Infinity }}\n                      />\n                    </div>\n                  </motion.div>\n\n                  {/* Swaps Counter */}\n                  <motion.div\n                    className=\"relative overflow-hidden rounded-lg bg-gradient-to-br from-pink-500/10 to-pink-500/5 border border-pink-400/30 p-4\"\n                    whileHover={{ scale: 1.02 }}\n                    transition={{ type: 'spring', stiffness: 300 }}\n                  >\n                    <motion.div\n                      className=\"absolute inset-0 bg-gradient-to-r from-transparent via-pink-400/10 to-transparent\"\n                      animate={{ x: ['-100%', '100%'] }}\n                      transition={{ duration: 3, repeat: Infinity, ease: 'linear', delay: 1.5 }}\n                    />\n                    <div className=\"relative z-10\">\n                      <div className=\"text-xs text-pink-300 uppercase tracking-wider mb-2\">Swaps</div>\n                      <motion.div\n                        key={swaps}\n                        initial={{ scale: 1.5, opacity: 0 }}\n                        animate={{ scale: 1, opacity: 1 }}\n                        className=\"text-3xl font-bold text-white\"\n                      >\n                        {swaps}\n                      </motion.div>\n                    </div>\n                    <div className=\"absolute top-2 right-2\">\n                      <motion.div\n                        className=\"w-2 h-2 bg-pink-400 rounded-full\"\n                        animate={{\n                          boxShadow: [\n                            '0 0 5px rgba(244,114,182,0.5)',\n                            '0 0 20px rgba(244,114,182,1)',\n                            '0 0 5px rgba(244,114,182,0.5)'\n                          ]\n                        }}\n                        transition={{ duration: 2, repeat: Infinity, delay: 1 }}\n                      />\n                    </div>\n                  </motion.div>\n\n                  {/* Progress Indicator */}\n                  <motion.div\n                    className=\"relative overflow-hidden rounded-lg bg-gradient-to-br from-purple-500/10 to-purple-500/5 border border-purple-400/30 p-4\"\n                    whileHover={{ scale: 1.02 }}\n                    transition={{ type: 'spring', stiffness: 300 }}\n                  >\n                    <div className=\"relative z-10\">\n                      <div className=\"flex items-center justify-between mb-3\">\n                        <div className=\"text-xs text-purple-300 uppercase tracking-wider\">Progress</div>\n                        <motion.div\n                          key={steps.length > 0 ? Math.round((currentStep / steps.length) * 100) : 0}\n                          initial={{ scale: 1.3, opacity: 0 }}\n                          animate={{ scale: 1, opacity: 1 }}\n                          className=\"text-lg font-bold text-white\"\n                        >\n                          {steps.length > 0 ? Math.round((currentStep / steps.length) * 100) : 0}%\n                        </motion.div>\n                      </div>\n                      <div className=\"relative h-3 bg-gray-800/50 rounded-full overflow-hidden border border-purple-400/20\">\n                        <motion.div\n                          className=\"absolute inset-y-0 left-0 bg-gradient-to-r from-purple-500 via-pink-500 to-cyan-500 rounded-full\"\n                          initial={{ width: 0 }}\n                          animate={{\n                            width: steps.length > 0 ? `${(currentStep / steps.length) * 100}%` : '0%'\n                          }}\n                          transition={{ duration: 0.3, ease: 'easeOut' }}\n                        >\n                          <motion.div\n                            className=\"absolute inset-0 bg-gradient-to-r from-transparent via-white/30 to-transparent\"\n                            animate={{ x: ['-100%', '100%'] }}\n                            transition={{ duration: 1.5, repeat: Infinity, ease: 'linear' }}\n                          />\n                        </motion.div>\n                      </div>\n                      <div className=\"flex items-center justify-between mt-2 text-xs text-gray-400\">\n                        <span>Step {currentStep}</span>\n                        <span>of {steps.length}</span>\n                      </div>\n                    </div>\n                  </motion.div>\n\n                  {/* Algorithm Status */}\n                  <motion.div\n                    className=\"relative overflow-hidden rounded-lg bg-gradient-to-br from-green-500/10 to-green-500/5 border border-green-400/30 p-4\"\n                    whileHover={{ scale: 1.02 }}\n                    transition={{ type: 'spring', stiffness: 300 }}\n                  >\n                    <div className=\"relative z-10\">\n                      <div className=\"text-xs text-green-300 uppercase tracking-wider mb-2\">Status</div>\n                      <div className=\"flex items-center gap-2\">\n                        <motion.div\n                          className=\"w-3 h-3 rounded-full\"\n                          animate={{\n                            backgroundColor: isPlaying\n                              ? ['#10b981', '#34d399', '#10b981']\n                              : steps.length > 0 && currentStep === steps.length\n                              ? '#10b981'\n                              : '#6b7280',\n                            boxShadow: isPlaying\n                              ? [\n                                  '0 0 5px rgba(16,185,129,0.5)',\n                                  '0 0 15px rgba(16,185,129,1)',\n                                  '0 0 5px rgba(16,185,129,0.5)'\n                                ]\n                              : '0 0 0px rgba(16,185,129,0)'\n                          }}\n                          transition={{ duration: 1.5, repeat: isPlaying ? Infinity : 0 }}\n                        />\n                        <span className=\"text-sm font-medium text-white\">\n                          {isPlaying\n                            ? 'Running...'\n                            : steps.length > 0 && currentStep === steps.length\n                            ? 'Completed'\n                            : array.length > 0\n                            ? 'Ready'\n                            : 'Generate Array'}\n                        </span>\n                      </div>\n                    </div>\n                  </motion.div>\n                </div>\n              </div>\n            </motion.div>\n          </div>\n\n          <div className=\"lg:col-span-3\">\n            <div className=\"bg-gray-900/50 backdrop-blur-lg border border-purple-500/30 rounded-xl p-8 shadow-2xl shadow-purple-500/20 min-h-[600px]\">\n                            {array.length === 0 ? (\n                <motion.div\n                  initial={{ opacity: 0, scale: 0.8 }}\n                  animate={{ opacity: 1, scale: 1 }}\n                  className=\"absolute inset-0 flex flex-col items-center justify-center gap-6\"\n                >\n                  <motion.div\n                    animate={{\n                      boxShadow: [\n                        '0 0 20px rgba(0, 255, 255, 0.3)',\n                        '0 0 40px rgba(255, 0, 255, 0.5)',\n                        '0 0 20px rgba(0, 255, 255, 0.3)'\n                      ]\n                    }}\n                    transition={{ duration: 2, repeat: Infinity }}\n                    className=\"p-8 rounded-full bg-gradient-to-br from-cyan-500/20 to-purple-500/20 border border-cyan-400/50\"\n                  >\n                    <BarChart3 className=\"w-16 h-16 text-cyan-400\" />\n                  </motion.div>\n                  <div className=\"text-center space-y-2\">\n                    <h3 className=\"text-2xl font-bold text-white\">Ready to Visualize</h3>\n                    <p className=\"text-gray-400\">Generate an array to begin sorting</p>\n                  </div>\n                </motion.div>\n              ) : (\n                <div className=\"relative w-full h-full flex items-end justify-center gap-1 px-4\">\n                  {/* Comparison Indicators */}\n                  {steps[currentStep]?.comparingIndices.map((index, i) => {\n                    const barWidth = 100 / array.length;\n                    const leftPosition = index * barWidth;\n                    \n                    return (\n                      <motion.div\n                        key={`compare-${index}-${i}`}\n                        initial={{ opacity: 0, y: -20 }}\n                        animate={{ opacity: 1, y: 0 }}\n                        exit={{ opacity: 0 }}\n                        className=\"absolute top-0 pointer-events-none\"\n                        style={{\n                          left: `${leftPosition}%`,\n                          width: `${barWidth}%`\n                        }}\n                      >\n                        <motion.div\n                          animate={{\n                            y: [0, -10, 0],\n                            opacity: [0.5, 1, 0.5]\n                          }}\n                          transition={{ duration: 0.8, repeat: Infinity }}\n                          className=\"w-full flex justify-center\"\n                        >\n                          <div className=\"w-8 h-8 rounded-full bg-yellow-400 shadow-[0_0_30px_rgba(250,204,21,0.8)] flex items-center justify-center\">\n                            <div className=\"w-4 h-4 rounded-full bg-yellow-200 animate-pulse\" />\n                          </div>\n                        </motion.div>\n                        <motion.div\n                          className=\"absolute top-8 left-1/2 -translate-x-1/2 w-0.5 bg-gradient-to-b from-yellow-400 to-transparent\"\n                          animate={{\n                            height: ['0%', '100%'],\n                            opacity: [1, 0.3]\n                          }}\n                          transition={{ duration: 0.5, repeat: Infinity }}\n                          style={{ height: '100%' }}\n                        />\n                      </motion.div>\n                    );\n                  })}\n\n                  {/* Swap Trail Effects */}\n                  {steps[currentStep]?.swappingIndices.map((index, i) => {\n                    const barWidth = 100 / array.length;\n                    const leftPosition = index * barWidth;\n                    \n                    return (\n                      <motion.div\n                        key={`swap-${index}-${i}`}\n                        initial={{ opacity: 0, scale: 0 }}\n                        animate={{ opacity: [0, 1, 0], scale: [0.5, 2, 0.5] }}\n                        transition={{ duration: 0.6, repeat: Infinity }}\n                        className=\"absolute top-1/2 -translate-y-1/2 pointer-events-none\"\n                        style={{\n                          left: `${leftPosition}%`,\n                          width: `${barWidth}%`\n                        }}\n                      >\n                        <div className=\"w-full flex justify-center\">\n                          <motion.div\n                            className=\"w-12 h-12 rounded-full bg-gradient-to-r from-pink-500 to-purple-500\"\n                            style={{\n                              boxShadow: '0 0 40px rgba(236, 72, 153, 0.8), 0 0 60px rgba(168, 85, 247, 0.6)'\n                            }}\n                            animate={{\n                              rotate: [0, 360]\n                            }}\n                            transition={{ duration: 1, repeat: Infinity, ease: 'linear' }}\n                          />\n                        </div>\n                      </motion.div>\n                    );\n                  })}\n\n                  {/* Animated Bars */}\n                  {(steps[currentStep]?.array || array).map((element, index) => {\n                    const isComparing = steps[currentStep]?.comparingIndices.includes(index);\n                    const isSwapping = steps[currentStep]?.swappingIndices.includes(index);\n                    const isSorted = steps[currentStep]?.sortedIndices.includes(index);\n                    \n                    const maxValue = Math.max(...array.map(el => el.value));\n                    const heightPercentage = (element.value / maxValue) * 100;\n                    \n                    let barColor = NEON_COLORS[index % NEON_COLORS.length];\n                    let shadowColor = barColor;\n                    let glowIntensity = 0.5;\n                    \n                    if (isSorted) {\n                      barColor = '#00ff00';\n                      shadowColor = '#00ff00';\n                      glowIntensity = 0.8;\n                    } else if (isSwapping) {\n                      barColor = '#ff00ff';\n                      shadowColor = '#ff00ff';\n                      glowIntensity = 1;\n                    } else if (isComparing) {\n                      barColor = '#ffff00';\n                      shadowColor = '#ffff00';\n                      glowIntensity = 0.9;\n                    }\n                    \n                    return (\n                      <motion.div\n                        key={element.id}\n                        layout\n                        initial={{ height: 0, opacity: 0 }}\n                        animate={{\n                          height: `${heightPercentage}%`,\n                          opacity: 1,\n                          y: isSwapping ? [-20, 0] : 0,\n                          scale: isComparing ? [1, 1.1, 1] : 1\n                        }}\n                        transition={{\n                          height: { duration: 0.5, ease: 'easeOut' },\n                          opacity: { duration: 0.3 },\n                          y: { duration: 0.4, ease: 'easeInOut' },\n                          scale: { duration: 0.3, repeat: isComparing ? Infinity : 0 },\n                          layout: { duration: 0.5, ease: 'easeInOut' }\n                        }}\n                        className=\"relative flex-1 min-w-[4px] rounded-t-lg transition-all duration-300\"\n                        style={{\n                          backgroundColor: barColor,\n                          boxShadow: `\n                            0 0 ${20 * glowIntensity}px ${shadowColor},\n                            0 0 ${40 * glowIntensity}px ${shadowColor},\n                            inset 0 0 ${10 * glowIntensity}px rgba(255, 255, 255, 0.3)\n                          `,\n                          border: `1px solid ${barColor}`\n                        }}\n                      >\n                        {/* Value Label */}\n                        {array.length <= 30 && (\n                          <motion.div\n                            initial={{ opacity: 0 }}\n                            animate={{ opacity: 1 }}\n                            className=\"absolute -top-6 left-1/2 -translate-x-1/2 text-xs font-bold text-white whitespace-nowrap\"\n                            style={{\n                              textShadow: `0 0 10px ${shadowColor}`\n                            }}\n                          >\n                            {element.value}\n                          </motion.div>\n                        )}\n                        \n                        {/* Glow Effect Overlay */}\n                        <motion.div\n                          className=\"absolute inset-0 rounded-t-lg\"\n                          animate={{\n                            background: [\n                              `linear-gradient(to top, transparent, ${barColor}40)`,\n                              `linear-gradient(to top, transparent, ${barColor}80)`,\n                              `linear-gradient(to top, transparent, ${barColor}40)`\n                            ]\n                          }}\n                          transition={{ duration: 1.5, repeat: Infinity }}\n                        />\n                        \n                        {/* Particle Effect for Sorted Bars */}\n                        {isSorted && (\n                          <>\n                            {[...Array(3)].map((_, i) => (\n                              <motion.div\n                                key={`particle-${i}`}\n                                initial={{ y: 0, opacity: 1, scale: 1 }}\n                                animate={{\n                                  y: [-50, -100],\n                                  opacity: [1, 0],\n                                  scale: [1, 0],\n                                  x: [0, (Math.random() - 0.5) * 30]\n                                }}\n                                transition={{\n                                  duration: 1.5,\n                                  repeat: Infinity,\n                                  delay: i * 0.3,\n                                  ease: 'easeOut'\n                                }}\n                                className=\"absolute bottom-0 left-1/2 w-2 h-2 rounded-full bg-green-400\"\n                                style={{\n                                  boxShadow: '0 0 10px rgba(0, 255, 0, 0.8)'\n                                }}\n                              />\n                            ))}\n                          </>\n                        )}\n                        \n                        {/* Swap Trail Effect */}\n                        {isSwapping && (\n                          <motion.div\n                            className=\"absolute inset-0 rounded-t-lg\"\n                            initial={{ opacity: 0 }}\n                            animate={{\n                              opacity: [0, 0.8, 0],\n                              scale: [1, 1.2, 1]\n                            }}\n                            transition={{ duration: 0.5, repeat: Infinity }}\n                            style={{\n                              background: `radial-gradient(circle, ${barColor}80, transparent)`,\n                              filter: 'blur(8px)'\n                            }}\n                          />\n                        )}\n                      </motion.div>\n                    );\n                  })}\n                </div>\n              )}\n              \n              <div className=\"relative h-full flex items-end justify-center gap-1\">\n                {array.length === 0 ? (\n                  <motion.div\n                    initial={{ opacity: 0, scale: 0.8 }}\n                    animate={{ opacity: 1, scale: 1 }}\n                    className=\"absolute inset-0 flex items-center justify-center\"\n                  >\n                    <div className=\"text-center space-y-4\">\n                      <motion.div\n                        animate={{\n                          rotate: [0, 360],\n                          scale: [1, 1.2, 1]\n                        }}\n                        transition={{ duration: 3, repeat: Infinity }}\n                        className=\"w-20 h-20 mx-auto rounded-full bg-gradient-to-r from-cyan-500 via-purple-500 to-pink-500 opacity-50 blur-xl\"\n                      />\n                      <p className=\"text-gray-400 text-lg\">Generate an array to begin</p>\n                    </div>\n                  </motion.div>\n                ) : (\n                  array.map((element, index) => {\n                    const step = steps[currentStep];\n                    const isComparing = step?.comparingIndices.includes(index);\n                    const isSwapping = step?.swappingIndices.includes(index);\n                    const isSorted = step?.sortedIndices.includes(index);\n                    \n                    const maxValue = Math.max(...array.map(el => el.value));\n                    const heightPercentage = (element.value / maxValue) * 100;\n                    \n                    let barColor = NEON_COLORS[index % NEON_COLORS.length];\n                    let glowColor = barColor;\n                    let glowIntensity = 0.3;\n                    \n                    if (isSorted) {\n                      barColor = '#00ff00';\n                      glowColor = '#00ff00';\n                      glowIntensity = 0.8;\n                    } else if (isSwapping) {\n                      barColor = '#ff0066';\n                      glowColor = '#ff0066';\n                      glowIntensity = 1;\n                    } else if (isComparing) {\n                      barColor = '#ffff00';\n                      glowColor = '#ffff00';\n                      glowIntensity = 0.7;\n                    }\n                    \n                    return (\n                      <motion.div\n                        key={element.id}\n                        layout\n                        initial={{ opacity: 0, scale: 0, y: 50 }}\n                        animate={{\n                          opacity: 1,\n                          scale: 1,\n                          y: 0,\n                          height: `${heightPercentage}%`\n                        }}\n                        transition={{\n                          height: { duration: 0.3, ease: 'easeInOut' },\n                          layout: { duration: 0.5, ease: 'easeInOut' },\n                          opacity: { duration: 0.3 },\n                          scale: { duration: 0.3 }\n                        }}\n                        className=\"relative flex-1 min-w-[4px] max-w-[60px] rounded-t-lg\"\n                        style={{\n                          backgroundColor: barColor,\n                          boxShadow: `\n                            0 0 ${glowIntensity * 20}px ${glowColor},\n                            0 0 ${glowIntensity * 40}px ${glowColor},\n                            inset 0 0 ${glowIntensity * 10}px rgba(255, 255, 255, 0.5)\n                          `,\n                          border: `1px solid ${barColor}`,\n                          filter: `brightness(${isSwapping ? 1.5 : isComparing ? 1.3 : isSorted ? 1.2 : 1})`\n                        }}\n                      >\n                        {/* Animated glow pulse for active states */}\n                        {(isComparing || isSwapping) && (\n                          <motion.div\n                            className=\"absolute inset-0 rounded-t-lg\"\n                            animate={{\n                              opacity: [0.5, 1, 0.5],\n                              scale: [1, 1.05, 1]\n                            }}\n                            transition={{\n                              duration: 0.6,\n                              repeat: Infinity,\n                              ease: 'easeInOut'\n                            }}\n                            style={{\n                              backgroundColor: barColor,\n                              filter: 'blur(4px)'\n                            }}\n                          />\n                        )}\n                        \n                        {/* Sorted celebration effect */}\n                        {isSorted && (\n                          <motion.div\n                            initial={{ opacity: 0, y: -20 }}\n                            animate={{ opacity: [0, 1, 0], y: -40 }}\n                            transition={{ duration: 0.8 }}\n                            className=\"absolute -top-10 left-1/2 transform -translate-x-1/2\"\n                          >\n                            <div className=\"w-2 h-2 rounded-full bg-green-400 shadow-lg shadow-green-400/80\" />\n                          </motion.div>\n                        )}\n                        \n                        {/* Swap trail effect */}\n                        {isSwapping && (\n                          <>\n                            <motion.div\n                              className=\"absolute inset-0 rounded-t-lg\"\n                              initial={{ opacity: 0 }}\n                              animate={{ opacity: [0, 0.8, 0] }}\n                              transition={{ duration: 0.5 }}\n                              style={{\n                                background: `linear-gradient(to top, ${barColor}, transparent)`,\n                                filter: 'blur(8px)'\n                              }}\n                            />\n                            <motion.div\n                              className=\"absolute -top-2 left-1/2 transform -translate-x-1/2\"\n                              animate={{\n                                y: [-10, -30, -10],\n                                opacity: [0, 1, 0]\n                              }}\n                              transition={{\n                                duration: 0.8,\n                                repeat: Infinity\n                              }}\n                            >\n                              <div \n                                className=\"w-1 h-8 rounded-full\"\n                                style={{\n                                  backgroundColor: barColor,\n                                  boxShadow: `0 0 10px ${barColor}`\n                                }}\n                              />\n                            </motion.div>\n                          </>\n                        )}\n                        \n                        {/* Value label for larger arrays */}\n                        {array.length <= 30 && (\n                          <motion.div\n                            initial={{ opacity: 0 }}\n                            animate={{ opacity: 1 }}\n                            transition={{ delay: 0.2 }}\n                            className=\"absolute -bottom-6 left-1/2 transform -translate-x-1/2 text-xs font-mono text-gray-400 whitespace-nowrap\"\n                          >\n                            {element.value}\n                          </motion.div>\n                        )}\n                        \n                        {/* Shimmer effect on bars */}\n                        <motion.div\n                          className=\"absolute inset-0 rounded-t-lg overflow-hidden\"\n                          initial={{ x: '-100%' }}\n                          animate={{ x: '200%' }}\n                          transition={{\n                            duration: 2,\n                            repeat: Infinity,\n                            repeatDelay: 1,\n                            ease: 'easeInOut'\n                          }}\n                          style={{\n                            background: 'linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.3), transparent)',\n                            width: '50%'\n                          }}\n                        />\n                      </motion.div>\n                    );\n                  })\n                )}</parameter>\n</invoke>\n              </div>\n            </div>\n\n                        <motion.div\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ delay: 0.3, duration: 0.5 }}\n              className=\"mt-6 space-y-3\"\n            >\n              <div className=\"flex items-center justify-between text-sm\">\n                <span className=\"text-purple-400 font-semibold uppercase tracking-wider flex items-center gap-2\">\n                  <BarChart3 className=\"w-4 h-4\" />\n                  Sorting Progress\n                </span>\n                <motion.span\n                  key={currentStep}\n                  initial={{ scale: 1.2, color: '#a855f7' }}\n                  animate={{ scale: 1, color: '#c084fc' }}\n                  className=\"text-purple-300 font-bold text-lg\"\n                >\n                  {steps.length > 0 ? Math.round((currentStep / (steps.length - 1)) * 100) : 0}%\n                </motion.span>\n              </div>\n              \n              <div className=\"relative h-4 bg-gray-800/50 rounded-full border border-purple-500/30 overflow-hidden shadow-inner\">\n                <motion.div\n                  className=\"absolute inset-y-0 left-0 bg-gradient-to-r from-cyan-500 via-purple-500 to-pink-500 rounded-full\"\n                  initial={{ width: '0%' }}\n                  animate={{\n                    width: steps.length > 0 ? `${(currentStep / (steps.length - 1)) * 100}%` : '0%',\n                    boxShadow: [\n                      '0 0 20px rgba(168,85,247,0.6)',\n                      '0 0 30px rgba(168,85,247,0.8)',\n                      '0 0 20px rgba(168,85,247,0.6)'\n                    ]\n                  }}\n                  transition={{\n                    width: { duration: 0.3, ease: 'easeOut' },\n                    boxShadow: { duration: 1.5, repeat: Infinity }\n                  }}\n                >\n                  <motion.div\n                    className=\"absolute inset-0 bg-gradient-to-r from-transparent via-white/30 to-transparent\"\n                    animate={{ x: ['-100%', '200%'] }}\n                    transition={{ duration: 1.5, repeat: Infinity, ease: 'linear' }}\n                  />\n                </motion.div>\n                \n                {currentStep === steps.length - 1 && steps.length > 0 && (\n                  <motion.div\n                    initial={{ scale: 0 }}\n                    animate={{ scale: [1, 1.2, 1] }}\n                    transition={{ duration: 0.5, repeat: Infinity }}\n                    className=\"absolute inset-0 bg-gradient-to-r from-green-400 to-emerald-500 rounded-full shadow-[0_0_30px_rgba(34,197,94,0.8)]\"\n                  >\n                    <motion.div\n                      className=\"absolute inset-0 bg-gradient-to-r from-transparent via-white/40 to-transparent\"\n                      animate={{ x: ['-100%', '200%'] }}\n                      transition={{ duration: 1, repeat: Infinity, ease: 'linear' }}\n                    />\n                  </motion.div>\n                )}\n              </div>\n              \n              <div className=\"flex justify-between text-xs text-gray-500\">\n                <span>Step {currentStep} / {steps.length > 0 ? steps.length - 1 : 0}</span>\n                {currentStep === steps.length - 1 && steps.length > 0 && (\n                  <motion.span\n                    initial={{ opacity: 0, x: 10 }}\n                    animate={{ opacity: 1, x: 0 }}\n                    className=\"text-green-400 font-semibold\"\n                  >\n                    \u2713 Complete\n                  </motion.span>\n                )}\n              </div>\n            </motion.div>\n          </div>\n        </div>\n\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ delay: 0.6, duration: 0.8 }}\n          className=\"bg-gray-900/50 backdrop-blur-lg border border-cyan-500/30 rounded-xl p-6 shadow-[0_0_30px_rgba(0,255,255,0.2)]\"\n        >\n          <div className=\"flex items-center gap-2 mb-4\">\n            <BarChart3 className=\"w-5 h-5 text-cyan-400\" />\n            <h3 className=\"text-lg font-semibold text-cyan-400 uppercase tracking-wider\">\n              Legend\n            </h3>\n          </div>\n          \n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n            {/* Default State */}\n            <motion.div\n              className=\"flex items-center gap-3 p-3 rounded-lg bg-gray-800/50 border border-gray-700/50 hover:border-cyan-500/50 transition-all duration-300\"\n              whileHover={{ scale: 1.05 }}\n            >\n              <motion.div\n                className=\"w-6 h-12 rounded bg-gradient-to-t from-cyan-500 to-cyan-300 shadow-[0_0_15px_rgba(0,255,255,0.6)]\"\n                animate={{\n                  boxShadow: [\n                    '0 0 15px rgba(0,255,255,0.6)',\n                    '0 0 25px rgba(0,255,255,0.8)',\n                    '0 0 15px rgba(0,255,255,0.6)'\n                  ]\n                }}\n                transition={{ duration: 2, repeat: Infinity }}\n              />\n              <div>\n                <div className=\"text-sm font-semibold text-white\">Default</div>\n                <div className=\"text-xs text-gray-400\">Unsorted</div>\n              </div>\n            </motion.div>\n\n            {/* Comparing State */}\n            <motion.div\n              className=\"flex items-center gap-3 p-3 rounded-lg bg-gray-800/50 border border-gray-700/50 hover:border-yellow-500/50 transition-all duration-300\"\n              whileHover={{ scale: 1.05 }}\n            >\n              <motion.div\n                className=\"w-6 h-12 rounded bg-gradient-to-t from-yellow-500 to-yellow-300 shadow-[0_0_20px_rgba(255,255,0,0.8)]\"\n                animate={{\n                  boxShadow: [\n                    '0 0 20px rgba(255,255,0,0.8)',\n                    '0 0 35px rgba(255,255,0,1)',\n                    '0 0 20px rgba(255,255,0,0.8)'\n                  ],\n                  scale: [1, 1.1, 1]\n                }}\n                transition={{ duration: 1, repeat: Infinity }}\n              />\n              <div>\n                <div className=\"text-sm font-semibold text-white\">Comparing</div>\n                <div className=\"text-xs text-gray-400\">Active</div>\n              </div>\n            </motion.div>\n\n            {/* Swapping State */}\n            <motion.div\n              className=\"flex items-center gap-3 p-3 rounded-lg bg-gray-800/50 border border-gray-700/50 hover:border-pink-500/50 transition-all duration-300\"\n              whileHover={{ scale: 1.05 }}\n            >\n              <motion.div\n                className=\"w-6 h-12 rounded bg-gradient-to-t from-pink-500 to-pink-300 shadow-[0_0_20px_rgba(236,72,153,0.8)]\"\n                animate={{\n                  boxShadow: [\n                    '0 0 20px rgba(236,72,153,0.8)',\n                    '0 0 35px rgba(236,72,153,1)',\n                    '0 0 20px rgba(236,72,153,0.8)'\n                  ],\n                  x: [-2, 2, -2]\n                }}\n                transition={{ duration: 0.8, repeat: Infinity }}\n              />\n              <div>\n                <div className=\"text-sm font-semibold text-white\">Swapping</div>\n                <div className=\"text-xs text-gray-400\">Moving</div>\n              </div>\n            </motion.div>\n\n            {/* Sorted State */}\n            <motion.div\n              className=\"flex items-center gap-3 p-3 rounded-lg bg-gray-800/50 border border-gray-700/50 hover:border-green-500/50 transition-all duration-300\"\n              whileHover={{ scale: 1.05 }}\n            >\n              <motion.div\n                className=\"w-6 h-12 rounded bg-gradient-to-t from-green-500 to-green-300 shadow-[0_0_20px_rgba(0,255,0,0.8)]\"\n                animate={{\n                  boxShadow: [\n                    '0 0 20px rgba(0,255,0,0.8)',\n                    '0 0 30px rgba(0,255,0,1)',\n                    '0 0 20px rgba(0,255,0,0.8)'\n                  ]\n                }}\n                transition={{ duration: 2, repeat: Infinity }}\n              />\n              <div>\n                <div className=\"text-sm font-semibold text-white\">Sorted</div>\n                <div className=\"text-xs text-gray-400\">Complete</div>\n              </div>\n            </motion.div>\n          </div>\n\n          {/* Additional Info */}\n          <motion.div\n            className=\"mt-4 pt-4 border-t border-gray-700/50\"\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            transition={{ delay: 1 }}\n          >\n            <div className=\"flex items-center justify-center gap-6 text-xs text-gray-400\">\n              <div className=\"flex items-center gap-2\">\n                <motion.div\n                  className=\"w-2 h-2 rounded-full bg-cyan-400\"\n                  animate={{\n                    boxShadow: [\n                      '0 0 5px rgba(0,255,255,0.8)',\n                      '0 0 15px rgba(0,255,255,1)',\n                      '0 0 5px rgba(0,255,255,0.8)'\n                    ]\n                  }}\n                  transition={{ duration: 1.5, repeat: Infinity }}\n                />\n                <span>Glowing effects indicate active operations</span>\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <motion.div\n                  className=\"w-2 h-2 rounded-full bg-purple-400\"\n                  animate={{\n                    scale: [1, 1.3, 1]\n                  }}\n                  transition={{ duration: 1.5, repeat: Infinity }}\n                />\n                <span>Animations show real-time algorithm progress</span>\n              </div>\n            </div>\n          </motion.div>\n        </motion.div>\n      </div>\n    </div>\n  );\n}",
  "error": null,
  "overall_score": 47,
  "code_quality_score": 14,
  "architecture_score": 12,
  "performance_score": 10,
  "accessibility_score": 11,
  "metadata": {
    "document_id": "eval_room_26d91571e824",
    "prompt_category": "creative",
    "prompt_complexity": 9.0
  },
  "raw_response": {
    "document_id": "eval_room_26d91571e824",
    "mode": "parallel",
    "prompt": "Build a captivating algorithm visualizer with neon colored bars, smooth height transitions, glowing comparison indicators, trail effects during swaps, and a futuristic dashboard design with animated controls",
    "content": "import { useState, useCallback } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Slider } from '@/components/ui/slider';\nimport { Play, Pause, RotateCcw, Zap, BarChart3 } from 'lucide-react';\nimport { motion } from 'framer-motion';\n\ninterface ArrayElement {\n  value: number;\n  id: string;\n  isComparing?: boolean;\n  isSwapping?: boolean;\n  isSorted?: boolean;\n}\n\ninterface AlgorithmStep {\n  array: ArrayElement[];\n  comparingIndices: number[];\n  swappingIndices: number[];\n  sortedIndices: number[];\n}\n\ntype AlgorithmType = 'bubble' | 'quick' | 'merge' | 'insertion';\n\nconst NEON_COLORS = [\n  '#00ffff',\n  '#ff00ff', \n  '#00ff00',\n  '#ffff00',\n  '#ff0066',\n  '#00ffaa'\n];\n\nconst mockAlgorithms = [\n  { id: 'bubble', name: 'Bubble Sort', complexity: 'O(n\u00b2)' },\n  { id: 'quick', name: 'Quick Sort', complexity: 'O(n log n)' },\n  { id: 'merge', name: 'Merge Sort', complexity: 'O(n log n)' },\n  { id: 'insertion', name: 'Insertion Sort', complexity: 'O(n\u00b2)' }\n];\n\nconst useAnimationLoop = (\n  steps: AlgorithmStep[],\n  currentStep: number,\n  speed: number[],\n  isPlaying: boolean,\n  onStepChange: (step: number) => void,\n  onComplete: () => void\n) => {\n  const [animationId, setAnimationId] = useState<NodeJS.Timeout | null>(null);\n\n  const cleanup = useCallback(() => {\n    if (animationId) {\n      clearTimeout(animationId);\n      setAnimationId(null);\n    }\n  }, [animationId]);\n\n  const animate = useCallback(() => {\n    if (currentStep < steps.length - 1) {\n      const delay = 1000 - speed[0] * 9.5;\n      const id = setTimeout(() => {\n        onStepChange(currentStep + 1);\n      }, delay);\n      setAnimationId(id);\n    } else {\n      onComplete();\n    }\n  }, [currentStep, steps.length, speed, onStepChange, onComplete]);\n\n  return { animate, cleanup };\n};\nexport default function AlgorithmVisualizer() {\n  const [array, setArray] = useState<ArrayElement[]>([]);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [speed, setSpeed] = useState([50]);\n  const [arraySize, setArraySize] = useState([20]);\n  const [selectedAlgorithm, setSelectedAlgorithm] = useState<AlgorithmType>('bubble');\n  const [currentStep, setCurrentStep] = useState(0);\n  const [steps, setSteps] = useState<AlgorithmStep[]>([]);\n  const [comparisons, setComparisons] = useState(0);\n  const [swaps, setSwaps] = useState(0);\n\n  const generateRandomArray = useCallback(() => {\n    const newArray: ArrayElement[] = Array.from({ length: arraySize[0] }, (_, index) => ({\n      value: Math.floor(Math.random() * 100) + 5,\n      id: `element-${index}-${Date.now()}`,\n      isComparing: false,\n      isSwapping: false,\n      isSorted: false\n    }));\n    setArray(newArray);\n    setSteps([]);\n    setCurrentStep(0);\n    setIsPlaying(false);\n  }, [arraySize]);\n\n  const resetVisualization = useCallback(() => {\n    setIsPlaying(false);\n    setCurrentStep(0);\n    setSteps([]);\n    generateRandomArray();\n\n    \n  }, [generateRandomArray]);\n\n  const startVisualization = useCallback(() => {\n    if (steps.length === 0) return;\n    if (currentStep >= steps.length - 1) {\n      setCurrentStep(0);\n    }\n    setIsPlaying(true);\n  }, [steps, speed, currentStep]);\n\n  const pauseVisualization = useCallback(() => {\n\n    setIsPlaying(false);\n  }, []);\n\n  const generateSortingSteps = useCallback((algorithm: AlgorithmType) => {\n    const algorithmArray = [...array];\n    const newSteps: AlgorithmStep[] = [];\n\n    const addStep = (arr: ArrayElement[], comparing: number[] = [], swapping: number[] = [], sorted: number[] = []) => {\n      newSteps.push({\n        array: arr.map(el => ({ ...el })),\n        comparingIndices: [...comparing],\n        swappingIndices: [...swapping],\n        sortedIndices: [...sorted]\n      });\n    };\n\n    // Initial state\n    addStep(algorithmArray);\n\n    switch (algorithm) {\n      case 'bubble': {\n        const arr = [...algorithmArray];\n        const sortedIndices: number[] = [];\n        \n        for (let i = 0; i < arr.length - 1; i++) {\n          for (let j = 0; j < arr.length - i - 1; j++) {\n            // Comparing\n            addStep(arr, [j, j + 1], [], sortedIndices);\n            \n            if (arr[j].value > arr[j + 1].value) {\n              // Swapping\n              addStep(arr, [], [j, j + 1], sortedIndices);\n              [arr[j], arr[j + 1]] = [arr[j + 1], arr[j]];\n              addStep(arr, [], [], sortedIndices);\n            }\n          }\n          sortedIndices.push(arr.length - i - 1);\n          addStep(arr, [], [], sortedIndices);\n        }\n        sortedIndices.push(0);\n        addStep(arr, [], [], sortedIndices);\n        break;\n      }\n\n      case 'insertion': {\n        const arr = [...algorithmArray];\n        const sortedIndices: number[] = [0];\n        addStep(arr, [], [], sortedIndices);\n\n        for (let i = 1; i < arr.length; i++) {\n          const key = arr[i];\n          let j = i - 1;\n          \n          addStep(arr, [i], [], sortedIndices);\n          \n          while (j >= 0 && arr[j].value > key.value) {\n            addStep(arr, [j, j + 1], [], sortedIndices);\n            addStep(arr, [], [j, j + 1], sortedIndices);\n            arr[j + 1] = arr[j];\n            addStep(arr, [], [], sortedIndices);\n            j--;\n          }\n          \n          arr[j + 1] = key;\n          sortedIndices.push(i);\n          addStep(arr, [], [], sortedIndices);\n        }\n        break;\n      }\n\n      case 'quick': {\n        const arr = [...algorithmArray];\n        const sortedIndices: number[] = [];\n\n        const partition = (low: number, high: number): number => {\n          const pivot = arr[high].value;\n          let i = low - 1;\n\n          for (let j = low; j < high; j++) {\n            addStep(arr, [j, high], [], sortedIndices);\n            \n            if (arr[j].value < pivot) {\n              i++;\n              addStep(arr, [], [i, j], sortedIndices);\n              [arr[i], arr[j]] = [arr[j], arr[i]];\n              addStep(arr, [], [], sortedIndices);\n            }\n          }\n          \n          addStep(arr, [], [i + 1, high], sortedIndices);\n          [arr[i + 1], arr[high]] = [arr[high], arr[i + 1]];\n          sortedIndices.push(i + 1);\n          addStep(arr, [], [], sortedIndices);\n          \n          return i + 1;\n        };\n\n        const quickSort = (low: number, high: number) => {\n          if (low < high) {\n            const pi = partition(low, high);\n            quickSort(low, pi - 1);\n            quickSort(pi + 1, high);\n          } else if (low === high) {\n            sortedIndices.push(low);\n            addStep(arr, [], [], sortedIndices);\n          }\n        };\n\n        quickSort(0, arr.length - 1);\n        break;\n      }\n\n      case 'merge': {\n        const arr = [...algorithmArray];\n        const sortedIndices: number[] = [];\n\n        const merge = (left: number, mid: number, right: number) => {\n          const leftArr = arr.slice(left, mid + 1);\n          const rightArr = arr.slice(mid + 1, right + 1);\n          \n          let i = 0, j = 0, k = left;\n\n          while (i < leftArr.length && j < rightArr.length) {\n            addStep(arr, [left + i, mid + 1 + j], [], sortedIndices);\n            \n            if (leftArr[i].value <= rightArr[j].value) {\n              arr[k] = leftArr[i];\n              i++;\n            } else {\n              arr[k] = rightArr[j];\n              j++;\n            }\n            addStep(arr, [], [k], sortedIndices);\n            k++;\n          }\n\n          while (i < leftArr.length) {\n            arr[k] = leftArr[i];\n            addStep(arr, [], [k], sortedIndices);\n            i++;\n            k++;\n          }\n\n          while (j < rightArr.length) {\n            arr[k] = rightArr[j];\n            addStep(arr, [], [k], sortedIndices);\n            j++;\n            k++;\n          }\n\n          addStep(arr, [], [], sortedIndices);\n        };\n\n        const mergeSort = (left: number, right: number) => {\n          if (left < right) {\n            const mid = Math.floor((left + right) / 2);\n            mergeSort(left, mid);\n            mergeSort(mid + 1, right);\n            merge(left, mid, right);\n          } else if (left === right) {\n            sortedIndices.push(left);\n            addStep(arr, [], [], sortedIndices);\n          }\n        };\n\n        mergeSort(0, arr.length - 1);\n        \n        // Mark all as sorted at the end\n        for (let i = 0; i < arr.length; i++) {\n          if (!sortedIndices.includes(i)) {\n            sortedIndices.push(i);\n          }\n        }\n        addStep(arr, [], [], sortedIndices);\n        break;\n      }\n    }\n\n    setSteps(newSteps);\n    setCurrentStep(0);\n  }, [array]);\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-gray-900 via-purple-900 to-gray-900 p-8\">\n      <div className=\"max-w-7xl mx-auto space-y-8\">\n        <motion.div\n          initial={{ opacity: 0, y: -20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.8 }}\n          className=\"text-center space-y-4\"\n        >\n          <motion.h1\n            className=\"text-6xl font-bold bg-gradient-to-r from-cyan-400 via-purple-400 to-pink-400 bg-clip-text text-transparent\"\n            animate={{\n              textShadow: [\n                '0 0 20px rgba(0, 255, 255, 0.5)',\n                '0 0 40px rgba(255, 0, 255, 0.5)',\n                '0 0 20px rgba(0, 255, 255, 0.5)'\n              ]\n            }}\n            transition={{ duration: 2, repeat: Infinity }}\n          >\n            Algorithm Visualizer\n          </motion.h1>\n          \n          <div className=\"flex items-center justify-center gap-4\">\n            <motion.div\n              initial={{ scale: 0 }}\n              animate={{ scale: 1 }}\n              transition={{ delay: 0.3, type: 'spring' }}\n              className=\"px-6 py-2 bg-purple-500/20 border border-purple-400/50 rounded-full backdrop-blur-sm\"\n            >\n              <span className=\"text-2xl font-semibold text-purple-300\">\n                {mockAlgorithms.find(a => a.id === selectedAlgorithm)?.name}\n              </span>\n            </motion.div>\n            \n            <motion.div\n              initial={{ scale: 0 }}\n              animate={{ scale: 1 }}\n              transition={{ delay: 0.5, type: 'spring' }}\n              className=\"px-4 py-2 bg-cyan-500/20 border border-cyan-400/50 rounded-full backdrop-blur-sm relative overflow-hidden\"\n            >\n              <motion.div\n                className=\"absolute inset-0 bg-gradient-to-r from-transparent via-cyan-400/20 to-transparent\"\n                animate={{ x: ['-100%', '100%'] }}\n                transition={{ duration: 2, repeat: Infinity }}\n              />\n              <span className=\"text-lg font-mono text-cyan-300 relative z-10\">\n                {mockAlgorithms.find(a => a.id === selectedAlgorithm)?.complexity}\n              </span>\n            </motion.div>\n          </div>\n        </motion.div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-6\">\n          <div className=\"lg:col-span-1 space-y-6\">\n            <motion.div\n              initial={{ opacity: 0, x: -50 }}\n              animate={{ opacity: 1, x: 0 }}\n              className=\"bg-gray-900/50 backdrop-blur-lg border border-cyan-500/30 rounded-xl p-6 shadow-[0_0_30px_rgba(0,255,255,0.3)] hover:shadow-[0_0_50px_rgba(0,255,255,0.5)] transition-all duration-300\"\n            >\n              <div className=\"space-y-6\">\n                {/* Algorithm Selection */}\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center gap-2 text-cyan-400\">\n                    <Zap className=\"w-4 h-4\" />\n                    <h3 className=\"text-sm font-semibold uppercase tracking-wider\">Algorithm</h3>\n                  </div>\n                  <div className=\"grid grid-cols-1 gap-2\">\n                    {mockAlgorithms.map((algo) => (\n                      <button\n                        key={algo.id}\n                        onClick={() => setSelectedAlgorithm(algo.id as AlgorithmType)}\n                        disabled={isPlaying}\n                        className={`p-3 rounded-lg border transition-all duration-300 text-left ${\n                          selectedAlgorithm === algo.id\n                            ? 'bg-cyan-500/20 border-cyan-400 shadow-[0_0_20px_rgba(0,255,255,0.4)]'\n                            : 'bg-gray-800/50 border-gray-700 hover:border-cyan-500/50 hover:bg-gray-800'\n                        } disabled:opacity-50 disabled:cursor-not-allowed`}\n                      >\n                        <div className=\"font-medium text-white\">{algo.name}</div>\n                        <div className=\"text-xs text-gray-400 mt-1\">{algo.complexity}</div>\n                      </button>\n                    ))}\n                  </div>\n                </div>\n\n                {/* Array Size Control */}\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center gap-2 text-purple-400\">\n                    <BarChart3 className=\"w-4 h-4\" />\n                    <h3 className=\"text-sm font-semibold uppercase tracking-wider\">Array Size</h3>\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Slider\n                      value={arraySize}\n                      onValueChange={setArraySize}\n                      min={5}\n                      max={50}\n                      step={1}\n                      disabled={isPlaying}\n                      className=\"cursor-pointer\"\n                    />\n                    <div className=\"text-center\">\n                      <span className=\"text-2xl font-bold text-white bg-purple-500/20 px-4 py-1 rounded-lg border border-purple-400/30 shadow-[0_0_15px_rgba(168,85,247,0.3)]\">\n                        {arraySize[0]}\n                      </span>\n                    </div>\n                  </div>\n                </div>\n\n                {/* Speed Control */}\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center gap-2 text-pink-400\">\n                    <Zap className=\"w-4 h-4\" />\n                    <h3 className=\"text-sm font-semibold uppercase tracking-wider\">Speed</h3>\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Slider\n                      value={speed}\n                      onValueChange={setSpeed}\n                      min={10}\n                      max={100}\n                      step={10}\n                      className=\"cursor-pointer\"\n                    />\n                    <div className=\"flex justify-between text-xs text-gray-400\">\n                      <span>Slow</span>\n                      <span className=\"text-pink-400 font-semibold\">{speed[0]}%</span>\n                      <span>Fast</span>\n                    </div>\n                  </div>\n                </div>\n\n                {/* Control Buttons */}\n                <div className=\"space-y-2 pt-4 border-t border-gray-700/50\">\n                  <Button\n                    onClick={isPlaying ? pauseVisualization : startVisualization}\n                    disabled={steps.length === 0 || currentStep >= steps.length}\n                    className=\"w-full bg-gradient-to-r from-cyan-500 to-blue-500 hover:from-cyan-400 hover:to-blue-400 text-white font-semibold shadow-[0_0_20px_rgba(0,255,255,0.5)] hover:shadow-[0_0_30px_rgba(0,255,255,0.7)] transition-all duration-300\"\n                  >\n                    {isPlaying ? (\n                      <>\n                        <Pause className=\"w-4 h-4 mr-2\" />\n                        Pause\n                      </>\n                    ) : (\n                      <>\n                        <Play className=\"w-4 h-4 mr-2\" />\n                        {currentStep > 0 ? 'Resume' : 'Start'}\n                      </>\n                    )}\n                  </Button>\n                  <Button\n                    onClick={resetVisualization}\n                    variant=\"outline\"\n                    className=\"w-full border-pink-500/50 text-pink-400 hover:bg-pink-500/20 hover:border-pink-400 shadow-[0_0_15px_rgba(236,72,153,0.3)] hover:shadow-[0_0_25px_rgba(236,72,153,0.5)] transition-all duration-300\"\n                  >\n                    <RotateCcw className=\"w-4 h-4 mr-2\" />\n                    Reset\n                  </Button>\n                  <Button\n                    onClick={() => {\n                      generateRandomArray();\n                      generateSortingSteps(selectedAlgorithm);\n                    }}\n                    variant=\"outline\"\n                    disabled={isPlaying}\n                    className=\"w-full border-purple-500/50 text-purple-400 hover:bg-purple-500/20 hover:border-purple-400 shadow-[0_0_15px_rgba(168,85,247,0.3)] hover:shadow-[0_0_25px_rgba(168,85,247,0.5)] transition-all duration-300 disabled:opacity-50 disabled:cursor-not-allowed\"\n                  >\n                    <Zap className=\"w-4 h-4 mr-2\" />\n                    Generate New\n                  </Button>\n                </div>\n\n                {/* Stats Display */}\n                <div className=\"pt-4 border-t border-gray-700/50 space-y-2\">\n                  <div className=\"flex justify-between text-sm\">\n                    <span className=\"text-gray-400\">Current Step:</span>\n                    <span className=\"text-cyan-400 font-semibold\">{currentStep} / {steps.length}</span>\n                  </div>\n                  <div className=\"flex justify-between text-sm\">\n                    <span className=\"text-gray-400\">Array Length:</span>\n                    <span className=\"text-purple-400 font-semibold\">{array.length}</span>\n                  </div>\n                </div>\n              </div>\n            </motion.div>\n            \n            <div className=\"bg-gray-900/50 backdrop-blur-lg border border-cyan-500/30 rounded-xl p-6 shadow-2xl shadow-cyan-500/20\">\n              <div className=\"space-y-6\">\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center gap-2 text-cyan-400\">\n                    <Zap className=\"w-4 h-4\" />\n                    <span className=\"text-sm font-semibold tracking-wider\">ALGORITHM</span>\n                  </div>\n                  <div className=\"grid grid-cols-1 gap-3\">\n                    {mockAlgorithms.map((algo) => (\n                      <motion.button\n                        key={algo.id}\n                        onClick={() => setSelectedAlgorithm(algo.id as AlgorithmType)}\n                        className={`relative p-4 rounded-lg border-2 transition-all duration-300 text-left overflow-hidden group ${\n                          selectedAlgorithm === algo.id\n                            ? 'border-cyan-400 bg-cyan-500/20 shadow-lg shadow-cyan-500/50'\n                            : 'border-gray-700 bg-gray-800/50 hover:border-cyan-500/50 hover:bg-cyan-500/10'\n                        }`}\n                        whileHover={{ scale: 1.02 }}\n                        whileTap={{ scale: 0.98 }}\n                      >\n                        <div className={`absolute inset-0 bg-gradient-to-r from-cyan-500/0 via-cyan-500/20 to-cyan-500/0 opacity-0 group-hover:opacity-100 transition-opacity duration-500 ${\n                          selectedAlgorithm === algo.id ? 'opacity-100' : ''\n                        }`} />\n                        <div className=\"relative z-10\">\n                          <div className=\"font-semibold text-white mb-1\">{algo.name}</div>\n                          <div className={`text-xs font-mono ${\n                            selectedAlgorithm === algo.id ? 'text-cyan-300' : 'text-gray-400'\n                          }`}>\n                            {algo.complexity}\n                          </div>\n                        </div>\n                        {selectedAlgorithm === algo.id && (\n                          <motion.div\n                            className=\"absolute top-2 right-2\"\n                            initial={{ scale: 0, rotate: -180 }}\n                            animate={{ scale: 1, rotate: 0 }}\n                            transition={{ type: 'spring', stiffness: 200, damping: 15 }}\n                          >\n                            <div className=\"w-2 h-2 rounded-full bg-cyan-400 shadow-lg shadow-cyan-400/80\" />\n                          </motion.div>\n                        )}\n                      </motion.button>\n                    ))}\n                  </div>\n                </div>\n\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <label className=\"text-cyan-400 text-sm font-medium flex items-center gap-2\">\n                      <Zap className=\"w-4 h-4\" />\n                      Speed\n                    </label>\n                    <span className=\"text-cyan-300 text-xs\">{speed[0]}ms</span>\n                  </div>\n                  <Slider\n                    value={speed}\n                    onValueChange={setSpeed}\n                    min={10}\n                    max={200}\n                    step={10}\n                    className=\"[&_[role=slider]]:bg-cyan-400 [&_[role=slider]]:border-cyan-300 [&_[role=slider]]:shadow-[0_0_15px_rgba(34,211,238,0.8)] [&_[role=slider]]:hover:shadow-[0_0_25px_rgba(34,211,238,1)] [&_[role=slider]]:transition-shadow [&_.relative]:bg-gray-700/50 [&_.relative]:border [&_.relative]:border-cyan-500/30 [&_.bg-primary]:bg-gradient-to-r [&_.bg-primary]:from-cyan-500 [&_.bg-primary]:to-purple-500 [&_.bg-primary]:shadow-[0_0_10px_rgba(34,211,238,0.5)]\"\n                  />\n                </div>\n\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <label className=\"text-cyan-400 text-sm font-medium flex items-center gap-2\">\n                      <BarChart3 className=\"w-4 h-4\" />\n                      Array Size\n                    </label>\n                    <span className=\"text-cyan-300 text-xs\">{arraySize[0]}</span>\n                  </div>\n                  <Slider\n                    value={arraySize}\n                    onValueChange={setArraySize}\n                    min={5}\n                    max={100}\n                    step={1}\n                    className=\"[&_[role=slider]]:bg-gradient-to-r [&_[role=slider]]:from-purple-500 [&_[role=slider]]:to-pink-500 [&_[role=slider]]:border-2 [&_[role=slider]]:border-purple-300 [&_[role=slider]]:shadow-lg [&_[role=slider]]:shadow-purple-500/50 [&_[role=slider]]:transition-all [&_[role=slider]]:hover:shadow-xl [&_[role=slider]]:hover:shadow-purple-400/60 [&_[role=slider]]:hover:scale-110 [&>span]:bg-gradient-to-r [&>span]:from-purple-500/30 [&>span]:to-pink-500/30 [&>span]:h-2 [&>span]:rounded-full\"\n                  />\n                </div>\n\n                <div className=\"flex gap-3 pt-4\">\n                  <motion.button\n                    onClick={isPlaying ? pauseVisualization : startVisualization}\n                    disabled={array.length === 0 || (steps.length === 0 && !isPlaying)}\n                    className=\"flex-1 relative group overflow-hidden\"\n                    whileHover={{ scale: 1.05 }}\n                    whileTap={{ scale: 0.95 }}\n                  >\n                    <motion.div\n                      className={`relative px-6 py-3 rounded-lg font-semibold text-sm uppercase tracking-wider transition-all duration-300 ${\n                        array.length === 0 || (steps.length === 0 && !isPlaying)\n                          ? 'bg-gray-700/50 text-gray-500 cursor-not-allowed'\n                          : isPlaying\n                          ? 'bg-gradient-to-r from-pink-500 to-purple-500 text-white shadow-[0_0_30px_rgba(236,72,153,0.6)]'\n                          : 'bg-gradient-to-r from-cyan-500 to-blue-500 text-white shadow-[0_0_30px_rgba(6,182,212,0.6)]'\n                      }`}\n                      animate={\n                        array.length > 0 && (steps.length > 0 || isPlaying)\n                          ? {\n                              boxShadow: isPlaying\n                                ? [\n                                    '0 0 30px rgba(236,72,153,0.6)',\n                                    '0 0 50px rgba(236,72,153,0.8)',\n                                    '0 0 30px rgba(236,72,153,0.6)'\n                                  ]\n                                : [\n                                    '0 0 30px rgba(6,182,212,0.6)',\n                                    '0 0 50px rgba(6,182,212,0.8)',\n                                    '0 0 30px rgba(6,182,212,0.6)'\n                                  ]\n                            }\n                          : {}\n                      }\n                      transition={{ duration: 1.5, repeat: Infinity }}\n                    >\n                      <div className=\"flex items-center justify-center gap-2\">\n                        <motion.div\n                          key={isPlaying ? 'pause' : 'play'}\n                          initial={{ scale: 0, rotate: -180 }}\n                          animate={{ scale: 1, rotate: 0 }}\n                          exit={{ scale: 0, rotate: 180 }}\n                          transition={{ type: 'spring', stiffness: 200, damping: 15 }}\n                        >\n                          {isPlaying ? (\n                            <Pause className=\"w-5 h-5\" fill=\"currentColor\" />\n                          ) : (\n                            <Play className=\"w-5 h-5\" fill=\"currentColor\" />\n                          )}\n                        </motion.div>\n                        <span>{isPlaying ? 'Pause' : 'Play'}</span>\n                      </div>\n                    </motion.div>\n                    \n                    {/* Animated background glow */}\n                    {array.length > 0 && (steps.length > 0 || isPlaying) && (\n                      <motion.div\n                        className={`absolute inset-0 rounded-lg blur-xl -z-10 ${\n                          isPlaying\n                            ? 'bg-gradient-to-r from-pink-500 to-purple-500'\n                            : 'bg-gradient-to-r from-cyan-500 to-blue-500'\n                        }`}\n                        animate={{\n                          opacity: [0.3, 0.6, 0.3],\n                          scale: [1, 1.1, 1]\n                        }}\n                        transition={{ duration: 2, repeat: Infinity }}\n                      />\n                    )}\n                  </motion.button></parameter>\n</invoke>\n                  <motion.button\n                    onClick={resetVisualization}\n                    className=\"flex-1 relative overflow-hidden group bg-gradient-to-r from-pink-500/20 to-purple-500/20 border-2 border-pink-500/50 rounded-lg px-6 py-3 hover:border-pink-400 transition-all duration-300 shadow-lg shadow-pink-500/30 hover:shadow-pink-500/60 hover:shadow-xl\"\n                    whileHover={{ scale: 1.05 }}\n                    whileTap={{ scale: 0.95, rotate: 360 }}\n                    transition={{ type: \"spring\", stiffness: 400, damping: 17 }}\n                  >\n                    <motion.div\n                      className=\"absolute inset-0 bg-gradient-to-r from-pink-500/0 via-pink-500/30 to-pink-500/0\"\n                      animate={{ x: ['-100%', '100%'] }}\n                      transition={{ duration: 2, repeat: Infinity, ease: \"linear\" }}\n                    />\n                    <div className=\"relative z-10 flex items-center justify-center gap-2\">\n                      <motion.div\n                        whileHover={{ rotate: 360 }}\n                        transition={{ duration: 0.6, ease: \"easeInOut\" }}\n                      >\n                        <RotateCcw className=\"w-5 h-5 text-pink-300\" />\n                      </motion.div>\n                      <span className=\"font-semibold text-white\">Reset</span>\n                    </div>\n                    <motion.div\n                      className=\"absolute inset-0 rounded-lg opacity-0 group-hover:opacity-100 transition-opacity duration-300\"\n                      style={{\n                        boxShadow: '0 0 20px rgba(236, 72, 153, 0.6), inset 0 0 20px rgba(236, 72, 153, 0.2)'\n                      }}\n                    />\n                  </motion.button>\n                </div>\n              </div>\n            </div>\n\n            <motion.div\n              initial={{ opacity: 0, x: -50 }}\n              animate={{ opacity: 1, x: 0 }}\n              transition={{ delay: 0.2 }}\n              className=\"bg-gray-900/50 backdrop-blur-lg border border-purple-500/30 rounded-xl p-6 shadow-[0_0_30px_rgba(168,85,247,0.3)] hover:shadow-[0_0_50px_rgba(168,85,247,0.5)] transition-all duration-300\"\n            >\n              <div className=\"space-y-4\">\n                <div className=\"flex items-center gap-2 text-purple-400 mb-4\">\n                  <BarChart3 className=\"w-5 h-5\" />\n                  <h3 className=\"text-sm font-semibold uppercase tracking-wider\">Statistics</h3>\n                </div>\n\n                <div className=\"grid grid-cols-1 gap-4\">\n                  {/* Comparisons Counter */}\n                  <motion.div\n                    className=\"relative overflow-hidden rounded-lg bg-gradient-to-br from-cyan-500/10 to-cyan-500/5 border border-cyan-400/30 p-4\"\n                    whileHover={{ scale: 1.02 }}\n                    transition={{ type: 'spring', stiffness: 300 }}\n                  >\n                    <motion.div\n                      className=\"absolute inset-0 bg-gradient-to-r from-transparent via-cyan-400/10 to-transparent\"\n                      animate={{ x: ['-100%', '100%'] }}\n                      transition={{ duration: 3, repeat: Infinity, ease: 'linear' }}\n                    />\n                    <div className=\"relative z-10\">\n                      <div className=\"text-xs text-cyan-300 uppercase tracking-wider mb-2\">Comparisons</div>\n                      <motion.div\n                        key={comparisons}\n                        initial={{ scale: 1.5, opacity: 0 }}\n                        animate={{ scale: 1, opacity: 1 }}\n                        className=\"text-3xl font-bold text-white\"\n                      >\n                        {comparisons}\n                      </motion.div>\n                    </div>\n                    <div className=\"absolute top-2 right-2\">\n                      <motion.div\n                        className=\"w-2 h-2 bg-cyan-400 rounded-full\"\n                        animate={{\n                          boxShadow: [\n                            '0 0 5px rgba(34,211,238,0.5)',\n                            '0 0 20px rgba(34,211,238,1)',\n                            '0 0 5px rgba(34,211,238,0.5)'\n                          ]\n                        }}\n                        transition={{ duration: 2, repeat: Infinity }}\n                      />\n                    </div>\n                  </motion.div>\n\n                  {/* Swaps Counter */}\n                  <motion.div\n                    className=\"relative overflow-hidden rounded-lg bg-gradient-to-br from-pink-500/10 to-pink-500/5 border border-pink-400/30 p-4\"\n                    whileHover={{ scale: 1.02 }}\n                    transition={{ type: 'spring', stiffness: 300 }}\n                  >\n                    <motion.div\n                      className=\"absolute inset-0 bg-gradient-to-r from-transparent via-pink-400/10 to-transparent\"\n                      animate={{ x: ['-100%', '100%'] }}\n                      transition={{ duration: 3, repeat: Infinity, ease: 'linear', delay: 1.5 }}\n                    />\n                    <div className=\"relative z-10\">\n                      <div className=\"text-xs text-pink-300 uppercase tracking-wider mb-2\">Swaps</div>\n                      <motion.div\n                        key={swaps}\n                        initial={{ scale: 1.5, opacity: 0 }}\n                        animate={{ scale: 1, opacity: 1 }}\n                        className=\"text-3xl font-bold text-white\"\n                      >\n                        {swaps}\n                      </motion.div>\n                    </div>\n                    <div className=\"absolute top-2 right-2\">\n                      <motion.div\n                        className=\"w-2 h-2 bg-pink-400 rounded-full\"\n                        animate={{\n                          boxShadow: [\n                            '0 0 5px rgba(244,114,182,0.5)',\n                            '0 0 20px rgba(244,114,182,1)',\n                            '0 0 5px rgba(244,114,182,0.5)'\n                          ]\n                        }}\n                        transition={{ duration: 2, repeat: Infinity, delay: 1 }}\n                      />\n                    </div>\n                  </motion.div>\n\n                  {/* Progress Indicator */}\n                  <motion.div\n                    className=\"relative overflow-hidden rounded-lg bg-gradient-to-br from-purple-500/10 to-purple-500/5 border border-purple-400/30 p-4\"\n                    whileHover={{ scale: 1.02 }}\n                    transition={{ type: 'spring', stiffness: 300 }}\n                  >\n                    <div className=\"relative z-10\">\n                      <div className=\"flex items-center justify-between mb-3\">\n                        <div className=\"text-xs text-purple-300 uppercase tracking-wider\">Progress</div>\n                        <motion.div\n                          key={steps.length > 0 ? Math.round((currentStep / steps.length) * 100) : 0}\n                          initial={{ scale: 1.3, opacity: 0 }}\n                          animate={{ scale: 1, opacity: 1 }}\n                          className=\"text-lg font-bold text-white\"\n                        >\n                          {steps.length > 0 ? Math.round((currentStep / steps.length) * 100) : 0}%\n                        </motion.div>\n                      </div>\n                      <div className=\"relative h-3 bg-gray-800/50 rounded-full overflow-hidden border border-purple-400/20\">\n                        <motion.div\n                          className=\"absolute inset-y-0 left-0 bg-gradient-to-r from-purple-500 via-pink-500 to-cyan-500 rounded-full\"\n                          initial={{ width: 0 }}\n                          animate={{\n                            width: steps.length > 0 ? `${(currentStep / steps.length) * 100}%` : '0%'\n                          }}\n                          transition={{ duration: 0.3, ease: 'easeOut' }}\n                        >\n                          <motion.div\n                            className=\"absolute inset-0 bg-gradient-to-r from-transparent via-white/30 to-transparent\"\n                            animate={{ x: ['-100%', '100%'] }}\n                            transition={{ duration: 1.5, repeat: Infinity, ease: 'linear' }}\n                          />\n                        </motion.div>\n                      </div>\n                      <div className=\"flex items-center justify-between mt-2 text-xs text-gray-400\">\n                        <span>Step {currentStep}</span>\n                        <span>of {steps.length}</span>\n                      </div>\n                    </div>\n                  </motion.div>\n\n                  {/* Algorithm Status */}\n                  <motion.div\n                    className=\"relative overflow-hidden rounded-lg bg-gradient-to-br from-green-500/10 to-green-500/5 border border-green-400/30 p-4\"\n                    whileHover={{ scale: 1.02 }}\n                    transition={{ type: 'spring', stiffness: 300 }}\n                  >\n                    <div className=\"relative z-10\">\n                      <div className=\"text-xs text-green-300 uppercase tracking-wider mb-2\">Status</div>\n                      <div className=\"flex items-center gap-2\">\n                        <motion.div\n                          className=\"w-3 h-3 rounded-full\"\n                          animate={{\n                            backgroundColor: isPlaying\n                              ? ['#10b981', '#34d399', '#10b981']\n                              : steps.length > 0 && currentStep === steps.length\n                              ? '#10b981'\n                              : '#6b7280',\n                            boxShadow: isPlaying\n                              ? [\n                                  '0 0 5px rgba(16,185,129,0.5)',\n                                  '0 0 15px rgba(16,185,129,1)',\n                                  '0 0 5px rgba(16,185,129,0.5)'\n                                ]\n                              : '0 0 0px rgba(16,185,129,0)'\n                          }}\n                          transition={{ duration: 1.5, repeat: isPlaying ? Infinity : 0 }}\n                        />\n                        <span className=\"text-sm font-medium text-white\">\n                          {isPlaying\n                            ? 'Running...'\n                            : steps.length > 0 && currentStep === steps.length\n                            ? 'Completed'\n                            : array.length > 0\n                            ? 'Ready'\n                            : 'Generate Array'}\n                        </span>\n                      </div>\n                    </div>\n                  </motion.div>\n                </div>\n              </div>\n            </motion.div>\n          </div>\n\n          <div className=\"lg:col-span-3\">\n            <div className=\"bg-gray-900/50 backdrop-blur-lg border border-purple-500/30 rounded-xl p-8 shadow-2xl shadow-purple-500/20 min-h-[600px]\">\n                            {array.length === 0 ? (\n                <motion.div\n                  initial={{ opacity: 0, scale: 0.8 }}\n                  animate={{ opacity: 1, scale: 1 }}\n                  className=\"absolute inset-0 flex flex-col items-center justify-center gap-6\"\n                >\n                  <motion.div\n                    animate={{\n                      boxShadow: [\n                        '0 0 20px rgba(0, 255, 255, 0.3)',\n                        '0 0 40px rgba(255, 0, 255, 0.5)',\n                        '0 0 20px rgba(0, 255, 255, 0.3)'\n                      ]\n                    }}\n                    transition={{ duration: 2, repeat: Infinity }}\n                    className=\"p-8 rounded-full bg-gradient-to-br from-cyan-500/20 to-purple-500/20 border border-cyan-400/50\"\n                  >\n                    <BarChart3 className=\"w-16 h-16 text-cyan-400\" />\n                  </motion.div>\n                  <div className=\"text-center space-y-2\">\n                    <h3 className=\"text-2xl font-bold text-white\">Ready to Visualize</h3>\n                    <p className=\"text-gray-400\">Generate an array to begin sorting</p>\n                  </div>\n                </motion.div>\n              ) : (\n                <div className=\"relative w-full h-full flex items-end justify-center gap-1 px-4\">\n                  {/* Comparison Indicators */}\n                  {steps[currentStep]?.comparingIndices.map((index, i) => {\n                    const barWidth = 100 / array.length;\n                    const leftPosition = index * barWidth;\n                    \n                    return (\n                      <motion.div\n                        key={`compare-${index}-${i}`}\n                        initial={{ opacity: 0, y: -20 }}\n                        animate={{ opacity: 1, y: 0 }}\n                        exit={{ opacity: 0 }}\n                        className=\"absolute top-0 pointer-events-none\"\n                        style={{\n                          left: `${leftPosition}%`,\n                          width: `${barWidth}%`\n                        }}\n                      >\n                        <motion.div\n                          animate={{\n                            y: [0, -10, 0],\n                            opacity: [0.5, 1, 0.5]\n                          }}\n                          transition={{ duration: 0.8, repeat: Infinity }}\n                          className=\"w-full flex justify-center\"\n                        >\n                          <div className=\"w-8 h-8 rounded-full bg-yellow-400 shadow-[0_0_30px_rgba(250,204,21,0.8)] flex items-center justify-center\">\n                            <div className=\"w-4 h-4 rounded-full bg-yellow-200 animate-pulse\" />\n                          </div>\n                        </motion.div>\n                        <motion.div\n                          className=\"absolute top-8 left-1/2 -translate-x-1/2 w-0.5 bg-gradient-to-b from-yellow-400 to-transparent\"\n                          animate={{\n                            height: ['0%', '100%'],\n                            opacity: [1, 0.3]\n                          }}\n                          transition={{ duration: 0.5, repeat: Infinity }}\n                          style={{ height: '100%' }}\n                        />\n                      </motion.div>\n                    );\n                  })}\n\n                  {/* Swap Trail Effects */}\n                  {steps[currentStep]?.swappingIndices.map((index, i) => {\n                    const barWidth = 100 / array.length;\n                    const leftPosition = index * barWidth;\n                    \n                    return (\n                      <motion.div\n                        key={`swap-${index}-${i}`}\n                        initial={{ opacity: 0, scale: 0 }}\n                        animate={{ opacity: [0, 1, 0], scale: [0.5, 2, 0.5] }}\n                        transition={{ duration: 0.6, repeat: Infinity }}\n                        className=\"absolute top-1/2 -translate-y-1/2 pointer-events-none\"\n                        style={{\n                          left: `${leftPosition}%`,\n                          width: `${barWidth}%`\n                        }}\n                      >\n                        <div className=\"w-full flex justify-center\">\n                          <motion.div\n                            className=\"w-12 h-12 rounded-full bg-gradient-to-r from-pink-500 to-purple-500\"\n                            style={{\n                              boxShadow: '0 0 40px rgba(236, 72, 153, 0.8), 0 0 60px rgba(168, 85, 247, 0.6)'\n                            }}\n                            animate={{\n                              rotate: [0, 360]\n                            }}\n                            transition={{ duration: 1, repeat: Infinity, ease: 'linear' }}\n                          />\n                        </div>\n                      </motion.div>\n                    );\n                  })}\n\n                  {/* Animated Bars */}\n                  {(steps[currentStep]?.array || array).map((element, index) => {\n                    const isComparing = steps[currentStep]?.comparingIndices.includes(index);\n                    const isSwapping = steps[currentStep]?.swappingIndices.includes(index);\n                    const isSorted = steps[currentStep]?.sortedIndices.includes(index);\n                    \n                    const maxValue = Math.max(...array.map(el => el.value));\n                    const heightPercentage = (element.value / maxValue) * 100;\n                    \n                    let barColor = NEON_COLORS[index % NEON_COLORS.length];\n                    let shadowColor = barColor;\n                    let glowIntensity = 0.5;\n                    \n                    if (isSorted) {\n                      barColor = '#00ff00';\n                      shadowColor = '#00ff00';\n                      glowIntensity = 0.8;\n                    } else if (isSwapping) {\n                      barColor = '#ff00ff';\n                      shadowColor = '#ff00ff';\n                      glowIntensity = 1;\n                    } else if (isComparing) {\n                      barColor = '#ffff00';\n                      shadowColor = '#ffff00';\n                      glowIntensity = 0.9;\n                    }\n                    \n                    return (\n                      <motion.div\n                        key={element.id}\n                        layout\n                        initial={{ height: 0, opacity: 0 }}\n                        animate={{\n                          height: `${heightPercentage}%`,\n                          opacity: 1,\n                          y: isSwapping ? [-20, 0] : 0,\n                          scale: isComparing ? [1, 1.1, 1] : 1\n                        }}\n                        transition={{\n                          height: { duration: 0.5, ease: 'easeOut' },\n                          opacity: { duration: 0.3 },\n                          y: { duration: 0.4, ease: 'easeInOut' },\n                          scale: { duration: 0.3, repeat: isComparing ? Infinity : 0 },\n                          layout: { duration: 0.5, ease: 'easeInOut' }\n                        }}\n                        className=\"relative flex-1 min-w-[4px] rounded-t-lg transition-all duration-300\"\n                        style={{\n                          backgroundColor: barColor,\n                          boxShadow: `\n                            0 0 ${20 * glowIntensity}px ${shadowColor},\n                            0 0 ${40 * glowIntensity}px ${shadowColor},\n                            inset 0 0 ${10 * glowIntensity}px rgba(255, 255, 255, 0.3)\n                          `,\n                          border: `1px solid ${barColor}`\n                        }}\n                      >\n                        {/* Value Label */}\n                        {array.length <= 30 && (\n                          <motion.div\n                            initial={{ opacity: 0 }}\n                            animate={{ opacity: 1 }}\n                            className=\"absolute -top-6 left-1/2 -translate-x-1/2 text-xs font-bold text-white whitespace-nowrap\"\n                            style={{\n                              textShadow: `0 0 10px ${shadowColor}`\n                            }}\n                          >\n                            {element.value}\n                          </motion.div>\n                        )}\n                        \n                        {/* Glow Effect Overlay */}\n                        <motion.div\n                          className=\"absolute inset-0 rounded-t-lg\"\n                          animate={{\n                            background: [\n                              `linear-gradient(to top, transparent, ${barColor}40)`,\n                              `linear-gradient(to top, transparent, ${barColor}80)`,\n                              `linear-gradient(to top, transparent, ${barColor}40)`\n                            ]\n                          }}\n                          transition={{ duration: 1.5, repeat: Infinity }}\n                        />\n                        \n                        {/* Particle Effect for Sorted Bars */}\n                        {isSorted && (\n                          <>\n                            {[...Array(3)].map((_, i) => (\n                              <motion.div\n                                key={`particle-${i}`}\n                                initial={{ y: 0, opacity: 1, scale: 1 }}\n                                animate={{\n                                  y: [-50, -100],\n                                  opacity: [1, 0],\n                                  scale: [1, 0],\n                                  x: [0, (Math.random() - 0.5) * 30]\n                                }}\n                                transition={{\n                                  duration: 1.5,\n                                  repeat: Infinity,\n                                  delay: i * 0.3,\n                                  ease: 'easeOut'\n                                }}\n                                className=\"absolute bottom-0 left-1/2 w-2 h-2 rounded-full bg-green-400\"\n                                style={{\n                                  boxShadow: '0 0 10px rgba(0, 255, 0, 0.8)'\n                                }}\n                              />\n                            ))}\n                          </>\n                        )}\n                        \n                        {/* Swap Trail Effect */}\n                        {isSwapping && (\n                          <motion.div\n                            className=\"absolute inset-0 rounded-t-lg\"\n                            initial={{ opacity: 0 }}\n                            animate={{\n                              opacity: [0, 0.8, 0],\n                              scale: [1, 1.2, 1]\n                            }}\n                            transition={{ duration: 0.5, repeat: Infinity }}\n                            style={{\n                              background: `radial-gradient(circle, ${barColor}80, transparent)`,\n                              filter: 'blur(8px)'\n                            }}\n                          />\n                        )}\n                      </motion.div>\n                    );\n                  })}\n                </div>\n              )}\n              \n              <div className=\"relative h-full flex items-end justify-center gap-1\">\n                {array.length === 0 ? (\n                  <motion.div\n                    initial={{ opacity: 0, scale: 0.8 }}\n                    animate={{ opacity: 1, scale: 1 }}\n                    className=\"absolute inset-0 flex items-center justify-center\"\n                  >\n                    <div className=\"text-center space-y-4\">\n                      <motion.div\n                        animate={{\n                          rotate: [0, 360],\n                          scale: [1, 1.2, 1]\n                        }}\n                        transition={{ duration: 3, repeat: Infinity }}\n                        className=\"w-20 h-20 mx-auto rounded-full bg-gradient-to-r from-cyan-500 via-purple-500 to-pink-500 opacity-50 blur-xl\"\n                      />\n                      <p className=\"text-gray-400 text-lg\">Generate an array to begin</p>\n                    </div>\n                  </motion.div>\n                ) : (\n                  array.map((element, index) => {\n                    const step = steps[currentStep];\n                    const isComparing = step?.comparingIndices.includes(index);\n                    const isSwapping = step?.swappingIndices.includes(index);\n                    const isSorted = step?.sortedIndices.includes(index);\n                    \n                    const maxValue = Math.max(...array.map(el => el.value));\n                    const heightPercentage = (element.value / maxValue) * 100;\n                    \n                    let barColor = NEON_COLORS[index % NEON_COLORS.length];\n                    let glowColor = barColor;\n                    let glowIntensity = 0.3;\n                    \n                    if (isSorted) {\n                      barColor = '#00ff00';\n                      glowColor = '#00ff00';\n                      glowIntensity = 0.8;\n                    } else if (isSwapping) {\n                      barColor = '#ff0066';\n                      glowColor = '#ff0066';\n                      glowIntensity = 1;\n                    } else if (isComparing) {\n                      barColor = '#ffff00';\n                      glowColor = '#ffff00';\n                      glowIntensity = 0.7;\n                    }\n                    \n                    return (\n                      <motion.div\n                        key={element.id}\n                        layout\n                        initial={{ opacity: 0, scale: 0, y: 50 }}\n                        animate={{\n                          opacity: 1,\n                          scale: 1,\n                          y: 0,\n                          height: `${heightPercentage}%`\n                        }}\n                        transition={{\n                          height: { duration: 0.3, ease: 'easeInOut' },\n                          layout: { duration: 0.5, ease: 'easeInOut' },\n                          opacity: { duration: 0.3 },\n                          scale: { duration: 0.3 }\n                        }}\n                        className=\"relative flex-1 min-w-[4px] max-w-[60px] rounded-t-lg\"\n                        style={{\n                          backgroundColor: barColor,\n                          boxShadow: `\n                            0 0 ${glowIntensity * 20}px ${glowColor},\n                            0 0 ${glowIntensity * 40}px ${glowColor},\n                            inset 0 0 ${glowIntensity * 10}px rgba(255, 255, 255, 0.5)\n                          `,\n                          border: `1px solid ${barColor}`,\n                          filter: `brightness(${isSwapping ? 1.5 : isComparing ? 1.3 : isSorted ? 1.2 : 1})`\n                        }}\n                      >\n                        {/* Animated glow pulse for active states */}\n                        {(isComparing || isSwapping) && (\n                          <motion.div\n                            className=\"absolute inset-0 rounded-t-lg\"\n                            animate={{\n                              opacity: [0.5, 1, 0.5],\n                              scale: [1, 1.05, 1]\n                            }}\n                            transition={{\n                              duration: 0.6,\n                              repeat: Infinity,\n                              ease: 'easeInOut'\n                            }}\n                            style={{\n                              backgroundColor: barColor,\n                              filter: 'blur(4px)'\n                            }}\n                          />\n                        )}\n                        \n                        {/* Sorted celebration effect */}\n                        {isSorted && (\n                          <motion.div\n                            initial={{ opacity: 0, y: -20 }}\n                            animate={{ opacity: [0, 1, 0], y: -40 }}\n                            transition={{ duration: 0.8 }}\n                            className=\"absolute -top-10 left-1/2 transform -translate-x-1/2\"\n                          >\n                            <div className=\"w-2 h-2 rounded-full bg-green-400 shadow-lg shadow-green-400/80\" />\n                          </motion.div>\n                        )}\n                        \n                        {/* Swap trail effect */}\n                        {isSwapping && (\n                          <>\n                            <motion.div\n                              className=\"absolute inset-0 rounded-t-lg\"\n                              initial={{ opacity: 0 }}\n                              animate={{ opacity: [0, 0.8, 0] }}\n                              transition={{ duration: 0.5 }}\n                              style={{\n                                background: `linear-gradient(to top, ${barColor}, transparent)`,\n                                filter: 'blur(8px)'\n                              }}\n                            />\n                            <motion.div\n                              className=\"absolute -top-2 left-1/2 transform -translate-x-1/2\"\n                              animate={{\n                                y: [-10, -30, -10],\n                                opacity: [0, 1, 0]\n                              }}\n                              transition={{\n                                duration: 0.8,\n                                repeat: Infinity\n                              }}\n                            >\n                              <div \n                                className=\"w-1 h-8 rounded-full\"\n                                style={{\n                                  backgroundColor: barColor,\n                                  boxShadow: `0 0 10px ${barColor}`\n                                }}\n                              />\n                            </motion.div>\n                          </>\n                        )}\n                        \n                        {/* Value label for larger arrays */}\n                        {array.length <= 30 && (\n                          <motion.div\n                            initial={{ opacity: 0 }}\n                            animate={{ opacity: 1 }}\n                            transition={{ delay: 0.2 }}\n                            className=\"absolute -bottom-6 left-1/2 transform -translate-x-1/2 text-xs font-mono text-gray-400 whitespace-nowrap\"\n                          >\n                            {element.value}\n                          </motion.div>\n                        )}\n                        \n                        {/* Shimmer effect on bars */}\n                        <motion.div\n                          className=\"absolute inset-0 rounded-t-lg overflow-hidden\"\n                          initial={{ x: '-100%' }}\n                          animate={{ x: '200%' }}\n                          transition={{\n                            duration: 2,\n                            repeat: Infinity,\n                            repeatDelay: 1,\n                            ease: 'easeInOut'\n                          }}\n                          style={{\n                            background: 'linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.3), transparent)',\n                            width: '50%'\n                          }}\n                        />\n                      </motion.div>\n                    );\n                  })\n                )}</parameter>\n</invoke>\n              </div>\n            </div>\n\n                        <motion.div\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ delay: 0.3, duration: 0.5 }}\n              className=\"mt-6 space-y-3\"\n            >\n              <div className=\"flex items-center justify-between text-sm\">\n                <span className=\"text-purple-400 font-semibold uppercase tracking-wider flex items-center gap-2\">\n                  <BarChart3 className=\"w-4 h-4\" />\n                  Sorting Progress\n                </span>\n                <motion.span\n                  key={currentStep}\n                  initial={{ scale: 1.2, color: '#a855f7' }}\n                  animate={{ scale: 1, color: '#c084fc' }}\n                  className=\"text-purple-300 font-bold text-lg\"\n                >\n                  {steps.length > 0 ? Math.round((currentStep / (steps.length - 1)) * 100) : 0}%\n                </motion.span>\n              </div>\n              \n              <div className=\"relative h-4 bg-gray-800/50 rounded-full border border-purple-500/30 overflow-hidden shadow-inner\">\n                <motion.div\n                  className=\"absolute inset-y-0 left-0 bg-gradient-to-r from-cyan-500 via-purple-500 to-pink-500 rounded-full\"\n                  initial={{ width: '0%' }}\n                  animate={{\n                    width: steps.length > 0 ? `${(currentStep / (steps.length - 1)) * 100}%` : '0%',\n                    boxShadow: [\n                      '0 0 20px rgba(168,85,247,0.6)',\n                      '0 0 30px rgba(168,85,247,0.8)',\n                      '0 0 20px rgba(168,85,247,0.6)'\n                    ]\n                  }}\n                  transition={{\n                    width: { duration: 0.3, ease: 'easeOut' },\n                    boxShadow: { duration: 1.5, repeat: Infinity }\n                  }}\n                >\n                  <motion.div\n                    className=\"absolute inset-0 bg-gradient-to-r from-transparent via-white/30 to-transparent\"\n                    animate={{ x: ['-100%', '200%'] }}\n                    transition={{ duration: 1.5, repeat: Infinity, ease: 'linear' }}\n                  />\n                </motion.div>\n                \n                {currentStep === steps.length - 1 && steps.length > 0 && (\n                  <motion.div\n                    initial={{ scale: 0 }}\n                    animate={{ scale: [1, 1.2, 1] }}\n                    transition={{ duration: 0.5, repeat: Infinity }}\n                    className=\"absolute inset-0 bg-gradient-to-r from-green-400 to-emerald-500 rounded-full shadow-[0_0_30px_rgba(34,197,94,0.8)]\"\n                  >\n                    <motion.div\n                      className=\"absolute inset-0 bg-gradient-to-r from-transparent via-white/40 to-transparent\"\n                      animate={{ x: ['-100%', '200%'] }}\n                      transition={{ duration: 1, repeat: Infinity, ease: 'linear' }}\n                    />\n                  </motion.div>\n                )}\n              </div>\n              \n              <div className=\"flex justify-between text-xs text-gray-500\">\n                <span>Step {currentStep} / {steps.length > 0 ? steps.length - 1 : 0}</span>\n                {currentStep === steps.length - 1 && steps.length > 0 && (\n                  <motion.span\n                    initial={{ opacity: 0, x: 10 }}\n                    animate={{ opacity: 1, x: 0 }}\n                    className=\"text-green-400 font-semibold\"\n                  >\n                    \u2713 Complete\n                  </motion.span>\n                )}\n              </div>\n            </motion.div>\n          </div>\n        </div>\n\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ delay: 0.6, duration: 0.8 }}\n          className=\"bg-gray-900/50 backdrop-blur-lg border border-cyan-500/30 rounded-xl p-6 shadow-[0_0_30px_rgba(0,255,255,0.2)]\"\n        >\n          <div className=\"flex items-center gap-2 mb-4\">\n            <BarChart3 className=\"w-5 h-5 text-cyan-400\" />\n            <h3 className=\"text-lg font-semibold text-cyan-400 uppercase tracking-wider\">\n              Legend\n            </h3>\n          </div>\n          \n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n            {/* Default State */}\n            <motion.div\n              className=\"flex items-center gap-3 p-3 rounded-lg bg-gray-800/50 border border-gray-700/50 hover:border-cyan-500/50 transition-all duration-300\"\n              whileHover={{ scale: 1.05 }}\n            >\n              <motion.div\n                className=\"w-6 h-12 rounded bg-gradient-to-t from-cyan-500 to-cyan-300 shadow-[0_0_15px_rgba(0,255,255,0.6)]\"\n                animate={{\n                  boxShadow: [\n                    '0 0 15px rgba(0,255,255,0.6)',\n                    '0 0 25px rgba(0,255,255,0.8)',\n                    '0 0 15px rgba(0,255,255,0.6)'\n                  ]\n                }}\n                transition={{ duration: 2, repeat: Infinity }}\n              />\n              <div>\n                <div className=\"text-sm font-semibold text-white\">Default</div>\n                <div className=\"text-xs text-gray-400\">Unsorted</div>\n              </div>\n            </motion.div>\n\n            {/* Comparing State */}\n            <motion.div\n              className=\"flex items-center gap-3 p-3 rounded-lg bg-gray-800/50 border border-gray-700/50 hover:border-yellow-500/50 transition-all duration-300\"\n              whileHover={{ scale: 1.05 }}\n            >\n              <motion.div\n                className=\"w-6 h-12 rounded bg-gradient-to-t from-yellow-500 to-yellow-300 shadow-[0_0_20px_rgba(255,255,0,0.8)]\"\n                animate={{\n                  boxShadow: [\n                    '0 0 20px rgba(255,255,0,0.8)',\n                    '0 0 35px rgba(255,255,0,1)',\n                    '0 0 20px rgba(255,255,0,0.8)'\n                  ],\n                  scale: [1, 1.1, 1]\n                }}\n                transition={{ duration: 1, repeat: Infinity }}\n              />\n              <div>\n                <div className=\"text-sm font-semibold text-white\">Comparing</div>\n                <div className=\"text-xs text-gray-400\">Active</div>\n              </div>\n            </motion.div>\n\n            {/* Swapping State */}\n            <motion.div\n              className=\"flex items-center gap-3 p-3 rounded-lg bg-gray-800/50 border border-gray-700/50 hover:border-pink-500/50 transition-all duration-300\"\n              whileHover={{ scale: 1.05 }}\n            >\n              <motion.div\n                className=\"w-6 h-12 rounded bg-gradient-to-t from-pink-500 to-pink-300 shadow-[0_0_20px_rgba(236,72,153,0.8)]\"\n                animate={{\n                  boxShadow: [\n                    '0 0 20px rgba(236,72,153,0.8)',\n                    '0 0 35px rgba(236,72,153,1)',\n                    '0 0 20px rgba(236,72,153,0.8)'\n                  ],\n                  x: [-2, 2, -2]\n                }}\n                transition={{ duration: 0.8, repeat: Infinity }}\n              />\n              <div>\n                <div className=\"text-sm font-semibold text-white\">Swapping</div>\n                <div className=\"text-xs text-gray-400\">Moving</div>\n              </div>\n            </motion.div>\n\n            {/* Sorted State */}\n            <motion.div\n              className=\"flex items-center gap-3 p-3 rounded-lg bg-gray-800/50 border border-gray-700/50 hover:border-green-500/50 transition-all duration-300\"\n              whileHover={{ scale: 1.05 }}\n            >\n              <motion.div\n                className=\"w-6 h-12 rounded bg-gradient-to-t from-green-500 to-green-300 shadow-[0_0_20px_rgba(0,255,0,0.8)]\"\n                animate={{\n                  boxShadow: [\n                    '0 0 20px rgba(0,255,0,0.8)',\n                    '0 0 30px rgba(0,255,0,1)',\n                    '0 0 20px rgba(0,255,0,0.8)'\n                  ]\n                }}\n                transition={{ duration: 2, repeat: Infinity }}\n              />\n              <div>\n                <div className=\"text-sm font-semibold text-white\">Sorted</div>\n                <div className=\"text-xs text-gray-400\">Complete</div>\n              </div>\n            </motion.div>\n          </div>\n\n          {/* Additional Info */}\n          <motion.div\n            className=\"mt-4 pt-4 border-t border-gray-700/50\"\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            transition={{ delay: 1 }}\n          >\n            <div className=\"flex items-center justify-center gap-6 text-xs text-gray-400\">\n              <div className=\"flex items-center gap-2\">\n                <motion.div\n                  className=\"w-2 h-2 rounded-full bg-cyan-400\"\n                  animate={{\n                    boxShadow: [\n                      '0 0 5px rgba(0,255,255,0.8)',\n                      '0 0 15px rgba(0,255,255,1)',\n                      '0 0 5px rgba(0,255,255,0.8)'\n                    ]\n                  }}\n                  transition={{ duration: 1.5, repeat: Infinity }}\n                />\n                <span>Glowing effects indicate active operations</span>\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <motion.div\n                  className=\"w-2 h-2 rounded-full bg-purple-400\"\n                  animate={{\n                    scale: [1, 1.3, 1]\n                  }}\n                  transition={{ duration: 1.5, repeat: Infinity }}\n                />\n                <span>Animations show real-time algorithm progress</span>\n              </div>\n            </div>\n          </motion.div>\n        </motion.div>\n      </div>\n    </div>\n  );\n}",
    "error": null,
    "elapsed_time": 104.38164472579956,
    "success": true
  }
}