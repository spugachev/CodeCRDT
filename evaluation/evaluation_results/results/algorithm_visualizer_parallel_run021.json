{
  "prompt_id": "algorithm_visualizer",
  "prompt_name": "Algorithm Visualizer",
  "mode": "parallel",
  "run_number": 21,
  "timestamp": "2025-10-14T06:24:02.871656",
  "response_time": 59.3190131187439,
  "total_tokens": null,
  "response_content": "import { useState, useCallback } from 'react';\nimport { useEffect } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Slider } from '@/components/ui/slider';\nimport { Play, Pause, RotateCcw, Zap, BarChart3 } from 'lucide-react';\nimport { Activity, TrendingUp, Shuffle } from 'lucide-react';\nimport { motion } from 'framer-motion';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select';\nimport { Badge } from '@/components/ui/badge';\n\n\ninterface ArrayElement {\n  value: number;\n  id: string;\n  isComparing?: boolean;\n  isSwapping?: boolean;\n  isSorted?: boolean;\n}\n\ninterface AlgorithmStep {\n  array: ArrayElement[];\n  comparingIndices: number[];\n  swappingIndices: number[];\n  sortedIndices: number[];\n}\n\ntype AlgorithmType = 'bubble' | 'quick' | 'merge' | 'insertion';\n\nconst NEON_COLORS = [\n  '#00ffff',\n  '#ff00ff', \n  '#00ff00',\n  '#ffff00',\n  '#ff0066',\n  '#00ffaa'\n];\n\nconst mockAlgorithms = [\n  { id: 'bubble', name: 'Bubble Sort', complexity: 'O(n\u00b2)' },\n  { id: 'quick', name: 'Quick Sort', complexity: 'O(n log n)' },\n  { id: 'merge', name: 'Merge Sort', complexity: 'O(n log n)' },\n  { id: 'insertion', name: 'Insertion Sort', complexity: 'O(n\u00b2)' }\n];\n\nconst useAnimationLoop = (\n  isPlaying: boolean,\n  steps: AlgorithmStep[],\n  currentStep: number,\n  speed: number[],\n  onStepComplete: () => void,\n  onAnimationEnd: () => void\n) => {\n  const [animationId, setAnimationId] = useState<NodeJS.Timeout | null>(null);\n\n  const cleanup = useCallback(() => {\n    if (animationId) {\n      clearTimeout(animationId);\n      setAnimationId(null);\n    }\n  }, [animationId]);\n\n  const animate = useCallback(() => {\n    if (currentStep < steps.length - 1) {\n      const delay = 1000 - speed[0] * 9.5; // Convert speed (0-100) to delay (1000ms-50ms)\n      const id = setTimeout(() => {\n        onStepComplete();\n      }, delay);\n      setAnimationId(id);\n    } else {\n      onAnimationEnd();\n    }\n  }, [currentStep, steps.length, speed, onStepComplete, onAnimationEnd]);\n\n  // Start/stop animation based on isPlaying\n  if (isPlaying && currentStep < steps.length - 1) {\n    animate();\n  } else if (!isPlaying) {\n    cleanup();\n  }\n\n  return cleanup;\n};\nexport default function AlgorithmVisualizer() {\n  const [array, setArray] = useState<ArrayElement[]>([]);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [speed, setSpeed] = useState([50]);\n  const [arraySize, setArraySize] = useState([20]);\n  const [selectedAlgorithm, setSelectedAlgorithm] = useState<AlgorithmType>('bubble');\n  const [currentStep, setCurrentStep] = useState(0);\n  const [steps, setSteps] = useState<AlgorithmStep[]>([]);\n\n  // Animation effect\n  useEffect(() => {\n    if (isPlaying && currentStep < steps.length - 1) {\n      const delay = 1000 - speed[0] * 9.5; // Convert speed (0-100) to delay (1000ms-50ms)\n      const timer = setTimeout(() => {\n        setCurrentStep(prev => prev + 1);\n      }, delay);\n      return () => clearTimeout(timer);\n    } else if (currentStep >= steps.length - 1 && steps.length > 0) {\n      setIsPlaying(false);\n    }\n  }, [isPlaying, currentStep, steps.length, speed]);\n\n  // Update array display based on current step\n  useEffect(() => {\n    if (steps.length > 0 && currentStep < steps.length) {\n      setArray(steps[currentStep].array);\n    }\n  }, [currentStep, steps]);\n  const [comparisons, setComparisons] = useState(0);\n  const [swaps, setSwaps] = useState(0);\n\n  const generateRandomArray = useCallback(() => {\n    const newArray: ArrayElement[] = Array.from({ length: arraySize[0] }, (_, index) => ({\n      value: Math.floor(Math.random() * 100) + 5,\n      id: `element-${index}-${Date.now()}`,\n      isComparing: false,\n      isSwapping: false,\n      isSorted: false\n    }));\n    setArray(newArray);\n    setSteps([]);\n    setCurrentStep(0);\n    setIsPlaying(false);\n  }, [arraySize]);\n\n  const resetVisualization = useCallback(() => {\n\n    setIsPlaying(false);\n    setCurrentStep(0);\n    setSteps([]);\n    generateRandomArray();\n  }, [generateRandomArray]);\n\n  const startVisualization = useCallback(() => {\n    if (steps.length === 0) return;\n    if (currentStep >= steps.length - 1) {\n      setCurrentStep(0);\n    }\n    setIsPlaying(true);\n    \n  }, [steps, speed, currentStep]);\n\n  const pauseVisualization = useCallback(() => {    setIsPlaying(false);\n  }, []);\n\n  const generateSortingSteps = useCallback((algorithm: AlgorithmType) => {\n    const algorithmArray = [...array];\n    const generatedSteps: AlgorithmStep[] = [];\n\n    const addStep = (arr: ArrayElement[], comparing: number[] = [], swapping: number[] = [], sorted: number[] = []) => {\n      generatedSteps.push({\n        array: arr.map(el => ({ ...el })),\n        comparingIndices: [...comparing],\n        swappingIndices: [...swapping],\n        sortedIndices: [...sorted]\n      });\n    };\n\n    // Initial state\n    addStep(algorithmArray);\n\n    switch (algorithm) {\n      case 'bubble': {\n        const arr = [...algorithmArray];\n        const n = arr.length;\n        const sortedSet = new Set<number>();\n\n        for (let i = 0; i < n - 1; i++) {\n          for (let j = 0; j < n - i - 1; j++) {\n            // Comparing\n            addStep(arr, [j, j + 1], [], Array.from(sortedSet));\n\n            if (arr[j].value > arr[j + 1].value) {\n              // Swapping\n              addStep(arr, [], [j, j + 1], Array.from(sortedSet));\n              [arr[j], arr[j + 1]] = [arr[j + 1], arr[j]];\n              addStep(arr, [], [], Array.from(sortedSet));\n            }\n          }\n          sortedSet.add(n - i - 1);\n          addStep(arr, [], [], Array.from(sortedSet));\n        }\n        sortedSet.add(0);\n        addStep(arr, [], [], Array.from(sortedSet));\n        break;\n      }\n\n      case 'insertion': {\n        const arr = [...algorithmArray];\n        const n = arr.length;\n        const sortedSet = new Set<number>([0]);\n        addStep(arr, [], [], [0]);\n\n        for (let i = 1; i < n; i++) {\n          const key = arr[i];\n          let j = i - 1;\n\n          addStep(arr, [i], [], Array.from(sortedSet));\n\n          while (j >= 0 && arr[j].value > key.value) {\n            addStep(arr, [j, j + 1], [], Array.from(sortedSet));\n            addStep(arr, [], [j, j + 1], Array.from(sortedSet));\n            arr[j + 1] = arr[j];\n            addStep(arr, [], [], Array.from(sortedSet));\n            j--;\n          }\n\n          arr[j + 1] = key;\n          sortedSet.add(i);\n          addStep(arr, [], [], Array.from(sortedSet));\n        }\n        break;\n      }\n\n      case 'quick': {\n        const arr = [...algorithmArray];\n        const sortedSet = new Set<number>();\n\n        const partition = (low: number, high: number): number => {\n          const pivot = arr[high].value;\n          let i = low - 1;\n\n          addStep(arr, [high], [], Array.from(sortedSet));\n\n          for (let j = low; j < high; j++) {\n            addStep(arr, [j, high], [], Array.from(sortedSet));\n\n            if (arr[j].value < pivot) {\n              i++;\n              if (i !== j) {\n                addStep(arr, [], [i, j], Array.from(sortedSet));\n                [arr[i], arr[j]] = [arr[j], arr[i]];\n                addStep(arr, [], [], Array.from(sortedSet));\n              }\n            }\n          }\n\n          addStep(arr, [], [i + 1, high], Array.from(sortedSet));\n          [arr[i + 1], arr[high]] = [arr[high], arr[i + 1]];\n          sortedSet.add(i + 1);\n          addStep(arr, [], [], Array.from(sortedSet));\n\n          return i + 1;\n        };\n\n        const quickSort = (low: number, high: number) => {\n          if (low < high) {\n            const pi = partition(low, high);\n            quickSort(low, pi - 1);\n            quickSort(pi + 1, high);\n          } else if (low === high) {\n            sortedSet.add(low);\n            addStep(arr, [], [], Array.from(sortedSet));\n          }\n        };\n\n        quickSort(0, arr.length - 1);\n        break;\n      }\n\n      case 'merge': {\n        const arr = [...algorithmArray];\n        const sortedSet = new Set<number>();\n\n        const merge = (left: number, mid: number, right: number) => {\n          const leftArr = arr.slice(left, mid + 1);\n          const rightArr = arr.slice(mid + 1, right + 1);\n\n          let i = 0, j = 0, k = left;\n\n          while (i < leftArr.length && j < rightArr.length) {\n            addStep(arr, [left + i, mid + 1 + j], [], Array.from(sortedSet));\n\n            if (leftArr[i].value <= rightArr[j].value) {\n              arr[k] = leftArr[i];\n              i++;\n            } else {\n              arr[k] = rightArr[j];\n              j++;\n            }\n            addStep(arr, [], [k], Array.from(sortedSet));\n            k++;\n          }\n\n          while (i < leftArr.length) {\n            arr[k] = leftArr[i];\n            addStep(arr, [], [k], Array.from(sortedSet));\n            i++;\n            k++;\n          }\n\n          while (j < rightArr.length) {\n            arr[k] = rightArr[j];\n            addStep(arr, [], [k], Array.from(sortedSet));\n            j++;\n            k++;\n          }\n\n          if (right - left + 1 === arr.length) {\n            for (let idx = left; idx <= right; idx++) {\n              sortedSet.add(idx);\n            }\n          }\n          addStep(arr, [], [], Array.from(sortedSet));\n        };\n\n        const mergeSort = (left: number, right: number) => {\n          if (left < right) {\n            const mid = Math.floor((left + right) / 2);\n            mergeSort(left, mid);\n            mergeSort(mid + 1, right);\n            merge(left, mid, right);\n          }\n        };\n\n        mergeSort(0, arr.length - 1);\n        \n        for (let i = 0; i < arr.length; i++) {\n          sortedSet.add(i);\n        }\n        addStep(arr, [], [], Array.from(sortedSet));\n        break;\n      }\n    }\n\n    setSteps(generatedSteps);\n    setCurrentStep(0);\n  }, [array]);\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-gray-900 via-purple-900 to-gray-900 p-8\">\n      <div className=\"max-w-7xl mx-auto space-y-8\">\n        \n        <motion.div\n          initial={{ opacity: 0, y: -20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.8, ease: \"easeOut\" }}\n          className=\"text-center space-y-6\"\n        >\n          <motion.h1\n            className=\"text-6xl font-bold bg-gradient-to-r from-cyan-400 via-purple-400 to-pink-400 bg-clip-text text-transparent\"\n            animate={{\n              textShadow: [\n                \"0 0 20px rgba(0, 255, 255, 0.5)\",\n                \"0 0 40px rgba(255, 0, 255, 0.5)\",\n                \"0 0 20px rgba(0, 255, 255, 0.5)\",\n              ],\n            }}\n            transition={{ duration: 2, repeat: Infinity, ease: \"easeInOut\" }}\n          >\n            Algorithm Visualizer\n          </motion.h1>\n\n          <div className=\"flex items-center justify-center gap-6 flex-wrap\">\n            <div className=\"flex items-center gap-3\">\n              <Zap className=\"w-5 h-5 text-cyan-400\" />\n              <span className=\"text-gray-300 font-medium\">Algorithm:</span>\n              <Select\n                value={selectedAlgorithm}\n                onValueChange={(value) => setSelectedAlgorithm(value as AlgorithmType)}\n              >\n                <SelectTrigger className=\"w-[200px] bg-gray-800/50 border-purple-500/50 text-white hover:border-purple-400 transition-colors\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent className=\"bg-gray-800 border-purple-500/50\">\n                  {mockAlgorithms.map((algo) => (\n                    <SelectItem\n                      key={algo.id}\n                      value={algo.id}\n                      className=\"text-white hover:bg-purple-500/20 focus:bg-purple-500/30\"\n                    >\n                      {algo.name}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n\n            <motion.div\n              initial={{ scale: 0.9 }}\n              animate={{ scale: 1 }}\n              transition={{ duration: 0.3 }}\n            >\n              <Badge\n                variant=\"outline\"\n                className=\"px-4 py-2 text-sm font-mono border-cyan-400/50 text-cyan-300 bg-cyan-400/10\"\n              >\n                <BarChart3 className=\"w-4 h-4 mr-2 inline\" />\n                Complexity:{\" \"}\n                {mockAlgorithms.find((a) => a.id === selectedAlgorithm)?.complexity}\n              </Badge>\n            </motion.div>\n          </div>\n        </motion.div>\n\n        <motion.div \n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.6, delay: 0.2 }}\n          className=\"bg-gray-900/50 backdrop-blur-xl border border-cyan-500/30 rounded-2xl p-6 shadow-2xl shadow-cyan-500/20\"\n        >\n          <div className=\"flex flex-wrap items-center justify-center gap-6\">\n            {/* Play/Pause and Reset Controls */}\n            <div className=\"flex items-center gap-3\">\n              <Button\n                onClick={isPlaying ? pauseVisualization : startVisualization}\n                disabled={steps.length === 0}\n                className=\"relative group bg-gradient-to-r from-cyan-500 to-blue-500 hover:from-cyan-400 hover:to-blue-400 text-white px-6 py-6 rounded-xl transition-all duration-300 shadow-lg shadow-cyan-500/50 hover:shadow-cyan-400/70 disabled:opacity-50 disabled:cursor-not-allowed\"\n              >\n                <div className=\"absolute inset-0 bg-white/20 rounded-xl opacity-0 group-hover:opacity-100 transition-opacity duration-300\" />\n                {isPlaying ? (\n                  <Pause className=\"w-5 h-5\" />\n                ) : (\n                  <Play className=\"w-5 h-5 ml-0.5\" />\n                )}\n              </Button>\n\n              <Button\n                onClick={resetVisualization}\n                className=\"relative group bg-gradient-to-r from-purple-500 to-pink-500 hover:from-purple-400 hover:to-pink-400 text-white px-6 py-6 rounded-xl transition-all duration-300 shadow-lg shadow-purple-500/50 hover:shadow-purple-400/70\"\n              >\n                <div className=\"absolute inset-0 bg-white/20 rounded-xl opacity-0 group-hover:opacity-100 transition-opacity duration-300\" />\n                <RotateCcw className=\"w-5 h-5\" />\n              </Button>\n            </div>\n\n            {/* Speed Control */}\n            <div className=\"flex items-center gap-4 min-w-[240px]\">\n              <div className=\"flex items-center gap-2\">\n                <Zap className=\"w-5 h-5 text-yellow-400\" />\n                <span className=\"text-sm font-medium text-cyan-300 whitespace-nowrap\">Speed</span>\n              </div>\n              <div className=\"flex-1 relative\">\n                <Slider\n                  value={speed}\n                  onValueChange={setSpeed}\n                  min={10}\n                  max={100}\n                  step={10}\n                  className=\"cursor-pointer\"\n                />\n                <div className=\"absolute -top-6 right-0 text-xs text-cyan-400 font-mono\">\n                  {speed[0]}%\n                </div>\n              </div>\n            </div>\n\n            {/* Array Size Control */}\n            <div className=\"flex items-center gap-4 min-w-[240px]\">\n              <div className=\"flex items-center gap-2\">\n                <BarChart3 className=\"w-5 h-5 text-green-400\" />\n                <span className=\"text-sm font-medium text-cyan-300 whitespace-nowrap\">Size</span>\n              </div>\n              <div className=\"flex-1 relative\">\n                <Slider\n                  value={arraySize}\n                  onValueChange={(value) => {\n                    setArraySize(value);\n                    if (!isPlaying) {\n                      generateRandomArray();\n                    }\n                  }}\n                  min={5}\n                  max={50}\n                  step={5}\n                  className=\"cursor-pointer\"\n                />\n                <div className=\"absolute -top-6 right-0 text-xs text-green-400 font-mono\">\n                  {arraySize[0]}\n                </div>\n              </div>\n            </div>\n          </div>\n\n          {/* Progress Indicator */}\n          {steps.length > 0 && (\n            <div className=\"mt-6 pt-6 border-t border-cyan-500/20\">\n              <div className=\"flex items-center justify-between mb-2\">\n                <span className=\"text-xs text-cyan-300 font-medium\">Progress</span>\n                <span className=\"text-xs text-cyan-400 font-mono\">\n                  {currentStep} / {steps.length}\n                </span>\n              </div>\n              <div className=\"w-full h-2 bg-gray-800 rounded-full overflow-hidden\">\n                <motion.div\n                  className=\"h-full bg-gradient-to-r from-cyan-500 via-blue-500 to-purple-500\"\n                  initial={{ width: 0 }}\n                  animate={{ width: `${(currentStep / steps.length) * 100}%` }}\n                  transition={{ duration: 0.3 }}\n                />\n              </div>\n            </div>\n          )}\n        </motion.div>\n\n        <div className=\"relative bg-gray-900/50 backdrop-blur-sm rounded-2xl border border-purple-500/30 p-8 overflow-hidden\">\n          {/* Neon grid background */}\n          <div className=\"absolute inset-0 opacity-20\">\n            <div className=\"absolute inset-0\" style={{\n              backgroundImage: `\n                linear-gradient(to right, #00ffff 1px, transparent 1px),\n                linear-gradient(to bottom, #00ffff 1px, transparent 1px)\n              `,\n              backgroundSize: '40px 40px'\n            }} />\n          </div>\n\n          {/* Visualization bars container */}\n          <div className=\"relative h-96 flex items-end justify-center gap-1 px-4\">\n            {array.length === 0 ? (\n              <div className=\"absolute inset-0 flex items-center justify-center\">\n                <div className=\"text-center space-y-4\">\n                  <BarChart3 className=\"w-16 h-16 mx-auto text-purple-400 opacity-50\" />\n                  <p className=\"text-purple-300 text-lg\">Generate an array to start visualizing</p>\n                </div>\n              </div>\n            ) : (\n              array.map((element, index) => {\n                const maxValue = Math.max(...array.map(el => el.value));\n                const heightPercentage = (element.value / maxValue) * 100;\n                const isComparing = element.isComparing;\n                const isSwapping = element.isSwapping;\n                const isSorted = element.isSorted;\n\n                return (\n                  <motion.div\n                    key={element.id}\n                    className=\"relative flex-1 min-w-0 rounded-t-lg\"\n                    initial={{ height: 0, opacity: 0 }}\n                    animate={{\n                      height: `${heightPercentage}%`,\n                      opacity: 1,\n                      scale: isSwapping ? 1.1 : 1,\n                      y: isSwapping ? -10 : 0\n                    }}\n                    transition={{\n                      height: { duration: 0.3, ease: \"easeOut\" },\n                      scale: { duration: 0.2 },\n                      y: { duration: 0.2 }\n                    }}\n                    style={{\n                      backgroundColor: isSorted \n                        ? '#00ff00' \n                        : isComparing \n                        ? '#ff00ff' \n                        : isSwapping \n                        ? '#ffff00' \n                        : NEON_COLORS[index % NEON_COLORS.length],\n                      boxShadow: isComparing \n                        ? '0 0 20px #ff00ff, 0 0 40px #ff00ff' \n                        : isSwapping \n                        ? '0 0 20px #ffff00, 0 0 40px #ffff00'\n                        : isSorted\n                        ? '0 0 15px #00ff00'\n                        : `0 0 10px ${NEON_COLORS[index % NEON_COLORS.length]}`\n                    }}\n                  >\n                    {/* Trail effect for swapping */}\n                    {isSwapping && (\n                      <motion.div\n                        className=\"absolute inset-0 rounded-t-lg\"\n                        initial={{ opacity: 0.8 }}\n                        animate={{ opacity: 0, scale: 1.5 }}\n                        transition={{ duration: 0.5, repeat: Infinity }}\n                        style={{\n                          backgroundColor: '#ffff00',\n                          filter: 'blur(8px)'\n                        }}\n                      />\n                    )}\n\n                    {/* Value label */}\n                    {array.length <= 30 && (\n                      <div className=\"absolute -top-6 left-1/2 transform -translate-x-1/2 text-xs font-bold text-white whitespace-nowrap\">\n                        {element.value}\n                      </div>\n                    )}\n                  </motion.div>\n                );\n              })\n            )}\n          </div>\n\n          {/* Glowing bottom border */}\n          <div className=\"absolute bottom-0 left-0 right-0 h-1 bg-gradient-to-r from-cyan-500 via-purple-500 to-pink-500\" \n               style={{ boxShadow: '0 0 20px rgba(168, 85, 247, 0.8)' }} />\n        </div>\n\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.6, delay: 0.4 }}\n          className=\"grid grid-cols-1 md:grid-cols-3 gap-6\"\n        >\n          {/* Comparisons Stat */}\n          <div className=\"relative group\">\n            <div className=\"absolute inset-0 bg-gradient-to-r from-cyan-500/20 to-blue-500/20 rounded-xl blur-xl group-hover:blur-2xl transition-all duration-300\" />\n            <div className=\"relative bg-gray-900/80 backdrop-blur-sm border border-cyan-500/30 rounded-xl p-6 hover:border-cyan-400/50 transition-all duration-300\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <div className=\"p-3 bg-cyan-500/10 rounded-lg\">\n                  <Activity className=\"w-6 h-6 text-cyan-400\" />\n                </div>\n                <motion.div\n                  key={comparisons}\n                  initial={{ scale: 1.5, opacity: 0 }}\n                  animate={{ scale: 1, opacity: 1 }}\n                  className=\"text-3xl font-bold text-cyan-400\"\n                >\n                  {comparisons}\n                </motion.div>\n              </div>\n              <div className=\"space-y-1\">\n                <h3 className=\"text-sm font-medium text-gray-400\">Comparisons</h3>\n                <div className=\"h-1 bg-gray-800 rounded-full overflow-hidden\">\n                  <motion.div\n                    className=\"h-full bg-gradient-to-r from-cyan-500 to-blue-500\"\n                    initial={{ width: 0 }}\n                    animate={{ width: `${Math.min((comparisons / (steps.length || 1)) * 100, 100)}%` }}\n                    transition={{ duration: 0.3 }}\n                  />\n                </div>\n              </div>\n            </div>\n          </div>\n\n          {/* Swaps Stat */}\n          <div className=\"relative group\">\n            <div className=\"absolute inset-0 bg-gradient-to-r from-purple-500/20 to-pink-500/20 rounded-xl blur-xl group-hover:blur-2xl transition-all duration-300\" />\n            <div className=\"relative bg-gray-900/80 backdrop-blur-sm border border-purple-500/30 rounded-xl p-6 hover:border-purple-400/50 transition-all duration-300\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <div className=\"p-3 bg-purple-500/10 rounded-lg\">\n                  <Shuffle className=\"w-6 h-6 text-purple-400\" />\n                </div>\n                <motion.div\n                  key={swaps}\n                  initial={{ scale: 1.5, opacity: 0 }}\n                  animate={{ scale: 1, opacity: 1 }}\n                  className=\"text-3xl font-bold text-purple-400\"\n                >\n                  {swaps}\n                </motion.div>\n              </div>\n              <div className=\"space-y-1\">\n                <h3 className=\"text-sm font-medium text-gray-400\">Swaps</h3>\n                <div className=\"h-1 bg-gray-800 rounded-full overflow-hidden\">\n                  <motion.div\n                    className=\"h-full bg-gradient-to-r from-purple-500 to-pink-500\"\n                    initial={{ width: 0 }}\n                    animate={{ width: `${Math.min((swaps / (steps.length || 1)) * 100, 100)}%` }}\n                    transition={{ duration: 0.3 }}\n                  />\n                </div>\n              </div>\n            </div>\n          </div>\n\n          {/* Current Step Stat */}\n          <div className=\"relative group\">\n            <div className=\"absolute inset-0 bg-gradient-to-r from-green-500/20 to-emerald-500/20 rounded-xl blur-xl group-hover:blur-2xl transition-all duration-300\" />\n            <div className=\"relative bg-gray-900/80 backdrop-blur-sm border border-green-500/30 rounded-xl p-6 hover:border-green-400/50 transition-all duration-300\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <div className=\"p-3 bg-green-500/10 rounded-lg\">\n                  <TrendingUp className=\"w-6 h-6 text-green-400\" />\n                </div>\n                <motion.div\n                  key={currentStep}\n                  initial={{ scale: 1.5, opacity: 0 }}\n                  animate={{ scale: 1, opacity: 1 }}\n                  className=\"text-3xl font-bold text-green-400\"\n                >\n                  {currentStep}\n                </motion.div>\n              </div>\n              <div className=\"space-y-1\">\n                <h3 className=\"text-sm font-medium text-gray-400\">\n                  Current Step\n                  <span className=\"text-xs ml-2 text-gray-500\">\n                    / {steps.length}\n                  </span>\n                </h3>\n                <div className=\"h-1 bg-gray-800 rounded-full overflow-hidden\">\n                  <motion.div\n                    className=\"h-full bg-gradient-to-r from-green-500 to-emerald-500\"\n                    initial={{ width: 0 }}\n                    animate={{ width: `${steps.length > 0 ? (currentStep / steps.length) * 100 : 0}%` }}\n                    transition={{ duration: 0.3 }}\n                  />\n                </div>\n              </div>\n            </div>\n          </div>\n        </motion.div>\n      </div>\n    </div>\n  );\n}",
  "error": null,
  "overall_score": 46,
  "code_quality_score": 14,
  "architecture_score": 12,
  "performance_score": 11,
  "accessibility_score": 9,
  "metadata": {
    "document_id": "eval_room_0c5231cf84c6",
    "prompt_category": "creative",
    "prompt_complexity": 9.0
  },
  "raw_response": {
    "document_id": "eval_room_0c5231cf84c6",
    "mode": "parallel",
    "prompt": "Build a captivating algorithm visualizer with neon colored bars, smooth height transitions, glowing comparison indicators, trail effects during swaps, and a futuristic dashboard design with animated controls",
    "content": "import { useState, useCallback } from 'react';\nimport { useEffect } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Slider } from '@/components/ui/slider';\nimport { Play, Pause, RotateCcw, Zap, BarChart3 } from 'lucide-react';\nimport { Activity, TrendingUp, Shuffle } from 'lucide-react';\nimport { motion } from 'framer-motion';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select';\nimport { Badge } from '@/components/ui/badge';\n\n\ninterface ArrayElement {\n  value: number;\n  id: string;\n  isComparing?: boolean;\n  isSwapping?: boolean;\n  isSorted?: boolean;\n}\n\ninterface AlgorithmStep {\n  array: ArrayElement[];\n  comparingIndices: number[];\n  swappingIndices: number[];\n  sortedIndices: number[];\n}\n\ntype AlgorithmType = 'bubble' | 'quick' | 'merge' | 'insertion';\n\nconst NEON_COLORS = [\n  '#00ffff',\n  '#ff00ff', \n  '#00ff00',\n  '#ffff00',\n  '#ff0066',\n  '#00ffaa'\n];\n\nconst mockAlgorithms = [\n  { id: 'bubble', name: 'Bubble Sort', complexity: 'O(n\u00b2)' },\n  { id: 'quick', name: 'Quick Sort', complexity: 'O(n log n)' },\n  { id: 'merge', name: 'Merge Sort', complexity: 'O(n log n)' },\n  { id: 'insertion', name: 'Insertion Sort', complexity: 'O(n\u00b2)' }\n];\n\nconst useAnimationLoop = (\n  isPlaying: boolean,\n  steps: AlgorithmStep[],\n  currentStep: number,\n  speed: number[],\n  onStepComplete: () => void,\n  onAnimationEnd: () => void\n) => {\n  const [animationId, setAnimationId] = useState<NodeJS.Timeout | null>(null);\n\n  const cleanup = useCallback(() => {\n    if (animationId) {\n      clearTimeout(animationId);\n      setAnimationId(null);\n    }\n  }, [animationId]);\n\n  const animate = useCallback(() => {\n    if (currentStep < steps.length - 1) {\n      const delay = 1000 - speed[0] * 9.5; // Convert speed (0-100) to delay (1000ms-50ms)\n      const id = setTimeout(() => {\n        onStepComplete();\n      }, delay);\n      setAnimationId(id);\n    } else {\n      onAnimationEnd();\n    }\n  }, [currentStep, steps.length, speed, onStepComplete, onAnimationEnd]);\n\n  // Start/stop animation based on isPlaying\n  if (isPlaying && currentStep < steps.length - 1) {\n    animate();\n  } else if (!isPlaying) {\n    cleanup();\n  }\n\n  return cleanup;\n};\nexport default function AlgorithmVisualizer() {\n  const [array, setArray] = useState<ArrayElement[]>([]);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [speed, setSpeed] = useState([50]);\n  const [arraySize, setArraySize] = useState([20]);\n  const [selectedAlgorithm, setSelectedAlgorithm] = useState<AlgorithmType>('bubble');\n  const [currentStep, setCurrentStep] = useState(0);\n  const [steps, setSteps] = useState<AlgorithmStep[]>([]);\n\n  // Animation effect\n  useEffect(() => {\n    if (isPlaying && currentStep < steps.length - 1) {\n      const delay = 1000 - speed[0] * 9.5; // Convert speed (0-100) to delay (1000ms-50ms)\n      const timer = setTimeout(() => {\n        setCurrentStep(prev => prev + 1);\n      }, delay);\n      return () => clearTimeout(timer);\n    } else if (currentStep >= steps.length - 1 && steps.length > 0) {\n      setIsPlaying(false);\n    }\n  }, [isPlaying, currentStep, steps.length, speed]);\n\n  // Update array display based on current step\n  useEffect(() => {\n    if (steps.length > 0 && currentStep < steps.length) {\n      setArray(steps[currentStep].array);\n    }\n  }, [currentStep, steps]);\n  const [comparisons, setComparisons] = useState(0);\n  const [swaps, setSwaps] = useState(0);\n\n  const generateRandomArray = useCallback(() => {\n    const newArray: ArrayElement[] = Array.from({ length: arraySize[0] }, (_, index) => ({\n      value: Math.floor(Math.random() * 100) + 5,\n      id: `element-${index}-${Date.now()}`,\n      isComparing: false,\n      isSwapping: false,\n      isSorted: false\n    }));\n    setArray(newArray);\n    setSteps([]);\n    setCurrentStep(0);\n    setIsPlaying(false);\n  }, [arraySize]);\n\n  const resetVisualization = useCallback(() => {\n\n    setIsPlaying(false);\n    setCurrentStep(0);\n    setSteps([]);\n    generateRandomArray();\n  }, [generateRandomArray]);\n\n  const startVisualization = useCallback(() => {\n    if (steps.length === 0) return;\n    if (currentStep >= steps.length - 1) {\n      setCurrentStep(0);\n    }\n    setIsPlaying(true);\n    \n  }, [steps, speed, currentStep]);\n\n  const pauseVisualization = useCallback(() => {    setIsPlaying(false);\n  }, []);\n\n  const generateSortingSteps = useCallback((algorithm: AlgorithmType) => {\n    const algorithmArray = [...array];\n    const generatedSteps: AlgorithmStep[] = [];\n\n    const addStep = (arr: ArrayElement[], comparing: number[] = [], swapping: number[] = [], sorted: number[] = []) => {\n      generatedSteps.push({\n        array: arr.map(el => ({ ...el })),\n        comparingIndices: [...comparing],\n        swappingIndices: [...swapping],\n        sortedIndices: [...sorted]\n      });\n    };\n\n    // Initial state\n    addStep(algorithmArray);\n\n    switch (algorithm) {\n      case 'bubble': {\n        const arr = [...algorithmArray];\n        const n = arr.length;\n        const sortedSet = new Set<number>();\n\n        for (let i = 0; i < n - 1; i++) {\n          for (let j = 0; j < n - i - 1; j++) {\n            // Comparing\n            addStep(arr, [j, j + 1], [], Array.from(sortedSet));\n\n            if (arr[j].value > arr[j + 1].value) {\n              // Swapping\n              addStep(arr, [], [j, j + 1], Array.from(sortedSet));\n              [arr[j], arr[j + 1]] = [arr[j + 1], arr[j]];\n              addStep(arr, [], [], Array.from(sortedSet));\n            }\n          }\n          sortedSet.add(n - i - 1);\n          addStep(arr, [], [], Array.from(sortedSet));\n        }\n        sortedSet.add(0);\n        addStep(arr, [], [], Array.from(sortedSet));\n        break;\n      }\n\n      case 'insertion': {\n        const arr = [...algorithmArray];\n        const n = arr.length;\n        const sortedSet = new Set<number>([0]);\n        addStep(arr, [], [], [0]);\n\n        for (let i = 1; i < n; i++) {\n          const key = arr[i];\n          let j = i - 1;\n\n          addStep(arr, [i], [], Array.from(sortedSet));\n\n          while (j >= 0 && arr[j].value > key.value) {\n            addStep(arr, [j, j + 1], [], Array.from(sortedSet));\n            addStep(arr, [], [j, j + 1], Array.from(sortedSet));\n            arr[j + 1] = arr[j];\n            addStep(arr, [], [], Array.from(sortedSet));\n            j--;\n          }\n\n          arr[j + 1] = key;\n          sortedSet.add(i);\n          addStep(arr, [], [], Array.from(sortedSet));\n        }\n        break;\n      }\n\n      case 'quick': {\n        const arr = [...algorithmArray];\n        const sortedSet = new Set<number>();\n\n        const partition = (low: number, high: number): number => {\n          const pivot = arr[high].value;\n          let i = low - 1;\n\n          addStep(arr, [high], [], Array.from(sortedSet));\n\n          for (let j = low; j < high; j++) {\n            addStep(arr, [j, high], [], Array.from(sortedSet));\n\n            if (arr[j].value < pivot) {\n              i++;\n              if (i !== j) {\n                addStep(arr, [], [i, j], Array.from(sortedSet));\n                [arr[i], arr[j]] = [arr[j], arr[i]];\n                addStep(arr, [], [], Array.from(sortedSet));\n              }\n            }\n          }\n\n          addStep(arr, [], [i + 1, high], Array.from(sortedSet));\n          [arr[i + 1], arr[high]] = [arr[high], arr[i + 1]];\n          sortedSet.add(i + 1);\n          addStep(arr, [], [], Array.from(sortedSet));\n\n          return i + 1;\n        };\n\n        const quickSort = (low: number, high: number) => {\n          if (low < high) {\n            const pi = partition(low, high);\n            quickSort(low, pi - 1);\n            quickSort(pi + 1, high);\n          } else if (low === high) {\n            sortedSet.add(low);\n            addStep(arr, [], [], Array.from(sortedSet));\n          }\n        };\n\n        quickSort(0, arr.length - 1);\n        break;\n      }\n\n      case 'merge': {\n        const arr = [...algorithmArray];\n        const sortedSet = new Set<number>();\n\n        const merge = (left: number, mid: number, right: number) => {\n          const leftArr = arr.slice(left, mid + 1);\n          const rightArr = arr.slice(mid + 1, right + 1);\n\n          let i = 0, j = 0, k = left;\n\n          while (i < leftArr.length && j < rightArr.length) {\n            addStep(arr, [left + i, mid + 1 + j], [], Array.from(sortedSet));\n\n            if (leftArr[i].value <= rightArr[j].value) {\n              arr[k] = leftArr[i];\n              i++;\n            } else {\n              arr[k] = rightArr[j];\n              j++;\n            }\n            addStep(arr, [], [k], Array.from(sortedSet));\n            k++;\n          }\n\n          while (i < leftArr.length) {\n            arr[k] = leftArr[i];\n            addStep(arr, [], [k], Array.from(sortedSet));\n            i++;\n            k++;\n          }\n\n          while (j < rightArr.length) {\n            arr[k] = rightArr[j];\n            addStep(arr, [], [k], Array.from(sortedSet));\n            j++;\n            k++;\n          }\n\n          if (right - left + 1 === arr.length) {\n            for (let idx = left; idx <= right; idx++) {\n              sortedSet.add(idx);\n            }\n          }\n          addStep(arr, [], [], Array.from(sortedSet));\n        };\n\n        const mergeSort = (left: number, right: number) => {\n          if (left < right) {\n            const mid = Math.floor((left + right) / 2);\n            mergeSort(left, mid);\n            mergeSort(mid + 1, right);\n            merge(left, mid, right);\n          }\n        };\n\n        mergeSort(0, arr.length - 1);\n        \n        for (let i = 0; i < arr.length; i++) {\n          sortedSet.add(i);\n        }\n        addStep(arr, [], [], Array.from(sortedSet));\n        break;\n      }\n    }\n\n    setSteps(generatedSteps);\n    setCurrentStep(0);\n  }, [array]);\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-gray-900 via-purple-900 to-gray-900 p-8\">\n      <div className=\"max-w-7xl mx-auto space-y-8\">\n        \n        <motion.div\n          initial={{ opacity: 0, y: -20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.8, ease: \"easeOut\" }}\n          className=\"text-center space-y-6\"\n        >\n          <motion.h1\n            className=\"text-6xl font-bold bg-gradient-to-r from-cyan-400 via-purple-400 to-pink-400 bg-clip-text text-transparent\"\n            animate={{\n              textShadow: [\n                \"0 0 20px rgba(0, 255, 255, 0.5)\",\n                \"0 0 40px rgba(255, 0, 255, 0.5)\",\n                \"0 0 20px rgba(0, 255, 255, 0.5)\",\n              ],\n            }}\n            transition={{ duration: 2, repeat: Infinity, ease: \"easeInOut\" }}\n          >\n            Algorithm Visualizer\n          </motion.h1>\n\n          <div className=\"flex items-center justify-center gap-6 flex-wrap\">\n            <div className=\"flex items-center gap-3\">\n              <Zap className=\"w-5 h-5 text-cyan-400\" />\n              <span className=\"text-gray-300 font-medium\">Algorithm:</span>\n              <Select\n                value={selectedAlgorithm}\n                onValueChange={(value) => setSelectedAlgorithm(value as AlgorithmType)}\n              >\n                <SelectTrigger className=\"w-[200px] bg-gray-800/50 border-purple-500/50 text-white hover:border-purple-400 transition-colors\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent className=\"bg-gray-800 border-purple-500/50\">\n                  {mockAlgorithms.map((algo) => (\n                    <SelectItem\n                      key={algo.id}\n                      value={algo.id}\n                      className=\"text-white hover:bg-purple-500/20 focus:bg-purple-500/30\"\n                    >\n                      {algo.name}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n\n            <motion.div\n              initial={{ scale: 0.9 }}\n              animate={{ scale: 1 }}\n              transition={{ duration: 0.3 }}\n            >\n              <Badge\n                variant=\"outline\"\n                className=\"px-4 py-2 text-sm font-mono border-cyan-400/50 text-cyan-300 bg-cyan-400/10\"\n              >\n                <BarChart3 className=\"w-4 h-4 mr-2 inline\" />\n                Complexity:{\" \"}\n                {mockAlgorithms.find((a) => a.id === selectedAlgorithm)?.complexity}\n              </Badge>\n            </motion.div>\n          </div>\n        </motion.div>\n\n        <motion.div \n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.6, delay: 0.2 }}\n          className=\"bg-gray-900/50 backdrop-blur-xl border border-cyan-500/30 rounded-2xl p-6 shadow-2xl shadow-cyan-500/20\"\n        >\n          <div className=\"flex flex-wrap items-center justify-center gap-6\">\n            {/* Play/Pause and Reset Controls */}\n            <div className=\"flex items-center gap-3\">\n              <Button\n                onClick={isPlaying ? pauseVisualization : startVisualization}\n                disabled={steps.length === 0}\n                className=\"relative group bg-gradient-to-r from-cyan-500 to-blue-500 hover:from-cyan-400 hover:to-blue-400 text-white px-6 py-6 rounded-xl transition-all duration-300 shadow-lg shadow-cyan-500/50 hover:shadow-cyan-400/70 disabled:opacity-50 disabled:cursor-not-allowed\"\n              >\n                <div className=\"absolute inset-0 bg-white/20 rounded-xl opacity-0 group-hover:opacity-100 transition-opacity duration-300\" />\n                {isPlaying ? (\n                  <Pause className=\"w-5 h-5\" />\n                ) : (\n                  <Play className=\"w-5 h-5 ml-0.5\" />\n                )}\n              </Button>\n\n              <Button\n                onClick={resetVisualization}\n                className=\"relative group bg-gradient-to-r from-purple-500 to-pink-500 hover:from-purple-400 hover:to-pink-400 text-white px-6 py-6 rounded-xl transition-all duration-300 shadow-lg shadow-purple-500/50 hover:shadow-purple-400/70\"\n              >\n                <div className=\"absolute inset-0 bg-white/20 rounded-xl opacity-0 group-hover:opacity-100 transition-opacity duration-300\" />\n                <RotateCcw className=\"w-5 h-5\" />\n              </Button>\n            </div>\n\n            {/* Speed Control */}\n            <div className=\"flex items-center gap-4 min-w-[240px]\">\n              <div className=\"flex items-center gap-2\">\n                <Zap className=\"w-5 h-5 text-yellow-400\" />\n                <span className=\"text-sm font-medium text-cyan-300 whitespace-nowrap\">Speed</span>\n              </div>\n              <div className=\"flex-1 relative\">\n                <Slider\n                  value={speed}\n                  onValueChange={setSpeed}\n                  min={10}\n                  max={100}\n                  step={10}\n                  className=\"cursor-pointer\"\n                />\n                <div className=\"absolute -top-6 right-0 text-xs text-cyan-400 font-mono\">\n                  {speed[0]}%\n                </div>\n              </div>\n            </div>\n\n            {/* Array Size Control */}\n            <div className=\"flex items-center gap-4 min-w-[240px]\">\n              <div className=\"flex items-center gap-2\">\n                <BarChart3 className=\"w-5 h-5 text-green-400\" />\n                <span className=\"text-sm font-medium text-cyan-300 whitespace-nowrap\">Size</span>\n              </div>\n              <div className=\"flex-1 relative\">\n                <Slider\n                  value={arraySize}\n                  onValueChange={(value) => {\n                    setArraySize(value);\n                    if (!isPlaying) {\n                      generateRandomArray();\n                    }\n                  }}\n                  min={5}\n                  max={50}\n                  step={5}\n                  className=\"cursor-pointer\"\n                />\n                <div className=\"absolute -top-6 right-0 text-xs text-green-400 font-mono\">\n                  {arraySize[0]}\n                </div>\n              </div>\n            </div>\n          </div>\n\n          {/* Progress Indicator */}\n          {steps.length > 0 && (\n            <div className=\"mt-6 pt-6 border-t border-cyan-500/20\">\n              <div className=\"flex items-center justify-between mb-2\">\n                <span className=\"text-xs text-cyan-300 font-medium\">Progress</span>\n                <span className=\"text-xs text-cyan-400 font-mono\">\n                  {currentStep} / {steps.length}\n                </span>\n              </div>\n              <div className=\"w-full h-2 bg-gray-800 rounded-full overflow-hidden\">\n                <motion.div\n                  className=\"h-full bg-gradient-to-r from-cyan-500 via-blue-500 to-purple-500\"\n                  initial={{ width: 0 }}\n                  animate={{ width: `${(currentStep / steps.length) * 100}%` }}\n                  transition={{ duration: 0.3 }}\n                />\n              </div>\n            </div>\n          )}\n        </motion.div>\n\n        <div className=\"relative bg-gray-900/50 backdrop-blur-sm rounded-2xl border border-purple-500/30 p-8 overflow-hidden\">\n          {/* Neon grid background */}\n          <div className=\"absolute inset-0 opacity-20\">\n            <div className=\"absolute inset-0\" style={{\n              backgroundImage: `\n                linear-gradient(to right, #00ffff 1px, transparent 1px),\n                linear-gradient(to bottom, #00ffff 1px, transparent 1px)\n              `,\n              backgroundSize: '40px 40px'\n            }} />\n          </div>\n\n          {/* Visualization bars container */}\n          <div className=\"relative h-96 flex items-end justify-center gap-1 px-4\">\n            {array.length === 0 ? (\n              <div className=\"absolute inset-0 flex items-center justify-center\">\n                <div className=\"text-center space-y-4\">\n                  <BarChart3 className=\"w-16 h-16 mx-auto text-purple-400 opacity-50\" />\n                  <p className=\"text-purple-300 text-lg\">Generate an array to start visualizing</p>\n                </div>\n              </div>\n            ) : (\n              array.map((element, index) => {\n                const maxValue = Math.max(...array.map(el => el.value));\n                const heightPercentage = (element.value / maxValue) * 100;\n                const isComparing = element.isComparing;\n                const isSwapping = element.isSwapping;\n                const isSorted = element.isSorted;\n\n                return (\n                  <motion.div\n                    key={element.id}\n                    className=\"relative flex-1 min-w-0 rounded-t-lg\"\n                    initial={{ height: 0, opacity: 0 }}\n                    animate={{\n                      height: `${heightPercentage}%`,\n                      opacity: 1,\n                      scale: isSwapping ? 1.1 : 1,\n                      y: isSwapping ? -10 : 0\n                    }}\n                    transition={{\n                      height: { duration: 0.3, ease: \"easeOut\" },\n                      scale: { duration: 0.2 },\n                      y: { duration: 0.2 }\n                    }}\n                    style={{\n                      backgroundColor: isSorted \n                        ? '#00ff00' \n                        : isComparing \n                        ? '#ff00ff' \n                        : isSwapping \n                        ? '#ffff00' \n                        : NEON_COLORS[index % NEON_COLORS.length],\n                      boxShadow: isComparing \n                        ? '0 0 20px #ff00ff, 0 0 40px #ff00ff' \n                        : isSwapping \n                        ? '0 0 20px #ffff00, 0 0 40px #ffff00'\n                        : isSorted\n                        ? '0 0 15px #00ff00'\n                        : `0 0 10px ${NEON_COLORS[index % NEON_COLORS.length]}`\n                    }}\n                  >\n                    {/* Trail effect for swapping */}\n                    {isSwapping && (\n                      <motion.div\n                        className=\"absolute inset-0 rounded-t-lg\"\n                        initial={{ opacity: 0.8 }}\n                        animate={{ opacity: 0, scale: 1.5 }}\n                        transition={{ duration: 0.5, repeat: Infinity }}\n                        style={{\n                          backgroundColor: '#ffff00',\n                          filter: 'blur(8px)'\n                        }}\n                      />\n                    )}\n\n                    {/* Value label */}\n                    {array.length <= 30 && (\n                      <div className=\"absolute -top-6 left-1/2 transform -translate-x-1/2 text-xs font-bold text-white whitespace-nowrap\">\n                        {element.value}\n                      </div>\n                    )}\n                  </motion.div>\n                );\n              })\n            )}\n          </div>\n\n          {/* Glowing bottom border */}\n          <div className=\"absolute bottom-0 left-0 right-0 h-1 bg-gradient-to-r from-cyan-500 via-purple-500 to-pink-500\" \n               style={{ boxShadow: '0 0 20px rgba(168, 85, 247, 0.8)' }} />\n        </div>\n\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.6, delay: 0.4 }}\n          className=\"grid grid-cols-1 md:grid-cols-3 gap-6\"\n        >\n          {/* Comparisons Stat */}\n          <div className=\"relative group\">\n            <div className=\"absolute inset-0 bg-gradient-to-r from-cyan-500/20 to-blue-500/20 rounded-xl blur-xl group-hover:blur-2xl transition-all duration-300\" />\n            <div className=\"relative bg-gray-900/80 backdrop-blur-sm border border-cyan-500/30 rounded-xl p-6 hover:border-cyan-400/50 transition-all duration-300\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <div className=\"p-3 bg-cyan-500/10 rounded-lg\">\n                  <Activity className=\"w-6 h-6 text-cyan-400\" />\n                </div>\n                <motion.div\n                  key={comparisons}\n                  initial={{ scale: 1.5, opacity: 0 }}\n                  animate={{ scale: 1, opacity: 1 }}\n                  className=\"text-3xl font-bold text-cyan-400\"\n                >\n                  {comparisons}\n                </motion.div>\n              </div>\n              <div className=\"space-y-1\">\n                <h3 className=\"text-sm font-medium text-gray-400\">Comparisons</h3>\n                <div className=\"h-1 bg-gray-800 rounded-full overflow-hidden\">\n                  <motion.div\n                    className=\"h-full bg-gradient-to-r from-cyan-500 to-blue-500\"\n                    initial={{ width: 0 }}\n                    animate={{ width: `${Math.min((comparisons / (steps.length || 1)) * 100, 100)}%` }}\n                    transition={{ duration: 0.3 }}\n                  />\n                </div>\n              </div>\n            </div>\n          </div>\n\n          {/* Swaps Stat */}\n          <div className=\"relative group\">\n            <div className=\"absolute inset-0 bg-gradient-to-r from-purple-500/20 to-pink-500/20 rounded-xl blur-xl group-hover:blur-2xl transition-all duration-300\" />\n            <div className=\"relative bg-gray-900/80 backdrop-blur-sm border border-purple-500/30 rounded-xl p-6 hover:border-purple-400/50 transition-all duration-300\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <div className=\"p-3 bg-purple-500/10 rounded-lg\">\n                  <Shuffle className=\"w-6 h-6 text-purple-400\" />\n                </div>\n                <motion.div\n                  key={swaps}\n                  initial={{ scale: 1.5, opacity: 0 }}\n                  animate={{ scale: 1, opacity: 1 }}\n                  className=\"text-3xl font-bold text-purple-400\"\n                >\n                  {swaps}\n                </motion.div>\n              </div>\n              <div className=\"space-y-1\">\n                <h3 className=\"text-sm font-medium text-gray-400\">Swaps</h3>\n                <div className=\"h-1 bg-gray-800 rounded-full overflow-hidden\">\n                  <motion.div\n                    className=\"h-full bg-gradient-to-r from-purple-500 to-pink-500\"\n                    initial={{ width: 0 }}\n                    animate={{ width: `${Math.min((swaps / (steps.length || 1)) * 100, 100)}%` }}\n                    transition={{ duration: 0.3 }}\n                  />\n                </div>\n              </div>\n            </div>\n          </div>\n\n          {/* Current Step Stat */}\n          <div className=\"relative group\">\n            <div className=\"absolute inset-0 bg-gradient-to-r from-green-500/20 to-emerald-500/20 rounded-xl blur-xl group-hover:blur-2xl transition-all duration-300\" />\n            <div className=\"relative bg-gray-900/80 backdrop-blur-sm border border-green-500/30 rounded-xl p-6 hover:border-green-400/50 transition-all duration-300\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <div className=\"p-3 bg-green-500/10 rounded-lg\">\n                  <TrendingUp className=\"w-6 h-6 text-green-400\" />\n                </div>\n                <motion.div\n                  key={currentStep}\n                  initial={{ scale: 1.5, opacity: 0 }}\n                  animate={{ scale: 1, opacity: 1 }}\n                  className=\"text-3xl font-bold text-green-400\"\n                >\n                  {currentStep}\n                </motion.div>\n              </div>\n              <div className=\"space-y-1\">\n                <h3 className=\"text-sm font-medium text-gray-400\">\n                  Current Step\n                  <span className=\"text-xs ml-2 text-gray-500\">\n                    / {steps.length}\n                  </span>\n                </h3>\n                <div className=\"h-1 bg-gray-800 rounded-full overflow-hidden\">\n                  <motion.div\n                    className=\"h-full bg-gradient-to-r from-green-500 to-emerald-500\"\n                    initial={{ width: 0 }}\n                    animate={{ width: `${steps.length > 0 ? (currentStep / steps.length) * 100 : 0}%` }}\n                    transition={{ duration: 0.3 }}\n                  />\n                </div>\n              </div>\n            </div>\n          </div>\n        </motion.div>\n      </div>\n    </div>\n  );\n}",
    "error": null,
    "elapsed_time": 59.3190131187439,
    "success": true
  }
}