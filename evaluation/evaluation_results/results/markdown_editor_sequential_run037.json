{
  "prompt_id": "markdown_editor",
  "prompt_name": "Premium Markdown Editor",
  "mode": "sequential",
  "run_number": 37,
  "timestamp": "2025-10-13T19:54:23.024998",
  "response_time": 69.33212542533875,
  "total_tokens": null,
  "response_content": "import { useState, useEffect, useRef } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Bold, Italic, Code, List, ListOrdered, Link2, Image, Eye, EyeOff, Heading1, Heading2, Quote } from 'lucide-react';\nimport { motion, AnimatePresence } from 'framer-motion';\n\nexport default function MarkdownEditor() {\n  const [markdown, setMarkdown] = useState(`# Welcome to Premium Markdown Editor\n\n## Features\n- **Bold** and *italic* text\n- \\`Inline code\\` with syntax highlighting\n- Code blocks with VS Code styling\n- Live preview with smooth transitions\n\n### Code Example\n\n\\`\\`\\`javascript\nfunction greet(name) {\n  console.log(\\`Hello, \\${name}!\\`);\n  return true;\n}\n\nconst user = \"Developer\";\ngreet(user);\n\\`\\`\\`\n\n### Lists\n1. First item\n2. Second item\n3. Third item\n\n- Bullet point\n- Another point\n  - Nested item\n\n> This is a blockquote with **bold** text\n\n[Link to example](https://example.com)\n\n![Image description](https://via.placeholder.com/400x200)\n`);\n  \n  const [showPreview, setShowPreview] = useState(true);\n  const [cursorPosition, setCursorPosition] = useState(0);\n  const [showToolbar, setShowToolbar] = useState(false);\n  const textareaRef = useRef<HTMLTextAreaElement>(null);\n  const editorRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    const handleScroll = () => {\n      if (window.scrollY > 100) {\n        setShowToolbar(true);\n      } else {\n        setShowToolbar(false);\n      }\n    };\n\n    window.addEventListener('scroll', handleScroll);\n    return () => window.removeEventListener('scroll', handleScroll);\n  }, []);\n\n  const insertMarkdown = (before: string, after: string = '') => {\n    const textarea = textareaRef.current;\n    if (!textarea) return;\n\n    const start = textarea.selectionStart;\n    const end = textarea.selectionEnd;\n    const selectedText = markdown.substring(start, end);\n    const newText = markdown.substring(0, start) + before + selectedText + after + markdown.substring(end);\n    \n    setMarkdown(newText);\n    \n    setTimeout(() => {\n      textarea.focus();\n      textarea.setSelectionRange(start + before.length, start + before.length + selectedText.length);\n    }, 0);\n  };\n\n  const parseMarkdown = (text: string): string => {\n    let html = text;\n\n    // Code blocks with syntax highlighting\n    html = html.replace(/```(\\w+)?\\n([\\s\\S]*?)```/g, (_, lang, code) => {\n      const highlighted = highlightCode(code.trim(), lang || 'javascript');\n      return `<pre class=\"code-block\"><code class=\"language-${lang || 'javascript'}\">${highlighted}</code></pre>`;\n    });\n\n    // Inline code\n    html = html.replace(/`([^`]+)`/g, '<code class=\"inline-code\">$1</code>');\n\n    // Headers\n    html = html.replace(/^### (.*$)/gim, '<h3 class=\"header-3\">$1</h3>');\n    html = html.replace(/^## (.*$)/gim, '<h2 class=\"header-2\">$1</h2>');\n    html = html.replace(/^# (.*$)/gim, '<h1 class=\"header-1\">$1</h1>');\n\n    // Bold\n    html = html.replace(/\\*\\*(.+?)\\*\\*/g, '<strong class=\"bold-text\">$1</strong>');\n\n    // Italic\n    html = html.replace(/\\*(.+?)\\*/g, '<em class=\"italic-text\">$1</em>');\n\n    // Links\n    html = html.replace(/\\[([^\\]]+)\\]\\(([^)]+)\\)/g, '<a href=\"$2\" class=\"link-text\" target=\"_blank\" rel=\"noopener noreferrer\">$1</a>');\n\n    // Images\n    html = html.replace(/!\\[([^\\]]*)\\]\\(([^)]+)\\)/g, '<img src=\"$2\" alt=\"$1\" class=\"markdown-image\" />');\n\n    // Blockquotes\n    html = html.replace(/^> (.+)$/gim, '<blockquote class=\"blockquote\">$1</blockquote>');\n\n    // Ordered lists\n    html = html.replace(/^\\d+\\.\\s(.+)$/gim, '<li class=\"list-item\">$1</li>');\n    html = html.replace(/(<li class=\"list-item\">.*<\\/li>)/s, '<ol class=\"ordered-list\">$1</ol>');\n\n    // Unordered lists\n    html = html.replace(/^[-*]\\s(.+)$/gim, '<li class=\"list-item\">$1</li>');\n    html = html.replace(/(<li class=\"list-item\">.*<\\/li>)/s, (match) => {\n      if (!match.includes('<ol')) {\n        return `<ul class=\"unordered-list\">${match}</ul>`;\n      }\n      return match;\n    });\n\n    // Line breaks\n    html = html.replace(/\\n/g, '<br />');\n\n    return html;\n  };\n\n  const highlightCode = (code: string, lang: string): string => {\n    const keywords = ['function', 'const', 'let', 'var', 'return', 'if', 'else', 'for', 'while', 'class', 'import', 'export', 'default', 'async', 'await'];\n    const strings = /(\".*?\"|'.*?'|`.*?`)/g;\n    const comments = /(\\/\\/.*$|\\/\\*[\\s\\S]*?\\*\\/)/gm;\n    const numbers = /\\b(\\d+)\\b/g;\n    const functions = /\\b([a-zA-Z_]\\w*)\\s*\\(/g;\n\n    let highlighted = code;\n\n    // Comments\n    highlighted = highlighted.replace(comments, '<span class=\"token-comment\">$1</span>');\n\n    // Strings\n    highlighted = highlighted.replace(strings, '<span class=\"token-string\">$1</span>');\n\n    // Keywords\n    keywords.forEach(keyword => {\n      const regex = new RegExp(`\\\\b${keyword}\\\\b`, 'g');\n      highlighted = highlighted.replace(regex, `<span class=\"token-keyword\">${keyword}</span>`);\n    });\n\n    // Functions\n    highlighted = highlighted.replace(functions, '<span class=\"token-function\">$1</span>(');\n\n    // Numbers\n    highlighted = highlighted.replace(numbers, '<span class=\"token-number\">$1</span>');\n\n    return highlighted;\n  };\n\n  const toolbarButtons = [\n    { icon: Bold, action: () => insertMarkdown('**', '**'), label: 'Bold' },\n    { icon: Italic, action: () => insertMarkdown('*', '*'), label: 'Italic' },\n    { icon: Code, action: () => insertMarkdown('`', '`'), label: 'Code' },\n    { icon: Heading1, action: () => insertMarkdown('# ', ''), label: 'H1' },\n    { icon: Heading2, action: () => insertMarkdown('## ', ''), label: 'H2' },\n    { icon: List, action: () => insertMarkdown('- ', ''), label: 'List' },\n    { icon: ListOrdered, action: () => insertMarkdown('1. ', ''), label: 'Ordered List' },\n    { icon: Quote, action: () => insertMarkdown('> ', ''), label: 'Quote' },\n    { icon: Link2, action: () => insertMarkdown('[', '](url)'), label: 'Link' },\n    { icon: Image, action: () => insertMarkdown('![alt](', ')'), label: 'Image' },\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-[#0d1117] text-gray-100\">\n      {/* Floating Toolbar */}\n      <AnimatePresence>\n        {showToolbar && (\n          <motion.div\n            initial={{ y: -100, opacity: 0 }}\n            animate={{ y: 0, opacity: 1 }}\n            exit={{ y: -100, opacity: 0 }}\n            transition={{ type: 'spring', stiffness: 300, damping: 30 }}\n            className=\"fixed top-4 left-1/2 -translate-x-1/2 z-50 bg-[#161b22] border border-[#30363d] rounded-xl shadow-2xl px-4 py-3\"\n          >\n            <div className=\"flex items-center gap-2\">\n              {toolbarButtons.map((btn, idx) => (\n                <motion.div\n                  key={idx}\n                  whileHover={{ scale: 1.1, y: -2 }}\n                  whileTap={{ scale: 0.95 }}\n                >\n                  <Button\n                    onClick={btn.action}\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    className=\"h-9 w-9 p-0 hover:bg-[#238636] hover:text-white transition-all duration-200\"\n                    title={btn.label}\n                  >\n                    <btn.icon className=\"h-4 w-4\" />\n                  </Button>\n                </motion.div>\n              ))}\n              <div className=\"w-px h-6 bg-[#30363d] mx-2\" />\n              <motion.div whileHover={{ scale: 1.1 }} whileTap={{ scale: 0.95 }}>\n                <Button\n                  onClick={() => setShowPreview(!showPreview)}\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  className=\"h-9 px-3 hover:bg-[#238636] hover:text-white transition-all duration-200\"\n                >\n                  {showPreview ? <EyeOff className=\"h-4 w-4 mr-2\" /> : <Eye className=\"h-4 w-4 mr-2\" />}\n                  {showPreview ? 'Hide' : 'Show'} Preview\n                </Button>\n              </motion.div>\n            </div>\n          </motion.div>\n        )}\n      </AnimatePresence>\n\n      {/* Header */}\n      <div className=\"border-b border-[#30363d] bg-[#0d1117] sticky top-0 z-40\">\n        <div className=\"max-w-7xl mx-auto px-6 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h1 className=\"text-2xl font-bold bg-gradient-to-r from-[#58a6ff] to-[#bc8cff] bg-clip-text text-transparent\">\n                Premium Markdown Editor\n              </h1>\n              <p className=\"text-sm text-gray-400 mt-1\">Write beautiful documentation with live preview</p>\n            </div>\n            <div className=\"flex items-center gap-3\">\n              {toolbarButtons.slice(0, 5).map((btn, idx) => (\n                <motion.div\n                  key={idx}\n                  whileHover={{ scale: 1.05 }}\n                  whileTap={{ scale: 0.95 }}\n                >\n                  <Button\n                    onClick={btn.action}\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    className=\"h-9 w-9 p-0 hover:bg-[#238636] hover:text-white transition-all duration-200\"\n                    title={btn.label}\n                  >\n                    <btn.icon className=\"h-4 w-4\" />\n                  </Button>\n                </motion.div>\n              ))}\n              <div className=\"w-px h-6 bg-[#30363d]\" />\n              <motion.div whileHover={{ scale: 1.05 }} whileTap={{ scale: 0.95 }}>\n                <Button\n                  onClick={() => setShowPreview(!showPreview)}\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  className=\"hover:bg-[#238636] hover:text-white transition-all duration-200\"\n                >\n                  {showPreview ? <EyeOff className=\"h-4 w-4 mr-2\" /> : <Eye className=\"h-4 w-4 mr-2\" />}\n                  {showPreview ? 'Hide' : 'Show'} Preview\n                </Button>\n              </motion.div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Editor Container */}\n      <div className=\"max-w-7xl mx-auto px-6 py-8\">\n        <div className={`grid gap-6 ${showPreview ? 'grid-cols-2' : 'grid-cols-1'}`}>\n          {/* Editor */}\n          <motion.div\n            layout\n            transition={{ type: 'spring', stiffness: 300, damping: 30 }}\n            className=\"relative\"\n          >\n            <div className=\"bg-[#0d1117] border border-[#30363d] rounded-xl overflow-hidden shadow-2xl\">\n              <div className=\"bg-[#161b22] border-b border-[#30363d] px-4 py-3 flex items-center justify-between\">\n                <div className=\"flex items-center gap-2\">\n                  <div className=\"flex gap-2\">\n                    <div className=\"w-3 h-3 rounded-full bg-[#ff5f56]\" />\n                    <div className=\"w-3 h-3 rounded-full bg-[#ffbd2e]\" />\n                    <div className=\"w-3 h-3 rounded-full bg-[#27c93f]\" />\n                  </div>\n                  <span className=\"text-sm text-gray-400 ml-4\">editor.md</span>\n                </div>\n                <div className=\"text-xs text-gray-500\">\n                  {markdown.length} characters\n                </div>\n              </div>\n              <div className=\"relative\">\n                <textarea\n                  ref={textareaRef}\n                  value={markdown}\n                  onChange={(e) => setMarkdown(e.target.value)}\n                  onSelect={(e) => setCursorPosition(e.currentTarget.selectionStart)}\n                  className=\"w-full h-[calc(100vh-280px)] bg-[#0d1117] text-gray-100 p-6 font-mono text-sm leading-relaxed resize-none focus:outline-none\"\n                  placeholder=\"Start writing your markdown here...\"\n                  spellCheck={false}\n                />\n                <div className=\"absolute bottom-4 right-4 text-xs text-gray-600 bg-[#161b22] px-3 py-1 rounded-md border border-[#30363d]\">\n                  Line {markdown.substring(0, cursorPosition).split('\\n').length}\n                </div>\n              </div>\n            </div>\n          </motion.div>\n\n          {/* Preview */}\n          <AnimatePresence mode=\"wait\">\n            {showPreview && (\n              <motion.div\n                initial={{ opacity: 0, x: 20 }}\n                animate={{ opacity: 1, x: 0 }}\n                exit={{ opacity: 0, x: 20 }}\n                transition={{ type: 'spring', stiffness: 300, damping: 30 }}\n                className=\"relative\"\n              >\n                <div className=\"bg-[#0d1117] border border-[#30363d] rounded-xl overflow-hidden shadow-2xl sticky top-24\">\n                  <div className=\"bg-[#161b22] border-b border-[#30363d] px-4 py-3 flex items-center justify-between\">\n                    <div className=\"flex items-center gap-2\">\n                      <Eye className=\"h-4 w-4 text-[#58a6ff]\" />\n                      <span className=\"text-sm text-gray-400\">Live Preview</span>\n                    </div>\n                    <div className=\"flex gap-1\">\n                      <div className=\"w-2 h-2 rounded-full bg-[#238636] animate-pulse\" />\n                      <span className=\"text-xs text-gray-500 ml-2\">Live</span>\n                    </div>\n                  </div>\n                  <motion.div\n                    key={markdown}\n                    initial={{ opacity: 0 }}\n                    animate={{ opacity: 1 }}\n                    transition={{ duration: 0.2 }}\n                    className=\"p-6 h-[calc(100vh-280px)] overflow-y-auto prose-custom\"\n                    dangerouslySetInnerHTML={{ __html: parseMarkdown(markdown) }}\n                  />\n                </div>\n              </motion.div>\n            )}\n          </AnimatePresence>\n        </div>\n      </div>\n\n      <style jsx global>{`\n        .prose-custom {\n          color: #c9d1d9;\n          line-height: 1.7;\n        }\n\n        .header-1 {\n          font-size: 2rem;\n          font-weight: 700;\n          margin: 1.5rem 0 1rem 0;\n          color: #58a6ff;\n          border-bottom: 2px solid #21262d;\n          padding-bottom: 0.5rem;\n        }\n\n        .header-2 {\n          font-size: 1.5rem;\n          font-weight: 600;\n          margin: 1.25rem 0 0.75rem 0;\n          color: #79c0ff;\n        }\n\n        .header-3 {\n          font-size: 1.25rem;\n          font-weight: 600;\n          margin: 1rem 0 0.5rem 0;\n          color: #a5d6ff;\n        }\n\n        .bold-text {\n          font-weight: 700;\n          color: #ffa657;\n        }\n\n        .italic-text {\n          font-style: italic;\n          color: #d2a8ff;\n        }\n\n        .inline-code {\n          background: #161b22;\n          color: #ff7b72;\n          padding: 0.2rem 0.4rem;\n          border-radius: 0.25rem;\n          font-family: 'Consolas', 'Monaco', 'Courier New', monospace;\n          font-size: 0.9em;\n          border: 1px solid #30363d;\n        }\n\n        .code-block {\n          background: #161b22;\n          border: 1px solid #30363d;\n          border-radius: 0.5rem;\n          padding: 1rem;\n          margin: 1rem 0;\n          overflow-x: auto;\n          box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.3);\n        }\n\n        .code-block code {\n          font-family: 'Consolas', 'Monaco', 'Courier New', monospace;\n          font-size: 0.9rem;\n          line-height: 1.6;\n          color: #c9d1d9;\n        }\n\n        .token-keyword {\n          color: #ff7b72;\n          font-weight: 600;\n        }\n\n        .token-string {\n          color: #a5d6ff;\n        }\n\n        .token-comment {\n          color: #8b949e;\n          font-style: italic;\n        }\n\n        .token-function {\n          color: #d2a8ff;\n        }\n\n        .token-number {\n          color: #79c0ff;\n        }\n\n        .link-text {\n          color: #58a6ff;\n          text-decoration: underline;\n          text-decoration-color: #58a6ff40;\n          transition: all 0.2s;\n        }\n\n        .link-text:hover {\n          color: #79c0ff;\n          text-decoration-color: #79c0ff;\n        }\n\n        .markdown-image {\n          max-width: 100%;\n          border-radius: 0.5rem;\n          margin: 1rem 0;\n          border: 1px solid #30363d;\n          box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.3);\n        }\n\n        .blockquote {\n          border-left: 4px solid #58a6ff;\n          padding-left: 1rem;\n          margin: 1rem 0;\n          color: #8b949e;\n          font-style: italic;\n          background: #161b2280;\n          padding: 0.75rem 1rem;\n          border-radius: 0 0.25rem 0.25rem 0;\n        }\n\n        .ordered-list,\n        .unordered-list {\n          margin: 1rem 0;\n          padding-left: 2rem;\n        }\n\n        .list-item {\n          margin: 0.5rem 0;\n          color: #c9d1d9;\n        }\n\n        .ordered-list .list-item {\n          list-style-type: decimal;\n        }\n\n        .unordered-list .list-item {\n          list-style-type: disc;\n        }\n\n        .list-item::marker {\n          color: #58a6ff;\n        }\n\n        /* Scrollbar styling */\n        ::-webkit-scrollbar {\n          width: 10px;\n          height: 10px;\n        }\n\n        ::-webkit-scrollbar-track {\n          background: #0d1117;\n        }\n\n        ::-webkit-scrollbar-thumb {\n          background: #30363d;\n          border-radius: 5px;\n        }\n\n        ::-webkit-scrollbar-thumb:hover {\n          background: #484f58;\n        }\n      `}</style>\n    </div>\n  );\n}",
  "error": null,
  "overall_score": 49,
  "code_quality_score": 15,
  "architecture_score": 12,
  "performance_score": 8,
  "accessibility_score": 14,
  "metadata": {
    "document_id": "eval_room_b162b7086589",
    "prompt_category": "productivity",
    "prompt_complexity": 8.0
  },
  "raw_response": {
    "document_id": "eval_room_b162b7086589",
    "mode": "sequential",
    "prompt": "Create a premium markdown editor with dark theme, syntax highlighting with vibrant colors, smooth live preview transitions, floating toolbar with hover effects, and code block styling like VS Code",
    "content": "import { useState, useEffect, useRef } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Bold, Italic, Code, List, ListOrdered, Link2, Image, Eye, EyeOff, Heading1, Heading2, Quote } from 'lucide-react';\nimport { motion, AnimatePresence } from 'framer-motion';\n\nexport default function MarkdownEditor() {\n  const [markdown, setMarkdown] = useState(`# Welcome to Premium Markdown Editor\n\n## Features\n- **Bold** and *italic* text\n- \\`Inline code\\` with syntax highlighting\n- Code blocks with VS Code styling\n- Live preview with smooth transitions\n\n### Code Example\n\n\\`\\`\\`javascript\nfunction greet(name) {\n  console.log(\\`Hello, \\${name}!\\`);\n  return true;\n}\n\nconst user = \"Developer\";\ngreet(user);\n\\`\\`\\`\n\n### Lists\n1. First item\n2. Second item\n3. Third item\n\n- Bullet point\n- Another point\n  - Nested item\n\n> This is a blockquote with **bold** text\n\n[Link to example](https://example.com)\n\n![Image description](https://via.placeholder.com/400x200)\n`);\n  \n  const [showPreview, setShowPreview] = useState(true);\n  const [cursorPosition, setCursorPosition] = useState(0);\n  const [showToolbar, setShowToolbar] = useState(false);\n  const textareaRef = useRef<HTMLTextAreaElement>(null);\n  const editorRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    const handleScroll = () => {\n      if (window.scrollY > 100) {\n        setShowToolbar(true);\n      } else {\n        setShowToolbar(false);\n      }\n    };\n\n    window.addEventListener('scroll', handleScroll);\n    return () => window.removeEventListener('scroll', handleScroll);\n  }, []);\n\n  const insertMarkdown = (before: string, after: string = '') => {\n    const textarea = textareaRef.current;\n    if (!textarea) return;\n\n    const start = textarea.selectionStart;\n    const end = textarea.selectionEnd;\n    const selectedText = markdown.substring(start, end);\n    const newText = markdown.substring(0, start) + before + selectedText + after + markdown.substring(end);\n    \n    setMarkdown(newText);\n    \n    setTimeout(() => {\n      textarea.focus();\n      textarea.setSelectionRange(start + before.length, start + before.length + selectedText.length);\n    }, 0);\n  };\n\n  const parseMarkdown = (text: string): string => {\n    let html = text;\n\n    // Code blocks with syntax highlighting\n    html = html.replace(/```(\\w+)?\\n([\\s\\S]*?)```/g, (_, lang, code) => {\n      const highlighted = highlightCode(code.trim(), lang || 'javascript');\n      return `<pre class=\"code-block\"><code class=\"language-${lang || 'javascript'}\">${highlighted}</code></pre>`;\n    });\n\n    // Inline code\n    html = html.replace(/`([^`]+)`/g, '<code class=\"inline-code\">$1</code>');\n\n    // Headers\n    html = html.replace(/^### (.*$)/gim, '<h3 class=\"header-3\">$1</h3>');\n    html = html.replace(/^## (.*$)/gim, '<h2 class=\"header-2\">$1</h2>');\n    html = html.replace(/^# (.*$)/gim, '<h1 class=\"header-1\">$1</h1>');\n\n    // Bold\n    html = html.replace(/\\*\\*(.+?)\\*\\*/g, '<strong class=\"bold-text\">$1</strong>');\n\n    // Italic\n    html = html.replace(/\\*(.+?)\\*/g, '<em class=\"italic-text\">$1</em>');\n\n    // Links\n    html = html.replace(/\\[([^\\]]+)\\]\\(([^)]+)\\)/g, '<a href=\"$2\" class=\"link-text\" target=\"_blank\" rel=\"noopener noreferrer\">$1</a>');\n\n    // Images\n    html = html.replace(/!\\[([^\\]]*)\\]\\(([^)]+)\\)/g, '<img src=\"$2\" alt=\"$1\" class=\"markdown-image\" />');\n\n    // Blockquotes\n    html = html.replace(/^> (.+)$/gim, '<blockquote class=\"blockquote\">$1</blockquote>');\n\n    // Ordered lists\n    html = html.replace(/^\\d+\\.\\s(.+)$/gim, '<li class=\"list-item\">$1</li>');\n    html = html.replace(/(<li class=\"list-item\">.*<\\/li>)/s, '<ol class=\"ordered-list\">$1</ol>');\n\n    // Unordered lists\n    html = html.replace(/^[-*]\\s(.+)$/gim, '<li class=\"list-item\">$1</li>');\n    html = html.replace(/(<li class=\"list-item\">.*<\\/li>)/s, (match) => {\n      if (!match.includes('<ol')) {\n        return `<ul class=\"unordered-list\">${match}</ul>`;\n      }\n      return match;\n    });\n\n    // Line breaks\n    html = html.replace(/\\n/g, '<br />');\n\n    return html;\n  };\n\n  const highlightCode = (code: string, lang: string): string => {\n    const keywords = ['function', 'const', 'let', 'var', 'return', 'if', 'else', 'for', 'while', 'class', 'import', 'export', 'default', 'async', 'await'];\n    const strings = /(\".*?\"|'.*?'|`.*?`)/g;\n    const comments = /(\\/\\/.*$|\\/\\*[\\s\\S]*?\\*\\/)/gm;\n    const numbers = /\\b(\\d+)\\b/g;\n    const functions = /\\b([a-zA-Z_]\\w*)\\s*\\(/g;\n\n    let highlighted = code;\n\n    // Comments\n    highlighted = highlighted.replace(comments, '<span class=\"token-comment\">$1</span>');\n\n    // Strings\n    highlighted = highlighted.replace(strings, '<span class=\"token-string\">$1</span>');\n\n    // Keywords\n    keywords.forEach(keyword => {\n      const regex = new RegExp(`\\\\b${keyword}\\\\b`, 'g');\n      highlighted = highlighted.replace(regex, `<span class=\"token-keyword\">${keyword}</span>`);\n    });\n\n    // Functions\n    highlighted = highlighted.replace(functions, '<span class=\"token-function\">$1</span>(');\n\n    // Numbers\n    highlighted = highlighted.replace(numbers, '<span class=\"token-number\">$1</span>');\n\n    return highlighted;\n  };\n\n  const toolbarButtons = [\n    { icon: Bold, action: () => insertMarkdown('**', '**'), label: 'Bold' },\n    { icon: Italic, action: () => insertMarkdown('*', '*'), label: 'Italic' },\n    { icon: Code, action: () => insertMarkdown('`', '`'), label: 'Code' },\n    { icon: Heading1, action: () => insertMarkdown('# ', ''), label: 'H1' },\n    { icon: Heading2, action: () => insertMarkdown('## ', ''), label: 'H2' },\n    { icon: List, action: () => insertMarkdown('- ', ''), label: 'List' },\n    { icon: ListOrdered, action: () => insertMarkdown('1. ', ''), label: 'Ordered List' },\n    { icon: Quote, action: () => insertMarkdown('> ', ''), label: 'Quote' },\n    { icon: Link2, action: () => insertMarkdown('[', '](url)'), label: 'Link' },\n    { icon: Image, action: () => insertMarkdown('![alt](', ')'), label: 'Image' },\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-[#0d1117] text-gray-100\">\n      {/* Floating Toolbar */}\n      <AnimatePresence>\n        {showToolbar && (\n          <motion.div\n            initial={{ y: -100, opacity: 0 }}\n            animate={{ y: 0, opacity: 1 }}\n            exit={{ y: -100, opacity: 0 }}\n            transition={{ type: 'spring', stiffness: 300, damping: 30 }}\n            className=\"fixed top-4 left-1/2 -translate-x-1/2 z-50 bg-[#161b22] border border-[#30363d] rounded-xl shadow-2xl px-4 py-3\"\n          >\n            <div className=\"flex items-center gap-2\">\n              {toolbarButtons.map((btn, idx) => (\n                <motion.div\n                  key={idx}\n                  whileHover={{ scale: 1.1, y: -2 }}\n                  whileTap={{ scale: 0.95 }}\n                >\n                  <Button\n                    onClick={btn.action}\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    className=\"h-9 w-9 p-0 hover:bg-[#238636] hover:text-white transition-all duration-200\"\n                    title={btn.label}\n                  >\n                    <btn.icon className=\"h-4 w-4\" />\n                  </Button>\n                </motion.div>\n              ))}\n              <div className=\"w-px h-6 bg-[#30363d] mx-2\" />\n              <motion.div whileHover={{ scale: 1.1 }} whileTap={{ scale: 0.95 }}>\n                <Button\n                  onClick={() => setShowPreview(!showPreview)}\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  className=\"h-9 px-3 hover:bg-[#238636] hover:text-white transition-all duration-200\"\n                >\n                  {showPreview ? <EyeOff className=\"h-4 w-4 mr-2\" /> : <Eye className=\"h-4 w-4 mr-2\" />}\n                  {showPreview ? 'Hide' : 'Show'} Preview\n                </Button>\n              </motion.div>\n            </div>\n          </motion.div>\n        )}\n      </AnimatePresence>\n\n      {/* Header */}\n      <div className=\"border-b border-[#30363d] bg-[#0d1117] sticky top-0 z-40\">\n        <div className=\"max-w-7xl mx-auto px-6 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h1 className=\"text-2xl font-bold bg-gradient-to-r from-[#58a6ff] to-[#bc8cff] bg-clip-text text-transparent\">\n                Premium Markdown Editor\n              </h1>\n              <p className=\"text-sm text-gray-400 mt-1\">Write beautiful documentation with live preview</p>\n            </div>\n            <div className=\"flex items-center gap-3\">\n              {toolbarButtons.slice(0, 5).map((btn, idx) => (\n                <motion.div\n                  key={idx}\n                  whileHover={{ scale: 1.05 }}\n                  whileTap={{ scale: 0.95 }}\n                >\n                  <Button\n                    onClick={btn.action}\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    className=\"h-9 w-9 p-0 hover:bg-[#238636] hover:text-white transition-all duration-200\"\n                    title={btn.label}\n                  >\n                    <btn.icon className=\"h-4 w-4\" />\n                  </Button>\n                </motion.div>\n              ))}\n              <div className=\"w-px h-6 bg-[#30363d]\" />\n              <motion.div whileHover={{ scale: 1.05 }} whileTap={{ scale: 0.95 }}>\n                <Button\n                  onClick={() => setShowPreview(!showPreview)}\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  className=\"hover:bg-[#238636] hover:text-white transition-all duration-200\"\n                >\n                  {showPreview ? <EyeOff className=\"h-4 w-4 mr-2\" /> : <Eye className=\"h-4 w-4 mr-2\" />}\n                  {showPreview ? 'Hide' : 'Show'} Preview\n                </Button>\n              </motion.div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Editor Container */}\n      <div className=\"max-w-7xl mx-auto px-6 py-8\">\n        <div className={`grid gap-6 ${showPreview ? 'grid-cols-2' : 'grid-cols-1'}`}>\n          {/* Editor */}\n          <motion.div\n            layout\n            transition={{ type: 'spring', stiffness: 300, damping: 30 }}\n            className=\"relative\"\n          >\n            <div className=\"bg-[#0d1117] border border-[#30363d] rounded-xl overflow-hidden shadow-2xl\">\n              <div className=\"bg-[#161b22] border-b border-[#30363d] px-4 py-3 flex items-center justify-between\">\n                <div className=\"flex items-center gap-2\">\n                  <div className=\"flex gap-2\">\n                    <div className=\"w-3 h-3 rounded-full bg-[#ff5f56]\" />\n                    <div className=\"w-3 h-3 rounded-full bg-[#ffbd2e]\" />\n                    <div className=\"w-3 h-3 rounded-full bg-[#27c93f]\" />\n                  </div>\n                  <span className=\"text-sm text-gray-400 ml-4\">editor.md</span>\n                </div>\n                <div className=\"text-xs text-gray-500\">\n                  {markdown.length} characters\n                </div>\n              </div>\n              <div className=\"relative\">\n                <textarea\n                  ref={textareaRef}\n                  value={markdown}\n                  onChange={(e) => setMarkdown(e.target.value)}\n                  onSelect={(e) => setCursorPosition(e.currentTarget.selectionStart)}\n                  className=\"w-full h-[calc(100vh-280px)] bg-[#0d1117] text-gray-100 p-6 font-mono text-sm leading-relaxed resize-none focus:outline-none\"\n                  placeholder=\"Start writing your markdown here...\"\n                  spellCheck={false}\n                />\n                <div className=\"absolute bottom-4 right-4 text-xs text-gray-600 bg-[#161b22] px-3 py-1 rounded-md border border-[#30363d]\">\n                  Line {markdown.substring(0, cursorPosition).split('\\n').length}\n                </div>\n              </div>\n            </div>\n          </motion.div>\n\n          {/* Preview */}\n          <AnimatePresence mode=\"wait\">\n            {showPreview && (\n              <motion.div\n                initial={{ opacity: 0, x: 20 }}\n                animate={{ opacity: 1, x: 0 }}\n                exit={{ opacity: 0, x: 20 }}\n                transition={{ type: 'spring', stiffness: 300, damping: 30 }}\n                className=\"relative\"\n              >\n                <div className=\"bg-[#0d1117] border border-[#30363d] rounded-xl overflow-hidden shadow-2xl sticky top-24\">\n                  <div className=\"bg-[#161b22] border-b border-[#30363d] px-4 py-3 flex items-center justify-between\">\n                    <div className=\"flex items-center gap-2\">\n                      <Eye className=\"h-4 w-4 text-[#58a6ff]\" />\n                      <span className=\"text-sm text-gray-400\">Live Preview</span>\n                    </div>\n                    <div className=\"flex gap-1\">\n                      <div className=\"w-2 h-2 rounded-full bg-[#238636] animate-pulse\" />\n                      <span className=\"text-xs text-gray-500 ml-2\">Live</span>\n                    </div>\n                  </div>\n                  <motion.div\n                    key={markdown}\n                    initial={{ opacity: 0 }}\n                    animate={{ opacity: 1 }}\n                    transition={{ duration: 0.2 }}\n                    className=\"p-6 h-[calc(100vh-280px)] overflow-y-auto prose-custom\"\n                    dangerouslySetInnerHTML={{ __html: parseMarkdown(markdown) }}\n                  />\n                </div>\n              </motion.div>\n            )}\n          </AnimatePresence>\n        </div>\n      </div>\n\n      <style jsx global>{`\n        .prose-custom {\n          color: #c9d1d9;\n          line-height: 1.7;\n        }\n\n        .header-1 {\n          font-size: 2rem;\n          font-weight: 700;\n          margin: 1.5rem 0 1rem 0;\n          color: #58a6ff;\n          border-bottom: 2px solid #21262d;\n          padding-bottom: 0.5rem;\n        }\n\n        .header-2 {\n          font-size: 1.5rem;\n          font-weight: 600;\n          margin: 1.25rem 0 0.75rem 0;\n          color: #79c0ff;\n        }\n\n        .header-3 {\n          font-size: 1.25rem;\n          font-weight: 600;\n          margin: 1rem 0 0.5rem 0;\n          color: #a5d6ff;\n        }\n\n        .bold-text {\n          font-weight: 700;\n          color: #ffa657;\n        }\n\n        .italic-text {\n          font-style: italic;\n          color: #d2a8ff;\n        }\n\n        .inline-code {\n          background: #161b22;\n          color: #ff7b72;\n          padding: 0.2rem 0.4rem;\n          border-radius: 0.25rem;\n          font-family: 'Consolas', 'Monaco', 'Courier New', monospace;\n          font-size: 0.9em;\n          border: 1px solid #30363d;\n        }\n\n        .code-block {\n          background: #161b22;\n          border: 1px solid #30363d;\n          border-radius: 0.5rem;\n          padding: 1rem;\n          margin: 1rem 0;\n          overflow-x: auto;\n          box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.3);\n        }\n\n        .code-block code {\n          font-family: 'Consolas', 'Monaco', 'Courier New', monospace;\n          font-size: 0.9rem;\n          line-height: 1.6;\n          color: #c9d1d9;\n        }\n\n        .token-keyword {\n          color: #ff7b72;\n          font-weight: 600;\n        }\n\n        .token-string {\n          color: #a5d6ff;\n        }\n\n        .token-comment {\n          color: #8b949e;\n          font-style: italic;\n        }\n\n        .token-function {\n          color: #d2a8ff;\n        }\n\n        .token-number {\n          color: #79c0ff;\n        }\n\n        .link-text {\n          color: #58a6ff;\n          text-decoration: underline;\n          text-decoration-color: #58a6ff40;\n          transition: all 0.2s;\n        }\n\n        .link-text:hover {\n          color: #79c0ff;\n          text-decoration-color: #79c0ff;\n        }\n\n        .markdown-image {\n          max-width: 100%;\n          border-radius: 0.5rem;\n          margin: 1rem 0;\n          border: 1px solid #30363d;\n          box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.3);\n        }\n\n        .blockquote {\n          border-left: 4px solid #58a6ff;\n          padding-left: 1rem;\n          margin: 1rem 0;\n          color: #8b949e;\n          font-style: italic;\n          background: #161b2280;\n          padding: 0.75rem 1rem;\n          border-radius: 0 0.25rem 0.25rem 0;\n        }\n\n        .ordered-list,\n        .unordered-list {\n          margin: 1rem 0;\n          padding-left: 2rem;\n        }\n\n        .list-item {\n          margin: 0.5rem 0;\n          color: #c9d1d9;\n        }\n\n        .ordered-list .list-item {\n          list-style-type: decimal;\n        }\n\n        .unordered-list .list-item {\n          list-style-type: disc;\n        }\n\n        .list-item::marker {\n          color: #58a6ff;\n        }\n\n        /* Scrollbar styling */\n        ::-webkit-scrollbar {\n          width: 10px;\n          height: 10px;\n        }\n\n        ::-webkit-scrollbar-track {\n          background: #0d1117;\n        }\n\n        ::-webkit-scrollbar-thumb {\n          background: #30363d;\n          border-radius: 5px;\n        }\n\n        ::-webkit-scrollbar-thumb:hover {\n          background: #484f58;\n        }\n      `}</style>\n    </div>\n  );\n}",
    "error": null,
    "elapsed_time": 69.33212542533875,
    "success": true
  }
}