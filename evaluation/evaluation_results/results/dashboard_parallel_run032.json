{
  "prompt_id": "dashboard",
  "prompt_name": "Analytics Dashboard",
  "mode": "parallel",
  "run_number": 32,
  "timestamp": "2025-10-14T13:17:19.163421",
  "response_time": 64.32469272613525,
  "total_tokens": null,
  "response_content": "import { useState, useCallback } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Moon, Sun, RefreshCw } from 'lucide-react';\n\nimport { ShoppingCart, UserPlus, DollarSign, TrendingUp, Package, AlertCircle } from 'lucide-react';\nimport { PieChart, Pie, Cell, ResponsiveContainer, Legend, Tooltip as RechartsTooltip } from 'recharts';\nimport { ArrowUpDown, ArrowUp, ArrowDown } from 'lucide-react';\nimport { Badge } from '@/components/ui/badge';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\nimport { BarChart3, Users, ShoppingCart } from 'lucide-react';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';\n\n\nimport { TrendingUp, TrendingDown, DollarSign, Users, ShoppingCart, Target } from 'lucide-react';\n\ninterface MetricData {\n  id: string;\n  label: string;\n  value: number;\n  change: number;\n  trend: 'up' | 'down';\n}\n\ninterface ChartDataPoint {\n  date: string;\n  revenue: number;\n  users: number;\n  orders: number;\n}\n\ninterface TableRow {\n  id: string;\n  product: string;\n  sales: number;\n  revenue: number;\n  status: 'active' | 'pending' | 'inactive';\n}\n\nconst mockMetrics: MetricData[] = [\n  { id: '1', label: 'Total Revenue', value: 45231, change: 12.5, trend: 'up' },\n  { id: '2', label: 'Active Users', value: 2350, change: 8.2, trend: 'up' },\n  { id: '3', label: 'Total Orders', value: 1543, change: -3.1, trend: 'down' },\n  { id: '4', label: 'Conversion Rate', value: 3.24, change: 5.7, trend: 'up' }\n];\n\nconst mockChartData: ChartDataPoint[] = [\n  { date: '2024-01-01', revenue: 12000, users: 450, orders: 230 },\n  { date: '2024-01-02', revenue: 15000, users: 520, orders: 280 },\n  { date: '2024-01-03', revenue: 13500, users: 490, orders: 250 },\n  { date: '2024-01-04', revenue: 18000, users: 610, orders: 320 },\n  { date: '2024-01-05', revenue: 16500, users: 580, orders: 295 },\n  { date: '2024-01-06', revenue: 20000, users: 680, orders: 350 },\n  { date: '2024-01-07', revenue: 22000, users: 720, orders: 380 }\n];\n\nconst mockTableData: TableRow[] = [\n  { id: '1', product: 'Premium Subscription', sales: 342, revenue: 34200, status: 'active' },\n  { id: '2', product: 'Basic Plan', sales: 567, revenue: 28350, status: 'active' },\n  { id: '3', product: 'Enterprise License', sales: 89, revenue: 89000, status: 'active' },\n  { id: '4', product: 'Starter Pack', sales: 234, revenue: 11700, status: 'pending' },\n  { id: '5', product: 'Pro Bundle', sales: 156, revenue: 23400, status: 'active' },\n  { id: '6', product: 'Legacy Plan', sales: 45, revenue: 4500, status: 'inactive' }\n];\ninterface GoalData {\n  id: string;\n  label: string;\n  current: number;\n  target: number;\n  unit: string;\n}\n\nconst mockGoals: GoalData[] = [\n  { id: '1', label: 'Monthly Revenue', current: 145000, target: 200000, unit: '$' },\n  { id: '2', label: 'New Customers', current: 850, target: 1000, unit: '' },\n  { id: '3', label: 'Product Sales', current: 1543, target: 2000, unit: '' },\n  { id: '4', label: 'Customer Satisfaction', current: 4.6, target: 5.0, unit: '/5' }\n];\ninterface ActivityItem {\n  id: string;\n  type: 'sale' | 'user' | 'revenue' | 'alert' | 'product';\n  message: string;\n  timestamp: string;\n  icon: 'cart' | 'user' | 'dollar' | 'trending' | 'package' | 'alert';\n}\n\nconst mockActivityData: ActivityItem[] = [\n  { id: '1', type: 'sale', message: 'New order #1234 - Premium Subscription', timestamp: '2 minutes ago', icon: 'cart' },\n  { id: '2', type: 'user', message: 'New user registration: john.doe@example.com', timestamp: '5 minutes ago', icon: 'user' },\n  { id: '3', type: 'revenue', message: 'Revenue milestone reached: $50,000', timestamp: '12 minutes ago', icon: 'dollar' },\n  { id: '4', type: 'sale', message: 'Order #1233 completed - Enterprise License', timestamp: '18 minutes ago', icon: 'cart' },\n  { id: '5', type: 'product', message: 'Product updated: Pro Bundle', timestamp: '25 minutes ago', icon: 'package' },\n  { id: '6', type: 'alert', message: 'Low stock alert: Starter Pack', timestamp: '32 minutes ago', icon: 'alert' },\n  { id: '7', type: 'user', message: 'New user registration: jane.smith@example.com', timestamp: '45 minutes ago', icon: 'user' },\n  { id: '8', type: 'sale', message: 'New order #1232 - Basic Plan', timestamp: '1 hour ago', icon: 'cart' },\n  { id: '9', type: 'revenue', message: 'Daily revenue target achieved', timestamp: '1 hour ago', icon: 'trending' },\n  { id: '10', type: 'product', message: 'New product added: Ultimate Package', timestamp: '2 hours ago', icon: 'package' }\n];\n\nconst fadeInUpKeyframes = `\n@keyframes fadeInUp {\n  from {\n    opacity: 0;\n    transform: translateY(20px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n`;\n\nif (typeof document !== 'undefined' && !document.getElementById('fadeInUp-keyframes')) {\n  const style = document.createElement('style');\n  style.id = 'fadeInUp-keyframes';\n  style.textContent = fadeInUpKeyframes;\n  document.head.appendChild(style);\n}\nexport default function AnalyticsDashboard() {\n  type SortField = 'product' | 'sales' | 'revenue' | 'status';\n  type SortDirection = 'asc' | 'desc' | null;\n  const [sortField, setSortField] = useState<SortField | null>(null);\n  const [sortDirection, setSortDirection] = useState<SortDirection>(null);\n  const [isDarkMode, setIsDarkMode] = useState(false);\n  const [isRefreshing, setIsRefreshing] = useState(false);\n  const [metrics, setMetrics] = useState<MetricData[]>(mockMetrics);\n  const [chartData, setChartData] = useState<ChartDataPoint[]>(mockChartData);\n  const [tableData, setTableData] = useState<TableRow[]>(mockTableData);\n\n  const toggleDarkMode = useCallback(() => {\n    setIsDarkMode(prev => !prev);\n  }, []);\n  const getMaxValue = useCallback((data: ChartDataPoint[]) => {\n    const maxUsers = Math.max(...data.map(d => d.users));\n    const maxOrders = Math.max(...data.map(d => d.orders));\n    return Math.max(maxUsers, maxOrders);\n  }, []);\n\n  const handleSort = useCallback((field: SortField) => {\n    if (sortField === field) {\n      if (sortDirection === 'asc') {\n        setSortDirection('desc');\n      } else if (sortDirection === 'desc') {\n        setSortDirection(null);\n        setSortField(null);\n      } else {\n        setSortDirection('asc');\n      }\n    } else {\n      setSortField(field);\n      setSortDirection('asc');\n    }\n  }, [sortField, sortDirection]);\n\n  const sortedTableData = useCallback(() => {\n    if (!sortField || !sortDirection) return tableData;\n\n    return [...tableData].sort((a, b) => {\n      let aValue = a[sortField];\n      let bValue = b[sortField];\n\n      if (typeof aValue === 'string') {\n        aValue = aValue.toLowerCase();\n        bValue = (bValue as string).toLowerCase();\n      }\n\n      if (aValue < bValue) return sortDirection === 'asc' ? -1 : 1;\n      if (aValue > bValue) return sortDirection === 'asc' ? 1 : -1;\n      return 0;\n    });\n  }, [tableData, sortField, sortDirection]);\n\n  const getStatusBadgeVariant = (status: TableRow['status']) => {\n    switch (status) {\n      case 'active':\n        return 'default';\n      case 'pending':\n        return 'secondary';\n      case 'inactive':\n        return 'outline';\n      default:\n        return 'default';\n    }\n  };\n\n  const getSortIcon = (field: SortField) => {\n    if (sortField !== field) return <ArrowUpDown className=\"h-4 w-4\" />;\n    if (sortDirection === 'asc') return <ArrowUp className=\"h-4 w-4\" />;\n    if (sortDirection === 'desc') return <ArrowDown className=\"h-4 w-4\" />;\n    return <ArrowUpDown className=\"h-4 w-4\" />;\n  };\n  const handleRefresh = useCallback(() => {\n    setIsRefreshing(true);\n    \n    setTimeout(() => {\n      // Generate updated metrics with random variations\n      const updatedMetrics = mockMetrics.map(metric => ({\n        ...metric,\n        value: metric.value + Math.floor(Math.random() * 200 - 100),\n        change: parseFloat((Math.random() * 20 - 5).toFixed(1)),\n        trend: Math.random() > 0.5 ? 'up' as const : 'down' as const\n      }));\n      \n      // Generate updated chart data with random variations\n      const updatedChartData = mockChartData.map(point => ({\n        ...point,\n        revenue: point.revenue + Math.floor(Math.random() * 4000 - 2000),\n        users: point.users + Math.floor(Math.random() * 100 - 50),\n        orders: point.orders + Math.floor(Math.random() * 50 - 25)\n      }));\n      \n      // Generate updated table data with random variations\n      const updatedTableData = mockTableData.map(row => ({\n        ...row,\n        sales: row.sales + Math.floor(Math.random() * 40 - 20),\n        revenue: row.revenue + Math.floor(Math.random() * 2000 - 1000)\n      }));\n      \n      setMetrics(updatedMetrics);\n      setChartData(updatedChartData);\n      setTableData(updatedTableData);\n      setIsRefreshing(false);\n    }, 1500);\n  }, []);\n\n  return (\n    <div className={`min-h-screen transition-colors duration-300 ${isDarkMode ? 'dark bg-gray-900' : 'bg-gray-50'}`}>\n      <div className=\"container mx-auto p-4 md:p-6 lg:p-8\">\n        <div className=\"flex flex-col md:flex-row justify-between items-start md:items-center gap-4 mb-8\">\n          <div>\n            <h1 className={`text-3xl md:text-4xl font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n              Analytics Dashboard\n            </h1>\n            <p className={`mt-2 ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n              Real-time insights and performance metrics\n            </p>\n          </div>\n          \n          <div className=\"flex gap-2\">\n            <Button\n              variant=\"outline\"\n              size=\"icon\"\n              onClick={toggleDarkMode}\n              className={isDarkMode ? 'border-gray-700' : ''}\n            >\n              {isDarkMode ? <Sun className=\"h-5 w-5\" /> : <Moon className=\"h-5 w-5\" />}\n            </Button>\n            \n            <Button\n              variant=\"outline\"\n              onClick={handleRefresh}\n              disabled={isRefreshing}\n              className={isDarkMode ? 'border-gray-700' : ''}\n            >\n              <RefreshCw className={`h-4 w-4 mr-2 ${isRefreshing ? 'animate-spin' : ''}`} />\n              Refresh\n            </Button>\n          </div>\n        </div>\n\n        <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 md:gap-6 mb-8\">\n          {metrics.map((metric, index) => {\n            const Icon = metric.label.includes('Revenue') ? DollarSign :\n                        metric.label.includes('Users') ? Users :\n                        metric.label.includes('Orders') ? ShoppingCart :\n                        Target;\n            \n            const TrendIcon = metric.trend === 'up' ? TrendingUp : TrendingDown;\n            const trendColor = metric.trend === 'up' ? 'text-green-500' : 'text-red-500';\n            const trendBgColor = metric.trend === 'up' ? 'bg-green-50 dark:bg-green-900/20' : 'bg-red-50 dark:bg-red-900/20';\n\n            return (\n              <Card \n                key={metric.id}\n                className={`transition-all duration-300 hover:shadow-lg hover:-translate-y-1 ${\n                  isDarkMode ? 'bg-gray-800 border-gray-700' : 'bg-white'\n                }`}\n                style={{\n                  animation: `fadeInUp 0.5s ease-out ${index * 0.1}s both`\n                }}\n              >\n                <CardHeader className=\"flex flex-row items-center justify-between pb-2\">\n                  <CardTitle className={`text-sm font-medium ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                    {metric.label}\n                  </CardTitle>\n                  <div className={`p-2 rounded-lg ${isDarkMode ? 'bg-gray-700' : 'bg-gray-100'}`}>\n                    <Icon className={`h-4 w-4 ${isDarkMode ? 'text-gray-300' : 'text-gray-600'}`} />\n                  </div>\n                </CardHeader>\n                <CardContent>\n                  <div className={`text-2xl font-bold mb-2 ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                    {metric.label.includes('Revenue') ? `$${metric.value.toLocaleString()}` :\n                     metric.label.includes('Rate') ? `${metric.value}%` :\n                     metric.value.toLocaleString()}\n                  </div>\n                  <div className=\"flex items-center gap-2\">\n                    <div className={`flex items-center gap-1 px-2 py-1 rounded-full ${trendBgColor}`}>\n                      <TrendIcon className={`h-3 w-3 ${trendColor}`} />\n                      <span className={`text-xs font-medium ${trendColor}`}>\n                        {Math.abs(metric.change)}%\n                      </span>\n                    </div>\n                    <span className={`text-xs ${isDarkMode ? 'text-gray-500' : 'text-gray-500'}`}>\n                      vs last period\n                    </span>\n                  </div>\n                </CardContent>\n              </Card>\n            );\n          })}\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-4 md:gap-6 mb-8\">\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Revenue Overview</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Daily revenue trends for the past week\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <ResponsiveContainer width=\"100%\" height={300}>\n                <LineChart data={chartData} margin={{ top: 5, right: 20, left: 0, bottom: 5 }}>\n                  <CartesianGrid \n                    strokeDasharray=\"3 3\" \n                    stroke={isDarkMode ? '#374151' : '#e5e7eb'} \n                  />\n                  <XAxis \n                    dataKey=\"date\" \n                    stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                    tick={{ fill: isDarkMode ? '#9ca3af' : '#6b7280', fontSize: 12 }}\n                    tickFormatter={(value) => new Date(value).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n                  />\n                  <YAxis \n                    stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                    tick={{ fill: isDarkMode ? '#9ca3af' : '#6b7280', fontSize: 12 }}\n                    tickFormatter={(value) => `$${(value / 1000).toFixed(0)}k`}\n                  />\n                  <Tooltip \n                    contentStyle={{\n                      backgroundColor: isDarkMode ? '#1f2937' : '#ffffff',\n                      border: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\n                      borderRadius: '8px',\n                      color: isDarkMode ? '#ffffff' : '#000000'\n                    }}\n                    labelStyle={{ color: isDarkMode ? '#9ca3af' : '#6b7280' }}\n                    formatter={(value: number) => [`$${value.toLocaleString()}`, 'Revenue']}\n                    labelFormatter={(label) => new Date(label).toLocaleDateString('en-US', { month: 'long', day: 'numeric', year: 'numeric' })}\n                  />\n                  <Line \n                    type=\"monotone\" \n                    dataKey=\"revenue\" \n                    stroke=\"#3b82f6\" \n                    strokeWidth={2}\n                    dot={{ fill: '#3b82f6', r: 4 }}\n                    activeDot={{ r: 6, fill: '#2563eb' }}\n                  />\n                </LineChart>\n              </ResponsiveContainer>\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>User Activity</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Active users and order volume\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-6\">\n                <div className=\"flex items-center justify-center gap-6 pb-4\">\n                  <div className=\"flex items-center gap-2\">\n                    <div className=\"w-4 h-4 bg-blue-500 rounded\"></div>\n                    <span className={`text-sm ${isDarkMode ? 'text-gray-300' : 'text-gray-600'}`}>\n                      Active Users\n                    </span>\n                  </div>\n                  <div className=\"flex items-center gap-2\">\n                    <div className=\"w-4 h-4 bg-green-500 rounded\"></div>\n                    <span className={`text-sm ${isDarkMode ? 'text-gray-300' : 'text-gray-600'}`}>\n                      Orders\n                    </span>\n                  </div>\n                </div>\n\n                <div className=\"space-y-4\">\n                  {chartData.map((dataPoint, index) => {\n                    const maxValue = getMaxValue(chartData);\n                    const usersWidth = (dataPoint.users / maxValue) * 100;\n                    const ordersWidth = (dataPoint.orders / maxValue) * 100;\n                    \n                    return (\n                      <div key={index} className=\"space-y-2\">\n                        <div className={`text-xs font-medium ${isDarkMode ? 'text-gray-400' : 'text-gray-500'}`}>\n                          {new Date(dataPoint.date).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n                        </div>\n                        \n                        <div className=\"space-y-1.5\">\n                          <div className=\"relative group\">\n                            <div className={`h-8 rounded transition-all duration-500 ${isDarkMode ? 'bg-gray-700' : 'bg-gray-200'}`}>\n                              <div \n                                className=\"h-full bg-blue-500 rounded transition-all duration-700 ease-out flex items-center justify-end pr-2\"\n                                style={{ width: `${usersWidth}%` }}\n                              >\n                                <span className=\"text-xs font-semibold text-white opacity-0 group-hover:opacity-100 transition-opacity\">\n                                  {dataPoint.users}\n                                </span>\n                              </div>\n                            </div>\n                          </div>\n                          \n                          <div className=\"relative group\">\n                            <div className={`h-8 rounded transition-all duration-500 ${isDarkMode ? 'bg-gray-700' : 'bg-gray-200'}`}>\n                              <div \n                                className=\"h-full bg-green-500 rounded transition-all duration-700 ease-out flex items-center justify-end pr-2\"\n                                style={{ width: `${ordersWidth}%` }}\n                              >\n                                <span className=\"text-xs font-semibold text-white opacity-0 group-hover:opacity-100 transition-opacity\">\n                                  {dataPoint.orders}\n                                </span>\n                              </div>\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                    );\n                  })}\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-4 md:gap-6 mb-8\">\n          <Card className={`lg:col-span-2 ${isDarkMode ? 'bg-gray-800 border-gray-700' : ''}`}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Product Performance</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Top selling products and revenue breakdown\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"overflow-x-auto\">\n                <Table>\n                  <TableHeader>\n                    <TableRow className={isDarkMode ? 'border-gray-700' : ''}>\n                      <TableHead className={isDarkMode ? 'text-gray-300' : ''}>\n                        <Button\n                          variant=\"ghost\"\n                          onClick={() => handleSort('product')}\n                          className=\"h-8 px-2 lg:px-3\"\n                        >\n                          Product\n                          {getSortIcon('product')}\n                        </Button>\n                      </TableHead>\n                      <TableHead className={isDarkMode ? 'text-gray-300' : ''}>\n                        <Button\n                          variant=\"ghost\"\n                          onClick={() => handleSort('sales')}\n                          className=\"h-8 px-2 lg:px-3\"\n                        >\n                          Sales\n                          {getSortIcon('sales')}\n                        </Button>\n                      </TableHead>\n                      <TableHead className={isDarkMode ? 'text-gray-300' : ''}>\n                        <Button\n                          variant=\"ghost\"\n                          onClick={() => handleSort('revenue')}\n                          className=\"h-8 px-2 lg:px-3\"\n                        >\n                          Revenue\n                          {getSortIcon('revenue')}\n                        </Button>\n                      </TableHead>\n                      <TableHead className={isDarkMode ? 'text-gray-300' : ''}>\n                        <Button\n                          variant=\"ghost\"\n                          onClick={() => handleSort('status')}\n                          className=\"h-8 px-2 lg:px-3\"\n                        >\n                          Status\n                          {getSortIcon('status')}\n                        </Button>\n                      </TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {sortedTableData().map((row) => (\n                      <TableRow \n                        key={row.id}\n                        className={isDarkMode ? 'border-gray-700 hover:bg-gray-700/50' : 'hover:bg-gray-50'}\n                      >\n                        <TableCell className={`font-medium ${isDarkMode ? 'text-gray-200' : ''}`}>\n                          {row.product}\n                        </TableCell>\n                        <TableCell className={isDarkMode ? 'text-gray-300' : ''}>\n                          {row.sales.toLocaleString()}\n                        </TableCell>\n                        <TableCell className={isDarkMode ? 'text-gray-300' : ''}>\n                          ${row.revenue.toLocaleString()}\n                        </TableCell>\n                        <TableCell>\n                          <Badge \n                            variant={getStatusBadgeVariant(row.status)}\n                            className=\"capitalize\"\n                          >\n                            {row.status}\n                          </Badge>\n                        </TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Sales Distribution</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Revenue by product category\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"h-[300px] w-full\">\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <PieChart>\n                    <RechartsTooltip\n                      contentStyle={{\n                        backgroundColor: isDarkMode ? '#1f2937' : '#ffffff',\n                        border: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\n                        borderRadius: '6px',\n                        color: isDarkMode ? '#ffffff' : '#000000'\n                      }}\n                      formatter={(value: number) => [`$${value.toLocaleString()}`, 'Revenue']}\n                    />\n                    <Pie\n                      data={tableData}\n                      dataKey=\"revenue\"\n                      nameKey=\"product\"\n                      cx=\"50%\"\n                      cy=\"50%\"\n                      innerRadius={60}\n                      outerRadius={90}\n                      paddingAngle={2}\n                      label={({ percent }) => `${(percent * 100).toFixed(1)}%`}\n                    >\n                      {tableData.map((entry, index) => {\n                        const colors = ['#3b82f6', '#8b5cf6', '#ec4899', '#f59e0b', '#10b981', '#6366f1'];\n                        return <Cell key={`cell-${entry.id}`} fill={colors[index % colors.length]} />;\n                      })}\n                    </Pie>\n                    <Legend\n                      verticalAlign=\"bottom\"\n                      height={36}\n                      formatter={(value) => (\n                        <span className={isDarkMode ? 'text-gray-300' : 'text-gray-700'}>\n                          {value}\n                        </span>\n                      )}\n                    />\n                  </PieChart>\n                </ResponsiveContainer>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 md:gap-6\">\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Recent Activity</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Latest transactions and updates\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4 max-h-[400px] overflow-y-auto pr-2\">\n                {mockActivityData.map((activity) => {\n                  const getIcon = () => {\n                    switch (activity.icon) {\n                      case 'cart':\n                        return <ShoppingCart className=\"h-4 w-4\" />;\n                      case 'user':\n                        return <UserPlus className=\"h-4 w-4\" />;\n                      case 'dollar':\n                        return <DollarSign className=\"h-4 w-4\" />;\n                      case 'trending':\n                        return <TrendingUp className=\"h-4 w-4\" />;\n                      case 'package':\n                        return <Package className=\"h-4 w-4\" />;\n                      case 'alert':\n                        return <AlertCircle className=\"h-4 w-4\" />;\n                      default:\n                        return <ShoppingCart className=\"h-4 w-4\" />;\n                    }\n                  };\n\n                  const getIconBgColor = () => {\n                    switch (activity.type) {\n                      case 'sale':\n                        return isDarkMode ? 'bg-green-900/30 text-green-400' : 'bg-green-100 text-green-600';\n                      case 'user':\n                        return isDarkMode ? 'bg-blue-900/30 text-blue-400' : 'bg-blue-100 text-blue-600';\n                      case 'revenue':\n                        return isDarkMode ? 'bg-purple-900/30 text-purple-400' : 'bg-purple-100 text-purple-600';\n                      case 'alert':\n                        return isDarkMode ? 'bg-red-900/30 text-red-400' : 'bg-red-100 text-red-600';\n                      case 'product':\n                        return isDarkMode ? 'bg-orange-900/30 text-orange-400' : 'bg-orange-100 text-orange-600';\n                      default:\n                        return isDarkMode ? 'bg-gray-700 text-gray-300' : 'bg-gray-100 text-gray-600';\n                    }\n                  };\n\n                  return (\n                    <div key={activity.id} className=\"flex items-start gap-3 pb-3 border-b last:border-b-0 border-gray-200 dark:border-gray-700\">\n                      <div className={`flex-shrink-0 w-8 h-8 rounded-full flex items-center justify-center ${getIconBgColor()}`}>\n                        {getIcon()}\n                      </div>\n                      <div className=\"flex-1 min-w-0\">\n                        <p className={`text-sm ${isDarkMode ? 'text-gray-200' : 'text-gray-900'}`}>\n                          {activity.message}\n                        </p>\n                        <p className={`text-xs mt-1 ${isDarkMode ? 'text-gray-500' : 'text-gray-500'}`}>\n                          {activity.timestamp}\n                        </p>\n                      </div>\n                    </div>\n                  );\n                })}\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Performance Goals</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Progress towards monthly targets\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-6\">\n                {mockGoals.map((goal) => {\n                  const percentage = Math.min((goal.current / goal.target) * 100, 100);\n                  const isComplete = percentage >= 100;\n                  \n                  return (\n                    <div key={goal.id} className=\"space-y-2\">\n                      <div className=\"flex justify-between items-center\">\n                        <span className={`text-sm font-medium ${isDarkMode ? 'text-gray-200' : 'text-gray-700'}`}>\n                          {goal.label}\n                        </span>\n                        <span className={`text-sm font-semibold ${\n                          isComplete \n                            ? 'text-green-600 dark:text-green-400' \n                            : isDarkMode ? 'text-gray-300' : 'text-gray-900'\n                        }`}>\n                          {percentage.toFixed(0)}%\n                        </span>\n                      </div>\n                      \n                      <div className={`w-full h-2 rounded-full overflow-hidden ${\n                        isDarkMode ? 'bg-gray-700' : 'bg-gray-200'\n                      }`}>\n                        <div\n                          className={`h-full transition-all duration-500 rounded-full ${\n                            isComplete\n                              ? 'bg-green-500'\n                              : percentage >= 75\n                              ? 'bg-blue-500'\n                              : percentage >= 50\n                              ? 'bg-yellow-500'\n                              : 'bg-orange-500'\n                          }`}\n                          style={{ width: `${percentage}%` }}\n                        />\n                      </div>\n                      \n                      <div className=\"flex justify-between items-center\">\n                        <span className={`text-xs ${isDarkMode ? 'text-gray-400' : 'text-gray-500'}`}>\n                          {goal.unit === '$' ? `$${goal.current.toLocaleString()}` : `${goal.current}${goal.unit}`}\n                        </span>\n                        <span className={`text-xs ${isDarkMode ? 'text-gray-400' : 'text-gray-500'}`}>\n                          Target: {goal.unit === '$' ? `$${goal.target.toLocaleString()}` : `${goal.target}${goal.unit}`}\n                        </span>\n                      </div>\n                    </div>\n                  );\n                })}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}",
  "error": null,
  "overall_score": 59,
  "code_quality_score": 16,
  "architecture_score": 12,
  "performance_score": 14,
  "accessibility_score": 17,
  "metadata": {
    "document_id": "eval_room_7972f62aeb17",
    "prompt_category": "intermediate",
    "prompt_complexity": 6.0
  },
  "raw_response": {
    "document_id": "eval_room_7972f62aeb17",
    "mode": "parallel",
    "prompt": "Generate an analytics dashboard page with charts, data tables, real-time updates, dark mode, and responsive design",
    "content": "import { useState, useCallback } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Moon, Sun, RefreshCw } from 'lucide-react';\n\nimport { ShoppingCart, UserPlus, DollarSign, TrendingUp, Package, AlertCircle } from 'lucide-react';\nimport { PieChart, Pie, Cell, ResponsiveContainer, Legend, Tooltip as RechartsTooltip } from 'recharts';\nimport { ArrowUpDown, ArrowUp, ArrowDown } from 'lucide-react';\nimport { Badge } from '@/components/ui/badge';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\nimport { BarChart3, Users, ShoppingCart } from 'lucide-react';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';\n\n\nimport { TrendingUp, TrendingDown, DollarSign, Users, ShoppingCart, Target } from 'lucide-react';\n\ninterface MetricData {\n  id: string;\n  label: string;\n  value: number;\n  change: number;\n  trend: 'up' | 'down';\n}\n\ninterface ChartDataPoint {\n  date: string;\n  revenue: number;\n  users: number;\n  orders: number;\n}\n\ninterface TableRow {\n  id: string;\n  product: string;\n  sales: number;\n  revenue: number;\n  status: 'active' | 'pending' | 'inactive';\n}\n\nconst mockMetrics: MetricData[] = [\n  { id: '1', label: 'Total Revenue', value: 45231, change: 12.5, trend: 'up' },\n  { id: '2', label: 'Active Users', value: 2350, change: 8.2, trend: 'up' },\n  { id: '3', label: 'Total Orders', value: 1543, change: -3.1, trend: 'down' },\n  { id: '4', label: 'Conversion Rate', value: 3.24, change: 5.7, trend: 'up' }\n];\n\nconst mockChartData: ChartDataPoint[] = [\n  { date: '2024-01-01', revenue: 12000, users: 450, orders: 230 },\n  { date: '2024-01-02', revenue: 15000, users: 520, orders: 280 },\n  { date: '2024-01-03', revenue: 13500, users: 490, orders: 250 },\n  { date: '2024-01-04', revenue: 18000, users: 610, orders: 320 },\n  { date: '2024-01-05', revenue: 16500, users: 580, orders: 295 },\n  { date: '2024-01-06', revenue: 20000, users: 680, orders: 350 },\n  { date: '2024-01-07', revenue: 22000, users: 720, orders: 380 }\n];\n\nconst mockTableData: TableRow[] = [\n  { id: '1', product: 'Premium Subscription', sales: 342, revenue: 34200, status: 'active' },\n  { id: '2', product: 'Basic Plan', sales: 567, revenue: 28350, status: 'active' },\n  { id: '3', product: 'Enterprise License', sales: 89, revenue: 89000, status: 'active' },\n  { id: '4', product: 'Starter Pack', sales: 234, revenue: 11700, status: 'pending' },\n  { id: '5', product: 'Pro Bundle', sales: 156, revenue: 23400, status: 'active' },\n  { id: '6', product: 'Legacy Plan', sales: 45, revenue: 4500, status: 'inactive' }\n];\ninterface GoalData {\n  id: string;\n  label: string;\n  current: number;\n  target: number;\n  unit: string;\n}\n\nconst mockGoals: GoalData[] = [\n  { id: '1', label: 'Monthly Revenue', current: 145000, target: 200000, unit: '$' },\n  { id: '2', label: 'New Customers', current: 850, target: 1000, unit: '' },\n  { id: '3', label: 'Product Sales', current: 1543, target: 2000, unit: '' },\n  { id: '4', label: 'Customer Satisfaction', current: 4.6, target: 5.0, unit: '/5' }\n];\ninterface ActivityItem {\n  id: string;\n  type: 'sale' | 'user' | 'revenue' | 'alert' | 'product';\n  message: string;\n  timestamp: string;\n  icon: 'cart' | 'user' | 'dollar' | 'trending' | 'package' | 'alert';\n}\n\nconst mockActivityData: ActivityItem[] = [\n  { id: '1', type: 'sale', message: 'New order #1234 - Premium Subscription', timestamp: '2 minutes ago', icon: 'cart' },\n  { id: '2', type: 'user', message: 'New user registration: john.doe@example.com', timestamp: '5 minutes ago', icon: 'user' },\n  { id: '3', type: 'revenue', message: 'Revenue milestone reached: $50,000', timestamp: '12 minutes ago', icon: 'dollar' },\n  { id: '4', type: 'sale', message: 'Order #1233 completed - Enterprise License', timestamp: '18 minutes ago', icon: 'cart' },\n  { id: '5', type: 'product', message: 'Product updated: Pro Bundle', timestamp: '25 minutes ago', icon: 'package' },\n  { id: '6', type: 'alert', message: 'Low stock alert: Starter Pack', timestamp: '32 minutes ago', icon: 'alert' },\n  { id: '7', type: 'user', message: 'New user registration: jane.smith@example.com', timestamp: '45 minutes ago', icon: 'user' },\n  { id: '8', type: 'sale', message: 'New order #1232 - Basic Plan', timestamp: '1 hour ago', icon: 'cart' },\n  { id: '9', type: 'revenue', message: 'Daily revenue target achieved', timestamp: '1 hour ago', icon: 'trending' },\n  { id: '10', type: 'product', message: 'New product added: Ultimate Package', timestamp: '2 hours ago', icon: 'package' }\n];\n\nconst fadeInUpKeyframes = `\n@keyframes fadeInUp {\n  from {\n    opacity: 0;\n    transform: translateY(20px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n`;\n\nif (typeof document !== 'undefined' && !document.getElementById('fadeInUp-keyframes')) {\n  const style = document.createElement('style');\n  style.id = 'fadeInUp-keyframes';\n  style.textContent = fadeInUpKeyframes;\n  document.head.appendChild(style);\n}\nexport default function AnalyticsDashboard() {\n  type SortField = 'product' | 'sales' | 'revenue' | 'status';\n  type SortDirection = 'asc' | 'desc' | null;\n  const [sortField, setSortField] = useState<SortField | null>(null);\n  const [sortDirection, setSortDirection] = useState<SortDirection>(null);\n  const [isDarkMode, setIsDarkMode] = useState(false);\n  const [isRefreshing, setIsRefreshing] = useState(false);\n  const [metrics, setMetrics] = useState<MetricData[]>(mockMetrics);\n  const [chartData, setChartData] = useState<ChartDataPoint[]>(mockChartData);\n  const [tableData, setTableData] = useState<TableRow[]>(mockTableData);\n\n  const toggleDarkMode = useCallback(() => {\n    setIsDarkMode(prev => !prev);\n  }, []);\n  const getMaxValue = useCallback((data: ChartDataPoint[]) => {\n    const maxUsers = Math.max(...data.map(d => d.users));\n    const maxOrders = Math.max(...data.map(d => d.orders));\n    return Math.max(maxUsers, maxOrders);\n  }, []);\n\n  const handleSort = useCallback((field: SortField) => {\n    if (sortField === field) {\n      if (sortDirection === 'asc') {\n        setSortDirection('desc');\n      } else if (sortDirection === 'desc') {\n        setSortDirection(null);\n        setSortField(null);\n      } else {\n        setSortDirection('asc');\n      }\n    } else {\n      setSortField(field);\n      setSortDirection('asc');\n    }\n  }, [sortField, sortDirection]);\n\n  const sortedTableData = useCallback(() => {\n    if (!sortField || !sortDirection) return tableData;\n\n    return [...tableData].sort((a, b) => {\n      let aValue = a[sortField];\n      let bValue = b[sortField];\n\n      if (typeof aValue === 'string') {\n        aValue = aValue.toLowerCase();\n        bValue = (bValue as string).toLowerCase();\n      }\n\n      if (aValue < bValue) return sortDirection === 'asc' ? -1 : 1;\n      if (aValue > bValue) return sortDirection === 'asc' ? 1 : -1;\n      return 0;\n    });\n  }, [tableData, sortField, sortDirection]);\n\n  const getStatusBadgeVariant = (status: TableRow['status']) => {\n    switch (status) {\n      case 'active':\n        return 'default';\n      case 'pending':\n        return 'secondary';\n      case 'inactive':\n        return 'outline';\n      default:\n        return 'default';\n    }\n  };\n\n  const getSortIcon = (field: SortField) => {\n    if (sortField !== field) return <ArrowUpDown className=\"h-4 w-4\" />;\n    if (sortDirection === 'asc') return <ArrowUp className=\"h-4 w-4\" />;\n    if (sortDirection === 'desc') return <ArrowDown className=\"h-4 w-4\" />;\n    return <ArrowUpDown className=\"h-4 w-4\" />;\n  };\n  const handleRefresh = useCallback(() => {\n    setIsRefreshing(true);\n    \n    setTimeout(() => {\n      // Generate updated metrics with random variations\n      const updatedMetrics = mockMetrics.map(metric => ({\n        ...metric,\n        value: metric.value + Math.floor(Math.random() * 200 - 100),\n        change: parseFloat((Math.random() * 20 - 5).toFixed(1)),\n        trend: Math.random() > 0.5 ? 'up' as const : 'down' as const\n      }));\n      \n      // Generate updated chart data with random variations\n      const updatedChartData = mockChartData.map(point => ({\n        ...point,\n        revenue: point.revenue + Math.floor(Math.random() * 4000 - 2000),\n        users: point.users + Math.floor(Math.random() * 100 - 50),\n        orders: point.orders + Math.floor(Math.random() * 50 - 25)\n      }));\n      \n      // Generate updated table data with random variations\n      const updatedTableData = mockTableData.map(row => ({\n        ...row,\n        sales: row.sales + Math.floor(Math.random() * 40 - 20),\n        revenue: row.revenue + Math.floor(Math.random() * 2000 - 1000)\n      }));\n      \n      setMetrics(updatedMetrics);\n      setChartData(updatedChartData);\n      setTableData(updatedTableData);\n      setIsRefreshing(false);\n    }, 1500);\n  }, []);\n\n  return (\n    <div className={`min-h-screen transition-colors duration-300 ${isDarkMode ? 'dark bg-gray-900' : 'bg-gray-50'}`}>\n      <div className=\"container mx-auto p-4 md:p-6 lg:p-8\">\n        <div className=\"flex flex-col md:flex-row justify-between items-start md:items-center gap-4 mb-8\">\n          <div>\n            <h1 className={`text-3xl md:text-4xl font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n              Analytics Dashboard\n            </h1>\n            <p className={`mt-2 ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n              Real-time insights and performance metrics\n            </p>\n          </div>\n          \n          <div className=\"flex gap-2\">\n            <Button\n              variant=\"outline\"\n              size=\"icon\"\n              onClick={toggleDarkMode}\n              className={isDarkMode ? 'border-gray-700' : ''}\n            >\n              {isDarkMode ? <Sun className=\"h-5 w-5\" /> : <Moon className=\"h-5 w-5\" />}\n            </Button>\n            \n            <Button\n              variant=\"outline\"\n              onClick={handleRefresh}\n              disabled={isRefreshing}\n              className={isDarkMode ? 'border-gray-700' : ''}\n            >\n              <RefreshCw className={`h-4 w-4 mr-2 ${isRefreshing ? 'animate-spin' : ''}`} />\n              Refresh\n            </Button>\n          </div>\n        </div>\n\n        <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 md:gap-6 mb-8\">\n          {metrics.map((metric, index) => {\n            const Icon = metric.label.includes('Revenue') ? DollarSign :\n                        metric.label.includes('Users') ? Users :\n                        metric.label.includes('Orders') ? ShoppingCart :\n                        Target;\n            \n            const TrendIcon = metric.trend === 'up' ? TrendingUp : TrendingDown;\n            const trendColor = metric.trend === 'up' ? 'text-green-500' : 'text-red-500';\n            const trendBgColor = metric.trend === 'up' ? 'bg-green-50 dark:bg-green-900/20' : 'bg-red-50 dark:bg-red-900/20';\n\n            return (\n              <Card \n                key={metric.id}\n                className={`transition-all duration-300 hover:shadow-lg hover:-translate-y-1 ${\n                  isDarkMode ? 'bg-gray-800 border-gray-700' : 'bg-white'\n                }`}\n                style={{\n                  animation: `fadeInUp 0.5s ease-out ${index * 0.1}s both`\n                }}\n              >\n                <CardHeader className=\"flex flex-row items-center justify-between pb-2\">\n                  <CardTitle className={`text-sm font-medium ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                    {metric.label}\n                  </CardTitle>\n                  <div className={`p-2 rounded-lg ${isDarkMode ? 'bg-gray-700' : 'bg-gray-100'}`}>\n                    <Icon className={`h-4 w-4 ${isDarkMode ? 'text-gray-300' : 'text-gray-600'}`} />\n                  </div>\n                </CardHeader>\n                <CardContent>\n                  <div className={`text-2xl font-bold mb-2 ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                    {metric.label.includes('Revenue') ? `$${metric.value.toLocaleString()}` :\n                     metric.label.includes('Rate') ? `${metric.value}%` :\n                     metric.value.toLocaleString()}\n                  </div>\n                  <div className=\"flex items-center gap-2\">\n                    <div className={`flex items-center gap-1 px-2 py-1 rounded-full ${trendBgColor}`}>\n                      <TrendIcon className={`h-3 w-3 ${trendColor}`} />\n                      <span className={`text-xs font-medium ${trendColor}`}>\n                        {Math.abs(metric.change)}%\n                      </span>\n                    </div>\n                    <span className={`text-xs ${isDarkMode ? 'text-gray-500' : 'text-gray-500'}`}>\n                      vs last period\n                    </span>\n                  </div>\n                </CardContent>\n              </Card>\n            );\n          })}\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-4 md:gap-6 mb-8\">\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Revenue Overview</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Daily revenue trends for the past week\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <ResponsiveContainer width=\"100%\" height={300}>\n                <LineChart data={chartData} margin={{ top: 5, right: 20, left: 0, bottom: 5 }}>\n                  <CartesianGrid \n                    strokeDasharray=\"3 3\" \n                    stroke={isDarkMode ? '#374151' : '#e5e7eb'} \n                  />\n                  <XAxis \n                    dataKey=\"date\" \n                    stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                    tick={{ fill: isDarkMode ? '#9ca3af' : '#6b7280', fontSize: 12 }}\n                    tickFormatter={(value) => new Date(value).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n                  />\n                  <YAxis \n                    stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                    tick={{ fill: isDarkMode ? '#9ca3af' : '#6b7280', fontSize: 12 }}\n                    tickFormatter={(value) => `$${(value / 1000).toFixed(0)}k`}\n                  />\n                  <Tooltip \n                    contentStyle={{\n                      backgroundColor: isDarkMode ? '#1f2937' : '#ffffff',\n                      border: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\n                      borderRadius: '8px',\n                      color: isDarkMode ? '#ffffff' : '#000000'\n                    }}\n                    labelStyle={{ color: isDarkMode ? '#9ca3af' : '#6b7280' }}\n                    formatter={(value: number) => [`$${value.toLocaleString()}`, 'Revenue']}\n                    labelFormatter={(label) => new Date(label).toLocaleDateString('en-US', { month: 'long', day: 'numeric', year: 'numeric' })}\n                  />\n                  <Line \n                    type=\"monotone\" \n                    dataKey=\"revenue\" \n                    stroke=\"#3b82f6\" \n                    strokeWidth={2}\n                    dot={{ fill: '#3b82f6', r: 4 }}\n                    activeDot={{ r: 6, fill: '#2563eb' }}\n                  />\n                </LineChart>\n              </ResponsiveContainer>\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>User Activity</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Active users and order volume\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-6\">\n                <div className=\"flex items-center justify-center gap-6 pb-4\">\n                  <div className=\"flex items-center gap-2\">\n                    <div className=\"w-4 h-4 bg-blue-500 rounded\"></div>\n                    <span className={`text-sm ${isDarkMode ? 'text-gray-300' : 'text-gray-600'}`}>\n                      Active Users\n                    </span>\n                  </div>\n                  <div className=\"flex items-center gap-2\">\n                    <div className=\"w-4 h-4 bg-green-500 rounded\"></div>\n                    <span className={`text-sm ${isDarkMode ? 'text-gray-300' : 'text-gray-600'}`}>\n                      Orders\n                    </span>\n                  </div>\n                </div>\n\n                <div className=\"space-y-4\">\n                  {chartData.map((dataPoint, index) => {\n                    const maxValue = getMaxValue(chartData);\n                    const usersWidth = (dataPoint.users / maxValue) * 100;\n                    const ordersWidth = (dataPoint.orders / maxValue) * 100;\n                    \n                    return (\n                      <div key={index} className=\"space-y-2\">\n                        <div className={`text-xs font-medium ${isDarkMode ? 'text-gray-400' : 'text-gray-500'}`}>\n                          {new Date(dataPoint.date).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n                        </div>\n                        \n                        <div className=\"space-y-1.5\">\n                          <div className=\"relative group\">\n                            <div className={`h-8 rounded transition-all duration-500 ${isDarkMode ? 'bg-gray-700' : 'bg-gray-200'}`}>\n                              <div \n                                className=\"h-full bg-blue-500 rounded transition-all duration-700 ease-out flex items-center justify-end pr-2\"\n                                style={{ width: `${usersWidth}%` }}\n                              >\n                                <span className=\"text-xs font-semibold text-white opacity-0 group-hover:opacity-100 transition-opacity\">\n                                  {dataPoint.users}\n                                </span>\n                              </div>\n                            </div>\n                          </div>\n                          \n                          <div className=\"relative group\">\n                            <div className={`h-8 rounded transition-all duration-500 ${isDarkMode ? 'bg-gray-700' : 'bg-gray-200'}`}>\n                              <div \n                                className=\"h-full bg-green-500 rounded transition-all duration-700 ease-out flex items-center justify-end pr-2\"\n                                style={{ width: `${ordersWidth}%` }}\n                              >\n                                <span className=\"text-xs font-semibold text-white opacity-0 group-hover:opacity-100 transition-opacity\">\n                                  {dataPoint.orders}\n                                </span>\n                              </div>\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                    );\n                  })}\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-4 md:gap-6 mb-8\">\n          <Card className={`lg:col-span-2 ${isDarkMode ? 'bg-gray-800 border-gray-700' : ''}`}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Product Performance</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Top selling products and revenue breakdown\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"overflow-x-auto\">\n                <Table>\n                  <TableHeader>\n                    <TableRow className={isDarkMode ? 'border-gray-700' : ''}>\n                      <TableHead className={isDarkMode ? 'text-gray-300' : ''}>\n                        <Button\n                          variant=\"ghost\"\n                          onClick={() => handleSort('product')}\n                          className=\"h-8 px-2 lg:px-3\"\n                        >\n                          Product\n                          {getSortIcon('product')}\n                        </Button>\n                      </TableHead>\n                      <TableHead className={isDarkMode ? 'text-gray-300' : ''}>\n                        <Button\n                          variant=\"ghost\"\n                          onClick={() => handleSort('sales')}\n                          className=\"h-8 px-2 lg:px-3\"\n                        >\n                          Sales\n                          {getSortIcon('sales')}\n                        </Button>\n                      </TableHead>\n                      <TableHead className={isDarkMode ? 'text-gray-300' : ''}>\n                        <Button\n                          variant=\"ghost\"\n                          onClick={() => handleSort('revenue')}\n                          className=\"h-8 px-2 lg:px-3\"\n                        >\n                          Revenue\n                          {getSortIcon('revenue')}\n                        </Button>\n                      </TableHead>\n                      <TableHead className={isDarkMode ? 'text-gray-300' : ''}>\n                        <Button\n                          variant=\"ghost\"\n                          onClick={() => handleSort('status')}\n                          className=\"h-8 px-2 lg:px-3\"\n                        >\n                          Status\n                          {getSortIcon('status')}\n                        </Button>\n                      </TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {sortedTableData().map((row) => (\n                      <TableRow \n                        key={row.id}\n                        className={isDarkMode ? 'border-gray-700 hover:bg-gray-700/50' : 'hover:bg-gray-50'}\n                      >\n                        <TableCell className={`font-medium ${isDarkMode ? 'text-gray-200' : ''}`}>\n                          {row.product}\n                        </TableCell>\n                        <TableCell className={isDarkMode ? 'text-gray-300' : ''}>\n                          {row.sales.toLocaleString()}\n                        </TableCell>\n                        <TableCell className={isDarkMode ? 'text-gray-300' : ''}>\n                          ${row.revenue.toLocaleString()}\n                        </TableCell>\n                        <TableCell>\n                          <Badge \n                            variant={getStatusBadgeVariant(row.status)}\n                            className=\"capitalize\"\n                          >\n                            {row.status}\n                          </Badge>\n                        </TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Sales Distribution</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Revenue by product category\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"h-[300px] w-full\">\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <PieChart>\n                    <RechartsTooltip\n                      contentStyle={{\n                        backgroundColor: isDarkMode ? '#1f2937' : '#ffffff',\n                        border: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\n                        borderRadius: '6px',\n                        color: isDarkMode ? '#ffffff' : '#000000'\n                      }}\n                      formatter={(value: number) => [`$${value.toLocaleString()}`, 'Revenue']}\n                    />\n                    <Pie\n                      data={tableData}\n                      dataKey=\"revenue\"\n                      nameKey=\"product\"\n                      cx=\"50%\"\n                      cy=\"50%\"\n                      innerRadius={60}\n                      outerRadius={90}\n                      paddingAngle={2}\n                      label={({ percent }) => `${(percent * 100).toFixed(1)}%`}\n                    >\n                      {tableData.map((entry, index) => {\n                        const colors = ['#3b82f6', '#8b5cf6', '#ec4899', '#f59e0b', '#10b981', '#6366f1'];\n                        return <Cell key={`cell-${entry.id}`} fill={colors[index % colors.length]} />;\n                      })}\n                    </Pie>\n                    <Legend\n                      verticalAlign=\"bottom\"\n                      height={36}\n                      formatter={(value) => (\n                        <span className={isDarkMode ? 'text-gray-300' : 'text-gray-700'}>\n                          {value}\n                        </span>\n                      )}\n                    />\n                  </PieChart>\n                </ResponsiveContainer>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 md:gap-6\">\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Recent Activity</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Latest transactions and updates\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4 max-h-[400px] overflow-y-auto pr-2\">\n                {mockActivityData.map((activity) => {\n                  const getIcon = () => {\n                    switch (activity.icon) {\n                      case 'cart':\n                        return <ShoppingCart className=\"h-4 w-4\" />;\n                      case 'user':\n                        return <UserPlus className=\"h-4 w-4\" />;\n                      case 'dollar':\n                        return <DollarSign className=\"h-4 w-4\" />;\n                      case 'trending':\n                        return <TrendingUp className=\"h-4 w-4\" />;\n                      case 'package':\n                        return <Package className=\"h-4 w-4\" />;\n                      case 'alert':\n                        return <AlertCircle className=\"h-4 w-4\" />;\n                      default:\n                        return <ShoppingCart className=\"h-4 w-4\" />;\n                    }\n                  };\n\n                  const getIconBgColor = () => {\n                    switch (activity.type) {\n                      case 'sale':\n                        return isDarkMode ? 'bg-green-900/30 text-green-400' : 'bg-green-100 text-green-600';\n                      case 'user':\n                        return isDarkMode ? 'bg-blue-900/30 text-blue-400' : 'bg-blue-100 text-blue-600';\n                      case 'revenue':\n                        return isDarkMode ? 'bg-purple-900/30 text-purple-400' : 'bg-purple-100 text-purple-600';\n                      case 'alert':\n                        return isDarkMode ? 'bg-red-900/30 text-red-400' : 'bg-red-100 text-red-600';\n                      case 'product':\n                        return isDarkMode ? 'bg-orange-900/30 text-orange-400' : 'bg-orange-100 text-orange-600';\n                      default:\n                        return isDarkMode ? 'bg-gray-700 text-gray-300' : 'bg-gray-100 text-gray-600';\n                    }\n                  };\n\n                  return (\n                    <div key={activity.id} className=\"flex items-start gap-3 pb-3 border-b last:border-b-0 border-gray-200 dark:border-gray-700\">\n                      <div className={`flex-shrink-0 w-8 h-8 rounded-full flex items-center justify-center ${getIconBgColor()}`}>\n                        {getIcon()}\n                      </div>\n                      <div className=\"flex-1 min-w-0\">\n                        <p className={`text-sm ${isDarkMode ? 'text-gray-200' : 'text-gray-900'}`}>\n                          {activity.message}\n                        </p>\n                        <p className={`text-xs mt-1 ${isDarkMode ? 'text-gray-500' : 'text-gray-500'}`}>\n                          {activity.timestamp}\n                        </p>\n                      </div>\n                    </div>\n                  );\n                })}\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Performance Goals</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Progress towards monthly targets\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-6\">\n                {mockGoals.map((goal) => {\n                  const percentage = Math.min((goal.current / goal.target) * 100, 100);\n                  const isComplete = percentage >= 100;\n                  \n                  return (\n                    <div key={goal.id} className=\"space-y-2\">\n                      <div className=\"flex justify-between items-center\">\n                        <span className={`text-sm font-medium ${isDarkMode ? 'text-gray-200' : 'text-gray-700'}`}>\n                          {goal.label}\n                        </span>\n                        <span className={`text-sm font-semibold ${\n                          isComplete \n                            ? 'text-green-600 dark:text-green-400' \n                            : isDarkMode ? 'text-gray-300' : 'text-gray-900'\n                        }`}>\n                          {percentage.toFixed(0)}%\n                        </span>\n                      </div>\n                      \n                      <div className={`w-full h-2 rounded-full overflow-hidden ${\n                        isDarkMode ? 'bg-gray-700' : 'bg-gray-200'\n                      }`}>\n                        <div\n                          className={`h-full transition-all duration-500 rounded-full ${\n                            isComplete\n                              ? 'bg-green-500'\n                              : percentage >= 75\n                              ? 'bg-blue-500'\n                              : percentage >= 50\n                              ? 'bg-yellow-500'\n                              : 'bg-orange-500'\n                          }`}\n                          style={{ width: `${percentage}%` }}\n                        />\n                      </div>\n                      \n                      <div className=\"flex justify-between items-center\">\n                        <span className={`text-xs ${isDarkMode ? 'text-gray-400' : 'text-gray-500'}`}>\n                          {goal.unit === '$' ? `$${goal.current.toLocaleString()}` : `${goal.current}${goal.unit}`}\n                        </span>\n                        <span className={`text-xs ${isDarkMode ? 'text-gray-400' : 'text-gray-500'}`}>\n                          Target: {goal.unit === '$' ? `$${goal.target.toLocaleString()}` : `${goal.target}${goal.unit}`}\n                        </span>\n                      </div>\n                    </div>\n                  );\n                })}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}",
    "error": null,
    "elapsed_time": 64.32469272613525,
    "success": true
  }
}