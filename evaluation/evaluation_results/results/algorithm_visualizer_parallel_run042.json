{
  "prompt_id": "algorithm_visualizer",
  "prompt_name": "Algorithm Visualizer",
  "mode": "parallel",
  "run_number": 42,
  "timestamp": "2025-10-14T01:45:47.232999",
  "response_time": 129.42119193077087,
  "total_tokens": null,
  "response_content": "import React, { useState, useCallback, useEffect } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Slider } from '@/components/ui/slider';\nimport { Play, Pause, RotateCcw, Zap, BarChart3 } from 'lucide-react';\n\nimport { motion } from 'framer-motion';\nimport { useState, useCallback } from 'react';\nimport { useState, useCallback } from 'react';\n\ninterface ArrayElement {\n  value: number;\n  id: string;\n  isComparing?: boolean;\n  isSwapping?: boolean;\n  isSorted?: boolean;\n}\n\ninterface AlgorithmStep {\n  array: ArrayElement[];\n  comparingIndices: number[];\n  swappingIndices: number[];\n  sortedIndices: number[];\n}\n\ntype AlgorithmType = 'bubble' | 'quick' | 'merge' | 'insertion';\n\nconst NEON_COLORS = [\n  '#00ffff',\n  '#ff00ff', \n  '#00ff00',\n  '#ffff00',\n  '#ff0066',\n  '#00ffaa'\n];\n\nconst mockAlgorithms = [\n  { id: 'bubble', name: 'Bubble Sort', complexity: 'O(n\u00b2)' },\n  { id: 'quick', name: 'Quick Sort', complexity: 'O(n log n)' },\n  { id: 'merge', name: 'Merge Sort', complexity: 'O(n log n)' },\n  { id: 'insertion', name: 'Insertion Sort', complexity: 'O(n\u00b2)' }\n];\n\nexport default function AlgorithmVisualizer() {\n  // Get current visualization state\n  const currentArray = steps.length > 0 && currentStep < steps.length \n    ? steps[currentStep].array \n    : array;\n  const comparingIndices = steps.length > 0 && currentStep < steps.length \n    ? steps[currentStep].comparingIndices \n    : [];\n  const swappingIndices = steps.length > 0 && currentStep < steps.length \n    ? steps[currentStep].swappingIndices \n    : [];\n  const sortedIndices = steps.length > 0 && currentStep < steps.length \n    ? steps[currentStep].sortedIndices \n    : [];\n\n  const [array, setArray] = useState<ArrayElement[]>([]);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [speed, setSpeed] = useState([50]);\n  const [arraySize, setArraySize] = useState([20]);\n  const [selectedAlgorithm, setSelectedAlgorithm] = useState<AlgorithmType>('bubble');\n  const [currentStep, setCurrentStep] = useState(0);\n  const [steps, setSteps] = useState<AlgorithmStep[]>([]);\n  const [totalComparisons, setTotalComparisons] = useState(0);\n  const [totalSwaps, setTotalSwaps] = useState(0);\n\n  const generateRandomArray = useCallback(() => {\n    const newArray: ArrayElement[] = Array.from({ length: arraySize[0] }, (_, index) => ({\n      value: Math.floor(Math.random() * 100) + 5,\n      id: `element-${index}-${Date.now()}`,\n      isComparing: false,\n      isSwapping: false,\n      isSorted: false\n    }));\n    setArray(newArray);\n    setSteps([]);\n    setCurrentStep(0);\n    setIsPlaying(false);\n  }, [arraySize]);\n\n  const resetVisualization = useCallback(() => {\n\nsetIsPlaying(false);\n    setCurrentStep(0);\n    setSteps([]);\n    generateRandomArray();\n    }, [generateRandomArray]);\n\n  // Animation effect for step-by-step visualization\n  const animateSteps = useCallback(() => {\n    if (currentStep < steps.length && isPlaying) {\n      const timer = setTimeout(() => {\n        setCurrentStep(prev => prev + 1);\n      }, 1000 - speed[0] * 9.5); // Convert speed slider (0-100) to delay (1000ms-50ms)\n      \n      return () => clearTimeout(timer);\n    } else if (currentStep >= steps.length && isPlaying) {\n      setIsPlaying(false);\n    }\n  }, [currentStep, steps.length, isPlaying, speed]);\n\n  // Run animation effect\n  React.useEffect(() => {\n    const cleanup = animateSteps();\n    return cleanup;\n  }, [animateSteps]);\n  const startVisualization = useCallback(() => {\n    if (steps.length === 0) return;\n    setIsPlaying(true);\n    if (currentStep >= steps.length) {\n      setCurrentStep(0);\n    }\n  }, [steps, speed, currentStep]);\n\n  const pauseVisualization = useCallback(() => {\n    setIsPlaying(false);\n  }, []);\n\n  const generateSortingSteps = useCallback((algorithm: AlgorithmType) => {\n    const sortedArray = [...array];\n    const newSteps: AlgorithmStep[] = [];\n\n    const addStep = (arr: ArrayElement[], comparing: number[] = [], swapping: number[] = [], sorted: number[] = []) => {\n      newSteps.push({\n        array: arr.map(el => ({ ...el })),\n        comparingIndices: [...comparing],\n        swappingIndices: [...swapping],\n        sortedIndices: [...sorted]\n      });\n    };\n\n    // Initial state\n    addStep(sortedArray);\n\n    switch (algorithm) {\n      case 'bubble': {\n        const sortedSet = new Set<number>();\n        for (let i = 0; i < sortedArray.length - 1; i++) {\n          for (let j = 0; j < sortedArray.length - i - 1; j++) {\n            // Comparing\n            addStep(sortedArray, [j, j + 1], [], Array.from(sortedSet));\n            \n            if (sortedArray[j].value > sortedArray[j + 1].value) {\n              // Swapping\n              addStep(sortedArray, [], [j, j + 1], Array.from(sortedSet));\n              [sortedArray[j], sortedArray[j + 1]] = [sortedArray[j + 1], sortedArray[j]];\n              addStep(sortedArray, [], [], Array.from(sortedSet));\n            }\n          }\n          sortedSet.add(sortedArray.length - i - 1);\n          addStep(sortedArray, [], [], Array.from(sortedSet));\n        }\n        sortedSet.add(0);\n        addStep(sortedArray, [], [], Array.from(sortedSet));\n        break;\n      }\n\n      case 'insertion': {\n        const sortedSet = new Set<number>([0]);\n        addStep(sortedArray, [], [], [0]);\n        \n        for (let i = 1; i < sortedArray.length; i++) {\n          const key = sortedArray[i];\n          let j = i - 1;\n          \n          addStep(sortedArray, [i], [], Array.from(sortedSet));\n          \n          while (j >= 0 && sortedArray[j].value > key.value) {\n            addStep(sortedArray, [j, j + 1], [], Array.from(sortedSet));\n            addStep(sortedArray, [], [j, j + 1], Array.from(sortedSet));\n            sortedArray[j + 1] = sortedArray[j];\n            addStep(sortedArray, [], [], Array.from(sortedSet));\n            j--;\n          }\n          \n          sortedArray[j + 1] = key;\n          sortedSet.add(i);\n          addStep(sortedArray, [], [], Array.from(sortedSet));\n        }\n        break;\n      }\n\n      case 'quick': {\n        const sortedSet = new Set<number>();\n        \n        const partition = (low: number, high: number): number => {\n          const pivot = sortedArray[high];\n          addStep(sortedArray, [high], [], Array.from(sortedSet));\n          let i = low - 1;\n\n          for (let j = low; j < high; j++) {\n            addStep(sortedArray, [j, high], [], Array.from(sortedSet));\n            \n            if (sortedArray[j].value < pivot.value) {\n              i++;\n              if (i !== j) {\n                addStep(sortedArray, [], [i, j], Array.from(sortedSet));\n                [sortedArray[i], sortedArray[j]] = [sortedArray[j], sortedArray[i]];\n                addStep(sortedArray, [], [], Array.from(sortedSet));\n              }\n            }\n          }\n\n          addStep(sortedArray, [], [i + 1, high], Array.from(sortedSet));\n          [sortedArray[i + 1], sortedArray[high]] = [sortedArray[high], sortedArray[i + 1]];\n          addStep(sortedArray, [], [], Array.from(sortedSet));\n          \n          return i + 1;\n        };\n\n        const quickSort = (low: number, high: number) => {\n          if (low < high) {\n            const pi = partition(low, high);\n            sortedSet.add(pi);\n            addStep(sortedArray, [], [], Array.from(sortedSet));\n            \n            quickSort(low, pi - 1);\n            quickSort(pi + 1, high);\n          } else if (low === high) {\n            sortedSet.add(low);\n            addStep(sortedArray, [], [], Array.from(sortedSet));\n          }\n        };\n\n        quickSort(0, sortedArray.length - 1);\n        break;\n      }\n\n      case 'merge': {\n        const sortedSet = new Set<number>();\n        \n        const merge = (left: number, mid: number, right: number) => {\n          const leftArr = sortedArray.slice(left, mid + 1);\n          const rightArr = sortedArray.slice(mid + 1, right + 1);\n          \n          let i = 0, j = 0, k = left;\n\n          while (i < leftArr.length && j < rightArr.length) {\n            addStep(sortedArray, [left + i, mid + 1 + j], [], Array.from(sortedSet));\n            \n            if (leftArr[i].value <= rightArr[j].value) {\n              sortedArray[k] = leftArr[i];\n              i++;\n            } else {\n              sortedArray[k] = rightArr[j];\n              j++;\n            }\n            addStep(sortedArray, [], [k], Array.from(sortedSet));\n            k++;\n          }\n\n          while (i < leftArr.length) {\n            sortedArray[k] = leftArr[i];\n            addStep(sortedArray, [], [k], Array.from(sortedSet));\n            i++;\n            k++;\n          }\n\n          while (j < rightArr.length) {\n            sortedArray[k] = rightArr[j];\n            addStep(sortedArray, [], [k], Array.from(sortedSet));\n            j++;\n            k++;\n          }\n\n          for (let idx = left; idx <= right; idx++) {\n            sortedSet.add(idx);\n          }\n          addStep(sortedArray, [], [], Array.from(sortedSet));\n        };\n\n        const mergeSort = (left: number, right: number) => {\n          if (left < right) {\n            const mid = Math.floor((left + right) / 2);\n            mergeSort(left, mid);\n            mergeSort(mid + 1, right);\n            merge(left, mid, right);\n          } else if (left === right) {\n            sortedSet.add(left);\n            addStep(sortedArray, [], [], Array.from(sortedSet));\n          }\n        };\n\n        mergeSort(0, sortedArray.length - 1);\n        break;\n      }\n    }\n\n    setSteps(newSteps);\n    setCurrentStep(0);\n  }, [array]);\n  // Initialize array on mount\n  React.useEffect(() => {\n    generateRandomArray();\n  }, []);\n\n  // Regenerate array when size changes\n  React.useEffect(() => {\n    if (!isPlaying) {\n      generateRandomArray();\n    }\n  }, [arraySize[0]]);\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-gray-900 via-purple-900 to-gray-900 p-8\">\n      <div className=\"max-w-7xl mx-auto space-y-8\">\n        <motion.div \n          initial={{ opacity: 0, y: -20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.8 }}\n          className=\"text-center space-y-4\"\n        >\n          <motion.h1 \n            className=\"text-6xl font-bold bg-gradient-to-r from-cyan-400 via-purple-400 to-pink-400 bg-clip-text text-transparent\"\n            animate={{ \n              textShadow: [\n                '0 0 20px rgba(0, 255, 255, 0.5)',\n                '0 0 40px rgba(255, 0, 255, 0.5)',\n                '0 0 20px rgba(0, 255, 255, 0.5)'\n              ]\n            }}\n            transition={{ duration: 2, repeat: Infinity }}\n          >\n            Algorithm Visualizer\n          </motion.h1>\n          \n          <div className=\"flex items-center justify-center gap-4\">\n            <motion.div\n              initial={{ scale: 0 }}\n              animate={{ scale: 1 }}\n              transition={{ delay: 0.3, type: \"spring\" }}\n              className=\"flex items-center gap-2 px-6 py-3 bg-gray-800/50 backdrop-blur-sm rounded-full border border-cyan-500/30\"\n            >\n              <Zap className=\"w-5 h-5 text-cyan-400\" />\n              <span className=\"text-xl font-semibold text-cyan-300\">\n                {mockAlgorithms.find(a => a.id === selectedAlgorithm)?.name || 'Bubble Sort'}\n              </span>\n            </motion.div>\n            \n            <motion.div\n              initial={{ scale: 0 }}\n              animate={{ scale: 1 }}\n              transition={{ delay: 0.5, type: \"spring\" }}\n              className=\"flex items-center gap-2 px-4 py-2 bg-purple-900/50 backdrop-blur-sm rounded-full border border-purple-500/50\"\n              style={{\n                boxShadow: '0 0 20px rgba(168, 85, 247, 0.4)'\n              }}\n            >\n              <BarChart3 className=\"w-4 h-4 text-purple-300\" />\n              <span className=\"text-sm font-mono text-purple-200\">\n                {mockAlgorithms.find(a => a.id === selectedAlgorithm)?.complexity || 'O(n\u00b2)'}\n              </span>\n            </motion.div>\n          </div>\n        </motion.div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-6\">\n          <div className=\"lg:col-span-1 space-y-6\">\n            <motion.div\n              initial={{ opacity: 0, x: -50 }}\n              animate={{ opacity: 1, x: 0 }}\n              className=\"bg-gray-900/50 backdrop-blur-lg border border-cyan-500/30 rounded-xl p-6 shadow-[0_0_30px_rgba(0,255,255,0.3)]\"\n            >\n              <div className=\"space-y-6\">\n                <div className=\"flex items-center gap-3 mb-6\">\n                  <Zap className=\"w-6 h-6 text-cyan-400\" />\n                  <h3 className=\"text-xl font-bold text-cyan-400\">Controls</h3>\n                </div>\n\n                {/* Algorithm Selection */}\n                <div className=\"space-y-3\">\n                  <label className=\"text-sm font-medium text-cyan-300 flex items-center gap-2\">\n                    <BarChart3 className=\"w-4 h-4\" />\n                    Algorithm\n                  </label>\n                  <div className=\"space-y-2\">\n                    {mockAlgorithms.map((algo) => (\n                      <button\n                        key={algo.id}\n                        onClick={() => {\n                          setSelectedAlgorithm(algo.id as AlgorithmType);\n                          generateSortingSteps(algo.id as AlgorithmType);\n                        }}\n                        disabled={isPlaying}\n                        className={`w-full p-3 rounded-lg border transition-all duration-300 ${\n                          selectedAlgorithm === algo.id\n                            ? 'bg-cyan-500/20 border-cyan-400 shadow-[0_0_20px_rgba(0,255,255,0.4)] text-cyan-300'\n                            : 'bg-gray-800/50 border-gray-700 hover:border-cyan-500/50 text-gray-400 hover:text-cyan-400'\n                        } disabled:opacity-50 disabled:cursor-not-allowed`}\n                      >\n                        <div className=\"text-left\">\n                          <div className=\"font-semibold\">{algo.name}</div>\n                          <div className=\"text-xs opacity-70\">{algo.complexity}</div>\n                        </div>\n                      </button>\n                    ))}\n                  </div>\n                </div>\n\n                {/* Speed Control */}\n                <div className=\"space-y-3\">\n                  <label className=\"text-sm font-medium text-purple-300\">\n                    Speed: {speed[0]}ms\n                  </label>\n                  <Slider\n                    value={speed}\n                    onValueChange={setSpeed}\n                    min={10}\n                    max={200}\n                    step={10}\n                    className=\"[&_[role=slider]]:bg-purple-500 [&_[role=slider]]:border-purple-400 [&_[role=slider]]:shadow-[0_0_10px_rgba(168,85,247,0.6)]\"\n                    disabled={isPlaying}\n                  />\n                </div>\n\n                {/* Array Size Control */}\n                <div className=\"space-y-3\">\n                  <label className=\"text-sm font-medium text-pink-300\">\n                    Array Size: {arraySize[0]}\n                  </label>\n                  <Slider\n                    value={arraySize}\n                    onValueChange={setArraySize}\n                    min={5}\n                    max={50}\n                    step={5}\n                    className=\"[&_[role=slider]]:bg-pink-500 [&_[role=slider]]:border-pink-400 [&_[role=slider]]:shadow-[0_0_10px_rgba(236,72,153,0.6)]\"\n                    disabled={isPlaying}\n                  />\n                </div>\n\n                {/* Action Buttons */}\n                <div className=\"space-y-3 pt-4 border-t border-cyan-500/20\">\n                  <Button\n                    onClick={isPlaying ? pauseVisualization : startVisualization}\n                    disabled={steps.length === 0 || (currentStep >= steps.length && !isPlaying)}\n                    className=\"w-full bg-gradient-to-r from-cyan-600 to-blue-600 hover:from-cyan-500 hover:to-blue-500 text-white shadow-[0_0_20px_rgba(0,255,255,0.5)] transition-all duration-300\"\n                  >\n                    {isPlaying ? (\n                      <>\n                        <Pause className=\"w-4 h-4 mr-2\" />\n                        Pause\n                      </>\n                    ) : (\n                      <>\n                        <Play className=\"w-4 h-4 mr-2\" />\n                        {currentStep >= steps.length ? 'Start' : 'Resume'}\n                      </>\n                    )}\n                  </Button>\n\n                  <Button\n                    onClick={resetVisualization}\n                    variant=\"outline\"\n                    className=\"w-full border-purple-500/50 text-purple-300 hover:bg-purple-500/20 hover:border-purple-400 shadow-[0_0_15px_rgba(168,85,247,0.3)]\"\n                  >\n                    <RotateCcw className=\"w-4 h-4 mr-2\" />\n                    Reset\n                  </Button>\n                </div>\n\n                {/* Progress Indicator */}\n                {steps.length > 0 && (\n                  <div className=\"space-y-2 pt-4 border-t border-cyan-500/20\">\n                    <div className=\"flex justify-between text-xs text-gray-400\">\n                      <span>Progress</span>\n                      <span>{currentStep} / {steps.length}</span>\n                    </div>\n                    <div className=\"h-2 bg-gray-800 rounded-full overflow-hidden\">\n                      <motion.div\n                        className=\"h-full bg-gradient-to-r from-cyan-500 to-purple-500 shadow-[0_0_10px_rgba(0,255,255,0.6)]\"\n                        initial={{ width: 0 }}\n                        animate={{ width: `${(currentStep / steps.length) * 100}%` }}\n                        transition={{ duration: 0.3 }}\n                      />\n                    </div>\n                  </div>\n                )}\n              </div>\n            </motion.div>\n            \n            <div className=\"bg-gray-900/50 backdrop-blur-lg border border-cyan-500/30 rounded-xl p-6 shadow-2xl shadow-cyan-500/20\">\n              <div className=\"space-y-6\">\n                <div>\n                  <h3 className=\"text-sm font-semibold text-cyan-400 mb-3 flex items-center gap-2\">\n                    <Zap className=\"w-4 h-4\" />\n                    Algorithm\n                  </h3>\n                  <div className=\"grid grid-cols-1 gap-2\">\n                    {mockAlgorithms.map((algo) => (\n                      <motion.button\n                        key={algo.id}\n                        onClick={() => setSelectedAlgorithm(algo.id as AlgorithmType)}\n                        className={`relative p-3 rounded-lg border transition-all duration-300 text-left ${\n                          selectedAlgorithm === algo.id\n                            ? 'bg-cyan-500/20 border-cyan-400 shadow-lg shadow-cyan-500/50'\n                            : 'bg-gray-800/50 border-gray-700 hover:border-cyan-500/50 hover:shadow-md hover:shadow-cyan-500/30'\n                        }`}\n                        whileHover={{ scale: 1.02 }}\n                        whileTap={{ scale: 0.98 }}\n                      >\n                        <div className=\"flex flex-col gap-1\">\n                          <span className={`text-sm font-medium ${\n                            selectedAlgorithm === algo.id ? 'text-cyan-300' : 'text-gray-300'\n                          }`}>\n                            {algo.name}\n                          </span>\n                          <span className={`text-xs ${\n                            selectedAlgorithm === algo.id ? 'text-cyan-400/80' : 'text-gray-500'\n                          }`}>\n                            {algo.complexity}\n                          </span>\n                        </div>\n                        {selectedAlgorithm === algo.id && (\n                          <motion.div\n                            className=\"absolute inset-0 rounded-lg border-2 border-cyan-400\"\n                            layoutId=\"algorithmSelector\"\n                            transition={{ type: \"spring\", stiffness: 300, damping: 30 }}\n                          />\n                        )}\n                      </motion.button>\n                    ))}\n                  </div>\n                </div>\n\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <label className=\"text-cyan-400 text-sm font-medium flex items-center gap-2\">\n                      <Zap className=\"w-4 h-4\" />\n                      Speed\n                    </label>\n                    <span className=\"text-cyan-300 text-xs\">{speed[0]}ms</span>\n                  </div>\n                  <Slider\n                    value={speed}\n                    onValueChange={setSpeed}\n                    min={10}\n                    max={200}\n                    step={10}\n                    className=\"[&_[role=slider]]:h-4 [&_[role=slider]]:w-4 [&_[role=slider]]:bg-cyan-400 [&_[role=slider]]:border-2 [&_[role=slider]]:border-cyan-300 [&_[role=slider]]:shadow-[0_0_15px_rgba(34,211,238,0.8)] [&_[role=slider]]:transition-all [&_[role=slider]]:hover:shadow-[0_0_25px_rgba(34,211,238,1)] [&_.relative]:h-2 [&_.relative]:bg-gray-800 [&_.relative]:rounded-full [&_.relative]:border [&_.relative]:border-cyan-500/30 [&_[role=slider]]:focus:ring-4 [&_[role=slider]]:focus:ring-cyan-400/50\"\n                  /></parameter>\n                </div>\n\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <label className=\"text-cyan-400 text-sm font-medium flex items-center gap-2\">\n                      <BarChart3 className=\"w-4 h-4\" />\n                      Array Size\n                    </label>\n                    <span className=\"text-cyan-300 text-xs\">{arraySize[0]}</span>\n                  </div>\n                  <Slider\n                    value={arraySize}\n                    onValueChange={setArraySize}\n                    min={5}\n                    max={100}\n                    step={1}\n                    className=\"[&_[role=slider]]:bg-gradient-to-r [&_[role=slider]]:from-purple-500 [&_[role=slider]]:to-pink-500 [&_[role=slider]]:border-2 [&_[role=slider]]:border-purple-400 [&_[role=slider]]:shadow-lg [&_[role=slider]]:shadow-purple-500/50 [&_[role=slider]]:transition-all [&_[role=slider]]:hover:shadow-purple-500/80 [&_[role=slider]]:hover:scale-110 [&>span]:bg-gradient-to-r [&>span]:from-purple-500/30 [&>span]:to-pink-500/30 [&>span]:h-2\"\n                  />\n                </div>\n\n                <div className=\"flex gap-3 pt-4\">\n                  <Button\n                    onClick={isPlaying ? pauseVisualization : startVisualization}\n                    disabled={array.length === 0 || (steps.length === 0 && !isPlaying)}\n                    className=\"flex-1 relative overflow-hidden group bg-gradient-to-r from-cyan-500 to-blue-500 hover:from-cyan-400 hover:to-blue-400 border-0 shadow-lg shadow-cyan-500/50 hover:shadow-cyan-400/70 transition-all duration-300\"\n                  >\n                    <motion.div\n                      className=\"absolute inset-0 bg-gradient-to-r from-cyan-400/0 via-white/20 to-cyan-400/0\"\n                      animate={{\n                        x: ['-100%', '100%'],\n                      }}\n                      transition={{\n                        duration: 2,\n                        repeat: Infinity,\n                        ease: 'linear',\n                      }}\n                    />\n                    <motion.div\n                      className=\"relative flex items-center justify-center gap-2\"\n                      whileHover={{ scale: 1.05 }}\n                      whileTap={{ scale: 0.95 }}\n                    >\n                      <motion.div\n                        key={isPlaying ? 'pause' : 'play'}\n                        initial={{ scale: 0, rotate: -180 }}\n                        animate={{ scale: 1, rotate: 0 }}\n                        exit={{ scale: 0, rotate: 180 }}\n                        transition={{ type: 'spring', stiffness: 200, damping: 15 }}\n                      >\n                        {isPlaying ? (\n                          <Pause className=\"w-4 h-4 fill-current\" />\n                        ) : (\n                          <Play className=\"w-4 h-4 fill-current\" />\n                        )}\n                      </motion.div>\n                      <span className=\"font-semibold\">\n                        {isPlaying ? 'Pause' : 'Play'}\n                      </span>\n                    </motion.div>\n                  </Button>\n                  <motion.button\n                    onClick={resetVisualization}\n                    disabled={isPlaying}\n                    className=\"flex-1 bg-gradient-to-r from-pink-500 to-purple-600 hover:from-pink-600 hover:to-purple-700 disabled:from-gray-700 disabled:to-gray-800 text-white font-semibold py-3 px-6 rounded-lg shadow-[0_0_20px_rgba(236,72,153,0.5)] hover:shadow-[0_0_30px_rgba(236,72,153,0.8)] disabled:shadow-none transition-all duration-300 flex items-center justify-center gap-2 border border-pink-400/50 disabled:border-gray-700\"\n                    whileHover={{ scale: 1.05 }}\n                    whileTap={{ scale: 0.95, rotate: 360 }}\n                    transition={{ \n                      scale: { type: \"spring\", stiffness: 400, damping: 10 },\n                      rotate: { duration: 0.6, ease: \"easeInOut\" }\n                    }}\n                  >\n                    <motion.div\n                      animate={{ rotate: isPlaying ? 0 : 0 }}\n                      whileHover={{ rotate: 180 }}\n                      transition={{ duration: 0.3 }}\n                    >\n                      <RotateCcw className=\"w-5 h-5\" />\n                    </motion.div>\n                    Reset\n                  </motion.button>\n                </div>\n              </div>\n            </div>\n\n            \n<motion.div\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ delay: 0.2 }}\n              className=\"bg-gray-900/50 backdrop-blur-lg border border-purple-500/30 rounded-xl p-6 shadow-[0_0_30px_rgba(168,85,247,0.3)]\"\n            >\n              <div className=\"space-y-4\">\n                <div className=\"flex items-center gap-3 mb-4\">\n                  <BarChart3 className=\"w-6 h-6 text-purple-400\" />\n                  <h3 className=\"text-xl font-bold text-purple-400\">Statistics</h3>\n                </div>\n\n                <div className=\"grid grid-cols-1 gap-4\">\n                  {/* Comparisons Counter */}\n                  <motion.div\n                    className=\"bg-gradient-to-br from-cyan-500/10 to-blue-500/10 border border-cyan-500/30 rounded-lg p-4 shadow-[0_0_20px_rgba(0,255,255,0.2)]\"\n                    whileHover={{ scale: 1.02, shadow: \"0 0 30px rgba(0,255,255,0.4)\" }}\n                  >\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <p className=\"text-xs text-cyan-300/70 uppercase tracking-wider mb-1\">Comparisons</p>\n                        <motion.p\n                          key={totalComparisons}\n                          initial={{ scale: 1.3, color: '#00ffff' }}\n                          animate={{ scale: 1, color: '#67e8f9' }}\n                          className=\"text-3xl font-bold text-cyan-300\"\n                        >\n                          {totalComparisons}\n                        </motion.p>\n                      </div>\n                      <div className=\"w-12 h-12 rounded-full bg-cyan-500/20 flex items-center justify-center shadow-[0_0_20px_rgba(0,255,255,0.4)]\">\n                        <Zap className=\"w-6 h-6 text-cyan-400\" />\n                      </div>\n                    </div>\n                  </motion.div>\n\n                  {/* Swaps Counter */}\n                  <motion.div\n                    className=\"bg-gradient-to-br from-purple-500/10 to-pink-500/10 border border-purple-500/30 rounded-lg p-4 shadow-[0_0_20px_rgba(168,85,247,0.2)]\"\n                    whileHover={{ scale: 1.02, shadow: \"0 0 30px rgba(168,85,247,0.4)\" }}\n                  >\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <p className=\"text-xs text-purple-300/70 uppercase tracking-wider mb-1\">Swaps</p>\n                        <motion.p\n                          key={totalSwaps}\n                          initial={{ scale: 1.3, color: '#a855f7' }}\n                          animate={{ scale: 1, color: '#c084fc' }}\n                          className=\"text-3xl font-bold text-purple-300\"\n                        >\n                          {totalSwaps}\n                        </motion.p>\n                      </div>\n                      <div className=\"w-12 h-12 rounded-full bg-purple-500/20 flex items-center justify-center shadow-[0_0_20px_rgba(168,85,247,0.4)]\">\n                        <RotateCcw className=\"w-6 h-6 text-purple-400\" />\n                      </div>\n                    </div>\n                  </motion.div>\n\n                  {/* Progress */}\n                  <motion.div\n                    className=\"bg-gradient-to-br from-green-500/10 to-emerald-500/10 border border-green-500/30 rounded-lg p-4 shadow-[0_0_20px_rgba(34,197,94,0.2)]\"\n                    whileHover={{ scale: 1.02, shadow: \"0 0 30px rgba(34,197,94,0.4)\" }}\n                  >\n                    <div className=\"flex items-center justify-between mb-3\">\n                      <div>\n                        <p className=\"text-xs text-green-300/70 uppercase tracking-wider mb-1\">Progress</p>\n                        <motion.p\n                          key={currentStep}\n                          initial={{ scale: 1.2 }}\n                          animate={{ scale: 1 }}\n                          className=\"text-3xl font-bold text-green-300\"\n                        >\n                          {steps.length > 0 ? Math.round((currentStep / steps.length) * 100) : 0}%\n                        </motion.p>\n                      </div>\n                      <div className=\"w-12 h-12 rounded-full bg-green-500/20 flex items-center justify-center shadow-[0_0_20px_rgba(34,197,94,0.4)]\">\n                        <Play className=\"w-6 h-6 text-green-400\" />\n                      </div>\n                    </div>\n                    \n                    {/* Progress Bar */}\n                    <div className=\"relative h-2 bg-gray-800 rounded-full overflow-hidden border border-green-500/20\">\n                      <motion.div\n                        className=\"absolute top-0 left-0 h-full bg-gradient-to-r from-green-500 to-emerald-400 shadow-[0_0_10px_rgba(34,197,94,0.6)]\"\n                        initial={{ width: 0 }}\n                        animate={{ \n                          width: steps.length > 0 ? `${(currentStep / steps.length) * 100}%` : '0%'\n                        }}\n                        transition={{ duration: 0.3, ease: \"easeOut\" }}\n                      />\n                    </div>\n                  </motion.div>\n\n                  {/* Current Step */}\n                  <motion.div\n                    className=\"bg-gradient-to-br from-yellow-500/10 to-orange-500/10 border border-yellow-500/30 rounded-lg p-4 shadow-[0_0_20px_rgba(234,179,8,0.2)]\"\n                    whileHover={{ scale: 1.02, shadow: \"0 0 30px rgba(234,179,8,0.4)\" }}\n                  >\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <p className=\"text-xs text-yellow-300/70 uppercase tracking-wider mb-1\">Current Step</p>\n                        <motion.p\n                          key={currentStep}\n                          initial={{ scale: 1.2 }}\n                          animate={{ scale: 1 }}\n                          className=\"text-2xl font-bold text-yellow-300\"\n                        >\n                          {currentStep} / {steps.length}\n                        </motion.p>\n                      </div>\n                      <div className=\"w-12 h-12 rounded-full bg-yellow-500/20 flex items-center justify-center shadow-[0_0_20px_rgba(234,179,8,0.4)]\">\n                        <BarChart3 className=\"w-6 h-6 text-yellow-400\" />\n                      </div>\n                    </div>\n                  </motion.div>\n                </div>\n              </div>\n            </motion.div>\n          </div>\n\n          <div className=\"lg:col-span-3\">\n            <div className=\"bg-gray-900/50 backdrop-blur-lg border border-purple-500/30 rounded-xl p-8 shadow-2xl shadow-purple-500/20 min-h-[600px]\">\n              \n              <div className=\"relative h-[500px] flex items-end justify-center gap-1 px-4\">\n                {currentArray.length === 0 ? (\n                  <div className=\"absolute inset-0 flex items-center justify-center\">\n                    <div className=\"text-center space-y-4\">\n                      <Zap className=\"w-16 h-16 text-cyan-400 mx-auto animate-pulse\" />\n                      <p className=\"text-cyan-300 text-lg font-medium\">\n                        Generate an array to start visualizing\n                      </p>\n                      <p className=\"text-gray-400 text-sm\">\n                        Adjust the array size and click the reset button\n                      </p>\n                    </div>\n                  </div>\n                ) : (\n                  currentArray.map((element, index) => {\n                    const isComparing = comparingIndices.includes(index);\n                    const isSwapping = swappingIndices.includes(index);\n                    const isSorted = sortedIndices.includes(index);\n                    \n                    const maxValue = Math.max(...currentArray.map(el => el.value));\n                    const heightPercentage = (element.value / maxValue) * 100;\n                    \n                    let barColor = NEON_COLORS[index % NEON_COLORS.length];\n                    let glowColor = barColor;\n                    let shadowIntensity = 0.4;\n                    \n                    if (isSorted) {\n                      barColor = '#00ff00';\n                      glowColor = '#00ff00';\n                      shadowIntensity = 0.8;\n                    } else if (isSwapping) {\n                      barColor = '#ff0066';\n                      glowColor = '#ff0066';\n                      shadowIntensity = 1;\n                    } else if (isComparing) {\n                      barColor = '#ffff00';\n                      glowColor = '#ffff00';\n                      shadowIntensity = 0.9;\n                    }\n                    \n                    return (\n                      <motion.div\n                        key={element.id}\n                        className=\"relative flex-1 min-w-[4px] max-w-[60px] rounded-t-lg\"\n                        style={{\n                          backgroundColor: barColor,\n                          boxShadow: `0 0 ${shadowIntensity * 20}px ${glowColor}, 0 0 ${shadowIntensity * 40}px ${glowColor}`,\n                        }}\n                        initial={{ height: 0, opacity: 0 }}\n                        animate={{\n                          height: `${heightPercentage}%`,\n                          opacity: 1,\n                          scale: isSwapping ? [1, 1.1, 1] : isComparing ? 1.05 : 1,\n                          y: isSwapping ? [-10, 0] : 0,\n                        }}\n                        transition={{\n                          height: { duration: 0.5, ease: \"easeOut\" },\n                          opacity: { duration: 0.3 },\n                          scale: { duration: 0.3 },\n                          y: { duration: 0.4, ease: \"easeInOut\" },\n                        }}\n                      >\n                        {/* Swap trail effect */}\n                        {isSwapping && (\n                          <motion.div\n                            className=\"absolute inset-0 rounded-t-lg\"\n                            style={{\n                              backgroundColor: barColor,\n                              opacity: 0.5,\n                            }}\n                            initial={{ opacity: 0.8, scale: 1 }}\n                            animate={{ opacity: 0, scale: 1.5 }}\n                            transition={{ duration: 0.6, ease: \"easeOut\" }}\n                          />\n                        )}\n                        \n                        {/* Comparison indicator */}\n                        {isComparing && (\n                          <motion.div\n                            className=\"absolute -top-8 left-1/2 transform -translate-x-1/2\"\n                            initial={{ opacity: 0, y: 10 }}\n                            animate={{ opacity: 1, y: 0 }}\n                            exit={{ opacity: 0 }}\n                          >\n                            <div \n                              className=\"w-2 h-2 rounded-full\"\n                              style={{\n                                backgroundColor: glowColor,\n                                boxShadow: `0 0 10px ${glowColor}, 0 0 20px ${glowColor}`,\n                              }}\n                            />\n                          </motion.div>\n                        )}\n                        \n                        {/* Value label */}\n                        {currentArray.length <= 30 && (\n                          <motion.div\n                            className=\"absolute -bottom-6 left-1/2 transform -translate-x-1/2 text-xs font-bold whitespace-nowrap\"\n                            style={{ color: barColor }}\n                            initial={{ opacity: 0 }}\n                            animate={{ opacity: 0.8 }}\n                          >\n                            {element.value}\n                          </motion.div>\n                        )}\n                        \n                        {/* Sorted checkmark */}\n                        {isSorted && (\n                          <motion.div\n                            className=\"absolute top-2 left-1/2 transform -translate-x-1/2\"\n                            initial={{ scale: 0, rotate: -180 }}\n                            animate={{ scale: 1, rotate: 0 }}\n                            transition={{ type: \"spring\", stiffness: 200, damping: 10 }}\n                          >\n                            <div className=\"w-4 h-4 rounded-full bg-green-400 flex items-center justify-center shadow-[0_0_15px_rgba(0,255,0,0.8)]\">\n                              <svg className=\"w-3 h-3 text-gray-900\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={3} d=\"M5 13l4 4L19 7\" />\n                              </svg>\n                            </div>\n                          </motion.div>\n                        )}\n                      </motion.div>\n                    );\n                  })\n                )}\n              </div>\n              \n              <div className=\"relative h-full flex items-end justify-center gap-1\">\n                {(currentStep > 0 && currentStep <= steps.length ? steps[currentStep - 1].array : array).map((element, index) => {\n                  const currentStepData = currentStep > 0 && currentStep <= steps.length ? steps[currentStep - 1] : null;\n                  const isComparing = currentStepData?.comparingIndices.includes(index);\n                  const isSwapping = currentStepData?.swappingIndices.includes(index);\n                  const isSorted = currentStepData?.sortedIndices.includes(index);\n                  \n                  const maxValue = 100;\n                  const heightPercentage = (element.value / maxValue) * 100;\n                  \n                  let barColor = NEON_COLORS[index % NEON_COLORS.length];\n                  let shadowColor = barColor;\n                  let glowIntensity = '0.5';\n                  \n                  if (isSorted) {\n                    barColor = '#00ff00';\n                    shadowColor = '#00ff00';\n                    glowIntensity = '0.8';\n                  } else if (isSwapping) {\n                    barColor = '#ff0066';\n                    shadowColor = '#ff0066';\n                    glowIntensity = '1';\n                  } else if (isComparing) {\n                    barColor = '#ffff00';\n                    shadowColor = '#ffff00';\n                    glowIntensity = '0.9';\n                  }\n                  \n                  return (\n                    <motion.div\n                      key={element.id}\n                      className=\"relative flex-1 min-w-[4px] max-w-[60px] rounded-t-lg\"\n                      style={{\n                        height: `${heightPercentage}%`,\n                        backgroundColor: barColor,\n                        boxShadow: `\n                          0 0 20px ${shadowColor}${Math.floor(parseFloat(glowIntensity) * 255).toString(16).padStart(2, '0')},\n                          0 0 40px ${shadowColor}${Math.floor(parseFloat(glowIntensity) * 128).toString(16).padStart(2, '0')},\n                          0 0 60px ${shadowColor}${Math.floor(parseFloat(glowIntensity) * 64).toString(16).padStart(2, '0')},\n                          inset 0 0 20px ${shadowColor}${Math.floor(parseFloat(glowIntensity) * 128).toString(16).padStart(2, '0')}\n                        `,\n                        border: `2px solid ${barColor}`,\n                      }}\n                      initial={{ height: 0, opacity: 0 }}\n                      animate={{ \n                        height: `${heightPercentage}%`,\n                        opacity: 1,\n                        scale: isSwapping ? [1, 1.1, 1] : isComparing ? 1.05 : 1,\n                      }}\n                      transition={{\n                        height: { duration: 0.5, ease: \"easeInOut\" },\n                        opacity: { duration: 0.3 },\n                        scale: { duration: 0.3, ease: \"easeInOut\" },\n                      }}\n                    >\n                      {/* Glow effect overlay */}\n                      <motion.div\n                        className=\"absolute inset-0 rounded-t-lg\"\n                        style={{\n                          background: `linear-gradient(to top, transparent, ${barColor}40)`,\n                        }}\n                        animate={{\n                          opacity: isSwapping || isComparing ? [0.5, 1, 0.5] : 0.3,\n                        }}\n                        transition={{\n                          duration: 0.6,\n                          repeat: isSwapping || isComparing ? Infinity : 0,\n                        }}\n                      />\n                      \n                      {/* Value label */}\n                      {arraySize[0] <= 30 && (\n                        <motion.div\n                          className=\"absolute -top-8 left-1/2 transform -translate-x-1/2 text-xs font-bold whitespace-nowrap\"\n                          style={{ color: barColor }}\n                          initial={{ opacity: 0, y: 10 }}\n                          animate={{ opacity: 1, y: 0 }}\n                          transition={{ delay: 0.2 }}\n                        >\n                          {element.value}\n                        </motion.div>\n                      )}\n                      \n                      {/* Swap trail effect */}\n                      {isSwapping && (\n                        <motion.div\n                          className=\"absolute inset-0 rounded-t-lg\"\n                          style={{\n                            background: `radial-gradient(circle at center, ${barColor}, transparent)`,\n                          }}\n                          initial={{ opacity: 0, scale: 0.8 }}\n                          animate={{ \n                            opacity: [0, 0.8, 0],\n                            scale: [0.8, 1.2, 1.4],\n                          }}\n                          transition={{\n                            duration: 0.8,\n                            repeat: Infinity,\n                          }}\n                        />\n                      )}\n                      \n                      {/* Sorted indicator */}\n                      {isSorted && (\n                        <motion.div\n                          className=\"absolute -top-6 left-1/2 transform -translate-x-1/2\"\n                          initial={{ opacity: 0, scale: 0 }}\n                          animate={{ opacity: 1, scale: 1 }}\n                          transition={{ type: \"spring\", stiffness: 300, damping: 20 }}\n                        >\n                          <div \n                            className=\"w-2 h-2 rounded-full\"\n                            style={{\n                              backgroundColor: '#00ff00',\n                              boxShadow: '0 0 10px #00ff00, 0 0 20px #00ff00',\n                            }}\n                          />\n                        </motion.div>\n                      )}\n                    </motion.div>\n                  );\n                })}\n              </div>\n            </div>\n\n                        <motion.div\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ delay: 0.3 }}\n              className=\"mt-6 space-y-3\"\n            >\n              <div className=\"flex items-center justify-between text-sm\">\n                <span className=\"text-purple-300 font-medium flex items-center gap-2\">\n                  <BarChart3 className=\"w-4 h-4\" />\n                  Sorting Progress\n                </span>\n                <motion.span \n                  className=\"text-cyan-300 font-mono font-bold text-lg\"\n                  key={currentStep}\n                  initial={{ scale: 1.3, color: '#00ffff' }}\n                  animate={{ scale: 1, color: '#67e8f9' }}\n                  transition={{ type: 'spring', stiffness: 300, damping: 15 }}\n                >\n                  {steps.length > 0 ? Math.round((currentStep / steps.length) * 100) : 0}%\n                </motion.span>\n              </div>\n              \n              <div className=\"relative h-4 bg-gray-800/80 rounded-full overflow-hidden border border-purple-500/30 shadow-inner\">\n                <motion.div\n                  className=\"absolute inset-0 bg-gradient-to-r from-cyan-500 via-purple-500 to-pink-500\"\n                  initial={{ width: 0 }}\n                  animate={{ \n                    width: steps.length > 0 ? `${(currentStep / steps.length) * 100}%` : '0%'\n                  }}\n                  transition={{ duration: 0.4, ease: 'easeOut' }}\n                  style={{\n                    boxShadow: '0 0 20px rgba(0, 255, 255, 0.6), 0 0 40px rgba(168, 85, 247, 0.4)'\n                  }}\n                />\n                \n                <motion.div\n                  className=\"absolute inset-0 bg-gradient-to-r from-transparent via-white/30 to-transparent\"\n                  animate={{\n                    x: ['-100%', '200%'],\n                  }}\n                  transition={{\n                    duration: 2,\n                    repeat: Infinity,\n                    ease: 'linear',\n                  }}\n                  style={{\n                    width: '50%',\n                  }}\n                />\n                \n                {steps.length > 0 && currentStep > 0 && (\n                  <motion.div\n                    className=\"absolute top-0 bottom-0 w-1 bg-white shadow-[0_0_10px_rgba(255,255,255,0.8)]\"\n                    animate={{\n                      left: `${(currentStep / steps.length) * 100}%`,\n                    }}\n                    transition={{ duration: 0.4, ease: 'easeOut' }}\n                  />\n                )}\n              </div>\n              \n              <div className=\"flex justify-between text-xs text-gray-500 font-mono\">\n                <span>Step {currentStep}</span>\n                <span>Total {steps.length}</span>\n              </div>\n            </motion.div>\n          </div>\n        </div>\n\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ delay: 0.6, duration: 0.8 }}\n          className=\"bg-gray-900/50 backdrop-blur-lg border border-cyan-500/30 rounded-xl p-6 shadow-[0_0_30px_rgba(0,255,255,0.2)]\"\n        >\n          <div className=\"flex items-center gap-3 mb-6\">\n            <BarChart3 className=\"w-6 h-6 text-cyan-400\" />\n            <h3 className=\"text-xl font-bold text-cyan-400\">Legend</h3>\n          </div>\n\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n            {/* Default State */}\n            <motion.div\n              className=\"flex items-center gap-3 p-4 bg-gray-800/50 rounded-lg border border-gray-700/50\"\n              whileHover={{ scale: 1.05, borderColor: 'rgba(0, 255, 255, 0.5)' }}\n              transition={{ type: 'spring', stiffness: 300 }}\n            >\n              <motion.div\n                className=\"w-6 h-12 rounded bg-gradient-to-t from-cyan-500 to-cyan-300\"\n                style={{\n                  boxShadow: '0 0 15px rgba(0, 255, 255, 0.5)'\n                }}\n                animate={{\n                  boxShadow: [\n                    '0 0 15px rgba(0, 255, 255, 0.5)',\n                    '0 0 25px rgba(0, 255, 255, 0.7)',\n                    '0 0 15px rgba(0, 255, 255, 0.5)'\n                  ]\n                }}\n                transition={{ duration: 2, repeat: Infinity }}\n              />\n              <div>\n                <div className=\"text-sm font-semibold text-cyan-300\">Default</div>\n                <div className=\"text-xs text-gray-400\">Unsorted</div>\n              </div>\n            </motion.div>\n\n            {/* Comparing State */}\n            <motion.div\n              className=\"flex items-center gap-3 p-4 bg-gray-800/50 rounded-lg border border-yellow-700/50\"\n              whileHover={{ scale: 1.05, borderColor: 'rgba(255, 255, 0, 0.5)' }}\n              transition={{ type: 'spring', stiffness: 300 }}\n            >\n              <motion.div\n                className=\"w-6 h-12 rounded bg-gradient-to-t from-yellow-500 to-yellow-300\"\n                style={{\n                  boxShadow: '0 0 20px rgba(255, 255, 0, 0.6)'\n                }}\n                animate={{\n                  boxShadow: [\n                    '0 0 20px rgba(255, 255, 0, 0.6)',\n                    '0 0 35px rgba(255, 255, 0, 0.9)',\n                    '0 0 20px rgba(255, 255, 0, 0.6)'\n                  ],\n                  scale: [1, 1.1, 1]\n                }}\n                transition={{ duration: 1.5, repeat: Infinity }}\n              />\n              <div>\n                <div className=\"text-sm font-semibold text-yellow-300\">Comparing</div>\n                <div className=\"text-xs text-gray-400\">Active</div>\n              </div>\n            </motion.div>\n\n            {/* Swapping State */}\n            <motion.div\n              className=\"flex items-center gap-3 p-4 bg-gray-800/50 rounded-lg border border-pink-700/50\"\n              whileHover={{ scale: 1.05, borderColor: 'rgba(255, 0, 102, 0.5)' }}\n              transition={{ type: 'spring', stiffness: 300 }}\n            >\n              <motion.div\n                className=\"w-6 h-12 rounded bg-gradient-to-t from-pink-500 to-pink-300\"\n                style={{\n                  boxShadow: '0 0 20px rgba(255, 0, 102, 0.6)'\n                }}\n                animate={{\n                  boxShadow: [\n                    '0 0 20px rgba(255, 0, 102, 0.6)',\n                    '0 0 35px rgba(255, 0, 102, 0.9)',\n                    '0 0 20px rgba(255, 0, 102, 0.6)'\n                  ],\n                  x: [-2, 2, -2]\n                }}\n                transition={{ duration: 1, repeat: Infinity }}\n              />\n              <div>\n                <div className=\"text-sm font-semibold text-pink-300\">Swapping</div>\n                <div className=\"text-xs text-gray-400\">Moving</div>\n              </div>\n            </motion.div>\n\n            {/* Sorted State */}\n            <motion.div\n              className=\"flex items-center gap-3 p-4 bg-gray-800/50 rounded-lg border border-green-700/50\"\n              whileHover={{ scale: 1.05, borderColor: 'rgba(0, 255, 170, 0.5)' }}\n              transition={{ type: 'spring', stiffness: 300 }}\n            >\n              <motion.div\n                className=\"w-6 h-12 rounded bg-gradient-to-t from-green-500 to-green-300\"\n                style={{\n                  boxShadow: '0 0 20px rgba(0, 255, 170, 0.6)'\n                }}\n                animate={{\n                  boxShadow: [\n                    '0 0 20px rgba(0, 255, 170, 0.6)',\n                    '0 0 30px rgba(0, 255, 170, 0.8)',\n                    '0 0 20px rgba(0, 255, 170, 0.6)'\n                  ]\n                }}\n                transition={{ duration: 2, repeat: Infinity }}\n              />\n              <div>\n                <div className=\"text-sm font-semibold text-green-300\">Sorted</div>\n                <div className=\"text-xs text-gray-400\">Complete</div>\n              </div>\n            </motion.div>\n          </div>\n\n          {/* Additional Info */}\n          <motion.div\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            transition={{ delay: 1 }}\n            className=\"mt-6 p-4 bg-gradient-to-r from-purple-900/30 to-pink-900/30 rounded-lg border border-purple-500/30\"\n          >\n            <div className=\"flex items-start gap-3\">\n              <Zap className=\"w-5 h-5 text-purple-400 mt-0.5 flex-shrink-0\" />\n              <div className=\"text-sm text-gray-300 leading-relaxed\">\n                <span className=\"font-semibold text-purple-300\">Tip:</span> Watch the bars change colors as the algorithm compares, swaps, and sorts elements. The glowing effects indicate active operations in real-time.\n              </div>\n            </div>\n          </motion.div>\n        </motion.div>\n      </div>\n    </div>\n  );\n}",
  "error": null,
  "overall_score": 41,
  "code_quality_score": 10,
  "architecture_score": 8,
  "performance_score": 11,
  "accessibility_score": 12,
  "metadata": {
    "document_id": "eval_room_f733e0ea7e3e",
    "prompt_category": "creative",
    "prompt_complexity": 9.0
  },
  "raw_response": {
    "document_id": "eval_room_f733e0ea7e3e",
    "mode": "parallel",
    "prompt": "Build a captivating algorithm visualizer with neon colored bars, smooth height transitions, glowing comparison indicators, trail effects during swaps, and a futuristic dashboard design with animated controls",
    "content": "import React, { useState, useCallback, useEffect } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Slider } from '@/components/ui/slider';\nimport { Play, Pause, RotateCcw, Zap, BarChart3 } from 'lucide-react';\n\nimport { motion } from 'framer-motion';\nimport { useState, useCallback } from 'react';\nimport { useState, useCallback } from 'react';\n\ninterface ArrayElement {\n  value: number;\n  id: string;\n  isComparing?: boolean;\n  isSwapping?: boolean;\n  isSorted?: boolean;\n}\n\ninterface AlgorithmStep {\n  array: ArrayElement[];\n  comparingIndices: number[];\n  swappingIndices: number[];\n  sortedIndices: number[];\n}\n\ntype AlgorithmType = 'bubble' | 'quick' | 'merge' | 'insertion';\n\nconst NEON_COLORS = [\n  '#00ffff',\n  '#ff00ff', \n  '#00ff00',\n  '#ffff00',\n  '#ff0066',\n  '#00ffaa'\n];\n\nconst mockAlgorithms = [\n  { id: 'bubble', name: 'Bubble Sort', complexity: 'O(n\u00b2)' },\n  { id: 'quick', name: 'Quick Sort', complexity: 'O(n log n)' },\n  { id: 'merge', name: 'Merge Sort', complexity: 'O(n log n)' },\n  { id: 'insertion', name: 'Insertion Sort', complexity: 'O(n\u00b2)' }\n];\n\nexport default function AlgorithmVisualizer() {\n  // Get current visualization state\n  const currentArray = steps.length > 0 && currentStep < steps.length \n    ? steps[currentStep].array \n    : array;\n  const comparingIndices = steps.length > 0 && currentStep < steps.length \n    ? steps[currentStep].comparingIndices \n    : [];\n  const swappingIndices = steps.length > 0 && currentStep < steps.length \n    ? steps[currentStep].swappingIndices \n    : [];\n  const sortedIndices = steps.length > 0 && currentStep < steps.length \n    ? steps[currentStep].sortedIndices \n    : [];\n\n  const [array, setArray] = useState<ArrayElement[]>([]);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [speed, setSpeed] = useState([50]);\n  const [arraySize, setArraySize] = useState([20]);\n  const [selectedAlgorithm, setSelectedAlgorithm] = useState<AlgorithmType>('bubble');\n  const [currentStep, setCurrentStep] = useState(0);\n  const [steps, setSteps] = useState<AlgorithmStep[]>([]);\n  const [totalComparisons, setTotalComparisons] = useState(0);\n  const [totalSwaps, setTotalSwaps] = useState(0);\n\n  const generateRandomArray = useCallback(() => {\n    const newArray: ArrayElement[] = Array.from({ length: arraySize[0] }, (_, index) => ({\n      value: Math.floor(Math.random() * 100) + 5,\n      id: `element-${index}-${Date.now()}`,\n      isComparing: false,\n      isSwapping: false,\n      isSorted: false\n    }));\n    setArray(newArray);\n    setSteps([]);\n    setCurrentStep(0);\n    setIsPlaying(false);\n  }, [arraySize]);\n\n  const resetVisualization = useCallback(() => {\n\nsetIsPlaying(false);\n    setCurrentStep(0);\n    setSteps([]);\n    generateRandomArray();\n    }, [generateRandomArray]);\n\n  // Animation effect for step-by-step visualization\n  const animateSteps = useCallback(() => {\n    if (currentStep < steps.length && isPlaying) {\n      const timer = setTimeout(() => {\n        setCurrentStep(prev => prev + 1);\n      }, 1000 - speed[0] * 9.5); // Convert speed slider (0-100) to delay (1000ms-50ms)\n      \n      return () => clearTimeout(timer);\n    } else if (currentStep >= steps.length && isPlaying) {\n      setIsPlaying(false);\n    }\n  }, [currentStep, steps.length, isPlaying, speed]);\n\n  // Run animation effect\n  React.useEffect(() => {\n    const cleanup = animateSteps();\n    return cleanup;\n  }, [animateSteps]);\n  const startVisualization = useCallback(() => {\n    if (steps.length === 0) return;\n    setIsPlaying(true);\n    if (currentStep >= steps.length) {\n      setCurrentStep(0);\n    }\n  }, [steps, speed, currentStep]);\n\n  const pauseVisualization = useCallback(() => {\n    setIsPlaying(false);\n  }, []);\n\n  const generateSortingSteps = useCallback((algorithm: AlgorithmType) => {\n    const sortedArray = [...array];\n    const newSteps: AlgorithmStep[] = [];\n\n    const addStep = (arr: ArrayElement[], comparing: number[] = [], swapping: number[] = [], sorted: number[] = []) => {\n      newSteps.push({\n        array: arr.map(el => ({ ...el })),\n        comparingIndices: [...comparing],\n        swappingIndices: [...swapping],\n        sortedIndices: [...sorted]\n      });\n    };\n\n    // Initial state\n    addStep(sortedArray);\n\n    switch (algorithm) {\n      case 'bubble': {\n        const sortedSet = new Set<number>();\n        for (let i = 0; i < sortedArray.length - 1; i++) {\n          for (let j = 0; j < sortedArray.length - i - 1; j++) {\n            // Comparing\n            addStep(sortedArray, [j, j + 1], [], Array.from(sortedSet));\n            \n            if (sortedArray[j].value > sortedArray[j + 1].value) {\n              // Swapping\n              addStep(sortedArray, [], [j, j + 1], Array.from(sortedSet));\n              [sortedArray[j], sortedArray[j + 1]] = [sortedArray[j + 1], sortedArray[j]];\n              addStep(sortedArray, [], [], Array.from(sortedSet));\n            }\n          }\n          sortedSet.add(sortedArray.length - i - 1);\n          addStep(sortedArray, [], [], Array.from(sortedSet));\n        }\n        sortedSet.add(0);\n        addStep(sortedArray, [], [], Array.from(sortedSet));\n        break;\n      }\n\n      case 'insertion': {\n        const sortedSet = new Set<number>([0]);\n        addStep(sortedArray, [], [], [0]);\n        \n        for (let i = 1; i < sortedArray.length; i++) {\n          const key = sortedArray[i];\n          let j = i - 1;\n          \n          addStep(sortedArray, [i], [], Array.from(sortedSet));\n          \n          while (j >= 0 && sortedArray[j].value > key.value) {\n            addStep(sortedArray, [j, j + 1], [], Array.from(sortedSet));\n            addStep(sortedArray, [], [j, j + 1], Array.from(sortedSet));\n            sortedArray[j + 1] = sortedArray[j];\n            addStep(sortedArray, [], [], Array.from(sortedSet));\n            j--;\n          }\n          \n          sortedArray[j + 1] = key;\n          sortedSet.add(i);\n          addStep(sortedArray, [], [], Array.from(sortedSet));\n        }\n        break;\n      }\n\n      case 'quick': {\n        const sortedSet = new Set<number>();\n        \n        const partition = (low: number, high: number): number => {\n          const pivot = sortedArray[high];\n          addStep(sortedArray, [high], [], Array.from(sortedSet));\n          let i = low - 1;\n\n          for (let j = low; j < high; j++) {\n            addStep(sortedArray, [j, high], [], Array.from(sortedSet));\n            \n            if (sortedArray[j].value < pivot.value) {\n              i++;\n              if (i !== j) {\n                addStep(sortedArray, [], [i, j], Array.from(sortedSet));\n                [sortedArray[i], sortedArray[j]] = [sortedArray[j], sortedArray[i]];\n                addStep(sortedArray, [], [], Array.from(sortedSet));\n              }\n            }\n          }\n\n          addStep(sortedArray, [], [i + 1, high], Array.from(sortedSet));\n          [sortedArray[i + 1], sortedArray[high]] = [sortedArray[high], sortedArray[i + 1]];\n          addStep(sortedArray, [], [], Array.from(sortedSet));\n          \n          return i + 1;\n        };\n\n        const quickSort = (low: number, high: number) => {\n          if (low < high) {\n            const pi = partition(low, high);\n            sortedSet.add(pi);\n            addStep(sortedArray, [], [], Array.from(sortedSet));\n            \n            quickSort(low, pi - 1);\n            quickSort(pi + 1, high);\n          } else if (low === high) {\n            sortedSet.add(low);\n            addStep(sortedArray, [], [], Array.from(sortedSet));\n          }\n        };\n\n        quickSort(0, sortedArray.length - 1);\n        break;\n      }\n\n      case 'merge': {\n        const sortedSet = new Set<number>();\n        \n        const merge = (left: number, mid: number, right: number) => {\n          const leftArr = sortedArray.slice(left, mid + 1);\n          const rightArr = sortedArray.slice(mid + 1, right + 1);\n          \n          let i = 0, j = 0, k = left;\n\n          while (i < leftArr.length && j < rightArr.length) {\n            addStep(sortedArray, [left + i, mid + 1 + j], [], Array.from(sortedSet));\n            \n            if (leftArr[i].value <= rightArr[j].value) {\n              sortedArray[k] = leftArr[i];\n              i++;\n            } else {\n              sortedArray[k] = rightArr[j];\n              j++;\n            }\n            addStep(sortedArray, [], [k], Array.from(sortedSet));\n            k++;\n          }\n\n          while (i < leftArr.length) {\n            sortedArray[k] = leftArr[i];\n            addStep(sortedArray, [], [k], Array.from(sortedSet));\n            i++;\n            k++;\n          }\n\n          while (j < rightArr.length) {\n            sortedArray[k] = rightArr[j];\n            addStep(sortedArray, [], [k], Array.from(sortedSet));\n            j++;\n            k++;\n          }\n\n          for (let idx = left; idx <= right; idx++) {\n            sortedSet.add(idx);\n          }\n          addStep(sortedArray, [], [], Array.from(sortedSet));\n        };\n\n        const mergeSort = (left: number, right: number) => {\n          if (left < right) {\n            const mid = Math.floor((left + right) / 2);\n            mergeSort(left, mid);\n            mergeSort(mid + 1, right);\n            merge(left, mid, right);\n          } else if (left === right) {\n            sortedSet.add(left);\n            addStep(sortedArray, [], [], Array.from(sortedSet));\n          }\n        };\n\n        mergeSort(0, sortedArray.length - 1);\n        break;\n      }\n    }\n\n    setSteps(newSteps);\n    setCurrentStep(0);\n  }, [array]);\n  // Initialize array on mount\n  React.useEffect(() => {\n    generateRandomArray();\n  }, []);\n\n  // Regenerate array when size changes\n  React.useEffect(() => {\n    if (!isPlaying) {\n      generateRandomArray();\n    }\n  }, [arraySize[0]]);\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-gray-900 via-purple-900 to-gray-900 p-8\">\n      <div className=\"max-w-7xl mx-auto space-y-8\">\n        <motion.div \n          initial={{ opacity: 0, y: -20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.8 }}\n          className=\"text-center space-y-4\"\n        >\n          <motion.h1 \n            className=\"text-6xl font-bold bg-gradient-to-r from-cyan-400 via-purple-400 to-pink-400 bg-clip-text text-transparent\"\n            animate={{ \n              textShadow: [\n                '0 0 20px rgba(0, 255, 255, 0.5)',\n                '0 0 40px rgba(255, 0, 255, 0.5)',\n                '0 0 20px rgba(0, 255, 255, 0.5)'\n              ]\n            }}\n            transition={{ duration: 2, repeat: Infinity }}\n          >\n            Algorithm Visualizer\n          </motion.h1>\n          \n          <div className=\"flex items-center justify-center gap-4\">\n            <motion.div\n              initial={{ scale: 0 }}\n              animate={{ scale: 1 }}\n              transition={{ delay: 0.3, type: \"spring\" }}\n              className=\"flex items-center gap-2 px-6 py-3 bg-gray-800/50 backdrop-blur-sm rounded-full border border-cyan-500/30\"\n            >\n              <Zap className=\"w-5 h-5 text-cyan-400\" />\n              <span className=\"text-xl font-semibold text-cyan-300\">\n                {mockAlgorithms.find(a => a.id === selectedAlgorithm)?.name || 'Bubble Sort'}\n              </span>\n            </motion.div>\n            \n            <motion.div\n              initial={{ scale: 0 }}\n              animate={{ scale: 1 }}\n              transition={{ delay: 0.5, type: \"spring\" }}\n              className=\"flex items-center gap-2 px-4 py-2 bg-purple-900/50 backdrop-blur-sm rounded-full border border-purple-500/50\"\n              style={{\n                boxShadow: '0 0 20px rgba(168, 85, 247, 0.4)'\n              }}\n            >\n              <BarChart3 className=\"w-4 h-4 text-purple-300\" />\n              <span className=\"text-sm font-mono text-purple-200\">\n                {mockAlgorithms.find(a => a.id === selectedAlgorithm)?.complexity || 'O(n\u00b2)'}\n              </span>\n            </motion.div>\n          </div>\n        </motion.div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-6\">\n          <div className=\"lg:col-span-1 space-y-6\">\n            <motion.div\n              initial={{ opacity: 0, x: -50 }}\n              animate={{ opacity: 1, x: 0 }}\n              className=\"bg-gray-900/50 backdrop-blur-lg border border-cyan-500/30 rounded-xl p-6 shadow-[0_0_30px_rgba(0,255,255,0.3)]\"\n            >\n              <div className=\"space-y-6\">\n                <div className=\"flex items-center gap-3 mb-6\">\n                  <Zap className=\"w-6 h-6 text-cyan-400\" />\n                  <h3 className=\"text-xl font-bold text-cyan-400\">Controls</h3>\n                </div>\n\n                {/* Algorithm Selection */}\n                <div className=\"space-y-3\">\n                  <label className=\"text-sm font-medium text-cyan-300 flex items-center gap-2\">\n                    <BarChart3 className=\"w-4 h-4\" />\n                    Algorithm\n                  </label>\n                  <div className=\"space-y-2\">\n                    {mockAlgorithms.map((algo) => (\n                      <button\n                        key={algo.id}\n                        onClick={() => {\n                          setSelectedAlgorithm(algo.id as AlgorithmType);\n                          generateSortingSteps(algo.id as AlgorithmType);\n                        }}\n                        disabled={isPlaying}\n                        className={`w-full p-3 rounded-lg border transition-all duration-300 ${\n                          selectedAlgorithm === algo.id\n                            ? 'bg-cyan-500/20 border-cyan-400 shadow-[0_0_20px_rgba(0,255,255,0.4)] text-cyan-300'\n                            : 'bg-gray-800/50 border-gray-700 hover:border-cyan-500/50 text-gray-400 hover:text-cyan-400'\n                        } disabled:opacity-50 disabled:cursor-not-allowed`}\n                      >\n                        <div className=\"text-left\">\n                          <div className=\"font-semibold\">{algo.name}</div>\n                          <div className=\"text-xs opacity-70\">{algo.complexity}</div>\n                        </div>\n                      </button>\n                    ))}\n                  </div>\n                </div>\n\n                {/* Speed Control */}\n                <div className=\"space-y-3\">\n                  <label className=\"text-sm font-medium text-purple-300\">\n                    Speed: {speed[0]}ms\n                  </label>\n                  <Slider\n                    value={speed}\n                    onValueChange={setSpeed}\n                    min={10}\n                    max={200}\n                    step={10}\n                    className=\"[&_[role=slider]]:bg-purple-500 [&_[role=slider]]:border-purple-400 [&_[role=slider]]:shadow-[0_0_10px_rgba(168,85,247,0.6)]\"\n                    disabled={isPlaying}\n                  />\n                </div>\n\n                {/* Array Size Control */}\n                <div className=\"space-y-3\">\n                  <label className=\"text-sm font-medium text-pink-300\">\n                    Array Size: {arraySize[0]}\n                  </label>\n                  <Slider\n                    value={arraySize}\n                    onValueChange={setArraySize}\n                    min={5}\n                    max={50}\n                    step={5}\n                    className=\"[&_[role=slider]]:bg-pink-500 [&_[role=slider]]:border-pink-400 [&_[role=slider]]:shadow-[0_0_10px_rgba(236,72,153,0.6)]\"\n                    disabled={isPlaying}\n                  />\n                </div>\n\n                {/* Action Buttons */}\n                <div className=\"space-y-3 pt-4 border-t border-cyan-500/20\">\n                  <Button\n                    onClick={isPlaying ? pauseVisualization : startVisualization}\n                    disabled={steps.length === 0 || (currentStep >= steps.length && !isPlaying)}\n                    className=\"w-full bg-gradient-to-r from-cyan-600 to-blue-600 hover:from-cyan-500 hover:to-blue-500 text-white shadow-[0_0_20px_rgba(0,255,255,0.5)] transition-all duration-300\"\n                  >\n                    {isPlaying ? (\n                      <>\n                        <Pause className=\"w-4 h-4 mr-2\" />\n                        Pause\n                      </>\n                    ) : (\n                      <>\n                        <Play className=\"w-4 h-4 mr-2\" />\n                        {currentStep >= steps.length ? 'Start' : 'Resume'}\n                      </>\n                    )}\n                  </Button>\n\n                  <Button\n                    onClick={resetVisualization}\n                    variant=\"outline\"\n                    className=\"w-full border-purple-500/50 text-purple-300 hover:bg-purple-500/20 hover:border-purple-400 shadow-[0_0_15px_rgba(168,85,247,0.3)]\"\n                  >\n                    <RotateCcw className=\"w-4 h-4 mr-2\" />\n                    Reset\n                  </Button>\n                </div>\n\n                {/* Progress Indicator */}\n                {steps.length > 0 && (\n                  <div className=\"space-y-2 pt-4 border-t border-cyan-500/20\">\n                    <div className=\"flex justify-between text-xs text-gray-400\">\n                      <span>Progress</span>\n                      <span>{currentStep} / {steps.length}</span>\n                    </div>\n                    <div className=\"h-2 bg-gray-800 rounded-full overflow-hidden\">\n                      <motion.div\n                        className=\"h-full bg-gradient-to-r from-cyan-500 to-purple-500 shadow-[0_0_10px_rgba(0,255,255,0.6)]\"\n                        initial={{ width: 0 }}\n                        animate={{ width: `${(currentStep / steps.length) * 100}%` }}\n                        transition={{ duration: 0.3 }}\n                      />\n                    </div>\n                  </div>\n                )}\n              </div>\n            </motion.div>\n            \n            <div className=\"bg-gray-900/50 backdrop-blur-lg border border-cyan-500/30 rounded-xl p-6 shadow-2xl shadow-cyan-500/20\">\n              <div className=\"space-y-6\">\n                <div>\n                  <h3 className=\"text-sm font-semibold text-cyan-400 mb-3 flex items-center gap-2\">\n                    <Zap className=\"w-4 h-4\" />\n                    Algorithm\n                  </h3>\n                  <div className=\"grid grid-cols-1 gap-2\">\n                    {mockAlgorithms.map((algo) => (\n                      <motion.button\n                        key={algo.id}\n                        onClick={() => setSelectedAlgorithm(algo.id as AlgorithmType)}\n                        className={`relative p-3 rounded-lg border transition-all duration-300 text-left ${\n                          selectedAlgorithm === algo.id\n                            ? 'bg-cyan-500/20 border-cyan-400 shadow-lg shadow-cyan-500/50'\n                            : 'bg-gray-800/50 border-gray-700 hover:border-cyan-500/50 hover:shadow-md hover:shadow-cyan-500/30'\n                        }`}\n                        whileHover={{ scale: 1.02 }}\n                        whileTap={{ scale: 0.98 }}\n                      >\n                        <div className=\"flex flex-col gap-1\">\n                          <span className={`text-sm font-medium ${\n                            selectedAlgorithm === algo.id ? 'text-cyan-300' : 'text-gray-300'\n                          }`}>\n                            {algo.name}\n                          </span>\n                          <span className={`text-xs ${\n                            selectedAlgorithm === algo.id ? 'text-cyan-400/80' : 'text-gray-500'\n                          }`}>\n                            {algo.complexity}\n                          </span>\n                        </div>\n                        {selectedAlgorithm === algo.id && (\n                          <motion.div\n                            className=\"absolute inset-0 rounded-lg border-2 border-cyan-400\"\n                            layoutId=\"algorithmSelector\"\n                            transition={{ type: \"spring\", stiffness: 300, damping: 30 }}\n                          />\n                        )}\n                      </motion.button>\n                    ))}\n                  </div>\n                </div>\n\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <label className=\"text-cyan-400 text-sm font-medium flex items-center gap-2\">\n                      <Zap className=\"w-4 h-4\" />\n                      Speed\n                    </label>\n                    <span className=\"text-cyan-300 text-xs\">{speed[0]}ms</span>\n                  </div>\n                  <Slider\n                    value={speed}\n                    onValueChange={setSpeed}\n                    min={10}\n                    max={200}\n                    step={10}\n                    className=\"[&_[role=slider]]:h-4 [&_[role=slider]]:w-4 [&_[role=slider]]:bg-cyan-400 [&_[role=slider]]:border-2 [&_[role=slider]]:border-cyan-300 [&_[role=slider]]:shadow-[0_0_15px_rgba(34,211,238,0.8)] [&_[role=slider]]:transition-all [&_[role=slider]]:hover:shadow-[0_0_25px_rgba(34,211,238,1)] [&_.relative]:h-2 [&_.relative]:bg-gray-800 [&_.relative]:rounded-full [&_.relative]:border [&_.relative]:border-cyan-500/30 [&_[role=slider]]:focus:ring-4 [&_[role=slider]]:focus:ring-cyan-400/50\"\n                  /></parameter>\n                </div>\n\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <label className=\"text-cyan-400 text-sm font-medium flex items-center gap-2\">\n                      <BarChart3 className=\"w-4 h-4\" />\n                      Array Size\n                    </label>\n                    <span className=\"text-cyan-300 text-xs\">{arraySize[0]}</span>\n                  </div>\n                  <Slider\n                    value={arraySize}\n                    onValueChange={setArraySize}\n                    min={5}\n                    max={100}\n                    step={1}\n                    className=\"[&_[role=slider]]:bg-gradient-to-r [&_[role=slider]]:from-purple-500 [&_[role=slider]]:to-pink-500 [&_[role=slider]]:border-2 [&_[role=slider]]:border-purple-400 [&_[role=slider]]:shadow-lg [&_[role=slider]]:shadow-purple-500/50 [&_[role=slider]]:transition-all [&_[role=slider]]:hover:shadow-purple-500/80 [&_[role=slider]]:hover:scale-110 [&>span]:bg-gradient-to-r [&>span]:from-purple-500/30 [&>span]:to-pink-500/30 [&>span]:h-2\"\n                  />\n                </div>\n\n                <div className=\"flex gap-3 pt-4\">\n                  <Button\n                    onClick={isPlaying ? pauseVisualization : startVisualization}\n                    disabled={array.length === 0 || (steps.length === 0 && !isPlaying)}\n                    className=\"flex-1 relative overflow-hidden group bg-gradient-to-r from-cyan-500 to-blue-500 hover:from-cyan-400 hover:to-blue-400 border-0 shadow-lg shadow-cyan-500/50 hover:shadow-cyan-400/70 transition-all duration-300\"\n                  >\n                    <motion.div\n                      className=\"absolute inset-0 bg-gradient-to-r from-cyan-400/0 via-white/20 to-cyan-400/0\"\n                      animate={{\n                        x: ['-100%', '100%'],\n                      }}\n                      transition={{\n                        duration: 2,\n                        repeat: Infinity,\n                        ease: 'linear',\n                      }}\n                    />\n                    <motion.div\n                      className=\"relative flex items-center justify-center gap-2\"\n                      whileHover={{ scale: 1.05 }}\n                      whileTap={{ scale: 0.95 }}\n                    >\n                      <motion.div\n                        key={isPlaying ? 'pause' : 'play'}\n                        initial={{ scale: 0, rotate: -180 }}\n                        animate={{ scale: 1, rotate: 0 }}\n                        exit={{ scale: 0, rotate: 180 }}\n                        transition={{ type: 'spring', stiffness: 200, damping: 15 }}\n                      >\n                        {isPlaying ? (\n                          <Pause className=\"w-4 h-4 fill-current\" />\n                        ) : (\n                          <Play className=\"w-4 h-4 fill-current\" />\n                        )}\n                      </motion.div>\n                      <span className=\"font-semibold\">\n                        {isPlaying ? 'Pause' : 'Play'}\n                      </span>\n                    </motion.div>\n                  </Button>\n                  <motion.button\n                    onClick={resetVisualization}\n                    disabled={isPlaying}\n                    className=\"flex-1 bg-gradient-to-r from-pink-500 to-purple-600 hover:from-pink-600 hover:to-purple-700 disabled:from-gray-700 disabled:to-gray-800 text-white font-semibold py-3 px-6 rounded-lg shadow-[0_0_20px_rgba(236,72,153,0.5)] hover:shadow-[0_0_30px_rgba(236,72,153,0.8)] disabled:shadow-none transition-all duration-300 flex items-center justify-center gap-2 border border-pink-400/50 disabled:border-gray-700\"\n                    whileHover={{ scale: 1.05 }}\n                    whileTap={{ scale: 0.95, rotate: 360 }}\n                    transition={{ \n                      scale: { type: \"spring\", stiffness: 400, damping: 10 },\n                      rotate: { duration: 0.6, ease: \"easeInOut\" }\n                    }}\n                  >\n                    <motion.div\n                      animate={{ rotate: isPlaying ? 0 : 0 }}\n                      whileHover={{ rotate: 180 }}\n                      transition={{ duration: 0.3 }}\n                    >\n                      <RotateCcw className=\"w-5 h-5\" />\n                    </motion.div>\n                    Reset\n                  </motion.button>\n                </div>\n              </div>\n            </div>\n\n            \n<motion.div\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ delay: 0.2 }}\n              className=\"bg-gray-900/50 backdrop-blur-lg border border-purple-500/30 rounded-xl p-6 shadow-[0_0_30px_rgba(168,85,247,0.3)]\"\n            >\n              <div className=\"space-y-4\">\n                <div className=\"flex items-center gap-3 mb-4\">\n                  <BarChart3 className=\"w-6 h-6 text-purple-400\" />\n                  <h3 className=\"text-xl font-bold text-purple-400\">Statistics</h3>\n                </div>\n\n                <div className=\"grid grid-cols-1 gap-4\">\n                  {/* Comparisons Counter */}\n                  <motion.div\n                    className=\"bg-gradient-to-br from-cyan-500/10 to-blue-500/10 border border-cyan-500/30 rounded-lg p-4 shadow-[0_0_20px_rgba(0,255,255,0.2)]\"\n                    whileHover={{ scale: 1.02, shadow: \"0 0 30px rgba(0,255,255,0.4)\" }}\n                  >\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <p className=\"text-xs text-cyan-300/70 uppercase tracking-wider mb-1\">Comparisons</p>\n                        <motion.p\n                          key={totalComparisons}\n                          initial={{ scale: 1.3, color: '#00ffff' }}\n                          animate={{ scale: 1, color: '#67e8f9' }}\n                          className=\"text-3xl font-bold text-cyan-300\"\n                        >\n                          {totalComparisons}\n                        </motion.p>\n                      </div>\n                      <div className=\"w-12 h-12 rounded-full bg-cyan-500/20 flex items-center justify-center shadow-[0_0_20px_rgba(0,255,255,0.4)]\">\n                        <Zap className=\"w-6 h-6 text-cyan-400\" />\n                      </div>\n                    </div>\n                  </motion.div>\n\n                  {/* Swaps Counter */}\n                  <motion.div\n                    className=\"bg-gradient-to-br from-purple-500/10 to-pink-500/10 border border-purple-500/30 rounded-lg p-4 shadow-[0_0_20px_rgba(168,85,247,0.2)]\"\n                    whileHover={{ scale: 1.02, shadow: \"0 0 30px rgba(168,85,247,0.4)\" }}\n                  >\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <p className=\"text-xs text-purple-300/70 uppercase tracking-wider mb-1\">Swaps</p>\n                        <motion.p\n                          key={totalSwaps}\n                          initial={{ scale: 1.3, color: '#a855f7' }}\n                          animate={{ scale: 1, color: '#c084fc' }}\n                          className=\"text-3xl font-bold text-purple-300\"\n                        >\n                          {totalSwaps}\n                        </motion.p>\n                      </div>\n                      <div className=\"w-12 h-12 rounded-full bg-purple-500/20 flex items-center justify-center shadow-[0_0_20px_rgba(168,85,247,0.4)]\">\n                        <RotateCcw className=\"w-6 h-6 text-purple-400\" />\n                      </div>\n                    </div>\n                  </motion.div>\n\n                  {/* Progress */}\n                  <motion.div\n                    className=\"bg-gradient-to-br from-green-500/10 to-emerald-500/10 border border-green-500/30 rounded-lg p-4 shadow-[0_0_20px_rgba(34,197,94,0.2)]\"\n                    whileHover={{ scale: 1.02, shadow: \"0 0 30px rgba(34,197,94,0.4)\" }}\n                  >\n                    <div className=\"flex items-center justify-between mb-3\">\n                      <div>\n                        <p className=\"text-xs text-green-300/70 uppercase tracking-wider mb-1\">Progress</p>\n                        <motion.p\n                          key={currentStep}\n                          initial={{ scale: 1.2 }}\n                          animate={{ scale: 1 }}\n                          className=\"text-3xl font-bold text-green-300\"\n                        >\n                          {steps.length > 0 ? Math.round((currentStep / steps.length) * 100) : 0}%\n                        </motion.p>\n                      </div>\n                      <div className=\"w-12 h-12 rounded-full bg-green-500/20 flex items-center justify-center shadow-[0_0_20px_rgba(34,197,94,0.4)]\">\n                        <Play className=\"w-6 h-6 text-green-400\" />\n                      </div>\n                    </div>\n                    \n                    {/* Progress Bar */}\n                    <div className=\"relative h-2 bg-gray-800 rounded-full overflow-hidden border border-green-500/20\">\n                      <motion.div\n                        className=\"absolute top-0 left-0 h-full bg-gradient-to-r from-green-500 to-emerald-400 shadow-[0_0_10px_rgba(34,197,94,0.6)]\"\n                        initial={{ width: 0 }}\n                        animate={{ \n                          width: steps.length > 0 ? `${(currentStep / steps.length) * 100}%` : '0%'\n                        }}\n                        transition={{ duration: 0.3, ease: \"easeOut\" }}\n                      />\n                    </div>\n                  </motion.div>\n\n                  {/* Current Step */}\n                  <motion.div\n                    className=\"bg-gradient-to-br from-yellow-500/10 to-orange-500/10 border border-yellow-500/30 rounded-lg p-4 shadow-[0_0_20px_rgba(234,179,8,0.2)]\"\n                    whileHover={{ scale: 1.02, shadow: \"0 0 30px rgba(234,179,8,0.4)\" }}\n                  >\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <p className=\"text-xs text-yellow-300/70 uppercase tracking-wider mb-1\">Current Step</p>\n                        <motion.p\n                          key={currentStep}\n                          initial={{ scale: 1.2 }}\n                          animate={{ scale: 1 }}\n                          className=\"text-2xl font-bold text-yellow-300\"\n                        >\n                          {currentStep} / {steps.length}\n                        </motion.p>\n                      </div>\n                      <div className=\"w-12 h-12 rounded-full bg-yellow-500/20 flex items-center justify-center shadow-[0_0_20px_rgba(234,179,8,0.4)]\">\n                        <BarChart3 className=\"w-6 h-6 text-yellow-400\" />\n                      </div>\n                    </div>\n                  </motion.div>\n                </div>\n              </div>\n            </motion.div>\n          </div>\n\n          <div className=\"lg:col-span-3\">\n            <div className=\"bg-gray-900/50 backdrop-blur-lg border border-purple-500/30 rounded-xl p-8 shadow-2xl shadow-purple-500/20 min-h-[600px]\">\n              \n              <div className=\"relative h-[500px] flex items-end justify-center gap-1 px-4\">\n                {currentArray.length === 0 ? (\n                  <div className=\"absolute inset-0 flex items-center justify-center\">\n                    <div className=\"text-center space-y-4\">\n                      <Zap className=\"w-16 h-16 text-cyan-400 mx-auto animate-pulse\" />\n                      <p className=\"text-cyan-300 text-lg font-medium\">\n                        Generate an array to start visualizing\n                      </p>\n                      <p className=\"text-gray-400 text-sm\">\n                        Adjust the array size and click the reset button\n                      </p>\n                    </div>\n                  </div>\n                ) : (\n                  currentArray.map((element, index) => {\n                    const isComparing = comparingIndices.includes(index);\n                    const isSwapping = swappingIndices.includes(index);\n                    const isSorted = sortedIndices.includes(index);\n                    \n                    const maxValue = Math.max(...currentArray.map(el => el.value));\n                    const heightPercentage = (element.value / maxValue) * 100;\n                    \n                    let barColor = NEON_COLORS[index % NEON_COLORS.length];\n                    let glowColor = barColor;\n                    let shadowIntensity = 0.4;\n                    \n                    if (isSorted) {\n                      barColor = '#00ff00';\n                      glowColor = '#00ff00';\n                      shadowIntensity = 0.8;\n                    } else if (isSwapping) {\n                      barColor = '#ff0066';\n                      glowColor = '#ff0066';\n                      shadowIntensity = 1;\n                    } else if (isComparing) {\n                      barColor = '#ffff00';\n                      glowColor = '#ffff00';\n                      shadowIntensity = 0.9;\n                    }\n                    \n                    return (\n                      <motion.div\n                        key={element.id}\n                        className=\"relative flex-1 min-w-[4px] max-w-[60px] rounded-t-lg\"\n                        style={{\n                          backgroundColor: barColor,\n                          boxShadow: `0 0 ${shadowIntensity * 20}px ${glowColor}, 0 0 ${shadowIntensity * 40}px ${glowColor}`,\n                        }}\n                        initial={{ height: 0, opacity: 0 }}\n                        animate={{\n                          height: `${heightPercentage}%`,\n                          opacity: 1,\n                          scale: isSwapping ? [1, 1.1, 1] : isComparing ? 1.05 : 1,\n                          y: isSwapping ? [-10, 0] : 0,\n                        }}\n                        transition={{\n                          height: { duration: 0.5, ease: \"easeOut\" },\n                          opacity: { duration: 0.3 },\n                          scale: { duration: 0.3 },\n                          y: { duration: 0.4, ease: \"easeInOut\" },\n                        }}\n                      >\n                        {/* Swap trail effect */}\n                        {isSwapping && (\n                          <motion.div\n                            className=\"absolute inset-0 rounded-t-lg\"\n                            style={{\n                              backgroundColor: barColor,\n                              opacity: 0.5,\n                            }}\n                            initial={{ opacity: 0.8, scale: 1 }}\n                            animate={{ opacity: 0, scale: 1.5 }}\n                            transition={{ duration: 0.6, ease: \"easeOut\" }}\n                          />\n                        )}\n                        \n                        {/* Comparison indicator */}\n                        {isComparing && (\n                          <motion.div\n                            className=\"absolute -top-8 left-1/2 transform -translate-x-1/2\"\n                            initial={{ opacity: 0, y: 10 }}\n                            animate={{ opacity: 1, y: 0 }}\n                            exit={{ opacity: 0 }}\n                          >\n                            <div \n                              className=\"w-2 h-2 rounded-full\"\n                              style={{\n                                backgroundColor: glowColor,\n                                boxShadow: `0 0 10px ${glowColor}, 0 0 20px ${glowColor}`,\n                              }}\n                            />\n                          </motion.div>\n                        )}\n                        \n                        {/* Value label */}\n                        {currentArray.length <= 30 && (\n                          <motion.div\n                            className=\"absolute -bottom-6 left-1/2 transform -translate-x-1/2 text-xs font-bold whitespace-nowrap\"\n                            style={{ color: barColor }}\n                            initial={{ opacity: 0 }}\n                            animate={{ opacity: 0.8 }}\n                          >\n                            {element.value}\n                          </motion.div>\n                        )}\n                        \n                        {/* Sorted checkmark */}\n                        {isSorted && (\n                          <motion.div\n                            className=\"absolute top-2 left-1/2 transform -translate-x-1/2\"\n                            initial={{ scale: 0, rotate: -180 }}\n                            animate={{ scale: 1, rotate: 0 }}\n                            transition={{ type: \"spring\", stiffness: 200, damping: 10 }}\n                          >\n                            <div className=\"w-4 h-4 rounded-full bg-green-400 flex items-center justify-center shadow-[0_0_15px_rgba(0,255,0,0.8)]\">\n                              <svg className=\"w-3 h-3 text-gray-900\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={3} d=\"M5 13l4 4L19 7\" />\n                              </svg>\n                            </div>\n                          </motion.div>\n                        )}\n                      </motion.div>\n                    );\n                  })\n                )}\n              </div>\n              \n              <div className=\"relative h-full flex items-end justify-center gap-1\">\n                {(currentStep > 0 && currentStep <= steps.length ? steps[currentStep - 1].array : array).map((element, index) => {\n                  const currentStepData = currentStep > 0 && currentStep <= steps.length ? steps[currentStep - 1] : null;\n                  const isComparing = currentStepData?.comparingIndices.includes(index);\n                  const isSwapping = currentStepData?.swappingIndices.includes(index);\n                  const isSorted = currentStepData?.sortedIndices.includes(index);\n                  \n                  const maxValue = 100;\n                  const heightPercentage = (element.value / maxValue) * 100;\n                  \n                  let barColor = NEON_COLORS[index % NEON_COLORS.length];\n                  let shadowColor = barColor;\n                  let glowIntensity = '0.5';\n                  \n                  if (isSorted) {\n                    barColor = '#00ff00';\n                    shadowColor = '#00ff00';\n                    glowIntensity = '0.8';\n                  } else if (isSwapping) {\n                    barColor = '#ff0066';\n                    shadowColor = '#ff0066';\n                    glowIntensity = '1';\n                  } else if (isComparing) {\n                    barColor = '#ffff00';\n                    shadowColor = '#ffff00';\n                    glowIntensity = '0.9';\n                  }\n                  \n                  return (\n                    <motion.div\n                      key={element.id}\n                      className=\"relative flex-1 min-w-[4px] max-w-[60px] rounded-t-lg\"\n                      style={{\n                        height: `${heightPercentage}%`,\n                        backgroundColor: barColor,\n                        boxShadow: `\n                          0 0 20px ${shadowColor}${Math.floor(parseFloat(glowIntensity) * 255).toString(16).padStart(2, '0')},\n                          0 0 40px ${shadowColor}${Math.floor(parseFloat(glowIntensity) * 128).toString(16).padStart(2, '0')},\n                          0 0 60px ${shadowColor}${Math.floor(parseFloat(glowIntensity) * 64).toString(16).padStart(2, '0')},\n                          inset 0 0 20px ${shadowColor}${Math.floor(parseFloat(glowIntensity) * 128).toString(16).padStart(2, '0')}\n                        `,\n                        border: `2px solid ${barColor}`,\n                      }}\n                      initial={{ height: 0, opacity: 0 }}\n                      animate={{ \n                        height: `${heightPercentage}%`,\n                        opacity: 1,\n                        scale: isSwapping ? [1, 1.1, 1] : isComparing ? 1.05 : 1,\n                      }}\n                      transition={{\n                        height: { duration: 0.5, ease: \"easeInOut\" },\n                        opacity: { duration: 0.3 },\n                        scale: { duration: 0.3, ease: \"easeInOut\" },\n                      }}\n                    >\n                      {/* Glow effect overlay */}\n                      <motion.div\n                        className=\"absolute inset-0 rounded-t-lg\"\n                        style={{\n                          background: `linear-gradient(to top, transparent, ${barColor}40)`,\n                        }}\n                        animate={{\n                          opacity: isSwapping || isComparing ? [0.5, 1, 0.5] : 0.3,\n                        }}\n                        transition={{\n                          duration: 0.6,\n                          repeat: isSwapping || isComparing ? Infinity : 0,\n                        }}\n                      />\n                      \n                      {/* Value label */}\n                      {arraySize[0] <= 30 && (\n                        <motion.div\n                          className=\"absolute -top-8 left-1/2 transform -translate-x-1/2 text-xs font-bold whitespace-nowrap\"\n                          style={{ color: barColor }}\n                          initial={{ opacity: 0, y: 10 }}\n                          animate={{ opacity: 1, y: 0 }}\n                          transition={{ delay: 0.2 }}\n                        >\n                          {element.value}\n                        </motion.div>\n                      )}\n                      \n                      {/* Swap trail effect */}\n                      {isSwapping && (\n                        <motion.div\n                          className=\"absolute inset-0 rounded-t-lg\"\n                          style={{\n                            background: `radial-gradient(circle at center, ${barColor}, transparent)`,\n                          }}\n                          initial={{ opacity: 0, scale: 0.8 }}\n                          animate={{ \n                            opacity: [0, 0.8, 0],\n                            scale: [0.8, 1.2, 1.4],\n                          }}\n                          transition={{\n                            duration: 0.8,\n                            repeat: Infinity,\n                          }}\n                        />\n                      )}\n                      \n                      {/* Sorted indicator */}\n                      {isSorted && (\n                        <motion.div\n                          className=\"absolute -top-6 left-1/2 transform -translate-x-1/2\"\n                          initial={{ opacity: 0, scale: 0 }}\n                          animate={{ opacity: 1, scale: 1 }}\n                          transition={{ type: \"spring\", stiffness: 300, damping: 20 }}\n                        >\n                          <div \n                            className=\"w-2 h-2 rounded-full\"\n                            style={{\n                              backgroundColor: '#00ff00',\n                              boxShadow: '0 0 10px #00ff00, 0 0 20px #00ff00',\n                            }}\n                          />\n                        </motion.div>\n                      )}\n                    </motion.div>\n                  );\n                })}\n              </div>\n            </div>\n\n                        <motion.div\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ delay: 0.3 }}\n              className=\"mt-6 space-y-3\"\n            >\n              <div className=\"flex items-center justify-between text-sm\">\n                <span className=\"text-purple-300 font-medium flex items-center gap-2\">\n                  <BarChart3 className=\"w-4 h-4\" />\n                  Sorting Progress\n                </span>\n                <motion.span \n                  className=\"text-cyan-300 font-mono font-bold text-lg\"\n                  key={currentStep}\n                  initial={{ scale: 1.3, color: '#00ffff' }}\n                  animate={{ scale: 1, color: '#67e8f9' }}\n                  transition={{ type: 'spring', stiffness: 300, damping: 15 }}\n                >\n                  {steps.length > 0 ? Math.round((currentStep / steps.length) * 100) : 0}%\n                </motion.span>\n              </div>\n              \n              <div className=\"relative h-4 bg-gray-800/80 rounded-full overflow-hidden border border-purple-500/30 shadow-inner\">\n                <motion.div\n                  className=\"absolute inset-0 bg-gradient-to-r from-cyan-500 via-purple-500 to-pink-500\"\n                  initial={{ width: 0 }}\n                  animate={{ \n                    width: steps.length > 0 ? `${(currentStep / steps.length) * 100}%` : '0%'\n                  }}\n                  transition={{ duration: 0.4, ease: 'easeOut' }}\n                  style={{\n                    boxShadow: '0 0 20px rgba(0, 255, 255, 0.6), 0 0 40px rgba(168, 85, 247, 0.4)'\n                  }}\n                />\n                \n                <motion.div\n                  className=\"absolute inset-0 bg-gradient-to-r from-transparent via-white/30 to-transparent\"\n                  animate={{\n                    x: ['-100%', '200%'],\n                  }}\n                  transition={{\n                    duration: 2,\n                    repeat: Infinity,\n                    ease: 'linear',\n                  }}\n                  style={{\n                    width: '50%',\n                  }}\n                />\n                \n                {steps.length > 0 && currentStep > 0 && (\n                  <motion.div\n                    className=\"absolute top-0 bottom-0 w-1 bg-white shadow-[0_0_10px_rgba(255,255,255,0.8)]\"\n                    animate={{\n                      left: `${(currentStep / steps.length) * 100}%`,\n                    }}\n                    transition={{ duration: 0.4, ease: 'easeOut' }}\n                  />\n                )}\n              </div>\n              \n              <div className=\"flex justify-between text-xs text-gray-500 font-mono\">\n                <span>Step {currentStep}</span>\n                <span>Total {steps.length}</span>\n              </div>\n            </motion.div>\n          </div>\n        </div>\n\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ delay: 0.6, duration: 0.8 }}\n          className=\"bg-gray-900/50 backdrop-blur-lg border border-cyan-500/30 rounded-xl p-6 shadow-[0_0_30px_rgba(0,255,255,0.2)]\"\n        >\n          <div className=\"flex items-center gap-3 mb-6\">\n            <BarChart3 className=\"w-6 h-6 text-cyan-400\" />\n            <h3 className=\"text-xl font-bold text-cyan-400\">Legend</h3>\n          </div>\n\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n            {/* Default State */}\n            <motion.div\n              className=\"flex items-center gap-3 p-4 bg-gray-800/50 rounded-lg border border-gray-700/50\"\n              whileHover={{ scale: 1.05, borderColor: 'rgba(0, 255, 255, 0.5)' }}\n              transition={{ type: 'spring', stiffness: 300 }}\n            >\n              <motion.div\n                className=\"w-6 h-12 rounded bg-gradient-to-t from-cyan-500 to-cyan-300\"\n                style={{\n                  boxShadow: '0 0 15px rgba(0, 255, 255, 0.5)'\n                }}\n                animate={{\n                  boxShadow: [\n                    '0 0 15px rgba(0, 255, 255, 0.5)',\n                    '0 0 25px rgba(0, 255, 255, 0.7)',\n                    '0 0 15px rgba(0, 255, 255, 0.5)'\n                  ]\n                }}\n                transition={{ duration: 2, repeat: Infinity }}\n              />\n              <div>\n                <div className=\"text-sm font-semibold text-cyan-300\">Default</div>\n                <div className=\"text-xs text-gray-400\">Unsorted</div>\n              </div>\n            </motion.div>\n\n            {/* Comparing State */}\n            <motion.div\n              className=\"flex items-center gap-3 p-4 bg-gray-800/50 rounded-lg border border-yellow-700/50\"\n              whileHover={{ scale: 1.05, borderColor: 'rgba(255, 255, 0, 0.5)' }}\n              transition={{ type: 'spring', stiffness: 300 }}\n            >\n              <motion.div\n                className=\"w-6 h-12 rounded bg-gradient-to-t from-yellow-500 to-yellow-300\"\n                style={{\n                  boxShadow: '0 0 20px rgba(255, 255, 0, 0.6)'\n                }}\n                animate={{\n                  boxShadow: [\n                    '0 0 20px rgba(255, 255, 0, 0.6)',\n                    '0 0 35px rgba(255, 255, 0, 0.9)',\n                    '0 0 20px rgba(255, 255, 0, 0.6)'\n                  ],\n                  scale: [1, 1.1, 1]\n                }}\n                transition={{ duration: 1.5, repeat: Infinity }}\n              />\n              <div>\n                <div className=\"text-sm font-semibold text-yellow-300\">Comparing</div>\n                <div className=\"text-xs text-gray-400\">Active</div>\n              </div>\n            </motion.div>\n\n            {/* Swapping State */}\n            <motion.div\n              className=\"flex items-center gap-3 p-4 bg-gray-800/50 rounded-lg border border-pink-700/50\"\n              whileHover={{ scale: 1.05, borderColor: 'rgba(255, 0, 102, 0.5)' }}\n              transition={{ type: 'spring', stiffness: 300 }}\n            >\n              <motion.div\n                className=\"w-6 h-12 rounded bg-gradient-to-t from-pink-500 to-pink-300\"\n                style={{\n                  boxShadow: '0 0 20px rgba(255, 0, 102, 0.6)'\n                }}\n                animate={{\n                  boxShadow: [\n                    '0 0 20px rgba(255, 0, 102, 0.6)',\n                    '0 0 35px rgba(255, 0, 102, 0.9)',\n                    '0 0 20px rgba(255, 0, 102, 0.6)'\n                  ],\n                  x: [-2, 2, -2]\n                }}\n                transition={{ duration: 1, repeat: Infinity }}\n              />\n              <div>\n                <div className=\"text-sm font-semibold text-pink-300\">Swapping</div>\n                <div className=\"text-xs text-gray-400\">Moving</div>\n              </div>\n            </motion.div>\n\n            {/* Sorted State */}\n            <motion.div\n              className=\"flex items-center gap-3 p-4 bg-gray-800/50 rounded-lg border border-green-700/50\"\n              whileHover={{ scale: 1.05, borderColor: 'rgba(0, 255, 170, 0.5)' }}\n              transition={{ type: 'spring', stiffness: 300 }}\n            >\n              <motion.div\n                className=\"w-6 h-12 rounded bg-gradient-to-t from-green-500 to-green-300\"\n                style={{\n                  boxShadow: '0 0 20px rgba(0, 255, 170, 0.6)'\n                }}\n                animate={{\n                  boxShadow: [\n                    '0 0 20px rgba(0, 255, 170, 0.6)',\n                    '0 0 30px rgba(0, 255, 170, 0.8)',\n                    '0 0 20px rgba(0, 255, 170, 0.6)'\n                  ]\n                }}\n                transition={{ duration: 2, repeat: Infinity }}\n              />\n              <div>\n                <div className=\"text-sm font-semibold text-green-300\">Sorted</div>\n                <div className=\"text-xs text-gray-400\">Complete</div>\n              </div>\n            </motion.div>\n          </div>\n\n          {/* Additional Info */}\n          <motion.div\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            transition={{ delay: 1 }}\n            className=\"mt-6 p-4 bg-gradient-to-r from-purple-900/30 to-pink-900/30 rounded-lg border border-purple-500/30\"\n          >\n            <div className=\"flex items-start gap-3\">\n              <Zap className=\"w-5 h-5 text-purple-400 mt-0.5 flex-shrink-0\" />\n              <div className=\"text-sm text-gray-300 leading-relaxed\">\n                <span className=\"font-semibold text-purple-300\">Tip:</span> Watch the bars change colors as the algorithm compares, swaps, and sorts elements. The glowing effects indicate active operations in real-time.\n              </div>\n            </div>\n          </motion.div>\n        </motion.div>\n      </div>\n    </div>\n  );\n}",
    "error": null,
    "elapsed_time": 129.42119193077087,
    "success": true
  }
}