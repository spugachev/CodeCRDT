{
  "prompt_id": "algorithm_visualizer",
  "prompt_name": "Algorithm Visualizer",
  "mode": "parallel",
  "run_number": 48,
  "timestamp": "2025-10-14T06:46:36.799457",
  "response_time": 94.37416481971741,
  "total_tokens": null,
  "response_content": "import { useState, useCallback } from 'react';\nimport { useEffect, useRef } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Slider } from '@/components/ui/slider';\nimport { Play, Pause, RotateCcw, Zap, BarChart3 } from 'lucide-react';\nimport { motion } from 'framer-motion';\n\ninterface ArrayElement {\n  value: number;\n  id: string;\n  isComparing?: boolean;\n  isSwapping?: boolean;\n  isSorted?: boolean;\n}\n\ninterface AlgorithmStep {\n  array: ArrayElement[];\n  comparingIndices: number[];\n  swappingIndices: number[];\n  sortedIndices: number[];\n}\n\ntype AlgorithmType = 'bubble' | 'quick' | 'merge' | 'insertion';\n\nconst NEON_COLORS = [\n  '#00ffff',\n  '#ff00ff', \n  '#00ff00',\n  '#ffff00',\n  '#ff0066',\n  '#00ffaa'\n];\n\nconst mockAlgorithms = [\n  { id: 'bubble', name: 'Bubble Sort', complexity: 'O(n\u00b2)' },\n  { id: 'quick', name: 'Quick Sort', complexity: 'O(n log n)' },\n  { id: 'merge', name: 'Merge Sort', complexity: 'O(n log n)' },\n  { id: 'insertion', name: 'Insertion Sort', complexity: 'O(n\u00b2)' }\n];\n\n// Animation controller using useEffect for step-by-step visualization\nconst useAnimationController = (\n  isPlaying: boolean,\n  steps: AlgorithmStep[],\n  currentStep: number,\n  speed: number[],\n  onStepComplete: () => void,\n  onAnimationEnd: () => void\n) => {\n  const timeoutRef = useRef<NodeJS.Timeout | null>(null);\n\n  useEffect(() => {\n    if (isPlaying && currentStep < steps.length) {\n      const delay = 1000 - speed[0] * 9.5; // Convert speed (0-100) to delay (1000ms-50ms)\n      timeoutRef.current = setTimeout(() => {\n        onStepComplete();\n      }, delay);\n    } else if (isPlaying && currentStep >= steps.length) {\n      onAnimationEnd();\n    }\n\n    return () => {\n      if (timeoutRef.current) {\n        clearTimeout(timeoutRef.current);\n      }\n    };\n  }, [isPlaying, currentStep, steps.length, speed, onStepComplete, onAnimationEnd]);\n};\n\nexport default function AlgorithmVisualizer() {\n  const [array, setArray] = useState<ArrayElement[]>([]);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [speed, setSpeed] = useState([50]);\n  const [arraySize, setArraySize] = useState([20]);\n  const [selectedAlgorithm, setSelectedAlgorithm] = useState<AlgorithmType>('bubble');\n  const [currentStep, setCurrentStep] = useState(0);\n  const [steps, setSteps] = useState<AlgorithmStep[]>([]);\n\n  const generateRandomArray = useCallback(() => {\n    const newArray: ArrayElement[] = Array.from({ length: arraySize[0] }, (_, index) => ({\n      value: Math.floor(Math.random() * 100) + 5,\n      id: `element-${index}-${Date.now()}`,\n      isComparing: false,\n      isSwapping: false,\n      isSorted: false\n    }));\n    setArray(newArray);\n    setSteps([]);\n    setCurrentStep(0);\n    setIsPlaying(false);\n  }, [arraySize]);\n\n  const resetVisualization = useCallback(() => {\n\n    setIsPlaying(false);\n    setCurrentStep(0);\n    setSteps([]);\n    generateRandomArray();  }, [generateRandomArray]);\n\n  const startVisualization = useCallback(() => {\n    if (steps.length === 0) return;\n    if (currentStep >= steps.length) return;\n    \n    setIsPlaying(true);\n  }, [steps, speed, currentStep]);\n\n  const pauseVisualization = useCallback(() => {\n    setIsPlaying(false);\n\n  }, []);\n\n  const generateSortingSteps = useCallback((algorithm: AlgorithmType) => {\n    const arr = [...array];\n    const newSteps: AlgorithmStep[] = [];\n    \n    const addStep = (comparingIndices: number[] = [], swappingIndices: number[] = [], sortedIndices: number[] = []) => {\n      newSteps.push({\n        array: arr.map((el, idx) => ({\n          ...el,\n          isComparing: comparingIndices.includes(idx),\n          isSwapping: swappingIndices.includes(idx),\n          isSorted: sortedIndices.includes(idx)\n        })),\n        comparingIndices,\n        swappingIndices,\n        sortedIndices\n      });\n    };\n\n    if (algorithm === 'bubble') {\n      const sorted: number[] = [];\n      for (let i = 0; i < arr.length; i++) {\n        for (let j = 0; j < arr.length - i - 1; j++) {\n          addStep([j, j + 1], [], sorted);\n          if (arr[j].value > arr[j + 1].value) {\n            addStep([j, j + 1], [j, j + 1], sorted);\n            [arr[j], arr[j + 1]] = [arr[j + 1], arr[j]];\n            addStep([], [], sorted);\n          }\n        }\n        sorted.push(arr.length - i - 1);\n        addStep([], [], sorted);\n      }\n    } else if (algorithm === 'insertion') {\n      const sorted: number[] = [0];\n      addStep([], [], sorted);\n      for (let i = 1; i < arr.length; i++) {\n        let j = i;\n        addStep([j], [], sorted);\n        while (j > 0 && arr[j - 1].value > arr[j].value) {\n          addStep([j - 1, j], [], sorted);\n          addStep([j - 1, j], [j - 1, j], sorted);\n          [arr[j - 1], arr[j]] = [arr[j], arr[j - 1]];\n          j--;\n          addStep([], [], sorted);\n        }\n        sorted.push(i);\n        addStep([], [], sorted);\n      }\n    } else if (algorithm === 'quick') {\n      const sorted: number[] = [];\n      const quickSort = (low: number, high: number) => {\n        if (low < high) {\n          const pivotIdx = partition(low, high);\n          sorted.push(pivotIdx);\n          addStep([], [], sorted);\n          quickSort(low, pivotIdx - 1);\n          quickSort(pivotIdx + 1, high);\n        } else if (low === high) {\n          sorted.push(low);\n          addStep([], [], sorted);\n        }\n      };\n      \n      const partition = (low: number, high: number): number => {\n        const pivot = arr[high].value;\n        addStep([high], [], sorted);\n        let i = low - 1;\n        for (let j = low; j < high; j++) {\n          addStep([j, high], [], sorted);\n          if (arr[j].value < pivot) {\n            i++;\n            if (i !== j) {\n              addStep([i, j], [i, j], sorted);\n              [arr[i], arr[j]] = [arr[j], arr[i]];\n              addStep([], [], sorted);\n            }\n          }\n        }\n        addStep([i + 1, high], [i + 1, high], sorted);\n        [arr[i + 1], arr[high]] = [arr[high], arr[i + 1]];\n        addStep([], [], sorted);\n        return i + 1;\n      };\n      \n      quickSort(0, arr.length - 1);\n    } else if (algorithm === 'merge') {\n      const sorted: number[] = [];\n      const mergeSort = (left: number, right: number) => {\n        if (left < right) {\n          const mid = Math.floor((left + right) / 2);\n          mergeSort(left, mid);\n          mergeSort(mid + 1, right);\n          merge(left, mid, right);\n        }\n      };\n      \n      const merge = (left: number, mid: number, right: number) => {\n        const leftArr = arr.slice(left, mid + 1);\n        const rightArr = arr.slice(mid + 1, right + 1);\n        let i = 0, j = 0, k = left;\n        \n        while (i < leftArr.length && j < rightArr.length) {\n          addStep([left + i, mid + 1 + j], [], sorted);\n          if (leftArr[i].value <= rightArr[j].value) {\n            arr[k] = leftArr[i];\n            i++;\n          } else {\n            addStep([k, mid + 1 + j], [k, mid + 1 + j], sorted);\n            arr[k] = rightArr[j];\n            j++;\n          }\n          k++;\n          addStep([], [], sorted);\n        }\n        \n        while (i < leftArr.length) {\n          arr[k] = leftArr[i];\n          i++;\n          k++;\n        }\n        \n        while (j < rightArr.length) {\n          arr[k] = rightArr[j];\n          j++;\n          k++;\n        }\n        \n        for (let idx = left; idx <= right; idx++) {\n          if (!sorted.includes(idx)) sorted.push(idx);\n        }\n        addStep([], [], sorted);\n      };\n      \n      mergeSort(0, arr.length - 1);\n    }\n    \n    setSteps(newSteps);\n    setCurrentStep(0);\n  }, [array]);\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-gray-900 via-purple-900 to-gray-900 p-8\">\n      <div className=\"max-w-7xl mx-auto space-y-8\">\n        <motion.div\n          initial={{ opacity: 0, y: -20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.8 }}\n          className=\"text-center space-y-4\"\n        >\n          <motion.h1\n            className=\"text-6xl font-bold bg-gradient-to-r from-cyan-400 via-purple-400 to-pink-400 bg-clip-text text-transparent\"\n            animate={{\n              textShadow: [\n                '0 0 20px rgba(0, 255, 255, 0.5)',\n                '0 0 40px rgba(255, 0, 255, 0.5)',\n                '0 0 20px rgba(0, 255, 255, 0.5)'\n              ]\n            }}\n            transition={{ duration: 2, repeat: Infinity }}\n          >\n            Algorithm Visualizer\n          </motion.h1>\n          \n          <div className=\"flex items-center justify-center gap-4\">\n            <motion.div\n              initial={{ scale: 0 }}\n              animate={{ scale: 1 }}\n              transition={{ delay: 0.3, type: 'spring' }}\n              className=\"px-6 py-2 bg-purple-500/20 border border-purple-400/50 rounded-full backdrop-blur-sm\"\n            >\n              <span className=\"text-2xl font-semibold text-purple-300\">\n                {mockAlgorithms.find(a => a.id === selectedAlgorithm)?.name || 'Bubble Sort'}\n              </span>\n            </motion.div>\n            \n            <motion.div\n              initial={{ scale: 0 }}\n              animate={{ scale: 1 }}\n              transition={{ delay: 0.5, type: 'spring' }}\n              className=\"px-4 py-2 bg-cyan-500/20 border border-cyan-400/50 rounded-full backdrop-blur-sm relative overflow-hidden\"\n            >\n              <motion.div\n                className=\"absolute inset-0 bg-gradient-to-r from-transparent via-cyan-400/20 to-transparent\"\n                animate={{ x: ['-100%', '200%'] }}\n                transition={{ duration: 2, repeat: Infinity, ease: 'linear' }}\n              />\n              <div className=\"relative flex items-center gap-2\">\n                <Zap className=\"w-4 h-4 text-cyan-400\" />\n                <span className=\"text-lg font-mono text-cyan-300\">\n                  {mockAlgorithms.find(a => a.id === selectedAlgorithm)?.complexity || 'O(n\u00b2)'}\n                </span>\n              </div>\n            </motion.div>\n          </div>\n        </motion.div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-6\">\n          <div className=\"lg:col-span-1 space-y-6\">\n            <motion.div\n              initial={{ opacity: 0, x: -50 }}\n              animate={{ opacity: 1, x: 0 }}\n              className=\"bg-gray-900/50 backdrop-blur-lg border border-cyan-500/30 rounded-xl p-6 shadow-[0_0_30px_rgba(0,255,255,0.3)] hover:shadow-[0_0_50px_rgba(0,255,255,0.5)] transition-all duration-300\"\n            >\n              <div className=\"space-y-6\">\n                {/* Algorithm Selection */}\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center gap-2 text-cyan-400 font-semibold\">\n                    <Zap className=\"w-4 h-4\" />\n                    <span className=\"text-sm uppercase tracking-wider\">Algorithm</span>\n                  </div>\n                  <div className=\"grid grid-cols-1 gap-2\">\n                    {mockAlgorithms.map((algo) => (\n                      <motion.button\n                        key={algo.id}\n                        whileHover={{ scale: 1.02 }}\n                        whileTap={{ scale: 0.98 }}\n                        onClick={() => {\n                          setSelectedAlgorithm(algo.id as AlgorithmType);\n                          generateSortingSteps(algo.id as AlgorithmType);\n                        }}\n                        className={`p-3 rounded-lg border transition-all duration-300 text-left ${\n                          selectedAlgorithm === algo.id\n                            ? 'bg-cyan-500/20 border-cyan-400 shadow-[0_0_20px_rgba(0,255,255,0.4)]'\n                            : 'bg-gray-800/50 border-gray-700 hover:border-cyan-500/50'\n                        }`}\n                      >\n                        <div className=\"font-medium text-white\">{algo.name}</div>\n                        <div className=\"text-xs text-gray-400 mt-1\">{algo.complexity}</div>\n                      </motion.button>\n                    ))}\n                  </div>\n                </div>\n\n                {/* Array Size Control */}\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center gap-2 text-purple-400 font-semibold\">\n                      <BarChart3 className=\"w-4 h-4\" />\n                      <span className=\"text-sm uppercase tracking-wider\">Array Size</span>\n                    </div>\n                    <span className=\"text-white font-mono text-lg\">{arraySize[0]}</span>\n                  </div>\n                  <Slider\n                    value={arraySize}\n                    onValueChange={setArraySize}\n                    min={5}\n                    max={50}\n                    step={1}\n                    className=\"cursor-pointer\"\n                    disabled={isPlaying}\n                  />\n                </div>\n\n                {/* Speed Control */}\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center gap-2 text-pink-400 font-semibold\">\n                      <Zap className=\"w-4 h-4\" />\n                      <span className=\"text-sm uppercase tracking-wider\">Speed</span>\n                    </div>\n                    <span className=\"text-white font-mono text-lg\">{speed[0]}%</span>\n                  </div>\n                  <Slider\n                    value={speed}\n                    onValueChange={setSpeed}\n                    min={10}\n                    max={100}\n                    step={10}\n                    className=\"cursor-pointer\"\n                  />\n                </div>\n\n                {/* Control Buttons */}\n                <div className=\"space-y-3 pt-4 border-t border-gray-700\">\n                  <Button\n                    onClick={isPlaying ? pauseVisualization : startVisualization}\n                    disabled={steps.length === 0 || currentStep >= steps.length}\n                    className=\"w-full bg-gradient-to-r from-cyan-500 to-blue-500 hover:from-cyan-400 hover:to-blue-400 text-white font-semibold shadow-[0_0_20px_rgba(0,255,255,0.5)] hover:shadow-[0_0_30px_rgba(0,255,255,0.7)] transition-all duration-300\"\n                  >\n                    {isPlaying ? (\n                      <>\n                        <Pause className=\"w-4 h-4 mr-2\" />\n                        Pause\n                      </>\n                    ) : (\n                      <>\n                        <Play className=\"w-4 h-4 mr-2\" />\n                        {currentStep >= steps.length ? 'Completed' : 'Start'}\n                      </>\n                    )}\n                  </Button>\n\n                  <Button\n                    onClick={resetVisualization}\n                    variant=\"outline\"\n                    className=\"w-full border-purple-500/50 text-purple-400 hover:bg-purple-500/20 hover:border-purple-400 hover:text-purple-300 shadow-[0_0_15px_rgba(168,85,247,0.3)] hover:shadow-[0_0_25px_rgba(168,85,247,0.5)] transition-all duration-300\"\n                  >\n                    <RotateCcw className=\"w-4 h-4 mr-2\" />\n                    Reset\n                  </Button>\n\n                  <Button\n                    onClick={generateRandomArray}\n                    disabled={isPlaying}\n                    variant=\"outline\"\n                    className=\"w-full border-pink-500/50 text-pink-400 hover:bg-pink-500/20 hover:border-pink-400 hover:text-pink-300 shadow-[0_0_15px_rgba(236,72,153,0.3)] hover:shadow-[0_0_25px_rgba(236,72,153,0.5)] transition-all duration-300\"\n                  >\n                    <BarChart3 className=\"w-4 h-4 mr-2\" />\n                    New Array\n                  </Button>\n                </div>\n\n                {/* Progress Indicator */}\n                {steps.length > 0 && (\n                  <div className=\"space-y-2 pt-4 border-t border-gray-700\">\n                    <div className=\"flex items-center justify-between text-xs text-gray-400\">\n                      <span>Progress</span>\n                      <span className=\"font-mono\">\n                        {currentStep} / {steps.length}\n                      </span>\n                    </div>\n                    <div className=\"h-2 bg-gray-800 rounded-full overflow-hidden\">\n                      <motion.div\n                        className=\"h-full bg-gradient-to-r from-cyan-500 via-purple-500 to-pink-500 shadow-[0_0_10px_rgba(0,255,255,0.5)]\"\n                        initial={{ width: 0 }}\n                        animate={{\n                          width: `${(currentStep / steps.length) * 100}%`\n                        }}\n                        transition={{ duration: 0.3 }}\n                      />\n                    </div>\n                  </div>\n                )}\n              </div>\n            </motion.div>\n            \n            <div className=\"bg-gray-900/50 backdrop-blur-lg border border-cyan-500/30 rounded-xl p-6 shadow-2xl shadow-cyan-500/20\">\n              <div className=\"space-y-6\">\n                <div>\n                  <h3 className=\"text-sm font-semibold text-cyan-400 mb-3 flex items-center gap-2\">\n                    <Zap className=\"w-4 h-4\" />\n                    Algorithm\n                  </h3>\n                  <div className=\"grid grid-cols-1 gap-2\">\n                    {mockAlgorithms.map((algo) => (\n                      <motion.button\n                        key={algo.id}\n                        onClick={() => setSelectedAlgorithm(algo.id as AlgorithmType)}\n                        className={`relative p-3 rounded-lg border transition-all duration-300 text-left ${\n                          selectedAlgorithm === algo.id\n                            ? 'bg-cyan-500/20 border-cyan-400 shadow-lg shadow-cyan-500/50'\n                            : 'bg-gray-800/50 border-gray-700 hover:border-cyan-500/50 hover:shadow-md hover:shadow-cyan-500/30'\n                        }`}\n                        whileHover={{ scale: 1.02 }}\n                        whileTap={{ scale: 0.98 }}\n                      >\n                        <div className=\"flex flex-col gap-1\">\n                          <span className={`text-sm font-medium ${\n                            selectedAlgorithm === algo.id ? 'text-cyan-300' : 'text-gray-300'\n                          }`}>\n                            {algo.name}\n                          </span>\n                          <span className={`text-xs ${\n                            selectedAlgorithm === algo.id ? 'text-cyan-400/80' : 'text-gray-500'\n                          }`}>\n                            {algo.complexity}\n                          </span>\n                        </div>\n                        {selectedAlgorithm === algo.id && (\n                          <motion.div\n                            className=\"absolute inset-0 rounded-lg border-2 border-cyan-400\"\n                            layoutId=\"algorithmSelector\"\n                            transition={{ type: \"spring\", stiffness: 300, damping: 30 }}\n                          />\n                        )}\n                      </motion.button>\n                    ))}\n                  </div>\n                </div></parameter>\n</invoke>\n\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <label className=\"text-cyan-400 text-sm font-medium flex items-center gap-2\">\n                      <Zap className=\"w-4 h-4\" />\n                      Speed\n                    </label>\n                    <span className=\"text-cyan-300 text-xs\">{speed[0]}ms</span>\n                  </div>\n                  <Slider\n                    value={speed}\n                    onValueChange={setSpeed}\n                    min={10}\n                    max={200}\n                    step={10}\n                    className=\"[&_[role=slider]]:bg-cyan-400 [&_[role=slider]]:border-cyan-300 [&_[role=slider]]:shadow-[0_0_15px_rgba(34,211,238,0.8)] [&_[role=slider]]:hover:shadow-[0_0_25px_rgba(34,211,238,1)] [&_[role=slider]]:transition-shadow [&_.relative]:bg-gray-700/50 [&_.relative]:border [&_.relative]:border-cyan-500/30 [&_.bg-primary]:bg-gradient-to-r [&_.bg-primary]:from-cyan-500 [&_.bg-primary]:to-purple-500 [&_.bg-primary]:shadow-[0_0_10px_rgba(34,211,238,0.5)]\"\n                  />\n                </div>\n\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <label className=\"text-cyan-400 text-sm font-medium flex items-center gap-2\">\n                      <BarChart3 className=\"w-4 h-4\" />\n                      Array Size\n                    </label>\n                    <span className=\"text-cyan-300 text-xs\">{arraySize[0]}</span>\n                  </div>\n                  <Slider\n                    value={arraySize}\n                    onValueChange={setArraySize}\n                    min={5}\n                    max={100}\n                    step={1}\n                    className=\"[&_[role=slider]]:bg-gradient-to-r [&_[role=slider]]:from-purple-500 [&_[role=slider]]:to-pink-500 [&_[role=slider]]:border-2 [&_[role=slider]]:border-purple-300 [&_[role=slider]]:shadow-lg [&_[role=slider]]:shadow-purple-500/50 [&_[role=slider]]:transition-all [&_[role=slider]]:hover:shadow-purple-400/70 [&_[role=slider]]:hover:scale-110 [&>span]:bg-gradient-to-r [&>span]:from-purple-500/30 [&>span]:to-pink-500/30 [&>span]:h-2\"\n                  />\n                </div>\n\n                <div className=\"flex gap-3 pt-4\">\n                  <motion.div className=\"relative flex-1\">\n                    <Button\n                      onClick={isPlaying ? pauseVisualization : startVisualization}\n                      disabled={array.length === 0 || (steps.length === 0 && !isPlaying)}\n                      className=\"w-full bg-gradient-to-r from-cyan-500 to-purple-500 hover:from-cyan-400 hover:to-purple-400 text-white font-semibold py-6 rounded-lg shadow-lg relative overflow-hidden group disabled:opacity-50 disabled:cursor-not-allowed\"\n                    >\n                      <motion.div\n                        className=\"absolute inset-0 bg-gradient-to-r from-cyan-400 to-purple-400 opacity-0 group-hover:opacity-100 blur-xl\"\n                        animate={{\n                          opacity: isPlaying ? [0.5, 0.8, 0.5] : 0\n                        }}\n                        transition={{\n                          duration: 2,\n                          repeat: isPlaying ? Infinity : 0,\n                          ease: \"easeInOut\"\n                        }}\n                      />\n                      \n                      <motion.div\n                        className=\"relative flex items-center justify-center gap-2\"\n                        whileHover={{ scale: 1.05 }}\n                        whileTap={{ scale: 0.95 }}\n                      >\n                        <motion.div\n                          animate={{\n                            rotate: isPlaying ? 0 : 0,\n                            scale: isPlaying ? 1 : 1\n                          }}\n                          transition={{ duration: 0.3 }}\n                        >\n                          {isPlaying ? (\n                            <motion.div\n                              initial={{ scale: 0, rotate: -180 }}\n                              animate={{ scale: 1, rotate: 0 }}\n                              exit={{ scale: 0, rotate: 180 }}\n                              transition={{ duration: 0.3 }}\n                            >\n                              <Pause className=\"w-5 h-5\" />\n                            </motion.div>\n                          ) : (\n                            <motion.div\n                              initial={{ scale: 0, rotate: -180 }}\n                              animate={{ scale: 1, rotate: 0 }}\n                              exit={{ scale: 0, rotate: 180 }}\n                              transition={{ duration: 0.3 }}\n                            >\n                              <Play className=\"w-5 h-5\" />\n                            </motion.div>\n                          )}\n                        </motion.div>\n                        \n                        <span className=\"text-sm font-bold tracking-wider\">\n                          {isPlaying ? 'PAUSE' : 'PLAY'}\n                        </span>\n                      </motion.div>\n                      \n                      <motion.div\n                        className=\"absolute inset-0 rounded-lg\"\n                        style={{\n                          boxShadow: isPlaying \n                            ? '0 0 20px rgba(0, 255, 255, 0.6), 0 0 40px rgba(168, 85, 247, 0.4)'\n                            : '0 0 10px rgba(0, 255, 255, 0.3)'\n                        }}\n                        animate={{\n                          boxShadow: isPlaying\n                            ? [\n                                '0 0 20px rgba(0, 255, 255, 0.6), 0 0 40px rgba(168, 85, 247, 0.4)',\n                                '0 0 30px rgba(168, 85, 247, 0.6), 0 0 50px rgba(0, 255, 255, 0.4)',\n                                '0 0 20px rgba(0, 255, 255, 0.6), 0 0 40px rgba(168, 85, 247, 0.4)'\n                              ]\n                            : '0 0 10px rgba(0, 255, 255, 0.3)'\n                        }}\n                        transition={{\n                          duration: 2,\n                          repeat: isPlaying ? Infinity : 0,\n                          ease: \"easeInOut\"\n                        }}\n                      />\n                    </Button>\n                  </motion.div>\n                  <motion.div className=\"relative flex-1\">\n                    <Button\n                      onClick={resetVisualization}\n                      variant=\"outline\"\n                      className=\"w-full bg-pink-500/10 border-pink-400/50 text-pink-300 hover:bg-pink-500/20 hover:border-pink-400 hover:shadow-[0_0_30px_rgba(236,72,153,0.6)] transition-all duration-300 relative overflow-hidden group\"\n                      whileHover={{ scale: 1.05 }}\n                      whileTap={{ scale: 0.95, rotate: -180 }}\n                      transition={{ type: \"spring\", stiffness: 300, damping: 20 }}\n                    >\n                      <motion.div\n                        className=\"absolute inset-0 bg-gradient-to-r from-transparent via-pink-400/30 to-transparent\"\n                        animate={{ x: ['-100%', '200%'] }}\n                        transition={{ duration: 3, repeat: Infinity, ease: 'linear' }}\n                      />\n                      <motion.div\n                        className=\"relative flex items-center justify-center gap-2\"\n                        whileHover={{ rotate: 360 }}\n                        transition={{ duration: 0.6 }}\n                      >\n                        <RotateCcw className=\"w-4 h-4\" />\n                        <span className=\"font-semibold\">Reset</span>\n                      </motion.div>\n                      <motion.div\n                        className=\"absolute inset-0 rounded-md\"\n                        animate={{\n                          boxShadow: [\n                            '0 0 20px rgba(236,72,153,0.3)',\n                            '0 0 40px rgba(236,72,153,0.6)',\n                            '0 0 20px rgba(236,72,153,0.3)'\n                          ]\n                        }}\n                        transition={{ duration: 2, repeat: Infinity }}\n                      />\n                    </Button>\n                  </motion.div>\n                </div>\n              </div>\n            </div>\n\n            <motion.div\n            initial={{ opacity: 0, x: -50 }}\n            animate={{ opacity: 1, x: 0 }}\n            transition={{ delay: 0.2 }}\n            className=\"bg-gray-900/50 backdrop-blur-lg border border-purple-500/30 rounded-xl p-6 shadow-[0_0_30px_rgba(168,85,247,0.3)] hover:shadow-[0_0_50px_rgba(168,85,247,0.5)] transition-all duration-300\"\n          >\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center gap-2 text-purple-400 font-semibold mb-4\">\n                <BarChart3 className=\"w-5 h-5\" />\n                <span className=\"text-sm uppercase tracking-wider\">Statistics</span>\n              </div>\n\n              <div className=\"space-y-3\">\n                {/* Progress */}\n                <motion.div\n                  className=\"p-4 bg-gradient-to-br from-cyan-500/10 to-purple-500/10 border border-cyan-400/30 rounded-lg relative overflow-hidden\"\n                  whileHover={{ scale: 1.02 }}\n                  transition={{ type: 'spring', stiffness: 300 }}\n                >\n                  <motion.div\n                    className=\"absolute inset-0 bg-gradient-to-r from-transparent via-cyan-400/10 to-transparent\"\n                    animate={{ x: ['-100%', '200%'] }}\n                    transition={{ duration: 3, repeat: Infinity, ease: 'linear' }}\n                  />\n                  <div className=\"relative\">\n                    <div className=\"text-xs text-cyan-300 uppercase tracking-wider mb-2\">Progress</div>\n                    <div className=\"flex items-baseline gap-2\">\n                      <motion.span\n                        className=\"text-3xl font-bold bg-gradient-to-r from-cyan-400 to-purple-400 bg-clip-text text-transparent\"\n                        key={currentStep}\n                        initial={{ scale: 1.2, opacity: 0 }}\n                        animate={{ scale: 1, opacity: 1 }}\n                        transition={{ type: 'spring', stiffness: 200 }}\n                      >\n                        {steps.length > 0 ? Math.round((currentStep / steps.length) * 100) : 0}%\n                      </motion.span>\n                      <span className=\"text-sm text-gray-400\">\n                        ({currentStep} / {steps.length})\n                      </span>\n                    </div>\n                  </div>\n                </motion.div>\n\n                {/* Comparisons */}\n                <motion.div\n                  className=\"p-4 bg-gradient-to-br from-pink-500/10 to-orange-500/10 border border-pink-400/30 rounded-lg relative overflow-hidden group\"\n                  whileHover={{ scale: 1.02 }}\n                  transition={{ type: 'spring', stiffness: 300 }}\n                >\n                  <div className=\"absolute inset-0 bg-pink-500/5 opacity-0 group-hover:opacity-100 transition-opacity duration-300\" />\n                  <div className=\"relative\">\n                    <div className=\"text-xs text-pink-300 uppercase tracking-wider mb-2\">Comparisons</div>\n                    <motion.div\n                      className=\"text-3xl font-bold text-pink-400 font-mono\"\n                      key={`comp-${currentStep}`}\n                      initial={{ y: -10, opacity: 0 }}\n                      animate={{ y: 0, opacity: 1 }}\n                      transition={{ type: 'spring', stiffness: 200 }}\n                    >\n                      {steps.slice(0, currentStep).filter(step => step.comparingIndices.length > 0).length}\n                    </motion.div>\n                    <div className=\"mt-2 h-1 bg-gray-800 rounded-full overflow-hidden\">\n                      <motion.div\n                        className=\"h-full bg-gradient-to-r from-pink-500 to-orange-500 shadow-[0_0_10px_rgba(236,72,153,0.8)]\"\n                        initial={{ width: 0 }}\n                        animate={{\n                          width: steps.length > 0\n                            ? `${(steps.slice(0, currentStep).filter(step => step.comparingIndices.length > 0).length / steps.length) * 100}%`\n                            : '0%'\n                        }}\n                        transition={{ duration: 0.3 }}\n                      />\n                    </div>\n                  </div>\n                </motion.div>\n\n                {/* Swaps */}\n                <motion.div\n                  className=\"p-4 bg-gradient-to-br from-green-500/10 to-emerald-500/10 border border-green-400/30 rounded-lg relative overflow-hidden group\"\n                  whileHover={{ scale: 1.02 }}\n                  transition={{ type: 'spring', stiffness: 300 }}\n                >\n                  <div className=\"absolute inset-0 bg-green-500/5 opacity-0 group-hover:opacity-100 transition-opacity duration-300\" />\n                  <div className=\"relative\">\n                    <div className=\"text-xs text-green-300 uppercase tracking-wider mb-2\">Swaps</div>\n                    <motion.div\n                      className=\"text-3xl font-bold text-green-400 font-mono\"\n                      key={`swap-${currentStep}`}\n                      initial={{ y: -10, opacity: 0 }}\n                      animate={{ y: 0, opacity: 1 }}\n                      transition={{ type: 'spring', stiffness: 200 }}\n                    >\n                      {steps.slice(0, currentStep).filter(step => step.swappingIndices.length > 0).length}\n                    </motion.div>\n                    <div className=\"mt-2 h-1 bg-gray-800 rounded-full overflow-hidden\">\n                      <motion.div\n                        className=\"h-full bg-gradient-to-r from-green-500 to-emerald-500 shadow-[0_0_10px_rgba(34,197,94,0.8)]\"\n                        initial={{ width: 0 }}\n                        animate={{\n                          width: steps.length > 0\n                            ? `${(steps.slice(0, currentStep).filter(step => step.swappingIndices.length > 0).length / steps.length) * 100}%`\n                            : '0%'\n                        }}\n                        transition={{ duration: 0.3 }}\n                      />\n                    </div>\n                  </div>\n                </motion.div>\n\n                {/* Sorted Elements */}\n                <motion.div\n                  className=\"p-4 bg-gradient-to-br from-yellow-500/10 to-amber-500/10 border border-yellow-400/30 rounded-lg relative overflow-hidden group\"\n                  whileHover={{ scale: 1.02 }}\n                  transition={{ type: 'spring', stiffness: 300 }}\n                >\n                  <div className=\"absolute inset-0 bg-yellow-500/5 opacity-0 group-hover:opacity-100 transition-opacity duration-300\" />\n                  <div className=\"relative\">\n                    <div className=\"text-xs text-yellow-300 uppercase tracking-wider mb-2\">Sorted Elements</div>\n                    <div className=\"flex items-baseline gap-2\">\n                      <motion.span\n                        className=\"text-3xl font-bold text-yellow-400 font-mono\"\n                        key={`sorted-${currentStep}`}\n                        initial={{ scale: 1.2, opacity: 0 }}\n                        animate={{ scale: 1, opacity: 1 }}\n                        transition={{ type: 'spring', stiffness: 200 }}\n                      >\n                        {currentStep > 0 && steps[currentStep - 1] ? steps[currentStep - 1].sortedIndices.length : 0}\n                      </motion.span>\n                      <span className=\"text-sm text-gray-400\">\n                        / {array.length}\n                      </span>\n                    </div>\n                    <div className=\"mt-2 h-1 bg-gray-800 rounded-full overflow-hidden\">\n                      <motion.div\n                        className=\"h-full bg-gradient-to-r from-yellow-500 to-amber-500 shadow-[0_0_10px_rgba(234,179,8,0.8)]\"\n                        initial={{ width: 0 }}\n                        animate={{\n                          width: array.length > 0 && currentStep > 0 && steps[currentStep - 1]\n                            ? `${(steps[currentStep - 1].sortedIndices.length / array.length) * 100}%`\n                            : '0%'\n                        }}\n                        transition={{ duration: 0.3 }}\n                      />\n                    </div>\n                  </div>\n                </motion.div>\n\n                {/* Status Indicator */}\n                <motion.div\n                  className=\"p-4 bg-gray-800/50 border border-gray-700 rounded-lg\"\n                  animate={{\n                    borderColor: isPlaying\n                      ? ['rgba(34, 197, 94, 0.5)', 'rgba(34, 197, 94, 0.8)', 'rgba(34, 197, 94, 0.5)']\n                      : 'rgba(107, 114, 128, 1)'\n                  }}\n                  transition={{ duration: 2, repeat: Infinity }}\n                >\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-xs text-gray-400 uppercase tracking-wider\">Status</span>\n                    <div className=\"flex items-center gap-2\">\n                      <motion.div\n                        className={`w-2 h-2 rounded-full ${isPlaying ? 'bg-green-400' : 'bg-gray-500'}`}\n                        animate={{\n                          boxShadow: isPlaying\n                            ? [\n                                '0 0 5px rgba(34, 197, 94, 0.8)',\n                                '0 0 15px rgba(34, 197, 94, 1)',\n                                '0 0 5px rgba(34, 197, 94, 0.8)'\n                              ]\n                            : '0 0 0px rgba(107, 114, 128, 0)'\n                        }}\n                        transition={{ duration: 1.5, repeat: Infinity }}\n                      />\n                      <span className={`text-sm font-medium ${isPlaying ? 'text-green-400' : 'text-gray-400'}`}>\n                        {isPlaying ? 'Running' : currentStep >= steps.length && steps.length > 0 ? 'Completed' : 'Idle'}\n                      </span>\n                    </div>\n                  </div>\n                </motion.div>\n              </div>\n            </div>\n          </motion.div>\n          </div>\n\n          <div className=\"lg:col-span-3\">\n            <div className=\"bg-gray-900/50 backdrop-blur-lg border border-purple-500/30 rounded-xl p-8 shadow-2xl shadow-purple-500/20 min-h-[600px]\">\n                            {array.length === 0 ? (\n                <motion.div\n                  initial={{ opacity: 0, scale: 0.8 }}\n                  animate={{ opacity: 1, scale: 1 }}\n                  className=\"absolute inset-0 flex flex-col items-center justify-center gap-6\"\n                >\n                  <motion.div\n                    animate={{\n                      boxShadow: [\n                        '0 0 20px rgba(0, 255, 255, 0.3)',\n                        '0 0 40px rgba(255, 0, 255, 0.5)',\n                        '0 0 20px rgba(0, 255, 255, 0.3)'\n                      ]\n                    }}\n                    transition={{ duration: 2, repeat: Infinity }}\n                    className=\"p-8 rounded-full bg-gradient-to-br from-cyan-500/20 to-purple-500/20 border border-cyan-400/50\"\n                  >\n                    <BarChart3 className=\"w-16 h-16 text-cyan-400\" />\n                  </motion.div>\n                  <div className=\"text-center space-y-2\">\n                    <h3 className=\"text-2xl font-bold text-cyan-300\">Ready to Visualize</h3>\n                    <p className=\"text-gray-400\">Generate an array to begin sorting</p>\n                  </div>\n                </motion.div>\n              ) : (\n                <div className=\"relative w-full h-full flex items-end justify-center gap-1 px-4\">\n                  {array.map((element, index) => {\n                    const isComparing = steps[currentStep]?.comparingIndices.includes(index);\n                    const isSwapping = steps[currentStep]?.swappingIndices.includes(index);\n                    const isSorted = steps[currentStep]?.sortedIndices.includes(index);\n                    \n                    const maxValue = Math.max(...array.map(el => el.value));\n                    const heightPercentage = (element.value / maxValue) * 100;\n                    \n                    let barColor = NEON_COLORS[index % NEON_COLORS.length];\n                    let glowColor = barColor;\n                    let glowIntensity = 0.3;\n                    \n                    if (isSorted) {\n                      barColor = '#00ff00';\n                      glowColor = '#00ff00';\n                      glowIntensity = 0.6;\n                    } else if (isSwapping) {\n                      barColor = '#ff0066';\n                      glowColor = '#ff0066';\n                      glowIntensity = 0.8;\n                    } else if (isComparing) {\n                      barColor = '#ffff00';\n                      glowColor = '#ffff00';\n                      glowIntensity = 0.7;\n                    }\n                    \n                    return (\n                      <motion.div\n                        key={element.id}\n                        className=\"relative flex-1 min-w-[4px] max-w-[60px] group\"\n                        layout\n                        initial={{ opacity: 0, y: 50 }}\n                        animate={{\n                          opacity: 1,\n                          y: 0,\n                          scale: isSwapping ? 1.1 : isComparing ? 1.05 : 1\n                        }}\n                        transition={{\n                          layout: { duration: 0.3, ease: 'easeInOut' },\n                          scale: { duration: 0.2 }\n                        }}\n                      >\n                        {/* Swap Trail Effect */}\n                        {isSwapping && (\n                          <motion.div\n                            className=\"absolute inset-0 rounded-t-lg\"\n                            style={{\n                              background: `linear-gradient(to top, transparent, ${barColor})`,\n                              filter: 'blur(10px)'\n                            }}\n                            animate={{\n                              opacity: [0.3, 0.8, 0.3],\n                              scale: [1, 1.2, 1]\n                            }}\n                            transition={{\n                              duration: 0.5,\n                              repeat: Infinity\n                            }}\n                          />\n                        )}\n                        \n                        {/* Main Bar */}\n                        <motion.div\n                          className=\"relative w-full rounded-t-lg overflow-hidden\"\n                          style={{\n                            height: `${heightPercentage}%`,\n                            minHeight: '20px',\n                            backgroundColor: barColor,\n                            boxShadow: `\n                              0 0 ${glowIntensity * 20}px ${glowColor},\n                              0 0 ${glowIntensity * 40}px ${glowColor},\n                              inset 0 0 ${glowIntensity * 10}px rgba(255, 255, 255, 0.3)\n                            `\n                          }}\n                          animate={{\n                            height: `${heightPercentage}%`,\n                            backgroundColor: barColor,\n                            boxShadow: `\n                              0 0 ${glowIntensity * 20}px ${glowColor},\n                              0 0 ${glowIntensity * 40}px ${glowColor},\n                              inset 0 0 ${glowIntensity * 10}px rgba(255, 255, 255, 0.3)\n                            `\n                          }}\n                          transition={{\n                            height: { duration: 0.3, ease: 'easeInOut' },\n                            backgroundColor: { duration: 0.2 },\n                            boxShadow: { duration: 0.2 }\n                          }}\n                        >\n                          {/* Shimmer Effect */}\n                          <motion.div\n                            className=\"absolute inset-0 bg-gradient-to-r from-transparent via-white/30 to-transparent\"\n                            animate={{\n                              x: ['-100%', '200%']\n                            }}\n                            transition={{\n                              duration: 2,\n                              repeat: Infinity,\n                              ease: 'linear',\n                              repeatDelay: 1\n                            }}\n                          />\n                          \n                          {/* Value Label */}\n                          {array.length <= 30 && (\n                            <motion.div\n                              className=\"absolute inset-0 flex items-center justify-center\"\n                              initial={{ opacity: 0 }}\n                              animate={{ opacity: 1 }}\n                              transition={{ delay: 0.2 }}\n                            >\n                              <span\n                                className=\"text-xs font-bold text-white drop-shadow-[0_2px_4px_rgba(0,0,0,0.8)]\"\n                                style={{\n                                  writingMode: heightPercentage > 30 ? 'horizontal-tb' : 'vertical-rl',\n                                  transform: heightPercentage > 30 ? 'none' : 'rotate(180deg)'\n                                }}\n                              >\n                                {element.value}\n                              </span>\n                            </motion.div>\n                          )}\n                        </motion.div>\n                        \n                        {/* Comparison Indicator */}\n                        {isComparing && (\n                          <motion.div\n                            className=\"absolute -top-8 left-1/2 transform -translate-x-1/2\"\n                            initial={{ opacity: 0, y: 10 }}\n                            animate={{ opacity: 1, y: 0 }}\n                            exit={{ opacity: 0 }}\n                          >\n                            <motion.div\n                              className=\"w-6 h-6 rounded-full bg-yellow-400 border-2 border-yellow-300\"\n                              animate={{\n                                boxShadow: [\n                                  '0 0 10px rgba(255, 255, 0, 0.5)',\n                                  '0 0 20px rgba(255, 255, 0, 0.8)',\n                                  '0 0 10px rgba(255, 255, 0, 0.5)'\n                                ],\n                                scale: [1, 1.2, 1]\n                              }}\n                              transition={{\n                                duration: 0.6,\n                                repeat: Infinity\n                              }}\n                            />\n                          </motion.div>\n                        )}\n                        \n                        {/* Swap Indicator */}\n                        {isSwapping && (\n                          <motion.div\n                            className=\"absolute -top-10 left-1/2 transform -translate-x-1/2\"\n                            initial={{ opacity: 0, scale: 0 }}\n                            animate={{ opacity: 1, scale: 1, rotate: 360 }}\n                            exit={{ opacity: 0, scale: 0 }}\n                            transition={{ duration: 0.4 }}\n                          >\n                            <motion.div\n                              className=\"relative\"\n                              animate={{\n                                y: [0, -5, 0]\n                              }}\n                              transition={{\n                                duration: 0.5,\n                                repeat: Infinity\n                              }}\n                            >\n                              <RotateCcw className=\"w-5 h-5 text-pink-400\" />\n                              <motion.div\n                                className=\"absolute inset-0 rounded-full\"\n                                animate={{\n                                  boxShadow: [\n                                    '0 0 10px rgba(255, 0, 102, 0.5)',\n                                    '0 0 25px rgba(255, 0, 102, 0.9)',\n                                    '0 0 10px rgba(255, 0, 102, 0.5)'\n                                  ]\n                                }}\n                                transition={{\n                                  duration: 0.5,\n                                  repeat: Infinity\n                                }}\n                              />\n                            </motion.div>\n                          </motion.div>\n                        )}\n                        \n                        {/* Sorted Checkmark */}\n                        {isSorted && (\n                          <motion.div\n                            className=\"absolute -top-8 left-1/2 transform -translate-x-1/2\"\n                            initial={{ opacity: 0, scale: 0, rotate: -180 }}\n                            animate={{ opacity: 1, scale: 1, rotate: 0 }}\n                            transition={{ type: 'spring', stiffness: 200, damping: 10 }}\n                          >\n                            <motion.div\n                              className=\"w-6 h-6 rounded-full bg-green-400 border-2 border-green-300 flex items-center justify-center\"\n                              animate={{\n                                boxShadow: [\n                                  '0 0 10px rgba(0, 255, 0, 0.5)',\n                                  '0 0 20px rgba(0, 255, 0, 0.8)',\n                                  '0 0 10px rgba(0, 255, 0, 0.5)'\n                                ]\n                              }}\n                              transition={{\n                                duration: 1,\n                                repeat: Infinity\n                              }}\n                            >\n                              <svg\n                                className=\"w-4 h-4 text-gray-900\"\n                                fill=\"none\"\n                                strokeLinecap=\"round\"\n                                strokeLinejoin=\"round\"\n                                strokeWidth=\"3\"\n                                viewBox=\"0 0 24 24\"\n                                stroke=\"currentColor\"\n                              >\n                                <path d=\"M5 13l4 4L19 7\" />\n                              </svg>\n                            </motion.div>\n                          </motion.div>\n                        )}\n                        \n                        {/* Hover Tooltip */}\n                        <div className=\"absolute -bottom-8 left-1/2 transform -translate-x-1/2 opacity-0 group-hover:opacity-100 transition-opacity duration-200 pointer-events-none\">\n                          <div className=\"bg-gray-900 border border-cyan-400/50 rounded px-2 py-1 text-xs text-cyan-300 whitespace-nowrap shadow-lg\">\n                            Index: {index}\n                          </div>\n                        </div>\n                      </motion.div>\n                    );\n                  })}\n                </div>\n              )}\n              \n              <div className=\"relative h-full flex items-end justify-center gap-1\">\n                {array.map((element, index) => {\n                  const currentStepData = steps[currentStep];\n                  const isComparing = currentStepData?.comparingIndices.includes(index);\n                  const isSwapping = currentStepData?.swappingIndices.includes(index);\n                  const isSorted = currentStepData?.sortedIndices.includes(index);\n                  \n                  const barColor = isSorted \n                    ? '#00ff00' \n                    : isSwapping \n                    ? '#ff0066' \n                    : isComparing \n                    ? '#ffff00' \n                    : NEON_COLORS[index % NEON_COLORS.length];\n\n                  const maxHeight = 500;\n                  const barHeight = (element.value / 100) * maxHeight;\n\n                  return (\n                    <motion.div\n                      key={element.id}\n                      className=\"relative flex-1 min-w-[4px] max-w-[60px] rounded-t-lg\"\n                      initial={{ height: 0, opacity: 0 }}\n                      animate={{\n                        height: barHeight,\n                        opacity: 1,\n                        scale: isComparing || isSwapping ? 1.05 : 1,\n                        y: isSwapping ? -10 : 0\n                      }}\n                      transition={{\n                        height: { duration: 0.5, ease: 'easeOut' },\n                        scale: { duration: 0.2 },\n                        y: { duration: 0.3, type: 'spring' }\n                      }}\n                      style={{\n                        backgroundColor: barColor,\n                        boxShadow: `\n                          0 0 ${isComparing ? '30px' : isSwapping ? '40px' : '15px'} ${barColor},\n                          0 0 ${isComparing ? '60px' : isSwapping ? '80px' : '30px'} ${barColor}80,\n                          inset 0 0 20px ${barColor}40\n                        `\n                      }}\n                    >\n                      {/* Glow effect overlay */}\n                      <motion.div\n                        className=\"absolute inset-0 rounded-t-lg\"\n                        animate={{\n                          opacity: isComparing || isSwapping ? [0.3, 0.7, 0.3] : 0.2\n                        }}\n                        transition={{\n                          duration: 0.8,\n                          repeat: isComparing || isSwapping ? Infinity : 0\n                        }}\n                        style={{\n                          background: `linear-gradient(to top, transparent, ${barColor}60)`\n                        }}\n                      />\n\n                      {/* Swap trail effect */}\n                      {isSwapping && (\n                        <motion.div\n                          className=\"absolute inset-0 rounded-t-lg\"\n                          initial={{ opacity: 0, scale: 1 }}\n                          animate={{ \n                            opacity: [0.8, 0],\n                            scale: [1, 1.3]\n                          }}\n                          transition={{\n                            duration: 0.6,\n                            repeat: Infinity\n                          }}\n                          style={{\n                            border: `2px solid ${barColor}`,\n                            boxShadow: `0 0 20px ${barColor}`\n                          }}\n                        />\n                      )}\n\n                      {/* Value label */}\n                      {arraySize[0] <= 30 && (\n                        <motion.div\n                          className=\"absolute -bottom-6 left-1/2 transform -translate-x-1/2 text-xs font-mono font-bold whitespace-nowrap\"\n                          initial={{ opacity: 0 }}\n                          animate={{ opacity: 1 }}\n                          style={{\n                            color: barColor,\n                            textShadow: `0 0 10px ${barColor}`\n                          }}\n                        >\n                          {element.value}\n                        </motion.div>\n                      )}\n\n                      {/* Comparison indicator */}\n                      {isComparing && (\n                        <motion.div\n                          className=\"absolute -top-8 left-1/2 transform -translate-x-1/2\"\n                          initial={{ opacity: 0, y: 10 }}\n                          animate={{ \n                            opacity: [0.5, 1, 0.5],\n                            y: [-5, -10, -5]\n                          }}\n                          transition={{\n                            duration: 0.8,\n                            repeat: Infinity\n                          }}\n                        >\n                          <div \n                            className=\"w-3 h-3 rounded-full\"\n                            style={{\n                              backgroundColor: '#ffff00',\n                              boxShadow: '0 0 15px #ffff00, 0 0 30px #ffff00'\n                            }}\n                          />\n                        </motion.div>\n                      )}\n\n                      {/* Sorted checkmark */}\n                      {isSorted && (\n                        <motion.div\n                          className=\"absolute -top-8 left-1/2 transform -translate-x-1/2\"\n                          initial={{ scale: 0, rotate: -180 }}\n                          animate={{ scale: 1, rotate: 0 }}\n                          transition={{ type: 'spring', stiffness: 200 }}\n                        >\n                          <div \n                            className=\"w-4 h-4 rounded-full flex items-center justify-center text-xs\"\n                            style={{\n                              backgroundColor: '#00ff00',\n                              boxShadow: '0 0 20px #00ff00',\n                              color: '#000'\n                            }}\n                          >\n                            \u2713\n                          </div>\n                        </motion.div>\n                      )}\n                    </motion.div>\n                  );\n                })}\n              </div>\n            </div>\n\n                        <motion.div\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ delay: 0.3 }}\n              className=\"mt-6 space-y-3\"\n            >\n              <div className=\"flex items-center justify-between text-sm\">\n                <span className=\"text-purple-400 font-semibold uppercase tracking-wider\">\n                  Sorting Progress\n                </span>\n                <span className=\"text-cyan-300 font-mono text-lg\">\n                  {steps.length > 0 ? Math.round((currentStep / steps.length) * 100) : 0}%\n                </span>\n              </div>\n              \n              <div className=\"relative h-4 bg-gray-800/50 rounded-full border border-purple-500/30 overflow-hidden shadow-inner\">\n                <motion.div\n                  className=\"absolute inset-y-0 left-0 bg-gradient-to-r from-cyan-500 via-purple-500 to-pink-500 rounded-full\"\n                  initial={{ width: '0%' }}\n                  animate={{ \n                    width: steps.length > 0 ? `${(currentStep / steps.length) * 100}%` : '0%'\n                  }}\n                  transition={{ \n                    duration: 0.3,\n                    ease: 'easeOut'\n                  }}\n                >\n                  <motion.div\n                    className=\"absolute inset-0 bg-gradient-to-r from-transparent via-white/30 to-transparent\"\n                    animate={{ x: ['-100%', '200%'] }}\n                    transition={{ \n                      duration: 1.5, \n                      repeat: Infinity, \n                      ease: 'linear',\n                      repeatDelay: 0\n                    }}\n                  />\n                </motion.div>\n                \n                <motion.div\n                  className=\"absolute inset-0 rounded-full\"\n                  animate={{\n                    boxShadow: [\n                      '0 0 20px rgba(168, 85, 247, 0.4)',\n                      '0 0 40px rgba(168, 85, 247, 0.6)',\n                      '0 0 20px rgba(168, 85, 247, 0.4)'\n                    ]\n                  }}\n                  transition={{ \n                    duration: 2, \n                    repeat: Infinity,\n                    ease: 'easeInOut'\n                  }}\n                />\n              </div>\n              \n              <div className=\"flex justify-between text-xs text-gray-500\">\n                <span>Step {currentStep} of {steps.length}</span>\n                {currentStep >= steps.length && steps.length > 0 && (\n                  <motion.span\n                    initial={{ opacity: 0, scale: 0.8 }}\n                    animate={{ opacity: 1, scale: 1 }}\n                    className=\"text-green-400 font-semibold\"\n                  >\n                    \u2713 Complete\n                  </motion.span>\n                )}\n              </div>\n            </motion.div>\n          </div>\n        </div>\n\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ delay: 0.4, duration: 0.8 }}\n          className=\"bg-gray-900/50 backdrop-blur-lg border border-cyan-500/30 rounded-xl p-6 shadow-[0_0_30px_rgba(0,255,255,0.2)]\"\n        >\n          <div className=\"flex items-center justify-center gap-8 flex-wrap\">\n            <div className=\"flex items-center gap-3\">\n              <motion.div\n                className=\"w-6 h-6 rounded-lg bg-cyan-400 shadow-[0_0_20px_rgba(0,255,255,0.8)]\"\n                animate={{\n                  boxShadow: [\n                    '0 0 20px rgba(0,255,255,0.8)',\n                    '0 0 30px rgba(0,255,255,1)',\n                    '0 0 20px rgba(0,255,255,0.8)'\n                  ]\n                }}\n                transition={{ duration: 2, repeat: Infinity }}\n              />\n              <div className=\"flex flex-col\">\n                <span className=\"text-cyan-300 font-semibold text-sm\">Comparing</span>\n                <span className=\"text-gray-400 text-xs\">Elements being compared</span>\n              </div>\n            </div>\n\n            <div className=\"flex items-center gap-3\">\n              <motion.div\n                className=\"w-6 h-6 rounded-lg bg-pink-500 shadow-[0_0_20px_rgba(236,72,153,0.8)]\"\n                animate={{\n                  boxShadow: [\n                    '0 0 20px rgba(236,72,153,0.8)',\n                    '0 0 30px rgba(236,72,153,1)',\n                    '0 0 20px rgba(236,72,153,0.8)'\n                  ],\n                  scale: [1, 1.1, 1]\n                }}\n                transition={{ duration: 1.5, repeat: Infinity }}\n              />\n              <div className=\"flex flex-col\">\n                <span className=\"text-pink-300 font-semibold text-sm\">Swapping</span>\n                <span className=\"text-gray-400 text-xs\">Elements being swapped</span>\n              </div>\n            </div>\n\n            <div className=\"flex items-center gap-3\">\n              <motion.div\n                className=\"w-6 h-6 rounded-lg bg-green-400 shadow-[0_0_20px_rgba(74,222,128,0.8)]\"\n                animate={{\n                  boxShadow: [\n                    '0 0 20px rgba(74,222,128,0.8)',\n                    '0 0 30px rgba(74,222,128,1)',\n                    '0 0 20px rgba(74,222,128,0.8)'\n                  ]\n                }}\n                transition={{ duration: 2, repeat: Infinity, delay: 0.5 }}\n              />\n              <div className=\"flex flex-col\">\n                <span className=\"text-green-300 font-semibold text-sm\">Sorted</span>\n                <span className=\"text-gray-400 text-xs\">In final position</span>\n              </div>\n            </div>\n\n            <div className=\"flex items-center gap-3\">\n              <motion.div\n                className=\"w-6 h-6 rounded-lg bg-purple-400 shadow-[0_0_15px_rgba(168,85,247,0.6)]\"\n                whileHover={{\n                  scale: 1.1,\n                  boxShadow: '0 0 25px rgba(168,85,247,1)'\n                }}\n              />\n              <div className=\"flex flex-col\">\n                <span className=\"text-purple-300 font-semibold text-sm\">Unsorted</span>\n                <span className=\"text-gray-400 text-xs\">Waiting to be sorted</span>\n              </div>\n            </div>\n          </div>\n        </motion.div>\n      </div>\n    </div>\n  );\n}",
  "error": null,
  "overall_score": 46,
  "code_quality_score": 14,
  "architecture_score": 12,
  "performance_score": 11,
  "accessibility_score": 9,
  "metadata": {
    "document_id": "eval_room_2f8ad9a393c8",
    "prompt_category": "creative",
    "prompt_complexity": 9.0
  },
  "raw_response": {
    "document_id": "eval_room_2f8ad9a393c8",
    "mode": "parallel",
    "prompt": "Build a captivating algorithm visualizer with neon colored bars, smooth height transitions, glowing comparison indicators, trail effects during swaps, and a futuristic dashboard design with animated controls",
    "content": "import { useState, useCallback } from 'react';\nimport { useEffect, useRef } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Slider } from '@/components/ui/slider';\nimport { Play, Pause, RotateCcw, Zap, BarChart3 } from 'lucide-react';\nimport { motion } from 'framer-motion';\n\ninterface ArrayElement {\n  value: number;\n  id: string;\n  isComparing?: boolean;\n  isSwapping?: boolean;\n  isSorted?: boolean;\n}\n\ninterface AlgorithmStep {\n  array: ArrayElement[];\n  comparingIndices: number[];\n  swappingIndices: number[];\n  sortedIndices: number[];\n}\n\ntype AlgorithmType = 'bubble' | 'quick' | 'merge' | 'insertion';\n\nconst NEON_COLORS = [\n  '#00ffff',\n  '#ff00ff', \n  '#00ff00',\n  '#ffff00',\n  '#ff0066',\n  '#00ffaa'\n];\n\nconst mockAlgorithms = [\n  { id: 'bubble', name: 'Bubble Sort', complexity: 'O(n\u00b2)' },\n  { id: 'quick', name: 'Quick Sort', complexity: 'O(n log n)' },\n  { id: 'merge', name: 'Merge Sort', complexity: 'O(n log n)' },\n  { id: 'insertion', name: 'Insertion Sort', complexity: 'O(n\u00b2)' }\n];\n\n// Animation controller using useEffect for step-by-step visualization\nconst useAnimationController = (\n  isPlaying: boolean,\n  steps: AlgorithmStep[],\n  currentStep: number,\n  speed: number[],\n  onStepComplete: () => void,\n  onAnimationEnd: () => void\n) => {\n  const timeoutRef = useRef<NodeJS.Timeout | null>(null);\n\n  useEffect(() => {\n    if (isPlaying && currentStep < steps.length) {\n      const delay = 1000 - speed[0] * 9.5; // Convert speed (0-100) to delay (1000ms-50ms)\n      timeoutRef.current = setTimeout(() => {\n        onStepComplete();\n      }, delay);\n    } else if (isPlaying && currentStep >= steps.length) {\n      onAnimationEnd();\n    }\n\n    return () => {\n      if (timeoutRef.current) {\n        clearTimeout(timeoutRef.current);\n      }\n    };\n  }, [isPlaying, currentStep, steps.length, speed, onStepComplete, onAnimationEnd]);\n};\n\nexport default function AlgorithmVisualizer() {\n  const [array, setArray] = useState<ArrayElement[]>([]);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [speed, setSpeed] = useState([50]);\n  const [arraySize, setArraySize] = useState([20]);\n  const [selectedAlgorithm, setSelectedAlgorithm] = useState<AlgorithmType>('bubble');\n  const [currentStep, setCurrentStep] = useState(0);\n  const [steps, setSteps] = useState<AlgorithmStep[]>([]);\n\n  const generateRandomArray = useCallback(() => {\n    const newArray: ArrayElement[] = Array.from({ length: arraySize[0] }, (_, index) => ({\n      value: Math.floor(Math.random() * 100) + 5,\n      id: `element-${index}-${Date.now()}`,\n      isComparing: false,\n      isSwapping: false,\n      isSorted: false\n    }));\n    setArray(newArray);\n    setSteps([]);\n    setCurrentStep(0);\n    setIsPlaying(false);\n  }, [arraySize]);\n\n  const resetVisualization = useCallback(() => {\n\n    setIsPlaying(false);\n    setCurrentStep(0);\n    setSteps([]);\n    generateRandomArray();  }, [generateRandomArray]);\n\n  const startVisualization = useCallback(() => {\n    if (steps.length === 0) return;\n    if (currentStep >= steps.length) return;\n    \n    setIsPlaying(true);\n  }, [steps, speed, currentStep]);\n\n  const pauseVisualization = useCallback(() => {\n    setIsPlaying(false);\n\n  }, []);\n\n  const generateSortingSteps = useCallback((algorithm: AlgorithmType) => {\n    const arr = [...array];\n    const newSteps: AlgorithmStep[] = [];\n    \n    const addStep = (comparingIndices: number[] = [], swappingIndices: number[] = [], sortedIndices: number[] = []) => {\n      newSteps.push({\n        array: arr.map((el, idx) => ({\n          ...el,\n          isComparing: comparingIndices.includes(idx),\n          isSwapping: swappingIndices.includes(idx),\n          isSorted: sortedIndices.includes(idx)\n        })),\n        comparingIndices,\n        swappingIndices,\n        sortedIndices\n      });\n    };\n\n    if (algorithm === 'bubble') {\n      const sorted: number[] = [];\n      for (let i = 0; i < arr.length; i++) {\n        for (let j = 0; j < arr.length - i - 1; j++) {\n          addStep([j, j + 1], [], sorted);\n          if (arr[j].value > arr[j + 1].value) {\n            addStep([j, j + 1], [j, j + 1], sorted);\n            [arr[j], arr[j + 1]] = [arr[j + 1], arr[j]];\n            addStep([], [], sorted);\n          }\n        }\n        sorted.push(arr.length - i - 1);\n        addStep([], [], sorted);\n      }\n    } else if (algorithm === 'insertion') {\n      const sorted: number[] = [0];\n      addStep([], [], sorted);\n      for (let i = 1; i < arr.length; i++) {\n        let j = i;\n        addStep([j], [], sorted);\n        while (j > 0 && arr[j - 1].value > arr[j].value) {\n          addStep([j - 1, j], [], sorted);\n          addStep([j - 1, j], [j - 1, j], sorted);\n          [arr[j - 1], arr[j]] = [arr[j], arr[j - 1]];\n          j--;\n          addStep([], [], sorted);\n        }\n        sorted.push(i);\n        addStep([], [], sorted);\n      }\n    } else if (algorithm === 'quick') {\n      const sorted: number[] = [];\n      const quickSort = (low: number, high: number) => {\n        if (low < high) {\n          const pivotIdx = partition(low, high);\n          sorted.push(pivotIdx);\n          addStep([], [], sorted);\n          quickSort(low, pivotIdx - 1);\n          quickSort(pivotIdx + 1, high);\n        } else if (low === high) {\n          sorted.push(low);\n          addStep([], [], sorted);\n        }\n      };\n      \n      const partition = (low: number, high: number): number => {\n        const pivot = arr[high].value;\n        addStep([high], [], sorted);\n        let i = low - 1;\n        for (let j = low; j < high; j++) {\n          addStep([j, high], [], sorted);\n          if (arr[j].value < pivot) {\n            i++;\n            if (i !== j) {\n              addStep([i, j], [i, j], sorted);\n              [arr[i], arr[j]] = [arr[j], arr[i]];\n              addStep([], [], sorted);\n            }\n          }\n        }\n        addStep([i + 1, high], [i + 1, high], sorted);\n        [arr[i + 1], arr[high]] = [arr[high], arr[i + 1]];\n        addStep([], [], sorted);\n        return i + 1;\n      };\n      \n      quickSort(0, arr.length - 1);\n    } else if (algorithm === 'merge') {\n      const sorted: number[] = [];\n      const mergeSort = (left: number, right: number) => {\n        if (left < right) {\n          const mid = Math.floor((left + right) / 2);\n          mergeSort(left, mid);\n          mergeSort(mid + 1, right);\n          merge(left, mid, right);\n        }\n      };\n      \n      const merge = (left: number, mid: number, right: number) => {\n        const leftArr = arr.slice(left, mid + 1);\n        const rightArr = arr.slice(mid + 1, right + 1);\n        let i = 0, j = 0, k = left;\n        \n        while (i < leftArr.length && j < rightArr.length) {\n          addStep([left + i, mid + 1 + j], [], sorted);\n          if (leftArr[i].value <= rightArr[j].value) {\n            arr[k] = leftArr[i];\n            i++;\n          } else {\n            addStep([k, mid + 1 + j], [k, mid + 1 + j], sorted);\n            arr[k] = rightArr[j];\n            j++;\n          }\n          k++;\n          addStep([], [], sorted);\n        }\n        \n        while (i < leftArr.length) {\n          arr[k] = leftArr[i];\n          i++;\n          k++;\n        }\n        \n        while (j < rightArr.length) {\n          arr[k] = rightArr[j];\n          j++;\n          k++;\n        }\n        \n        for (let idx = left; idx <= right; idx++) {\n          if (!sorted.includes(idx)) sorted.push(idx);\n        }\n        addStep([], [], sorted);\n      };\n      \n      mergeSort(0, arr.length - 1);\n    }\n    \n    setSteps(newSteps);\n    setCurrentStep(0);\n  }, [array]);\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-gray-900 via-purple-900 to-gray-900 p-8\">\n      <div className=\"max-w-7xl mx-auto space-y-8\">\n        <motion.div\n          initial={{ opacity: 0, y: -20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.8 }}\n          className=\"text-center space-y-4\"\n        >\n          <motion.h1\n            className=\"text-6xl font-bold bg-gradient-to-r from-cyan-400 via-purple-400 to-pink-400 bg-clip-text text-transparent\"\n            animate={{\n              textShadow: [\n                '0 0 20px rgba(0, 255, 255, 0.5)',\n                '0 0 40px rgba(255, 0, 255, 0.5)',\n                '0 0 20px rgba(0, 255, 255, 0.5)'\n              ]\n            }}\n            transition={{ duration: 2, repeat: Infinity }}\n          >\n            Algorithm Visualizer\n          </motion.h1>\n          \n          <div className=\"flex items-center justify-center gap-4\">\n            <motion.div\n              initial={{ scale: 0 }}\n              animate={{ scale: 1 }}\n              transition={{ delay: 0.3, type: 'spring' }}\n              className=\"px-6 py-2 bg-purple-500/20 border border-purple-400/50 rounded-full backdrop-blur-sm\"\n            >\n              <span className=\"text-2xl font-semibold text-purple-300\">\n                {mockAlgorithms.find(a => a.id === selectedAlgorithm)?.name || 'Bubble Sort'}\n              </span>\n            </motion.div>\n            \n            <motion.div\n              initial={{ scale: 0 }}\n              animate={{ scale: 1 }}\n              transition={{ delay: 0.5, type: 'spring' }}\n              className=\"px-4 py-2 bg-cyan-500/20 border border-cyan-400/50 rounded-full backdrop-blur-sm relative overflow-hidden\"\n            >\n              <motion.div\n                className=\"absolute inset-0 bg-gradient-to-r from-transparent via-cyan-400/20 to-transparent\"\n                animate={{ x: ['-100%', '200%'] }}\n                transition={{ duration: 2, repeat: Infinity, ease: 'linear' }}\n              />\n              <div className=\"relative flex items-center gap-2\">\n                <Zap className=\"w-4 h-4 text-cyan-400\" />\n                <span className=\"text-lg font-mono text-cyan-300\">\n                  {mockAlgorithms.find(a => a.id === selectedAlgorithm)?.complexity || 'O(n\u00b2)'}\n                </span>\n              </div>\n            </motion.div>\n          </div>\n        </motion.div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-6\">\n          <div className=\"lg:col-span-1 space-y-6\">\n            <motion.div\n              initial={{ opacity: 0, x: -50 }}\n              animate={{ opacity: 1, x: 0 }}\n              className=\"bg-gray-900/50 backdrop-blur-lg border border-cyan-500/30 rounded-xl p-6 shadow-[0_0_30px_rgba(0,255,255,0.3)] hover:shadow-[0_0_50px_rgba(0,255,255,0.5)] transition-all duration-300\"\n            >\n              <div className=\"space-y-6\">\n                {/* Algorithm Selection */}\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center gap-2 text-cyan-400 font-semibold\">\n                    <Zap className=\"w-4 h-4\" />\n                    <span className=\"text-sm uppercase tracking-wider\">Algorithm</span>\n                  </div>\n                  <div className=\"grid grid-cols-1 gap-2\">\n                    {mockAlgorithms.map((algo) => (\n                      <motion.button\n                        key={algo.id}\n                        whileHover={{ scale: 1.02 }}\n                        whileTap={{ scale: 0.98 }}\n                        onClick={() => {\n                          setSelectedAlgorithm(algo.id as AlgorithmType);\n                          generateSortingSteps(algo.id as AlgorithmType);\n                        }}\n                        className={`p-3 rounded-lg border transition-all duration-300 text-left ${\n                          selectedAlgorithm === algo.id\n                            ? 'bg-cyan-500/20 border-cyan-400 shadow-[0_0_20px_rgba(0,255,255,0.4)]'\n                            : 'bg-gray-800/50 border-gray-700 hover:border-cyan-500/50'\n                        }`}\n                      >\n                        <div className=\"font-medium text-white\">{algo.name}</div>\n                        <div className=\"text-xs text-gray-400 mt-1\">{algo.complexity}</div>\n                      </motion.button>\n                    ))}\n                  </div>\n                </div>\n\n                {/* Array Size Control */}\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center gap-2 text-purple-400 font-semibold\">\n                      <BarChart3 className=\"w-4 h-4\" />\n                      <span className=\"text-sm uppercase tracking-wider\">Array Size</span>\n                    </div>\n                    <span className=\"text-white font-mono text-lg\">{arraySize[0]}</span>\n                  </div>\n                  <Slider\n                    value={arraySize}\n                    onValueChange={setArraySize}\n                    min={5}\n                    max={50}\n                    step={1}\n                    className=\"cursor-pointer\"\n                    disabled={isPlaying}\n                  />\n                </div>\n\n                {/* Speed Control */}\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center gap-2 text-pink-400 font-semibold\">\n                      <Zap className=\"w-4 h-4\" />\n                      <span className=\"text-sm uppercase tracking-wider\">Speed</span>\n                    </div>\n                    <span className=\"text-white font-mono text-lg\">{speed[0]}%</span>\n                  </div>\n                  <Slider\n                    value={speed}\n                    onValueChange={setSpeed}\n                    min={10}\n                    max={100}\n                    step={10}\n                    className=\"cursor-pointer\"\n                  />\n                </div>\n\n                {/* Control Buttons */}\n                <div className=\"space-y-3 pt-4 border-t border-gray-700\">\n                  <Button\n                    onClick={isPlaying ? pauseVisualization : startVisualization}\n                    disabled={steps.length === 0 || currentStep >= steps.length}\n                    className=\"w-full bg-gradient-to-r from-cyan-500 to-blue-500 hover:from-cyan-400 hover:to-blue-400 text-white font-semibold shadow-[0_0_20px_rgba(0,255,255,0.5)] hover:shadow-[0_0_30px_rgba(0,255,255,0.7)] transition-all duration-300\"\n                  >\n                    {isPlaying ? (\n                      <>\n                        <Pause className=\"w-4 h-4 mr-2\" />\n                        Pause\n                      </>\n                    ) : (\n                      <>\n                        <Play className=\"w-4 h-4 mr-2\" />\n                        {currentStep >= steps.length ? 'Completed' : 'Start'}\n                      </>\n                    )}\n                  </Button>\n\n                  <Button\n                    onClick={resetVisualization}\n                    variant=\"outline\"\n                    className=\"w-full border-purple-500/50 text-purple-400 hover:bg-purple-500/20 hover:border-purple-400 hover:text-purple-300 shadow-[0_0_15px_rgba(168,85,247,0.3)] hover:shadow-[0_0_25px_rgba(168,85,247,0.5)] transition-all duration-300\"\n                  >\n                    <RotateCcw className=\"w-4 h-4 mr-2\" />\n                    Reset\n                  </Button>\n\n                  <Button\n                    onClick={generateRandomArray}\n                    disabled={isPlaying}\n                    variant=\"outline\"\n                    className=\"w-full border-pink-500/50 text-pink-400 hover:bg-pink-500/20 hover:border-pink-400 hover:text-pink-300 shadow-[0_0_15px_rgba(236,72,153,0.3)] hover:shadow-[0_0_25px_rgba(236,72,153,0.5)] transition-all duration-300\"\n                  >\n                    <BarChart3 className=\"w-4 h-4 mr-2\" />\n                    New Array\n                  </Button>\n                </div>\n\n                {/* Progress Indicator */}\n                {steps.length > 0 && (\n                  <div className=\"space-y-2 pt-4 border-t border-gray-700\">\n                    <div className=\"flex items-center justify-between text-xs text-gray-400\">\n                      <span>Progress</span>\n                      <span className=\"font-mono\">\n                        {currentStep} / {steps.length}\n                      </span>\n                    </div>\n                    <div className=\"h-2 bg-gray-800 rounded-full overflow-hidden\">\n                      <motion.div\n                        className=\"h-full bg-gradient-to-r from-cyan-500 via-purple-500 to-pink-500 shadow-[0_0_10px_rgba(0,255,255,0.5)]\"\n                        initial={{ width: 0 }}\n                        animate={{\n                          width: `${(currentStep / steps.length) * 100}%`\n                        }}\n                        transition={{ duration: 0.3 }}\n                      />\n                    </div>\n                  </div>\n                )}\n              </div>\n            </motion.div>\n            \n            <div className=\"bg-gray-900/50 backdrop-blur-lg border border-cyan-500/30 rounded-xl p-6 shadow-2xl shadow-cyan-500/20\">\n              <div className=\"space-y-6\">\n                <div>\n                  <h3 className=\"text-sm font-semibold text-cyan-400 mb-3 flex items-center gap-2\">\n                    <Zap className=\"w-4 h-4\" />\n                    Algorithm\n                  </h3>\n                  <div className=\"grid grid-cols-1 gap-2\">\n                    {mockAlgorithms.map((algo) => (\n                      <motion.button\n                        key={algo.id}\n                        onClick={() => setSelectedAlgorithm(algo.id as AlgorithmType)}\n                        className={`relative p-3 rounded-lg border transition-all duration-300 text-left ${\n                          selectedAlgorithm === algo.id\n                            ? 'bg-cyan-500/20 border-cyan-400 shadow-lg shadow-cyan-500/50'\n                            : 'bg-gray-800/50 border-gray-700 hover:border-cyan-500/50 hover:shadow-md hover:shadow-cyan-500/30'\n                        }`}\n                        whileHover={{ scale: 1.02 }}\n                        whileTap={{ scale: 0.98 }}\n                      >\n                        <div className=\"flex flex-col gap-1\">\n                          <span className={`text-sm font-medium ${\n                            selectedAlgorithm === algo.id ? 'text-cyan-300' : 'text-gray-300'\n                          }`}>\n                            {algo.name}\n                          </span>\n                          <span className={`text-xs ${\n                            selectedAlgorithm === algo.id ? 'text-cyan-400/80' : 'text-gray-500'\n                          }`}>\n                            {algo.complexity}\n                          </span>\n                        </div>\n                        {selectedAlgorithm === algo.id && (\n                          <motion.div\n                            className=\"absolute inset-0 rounded-lg border-2 border-cyan-400\"\n                            layoutId=\"algorithmSelector\"\n                            transition={{ type: \"spring\", stiffness: 300, damping: 30 }}\n                          />\n                        )}\n                      </motion.button>\n                    ))}\n                  </div>\n                </div></parameter>\n</invoke>\n\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <label className=\"text-cyan-400 text-sm font-medium flex items-center gap-2\">\n                      <Zap className=\"w-4 h-4\" />\n                      Speed\n                    </label>\n                    <span className=\"text-cyan-300 text-xs\">{speed[0]}ms</span>\n                  </div>\n                  <Slider\n                    value={speed}\n                    onValueChange={setSpeed}\n                    min={10}\n                    max={200}\n                    step={10}\n                    className=\"[&_[role=slider]]:bg-cyan-400 [&_[role=slider]]:border-cyan-300 [&_[role=slider]]:shadow-[0_0_15px_rgba(34,211,238,0.8)] [&_[role=slider]]:hover:shadow-[0_0_25px_rgba(34,211,238,1)] [&_[role=slider]]:transition-shadow [&_.relative]:bg-gray-700/50 [&_.relative]:border [&_.relative]:border-cyan-500/30 [&_.bg-primary]:bg-gradient-to-r [&_.bg-primary]:from-cyan-500 [&_.bg-primary]:to-purple-500 [&_.bg-primary]:shadow-[0_0_10px_rgba(34,211,238,0.5)]\"\n                  />\n                </div>\n\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <label className=\"text-cyan-400 text-sm font-medium flex items-center gap-2\">\n                      <BarChart3 className=\"w-4 h-4\" />\n                      Array Size\n                    </label>\n                    <span className=\"text-cyan-300 text-xs\">{arraySize[0]}</span>\n                  </div>\n                  <Slider\n                    value={arraySize}\n                    onValueChange={setArraySize}\n                    min={5}\n                    max={100}\n                    step={1}\n                    className=\"[&_[role=slider]]:bg-gradient-to-r [&_[role=slider]]:from-purple-500 [&_[role=slider]]:to-pink-500 [&_[role=slider]]:border-2 [&_[role=slider]]:border-purple-300 [&_[role=slider]]:shadow-lg [&_[role=slider]]:shadow-purple-500/50 [&_[role=slider]]:transition-all [&_[role=slider]]:hover:shadow-purple-400/70 [&_[role=slider]]:hover:scale-110 [&>span]:bg-gradient-to-r [&>span]:from-purple-500/30 [&>span]:to-pink-500/30 [&>span]:h-2\"\n                  />\n                </div>\n\n                <div className=\"flex gap-3 pt-4\">\n                  <motion.div className=\"relative flex-1\">\n                    <Button\n                      onClick={isPlaying ? pauseVisualization : startVisualization}\n                      disabled={array.length === 0 || (steps.length === 0 && !isPlaying)}\n                      className=\"w-full bg-gradient-to-r from-cyan-500 to-purple-500 hover:from-cyan-400 hover:to-purple-400 text-white font-semibold py-6 rounded-lg shadow-lg relative overflow-hidden group disabled:opacity-50 disabled:cursor-not-allowed\"\n                    >\n                      <motion.div\n                        className=\"absolute inset-0 bg-gradient-to-r from-cyan-400 to-purple-400 opacity-0 group-hover:opacity-100 blur-xl\"\n                        animate={{\n                          opacity: isPlaying ? [0.5, 0.8, 0.5] : 0\n                        }}\n                        transition={{\n                          duration: 2,\n                          repeat: isPlaying ? Infinity : 0,\n                          ease: \"easeInOut\"\n                        }}\n                      />\n                      \n                      <motion.div\n                        className=\"relative flex items-center justify-center gap-2\"\n                        whileHover={{ scale: 1.05 }}\n                        whileTap={{ scale: 0.95 }}\n                      >\n                        <motion.div\n                          animate={{\n                            rotate: isPlaying ? 0 : 0,\n                            scale: isPlaying ? 1 : 1\n                          }}\n                          transition={{ duration: 0.3 }}\n                        >\n                          {isPlaying ? (\n                            <motion.div\n                              initial={{ scale: 0, rotate: -180 }}\n                              animate={{ scale: 1, rotate: 0 }}\n                              exit={{ scale: 0, rotate: 180 }}\n                              transition={{ duration: 0.3 }}\n                            >\n                              <Pause className=\"w-5 h-5\" />\n                            </motion.div>\n                          ) : (\n                            <motion.div\n                              initial={{ scale: 0, rotate: -180 }}\n                              animate={{ scale: 1, rotate: 0 }}\n                              exit={{ scale: 0, rotate: 180 }}\n                              transition={{ duration: 0.3 }}\n                            >\n                              <Play className=\"w-5 h-5\" />\n                            </motion.div>\n                          )}\n                        </motion.div>\n                        \n                        <span className=\"text-sm font-bold tracking-wider\">\n                          {isPlaying ? 'PAUSE' : 'PLAY'}\n                        </span>\n                      </motion.div>\n                      \n                      <motion.div\n                        className=\"absolute inset-0 rounded-lg\"\n                        style={{\n                          boxShadow: isPlaying \n                            ? '0 0 20px rgba(0, 255, 255, 0.6), 0 0 40px rgba(168, 85, 247, 0.4)'\n                            : '0 0 10px rgba(0, 255, 255, 0.3)'\n                        }}\n                        animate={{\n                          boxShadow: isPlaying\n                            ? [\n                                '0 0 20px rgba(0, 255, 255, 0.6), 0 0 40px rgba(168, 85, 247, 0.4)',\n                                '0 0 30px rgba(168, 85, 247, 0.6), 0 0 50px rgba(0, 255, 255, 0.4)',\n                                '0 0 20px rgba(0, 255, 255, 0.6), 0 0 40px rgba(168, 85, 247, 0.4)'\n                              ]\n                            : '0 0 10px rgba(0, 255, 255, 0.3)'\n                        }}\n                        transition={{\n                          duration: 2,\n                          repeat: isPlaying ? Infinity : 0,\n                          ease: \"easeInOut\"\n                        }}\n                      />\n                    </Button>\n                  </motion.div>\n                  <motion.div className=\"relative flex-1\">\n                    <Button\n                      onClick={resetVisualization}\n                      variant=\"outline\"\n                      className=\"w-full bg-pink-500/10 border-pink-400/50 text-pink-300 hover:bg-pink-500/20 hover:border-pink-400 hover:shadow-[0_0_30px_rgba(236,72,153,0.6)] transition-all duration-300 relative overflow-hidden group\"\n                      whileHover={{ scale: 1.05 }}\n                      whileTap={{ scale: 0.95, rotate: -180 }}\n                      transition={{ type: \"spring\", stiffness: 300, damping: 20 }}\n                    >\n                      <motion.div\n                        className=\"absolute inset-0 bg-gradient-to-r from-transparent via-pink-400/30 to-transparent\"\n                        animate={{ x: ['-100%', '200%'] }}\n                        transition={{ duration: 3, repeat: Infinity, ease: 'linear' }}\n                      />\n                      <motion.div\n                        className=\"relative flex items-center justify-center gap-2\"\n                        whileHover={{ rotate: 360 }}\n                        transition={{ duration: 0.6 }}\n                      >\n                        <RotateCcw className=\"w-4 h-4\" />\n                        <span className=\"font-semibold\">Reset</span>\n                      </motion.div>\n                      <motion.div\n                        className=\"absolute inset-0 rounded-md\"\n                        animate={{\n                          boxShadow: [\n                            '0 0 20px rgba(236,72,153,0.3)',\n                            '0 0 40px rgba(236,72,153,0.6)',\n                            '0 0 20px rgba(236,72,153,0.3)'\n                          ]\n                        }}\n                        transition={{ duration: 2, repeat: Infinity }}\n                      />\n                    </Button>\n                  </motion.div>\n                </div>\n              </div>\n            </div>\n\n            <motion.div\n            initial={{ opacity: 0, x: -50 }}\n            animate={{ opacity: 1, x: 0 }}\n            transition={{ delay: 0.2 }}\n            className=\"bg-gray-900/50 backdrop-blur-lg border border-purple-500/30 rounded-xl p-6 shadow-[0_0_30px_rgba(168,85,247,0.3)] hover:shadow-[0_0_50px_rgba(168,85,247,0.5)] transition-all duration-300\"\n          >\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center gap-2 text-purple-400 font-semibold mb-4\">\n                <BarChart3 className=\"w-5 h-5\" />\n                <span className=\"text-sm uppercase tracking-wider\">Statistics</span>\n              </div>\n\n              <div className=\"space-y-3\">\n                {/* Progress */}\n                <motion.div\n                  className=\"p-4 bg-gradient-to-br from-cyan-500/10 to-purple-500/10 border border-cyan-400/30 rounded-lg relative overflow-hidden\"\n                  whileHover={{ scale: 1.02 }}\n                  transition={{ type: 'spring', stiffness: 300 }}\n                >\n                  <motion.div\n                    className=\"absolute inset-0 bg-gradient-to-r from-transparent via-cyan-400/10 to-transparent\"\n                    animate={{ x: ['-100%', '200%'] }}\n                    transition={{ duration: 3, repeat: Infinity, ease: 'linear' }}\n                  />\n                  <div className=\"relative\">\n                    <div className=\"text-xs text-cyan-300 uppercase tracking-wider mb-2\">Progress</div>\n                    <div className=\"flex items-baseline gap-2\">\n                      <motion.span\n                        className=\"text-3xl font-bold bg-gradient-to-r from-cyan-400 to-purple-400 bg-clip-text text-transparent\"\n                        key={currentStep}\n                        initial={{ scale: 1.2, opacity: 0 }}\n                        animate={{ scale: 1, opacity: 1 }}\n                        transition={{ type: 'spring', stiffness: 200 }}\n                      >\n                        {steps.length > 0 ? Math.round((currentStep / steps.length) * 100) : 0}%\n                      </motion.span>\n                      <span className=\"text-sm text-gray-400\">\n                        ({currentStep} / {steps.length})\n                      </span>\n                    </div>\n                  </div>\n                </motion.div>\n\n                {/* Comparisons */}\n                <motion.div\n                  className=\"p-4 bg-gradient-to-br from-pink-500/10 to-orange-500/10 border border-pink-400/30 rounded-lg relative overflow-hidden group\"\n                  whileHover={{ scale: 1.02 }}\n                  transition={{ type: 'spring', stiffness: 300 }}\n                >\n                  <div className=\"absolute inset-0 bg-pink-500/5 opacity-0 group-hover:opacity-100 transition-opacity duration-300\" />\n                  <div className=\"relative\">\n                    <div className=\"text-xs text-pink-300 uppercase tracking-wider mb-2\">Comparisons</div>\n                    <motion.div\n                      className=\"text-3xl font-bold text-pink-400 font-mono\"\n                      key={`comp-${currentStep}`}\n                      initial={{ y: -10, opacity: 0 }}\n                      animate={{ y: 0, opacity: 1 }}\n                      transition={{ type: 'spring', stiffness: 200 }}\n                    >\n                      {steps.slice(0, currentStep).filter(step => step.comparingIndices.length > 0).length}\n                    </motion.div>\n                    <div className=\"mt-2 h-1 bg-gray-800 rounded-full overflow-hidden\">\n                      <motion.div\n                        className=\"h-full bg-gradient-to-r from-pink-500 to-orange-500 shadow-[0_0_10px_rgba(236,72,153,0.8)]\"\n                        initial={{ width: 0 }}\n                        animate={{\n                          width: steps.length > 0\n                            ? `${(steps.slice(0, currentStep).filter(step => step.comparingIndices.length > 0).length / steps.length) * 100}%`\n                            : '0%'\n                        }}\n                        transition={{ duration: 0.3 }}\n                      />\n                    </div>\n                  </div>\n                </motion.div>\n\n                {/* Swaps */}\n                <motion.div\n                  className=\"p-4 bg-gradient-to-br from-green-500/10 to-emerald-500/10 border border-green-400/30 rounded-lg relative overflow-hidden group\"\n                  whileHover={{ scale: 1.02 }}\n                  transition={{ type: 'spring', stiffness: 300 }}\n                >\n                  <div className=\"absolute inset-0 bg-green-500/5 opacity-0 group-hover:opacity-100 transition-opacity duration-300\" />\n                  <div className=\"relative\">\n                    <div className=\"text-xs text-green-300 uppercase tracking-wider mb-2\">Swaps</div>\n                    <motion.div\n                      className=\"text-3xl font-bold text-green-400 font-mono\"\n                      key={`swap-${currentStep}`}\n                      initial={{ y: -10, opacity: 0 }}\n                      animate={{ y: 0, opacity: 1 }}\n                      transition={{ type: 'spring', stiffness: 200 }}\n                    >\n                      {steps.slice(0, currentStep).filter(step => step.swappingIndices.length > 0).length}\n                    </motion.div>\n                    <div className=\"mt-2 h-1 bg-gray-800 rounded-full overflow-hidden\">\n                      <motion.div\n                        className=\"h-full bg-gradient-to-r from-green-500 to-emerald-500 shadow-[0_0_10px_rgba(34,197,94,0.8)]\"\n                        initial={{ width: 0 }}\n                        animate={{\n                          width: steps.length > 0\n                            ? `${(steps.slice(0, currentStep).filter(step => step.swappingIndices.length > 0).length / steps.length) * 100}%`\n                            : '0%'\n                        }}\n                        transition={{ duration: 0.3 }}\n                      />\n                    </div>\n                  </div>\n                </motion.div>\n\n                {/* Sorted Elements */}\n                <motion.div\n                  className=\"p-4 bg-gradient-to-br from-yellow-500/10 to-amber-500/10 border border-yellow-400/30 rounded-lg relative overflow-hidden group\"\n                  whileHover={{ scale: 1.02 }}\n                  transition={{ type: 'spring', stiffness: 300 }}\n                >\n                  <div className=\"absolute inset-0 bg-yellow-500/5 opacity-0 group-hover:opacity-100 transition-opacity duration-300\" />\n                  <div className=\"relative\">\n                    <div className=\"text-xs text-yellow-300 uppercase tracking-wider mb-2\">Sorted Elements</div>\n                    <div className=\"flex items-baseline gap-2\">\n                      <motion.span\n                        className=\"text-3xl font-bold text-yellow-400 font-mono\"\n                        key={`sorted-${currentStep}`}\n                        initial={{ scale: 1.2, opacity: 0 }}\n                        animate={{ scale: 1, opacity: 1 }}\n                        transition={{ type: 'spring', stiffness: 200 }}\n                      >\n                        {currentStep > 0 && steps[currentStep - 1] ? steps[currentStep - 1].sortedIndices.length : 0}\n                      </motion.span>\n                      <span className=\"text-sm text-gray-400\">\n                        / {array.length}\n                      </span>\n                    </div>\n                    <div className=\"mt-2 h-1 bg-gray-800 rounded-full overflow-hidden\">\n                      <motion.div\n                        className=\"h-full bg-gradient-to-r from-yellow-500 to-amber-500 shadow-[0_0_10px_rgba(234,179,8,0.8)]\"\n                        initial={{ width: 0 }}\n                        animate={{\n                          width: array.length > 0 && currentStep > 0 && steps[currentStep - 1]\n                            ? `${(steps[currentStep - 1].sortedIndices.length / array.length) * 100}%`\n                            : '0%'\n                        }}\n                        transition={{ duration: 0.3 }}\n                      />\n                    </div>\n                  </div>\n                </motion.div>\n\n                {/* Status Indicator */}\n                <motion.div\n                  className=\"p-4 bg-gray-800/50 border border-gray-700 rounded-lg\"\n                  animate={{\n                    borderColor: isPlaying\n                      ? ['rgba(34, 197, 94, 0.5)', 'rgba(34, 197, 94, 0.8)', 'rgba(34, 197, 94, 0.5)']\n                      : 'rgba(107, 114, 128, 1)'\n                  }}\n                  transition={{ duration: 2, repeat: Infinity }}\n                >\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-xs text-gray-400 uppercase tracking-wider\">Status</span>\n                    <div className=\"flex items-center gap-2\">\n                      <motion.div\n                        className={`w-2 h-2 rounded-full ${isPlaying ? 'bg-green-400' : 'bg-gray-500'}`}\n                        animate={{\n                          boxShadow: isPlaying\n                            ? [\n                                '0 0 5px rgba(34, 197, 94, 0.8)',\n                                '0 0 15px rgba(34, 197, 94, 1)',\n                                '0 0 5px rgba(34, 197, 94, 0.8)'\n                              ]\n                            : '0 0 0px rgba(107, 114, 128, 0)'\n                        }}\n                        transition={{ duration: 1.5, repeat: Infinity }}\n                      />\n                      <span className={`text-sm font-medium ${isPlaying ? 'text-green-400' : 'text-gray-400'}`}>\n                        {isPlaying ? 'Running' : currentStep >= steps.length && steps.length > 0 ? 'Completed' : 'Idle'}\n                      </span>\n                    </div>\n                  </div>\n                </motion.div>\n              </div>\n            </div>\n          </motion.div>\n          </div>\n\n          <div className=\"lg:col-span-3\">\n            <div className=\"bg-gray-900/50 backdrop-blur-lg border border-purple-500/30 rounded-xl p-8 shadow-2xl shadow-purple-500/20 min-h-[600px]\">\n                            {array.length === 0 ? (\n                <motion.div\n                  initial={{ opacity: 0, scale: 0.8 }}\n                  animate={{ opacity: 1, scale: 1 }}\n                  className=\"absolute inset-0 flex flex-col items-center justify-center gap-6\"\n                >\n                  <motion.div\n                    animate={{\n                      boxShadow: [\n                        '0 0 20px rgba(0, 255, 255, 0.3)',\n                        '0 0 40px rgba(255, 0, 255, 0.5)',\n                        '0 0 20px rgba(0, 255, 255, 0.3)'\n                      ]\n                    }}\n                    transition={{ duration: 2, repeat: Infinity }}\n                    className=\"p-8 rounded-full bg-gradient-to-br from-cyan-500/20 to-purple-500/20 border border-cyan-400/50\"\n                  >\n                    <BarChart3 className=\"w-16 h-16 text-cyan-400\" />\n                  </motion.div>\n                  <div className=\"text-center space-y-2\">\n                    <h3 className=\"text-2xl font-bold text-cyan-300\">Ready to Visualize</h3>\n                    <p className=\"text-gray-400\">Generate an array to begin sorting</p>\n                  </div>\n                </motion.div>\n              ) : (\n                <div className=\"relative w-full h-full flex items-end justify-center gap-1 px-4\">\n                  {array.map((element, index) => {\n                    const isComparing = steps[currentStep]?.comparingIndices.includes(index);\n                    const isSwapping = steps[currentStep]?.swappingIndices.includes(index);\n                    const isSorted = steps[currentStep]?.sortedIndices.includes(index);\n                    \n                    const maxValue = Math.max(...array.map(el => el.value));\n                    const heightPercentage = (element.value / maxValue) * 100;\n                    \n                    let barColor = NEON_COLORS[index % NEON_COLORS.length];\n                    let glowColor = barColor;\n                    let glowIntensity = 0.3;\n                    \n                    if (isSorted) {\n                      barColor = '#00ff00';\n                      glowColor = '#00ff00';\n                      glowIntensity = 0.6;\n                    } else if (isSwapping) {\n                      barColor = '#ff0066';\n                      glowColor = '#ff0066';\n                      glowIntensity = 0.8;\n                    } else if (isComparing) {\n                      barColor = '#ffff00';\n                      glowColor = '#ffff00';\n                      glowIntensity = 0.7;\n                    }\n                    \n                    return (\n                      <motion.div\n                        key={element.id}\n                        className=\"relative flex-1 min-w-[4px] max-w-[60px] group\"\n                        layout\n                        initial={{ opacity: 0, y: 50 }}\n                        animate={{\n                          opacity: 1,\n                          y: 0,\n                          scale: isSwapping ? 1.1 : isComparing ? 1.05 : 1\n                        }}\n                        transition={{\n                          layout: { duration: 0.3, ease: 'easeInOut' },\n                          scale: { duration: 0.2 }\n                        }}\n                      >\n                        {/* Swap Trail Effect */}\n                        {isSwapping && (\n                          <motion.div\n                            className=\"absolute inset-0 rounded-t-lg\"\n                            style={{\n                              background: `linear-gradient(to top, transparent, ${barColor})`,\n                              filter: 'blur(10px)'\n                            }}\n                            animate={{\n                              opacity: [0.3, 0.8, 0.3],\n                              scale: [1, 1.2, 1]\n                            }}\n                            transition={{\n                              duration: 0.5,\n                              repeat: Infinity\n                            }}\n                          />\n                        )}\n                        \n                        {/* Main Bar */}\n                        <motion.div\n                          className=\"relative w-full rounded-t-lg overflow-hidden\"\n                          style={{\n                            height: `${heightPercentage}%`,\n                            minHeight: '20px',\n                            backgroundColor: barColor,\n                            boxShadow: `\n                              0 0 ${glowIntensity * 20}px ${glowColor},\n                              0 0 ${glowIntensity * 40}px ${glowColor},\n                              inset 0 0 ${glowIntensity * 10}px rgba(255, 255, 255, 0.3)\n                            `\n                          }}\n                          animate={{\n                            height: `${heightPercentage}%`,\n                            backgroundColor: barColor,\n                            boxShadow: `\n                              0 0 ${glowIntensity * 20}px ${glowColor},\n                              0 0 ${glowIntensity * 40}px ${glowColor},\n                              inset 0 0 ${glowIntensity * 10}px rgba(255, 255, 255, 0.3)\n                            `\n                          }}\n                          transition={{\n                            height: { duration: 0.3, ease: 'easeInOut' },\n                            backgroundColor: { duration: 0.2 },\n                            boxShadow: { duration: 0.2 }\n                          }}\n                        >\n                          {/* Shimmer Effect */}\n                          <motion.div\n                            className=\"absolute inset-0 bg-gradient-to-r from-transparent via-white/30 to-transparent\"\n                            animate={{\n                              x: ['-100%', '200%']\n                            }}\n                            transition={{\n                              duration: 2,\n                              repeat: Infinity,\n                              ease: 'linear',\n                              repeatDelay: 1\n                            }}\n                          />\n                          \n                          {/* Value Label */}\n                          {array.length <= 30 && (\n                            <motion.div\n                              className=\"absolute inset-0 flex items-center justify-center\"\n                              initial={{ opacity: 0 }}\n                              animate={{ opacity: 1 }}\n                              transition={{ delay: 0.2 }}\n                            >\n                              <span\n                                className=\"text-xs font-bold text-white drop-shadow-[0_2px_4px_rgba(0,0,0,0.8)]\"\n                                style={{\n                                  writingMode: heightPercentage > 30 ? 'horizontal-tb' : 'vertical-rl',\n                                  transform: heightPercentage > 30 ? 'none' : 'rotate(180deg)'\n                                }}\n                              >\n                                {element.value}\n                              </span>\n                            </motion.div>\n                          )}\n                        </motion.div>\n                        \n                        {/* Comparison Indicator */}\n                        {isComparing && (\n                          <motion.div\n                            className=\"absolute -top-8 left-1/2 transform -translate-x-1/2\"\n                            initial={{ opacity: 0, y: 10 }}\n                            animate={{ opacity: 1, y: 0 }}\n                            exit={{ opacity: 0 }}\n                          >\n                            <motion.div\n                              className=\"w-6 h-6 rounded-full bg-yellow-400 border-2 border-yellow-300\"\n                              animate={{\n                                boxShadow: [\n                                  '0 0 10px rgba(255, 255, 0, 0.5)',\n                                  '0 0 20px rgba(255, 255, 0, 0.8)',\n                                  '0 0 10px rgba(255, 255, 0, 0.5)'\n                                ],\n                                scale: [1, 1.2, 1]\n                              }}\n                              transition={{\n                                duration: 0.6,\n                                repeat: Infinity\n                              }}\n                            />\n                          </motion.div>\n                        )}\n                        \n                        {/* Swap Indicator */}\n                        {isSwapping && (\n                          <motion.div\n                            className=\"absolute -top-10 left-1/2 transform -translate-x-1/2\"\n                            initial={{ opacity: 0, scale: 0 }}\n                            animate={{ opacity: 1, scale: 1, rotate: 360 }}\n                            exit={{ opacity: 0, scale: 0 }}\n                            transition={{ duration: 0.4 }}\n                          >\n                            <motion.div\n                              className=\"relative\"\n                              animate={{\n                                y: [0, -5, 0]\n                              }}\n                              transition={{\n                                duration: 0.5,\n                                repeat: Infinity\n                              }}\n                            >\n                              <RotateCcw className=\"w-5 h-5 text-pink-400\" />\n                              <motion.div\n                                className=\"absolute inset-0 rounded-full\"\n                                animate={{\n                                  boxShadow: [\n                                    '0 0 10px rgba(255, 0, 102, 0.5)',\n                                    '0 0 25px rgba(255, 0, 102, 0.9)',\n                                    '0 0 10px rgba(255, 0, 102, 0.5)'\n                                  ]\n                                }}\n                                transition={{\n                                  duration: 0.5,\n                                  repeat: Infinity\n                                }}\n                              />\n                            </motion.div>\n                          </motion.div>\n                        )}\n                        \n                        {/* Sorted Checkmark */}\n                        {isSorted && (\n                          <motion.div\n                            className=\"absolute -top-8 left-1/2 transform -translate-x-1/2\"\n                            initial={{ opacity: 0, scale: 0, rotate: -180 }}\n                            animate={{ opacity: 1, scale: 1, rotate: 0 }}\n                            transition={{ type: 'spring', stiffness: 200, damping: 10 }}\n                          >\n                            <motion.div\n                              className=\"w-6 h-6 rounded-full bg-green-400 border-2 border-green-300 flex items-center justify-center\"\n                              animate={{\n                                boxShadow: [\n                                  '0 0 10px rgba(0, 255, 0, 0.5)',\n                                  '0 0 20px rgba(0, 255, 0, 0.8)',\n                                  '0 0 10px rgba(0, 255, 0, 0.5)'\n                                ]\n                              }}\n                              transition={{\n                                duration: 1,\n                                repeat: Infinity\n                              }}\n                            >\n                              <svg\n                                className=\"w-4 h-4 text-gray-900\"\n                                fill=\"none\"\n                                strokeLinecap=\"round\"\n                                strokeLinejoin=\"round\"\n                                strokeWidth=\"3\"\n                                viewBox=\"0 0 24 24\"\n                                stroke=\"currentColor\"\n                              >\n                                <path d=\"M5 13l4 4L19 7\" />\n                              </svg>\n                            </motion.div>\n                          </motion.div>\n                        )}\n                        \n                        {/* Hover Tooltip */}\n                        <div className=\"absolute -bottom-8 left-1/2 transform -translate-x-1/2 opacity-0 group-hover:opacity-100 transition-opacity duration-200 pointer-events-none\">\n                          <div className=\"bg-gray-900 border border-cyan-400/50 rounded px-2 py-1 text-xs text-cyan-300 whitespace-nowrap shadow-lg\">\n                            Index: {index}\n                          </div>\n                        </div>\n                      </motion.div>\n                    );\n                  })}\n                </div>\n              )}\n              \n              <div className=\"relative h-full flex items-end justify-center gap-1\">\n                {array.map((element, index) => {\n                  const currentStepData = steps[currentStep];\n                  const isComparing = currentStepData?.comparingIndices.includes(index);\n                  const isSwapping = currentStepData?.swappingIndices.includes(index);\n                  const isSorted = currentStepData?.sortedIndices.includes(index);\n                  \n                  const barColor = isSorted \n                    ? '#00ff00' \n                    : isSwapping \n                    ? '#ff0066' \n                    : isComparing \n                    ? '#ffff00' \n                    : NEON_COLORS[index % NEON_COLORS.length];\n\n                  const maxHeight = 500;\n                  const barHeight = (element.value / 100) * maxHeight;\n\n                  return (\n                    <motion.div\n                      key={element.id}\n                      className=\"relative flex-1 min-w-[4px] max-w-[60px] rounded-t-lg\"\n                      initial={{ height: 0, opacity: 0 }}\n                      animate={{\n                        height: barHeight,\n                        opacity: 1,\n                        scale: isComparing || isSwapping ? 1.05 : 1,\n                        y: isSwapping ? -10 : 0\n                      }}\n                      transition={{\n                        height: { duration: 0.5, ease: 'easeOut' },\n                        scale: { duration: 0.2 },\n                        y: { duration: 0.3, type: 'spring' }\n                      }}\n                      style={{\n                        backgroundColor: barColor,\n                        boxShadow: `\n                          0 0 ${isComparing ? '30px' : isSwapping ? '40px' : '15px'} ${barColor},\n                          0 0 ${isComparing ? '60px' : isSwapping ? '80px' : '30px'} ${barColor}80,\n                          inset 0 0 20px ${barColor}40\n                        `\n                      }}\n                    >\n                      {/* Glow effect overlay */}\n                      <motion.div\n                        className=\"absolute inset-0 rounded-t-lg\"\n                        animate={{\n                          opacity: isComparing || isSwapping ? [0.3, 0.7, 0.3] : 0.2\n                        }}\n                        transition={{\n                          duration: 0.8,\n                          repeat: isComparing || isSwapping ? Infinity : 0\n                        }}\n                        style={{\n                          background: `linear-gradient(to top, transparent, ${barColor}60)`\n                        }}\n                      />\n\n                      {/* Swap trail effect */}\n                      {isSwapping && (\n                        <motion.div\n                          className=\"absolute inset-0 rounded-t-lg\"\n                          initial={{ opacity: 0, scale: 1 }}\n                          animate={{ \n                            opacity: [0.8, 0],\n                            scale: [1, 1.3]\n                          }}\n                          transition={{\n                            duration: 0.6,\n                            repeat: Infinity\n                          }}\n                          style={{\n                            border: `2px solid ${barColor}`,\n                            boxShadow: `0 0 20px ${barColor}`\n                          }}\n                        />\n                      )}\n\n                      {/* Value label */}\n                      {arraySize[0] <= 30 && (\n                        <motion.div\n                          className=\"absolute -bottom-6 left-1/2 transform -translate-x-1/2 text-xs font-mono font-bold whitespace-nowrap\"\n                          initial={{ opacity: 0 }}\n                          animate={{ opacity: 1 }}\n                          style={{\n                            color: barColor,\n                            textShadow: `0 0 10px ${barColor}`\n                          }}\n                        >\n                          {element.value}\n                        </motion.div>\n                      )}\n\n                      {/* Comparison indicator */}\n                      {isComparing && (\n                        <motion.div\n                          className=\"absolute -top-8 left-1/2 transform -translate-x-1/2\"\n                          initial={{ opacity: 0, y: 10 }}\n                          animate={{ \n                            opacity: [0.5, 1, 0.5],\n                            y: [-5, -10, -5]\n                          }}\n                          transition={{\n                            duration: 0.8,\n                            repeat: Infinity\n                          }}\n                        >\n                          <div \n                            className=\"w-3 h-3 rounded-full\"\n                            style={{\n                              backgroundColor: '#ffff00',\n                              boxShadow: '0 0 15px #ffff00, 0 0 30px #ffff00'\n                            }}\n                          />\n                        </motion.div>\n                      )}\n\n                      {/* Sorted checkmark */}\n                      {isSorted && (\n                        <motion.div\n                          className=\"absolute -top-8 left-1/2 transform -translate-x-1/2\"\n                          initial={{ scale: 0, rotate: -180 }}\n                          animate={{ scale: 1, rotate: 0 }}\n                          transition={{ type: 'spring', stiffness: 200 }}\n                        >\n                          <div \n                            className=\"w-4 h-4 rounded-full flex items-center justify-center text-xs\"\n                            style={{\n                              backgroundColor: '#00ff00',\n                              boxShadow: '0 0 20px #00ff00',\n                              color: '#000'\n                            }}\n                          >\n                            \u2713\n                          </div>\n                        </motion.div>\n                      )}\n                    </motion.div>\n                  );\n                })}\n              </div>\n            </div>\n\n                        <motion.div\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ delay: 0.3 }}\n              className=\"mt-6 space-y-3\"\n            >\n              <div className=\"flex items-center justify-between text-sm\">\n                <span className=\"text-purple-400 font-semibold uppercase tracking-wider\">\n                  Sorting Progress\n                </span>\n                <span className=\"text-cyan-300 font-mono text-lg\">\n                  {steps.length > 0 ? Math.round((currentStep / steps.length) * 100) : 0}%\n                </span>\n              </div>\n              \n              <div className=\"relative h-4 bg-gray-800/50 rounded-full border border-purple-500/30 overflow-hidden shadow-inner\">\n                <motion.div\n                  className=\"absolute inset-y-0 left-0 bg-gradient-to-r from-cyan-500 via-purple-500 to-pink-500 rounded-full\"\n                  initial={{ width: '0%' }}\n                  animate={{ \n                    width: steps.length > 0 ? `${(currentStep / steps.length) * 100}%` : '0%'\n                  }}\n                  transition={{ \n                    duration: 0.3,\n                    ease: 'easeOut'\n                  }}\n                >\n                  <motion.div\n                    className=\"absolute inset-0 bg-gradient-to-r from-transparent via-white/30 to-transparent\"\n                    animate={{ x: ['-100%', '200%'] }}\n                    transition={{ \n                      duration: 1.5, \n                      repeat: Infinity, \n                      ease: 'linear',\n                      repeatDelay: 0\n                    }}\n                  />\n                </motion.div>\n                \n                <motion.div\n                  className=\"absolute inset-0 rounded-full\"\n                  animate={{\n                    boxShadow: [\n                      '0 0 20px rgba(168, 85, 247, 0.4)',\n                      '0 0 40px rgba(168, 85, 247, 0.6)',\n                      '0 0 20px rgba(168, 85, 247, 0.4)'\n                    ]\n                  }}\n                  transition={{ \n                    duration: 2, \n                    repeat: Infinity,\n                    ease: 'easeInOut'\n                  }}\n                />\n              </div>\n              \n              <div className=\"flex justify-between text-xs text-gray-500\">\n                <span>Step {currentStep} of {steps.length}</span>\n                {currentStep >= steps.length && steps.length > 0 && (\n                  <motion.span\n                    initial={{ opacity: 0, scale: 0.8 }}\n                    animate={{ opacity: 1, scale: 1 }}\n                    className=\"text-green-400 font-semibold\"\n                  >\n                    \u2713 Complete\n                  </motion.span>\n                )}\n              </div>\n            </motion.div>\n          </div>\n        </div>\n\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ delay: 0.4, duration: 0.8 }}\n          className=\"bg-gray-900/50 backdrop-blur-lg border border-cyan-500/30 rounded-xl p-6 shadow-[0_0_30px_rgba(0,255,255,0.2)]\"\n        >\n          <div className=\"flex items-center justify-center gap-8 flex-wrap\">\n            <div className=\"flex items-center gap-3\">\n              <motion.div\n                className=\"w-6 h-6 rounded-lg bg-cyan-400 shadow-[0_0_20px_rgba(0,255,255,0.8)]\"\n                animate={{\n                  boxShadow: [\n                    '0 0 20px rgba(0,255,255,0.8)',\n                    '0 0 30px rgba(0,255,255,1)',\n                    '0 0 20px rgba(0,255,255,0.8)'\n                  ]\n                }}\n                transition={{ duration: 2, repeat: Infinity }}\n              />\n              <div className=\"flex flex-col\">\n                <span className=\"text-cyan-300 font-semibold text-sm\">Comparing</span>\n                <span className=\"text-gray-400 text-xs\">Elements being compared</span>\n              </div>\n            </div>\n\n            <div className=\"flex items-center gap-3\">\n              <motion.div\n                className=\"w-6 h-6 rounded-lg bg-pink-500 shadow-[0_0_20px_rgba(236,72,153,0.8)]\"\n                animate={{\n                  boxShadow: [\n                    '0 0 20px rgba(236,72,153,0.8)',\n                    '0 0 30px rgba(236,72,153,1)',\n                    '0 0 20px rgba(236,72,153,0.8)'\n                  ],\n                  scale: [1, 1.1, 1]\n                }}\n                transition={{ duration: 1.5, repeat: Infinity }}\n              />\n              <div className=\"flex flex-col\">\n                <span className=\"text-pink-300 font-semibold text-sm\">Swapping</span>\n                <span className=\"text-gray-400 text-xs\">Elements being swapped</span>\n              </div>\n            </div>\n\n            <div className=\"flex items-center gap-3\">\n              <motion.div\n                className=\"w-6 h-6 rounded-lg bg-green-400 shadow-[0_0_20px_rgba(74,222,128,0.8)]\"\n                animate={{\n                  boxShadow: [\n                    '0 0 20px rgba(74,222,128,0.8)',\n                    '0 0 30px rgba(74,222,128,1)',\n                    '0 0 20px rgba(74,222,128,0.8)'\n                  ]\n                }}\n                transition={{ duration: 2, repeat: Infinity, delay: 0.5 }}\n              />\n              <div className=\"flex flex-col\">\n                <span className=\"text-green-300 font-semibold text-sm\">Sorted</span>\n                <span className=\"text-gray-400 text-xs\">In final position</span>\n              </div>\n            </div>\n\n            <div className=\"flex items-center gap-3\">\n              <motion.div\n                className=\"w-6 h-6 rounded-lg bg-purple-400 shadow-[0_0_15px_rgba(168,85,247,0.6)]\"\n                whileHover={{\n                  scale: 1.1,\n                  boxShadow: '0 0 25px rgba(168,85,247,1)'\n                }}\n              />\n              <div className=\"flex flex-col\">\n                <span className=\"text-purple-300 font-semibold text-sm\">Unsorted</span>\n                <span className=\"text-gray-400 text-xs\">Waiting to be sorted</span>\n              </div>\n            </div>\n          </div>\n        </motion.div>\n      </div>\n    </div>\n  );\n}",
    "error": null,
    "elapsed_time": 94.37416481971741,
    "success": true
  }
}