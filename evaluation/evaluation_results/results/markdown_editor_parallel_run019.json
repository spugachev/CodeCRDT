{
  "prompt_id": "markdown_editor",
  "prompt_name": "Premium Markdown Editor",
  "mode": "parallel",
  "run_number": 19,
  "timestamp": "2025-10-14T02:51:13.482851",
  "response_time": 64.32114815711975,
  "total_tokens": null,
  "response_content": "import { useState, useCallback } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Bold, Italic, Code, List, ListOrdered, Link, Image, Eye, EyeOff } from 'lucide-react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport ReactMarkdown from 'react-markdown';\nimport { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';\nimport { vscDarkPlus } from 'react-syntax-highlighter/dist/esm/styles/prism';\nimport remarkGfm from 'remark-gfm';\n\ninterface ToolbarButton {\n  id: string;\n  icon: any;\n  label: string;\n  action: string;\n}\n\nconst toolbarButtons: ToolbarButton[] = [\n  { id: 'bold', icon: Bold, label: 'Bold', action: '**text**' },\n  { id: 'italic', icon: Italic, label: 'Italic', action: '*text*' },\n  { id: 'code', icon: Code, label: 'Code', action: '`code`' },\n  { id: 'list', icon: List, label: 'Bullet List', action: '- item' },\n  { id: 'ordered', icon: ListOrdered, label: 'Numbered List', action: '1. item' },\n  { id: 'link', icon: Link, label: 'Link', action: '[text](url)' },\n  { id: 'image', icon: Image, label: 'Image', action: '![alt](url)' }\n];\n\n// Custom markdown components with VS Code styling\nconst MarkdownComponents = {\n  code({ node, inline, className, children, ...props }: any) {\n    const match = /language-(\\w+)/.exec(className || '');\n    const language = match ? match[1] : '';\n    \n    return !inline && language ? (\n      <SyntaxHighlighter\n        style={vscDarkPlus}\n        language={language}\n        PreTag=\"div\"\n        className=\"rounded-md my-4 text-sm\"\n        customStyle={{\n          background: '#1e1e1e',\n          padding: '1rem',\n          border: '1px solid #3d3d3d',\n        }}\n        {...props}\n      >\n        {String(children).replace(/\\n$/, '')}\n      </SyntaxHighlighter>\n    ) : (\n      <code\n        className=\"bg-[#2d2d2d] text-[#ce9178] px-1.5 py-0.5 rounded text-sm font-mono border border-gray-800\"\n        {...props}\n      >\n        {children}\n      </code>\n    );\n  },\n  h1: ({ children }: any) => (\n    <h1 className=\"text-4xl font-bold mb-4 mt-6 text-gray-100 border-b border-gray-800 pb-2\">\n      {children}\n    </h1>\n  ),\n  h2: ({ children }: any) => (\n    <h2 className=\"text-3xl font-bold mb-3 mt-5 text-gray-100 border-b border-gray-800 pb-2\">\n      {children}\n    </h2>\n  ),\n  h3: ({ children }: any) => (\n    <h3 className=\"text-2xl font-bold mb-3 mt-4 text-gray-200\">\n      {children}\n    </h3>\n  ),\n  h4: ({ children }: any) => (\n    <h4 className=\"text-xl font-bold mb-2 mt-3 text-gray-200\">\n      {children}\n    </h4>\n  ),\n  h5: ({ children }: any) => (\n    <h5 className=\"text-lg font-bold mb-2 mt-3 text-gray-300\">\n      {children}\n    </h5>\n  ),\n  h6: ({ children }: any) => (\n    <h6 className=\"text-base font-bold mb-2 mt-2 text-gray-300\">\n      {children}\n    </h6>\n  ),\n  p: ({ children }: any) => (\n    <p className=\"mb-4 text-gray-300 leading-relaxed\">\n      {children}\n    </p>\n  ),\n  a: ({ children, href }: any) => (\n    <a\n      href={href}\n      className=\"text-[#4fc3f7] hover:text-[#81d4fa] underline transition-colors\"\n      target=\"_blank\"\n      rel=\"noopener noreferrer\"\n    >\n      {children}\n    </a>\n  ),\n  ul: ({ children }: any) => (\n    <ul className=\"list-disc list-inside mb-4 text-gray-300 space-y-1 ml-4\">\n      {children}\n    </ul>\n  ),\n  ol: ({ children }: any) => (\n    <ol className=\"list-decimal list-inside mb-4 text-gray-300 space-y-1 ml-4\">\n      {children}\n    </ol>\n  ),\n  li: ({ children }: any) => (\n    <li className=\"text-gray-300 leading-relaxed\">\n      {children}\n    </li>\n  ),\n  blockquote: ({ children }: any) => (\n    <blockquote className=\"border-l-4 border-blue-500 pl-4 py-2 my-4 bg-[#2d2d2d] text-gray-300 italic rounded-r\">\n      {children}\n    </blockquote>\n  ),\n  hr: () => (\n    <hr className=\"my-6 border-gray-700\" />\n  ),\n  table: ({ children }: any) => (\n    <div className=\"overflow-x-auto my-4\">\n      <table className=\"min-w-full border border-gray-700 rounded-lg\">\n        {children}\n      </table>\n    </div>\n  ),\n  thead: ({ children }: any) => (\n    <thead className=\"bg-[#2d2d2d]\">\n      {children}\n    </thead>\n  ),\n  tbody: ({ children }: any) => (\n    <tbody className=\"divide-y divide-gray-700\">\n      {children}\n    </tbody>\n  ),\n  tr: ({ children }: any) => (\n    <tr className=\"border-b border-gray-700\">\n      {children}\n    </tr>\n  ),\n  th: ({ children }: any) => (\n    <th className=\"px-4 py-2 text-left text-gray-200 font-semibold border-r border-gray-700 last:border-r-0\">\n      {children}\n    </th>\n  ),\n  td: ({ children }: any) => (\n    <td className=\"px-4 py-2 text-gray-300 border-r border-gray-700 last:border-r-0\">\n      {children}\n    </td>\n  ),\n  img: ({ src, alt }: any) => (\n    <img\n      src={src}\n      alt={alt}\n      className=\"max-w-full h-auto rounded-lg my-4 border border-gray-700\"\n    />\n  ),\n  strong: ({ children }: any) => (\n    <strong className=\"font-bold text-gray-100\">\n      {children}\n    </strong>\n  ),\n  em: ({ children }: any) => (\n    <em className=\"italic text-gray-200\">\n      {children}\n    </em>\n  ),\n};\n\nconst mockMarkdownContent = `# Welcome to Premium Markdown Editor\n\n## Features\n\nThis is a **bold** statement and this is *italic* text.\n\n### Code Blocks\n\n\\`\\`\\`javascript\nfunction greet(name) {\n  console.log(\\`Hello, \\${name}!\\`);\n  return true;\n}\n\\`\\`\\`\n\n\\`\\`\\`python\ndef calculate(x, y):\n    result = x + y\n    return result\n\\`\\`\\`\n\n### Lists\n\n- First item\n- Second item\n- Third item\n\n1. Numbered one\n2. Numbered two\n3. Numbered three\n\n### Inline Code\n\nUse \\`const variable = 'value'\\` for inline code.\n\n### Links and Images\n\n[Visit Example](https://example.com)\n\n> This is a blockquote with important information.\n\n---\n\n**End of document**\n`;\n\nexport default function MarkdownEditor() {\n  const [markdown, setMarkdown] = useState(mockMarkdownContent);\n  const [showPreview, setShowPreview] = useState(true);\n  const [cursorPosition, setCursorPosition] = useState(0);\n\n  const handleMarkdownChange = useCallback((e: React.ChangeEvent<HTMLTextAreaElement>) => {\n    setMarkdown(e.target.value);\n    setCursorPosition(e.target.selectionStart);\n  }, []);\n\n  const togglePreview = useCallback(() => {\n    setShowPreview(prev => !prev);\n  }, []);\n\n  const handleToolbarAction = useCallback((action: string) => {\n    const textareaRef = document.querySelector('textarea') as HTMLTextAreaElement;\n    if (!textareaRef) return;\n\n    const start = cursorPosition;\n    const end = cursorPosition;\n    const textBefore = markdown.substring(0, start);\n    const textAfter = markdown.substring(end);\n    \n    // Insert the markdown syntax at cursor position\n    const newMarkdown = textBefore + action + textAfter;\n    setMarkdown(newMarkdown);\n    \n    // Calculate new cursor position (after inserted text)\n    const newCursorPos = start + action.length;\n    \n    // Update cursor position and focus textarea\n    setTimeout(() => {\n      if (textareaRef) {\n        textareaRef.focus();\n        textareaRef.setSelectionRange(newCursorPos, newCursorPos);\n        setCursorPosition(newCursorPos);\n      }\n    }, 0);\n  }, [markdown, cursorPosition]);\n\n  return (\n    <div className=\"min-h-screen bg-[#1e1e1e] text-gray-100\">\n      <div className=\"container mx-auto px-4 py-6\">\n        {/* Header */}\n        <div className=\"mb-6 flex items-center justify-between\">\n          <h1 className=\"text-3xl font-bold bg-gradient-to-r from-blue-400 to-purple-500 bg-clip-text text-transparent\">\n            Premium Markdown Editor\n          </h1>\n          <Button\n            onClick={togglePreview}\n            variant=\"outline\"\n            className=\"bg-[#2d2d2d] border-gray-700 hover:bg-[#3d3d3d] text-gray-100\"\n          >\n            {showPreview ? <EyeOff className=\"w-4 h-4 mr-2\" /> : <Eye className=\"w-4 h-4 mr-2\" />}\n            {showPreview ? 'Hide Preview' : 'Show Preview'}\n          </Button>\n        </div>\n\n        \n        {/* Floating Toolbar */}\n        <motion.div\n          initial={{ opacity: 0, y: -20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.3 }}\n          className=\"mb-6 bg-[#2d2d2d] border border-gray-700 rounded-lg p-2 shadow-xl\"\n        >\n          <div className=\"flex items-center gap-1 flex-wrap\">\n            {toolbarButtons.map((button) => {\n              const Icon = button.icon;\n              return (\n                <motion.div\n                  key={button.id}\n                  whileHover={{ scale: 1.05 }}\n                  whileTap={{ scale: 0.95 }}\n                >\n                  <Button\n                    onClick={() => handleToolbarAction(button.action)}\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    className=\"bg-[#1e1e1e] hover:bg-[#3d3d3d] text-gray-300 hover:text-white border border-transparent hover:border-blue-500/50 transition-all duration-200\"\n                    title={button.label}\n                  >\n                    <Icon className=\"w-4 h-4\" />\n                  </Button>\n                </motion.div>\n              );\n            })}\n          </div>\n        </motion.div>\n\n        {/* Editor Layout */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n          {/* Editor Panel */}\n          <motion.div\n            layout\n            className=\"relative\"\n            initial={{ opacity: 0, x: -20 }}\n            animate={{ opacity: 1, x: 0 }}\n            transition={{ duration: 0.3 }}\n          >\n            <div className=\"bg-[#1e1e1e] border border-gray-800 rounded-lg overflow-hidden shadow-2xl\">\n              <div className=\"bg-[#2d2d2d] px-4 py-2 border-b border-gray-800 flex items-center justify-between\">\n                <span className=\"text-sm font-medium text-gray-400\">Editor</span>\n                <div className=\"flex gap-2\">\n                  <div className=\"w-3 h-3 rounded-full bg-red-500\"></div>\n                  <div className=\"w-3 h-3 rounded-full bg-yellow-500\"></div>\n                  <div className=\"w-3 h-3 rounded-full bg-green-500\"></div>\n                </div>\n              </div>\n              <textarea\n                value={markdown}\n                onChange={handleMarkdownChange}\n                className=\"w-full h-[600px] bg-[#1e1e1e] text-gray-100 p-6 font-mono text-sm resize-none focus:outline-none\"\n                placeholder=\"Start typing your markdown...\"\n                spellCheck={false}\n              />\n            </div>\n          </motion.div>\n\n          {/* Preview Panel */}\n          <AnimatePresence mode=\"wait\">\n            {showPreview && (\n              <motion.div\n                key=\"preview\"\n                initial={{ opacity: 0, x: 20 }}\n                animate={{ opacity: 1, x: 0 }}\n                exit={{ opacity: 0, x: 20 }}\n                transition={{ duration: 0.3 }}\n                className=\"relative\"\n              >\n                <div className=\"bg-[#1e1e1e] border border-gray-800 rounded-lg overflow-hidden shadow-2xl\">\n                  <div className=\"bg-[#2d2d2d] px-4 py-2 border-b border-gray-800\">\n                    <span className=\"text-sm font-medium text-gray-400\">Preview</span>\n                  </div>\n                  <div className=\"p-6 h-[600px] overflow-y-auto\">\n                    <ReactMarkdown\n                      components={MarkdownComponents}\n                      remarkPlugins={[remarkGfm]}\n                      className=\"prose prose-invert max-w-none\"\n                    >\n                      {markdown}\n                    </ReactMarkdown>\n                  </div>\n                </div>\n              </motion.div>\n            )}\n          </AnimatePresence>\n        </div>\n\n        {/* Stats Bar */}\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ delay: 0.2 }}\n          className=\"mt-6 bg-[#2d2d2d] border border-gray-800 rounded-lg p-4\"\n        >\n          <div className=\"flex items-center justify-between flex-wrap gap-4\">\n            <div className=\"flex items-center gap-6\">\n              <div className=\"flex items-center gap-2\">\n                <span className=\"text-xs text-gray-500 uppercase tracking-wider\">Characters</span>\n                <span className=\"text-sm font-semibold text-blue-400\">{markdown.length}</span>\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <span className=\"text-xs text-gray-500 uppercase tracking-wider\">Words</span>\n                <span className=\"text-sm font-semibold text-purple-400\">\n                  {markdown.trim() ? markdown.trim().split(/\\s+/).length : 0}\n                </span>\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <span className=\"text-xs text-gray-500 uppercase tracking-wider\">Lines</span>\n                <span className=\"text-sm font-semibold text-green-400\">\n                  {markdown.split('\\n').length}\n                </span>\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <span className=\"text-xs text-gray-500 uppercase tracking-wider\">Reading Time</span>\n                <span className=\"text-sm font-semibold text-orange-400\">\n                  {Math.ceil((markdown.trim() ? markdown.trim().split(/\\s+/).length : 0) / 200)} min\n                </span>\n              </div>\n            </div>\n            <div className=\"text-xs text-gray-500\">\n              Cursor: {cursorPosition}\n            </div>\n          </div>\n        </motion.div>\n      </div>\n    </div>\n  );\n}",
  "error": null,
  "overall_score": 60,
  "code_quality_score": 18,
  "architecture_score": 16,
  "performance_score": 14,
  "accessibility_score": 12,
  "metadata": {
    "document_id": "eval_room_1f1d5972f2b4",
    "prompt_category": "productivity",
    "prompt_complexity": 8.0
  },
  "raw_response": {
    "document_id": "eval_room_1f1d5972f2b4",
    "mode": "parallel",
    "prompt": "Create a premium markdown editor with dark theme, syntax highlighting with vibrant colors, smooth live preview transitions, floating toolbar with hover effects, and code block styling like VS Code",
    "content": "import { useState, useCallback } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Bold, Italic, Code, List, ListOrdered, Link, Image, Eye, EyeOff } from 'lucide-react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport ReactMarkdown from 'react-markdown';\nimport { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';\nimport { vscDarkPlus } from 'react-syntax-highlighter/dist/esm/styles/prism';\nimport remarkGfm from 'remark-gfm';\n\ninterface ToolbarButton {\n  id: string;\n  icon: any;\n  label: string;\n  action: string;\n}\n\nconst toolbarButtons: ToolbarButton[] = [\n  { id: 'bold', icon: Bold, label: 'Bold', action: '**text**' },\n  { id: 'italic', icon: Italic, label: 'Italic', action: '*text*' },\n  { id: 'code', icon: Code, label: 'Code', action: '`code`' },\n  { id: 'list', icon: List, label: 'Bullet List', action: '- item' },\n  { id: 'ordered', icon: ListOrdered, label: 'Numbered List', action: '1. item' },\n  { id: 'link', icon: Link, label: 'Link', action: '[text](url)' },\n  { id: 'image', icon: Image, label: 'Image', action: '![alt](url)' }\n];\n\n// Custom markdown components with VS Code styling\nconst MarkdownComponents = {\n  code({ node, inline, className, children, ...props }: any) {\n    const match = /language-(\\w+)/.exec(className || '');\n    const language = match ? match[1] : '';\n    \n    return !inline && language ? (\n      <SyntaxHighlighter\n        style={vscDarkPlus}\n        language={language}\n        PreTag=\"div\"\n        className=\"rounded-md my-4 text-sm\"\n        customStyle={{\n          background: '#1e1e1e',\n          padding: '1rem',\n          border: '1px solid #3d3d3d',\n        }}\n        {...props}\n      >\n        {String(children).replace(/\\n$/, '')}\n      </SyntaxHighlighter>\n    ) : (\n      <code\n        className=\"bg-[#2d2d2d] text-[#ce9178] px-1.5 py-0.5 rounded text-sm font-mono border border-gray-800\"\n        {...props}\n      >\n        {children}\n      </code>\n    );\n  },\n  h1: ({ children }: any) => (\n    <h1 className=\"text-4xl font-bold mb-4 mt-6 text-gray-100 border-b border-gray-800 pb-2\">\n      {children}\n    </h1>\n  ),\n  h2: ({ children }: any) => (\n    <h2 className=\"text-3xl font-bold mb-3 mt-5 text-gray-100 border-b border-gray-800 pb-2\">\n      {children}\n    </h2>\n  ),\n  h3: ({ children }: any) => (\n    <h3 className=\"text-2xl font-bold mb-3 mt-4 text-gray-200\">\n      {children}\n    </h3>\n  ),\n  h4: ({ children }: any) => (\n    <h4 className=\"text-xl font-bold mb-2 mt-3 text-gray-200\">\n      {children}\n    </h4>\n  ),\n  h5: ({ children }: any) => (\n    <h5 className=\"text-lg font-bold mb-2 mt-3 text-gray-300\">\n      {children}\n    </h5>\n  ),\n  h6: ({ children }: any) => (\n    <h6 className=\"text-base font-bold mb-2 mt-2 text-gray-300\">\n      {children}\n    </h6>\n  ),\n  p: ({ children }: any) => (\n    <p className=\"mb-4 text-gray-300 leading-relaxed\">\n      {children}\n    </p>\n  ),\n  a: ({ children, href }: any) => (\n    <a\n      href={href}\n      className=\"text-[#4fc3f7] hover:text-[#81d4fa] underline transition-colors\"\n      target=\"_blank\"\n      rel=\"noopener noreferrer\"\n    >\n      {children}\n    </a>\n  ),\n  ul: ({ children }: any) => (\n    <ul className=\"list-disc list-inside mb-4 text-gray-300 space-y-1 ml-4\">\n      {children}\n    </ul>\n  ),\n  ol: ({ children }: any) => (\n    <ol className=\"list-decimal list-inside mb-4 text-gray-300 space-y-1 ml-4\">\n      {children}\n    </ol>\n  ),\n  li: ({ children }: any) => (\n    <li className=\"text-gray-300 leading-relaxed\">\n      {children}\n    </li>\n  ),\n  blockquote: ({ children }: any) => (\n    <blockquote className=\"border-l-4 border-blue-500 pl-4 py-2 my-4 bg-[#2d2d2d] text-gray-300 italic rounded-r\">\n      {children}\n    </blockquote>\n  ),\n  hr: () => (\n    <hr className=\"my-6 border-gray-700\" />\n  ),\n  table: ({ children }: any) => (\n    <div className=\"overflow-x-auto my-4\">\n      <table className=\"min-w-full border border-gray-700 rounded-lg\">\n        {children}\n      </table>\n    </div>\n  ),\n  thead: ({ children }: any) => (\n    <thead className=\"bg-[#2d2d2d]\">\n      {children}\n    </thead>\n  ),\n  tbody: ({ children }: any) => (\n    <tbody className=\"divide-y divide-gray-700\">\n      {children}\n    </tbody>\n  ),\n  tr: ({ children }: any) => (\n    <tr className=\"border-b border-gray-700\">\n      {children}\n    </tr>\n  ),\n  th: ({ children }: any) => (\n    <th className=\"px-4 py-2 text-left text-gray-200 font-semibold border-r border-gray-700 last:border-r-0\">\n      {children}\n    </th>\n  ),\n  td: ({ children }: any) => (\n    <td className=\"px-4 py-2 text-gray-300 border-r border-gray-700 last:border-r-0\">\n      {children}\n    </td>\n  ),\n  img: ({ src, alt }: any) => (\n    <img\n      src={src}\n      alt={alt}\n      className=\"max-w-full h-auto rounded-lg my-4 border border-gray-700\"\n    />\n  ),\n  strong: ({ children }: any) => (\n    <strong className=\"font-bold text-gray-100\">\n      {children}\n    </strong>\n  ),\n  em: ({ children }: any) => (\n    <em className=\"italic text-gray-200\">\n      {children}\n    </em>\n  ),\n};\n\nconst mockMarkdownContent = `# Welcome to Premium Markdown Editor\n\n## Features\n\nThis is a **bold** statement and this is *italic* text.\n\n### Code Blocks\n\n\\`\\`\\`javascript\nfunction greet(name) {\n  console.log(\\`Hello, \\${name}!\\`);\n  return true;\n}\n\\`\\`\\`\n\n\\`\\`\\`python\ndef calculate(x, y):\n    result = x + y\n    return result\n\\`\\`\\`\n\n### Lists\n\n- First item\n- Second item\n- Third item\n\n1. Numbered one\n2. Numbered two\n3. Numbered three\n\n### Inline Code\n\nUse \\`const variable = 'value'\\` for inline code.\n\n### Links and Images\n\n[Visit Example](https://example.com)\n\n> This is a blockquote with important information.\n\n---\n\n**End of document**\n`;\n\nexport default function MarkdownEditor() {\n  const [markdown, setMarkdown] = useState(mockMarkdownContent);\n  const [showPreview, setShowPreview] = useState(true);\n  const [cursorPosition, setCursorPosition] = useState(0);\n\n  const handleMarkdownChange = useCallback((e: React.ChangeEvent<HTMLTextAreaElement>) => {\n    setMarkdown(e.target.value);\n    setCursorPosition(e.target.selectionStart);\n  }, []);\n\n  const togglePreview = useCallback(() => {\n    setShowPreview(prev => !prev);\n  }, []);\n\n  const handleToolbarAction = useCallback((action: string) => {\n    const textareaRef = document.querySelector('textarea') as HTMLTextAreaElement;\n    if (!textareaRef) return;\n\n    const start = cursorPosition;\n    const end = cursorPosition;\n    const textBefore = markdown.substring(0, start);\n    const textAfter = markdown.substring(end);\n    \n    // Insert the markdown syntax at cursor position\n    const newMarkdown = textBefore + action + textAfter;\n    setMarkdown(newMarkdown);\n    \n    // Calculate new cursor position (after inserted text)\n    const newCursorPos = start + action.length;\n    \n    // Update cursor position and focus textarea\n    setTimeout(() => {\n      if (textareaRef) {\n        textareaRef.focus();\n        textareaRef.setSelectionRange(newCursorPos, newCursorPos);\n        setCursorPosition(newCursorPos);\n      }\n    }, 0);\n  }, [markdown, cursorPosition]);\n\n  return (\n    <div className=\"min-h-screen bg-[#1e1e1e] text-gray-100\">\n      <div className=\"container mx-auto px-4 py-6\">\n        {/* Header */}\n        <div className=\"mb-6 flex items-center justify-between\">\n          <h1 className=\"text-3xl font-bold bg-gradient-to-r from-blue-400 to-purple-500 bg-clip-text text-transparent\">\n            Premium Markdown Editor\n          </h1>\n          <Button\n            onClick={togglePreview}\n            variant=\"outline\"\n            className=\"bg-[#2d2d2d] border-gray-700 hover:bg-[#3d3d3d] text-gray-100\"\n          >\n            {showPreview ? <EyeOff className=\"w-4 h-4 mr-2\" /> : <Eye className=\"w-4 h-4 mr-2\" />}\n            {showPreview ? 'Hide Preview' : 'Show Preview'}\n          </Button>\n        </div>\n\n        \n        {/* Floating Toolbar */}\n        <motion.div\n          initial={{ opacity: 0, y: -20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.3 }}\n          className=\"mb-6 bg-[#2d2d2d] border border-gray-700 rounded-lg p-2 shadow-xl\"\n        >\n          <div className=\"flex items-center gap-1 flex-wrap\">\n            {toolbarButtons.map((button) => {\n              const Icon = button.icon;\n              return (\n                <motion.div\n                  key={button.id}\n                  whileHover={{ scale: 1.05 }}\n                  whileTap={{ scale: 0.95 }}\n                >\n                  <Button\n                    onClick={() => handleToolbarAction(button.action)}\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    className=\"bg-[#1e1e1e] hover:bg-[#3d3d3d] text-gray-300 hover:text-white border border-transparent hover:border-blue-500/50 transition-all duration-200\"\n                    title={button.label}\n                  >\n                    <Icon className=\"w-4 h-4\" />\n                  </Button>\n                </motion.div>\n              );\n            })}\n          </div>\n        </motion.div>\n\n        {/* Editor Layout */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n          {/* Editor Panel */}\n          <motion.div\n            layout\n            className=\"relative\"\n            initial={{ opacity: 0, x: -20 }}\n            animate={{ opacity: 1, x: 0 }}\n            transition={{ duration: 0.3 }}\n          >\n            <div className=\"bg-[#1e1e1e] border border-gray-800 rounded-lg overflow-hidden shadow-2xl\">\n              <div className=\"bg-[#2d2d2d] px-4 py-2 border-b border-gray-800 flex items-center justify-between\">\n                <span className=\"text-sm font-medium text-gray-400\">Editor</span>\n                <div className=\"flex gap-2\">\n                  <div className=\"w-3 h-3 rounded-full bg-red-500\"></div>\n                  <div className=\"w-3 h-3 rounded-full bg-yellow-500\"></div>\n                  <div className=\"w-3 h-3 rounded-full bg-green-500\"></div>\n                </div>\n              </div>\n              <textarea\n                value={markdown}\n                onChange={handleMarkdownChange}\n                className=\"w-full h-[600px] bg-[#1e1e1e] text-gray-100 p-6 font-mono text-sm resize-none focus:outline-none\"\n                placeholder=\"Start typing your markdown...\"\n                spellCheck={false}\n              />\n            </div>\n          </motion.div>\n\n          {/* Preview Panel */}\n          <AnimatePresence mode=\"wait\">\n            {showPreview && (\n              <motion.div\n                key=\"preview\"\n                initial={{ opacity: 0, x: 20 }}\n                animate={{ opacity: 1, x: 0 }}\n                exit={{ opacity: 0, x: 20 }}\n                transition={{ duration: 0.3 }}\n                className=\"relative\"\n              >\n                <div className=\"bg-[#1e1e1e] border border-gray-800 rounded-lg overflow-hidden shadow-2xl\">\n                  <div className=\"bg-[#2d2d2d] px-4 py-2 border-b border-gray-800\">\n                    <span className=\"text-sm font-medium text-gray-400\">Preview</span>\n                  </div>\n                  <div className=\"p-6 h-[600px] overflow-y-auto\">\n                    <ReactMarkdown\n                      components={MarkdownComponents}\n                      remarkPlugins={[remarkGfm]}\n                      className=\"prose prose-invert max-w-none\"\n                    >\n                      {markdown}\n                    </ReactMarkdown>\n                  </div>\n                </div>\n              </motion.div>\n            )}\n          </AnimatePresence>\n        </div>\n\n        {/* Stats Bar */}\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ delay: 0.2 }}\n          className=\"mt-6 bg-[#2d2d2d] border border-gray-800 rounded-lg p-4\"\n        >\n          <div className=\"flex items-center justify-between flex-wrap gap-4\">\n            <div className=\"flex items-center gap-6\">\n              <div className=\"flex items-center gap-2\">\n                <span className=\"text-xs text-gray-500 uppercase tracking-wider\">Characters</span>\n                <span className=\"text-sm font-semibold text-blue-400\">{markdown.length}</span>\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <span className=\"text-xs text-gray-500 uppercase tracking-wider\">Words</span>\n                <span className=\"text-sm font-semibold text-purple-400\">\n                  {markdown.trim() ? markdown.trim().split(/\\s+/).length : 0}\n                </span>\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <span className=\"text-xs text-gray-500 uppercase tracking-wider\">Lines</span>\n                <span className=\"text-sm font-semibold text-green-400\">\n                  {markdown.split('\\n').length}\n                </span>\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <span className=\"text-xs text-gray-500 uppercase tracking-wider\">Reading Time</span>\n                <span className=\"text-sm font-semibold text-orange-400\">\n                  {Math.ceil((markdown.trim() ? markdown.trim().split(/\\s+/).length : 0) / 200)} min\n                </span>\n              </div>\n            </div>\n            <div className=\"text-xs text-gray-500\">\n              Cursor: {cursorPosition}\n            </div>\n          </div>\n        </motion.div>\n      </div>\n    </div>\n  );\n}",
    "error": null,
    "elapsed_time": 64.32114815711975,
    "success": true
  }
}