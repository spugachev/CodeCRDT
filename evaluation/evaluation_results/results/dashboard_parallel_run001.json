{
  "prompt_id": "dashboard",
  "prompt_name": "Analytics Dashboard",
  "mode": "parallel",
  "run_number": 1,
  "timestamp": "2025-10-14T13:14:55.431886",
  "response_time": 84.36924386024475,
  "total_tokens": null,
  "response_content": "import { useState, useCallback } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Moon, Sun, RefreshCw } from 'lucide-react';\nimport { ArrowUpDown, ChevronLeft, ChevronRight } from 'lucide-react';\nimport { Badge } from '@/components/ui/badge';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\n\n\nimport { TrendingUp, Users, ShoppingCart, DollarSign } from 'lucide-react';\nimport { Progress } from '@/components/ui/progress';\nimport { TrendingUp, TrendingDown, ShoppingBag, UserPlus, CreditCard, Package } from 'lucide-react';\nimport { AreaChart, Area, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';\nimport { PieChart, Pie, Cell, ResponsiveContainer, Legend, Tooltip as RechartsTooltip } from 'recharts';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, Legend } from 'recharts';\n\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';\ninterface ActivityItem {\n  id: string;\n  type: 'sale' | 'user' | 'payment' | 'order';\n  message: string;\n  timestamp: string;\n  icon: 'sale' | 'user' | 'payment' | 'order';\n}\n\nconst mockActivityData: ActivityItem[] = [\n  { id: '1', type: 'sale', message: 'New sale: Premium Plan', timestamp: '2 minutes ago', icon: 'sale' },\n  { id: '2', type: 'user', message: 'New user registered', timestamp: '5 minutes ago', icon: 'user' },\n  { id: '3', type: 'payment', message: 'Payment received: $450', timestamp: '12 minutes ago', icon: 'payment' },\n  { id: '4', type: 'order', message: 'Order #1234 completed', timestamp: '18 minutes ago', icon: 'order' },\n  { id: '5', type: 'sale', message: 'New sale: Enterprise Plan', timestamp: '25 minutes ago', icon: 'sale' },\n  { id: '6', type: 'user', message: 'New user registered', timestamp: '32 minutes ago', icon: 'user' },\n  { id: '7', type: 'payment', message: 'Payment received: $890', timestamp: '45 minutes ago', icon: 'payment' },\n  { id: '8', type: 'order', message: 'Order #1235 completed', timestamp: '1 hour ago', icon: 'order' }\n];\nimport { TrendingUp, TrendingDown, DollarSign, Users, ShoppingCart, Target, AlertTriangle, AlertCircle, Info, CheckCircle\nt } from 'lucide-react';\nimport { motion } from 'framer-motion';\n\ninterface MetricData {\n  id: string;\n  label: string;\n  value: number;\n  change: number;\n  trend: 'up' | 'down';\n}\n\ninterface ChartDataPoint {\n  date: string;\n  revenue: number;\n  users: number;\n  orders: number;\n}\n\ninterface TableRow {\n  id: string;\n  product: string;\n  sales: number;\n  revenue: number;\n  status: 'active' | 'pending' | 'inactive';\n}\ninterface Alert {\n  id: string;\n  message: string;\n  severity: 'critical' | 'warning' | 'info' | 'success';\n  timestamp: string;\n}\n\nconst mockMetrics: MetricData[] = [\n  { id: '1', label: 'Total Revenue', value: 45231, change: 12.5, trend: 'up' },\n  { id: '2', label: 'Active Users', value: 2350, change: 8.2, trend: 'up' },\n  { id: '3', label: 'Total Orders', value: 1543, change: -3.1, trend: 'down' },\n  { id: '4', label: 'Conversion Rate', value: 3.24, change: 5.7, trend: 'up' }\n];\n\nconst mockChartData: ChartDataPoint[] = [\n  { date: '2024-01-01', revenue: 12000, users: 450, orders: 230 },\n  { date: '2024-01-02', revenue: 15000, users: 520, orders: 280 },\n  { date: '2024-01-03', revenue: 13500, users: 490, orders: 250 },\n  { date: '2024-01-04', revenue: 18000, users: 610, orders: 320 },\n  { date: '2024-01-05', revenue: 16500, users: 580, orders: 295 },\n  { date: '2024-01-06', revenue: 20000, users: 680, orders: 350 },\n  { date: '2024-01-07', revenue: 22000, users: 720, orders: 380 }\n];\n\nconst mockTableData: TableRow[] = [\n  { id: '1', product: 'Premium Plan', sales: 234, revenue: 23400, status: 'active' },\n  { id: '2', product: 'Basic Plan', sales: 567, revenue: 11340, status: 'active' },\n  { id: '3', product: 'Enterprise Plan', sales: 89, revenue: 44500, status: 'active' },\n  { id: '4', product: 'Starter Plan', sales: 432, revenue: 4320, status: 'pending' },\n  { id: '5', product: 'Pro Plan', sales: 156, revenue: 15600, status: 'inactive' }\n];\nconst mockAlerts: Alert[] = [\n  { id: '1', message: 'Server response time exceeded threshold', severity: 'critical', timestamp: '2 min ago' },\n  { id: '2', message: 'High memory usage detected on production', severity: 'warning', timestamp: '15 min ago' },\n  { id: '3', message: 'Database backup completed successfully', severity: 'success', timestamp: '1 hour ago' },\n  { id: '4', message: 'New feature deployment scheduled', severity: 'info', timestamp: '2 hours ago' },\n  { id: '5', message: 'API rate limit approaching maximum', severity: 'warning', timestamp: '3 hours ago' }\n];\n\ninterface QuickStat {\n  id: string;\n  label: string;\n  value: string;\n  target: number;\n  current: number;\n  icon: any;\n  color: string;\n}\n\nconst mockQuickStats: QuickStat[] = [\n  { \n    id: '1', \n    label: 'Monthly Goal', \n    value: '85%', \n    target: 100, \n    current: 85, \n    icon: TrendingUp, \n    color: 'bg-blue-500' \n  },\n  { \n    id: '2', \n    label: 'User Retention', \n    value: '92%', \n    target: 100, \n    current: 92, \n    icon: Users, \n    color: 'bg-green-500' \n  },\n  { \n    id: '3', \n    label: 'Order Fulfillment', \n    value: '78%', \n    target: 100, \n    current: 78, \n    icon: ShoppingCart, \n    color: 'bg-purple-500' \n  },\n  { \n    id: '4', \n    label: 'Revenue Target', \n    value: '67%', \n    target: 100, \n    current: 67, \n    icon: DollarSign, \n    color: 'bg-orange-500' \n  }\n];\nconst mockPieData = [\n  { name: 'Premium Plan', value: 23400, color: '#3b82f6' },\n  { name: 'Basic Plan', value: 11340, color: '#10b981' },\n  { name: 'Enterprise Plan', value: 44500, color: '#8b5cf6' },\n  { name: 'Starter Plan', value: 4320, color: '#f59e0b' },\n  { name: 'Pro Plan', value: 15600, color: '#ef4444' }\n];\n\nconst getAlertIcon = (severity: Alert['severity']) => {\n  switch (severity) {\n    case 'critical':\n      return AlertCircle;\n    case 'warning':\n      return AlertTriangle;\n    case 'info':\n      return Info;\n    case 'success':\n      return CheckCircle;\n  }\n};\n\nconst getAlertStyles = (severity: Alert['severity'], isDarkMode: boolean) => {\n  const baseStyles = 'flex items-start gap-3 p-3 rounded-lg border transition-colors';\n  \n  switch (severity) {\n    case 'critical':\n      return `${baseStyles} ${isDarkMode ? 'bg-red-950/30 border-red-900/50' : 'bg-red-50 border-red-200'}`;\n    case 'warning':\n      return `${baseStyles} ${isDarkMode ? 'bg-yellow-950/30 border-yellow-900/50' : 'bg-yellow-50 border-yellow-200'}`;\n    case 'info':\n      return `${baseStyles} ${isDarkMode ? 'bg-blue-950/30 border-blue-900/50' : 'bg-blue-50 border-blue-200'}`;\n    case 'success':\n      return `${baseStyles} ${isDarkMode ? 'bg-green-950/30 border-green-900/50' : 'bg-green-50 border-green-200'}`;\n  }\n};\n\nconst getAlertIconColor = (severity: Alert['severity']) => {\n  switch (severity) {\n    case 'critical':\n      return 'text-red-500';\n    case 'warning':\n      return 'text-yellow-500';\n    case 'info':\n      return 'text-blue-500';\n    case 'success':\n      return 'text-green-500';\n  }\n};\n\nexport default function AnalyticsDashboard() {\n  const [sortColumn, setSortColumn] = useState<keyof TableRow | null>(null);\n  const [sortDirection, setSortDirection] = useState<'asc' | 'desc'>('asc');\n  const [currentPage, setCurrentPage] = useState(1);\n  const itemsPerPage = 3;\n  const [isDarkMode, setIsDarkMode] = useState(false);\n  const [metrics, setMetrics] = useState<MetricData[]>(mockMetrics);\n  const [chartData, setChartData] = useState<ChartDataPoint[]>(mockChartData);\n  const [tableData, setTableData] = useState<TableRow[]>(mockTableData);\n  const [isRefreshing, setIsRefreshing] = useState(false);\n  const [alerts, setAlerts] = useState<Alert[]>(mockAlerts);\n\n  const toggleDarkMode = useCallback(() => {\n    setIsDarkMode(prev => !prev);\n  }, []);\n  const handleSort = useCallback((column: keyof TableRow) => {\n    if (sortColumn === column) {\n      setSortDirection(prev => prev === 'asc' ? 'desc' : 'asc');\n    } else {\n      setSortColumn(column);\n      setSortDirection('asc');\n    }\n  }, [sortColumn]);\n\n  const sortedData = useCallback(() => {\n    if (!sortColumn) return tableData;\n    \n    return [...tableData].sort((a, b) => {\n      const aValue = a[sortColumn];\n      const bValue = b[sortColumn];\n      \n      if (typeof aValue === 'number' && typeof bValue === 'number') {\n        return sortDirection === 'asc' ? aValue - bValue : bValue - aValue;\n      }\n      \n      if (typeof aValue === 'string' && typeof bValue === 'string') {\n        return sortDirection === 'asc' \n          ? aValue.localeCompare(bValue)\n          : bValue.localeCompare(aValue);\n      }\n      \n      return 0;\n    });\n  }, [tableData, sortColumn, sortDirection]);\n\n  const paginatedData = useCallback(() => {\n    const sorted = sortedData();\n    const startIndex = (currentPage - 1) * itemsPerPage;\n    const endIndex = startIndex + itemsPerPage;\n    return sorted.slice(startIndex, endIndex);\n  }, [sortedData, currentPage]);\n\n  const totalPages = Math.ceil(tableData.length / itemsPerPage);\n\n  const getStatusBadgeVariant = (status: TableRow['status']) => {\n    switch (status) {\n      case 'active':\n        return 'default';\n      case 'pending':\n        return 'secondary';\n      case 'inactive':\n        return 'outline';\n      default:\n        return 'default';\n    }\n  };\n\n  const handleRefresh = useCallback(() => {\n    setIsRefreshing(true);\n    \n    setTimeout(() => {\n      // Generate updated metrics with random variations\n      const updatedMetrics = mockMetrics.map(metric => ({\n        ...metric,\n        value: metric.value + Math.floor(Math.random() * 200 - 100),\n        change: parseFloat((Math.random() * 20 - 5).toFixed(1)),\n        trend: Math.random() > 0.5 ? 'up' as const : 'down' as const\n      }));\n      \n      // Generate updated chart data with random variations\n      const updatedChartData = mockChartData.map(point => ({\n        ...point,\n        revenue: point.revenue + Math.floor(Math.random() * 4000 - 2000),\n        users: point.users + Math.floor(Math.random() * 100 - 50),\n        orders: point.orders + Math.floor(Math.random() * 50 - 25)\n      }));\n      \n      // Generate updated table data with random variations\n      const updatedTableData = mockTableData.map(row => ({\n        ...row,\n        sales: row.sales + Math.floor(Math.random() * 40 - 20),\n        revenue: row.revenue + Math.floor(Math.random() * 2000 - 1000)\n      }));\n      \n      setMetrics(updatedMetrics);\n      setChartData(updatedChartData);\n      setTableData(updatedTableData);\n      setIsRefreshing(false);\n    }, 1500);\n  }, []);\n\n  return (\n    <div className={`min-h-screen ${isDarkMode ? 'dark bg-gray-900' : 'bg-gray-50'}`}>\n      <div className=\"container mx-auto p-4 md:p-6 lg:p-8\">\n        <div className=\"flex flex-col md:flex-row justify-between items-start md:items-center gap-4 mb-8\">\n          <div>\n            <h1 className={`text-3xl md:text-4xl font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n              Analytics Dashboard\n            </h1>\n            <p className={`mt-2 ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n              Real-time insights and performance metrics\n            </p>\n          </div>\n          \n          <div className=\"flex gap-2\">\n            <Button\n              variant=\"outline\"\n              size=\"icon\"\n              onClick={toggleDarkMode}\n              className={isDarkMode ? 'border-gray-700' : ''}\n            >\n              {isDarkMode ? <Sun className=\"h-5 w-5\" /> : <Moon className=\"h-5 w-5\" />}\n            </Button>\n            \n            <Button\n              variant=\"outline\"\n              onClick={handleRefresh}\n              disabled={isRefreshing}\n              className={isDarkMode ? 'border-gray-700' : ''}\n            >\n              <RefreshCw className={`h-4 w-4 mr-2 ${isRefreshing ? 'animate-spin' : ''}`} />\n              Refresh\n            </Button>\n          </div>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 md:gap-6 mb-8\">\n          {metrics.map((metric, index) => {\n            const Icon = metric.id === '1' ? DollarSign : \n                        metric.id === '2' ? Users : \n                        metric.id === '3' ? ShoppingCart : Target;\n            \n            const TrendIcon = metric.trend === 'up' ? TrendingUp : TrendingDown;\n            const trendColor = metric.trend === 'up' ? 'text-green-500' : 'text-red-500';\n            const trendBgColor = metric.trend === 'up' ? 'bg-green-50 dark:bg-green-900/20' : 'bg-red-50 dark:bg-red-900/20';\n\n            return (\n              <motion.div\n                key={metric.id}\n                initial={{ opacity: 0, y: 20 }}\n                animate={{ opacity: 1, y: 0 }}\n                transition={{ duration: 0.4, delay: index * 0.1 }}\n              >\n                <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n                  <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                    <CardTitle className={`text-sm font-medium ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                      {metric.label}\n                    </CardTitle>\n                    <div className={`p-2 rounded-lg ${isDarkMode ? 'bg-gray-700' : 'bg-gray-100'}`}>\n                      <Icon className={`h-4 w-4 ${isDarkMode ? 'text-gray-300' : 'text-gray-600'}`} />\n                    </div>\n                  </CardHeader>\n                  <CardContent>\n                    <motion.div\n                      initial={{ scale: 0.5 }}\n                      animate={{ scale: 1 }}\n                      transition={{ duration: 0.5, delay: index * 0.1 + 0.2 }}\n                      className={`text-2xl font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}\n                    >\n                      {metric.id === '1' || metric.id === '3' ? \n                        metric.value.toLocaleString() : \n                        metric.id === '4' ? \n                        `${metric.value}%` : \n                        metric.value.toLocaleString()\n                      }\n                    </motion.div>\n                    <div className=\"flex items-center mt-2\">\n                      <div className={`flex items-center gap-1 px-2 py-1 rounded-full ${trendBgColor}`}>\n                        <TrendIcon className={`h-3 w-3 ${trendColor}`} />\n                        <span className={`text-xs font-medium ${trendColor}`}>\n                          {Math.abs(metric.change)}%\n                        </span>\n                      </div>\n                      <span className={`text-xs ml-2 ${isDarkMode ? 'text-gray-400' : 'text-gray-500'}`}>\n                        vs last period\n                      </span>\n                    </div>\n                  </CardContent>\n                </Card>\n              </motion.div>\n            );\n          })}\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-4 md:gap-6 mb-8\">\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Revenue Overview</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Daily revenue trends\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"h-[300px] w-full\">\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <LineChart\n                    data={chartData}\n                    margin={{ top: 5, right: 10, left: 0, bottom: 5 }}\n                  >\n                    <CartesianGrid \n                      strokeDasharray=\"3 3\" \n                      stroke={isDarkMode ? '#374151' : '#e5e7eb'}\n                    />\n                    <XAxis \n                      dataKey=\"date\" \n                      stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                      fontSize={12}\n                      tickFormatter={(value) => new Date(value).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n                    />\n                    <YAxis \n                      stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                      fontSize={12}\n                      tickFormatter={(value) => `$${(value / 1000).toFixed(0)}k`}\n                    />\n                    <Tooltip \n                      contentStyle={{\n                        backgroundColor: isDarkMode ? '#1f2937' : '#ffffff',\n                        border: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\n                        borderRadius: '6px',\n                        color: isDarkMode ? '#ffffff' : '#000000'\n                      }}\n                      labelFormatter={(value) => new Date(value).toLocaleDateString('en-US', { month: 'long', day: 'numeric', year: 'numeric' })}\n                      formatter={(value: number) => [`$${value.toLocaleString()}`, 'Revenue']}\n                    />\n                    <Line \n                      type=\"monotone\" \n                      dataKey=\"revenue\" \n                      stroke=\"#3b82f6\" \n                      strokeWidth={2}\n                      dot={{ fill: '#3b82f6', r: 4 }}\n                      activeDot={{ r: 6, fill: '#2563eb' }}\n                    />\n                  </LineChart>\n                </ResponsiveContainer>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>User Activity</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Active users over time\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              \n            </CardContent>\n          </Card>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-4 md:gap-6 mb-8\">\n          <Card className={`lg:col-span-2 ${isDarkMode ? 'bg-gray-800 border-gray-700' : ''}`}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Performance Metrics</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Combined view of key metrics\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <ResponsiveContainer width=\"100%\" height={300}>\n                <LineChart data={chartData}>\n                  <CartesianGrid strokeDasharray=\"3 3\" stroke={isDarkMode ? '#374151' : '#e5e7eb'} />\n                  <XAxis \n                    dataKey=\"date\" \n                    stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                    tick={{ fill: isDarkMode ? '#9ca3af' : '#6b7280' }}\n                    tickFormatter={(value) => new Date(value).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n                  />\n                  <YAxis \n                    stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                    tick={{ fill: isDarkMode ? '#9ca3af' : '#6b7280' }}\n                  />\n                  <Tooltip \n                    contentStyle={{\n                      backgroundColor: isDarkMode ? '#1f2937' : '#ffffff',\n                      border: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\n                      borderRadius: '6px',\n                      color: isDarkMode ? '#ffffff' : '#000000'\n                    }}\n                    labelFormatter={(value) => new Date(value).toLocaleDateString('en-US', { month: 'short', day: 'numeric', year: 'numeric' })}\n                  />\n                  <Legend \n                    wrapperStyle={{ color: isDarkMode ? '#9ca3af' : '#6b7280' }}\n                  />\n                  <Line \n                    type=\"monotone\" \n                    dataKey=\"revenue\" \n                    stroke=\"#3b82f6\" \n                    strokeWidth={2}\n                    dot={{ fill: '#3b82f6', r: 4 }}\n                    activeDot={{ r: 6 }}\n                    name=\"Revenue ($)\"\n                  />\n                  <Line \n                    type=\"monotone\" \n                    dataKey=\"users\" \n                    stroke=\"#10b981\" \n                    strokeWidth={2}\n                    dot={{ fill: '#10b981', r: 4 }}\n                    activeDot={{ r: 6 }}\n                    name=\"Users\"\n                  />\n                  <Line \n                    type=\"monotone\" \n                    dataKey=\"orders\" \n                    stroke=\"#f59e0b\" \n                    strokeWidth={2}\n                    dot={{ fill: '#f59e0b', r: 4 }}\n                    activeDot={{ r: 6 }}\n                    name=\"Orders\"\n                  />\n                </LineChart>\n              </ResponsiveContainer>\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Distribution</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Sales by category\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"h-[300px]\">\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <PieChart>\n                    <Pie\n                      data={mockPieData}\n                      cx=\"50%\"\n                      cy=\"50%\"\n                      labelLine={false}\n                      label={({ name, percent }) => `${name}: ${(percent * 100).toFixed(0)}%`}\n                      outerRadius={80}\n                      fill=\"#8884d8\"\n                      dataKey=\"value\"\n                    >\n                      {mockPieData.map((entry, index) => (\n                        <Cell key={`cell-${index}`} fill={entry.color} />\n                      ))}\n                    </Pie>\n                    <RechartsTooltip\n                      contentStyle={{\n                        backgroundColor: isDarkMode ? '#1f2937' : '#ffffff',\n                        border: isDarkMode ? '1px solid #374151' : '1px solid #e5e7eb',\n                        borderRadius: '6px',\n                        color: isDarkMode ? '#ffffff' : '#000000'\n                      }}\n                      formatter={(value: number) => `$${value.toLocaleString()}`}\n                    />\n                    <Legend\n                      verticalAlign=\"bottom\"\n                      height={36}\n                      iconType=\"circle\"\n                      wrapperStyle={{\n                        color: isDarkMode ? '#9ca3af' : '#4b5563'\n                      }}\n                    />\n                  </PieChart>\n                </ResponsiveContainer>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n          <CardHeader>\n            <CardTitle className={isDarkMode ? 'text-white' : ''}>Top Products</CardTitle>\n            <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n              Best performing products by revenue\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              <div className=\"rounded-md border\">\n                <Table>\n                  <TableHeader>\n                    <TableRow className={isDarkMode ? 'border-gray-700' : ''}>\n                      <TableHead className={isDarkMode ? 'text-gray-300' : ''}>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => handleSort('product')}\n                          className=\"flex items-center gap-1 hover:bg-transparent p-0\"\n                        >\n                          Product\n                          <ArrowUpDown className=\"h-4 w-4\" />\n                        </Button>\n                      </TableHead>\n                      <TableHead className={isDarkMode ? 'text-gray-300' : ''}>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => handleSort('sales')}\n                          className=\"flex items-center gap-1 hover:bg-transparent p-0\"\n                        >\n                          Sales\n                          <ArrowUpDown className=\"h-4 w-4\" />\n                        </Button>\n                      </TableHead>\n                      <TableHead className={isDarkMode ? 'text-gray-300' : ''}>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => handleSort('revenue')}\n                          className=\"flex items-center gap-1 hover:bg-transparent p-0\"\n                        >\n                          Revenue\n                          <ArrowUpDown className=\"h-4 w-4\" />\n                        </Button>\n                      </TableHead>\n                      <TableHead className={isDarkMode ? 'text-gray-300' : ''}>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => handleSort('status')}\n                          className=\"flex items-center gap-1 hover:bg-transparent p-0\"\n                        >\n                          Status\n                          <ArrowUpDown className=\"h-4 w-4\" />\n                        </Button>\n                      </TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {paginatedData().map((row) => (\n                      <TableRow \n                        key={row.id}\n                        className={isDarkMode ? 'border-gray-700 hover:bg-gray-700/50' : ''}\n                      >\n                        <TableCell className={`font-medium ${isDarkMode ? 'text-gray-200' : ''}`}>\n                          {row.product}\n                        </TableCell>\n                        <TableCell className={isDarkMode ? 'text-gray-300' : ''}>\n                          {row.sales.toLocaleString()}\n                        </TableCell>\n                        <TableCell className={isDarkMode ? 'text-gray-300' : ''}>\n                          ${row.revenue.toLocaleString()}\n                        </TableCell>\n                        <TableCell>\n                          <Badge \n                            variant={getStatusBadgeVariant(row.status)}\n                            className=\"capitalize\"\n                          >\n                            {row.status}\n                          </Badge>\n                        </TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              </div>\n\n              <div className=\"flex items-center justify-between\">\n                <p className={`text-sm ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                  Showing {((currentPage - 1) * itemsPerPage) + 1} to {Math.min(currentPage * itemsPerPage, tableData.length)} of {tableData.length} products\n                </p>\n                \n                <div className=\"flex items-center gap-2\">\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => setCurrentPage(prev => Math.max(1, prev - 1))}\n                    disabled={currentPage === 1}\n                    className={isDarkMode ? 'border-gray-700' : ''}\n                  >\n                    <ChevronLeft className=\"h-4 w-4\" />\n                    Previous\n                  </Button>\n                  \n                  <div className={`flex items-center gap-1 text-sm ${isDarkMode ? 'text-gray-300' : ''}`}>\n                    <span>Page {currentPage} of {totalPages}</span>\n                  </div>\n                  \n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => setCurrentPage(prev => Math.min(totalPages, prev + 1))}\n                    disabled={currentPage === totalPages}\n                    className={isDarkMode ? 'border-gray-700' : ''}\n                  >\n                    Next\n                    <ChevronRight className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 md:gap-6 mt-8\">\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Recent Activity</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4 max-h-[400px] overflow-y-auto pr-2\">\n                {mockActivityData.map((activity) => {\n                  const iconMap = {\n                    sale: <ShoppingBag className=\"h-4 w-4\" />,\n                    user: <UserPlus className=\"h-4 w-4\" />,\n                    payment: <CreditCard className=\"h-4 w-4\" />,\n                    order: <Package className=\"h-4 w-4\" />\n                  };\n\n                  const colorMap = {\n                    sale: isDarkMode ? 'bg-blue-900 text-blue-300' : 'bg-blue-100 text-blue-600',\n                    user: isDarkMode ? 'bg-green-900 text-green-300' : 'bg-green-100 text-green-600',\n                    payment: isDarkMode ? 'bg-purple-900 text-purple-300' : 'bg-purple-100 text-purple-600',\n                    order: isDarkMode ? 'bg-orange-900 text-orange-300' : 'bg-orange-100 text-orange-600'\n                  };\n\n                  return (\n                    <div\n                      key={activity.id}\n                      className={`flex items-start gap-3 p-3 rounded-lg transition-colors ${\n                        isDarkMode ? 'hover:bg-gray-700' : 'hover:bg-gray-100'\n                      }`}\n                    >\n                      <div className={`p-2 rounded-full ${colorMap[activity.type]}`}>\n                        {iconMap[activity.icon]}\n                      </div>\n                      <div className=\"flex-1 min-w-0\">\n                        <p className={`text-sm font-medium ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                          {activity.message}\n                        </p>\n                        <p className={`text-xs mt-1 ${isDarkMode ? 'text-gray-400' : 'text-gray-500'}`}>\n                          {activity.timestamp}\n                        </p>\n                      </div>\n                    </div>\n                  );\n                })}\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Quick Stats</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-6\">\n                {mockQuickStats.map((stat) => {\n                  const Icon = stat.icon;\n                  return (\n                    <div key={stat.id} className=\"space-y-2\">\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"flex items-center gap-2\">\n                          <div className={`p-2 rounded-lg ${stat.color} bg-opacity-10`}>\n                            <Icon className={`h-4 w-4 ${stat.color.replace('bg-', 'text-')}`} />\n                          </div>\n                          <span className={`text-sm font-medium ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>\n                            {stat.label}\n                          </span>\n                        </div>\n                        <span className={`text-lg font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                          {stat.value}\n                        </span>\n                      </div>\n                      <Progress \n                        value={stat.current} \n                        className={`h-2 ${isDarkMode ? 'bg-gray-700' : 'bg-gray-200'}`}\n                      />\n                      <div className=\"flex justify-between text-xs\">\n                        <span className={isDarkMode ? 'text-gray-500' : 'text-gray-400'}>\n                          {stat.current} / {stat.target}\n                        </span>\n                        <span className={`font-medium ${\n                          stat.current >= 80 \n                            ? 'text-green-500' \n                            : stat.current >= 60 \n                            ? 'text-yellow-500' \n                            : 'text-red-500'\n                        }`}>\n                          {stat.current >= 80 ? 'On Track' : stat.current >= 60 ? 'Fair' : 'Needs Attention'}\n                        </span>\n                      </div>\n                    </div>\n                  );\n                })}\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Alerts</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-3 max-h-[400px] overflow-y-auto\">\n                {alerts.map((alert) => {\n                  const Icon = getAlertIcon(alert.severity);\n                  return (\n                    <div\n                      key={alert.id}\n                      className={getAlertStyles(alert.severity, isDarkMode)}\n                    >\n                      <Icon className={`h-5 w-5 mt-0.5 flex-shrink-0 ${getAlertIconColor(alert.severity)}`} />\n                      <div className=\"flex-1 min-w-0\">\n                        <p className={`text-sm font-medium ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                          {alert.message}\n                        </p>\n                        <p className={`text-xs mt-1 ${isDarkMode ? 'text-gray-400' : 'text-gray-500'}`}>\n                          {alert.timestamp}\n                        </p>\n                      </div>\n                    </div>\n                  );\n                })}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}",
  "error": null,
  "overall_score": 54,
  "code_quality_score": 14,
  "architecture_score": 12,
  "performance_score": 11,
  "accessibility_score": 17,
  "metadata": {
    "document_id": "eval_room_553cef2310f6",
    "prompt_category": "intermediate",
    "prompt_complexity": 6.0
  },
  "raw_response": {
    "document_id": "eval_room_553cef2310f6",
    "mode": "parallel",
    "prompt": "Generate an analytics dashboard page with charts, data tables, real-time updates, dark mode, and responsive design",
    "content": "import { useState, useCallback } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Moon, Sun, RefreshCw } from 'lucide-react';\nimport { ArrowUpDown, ChevronLeft, ChevronRight } from 'lucide-react';\nimport { Badge } from '@/components/ui/badge';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\n\n\nimport { TrendingUp, Users, ShoppingCart, DollarSign } from 'lucide-react';\nimport { Progress } from '@/components/ui/progress';\nimport { TrendingUp, TrendingDown, ShoppingBag, UserPlus, CreditCard, Package } from 'lucide-react';\nimport { AreaChart, Area, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';\nimport { PieChart, Pie, Cell, ResponsiveContainer, Legend, Tooltip as RechartsTooltip } from 'recharts';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, Legend } from 'recharts';\n\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';\ninterface ActivityItem {\n  id: string;\n  type: 'sale' | 'user' | 'payment' | 'order';\n  message: string;\n  timestamp: string;\n  icon: 'sale' | 'user' | 'payment' | 'order';\n}\n\nconst mockActivityData: ActivityItem[] = [\n  { id: '1', type: 'sale', message: 'New sale: Premium Plan', timestamp: '2 minutes ago', icon: 'sale' },\n  { id: '2', type: 'user', message: 'New user registered', timestamp: '5 minutes ago', icon: 'user' },\n  { id: '3', type: 'payment', message: 'Payment received: $450', timestamp: '12 minutes ago', icon: 'payment' },\n  { id: '4', type: 'order', message: 'Order #1234 completed', timestamp: '18 minutes ago', icon: 'order' },\n  { id: '5', type: 'sale', message: 'New sale: Enterprise Plan', timestamp: '25 minutes ago', icon: 'sale' },\n  { id: '6', type: 'user', message: 'New user registered', timestamp: '32 minutes ago', icon: 'user' },\n  { id: '7', type: 'payment', message: 'Payment received: $890', timestamp: '45 minutes ago', icon: 'payment' },\n  { id: '8', type: 'order', message: 'Order #1235 completed', timestamp: '1 hour ago', icon: 'order' }\n];\nimport { TrendingUp, TrendingDown, DollarSign, Users, ShoppingCart, Target, AlertTriangle, AlertCircle, Info, CheckCircle\nt } from 'lucide-react';\nimport { motion } from 'framer-motion';\n\ninterface MetricData {\n  id: string;\n  label: string;\n  value: number;\n  change: number;\n  trend: 'up' | 'down';\n}\n\ninterface ChartDataPoint {\n  date: string;\n  revenue: number;\n  users: number;\n  orders: number;\n}\n\ninterface TableRow {\n  id: string;\n  product: string;\n  sales: number;\n  revenue: number;\n  status: 'active' | 'pending' | 'inactive';\n}\ninterface Alert {\n  id: string;\n  message: string;\n  severity: 'critical' | 'warning' | 'info' | 'success';\n  timestamp: string;\n}\n\nconst mockMetrics: MetricData[] = [\n  { id: '1', label: 'Total Revenue', value: 45231, change: 12.5, trend: 'up' },\n  { id: '2', label: 'Active Users', value: 2350, change: 8.2, trend: 'up' },\n  { id: '3', label: 'Total Orders', value: 1543, change: -3.1, trend: 'down' },\n  { id: '4', label: 'Conversion Rate', value: 3.24, change: 5.7, trend: 'up' }\n];\n\nconst mockChartData: ChartDataPoint[] = [\n  { date: '2024-01-01', revenue: 12000, users: 450, orders: 230 },\n  { date: '2024-01-02', revenue: 15000, users: 520, orders: 280 },\n  { date: '2024-01-03', revenue: 13500, users: 490, orders: 250 },\n  { date: '2024-01-04', revenue: 18000, users: 610, orders: 320 },\n  { date: '2024-01-05', revenue: 16500, users: 580, orders: 295 },\n  { date: '2024-01-06', revenue: 20000, users: 680, orders: 350 },\n  { date: '2024-01-07', revenue: 22000, users: 720, orders: 380 }\n];\n\nconst mockTableData: TableRow[] = [\n  { id: '1', product: 'Premium Plan', sales: 234, revenue: 23400, status: 'active' },\n  { id: '2', product: 'Basic Plan', sales: 567, revenue: 11340, status: 'active' },\n  { id: '3', product: 'Enterprise Plan', sales: 89, revenue: 44500, status: 'active' },\n  { id: '4', product: 'Starter Plan', sales: 432, revenue: 4320, status: 'pending' },\n  { id: '5', product: 'Pro Plan', sales: 156, revenue: 15600, status: 'inactive' }\n];\nconst mockAlerts: Alert[] = [\n  { id: '1', message: 'Server response time exceeded threshold', severity: 'critical', timestamp: '2 min ago' },\n  { id: '2', message: 'High memory usage detected on production', severity: 'warning', timestamp: '15 min ago' },\n  { id: '3', message: 'Database backup completed successfully', severity: 'success', timestamp: '1 hour ago' },\n  { id: '4', message: 'New feature deployment scheduled', severity: 'info', timestamp: '2 hours ago' },\n  { id: '5', message: 'API rate limit approaching maximum', severity: 'warning', timestamp: '3 hours ago' }\n];\n\ninterface QuickStat {\n  id: string;\n  label: string;\n  value: string;\n  target: number;\n  current: number;\n  icon: any;\n  color: string;\n}\n\nconst mockQuickStats: QuickStat[] = [\n  { \n    id: '1', \n    label: 'Monthly Goal', \n    value: '85%', \n    target: 100, \n    current: 85, \n    icon: TrendingUp, \n    color: 'bg-blue-500' \n  },\n  { \n    id: '2', \n    label: 'User Retention', \n    value: '92%', \n    target: 100, \n    current: 92, \n    icon: Users, \n    color: 'bg-green-500' \n  },\n  { \n    id: '3', \n    label: 'Order Fulfillment', \n    value: '78%', \n    target: 100, \n    current: 78, \n    icon: ShoppingCart, \n    color: 'bg-purple-500' \n  },\n  { \n    id: '4', \n    label: 'Revenue Target', \n    value: '67%', \n    target: 100, \n    current: 67, \n    icon: DollarSign, \n    color: 'bg-orange-500' \n  }\n];\nconst mockPieData = [\n  { name: 'Premium Plan', value: 23400, color: '#3b82f6' },\n  { name: 'Basic Plan', value: 11340, color: '#10b981' },\n  { name: 'Enterprise Plan', value: 44500, color: '#8b5cf6' },\n  { name: 'Starter Plan', value: 4320, color: '#f59e0b' },\n  { name: 'Pro Plan', value: 15600, color: '#ef4444' }\n];\n\nconst getAlertIcon = (severity: Alert['severity']) => {\n  switch (severity) {\n    case 'critical':\n      return AlertCircle;\n    case 'warning':\n      return AlertTriangle;\n    case 'info':\n      return Info;\n    case 'success':\n      return CheckCircle;\n  }\n};\n\nconst getAlertStyles = (severity: Alert['severity'], isDarkMode: boolean) => {\n  const baseStyles = 'flex items-start gap-3 p-3 rounded-lg border transition-colors';\n  \n  switch (severity) {\n    case 'critical':\n      return `${baseStyles} ${isDarkMode ? 'bg-red-950/30 border-red-900/50' : 'bg-red-50 border-red-200'}`;\n    case 'warning':\n      return `${baseStyles} ${isDarkMode ? 'bg-yellow-950/30 border-yellow-900/50' : 'bg-yellow-50 border-yellow-200'}`;\n    case 'info':\n      return `${baseStyles} ${isDarkMode ? 'bg-blue-950/30 border-blue-900/50' : 'bg-blue-50 border-blue-200'}`;\n    case 'success':\n      return `${baseStyles} ${isDarkMode ? 'bg-green-950/30 border-green-900/50' : 'bg-green-50 border-green-200'}`;\n  }\n};\n\nconst getAlertIconColor = (severity: Alert['severity']) => {\n  switch (severity) {\n    case 'critical':\n      return 'text-red-500';\n    case 'warning':\n      return 'text-yellow-500';\n    case 'info':\n      return 'text-blue-500';\n    case 'success':\n      return 'text-green-500';\n  }\n};\n\nexport default function AnalyticsDashboard() {\n  const [sortColumn, setSortColumn] = useState<keyof TableRow | null>(null);\n  const [sortDirection, setSortDirection] = useState<'asc' | 'desc'>('asc');\n  const [currentPage, setCurrentPage] = useState(1);\n  const itemsPerPage = 3;\n  const [isDarkMode, setIsDarkMode] = useState(false);\n  const [metrics, setMetrics] = useState<MetricData[]>(mockMetrics);\n  const [chartData, setChartData] = useState<ChartDataPoint[]>(mockChartData);\n  const [tableData, setTableData] = useState<TableRow[]>(mockTableData);\n  const [isRefreshing, setIsRefreshing] = useState(false);\n  const [alerts, setAlerts] = useState<Alert[]>(mockAlerts);\n\n  const toggleDarkMode = useCallback(() => {\n    setIsDarkMode(prev => !prev);\n  }, []);\n  const handleSort = useCallback((column: keyof TableRow) => {\n    if (sortColumn === column) {\n      setSortDirection(prev => prev === 'asc' ? 'desc' : 'asc');\n    } else {\n      setSortColumn(column);\n      setSortDirection('asc');\n    }\n  }, [sortColumn]);\n\n  const sortedData = useCallback(() => {\n    if (!sortColumn) return tableData;\n    \n    return [...tableData].sort((a, b) => {\n      const aValue = a[sortColumn];\n      const bValue = b[sortColumn];\n      \n      if (typeof aValue === 'number' && typeof bValue === 'number') {\n        return sortDirection === 'asc' ? aValue - bValue : bValue - aValue;\n      }\n      \n      if (typeof aValue === 'string' && typeof bValue === 'string') {\n        return sortDirection === 'asc' \n          ? aValue.localeCompare(bValue)\n          : bValue.localeCompare(aValue);\n      }\n      \n      return 0;\n    });\n  }, [tableData, sortColumn, sortDirection]);\n\n  const paginatedData = useCallback(() => {\n    const sorted = sortedData();\n    const startIndex = (currentPage - 1) * itemsPerPage;\n    const endIndex = startIndex + itemsPerPage;\n    return sorted.slice(startIndex, endIndex);\n  }, [sortedData, currentPage]);\n\n  const totalPages = Math.ceil(tableData.length / itemsPerPage);\n\n  const getStatusBadgeVariant = (status: TableRow['status']) => {\n    switch (status) {\n      case 'active':\n        return 'default';\n      case 'pending':\n        return 'secondary';\n      case 'inactive':\n        return 'outline';\n      default:\n        return 'default';\n    }\n  };\n\n  const handleRefresh = useCallback(() => {\n    setIsRefreshing(true);\n    \n    setTimeout(() => {\n      // Generate updated metrics with random variations\n      const updatedMetrics = mockMetrics.map(metric => ({\n        ...metric,\n        value: metric.value + Math.floor(Math.random() * 200 - 100),\n        change: parseFloat((Math.random() * 20 - 5).toFixed(1)),\n        trend: Math.random() > 0.5 ? 'up' as const : 'down' as const\n      }));\n      \n      // Generate updated chart data with random variations\n      const updatedChartData = mockChartData.map(point => ({\n        ...point,\n        revenue: point.revenue + Math.floor(Math.random() * 4000 - 2000),\n        users: point.users + Math.floor(Math.random() * 100 - 50),\n        orders: point.orders + Math.floor(Math.random() * 50 - 25)\n      }));\n      \n      // Generate updated table data with random variations\n      const updatedTableData = mockTableData.map(row => ({\n        ...row,\n        sales: row.sales + Math.floor(Math.random() * 40 - 20),\n        revenue: row.revenue + Math.floor(Math.random() * 2000 - 1000)\n      }));\n      \n      setMetrics(updatedMetrics);\n      setChartData(updatedChartData);\n      setTableData(updatedTableData);\n      setIsRefreshing(false);\n    }, 1500);\n  }, []);\n\n  return (\n    <div className={`min-h-screen ${isDarkMode ? 'dark bg-gray-900' : 'bg-gray-50'}`}>\n      <div className=\"container mx-auto p-4 md:p-6 lg:p-8\">\n        <div className=\"flex flex-col md:flex-row justify-between items-start md:items-center gap-4 mb-8\">\n          <div>\n            <h1 className={`text-3xl md:text-4xl font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n              Analytics Dashboard\n            </h1>\n            <p className={`mt-2 ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n              Real-time insights and performance metrics\n            </p>\n          </div>\n          \n          <div className=\"flex gap-2\">\n            <Button\n              variant=\"outline\"\n              size=\"icon\"\n              onClick={toggleDarkMode}\n              className={isDarkMode ? 'border-gray-700' : ''}\n            >\n              {isDarkMode ? <Sun className=\"h-5 w-5\" /> : <Moon className=\"h-5 w-5\" />}\n            </Button>\n            \n            <Button\n              variant=\"outline\"\n              onClick={handleRefresh}\n              disabled={isRefreshing}\n              className={isDarkMode ? 'border-gray-700' : ''}\n            >\n              <RefreshCw className={`h-4 w-4 mr-2 ${isRefreshing ? 'animate-spin' : ''}`} />\n              Refresh\n            </Button>\n          </div>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 md:gap-6 mb-8\">\n          {metrics.map((metric, index) => {\n            const Icon = metric.id === '1' ? DollarSign : \n                        metric.id === '2' ? Users : \n                        metric.id === '3' ? ShoppingCart : Target;\n            \n            const TrendIcon = metric.trend === 'up' ? TrendingUp : TrendingDown;\n            const trendColor = metric.trend === 'up' ? 'text-green-500' : 'text-red-500';\n            const trendBgColor = metric.trend === 'up' ? 'bg-green-50 dark:bg-green-900/20' : 'bg-red-50 dark:bg-red-900/20';\n\n            return (\n              <motion.div\n                key={metric.id}\n                initial={{ opacity: 0, y: 20 }}\n                animate={{ opacity: 1, y: 0 }}\n                transition={{ duration: 0.4, delay: index * 0.1 }}\n              >\n                <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n                  <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                    <CardTitle className={`text-sm font-medium ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                      {metric.label}\n                    </CardTitle>\n                    <div className={`p-2 rounded-lg ${isDarkMode ? 'bg-gray-700' : 'bg-gray-100'}`}>\n                      <Icon className={`h-4 w-4 ${isDarkMode ? 'text-gray-300' : 'text-gray-600'}`} />\n                    </div>\n                  </CardHeader>\n                  <CardContent>\n                    <motion.div\n                      initial={{ scale: 0.5 }}\n                      animate={{ scale: 1 }}\n                      transition={{ duration: 0.5, delay: index * 0.1 + 0.2 }}\n                      className={`text-2xl font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}\n                    >\n                      {metric.id === '1' || metric.id === '3' ? \n                        metric.value.toLocaleString() : \n                        metric.id === '4' ? \n                        `${metric.value}%` : \n                        metric.value.toLocaleString()\n                      }\n                    </motion.div>\n                    <div className=\"flex items-center mt-2\">\n                      <div className={`flex items-center gap-1 px-2 py-1 rounded-full ${trendBgColor}`}>\n                        <TrendIcon className={`h-3 w-3 ${trendColor}`} />\n                        <span className={`text-xs font-medium ${trendColor}`}>\n                          {Math.abs(metric.change)}%\n                        </span>\n                      </div>\n                      <span className={`text-xs ml-2 ${isDarkMode ? 'text-gray-400' : 'text-gray-500'}`}>\n                        vs last period\n                      </span>\n                    </div>\n                  </CardContent>\n                </Card>\n              </motion.div>\n            );\n          })}\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-4 md:gap-6 mb-8\">\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Revenue Overview</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Daily revenue trends\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"h-[300px] w-full\">\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <LineChart\n                    data={chartData}\n                    margin={{ top: 5, right: 10, left: 0, bottom: 5 }}\n                  >\n                    <CartesianGrid \n                      strokeDasharray=\"3 3\" \n                      stroke={isDarkMode ? '#374151' : '#e5e7eb'}\n                    />\n                    <XAxis \n                      dataKey=\"date\" \n                      stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                      fontSize={12}\n                      tickFormatter={(value) => new Date(value).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n                    />\n                    <YAxis \n                      stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                      fontSize={12}\n                      tickFormatter={(value) => `$${(value / 1000).toFixed(0)}k`}\n                    />\n                    <Tooltip \n                      contentStyle={{\n                        backgroundColor: isDarkMode ? '#1f2937' : '#ffffff',\n                        border: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\n                        borderRadius: '6px',\n                        color: isDarkMode ? '#ffffff' : '#000000'\n                      }}\n                      labelFormatter={(value) => new Date(value).toLocaleDateString('en-US', { month: 'long', day: 'numeric', year: 'numeric' })}\n                      formatter={(value: number) => [`$${value.toLocaleString()}`, 'Revenue']}\n                    />\n                    <Line \n                      type=\"monotone\" \n                      dataKey=\"revenue\" \n                      stroke=\"#3b82f6\" \n                      strokeWidth={2}\n                      dot={{ fill: '#3b82f6', r: 4 }}\n                      activeDot={{ r: 6, fill: '#2563eb' }}\n                    />\n                  </LineChart>\n                </ResponsiveContainer>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>User Activity</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Active users over time\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              \n            </CardContent>\n          </Card>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-4 md:gap-6 mb-8\">\n          <Card className={`lg:col-span-2 ${isDarkMode ? 'bg-gray-800 border-gray-700' : ''}`}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Performance Metrics</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Combined view of key metrics\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <ResponsiveContainer width=\"100%\" height={300}>\n                <LineChart data={chartData}>\n                  <CartesianGrid strokeDasharray=\"3 3\" stroke={isDarkMode ? '#374151' : '#e5e7eb'} />\n                  <XAxis \n                    dataKey=\"date\" \n                    stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                    tick={{ fill: isDarkMode ? '#9ca3af' : '#6b7280' }}\n                    tickFormatter={(value) => new Date(value).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n                  />\n                  <YAxis \n                    stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                    tick={{ fill: isDarkMode ? '#9ca3af' : '#6b7280' }}\n                  />\n                  <Tooltip \n                    contentStyle={{\n                      backgroundColor: isDarkMode ? '#1f2937' : '#ffffff',\n                      border: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\n                      borderRadius: '6px',\n                      color: isDarkMode ? '#ffffff' : '#000000'\n                    }}\n                    labelFormatter={(value) => new Date(value).toLocaleDateString('en-US', { month: 'short', day: 'numeric', year: 'numeric' })}\n                  />\n                  <Legend \n                    wrapperStyle={{ color: isDarkMode ? '#9ca3af' : '#6b7280' }}\n                  />\n                  <Line \n                    type=\"monotone\" \n                    dataKey=\"revenue\" \n                    stroke=\"#3b82f6\" \n                    strokeWidth={2}\n                    dot={{ fill: '#3b82f6', r: 4 }}\n                    activeDot={{ r: 6 }}\n                    name=\"Revenue ($)\"\n                  />\n                  <Line \n                    type=\"monotone\" \n                    dataKey=\"users\" \n                    stroke=\"#10b981\" \n                    strokeWidth={2}\n                    dot={{ fill: '#10b981', r: 4 }}\n                    activeDot={{ r: 6 }}\n                    name=\"Users\"\n                  />\n                  <Line \n                    type=\"monotone\" \n                    dataKey=\"orders\" \n                    stroke=\"#f59e0b\" \n                    strokeWidth={2}\n                    dot={{ fill: '#f59e0b', r: 4 }}\n                    activeDot={{ r: 6 }}\n                    name=\"Orders\"\n                  />\n                </LineChart>\n              </ResponsiveContainer>\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Distribution</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Sales by category\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"h-[300px]\">\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <PieChart>\n                    <Pie\n                      data={mockPieData}\n                      cx=\"50%\"\n                      cy=\"50%\"\n                      labelLine={false}\n                      label={({ name, percent }) => `${name}: ${(percent * 100).toFixed(0)}%`}\n                      outerRadius={80}\n                      fill=\"#8884d8\"\n                      dataKey=\"value\"\n                    >\n                      {mockPieData.map((entry, index) => (\n                        <Cell key={`cell-${index}`} fill={entry.color} />\n                      ))}\n                    </Pie>\n                    <RechartsTooltip\n                      contentStyle={{\n                        backgroundColor: isDarkMode ? '#1f2937' : '#ffffff',\n                        border: isDarkMode ? '1px solid #374151' : '1px solid #e5e7eb',\n                        borderRadius: '6px',\n                        color: isDarkMode ? '#ffffff' : '#000000'\n                      }}\n                      formatter={(value: number) => `$${value.toLocaleString()}`}\n                    />\n                    <Legend\n                      verticalAlign=\"bottom\"\n                      height={36}\n                      iconType=\"circle\"\n                      wrapperStyle={{\n                        color: isDarkMode ? '#9ca3af' : '#4b5563'\n                      }}\n                    />\n                  </PieChart>\n                </ResponsiveContainer>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n          <CardHeader>\n            <CardTitle className={isDarkMode ? 'text-white' : ''}>Top Products</CardTitle>\n            <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n              Best performing products by revenue\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              <div className=\"rounded-md border\">\n                <Table>\n                  <TableHeader>\n                    <TableRow className={isDarkMode ? 'border-gray-700' : ''}>\n                      <TableHead className={isDarkMode ? 'text-gray-300' : ''}>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => handleSort('product')}\n                          className=\"flex items-center gap-1 hover:bg-transparent p-0\"\n                        >\n                          Product\n                          <ArrowUpDown className=\"h-4 w-4\" />\n                        </Button>\n                      </TableHead>\n                      <TableHead className={isDarkMode ? 'text-gray-300' : ''}>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => handleSort('sales')}\n                          className=\"flex items-center gap-1 hover:bg-transparent p-0\"\n                        >\n                          Sales\n                          <ArrowUpDown className=\"h-4 w-4\" />\n                        </Button>\n                      </TableHead>\n                      <TableHead className={isDarkMode ? 'text-gray-300' : ''}>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => handleSort('revenue')}\n                          className=\"flex items-center gap-1 hover:bg-transparent p-0\"\n                        >\n                          Revenue\n                          <ArrowUpDown className=\"h-4 w-4\" />\n                        </Button>\n                      </TableHead>\n                      <TableHead className={isDarkMode ? 'text-gray-300' : ''}>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => handleSort('status')}\n                          className=\"flex items-center gap-1 hover:bg-transparent p-0\"\n                        >\n                          Status\n                          <ArrowUpDown className=\"h-4 w-4\" />\n                        </Button>\n                      </TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {paginatedData().map((row) => (\n                      <TableRow \n                        key={row.id}\n                        className={isDarkMode ? 'border-gray-700 hover:bg-gray-700/50' : ''}\n                      >\n                        <TableCell className={`font-medium ${isDarkMode ? 'text-gray-200' : ''}`}>\n                          {row.product}\n                        </TableCell>\n                        <TableCell className={isDarkMode ? 'text-gray-300' : ''}>\n                          {row.sales.toLocaleString()}\n                        </TableCell>\n                        <TableCell className={isDarkMode ? 'text-gray-300' : ''}>\n                          ${row.revenue.toLocaleString()}\n                        </TableCell>\n                        <TableCell>\n                          <Badge \n                            variant={getStatusBadgeVariant(row.status)}\n                            className=\"capitalize\"\n                          >\n                            {row.status}\n                          </Badge>\n                        </TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              </div>\n\n              <div className=\"flex items-center justify-between\">\n                <p className={`text-sm ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                  Showing {((currentPage - 1) * itemsPerPage) + 1} to {Math.min(currentPage * itemsPerPage, tableData.length)} of {tableData.length} products\n                </p>\n                \n                <div className=\"flex items-center gap-2\">\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => setCurrentPage(prev => Math.max(1, prev - 1))}\n                    disabled={currentPage === 1}\n                    className={isDarkMode ? 'border-gray-700' : ''}\n                  >\n                    <ChevronLeft className=\"h-4 w-4\" />\n                    Previous\n                  </Button>\n                  \n                  <div className={`flex items-center gap-1 text-sm ${isDarkMode ? 'text-gray-300' : ''}`}>\n                    <span>Page {currentPage} of {totalPages}</span>\n                  </div>\n                  \n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => setCurrentPage(prev => Math.min(totalPages, prev + 1))}\n                    disabled={currentPage === totalPages}\n                    className={isDarkMode ? 'border-gray-700' : ''}\n                  >\n                    Next\n                    <ChevronRight className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 md:gap-6 mt-8\">\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Recent Activity</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4 max-h-[400px] overflow-y-auto pr-2\">\n                {mockActivityData.map((activity) => {\n                  const iconMap = {\n                    sale: <ShoppingBag className=\"h-4 w-4\" />,\n                    user: <UserPlus className=\"h-4 w-4\" />,\n                    payment: <CreditCard className=\"h-4 w-4\" />,\n                    order: <Package className=\"h-4 w-4\" />\n                  };\n\n                  const colorMap = {\n                    sale: isDarkMode ? 'bg-blue-900 text-blue-300' : 'bg-blue-100 text-blue-600',\n                    user: isDarkMode ? 'bg-green-900 text-green-300' : 'bg-green-100 text-green-600',\n                    payment: isDarkMode ? 'bg-purple-900 text-purple-300' : 'bg-purple-100 text-purple-600',\n                    order: isDarkMode ? 'bg-orange-900 text-orange-300' : 'bg-orange-100 text-orange-600'\n                  };\n\n                  return (\n                    <div\n                      key={activity.id}\n                      className={`flex items-start gap-3 p-3 rounded-lg transition-colors ${\n                        isDarkMode ? 'hover:bg-gray-700' : 'hover:bg-gray-100'\n                      }`}\n                    >\n                      <div className={`p-2 rounded-full ${colorMap[activity.type]}`}>\n                        {iconMap[activity.icon]}\n                      </div>\n                      <div className=\"flex-1 min-w-0\">\n                        <p className={`text-sm font-medium ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                          {activity.message}\n                        </p>\n                        <p className={`text-xs mt-1 ${isDarkMode ? 'text-gray-400' : 'text-gray-500'}`}>\n                          {activity.timestamp}\n                        </p>\n                      </div>\n                    </div>\n                  );\n                })}\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Quick Stats</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-6\">\n                {mockQuickStats.map((stat) => {\n                  const Icon = stat.icon;\n                  return (\n                    <div key={stat.id} className=\"space-y-2\">\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"flex items-center gap-2\">\n                          <div className={`p-2 rounded-lg ${stat.color} bg-opacity-10`}>\n                            <Icon className={`h-4 w-4 ${stat.color.replace('bg-', 'text-')}`} />\n                          </div>\n                          <span className={`text-sm font-medium ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>\n                            {stat.label}\n                          </span>\n                        </div>\n                        <span className={`text-lg font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                          {stat.value}\n                        </span>\n                      </div>\n                      <Progress \n                        value={stat.current} \n                        className={`h-2 ${isDarkMode ? 'bg-gray-700' : 'bg-gray-200'}`}\n                      />\n                      <div className=\"flex justify-between text-xs\">\n                        <span className={isDarkMode ? 'text-gray-500' : 'text-gray-400'}>\n                          {stat.current} / {stat.target}\n                        </span>\n                        <span className={`font-medium ${\n                          stat.current >= 80 \n                            ? 'text-green-500' \n                            : stat.current >= 60 \n                            ? 'text-yellow-500' \n                            : 'text-red-500'\n                        }`}>\n                          {stat.current >= 80 ? 'On Track' : stat.current >= 60 ? 'Fair' : 'Needs Attention'}\n                        </span>\n                      </div>\n                    </div>\n                  );\n                })}\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Alerts</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-3 max-h-[400px] overflow-y-auto\">\n                {alerts.map((alert) => {\n                  const Icon = getAlertIcon(alert.severity);\n                  return (\n                    <div\n                      key={alert.id}\n                      className={getAlertStyles(alert.severity, isDarkMode)}\n                    >\n                      <Icon className={`h-5 w-5 mt-0.5 flex-shrink-0 ${getAlertIconColor(alert.severity)}`} />\n                      <div className=\"flex-1 min-w-0\">\n                        <p className={`text-sm font-medium ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                          {alert.message}\n                        </p>\n                        <p className={`text-xs mt-1 ${isDarkMode ? 'text-gray-400' : 'text-gray-500'}`}>\n                          {alert.timestamp}\n                        </p>\n                      </div>\n                    </div>\n                  );\n                })}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}",
    "error": null,
    "elapsed_time": 84.36924386024475,
    "success": true
  }
}