{
  "prompt_id": "algorithm_visualizer",
  "prompt_name": "Algorithm Visualizer",
  "mode": "parallel",
  "run_number": 33,
  "timestamp": "2025-10-14T00:10:33.344760",
  "response_time": 104.39192414283752,
  "total_tokens": null,
  "response_content": "import { useState, useCallback } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Slider } from '@/components/ui/slider';\nimport { Play, Pause, RotateCcw, Zap, BarChart3 } from 'lucide-react';\nimport { motion } from 'framer-motion';\n\ninterface ArrayElement {\n  value: number;\n  id: string;\n  isComparing?: boolean;\n  isSwapping?: boolean;\n  isSorted?: boolean;\n}\n\ninterface AlgorithmStep {\n  array: ArrayElement[];\n  comparingIndices: number[];\n  swappingIndices: number[];\n  sortedIndices: number[];\n}\n\ntype AlgorithmType = 'bubble' | 'quick' | 'merge' | 'insertion';\n\nconst NEON_COLORS = [\n  '#00ffff',\n  '#ff00ff', \n  '#00ff00',\n  '#ffff00',\n  '#ff0066',\n  '#00ffaa'\n];\n\nconst mockAlgorithms = [\n  { id: 'bubble', name: 'Bubble Sort', complexity: 'O(n\u00b2)' },\n  { id: 'quick', name: 'Quick Sort', complexity: 'O(n log n)' },\n  { id: 'merge', name: 'Merge Sort', complexity: 'O(n log n)' },\n  { id: 'insertion', name: 'Insertion Sort', complexity: 'O(n\u00b2)' }\n];\n\n// Animation control using useEffect\nconst useAnimationLoop = (\n  isPlaying: boolean,\n  steps: AlgorithmStep[],\n  currentStep: number,\n  speed: number[],\n  onStepComplete: () => void,\n  onAnimationEnd: () => void\n) => {\n  const [animationId, setAnimationId] = useState<NodeJS.Timeout | null>(null);\n\n  const cleanup = useCallback(() => {\n    if (animationId) {\n      clearTimeout(animationId);\n      setAnimationId(null);\n    }\n  }, [animationId]);\n\n  const animate = useCallback(() => {\n    if (currentStep < steps.length - 1) {\n      const delay = 1000 - speed[0] * 9.5; // Convert speed (0-100) to delay (1000ms-50ms)\n      const id = setTimeout(() => {\n        onStepComplete();\n      }, delay);\n      setAnimationId(id);\n    } else if (currentStep >= steps.length - 1 && steps.length > 0) {\n      onAnimationEnd();\n    }\n  }, [currentStep, steps.length, speed, onStepComplete, onAnimationEnd]);\n\n  return { animate, cleanup };\n};\n\nexport default function AlgorithmVisualizer() {\n  const [array, setArray] = useState<ArrayElement[]>([]);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [speed, setSpeed] = useState([50]);\n  const [arraySize, setArraySize] = useState([20]);\n  const [selectedAlgorithm, setSelectedAlgorithm] = useState<AlgorithmType>('bubble');\n  const [currentStep, setCurrentStep] = useState(0);\n  const [steps, setSteps] = useState<AlgorithmStep[]>([]);\n\n  // Animation loop effect\n  const handleStepComplete = useCallback(() => {\n    setCurrentStep(prev => prev + 1);\n  }, []);\n\n  const handleAnimationEnd = useCallback(() => {\n    setIsPlaying(false);\n  }, []);\n\n  const { animate, cleanup } = useAnimationLoop(\n    isPlaying,\n    steps,\n    currentStep,\n    speed,\n    handleStepComplete,\n    handleAnimationEnd\n  );\n\n  // Trigger animation when playing\n  useState(() => {\n    if (isPlaying && steps.length > 0) {\n      animate();\n    }\n    return cleanup;\n  });\n\n  const generateRandomArray = useCallback(() => {\n    const newArray: ArrayElement[] = Array.from({ length: arraySize[0] }, (_, index) => ({\n      value: Math.floor(Math.random() * 100) + 5,\n      id: `element-${index}-${Date.now()}`,\n      isComparing: false,\n      isSwapping: false,\n      isSorted: false\n    }));\n    setArray(newArray);\n    setSteps([]);\n    setCurrentStep(0);\n    setIsPlaying(false);\n  }, [arraySize]);\n\n  const resetVisualization = useCallback(() => {\n\nsetIsPlaying(false);\n    setCurrentStep(0);\n    setSteps([]);\n    generateRandomArray();\n        \n  }, [generateRandomArray]);\n\n  const startVisualization = useCallback(() => {\n    if (steps.length === 0 || currentStep >= steps.length) {\n      return;\n    }\n    \n    setIsPlaying(true);\n    \n    // Apply current step to array\n    if (steps[currentStep]) {\n      setArray(steps[currentStep].array);\n    }\n  }, [steps, speed, currentStep]);\n\n  const pauseVisualization = useCallback(() => {\n\n    setIsPlaying(false);\n  }, []);\n\n  const generateSortingSteps = useCallback((algorithm: AlgorithmType) => {\n    const localArray = [...array];\n    const allSteps: AlgorithmStep[] = [];\n    \n    const addStep = (arr: ArrayElement[], comparing: number[] = [], swapping: number[] = [], sorted: number[] = []) => {\n      allSteps.push({\n        array: arr.map(el => ({ ...el })),\n        comparingIndices: [...comparing],\n        swappingIndices: [...swapping],\n        sortedIndices: [...sorted]\n      });\n    };\n\n    // Initial state\n    addStep(localArray);\n\n    switch (algorithm) {\n      case 'bubble': {\n        const sortedIndices: number[] = [];\n        for (let i = 0; i < localArray.length - 1; i++) {\n          for (let j = 0; j < localArray.length - i - 1; j++) {\n            // Comparing\n            addStep(localArray, [j, j + 1], [], sortedIndices);\n            \n            if (localArray[j].value > localArray[j + 1].value) {\n              // Swapping\n              addStep(localArray, [], [j, j + 1], sortedIndices);\n              [localArray[j], localArray[j + 1]] = [localArray[j + 1], localArray[j]];\n              addStep(localArray, [], [], sortedIndices);\n            }\n          }\n          sortedIndices.push(localArray.length - i - 1);\n          addStep(localArray, [], [], sortedIndices);\n        }\n        sortedIndices.push(0);\n        addStep(localArray, [], [], sortedIndices);\n        break;\n      }\n\n      case 'insertion': {\n        const sortedIndices: number[] = [0];\n        addStep(localArray, [], [], sortedIndices);\n        \n        for (let i = 1; i < localArray.length; i++) {\n          const key = localArray[i];\n          let j = i - 1;\n          \n          addStep(localArray, [i], [], sortedIndices);\n          \n          while (j >= 0 && localArray[j].value > key.value) {\n            addStep(localArray, [j, j + 1], [], sortedIndices);\n            addStep(localArray, [], [j, j + 1], sortedIndices);\n            localArray[j + 1] = localArray[j];\n            addStep(localArray, [], [], sortedIndices);\n            j--;\n          }\n          \n          localArray[j + 1] = key;\n          sortedIndices.push(i);\n          addStep(localArray, [], [], sortedIndices);\n        }\n        break;\n      }\n\n      case 'quick': {\n        const sortedIndices: number[] = [];\n        \n        const partition = (low: number, high: number): number => {\n          const pivot = localArray[high].value;\n          let i = low - 1;\n          \n          addStep(localArray, [high], [], sortedIndices);\n          \n          for (let j = low; j < high; j++) {\n            addStep(localArray, [j, high], [], sortedIndices);\n            \n            if (localArray[j].value < pivot) {\n              i++;\n              if (i !== j) {\n                addStep(localArray, [], [i, j], sortedIndices);\n                [localArray[i], localArray[j]] = [localArray[j], localArray[i]];\n                addStep(localArray, [], [], sortedIndices);\n              }\n            }\n          }\n          \n          addStep(localArray, [], [i + 1, high], sortedIndices);\n          [localArray[i + 1], localArray[high]] = [localArray[high], localArray[i + 1]];\n          sortedIndices.push(i + 1);\n          addStep(localArray, [], [], sortedIndices);\n          \n          return i + 1;\n        };\n        \n        const quickSort = (low: number, high: number) => {\n          if (low < high) {\n            const pi = partition(low, high);\n            quickSort(low, pi - 1);\n            quickSort(pi + 1, high);\n          } else if (low === high) {\n            sortedIndices.push(low);\n            addStep(localArray, [], [], sortedIndices);\n          }\n        };\n        \n        quickSort(0, localArray.length - 1);\n        break;\n      }\n\n      case 'merge': {\n        const sortedIndices: number[] = [];\n        \n        const merge = (left: number, mid: number, right: number) => {\n          const leftArr = localArray.slice(left, mid + 1);\n          const rightArr = localArray.slice(mid + 1, right + 1);\n          \n          let i = 0, j = 0, k = left;\n          \n          while (i < leftArr.length && j < rightArr.length) {\n            addStep(localArray, [left + i, mid + 1 + j], [], sortedIndices);\n            \n            if (leftArr[i].value <= rightArr[j].value) {\n              addStep(localArray, [], [k], sortedIndices);\n              localArray[k] = leftArr[i];\n              i++;\n            } else {\n              addStep(localArray, [], [k], sortedIndices);\n              localArray[k] = rightArr[j];\n              j++;\n            }\n            k++;\n            addStep(localArray, [], [], sortedIndices);\n          }\n          \n          while (i < leftArr.length) {\n            addStep(localArray, [], [k], sortedIndices);\n            localArray[k] = leftArr[i];\n            i++;\n            k++;\n            addStep(localArray, [], [], sortedIndices);\n          }\n          \n          while (j < rightArr.length) {\n            addStep(localArray, [], [k], sortedIndices);\n            localArray[k] = rightArr[j];\n            j++;\n            k++;\n            addStep(localArray, [], [], sortedIndices);\n          }\n          \n          if (left === 0 && right === localArray.length - 1) {\n            for (let idx = 0; idx < localArray.length; idx++) {\n              sortedIndices.push(idx);\n            }\n            addStep(localArray, [], [], sortedIndices);\n          }\n        };\n        \n        const mergeSort = (left: number, right: number) => {\n          if (left < right) {\n            const mid = Math.floor((left + right) / 2);\n            mergeSort(left, mid);\n            mergeSort(mid + 1, right);\n            merge(left, mid, right);\n          }\n        };\n        \n        mergeSort(0, localArray.length - 1);\n        break;\n      }\n    }\n\n    setSteps(allSteps);\n    setCurrentStep(0);\n  }, [array]);\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-gray-900 via-purple-900 to-gray-900 p-8\">\n      <div className=\"max-w-7xl mx-auto space-y-8\">\n        <motion.div\n          initial={{ opacity: 0, y: -20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.8 }}\n          className=\"text-center space-y-4\"\n        >\n          <motion.h1\n            className=\"text-6xl font-bold bg-gradient-to-r from-cyan-400 via-purple-400 to-pink-400 bg-clip-text text-transparent\"\n            animate={{\n              textShadow: [\n                '0 0 20px rgba(0, 255, 255, 0.5)',\n                '0 0 40px rgba(255, 0, 255, 0.5)',\n                '0 0 20px rgba(0, 255, 255, 0.5)'\n              ]\n            }}\n            transition={{ duration: 2, repeat: Infinity }}\n          >\n            Algorithm Visualizer\n          </motion.h1>\n          \n          <div className=\"flex items-center justify-center gap-4\">\n            <motion.div\n              initial={{ scale: 0 }}\n              animate={{ scale: 1 }}\n              transition={{ delay: 0.3, type: 'spring' }}\n              className=\"px-6 py-2 bg-purple-500/20 border border-purple-400/50 rounded-full backdrop-blur-sm\"\n            >\n              <span className=\"text-2xl font-semibold text-purple-300\">\n                {mockAlgorithms.find(a => a.id === selectedAlgorithm)?.name || 'Bubble Sort'}\n              </span>\n            </motion.div>\n            \n            <motion.div\n              initial={{ scale: 0 }}\n              animate={{ scale: 1 }}\n              transition={{ delay: 0.5, type: 'spring' }}\n              className=\"px-4 py-2 bg-cyan-500/20 border border-cyan-400/50 rounded-full backdrop-blur-sm relative overflow-hidden\"\n            >\n              <motion.div\n                className=\"absolute inset-0 bg-gradient-to-r from-transparent via-cyan-400/20 to-transparent\"\n                animate={{ x: ['-100%', '200%'] }}\n                transition={{ duration: 2, repeat: Infinity, ease: 'linear' }}\n              />\n              <div className=\"relative flex items-center gap-2\">\n                <BarChart3 className=\"w-4 h-4 text-cyan-400\" />\n                <span className=\"text-sm font-mono text-cyan-300\">\n                  {mockAlgorithms.find(a => a.id === selectedAlgorithm)?.complexity || 'O(n\u00b2)'}\n                </span>\n              </div>\n            </motion.div>\n          </div>\n        </motion.div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-6\">\n          <div className=\"lg:col-span-1 space-y-6\">\n            <motion.div\n              initial={{ opacity: 0, x: -50 }}\n              animate={{ opacity: 1, x: 0 }}\n              className=\"bg-gray-900/50 backdrop-blur-lg border border-cyan-500/30 rounded-xl p-6 shadow-2xl shadow-cyan-500/20\"\n            >\n              <div className=\"space-y-6\">\n                {/* Algorithm Selection */}\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center gap-2 mb-4\">\n                    <Zap className=\"w-5 h-5 text-cyan-400\" />\n                    <h3 className=\"text-cyan-400 font-bold text-lg tracking-wider\">ALGORITHM</h3>\n                  </div>\n                  <div className=\"grid grid-cols-1 gap-2\">\n                    {mockAlgorithms.map((algo) => (\n                      <motion.button\n                        key={algo.id}\n                        whileHover={{ scale: 1.02 }}\n                        whileTap={{ scale: 0.98 }}\n                        onClick={() => setSelectedAlgorithm(algo.id as AlgorithmType)}\n                        className={`p-3 rounded-lg border transition-all duration-300 text-left ${\n                          selectedAlgorithm === algo.id\n                            ? 'bg-cyan-500/20 border-cyan-400 shadow-lg shadow-cyan-500/50'\n                            : 'bg-gray-800/50 border-gray-700 hover:border-cyan-500/50'\n                        }`}\n                      >\n                        <div className=\"font-semibold text-white\">{algo.name}</div>\n                        <div className=\"text-xs text-gray-400 mt-1\">{algo.complexity}</div>\n                      </motion.button>\n                    ))}\n                  </div>\n                </div>\n\n                {/* Array Size Control */}\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center gap-2\">\n                      <BarChart3 className=\"w-4 h-4 text-purple-400\" />\n                      <label className=\"text-purple-400 font-semibold text-sm tracking-wide\">\n                        ARRAY SIZE\n                      </label>\n                    </div>\n                    <span className=\"text-white font-bold text-lg\">{arraySize[0]}</span>\n                  </div>\n                  <Slider\n                    value={arraySize}\n                    onValueChange={setArraySize}\n                    min={5}\n                    max={50}\n                    step={1}\n                    className=\"cursor-pointer\"\n                    disabled={isPlaying}\n                  />\n                </div>\n\n                {/* Speed Control */}\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center gap-2\">\n                      <Zap className=\"w-4 h-4 text-yellow-400\" />\n                      <label className=\"text-yellow-400 font-semibold text-sm tracking-wide\">\n                        SPEED\n                      </label>\n                    </div>\n                    <span className=\"text-white font-bold text-lg\">{speed[0]}%</span>\n                  </div>\n                  <Slider\n                    value={speed}\n                    onValueChange={setSpeed}\n                    min={10}\n                    max={100}\n                    step={10}\n                    className=\"cursor-pointer\"\n                  />\n                </div>\n\n                {/* Control Buttons */}\n                <div className=\"space-y-3 pt-4 border-t border-gray-700/50\">\n                  <Button\n                    onClick={isPlaying ? pauseVisualization : startVisualization}\n                    disabled={steps.length === 0 || (currentStep >= steps.length && !isPlaying)}\n                    className=\"w-full bg-gradient-to-r from-cyan-500 to-blue-500 hover:from-cyan-600 hover:to-blue-600 text-white font-bold py-6 rounded-lg shadow-lg shadow-cyan-500/50 transition-all duration-300\"\n                  >\n                    {isPlaying ? (\n                      <>\n                        <Pause className=\"w-5 h-5 mr-2\" />\n                        PAUSE\n                      </>\n                    ) : (\n                      <>\n                        <Play className=\"w-5 h-5 mr-2\" />\n                        START\n                      </>\n                    )}\n                  </Button>\n\n                  <Button\n                    onClick={resetVisualization}\n                    variant=\"outline\"\n                    className=\"w-full border-2 border-purple-500/50 bg-purple-500/10 hover:bg-purple-500/20 text-purple-300 font-bold py-6 rounded-lg shadow-lg shadow-purple-500/30 transition-all duration-300\"\n                  >\n                    <RotateCcw className=\"w-5 h-5 mr-2\" />\n                    RESET\n                  </Button>\n\n                  <Button\n                    onClick={() => generateSortingSteps(selectedAlgorithm)}\n                    disabled={isPlaying || array.length === 0}\n                    className=\"w-full bg-gradient-to-r from-purple-500 to-pink-500 hover:from-purple-600 hover:to-pink-600 text-white font-bold py-6 rounded-lg shadow-lg shadow-purple-500/50 transition-all duration-300\"\n                  >\n                    <Zap className=\"w-5 h-5 mr-2\" />\n                    GENERATE\n                  </Button>\n                </div>\n\n                {/* Stats Display */}\n                <div className=\"pt-4 border-t border-gray-700/50 space-y-2\">\n                  <div className=\"flex justify-between text-sm\">\n                    <span className=\"text-gray-400\">Current Step:</span>\n                    <span className=\"text-cyan-400 font-bold\">{currentStep} / {steps.length}</span>\n                  </div>\n                  <div className=\"flex justify-between text-sm\">\n                    <span className=\"text-gray-400\">Array Length:</span>\n                    <span className=\"text-purple-400 font-bold\">{array.length}</span>\n                  </div>\n                </div>\n              </div>\n            </motion.div>\n            \n            <div className=\"bg-gray-900/50 backdrop-blur-lg border border-cyan-500/30 rounded-xl p-6 shadow-2xl shadow-cyan-500/20\">\n              <div className=\"space-y-6\">\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center gap-2 text-cyan-400\">\n                    <Zap className=\"w-4 h-4\" />\n                    <span className=\"text-sm font-semibold tracking-wider\">ALGORITHM</span>\n                  </div>\n                  <div className=\"grid grid-cols-1 gap-3\">\n                    {mockAlgorithms.map((algo) => (\n                      <motion.button\n                        key={algo.id}\n                        onClick={() => setSelectedAlgorithm(algo.id as AlgorithmType)}\n                        className={`relative p-4 rounded-lg border-2 transition-all duration-300 text-left ${\n                          selectedAlgorithm === algo.id\n                            ? 'border-cyan-400 bg-cyan-500/20 shadow-lg shadow-cyan-500/50'\n                            : 'border-gray-700 bg-gray-800/50 hover:border-cyan-500/50 hover:shadow-md hover:shadow-cyan-500/30'\n                        }`}\n                        whileHover={{ scale: 1.02 }}\n                        whileTap={{ scale: 0.98 }}\n                      >\n                        <div className=\"space-y-1\">\n                          <div className={`font-semibold ${\n                            selectedAlgorithm === algo.id ? 'text-cyan-300' : 'text-gray-300'\n                          }`}>\n                            {algo.name}\n                          </div>\n                          <div className={`text-xs font-mono ${\n                            selectedAlgorithm === algo.id ? 'text-cyan-400' : 'text-gray-500'\n                          }`}>\n                            {algo.complexity}\n                          </div>\n                        </div>\n                        {selectedAlgorithm === algo.id && (\n                          <motion.div\n                            className=\"absolute inset-0 rounded-lg border-2 border-cyan-400\"\n                            initial={{ opacity: 0 }}\n                            animate={{ opacity: [0.5, 1, 0.5] }}\n                            transition={{ duration: 2, repeat: Infinity }}\n                          />\n                        )}\n                      </motion.button>\n                    ))}\n                  </div>\n                </div>\n\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <label className=\"text-cyan-400 text-sm font-medium flex items-center gap-2\">\n                      <Zap className=\"w-4 h-4\" />\n                      Speed\n                    </label>\n                    <span className=\"text-cyan-300 text-xs\">{speed[0]}ms</span>\n                  </div>\n                  <Slider\n                    value={speed}\n                    onValueChange={setSpeed}\n                    min={10}\n                    max={200}\n                    step={10}\n                    className=\"[&_[role=slider]]:bg-cyan-400 [&_[role=slider]]:border-cyan-300 [&_[role=slider]]:shadow-[0_0_15px_rgba(34,211,238,0.8)] [&_[role=slider]]:hover:shadow-[0_0_25px_rgba(34,211,238,1)] [&_[role=slider]]:transition-shadow [&_.relative]:bg-gray-700/50 [&_.relative]:border [&_.relative]:border-cyan-500/30 [&_.bg-primary]:bg-gradient-to-r [&_.bg-primary]:from-cyan-500 [&_.bg-primary]:to-purple-500 [&_.bg-primary]:shadow-[0_0_10px_rgba(34,211,238,0.5)]\"\n                  />\n                </div>\n\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <label className=\"text-cyan-400 text-sm font-medium flex items-center gap-2\">\n                      <BarChart3 className=\"w-4 h-4\" />\n                      Array Size\n                    </label>\n                    <span className=\"text-cyan-300 text-xs\">{arraySize[0]}</span>\n                  </div>\n                  <Slider\n                    value={arraySize}\n                    onValueChange={setArraySize}\n                    min={5}\n                    max={100}\n                    step={5}\n                    className=\"[&_[role=slider]]:bg-gradient-to-r [&_[role=slider]]:from-purple-500 [&_[role=slider]]:to-pink-500 [&_[role=slider]]:border-2 [&_[role=slider]]:border-purple-300 [&_[role=slider]]:shadow-lg [&_[role=slider]]:shadow-purple-500/50 [&_[role=slider]]:transition-all [&_[role=slider]]:hover:shadow-purple-500/80 [&_[role=slider]]:hover:scale-110 [&>span]:bg-gradient-to-r [&>span]:from-purple-500/30 [&>span]:to-pink-500/30 [&>span]:h-2 [&>span]:rounded-full\"\n                  />\n                </div>\n\n                <div className=\"flex gap-3 pt-4\">\n                  <motion.button\n                    onClick={isPlaying ? pauseVisualization : startVisualization}\n                    disabled={array.length === 0 || (steps.length === 0 && !isPlaying)}\n                    whileHover={{ scale: 1.05 }}\n                    whileTap={{ scale: 0.95 }}\n                    className=\"flex-1 relative group disabled:opacity-50 disabled:cursor-not-allowed\"\n                  >\n                    <motion.div\n                      className={`absolute inset-0 rounded-lg blur-xl transition-all duration-300 ${\n                        isPlaying \n                          ? 'bg-gradient-to-r from-pink-500 to-purple-500 opacity-60' \n                          : 'bg-gradient-to-r from-cyan-500 to-blue-500 opacity-60'\n                      }`}\n                      animate={{\n                        opacity: [0.4, 0.7, 0.4],\n                      }}\n                      transition={{\n                        duration: 2,\n                        repeat: Infinity,\n                        ease: \"easeInOut\"\n                      }}\n                    />\n                    <div className={`relative px-6 py-3 rounded-lg border-2 transition-all duration-300 ${\n                      isPlaying\n                        ? 'bg-gradient-to-r from-pink-500/20 to-purple-500/20 border-pink-400/50'\n                        : 'bg-gradient-to-r from-cyan-500/20 to-blue-500/20 border-cyan-400/50'\n                    }`}>\n                      <div className=\"flex items-center justify-center gap-2\">\n                        <motion.div\n                          key={isPlaying ? 'pause' : 'play'}\n                          initial={{ scale: 0, rotate: -180 }}\n                          animate={{ scale: 1, rotate: 0 }}\n                          exit={{ scale: 0, rotate: 180 }}\n                          transition={{ type: 'spring', stiffness: 200, damping: 15 }}\n                        >\n                          {isPlaying ? (\n                            <Pause className=\"w-5 h-5 text-pink-300 fill-pink-300\" />\n                          ) : (\n                            <Play className=\"w-5 h-5 text-cyan-300 fill-cyan-300\" />\n                          )}\n                        </motion.div>\n                        <span className={`font-bold tracking-wider ${\n                          isPlaying ? 'text-pink-300' : 'text-cyan-300'\n                        }`}>\n                          {isPlaying ? 'PAUSE' : 'PLAY'}\n                        </span>\n                      </div>\n                    </div>\n                  </motion.button>\n                  <motion.button\n                    onClick={resetVisualization}\n                    className=\"flex-1 flex items-center justify-center gap-2 px-6 py-3 bg-gradient-to-r from-pink-500/20 to-purple-500/20 border-2 border-pink-400/50 rounded-lg text-pink-300 font-semibold hover:from-pink-500/30 hover:to-purple-500/30 hover:border-pink-400 hover:shadow-lg hover:shadow-pink-500/50 transition-all duration-300 disabled:opacity-50 disabled:cursor-not-allowed\"\n                    whileHover={{ scale: 1.05 }}\n                    whileTap={{ scale: 0.95, rotate: 360 }}\n                    transition={{ type: \"spring\", stiffness: 400, damping: 17 }}\n                  >\n                    <motion.div\n                      animate={{ rotate: 0 }}\n                      whileHover={{ rotate: 180 }}\n                      transition={{ duration: 0.5 }}\n                    >\n                      <RotateCcw className=\"w-5 h-5\" />\n                    </motion.div>\n                    Reset\n                  </motion.button>\n\n                  <motion.button\n                    onClick={isPlaying ? pauseVisualization : startVisualization}\n                    className={`flex-1 flex items-center justify-center gap-2 px-6 py-3 rounded-lg font-semibold transition-all duration-300 border-2 ${\n                      isPlaying\n                        ? 'bg-gradient-to-r from-yellow-500/20 to-orange-500/20 border-yellow-400/50 text-yellow-300 hover:from-yellow-500/30 hover:to-orange-500/30 hover:border-yellow-400 hover:shadow-lg hover:shadow-yellow-500/50'\n                        : 'bg-gradient-to-r from-cyan-500/20 to-blue-500/20 border-cyan-400/50 text-cyan-300 hover:from-cyan-500/30 hover:to-blue-500/30 hover:border-cyan-400 hover:shadow-lg hover:shadow-cyan-500/50'\n                    }`}\n                    whileHover={{ scale: 1.05 }}\n                    whileTap={{ scale: 0.95 }}\n                    disabled={array.length === 0}\n                  >\n                    {isPlaying ? (\n                      <>\n                        <Pause className=\"w-5 h-5\" />\n                        Pause\n                      </>\n                    ) : (\n                      <>\n                        <Play className=\"w-5 h-5\" />\n                        Start\n                      </>\n                    )}\n                  </motion.button>\n                </div>\n              </div>\n            </div>\n\n            <motion.div\n              initial={{ opacity: 0, x: -50 }}\n              animate={{ opacity: 1, x: 0 }}\n              transition={{ delay: 0.2 }}\n              className=\"bg-gray-900/50 backdrop-blur-lg border border-purple-500/30 rounded-xl p-6 shadow-2xl shadow-purple-500/20\"\n            >\n              <div className=\"space-y-4\">\n                <div className=\"flex items-center gap-2 mb-4\">\n                  <BarChart3 className=\"w-5 h-5 text-purple-400\" />\n                  <h3 className=\"text-purple-400 font-bold text-lg tracking-wider\">STATISTICS</h3>\n                </div>\n\n                {/* Comparisons Counter */}\n                <div className=\"relative overflow-hidden rounded-lg bg-gradient-to-r from-cyan-500/10 to-cyan-500/5 border border-cyan-500/30 p-4\">\n                  <motion.div\n                    className=\"absolute inset-0 bg-gradient-to-r from-transparent via-cyan-400/10 to-transparent\"\n                    animate={{ x: ['-100%', '200%'] }}\n                    transition={{ duration: 3, repeat: Infinity, ease: 'linear' }}\n                  />\n                  <div className=\"relative space-y-2\">\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"text-cyan-400 text-sm font-semibold tracking-wide\">COMPARISONS</span>\n                      <motion.div\n                        className=\"w-2 h-2 rounded-full bg-cyan-400\"\n                        animate={{\n                          boxShadow: [\n                            '0 0 5px rgba(34, 211, 238, 0.5)',\n                            '0 0 20px rgba(34, 211, 238, 1)',\n                            '0 0 5px rgba(34, 211, 238, 0.5)'\n                          ]\n                        }}\n                        transition={{ duration: 1.5, repeat: Infinity }}\n                      />\n                    </div>\n                    <motion.div\n                      key={steps[currentStep]?.comparingIndices.length || 0}\n                      initial={{ scale: 1.2, color: '#00ffff' }}\n                      animate={{ scale: 1, color: '#ffffff' }}\n                      className=\"text-3xl font-bold text-white font-mono\"\n                    >\n                      {currentStep > 0 ? currentStep : 0}\n                    </motion.div>\n                  </div>\n                </div>\n\n                {/* Swaps Counter */}\n                <div className=\"relative overflow-hidden rounded-lg bg-gradient-to-r from-pink-500/10 to-pink-500/5 border border-pink-500/30 p-4\">\n                  <motion.div\n                    className=\"absolute inset-0 bg-gradient-to-r from-transparent via-pink-400/10 to-transparent\"\n                    animate={{ x: ['-100%', '200%'] }}\n                    transition={{ duration: 3, repeat: Infinity, ease: 'linear', delay: 1 }}\n                  />\n                  <div className=\"relative space-y-2\">\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"text-pink-400 text-sm font-semibold tracking-wide\">SWAPS</span>\n                      <motion.div\n                        className=\"w-2 h-2 rounded-full bg-pink-400\"\n                        animate={{\n                          boxShadow: [\n                            '0 0 5px rgba(236, 72, 153, 0.5)',\n                            '0 0 20px rgba(236, 72, 153, 1)',\n                            '0 0 5px rgba(236, 72, 153, 0.5)'\n                          ]\n                        }}\n                        transition={{ duration: 1.5, repeat: Infinity, delay: 0.5 }}\n                      />\n                    </div>\n                    <motion.div\n                      key={steps[currentStep]?.swappingIndices.length || 0}\n                      initial={{ scale: 1.2, color: '#ff0066' }}\n                      animate={{ scale: 1, color: '#ffffff' }}\n                      className=\"text-3xl font-bold text-white font-mono\"\n                    >\n                      {steps.filter((step, idx) => idx <= currentStep && step.swappingIndices.length > 0).length}\n                    </motion.div>\n                  </div>\n                </div>\n\n                {/* Progress Indicator */}\n                <div className=\"relative overflow-hidden rounded-lg bg-gradient-to-r from-purple-500/10 to-purple-500/5 border border-purple-500/30 p-4\">\n                  <motion.div\n                    className=\"absolute inset-0 bg-gradient-to-r from-transparent via-purple-400/10 to-transparent\"\n                    animate={{ x: ['-100%', '200%'] }}\n                    transition={{ duration: 3, repeat: Infinity, ease: 'linear', delay: 2 }}\n                  />\n                  <div className=\"relative space-y-3\">\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"text-purple-400 text-sm font-semibold tracking-wide\">PROGRESS</span>\n                      <motion.div\n                        className=\"w-2 h-2 rounded-full bg-purple-400\"\n                        animate={{\n                          boxShadow: [\n                            '0 0 5px rgba(168, 85, 247, 0.5)',\n                            '0 0 20px rgba(168, 85, 247, 1)',\n                            '0 0 5px rgba(168, 85, 247, 0.5)'\n                          ]\n                        }}\n                        transition={{ duration: 1.5, repeat: Infinity, delay: 1 }}\n                      />\n                    </div>\n                    <div className=\"flex items-baseline gap-2\">\n                      <motion.div\n                        key={currentStep}\n                        initial={{ scale: 1.2, color: '#a855f7' }}\n                        animate={{ scale: 1, color: '#ffffff' }}\n                        className=\"text-3xl font-bold text-white font-mono\"\n                      >\n                        {steps.length > 0 ? Math.round((currentStep / Math.max(steps.length - 1, 1)) * 100) : 0}\n                      </motion.div>\n                      <span className=\"text-purple-300 text-xl font-semibold\">%</span>\n                    </div>\n                    \n                    {/* Progress Bar */}\n                    <div className=\"relative h-2 bg-gray-800 rounded-full overflow-hidden border border-purple-500/30\">\n                      <motion.div\n                        className=\"absolute inset-y-0 left-0 bg-gradient-to-r from-purple-500 via-pink-500 to-cyan-500 rounded-full\"\n                        initial={{ width: '0%' }}\n                        animate={{\n                          width: steps.length > 0 ? `${(currentStep / Math.max(steps.length - 1, 1)) * 100}%` : '0%'\n                        }}\n                        transition={{ duration: 0.3 }}\n                      />\n                      <motion.div\n                        className=\"absolute inset-0 bg-gradient-to-r from-transparent via-white/30 to-transparent\"\n                        animate={{ x: ['-100%', '200%'] }}\n                        transition={{ duration: 1.5, repeat: Infinity, ease: 'linear' }}\n                      />\n                    </div>\n                  </div>\n                </div>\n\n                {/* Array Status */}\n                <div className=\"relative overflow-hidden rounded-lg bg-gradient-to-r from-green-500/10 to-green-500/5 border border-green-500/30 p-4\">\n                  <div className=\"relative space-y-2\">\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"text-green-400 text-sm font-semibold tracking-wide\">SORTED ELEMENTS</span>\n                      <motion.div\n                        className=\"w-2 h-2 rounded-full bg-green-400\"\n                        animate={{\n                          boxShadow: [\n                            '0 0 5px rgba(34, 197, 94, 0.5)',\n                            '0 0 20px rgba(34, 197, 94, 1)',\n                            '0 0 5px rgba(34, 197, 94, 0.5)'\n                          ]\n                        }}\n                        transition={{ duration: 1.5, repeat: Infinity, delay: 1.5 }}\n                      />\n                    </div>\n                    <div className=\"flex items-baseline gap-2\">\n                      <motion.div\n                        key={steps[currentStep]?.sortedIndices.length || 0}\n                        initial={{ scale: 1.2, color: '#00ff00' }}\n                        animate={{ scale: 1, color: '#ffffff' }}\n                        className=\"text-3xl font-bold text-white font-mono\"\n                      >\n                        {steps[currentStep]?.sortedIndices.length || 0}\n                      </motion.div>\n                      <span className=\"text-green-300 text-lg\">/ {array.length}</span>\n                    </div>\n                  </div>\n                </div>\n\n                {/* Status Indicator */}\n                <div className=\"pt-4 border-t border-gray-700/50\">\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-gray-400 text-xs font-semibold tracking-wider\">STATUS</span>\n                    <motion.div\n                      className=\"flex items-center gap-2 px-3 py-1 rounded-full border\"\n                      animate={{\n                        borderColor: isPlaying ? '#00ff00' : steps.length > 0 && currentStep >= steps.length - 1 ? '#00ffff' : '#666666',\n                        backgroundColor: isPlaying ? 'rgba(0, 255, 0, 0.1)' : steps.length > 0 && currentStep >= steps.length - 1 ? 'rgba(0, 255, 255, 0.1)' : 'rgba(100, 100, 100, 0.1)'\n                      }}\n                    >\n                      <motion.div\n                        className=\"w-2 h-2 rounded-full\"\n                        animate={{\n                          backgroundColor: isPlaying ? '#00ff00' : steps.length > 0 && currentStep >= steps.length - 1 ? '#00ffff' : '#666666',\n                          boxShadow: isPlaying ? '0 0 10px rgba(0, 255, 0, 0.8)' : steps.length > 0 && currentStep >= steps.length - 1 ? '0 0 10px rgba(0, 255, 255, 0.8)' : 'none'\n                        }}\n                      />\n                      <span className={`text-xs font-semibold ${\n                        isPlaying ? 'text-green-400' : steps.length > 0 && currentStep >= steps.length - 1 ? 'text-cyan-400' : 'text-gray-500'\n                      }`}>\n                        {isPlaying ? 'RUNNING' : steps.length > 0 && currentStep >= steps.length - 1 ? 'COMPLETE' : 'IDLE'}\n                      </span>\n                    </motion.div>\n                  </div>\n                </div>\n              </div>\n            </motion.div>\n          </div>\n\n          <div className=\"lg:col-span-3\">\n            <div className=\"bg-gray-900/50 backdrop-blur-lg border border-purple-500/30 rounded-xl p-8 shadow-2xl shadow-purple-500/20 min-h-[600px]\">\n                            {array.length === 0 ? (\n                <motion.div\n                  initial={{ opacity: 0, scale: 0.8 }}\n                  animate={{ opacity: 1, scale: 1 }}\n                  className=\"absolute inset-0 flex flex-col items-center justify-center space-y-6\"\n                >\n                  <motion.div\n                    animate={{\n                      rotate: [0, 360],\n                      scale: [1, 1.2, 1]\n                    }}\n                    transition={{ duration: 3, repeat: Infinity, ease: \"easeInOut\" }}\n                  >\n                    <BarChart3 className=\"w-24 h-24 text-cyan-400/50\" />\n                  </motion.div>\n                  <div className=\"text-center space-y-2\">\n                    <h3 className=\"text-2xl font-bold text-cyan-400\">Ready to Visualize</h3>\n                    <p className=\"text-gray-400\">Generate an array to begin</p>\n                  </div>\n                </motion.div>\n              ) : (\n                <div className=\"relative w-full h-full flex items-end justify-center gap-1 px-4\">\n                  {/* Comparison Indicators */}\n                  {steps.length > 0 && currentStep < steps.length && steps[currentStep].comparingIndices.length > 0 && (\n                    <>\n                      {steps[currentStep].comparingIndices.map((index, i) => {\n                        const barWidth = (100 / array.length);\n                        const leftPosition = index * barWidth + (barWidth / 2);\n                        \n                        return (\n                          <motion.div\n                            key={`compare-${index}-${i}`}\n                            className=\"absolute top-0 pointer-events-none\"\n                            style={{\n                              left: `${leftPosition}%`,\n                              transform: 'translateX(-50%)'\n                            }}\n                            initial={{ opacity: 0, y: -20 }}\n                            animate={{ \n                              opacity: [0.5, 1, 0.5],\n                              y: 0,\n                              scale: [1, 1.2, 1]\n                            }}\n                            transition={{ \n                              duration: 0.6,\n                              repeat: Infinity,\n                              ease: \"easeInOut\"\n                            }}\n                          >\n                            <div className=\"flex flex-col items-center\">\n                              <motion.div\n                                className=\"w-3 h-3 rounded-full bg-yellow-400 shadow-[0_0_20px_rgba(250,204,21,0.8)]\"\n                                animate={{\n                                  boxShadow: [\n                                    '0 0 20px rgba(250,204,21,0.8)',\n                                    '0 0 40px rgba(250,204,21,1)',\n                                    '0 0 20px rgba(250,204,21,0.8)'\n                                  ]\n                                }}\n                                transition={{ duration: 0.6, repeat: Infinity }}\n                              />\n                              <motion.div\n                                className=\"w-0.5 h-8 bg-gradient-to-b from-yellow-400 to-transparent\"\n                                animate={{\n                                  opacity: [0.5, 1, 0.5]\n                                }}\n                                transition={{ duration: 0.6, repeat: Infinity }}\n                              />\n                            </div>\n                          </motion.div>\n                        );\n                      })}\n                    </>\n                  )}\n\n                  {/* Swap Trail Effects */}\n                  {steps.length > 0 && currentStep < steps.length && steps[currentStep].swappingIndices.length > 0 && (\n                    <>\n                      {steps[currentStep].swappingIndices.map((index, i) => {\n                        const barWidth = (100 / array.length);\n                        const leftPosition = index * barWidth + (barWidth / 2);\n                        \n                        return (\n                          <motion.div\n                            key={`swap-${index}-${i}`}\n                            className=\"absolute top-0 bottom-0 pointer-events-none\"\n                            style={{\n                              left: `${leftPosition}%`,\n                              transform: 'translateX(-50%)',\n                              width: `${barWidth}%`\n                            }}\n                            initial={{ opacity: 0 }}\n                            animate={{ opacity: [0, 0.6, 0] }}\n                            transition={{ duration: 0.8 }}\n                          >\n                            <div className=\"relative w-full h-full\">\n                              <motion.div\n                                className=\"absolute inset-0 bg-gradient-to-t from-pink-500/30 via-purple-500/20 to-transparent rounded-lg\"\n                                animate={{\n                                  scale: [1, 1.1, 1],\n                                  opacity: [0.3, 0.6, 0.3]\n                                }}\n                                transition={{ duration: 0.5, repeat: Infinity }}\n                              />\n                              {/* Particle effects */}\n                              {[...Array(5)].map((_, particleIndex) => (\n                                <motion.div\n                                  key={`particle-${particleIndex}`}\n                                  className=\"absolute w-1 h-1 bg-pink-400 rounded-full\"\n                                  style={{\n                                    left: '50%',\n                                    bottom: `${Math.random() * 100}%`\n                                  }}\n                                  initial={{ \n                                    opacity: 1,\n                                    x: 0,\n                                    scale: 1\n                                  }}\n                                  animate={{\n                                    opacity: [1, 0],\n                                    x: [(Math.random() - 0.5) * 20, (Math.random() - 0.5) * 40],\n                                    y: [0, -30],\n                                    scale: [1, 0]\n                                  }}\n                                  transition={{\n                                    duration: 0.8,\n                                    delay: particleIndex * 0.1,\n                                    ease: \"easeOut\"\n                                  }}\n                                />\n                              ))}\n                            </div>\n                          </motion.div>\n                        );\n                      })}\n                      \n                      {/* Connecting arc between swapping elements */}\n                      {steps[currentStep].swappingIndices.length === 2 && (\n                        <motion.svg\n                          className=\"absolute top-0 left-0 w-full h-full pointer-events-none\"\n                          initial={{ opacity: 0 }}\n                          animate={{ opacity: [0, 1, 0] }}\n                          transition={{ duration: 0.8 }}\n                        >\n                          <motion.path\n                            d={`M ${(steps[currentStep].swappingIndices[0] / array.length) * 100}% 20% Q 50% 5% ${(steps[currentStep].swappingIndices[1] / array.length) * 100}% 20%`}\n                            stroke=\"url(#swapGradient)\"\n                            strokeWidth=\"3\"\n                            fill=\"none\"\n                            initial={{ pathLength: 0 }}\n                            animate={{ pathLength: [0, 1, 0] }}\n                            transition={{ duration: 0.8, ease: \"easeInOut\" }}\n                          />\n                          <defs>\n                            <linearGradient id=\"swapGradient\" x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"0%\">\n                              <stop offset=\"0%\" stopColor=\"#ec4899\" stopOpacity=\"0.8\" />\n                              <stop offset=\"50%\" stopColor=\"#a855f7\" stopOpacity=\"1\" />\n                              <stop offset=\"100%\" stopColor=\"#ec4899\" stopOpacity=\"0.8\" />\n                            </linearGradient>\n                          </defs>\n                        </motion.svg>\n                      )}\n                    </>\n                  )}\n\n                  {/* Array Bars */}\n                  {array.map((element, index) => {\n                    const isComparing = steps.length > 0 && currentStep < steps.length && \n                      steps[currentStep].comparingIndices.includes(index);\n                    const isSwapping = steps.length > 0 && currentStep < steps.length && \n                      steps[currentStep].swappingIndices.includes(index);\n                    const isSorted = steps.length > 0 && currentStep < steps.length && \n                      steps[currentStep].sortedIndices.includes(index);\n                    \n                    const maxHeight = 500;\n                    const height = (element.value / 100) * maxHeight;\n                    const colorIndex = index % NEON_COLORS.length;\n                    const baseColor = NEON_COLORS[colorIndex];\n                    \n                    let barColor = baseColor;\n                    let glowColor = baseColor;\n                    let shadowIntensity = '0.5';\n                    \n                    if (isSorted) {\n                      barColor = '#00ff00';\n                      glowColor = '#00ff00';\n                      shadowIntensity = '0.8';\n                    } else if (isSwapping) {\n                      barColor = '#ff00ff';\n                      glowColor = '#ff00ff';\n                      shadowIntensity = '1';\n                    } else if (isComparing) {\n                      barColor = '#ffff00';\n                      glowColor = '#ffff00';\n                      shadowIntensity = '0.9';\n                    }\n                    \n                    return (\n                      <motion.div\n                        key={element.id}\n                        className=\"relative flex-1 min-w-[2px] rounded-t-lg\"\n                        style={{\n                          backgroundColor: barColor,\n                          boxShadow: `0 0 20px ${glowColor}${Math.floor(parseFloat(shadowIntensity) * 255).toString(16).padStart(2, '0')}, \n                                      0 0 40px ${glowColor}${Math.floor(parseFloat(shadowIntensity) * 0.5 * 255).toString(16).padStart(2, '0')},\n                                      inset 0 0 20px ${glowColor}${Math.floor(parseFloat(shadowIntensity) * 0.3 * 255).toString(16).padStart(2, '0')}`\n                        }}\n                        initial={{ height: 0, opacity: 0 }}\n                        animate={{\n                          height: `${height}px`,\n                          opacity: 1,\n                          scale: isSwapping ? [1, 1.1, 1] : isComparing ? [1, 1.05, 1] : 1,\n                          y: isSwapping ? [0, -10, 0] : 0\n                        }}\n                        transition={{\n                          height: { duration: 0.5, ease: \"easeOut\" },\n                          opacity: { duration: 0.3 },\n                          scale: { duration: 0.3, repeat: isComparing || isSwapping ? Infinity : 0 },\n                          y: { duration: 0.5 }\n                        }}\n                      >\n                        {/* Inner glow effect */}\n                        <motion.div\n                          className=\"absolute inset-0 rounded-t-lg\"\n                          style={{\n                            background: `linear-gradient(to top, transparent, ${barColor}40)`\n                          }}\n                          animate={{\n                            opacity: [0.3, 0.6, 0.3]\n                          }}\n                          transition={{\n                            duration: 2,\n                            repeat: Infinity,\n                            ease: \"easeInOut\"\n                          }}\n                        />\n                        \n                        {/* Value label for larger arrays */}\n                        {array.length <= 30 && (\n                          <motion.div\n                            className=\"absolute -top-6 left-1/2 transform -translate-x-1/2 text-xs font-bold whitespace-nowrap\"\n                            style={{ color: barColor }}\n                            initial={{ opacity: 0 }}\n                            animate={{ opacity: isSorted || isComparing || isSwapping ? 1 : 0.6 }}\n                          >\n                            {element.value}\n                          </motion.div>\n                        )}\n                        \n                        {/* Sorted checkmark */}\n                        {isSorted && (\n                          <motion.div\n                            className=\"absolute -top-8 left-1/2 transform -translate-x-1/2\"\n                            initial={{ scale: 0, rotate: -180 }}\n                            animate={{ scale: 1, rotate: 0 }}\n                            transition={{ type: \"spring\", stiffness: 200, damping: 10 }}\n                          >\n                            <div className=\"w-4 h-4 rounded-full bg-green-400 flex items-center justify-center shadow-[0_0_15px_rgba(34,197,94,0.8)]\">\n                              <svg className=\"w-3 h-3 text-gray-900\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={3} d=\"M5 13l4 4L19 7\" />\n                              </svg>\n                            </div>\n                          </motion.div>\n                        )}\n                      </motion.div>\n                    );\n                  })}\n                </div>\n              )}\n              \n              <div className=\"relative h-full flex items-end justify-center gap-1\">\n                {currentStep < steps.length && steps[currentStep] ? (\n                  steps[currentStep].array.map((element, index) => {\n                    const isComparing = steps[currentStep].comparingIndices.includes(index);\n                    const isSwapping = steps[currentStep].swappingIndices.includes(index);\n                    const isSorted = steps[currentStep].sortedIndices.includes(index);\n                    \n                    const barColor = isSorted \n                      ? '#00ff00' \n                      : isSwapping \n                      ? '#ff0066' \n                      : isComparing \n                      ? '#ffff00' \n                      : NEON_COLORS[index % NEON_COLORS.length];\n                    \n                    const maxHeight = 500;\n                    const barHeight = (element.value / 100) * maxHeight;\n                    \n                    return (\n                      <motion.div\n                        key={element.id}\n                        layout\n                        initial={{ height: 0, opacity: 0 }}\n                        animate={{\n                          height: barHeight,\n                          opacity: 1,\n                          boxShadow: isComparing\n                            ? `0 0 30px ${barColor}, 0 0 60px ${barColor}`\n                            : isSwapping\n                            ? `0 0 40px ${barColor}, 0 0 80px ${barColor}, 0 0 120px ${barColor}`\n                            : isSorted\n                            ? `0 0 20px ${barColor}, 0 0 40px ${barColor}`\n                            : `0 0 15px ${barColor}`,\n                          scale: isSwapping ? 1.1 : isComparing ? 1.05 : 1\n                        }}\n                        transition={{\n                          height: { duration: 0.3, ease: 'easeOut' },\n                          boxShadow: { duration: 0.2 },\n                          scale: { duration: 0.2, type: 'spring' },\n                          layout: { duration: 0.4, ease: 'easeInOut' }\n                        }}\n                        className=\"relative rounded-t-lg\"\n                        style={{\n                          backgroundColor: barColor,\n                          width: `${Math.max(100 / arraySize[0], 8)}px`,\n                          minWidth: '4px',\n                          border: `2px solid ${barColor}`,\n                          filter: isSorted ? 'brightness(1.2)' : 'brightness(1)'\n                        }}\n                      >\n                        {isSwapping && (\n                          <motion.div\n                            className=\"absolute inset-0 rounded-t-lg\"\n                            style={{\n                              background: `linear-gradient(180deg, ${barColor}00 0%, ${barColor} 100%)`\n                            }}\n                            initial={{ opacity: 0 }}\n                            animate={{ opacity: [0, 1, 0] }}\n                            transition={{ duration: 0.6, repeat: Infinity }}\n                          />\n                        )}\n                        \n                        {arraySize[0] <= 30 && (\n                          <motion.div\n                            className=\"absolute -top-8 left-1/2 transform -translate-x-1/2 text-xs font-bold whitespace-nowrap\"\n                            style={{ color: barColor }}\n                            animate={{\n                              textShadow: isComparing || isSwapping\n                                ? `0 0 10px ${barColor}`\n                                : 'none'\n                            }}\n                          >\n                            {element.value}\n                          </motion.div>\n                        )}\n                        \n                        {isComparing && (\n                          <motion.div\n                            className=\"absolute -top-12 left-1/2 transform -translate-x-1/2\"\n                            initial={{ y: -10, opacity: 0 }}\n                            animate={{ y: 0, opacity: 1 }}\n                            exit={{ y: 10, opacity: 0 }}\n                          >\n                            <div\n                              className=\"w-3 h-3 rounded-full\"\n                              style={{\n                                backgroundColor: barColor,\n                                boxShadow: `0 0 15px ${barColor}`\n                              }}\n                            />\n                          </motion.div>\n                        )}\n                      </motion.div>\n                    );\n                  })\n                ) : array.length > 0 ? (\n                  array.map((element, index) => {\n                    const barColor = NEON_COLORS[index % NEON_COLORS.length];\n                    const maxHeight = 500;\n                    const barHeight = (element.value / 100) * maxHeight;\n                    \n                    return (\n                      <motion.div\n                        key={element.id}\n                        initial={{ height: 0, opacity: 0 }}\n                        animate={{\n                          height: barHeight,\n                          opacity: 1,\n                          boxShadow: `0 0 15px ${barColor}`\n                        }}\n                        transition={{\n                          height: { duration: 0.5, ease: 'easeOut' },\n                          opacity: { duration: 0.3 }\n                        }}\n                        className=\"relative rounded-t-lg\"\n                        style={{\n                          backgroundColor: barColor,\n                          width: `${Math.max(100 / arraySize[0], 8)}px`,\n                          minWidth: '4px',\n                          border: `2px solid ${barColor}`\n                        }}\n                      >\n                        {arraySize[0] <= 30 && (\n                          <div\n                            className=\"absolute -top-8 left-1/2 transform -translate-x-1/2 text-xs font-bold whitespace-nowrap\"\n                            style={{ color: barColor }}\n                          >\n                            {element.value}\n                          </div>\n                        )}\n                      </motion.div>\n                    );\n                  })\n                ) : (\n                  <motion.div\n                    initial={{ opacity: 0 }}\n                    animate={{ opacity: 1 }}\n                    className=\"absolute inset-0 flex items-center justify-center\"\n                  >\n                    <div className=\"text-center space-y-4\">\n                      <motion.div\n                        animate={{\n                          textShadow: [\n                            '0 0 20px rgba(0, 255, 255, 0.5)',\n                            '0 0 40px rgba(255, 0, 255, 0.5)',\n                            '0 0 20px rgba(0, 255, 255, 0.5)'\n                          ]\n                        }}\n                        transition={{ duration: 2, repeat: Infinity }}\n                        className=\"text-2xl font-bold text-cyan-400\"\n                      >\n                        Generate an array to begin\n                      </motion.div>\n                      <div className=\"text-gray-500\">Click GENERATE to create a random array</div>\n                    </div>\n                  </motion.div>\n                )}</parameter>\n</invoke>\n              </div>\n            </div>\n\n                        <motion.div\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ delay: 0.3 }}\n              className=\"mt-6 bg-gray-900/50 backdrop-blur-lg border border-purple-500/30 rounded-xl p-6 shadow-2xl shadow-purple-500/20\"\n            >\n              <div className=\"space-y-3\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center gap-2\">\n                    <BarChart3 className=\"w-5 h-5 text-purple-400\" />\n                    <span className=\"text-purple-400 font-bold text-sm tracking-wider\">SORTING PROGRESS</span>\n                  </div>\n                  <motion.span\n                    key={currentStep}\n                    initial={{ scale: 1.2, color: '#a78bfa' }}\n                    animate={{ scale: 1, color: '#c084fc' }}\n                    className=\"text-purple-300 font-bold text-lg\"\n                  >\n                    {steps.length > 0 ? Math.round((currentStep / Math.max(steps.length - 1, 1)) * 100) : 0}%\n                  </motion.span>\n                </div>\n                \n                <div className=\"relative h-4 bg-gray-800/50 rounded-full overflow-hidden border border-purple-500/30\">\n                  <motion.div\n                    className=\"absolute inset-y-0 left-0 bg-gradient-to-r from-purple-500 via-pink-500 to-cyan-500 rounded-full\"\n                    initial={{ width: '0%' }}\n                    animate={{ \n                      width: steps.length > 0 ? `${(currentStep / Math.max(steps.length - 1, 1)) * 100}%` : '0%'\n                    }}\n                    transition={{ duration: 0.3, ease: 'easeOut' }}\n                  >\n                    <motion.div\n                      className=\"absolute inset-0 bg-gradient-to-r from-transparent via-white/30 to-transparent\"\n                      animate={{ x: ['-100%', '200%'] }}\n                      transition={{ duration: 1.5, repeat: Infinity, ease: 'linear' }}\n                    />\n                  </motion.div>\n                  \n                  <motion.div\n                    className=\"absolute inset-0 rounded-full\"\n                    animate={{\n                      boxShadow: [\n                        '0 0 10px rgba(168, 85, 247, 0.4)',\n                        '0 0 20px rgba(168, 85, 247, 0.6)',\n                        '0 0 10px rgba(168, 85, 247, 0.4)'\n                      ]\n                    }}\n                    transition={{ duration: 2, repeat: Infinity }}\n                  />\n                </div>\n                \n                <div className=\"flex justify-between text-xs text-gray-400\">\n                  <span>Step {currentStep}</span>\n                  <span>Total {steps.length > 0 ? steps.length - 1 : 0}</span>\n                </div>\n              </div>\n            </motion.div>\n          </div>\n        </div>\n\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ delay: 0.4, duration: 0.6 }}\n          className=\"bg-gray-900/50 backdrop-blur-lg border border-purple-500/30 rounded-xl p-6 shadow-2xl shadow-purple-500/20\"\n        >\n          <div className=\"flex items-center gap-2 mb-4\">\n            <BarChart3 className=\"w-5 h-5 text-purple-400\" />\n            <h3 className=\"text-purple-400 font-bold text-lg tracking-wider\">LEGEND</h3>\n          </div>\n          \n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n            {/* Default State */}\n            <motion.div\n              whileHover={{ scale: 1.05 }}\n              className=\"flex items-center gap-3 p-3 bg-gray-800/50 rounded-lg border border-gray-700/50 hover:border-gray-600 transition-all duration-300\"\n            >\n              <motion.div\n                className=\"w-6 h-6 rounded-md bg-gradient-to-br from-cyan-400 to-blue-500 shadow-lg\"\n                animate={{\n                  boxShadow: [\n                    '0 0 10px rgba(34, 211, 238, 0.5)',\n                    '0 0 20px rgba(34, 211, 238, 0.8)',\n                    '0 0 10px rgba(34, 211, 238, 0.5)'\n                  ]\n                }}\n                transition={{ duration: 2, repeat: Infinity }}\n              />\n              <div>\n                <div className=\"text-white font-semibold text-sm\">Default</div>\n                <div className=\"text-gray-400 text-xs\">Unsorted</div>\n              </div>\n            </motion.div>\n\n            {/* Comparing State */}\n            <motion.div\n              whileHover={{ scale: 1.05 }}\n              className=\"flex items-center gap-3 p-3 bg-gray-800/50 rounded-lg border border-yellow-500/30 hover:border-yellow-500/50 transition-all duration-300\"\n            >\n              <motion.div\n                className=\"w-6 h-6 rounded-md bg-gradient-to-br from-yellow-400 to-orange-500 shadow-lg\"\n                animate={{\n                  boxShadow: [\n                    '0 0 15px rgba(234, 179, 8, 0.6)',\n                    '0 0 30px rgba(234, 179, 8, 1)',\n                    '0 0 15px rgba(234, 179, 8, 0.6)'\n                  ],\n                  scale: [1, 1.1, 1]\n                }}\n                transition={{ duration: 1.5, repeat: Infinity }}\n              />\n              <div>\n                <div className=\"text-yellow-300 font-semibold text-sm\">Comparing</div>\n                <div className=\"text-gray-400 text-xs\">Active check</div>\n              </div>\n            </motion.div>\n\n            {/* Swapping State */}\n            <motion.div\n              whileHover={{ scale: 1.05 }}\n              className=\"flex items-center gap-3 p-3 bg-gray-800/50 rounded-lg border border-pink-500/30 hover:border-pink-500/50 transition-all duration-300\"\n            >\n              <motion.div\n                className=\"w-6 h-6 rounded-md bg-gradient-to-br from-pink-500 to-red-500 shadow-lg\"\n                animate={{\n                  boxShadow: [\n                    '0 0 15px rgba(236, 72, 153, 0.6)',\n                    '0 0 30px rgba(236, 72, 153, 1)',\n                    '0 0 15px rgba(236, 72, 153, 0.6)'\n                  ],\n                  rotate: [0, 5, -5, 0]\n                }}\n                transition={{ duration: 1, repeat: Infinity }}\n              />\n              <div>\n                <div className=\"text-pink-300 font-semibold text-sm\">Swapping</div>\n                <div className=\"text-gray-400 text-xs\">Exchanging</div>\n              </div>\n            </motion.div>\n\n            {/* Sorted State */}\n            <motion.div\n              whileHover={{ scale: 1.05 }}\n              className=\"flex items-center gap-3 p-3 bg-gray-800/50 rounded-lg border border-green-500/30 hover:border-green-500/50 transition-all duration-300\"\n            >\n              <motion.div\n                className=\"w-6 h-6 rounded-md bg-gradient-to-br from-green-400 to-emerald-500 shadow-lg\"\n                animate={{\n                  boxShadow: [\n                    '0 0 15px rgba(34, 197, 94, 0.6)',\n                    '0 0 25px rgba(34, 197, 94, 0.9)',\n                    '0 0 15px rgba(34, 197, 94, 0.6)'\n                  ]\n                }}\n                transition={{ duration: 2, repeat: Infinity }}\n              />\n              <div>\n                <div className=\"text-green-300 font-semibold text-sm\">Sorted</div>\n                <div className=\"text-gray-400 text-xs\">Complete</div>\n              </div>\n            </motion.div>\n          </div>\n\n          {/* Additional Info */}\n          <motion.div\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            transition={{ delay: 0.6 }}\n            className=\"mt-4 pt-4 border-t border-gray-700/50\"\n          >\n            <div className=\"flex items-center justify-between text-xs text-gray-400\">\n              <span className=\"flex items-center gap-2\">\n                <motion.div\n                  className=\"w-2 h-2 rounded-full bg-cyan-400\"\n                  animate={{\n                    opacity: [0.5, 1, 0.5],\n                    scale: [1, 1.2, 1]\n                  }}\n                  transition={{ duration: 2, repeat: Infinity }}\n                />\n                Watch the bars glow as they compare and swap\n              </span>\n            </div>\n          </motion.div>\n        </motion.div>\n      </div>\n    </div>\n  );\n}",
  "error": null,
  "overall_score": 41,
  "code_quality_score": 12,
  "architecture_score": 8,
  "performance_score": 10,
  "accessibility_score": 11,
  "metadata": {
    "document_id": "eval_room_7bbd0b26452a",
    "prompt_category": "creative",
    "prompt_complexity": 9.0
  },
  "raw_response": {
    "document_id": "eval_room_7bbd0b26452a",
    "mode": "parallel",
    "prompt": "Build a captivating algorithm visualizer with neon colored bars, smooth height transitions, glowing comparison indicators, trail effects during swaps, and a futuristic dashboard design with animated controls",
    "content": "import { useState, useCallback } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Slider } from '@/components/ui/slider';\nimport { Play, Pause, RotateCcw, Zap, BarChart3 } from 'lucide-react';\nimport { motion } from 'framer-motion';\n\ninterface ArrayElement {\n  value: number;\n  id: string;\n  isComparing?: boolean;\n  isSwapping?: boolean;\n  isSorted?: boolean;\n}\n\ninterface AlgorithmStep {\n  array: ArrayElement[];\n  comparingIndices: number[];\n  swappingIndices: number[];\n  sortedIndices: number[];\n}\n\ntype AlgorithmType = 'bubble' | 'quick' | 'merge' | 'insertion';\n\nconst NEON_COLORS = [\n  '#00ffff',\n  '#ff00ff', \n  '#00ff00',\n  '#ffff00',\n  '#ff0066',\n  '#00ffaa'\n];\n\nconst mockAlgorithms = [\n  { id: 'bubble', name: 'Bubble Sort', complexity: 'O(n\u00b2)' },\n  { id: 'quick', name: 'Quick Sort', complexity: 'O(n log n)' },\n  { id: 'merge', name: 'Merge Sort', complexity: 'O(n log n)' },\n  { id: 'insertion', name: 'Insertion Sort', complexity: 'O(n\u00b2)' }\n];\n\n// Animation control using useEffect\nconst useAnimationLoop = (\n  isPlaying: boolean,\n  steps: AlgorithmStep[],\n  currentStep: number,\n  speed: number[],\n  onStepComplete: () => void,\n  onAnimationEnd: () => void\n) => {\n  const [animationId, setAnimationId] = useState<NodeJS.Timeout | null>(null);\n\n  const cleanup = useCallback(() => {\n    if (animationId) {\n      clearTimeout(animationId);\n      setAnimationId(null);\n    }\n  }, [animationId]);\n\n  const animate = useCallback(() => {\n    if (currentStep < steps.length - 1) {\n      const delay = 1000 - speed[0] * 9.5; // Convert speed (0-100) to delay (1000ms-50ms)\n      const id = setTimeout(() => {\n        onStepComplete();\n      }, delay);\n      setAnimationId(id);\n    } else if (currentStep >= steps.length - 1 && steps.length > 0) {\n      onAnimationEnd();\n    }\n  }, [currentStep, steps.length, speed, onStepComplete, onAnimationEnd]);\n\n  return { animate, cleanup };\n};\n\nexport default function AlgorithmVisualizer() {\n  const [array, setArray] = useState<ArrayElement[]>([]);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [speed, setSpeed] = useState([50]);\n  const [arraySize, setArraySize] = useState([20]);\n  const [selectedAlgorithm, setSelectedAlgorithm] = useState<AlgorithmType>('bubble');\n  const [currentStep, setCurrentStep] = useState(0);\n  const [steps, setSteps] = useState<AlgorithmStep[]>([]);\n\n  // Animation loop effect\n  const handleStepComplete = useCallback(() => {\n    setCurrentStep(prev => prev + 1);\n  }, []);\n\n  const handleAnimationEnd = useCallback(() => {\n    setIsPlaying(false);\n  }, []);\n\n  const { animate, cleanup } = useAnimationLoop(\n    isPlaying,\n    steps,\n    currentStep,\n    speed,\n    handleStepComplete,\n    handleAnimationEnd\n  );\n\n  // Trigger animation when playing\n  useState(() => {\n    if (isPlaying && steps.length > 0) {\n      animate();\n    }\n    return cleanup;\n  });\n\n  const generateRandomArray = useCallback(() => {\n    const newArray: ArrayElement[] = Array.from({ length: arraySize[0] }, (_, index) => ({\n      value: Math.floor(Math.random() * 100) + 5,\n      id: `element-${index}-${Date.now()}`,\n      isComparing: false,\n      isSwapping: false,\n      isSorted: false\n    }));\n    setArray(newArray);\n    setSteps([]);\n    setCurrentStep(0);\n    setIsPlaying(false);\n  }, [arraySize]);\n\n  const resetVisualization = useCallback(() => {\n\nsetIsPlaying(false);\n    setCurrentStep(0);\n    setSteps([]);\n    generateRandomArray();\n        \n  }, [generateRandomArray]);\n\n  const startVisualization = useCallback(() => {\n    if (steps.length === 0 || currentStep >= steps.length) {\n      return;\n    }\n    \n    setIsPlaying(true);\n    \n    // Apply current step to array\n    if (steps[currentStep]) {\n      setArray(steps[currentStep].array);\n    }\n  }, [steps, speed, currentStep]);\n\n  const pauseVisualization = useCallback(() => {\n\n    setIsPlaying(false);\n  }, []);\n\n  const generateSortingSteps = useCallback((algorithm: AlgorithmType) => {\n    const localArray = [...array];\n    const allSteps: AlgorithmStep[] = [];\n    \n    const addStep = (arr: ArrayElement[], comparing: number[] = [], swapping: number[] = [], sorted: number[] = []) => {\n      allSteps.push({\n        array: arr.map(el => ({ ...el })),\n        comparingIndices: [...comparing],\n        swappingIndices: [...swapping],\n        sortedIndices: [...sorted]\n      });\n    };\n\n    // Initial state\n    addStep(localArray);\n\n    switch (algorithm) {\n      case 'bubble': {\n        const sortedIndices: number[] = [];\n        for (let i = 0; i < localArray.length - 1; i++) {\n          for (let j = 0; j < localArray.length - i - 1; j++) {\n            // Comparing\n            addStep(localArray, [j, j + 1], [], sortedIndices);\n            \n            if (localArray[j].value > localArray[j + 1].value) {\n              // Swapping\n              addStep(localArray, [], [j, j + 1], sortedIndices);\n              [localArray[j], localArray[j + 1]] = [localArray[j + 1], localArray[j]];\n              addStep(localArray, [], [], sortedIndices);\n            }\n          }\n          sortedIndices.push(localArray.length - i - 1);\n          addStep(localArray, [], [], sortedIndices);\n        }\n        sortedIndices.push(0);\n        addStep(localArray, [], [], sortedIndices);\n        break;\n      }\n\n      case 'insertion': {\n        const sortedIndices: number[] = [0];\n        addStep(localArray, [], [], sortedIndices);\n        \n        for (let i = 1; i < localArray.length; i++) {\n          const key = localArray[i];\n          let j = i - 1;\n          \n          addStep(localArray, [i], [], sortedIndices);\n          \n          while (j >= 0 && localArray[j].value > key.value) {\n            addStep(localArray, [j, j + 1], [], sortedIndices);\n            addStep(localArray, [], [j, j + 1], sortedIndices);\n            localArray[j + 1] = localArray[j];\n            addStep(localArray, [], [], sortedIndices);\n            j--;\n          }\n          \n          localArray[j + 1] = key;\n          sortedIndices.push(i);\n          addStep(localArray, [], [], sortedIndices);\n        }\n        break;\n      }\n\n      case 'quick': {\n        const sortedIndices: number[] = [];\n        \n        const partition = (low: number, high: number): number => {\n          const pivot = localArray[high].value;\n          let i = low - 1;\n          \n          addStep(localArray, [high], [], sortedIndices);\n          \n          for (let j = low; j < high; j++) {\n            addStep(localArray, [j, high], [], sortedIndices);\n            \n            if (localArray[j].value < pivot) {\n              i++;\n              if (i !== j) {\n                addStep(localArray, [], [i, j], sortedIndices);\n                [localArray[i], localArray[j]] = [localArray[j], localArray[i]];\n                addStep(localArray, [], [], sortedIndices);\n              }\n            }\n          }\n          \n          addStep(localArray, [], [i + 1, high], sortedIndices);\n          [localArray[i + 1], localArray[high]] = [localArray[high], localArray[i + 1]];\n          sortedIndices.push(i + 1);\n          addStep(localArray, [], [], sortedIndices);\n          \n          return i + 1;\n        };\n        \n        const quickSort = (low: number, high: number) => {\n          if (low < high) {\n            const pi = partition(low, high);\n            quickSort(low, pi - 1);\n            quickSort(pi + 1, high);\n          } else if (low === high) {\n            sortedIndices.push(low);\n            addStep(localArray, [], [], sortedIndices);\n          }\n        };\n        \n        quickSort(0, localArray.length - 1);\n        break;\n      }\n\n      case 'merge': {\n        const sortedIndices: number[] = [];\n        \n        const merge = (left: number, mid: number, right: number) => {\n          const leftArr = localArray.slice(left, mid + 1);\n          const rightArr = localArray.slice(mid + 1, right + 1);\n          \n          let i = 0, j = 0, k = left;\n          \n          while (i < leftArr.length && j < rightArr.length) {\n            addStep(localArray, [left + i, mid + 1 + j], [], sortedIndices);\n            \n            if (leftArr[i].value <= rightArr[j].value) {\n              addStep(localArray, [], [k], sortedIndices);\n              localArray[k] = leftArr[i];\n              i++;\n            } else {\n              addStep(localArray, [], [k], sortedIndices);\n              localArray[k] = rightArr[j];\n              j++;\n            }\n            k++;\n            addStep(localArray, [], [], sortedIndices);\n          }\n          \n          while (i < leftArr.length) {\n            addStep(localArray, [], [k], sortedIndices);\n            localArray[k] = leftArr[i];\n            i++;\n            k++;\n            addStep(localArray, [], [], sortedIndices);\n          }\n          \n          while (j < rightArr.length) {\n            addStep(localArray, [], [k], sortedIndices);\n            localArray[k] = rightArr[j];\n            j++;\n            k++;\n            addStep(localArray, [], [], sortedIndices);\n          }\n          \n          if (left === 0 && right === localArray.length - 1) {\n            for (let idx = 0; idx < localArray.length; idx++) {\n              sortedIndices.push(idx);\n            }\n            addStep(localArray, [], [], sortedIndices);\n          }\n        };\n        \n        const mergeSort = (left: number, right: number) => {\n          if (left < right) {\n            const mid = Math.floor((left + right) / 2);\n            mergeSort(left, mid);\n            mergeSort(mid + 1, right);\n            merge(left, mid, right);\n          }\n        };\n        \n        mergeSort(0, localArray.length - 1);\n        break;\n      }\n    }\n\n    setSteps(allSteps);\n    setCurrentStep(0);\n  }, [array]);\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-gray-900 via-purple-900 to-gray-900 p-8\">\n      <div className=\"max-w-7xl mx-auto space-y-8\">\n        <motion.div\n          initial={{ opacity: 0, y: -20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.8 }}\n          className=\"text-center space-y-4\"\n        >\n          <motion.h1\n            className=\"text-6xl font-bold bg-gradient-to-r from-cyan-400 via-purple-400 to-pink-400 bg-clip-text text-transparent\"\n            animate={{\n              textShadow: [\n                '0 0 20px rgba(0, 255, 255, 0.5)',\n                '0 0 40px rgba(255, 0, 255, 0.5)',\n                '0 0 20px rgba(0, 255, 255, 0.5)'\n              ]\n            }}\n            transition={{ duration: 2, repeat: Infinity }}\n          >\n            Algorithm Visualizer\n          </motion.h1>\n          \n          <div className=\"flex items-center justify-center gap-4\">\n            <motion.div\n              initial={{ scale: 0 }}\n              animate={{ scale: 1 }}\n              transition={{ delay: 0.3, type: 'spring' }}\n              className=\"px-6 py-2 bg-purple-500/20 border border-purple-400/50 rounded-full backdrop-blur-sm\"\n            >\n              <span className=\"text-2xl font-semibold text-purple-300\">\n                {mockAlgorithms.find(a => a.id === selectedAlgorithm)?.name || 'Bubble Sort'}\n              </span>\n            </motion.div>\n            \n            <motion.div\n              initial={{ scale: 0 }}\n              animate={{ scale: 1 }}\n              transition={{ delay: 0.5, type: 'spring' }}\n              className=\"px-4 py-2 bg-cyan-500/20 border border-cyan-400/50 rounded-full backdrop-blur-sm relative overflow-hidden\"\n            >\n              <motion.div\n                className=\"absolute inset-0 bg-gradient-to-r from-transparent via-cyan-400/20 to-transparent\"\n                animate={{ x: ['-100%', '200%'] }}\n                transition={{ duration: 2, repeat: Infinity, ease: 'linear' }}\n              />\n              <div className=\"relative flex items-center gap-2\">\n                <BarChart3 className=\"w-4 h-4 text-cyan-400\" />\n                <span className=\"text-sm font-mono text-cyan-300\">\n                  {mockAlgorithms.find(a => a.id === selectedAlgorithm)?.complexity || 'O(n\u00b2)'}\n                </span>\n              </div>\n            </motion.div>\n          </div>\n        </motion.div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-6\">\n          <div className=\"lg:col-span-1 space-y-6\">\n            <motion.div\n              initial={{ opacity: 0, x: -50 }}\n              animate={{ opacity: 1, x: 0 }}\n              className=\"bg-gray-900/50 backdrop-blur-lg border border-cyan-500/30 rounded-xl p-6 shadow-2xl shadow-cyan-500/20\"\n            >\n              <div className=\"space-y-6\">\n                {/* Algorithm Selection */}\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center gap-2 mb-4\">\n                    <Zap className=\"w-5 h-5 text-cyan-400\" />\n                    <h3 className=\"text-cyan-400 font-bold text-lg tracking-wider\">ALGORITHM</h3>\n                  </div>\n                  <div className=\"grid grid-cols-1 gap-2\">\n                    {mockAlgorithms.map((algo) => (\n                      <motion.button\n                        key={algo.id}\n                        whileHover={{ scale: 1.02 }}\n                        whileTap={{ scale: 0.98 }}\n                        onClick={() => setSelectedAlgorithm(algo.id as AlgorithmType)}\n                        className={`p-3 rounded-lg border transition-all duration-300 text-left ${\n                          selectedAlgorithm === algo.id\n                            ? 'bg-cyan-500/20 border-cyan-400 shadow-lg shadow-cyan-500/50'\n                            : 'bg-gray-800/50 border-gray-700 hover:border-cyan-500/50'\n                        }`}\n                      >\n                        <div className=\"font-semibold text-white\">{algo.name}</div>\n                        <div className=\"text-xs text-gray-400 mt-1\">{algo.complexity}</div>\n                      </motion.button>\n                    ))}\n                  </div>\n                </div>\n\n                {/* Array Size Control */}\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center gap-2\">\n                      <BarChart3 className=\"w-4 h-4 text-purple-400\" />\n                      <label className=\"text-purple-400 font-semibold text-sm tracking-wide\">\n                        ARRAY SIZE\n                      </label>\n                    </div>\n                    <span className=\"text-white font-bold text-lg\">{arraySize[0]}</span>\n                  </div>\n                  <Slider\n                    value={arraySize}\n                    onValueChange={setArraySize}\n                    min={5}\n                    max={50}\n                    step={1}\n                    className=\"cursor-pointer\"\n                    disabled={isPlaying}\n                  />\n                </div>\n\n                {/* Speed Control */}\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center gap-2\">\n                      <Zap className=\"w-4 h-4 text-yellow-400\" />\n                      <label className=\"text-yellow-400 font-semibold text-sm tracking-wide\">\n                        SPEED\n                      </label>\n                    </div>\n                    <span className=\"text-white font-bold text-lg\">{speed[0]}%</span>\n                  </div>\n                  <Slider\n                    value={speed}\n                    onValueChange={setSpeed}\n                    min={10}\n                    max={100}\n                    step={10}\n                    className=\"cursor-pointer\"\n                  />\n                </div>\n\n                {/* Control Buttons */}\n                <div className=\"space-y-3 pt-4 border-t border-gray-700/50\">\n                  <Button\n                    onClick={isPlaying ? pauseVisualization : startVisualization}\n                    disabled={steps.length === 0 || (currentStep >= steps.length && !isPlaying)}\n                    className=\"w-full bg-gradient-to-r from-cyan-500 to-blue-500 hover:from-cyan-600 hover:to-blue-600 text-white font-bold py-6 rounded-lg shadow-lg shadow-cyan-500/50 transition-all duration-300\"\n                  >\n                    {isPlaying ? (\n                      <>\n                        <Pause className=\"w-5 h-5 mr-2\" />\n                        PAUSE\n                      </>\n                    ) : (\n                      <>\n                        <Play className=\"w-5 h-5 mr-2\" />\n                        START\n                      </>\n                    )}\n                  </Button>\n\n                  <Button\n                    onClick={resetVisualization}\n                    variant=\"outline\"\n                    className=\"w-full border-2 border-purple-500/50 bg-purple-500/10 hover:bg-purple-500/20 text-purple-300 font-bold py-6 rounded-lg shadow-lg shadow-purple-500/30 transition-all duration-300\"\n                  >\n                    <RotateCcw className=\"w-5 h-5 mr-2\" />\n                    RESET\n                  </Button>\n\n                  <Button\n                    onClick={() => generateSortingSteps(selectedAlgorithm)}\n                    disabled={isPlaying || array.length === 0}\n                    className=\"w-full bg-gradient-to-r from-purple-500 to-pink-500 hover:from-purple-600 hover:to-pink-600 text-white font-bold py-6 rounded-lg shadow-lg shadow-purple-500/50 transition-all duration-300\"\n                  >\n                    <Zap className=\"w-5 h-5 mr-2\" />\n                    GENERATE\n                  </Button>\n                </div>\n\n                {/* Stats Display */}\n                <div className=\"pt-4 border-t border-gray-700/50 space-y-2\">\n                  <div className=\"flex justify-between text-sm\">\n                    <span className=\"text-gray-400\">Current Step:</span>\n                    <span className=\"text-cyan-400 font-bold\">{currentStep} / {steps.length}</span>\n                  </div>\n                  <div className=\"flex justify-between text-sm\">\n                    <span className=\"text-gray-400\">Array Length:</span>\n                    <span className=\"text-purple-400 font-bold\">{array.length}</span>\n                  </div>\n                </div>\n              </div>\n            </motion.div>\n            \n            <div className=\"bg-gray-900/50 backdrop-blur-lg border border-cyan-500/30 rounded-xl p-6 shadow-2xl shadow-cyan-500/20\">\n              <div className=\"space-y-6\">\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center gap-2 text-cyan-400\">\n                    <Zap className=\"w-4 h-4\" />\n                    <span className=\"text-sm font-semibold tracking-wider\">ALGORITHM</span>\n                  </div>\n                  <div className=\"grid grid-cols-1 gap-3\">\n                    {mockAlgorithms.map((algo) => (\n                      <motion.button\n                        key={algo.id}\n                        onClick={() => setSelectedAlgorithm(algo.id as AlgorithmType)}\n                        className={`relative p-4 rounded-lg border-2 transition-all duration-300 text-left ${\n                          selectedAlgorithm === algo.id\n                            ? 'border-cyan-400 bg-cyan-500/20 shadow-lg shadow-cyan-500/50'\n                            : 'border-gray-700 bg-gray-800/50 hover:border-cyan-500/50 hover:shadow-md hover:shadow-cyan-500/30'\n                        }`}\n                        whileHover={{ scale: 1.02 }}\n                        whileTap={{ scale: 0.98 }}\n                      >\n                        <div className=\"space-y-1\">\n                          <div className={`font-semibold ${\n                            selectedAlgorithm === algo.id ? 'text-cyan-300' : 'text-gray-300'\n                          }`}>\n                            {algo.name}\n                          </div>\n                          <div className={`text-xs font-mono ${\n                            selectedAlgorithm === algo.id ? 'text-cyan-400' : 'text-gray-500'\n                          }`}>\n                            {algo.complexity}\n                          </div>\n                        </div>\n                        {selectedAlgorithm === algo.id && (\n                          <motion.div\n                            className=\"absolute inset-0 rounded-lg border-2 border-cyan-400\"\n                            initial={{ opacity: 0 }}\n                            animate={{ opacity: [0.5, 1, 0.5] }}\n                            transition={{ duration: 2, repeat: Infinity }}\n                          />\n                        )}\n                      </motion.button>\n                    ))}\n                  </div>\n                </div>\n\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <label className=\"text-cyan-400 text-sm font-medium flex items-center gap-2\">\n                      <Zap className=\"w-4 h-4\" />\n                      Speed\n                    </label>\n                    <span className=\"text-cyan-300 text-xs\">{speed[0]}ms</span>\n                  </div>\n                  <Slider\n                    value={speed}\n                    onValueChange={setSpeed}\n                    min={10}\n                    max={200}\n                    step={10}\n                    className=\"[&_[role=slider]]:bg-cyan-400 [&_[role=slider]]:border-cyan-300 [&_[role=slider]]:shadow-[0_0_15px_rgba(34,211,238,0.8)] [&_[role=slider]]:hover:shadow-[0_0_25px_rgba(34,211,238,1)] [&_[role=slider]]:transition-shadow [&_.relative]:bg-gray-700/50 [&_.relative]:border [&_.relative]:border-cyan-500/30 [&_.bg-primary]:bg-gradient-to-r [&_.bg-primary]:from-cyan-500 [&_.bg-primary]:to-purple-500 [&_.bg-primary]:shadow-[0_0_10px_rgba(34,211,238,0.5)]\"\n                  />\n                </div>\n\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <label className=\"text-cyan-400 text-sm font-medium flex items-center gap-2\">\n                      <BarChart3 className=\"w-4 h-4\" />\n                      Array Size\n                    </label>\n                    <span className=\"text-cyan-300 text-xs\">{arraySize[0]}</span>\n                  </div>\n                  <Slider\n                    value={arraySize}\n                    onValueChange={setArraySize}\n                    min={5}\n                    max={100}\n                    step={5}\n                    className=\"[&_[role=slider]]:bg-gradient-to-r [&_[role=slider]]:from-purple-500 [&_[role=slider]]:to-pink-500 [&_[role=slider]]:border-2 [&_[role=slider]]:border-purple-300 [&_[role=slider]]:shadow-lg [&_[role=slider]]:shadow-purple-500/50 [&_[role=slider]]:transition-all [&_[role=slider]]:hover:shadow-purple-500/80 [&_[role=slider]]:hover:scale-110 [&>span]:bg-gradient-to-r [&>span]:from-purple-500/30 [&>span]:to-pink-500/30 [&>span]:h-2 [&>span]:rounded-full\"\n                  />\n                </div>\n\n                <div className=\"flex gap-3 pt-4\">\n                  <motion.button\n                    onClick={isPlaying ? pauseVisualization : startVisualization}\n                    disabled={array.length === 0 || (steps.length === 0 && !isPlaying)}\n                    whileHover={{ scale: 1.05 }}\n                    whileTap={{ scale: 0.95 }}\n                    className=\"flex-1 relative group disabled:opacity-50 disabled:cursor-not-allowed\"\n                  >\n                    <motion.div\n                      className={`absolute inset-0 rounded-lg blur-xl transition-all duration-300 ${\n                        isPlaying \n                          ? 'bg-gradient-to-r from-pink-500 to-purple-500 opacity-60' \n                          : 'bg-gradient-to-r from-cyan-500 to-blue-500 opacity-60'\n                      }`}\n                      animate={{\n                        opacity: [0.4, 0.7, 0.4],\n                      }}\n                      transition={{\n                        duration: 2,\n                        repeat: Infinity,\n                        ease: \"easeInOut\"\n                      }}\n                    />\n                    <div className={`relative px-6 py-3 rounded-lg border-2 transition-all duration-300 ${\n                      isPlaying\n                        ? 'bg-gradient-to-r from-pink-500/20 to-purple-500/20 border-pink-400/50'\n                        : 'bg-gradient-to-r from-cyan-500/20 to-blue-500/20 border-cyan-400/50'\n                    }`}>\n                      <div className=\"flex items-center justify-center gap-2\">\n                        <motion.div\n                          key={isPlaying ? 'pause' : 'play'}\n                          initial={{ scale: 0, rotate: -180 }}\n                          animate={{ scale: 1, rotate: 0 }}\n                          exit={{ scale: 0, rotate: 180 }}\n                          transition={{ type: 'spring', stiffness: 200, damping: 15 }}\n                        >\n                          {isPlaying ? (\n                            <Pause className=\"w-5 h-5 text-pink-300 fill-pink-300\" />\n                          ) : (\n                            <Play className=\"w-5 h-5 text-cyan-300 fill-cyan-300\" />\n                          )}\n                        </motion.div>\n                        <span className={`font-bold tracking-wider ${\n                          isPlaying ? 'text-pink-300' : 'text-cyan-300'\n                        }`}>\n                          {isPlaying ? 'PAUSE' : 'PLAY'}\n                        </span>\n                      </div>\n                    </div>\n                  </motion.button>\n                  <motion.button\n                    onClick={resetVisualization}\n                    className=\"flex-1 flex items-center justify-center gap-2 px-6 py-3 bg-gradient-to-r from-pink-500/20 to-purple-500/20 border-2 border-pink-400/50 rounded-lg text-pink-300 font-semibold hover:from-pink-500/30 hover:to-purple-500/30 hover:border-pink-400 hover:shadow-lg hover:shadow-pink-500/50 transition-all duration-300 disabled:opacity-50 disabled:cursor-not-allowed\"\n                    whileHover={{ scale: 1.05 }}\n                    whileTap={{ scale: 0.95, rotate: 360 }}\n                    transition={{ type: \"spring\", stiffness: 400, damping: 17 }}\n                  >\n                    <motion.div\n                      animate={{ rotate: 0 }}\n                      whileHover={{ rotate: 180 }}\n                      transition={{ duration: 0.5 }}\n                    >\n                      <RotateCcw className=\"w-5 h-5\" />\n                    </motion.div>\n                    Reset\n                  </motion.button>\n\n                  <motion.button\n                    onClick={isPlaying ? pauseVisualization : startVisualization}\n                    className={`flex-1 flex items-center justify-center gap-2 px-6 py-3 rounded-lg font-semibold transition-all duration-300 border-2 ${\n                      isPlaying\n                        ? 'bg-gradient-to-r from-yellow-500/20 to-orange-500/20 border-yellow-400/50 text-yellow-300 hover:from-yellow-500/30 hover:to-orange-500/30 hover:border-yellow-400 hover:shadow-lg hover:shadow-yellow-500/50'\n                        : 'bg-gradient-to-r from-cyan-500/20 to-blue-500/20 border-cyan-400/50 text-cyan-300 hover:from-cyan-500/30 hover:to-blue-500/30 hover:border-cyan-400 hover:shadow-lg hover:shadow-cyan-500/50'\n                    }`}\n                    whileHover={{ scale: 1.05 }}\n                    whileTap={{ scale: 0.95 }}\n                    disabled={array.length === 0}\n                  >\n                    {isPlaying ? (\n                      <>\n                        <Pause className=\"w-5 h-5\" />\n                        Pause\n                      </>\n                    ) : (\n                      <>\n                        <Play className=\"w-5 h-5\" />\n                        Start\n                      </>\n                    )}\n                  </motion.button>\n                </div>\n              </div>\n            </div>\n\n            <motion.div\n              initial={{ opacity: 0, x: -50 }}\n              animate={{ opacity: 1, x: 0 }}\n              transition={{ delay: 0.2 }}\n              className=\"bg-gray-900/50 backdrop-blur-lg border border-purple-500/30 rounded-xl p-6 shadow-2xl shadow-purple-500/20\"\n            >\n              <div className=\"space-y-4\">\n                <div className=\"flex items-center gap-2 mb-4\">\n                  <BarChart3 className=\"w-5 h-5 text-purple-400\" />\n                  <h3 className=\"text-purple-400 font-bold text-lg tracking-wider\">STATISTICS</h3>\n                </div>\n\n                {/* Comparisons Counter */}\n                <div className=\"relative overflow-hidden rounded-lg bg-gradient-to-r from-cyan-500/10 to-cyan-500/5 border border-cyan-500/30 p-4\">\n                  <motion.div\n                    className=\"absolute inset-0 bg-gradient-to-r from-transparent via-cyan-400/10 to-transparent\"\n                    animate={{ x: ['-100%', '200%'] }}\n                    transition={{ duration: 3, repeat: Infinity, ease: 'linear' }}\n                  />\n                  <div className=\"relative space-y-2\">\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"text-cyan-400 text-sm font-semibold tracking-wide\">COMPARISONS</span>\n                      <motion.div\n                        className=\"w-2 h-2 rounded-full bg-cyan-400\"\n                        animate={{\n                          boxShadow: [\n                            '0 0 5px rgba(34, 211, 238, 0.5)',\n                            '0 0 20px rgba(34, 211, 238, 1)',\n                            '0 0 5px rgba(34, 211, 238, 0.5)'\n                          ]\n                        }}\n                        transition={{ duration: 1.5, repeat: Infinity }}\n                      />\n                    </div>\n                    <motion.div\n                      key={steps[currentStep]?.comparingIndices.length || 0}\n                      initial={{ scale: 1.2, color: '#00ffff' }}\n                      animate={{ scale: 1, color: '#ffffff' }}\n                      className=\"text-3xl font-bold text-white font-mono\"\n                    >\n                      {currentStep > 0 ? currentStep : 0}\n                    </motion.div>\n                  </div>\n                </div>\n\n                {/* Swaps Counter */}\n                <div className=\"relative overflow-hidden rounded-lg bg-gradient-to-r from-pink-500/10 to-pink-500/5 border border-pink-500/30 p-4\">\n                  <motion.div\n                    className=\"absolute inset-0 bg-gradient-to-r from-transparent via-pink-400/10 to-transparent\"\n                    animate={{ x: ['-100%', '200%'] }}\n                    transition={{ duration: 3, repeat: Infinity, ease: 'linear', delay: 1 }}\n                  />\n                  <div className=\"relative space-y-2\">\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"text-pink-400 text-sm font-semibold tracking-wide\">SWAPS</span>\n                      <motion.div\n                        className=\"w-2 h-2 rounded-full bg-pink-400\"\n                        animate={{\n                          boxShadow: [\n                            '0 0 5px rgba(236, 72, 153, 0.5)',\n                            '0 0 20px rgba(236, 72, 153, 1)',\n                            '0 0 5px rgba(236, 72, 153, 0.5)'\n                          ]\n                        }}\n                        transition={{ duration: 1.5, repeat: Infinity, delay: 0.5 }}\n                      />\n                    </div>\n                    <motion.div\n                      key={steps[currentStep]?.swappingIndices.length || 0}\n                      initial={{ scale: 1.2, color: '#ff0066' }}\n                      animate={{ scale: 1, color: '#ffffff' }}\n                      className=\"text-3xl font-bold text-white font-mono\"\n                    >\n                      {steps.filter((step, idx) => idx <= currentStep && step.swappingIndices.length > 0).length}\n                    </motion.div>\n                  </div>\n                </div>\n\n                {/* Progress Indicator */}\n                <div className=\"relative overflow-hidden rounded-lg bg-gradient-to-r from-purple-500/10 to-purple-500/5 border border-purple-500/30 p-4\">\n                  <motion.div\n                    className=\"absolute inset-0 bg-gradient-to-r from-transparent via-purple-400/10 to-transparent\"\n                    animate={{ x: ['-100%', '200%'] }}\n                    transition={{ duration: 3, repeat: Infinity, ease: 'linear', delay: 2 }}\n                  />\n                  <div className=\"relative space-y-3\">\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"text-purple-400 text-sm font-semibold tracking-wide\">PROGRESS</span>\n                      <motion.div\n                        className=\"w-2 h-2 rounded-full bg-purple-400\"\n                        animate={{\n                          boxShadow: [\n                            '0 0 5px rgba(168, 85, 247, 0.5)',\n                            '0 0 20px rgba(168, 85, 247, 1)',\n                            '0 0 5px rgba(168, 85, 247, 0.5)'\n                          ]\n                        }}\n                        transition={{ duration: 1.5, repeat: Infinity, delay: 1 }}\n                      />\n                    </div>\n                    <div className=\"flex items-baseline gap-2\">\n                      <motion.div\n                        key={currentStep}\n                        initial={{ scale: 1.2, color: '#a855f7' }}\n                        animate={{ scale: 1, color: '#ffffff' }}\n                        className=\"text-3xl font-bold text-white font-mono\"\n                      >\n                        {steps.length > 0 ? Math.round((currentStep / Math.max(steps.length - 1, 1)) * 100) : 0}\n                      </motion.div>\n                      <span className=\"text-purple-300 text-xl font-semibold\">%</span>\n                    </div>\n                    \n                    {/* Progress Bar */}\n                    <div className=\"relative h-2 bg-gray-800 rounded-full overflow-hidden border border-purple-500/30\">\n                      <motion.div\n                        className=\"absolute inset-y-0 left-0 bg-gradient-to-r from-purple-500 via-pink-500 to-cyan-500 rounded-full\"\n                        initial={{ width: '0%' }}\n                        animate={{\n                          width: steps.length > 0 ? `${(currentStep / Math.max(steps.length - 1, 1)) * 100}%` : '0%'\n                        }}\n                        transition={{ duration: 0.3 }}\n                      />\n                      <motion.div\n                        className=\"absolute inset-0 bg-gradient-to-r from-transparent via-white/30 to-transparent\"\n                        animate={{ x: ['-100%', '200%'] }}\n                        transition={{ duration: 1.5, repeat: Infinity, ease: 'linear' }}\n                      />\n                    </div>\n                  </div>\n                </div>\n\n                {/* Array Status */}\n                <div className=\"relative overflow-hidden rounded-lg bg-gradient-to-r from-green-500/10 to-green-500/5 border border-green-500/30 p-4\">\n                  <div className=\"relative space-y-2\">\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"text-green-400 text-sm font-semibold tracking-wide\">SORTED ELEMENTS</span>\n                      <motion.div\n                        className=\"w-2 h-2 rounded-full bg-green-400\"\n                        animate={{\n                          boxShadow: [\n                            '0 0 5px rgba(34, 197, 94, 0.5)',\n                            '0 0 20px rgba(34, 197, 94, 1)',\n                            '0 0 5px rgba(34, 197, 94, 0.5)'\n                          ]\n                        }}\n                        transition={{ duration: 1.5, repeat: Infinity, delay: 1.5 }}\n                      />\n                    </div>\n                    <div className=\"flex items-baseline gap-2\">\n                      <motion.div\n                        key={steps[currentStep]?.sortedIndices.length || 0}\n                        initial={{ scale: 1.2, color: '#00ff00' }}\n                        animate={{ scale: 1, color: '#ffffff' }}\n                        className=\"text-3xl font-bold text-white font-mono\"\n                      >\n                        {steps[currentStep]?.sortedIndices.length || 0}\n                      </motion.div>\n                      <span className=\"text-green-300 text-lg\">/ {array.length}</span>\n                    </div>\n                  </div>\n                </div>\n\n                {/* Status Indicator */}\n                <div className=\"pt-4 border-t border-gray-700/50\">\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-gray-400 text-xs font-semibold tracking-wider\">STATUS</span>\n                    <motion.div\n                      className=\"flex items-center gap-2 px-3 py-1 rounded-full border\"\n                      animate={{\n                        borderColor: isPlaying ? '#00ff00' : steps.length > 0 && currentStep >= steps.length - 1 ? '#00ffff' : '#666666',\n                        backgroundColor: isPlaying ? 'rgba(0, 255, 0, 0.1)' : steps.length > 0 && currentStep >= steps.length - 1 ? 'rgba(0, 255, 255, 0.1)' : 'rgba(100, 100, 100, 0.1)'\n                      }}\n                    >\n                      <motion.div\n                        className=\"w-2 h-2 rounded-full\"\n                        animate={{\n                          backgroundColor: isPlaying ? '#00ff00' : steps.length > 0 && currentStep >= steps.length - 1 ? '#00ffff' : '#666666',\n                          boxShadow: isPlaying ? '0 0 10px rgba(0, 255, 0, 0.8)' : steps.length > 0 && currentStep >= steps.length - 1 ? '0 0 10px rgba(0, 255, 255, 0.8)' : 'none'\n                        }}\n                      />\n                      <span className={`text-xs font-semibold ${\n                        isPlaying ? 'text-green-400' : steps.length > 0 && currentStep >= steps.length - 1 ? 'text-cyan-400' : 'text-gray-500'\n                      }`}>\n                        {isPlaying ? 'RUNNING' : steps.length > 0 && currentStep >= steps.length - 1 ? 'COMPLETE' : 'IDLE'}\n                      </span>\n                    </motion.div>\n                  </div>\n                </div>\n              </div>\n            </motion.div>\n          </div>\n\n          <div className=\"lg:col-span-3\">\n            <div className=\"bg-gray-900/50 backdrop-blur-lg border border-purple-500/30 rounded-xl p-8 shadow-2xl shadow-purple-500/20 min-h-[600px]\">\n                            {array.length === 0 ? (\n                <motion.div\n                  initial={{ opacity: 0, scale: 0.8 }}\n                  animate={{ opacity: 1, scale: 1 }}\n                  className=\"absolute inset-0 flex flex-col items-center justify-center space-y-6\"\n                >\n                  <motion.div\n                    animate={{\n                      rotate: [0, 360],\n                      scale: [1, 1.2, 1]\n                    }}\n                    transition={{ duration: 3, repeat: Infinity, ease: \"easeInOut\" }}\n                  >\n                    <BarChart3 className=\"w-24 h-24 text-cyan-400/50\" />\n                  </motion.div>\n                  <div className=\"text-center space-y-2\">\n                    <h3 className=\"text-2xl font-bold text-cyan-400\">Ready to Visualize</h3>\n                    <p className=\"text-gray-400\">Generate an array to begin</p>\n                  </div>\n                </motion.div>\n              ) : (\n                <div className=\"relative w-full h-full flex items-end justify-center gap-1 px-4\">\n                  {/* Comparison Indicators */}\n                  {steps.length > 0 && currentStep < steps.length && steps[currentStep].comparingIndices.length > 0 && (\n                    <>\n                      {steps[currentStep].comparingIndices.map((index, i) => {\n                        const barWidth = (100 / array.length);\n                        const leftPosition = index * barWidth + (barWidth / 2);\n                        \n                        return (\n                          <motion.div\n                            key={`compare-${index}-${i}`}\n                            className=\"absolute top-0 pointer-events-none\"\n                            style={{\n                              left: `${leftPosition}%`,\n                              transform: 'translateX(-50%)'\n                            }}\n                            initial={{ opacity: 0, y: -20 }}\n                            animate={{ \n                              opacity: [0.5, 1, 0.5],\n                              y: 0,\n                              scale: [1, 1.2, 1]\n                            }}\n                            transition={{ \n                              duration: 0.6,\n                              repeat: Infinity,\n                              ease: \"easeInOut\"\n                            }}\n                          >\n                            <div className=\"flex flex-col items-center\">\n                              <motion.div\n                                className=\"w-3 h-3 rounded-full bg-yellow-400 shadow-[0_0_20px_rgba(250,204,21,0.8)]\"\n                                animate={{\n                                  boxShadow: [\n                                    '0 0 20px rgba(250,204,21,0.8)',\n                                    '0 0 40px rgba(250,204,21,1)',\n                                    '0 0 20px rgba(250,204,21,0.8)'\n                                  ]\n                                }}\n                                transition={{ duration: 0.6, repeat: Infinity }}\n                              />\n                              <motion.div\n                                className=\"w-0.5 h-8 bg-gradient-to-b from-yellow-400 to-transparent\"\n                                animate={{\n                                  opacity: [0.5, 1, 0.5]\n                                }}\n                                transition={{ duration: 0.6, repeat: Infinity }}\n                              />\n                            </div>\n                          </motion.div>\n                        );\n                      })}\n                    </>\n                  )}\n\n                  {/* Swap Trail Effects */}\n                  {steps.length > 0 && currentStep < steps.length && steps[currentStep].swappingIndices.length > 0 && (\n                    <>\n                      {steps[currentStep].swappingIndices.map((index, i) => {\n                        const barWidth = (100 / array.length);\n                        const leftPosition = index * barWidth + (barWidth / 2);\n                        \n                        return (\n                          <motion.div\n                            key={`swap-${index}-${i}`}\n                            className=\"absolute top-0 bottom-0 pointer-events-none\"\n                            style={{\n                              left: `${leftPosition}%`,\n                              transform: 'translateX(-50%)',\n                              width: `${barWidth}%`\n                            }}\n                            initial={{ opacity: 0 }}\n                            animate={{ opacity: [0, 0.6, 0] }}\n                            transition={{ duration: 0.8 }}\n                          >\n                            <div className=\"relative w-full h-full\">\n                              <motion.div\n                                className=\"absolute inset-0 bg-gradient-to-t from-pink-500/30 via-purple-500/20 to-transparent rounded-lg\"\n                                animate={{\n                                  scale: [1, 1.1, 1],\n                                  opacity: [0.3, 0.6, 0.3]\n                                }}\n                                transition={{ duration: 0.5, repeat: Infinity }}\n                              />\n                              {/* Particle effects */}\n                              {[...Array(5)].map((_, particleIndex) => (\n                                <motion.div\n                                  key={`particle-${particleIndex}`}\n                                  className=\"absolute w-1 h-1 bg-pink-400 rounded-full\"\n                                  style={{\n                                    left: '50%',\n                                    bottom: `${Math.random() * 100}%`\n                                  }}\n                                  initial={{ \n                                    opacity: 1,\n                                    x: 0,\n                                    scale: 1\n                                  }}\n                                  animate={{\n                                    opacity: [1, 0],\n                                    x: [(Math.random() - 0.5) * 20, (Math.random() - 0.5) * 40],\n                                    y: [0, -30],\n                                    scale: [1, 0]\n                                  }}\n                                  transition={{\n                                    duration: 0.8,\n                                    delay: particleIndex * 0.1,\n                                    ease: \"easeOut\"\n                                  }}\n                                />\n                              ))}\n                            </div>\n                          </motion.div>\n                        );\n                      })}\n                      \n                      {/* Connecting arc between swapping elements */}\n                      {steps[currentStep].swappingIndices.length === 2 && (\n                        <motion.svg\n                          className=\"absolute top-0 left-0 w-full h-full pointer-events-none\"\n                          initial={{ opacity: 0 }}\n                          animate={{ opacity: [0, 1, 0] }}\n                          transition={{ duration: 0.8 }}\n                        >\n                          <motion.path\n                            d={`M ${(steps[currentStep].swappingIndices[0] / array.length) * 100}% 20% Q 50% 5% ${(steps[currentStep].swappingIndices[1] / array.length) * 100}% 20%`}\n                            stroke=\"url(#swapGradient)\"\n                            strokeWidth=\"3\"\n                            fill=\"none\"\n                            initial={{ pathLength: 0 }}\n                            animate={{ pathLength: [0, 1, 0] }}\n                            transition={{ duration: 0.8, ease: \"easeInOut\" }}\n                          />\n                          <defs>\n                            <linearGradient id=\"swapGradient\" x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"0%\">\n                              <stop offset=\"0%\" stopColor=\"#ec4899\" stopOpacity=\"0.8\" />\n                              <stop offset=\"50%\" stopColor=\"#a855f7\" stopOpacity=\"1\" />\n                              <stop offset=\"100%\" stopColor=\"#ec4899\" stopOpacity=\"0.8\" />\n                            </linearGradient>\n                          </defs>\n                        </motion.svg>\n                      )}\n                    </>\n                  )}\n\n                  {/* Array Bars */}\n                  {array.map((element, index) => {\n                    const isComparing = steps.length > 0 && currentStep < steps.length && \n                      steps[currentStep].comparingIndices.includes(index);\n                    const isSwapping = steps.length > 0 && currentStep < steps.length && \n                      steps[currentStep].swappingIndices.includes(index);\n                    const isSorted = steps.length > 0 && currentStep < steps.length && \n                      steps[currentStep].sortedIndices.includes(index);\n                    \n                    const maxHeight = 500;\n                    const height = (element.value / 100) * maxHeight;\n                    const colorIndex = index % NEON_COLORS.length;\n                    const baseColor = NEON_COLORS[colorIndex];\n                    \n                    let barColor = baseColor;\n                    let glowColor = baseColor;\n                    let shadowIntensity = '0.5';\n                    \n                    if (isSorted) {\n                      barColor = '#00ff00';\n                      glowColor = '#00ff00';\n                      shadowIntensity = '0.8';\n                    } else if (isSwapping) {\n                      barColor = '#ff00ff';\n                      glowColor = '#ff00ff';\n                      shadowIntensity = '1';\n                    } else if (isComparing) {\n                      barColor = '#ffff00';\n                      glowColor = '#ffff00';\n                      shadowIntensity = '0.9';\n                    }\n                    \n                    return (\n                      <motion.div\n                        key={element.id}\n                        className=\"relative flex-1 min-w-[2px] rounded-t-lg\"\n                        style={{\n                          backgroundColor: barColor,\n                          boxShadow: `0 0 20px ${glowColor}${Math.floor(parseFloat(shadowIntensity) * 255).toString(16).padStart(2, '0')}, \n                                      0 0 40px ${glowColor}${Math.floor(parseFloat(shadowIntensity) * 0.5 * 255).toString(16).padStart(2, '0')},\n                                      inset 0 0 20px ${glowColor}${Math.floor(parseFloat(shadowIntensity) * 0.3 * 255).toString(16).padStart(2, '0')}`\n                        }}\n                        initial={{ height: 0, opacity: 0 }}\n                        animate={{\n                          height: `${height}px`,\n                          opacity: 1,\n                          scale: isSwapping ? [1, 1.1, 1] : isComparing ? [1, 1.05, 1] : 1,\n                          y: isSwapping ? [0, -10, 0] : 0\n                        }}\n                        transition={{\n                          height: { duration: 0.5, ease: \"easeOut\" },\n                          opacity: { duration: 0.3 },\n                          scale: { duration: 0.3, repeat: isComparing || isSwapping ? Infinity : 0 },\n                          y: { duration: 0.5 }\n                        }}\n                      >\n                        {/* Inner glow effect */}\n                        <motion.div\n                          className=\"absolute inset-0 rounded-t-lg\"\n                          style={{\n                            background: `linear-gradient(to top, transparent, ${barColor}40)`\n                          }}\n                          animate={{\n                            opacity: [0.3, 0.6, 0.3]\n                          }}\n                          transition={{\n                            duration: 2,\n                            repeat: Infinity,\n                            ease: \"easeInOut\"\n                          }}\n                        />\n                        \n                        {/* Value label for larger arrays */}\n                        {array.length <= 30 && (\n                          <motion.div\n                            className=\"absolute -top-6 left-1/2 transform -translate-x-1/2 text-xs font-bold whitespace-nowrap\"\n                            style={{ color: barColor }}\n                            initial={{ opacity: 0 }}\n                            animate={{ opacity: isSorted || isComparing || isSwapping ? 1 : 0.6 }}\n                          >\n                            {element.value}\n                          </motion.div>\n                        )}\n                        \n                        {/* Sorted checkmark */}\n                        {isSorted && (\n                          <motion.div\n                            className=\"absolute -top-8 left-1/2 transform -translate-x-1/2\"\n                            initial={{ scale: 0, rotate: -180 }}\n                            animate={{ scale: 1, rotate: 0 }}\n                            transition={{ type: \"spring\", stiffness: 200, damping: 10 }}\n                          >\n                            <div className=\"w-4 h-4 rounded-full bg-green-400 flex items-center justify-center shadow-[0_0_15px_rgba(34,197,94,0.8)]\">\n                              <svg className=\"w-3 h-3 text-gray-900\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={3} d=\"M5 13l4 4L19 7\" />\n                              </svg>\n                            </div>\n                          </motion.div>\n                        )}\n                      </motion.div>\n                    );\n                  })}\n                </div>\n              )}\n              \n              <div className=\"relative h-full flex items-end justify-center gap-1\">\n                {currentStep < steps.length && steps[currentStep] ? (\n                  steps[currentStep].array.map((element, index) => {\n                    const isComparing = steps[currentStep].comparingIndices.includes(index);\n                    const isSwapping = steps[currentStep].swappingIndices.includes(index);\n                    const isSorted = steps[currentStep].sortedIndices.includes(index);\n                    \n                    const barColor = isSorted \n                      ? '#00ff00' \n                      : isSwapping \n                      ? '#ff0066' \n                      : isComparing \n                      ? '#ffff00' \n                      : NEON_COLORS[index % NEON_COLORS.length];\n                    \n                    const maxHeight = 500;\n                    const barHeight = (element.value / 100) * maxHeight;\n                    \n                    return (\n                      <motion.div\n                        key={element.id}\n                        layout\n                        initial={{ height: 0, opacity: 0 }}\n                        animate={{\n                          height: barHeight,\n                          opacity: 1,\n                          boxShadow: isComparing\n                            ? `0 0 30px ${barColor}, 0 0 60px ${barColor}`\n                            : isSwapping\n                            ? `0 0 40px ${barColor}, 0 0 80px ${barColor}, 0 0 120px ${barColor}`\n                            : isSorted\n                            ? `0 0 20px ${barColor}, 0 0 40px ${barColor}`\n                            : `0 0 15px ${barColor}`,\n                          scale: isSwapping ? 1.1 : isComparing ? 1.05 : 1\n                        }}\n                        transition={{\n                          height: { duration: 0.3, ease: 'easeOut' },\n                          boxShadow: { duration: 0.2 },\n                          scale: { duration: 0.2, type: 'spring' },\n                          layout: { duration: 0.4, ease: 'easeInOut' }\n                        }}\n                        className=\"relative rounded-t-lg\"\n                        style={{\n                          backgroundColor: barColor,\n                          width: `${Math.max(100 / arraySize[0], 8)}px`,\n                          minWidth: '4px',\n                          border: `2px solid ${barColor}`,\n                          filter: isSorted ? 'brightness(1.2)' : 'brightness(1)'\n                        }}\n                      >\n                        {isSwapping && (\n                          <motion.div\n                            className=\"absolute inset-0 rounded-t-lg\"\n                            style={{\n                              background: `linear-gradient(180deg, ${barColor}00 0%, ${barColor} 100%)`\n                            }}\n                            initial={{ opacity: 0 }}\n                            animate={{ opacity: [0, 1, 0] }}\n                            transition={{ duration: 0.6, repeat: Infinity }}\n                          />\n                        )}\n                        \n                        {arraySize[0] <= 30 && (\n                          <motion.div\n                            className=\"absolute -top-8 left-1/2 transform -translate-x-1/2 text-xs font-bold whitespace-nowrap\"\n                            style={{ color: barColor }}\n                            animate={{\n                              textShadow: isComparing || isSwapping\n                                ? `0 0 10px ${barColor}`\n                                : 'none'\n                            }}\n                          >\n                            {element.value}\n                          </motion.div>\n                        )}\n                        \n                        {isComparing && (\n                          <motion.div\n                            className=\"absolute -top-12 left-1/2 transform -translate-x-1/2\"\n                            initial={{ y: -10, opacity: 0 }}\n                            animate={{ y: 0, opacity: 1 }}\n                            exit={{ y: 10, opacity: 0 }}\n                          >\n                            <div\n                              className=\"w-3 h-3 rounded-full\"\n                              style={{\n                                backgroundColor: barColor,\n                                boxShadow: `0 0 15px ${barColor}`\n                              }}\n                            />\n                          </motion.div>\n                        )}\n                      </motion.div>\n                    );\n                  })\n                ) : array.length > 0 ? (\n                  array.map((element, index) => {\n                    const barColor = NEON_COLORS[index % NEON_COLORS.length];\n                    const maxHeight = 500;\n                    const barHeight = (element.value / 100) * maxHeight;\n                    \n                    return (\n                      <motion.div\n                        key={element.id}\n                        initial={{ height: 0, opacity: 0 }}\n                        animate={{\n                          height: barHeight,\n                          opacity: 1,\n                          boxShadow: `0 0 15px ${barColor}`\n                        }}\n                        transition={{\n                          height: { duration: 0.5, ease: 'easeOut' },\n                          opacity: { duration: 0.3 }\n                        }}\n                        className=\"relative rounded-t-lg\"\n                        style={{\n                          backgroundColor: barColor,\n                          width: `${Math.max(100 / arraySize[0], 8)}px`,\n                          minWidth: '4px',\n                          border: `2px solid ${barColor}`\n                        }}\n                      >\n                        {arraySize[0] <= 30 && (\n                          <div\n                            className=\"absolute -top-8 left-1/2 transform -translate-x-1/2 text-xs font-bold whitespace-nowrap\"\n                            style={{ color: barColor }}\n                          >\n                            {element.value}\n                          </div>\n                        )}\n                      </motion.div>\n                    );\n                  })\n                ) : (\n                  <motion.div\n                    initial={{ opacity: 0 }}\n                    animate={{ opacity: 1 }}\n                    className=\"absolute inset-0 flex items-center justify-center\"\n                  >\n                    <div className=\"text-center space-y-4\">\n                      <motion.div\n                        animate={{\n                          textShadow: [\n                            '0 0 20px rgba(0, 255, 255, 0.5)',\n                            '0 0 40px rgba(255, 0, 255, 0.5)',\n                            '0 0 20px rgba(0, 255, 255, 0.5)'\n                          ]\n                        }}\n                        transition={{ duration: 2, repeat: Infinity }}\n                        className=\"text-2xl font-bold text-cyan-400\"\n                      >\n                        Generate an array to begin\n                      </motion.div>\n                      <div className=\"text-gray-500\">Click GENERATE to create a random array</div>\n                    </div>\n                  </motion.div>\n                )}</parameter>\n</invoke>\n              </div>\n            </div>\n\n                        <motion.div\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ delay: 0.3 }}\n              className=\"mt-6 bg-gray-900/50 backdrop-blur-lg border border-purple-500/30 rounded-xl p-6 shadow-2xl shadow-purple-500/20\"\n            >\n              <div className=\"space-y-3\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center gap-2\">\n                    <BarChart3 className=\"w-5 h-5 text-purple-400\" />\n                    <span className=\"text-purple-400 font-bold text-sm tracking-wider\">SORTING PROGRESS</span>\n                  </div>\n                  <motion.span\n                    key={currentStep}\n                    initial={{ scale: 1.2, color: '#a78bfa' }}\n                    animate={{ scale: 1, color: '#c084fc' }}\n                    className=\"text-purple-300 font-bold text-lg\"\n                  >\n                    {steps.length > 0 ? Math.round((currentStep / Math.max(steps.length - 1, 1)) * 100) : 0}%\n                  </motion.span>\n                </div>\n                \n                <div className=\"relative h-4 bg-gray-800/50 rounded-full overflow-hidden border border-purple-500/30\">\n                  <motion.div\n                    className=\"absolute inset-y-0 left-0 bg-gradient-to-r from-purple-500 via-pink-500 to-cyan-500 rounded-full\"\n                    initial={{ width: '0%' }}\n                    animate={{ \n                      width: steps.length > 0 ? `${(currentStep / Math.max(steps.length - 1, 1)) * 100}%` : '0%'\n                    }}\n                    transition={{ duration: 0.3, ease: 'easeOut' }}\n                  >\n                    <motion.div\n                      className=\"absolute inset-0 bg-gradient-to-r from-transparent via-white/30 to-transparent\"\n                      animate={{ x: ['-100%', '200%'] }}\n                      transition={{ duration: 1.5, repeat: Infinity, ease: 'linear' }}\n                    />\n                  </motion.div>\n                  \n                  <motion.div\n                    className=\"absolute inset-0 rounded-full\"\n                    animate={{\n                      boxShadow: [\n                        '0 0 10px rgba(168, 85, 247, 0.4)',\n                        '0 0 20px rgba(168, 85, 247, 0.6)',\n                        '0 0 10px rgba(168, 85, 247, 0.4)'\n                      ]\n                    }}\n                    transition={{ duration: 2, repeat: Infinity }}\n                  />\n                </div>\n                \n                <div className=\"flex justify-between text-xs text-gray-400\">\n                  <span>Step {currentStep}</span>\n                  <span>Total {steps.length > 0 ? steps.length - 1 : 0}</span>\n                </div>\n              </div>\n            </motion.div>\n          </div>\n        </div>\n\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ delay: 0.4, duration: 0.6 }}\n          className=\"bg-gray-900/50 backdrop-blur-lg border border-purple-500/30 rounded-xl p-6 shadow-2xl shadow-purple-500/20\"\n        >\n          <div className=\"flex items-center gap-2 mb-4\">\n            <BarChart3 className=\"w-5 h-5 text-purple-400\" />\n            <h3 className=\"text-purple-400 font-bold text-lg tracking-wider\">LEGEND</h3>\n          </div>\n          \n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n            {/* Default State */}\n            <motion.div\n              whileHover={{ scale: 1.05 }}\n              className=\"flex items-center gap-3 p-3 bg-gray-800/50 rounded-lg border border-gray-700/50 hover:border-gray-600 transition-all duration-300\"\n            >\n              <motion.div\n                className=\"w-6 h-6 rounded-md bg-gradient-to-br from-cyan-400 to-blue-500 shadow-lg\"\n                animate={{\n                  boxShadow: [\n                    '0 0 10px rgba(34, 211, 238, 0.5)',\n                    '0 0 20px rgba(34, 211, 238, 0.8)',\n                    '0 0 10px rgba(34, 211, 238, 0.5)'\n                  ]\n                }}\n                transition={{ duration: 2, repeat: Infinity }}\n              />\n              <div>\n                <div className=\"text-white font-semibold text-sm\">Default</div>\n                <div className=\"text-gray-400 text-xs\">Unsorted</div>\n              </div>\n            </motion.div>\n\n            {/* Comparing State */}\n            <motion.div\n              whileHover={{ scale: 1.05 }}\n              className=\"flex items-center gap-3 p-3 bg-gray-800/50 rounded-lg border border-yellow-500/30 hover:border-yellow-500/50 transition-all duration-300\"\n            >\n              <motion.div\n                className=\"w-6 h-6 rounded-md bg-gradient-to-br from-yellow-400 to-orange-500 shadow-lg\"\n                animate={{\n                  boxShadow: [\n                    '0 0 15px rgba(234, 179, 8, 0.6)',\n                    '0 0 30px rgba(234, 179, 8, 1)',\n                    '0 0 15px rgba(234, 179, 8, 0.6)'\n                  ],\n                  scale: [1, 1.1, 1]\n                }}\n                transition={{ duration: 1.5, repeat: Infinity }}\n              />\n              <div>\n                <div className=\"text-yellow-300 font-semibold text-sm\">Comparing</div>\n                <div className=\"text-gray-400 text-xs\">Active check</div>\n              </div>\n            </motion.div>\n\n            {/* Swapping State */}\n            <motion.div\n              whileHover={{ scale: 1.05 }}\n              className=\"flex items-center gap-3 p-3 bg-gray-800/50 rounded-lg border border-pink-500/30 hover:border-pink-500/50 transition-all duration-300\"\n            >\n              <motion.div\n                className=\"w-6 h-6 rounded-md bg-gradient-to-br from-pink-500 to-red-500 shadow-lg\"\n                animate={{\n                  boxShadow: [\n                    '0 0 15px rgba(236, 72, 153, 0.6)',\n                    '0 0 30px rgba(236, 72, 153, 1)',\n                    '0 0 15px rgba(236, 72, 153, 0.6)'\n                  ],\n                  rotate: [0, 5, -5, 0]\n                }}\n                transition={{ duration: 1, repeat: Infinity }}\n              />\n              <div>\n                <div className=\"text-pink-300 font-semibold text-sm\">Swapping</div>\n                <div className=\"text-gray-400 text-xs\">Exchanging</div>\n              </div>\n            </motion.div>\n\n            {/* Sorted State */}\n            <motion.div\n              whileHover={{ scale: 1.05 }}\n              className=\"flex items-center gap-3 p-3 bg-gray-800/50 rounded-lg border border-green-500/30 hover:border-green-500/50 transition-all duration-300\"\n            >\n              <motion.div\n                className=\"w-6 h-6 rounded-md bg-gradient-to-br from-green-400 to-emerald-500 shadow-lg\"\n                animate={{\n                  boxShadow: [\n                    '0 0 15px rgba(34, 197, 94, 0.6)',\n                    '0 0 25px rgba(34, 197, 94, 0.9)',\n                    '0 0 15px rgba(34, 197, 94, 0.6)'\n                  ]\n                }}\n                transition={{ duration: 2, repeat: Infinity }}\n              />\n              <div>\n                <div className=\"text-green-300 font-semibold text-sm\">Sorted</div>\n                <div className=\"text-gray-400 text-xs\">Complete</div>\n              </div>\n            </motion.div>\n          </div>\n\n          {/* Additional Info */}\n          <motion.div\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            transition={{ delay: 0.6 }}\n            className=\"mt-4 pt-4 border-t border-gray-700/50\"\n          >\n            <div className=\"flex items-center justify-between text-xs text-gray-400\">\n              <span className=\"flex items-center gap-2\">\n                <motion.div\n                  className=\"w-2 h-2 rounded-full bg-cyan-400\"\n                  animate={{\n                    opacity: [0.5, 1, 0.5],\n                    scale: [1, 1.2, 1]\n                  }}\n                  transition={{ duration: 2, repeat: Infinity }}\n                />\n                Watch the bars glow as they compare and swap\n              </span>\n            </div>\n          </motion.div>\n        </motion.div>\n      </div>\n    </div>\n  );\n}",
    "error": null,
    "elapsed_time": 104.39192414283752,
    "success": true
  }
}