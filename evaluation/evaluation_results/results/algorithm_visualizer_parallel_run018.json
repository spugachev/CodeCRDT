{
  "prompt_id": "algorithm_visualizer",
  "prompt_name": "Algorithm Visualizer",
  "mode": "parallel",
  "run_number": 18,
  "timestamp": "2025-10-14T02:30:56.535195",
  "response_time": 109.40354442596436,
  "total_tokens": null,
  "response_content": "import { useState, useCallback } from 'react';\nimport { useEffect } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Slider } from '@/components/ui/slider';\nimport { Play, Pause, RotateCcw, Zap, BarChart3 } from 'lucide-react';\nimport { motion } from 'framer-motion';\n\ninterface ArrayElement {\n  value: number;\n  id: string;\n  isComparing?: boolean;\n  isSwapping?: boolean;\n  isSorted?: boolean;\n}\n\ninterface AlgorithmStep {\n  array: ArrayElement[];\n  comparingIndices: number[];\n  swappingIndices: number[];\n  sortedIndices: number[];\n}\n\ntype AlgorithmType = 'bubble' | 'quick' | 'merge' | 'insertion';\n\nconst NEON_COLORS = [\n  '#00ffff',\n  '#ff00ff', \n  '#00ff00',\n  '#ffff00',\n  '#ff0066',\n  '#00ffaa'\n];\n\nconst mockAlgorithms = [\n  { id: 'bubble', name: 'Bubble Sort', complexity: 'O(n\u00b2)' },\n  { id: 'quick', name: 'Quick Sort', complexity: 'O(n log n)' },\n  { id: 'merge', name: 'Merge Sort', complexity: 'O(n log n)' },\n  { id: 'insertion', name: 'Insertion Sort', complexity: 'O(n\u00b2)' }\n];\n\nexport default function AlgorithmVisualizer() {\n  const [array, setArray] = useState<ArrayElement[]>([]);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [speed, setSpeed] = useState([50]);\n  const [arraySize, setArraySize] = useState([20]);\n  const [selectedAlgorithm, setSelectedAlgorithm] = useState<AlgorithmType>('bubble');\n  const [currentStep, setCurrentStep] = useState(0);\n  const [steps, setSteps] = useState<AlgorithmStep[]>([]);\n\n  const generateRandomArray = useCallback(() => {\n    const newArray: ArrayElement[] = Array.from({ length: arraySize[0] }, (_, index) => ({\n      value: Math.floor(Math.random() * 100) + 5,\n      id: `element-${index}-${Date.now()}`,\n      isComparing: false,\n      isSwapping: false,\n      isSorted: false\n    }));\n    setArray(newArray);\n    setSteps([]);\n    setCurrentStep(0);\n    setIsPlaying(false);\n  }, [arraySize]);\n\n  const resetVisualization = useCallback(() => {\n\n    setIsPlaying(false);\n    setCurrentStep(0);\n    setSteps([]);\n    generateRandomArray();\n  }, [generateRandomArray]);\n\n  useEffect(() => {\n    if (!isPlaying) return;\n\n    const delay = 1000 - (speed[0] * 9.5);\n    const timer = setTimeout(() => {\n      animateSteps();\n    }, delay);\n\n    return () => clearTimeout(timer);\n  }, [isPlaying, speed, animateSteps]);\n\n  const animateSteps = useCallback(() => {\n    if (currentStep >= steps.length) {\n      setIsPlaying(false);\n      return;\n    }\n\n    const step = steps[currentStep];\n    setArray(step.array);\n    setCurrentStep(prev => prev + 1);\n  }, [currentStep, steps]);\n\n  const startVisualization = useCallback(() => {\n    \n  }, [steps, speed, currentStep]);\n\n  const pauseVisualization = useCallback(() => {\n\n    /* TODO:PauseAnimation Set isPlaying false, preserve current step */\n  }, []);\n  useEffect(() => {\n    generateRandomArray();\n  }, [generateRandomArray]);\n\n  useEffect(() => {\n    if (!isPlaying) return;\n\n    const delay = 1000 - (speed[0] * 9);\n    const timer = setTimeout(() => {\n      animateSteps();\n    }, delay);\n\n    return () => clearTimeout(timer);\n  }, [isPlaying, animateSteps, speed]);\n\n  const generateSortingSteps = useCallback((algorithm: AlgorithmType) => {\n    const localArray = [...array];\n    const allSteps: AlgorithmStep[] = [];\n    \n    // Helper to create a step snapshot\n    const createStep = (arr: ArrayElement[], comparing: number[] = [], swapping: number[] = [], sorted: number[] = []) => {\n      allSteps.push({\n        array: arr.map(el => ({ ...el })),\n        comparingIndices: [...comparing],\n        swappingIndices: [...swapping],\n        sortedIndices: [...sorted]\n      });\n    };\n\n    // Initial state\n    createStep(localArray);\n\n    switch (algorithm) {\n      case 'bubble': {\n        const sortedIndices: number[] = [];\n        for (let i = 0; i < localArray.length - 1; i++) {\n          for (let j = 0; j < localArray.length - i - 1; j++) {\n            // Comparing\n            createStep(localArray, [j, j + 1], [], sortedIndices);\n            \n            if (localArray[j].value > localArray[j + 1].value) {\n              // Swapping\n              createStep(localArray, [], [j, j + 1], sortedIndices);\n              [localArray[j], localArray[j + 1]] = [localArray[j + 1], localArray[j]];\n              createStep(localArray, [], [], sortedIndices);\n            }\n          }\n          sortedIndices.push(localArray.length - i - 1);\n          createStep(localArray, [], [], sortedIndices);\n        }\n        sortedIndices.push(0);\n        createStep(localArray, [], [], sortedIndices);\n        break;\n      }\n\n      case 'insertion': {\n        const sortedIndices: number[] = [0];\n        createStep(localArray, [], [], sortedIndices);\n        \n        for (let i = 1; i < localArray.length; i++) {\n          const key = localArray[i];\n          let j = i - 1;\n          \n          createStep(localArray, [i], [], sortedIndices);\n          \n          while (j >= 0 && localArray[j].value > key.value) {\n            createStep(localArray, [j, j + 1], [], sortedIndices);\n            createStep(localArray, [], [j, j + 1], sortedIndices);\n            localArray[j + 1] = localArray[j];\n            createStep(localArray, [], [], sortedIndices);\n            j--;\n          }\n          \n          localArray[j + 1] = key;\n          sortedIndices.push(i);\n          createStep(localArray, [], [], sortedIndices);\n        }\n        break;\n      }\n\n      case 'quick': {\n        const sortedIndices: number[] = [];\n        \n        const partition = (low: number, high: number): number => {\n          const pivot = localArray[high].value;\n          let i = low - 1;\n          \n          createStep(localArray, [high], [], sortedIndices);\n          \n          for (let j = low; j < high; j++) {\n            createStep(localArray, [j, high], [], sortedIndices);\n            \n            if (localArray[j].value < pivot) {\n              i++;\n              if (i !== j) {\n                createStep(localArray, [], [i, j], sortedIndices);\n                [localArray[i], localArray[j]] = [localArray[j], localArray[i]];\n                createStep(localArray, [], [], sortedIndices);\n              }\n            }\n          }\n          \n          createStep(localArray, [], [i + 1, high], sortedIndices);\n          [localArray[i + 1], localArray[high]] = [localArray[high], localArray[i + 1]];\n          sortedIndices.push(i + 1);\n          createStep(localArray, [], [], sortedIndices);\n          \n          return i + 1;\n        };\n        \n        const quickSort = (low: number, high: number) => {\n          if (low < high) {\n            const pi = partition(low, high);\n            quickSort(low, pi - 1);\n            quickSort(pi + 1, high);\n          } else if (low === high) {\n            sortedIndices.push(low);\n            createStep(localArray, [], [], sortedIndices);\n          }\n        };\n        \n        quickSort(0, localArray.length - 1);\n        break;\n      }\n\n      case 'merge': {\n        const sortedIndices: number[] = [];\n        \n        const merge = (left: number, mid: number, right: number) => {\n          const leftArr = localArray.slice(left, mid + 1);\n          const rightArr = localArray.slice(mid + 1, right + 1);\n          \n          let i = 0, j = 0, k = left;\n          \n          while (i < leftArr.length && j < rightArr.length) {\n            createStep(localArray, [left + i, mid + 1 + j], [], sortedIndices);\n            \n            if (leftArr[i].value <= rightArr[j].value) {\n              createStep(localArray, [], [k], sortedIndices);\n              localArray[k] = leftArr[i];\n              i++;\n            } else {\n              createStep(localArray, [], [k], sortedIndices);\n              localArray[k] = rightArr[j];\n              j++;\n            }\n            k++;\n            createStep(localArray, [], [], sortedIndices);\n          }\n          \n          while (i < leftArr.length) {\n            createStep(localArray, [], [k], sortedIndices);\n            localArray[k] = leftArr[i];\n            i++;\n            k++;\n            createStep(localArray, [], [], sortedIndices);\n          }\n          \n          while (j < rightArr.length) {\n            createStep(localArray, [], [k], sortedIndices);\n            localArray[k] = rightArr[j];\n            j++;\n            k++;\n            createStep(localArray, [], [], sortedIndices);\n          }\n        };\n        \n        const mergeSort = (left: number, right: number) => {\n          if (left < right) {\n            const mid = Math.floor((left + right) / 2);\n            mergeSort(left, mid);\n            mergeSort(mid + 1, right);\n            merge(left, mid, right);\n          }\n        };\n        \n        mergeSort(0, localArray.length - 1);\n        \n        for (let i = 0; i < localArray.length; i++) {\n          sortedIndices.push(i);\n        }\n        createStep(localArray, [], [], sortedIndices);\n        break;\n      }\n    }\n\n    setSteps(allSteps);\n    setCurrentStep(0);\n  }, [array]);\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-gray-900 via-purple-900 to-gray-900 p-8\">\n      <div className=\"max-w-7xl mx-auto space-y-8\">\n        <motion.div\n          initial={{ opacity: 0, y: -20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.8 }}\n          className=\"text-center space-y-4\"\n        >\n          <motion.h1\n            className=\"text-6xl font-bold bg-gradient-to-r from-cyan-400 via-purple-400 to-pink-400 bg-clip-text text-transparent\"\n            animate={{\n              textShadow: [\n                '0 0 20px rgba(0, 255, 255, 0.5)',\n                '0 0 40px rgba(255, 0, 255, 0.5)',\n                '0 0 20px rgba(0, 255, 255, 0.5)'\n              ]\n            }}\n            transition={{ duration: 2, repeat: Infinity }}\n          >\n            Algorithm Visualizer\n          </motion.h1>\n          \n          <div className=\"flex items-center justify-center gap-4\">\n            <motion.div\n              initial={{ scale: 0 }}\n              animate={{ scale: 1 }}\n              transition={{ delay: 0.3, type: 'spring' }}\n              className=\"flex items-center gap-2 px-6 py-3 bg-gray-800/50 backdrop-blur-sm rounded-full border border-cyan-500/30\"\n            >\n              <Zap className=\"w-5 h-5 text-cyan-400\" />\n              <span className=\"text-xl font-semibold text-cyan-300\">\n                {mockAlgorithms.find(a => a.id === selectedAlgorithm)?.name}\n              </span>\n            </motion.div>\n            \n            <motion.div\n              initial={{ scale: 0 }}\n              animate={{ scale: 1 }}\n              transition={{ delay: 0.5, type: 'spring' }}\n              className=\"px-4 py-2 bg-purple-500/20 backdrop-blur-sm rounded-full border border-purple-400/50\"\n            >\n              <div className=\"flex items-center gap-2\">\n                <BarChart3 className=\"w-4 h-4 text-purple-300\" />\n                <span className=\"text-sm font-mono text-purple-200\">\n                  {mockAlgorithms.find(a => a.id === selectedAlgorithm)?.complexity}\n                </span>\n              </div>\n            </motion.div>\n          </div>\n        </motion.div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-6\">\n          <div className=\"lg:col-span-1 space-y-6\">\n            <motion.div\n              initial={{ opacity: 0, x: -50 }}\n              animate={{ opacity: 1, x: 0 }}\n              transition={{ duration: 0.6 }}\n              className=\"bg-gray-800/50 backdrop-blur-lg rounded-2xl p-6 border border-cyan-500/30 shadow-[0_0_30px_rgba(0,255,255,0.3)] hover:shadow-[0_0_50px_rgba(0,255,255,0.5)] transition-all duration-300\"\n            >\n              <div className=\"space-y-6\">\n                {/* Algorithm Selection */}\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center gap-2 mb-4\">\n                    <Zap className=\"w-5 h-5 text-cyan-400\" />\n                    <h3 className=\"text-lg font-bold text-cyan-400 tracking-wider\">ALGORITHM</h3>\n                  </div>\n                  <div className=\"grid grid-cols-1 gap-2\">\n                    {mockAlgorithms.map((algo) => (\n                      <motion.button\n                        key={algo.id}\n                        whileHover={{ scale: 1.02 }}\n                        whileTap={{ scale: 0.98 }}\n                        onClick={() => setSelectedAlgorithm(algo.id as AlgorithmType)}\n                        className={`p-3 rounded-lg border transition-all duration-300 text-left ${\n                          selectedAlgorithm === algo.id\n                            ? 'bg-cyan-500/20 border-cyan-400 shadow-[0_0_20px_rgba(0,255,255,0.4)]'\n                            : 'bg-gray-700/30 border-gray-600/50 hover:border-cyan-500/50'\n                        }`}\n                      >\n                        <div className=\"font-semibold text-white\">{algo.name}</div>\n                        <div className=\"text-xs text-gray-400 mt-1\">{algo.complexity}</div>\n                      </motion.button>\n                    ))}\n                  </div>\n                </div>\n\n                {/* Speed Control */}\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <label className=\"text-sm font-semibold text-purple-400 tracking-wider\">SPEED</label>\n                    <span className=\"text-cyan-400 font-mono text-sm\">{speed[0]}%</span>\n                  </div>\n                  <Slider\n                    value={speed}\n                    onValueChange={setSpeed}\n                    min={10}\n                    max={100}\n                    step={10}\n                    className=\"cursor-pointer\"\n                    disabled={isPlaying}\n                  />\n                </div>\n\n                {/* Array Size Control */}\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <label className=\"text-sm font-semibold text-purple-400 tracking-wider\">ARRAY SIZE</label>\n                    <span className=\"text-cyan-400 font-mono text-sm\">{arraySize[0]}</span>\n                  </div>\n                  <Slider\n                    value={arraySize}\n                    onValueChange={setArraySize}\n                    min={5}\n                    max={50}\n                    step={5}\n                    className=\"cursor-pointer\"\n                    disabled={isPlaying}\n                  />\n                </div>\n\n                {/* Control Buttons */}\n                <div className=\"space-y-3 pt-4 border-t border-gray-700/50\">\n                  <Button\n                    onClick={isPlaying ? pauseVisualization : startVisualization}\n                    disabled={steps.length === 0 || currentStep >= steps.length}\n                    className=\"w-full bg-gradient-to-r from-cyan-500 to-blue-500 hover:from-cyan-400 hover:to-blue-400 text-white font-bold py-6 rounded-lg shadow-[0_0_20px_rgba(0,255,255,0.5)] hover:shadow-[0_0_30px_rgba(0,255,255,0.7)] transition-all duration-300 border border-cyan-400/50\"\n                  >\n                    {isPlaying ? (\n                      <>\n                        <Pause className=\"w-5 h-5 mr-2\" />\n                        PAUSE\n                      </>\n                    ) : (\n                      <>\n                        <Play className=\"w-5 h-5 mr-2\" />\n                        START\n                      </>\n                    )}\n                  </Button>\n\n                  <Button\n                    onClick={resetVisualization}\n                    variant=\"outline\"\n                    className=\"w-full bg-gray-700/30 hover:bg-gray-600/50 text-purple-400 hover:text-purple-300 font-bold py-6 rounded-lg border border-purple-500/50 shadow-[0_0_15px_rgba(168,85,247,0.3)] hover:shadow-[0_0_25px_rgba(168,85,247,0.5)] transition-all duration-300\"\n                  >\n                    <RotateCcw className=\"w-5 h-5 mr-2\" />\n                    RESET\n                  </Button>\n\n                  <Button\n                    onClick={() => generateSortingSteps(selectedAlgorithm)}\n                    disabled={isPlaying || array.length === 0}\n                    className=\"w-full bg-gradient-to-r from-purple-500 to-pink-500 hover:from-purple-400 hover:to-pink-400 text-white font-bold py-6 rounded-lg shadow-[0_0_20px_rgba(168,85,247,0.5)] hover:shadow-[0_0_30px_rgba(168,85,247,0.7)] transition-all duration-300 border border-purple-400/50\"\n                  >\n                    <BarChart3 className=\"w-5 h-5 mr-2\" />\n                    GENERATE\n                  </Button>\n                </div>\n\n                {/* Stats Display */}\n                <div className=\"pt-4 border-t border-gray-700/50 space-y-2\">\n                  <div className=\"flex justify-between text-sm\">\n                    <span className=\"text-gray-400\">Current Step:</span>\n                    <span className=\"text-cyan-400 font-mono\">{currentStep} / {steps.length}</span>\n                  </div>\n                  <div className=\"flex justify-between text-sm\">\n                    <span className=\"text-gray-400\">Array Length:</span>\n                    <span className=\"text-cyan-400 font-mono\">{array.length}</span>\n                  </div>\n                </div>\n              </div>\n            </motion.div>\n            \n            <div className=\"bg-gray-800/50 backdrop-blur-lg rounded-2xl p-6 border border-cyan-500/30 shadow-lg shadow-cyan-500/20\">\n              <div className=\"space-y-6\">\n                <div>\n                  <h3 className=\"text-cyan-400 font-semibold mb-4 flex items-center gap-2\">\n                    <Zap className=\"w-5 h-5\" />\n                    Algorithm\n                  </h3>\n                  <div className=\"grid grid-cols-2 gap-3\">\n                    {mockAlgorithms.map((algo) => (\n                      <motion.button\n                        key={algo.id}\n                        onClick={() => setSelectedAlgorithm(algo.id as AlgorithmType)}\n                        className={`relative p-3 rounded-lg border transition-all duration-300 ${\n                          selectedAlgorithm === algo.id\n                            ? 'bg-cyan-500/20 border-cyan-400 shadow-lg shadow-cyan-500/50'\n                            : 'bg-gray-700/30 border-gray-600 hover:border-cyan-500/50 hover:shadow-md hover:shadow-cyan-500/30'\n                        }`}\n                        whileHover={{ scale: 1.05 }}\n                        whileTap={{ scale: 0.95 }}\n                      >\n                        <div className=\"text-left\">\n                          <div className={`text-sm font-semibold ${\n                            selectedAlgorithm === algo.id ? 'text-cyan-300' : 'text-gray-300'\n                          }`}>\n                            {algo.name}\n                          </div>\n                          <div className=\"text-xs text-gray-400 mt-1\">\n                            {algo.complexity}\n                          </div>\n                        </div>\n                        {selectedAlgorithm === algo.id && (\n                          <motion.div\n                            className=\"absolute inset-0 rounded-lg bg-cyan-500/10\"\n                            layoutId=\"algorithmSelector\"\n                            transition={{ type: \"spring\", bounce: 0.2, duration: 0.6 }}\n                          />\n                        )}\n                      </motion.button>\n                    ))}\n                  </div>\n                </div>\n\n                <div>\n                  <h3 className=\"text-cyan-400 font-semibold mb-4\">Speed</h3>\n                  <div className=\"space-y-2\">\n                    <Slider\n                      value={speed}\n                      onValueChange={setSpeed}\n                      min={1}\n                      max={100}\n                      step={1}\n                      className=\"cursor-pointer [&_[role=slider]]:bg-cyan-400 [&_[role=slider]]:border-cyan-300 [&_[role=slider]]:shadow-lg [&_[role=slider]]:shadow-cyan-400/50 [&_[role=slider]]:transition-all [&_[role=slider]]:hover:shadow-cyan-400/80 [&_[role=slider]]:hover:scale-110 [&_.relative]:bg-gray-700 [&_.relative]:overflow-visible [&_.bg-primary]:bg-gradient-to-r [&_.bg-primary]:from-cyan-500 [&_.bg-primary]:to-purple-500 [&_.bg-primary]:shadow-lg [&_.bg-primary]:shadow-cyan-500/30\"\n                    />\n                    <div className=\"flex justify-between text-xs text-gray-400\">\n                      <span>Slow</span>\n                      <span className=\"text-cyan-400 font-semibold\">{speed[0]}%</span>\n                      <span>Fast</span>\n                    </div>\n                  </div>\n                </div>\n\n                <div>\n                  <h3 className=\"text-cyan-400 font-semibold mb-4\">Array Size</h3>\n                  <div className=\"space-y-3\">\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"text-gray-300 text-sm\">Elements</span>\n                      <motion.span \n                        key={arraySize[0]}\n                        initial={{ scale: 1.3, color: '#00ffff' }}\n                        animate={{ scale: 1, color: '#ffffff' }}\n                        className=\"text-white font-bold text-lg px-3 py-1 bg-cyan-500/20 rounded-lg border border-cyan-400/50 shadow-lg shadow-cyan-500/30\"\n                      >\n                        {arraySize[0]}\n                      </motion.span>\n                    </div>\n                    <div className=\"relative\">\n                      <Slider\n                        value={arraySize}\n                        onValueChange={setArraySize}\n                        min={5}\n                        max={50}\n                        step={1}\n                        disabled={isPlaying}\n                        className=\"[&_[role=slider]]:bg-cyan-400 [&_[role=slider]]:border-cyan-300 [&_[role=slider]]:shadow-lg [&_[role=slider]]:shadow-cyan-400/50 [&_[role=slider]]:hover:shadow-cyan-400/80 [&_[role=slider]]:transition-shadow [&>span]:bg-cyan-500/30\"\n                      />\n                      <div className=\"absolute inset-0 pointer-events-none\">\n                        <div className=\"h-full w-full bg-gradient-to-r from-cyan-500/0 via-cyan-500/10 to-cyan-500/0 rounded-full blur-sm\" />\n                      </div>\n                    </div>\n                  </div></parameter>\n</invoke>\n                </div>\n\n                <div className=\"space-y-3 pt-4 border-t border-cyan-500/20\">\n                  <motion.button\n                    onClick={isPlaying ? pauseVisualization : startVisualization}\n                    disabled={array.length === 0}\n                    className=\"w-full relative group overflow-hidden\"\n                    whileHover={{ scale: 1.02 }}\n                    whileTap={{ scale: 0.98 }}\n                  >\n                    <div className={`relative p-4 rounded-xl border-2 transition-all duration-300 ${\n                      array.length === 0\n                        ? 'bg-gray-700/30 border-gray-600/50 cursor-not-allowed opacity-50'\n                        : isPlaying\n                        ? 'bg-yellow-500/20 border-yellow-400 shadow-[0_0_30px_rgba(234,179,8,0.6)]'\n                        : 'bg-green-500/20 border-green-400 shadow-[0_0_30px_rgba(34,197,94,0.6)] hover:shadow-[0_0_50px_rgba(34,197,94,0.8)]'\n                    }`}>\n                      <div className=\"flex items-center justify-center gap-3\">\n                        <motion.div\n                          animate={isPlaying ? {\n                            scale: [1, 1.2, 1],\n                            rotate: [0, 5, -5, 0]\n                          } : {\n                            scale: [1, 1.1, 1]\n                          }}\n                          transition={{\n                            duration: isPlaying ? 0.6 : 2,\n                            repeat: Infinity,\n                            ease: \"easeInOut\"\n                          }}\n                        >\n                          {isPlaying ? (\n                            <Pause className=\"w-6 h-6 text-yellow-300 fill-yellow-300\" />\n                          ) : (\n                            <Play className=\"w-6 h-6 text-green-300 fill-green-300\" />\n                          )}\n                        </motion.div>\n                        <span className={`text-lg font-bold tracking-wider ${\n                          isPlaying ? 'text-yellow-300' : 'text-green-300'\n                        }`}>\n                          {isPlaying ? 'PAUSE' : 'START'}\n                        </span>\n                      </div>\n                      \n                      {/* Animated glow pulse */}\n                      {!isPlaying && array.length > 0 && (\n                        <motion.div\n                          className=\"absolute inset-0 rounded-xl bg-gradient-to-r from-green-400/0 via-green-400/30 to-green-400/0\"\n                          animate={{\n                            x: ['-100%', '100%']\n                          }}\n                          transition={{\n                            duration: 2,\n                            repeat: Infinity,\n                            ease: \"linear\"\n                          }}\n                        />\n                      )}\n                    </div>\n                  </motion.button>\n\n                  <motion.button\n                    onClick={resetVisualization}\n                    className=\"w-full relative group overflow-hidden\"\n                    whileHover={{ scale: 1.02 }}\n                    whileTap={{ scale: 0.98 }}\n                  >\n                    <div className=\"relative p-4 rounded-xl border-2 bg-purple-500/20 border-purple-400 shadow-[0_0_30px_rgba(168,85,247,0.6)] hover:shadow-[0_0_50px_rgba(168,85,247,0.8)] transition-all duration-300\">\n                      <div className=\"flex items-center justify-center gap-3\">\n                        <motion.div\n                          whileHover={{\n                            rotate: -360\n                          }}\n                          transition={{\n                            duration: 0.6,\n                            ease: \"easeInOut\"\n                          }}\n                        >\n                          <RotateCcw className=\"w-6 h-6 text-purple-300\" />\n                        </motion.div>\n                        <span className=\"text-lg font-bold tracking-wider text-purple-300\">\n                          RESET\n                        </span>\n                      </div>\n                      \n                      {/* Hover glow effect */}\n                      <motion.div\n                        className=\"absolute inset-0 rounded-xl bg-purple-400/0 group-hover:bg-purple-400/10 transition-all duration-300\"\n                      />\n                    </div>\n                  </motion.button>\n\n                  <motion.button\n                    onClick={generateRandomArray}\n                    className=\"w-full relative group overflow-hidden\"\n                    whileHover={{ scale: 1.02 }}\n                    whileTap={{ scale: 0.98 }}\n                  >\n                    <div className=\"relative p-4 rounded-xl border-2 bg-cyan-500/20 border-cyan-400 shadow-[0_0_30px_rgba(6,182,212,0.6)] hover:shadow-[0_0_50px_rgba(6,182,212,0.8)] transition-all duration-300\">\n                      <div className=\"flex items-center justify-center gap-3\">\n                        <motion.div\n                          animate={{\n                            rotate: [0, 10, -10, 0]\n                          }}\n                          transition={{\n                            duration: 1.5,\n                            repeat: Infinity,\n                            ease: \"easeInOut\"\n                          }}\n                        >\n                          <BarChart3 className=\"w-6 h-6 text-cyan-300\" />\n                        </motion.div>\n                        <span className=\"text-lg font-bold tracking-wider text-cyan-300\">\n                          NEW ARRAY\n                        </span>\n                      </div>\n                      \n                      {/* Animated sparkle effect */}\n                      <motion.div\n                        className=\"absolute inset-0 rounded-xl\"\n                        style={{\n                          background: 'radial-gradient(circle at 50% 50%, rgba(6,182,212,0.3) 0%, transparent 70%)'\n                        }}\n                        animate={{\n                          scale: [0.8, 1.2, 0.8],\n                          opacity: [0.3, 0.6, 0.3]\n                        }}\n                        transition={{\n                          duration: 2,\n                          repeat: Infinity,\n                          ease: \"easeInOut\"\n                        }}\n                      />\n                    </div>\n                  </motion.button>\n</parameter>\n</invoke>\n                </div>\n              </div>\n            </div>\n\n            <motion.div\n              initial={{ opacity: 0, x: -50 }}\n              animate={{ opacity: 1, x: 0 }}\n              transition={{ duration: 0.6, delay: 0.2 }}\n              className=\"bg-gray-800/50 backdrop-blur-lg rounded-2xl p-6 border border-purple-500/30 shadow-[0_0_30px_rgba(168,85,247,0.3)] hover:shadow-[0_0_50px_rgba(168,85,247,0.5)] transition-all duration-300\"\n            >\n              <div className=\"space-y-4\">\n                <div className=\"flex items-center gap-2 mb-4\">\n                  <BarChart3 className=\"w-5 h-5 text-purple-400\" />\n                  <h3 className=\"text-lg font-bold text-purple-400 tracking-wider\">STATISTICS</h3>\n                </div>\n\n                <div className=\"space-y-4\">\n                  {/* Comparisons Counter */}\n                  <div className=\"bg-gray-900/50 rounded-lg p-4 border border-cyan-500/20\">\n                    <div className=\"flex items-center justify-between mb-2\">\n                      <span className=\"text-sm font-semibold text-gray-400 tracking-wider\">COMPARISONS</span>\n                      <motion.div\n                        key={currentStep}\n                        initial={{ scale: 1.3, color: '#00ffff' }}\n                        animate={{ scale: 1, color: '#06b6d4' }}\n                        transition={{ duration: 0.3 }}\n                        className=\"text-2xl font-bold text-cyan-400 font-mono\"\n                      >\n                        {steps.length > 0 ? currentStep : 0}\n                      </motion.div>\n                    </div>\n                    <div className=\"w-full bg-gray-700/50 rounded-full h-2 overflow-hidden\">\n                      <motion.div\n                        className=\"h-full bg-gradient-to-r from-cyan-500 to-blue-500 rounded-full shadow-[0_0_10px_rgba(0,255,255,0.8)]\"\n                        initial={{ width: 0 }}\n                        animate={{ \n                          width: steps.length > 0 ? `${(currentStep / steps.length) * 100}%` : '0%'\n                        }}\n                        transition={{ duration: 0.3 }}\n                      />\n                    </div>\n                  </div>\n\n                  {/* Swaps Counter */}\n                  <div className=\"bg-gray-900/50 rounded-lg p-4 border border-pink-500/20\">\n                    <div className=\"flex items-center justify-between mb-2\">\n                      <span className=\"text-sm font-semibold text-gray-400 tracking-wider\">SWAPS</span>\n                      <motion.div\n                        key={steps.filter((step, idx) => idx <= currentStep && step.swappingIndices.length > 0).length}\n                        initial={{ scale: 1.3, color: '#ff0066' }}\n                        animate={{ scale: 1, color: '#ec4899' }}\n                        transition={{ duration: 0.3 }}\n                        className=\"text-2xl font-bold text-pink-400 font-mono\"\n                      >\n                        {steps.filter((step, idx) => idx <= currentStep && step.swappingIndices.length > 0).length}\n                      </motion.div>\n                    </div>\n                    <div className=\"flex items-center gap-2 text-xs text-gray-500\">\n                      <div className=\"w-2 h-2 rounded-full bg-pink-500 animate-pulse shadow-[0_0_8px_rgba(236,72,153,0.8)]\" />\n                      <span>Active operations</span>\n                    </div>\n                  </div>\n\n                  {/* Progress Indicator */}\n                  <div className=\"bg-gray-900/50 rounded-lg p-4 border border-purple-500/20\">\n                    <div className=\"flex items-center justify-between mb-2\">\n                      <span className=\"text-sm font-semibold text-gray-400 tracking-wider\">PROGRESS</span>\n                      <motion.div\n                        key={steps.length > 0 ? Math.round((currentStep / steps.length) * 100) : 0}\n                        initial={{ scale: 1.3, color: '#a855f7' }}\n                        animate={{ scale: 1, color: '#9333ea' }}\n                        transition={{ duration: 0.3 }}\n                        className=\"text-2xl font-bold text-purple-400 font-mono\"\n                      >\n                        {steps.length > 0 ? Math.round((currentStep / steps.length) * 100) : 0}%\n                      </motion.div>\n                    </div>\n                    <div className=\"space-y-2\">\n                      <div className=\"w-full bg-gray-700/50 rounded-full h-3 overflow-hidden\">\n                        <motion.div\n                          className=\"h-full bg-gradient-to-r from-purple-500 via-pink-500 to-cyan-500 rounded-full shadow-[0_0_15px_rgba(168,85,247,0.8)]\"\n                          initial={{ width: 0 }}\n                          animate={{ \n                            width: steps.length > 0 ? `${(currentStep / steps.length) * 100}%` : '0%'\n                          }}\n                          transition={{ duration: 0.3 }}\n                        />\n                      </div>\n                      <div className=\"flex items-center justify-between text-xs text-gray-500\">\n                        <span>Step {currentStep} / {steps.length}</span>\n                        <span className={`font-semibold ${\n                          currentStep >= steps.length && steps.length > 0\n                            ? 'text-green-400'\n                            : 'text-gray-400'\n                        }`}>\n                          {currentStep >= steps.length && steps.length > 0 ? '\u2713 Complete' : 'In Progress'}\n                        </span>\n                      </div>\n                    </div>\n                  </div>\n\n                  {/* Array Info */}\n                  <div className=\"bg-gray-900/50 rounded-lg p-4 border border-cyan-500/20\">\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <div>\n                        <div className=\"text-xs text-gray-500 mb-1\">ELEMENTS</div>\n                        <div className=\"text-lg font-bold text-cyan-400 font-mono\">{array.length}</div>\n                      </div>\n                      <div>\n                        <div className=\"text-xs text-gray-500 mb-1\">SORTED</div>\n                        <div className=\"text-lg font-bold text-green-400 font-mono\">\n                          {array.filter(el => el.isSorted).length}\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n\n                  {/* Status Indicator */}\n                  <motion.div\n                    className={`rounded-lg p-3 border text-center transition-all duration-300 ${\n                      isPlaying\n                        ? 'bg-green-500/10 border-green-500/50 shadow-[0_0_20px_rgba(34,197,94,0.3)]'\n                        : steps.length > 0 && currentStep >= steps.length\n                        ? 'bg-purple-500/10 border-purple-500/50 shadow-[0_0_20px_rgba(168,85,247,0.3)]'\n                        : 'bg-gray-700/30 border-gray-600/50'\n                    }`}\n                    animate={{\n                      boxShadow: isPlaying\n                        ? [\n                            '0 0 20px rgba(34,197,94,0.3)',\n                            '0 0 30px rgba(34,197,94,0.6)',\n                            '0 0 20px rgba(34,197,94,0.3)'\n                          ]\n                        : '0 0 20px rgba(168,85,247,0.3)'\n                    }}\n                    transition={{ duration: 1.5, repeat: isPlaying ? Infinity : 0 }}\n                  >\n                    <div className=\"flex items-center justify-center gap-2\">\n                      <motion.div\n                        className={`w-2 h-2 rounded-full ${\n                          isPlaying\n                            ? 'bg-green-400'\n                            : steps.length > 0 && currentStep >= steps.length\n                            ? 'bg-purple-400'\n                            : 'bg-gray-500'\n                        }`}\n                        animate={{\n                          scale: isPlaying ? [1, 1.5, 1] : 1,\n                          opacity: isPlaying ? [1, 0.5, 1] : 1\n                        }}\n                        transition={{ duration: 1, repeat: isPlaying ? Infinity : 0 }}\n                      />\n                      <span className={`text-sm font-semibold tracking-wider ${\n                        isPlaying\n                          ? 'text-green-400'\n                          : steps.length > 0 && currentStep >= steps.length\n                          ? 'text-purple-400'\n                          : 'text-gray-400'\n                      }`}>\n                        {isPlaying\n                          ? 'RUNNING'\n                          : steps.length > 0 && currentStep >= steps.length\n                          ? 'COMPLETED'\n                          : 'READY'}\n                      </span>\n                    </div>\n                  </motion.div>\n                </div>\n              </div>\n            </motion.div>\n          </div>\n\n          <div className=\"lg:col-span-3\">\n            <div className=\"bg-gray-800/50 backdrop-blur-lg rounded-2xl p-8 border border-purple-500/30 shadow-lg shadow-purple-500/20 min-h-[600px]\">\n                            {array.length === 0 ? (\n                <motion.div\n                  initial={{ opacity: 0, scale: 0.8 }}\n                  animate={{ opacity: 1, scale: 1 }}\n                  className=\"flex flex-col items-center justify-center h-full space-y-6\"\n                >\n                  <motion.div\n                    animate={{\n                      rotate: [0, 360],\n                      scale: [1, 1.2, 1]\n                    }}\n                    transition={{\n                      duration: 3,\n                      repeat: Infinity,\n                      ease: \"easeInOut\"\n                    }}\n                  >\n                    <BarChart3 className=\"w-24 h-24 text-cyan-400/50\" />\n                  </motion.div>\n                  <div className=\"text-center space-y-2\">\n                    <h3 className=\"text-2xl font-bold text-cyan-400\">Ready to Visualize</h3>\n                    <p className=\"text-gray-400\">Click \"Generate Array\" to begin</p>\n                  </div>\n                </motion.div>\n              ) : (\n                <div className=\"h-full flex items-end justify-center gap-1 px-4\">\n                  {array.map((element, index) => {\n                    const maxValue = Math.max(...array.map(e => e.value));\n                    const heightPercentage = (element.value / maxValue) * 100;\n                    const colorIndex = index % NEON_COLORS.length;\n                    const baseColor = NEON_COLORS[colorIndex];\n                    \n                    const isComparing = element.isComparing;\n                    const isSwapping = element.isSwapping;\n                    const isSorted = element.isSorted;\n\n                    let barColor = baseColor;\n                    let glowIntensity = '0.3';\n                    let scale = 1;\n\n                    if (isSorted) {\n                      barColor = '#00ff00';\n                      glowIntensity = '0.6';\n                    } else if (isSwapping) {\n                      barColor = '#ff0066';\n                      glowIntensity = '0.8';\n                      scale = 1.1;\n                    } else if (isComparing) {\n                      barColor = '#ffff00';\n                      glowIntensity = '0.7';\n                      scale = 1.05;\n                    }\n\n                    return (\n                      <motion.div\n                        key={element.id}\n                        layout\n                        initial={{ opacity: 0, y: 50 }}\n                        animate={{\n                          opacity: 1,\n                          y: 0,\n                          height: `${heightPercentage}%`,\n                          scale: scale,\n                          backgroundColor: barColor,\n                          boxShadow: [\n                            `0 0 20px ${barColor}${Math.floor(parseFloat(glowIntensity) * 255).toString(16).padStart(2, '0')}`,\n                            `0 0 40px ${barColor}${Math.floor(parseFloat(glowIntensity) * 255).toString(16).padStart(2, '0')}`,\n                            `0 0 20px ${barColor}${Math.floor(parseFloat(glowIntensity) * 255).toString(16).padStart(2, '0')}`\n                          ]\n                        }}\n                        exit={{ opacity: 0, scale: 0 }}\n                        transition={{\n                          layout: { duration: 0.3, type: \"spring\" },\n                          height: { duration: 0.4, ease: \"easeOut\" },\n                          scale: { duration: 0.2 },\n                          backgroundColor: { duration: 0.3 },\n                          boxShadow: { duration: 1, repeat: isSwapping || isComparing ? Infinity : 0 }\n                        }}\n                        className=\"relative rounded-t-lg min-w-[8px] flex-1 max-w-[60px]\"\n                        style={{\n                          backgroundColor: barColor,\n                          boxShadow: `0 0 20px ${barColor}${Math.floor(parseFloat(glowIntensity) * 255).toString(16).padStart(2, '0')}, 0 -5px 30px ${barColor}40 inset`\n                        }}\n                      >\n                        {/* Value label */}\n                        {array.length <= 20 && (\n                          <motion.div\n                            initial={{ opacity: 0 }}\n                            animate={{ opacity: 1 }}\n                            className=\"absolute -top-8 left-1/2 transform -translate-x-1/2 text-xs font-bold text-white bg-gray-900/80 px-2 py-1 rounded backdrop-blur-sm border border-gray-700/50\"\n                          >\n                            {element.value}\n                          </motion.div>\n                        )}\n\n                        {/* Trail effect for swapping */}\n                        {isSwapping && (\n                          <motion.div\n                            className=\"absolute inset-0 rounded-t-lg\"\n                            style={{\n                              background: `linear-gradient(to top, ${barColor}, transparent)`\n                            }}\n                            animate={{\n                              opacity: [0.8, 0, 0.8],\n                              scale: [1, 1.3, 1]\n                            }}\n                            transition={{\n                              duration: 0.6,\n                              repeat: Infinity\n                            }}\n                          />\n                        )}\n\n                        {/* Pulse effect for comparing */}\n                        {isComparing && (\n                          <motion.div\n                            className=\"absolute -inset-1 rounded-t-lg border-2\"\n                            style={{\n                              borderColor: barColor\n                            }}\n                            animate={{\n                              opacity: [1, 0.3, 1],\n                              scale: [1, 1.1, 1]\n                            }}\n                            transition={{\n                              duration: 0.5,\n                              repeat: Infinity\n                            }}\n                          />\n                        )}\n\n                        {/* Sorted checkmark */}\n                        {isSorted && array.length <= 30 && (\n                          <motion.div\n                            initial={{ scale: 0, rotate: -180 }}\n                            animate={{ scale: 1, rotate: 0 }}\n                            className=\"absolute -top-6 left-1/2 transform -translate-x-1/2\"\n                          >\n                            <div className=\"w-4 h-4 bg-green-500 rounded-full flex items-center justify-center shadow-lg shadow-green-500/50\">\n                              <svg className=\"w-3 h-3 text-white\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={3} d=\"M5 13l4 4L19 7\" />\n                              </svg>\n                            </div>\n                          </motion.div>\n                        )}\n                      </motion.div>\n                    );\n                  })}\n                </div>\n              )}\n                {array.length === 0 ? (\n                  <motion.div\n                    initial={{ opacity: 0, scale: 0.8 }}\n                    animate={{ opacity: 1, scale: 1 }}\n                    className=\"absolute inset-0 flex items-center justify-center\"\n                  >\n                    <div className=\"text-center space-y-4\">\n                      <motion.div\n                        animate={{\n                          rotate: [0, 360],\n                          scale: [1, 1.2, 1]\n                        }}\n                        transition={{\n                          duration: 3,\n                          repeat: Infinity,\n                          ease: \"easeInOut\"\n                        }}\n                      >\n                        <BarChart3 className=\"w-24 h-24 text-cyan-400/30 mx-auto\" />\n                      </motion.div>\n                      <p className=\"text-gray-400 text-lg\">Generate an array to begin</p>\n                    </div>\n                  </motion.div>\n                ) : (\n                  array.map((element, index) => {\n                    const heightPercentage = (element.value / 100) * 100;\n                    const colorIndex = index % NEON_COLORS.length;\n                    const neonColor = NEON_COLORS[colorIndex];\n                    \n                    const isComparing = element.isComparing;\n                    const isSwapping = element.isSwapping;\n                    const isSorted = element.isSorted;\n\n                    return (\n                      <motion.div\n                        key={element.id}\n                        className=\"relative flex-1 min-w-[8px] max-w-[60px] group\"\n                        initial={{ opacity: 0, y: 50 }}\n                        animate={{ \n                          opacity: 1, \n                          y: 0,\n                          scale: isSwapping ? [1, 1.1, 1] : 1\n                        }}\n                        transition={{\n                          opacity: { duration: 0.3 },\n                          y: { duration: 0.5, delay: index * 0.02 },\n                          scale: { duration: 0.3 }\n                        }}\n                      >\n                        {/* Trail effect for swapping */}\n                        {isSwapping && (\n                          <motion.div\n                            className=\"absolute inset-0 rounded-t-lg\"\n                            style={{\n                              background: `linear-gradient(to top, transparent, ${neonColor}40)`,\n                              filter: 'blur(8px)'\n                            }}\n                            initial={{ opacity: 0, scale: 0.8 }}\n                            animate={{ \n                              opacity: [0, 1, 0],\n                              scale: [0.8, 1.2, 1.5],\n                              y: [-20, -40, -60]\n                            }}\n                            transition={{\n                              duration: 0.6,\n                              repeat: Infinity,\n                              ease: \"easeOut\"\n                            }}\n                          />\n                        )}\n\n                        {/* Main bar */}\n                        <motion.div\n                          className=\"relative w-full rounded-t-lg transition-all duration-300\"\n                          style={{\n                            height: `${heightPercentage}%`,\n                            minHeight: '20px',\n                            background: isSorted \n                              ? `linear-gradient(to top, #00ff00, #00ff00dd)`\n                              : isComparing\n                              ? `linear-gradient(to top, #ff0066, #ff0066dd)`\n                              : isSwapping\n                              ? `linear-gradient(to top, #ffff00, #ffff00dd)`\n                              : `linear-gradient(to top, ${neonColor}, ${neonColor}dd)`,\n                            boxShadow: isSorted\n                              ? '0 0 20px #00ff00, 0 0 40px #00ff0080, inset 0 0 20px #00ff0040'\n                              : isComparing\n                              ? '0 0 30px #ff0066, 0 0 60px #ff006680, inset 0 0 20px #ff006640'\n                              : isSwapping\n                              ? '0 0 30px #ffff00, 0 0 60px #ffff0080, inset 0 0 20px #ffff0040'\n                              : `0 0 15px ${neonColor}, 0 0 30px ${neonColor}80, inset 0 0 15px ${neonColor}40`\n                          }}\n                          animate={{\n                            height: `${heightPercentage}%`,\n                            boxShadow: isComparing\n                              ? [\n                                  '0 0 30px #ff0066, 0 0 60px #ff006680, inset 0 0 20px #ff006640',\n                                  '0 0 50px #ff0066, 0 0 80px #ff006680, inset 0 0 30px #ff006640',\n                                  '0 0 30px #ff0066, 0 0 60px #ff006680, inset 0 0 20px #ff006640'\n                                ]\n                              : isSwapping\n                              ? [\n                                  '0 0 30px #ffff00, 0 0 60px #ffff0080, inset 0 0 20px #ffff0040',\n                                  '0 0 50px #ffff00, 0 0 80px #ffff0080, inset 0 0 30px #ffff0040',\n                                  '0 0 30px #ffff00, 0 0 60px #ffff0080, inset 0 0 20px #ffff0040'\n                                ]\n                              : isSorted\n                              ? '0 0 20px #00ff00, 0 0 40px #00ff0080, inset 0 0 20px #00ff0040'\n                              : `0 0 15px ${neonColor}, 0 0 30px ${neonColor}80, inset 0 0 15px ${neonColor}40`\n                          }}\n                          transition={{\n                            height: { duration: 0.5, ease: \"easeInOut\" },\n                            boxShadow: { duration: 0.5, repeat: (isComparing || isSwapping) ? Infinity : 0 }\n                          }}\n                        >\n                          {/* Glossy overlay */}\n                          <div className=\"absolute inset-0 rounded-t-lg bg-gradient-to-b from-white/30 via-transparent to-transparent\" />\n                          \n                          {/* Scanning line effect */}\n                          {(isComparing || isSwapping) && (\n                            <motion.div\n                              className=\"absolute inset-x-0 h-[2px] bg-white\"\n                              style={{\n                                boxShadow: '0 0 10px #ffffff, 0 0 20px #ffffff'\n                              }}\n                              animate={{\n                                top: ['0%', '100%']\n                              }}\n                              transition={{\n                                duration: 0.8,\n                                repeat: Infinity,\n                                ease: \"linear\"\n                              }}\n                            />\n                          )}\n\n                          {/* Value label */}\n                          <motion.div\n                            className=\"absolute -top-8 left-1/2 -translate-x-1/2 opacity-0 group-hover:opacity-100 transition-opacity duration-200\"\n                            initial={{ y: 10 }}\n                            whileHover={{ y: 0 }}\n                          >\n                            <div \n                              className=\"px-2 py-1 rounded text-xs font-bold text-white whitespace-nowrap\"\n                              style={{\n                                background: `linear-gradient(135deg, ${neonColor}, ${neonColor}cc)`,\n                                boxShadow: `0 0 10px ${neonColor}80`\n                              }}\n                            >\n                              {element.value}\n                            </div>\n                          </motion.div>\n                        </motion.div>\n\n                        {/* Base glow */}\n                        <motion.div\n                          className=\"absolute -bottom-1 left-0 right-0 h-2 rounded-full blur-sm\"\n                          style={{\n                            background: isSorted \n                              ? '#00ff00'\n                              : isComparing\n                              ? '#ff0066'\n                              : isSwapping\n                              ? '#ffff00'\n                              : neonColor,\n                            opacity: 0.6\n                          }}\n                          animate={{\n                            opacity: (isComparing || isSwapping) ? [0.6, 1, 0.6] : 0.6\n                          }}\n                          transition={{\n                            duration: 0.5,\n                            repeat: (isComparing || isSwapping) ? Infinity : 0\n                          }}\n                        />\n\n                        {/* Particle effects for sorted elements */}\n                        {isSorted && (\n                          <>\n                            {[...Array(3)].map((_, i) => (\n                              <motion.div\n                                key={`particle-${i}`}\n                                className=\"absolute w-1 h-1 rounded-full bg-green-400\"\n                                style={{\n                                  left: '50%',\n                                  top: '0%',\n                                  boxShadow: '0 0 5px #00ff00'\n                                }}\n                                initial={{ opacity: 0, y: 0, x: 0 }}\n                                animate={{\n                                  opacity: [0, 1, 0],\n                                  y: [-30, -60],\n                                  x: [(Math.random() - 0.5) * 20, (Math.random() - 0.5) * 40]\n                                }}\n                                transition={{\n                                  duration: 1.5,\n                                  delay: i * 0.2,\n                                  repeat: Infinity,\n                                  repeatDelay: 1\n                                }}\n                              />\n                            ))}\n                          </>\n                        )}\n                      </motion.div>\n                    );\n                  })\n                )}\n              </div>\n            </div>\n\n            <motion.div\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ duration: 0.6, delay: 0.3 }}\n              className=\"mt-6 bg-gray-800/50 backdrop-blur-lg rounded-2xl p-6 border border-purple-500/30 shadow-lg shadow-purple-500/20\"\n            >\n              <div className=\"flex items-center gap-2 mb-4\">\n                <BarChart3 className=\"w-5 h-5 text-purple-400\" />\n                <h3 className=\"text-lg font-bold text-purple-400 tracking-wider\">BAR STATES</h3>\n              </div>\n              \n              <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n                {/* Default State */}\n                <motion.div\n                  initial={{ opacity: 0, scale: 0.8 }}\n                  animate={{ opacity: 1, scale: 1 }}\n                  transition={{ delay: 0.4, type: 'spring' }}\n                  className=\"flex items-center gap-3 p-3 rounded-lg bg-gray-700/30 border border-gray-600/50 hover:border-gray-500/70 transition-all duration-300\"\n                >\n                  <motion.div\n                    className=\"w-4 h-8 rounded bg-gradient-to-t from-cyan-500 to-cyan-300 shadow-[0_0_10px_rgba(0,255,255,0.5)]\"\n                    animate={{\n                      boxShadow: [\n                        '0 0 10px rgba(0,255,255,0.5)',\n                        '0 0 20px rgba(0,255,255,0.8)',\n                        '0 0 10px rgba(0,255,255,0.5)'\n                      ]\n                    }}\n                    transition={{ duration: 2, repeat: Infinity }}\n                  />\n                  <div>\n                    <div className=\"text-sm font-semibold text-white\">Default</div>\n                    <div className=\"text-xs text-gray-400\">Unsorted</div>\n                  </div>\n                </motion.div>\n\n                {/* Comparing State */}\n                <motion.div\n                  initial={{ opacity: 0, scale: 0.8 }}\n                  animate={{ opacity: 1, scale: 1 }}\n                  transition={{ delay: 0.5, type: 'spring' }}\n                  className=\"flex items-center gap-3 p-3 rounded-lg bg-gray-700/30 border border-gray-600/50 hover:border-yellow-500/50 transition-all duration-300\"\n                >\n                  <motion.div\n                    className=\"w-4 h-8 rounded bg-gradient-to-t from-yellow-500 to-yellow-300 shadow-[0_0_10px_rgba(255,255,0,0.5)]\"\n                    animate={{\n                      boxShadow: [\n                        '0 0 10px rgba(255,255,0,0.5)',\n                        '0 0 25px rgba(255,255,0,1)',\n                        '0 0 10px rgba(255,255,0,0.5)'\n                      ],\n                      scale: [1, 1.1, 1]\n                    }}\n                    transition={{ duration: 1.5, repeat: Infinity }}\n                  />\n                  <div>\n                    <div className=\"text-sm font-semibold text-white\">Comparing</div>\n                    <div className=\"text-xs text-gray-400\">Active</div>\n                  </div>\n                </motion.div>\n\n                {/* Swapping State */}\n                <motion.div\n                  initial={{ opacity: 0, scale: 0.8 }}\n                  animate={{ opacity: 1, scale: 1 }}\n                  transition={{ delay: 0.6, type: 'spring' }}\n                  className=\"flex items-center gap-3 p-3 rounded-lg bg-gray-700/30 border border-gray-600/50 hover:border-pink-500/50 transition-all duration-300\"\n                >\n                  <motion.div\n                    className=\"w-4 h-8 rounded bg-gradient-to-t from-pink-500 to-pink-300 shadow-[0_0_10px_rgba(255,0,102,0.5)]\"\n                    animate={{\n                      boxShadow: [\n                        '0 0 10px rgba(255,0,102,0.5)',\n                        '0 0 30px rgba(255,0,102,1)',\n                        '0 0 10px rgba(255,0,102,0.5)'\n                      ],\n                      x: [-2, 2, -2]\n                    }}\n                    transition={{ duration: 1, repeat: Infinity }}\n                  />\n                  <div>\n                    <div className=\"text-sm font-semibold text-white\">Swapping</div>\n                    <div className=\"text-xs text-gray-400\">Moving</div>\n                  </div>\n                </motion.div>\n\n                {/* Sorted State */}\n                <motion.div\n                  initial={{ opacity: 0, scale: 0.8 }}\n                  animate={{ opacity: 1, scale: 1 }}\n                  transition={{ delay: 0.7, type: 'spring' }}\n                  className=\"flex items-center gap-3 p-3 rounded-lg bg-gray-700/30 border border-gray-600/50 hover:border-green-500/50 transition-all duration-300\"\n                >\n                  <motion.div\n                    className=\"w-4 h-8 rounded bg-gradient-to-t from-green-500 to-green-300 shadow-[0_0_10px_rgba(0,255,0,0.5)]\"\n                    animate={{\n                      boxShadow: [\n                        '0 0 10px rgba(0,255,0,0.5)',\n                        '0 0 20px rgba(0,255,0,0.8)',\n                        '0 0 10px rgba(0,255,0,0.5)'\n                      ]\n                    }}\n                    transition={{ duration: 2, repeat: Infinity }}\n                  />\n                  <div>\n                    <div className=\"text-sm font-semibold text-white\">Sorted</div>\n                    <div className=\"text-xs text-gray-400\">Complete</div>\n                  </div>\n                </motion.div>\n              </div>\n\n              {/* Additional Info */}\n              <motion.div\n                initial={{ opacity: 0 }}\n                animate={{ opacity: 1 }}\n                transition={{ delay: 0.8 }}\n                className=\"mt-4 pt-4 border-t border-gray-700/50\"\n              >\n                <div className=\"flex items-center justify-between text-xs text-gray-400\">\n                  <div className=\"flex items-center gap-2\">\n                    <motion.div\n                      className=\"w-2 h-2 rounded-full bg-cyan-400\"\n                      animate={{\n                        scale: [1, 1.5, 1],\n                        opacity: [1, 0.5, 1]\n                      }}\n                      transition={{ duration: 2, repeat: Infinity }}\n                    />\n                    <span>Bars pulse and glow during operations</span>\n                  </div>\n                  <div className=\"flex items-center gap-2\">\n                    <Zap className=\"w-3 h-3 text-purple-400\" />\n                    <span>Real-time visual feedback</span>\n                  </div>\n                </div>\n              </motion.div>\n            </motion.div>\n          </div>\n        </div>\n\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.6, delay: 0.3 }}\n          className=\"bg-gray-800/50 backdrop-blur-lg rounded-2xl p-6 border border-cyan-500/30 shadow-[0_0_30px_rgba(0,255,255,0.2)]\"\n        >\n          <div className=\"space-y-4\">\n            <div className=\"flex items-center justify-between\">\n              <h3 className=\"text-lg font-bold text-cyan-400 tracking-wider flex items-center gap-2\">\n                <BarChart3 className=\"w-5 h-5\" />\n                TIMELINE\n              </h3>\n              <div className=\"text-sm text-gray-400\">\n                Step <span className=\"text-cyan-400 font-mono font-bold\">{currentStep}</span> of <span className=\"text-purple-400 font-mono font-bold\">{steps.length}</span>\n              </div>\n            </div>\n\n            {steps.length > 0 && (\n              <div className=\"space-y-3\">\n                {/* Progress Bar */}\n                <div className=\"relative h-3 bg-gray-700/50 rounded-full overflow-hidden border border-gray-600/50\">\n                  <motion.div\n                    className=\"absolute inset-y-0 left-0 bg-gradient-to-r from-cyan-500 via-purple-500 to-pink-500 rounded-full shadow-[0_0_20px_rgba(0,255,255,0.6)]\"\n                    initial={{ width: 0 }}\n                    animate={{ \n                      width: `${(currentStep / steps.length) * 100}%`,\n                    }}\n                    transition={{ duration: 0.3, ease: \"easeOut\" }}\n                  />\n                  <motion.div\n                    className=\"absolute inset-0 bg-gradient-to-r from-transparent via-white/30 to-transparent\"\n                    animate={{\n                      x: ['-100%', '200%']\n                    }}\n                    transition={{\n                      duration: 2,\n                      repeat: Infinity,\n                      ease: \"linear\"\n                    }}\n                  />\n                </div>\n\n                {/* Timeline Scrubber */}\n                <div className=\"relative pt-2 pb-1\">\n                  <input\n                    type=\"range\"\n                    min={0}\n                    max={steps.length}\n                    value={currentStep}\n                    onChange={(e) => {\n                      const newStep = parseInt(e.target.value);\n                      setCurrentStep(newStep);\n                      if (newStep < steps.length) {\n                        setArray(steps[newStep].array);\n                      }\n                      setIsPlaying(false);\n                    }}\n                    disabled={steps.length === 0}\n                    className=\"w-full h-2 bg-transparent appearance-none cursor-pointer disabled:cursor-not-allowed\n                      [&::-webkit-slider-track]:h-2 [&::-webkit-slider-track]:bg-gray-700/50 [&::-webkit-slider-track]:rounded-full [&::-webkit-slider-track]:border [&::-webkit-slider-track]:border-gray-600/50\n                      [&::-webkit-slider-thumb]:appearance-none [&::-webkit-slider-thumb]:w-5 [&::-webkit-slider-thumb]:h-5 [&::-webkit-slider-thumb]:rounded-full [&::-webkit-slider-thumb]:bg-gradient-to-br [&::-webkit-slider-thumb]:from-cyan-400 [&::-webkit-slider-thumb]:to-purple-500 [&::-webkit-slider-thumb]:border-2 [&::-webkit-slider-thumb]:border-white [&::-webkit-slider-thumb]:shadow-[0_0_20px_rgba(0,255,255,0.8)] [&::-webkit-slider-thumb]:cursor-grab [&::-webkit-slider-thumb]:active:cursor-grabbing [&::-webkit-slider-thumb]:hover:scale-110 [&::-webkit-slider-thumb]:transition-transform\n                      [&::-moz-range-track]:h-2 [&::-moz-range-track]:bg-gray-700/50 [&::-moz-range-track]:rounded-full [&::-moz-range-track]:border [&::-moz-range-track]:border-gray-600/50\n                      [&::-moz-range-thumb]:w-5 [&::-moz-range-thumb]:h-5 [&::-moz-range-thumb]:rounded-full [&::-moz-range-thumb]:bg-gradient-to-br [&::-moz-range-thumb]:from-cyan-400 [&::-moz-range-thumb]:to-purple-500 [&::-moz-range-thumb]:border-2 [&::-moz-range-thumb]:border-white [&::-moz-range-thumb]:shadow-[0_0_20px_rgba(0,255,255,0.8)] [&::-moz-range-thumb]:cursor-grab [&::-moz-range-thumb]:active:cursor-grabbing [&::-moz-range-thumb]:hover:scale-110 [&::-moz-range-thumb]:transition-transform\"\n                  />\n                </div>\n\n                {/* Step Markers */}\n                <div className=\"flex justify-between items-center text-xs\">\n                  <motion.button\n                    whileHover={{ scale: 1.05 }}\n                    whileTap={{ scale: 0.95 }}\n                    onClick={() => {\n                      setCurrentStep(0);\n                      setArray(steps[0].array);\n                      setIsPlaying(false);\n                    }}\n                    disabled={currentStep === 0 || steps.length === 0}\n                    className=\"px-3 py-1.5 bg-gray-700/50 hover:bg-gray-600/50 disabled:bg-gray-800/30 disabled:text-gray-600 text-cyan-400 rounded-lg border border-cyan-500/30 hover:border-cyan-400/50 disabled:border-gray-700/30 transition-all duration-200 font-semibold disabled:cursor-not-allowed\"\n                  >\n                    START\n                  </motion.button>\n\n                  <div className=\"flex gap-2\">\n                    <motion.button\n                      whileHover={{ scale: 1.05 }}\n                      whileTap={{ scale: 0.95 }}\n                      onClick={() => {\n                        if (currentStep > 0) {\n                          const newStep = currentStep - 1;\n                          setCurrentStep(newStep);\n                          setArray(steps[newStep].array);\n                          setIsPlaying(false);\n                        }\n                      }}\n                      disabled={currentStep === 0 || steps.length === 0}\n                      className=\"px-3 py-1.5 bg-purple-700/30 hover:bg-purple-600/40 disabled:bg-gray-800/30 disabled:text-gray-600 text-purple-300 rounded-lg border border-purple-500/30 hover:border-purple-400/50 disabled:border-gray-700/30 transition-all duration-200 font-semibold disabled:cursor-not-allowed\"\n                    >\n                      \u2190 PREV\n                    </motion.button>\n\n                    <motion.button\n                      whileHover={{ scale: 1.05 }}\n                      whileTap={{ scale: 0.95 }}\n                      onClick={() => {\n                        if (currentStep < steps.length) {\n                          const newStep = currentStep + 1;\n                          setCurrentStep(newStep);\n                          if (newStep < steps.length) {\n                            setArray(steps[newStep].array);\n                          }\n                          setIsPlaying(false);\n                        }\n                      }}\n                      disabled={currentStep >= steps.length || steps.length === 0}\n                      className=\"px-3 py-1.5 bg-purple-700/30 hover:bg-purple-600/40 disabled:bg-gray-800/30 disabled:text-gray-600 text-purple-300 rounded-lg border border-purple-500/30 hover:border-purple-400/50 disabled:border-gray-700/30 transition-all duration-200 font-semibold disabled:cursor-not-allowed\"\n                    >\n                      NEXT \u2192\n                    </motion.button>\n                  </div>\n\n                  <motion.button\n                    whileHover={{ scale: 1.05 }}\n                    whileTap={{ scale: 0.95 }}\n                    onClick={() => {\n                      setCurrentStep(steps.length);\n                      setArray(steps[steps.length - 1].array);\n                      setIsPlaying(false);\n                    }}\n                    disabled={currentStep >= steps.length || steps.length === 0}\n                    className=\"px-3 py-1.5 bg-gray-700/50 hover:bg-gray-600/50 disabled:bg-gray-800/30 disabled:text-gray-600 text-cyan-400 rounded-lg border border-cyan-500/30 hover:border-cyan-400/50 disabled:border-gray-700/30 transition-all duration-200 font-semibold disabled:cursor-not-allowed\"\n                  >\n                    END\n                  </motion.button>\n                </div>\n\n                {/* Percentage Display */}\n                <div className=\"flex items-center justify-center gap-2 pt-2\">\n                  <div className=\"flex-1 h-px bg-gradient-to-r from-transparent via-cyan-500/50 to-transparent\" />\n                  <motion.div\n                    key={currentStep}\n                    initial={{ scale: 1.2, opacity: 0 }}\n                    animate={{ scale: 1, opacity: 1 }}\n                    className=\"px-4 py-1.5 bg-gradient-to-r from-cyan-500/20 to-purple-500/20 rounded-full border border-cyan-400/50 shadow-[0_0_15px_rgba(0,255,255,0.3)]\"\n                  >\n                    <span className=\"text-sm font-bold text-transparent bg-clip-text bg-gradient-to-r from-cyan-400 to-purple-400\">\n                      {steps.length > 0 ? Math.round((currentStep / steps.length) * 100) : 0}% Complete\n                    </span>\n                  </motion.div>\n                  <div className=\"flex-1 h-px bg-gradient-to-r from-transparent via-purple-500/50 to-transparent\" />\n                </div>\n              </div>\n            )}\n\n            {steps.length === 0 && (\n              <div className=\"text-center py-8 text-gray-500\">\n                <BarChart3 className=\"w-12 h-12 mx-auto mb-3 opacity-30\" />\n                <p className=\"text-sm\">Generate sorting steps to see timeline</p>\n              </div>\n            )}\n          </div>\n        </motion.div>\n      </div>\n    </div>\n  );\n}",
  "error": null,
  "overall_score": 41,
  "code_quality_score": 12,
  "architecture_score": 10,
  "performance_score": 8,
  "accessibility_score": 11,
  "metadata": {
    "document_id": "eval_room_77f3e6a713f1",
    "prompt_category": "creative",
    "prompt_complexity": 9.0
  },
  "raw_response": {
    "document_id": "eval_room_77f3e6a713f1",
    "mode": "parallel",
    "prompt": "Build a captivating algorithm visualizer with neon colored bars, smooth height transitions, glowing comparison indicators, trail effects during swaps, and a futuristic dashboard design with animated controls",
    "content": "import { useState, useCallback } from 'react';\nimport { useEffect } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Slider } from '@/components/ui/slider';\nimport { Play, Pause, RotateCcw, Zap, BarChart3 } from 'lucide-react';\nimport { motion } from 'framer-motion';\n\ninterface ArrayElement {\n  value: number;\n  id: string;\n  isComparing?: boolean;\n  isSwapping?: boolean;\n  isSorted?: boolean;\n}\n\ninterface AlgorithmStep {\n  array: ArrayElement[];\n  comparingIndices: number[];\n  swappingIndices: number[];\n  sortedIndices: number[];\n}\n\ntype AlgorithmType = 'bubble' | 'quick' | 'merge' | 'insertion';\n\nconst NEON_COLORS = [\n  '#00ffff',\n  '#ff00ff', \n  '#00ff00',\n  '#ffff00',\n  '#ff0066',\n  '#00ffaa'\n];\n\nconst mockAlgorithms = [\n  { id: 'bubble', name: 'Bubble Sort', complexity: 'O(n\u00b2)' },\n  { id: 'quick', name: 'Quick Sort', complexity: 'O(n log n)' },\n  { id: 'merge', name: 'Merge Sort', complexity: 'O(n log n)' },\n  { id: 'insertion', name: 'Insertion Sort', complexity: 'O(n\u00b2)' }\n];\n\nexport default function AlgorithmVisualizer() {\n  const [array, setArray] = useState<ArrayElement[]>([]);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [speed, setSpeed] = useState([50]);\n  const [arraySize, setArraySize] = useState([20]);\n  const [selectedAlgorithm, setSelectedAlgorithm] = useState<AlgorithmType>('bubble');\n  const [currentStep, setCurrentStep] = useState(0);\n  const [steps, setSteps] = useState<AlgorithmStep[]>([]);\n\n  const generateRandomArray = useCallback(() => {\n    const newArray: ArrayElement[] = Array.from({ length: arraySize[0] }, (_, index) => ({\n      value: Math.floor(Math.random() * 100) + 5,\n      id: `element-${index}-${Date.now()}`,\n      isComparing: false,\n      isSwapping: false,\n      isSorted: false\n    }));\n    setArray(newArray);\n    setSteps([]);\n    setCurrentStep(0);\n    setIsPlaying(false);\n  }, [arraySize]);\n\n  const resetVisualization = useCallback(() => {\n\n    setIsPlaying(false);\n    setCurrentStep(0);\n    setSteps([]);\n    generateRandomArray();\n  }, [generateRandomArray]);\n\n  useEffect(() => {\n    if (!isPlaying) return;\n\n    const delay = 1000 - (speed[0] * 9.5);\n    const timer = setTimeout(() => {\n      animateSteps();\n    }, delay);\n\n    return () => clearTimeout(timer);\n  }, [isPlaying, speed, animateSteps]);\n\n  const animateSteps = useCallback(() => {\n    if (currentStep >= steps.length) {\n      setIsPlaying(false);\n      return;\n    }\n\n    const step = steps[currentStep];\n    setArray(step.array);\n    setCurrentStep(prev => prev + 1);\n  }, [currentStep, steps]);\n\n  const startVisualization = useCallback(() => {\n    \n  }, [steps, speed, currentStep]);\n\n  const pauseVisualization = useCallback(() => {\n\n    /* TODO:PauseAnimation Set isPlaying false, preserve current step */\n  }, []);\n  useEffect(() => {\n    generateRandomArray();\n  }, [generateRandomArray]);\n\n  useEffect(() => {\n    if (!isPlaying) return;\n\n    const delay = 1000 - (speed[0] * 9);\n    const timer = setTimeout(() => {\n      animateSteps();\n    }, delay);\n\n    return () => clearTimeout(timer);\n  }, [isPlaying, animateSteps, speed]);\n\n  const generateSortingSteps = useCallback((algorithm: AlgorithmType) => {\n    const localArray = [...array];\n    const allSteps: AlgorithmStep[] = [];\n    \n    // Helper to create a step snapshot\n    const createStep = (arr: ArrayElement[], comparing: number[] = [], swapping: number[] = [], sorted: number[] = []) => {\n      allSteps.push({\n        array: arr.map(el => ({ ...el })),\n        comparingIndices: [...comparing],\n        swappingIndices: [...swapping],\n        sortedIndices: [...sorted]\n      });\n    };\n\n    // Initial state\n    createStep(localArray);\n\n    switch (algorithm) {\n      case 'bubble': {\n        const sortedIndices: number[] = [];\n        for (let i = 0; i < localArray.length - 1; i++) {\n          for (let j = 0; j < localArray.length - i - 1; j++) {\n            // Comparing\n            createStep(localArray, [j, j + 1], [], sortedIndices);\n            \n            if (localArray[j].value > localArray[j + 1].value) {\n              // Swapping\n              createStep(localArray, [], [j, j + 1], sortedIndices);\n              [localArray[j], localArray[j + 1]] = [localArray[j + 1], localArray[j]];\n              createStep(localArray, [], [], sortedIndices);\n            }\n          }\n          sortedIndices.push(localArray.length - i - 1);\n          createStep(localArray, [], [], sortedIndices);\n        }\n        sortedIndices.push(0);\n        createStep(localArray, [], [], sortedIndices);\n        break;\n      }\n\n      case 'insertion': {\n        const sortedIndices: number[] = [0];\n        createStep(localArray, [], [], sortedIndices);\n        \n        for (let i = 1; i < localArray.length; i++) {\n          const key = localArray[i];\n          let j = i - 1;\n          \n          createStep(localArray, [i], [], sortedIndices);\n          \n          while (j >= 0 && localArray[j].value > key.value) {\n            createStep(localArray, [j, j + 1], [], sortedIndices);\n            createStep(localArray, [], [j, j + 1], sortedIndices);\n            localArray[j + 1] = localArray[j];\n            createStep(localArray, [], [], sortedIndices);\n            j--;\n          }\n          \n          localArray[j + 1] = key;\n          sortedIndices.push(i);\n          createStep(localArray, [], [], sortedIndices);\n        }\n        break;\n      }\n\n      case 'quick': {\n        const sortedIndices: number[] = [];\n        \n        const partition = (low: number, high: number): number => {\n          const pivot = localArray[high].value;\n          let i = low - 1;\n          \n          createStep(localArray, [high], [], sortedIndices);\n          \n          for (let j = low; j < high; j++) {\n            createStep(localArray, [j, high], [], sortedIndices);\n            \n            if (localArray[j].value < pivot) {\n              i++;\n              if (i !== j) {\n                createStep(localArray, [], [i, j], sortedIndices);\n                [localArray[i], localArray[j]] = [localArray[j], localArray[i]];\n                createStep(localArray, [], [], sortedIndices);\n              }\n            }\n          }\n          \n          createStep(localArray, [], [i + 1, high], sortedIndices);\n          [localArray[i + 1], localArray[high]] = [localArray[high], localArray[i + 1]];\n          sortedIndices.push(i + 1);\n          createStep(localArray, [], [], sortedIndices);\n          \n          return i + 1;\n        };\n        \n        const quickSort = (low: number, high: number) => {\n          if (low < high) {\n            const pi = partition(low, high);\n            quickSort(low, pi - 1);\n            quickSort(pi + 1, high);\n          } else if (low === high) {\n            sortedIndices.push(low);\n            createStep(localArray, [], [], sortedIndices);\n          }\n        };\n        \n        quickSort(0, localArray.length - 1);\n        break;\n      }\n\n      case 'merge': {\n        const sortedIndices: number[] = [];\n        \n        const merge = (left: number, mid: number, right: number) => {\n          const leftArr = localArray.slice(left, mid + 1);\n          const rightArr = localArray.slice(mid + 1, right + 1);\n          \n          let i = 0, j = 0, k = left;\n          \n          while (i < leftArr.length && j < rightArr.length) {\n            createStep(localArray, [left + i, mid + 1 + j], [], sortedIndices);\n            \n            if (leftArr[i].value <= rightArr[j].value) {\n              createStep(localArray, [], [k], sortedIndices);\n              localArray[k] = leftArr[i];\n              i++;\n            } else {\n              createStep(localArray, [], [k], sortedIndices);\n              localArray[k] = rightArr[j];\n              j++;\n            }\n            k++;\n            createStep(localArray, [], [], sortedIndices);\n          }\n          \n          while (i < leftArr.length) {\n            createStep(localArray, [], [k], sortedIndices);\n            localArray[k] = leftArr[i];\n            i++;\n            k++;\n            createStep(localArray, [], [], sortedIndices);\n          }\n          \n          while (j < rightArr.length) {\n            createStep(localArray, [], [k], sortedIndices);\n            localArray[k] = rightArr[j];\n            j++;\n            k++;\n            createStep(localArray, [], [], sortedIndices);\n          }\n        };\n        \n        const mergeSort = (left: number, right: number) => {\n          if (left < right) {\n            const mid = Math.floor((left + right) / 2);\n            mergeSort(left, mid);\n            mergeSort(mid + 1, right);\n            merge(left, mid, right);\n          }\n        };\n        \n        mergeSort(0, localArray.length - 1);\n        \n        for (let i = 0; i < localArray.length; i++) {\n          sortedIndices.push(i);\n        }\n        createStep(localArray, [], [], sortedIndices);\n        break;\n      }\n    }\n\n    setSteps(allSteps);\n    setCurrentStep(0);\n  }, [array]);\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-gray-900 via-purple-900 to-gray-900 p-8\">\n      <div className=\"max-w-7xl mx-auto space-y-8\">\n        <motion.div\n          initial={{ opacity: 0, y: -20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.8 }}\n          className=\"text-center space-y-4\"\n        >\n          <motion.h1\n            className=\"text-6xl font-bold bg-gradient-to-r from-cyan-400 via-purple-400 to-pink-400 bg-clip-text text-transparent\"\n            animate={{\n              textShadow: [\n                '0 0 20px rgba(0, 255, 255, 0.5)',\n                '0 0 40px rgba(255, 0, 255, 0.5)',\n                '0 0 20px rgba(0, 255, 255, 0.5)'\n              ]\n            }}\n            transition={{ duration: 2, repeat: Infinity }}\n          >\n            Algorithm Visualizer\n          </motion.h1>\n          \n          <div className=\"flex items-center justify-center gap-4\">\n            <motion.div\n              initial={{ scale: 0 }}\n              animate={{ scale: 1 }}\n              transition={{ delay: 0.3, type: 'spring' }}\n              className=\"flex items-center gap-2 px-6 py-3 bg-gray-800/50 backdrop-blur-sm rounded-full border border-cyan-500/30\"\n            >\n              <Zap className=\"w-5 h-5 text-cyan-400\" />\n              <span className=\"text-xl font-semibold text-cyan-300\">\n                {mockAlgorithms.find(a => a.id === selectedAlgorithm)?.name}\n              </span>\n            </motion.div>\n            \n            <motion.div\n              initial={{ scale: 0 }}\n              animate={{ scale: 1 }}\n              transition={{ delay: 0.5, type: 'spring' }}\n              className=\"px-4 py-2 bg-purple-500/20 backdrop-blur-sm rounded-full border border-purple-400/50\"\n            >\n              <div className=\"flex items-center gap-2\">\n                <BarChart3 className=\"w-4 h-4 text-purple-300\" />\n                <span className=\"text-sm font-mono text-purple-200\">\n                  {mockAlgorithms.find(a => a.id === selectedAlgorithm)?.complexity}\n                </span>\n              </div>\n            </motion.div>\n          </div>\n        </motion.div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-6\">\n          <div className=\"lg:col-span-1 space-y-6\">\n            <motion.div\n              initial={{ opacity: 0, x: -50 }}\n              animate={{ opacity: 1, x: 0 }}\n              transition={{ duration: 0.6 }}\n              className=\"bg-gray-800/50 backdrop-blur-lg rounded-2xl p-6 border border-cyan-500/30 shadow-[0_0_30px_rgba(0,255,255,0.3)] hover:shadow-[0_0_50px_rgba(0,255,255,0.5)] transition-all duration-300\"\n            >\n              <div className=\"space-y-6\">\n                {/* Algorithm Selection */}\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center gap-2 mb-4\">\n                    <Zap className=\"w-5 h-5 text-cyan-400\" />\n                    <h3 className=\"text-lg font-bold text-cyan-400 tracking-wider\">ALGORITHM</h3>\n                  </div>\n                  <div className=\"grid grid-cols-1 gap-2\">\n                    {mockAlgorithms.map((algo) => (\n                      <motion.button\n                        key={algo.id}\n                        whileHover={{ scale: 1.02 }}\n                        whileTap={{ scale: 0.98 }}\n                        onClick={() => setSelectedAlgorithm(algo.id as AlgorithmType)}\n                        className={`p-3 rounded-lg border transition-all duration-300 text-left ${\n                          selectedAlgorithm === algo.id\n                            ? 'bg-cyan-500/20 border-cyan-400 shadow-[0_0_20px_rgba(0,255,255,0.4)]'\n                            : 'bg-gray-700/30 border-gray-600/50 hover:border-cyan-500/50'\n                        }`}\n                      >\n                        <div className=\"font-semibold text-white\">{algo.name}</div>\n                        <div className=\"text-xs text-gray-400 mt-1\">{algo.complexity}</div>\n                      </motion.button>\n                    ))}\n                  </div>\n                </div>\n\n                {/* Speed Control */}\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <label className=\"text-sm font-semibold text-purple-400 tracking-wider\">SPEED</label>\n                    <span className=\"text-cyan-400 font-mono text-sm\">{speed[0]}%</span>\n                  </div>\n                  <Slider\n                    value={speed}\n                    onValueChange={setSpeed}\n                    min={10}\n                    max={100}\n                    step={10}\n                    className=\"cursor-pointer\"\n                    disabled={isPlaying}\n                  />\n                </div>\n\n                {/* Array Size Control */}\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <label className=\"text-sm font-semibold text-purple-400 tracking-wider\">ARRAY SIZE</label>\n                    <span className=\"text-cyan-400 font-mono text-sm\">{arraySize[0]}</span>\n                  </div>\n                  <Slider\n                    value={arraySize}\n                    onValueChange={setArraySize}\n                    min={5}\n                    max={50}\n                    step={5}\n                    className=\"cursor-pointer\"\n                    disabled={isPlaying}\n                  />\n                </div>\n\n                {/* Control Buttons */}\n                <div className=\"space-y-3 pt-4 border-t border-gray-700/50\">\n                  <Button\n                    onClick={isPlaying ? pauseVisualization : startVisualization}\n                    disabled={steps.length === 0 || currentStep >= steps.length}\n                    className=\"w-full bg-gradient-to-r from-cyan-500 to-blue-500 hover:from-cyan-400 hover:to-blue-400 text-white font-bold py-6 rounded-lg shadow-[0_0_20px_rgba(0,255,255,0.5)] hover:shadow-[0_0_30px_rgba(0,255,255,0.7)] transition-all duration-300 border border-cyan-400/50\"\n                  >\n                    {isPlaying ? (\n                      <>\n                        <Pause className=\"w-5 h-5 mr-2\" />\n                        PAUSE\n                      </>\n                    ) : (\n                      <>\n                        <Play className=\"w-5 h-5 mr-2\" />\n                        START\n                      </>\n                    )}\n                  </Button>\n\n                  <Button\n                    onClick={resetVisualization}\n                    variant=\"outline\"\n                    className=\"w-full bg-gray-700/30 hover:bg-gray-600/50 text-purple-400 hover:text-purple-300 font-bold py-6 rounded-lg border border-purple-500/50 shadow-[0_0_15px_rgba(168,85,247,0.3)] hover:shadow-[0_0_25px_rgba(168,85,247,0.5)] transition-all duration-300\"\n                  >\n                    <RotateCcw className=\"w-5 h-5 mr-2\" />\n                    RESET\n                  </Button>\n\n                  <Button\n                    onClick={() => generateSortingSteps(selectedAlgorithm)}\n                    disabled={isPlaying || array.length === 0}\n                    className=\"w-full bg-gradient-to-r from-purple-500 to-pink-500 hover:from-purple-400 hover:to-pink-400 text-white font-bold py-6 rounded-lg shadow-[0_0_20px_rgba(168,85,247,0.5)] hover:shadow-[0_0_30px_rgba(168,85,247,0.7)] transition-all duration-300 border border-purple-400/50\"\n                  >\n                    <BarChart3 className=\"w-5 h-5 mr-2\" />\n                    GENERATE\n                  </Button>\n                </div>\n\n                {/* Stats Display */}\n                <div className=\"pt-4 border-t border-gray-700/50 space-y-2\">\n                  <div className=\"flex justify-between text-sm\">\n                    <span className=\"text-gray-400\">Current Step:</span>\n                    <span className=\"text-cyan-400 font-mono\">{currentStep} / {steps.length}</span>\n                  </div>\n                  <div className=\"flex justify-between text-sm\">\n                    <span className=\"text-gray-400\">Array Length:</span>\n                    <span className=\"text-cyan-400 font-mono\">{array.length}</span>\n                  </div>\n                </div>\n              </div>\n            </motion.div>\n            \n            <div className=\"bg-gray-800/50 backdrop-blur-lg rounded-2xl p-6 border border-cyan-500/30 shadow-lg shadow-cyan-500/20\">\n              <div className=\"space-y-6\">\n                <div>\n                  <h3 className=\"text-cyan-400 font-semibold mb-4 flex items-center gap-2\">\n                    <Zap className=\"w-5 h-5\" />\n                    Algorithm\n                  </h3>\n                  <div className=\"grid grid-cols-2 gap-3\">\n                    {mockAlgorithms.map((algo) => (\n                      <motion.button\n                        key={algo.id}\n                        onClick={() => setSelectedAlgorithm(algo.id as AlgorithmType)}\n                        className={`relative p-3 rounded-lg border transition-all duration-300 ${\n                          selectedAlgorithm === algo.id\n                            ? 'bg-cyan-500/20 border-cyan-400 shadow-lg shadow-cyan-500/50'\n                            : 'bg-gray-700/30 border-gray-600 hover:border-cyan-500/50 hover:shadow-md hover:shadow-cyan-500/30'\n                        }`}\n                        whileHover={{ scale: 1.05 }}\n                        whileTap={{ scale: 0.95 }}\n                      >\n                        <div className=\"text-left\">\n                          <div className={`text-sm font-semibold ${\n                            selectedAlgorithm === algo.id ? 'text-cyan-300' : 'text-gray-300'\n                          }`}>\n                            {algo.name}\n                          </div>\n                          <div className=\"text-xs text-gray-400 mt-1\">\n                            {algo.complexity}\n                          </div>\n                        </div>\n                        {selectedAlgorithm === algo.id && (\n                          <motion.div\n                            className=\"absolute inset-0 rounded-lg bg-cyan-500/10\"\n                            layoutId=\"algorithmSelector\"\n                            transition={{ type: \"spring\", bounce: 0.2, duration: 0.6 }}\n                          />\n                        )}\n                      </motion.button>\n                    ))}\n                  </div>\n                </div>\n\n                <div>\n                  <h3 className=\"text-cyan-400 font-semibold mb-4\">Speed</h3>\n                  <div className=\"space-y-2\">\n                    <Slider\n                      value={speed}\n                      onValueChange={setSpeed}\n                      min={1}\n                      max={100}\n                      step={1}\n                      className=\"cursor-pointer [&_[role=slider]]:bg-cyan-400 [&_[role=slider]]:border-cyan-300 [&_[role=slider]]:shadow-lg [&_[role=slider]]:shadow-cyan-400/50 [&_[role=slider]]:transition-all [&_[role=slider]]:hover:shadow-cyan-400/80 [&_[role=slider]]:hover:scale-110 [&_.relative]:bg-gray-700 [&_.relative]:overflow-visible [&_.bg-primary]:bg-gradient-to-r [&_.bg-primary]:from-cyan-500 [&_.bg-primary]:to-purple-500 [&_.bg-primary]:shadow-lg [&_.bg-primary]:shadow-cyan-500/30\"\n                    />\n                    <div className=\"flex justify-between text-xs text-gray-400\">\n                      <span>Slow</span>\n                      <span className=\"text-cyan-400 font-semibold\">{speed[0]}%</span>\n                      <span>Fast</span>\n                    </div>\n                  </div>\n                </div>\n\n                <div>\n                  <h3 className=\"text-cyan-400 font-semibold mb-4\">Array Size</h3>\n                  <div className=\"space-y-3\">\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"text-gray-300 text-sm\">Elements</span>\n                      <motion.span \n                        key={arraySize[0]}\n                        initial={{ scale: 1.3, color: '#00ffff' }}\n                        animate={{ scale: 1, color: '#ffffff' }}\n                        className=\"text-white font-bold text-lg px-3 py-1 bg-cyan-500/20 rounded-lg border border-cyan-400/50 shadow-lg shadow-cyan-500/30\"\n                      >\n                        {arraySize[0]}\n                      </motion.span>\n                    </div>\n                    <div className=\"relative\">\n                      <Slider\n                        value={arraySize}\n                        onValueChange={setArraySize}\n                        min={5}\n                        max={50}\n                        step={1}\n                        disabled={isPlaying}\n                        className=\"[&_[role=slider]]:bg-cyan-400 [&_[role=slider]]:border-cyan-300 [&_[role=slider]]:shadow-lg [&_[role=slider]]:shadow-cyan-400/50 [&_[role=slider]]:hover:shadow-cyan-400/80 [&_[role=slider]]:transition-shadow [&>span]:bg-cyan-500/30\"\n                      />\n                      <div className=\"absolute inset-0 pointer-events-none\">\n                        <div className=\"h-full w-full bg-gradient-to-r from-cyan-500/0 via-cyan-500/10 to-cyan-500/0 rounded-full blur-sm\" />\n                      </div>\n                    </div>\n                  </div></parameter>\n</invoke>\n                </div>\n\n                <div className=\"space-y-3 pt-4 border-t border-cyan-500/20\">\n                  <motion.button\n                    onClick={isPlaying ? pauseVisualization : startVisualization}\n                    disabled={array.length === 0}\n                    className=\"w-full relative group overflow-hidden\"\n                    whileHover={{ scale: 1.02 }}\n                    whileTap={{ scale: 0.98 }}\n                  >\n                    <div className={`relative p-4 rounded-xl border-2 transition-all duration-300 ${\n                      array.length === 0\n                        ? 'bg-gray-700/30 border-gray-600/50 cursor-not-allowed opacity-50'\n                        : isPlaying\n                        ? 'bg-yellow-500/20 border-yellow-400 shadow-[0_0_30px_rgba(234,179,8,0.6)]'\n                        : 'bg-green-500/20 border-green-400 shadow-[0_0_30px_rgba(34,197,94,0.6)] hover:shadow-[0_0_50px_rgba(34,197,94,0.8)]'\n                    }`}>\n                      <div className=\"flex items-center justify-center gap-3\">\n                        <motion.div\n                          animate={isPlaying ? {\n                            scale: [1, 1.2, 1],\n                            rotate: [0, 5, -5, 0]\n                          } : {\n                            scale: [1, 1.1, 1]\n                          }}\n                          transition={{\n                            duration: isPlaying ? 0.6 : 2,\n                            repeat: Infinity,\n                            ease: \"easeInOut\"\n                          }}\n                        >\n                          {isPlaying ? (\n                            <Pause className=\"w-6 h-6 text-yellow-300 fill-yellow-300\" />\n                          ) : (\n                            <Play className=\"w-6 h-6 text-green-300 fill-green-300\" />\n                          )}\n                        </motion.div>\n                        <span className={`text-lg font-bold tracking-wider ${\n                          isPlaying ? 'text-yellow-300' : 'text-green-300'\n                        }`}>\n                          {isPlaying ? 'PAUSE' : 'START'}\n                        </span>\n                      </div>\n                      \n                      {/* Animated glow pulse */}\n                      {!isPlaying && array.length > 0 && (\n                        <motion.div\n                          className=\"absolute inset-0 rounded-xl bg-gradient-to-r from-green-400/0 via-green-400/30 to-green-400/0\"\n                          animate={{\n                            x: ['-100%', '100%']\n                          }}\n                          transition={{\n                            duration: 2,\n                            repeat: Infinity,\n                            ease: \"linear\"\n                          }}\n                        />\n                      )}\n                    </div>\n                  </motion.button>\n\n                  <motion.button\n                    onClick={resetVisualization}\n                    className=\"w-full relative group overflow-hidden\"\n                    whileHover={{ scale: 1.02 }}\n                    whileTap={{ scale: 0.98 }}\n                  >\n                    <div className=\"relative p-4 rounded-xl border-2 bg-purple-500/20 border-purple-400 shadow-[0_0_30px_rgba(168,85,247,0.6)] hover:shadow-[0_0_50px_rgba(168,85,247,0.8)] transition-all duration-300\">\n                      <div className=\"flex items-center justify-center gap-3\">\n                        <motion.div\n                          whileHover={{\n                            rotate: -360\n                          }}\n                          transition={{\n                            duration: 0.6,\n                            ease: \"easeInOut\"\n                          }}\n                        >\n                          <RotateCcw className=\"w-6 h-6 text-purple-300\" />\n                        </motion.div>\n                        <span className=\"text-lg font-bold tracking-wider text-purple-300\">\n                          RESET\n                        </span>\n                      </div>\n                      \n                      {/* Hover glow effect */}\n                      <motion.div\n                        className=\"absolute inset-0 rounded-xl bg-purple-400/0 group-hover:bg-purple-400/10 transition-all duration-300\"\n                      />\n                    </div>\n                  </motion.button>\n\n                  <motion.button\n                    onClick={generateRandomArray}\n                    className=\"w-full relative group overflow-hidden\"\n                    whileHover={{ scale: 1.02 }}\n                    whileTap={{ scale: 0.98 }}\n                  >\n                    <div className=\"relative p-4 rounded-xl border-2 bg-cyan-500/20 border-cyan-400 shadow-[0_0_30px_rgba(6,182,212,0.6)] hover:shadow-[0_0_50px_rgba(6,182,212,0.8)] transition-all duration-300\">\n                      <div className=\"flex items-center justify-center gap-3\">\n                        <motion.div\n                          animate={{\n                            rotate: [0, 10, -10, 0]\n                          }}\n                          transition={{\n                            duration: 1.5,\n                            repeat: Infinity,\n                            ease: \"easeInOut\"\n                          }}\n                        >\n                          <BarChart3 className=\"w-6 h-6 text-cyan-300\" />\n                        </motion.div>\n                        <span className=\"text-lg font-bold tracking-wider text-cyan-300\">\n                          NEW ARRAY\n                        </span>\n                      </div>\n                      \n                      {/* Animated sparkle effect */}\n                      <motion.div\n                        className=\"absolute inset-0 rounded-xl\"\n                        style={{\n                          background: 'radial-gradient(circle at 50% 50%, rgba(6,182,212,0.3) 0%, transparent 70%)'\n                        }}\n                        animate={{\n                          scale: [0.8, 1.2, 0.8],\n                          opacity: [0.3, 0.6, 0.3]\n                        }}\n                        transition={{\n                          duration: 2,\n                          repeat: Infinity,\n                          ease: \"easeInOut\"\n                        }}\n                      />\n                    </div>\n                  </motion.button>\n</parameter>\n</invoke>\n                </div>\n              </div>\n            </div>\n\n            <motion.div\n              initial={{ opacity: 0, x: -50 }}\n              animate={{ opacity: 1, x: 0 }}\n              transition={{ duration: 0.6, delay: 0.2 }}\n              className=\"bg-gray-800/50 backdrop-blur-lg rounded-2xl p-6 border border-purple-500/30 shadow-[0_0_30px_rgba(168,85,247,0.3)] hover:shadow-[0_0_50px_rgba(168,85,247,0.5)] transition-all duration-300\"\n            >\n              <div className=\"space-y-4\">\n                <div className=\"flex items-center gap-2 mb-4\">\n                  <BarChart3 className=\"w-5 h-5 text-purple-400\" />\n                  <h3 className=\"text-lg font-bold text-purple-400 tracking-wider\">STATISTICS</h3>\n                </div>\n\n                <div className=\"space-y-4\">\n                  {/* Comparisons Counter */}\n                  <div className=\"bg-gray-900/50 rounded-lg p-4 border border-cyan-500/20\">\n                    <div className=\"flex items-center justify-between mb-2\">\n                      <span className=\"text-sm font-semibold text-gray-400 tracking-wider\">COMPARISONS</span>\n                      <motion.div\n                        key={currentStep}\n                        initial={{ scale: 1.3, color: '#00ffff' }}\n                        animate={{ scale: 1, color: '#06b6d4' }}\n                        transition={{ duration: 0.3 }}\n                        className=\"text-2xl font-bold text-cyan-400 font-mono\"\n                      >\n                        {steps.length > 0 ? currentStep : 0}\n                      </motion.div>\n                    </div>\n                    <div className=\"w-full bg-gray-700/50 rounded-full h-2 overflow-hidden\">\n                      <motion.div\n                        className=\"h-full bg-gradient-to-r from-cyan-500 to-blue-500 rounded-full shadow-[0_0_10px_rgba(0,255,255,0.8)]\"\n                        initial={{ width: 0 }}\n                        animate={{ \n                          width: steps.length > 0 ? `${(currentStep / steps.length) * 100}%` : '0%'\n                        }}\n                        transition={{ duration: 0.3 }}\n                      />\n                    </div>\n                  </div>\n\n                  {/* Swaps Counter */}\n                  <div className=\"bg-gray-900/50 rounded-lg p-4 border border-pink-500/20\">\n                    <div className=\"flex items-center justify-between mb-2\">\n                      <span className=\"text-sm font-semibold text-gray-400 tracking-wider\">SWAPS</span>\n                      <motion.div\n                        key={steps.filter((step, idx) => idx <= currentStep && step.swappingIndices.length > 0).length}\n                        initial={{ scale: 1.3, color: '#ff0066' }}\n                        animate={{ scale: 1, color: '#ec4899' }}\n                        transition={{ duration: 0.3 }}\n                        className=\"text-2xl font-bold text-pink-400 font-mono\"\n                      >\n                        {steps.filter((step, idx) => idx <= currentStep && step.swappingIndices.length > 0).length}\n                      </motion.div>\n                    </div>\n                    <div className=\"flex items-center gap-2 text-xs text-gray-500\">\n                      <div className=\"w-2 h-2 rounded-full bg-pink-500 animate-pulse shadow-[0_0_8px_rgba(236,72,153,0.8)]\" />\n                      <span>Active operations</span>\n                    </div>\n                  </div>\n\n                  {/* Progress Indicator */}\n                  <div className=\"bg-gray-900/50 rounded-lg p-4 border border-purple-500/20\">\n                    <div className=\"flex items-center justify-between mb-2\">\n                      <span className=\"text-sm font-semibold text-gray-400 tracking-wider\">PROGRESS</span>\n                      <motion.div\n                        key={steps.length > 0 ? Math.round((currentStep / steps.length) * 100) : 0}\n                        initial={{ scale: 1.3, color: '#a855f7' }}\n                        animate={{ scale: 1, color: '#9333ea' }}\n                        transition={{ duration: 0.3 }}\n                        className=\"text-2xl font-bold text-purple-400 font-mono\"\n                      >\n                        {steps.length > 0 ? Math.round((currentStep / steps.length) * 100) : 0}%\n                      </motion.div>\n                    </div>\n                    <div className=\"space-y-2\">\n                      <div className=\"w-full bg-gray-700/50 rounded-full h-3 overflow-hidden\">\n                        <motion.div\n                          className=\"h-full bg-gradient-to-r from-purple-500 via-pink-500 to-cyan-500 rounded-full shadow-[0_0_15px_rgba(168,85,247,0.8)]\"\n                          initial={{ width: 0 }}\n                          animate={{ \n                            width: steps.length > 0 ? `${(currentStep / steps.length) * 100}%` : '0%'\n                          }}\n                          transition={{ duration: 0.3 }}\n                        />\n                      </div>\n                      <div className=\"flex items-center justify-between text-xs text-gray-500\">\n                        <span>Step {currentStep} / {steps.length}</span>\n                        <span className={`font-semibold ${\n                          currentStep >= steps.length && steps.length > 0\n                            ? 'text-green-400'\n                            : 'text-gray-400'\n                        }`}>\n                          {currentStep >= steps.length && steps.length > 0 ? '\u2713 Complete' : 'In Progress'}\n                        </span>\n                      </div>\n                    </div>\n                  </div>\n\n                  {/* Array Info */}\n                  <div className=\"bg-gray-900/50 rounded-lg p-4 border border-cyan-500/20\">\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <div>\n                        <div className=\"text-xs text-gray-500 mb-1\">ELEMENTS</div>\n                        <div className=\"text-lg font-bold text-cyan-400 font-mono\">{array.length}</div>\n                      </div>\n                      <div>\n                        <div className=\"text-xs text-gray-500 mb-1\">SORTED</div>\n                        <div className=\"text-lg font-bold text-green-400 font-mono\">\n                          {array.filter(el => el.isSorted).length}\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n\n                  {/* Status Indicator */}\n                  <motion.div\n                    className={`rounded-lg p-3 border text-center transition-all duration-300 ${\n                      isPlaying\n                        ? 'bg-green-500/10 border-green-500/50 shadow-[0_0_20px_rgba(34,197,94,0.3)]'\n                        : steps.length > 0 && currentStep >= steps.length\n                        ? 'bg-purple-500/10 border-purple-500/50 shadow-[0_0_20px_rgba(168,85,247,0.3)]'\n                        : 'bg-gray-700/30 border-gray-600/50'\n                    }`}\n                    animate={{\n                      boxShadow: isPlaying\n                        ? [\n                            '0 0 20px rgba(34,197,94,0.3)',\n                            '0 0 30px rgba(34,197,94,0.6)',\n                            '0 0 20px rgba(34,197,94,0.3)'\n                          ]\n                        : '0 0 20px rgba(168,85,247,0.3)'\n                    }}\n                    transition={{ duration: 1.5, repeat: isPlaying ? Infinity : 0 }}\n                  >\n                    <div className=\"flex items-center justify-center gap-2\">\n                      <motion.div\n                        className={`w-2 h-2 rounded-full ${\n                          isPlaying\n                            ? 'bg-green-400'\n                            : steps.length > 0 && currentStep >= steps.length\n                            ? 'bg-purple-400'\n                            : 'bg-gray-500'\n                        }`}\n                        animate={{\n                          scale: isPlaying ? [1, 1.5, 1] : 1,\n                          opacity: isPlaying ? [1, 0.5, 1] : 1\n                        }}\n                        transition={{ duration: 1, repeat: isPlaying ? Infinity : 0 }}\n                      />\n                      <span className={`text-sm font-semibold tracking-wider ${\n                        isPlaying\n                          ? 'text-green-400'\n                          : steps.length > 0 && currentStep >= steps.length\n                          ? 'text-purple-400'\n                          : 'text-gray-400'\n                      }`}>\n                        {isPlaying\n                          ? 'RUNNING'\n                          : steps.length > 0 && currentStep >= steps.length\n                          ? 'COMPLETED'\n                          : 'READY'}\n                      </span>\n                    </div>\n                  </motion.div>\n                </div>\n              </div>\n            </motion.div>\n          </div>\n\n          <div className=\"lg:col-span-3\">\n            <div className=\"bg-gray-800/50 backdrop-blur-lg rounded-2xl p-8 border border-purple-500/30 shadow-lg shadow-purple-500/20 min-h-[600px]\">\n                            {array.length === 0 ? (\n                <motion.div\n                  initial={{ opacity: 0, scale: 0.8 }}\n                  animate={{ opacity: 1, scale: 1 }}\n                  className=\"flex flex-col items-center justify-center h-full space-y-6\"\n                >\n                  <motion.div\n                    animate={{\n                      rotate: [0, 360],\n                      scale: [1, 1.2, 1]\n                    }}\n                    transition={{\n                      duration: 3,\n                      repeat: Infinity,\n                      ease: \"easeInOut\"\n                    }}\n                  >\n                    <BarChart3 className=\"w-24 h-24 text-cyan-400/50\" />\n                  </motion.div>\n                  <div className=\"text-center space-y-2\">\n                    <h3 className=\"text-2xl font-bold text-cyan-400\">Ready to Visualize</h3>\n                    <p className=\"text-gray-400\">Click \"Generate Array\" to begin</p>\n                  </div>\n                </motion.div>\n              ) : (\n                <div className=\"h-full flex items-end justify-center gap-1 px-4\">\n                  {array.map((element, index) => {\n                    const maxValue = Math.max(...array.map(e => e.value));\n                    const heightPercentage = (element.value / maxValue) * 100;\n                    const colorIndex = index % NEON_COLORS.length;\n                    const baseColor = NEON_COLORS[colorIndex];\n                    \n                    const isComparing = element.isComparing;\n                    const isSwapping = element.isSwapping;\n                    const isSorted = element.isSorted;\n\n                    let barColor = baseColor;\n                    let glowIntensity = '0.3';\n                    let scale = 1;\n\n                    if (isSorted) {\n                      barColor = '#00ff00';\n                      glowIntensity = '0.6';\n                    } else if (isSwapping) {\n                      barColor = '#ff0066';\n                      glowIntensity = '0.8';\n                      scale = 1.1;\n                    } else if (isComparing) {\n                      barColor = '#ffff00';\n                      glowIntensity = '0.7';\n                      scale = 1.05;\n                    }\n\n                    return (\n                      <motion.div\n                        key={element.id}\n                        layout\n                        initial={{ opacity: 0, y: 50 }}\n                        animate={{\n                          opacity: 1,\n                          y: 0,\n                          height: `${heightPercentage}%`,\n                          scale: scale,\n                          backgroundColor: barColor,\n                          boxShadow: [\n                            `0 0 20px ${barColor}${Math.floor(parseFloat(glowIntensity) * 255).toString(16).padStart(2, '0')}`,\n                            `0 0 40px ${barColor}${Math.floor(parseFloat(glowIntensity) * 255).toString(16).padStart(2, '0')}`,\n                            `0 0 20px ${barColor}${Math.floor(parseFloat(glowIntensity) * 255).toString(16).padStart(2, '0')}`\n                          ]\n                        }}\n                        exit={{ opacity: 0, scale: 0 }}\n                        transition={{\n                          layout: { duration: 0.3, type: \"spring\" },\n                          height: { duration: 0.4, ease: \"easeOut\" },\n                          scale: { duration: 0.2 },\n                          backgroundColor: { duration: 0.3 },\n                          boxShadow: { duration: 1, repeat: isSwapping || isComparing ? Infinity : 0 }\n                        }}\n                        className=\"relative rounded-t-lg min-w-[8px] flex-1 max-w-[60px]\"\n                        style={{\n                          backgroundColor: barColor,\n                          boxShadow: `0 0 20px ${barColor}${Math.floor(parseFloat(glowIntensity) * 255).toString(16).padStart(2, '0')}, 0 -5px 30px ${barColor}40 inset`\n                        }}\n                      >\n                        {/* Value label */}\n                        {array.length <= 20 && (\n                          <motion.div\n                            initial={{ opacity: 0 }}\n                            animate={{ opacity: 1 }}\n                            className=\"absolute -top-8 left-1/2 transform -translate-x-1/2 text-xs font-bold text-white bg-gray-900/80 px-2 py-1 rounded backdrop-blur-sm border border-gray-700/50\"\n                          >\n                            {element.value}\n                          </motion.div>\n                        )}\n\n                        {/* Trail effect for swapping */}\n                        {isSwapping && (\n                          <motion.div\n                            className=\"absolute inset-0 rounded-t-lg\"\n                            style={{\n                              background: `linear-gradient(to top, ${barColor}, transparent)`\n                            }}\n                            animate={{\n                              opacity: [0.8, 0, 0.8],\n                              scale: [1, 1.3, 1]\n                            }}\n                            transition={{\n                              duration: 0.6,\n                              repeat: Infinity\n                            }}\n                          />\n                        )}\n\n                        {/* Pulse effect for comparing */}\n                        {isComparing && (\n                          <motion.div\n                            className=\"absolute -inset-1 rounded-t-lg border-2\"\n                            style={{\n                              borderColor: barColor\n                            }}\n                            animate={{\n                              opacity: [1, 0.3, 1],\n                              scale: [1, 1.1, 1]\n                            }}\n                            transition={{\n                              duration: 0.5,\n                              repeat: Infinity\n                            }}\n                          />\n                        )}\n\n                        {/* Sorted checkmark */}\n                        {isSorted && array.length <= 30 && (\n                          <motion.div\n                            initial={{ scale: 0, rotate: -180 }}\n                            animate={{ scale: 1, rotate: 0 }}\n                            className=\"absolute -top-6 left-1/2 transform -translate-x-1/2\"\n                          >\n                            <div className=\"w-4 h-4 bg-green-500 rounded-full flex items-center justify-center shadow-lg shadow-green-500/50\">\n                              <svg className=\"w-3 h-3 text-white\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={3} d=\"M5 13l4 4L19 7\" />\n                              </svg>\n                            </div>\n                          </motion.div>\n                        )}\n                      </motion.div>\n                    );\n                  })}\n                </div>\n              )}\n                {array.length === 0 ? (\n                  <motion.div\n                    initial={{ opacity: 0, scale: 0.8 }}\n                    animate={{ opacity: 1, scale: 1 }}\n                    className=\"absolute inset-0 flex items-center justify-center\"\n                  >\n                    <div className=\"text-center space-y-4\">\n                      <motion.div\n                        animate={{\n                          rotate: [0, 360],\n                          scale: [1, 1.2, 1]\n                        }}\n                        transition={{\n                          duration: 3,\n                          repeat: Infinity,\n                          ease: \"easeInOut\"\n                        }}\n                      >\n                        <BarChart3 className=\"w-24 h-24 text-cyan-400/30 mx-auto\" />\n                      </motion.div>\n                      <p className=\"text-gray-400 text-lg\">Generate an array to begin</p>\n                    </div>\n                  </motion.div>\n                ) : (\n                  array.map((element, index) => {\n                    const heightPercentage = (element.value / 100) * 100;\n                    const colorIndex = index % NEON_COLORS.length;\n                    const neonColor = NEON_COLORS[colorIndex];\n                    \n                    const isComparing = element.isComparing;\n                    const isSwapping = element.isSwapping;\n                    const isSorted = element.isSorted;\n\n                    return (\n                      <motion.div\n                        key={element.id}\n                        className=\"relative flex-1 min-w-[8px] max-w-[60px] group\"\n                        initial={{ opacity: 0, y: 50 }}\n                        animate={{ \n                          opacity: 1, \n                          y: 0,\n                          scale: isSwapping ? [1, 1.1, 1] : 1\n                        }}\n                        transition={{\n                          opacity: { duration: 0.3 },\n                          y: { duration: 0.5, delay: index * 0.02 },\n                          scale: { duration: 0.3 }\n                        }}\n                      >\n                        {/* Trail effect for swapping */}\n                        {isSwapping && (\n                          <motion.div\n                            className=\"absolute inset-0 rounded-t-lg\"\n                            style={{\n                              background: `linear-gradient(to top, transparent, ${neonColor}40)`,\n                              filter: 'blur(8px)'\n                            }}\n                            initial={{ opacity: 0, scale: 0.8 }}\n                            animate={{ \n                              opacity: [0, 1, 0],\n                              scale: [0.8, 1.2, 1.5],\n                              y: [-20, -40, -60]\n                            }}\n                            transition={{\n                              duration: 0.6,\n                              repeat: Infinity,\n                              ease: \"easeOut\"\n                            }}\n                          />\n                        )}\n\n                        {/* Main bar */}\n                        <motion.div\n                          className=\"relative w-full rounded-t-lg transition-all duration-300\"\n                          style={{\n                            height: `${heightPercentage}%`,\n                            minHeight: '20px',\n                            background: isSorted \n                              ? `linear-gradient(to top, #00ff00, #00ff00dd)`\n                              : isComparing\n                              ? `linear-gradient(to top, #ff0066, #ff0066dd)`\n                              : isSwapping\n                              ? `linear-gradient(to top, #ffff00, #ffff00dd)`\n                              : `linear-gradient(to top, ${neonColor}, ${neonColor}dd)`,\n                            boxShadow: isSorted\n                              ? '0 0 20px #00ff00, 0 0 40px #00ff0080, inset 0 0 20px #00ff0040'\n                              : isComparing\n                              ? '0 0 30px #ff0066, 0 0 60px #ff006680, inset 0 0 20px #ff006640'\n                              : isSwapping\n                              ? '0 0 30px #ffff00, 0 0 60px #ffff0080, inset 0 0 20px #ffff0040'\n                              : `0 0 15px ${neonColor}, 0 0 30px ${neonColor}80, inset 0 0 15px ${neonColor}40`\n                          }}\n                          animate={{\n                            height: `${heightPercentage}%`,\n                            boxShadow: isComparing\n                              ? [\n                                  '0 0 30px #ff0066, 0 0 60px #ff006680, inset 0 0 20px #ff006640',\n                                  '0 0 50px #ff0066, 0 0 80px #ff006680, inset 0 0 30px #ff006640',\n                                  '0 0 30px #ff0066, 0 0 60px #ff006680, inset 0 0 20px #ff006640'\n                                ]\n                              : isSwapping\n                              ? [\n                                  '0 0 30px #ffff00, 0 0 60px #ffff0080, inset 0 0 20px #ffff0040',\n                                  '0 0 50px #ffff00, 0 0 80px #ffff0080, inset 0 0 30px #ffff0040',\n                                  '0 0 30px #ffff00, 0 0 60px #ffff0080, inset 0 0 20px #ffff0040'\n                                ]\n                              : isSorted\n                              ? '0 0 20px #00ff00, 0 0 40px #00ff0080, inset 0 0 20px #00ff0040'\n                              : `0 0 15px ${neonColor}, 0 0 30px ${neonColor}80, inset 0 0 15px ${neonColor}40`\n                          }}\n                          transition={{\n                            height: { duration: 0.5, ease: \"easeInOut\" },\n                            boxShadow: { duration: 0.5, repeat: (isComparing || isSwapping) ? Infinity : 0 }\n                          }}\n                        >\n                          {/* Glossy overlay */}\n                          <div className=\"absolute inset-0 rounded-t-lg bg-gradient-to-b from-white/30 via-transparent to-transparent\" />\n                          \n                          {/* Scanning line effect */}\n                          {(isComparing || isSwapping) && (\n                            <motion.div\n                              className=\"absolute inset-x-0 h-[2px] bg-white\"\n                              style={{\n                                boxShadow: '0 0 10px #ffffff, 0 0 20px #ffffff'\n                              }}\n                              animate={{\n                                top: ['0%', '100%']\n                              }}\n                              transition={{\n                                duration: 0.8,\n                                repeat: Infinity,\n                                ease: \"linear\"\n                              }}\n                            />\n                          )}\n\n                          {/* Value label */}\n                          <motion.div\n                            className=\"absolute -top-8 left-1/2 -translate-x-1/2 opacity-0 group-hover:opacity-100 transition-opacity duration-200\"\n                            initial={{ y: 10 }}\n                            whileHover={{ y: 0 }}\n                          >\n                            <div \n                              className=\"px-2 py-1 rounded text-xs font-bold text-white whitespace-nowrap\"\n                              style={{\n                                background: `linear-gradient(135deg, ${neonColor}, ${neonColor}cc)`,\n                                boxShadow: `0 0 10px ${neonColor}80`\n                              }}\n                            >\n                              {element.value}\n                            </div>\n                          </motion.div>\n                        </motion.div>\n\n                        {/* Base glow */}\n                        <motion.div\n                          className=\"absolute -bottom-1 left-0 right-0 h-2 rounded-full blur-sm\"\n                          style={{\n                            background: isSorted \n                              ? '#00ff00'\n                              : isComparing\n                              ? '#ff0066'\n                              : isSwapping\n                              ? '#ffff00'\n                              : neonColor,\n                            opacity: 0.6\n                          }}\n                          animate={{\n                            opacity: (isComparing || isSwapping) ? [0.6, 1, 0.6] : 0.6\n                          }}\n                          transition={{\n                            duration: 0.5,\n                            repeat: (isComparing || isSwapping) ? Infinity : 0\n                          }}\n                        />\n\n                        {/* Particle effects for sorted elements */}\n                        {isSorted && (\n                          <>\n                            {[...Array(3)].map((_, i) => (\n                              <motion.div\n                                key={`particle-${i}`}\n                                className=\"absolute w-1 h-1 rounded-full bg-green-400\"\n                                style={{\n                                  left: '50%',\n                                  top: '0%',\n                                  boxShadow: '0 0 5px #00ff00'\n                                }}\n                                initial={{ opacity: 0, y: 0, x: 0 }}\n                                animate={{\n                                  opacity: [0, 1, 0],\n                                  y: [-30, -60],\n                                  x: [(Math.random() - 0.5) * 20, (Math.random() - 0.5) * 40]\n                                }}\n                                transition={{\n                                  duration: 1.5,\n                                  delay: i * 0.2,\n                                  repeat: Infinity,\n                                  repeatDelay: 1\n                                }}\n                              />\n                            ))}\n                          </>\n                        )}\n                      </motion.div>\n                    );\n                  })\n                )}\n              </div>\n            </div>\n\n            <motion.div\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ duration: 0.6, delay: 0.3 }}\n              className=\"mt-6 bg-gray-800/50 backdrop-blur-lg rounded-2xl p-6 border border-purple-500/30 shadow-lg shadow-purple-500/20\"\n            >\n              <div className=\"flex items-center gap-2 mb-4\">\n                <BarChart3 className=\"w-5 h-5 text-purple-400\" />\n                <h3 className=\"text-lg font-bold text-purple-400 tracking-wider\">BAR STATES</h3>\n              </div>\n              \n              <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n                {/* Default State */}\n                <motion.div\n                  initial={{ opacity: 0, scale: 0.8 }}\n                  animate={{ opacity: 1, scale: 1 }}\n                  transition={{ delay: 0.4, type: 'spring' }}\n                  className=\"flex items-center gap-3 p-3 rounded-lg bg-gray-700/30 border border-gray-600/50 hover:border-gray-500/70 transition-all duration-300\"\n                >\n                  <motion.div\n                    className=\"w-4 h-8 rounded bg-gradient-to-t from-cyan-500 to-cyan-300 shadow-[0_0_10px_rgba(0,255,255,0.5)]\"\n                    animate={{\n                      boxShadow: [\n                        '0 0 10px rgba(0,255,255,0.5)',\n                        '0 0 20px rgba(0,255,255,0.8)',\n                        '0 0 10px rgba(0,255,255,0.5)'\n                      ]\n                    }}\n                    transition={{ duration: 2, repeat: Infinity }}\n                  />\n                  <div>\n                    <div className=\"text-sm font-semibold text-white\">Default</div>\n                    <div className=\"text-xs text-gray-400\">Unsorted</div>\n                  </div>\n                </motion.div>\n\n                {/* Comparing State */}\n                <motion.div\n                  initial={{ opacity: 0, scale: 0.8 }}\n                  animate={{ opacity: 1, scale: 1 }}\n                  transition={{ delay: 0.5, type: 'spring' }}\n                  className=\"flex items-center gap-3 p-3 rounded-lg bg-gray-700/30 border border-gray-600/50 hover:border-yellow-500/50 transition-all duration-300\"\n                >\n                  <motion.div\n                    className=\"w-4 h-8 rounded bg-gradient-to-t from-yellow-500 to-yellow-300 shadow-[0_0_10px_rgba(255,255,0,0.5)]\"\n                    animate={{\n                      boxShadow: [\n                        '0 0 10px rgba(255,255,0,0.5)',\n                        '0 0 25px rgba(255,255,0,1)',\n                        '0 0 10px rgba(255,255,0,0.5)'\n                      ],\n                      scale: [1, 1.1, 1]\n                    }}\n                    transition={{ duration: 1.5, repeat: Infinity }}\n                  />\n                  <div>\n                    <div className=\"text-sm font-semibold text-white\">Comparing</div>\n                    <div className=\"text-xs text-gray-400\">Active</div>\n                  </div>\n                </motion.div>\n\n                {/* Swapping State */}\n                <motion.div\n                  initial={{ opacity: 0, scale: 0.8 }}\n                  animate={{ opacity: 1, scale: 1 }}\n                  transition={{ delay: 0.6, type: 'spring' }}\n                  className=\"flex items-center gap-3 p-3 rounded-lg bg-gray-700/30 border border-gray-600/50 hover:border-pink-500/50 transition-all duration-300\"\n                >\n                  <motion.div\n                    className=\"w-4 h-8 rounded bg-gradient-to-t from-pink-500 to-pink-300 shadow-[0_0_10px_rgba(255,0,102,0.5)]\"\n                    animate={{\n                      boxShadow: [\n                        '0 0 10px rgba(255,0,102,0.5)',\n                        '0 0 30px rgba(255,0,102,1)',\n                        '0 0 10px rgba(255,0,102,0.5)'\n                      ],\n                      x: [-2, 2, -2]\n                    }}\n                    transition={{ duration: 1, repeat: Infinity }}\n                  />\n                  <div>\n                    <div className=\"text-sm font-semibold text-white\">Swapping</div>\n                    <div className=\"text-xs text-gray-400\">Moving</div>\n                  </div>\n                </motion.div>\n\n                {/* Sorted State */}\n                <motion.div\n                  initial={{ opacity: 0, scale: 0.8 }}\n                  animate={{ opacity: 1, scale: 1 }}\n                  transition={{ delay: 0.7, type: 'spring' }}\n                  className=\"flex items-center gap-3 p-3 rounded-lg bg-gray-700/30 border border-gray-600/50 hover:border-green-500/50 transition-all duration-300\"\n                >\n                  <motion.div\n                    className=\"w-4 h-8 rounded bg-gradient-to-t from-green-500 to-green-300 shadow-[0_0_10px_rgba(0,255,0,0.5)]\"\n                    animate={{\n                      boxShadow: [\n                        '0 0 10px rgba(0,255,0,0.5)',\n                        '0 0 20px rgba(0,255,0,0.8)',\n                        '0 0 10px rgba(0,255,0,0.5)'\n                      ]\n                    }}\n                    transition={{ duration: 2, repeat: Infinity }}\n                  />\n                  <div>\n                    <div className=\"text-sm font-semibold text-white\">Sorted</div>\n                    <div className=\"text-xs text-gray-400\">Complete</div>\n                  </div>\n                </motion.div>\n              </div>\n\n              {/* Additional Info */}\n              <motion.div\n                initial={{ opacity: 0 }}\n                animate={{ opacity: 1 }}\n                transition={{ delay: 0.8 }}\n                className=\"mt-4 pt-4 border-t border-gray-700/50\"\n              >\n                <div className=\"flex items-center justify-between text-xs text-gray-400\">\n                  <div className=\"flex items-center gap-2\">\n                    <motion.div\n                      className=\"w-2 h-2 rounded-full bg-cyan-400\"\n                      animate={{\n                        scale: [1, 1.5, 1],\n                        opacity: [1, 0.5, 1]\n                      }}\n                      transition={{ duration: 2, repeat: Infinity }}\n                    />\n                    <span>Bars pulse and glow during operations</span>\n                  </div>\n                  <div className=\"flex items-center gap-2\">\n                    <Zap className=\"w-3 h-3 text-purple-400\" />\n                    <span>Real-time visual feedback</span>\n                  </div>\n                </div>\n              </motion.div>\n            </motion.div>\n          </div>\n        </div>\n\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.6, delay: 0.3 }}\n          className=\"bg-gray-800/50 backdrop-blur-lg rounded-2xl p-6 border border-cyan-500/30 shadow-[0_0_30px_rgba(0,255,255,0.2)]\"\n        >\n          <div className=\"space-y-4\">\n            <div className=\"flex items-center justify-between\">\n              <h3 className=\"text-lg font-bold text-cyan-400 tracking-wider flex items-center gap-2\">\n                <BarChart3 className=\"w-5 h-5\" />\n                TIMELINE\n              </h3>\n              <div className=\"text-sm text-gray-400\">\n                Step <span className=\"text-cyan-400 font-mono font-bold\">{currentStep}</span> of <span className=\"text-purple-400 font-mono font-bold\">{steps.length}</span>\n              </div>\n            </div>\n\n            {steps.length > 0 && (\n              <div className=\"space-y-3\">\n                {/* Progress Bar */}\n                <div className=\"relative h-3 bg-gray-700/50 rounded-full overflow-hidden border border-gray-600/50\">\n                  <motion.div\n                    className=\"absolute inset-y-0 left-0 bg-gradient-to-r from-cyan-500 via-purple-500 to-pink-500 rounded-full shadow-[0_0_20px_rgba(0,255,255,0.6)]\"\n                    initial={{ width: 0 }}\n                    animate={{ \n                      width: `${(currentStep / steps.length) * 100}%`,\n                    }}\n                    transition={{ duration: 0.3, ease: \"easeOut\" }}\n                  />\n                  <motion.div\n                    className=\"absolute inset-0 bg-gradient-to-r from-transparent via-white/30 to-transparent\"\n                    animate={{\n                      x: ['-100%', '200%']\n                    }}\n                    transition={{\n                      duration: 2,\n                      repeat: Infinity,\n                      ease: \"linear\"\n                    }}\n                  />\n                </div>\n\n                {/* Timeline Scrubber */}\n                <div className=\"relative pt-2 pb-1\">\n                  <input\n                    type=\"range\"\n                    min={0}\n                    max={steps.length}\n                    value={currentStep}\n                    onChange={(e) => {\n                      const newStep = parseInt(e.target.value);\n                      setCurrentStep(newStep);\n                      if (newStep < steps.length) {\n                        setArray(steps[newStep].array);\n                      }\n                      setIsPlaying(false);\n                    }}\n                    disabled={steps.length === 0}\n                    className=\"w-full h-2 bg-transparent appearance-none cursor-pointer disabled:cursor-not-allowed\n                      [&::-webkit-slider-track]:h-2 [&::-webkit-slider-track]:bg-gray-700/50 [&::-webkit-slider-track]:rounded-full [&::-webkit-slider-track]:border [&::-webkit-slider-track]:border-gray-600/50\n                      [&::-webkit-slider-thumb]:appearance-none [&::-webkit-slider-thumb]:w-5 [&::-webkit-slider-thumb]:h-5 [&::-webkit-slider-thumb]:rounded-full [&::-webkit-slider-thumb]:bg-gradient-to-br [&::-webkit-slider-thumb]:from-cyan-400 [&::-webkit-slider-thumb]:to-purple-500 [&::-webkit-slider-thumb]:border-2 [&::-webkit-slider-thumb]:border-white [&::-webkit-slider-thumb]:shadow-[0_0_20px_rgba(0,255,255,0.8)] [&::-webkit-slider-thumb]:cursor-grab [&::-webkit-slider-thumb]:active:cursor-grabbing [&::-webkit-slider-thumb]:hover:scale-110 [&::-webkit-slider-thumb]:transition-transform\n                      [&::-moz-range-track]:h-2 [&::-moz-range-track]:bg-gray-700/50 [&::-moz-range-track]:rounded-full [&::-moz-range-track]:border [&::-moz-range-track]:border-gray-600/50\n                      [&::-moz-range-thumb]:w-5 [&::-moz-range-thumb]:h-5 [&::-moz-range-thumb]:rounded-full [&::-moz-range-thumb]:bg-gradient-to-br [&::-moz-range-thumb]:from-cyan-400 [&::-moz-range-thumb]:to-purple-500 [&::-moz-range-thumb]:border-2 [&::-moz-range-thumb]:border-white [&::-moz-range-thumb]:shadow-[0_0_20px_rgba(0,255,255,0.8)] [&::-moz-range-thumb]:cursor-grab [&::-moz-range-thumb]:active:cursor-grabbing [&::-moz-range-thumb]:hover:scale-110 [&::-moz-range-thumb]:transition-transform\"\n                  />\n                </div>\n\n                {/* Step Markers */}\n                <div className=\"flex justify-between items-center text-xs\">\n                  <motion.button\n                    whileHover={{ scale: 1.05 }}\n                    whileTap={{ scale: 0.95 }}\n                    onClick={() => {\n                      setCurrentStep(0);\n                      setArray(steps[0].array);\n                      setIsPlaying(false);\n                    }}\n                    disabled={currentStep === 0 || steps.length === 0}\n                    className=\"px-3 py-1.5 bg-gray-700/50 hover:bg-gray-600/50 disabled:bg-gray-800/30 disabled:text-gray-600 text-cyan-400 rounded-lg border border-cyan-500/30 hover:border-cyan-400/50 disabled:border-gray-700/30 transition-all duration-200 font-semibold disabled:cursor-not-allowed\"\n                  >\n                    START\n                  </motion.button>\n\n                  <div className=\"flex gap-2\">\n                    <motion.button\n                      whileHover={{ scale: 1.05 }}\n                      whileTap={{ scale: 0.95 }}\n                      onClick={() => {\n                        if (currentStep > 0) {\n                          const newStep = currentStep - 1;\n                          setCurrentStep(newStep);\n                          setArray(steps[newStep].array);\n                          setIsPlaying(false);\n                        }\n                      }}\n                      disabled={currentStep === 0 || steps.length === 0}\n                      className=\"px-3 py-1.5 bg-purple-700/30 hover:bg-purple-600/40 disabled:bg-gray-800/30 disabled:text-gray-600 text-purple-300 rounded-lg border border-purple-500/30 hover:border-purple-400/50 disabled:border-gray-700/30 transition-all duration-200 font-semibold disabled:cursor-not-allowed\"\n                    >\n                      \u2190 PREV\n                    </motion.button>\n\n                    <motion.button\n                      whileHover={{ scale: 1.05 }}\n                      whileTap={{ scale: 0.95 }}\n                      onClick={() => {\n                        if (currentStep < steps.length) {\n                          const newStep = currentStep + 1;\n                          setCurrentStep(newStep);\n                          if (newStep < steps.length) {\n                            setArray(steps[newStep].array);\n                          }\n                          setIsPlaying(false);\n                        }\n                      }}\n                      disabled={currentStep >= steps.length || steps.length === 0}\n                      className=\"px-3 py-1.5 bg-purple-700/30 hover:bg-purple-600/40 disabled:bg-gray-800/30 disabled:text-gray-600 text-purple-300 rounded-lg border border-purple-500/30 hover:border-purple-400/50 disabled:border-gray-700/30 transition-all duration-200 font-semibold disabled:cursor-not-allowed\"\n                    >\n                      NEXT \u2192\n                    </motion.button>\n                  </div>\n\n                  <motion.button\n                    whileHover={{ scale: 1.05 }}\n                    whileTap={{ scale: 0.95 }}\n                    onClick={() => {\n                      setCurrentStep(steps.length);\n                      setArray(steps[steps.length - 1].array);\n                      setIsPlaying(false);\n                    }}\n                    disabled={currentStep >= steps.length || steps.length === 0}\n                    className=\"px-3 py-1.5 bg-gray-700/50 hover:bg-gray-600/50 disabled:bg-gray-800/30 disabled:text-gray-600 text-cyan-400 rounded-lg border border-cyan-500/30 hover:border-cyan-400/50 disabled:border-gray-700/30 transition-all duration-200 font-semibold disabled:cursor-not-allowed\"\n                  >\n                    END\n                  </motion.button>\n                </div>\n\n                {/* Percentage Display */}\n                <div className=\"flex items-center justify-center gap-2 pt-2\">\n                  <div className=\"flex-1 h-px bg-gradient-to-r from-transparent via-cyan-500/50 to-transparent\" />\n                  <motion.div\n                    key={currentStep}\n                    initial={{ scale: 1.2, opacity: 0 }}\n                    animate={{ scale: 1, opacity: 1 }}\n                    className=\"px-4 py-1.5 bg-gradient-to-r from-cyan-500/20 to-purple-500/20 rounded-full border border-cyan-400/50 shadow-[0_0_15px_rgba(0,255,255,0.3)]\"\n                  >\n                    <span className=\"text-sm font-bold text-transparent bg-clip-text bg-gradient-to-r from-cyan-400 to-purple-400\">\n                      {steps.length > 0 ? Math.round((currentStep / steps.length) * 100) : 0}% Complete\n                    </span>\n                  </motion.div>\n                  <div className=\"flex-1 h-px bg-gradient-to-r from-transparent via-purple-500/50 to-transparent\" />\n                </div>\n              </div>\n            )}\n\n            {steps.length === 0 && (\n              <div className=\"text-center py-8 text-gray-500\">\n                <BarChart3 className=\"w-12 h-12 mx-auto mb-3 opacity-30\" />\n                <p className=\"text-sm\">Generate sorting steps to see timeline</p>\n              </div>\n            )}\n          </div>\n        </motion.div>\n      </div>\n    </div>\n  );\n}",
    "error": null,
    "elapsed_time": 109.40354442596436,
    "success": true
  }
}