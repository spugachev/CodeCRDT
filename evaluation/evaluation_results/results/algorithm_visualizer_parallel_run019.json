{
  "prompt_id": "algorithm_visualizer",
  "prompt_name": "Algorithm Visualizer",
  "mode": "parallel",
  "run_number": 19,
  "timestamp": "2025-10-14T04:23:22.158979",
  "response_time": 49.30675506591797,
  "total_tokens": null,
  "response_content": "import { useState, useCallback } from 'react';\n\nimport { Button } from '@/components/ui/button';\nimport { Slider } from '@/components/ui/slider';\nimport { Play, Pause, RotateCcw, Zap, BarChart3 } from 'lucide-react';\nimport { motion } from 'framer-motion';\n\ninterface ArrayElement {\n  value: number;\n  id: string;\n  isComparing?: boolean;\n  isSwapping?: boolean;\n  isSorted?: boolean;\n}\n\ninterface AlgorithmStep {\n  array: ArrayElement[];\n  comparingIndices: number[];\n  swappingIndices: number[];\n  sortedIndices: number[];\n}\n\ntype AlgorithmType = 'bubble' | 'quick' | 'merge' | 'insertion';\n\nconst NEON_COLORS = [\n  '#00ffff',\n  '#ff00ff', \n  '#00ff00',\n  '#ffff00',\n  '#ff0066',\n  '#00ffaa'\n];\n\nconst mockAlgorithms = [\n  { id: 'bubble', name: 'Bubble Sort', complexity: 'O(n\u00b2)' },\n  { id: 'quick', name: 'Quick Sort', complexity: 'O(n log n)' },\n  { id: 'merge', name: 'Merge Sort', complexity: 'O(n log n)' },\n  { id: 'insertion', name: 'Insertion Sort', complexity: 'O(n\u00b2)' }\n];\n\nexport default function AlgorithmVisualizer() {\n  const [array, setArray] = useState<ArrayElement[]>([]);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [speed, setSpeed] = useState([50]);\n  const [arraySize, setArraySize] = useState([20]);\n  const [selectedAlgorithm, setSelectedAlgorithm] = useState<AlgorithmType>('bubble');\n  const [currentStep, setCurrentStep] = useState(0);\n  const [steps, setSteps] = useState<AlgorithmStep[]>([]);\n  const [comparisons, setComparisons] = useState(0);\n  const [swaps, setSwaps] = useState(0);\n\n  const generateRandomArray = useCallback(() => {\n    const newArray: ArrayElement[] = Array.from({ length: arraySize[0] }, (_, index) => ({\n      value: Math.floor(Math.random() * 100) + 1,\n      id: `element-${Date.now()}-${index}`,\n      isComparing: false,\n      isSwapping: false,\n      isSorted: false\n    }));\n    \n    setArray(newArray);\n    setSteps([]);\n    setCurrentStep(0);\n    setComparisons(0);\n    setSwaps(0);\n    setIsPlaying(false);\n  }, [arraySize]);\n\n  const resetVisualization = useCallback(() => {\n    setIsPlaying(false);\n    setCurrentStep(0);\n    setSteps([]);\n    setComparisons(0);\n    setSwaps(0);\n    generateRandomArray();\n  }, [generateRandomArray]);\n\n  const handlePlayPause = useCallback(() => {\n  useEffect(() => {\n    if (!isPlaying || currentStep >= steps.length) {\n      if (currentStep >= steps.length && steps.length > 0) {\n        setIsPlaying(false);\n      }\n      return;\n    }\n\n    const delay = 1000 - (speed[0] * 9.5);\n    const timer = setTimeout(() => {\n      const step = steps[currentStep];\n      setArray(step.array);\n      setCurrentStep(prev => prev + 1);\n    }, delay);\n\n    return () => clearTimeout(timer);\n  }, [isPlaying, currentStep, steps, speed]);\n\nif (steps.length === 0) return;\n    \n    if (!isPlaying) {\n      setIsPlaying(true);\n    } else {\n      setIsPlaying(false);\n    }\n  }, [isPlaying, steps.length currentStep, steps, speed]);\n\n  const generateSteps = useCallback((algorithm: AlgorithmType) => {\n    const allSteps: AlgorithmStep[] = [];\n    let comparisonCount = 0;\n    let swapCount = 0;\n    const workingArray = [...array];\n\n    const recordStep = (comparingIndices: number[] = [], swappingIndices: number[] = [], sortedIndices: number[] = []) => {\n      allSteps.push({\n        array: workingArray.map((el, idx) => ({\n          ...el,\n          isComparing: comparingIndices.includes(idx),\n          isSwapping: swappingIndices.includes(idx),\n          isSorted: sortedIndices.includes(idx)\n        })),\n        comparingIndices,\n        swappingIndices,\n        sortedIndices\n      });\n    };\n\n    const swap = (i: number, j: number, sortedIndices: number[] = []) => {\n      [workingArray[i], workingArray[j]] = [workingArray[j], workingArray[i]];\n      swapCount++;\n      recordStep([], [i, j], sortedIndices);\n    };\n\n    if (algorithm === 'bubble') {\n      const sortedIndices: number[] = [];\n      for (let i = 0; i < workingArray.length; i++) {\n        for (let j = 0; j < workingArray.length - i - 1; j++) {\n          comparisonCount++;\n          recordStep([j, j + 1], [], sortedIndices);\n          if (workingArray[j].value > workingArray[j + 1].value) {\n            swap(j, j + 1, sortedIndices);\n          }\n        }\n        sortedIndices.push(workingArray.length - i - 1);\n      }\n      recordStep([], [], Array.from({ length: workingArray.length }, (_, i) => i));\n    } else if (algorithm === 'quick') {\n      const sortedIndices: number[] = [];\n      const quickSort = (low: number, high: number) => {\n        if (low < high) {\n          const pivotIndex = partition(low, high);\n          sortedIndices.push(pivotIndex);\n          quickSort(low, pivotIndex - 1);\n          quickSort(pivotIndex + 1, high);\n        } else if (low === high) {\n          sortedIndices.push(low);\n        }\n      };\n\n      const partition = (low: number, high: number): number => {\n        const pivot = workingArray[high].value;\n        let i = low - 1;\n        for (let j = low; j < high; j++) {\n          comparisonCount++;\n          recordStep([j, high], [], sortedIndices);\n          if (workingArray[j].value < pivot) {\n            i++;\n            if (i !== j) {\n              swap(i, j, sortedIndices);\n            }\n          }\n        }\n        swap(i + 1, high, sortedIndices);\n        return i + 1;\n      };\n\n      quickSort(0, workingArray.length - 1);\n      recordStep([], [], Array.from({ length: workingArray.length }, (_, i) => i));\n    } else if (algorithm === 'merge') {\n      const sortedIndices: number[] = [];\n      const mergeSort = (left: number, right: number) => {\n        if (left < right) {\n          const mid = Math.floor((left + right) / 2);\n          mergeSort(left, mid);\n          mergeSort(mid + 1, right);\n          merge(left, mid, right);\n        }\n      };\n\n      const merge = (left: number, mid: number, right: number) => {\n        const leftArr = workingArray.slice(left, mid + 1);\n        const rightArr = workingArray.slice(mid + 1, right + 1);\n        let i = 0, j = 0, k = left;\n\n        while (i < leftArr.length && j < rightArr.length) {\n          comparisonCount++;\n          recordStep([left + i, mid + 1 + j], [], sortedIndices);\n          if (leftArr[i].value <= rightArr[j].value) {\n            workingArray[k] = leftArr[i];\n            i++;\n          } else {\n            workingArray[k] = rightArr[j];\n            j++;\n          }\n          swapCount++;\n          recordStep([], [k], sortedIndices);\n          k++;\n        }\n\n        while (i < leftArr.length) {\n          workingArray[k] = leftArr[i];\n          swapCount++;\n          recordStep([], [k], sortedIndices);\n          i++;\n          k++;\n        }\n\n        while (j < rightArr.length) {\n          workingArray[k] = rightArr[j];\n          swapCount++;\n          recordStep([], [k], sortedIndices);\n          j++;\n          k++;\n        }\n      };\n\n      mergeSort(0, workingArray.length - 1);\n      recordStep([], [], Array.from({ length: workingArray.length }, (_, i) => i));\n    } else if (algorithm === 'insertion') {\n      const sortedIndices: number[] = [0];\n      for (let i = 1; i < workingArray.length; i++) {\n        const key = workingArray[i];\n        let j = i - 1;\n        recordStep([i], [], sortedIndices);\n        while (j >= 0 && workingArray[j].value > key.value) {\n          comparisonCount++;\n          recordStep([j, j + 1], [], sortedIndices);\n          workingArray[j + 1] = workingArray[j];\n          swapCount++;\n          recordStep([], [j + 1], sortedIndices);\n          j--;\n        }\n        if (j >= 0) comparisonCount++;\n        workingArray[j + 1] = key;\n        sortedIndices.push(i);\n      }\n      recordStep([], [], Array.from({ length: workingArray.length }, (_, i) => i));\n    }\n\n    setSteps(allSteps);\n    setComparisons(comparisonCount);\n    setSwaps(swapCount);\n    setCurrentStep(0);\n  }, [array]);\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-gray-900 via-purple-900 to-gray-900 p-8\">\n      <div className=\"max-w-7xl mx-auto space-y-8\">\n        <motion.div\n          initial={{ opacity: 0, y: -20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.8 }}\n          className=\"text-center space-y-6\"\n        >\n          <motion.h1\n            className=\"text-6xl font-bold bg-gradient-to-r from-cyan-400 via-purple-400 to-pink-400 bg-clip-text text-transparent\"\n            animate={{\n              textShadow: [\n                '0 0 20px rgba(0, 255, 255, 0.5)',\n                '0 0 40px rgba(255, 0, 255, 0.5)',\n                '0 0 20px rgba(0, 255, 255, 0.5)'\n              ]\n            }}\n            transition={{ duration: 2, repeat: Infinity }}\n          >\n            Algorithm Visualizer\n          </motion.h1>\n\n          <div className=\"flex justify-center gap-4 flex-wrap\">\n            {mockAlgorithms.map((algo) => (\n              <motion.div\n                key={algo.id}\n                whileHover={{ scale: 1.05 }}\n                whileTap={{ scale: 0.95 }}\n              >\n                <Button\n                  onClick={() => setSelectedAlgorithm(algo.id as AlgorithmType)}\n                  variant={selectedAlgorithm === algo.id ? 'default' : 'outline'}\n                  className={`relative overflow-hidden transition-all duration-300 ${\n                    selectedAlgorithm === algo.id\n                      ? 'bg-gradient-to-r from-cyan-500 to-purple-500 text-white border-0 shadow-lg shadow-cyan-500/50'\n                      : 'bg-gray-800/50 border-cyan-500/30 text-cyan-300 hover:bg-gray-700/50 hover:border-cyan-400'\n                  }`}\n                >\n                  <span className=\"relative z-10 flex flex-col items-center\">\n                    <span className=\"font-semibold\">{algo.name}</span>\n                    <span className=\"text-xs opacity-75\">{algo.complexity}</span>\n                  </span>\n                  {selectedAlgorithm === algo.id && (\n                    <motion.div\n                      layoutId=\"algorithmSelector\"\n                      className=\"absolute inset-0 bg-gradient-to-r from-cyan-500 to-purple-500\"\n                      transition={{ type: 'spring', bounce: 0.2, duration: 0.6 }}\n                    />\n                  )}\n                </Button>\n              </motion.div>\n            ))}\n          </div>\n        </motion.div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ delay: 0.1 }}\n            className=\"relative bg-gray-900/50 backdrop-blur-xl border border-cyan-500/30 rounded-xl p-6 overflow-hidden group hover:border-cyan-500/60 transition-all\"\n          >\n            <div className=\"absolute inset-0 bg-gradient-to-br from-cyan-500/10 to-transparent opacity-0 group-hover:opacity-100 transition-opacity\" />\n            <div className=\"relative z-10\">\n              <div className=\"flex items-center gap-3 mb-2\">\n                <div className=\"p-2 bg-cyan-500/20 rounded-lg\">\n                  <BarChart3 className=\"w-5 h-5 text-cyan-400\" />\n                </div>\n                <span className=\"text-cyan-400 text-sm font-medium uppercase tracking-wider\">Comparisons</span>\n              </div>\n              <motion.div\n                key={comparisons}\n                initial={{ scale: 1.2, opacity: 0 }}\n                animate={{ scale: 1, opacity: 1 }}\n                className=\"text-4xl font-bold text-white\"\n              >\n                {comparisons}\n              </motion.div>\n            </div>\n            <div className=\"absolute -bottom-2 -right-2 w-24 h-24 bg-cyan-500/20 rounded-full blur-2xl\" />\n          </motion.div>\n\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ delay: 0.2 }}\n            className=\"relative bg-gray-900/50 backdrop-blur-xl border border-purple-500/30 rounded-xl p-6 overflow-hidden group hover:border-purple-500/60 transition-all\"\n          >\n            <div className=\"absolute inset-0 bg-gradient-to-br from-purple-500/10 to-transparent opacity-0 group-hover:opacity-100 transition-opacity\" />\n            <div className=\"relative z-10\">\n              <div className=\"flex items-center gap-3 mb-2\">\n                <div className=\"p-2 bg-purple-500/20 rounded-lg\">\n                  <Zap className=\"w-5 h-5 text-purple-400\" />\n                </div>\n                <span className=\"text-purple-400 text-sm font-medium uppercase tracking-wider\">Swaps</span>\n              </div>\n              <motion.div\n                key={swaps}\n                initial={{ scale: 1.2, opacity: 0 }}\n                animate={{ scale: 1, opacity: 1 }}\n                className=\"text-4xl font-bold text-white\"\n              >\n                {swaps}\n              </motion.div>\n            </div>\n            <div className=\"absolute -bottom-2 -right-2 w-24 h-24 bg-purple-500/20 rounded-full blur-2xl\" />\n          </motion.div>\n\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ delay: 0.3 }}\n            className=\"relative bg-gray-900/50 backdrop-blur-xl border border-pink-500/30 rounded-xl p-6 overflow-hidden group hover:border-pink-500/60 transition-all\"\n          >\n            <div className=\"absolute inset-0 bg-gradient-to-br from-pink-500/10 to-transparent opacity-0 group-hover:opacity-100 transition-opacity\" />\n            <div className=\"relative z-10\">\n              <div className=\"flex items-center gap-3 mb-2\">\n                <div className=\"p-2 bg-pink-500/20 rounded-lg\">\n                  <BarChart3 className=\"w-5 h-5 text-pink-400\" />\n                </div>\n                <span className=\"text-pink-400 text-sm font-medium uppercase tracking-wider\">Algorithm</span>\n              </div>\n              <div className=\"text-2xl font-bold text-white\">\n                {mockAlgorithms.find(a => a.id === selectedAlgorithm)?.name || 'None'}\n              </div>\n            </div>\n            <div className=\"absolute -bottom-2 -right-2 w-24 h-24 bg-pink-500/20 rounded-full blur-2xl\" />\n          </motion.div>\n\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ delay: 0.4 }}\n            className=\"relative bg-gray-900/50 backdrop-blur-xl border border-green-500/30 rounded-xl p-6 overflow-hidden group hover:border-green-500/60 transition-all\"\n          >\n            <div className=\"absolute inset-0 bg-gradient-to-br from-green-500/10 to-transparent opacity-0 group-hover:opacity-100 transition-opacity\" />\n            <div className=\"relative z-10\">\n              <div className=\"flex items-center gap-3 mb-2\">\n                <div className=\"p-2 bg-green-500/20 rounded-lg\">\n                  <Zap className=\"w-5 h-5 text-green-400\" />\n                </div>\n                <span className=\"text-green-400 text-sm font-medium uppercase tracking-wider\">Complexity</span>\n              </div>\n              <div className=\"text-2xl font-bold text-white font-mono\">\n                {mockAlgorithms.find(a => a.id === selectedAlgorithm)?.complexity || 'N/A'}\n              </div>\n            </div>\n            <div className=\"absolute -bottom-2 -right-2 w-24 h-24 bg-green-500/20 rounded-full blur-2xl\" />\n          </motion.div>\n        </div>\n\n        <div className=\"relative\">\n          <div className=\"relative bg-black/40 backdrop-blur-xl rounded-2xl border border-purple-500/30 p-8 min-h-[500px] overflow-hidden\">\n            {/* Animated background grid */}\n            <div className=\"absolute inset-0 opacity-20\">\n              <div className=\"absolute inset-0\" style={{\n                backgroundImage: 'linear-gradient(rgba(139, 92, 246, 0.3) 1px, transparent 1px), linear-gradient(90deg, rgba(139, 92, 246, 0.3) 1px, transparent 1px)',\n                backgroundSize: '50px 50px'\n              }} />\n            </div>\n\n            {/* Visualization area */}\n            <div className=\"relative flex items-end justify-center gap-1 h-[400px] px-4\">\n              {array.length === 0 ? (\n                <motion.div\n                  initial={{ opacity: 0, scale: 0.8 }}\n                  animate={{ opacity: 1, scale: 1 }}\n                  className=\"absolute inset-0 flex items-center justify-center\"\n                >\n                  <div className=\"text-center space-y-4\">\n                    <BarChart3 className=\"w-20 h-20 mx-auto text-purple-400 animate-pulse\" />\n                    <p className=\"text-purple-300 text-lg font-semibold\">\n                      Generate an array to start visualizing\n                    </p>\n                  </div>\n                </motion.div>\n              ) : (\n                array.map((element, index) => {\n                  const height = (element.value / 100) * 100;\n                  const isComparing = element.isComparing;\n                  const isSwapping = element.isSwapping;\n                  const isSorted = element.isSorted;\n                  \n                  let barColor = NEON_COLORS[index % NEON_COLORS.length];\n                  let glowColor = barColor;\n                  \n                  if (isSorted) {\n                    barColor = '#00ff00';\n                    glowColor = '#00ff00';\n                  } else if (isSwapping) {\n                    barColor = '#ff0066';\n                    glowColor = '#ff0066';\n                  } else if (isComparing) {\n                    barColor = '#ffff00';\n                    glowColor = '#ffff00';\n                  }\n\n                  return (\n                    <motion.div\n                      key={element.id}\n                      className=\"relative flex-1 min-w-[4px] max-w-[60px]\"\n                      initial={{ height: 0, opacity: 0 }}\n                      animate={{ \n                        height: `${height}%`,\n                        opacity: 1,\n                        scale: isSwapping ? 1.1 : isComparing ? 1.05 : 1,\n                      }}\n                      transition={{\n                        height: { duration: 0.3, ease: \"easeOut\" },\n                        scale: { duration: 0.2 },\n                        opacity: { duration: 0.5 }\n                      }}\n                      style={{\n                        backgroundColor: barColor,\n                        boxShadow: `\n                          0 0 ${isSwapping ? '30px' : isComparing ? '20px' : '10px'} ${glowColor},\n                          0 0 ${isSwapping ? '60px' : isComparing ? '40px' : '20px'} ${glowColor}80,\n                          inset 0 0 ${isSwapping ? '20px' : '10px'} ${glowColor}40\n                        `,\n                        borderRadius: '4px 4px 0 0',\n                        position: 'relative',\n                        overflow: 'visible'\n                      }}\n                    >\n                      {/* Trail effect for swapping */}\n                      {isSwapping && (\n                        <>\n                          <motion.div\n                            className=\"absolute inset-0 rounded-t\"\n                            style={{ backgroundColor: barColor }}\n                            initial={{ opacity: 0.8, scale: 1 }}\n                            animate={{ \n                              opacity: 0,\n                              scale: 1.3,\n                              y: -20\n                            }}\n                            transition={{ \n                              duration: 0.6,\n                              repeat: Infinity,\n                              ease: \"easeOut\"\n                            }}\n                          />\n                          <motion.div\n                            className=\"absolute inset-0 rounded-t\"\n                            style={{ backgroundColor: barColor }}\n                            initial={{ opacity: 0.6, scale: 1 }}\n                            animate={{ \n                              opacity: 0,\n                              scale: 1.5,\n                              y: -40\n                            }}\n                            transition={{ \n                              duration: 0.8,\n                              repeat: Infinity,\n                              ease: \"easeOut\",\n                              delay: 0.1\n                            }}\n                          />\n                        </>\n                      )}\n\n                      {/* Pulse effect for comparing */}\n                      {isComparing && (\n                        <motion.div\n                          className=\"absolute inset-0 rounded-t\"\n                          style={{ \n                            backgroundColor: glowColor,\n                            opacity: 0.3\n                          }}\n                          animate={{ \n                            scale: [1, 1.2, 1],\n                            opacity: [0.3, 0.6, 0.3]\n                          }}\n                          transition={{ \n                            duration: 0.8,\n                            repeat: Infinity,\n                            ease: \"easeInOut\"\n                          }}\n                        />\n                      )}\n\n                      {/* Sparkle effect for sorted */}\n                      {isSorted && (\n                        <motion.div\n                          className=\"absolute -top-2 left-1/2 transform -translate-x-1/2\"\n                          initial={{ scale: 0, rotate: 0 }}\n                          animate={{ \n                            scale: [0, 1.5, 0],\n                            rotate: [0, 180, 360],\n                            opacity: [0, 1, 0]\n                          }}\n                          transition={{ \n                            duration: 1,\n                            ease: \"easeOut\"\n                          }}\n                        >\n                          <Zap className=\"w-4 h-4 text-green-400\" />\n                        </motion.div>\n                      )}\n\n                      {/* Value label for larger arrays */}\n                      {arraySize[0] <= 30 && (\n                        <motion.div\n                          className=\"absolute -bottom-6 left-1/2 transform -translate-x-1/2 text-xs font-mono text-purple-300\"\n                          initial={{ opacity: 0 }}\n                          animate={{ opacity: 0.7 }}\n                          transition={{ delay: 0.5 }}\n                        >\n                          {element.value}\n                        </motion.div>\n                      )}\n                    </motion.div>\n                  );\n                })\n              )}\n            </div>\n\n            {/* Progress indicator */}\n            {steps.length > 0 && (\n              <motion.div\n                className=\"mt-8 space-y-2\"\n                initial={{ opacity: 0, y: 20 }}\n                animate={{ opacity: 1, y: 0 }}\n              >\n                <div className=\"flex justify-between text-sm text-purple-300 font-mono\">\n                  <span>Progress</span>\n                  <span>{currentStep} / {steps.length}</span>\n                </div>\n                <div className=\"relative h-2 bg-gray-800 rounded-full overflow-hidden\">\n                  <motion.div\n                    className=\"absolute inset-y-0 left-0 bg-gradient-to-r from-purple-500 via-pink-500 to-cyan-500 rounded-full\"\n                    initial={{ width: 0 }}\n                    animate={{ \n                      width: `${(currentStep / steps.length) * 100}%`\n                    }}\n                    transition={{ duration: 0.3 }}\n                    style={{\n                      boxShadow: '0 0 20px rgba(168, 85, 247, 0.8)'\n                    }}\n                  />\n                </div>\n              </motion.div>\n            )}\n          </div>\n        </div>\n\n                <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.6, delay: 0.4 }}\n          className=\"bg-gray-900/50 backdrop-blur-xl border border-cyan-500/30 rounded-2xl p-6 shadow-2xl\"\n        >\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            {/* Playback Controls */}\n            <div className=\"space-y-4\">\n              <h3 className=\"text-cyan-400 font-semibold text-sm uppercase tracking-wider flex items-center gap-2\">\n                <Zap className=\"w-4 h-4\" />\n                Playback Controls\n              </h3>\n              <div className=\"flex gap-3\">\n                <Button\n                  onClick={handlePlayPause}\n                  disabled={steps.length === 0}\n                  className=\"flex-1 bg-gradient-to-r from-cyan-500 to-blue-500 hover:from-cyan-400 hover:to-blue-400 text-white font-semibold shadow-lg shadow-cyan-500/50 transition-all duration-300 hover:shadow-cyan-500/70 hover:scale-105 disabled:opacity-50 disabled:cursor-not-allowed disabled:hover:scale-100\"\n                >\n                  {isPlaying ? (\n                    <>\n                      <Pause className=\"w-4 h-4 mr-2\" />\n                      Pause\n                    </>\n                  ) : (\n                    <>\n                      <Play className=\"w-4 h-4 mr-2\" />\n                      Play\n                    </>\n                  )}\n                </Button>\n                <Button\n                  onClick={resetVisualization}\n                  className=\"flex-1 bg-gradient-to-r from-purple-500 to-pink-500 hover:from-purple-400 hover:to-pink-400 text-white font-semibold shadow-lg shadow-purple-500/50 transition-all duration-300 hover:shadow-purple-500/70 hover:scale-105\"\n                >\n                  <RotateCcw className=\"w-4 h-4 mr-2\" />\n                  Reset\n                </Button>\n              </div>\n            </div>\n\n            {/* Speed Control */}\n            <div className=\"space-y-4\">\n              <h3 className=\"text-cyan-400 font-semibold text-sm uppercase tracking-wider flex items-center gap-2\">\n                <Zap className=\"w-4 h-4\" />\n                Animation Speed\n              </h3>\n              <div className=\"space-y-2\">\n                <div className=\"flex justify-between text-xs text-gray-400\">\n                  <span>Slow</span>\n                  <span className=\"text-cyan-400 font-semibold\">{speed[0]}%</span>\n                  <span>Fast</span>\n                </div>\n                <Slider\n                  value={speed}\n                  onValueChange={setSpeed}\n                  min={10}\n                  max={100}\n                  step={10}\n                  className=\"cursor-pointer\"\n                />\n              </div>\n            </div>\n\n            {/* Array Size Control */}\n            <div className=\"space-y-4 md:col-span-2\">\n              <h3 className=\"text-cyan-400 font-semibold text-sm uppercase tracking-wider flex items-center gap-2\">\n                <BarChart3 className=\"w-4 h-4\" />\n                Array Size\n              </h3>\n              <div className=\"space-y-2\">\n                <div className=\"flex justify-between text-xs text-gray-400\">\n                  <span>Small (10)</span>\n                  <span className=\"text-cyan-400 font-semibold\">{arraySize[0]} elements</span>\n                  <span>Large (100)</span>\n                </div>\n                <Slider\n                  value={arraySize}\n                  onValueChange={setArraySize}\n                  min={10}\n                  max={100}\n                  step={5}\n                  disabled={isPlaying}\n                  className=\"cursor-pointer\"\n                />\n              </div>\n            </div>\n          </div>\n\n          {/* Progress Bar */}\n          {steps.length > 0 && (\n            <div className=\"mt-6 space-y-2\">\n              <div className=\"flex justify-between text-xs text-gray-400\">\n                <span>Progress</span>\n                <span className=\"text-cyan-400 font-semibold\">\n                  {currentStep} / {steps.length} steps\n                </span>\n              </div>\n              <div className=\"h-2 bg-gray-800 rounded-full overflow-hidden\">\n                <motion.div\n                  className=\"h-full bg-gradient-to-r from-cyan-500 via-blue-500 to-purple-500\"\n                  initial={{ width: 0 }}\n                  animate={{ width: `${(currentStep / steps.length) * 100}%` }}\n                  transition={{ duration: 0.3 }}\n                />\n              </div>\n            </div>\n          )}\n        </motion.div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n          {mockAlgorithms.map((algo) => (\n            <motion.div\n              key={algo.id}\n              whileHover={{ scale: 1.05, y: -5 }}\n              whileTap={{ scale: 0.95 }}\n              onClick={() => setSelectedAlgorithm(algo.id as AlgorithmType)}\n              className={`relative cursor-pointer rounded-xl p-6 backdrop-blur-sm transition-all duration-300 ${\n                selectedAlgorithm === algo.id\n                  ? 'bg-gradient-to-br from-cyan-500/30 to-purple-500/30 border-2 border-cyan-400 shadow-[0_0_30px_rgba(0,255,255,0.5)]'\n                  : 'bg-white/5 border border-white/10 hover:border-cyan-400/50 hover:shadow-[0_0_20px_rgba(0,255,255,0.3)]'\n              }`}\n            >\n              {selectedAlgorithm === algo.id && (\n                <motion.div\n                  layoutId=\"selectedGlow\"\n                  className=\"absolute inset-0 rounded-xl bg-gradient-to-br from-cyan-500/20 to-purple-500/20\"\n                  transition={{ type: 'spring', bounce: 0.2, duration: 0.6 }}\n                />\n              )}\n              <div className=\"relative z-10\">\n                <div className=\"flex items-center gap-3 mb-3\">\n                  <BarChart3 className={`w-6 h-6 ${\n                    selectedAlgorithm === algo.id ? 'text-cyan-400' : 'text-white/70'\n                  }`} />\n                  <h3 className={`font-bold text-lg ${\n                    selectedAlgorithm === algo.id ? 'text-cyan-300' : 'text-white/90'\n                  }`}>\n                    {algo.name}\n                  </h3>\n                </div>\n                <div className={`flex items-center gap-2 ${\n                  selectedAlgorithm === algo.id ? 'text-purple-300' : 'text-white/60'\n                }`}>\n                  <Zap className=\"w-4 h-4\" />\n                  <span className=\"text-sm font-mono\">{algo.complexity}</span>\n                </div>\n              </div>\n              {selectedAlgorithm === algo.id && (\n                <motion.div\n                  initial={{ scale: 0 }}\n                  animate={{ scale: 1 }}\n                  className=\"absolute top-3 right-3 w-3 h-3 rounded-full bg-cyan-400 shadow-[0_0_10px_rgba(0,255,255,0.8)]\"\n                />\n              )}\n            </motion.div>\n          ))}\n        </div>\n\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.6, delay: 0.5 }}\n          className=\"bg-gray-800/50 backdrop-blur-lg rounded-2xl p-6 border border-purple-500/30 shadow-2xl\"\n        >\n          <div className=\"flex items-center gap-2 mb-4\">\n            <BarChart3 className=\"w-5 h-5 text-cyan-400\" />\n            <h3 className=\"text-lg font-semibold text-white\">Legend</h3>\n          </div>\n          \n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n            <motion.div\n              whileHover={{ scale: 1.05 }}\n              className=\"flex items-center gap-3 p-3 bg-gray-900/50 rounded-lg border border-gray-700/50\"\n            >\n              <div className=\"w-4 h-8 bg-cyan-500 rounded shadow-lg shadow-cyan-500/50\" />\n              <div>\n                <div className=\"text-sm font-medium text-cyan-400\">Comparing</div>\n                <div className=\"text-xs text-gray-400\">Active comparison</div>\n              </div>\n            </motion.div>\n\n            <motion.div\n              whileHover={{ scale: 1.05 }}\n              className=\"flex items-center gap-3 p-3 bg-gray-900/50 rounded-lg border border-gray-700/50\"\n            >\n              <div className=\"w-4 h-8 bg-yellow-500 rounded shadow-lg shadow-yellow-500/50\" />\n              <div>\n                <div className=\"text-sm font-medium text-yellow-400\">Swapping</div>\n                <div className=\"text-xs text-gray-400\">Elements swapping</div>\n              </div>\n            </motion.div>\n\n            <motion.div\n              whileHover={{ scale: 1.05 }}\n              className=\"flex items-center gap-3 p-3 bg-gray-900/50 rounded-lg border border-gray-700/50\"\n            >\n              <div className=\"w-4 h-8 bg-green-500 rounded shadow-lg shadow-green-500/50\" />\n              <div>\n                <div className=\"text-sm font-medium text-green-400\">Sorted</div>\n                <div className=\"text-xs text-gray-400\">In final position</div>\n              </div>\n            </motion.div>\n\n            <motion.div\n              whileHover={{ scale: 1.05 }}\n              className=\"flex items-center gap-3 p-3 bg-gray-900/50 rounded-lg border border-gray-700/50\"\n            >\n              <div className=\"w-4 h-8 bg-purple-500 rounded shadow-lg shadow-purple-500/50\" />\n              <div>\n                <div className=\"text-sm font-medium text-purple-400\">Unsorted</div>\n                <div className=\"text-xs text-gray-400\">Awaiting sort</div>\n              </div>\n            </motion.div>\n          </div>\n        </motion.div>\n      </div>\n    </div>\n  );\n}",
  "error": null,
  "overall_score": 47,
  "code_quality_score": 12,
  "architecture_score": 14,
  "performance_score": 11,
  "accessibility_score": 10,
  "metadata": {
    "document_id": "eval_room_c025d04b7879",
    "prompt_category": "creative",
    "prompt_complexity": 9.0
  },
  "raw_response": {
    "document_id": "eval_room_c025d04b7879",
    "mode": "parallel",
    "prompt": "Build a captivating algorithm visualizer with neon colored bars, smooth height transitions, glowing comparison indicators, trail effects during swaps, and a futuristic dashboard design with animated controls",
    "content": "import { useState, useCallback } from 'react';\n\nimport { Button } from '@/components/ui/button';\nimport { Slider } from '@/components/ui/slider';\nimport { Play, Pause, RotateCcw, Zap, BarChart3 } from 'lucide-react';\nimport { motion } from 'framer-motion';\n\ninterface ArrayElement {\n  value: number;\n  id: string;\n  isComparing?: boolean;\n  isSwapping?: boolean;\n  isSorted?: boolean;\n}\n\ninterface AlgorithmStep {\n  array: ArrayElement[];\n  comparingIndices: number[];\n  swappingIndices: number[];\n  sortedIndices: number[];\n}\n\ntype AlgorithmType = 'bubble' | 'quick' | 'merge' | 'insertion';\n\nconst NEON_COLORS = [\n  '#00ffff',\n  '#ff00ff', \n  '#00ff00',\n  '#ffff00',\n  '#ff0066',\n  '#00ffaa'\n];\n\nconst mockAlgorithms = [\n  { id: 'bubble', name: 'Bubble Sort', complexity: 'O(n\u00b2)' },\n  { id: 'quick', name: 'Quick Sort', complexity: 'O(n log n)' },\n  { id: 'merge', name: 'Merge Sort', complexity: 'O(n log n)' },\n  { id: 'insertion', name: 'Insertion Sort', complexity: 'O(n\u00b2)' }\n];\n\nexport default function AlgorithmVisualizer() {\n  const [array, setArray] = useState<ArrayElement[]>([]);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [speed, setSpeed] = useState([50]);\n  const [arraySize, setArraySize] = useState([20]);\n  const [selectedAlgorithm, setSelectedAlgorithm] = useState<AlgorithmType>('bubble');\n  const [currentStep, setCurrentStep] = useState(0);\n  const [steps, setSteps] = useState<AlgorithmStep[]>([]);\n  const [comparisons, setComparisons] = useState(0);\n  const [swaps, setSwaps] = useState(0);\n\n  const generateRandomArray = useCallback(() => {\n    const newArray: ArrayElement[] = Array.from({ length: arraySize[0] }, (_, index) => ({\n      value: Math.floor(Math.random() * 100) + 1,\n      id: `element-${Date.now()}-${index}`,\n      isComparing: false,\n      isSwapping: false,\n      isSorted: false\n    }));\n    \n    setArray(newArray);\n    setSteps([]);\n    setCurrentStep(0);\n    setComparisons(0);\n    setSwaps(0);\n    setIsPlaying(false);\n  }, [arraySize]);\n\n  const resetVisualization = useCallback(() => {\n    setIsPlaying(false);\n    setCurrentStep(0);\n    setSteps([]);\n    setComparisons(0);\n    setSwaps(0);\n    generateRandomArray();\n  }, [generateRandomArray]);\n\n  const handlePlayPause = useCallback(() => {\n  useEffect(() => {\n    if (!isPlaying || currentStep >= steps.length) {\n      if (currentStep >= steps.length && steps.length > 0) {\n        setIsPlaying(false);\n      }\n      return;\n    }\n\n    const delay = 1000 - (speed[0] * 9.5);\n    const timer = setTimeout(() => {\n      const step = steps[currentStep];\n      setArray(step.array);\n      setCurrentStep(prev => prev + 1);\n    }, delay);\n\n    return () => clearTimeout(timer);\n  }, [isPlaying, currentStep, steps, speed]);\n\nif (steps.length === 0) return;\n    \n    if (!isPlaying) {\n      setIsPlaying(true);\n    } else {\n      setIsPlaying(false);\n    }\n  }, [isPlaying, steps.length currentStep, steps, speed]);\n\n  const generateSteps = useCallback((algorithm: AlgorithmType) => {\n    const allSteps: AlgorithmStep[] = [];\n    let comparisonCount = 0;\n    let swapCount = 0;\n    const workingArray = [...array];\n\n    const recordStep = (comparingIndices: number[] = [], swappingIndices: number[] = [], sortedIndices: number[] = []) => {\n      allSteps.push({\n        array: workingArray.map((el, idx) => ({\n          ...el,\n          isComparing: comparingIndices.includes(idx),\n          isSwapping: swappingIndices.includes(idx),\n          isSorted: sortedIndices.includes(idx)\n        })),\n        comparingIndices,\n        swappingIndices,\n        sortedIndices\n      });\n    };\n\n    const swap = (i: number, j: number, sortedIndices: number[] = []) => {\n      [workingArray[i], workingArray[j]] = [workingArray[j], workingArray[i]];\n      swapCount++;\n      recordStep([], [i, j], sortedIndices);\n    };\n\n    if (algorithm === 'bubble') {\n      const sortedIndices: number[] = [];\n      for (let i = 0; i < workingArray.length; i++) {\n        for (let j = 0; j < workingArray.length - i - 1; j++) {\n          comparisonCount++;\n          recordStep([j, j + 1], [], sortedIndices);\n          if (workingArray[j].value > workingArray[j + 1].value) {\n            swap(j, j + 1, sortedIndices);\n          }\n        }\n        sortedIndices.push(workingArray.length - i - 1);\n      }\n      recordStep([], [], Array.from({ length: workingArray.length }, (_, i) => i));\n    } else if (algorithm === 'quick') {\n      const sortedIndices: number[] = [];\n      const quickSort = (low: number, high: number) => {\n        if (low < high) {\n          const pivotIndex = partition(low, high);\n          sortedIndices.push(pivotIndex);\n          quickSort(low, pivotIndex - 1);\n          quickSort(pivotIndex + 1, high);\n        } else if (low === high) {\n          sortedIndices.push(low);\n        }\n      };\n\n      const partition = (low: number, high: number): number => {\n        const pivot = workingArray[high].value;\n        let i = low - 1;\n        for (let j = low; j < high; j++) {\n          comparisonCount++;\n          recordStep([j, high], [], sortedIndices);\n          if (workingArray[j].value < pivot) {\n            i++;\n            if (i !== j) {\n              swap(i, j, sortedIndices);\n            }\n          }\n        }\n        swap(i + 1, high, sortedIndices);\n        return i + 1;\n      };\n\n      quickSort(0, workingArray.length - 1);\n      recordStep([], [], Array.from({ length: workingArray.length }, (_, i) => i));\n    } else if (algorithm === 'merge') {\n      const sortedIndices: number[] = [];\n      const mergeSort = (left: number, right: number) => {\n        if (left < right) {\n          const mid = Math.floor((left + right) / 2);\n          mergeSort(left, mid);\n          mergeSort(mid + 1, right);\n          merge(left, mid, right);\n        }\n      };\n\n      const merge = (left: number, mid: number, right: number) => {\n        const leftArr = workingArray.slice(left, mid + 1);\n        const rightArr = workingArray.slice(mid + 1, right + 1);\n        let i = 0, j = 0, k = left;\n\n        while (i < leftArr.length && j < rightArr.length) {\n          comparisonCount++;\n          recordStep([left + i, mid + 1 + j], [], sortedIndices);\n          if (leftArr[i].value <= rightArr[j].value) {\n            workingArray[k] = leftArr[i];\n            i++;\n          } else {\n            workingArray[k] = rightArr[j];\n            j++;\n          }\n          swapCount++;\n          recordStep([], [k], sortedIndices);\n          k++;\n        }\n\n        while (i < leftArr.length) {\n          workingArray[k] = leftArr[i];\n          swapCount++;\n          recordStep([], [k], sortedIndices);\n          i++;\n          k++;\n        }\n\n        while (j < rightArr.length) {\n          workingArray[k] = rightArr[j];\n          swapCount++;\n          recordStep([], [k], sortedIndices);\n          j++;\n          k++;\n        }\n      };\n\n      mergeSort(0, workingArray.length - 1);\n      recordStep([], [], Array.from({ length: workingArray.length }, (_, i) => i));\n    } else if (algorithm === 'insertion') {\n      const sortedIndices: number[] = [0];\n      for (let i = 1; i < workingArray.length; i++) {\n        const key = workingArray[i];\n        let j = i - 1;\n        recordStep([i], [], sortedIndices);\n        while (j >= 0 && workingArray[j].value > key.value) {\n          comparisonCount++;\n          recordStep([j, j + 1], [], sortedIndices);\n          workingArray[j + 1] = workingArray[j];\n          swapCount++;\n          recordStep([], [j + 1], sortedIndices);\n          j--;\n        }\n        if (j >= 0) comparisonCount++;\n        workingArray[j + 1] = key;\n        sortedIndices.push(i);\n      }\n      recordStep([], [], Array.from({ length: workingArray.length }, (_, i) => i));\n    }\n\n    setSteps(allSteps);\n    setComparisons(comparisonCount);\n    setSwaps(swapCount);\n    setCurrentStep(0);\n  }, [array]);\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-gray-900 via-purple-900 to-gray-900 p-8\">\n      <div className=\"max-w-7xl mx-auto space-y-8\">\n        <motion.div\n          initial={{ opacity: 0, y: -20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.8 }}\n          className=\"text-center space-y-6\"\n        >\n          <motion.h1\n            className=\"text-6xl font-bold bg-gradient-to-r from-cyan-400 via-purple-400 to-pink-400 bg-clip-text text-transparent\"\n            animate={{\n              textShadow: [\n                '0 0 20px rgba(0, 255, 255, 0.5)',\n                '0 0 40px rgba(255, 0, 255, 0.5)',\n                '0 0 20px rgba(0, 255, 255, 0.5)'\n              ]\n            }}\n            transition={{ duration: 2, repeat: Infinity }}\n          >\n            Algorithm Visualizer\n          </motion.h1>\n\n          <div className=\"flex justify-center gap-4 flex-wrap\">\n            {mockAlgorithms.map((algo) => (\n              <motion.div\n                key={algo.id}\n                whileHover={{ scale: 1.05 }}\n                whileTap={{ scale: 0.95 }}\n              >\n                <Button\n                  onClick={() => setSelectedAlgorithm(algo.id as AlgorithmType)}\n                  variant={selectedAlgorithm === algo.id ? 'default' : 'outline'}\n                  className={`relative overflow-hidden transition-all duration-300 ${\n                    selectedAlgorithm === algo.id\n                      ? 'bg-gradient-to-r from-cyan-500 to-purple-500 text-white border-0 shadow-lg shadow-cyan-500/50'\n                      : 'bg-gray-800/50 border-cyan-500/30 text-cyan-300 hover:bg-gray-700/50 hover:border-cyan-400'\n                  }`}\n                >\n                  <span className=\"relative z-10 flex flex-col items-center\">\n                    <span className=\"font-semibold\">{algo.name}</span>\n                    <span className=\"text-xs opacity-75\">{algo.complexity}</span>\n                  </span>\n                  {selectedAlgorithm === algo.id && (\n                    <motion.div\n                      layoutId=\"algorithmSelector\"\n                      className=\"absolute inset-0 bg-gradient-to-r from-cyan-500 to-purple-500\"\n                      transition={{ type: 'spring', bounce: 0.2, duration: 0.6 }}\n                    />\n                  )}\n                </Button>\n              </motion.div>\n            ))}\n          </div>\n        </motion.div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ delay: 0.1 }}\n            className=\"relative bg-gray-900/50 backdrop-blur-xl border border-cyan-500/30 rounded-xl p-6 overflow-hidden group hover:border-cyan-500/60 transition-all\"\n          >\n            <div className=\"absolute inset-0 bg-gradient-to-br from-cyan-500/10 to-transparent opacity-0 group-hover:opacity-100 transition-opacity\" />\n            <div className=\"relative z-10\">\n              <div className=\"flex items-center gap-3 mb-2\">\n                <div className=\"p-2 bg-cyan-500/20 rounded-lg\">\n                  <BarChart3 className=\"w-5 h-5 text-cyan-400\" />\n                </div>\n                <span className=\"text-cyan-400 text-sm font-medium uppercase tracking-wider\">Comparisons</span>\n              </div>\n              <motion.div\n                key={comparisons}\n                initial={{ scale: 1.2, opacity: 0 }}\n                animate={{ scale: 1, opacity: 1 }}\n                className=\"text-4xl font-bold text-white\"\n              >\n                {comparisons}\n              </motion.div>\n            </div>\n            <div className=\"absolute -bottom-2 -right-2 w-24 h-24 bg-cyan-500/20 rounded-full blur-2xl\" />\n          </motion.div>\n\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ delay: 0.2 }}\n            className=\"relative bg-gray-900/50 backdrop-blur-xl border border-purple-500/30 rounded-xl p-6 overflow-hidden group hover:border-purple-500/60 transition-all\"\n          >\n            <div className=\"absolute inset-0 bg-gradient-to-br from-purple-500/10 to-transparent opacity-0 group-hover:opacity-100 transition-opacity\" />\n            <div className=\"relative z-10\">\n              <div className=\"flex items-center gap-3 mb-2\">\n                <div className=\"p-2 bg-purple-500/20 rounded-lg\">\n                  <Zap className=\"w-5 h-5 text-purple-400\" />\n                </div>\n                <span className=\"text-purple-400 text-sm font-medium uppercase tracking-wider\">Swaps</span>\n              </div>\n              <motion.div\n                key={swaps}\n                initial={{ scale: 1.2, opacity: 0 }}\n                animate={{ scale: 1, opacity: 1 }}\n                className=\"text-4xl font-bold text-white\"\n              >\n                {swaps}\n              </motion.div>\n            </div>\n            <div className=\"absolute -bottom-2 -right-2 w-24 h-24 bg-purple-500/20 rounded-full blur-2xl\" />\n          </motion.div>\n\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ delay: 0.3 }}\n            className=\"relative bg-gray-900/50 backdrop-blur-xl border border-pink-500/30 rounded-xl p-6 overflow-hidden group hover:border-pink-500/60 transition-all\"\n          >\n            <div className=\"absolute inset-0 bg-gradient-to-br from-pink-500/10 to-transparent opacity-0 group-hover:opacity-100 transition-opacity\" />\n            <div className=\"relative z-10\">\n              <div className=\"flex items-center gap-3 mb-2\">\n                <div className=\"p-2 bg-pink-500/20 rounded-lg\">\n                  <BarChart3 className=\"w-5 h-5 text-pink-400\" />\n                </div>\n                <span className=\"text-pink-400 text-sm font-medium uppercase tracking-wider\">Algorithm</span>\n              </div>\n              <div className=\"text-2xl font-bold text-white\">\n                {mockAlgorithms.find(a => a.id === selectedAlgorithm)?.name || 'None'}\n              </div>\n            </div>\n            <div className=\"absolute -bottom-2 -right-2 w-24 h-24 bg-pink-500/20 rounded-full blur-2xl\" />\n          </motion.div>\n\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ delay: 0.4 }}\n            className=\"relative bg-gray-900/50 backdrop-blur-xl border border-green-500/30 rounded-xl p-6 overflow-hidden group hover:border-green-500/60 transition-all\"\n          >\n            <div className=\"absolute inset-0 bg-gradient-to-br from-green-500/10 to-transparent opacity-0 group-hover:opacity-100 transition-opacity\" />\n            <div className=\"relative z-10\">\n              <div className=\"flex items-center gap-3 mb-2\">\n                <div className=\"p-2 bg-green-500/20 rounded-lg\">\n                  <Zap className=\"w-5 h-5 text-green-400\" />\n                </div>\n                <span className=\"text-green-400 text-sm font-medium uppercase tracking-wider\">Complexity</span>\n              </div>\n              <div className=\"text-2xl font-bold text-white font-mono\">\n                {mockAlgorithms.find(a => a.id === selectedAlgorithm)?.complexity || 'N/A'}\n              </div>\n            </div>\n            <div className=\"absolute -bottom-2 -right-2 w-24 h-24 bg-green-500/20 rounded-full blur-2xl\" />\n          </motion.div>\n        </div>\n\n        <div className=\"relative\">\n          <div className=\"relative bg-black/40 backdrop-blur-xl rounded-2xl border border-purple-500/30 p-8 min-h-[500px] overflow-hidden\">\n            {/* Animated background grid */}\n            <div className=\"absolute inset-0 opacity-20\">\n              <div className=\"absolute inset-0\" style={{\n                backgroundImage: 'linear-gradient(rgba(139, 92, 246, 0.3) 1px, transparent 1px), linear-gradient(90deg, rgba(139, 92, 246, 0.3) 1px, transparent 1px)',\n                backgroundSize: '50px 50px'\n              }} />\n            </div>\n\n            {/* Visualization area */}\n            <div className=\"relative flex items-end justify-center gap-1 h-[400px] px-4\">\n              {array.length === 0 ? (\n                <motion.div\n                  initial={{ opacity: 0, scale: 0.8 }}\n                  animate={{ opacity: 1, scale: 1 }}\n                  className=\"absolute inset-0 flex items-center justify-center\"\n                >\n                  <div className=\"text-center space-y-4\">\n                    <BarChart3 className=\"w-20 h-20 mx-auto text-purple-400 animate-pulse\" />\n                    <p className=\"text-purple-300 text-lg font-semibold\">\n                      Generate an array to start visualizing\n                    </p>\n                  </div>\n                </motion.div>\n              ) : (\n                array.map((element, index) => {\n                  const height = (element.value / 100) * 100;\n                  const isComparing = element.isComparing;\n                  const isSwapping = element.isSwapping;\n                  const isSorted = element.isSorted;\n                  \n                  let barColor = NEON_COLORS[index % NEON_COLORS.length];\n                  let glowColor = barColor;\n                  \n                  if (isSorted) {\n                    barColor = '#00ff00';\n                    glowColor = '#00ff00';\n                  } else if (isSwapping) {\n                    barColor = '#ff0066';\n                    glowColor = '#ff0066';\n                  } else if (isComparing) {\n                    barColor = '#ffff00';\n                    glowColor = '#ffff00';\n                  }\n\n                  return (\n                    <motion.div\n                      key={element.id}\n                      className=\"relative flex-1 min-w-[4px] max-w-[60px]\"\n                      initial={{ height: 0, opacity: 0 }}\n                      animate={{ \n                        height: `${height}%`,\n                        opacity: 1,\n                        scale: isSwapping ? 1.1 : isComparing ? 1.05 : 1,\n                      }}\n                      transition={{\n                        height: { duration: 0.3, ease: \"easeOut\" },\n                        scale: { duration: 0.2 },\n                        opacity: { duration: 0.5 }\n                      }}\n                      style={{\n                        backgroundColor: barColor,\n                        boxShadow: `\n                          0 0 ${isSwapping ? '30px' : isComparing ? '20px' : '10px'} ${glowColor},\n                          0 0 ${isSwapping ? '60px' : isComparing ? '40px' : '20px'} ${glowColor}80,\n                          inset 0 0 ${isSwapping ? '20px' : '10px'} ${glowColor}40\n                        `,\n                        borderRadius: '4px 4px 0 0',\n                        position: 'relative',\n                        overflow: 'visible'\n                      }}\n                    >\n                      {/* Trail effect for swapping */}\n                      {isSwapping && (\n                        <>\n                          <motion.div\n                            className=\"absolute inset-0 rounded-t\"\n                            style={{ backgroundColor: barColor }}\n                            initial={{ opacity: 0.8, scale: 1 }}\n                            animate={{ \n                              opacity: 0,\n                              scale: 1.3,\n                              y: -20\n                            }}\n                            transition={{ \n                              duration: 0.6,\n                              repeat: Infinity,\n                              ease: \"easeOut\"\n                            }}\n                          />\n                          <motion.div\n                            className=\"absolute inset-0 rounded-t\"\n                            style={{ backgroundColor: barColor }}\n                            initial={{ opacity: 0.6, scale: 1 }}\n                            animate={{ \n                              opacity: 0,\n                              scale: 1.5,\n                              y: -40\n                            }}\n                            transition={{ \n                              duration: 0.8,\n                              repeat: Infinity,\n                              ease: \"easeOut\",\n                              delay: 0.1\n                            }}\n                          />\n                        </>\n                      )}\n\n                      {/* Pulse effect for comparing */}\n                      {isComparing && (\n                        <motion.div\n                          className=\"absolute inset-0 rounded-t\"\n                          style={{ \n                            backgroundColor: glowColor,\n                            opacity: 0.3\n                          }}\n                          animate={{ \n                            scale: [1, 1.2, 1],\n                            opacity: [0.3, 0.6, 0.3]\n                          }}\n                          transition={{ \n                            duration: 0.8,\n                            repeat: Infinity,\n                            ease: \"easeInOut\"\n                          }}\n                        />\n                      )}\n\n                      {/* Sparkle effect for sorted */}\n                      {isSorted && (\n                        <motion.div\n                          className=\"absolute -top-2 left-1/2 transform -translate-x-1/2\"\n                          initial={{ scale: 0, rotate: 0 }}\n                          animate={{ \n                            scale: [0, 1.5, 0],\n                            rotate: [0, 180, 360],\n                            opacity: [0, 1, 0]\n                          }}\n                          transition={{ \n                            duration: 1,\n                            ease: \"easeOut\"\n                          }}\n                        >\n                          <Zap className=\"w-4 h-4 text-green-400\" />\n                        </motion.div>\n                      )}\n\n                      {/* Value label for larger arrays */}\n                      {arraySize[0] <= 30 && (\n                        <motion.div\n                          className=\"absolute -bottom-6 left-1/2 transform -translate-x-1/2 text-xs font-mono text-purple-300\"\n                          initial={{ opacity: 0 }}\n                          animate={{ opacity: 0.7 }}\n                          transition={{ delay: 0.5 }}\n                        >\n                          {element.value}\n                        </motion.div>\n                      )}\n                    </motion.div>\n                  );\n                })\n              )}\n            </div>\n\n            {/* Progress indicator */}\n            {steps.length > 0 && (\n              <motion.div\n                className=\"mt-8 space-y-2\"\n                initial={{ opacity: 0, y: 20 }}\n                animate={{ opacity: 1, y: 0 }}\n              >\n                <div className=\"flex justify-between text-sm text-purple-300 font-mono\">\n                  <span>Progress</span>\n                  <span>{currentStep} / {steps.length}</span>\n                </div>\n                <div className=\"relative h-2 bg-gray-800 rounded-full overflow-hidden\">\n                  <motion.div\n                    className=\"absolute inset-y-0 left-0 bg-gradient-to-r from-purple-500 via-pink-500 to-cyan-500 rounded-full\"\n                    initial={{ width: 0 }}\n                    animate={{ \n                      width: `${(currentStep / steps.length) * 100}%`\n                    }}\n                    transition={{ duration: 0.3 }}\n                    style={{\n                      boxShadow: '0 0 20px rgba(168, 85, 247, 0.8)'\n                    }}\n                  />\n                </div>\n              </motion.div>\n            )}\n          </div>\n        </div>\n\n                <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.6, delay: 0.4 }}\n          className=\"bg-gray-900/50 backdrop-blur-xl border border-cyan-500/30 rounded-2xl p-6 shadow-2xl\"\n        >\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            {/* Playback Controls */}\n            <div className=\"space-y-4\">\n              <h3 className=\"text-cyan-400 font-semibold text-sm uppercase tracking-wider flex items-center gap-2\">\n                <Zap className=\"w-4 h-4\" />\n                Playback Controls\n              </h3>\n              <div className=\"flex gap-3\">\n                <Button\n                  onClick={handlePlayPause}\n                  disabled={steps.length === 0}\n                  className=\"flex-1 bg-gradient-to-r from-cyan-500 to-blue-500 hover:from-cyan-400 hover:to-blue-400 text-white font-semibold shadow-lg shadow-cyan-500/50 transition-all duration-300 hover:shadow-cyan-500/70 hover:scale-105 disabled:opacity-50 disabled:cursor-not-allowed disabled:hover:scale-100\"\n                >\n                  {isPlaying ? (\n                    <>\n                      <Pause className=\"w-4 h-4 mr-2\" />\n                      Pause\n                    </>\n                  ) : (\n                    <>\n                      <Play className=\"w-4 h-4 mr-2\" />\n                      Play\n                    </>\n                  )}\n                </Button>\n                <Button\n                  onClick={resetVisualization}\n                  className=\"flex-1 bg-gradient-to-r from-purple-500 to-pink-500 hover:from-purple-400 hover:to-pink-400 text-white font-semibold shadow-lg shadow-purple-500/50 transition-all duration-300 hover:shadow-purple-500/70 hover:scale-105\"\n                >\n                  <RotateCcw className=\"w-4 h-4 mr-2\" />\n                  Reset\n                </Button>\n              </div>\n            </div>\n\n            {/* Speed Control */}\n            <div className=\"space-y-4\">\n              <h3 className=\"text-cyan-400 font-semibold text-sm uppercase tracking-wider flex items-center gap-2\">\n                <Zap className=\"w-4 h-4\" />\n                Animation Speed\n              </h3>\n              <div className=\"space-y-2\">\n                <div className=\"flex justify-between text-xs text-gray-400\">\n                  <span>Slow</span>\n                  <span className=\"text-cyan-400 font-semibold\">{speed[0]}%</span>\n                  <span>Fast</span>\n                </div>\n                <Slider\n                  value={speed}\n                  onValueChange={setSpeed}\n                  min={10}\n                  max={100}\n                  step={10}\n                  className=\"cursor-pointer\"\n                />\n              </div>\n            </div>\n\n            {/* Array Size Control */}\n            <div className=\"space-y-4 md:col-span-2\">\n              <h3 className=\"text-cyan-400 font-semibold text-sm uppercase tracking-wider flex items-center gap-2\">\n                <BarChart3 className=\"w-4 h-4\" />\n                Array Size\n              </h3>\n              <div className=\"space-y-2\">\n                <div className=\"flex justify-between text-xs text-gray-400\">\n                  <span>Small (10)</span>\n                  <span className=\"text-cyan-400 font-semibold\">{arraySize[0]} elements</span>\n                  <span>Large (100)</span>\n                </div>\n                <Slider\n                  value={arraySize}\n                  onValueChange={setArraySize}\n                  min={10}\n                  max={100}\n                  step={5}\n                  disabled={isPlaying}\n                  className=\"cursor-pointer\"\n                />\n              </div>\n            </div>\n          </div>\n\n          {/* Progress Bar */}\n          {steps.length > 0 && (\n            <div className=\"mt-6 space-y-2\">\n              <div className=\"flex justify-between text-xs text-gray-400\">\n                <span>Progress</span>\n                <span className=\"text-cyan-400 font-semibold\">\n                  {currentStep} / {steps.length} steps\n                </span>\n              </div>\n              <div className=\"h-2 bg-gray-800 rounded-full overflow-hidden\">\n                <motion.div\n                  className=\"h-full bg-gradient-to-r from-cyan-500 via-blue-500 to-purple-500\"\n                  initial={{ width: 0 }}\n                  animate={{ width: `${(currentStep / steps.length) * 100}%` }}\n                  transition={{ duration: 0.3 }}\n                />\n              </div>\n            </div>\n          )}\n        </motion.div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n          {mockAlgorithms.map((algo) => (\n            <motion.div\n              key={algo.id}\n              whileHover={{ scale: 1.05, y: -5 }}\n              whileTap={{ scale: 0.95 }}\n              onClick={() => setSelectedAlgorithm(algo.id as AlgorithmType)}\n              className={`relative cursor-pointer rounded-xl p-6 backdrop-blur-sm transition-all duration-300 ${\n                selectedAlgorithm === algo.id\n                  ? 'bg-gradient-to-br from-cyan-500/30 to-purple-500/30 border-2 border-cyan-400 shadow-[0_0_30px_rgba(0,255,255,0.5)]'\n                  : 'bg-white/5 border border-white/10 hover:border-cyan-400/50 hover:shadow-[0_0_20px_rgba(0,255,255,0.3)]'\n              }`}\n            >\n              {selectedAlgorithm === algo.id && (\n                <motion.div\n                  layoutId=\"selectedGlow\"\n                  className=\"absolute inset-0 rounded-xl bg-gradient-to-br from-cyan-500/20 to-purple-500/20\"\n                  transition={{ type: 'spring', bounce: 0.2, duration: 0.6 }}\n                />\n              )}\n              <div className=\"relative z-10\">\n                <div className=\"flex items-center gap-3 mb-3\">\n                  <BarChart3 className={`w-6 h-6 ${\n                    selectedAlgorithm === algo.id ? 'text-cyan-400' : 'text-white/70'\n                  }`} />\n                  <h3 className={`font-bold text-lg ${\n                    selectedAlgorithm === algo.id ? 'text-cyan-300' : 'text-white/90'\n                  }`}>\n                    {algo.name}\n                  </h3>\n                </div>\n                <div className={`flex items-center gap-2 ${\n                  selectedAlgorithm === algo.id ? 'text-purple-300' : 'text-white/60'\n                }`}>\n                  <Zap className=\"w-4 h-4\" />\n                  <span className=\"text-sm font-mono\">{algo.complexity}</span>\n                </div>\n              </div>\n              {selectedAlgorithm === algo.id && (\n                <motion.div\n                  initial={{ scale: 0 }}\n                  animate={{ scale: 1 }}\n                  className=\"absolute top-3 right-3 w-3 h-3 rounded-full bg-cyan-400 shadow-[0_0_10px_rgba(0,255,255,0.8)]\"\n                />\n              )}\n            </motion.div>\n          ))}\n        </div>\n\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.6, delay: 0.5 }}\n          className=\"bg-gray-800/50 backdrop-blur-lg rounded-2xl p-6 border border-purple-500/30 shadow-2xl\"\n        >\n          <div className=\"flex items-center gap-2 mb-4\">\n            <BarChart3 className=\"w-5 h-5 text-cyan-400\" />\n            <h3 className=\"text-lg font-semibold text-white\">Legend</h3>\n          </div>\n          \n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n            <motion.div\n              whileHover={{ scale: 1.05 }}\n              className=\"flex items-center gap-3 p-3 bg-gray-900/50 rounded-lg border border-gray-700/50\"\n            >\n              <div className=\"w-4 h-8 bg-cyan-500 rounded shadow-lg shadow-cyan-500/50\" />\n              <div>\n                <div className=\"text-sm font-medium text-cyan-400\">Comparing</div>\n                <div className=\"text-xs text-gray-400\">Active comparison</div>\n              </div>\n            </motion.div>\n\n            <motion.div\n              whileHover={{ scale: 1.05 }}\n              className=\"flex items-center gap-3 p-3 bg-gray-900/50 rounded-lg border border-gray-700/50\"\n            >\n              <div className=\"w-4 h-8 bg-yellow-500 rounded shadow-lg shadow-yellow-500/50\" />\n              <div>\n                <div className=\"text-sm font-medium text-yellow-400\">Swapping</div>\n                <div className=\"text-xs text-gray-400\">Elements swapping</div>\n              </div>\n            </motion.div>\n\n            <motion.div\n              whileHover={{ scale: 1.05 }}\n              className=\"flex items-center gap-3 p-3 bg-gray-900/50 rounded-lg border border-gray-700/50\"\n            >\n              <div className=\"w-4 h-8 bg-green-500 rounded shadow-lg shadow-green-500/50\" />\n              <div>\n                <div className=\"text-sm font-medium text-green-400\">Sorted</div>\n                <div className=\"text-xs text-gray-400\">In final position</div>\n              </div>\n            </motion.div>\n\n            <motion.div\n              whileHover={{ scale: 1.05 }}\n              className=\"flex items-center gap-3 p-3 bg-gray-900/50 rounded-lg border border-gray-700/50\"\n            >\n              <div className=\"w-4 h-8 bg-purple-500 rounded shadow-lg shadow-purple-500/50\" />\n              <div>\n                <div className=\"text-sm font-medium text-purple-400\">Unsorted</div>\n                <div className=\"text-xs text-gray-400\">Awaiting sort</div>\n              </div>\n            </motion.div>\n          </div>\n        </motion.div>\n      </div>\n    </div>\n  );\n}",
    "error": null,
    "elapsed_time": 49.30675506591797,
    "success": true
  }
}