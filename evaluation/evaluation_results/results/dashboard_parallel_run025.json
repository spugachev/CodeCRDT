{
  "prompt_id": "dashboard",
  "prompt_name": "Analytics Dashboard",
  "mode": "parallel",
  "run_number": 25,
  "timestamp": "2025-10-14T10:46:05.097297",
  "response_time": 84.36132597923279,
  "total_tokens": null,
  "response_content": "import { useState, useCallback } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Moon, Sun, RefreshCw } from 'lucide-react';\nimport { TrendingUp, TrendingDown, ShoppingCart, UserPlus, DollarSign, Package, AlertCircle, CheckCircle } from 'lucide-react';\nimport { ArrowUpDown, ArrowUp, ArrowDown } from 'lucide-react';\nimport { Badge } from '@/components/ui/badge';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\nimport { PieChart, Pie, Cell, ResponsiveContainer, Legend, Tooltip } from 'recharts';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\nimport { motion } from 'framer-motion';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';\nimport { TrendingUp, TrendingDown, Activity, Zap, BarChart3DollarSign, Users, ShoppingCart, Target } from 'lucide-react';\nimport { motion } from 'framer-motion';\n\ninterface MetricData {\n  id: string;\n  label: string;\n  value: number;\n  change: number;\n  trend: 'up' | 'down';\n}\n\ninterface ChartDataPoint {\n  date: string;\n  revenue: number;\n  users: number;\n  orders: number;\n}\n\ninterface TableRow {\n  id: string;\n  product: string;\n  sales: number;\n  revenue: number;\n  status: 'active' | 'pending' | 'inactive';\n}\ninterface PieChartData {\n  name: string;\n  value: number;\n  color: string;\n}\n\nconst mockMetrics: MetricData[] = [\n  { id: '1', label: 'Total Revenue', value: 45231, change: 12.5, trend: 'up' },\n  { id: '2', label: 'Active Users', value: 2350, change: 8.2, trend: 'up' },\n  { id: '3', label: 'Total Orders', value: 1543, change: -3.1, trend: 'down' },\n  { id: '4', label: 'Conversion Rate', value: 3.24, change: 5.7, trend: 'up' }\n];\n\nconst mockChartData: ChartDataPoint[] = [\n  { date: '2024-01-01', revenue: 12000, users: 450, orders: 230 },\n  { date: '2024-01-02', revenue: 15000, users: 520, orders: 280 },\n  { date: '2024-01-03', revenue: 13500, users: 490, orders: 250 },\n  { date: '2024-01-04', revenue: 18000, users: 610, orders: 320 },\n  { date: '2024-01-05', revenue: 16500, users: 580, orders: 295 },\n  { date: '2024-01-06', revenue: 20000, users: 680, orders: 350 },\n  { date: '2024-01-07', revenue: 22000, users: 720, orders: 380 }\n];\n\nconst mockTableData: TableRow[] = [\n  { id: '1', product: 'Premium Plan', sales: 234, revenue: 23400, status: 'active' },\n  { id: '2', product: 'Basic Plan', sales: 567, revenue: 11340, status: 'active' },\n  { id: '3', product: 'Enterprise Plan', sales: 89, revenue: 17800, status: 'active' },\n  { id: '4', product: 'Starter Plan', sales: 432, revenue: 4320, status: 'pending' },\n  { id: '5', product: 'Pro Plan', sales: 156, revenue: 15600, status: 'active' }\n];\ninterface QuickStat {\n  id: string;\n  label: string;\n  value: number;\n  target: number;\n  icon: string;\n  color: string;\n}\n\nconst mockQuickStats: QuickStat[] = [\n  { id: '1', label: 'Daily Goal', value: 18500, target: 25000, icon: 'target', color: 'blue' },\n  { id: '2', label: 'Engagement', value: 78, target: 100, icon: 'activity', color: 'green' },\n  { id: '3', label: 'Performance', value: 92, target: 100, icon: 'zap', color: 'yellow' },\n  { id: '4', label: 'Growth', value: 65, target: 100, icon: 'chart', color: 'purple' }\n];\ninterface ActivityItem {\n  id: string;\n  type: 'sale' | 'user' | 'revenue' | 'order' | 'alert' | 'success';\n  message: string;\n  timestamp: string;\n  icon: 'cart' | 'user' | 'dollar' | 'package' | 'alert' | 'check';\n}\n\nconst mockActivityData: ActivityItem[] = [\n  { id: '1', type: 'sale', message: 'New sale: Premium Plan purchased', timestamp: '2 minutes ago', icon: 'cart' },\n  { id: '2', type: 'user', message: 'New user registered: john@example.com', timestamp: '5 minutes ago', icon: 'user' },\n  { id: '3', type: 'revenue', message: 'Revenue milestone: $50,000 reached', timestamp: '12 minutes ago', icon: 'dollar' },\n  { id: '4', type: 'order', message: 'Order #1234 shipped successfully', timestamp: '18 minutes ago', icon: 'package' },\n  { id: '5', type: 'success', message: 'System backup completed', timestamp: '25 minutes ago', icon: 'check' },\n  { id: '6', type: 'sale', message: 'New sale: Enterprise Plan purchased', timestamp: '32 minutes ago', icon: 'cart' },\n  { id: '7', type: 'user', message: 'New user registered: sarah@example.com', timestamp: '45 minutes ago', icon: 'user' },\n  { id: '8', type: 'alert', message: 'Low stock alert: Starter Plan', timestamp: '1 hour ago', icon: 'alert' },\n  { id: '9', type: 'order', message: 'Order #1233 delivered', timestamp: '1 hour ago', icon: 'package' },\n  { id: '10', type: 'revenue', message: 'Daily revenue target achieved', timestamp: '2 hours ago', icon: 'dollar' }\n];\nconst mockPieData: PieChartData[] = [\n  { name: 'Premium Plan', value: 23400, color: '#3b82f6' },\n  { name: 'Enterprise Plan', value: 17800, color: '#8b5cf6' },\n  { name: 'Pro Plan', value: 15600, color: '#06b6d4' },\n  { name: 'Basic Plan', value: 11340, color: '#10b981' },\n  { name: 'Starter Plan', value: 4320, color: '#f59e0b' }\n];\n\nconst UserAreaChart = ({ data, isDarkMode }: { data: ChartDataPoint[], isDarkMode: boolean }) => {\n  const maxUsers = Math.max(...data.map(d => d.users));\n  const minUsers = Math.min(...data.map(d => d.users));\n  const range = maxUsers - minUsers;\n  const padding = range * 0.2;\n  const chartMax = maxUsers + padding;\n  const chartMin = Math.max(0, minUsers - padding);\n  const chartRange = chartMax - chartMin;\n\n  const width = 100;\n  const height = 100;\n\n  const points = data.map((point, index) => {\n    const x = (index / (data.length - 1)) * width;\n    const y = height - ((point.users - chartMin) / chartRange) * height;\n    return { x, y, ...point };\n  });\n\n  const pathD = points.reduce((path, point, index) => {\n    if (index === 0) return `M ${point.x} ${point.y}`;\n    return `${path} L ${point.x} ${point.y}`;\n  }, '');\n\n  const areaD = `${pathD} L ${width} ${height} L 0 ${height} Z`;\n\n  const [hoveredIndex, setHoveredIndex] = useState<number | null>(null);\n\n  return (\n    <div className=\"relative w-full h-64\">\n      <svg\n        viewBox={`0 0 ${width} ${height}`}\n        className=\"w-full h-full\"\n        preserveAspectRatio=\"none\"\n      >\n        <defs>\n          <linearGradient id=\"userGradient\" x1=\"0%\" y1=\"0%\" x2=\"0%\" y2=\"100%\">\n            <stop offset=\"0%\" stopColor=\"#3b82f6\" stopOpacity=\"0.6\" />\n            <stop offset=\"100%\" stopColor=\"#3b82f6\" stopOpacity=\"0.05\" />\n          </linearGradient>\n        </defs>\n\n        <motion.path\n          d={areaD}\n          fill=\"url(#userGradient)\"\n          initial={{ opacity: 0 }}\n          animate={{ opacity: 1 }}\n          transition={{ duration: 0.8, ease: \"easeOut\" }}\n        />\n\n        <motion.path\n          d={pathD}\n          fill=\"none\"\n          stroke=\"#3b82f6\"\n          strokeWidth=\"0.5\"\n          initial={{ pathLength: 0 }}\n          animate={{ pathLength: 1 }}\n          transition={{ duration: 1.2, ease: \"easeInOut\" }}\n        />\n\n        {points.map((point, index) => (\n          <motion.circle\n            key={index}\n            cx={point.x}\n            cy={point.y}\n            r={hoveredIndex === index ? \"1.5\" : \"1\"}\n            fill=\"#3b82f6\"\n            stroke={isDarkMode ? \"#1f2937\" : \"#ffffff\"}\n            strokeWidth=\"0.5\"\n            initial={{ scale: 0 }}\n            animate={{ scale: 1 }}\n            transition={{ duration: 0.3, delay: index * 0.1 }}\n            onMouseEnter={() => setHoveredIndex(index)}\n            onMouseLeave={() => setHoveredIndex(null)}\n            className=\"cursor-pointer\"\n          />\n        ))}\n      </svg>\n\n      <div className=\"absolute inset-0 flex items-end justify-between px-2 pb-2 pointer-events-none\">\n        {points.map((point, index) => (\n          <div key={index} className=\"flex flex-col items-center\">\n            <span className={`text-xs ${isDarkMode ? 'text-gray-500' : 'text-gray-400'}`}>\n              {new Date(point.date).getDate()}\n            </span>\n          </div>\n        ))}\n      </div>\n\n      {hoveredIndex !== null && (\n        <motion.div\n          initial={{ opacity: 0, y: 10 }}\n          animate={{ opacity: 1, y: 0 }}\n          className={`absolute top-4 left-1/2 transform -translate-x-1/2 px-3 py-2 rounded-lg shadow-lg ${\n            isDarkMode ? 'bg-gray-700 text-white' : 'bg-white text-gray-900'\n          }`}\n        >\n          <div className=\"text-sm font-semibold\">{points[hoveredIndex].users.toLocaleString()} Users</div>\n          <div className={`text-xs ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n            {new Date(points[hoveredIndex].date).toLocaleDateString()}\n          </div>\n        </motion.div>\n      )}\n\n      <div className={`absolute top-2 left-2 text-xs ${isDarkMode ? 'text-gray-500' : 'text-gray-400'}`}>\n        {chartMax.toFixed(0)}\n      </div>\n      <div className={`absolute bottom-8 left-2 text-xs ${isDarkMode ? 'text-gray-500' : 'text-gray-400'}`}>\n        {chartMin.toFixed(0)}\n      </div>\n    </div>\n  );\n};\n\nexport default function AnalyticsDashboard() {\n  const [sortColumn, setSortColumn] = useState<keyof TableRow | null>(null);\n  const [sortDirection, setSortDirection] = useState<'asc' | 'desc'>('asc');\n  const [currentPage, setCurrentPage] = useState(1);\n  const itemsPerPage = 3;\n  const [isDarkMode, setIsDarkMode] = useState(false);\n  const [metrics, setMetrics] = useState<MetricData[]>(mockMetrics);\n  const [chartData, setChartData] = useState<ChartDataPoint[]>(mockChartData);\n  const [tableData, setTableData] = useState<TableRow[]>(mockTableData);\n  const [isRefreshing, setIsRefreshing] = useState(false);\n  const [quickStats] = useState<QuickStat[]>(mockQuickStats);\n\n  const getIconComponent = (iconName: string) => {\n    switch (iconName) {\n      case 'target': return Target;\n      case 'activity': return Activity;\n      case 'zap': return Zap;\n      case 'chart': return BarChart3;\n      default: return Target;\n    }\n  };\n\n  const getColorClasses = (color: string, isDark: boolean) => {\n    const colors = {\n      blue: {\n        bg: isDark ? 'bg-blue-500/10' : 'bg-blue-50',\n        text: isDark ? 'text-blue-400' : 'text-blue-600',\n        progress: 'bg-blue-500'\n      },\n      green: {\n        bg: isDark ? 'bg-green-500/10' : 'bg-green-50',\n        text: isDark ? 'text-green-400' : 'text-green-600',\n        progress: 'bg-green-500'\n      },\n      yellow: {\n        bg: isDark ? 'bg-yellow-500/10' : 'bg-yellow-50',\n        text: isDark ? 'text-yellow-400' : 'text-yellow-600',\n        progress: 'bg-yellow-500'\n      },\n      purple: {\n        bg: isDark ? 'bg-purple-500/10' : 'bg-purple-50',\n        text: isDark ? 'text-purple-400' : 'text-purple-600',\n        progress: 'bg-purple-500'\n      }\n    };\n    return colors[color as keyof typeof colors] || colors.blue;\n  };\n\n  const toggleDarkMode = useCallback(() => {\n    setIsDarkMode(prev => !prev);\n  }, []);\n  const handleSort = useCallback((column: keyof TableRow) => {\n    if (sortColumn === column) {\n      setSortDirection(prev => prev === 'asc' ? 'desc' : 'asc');\n    } else {\n      setSortColumn(column);\n      setSortDirection('asc');\n    }\n    setCurrentPage(1);\n  }, [sortColumn]);\n\n  const getSortedData = useCallback(() => {\n    if (!sortColumn) return tableData;\n    \n    return [...tableData].sort((a, b) => {\n      const aValue = a[sortColumn];\n      const bValue = b[sortColumn];\n      \n      if (typeof aValue === 'number' && typeof bValue === 'number') {\n        return sortDirection === 'asc' ? aValue - bValue : bValue - aValue;\n      }\n      \n      if (typeof aValue === 'string' && typeof bValue === 'string') {\n        return sortDirection === 'asc' \n          ? aValue.localeCompare(bValue)\n          : bValue.localeCompare(aValue);\n      }\n      \n      return 0;\n    });\n  }, [tableData, sortColumn, sortDirection]);\n\n  const paginatedData = useCallback(() => {\n    const sorted = getSortedData();\n    const startIndex = (currentPage - 1) * itemsPerPage;\n    const endIndex = startIndex + itemsPerPage;\n    return sorted.slice(startIndex, endIndex);\n  }, [getSortedData, currentPage]);\n\n  const totalPages = Math.ceil(tableData.length / itemsPerPage);\n\n  const getStatusBadgeVariant = (status: TableRow['status']) => {\n    switch (status) {\n      case 'active':\n        return 'default';\n      case 'pending':\n        return 'secondary';\n      case 'inactive':\n        return 'outline';\n      default:\n        return 'default';\n    }\n  };\n\n  const SortIcon = ({ column }: { column: keyof TableRow }) => {\n    if (sortColumn !== column) {\n      return <ArrowUpDown className=\"ml-2 h-4 w-4\" />;\n    }\n    return sortDirection === 'asc' \n      ? <ArrowUp className=\"ml-2 h-4 w-4\" />\n      : <ArrowDown className=\"ml-2 h-4 w-4\" />;\n  };\n\n  const handleRefresh = useCallback(() => {\n    setIsRefreshing(true);\n    \n    // Simulate async data refresh\n    setTimeout(() => {\n      // Generate updated metrics with random variations\n      const updatedMetrics = mockMetrics.map(metric => ({\n        ...metric,\n        value: metric.value + Math.floor(Math.random() * 200 - 100),\n        change: parseFloat((Math.random() * 20 - 5).toFixed(1)),\n        trend: Math.random() > 0.5 ? 'up' as const : 'down' as const\n      }));\n\n      // Generate updated chart data with random variations\n      const updatedChartData = mockChartData.map(point => ({\n        ...point,\n        revenue: point.revenue + Math.floor(Math.random() * 4000 - 2000),\n        users: point.users + Math.floor(Math.random() * 100 - 50),\n        orders: point.orders + Math.floor(Math.random() * 50 - 25)\n      }));\n\n      // Generate updated table data with random variations\n      const updatedTableData = mockTableData.map(row => ({\n        ...row,\n        sales: row.sales + Math.floor(Math.random() * 40 - 20),\n        revenue: row.revenue + Math.floor(Math.random() * 2000 - 1000)\n      }));\n\n      setMetrics(updatedMetrics);\n      setChartData(updatedChartData);\n      setTableData(updatedTableData);\n      setIsRefreshing(false);\n    }, 1500)</parameter>\n</invoke>\n  }, []);\n\n  return (\n    <div className={`min-h-screen transition-colors duration-300 ${isDarkMode ? 'dark bg-gray-900' : 'bg-gray-50'}`}>\n      <div className=\"container mx-auto p-4 md:p-6 lg:p-8\">\n        <div className=\"flex flex-col md:flex-row justify-between items-start md:items-center gap-4 mb-8\">\n          <div>\n            <h1 className={`text-3xl md:text-4xl font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n              Analytics Dashboard\n            </h1>\n            <p className={`mt-2 ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n              Real-time insights and performance metrics\n            </p>\n          </div>\n          \n          <div className=\"flex gap-2\">\n            <Button\n              variant=\"outline\"\n              size=\"icon\"\n              onClick={toggleDarkMode}\n              className={isDarkMode ? 'border-gray-700' : ''}\n            >\n              {isDarkMode ? <Sun className=\"h-5 w-5\" /> : <Moon className=\"h-5 w-5\" />}\n            </Button>\n            \n            <Button\n              variant=\"outline\"\n              onClick={handleRefresh}\n              disabled={isRefreshing}\n              className={isDarkMode ? 'border-gray-700' : ''}\n            >\n              <RefreshCw className={`h-4 w-4 mr-2 ${isRefreshing ? 'animate-spin' : ''}`} />\n              Refresh\n            </Button>\n          </div>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 md:gap-6 mb-8\">\n          {metrics.map((metric, index) => {\n            const Icon = metric.label.includes('Revenue') ? DollarSign :\n                        metric.label.includes('Users') ? Users :\n                        metric.label.includes('Orders') ? ShoppingCart :\n                        Target;\n            \n            const TrendIcon = metric.trend === 'up' ? TrendingUp : TrendingDown;\n            const trendColor = metric.trend === 'up' ? 'text-green-500' : 'text-red-500';\n            const trendBgColor = metric.trend === 'up' ? 'bg-green-50 dark:bg-green-900/20' : 'bg-red-50 dark:bg-red-900/20';\n\n            return (\n              <motion.div\n                key={metric.id}\n                initial={{ opacity: 0, y: 20 }}\n                animate={{ opacity: 1, y: 0 }}\n                transition={{ duration: 0.4, delay: index * 0.1 }}\n              >\n                <Card className={`${isDarkMode ? 'bg-gray-800 border-gray-700' : 'bg-white'} hover:shadow-lg transition-shadow duration-300`}>\n                  <CardHeader className=\"flex flex-row items-center justify-between pb-2\">\n                    <CardTitle className={`text-sm font-medium ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                      {metric.label}\n                    </CardTitle>\n                    <div className={`p-2 rounded-lg ${isDarkMode ? 'bg-gray-700' : 'bg-gray-100'}`}>\n                      <Icon className={`h-4 w-4 ${isDarkMode ? 'text-gray-300' : 'text-gray-600'}`} />\n                    </div>\n                  </CardHeader>\n                  <CardContent>\n                    <div className={`text-2xl font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                      {metric.label.includes('Revenue') ? `$${metric.value.toLocaleString()}` :\n                       metric.label.includes('Rate') ? `${metric.value}%` :\n                       metric.value.toLocaleString()}\n                    </div>\n                    <div className=\"flex items-center mt-2\">\n                      <div className={`flex items-center gap-1 px-2 py-1 rounded-full ${trendBgColor}`}>\n                        <TrendIcon className={`h-3 w-3 ${trendColor}`} />\n                        <span className={`text-xs font-medium ${trendColor}`}>\n                          {Math.abs(metric.change)}%\n                        </span>\n                      </div>\n                      <span className={`text-xs ml-2 ${isDarkMode ? 'text-gray-400' : 'text-gray-500'}`}>\n                        vs last period\n                      </span>\n                    </div>\n                  </CardContent>\n                </Card>\n              </motion.div>\n            );\n          })}\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-4 md:gap-6 mb-8\">\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Revenue Overview</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Daily revenue trends\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"h-[300px] w-full\">\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <LineChart\n                    data={chartData}\n                    margin={{ top: 5, right: 10, left: 0, bottom: 5 }}\n                  >\n                    <CartesianGrid \n                      strokeDasharray=\"3 3\" \n                      stroke={isDarkMode ? '#374151' : '#e5e7eb'}\n                    />\n                    <XAxis \n                      dataKey=\"date\" \n                      stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                      fontSize={12}\n                      tickFormatter={(value) => new Date(value).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n                    />\n                    <YAxis \n                      stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                      fontSize={12}\n                      tickFormatter={(value) => `$${(value / 1000).toFixed(0)}k`}\n                    />\n                    <Tooltip \n                      contentStyle={{\n                        backgroundColor: isDarkMode ? '#1f2937' : '#ffffff',\n                        border: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\n                        borderRadius: '6px',\n                        color: isDarkMode ? '#ffffff' : '#000000'\n                      }}\n                      labelFormatter={(value) => new Date(value).toLocaleDateString('en-US', { month: 'long', day: 'numeric', year: 'numeric' })}\n                      formatter={(value: number) => [`$${value.toLocaleString()}`, 'Revenue']}\n                    />\n                    <Line \n                      type=\"monotone\" \n                      dataKey=\"revenue\" \n                      stroke=\"#3b82f6\" \n                      strokeWidth={2}\n                      dot={{ fill: '#3b82f6', r: 4 }}\n                      activeDot={{ r: 6 }}\n                    />\n                  </LineChart>\n                </ResponsiveContainer>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>User Activity</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Active users over time\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <UserAreaChart data={chartData} isDarkMode={isDarkMode} />\n            </CardContent>\n          </Card>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-4 md:gap-6 mb-8\">\n          <Card className={`lg:col-span-2 ${isDarkMode ? 'bg-gray-800 border-gray-700' : ''}`}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Performance Metrics</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Combined view of key metrics\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"h-[300px] w-full\">\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <LineChart\n                    data={chartData}\n                    margin={{ top: 5, right: 30, left: 20, bottom: 5 }}\n                  >\n                    <CartesianGrid strokeDasharray=\"3 3\" stroke={isDarkMode ? '#374151' : '#e5e7eb'} />\n                    <XAxis \n                      dataKey=\"date\" \n                      stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                      tick={{ fill: isDarkMode ? '#9ca3af' : '#6b7280' }}\n                      tickFormatter={(value) => new Date(value).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n                    />\n                    <YAxis \n                      stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                      tick={{ fill: isDarkMode ? '#9ca3af' : '#6b7280' }}\n                    />\n                    <Tooltip \n                      contentStyle={{\n                        backgroundColor: isDarkMode ? '#1f2937' : '#ffffff',\n                        border: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\n                        borderRadius: '6px',\n                        color: isDarkMode ? '#f3f4f6' : '#111827'\n                      }}\n                      labelFormatter={(value) => new Date(value).toLocaleDateString('en-US', { month: 'short', day: 'numeric', year: 'numeric' })}\n                    />\n                    <Legend \n                      wrapperStyle={{\n                        color: isDarkMode ? '#f3f4f6' : '#111827'\n                      }}\n                    />\n                    <Line \n                      type=\"monotone\" \n                      dataKey=\"revenue\" \n                      stroke=\"#3b82f6\" \n                      strokeWidth={2}\n                      dot={{ fill: '#3b82f6', r: 4 }}\n                      activeDot={{ r: 6 }}\n                      name=\"Revenue ($)\"\n                    />\n                    <Line \n                      type=\"monotone\" \n                      dataKey=\"users\" \n                      stroke=\"#10b981\" \n                      strokeWidth={2}\n                      dot={{ fill: '#10b981', r: 4 }}\n                      activeDot={{ r: 6 }}\n                      name=\"Users\"\n                    />\n                    <Line \n                      type=\"monotone\" \n                      dataKey=\"orders\" \n                      stroke=\"#f59e0b\" \n                      strokeWidth={2}\n                      dot={{ fill: '#f59e0b', r: 4 }}\n                      activeDot={{ r: 6 }}\n                      name=\"Orders\"\n                    />\n                  </LineChart>\n                </ResponsiveContainer>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Distribution</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Sales by category\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"h-[300px] w-full\">\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <PieChart>\n                    <Pie\n                      data={mockPieData}\n                      cx=\"50%\"\n                      cy=\"50%\"\n                      innerRadius={60}\n                      outerRadius={90}\n                      paddingAngle={2}\n                      dataKey=\"value\"\n                      label={({ name, percent }) => `${name}: ${(percent * 100).toFixed(0)}%`}\n                      labelLine={false}\n                    >\n                      {mockPieData.map((entry, index) => (\n                        <Cell key={`cell-${index}`} fill={entry.color} />\n                      ))}\n                    </Pie>\n                    <Tooltip\n                      contentStyle={{\n                        backgroundColor: isDarkMode ? '#1f2937' : '#ffffff',\n                        border: isDarkMode ? '1px solid #374151' : '1px solid #e5e7eb',\n                        borderRadius: '6px',\n                        color: isDarkMode ? '#ffffff' : '#000000'\n                      }}\n                      formatter={(value: number) => `$${value.toLocaleString()}`}\n                    />\n                    <Legend\n                      verticalAlign=\"bottom\"\n                      height={36}\n                      iconType=\"circle\"\n                      formatter={(value) => (\n                        <span className={isDarkMode ? 'text-gray-300' : 'text-gray-700'}>\n                          {value}\n                        </span>\n                      )}\n                    />\n                  </PieChart>\n                </ResponsiveContainer>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n          <CardHeader>\n            <CardTitle className={isDarkMode ? 'text-white' : ''}>Top Products</CardTitle>\n            <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n              Best performing products by revenue\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              <div className=\"rounded-md border\">\n                <Table>\n                  <TableHeader>\n                    <TableRow className={isDarkMode ? 'border-gray-700' : ''}>\n                      <TableHead className={isDarkMode ? 'text-gray-300' : ''}>\n                        <Button\n                          variant=\"ghost\"\n                          onClick={() => handleSort('product')}\n                          className=\"h-8 px-2 lg:px-3\"\n                        >\n                          Product\n                          <SortIcon column=\"product\" />\n                        </Button>\n                      </TableHead>\n                      <TableHead className={isDarkMode ? 'text-gray-300' : ''}>\n                        <Button\n                          variant=\"ghost\"\n                          onClick={() => handleSort('sales')}\n                          className=\"h-8 px-2 lg:px-3\"\n                        >\n                          Sales\n                          <SortIcon column=\"sales\" />\n                        </Button>\n                      </TableHead>\n                      <TableHead className={isDarkMode ? 'text-gray-300' : ''}>\n                        <Button\n                          variant=\"ghost\"\n                          onClick={() => handleSort('revenue')}\n                          className=\"h-8 px-2 lg:px-3\"\n                        >\n                          Revenue\n                          <SortIcon column=\"revenue\" />\n                        </Button>\n                      </TableHead>\n                      <TableHead className={isDarkMode ? 'text-gray-300' : ''}>\n                        <Button\n                          variant=\"ghost\"\n                          onClick={() => handleSort('status')}\n                          className=\"h-8 px-2 lg:px-3\"\n                        >\n                          Status\n                          <SortIcon column=\"status\" />\n                        </Button>\n                      </TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {paginatedData().map((row) => (\n                      <TableRow \n                        key={row.id}\n                        className={isDarkMode ? 'border-gray-700 hover:bg-gray-700/50' : ''}\n                      >\n                        <TableCell className={`font-medium ${isDarkMode ? 'text-gray-200' : ''}`}>\n                          {row.product}\n                        </TableCell>\n                        <TableCell className={isDarkMode ? 'text-gray-300' : ''}>\n                          {row.sales.toLocaleString()}\n                        </TableCell>\n                        <TableCell className={isDarkMode ? 'text-gray-300' : ''}>\n                          ${row.revenue.toLocaleString()}\n                        </TableCell>\n                        <TableCell>\n                          <Badge \n                            variant={getStatusBadgeVariant(row.status)}\n                            className=\"capitalize\"\n                          >\n                            {row.status}\n                          </Badge>\n                        </TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              </div>\n\n              <div className=\"flex items-center justify-between\">\n                <div className={`text-sm ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                  Showing {((currentPage - 1) * itemsPerPage) + 1} to {Math.min(currentPage * itemsPerPage, tableData.length)} of {tableData.length} products\n                </div>\n                <div className=\"flex gap-2\">\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => setCurrentPage(prev => Math.max(1, prev - 1))}\n                    disabled={currentPage === 1}\n                    className={isDarkMode ? 'border-gray-700' : ''}\n                  >\n                    Previous\n                  </Button>\n                  <div className=\"flex items-center gap-1\">\n                    {Array.from({ length: totalPages }, (_, i) => i + 1).map((page) => (\n                      <Button\n                        key={page}\n                        variant={currentPage === page ? 'default' : 'outline'}\n                        size=\"sm\"\n                        onClick={() => setCurrentPage(page)}\n                        className={`w-8 ${isDarkMode && currentPage !== page ? 'border-gray-700' : ''}`}\n                      >\n                        {page}\n                      </Button>\n                    ))}\n                  </div>\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => setCurrentPage(prev => Math.min(totalPages, prev + 1))}\n                    disabled={currentPage === totalPages}\n                    className={isDarkMode ? 'border-gray-700' : ''}\n                  >\n                    Next\n                  </Button>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 md:gap-6 mt-8\">\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Recent Activity</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Latest system events\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4 max-h-[400px] overflow-y-auto pr-2 scrollbar-thin\">\n                {mockActivityData.map((activity) => {\n                  const getIcon = () => {\n                    switch (activity.icon) {\n                      case 'cart':\n                        return <ShoppingCart className=\"h-4 w-4\" />;\n                      case 'user':\n                        return <UserPlus className=\"h-4 w-4\" />;\n                      case 'dollar':\n                        return <DollarSign className=\"h-4 w-4\" />;\n                      case 'package':\n                        return <Package className=\"h-4 w-4\" />;\n                      case 'alert':\n                        return <AlertCircle className=\"h-4 w-4\" />;\n                      case 'check':\n                        return <CheckCircle className=\"h-4 w-4\" />;\n                      default:\n                        return <CheckCircle className=\"h-4 w-4\" />;\n                    }\n                  };\n\n                  const getIconColor = () => {\n                    switch (activity.type) {\n                      case 'sale':\n                        return isDarkMode ? 'bg-green-900/30 text-green-400' : 'bg-green-100 text-green-600';\n                      case 'user':\n                        return isDarkMode ? 'bg-blue-900/30 text-blue-400' : 'bg-blue-100 text-blue-600';\n                      case 'revenue':\n                        return isDarkMode ? 'bg-purple-900/30 text-purple-400' : 'bg-purple-100 text-purple-600';\n                      case 'order':\n                        return isDarkMode ? 'bg-orange-900/30 text-orange-400' : 'bg-orange-100 text-orange-600';\n                      case 'alert':\n                        return isDarkMode ? 'bg-yellow-900/30 text-yellow-400' : 'bg-yellow-100 text-yellow-600';\n                      case 'success':\n                        return isDarkMode ? 'bg-teal-900/30 text-teal-400' : 'bg-teal-100 text-teal-600';\n                      default:\n                        return isDarkMode ? 'bg-gray-700 text-gray-400' : 'bg-gray-100 text-gray-600';\n                    }\n                  };\n\n                  return (\n                    <div\n                      key={activity.id}\n                      className={`flex items-start gap-3 p-3 rounded-lg transition-colors ${\n                        isDarkMode ? 'hover:bg-gray-700/50' : 'hover:bg-gray-100'\n                      }`}\n                    >\n                      <div className={`flex-shrink-0 w-8 h-8 rounded-full flex items-center justify-center ${getIconColor()}`}>\n                        {getIcon()}\n                      </div>\n                      <div className=\"flex-1 min-w-0\">\n                        <p className={`text-sm font-medium ${isDarkMode ? 'text-gray-200' : 'text-gray-900'}`}>\n                          {activity.message}\n                        </p>\n                        <p className={`text-xs mt-1 ${isDarkMode ? 'text-gray-500' : 'text-gray-500'}`}>\n                          {activity.timestamp}\n                        </p>\n                      </div>\n                    </div>\n                  );\n                })}\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Quick Stats</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Summary statistics\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4\">\n                {quickStats.map((stat, index) => {\n                  const IconComponent = getIconComponent(stat.icon);\n                  const colorClasses = getColorClasses(stat.color, isDarkMode);\n                  const percentage = Math.round((stat.value / stat.target) * 100);\n\n                  return (\n                    <motion.div\n                      key={stat.id}\n                      initial={{ opacity: 0, y: 20 }}\n                      animate={{ opacity: 1, y: 0 }}\n                      transition={{ delay: index * 0.1 }}\n                      className={`p-4 rounded-lg border ${\n                        isDarkMode ? 'bg-gray-700/50 border-gray-600' : 'bg-white border-gray-200'\n                      }`}\n                    >\n                      <div className=\"flex items-start justify-between mb-3\">\n                        <div>\n                          <p className={`text-sm font-medium ${isDarkMode ? 'text-gray-300' : 'text-gray-600'}`}>\n                            {stat.label}\n                          </p>\n                          <p className={`text-2xl font-bold mt-1 ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                            {stat.label.includes('Goal') ? `$${stat.value.toLocaleString()}` : `${stat.value}%`}\n                          </p>\n                        </div>\n                        <div className={`p-2 rounded-lg ${colorClasses.bg}`}>\n                          <IconComponent className={`h-5 w-5 ${colorClasses.text}`} />\n                        </div>\n                      </div>\n\n                      <div className=\"space-y-2\">\n                        <div className=\"flex items-center justify-between text-xs\">\n                          <span className={isDarkMode ? 'text-gray-400' : 'text-gray-500'}>\n                            Progress\n                          </span>\n                          <span className={`font-semibold ${colorClasses.text}`}>\n                            {percentage}%\n                          </span>\n                        </div>\n                        <div className={`h-2 rounded-full overflow-hidden ${\n                          isDarkMode ? 'bg-gray-600' : 'bg-gray-200'\n                        }`}>\n                          <motion.div\n                            initial={{ width: 0 }}\n                            animate={{ width: `${percentage}%` }}\n                            transition={{ duration: 1, delay: index * 0.1 + 0.2, ease: \"easeOut\" }}\n                            className={`h-full ${colorClasses.progress} rounded-full`}\n                          />\n                        </div>\n                        <p className={`text-xs ${isDarkMode ? 'text-gray-500' : 'text-gray-400'}`}>\n                          Target: {stat.label.includes('Goal') ? `$${stat.target.toLocaleString()}` : `${stat.target}%`}\n                        </p>\n                      </div>\n                    </motion.div>\n                  );\n                })}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}",
  "error": null,
  "overall_score": 62,
  "code_quality_score": 14,
  "architecture_score": 16,
  "performance_score": 17,
  "accessibility_score": 15,
  "metadata": {
    "document_id": "eval_room_be78182bd7d9",
    "prompt_category": "intermediate",
    "prompt_complexity": 6.0
  },
  "raw_response": {
    "document_id": "eval_room_be78182bd7d9",
    "mode": "parallel",
    "prompt": "Generate an analytics dashboard page with charts, data tables, real-time updates, dark mode, and responsive design",
    "content": "import { useState, useCallback } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Moon, Sun, RefreshCw } from 'lucide-react';\nimport { TrendingUp, TrendingDown, ShoppingCart, UserPlus, DollarSign, Package, AlertCircle, CheckCircle } from 'lucide-react';\nimport { ArrowUpDown, ArrowUp, ArrowDown } from 'lucide-react';\nimport { Badge } from '@/components/ui/badge';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\nimport { PieChart, Pie, Cell, ResponsiveContainer, Legend, Tooltip } from 'recharts';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\nimport { motion } from 'framer-motion';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';\nimport { TrendingUp, TrendingDown, Activity, Zap, BarChart3DollarSign, Users, ShoppingCart, Target } from 'lucide-react';\nimport { motion } from 'framer-motion';\n\ninterface MetricData {\n  id: string;\n  label: string;\n  value: number;\n  change: number;\n  trend: 'up' | 'down';\n}\n\ninterface ChartDataPoint {\n  date: string;\n  revenue: number;\n  users: number;\n  orders: number;\n}\n\ninterface TableRow {\n  id: string;\n  product: string;\n  sales: number;\n  revenue: number;\n  status: 'active' | 'pending' | 'inactive';\n}\ninterface PieChartData {\n  name: string;\n  value: number;\n  color: string;\n}\n\nconst mockMetrics: MetricData[] = [\n  { id: '1', label: 'Total Revenue', value: 45231, change: 12.5, trend: 'up' },\n  { id: '2', label: 'Active Users', value: 2350, change: 8.2, trend: 'up' },\n  { id: '3', label: 'Total Orders', value: 1543, change: -3.1, trend: 'down' },\n  { id: '4', label: 'Conversion Rate', value: 3.24, change: 5.7, trend: 'up' }\n];\n\nconst mockChartData: ChartDataPoint[] = [\n  { date: '2024-01-01', revenue: 12000, users: 450, orders: 230 },\n  { date: '2024-01-02', revenue: 15000, users: 520, orders: 280 },\n  { date: '2024-01-03', revenue: 13500, users: 490, orders: 250 },\n  { date: '2024-01-04', revenue: 18000, users: 610, orders: 320 },\n  { date: '2024-01-05', revenue: 16500, users: 580, orders: 295 },\n  { date: '2024-01-06', revenue: 20000, users: 680, orders: 350 },\n  { date: '2024-01-07', revenue: 22000, users: 720, orders: 380 }\n];\n\nconst mockTableData: TableRow[] = [\n  { id: '1', product: 'Premium Plan', sales: 234, revenue: 23400, status: 'active' },\n  { id: '2', product: 'Basic Plan', sales: 567, revenue: 11340, status: 'active' },\n  { id: '3', product: 'Enterprise Plan', sales: 89, revenue: 17800, status: 'active' },\n  { id: '4', product: 'Starter Plan', sales: 432, revenue: 4320, status: 'pending' },\n  { id: '5', product: 'Pro Plan', sales: 156, revenue: 15600, status: 'active' }\n];\ninterface QuickStat {\n  id: string;\n  label: string;\n  value: number;\n  target: number;\n  icon: string;\n  color: string;\n}\n\nconst mockQuickStats: QuickStat[] = [\n  { id: '1', label: 'Daily Goal', value: 18500, target: 25000, icon: 'target', color: 'blue' },\n  { id: '2', label: 'Engagement', value: 78, target: 100, icon: 'activity', color: 'green' },\n  { id: '3', label: 'Performance', value: 92, target: 100, icon: 'zap', color: 'yellow' },\n  { id: '4', label: 'Growth', value: 65, target: 100, icon: 'chart', color: 'purple' }\n];\ninterface ActivityItem {\n  id: string;\n  type: 'sale' | 'user' | 'revenue' | 'order' | 'alert' | 'success';\n  message: string;\n  timestamp: string;\n  icon: 'cart' | 'user' | 'dollar' | 'package' | 'alert' | 'check';\n}\n\nconst mockActivityData: ActivityItem[] = [\n  { id: '1', type: 'sale', message: 'New sale: Premium Plan purchased', timestamp: '2 minutes ago', icon: 'cart' },\n  { id: '2', type: 'user', message: 'New user registered: john@example.com', timestamp: '5 minutes ago', icon: 'user' },\n  { id: '3', type: 'revenue', message: 'Revenue milestone: $50,000 reached', timestamp: '12 minutes ago', icon: 'dollar' },\n  { id: '4', type: 'order', message: 'Order #1234 shipped successfully', timestamp: '18 minutes ago', icon: 'package' },\n  { id: '5', type: 'success', message: 'System backup completed', timestamp: '25 minutes ago', icon: 'check' },\n  { id: '6', type: 'sale', message: 'New sale: Enterprise Plan purchased', timestamp: '32 minutes ago', icon: 'cart' },\n  { id: '7', type: 'user', message: 'New user registered: sarah@example.com', timestamp: '45 minutes ago', icon: 'user' },\n  { id: '8', type: 'alert', message: 'Low stock alert: Starter Plan', timestamp: '1 hour ago', icon: 'alert' },\n  { id: '9', type: 'order', message: 'Order #1233 delivered', timestamp: '1 hour ago', icon: 'package' },\n  { id: '10', type: 'revenue', message: 'Daily revenue target achieved', timestamp: '2 hours ago', icon: 'dollar' }\n];\nconst mockPieData: PieChartData[] = [\n  { name: 'Premium Plan', value: 23400, color: '#3b82f6' },\n  { name: 'Enterprise Plan', value: 17800, color: '#8b5cf6' },\n  { name: 'Pro Plan', value: 15600, color: '#06b6d4' },\n  { name: 'Basic Plan', value: 11340, color: '#10b981' },\n  { name: 'Starter Plan', value: 4320, color: '#f59e0b' }\n];\n\nconst UserAreaChart = ({ data, isDarkMode }: { data: ChartDataPoint[], isDarkMode: boolean }) => {\n  const maxUsers = Math.max(...data.map(d => d.users));\n  const minUsers = Math.min(...data.map(d => d.users));\n  const range = maxUsers - minUsers;\n  const padding = range * 0.2;\n  const chartMax = maxUsers + padding;\n  const chartMin = Math.max(0, minUsers - padding);\n  const chartRange = chartMax - chartMin;\n\n  const width = 100;\n  const height = 100;\n\n  const points = data.map((point, index) => {\n    const x = (index / (data.length - 1)) * width;\n    const y = height - ((point.users - chartMin) / chartRange) * height;\n    return { x, y, ...point };\n  });\n\n  const pathD = points.reduce((path, point, index) => {\n    if (index === 0) return `M ${point.x} ${point.y}`;\n    return `${path} L ${point.x} ${point.y}`;\n  }, '');\n\n  const areaD = `${pathD} L ${width} ${height} L 0 ${height} Z`;\n\n  const [hoveredIndex, setHoveredIndex] = useState<number | null>(null);\n\n  return (\n    <div className=\"relative w-full h-64\">\n      <svg\n        viewBox={`0 0 ${width} ${height}`}\n        className=\"w-full h-full\"\n        preserveAspectRatio=\"none\"\n      >\n        <defs>\n          <linearGradient id=\"userGradient\" x1=\"0%\" y1=\"0%\" x2=\"0%\" y2=\"100%\">\n            <stop offset=\"0%\" stopColor=\"#3b82f6\" stopOpacity=\"0.6\" />\n            <stop offset=\"100%\" stopColor=\"#3b82f6\" stopOpacity=\"0.05\" />\n          </linearGradient>\n        </defs>\n\n        <motion.path\n          d={areaD}\n          fill=\"url(#userGradient)\"\n          initial={{ opacity: 0 }}\n          animate={{ opacity: 1 }}\n          transition={{ duration: 0.8, ease: \"easeOut\" }}\n        />\n\n        <motion.path\n          d={pathD}\n          fill=\"none\"\n          stroke=\"#3b82f6\"\n          strokeWidth=\"0.5\"\n          initial={{ pathLength: 0 }}\n          animate={{ pathLength: 1 }}\n          transition={{ duration: 1.2, ease: \"easeInOut\" }}\n        />\n\n        {points.map((point, index) => (\n          <motion.circle\n            key={index}\n            cx={point.x}\n            cy={point.y}\n            r={hoveredIndex === index ? \"1.5\" : \"1\"}\n            fill=\"#3b82f6\"\n            stroke={isDarkMode ? \"#1f2937\" : \"#ffffff\"}\n            strokeWidth=\"0.5\"\n            initial={{ scale: 0 }}\n            animate={{ scale: 1 }}\n            transition={{ duration: 0.3, delay: index * 0.1 }}\n            onMouseEnter={() => setHoveredIndex(index)}\n            onMouseLeave={() => setHoveredIndex(null)}\n            className=\"cursor-pointer\"\n          />\n        ))}\n      </svg>\n\n      <div className=\"absolute inset-0 flex items-end justify-between px-2 pb-2 pointer-events-none\">\n        {points.map((point, index) => (\n          <div key={index} className=\"flex flex-col items-center\">\n            <span className={`text-xs ${isDarkMode ? 'text-gray-500' : 'text-gray-400'}`}>\n              {new Date(point.date).getDate()}\n            </span>\n          </div>\n        ))}\n      </div>\n\n      {hoveredIndex !== null && (\n        <motion.div\n          initial={{ opacity: 0, y: 10 }}\n          animate={{ opacity: 1, y: 0 }}\n          className={`absolute top-4 left-1/2 transform -translate-x-1/2 px-3 py-2 rounded-lg shadow-lg ${\n            isDarkMode ? 'bg-gray-700 text-white' : 'bg-white text-gray-900'\n          }`}\n        >\n          <div className=\"text-sm font-semibold\">{points[hoveredIndex].users.toLocaleString()} Users</div>\n          <div className={`text-xs ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n            {new Date(points[hoveredIndex].date).toLocaleDateString()}\n          </div>\n        </motion.div>\n      )}\n\n      <div className={`absolute top-2 left-2 text-xs ${isDarkMode ? 'text-gray-500' : 'text-gray-400'}`}>\n        {chartMax.toFixed(0)}\n      </div>\n      <div className={`absolute bottom-8 left-2 text-xs ${isDarkMode ? 'text-gray-500' : 'text-gray-400'}`}>\n        {chartMin.toFixed(0)}\n      </div>\n    </div>\n  );\n};\n\nexport default function AnalyticsDashboard() {\n  const [sortColumn, setSortColumn] = useState<keyof TableRow | null>(null);\n  const [sortDirection, setSortDirection] = useState<'asc' | 'desc'>('asc');\n  const [currentPage, setCurrentPage] = useState(1);\n  const itemsPerPage = 3;\n  const [isDarkMode, setIsDarkMode] = useState(false);\n  const [metrics, setMetrics] = useState<MetricData[]>(mockMetrics);\n  const [chartData, setChartData] = useState<ChartDataPoint[]>(mockChartData);\n  const [tableData, setTableData] = useState<TableRow[]>(mockTableData);\n  const [isRefreshing, setIsRefreshing] = useState(false);\n  const [quickStats] = useState<QuickStat[]>(mockQuickStats);\n\n  const getIconComponent = (iconName: string) => {\n    switch (iconName) {\n      case 'target': return Target;\n      case 'activity': return Activity;\n      case 'zap': return Zap;\n      case 'chart': return BarChart3;\n      default: return Target;\n    }\n  };\n\n  const getColorClasses = (color: string, isDark: boolean) => {\n    const colors = {\n      blue: {\n        bg: isDark ? 'bg-blue-500/10' : 'bg-blue-50',\n        text: isDark ? 'text-blue-400' : 'text-blue-600',\n        progress: 'bg-blue-500'\n      },\n      green: {\n        bg: isDark ? 'bg-green-500/10' : 'bg-green-50',\n        text: isDark ? 'text-green-400' : 'text-green-600',\n        progress: 'bg-green-500'\n      },\n      yellow: {\n        bg: isDark ? 'bg-yellow-500/10' : 'bg-yellow-50',\n        text: isDark ? 'text-yellow-400' : 'text-yellow-600',\n        progress: 'bg-yellow-500'\n      },\n      purple: {\n        bg: isDark ? 'bg-purple-500/10' : 'bg-purple-50',\n        text: isDark ? 'text-purple-400' : 'text-purple-600',\n        progress: 'bg-purple-500'\n      }\n    };\n    return colors[color as keyof typeof colors] || colors.blue;\n  };\n\n  const toggleDarkMode = useCallback(() => {\n    setIsDarkMode(prev => !prev);\n  }, []);\n  const handleSort = useCallback((column: keyof TableRow) => {\n    if (sortColumn === column) {\n      setSortDirection(prev => prev === 'asc' ? 'desc' : 'asc');\n    } else {\n      setSortColumn(column);\n      setSortDirection('asc');\n    }\n    setCurrentPage(1);\n  }, [sortColumn]);\n\n  const getSortedData = useCallback(() => {\n    if (!sortColumn) return tableData;\n    \n    return [...tableData].sort((a, b) => {\n      const aValue = a[sortColumn];\n      const bValue = b[sortColumn];\n      \n      if (typeof aValue === 'number' && typeof bValue === 'number') {\n        return sortDirection === 'asc' ? aValue - bValue : bValue - aValue;\n      }\n      \n      if (typeof aValue === 'string' && typeof bValue === 'string') {\n        return sortDirection === 'asc' \n          ? aValue.localeCompare(bValue)\n          : bValue.localeCompare(aValue);\n      }\n      \n      return 0;\n    });\n  }, [tableData, sortColumn, sortDirection]);\n\n  const paginatedData = useCallback(() => {\n    const sorted = getSortedData();\n    const startIndex = (currentPage - 1) * itemsPerPage;\n    const endIndex = startIndex + itemsPerPage;\n    return sorted.slice(startIndex, endIndex);\n  }, [getSortedData, currentPage]);\n\n  const totalPages = Math.ceil(tableData.length / itemsPerPage);\n\n  const getStatusBadgeVariant = (status: TableRow['status']) => {\n    switch (status) {\n      case 'active':\n        return 'default';\n      case 'pending':\n        return 'secondary';\n      case 'inactive':\n        return 'outline';\n      default:\n        return 'default';\n    }\n  };\n\n  const SortIcon = ({ column }: { column: keyof TableRow }) => {\n    if (sortColumn !== column) {\n      return <ArrowUpDown className=\"ml-2 h-4 w-4\" />;\n    }\n    return sortDirection === 'asc' \n      ? <ArrowUp className=\"ml-2 h-4 w-4\" />\n      : <ArrowDown className=\"ml-2 h-4 w-4\" />;\n  };\n\n  const handleRefresh = useCallback(() => {\n    setIsRefreshing(true);\n    \n    // Simulate async data refresh\n    setTimeout(() => {\n      // Generate updated metrics with random variations\n      const updatedMetrics = mockMetrics.map(metric => ({\n        ...metric,\n        value: metric.value + Math.floor(Math.random() * 200 - 100),\n        change: parseFloat((Math.random() * 20 - 5).toFixed(1)),\n        trend: Math.random() > 0.5 ? 'up' as const : 'down' as const\n      }));\n\n      // Generate updated chart data with random variations\n      const updatedChartData = mockChartData.map(point => ({\n        ...point,\n        revenue: point.revenue + Math.floor(Math.random() * 4000 - 2000),\n        users: point.users + Math.floor(Math.random() * 100 - 50),\n        orders: point.orders + Math.floor(Math.random() * 50 - 25)\n      }));\n\n      // Generate updated table data with random variations\n      const updatedTableData = mockTableData.map(row => ({\n        ...row,\n        sales: row.sales + Math.floor(Math.random() * 40 - 20),\n        revenue: row.revenue + Math.floor(Math.random() * 2000 - 1000)\n      }));\n\n      setMetrics(updatedMetrics);\n      setChartData(updatedChartData);\n      setTableData(updatedTableData);\n      setIsRefreshing(false);\n    }, 1500)</parameter>\n</invoke>\n  }, []);\n\n  return (\n    <div className={`min-h-screen transition-colors duration-300 ${isDarkMode ? 'dark bg-gray-900' : 'bg-gray-50'}`}>\n      <div className=\"container mx-auto p-4 md:p-6 lg:p-8\">\n        <div className=\"flex flex-col md:flex-row justify-between items-start md:items-center gap-4 mb-8\">\n          <div>\n            <h1 className={`text-3xl md:text-4xl font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n              Analytics Dashboard\n            </h1>\n            <p className={`mt-2 ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n              Real-time insights and performance metrics\n            </p>\n          </div>\n          \n          <div className=\"flex gap-2\">\n            <Button\n              variant=\"outline\"\n              size=\"icon\"\n              onClick={toggleDarkMode}\n              className={isDarkMode ? 'border-gray-700' : ''}\n            >\n              {isDarkMode ? <Sun className=\"h-5 w-5\" /> : <Moon className=\"h-5 w-5\" />}\n            </Button>\n            \n            <Button\n              variant=\"outline\"\n              onClick={handleRefresh}\n              disabled={isRefreshing}\n              className={isDarkMode ? 'border-gray-700' : ''}\n            >\n              <RefreshCw className={`h-4 w-4 mr-2 ${isRefreshing ? 'animate-spin' : ''}`} />\n              Refresh\n            </Button>\n          </div>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 md:gap-6 mb-8\">\n          {metrics.map((metric, index) => {\n            const Icon = metric.label.includes('Revenue') ? DollarSign :\n                        metric.label.includes('Users') ? Users :\n                        metric.label.includes('Orders') ? ShoppingCart :\n                        Target;\n            \n            const TrendIcon = metric.trend === 'up' ? TrendingUp : TrendingDown;\n            const trendColor = metric.trend === 'up' ? 'text-green-500' : 'text-red-500';\n            const trendBgColor = metric.trend === 'up' ? 'bg-green-50 dark:bg-green-900/20' : 'bg-red-50 dark:bg-red-900/20';\n\n            return (\n              <motion.div\n                key={metric.id}\n                initial={{ opacity: 0, y: 20 }}\n                animate={{ opacity: 1, y: 0 }}\n                transition={{ duration: 0.4, delay: index * 0.1 }}\n              >\n                <Card className={`${isDarkMode ? 'bg-gray-800 border-gray-700' : 'bg-white'} hover:shadow-lg transition-shadow duration-300`}>\n                  <CardHeader className=\"flex flex-row items-center justify-between pb-2\">\n                    <CardTitle className={`text-sm font-medium ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                      {metric.label}\n                    </CardTitle>\n                    <div className={`p-2 rounded-lg ${isDarkMode ? 'bg-gray-700' : 'bg-gray-100'}`}>\n                      <Icon className={`h-4 w-4 ${isDarkMode ? 'text-gray-300' : 'text-gray-600'}`} />\n                    </div>\n                  </CardHeader>\n                  <CardContent>\n                    <div className={`text-2xl font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                      {metric.label.includes('Revenue') ? `$${metric.value.toLocaleString()}` :\n                       metric.label.includes('Rate') ? `${metric.value}%` :\n                       metric.value.toLocaleString()}\n                    </div>\n                    <div className=\"flex items-center mt-2\">\n                      <div className={`flex items-center gap-1 px-2 py-1 rounded-full ${trendBgColor}`}>\n                        <TrendIcon className={`h-3 w-3 ${trendColor}`} />\n                        <span className={`text-xs font-medium ${trendColor}`}>\n                          {Math.abs(metric.change)}%\n                        </span>\n                      </div>\n                      <span className={`text-xs ml-2 ${isDarkMode ? 'text-gray-400' : 'text-gray-500'}`}>\n                        vs last period\n                      </span>\n                    </div>\n                  </CardContent>\n                </Card>\n              </motion.div>\n            );\n          })}\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-4 md:gap-6 mb-8\">\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Revenue Overview</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Daily revenue trends\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"h-[300px] w-full\">\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <LineChart\n                    data={chartData}\n                    margin={{ top: 5, right: 10, left: 0, bottom: 5 }}\n                  >\n                    <CartesianGrid \n                      strokeDasharray=\"3 3\" \n                      stroke={isDarkMode ? '#374151' : '#e5e7eb'}\n                    />\n                    <XAxis \n                      dataKey=\"date\" \n                      stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                      fontSize={12}\n                      tickFormatter={(value) => new Date(value).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n                    />\n                    <YAxis \n                      stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                      fontSize={12}\n                      tickFormatter={(value) => `$${(value / 1000).toFixed(0)}k`}\n                    />\n                    <Tooltip \n                      contentStyle={{\n                        backgroundColor: isDarkMode ? '#1f2937' : '#ffffff',\n                        border: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\n                        borderRadius: '6px',\n                        color: isDarkMode ? '#ffffff' : '#000000'\n                      }}\n                      labelFormatter={(value) => new Date(value).toLocaleDateString('en-US', { month: 'long', day: 'numeric', year: 'numeric' })}\n                      formatter={(value: number) => [`$${value.toLocaleString()}`, 'Revenue']}\n                    />\n                    <Line \n                      type=\"monotone\" \n                      dataKey=\"revenue\" \n                      stroke=\"#3b82f6\" \n                      strokeWidth={2}\n                      dot={{ fill: '#3b82f6', r: 4 }}\n                      activeDot={{ r: 6 }}\n                    />\n                  </LineChart>\n                </ResponsiveContainer>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>User Activity</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Active users over time\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <UserAreaChart data={chartData} isDarkMode={isDarkMode} />\n            </CardContent>\n          </Card>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-4 md:gap-6 mb-8\">\n          <Card className={`lg:col-span-2 ${isDarkMode ? 'bg-gray-800 border-gray-700' : ''}`}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Performance Metrics</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Combined view of key metrics\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"h-[300px] w-full\">\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <LineChart\n                    data={chartData}\n                    margin={{ top: 5, right: 30, left: 20, bottom: 5 }}\n                  >\n                    <CartesianGrid strokeDasharray=\"3 3\" stroke={isDarkMode ? '#374151' : '#e5e7eb'} />\n                    <XAxis \n                      dataKey=\"date\" \n                      stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                      tick={{ fill: isDarkMode ? '#9ca3af' : '#6b7280' }}\n                      tickFormatter={(value) => new Date(value).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n                    />\n                    <YAxis \n                      stroke={isDarkMode ? '#9ca3af' : '#6b7280'}\n                      tick={{ fill: isDarkMode ? '#9ca3af' : '#6b7280' }}\n                    />\n                    <Tooltip \n                      contentStyle={{\n                        backgroundColor: isDarkMode ? '#1f2937' : '#ffffff',\n                        border: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,\n                        borderRadius: '6px',\n                        color: isDarkMode ? '#f3f4f6' : '#111827'\n                      }}\n                      labelFormatter={(value) => new Date(value).toLocaleDateString('en-US', { month: 'short', day: 'numeric', year: 'numeric' })}\n                    />\n                    <Legend \n                      wrapperStyle={{\n                        color: isDarkMode ? '#f3f4f6' : '#111827'\n                      }}\n                    />\n                    <Line \n                      type=\"monotone\" \n                      dataKey=\"revenue\" \n                      stroke=\"#3b82f6\" \n                      strokeWidth={2}\n                      dot={{ fill: '#3b82f6', r: 4 }}\n                      activeDot={{ r: 6 }}\n                      name=\"Revenue ($)\"\n                    />\n                    <Line \n                      type=\"monotone\" \n                      dataKey=\"users\" \n                      stroke=\"#10b981\" \n                      strokeWidth={2}\n                      dot={{ fill: '#10b981', r: 4 }}\n                      activeDot={{ r: 6 }}\n                      name=\"Users\"\n                    />\n                    <Line \n                      type=\"monotone\" \n                      dataKey=\"orders\" \n                      stroke=\"#f59e0b\" \n                      strokeWidth={2}\n                      dot={{ fill: '#f59e0b', r: 4 }}\n                      activeDot={{ r: 6 }}\n                      name=\"Orders\"\n                    />\n                  </LineChart>\n                </ResponsiveContainer>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Distribution</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Sales by category\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"h-[300px] w-full\">\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <PieChart>\n                    <Pie\n                      data={mockPieData}\n                      cx=\"50%\"\n                      cy=\"50%\"\n                      innerRadius={60}\n                      outerRadius={90}\n                      paddingAngle={2}\n                      dataKey=\"value\"\n                      label={({ name, percent }) => `${name}: ${(percent * 100).toFixed(0)}%`}\n                      labelLine={false}\n                    >\n                      {mockPieData.map((entry, index) => (\n                        <Cell key={`cell-${index}`} fill={entry.color} />\n                      ))}\n                    </Pie>\n                    <Tooltip\n                      contentStyle={{\n                        backgroundColor: isDarkMode ? '#1f2937' : '#ffffff',\n                        border: isDarkMode ? '1px solid #374151' : '1px solid #e5e7eb',\n                        borderRadius: '6px',\n                        color: isDarkMode ? '#ffffff' : '#000000'\n                      }}\n                      formatter={(value: number) => `$${value.toLocaleString()}`}\n                    />\n                    <Legend\n                      verticalAlign=\"bottom\"\n                      height={36}\n                      iconType=\"circle\"\n                      formatter={(value) => (\n                        <span className={isDarkMode ? 'text-gray-300' : 'text-gray-700'}>\n                          {value}\n                        </span>\n                      )}\n                    />\n                  </PieChart>\n                </ResponsiveContainer>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n          <CardHeader>\n            <CardTitle className={isDarkMode ? 'text-white' : ''}>Top Products</CardTitle>\n            <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n              Best performing products by revenue\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              <div className=\"rounded-md border\">\n                <Table>\n                  <TableHeader>\n                    <TableRow className={isDarkMode ? 'border-gray-700' : ''}>\n                      <TableHead className={isDarkMode ? 'text-gray-300' : ''}>\n                        <Button\n                          variant=\"ghost\"\n                          onClick={() => handleSort('product')}\n                          className=\"h-8 px-2 lg:px-3\"\n                        >\n                          Product\n                          <SortIcon column=\"product\" />\n                        </Button>\n                      </TableHead>\n                      <TableHead className={isDarkMode ? 'text-gray-300' : ''}>\n                        <Button\n                          variant=\"ghost\"\n                          onClick={() => handleSort('sales')}\n                          className=\"h-8 px-2 lg:px-3\"\n                        >\n                          Sales\n                          <SortIcon column=\"sales\" />\n                        </Button>\n                      </TableHead>\n                      <TableHead className={isDarkMode ? 'text-gray-300' : ''}>\n                        <Button\n                          variant=\"ghost\"\n                          onClick={() => handleSort('revenue')}\n                          className=\"h-8 px-2 lg:px-3\"\n                        >\n                          Revenue\n                          <SortIcon column=\"revenue\" />\n                        </Button>\n                      </TableHead>\n                      <TableHead className={isDarkMode ? 'text-gray-300' : ''}>\n                        <Button\n                          variant=\"ghost\"\n                          onClick={() => handleSort('status')}\n                          className=\"h-8 px-2 lg:px-3\"\n                        >\n                          Status\n                          <SortIcon column=\"status\" />\n                        </Button>\n                      </TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {paginatedData().map((row) => (\n                      <TableRow \n                        key={row.id}\n                        className={isDarkMode ? 'border-gray-700 hover:bg-gray-700/50' : ''}\n                      >\n                        <TableCell className={`font-medium ${isDarkMode ? 'text-gray-200' : ''}`}>\n                          {row.product}\n                        </TableCell>\n                        <TableCell className={isDarkMode ? 'text-gray-300' : ''}>\n                          {row.sales.toLocaleString()}\n                        </TableCell>\n                        <TableCell className={isDarkMode ? 'text-gray-300' : ''}>\n                          ${row.revenue.toLocaleString()}\n                        </TableCell>\n                        <TableCell>\n                          <Badge \n                            variant={getStatusBadgeVariant(row.status)}\n                            className=\"capitalize\"\n                          >\n                            {row.status}\n                          </Badge>\n                        </TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              </div>\n\n              <div className=\"flex items-center justify-between\">\n                <div className={`text-sm ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>\n                  Showing {((currentPage - 1) * itemsPerPage) + 1} to {Math.min(currentPage * itemsPerPage, tableData.length)} of {tableData.length} products\n                </div>\n                <div className=\"flex gap-2\">\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => setCurrentPage(prev => Math.max(1, prev - 1))}\n                    disabled={currentPage === 1}\n                    className={isDarkMode ? 'border-gray-700' : ''}\n                  >\n                    Previous\n                  </Button>\n                  <div className=\"flex items-center gap-1\">\n                    {Array.from({ length: totalPages }, (_, i) => i + 1).map((page) => (\n                      <Button\n                        key={page}\n                        variant={currentPage === page ? 'default' : 'outline'}\n                        size=\"sm\"\n                        onClick={() => setCurrentPage(page)}\n                        className={`w-8 ${isDarkMode && currentPage !== page ? 'border-gray-700' : ''}`}\n                      >\n                        {page}\n                      </Button>\n                    ))}\n                  </div>\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => setCurrentPage(prev => Math.min(totalPages, prev + 1))}\n                    disabled={currentPage === totalPages}\n                    className={isDarkMode ? 'border-gray-700' : ''}\n                  >\n                    Next\n                  </Button>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 md:gap-6 mt-8\">\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Recent Activity</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Latest system events\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4 max-h-[400px] overflow-y-auto pr-2 scrollbar-thin\">\n                {mockActivityData.map((activity) => {\n                  const getIcon = () => {\n                    switch (activity.icon) {\n                      case 'cart':\n                        return <ShoppingCart className=\"h-4 w-4\" />;\n                      case 'user':\n                        return <UserPlus className=\"h-4 w-4\" />;\n                      case 'dollar':\n                        return <DollarSign className=\"h-4 w-4\" />;\n                      case 'package':\n                        return <Package className=\"h-4 w-4\" />;\n                      case 'alert':\n                        return <AlertCircle className=\"h-4 w-4\" />;\n                      case 'check':\n                        return <CheckCircle className=\"h-4 w-4\" />;\n                      default:\n                        return <CheckCircle className=\"h-4 w-4\" />;\n                    }\n                  };\n\n                  const getIconColor = () => {\n                    switch (activity.type) {\n                      case 'sale':\n                        return isDarkMode ? 'bg-green-900/30 text-green-400' : 'bg-green-100 text-green-600';\n                      case 'user':\n                        return isDarkMode ? 'bg-blue-900/30 text-blue-400' : 'bg-blue-100 text-blue-600';\n                      case 'revenue':\n                        return isDarkMode ? 'bg-purple-900/30 text-purple-400' : 'bg-purple-100 text-purple-600';\n                      case 'order':\n                        return isDarkMode ? 'bg-orange-900/30 text-orange-400' : 'bg-orange-100 text-orange-600';\n                      case 'alert':\n                        return isDarkMode ? 'bg-yellow-900/30 text-yellow-400' : 'bg-yellow-100 text-yellow-600';\n                      case 'success':\n                        return isDarkMode ? 'bg-teal-900/30 text-teal-400' : 'bg-teal-100 text-teal-600';\n                      default:\n                        return isDarkMode ? 'bg-gray-700 text-gray-400' : 'bg-gray-100 text-gray-600';\n                    }\n                  };\n\n                  return (\n                    <div\n                      key={activity.id}\n                      className={`flex items-start gap-3 p-3 rounded-lg transition-colors ${\n                        isDarkMode ? 'hover:bg-gray-700/50' : 'hover:bg-gray-100'\n                      }`}\n                    >\n                      <div className={`flex-shrink-0 w-8 h-8 rounded-full flex items-center justify-center ${getIconColor()}`}>\n                        {getIcon()}\n                      </div>\n                      <div className=\"flex-1 min-w-0\">\n                        <p className={`text-sm font-medium ${isDarkMode ? 'text-gray-200' : 'text-gray-900'}`}>\n                          {activity.message}\n                        </p>\n                        <p className={`text-xs mt-1 ${isDarkMode ? 'text-gray-500' : 'text-gray-500'}`}>\n                          {activity.timestamp}\n                        </p>\n                      </div>\n                    </div>\n                  );\n                })}\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className={isDarkMode ? 'bg-gray-800 border-gray-700' : ''}>\n            <CardHeader>\n              <CardTitle className={isDarkMode ? 'text-white' : ''}>Quick Stats</CardTitle>\n              <CardDescription className={isDarkMode ? 'text-gray-400' : ''}>\n                Summary statistics\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4\">\n                {quickStats.map((stat, index) => {\n                  const IconComponent = getIconComponent(stat.icon);\n                  const colorClasses = getColorClasses(stat.color, isDarkMode);\n                  const percentage = Math.round((stat.value / stat.target) * 100);\n\n                  return (\n                    <motion.div\n                      key={stat.id}\n                      initial={{ opacity: 0, y: 20 }}\n                      animate={{ opacity: 1, y: 0 }}\n                      transition={{ delay: index * 0.1 }}\n                      className={`p-4 rounded-lg border ${\n                        isDarkMode ? 'bg-gray-700/50 border-gray-600' : 'bg-white border-gray-200'\n                      }`}\n                    >\n                      <div className=\"flex items-start justify-between mb-3\">\n                        <div>\n                          <p className={`text-sm font-medium ${isDarkMode ? 'text-gray-300' : 'text-gray-600'}`}>\n                            {stat.label}\n                          </p>\n                          <p className={`text-2xl font-bold mt-1 ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>\n                            {stat.label.includes('Goal') ? `$${stat.value.toLocaleString()}` : `${stat.value}%`}\n                          </p>\n                        </div>\n                        <div className={`p-2 rounded-lg ${colorClasses.bg}`}>\n                          <IconComponent className={`h-5 w-5 ${colorClasses.text}`} />\n                        </div>\n                      </div>\n\n                      <div className=\"space-y-2\">\n                        <div className=\"flex items-center justify-between text-xs\">\n                          <span className={isDarkMode ? 'text-gray-400' : 'text-gray-500'}>\n                            Progress\n                          </span>\n                          <span className={`font-semibold ${colorClasses.text}`}>\n                            {percentage}%\n                          </span>\n                        </div>\n                        <div className={`h-2 rounded-full overflow-hidden ${\n                          isDarkMode ? 'bg-gray-600' : 'bg-gray-200'\n                        }`}>\n                          <motion.div\n                            initial={{ width: 0 }}\n                            animate={{ width: `${percentage}%` }}\n                            transition={{ duration: 1, delay: index * 0.1 + 0.2, ease: \"easeOut\" }}\n                            className={`h-full ${colorClasses.progress} rounded-full`}\n                          />\n                        </div>\n                        <p className={`text-xs ${isDarkMode ? 'text-gray-500' : 'text-gray-400'}`}>\n                          Target: {stat.label.includes('Goal') ? `$${stat.target.toLocaleString()}` : `${stat.target}%`}\n                        </p>\n                      </div>\n                    </motion.div>\n                  );\n                })}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}",
    "error": null,
    "elapsed_time": 84.36132597923279,
    "success": true
  }
}