{
  "prompt_id": "markdown_editor",
  "prompt_name": "Premium Markdown Editor",
  "mode": "parallel",
  "run_number": 44,
  "timestamp": "2025-10-14T06:32:41.516903",
  "response_time": 89.3581337928772,
  "total_tokens": null,
  "response_content": "import { useState, useCallback } from 'react';\nimport { useMemo } from 'react';\nimport { useRef } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Bold, Italic, Code, List, ListOrdered, Link, Image, Eye, EyeOff } from 'lucide-react';\nimport { motion, AnimatePresence } from 'framer-motion';\n\n// Markdown parser and renderer\ninterface MarkdownNode {\n  type: string;\n  content?: string;\n  children?: MarkdownNode[];\n  language?: string;\n  level?: number;\n  href?: string;\n  alt?: string;\n}\n\nconst parseMarkdown = (text: string): MarkdownNode[] => {\n  const lines = text.split('\\n');\n  const nodes: MarkdownNode[] = [];\n  let i = 0;\n\n  while (i < lines.length) {\n    const line = lines[i];\n\n    // Code blocks\n    if (line.startsWith('```')) {\n      const language = line.slice(3).trim() || 'text';\n      const codeLines: string[] = [];\n      i++;\n      while (i < lines.length && !lines[i].startsWith('```')) {\n        codeLines.push(lines[i]);\n        i++;\n      }\n      nodes.push({ type: 'codeblock', content: codeLines.join('\\n'), language });\n      i++;\n      continue;\n    }\n\n    // Headers\n    if (line.startsWith('#')) {\n      const level = line.match(/^#+/)?.[0].length || 1;\n      const content = line.replace(/^#+\\s*/, '');\n      nodes.push({ type: 'heading', level, content: parseInline(content) });\n      i++;\n      continue;\n    }\n\n    // Horizontal rule\n    if (line.match(/^---+$/)) {\n      nodes.push({ type: 'hr' });\n      i++;\n      continue;\n    }\n\n    // Blockquote\n    if (line.startsWith('>')) {\n      const content = line.replace(/^>\\s*/, '');\n      nodes.push({ type: 'blockquote', content: parseInline(content) });\n      i++;\n      continue;\n    }\n\n    // Ordered list\n    if (line.match(/^\\d+\\.\\s/)) {\n      const items: string[] = [];\n      while (i < lines.length && lines[i].match(/^\\d+\\.\\s/)) {\n        items.push(lines[i].replace(/^\\d+\\.\\s*/, ''));\n        i++;\n      }\n      nodes.push({ type: 'orderedlist', children: items.map(item => ({ type: 'listitem', content: parseInline(item) })) });\n      continue;\n    }\n\n    // Unordered list\n    if (line.match(/^[-*]\\s/)) {\n      const items: string[] = [];\n      while (i < lines.length && lines[i].match(/^[-*]\\s/)) {\n        items.push(lines[i].replace(/^[-*]\\s*/, ''));\n        i++;\n      }\n      nodes.push({ type: 'unorderedlist', children: items.map(item => ({ type: 'listitem', content: parseInline(item) })) });\n      continue;\n    }\n\n    // Empty line\n    if (line.trim() === '') {\n      i++;\n      continue;\n    }\n\n    // Paragraph\n    nodes.push({ type: 'paragraph', content: parseInline(line) });\n    i++;\n  }\n\n  return nodes;\n};\n\nconst parseInline = (text: string): string => {\n  return text;\n};\n\nconst highlightCode = (code: string, language: string): JSX.Element[] => {\n  const lines = code.split('\\n');\n  \n  const tokenize = (line: string, lang: string): JSX.Element[] => {\n    const tokens: JSX.Element[] = [];\n    let remaining = line;\n    let key = 0;\n\n    const patterns: { [key: string]: RegExp[] } = {\n      javascript: [\n        /^(function|const|let|var|return|if|else|for|while|class|import|export|from|default|async|await|new|this|typeof|instanceof)\\b/,\n        /^(true|false|null|undefined)\\b/,\n        /^\"([^\"\\\\]|\\\\.)*\"/,\n        /^'([^'\\\\]|\\\\.)*'/,\n        /^`([^`\\\\]|\\\\.)*`/,\n        /^\\/\\/.*$/,\n        /^\\/\\*[\\s\\S]*?\\*\\//,\n        /^\\d+/,\n        /^[a-zA-Z_$][a-zA-Z0-9_$]*/,\n        /^[+\\-*/%=<>!&|^~?:]+/,\n        /^[{}[\\]();,.]/,\n      ],\n      python: [\n        /^(def|class|return|if|elif|else|for|while|import|from|as|with|try|except|finally|raise|pass|break|continue|lambda|yield|async|await)\\b/,\n        /^(True|False|None)\\b/,\n        /^\"([^\"\\\\]|\\\\.)*\"/,\n        /^'([^'\\\\]|\\\\.)*'/,\n        /^#.*$/,\n        /^\\d+/,\n        /^[a-zA-Z_][a-zA-Z0-9_]*/,\n        /^[+\\-*/%=<>!&|^~]+/,\n        /^[{}[\\]();:,.]/,\n      ],\n    };\n\n    const langPatterns = patterns[lang] || patterns.javascript;\n\n    while (remaining.length > 0) {\n      let matched = false;\n\n      for (let i = 0; i < langPatterns.length; i++) {\n        const match = remaining.match(langPatterns[i]);\n        if (match) {\n          const token = match[0];\n          let className = 'text-gray-300';\n\n          if (i === 0) className = 'text-[#C586C0]'; // keywords\n          else if (i === 1) className = 'text-[#569CD6]'; // constants\n          else if (i >= 2 && i <= 4) className = 'text-[#CE9178]'; // strings\n          else if (i === 5 || i === 6) className = 'text-[#6A9955]'; // comments\n          else if (i === 7) className = 'text-[#B5CEA8]'; // numbers\n          else if (i === 8) className = 'text-[#DCDCAA]'; // functions/identifiers\n          else if (i === 9) className = 'text-[#D4D4D4]'; // operators\n          else if (i === 10) className = 'text-[#D4D4D4]'; // punctuation\n\n          tokens.push(<span key={key++} className={className}>{token}</span>);\n          remaining = remaining.slice(token.length);\n          matched = true;\n          break;\n        }\n      }\n\n      if (!matched) {\n        tokens.push(<span key={key++}>{remaining[0]}</span>);\n        remaining = remaining.slice(1);\n      }\n    }\n\n    return tokens;\n  };\n\n  return lines.map((line, idx) => (\n    <div key={idx} className=\"table-row\">\n      <span className=\"table-cell pr-4 text-right select-none text-gray-600 border-r border-[#30363d]\" style={{ minWidth: '3em' }}>\n        {idx + 1}\n      </span>\n      <span className=\"table-cell pl-4\">\n        {line.trim() === '' ? <span>&nbsp;</span> : tokenize(line, language)}\n      </span>\n    </div>\n  ));\n};\n\nconst renderInlineMarkdown = (text: string): JSX.Element[] => {\n  const elements: JSX.Element[] = [];\n  let remaining = text;\n  let key = 0;\n\n  while (remaining.length > 0) {\n    // Bold\n    const boldMatch = remaining.match(/^\\*\\*(.+?)\\*\\*/);\n    if (boldMatch) {\n      elements.push(<strong key={key++} className=\"font-bold text-blue-400\">{boldMatch[1]}</strong>);\n      remaining = remaining.slice(boldMatch[0].length);\n      continue;\n    }\n\n    // Italic\n    const italicMatch = remaining.match(/^\\*(.+?)\\*/);\n    if (italicMatch) {\n      elements.push(<em key={key++} className=\"italic text-purple-400\">{italicMatch[1]}</em>);\n      remaining = remaining.slice(italicMatch[0].length);\n      continue;\n    }\n\n    // Inline code\n    const codeMatch = remaining.match(/^`(.+?)`/);\n    if (codeMatch) {\n      elements.push(\n        <code key={key++} className=\"bg-[#161b22] text-[#79c0ff] px-1.5 py-0.5 rounded text-sm font-mono border border-[#30363d]\">\n          {codeMatch[1]}\n        </code>\n      );\n      remaining = remaining.slice(codeMatch[0].length);\n      continue;\n    }\n\n    // Links\n    const linkMatch = remaining.match(/^\\[(.+?)\\]\\((.+?)\\)/);\n    if (linkMatch) {\n      elements.push(\n        <a key={key++} href={linkMatch[2]} className=\"text-[#58a6ff] hover:underline\" target=\"_blank\" rel=\"noopener noreferrer\">\n          {linkMatch[1]}\n        </a>\n      );\n      remaining = remaining.slice(linkMatch[0].length);\n      continue;\n    }\n\n    // Images\n    const imageMatch = remaining.match(/^!\\[(.+?)\\]\\((.+?)\\)/);\n    if (imageMatch) {\n      elements.push(\n        <img key={key++} src={imageMatch[2]} alt={imageMatch[1]} className=\"max-w-full h-auto rounded-lg border border-[#30363d] my-2\" />\n      );\n      remaining = remaining.slice(imageMatch[0].length);\n      continue;\n    }\n\n    // Regular text\n    elements.push(<span key={key++}>{remaining[0]}</span>);\n    remaining = remaining.slice(1);\n  }\n\n  return elements;\n};\n\nconst MarkdownRenderer = ({ markdown }: { markdown: string }) => {\n  const nodes = useMemo(() => parseMarkdown(markdown), [markdown]);\n\n  return (\n    <div className=\"prose prose-invert max-w-none\">\n      {nodes.map((node, idx) => {\n        switch (node.type) {\n          case 'heading':\n            const HeadingTag = `h${node.level}` as keyof JSX.IntrinsicElements;\n            const headingClasses = [\n              'text-4xl font-bold mb-4 mt-6 text-transparent bg-clip-text bg-gradient-to-r from-blue-400 to-purple-500',\n              'text-3xl font-bold mb-3 mt-5 text-gray-100 border-b border-[#30363d] pb-2',\n              'text-2xl font-semibold mb-3 mt-4 text-gray-200',\n              'text-xl font-semibold mb-2 mt-3 text-gray-300',\n              'text-lg font-medium mb-2 mt-2 text-gray-300',\n              'text-base font-medium mb-2 mt-2 text-gray-400',\n            ];\n            return (\n              <HeadingTag key={idx} className={headingClasses[(node.level || 1) - 1]}>\n                {renderInlineMarkdown(node.content || '')}\n              </HeadingTag>\n            );\n\n          case 'paragraph':\n            return (\n              <p key={idx} className=\"mb-4 text-gray-300 leading-relaxed\">\n                {renderInlineMarkdown(node.content || '')}\n              </p>\n            );\n\n          case 'codeblock':\n            return (\n              <div key={idx} className=\"mb-4 rounded-lg overflow-hidden bg-[#161b22] border border-[#30363d]\">\n                <div className=\"bg-[#1f2937] px-4 py-2 text-xs text-gray-400 font-mono border-b border-[#30363d] flex items-center justify-between\">\n                  <span>{node.language}</span>\n                  <div className=\"flex gap-2\">\n                    <div className=\"w-3 h-3 rounded-full bg-red-500\"></div>\n                    <div className=\"w-3 h-3 rounded-full bg-yellow-500\"></div>\n                    <div className=\"w-3 h-3 rounded-full bg-green-500\"></div>\n                  </div>\n                </div>\n                <pre className=\"p-4 overflow-x-auto\">\n                  <code className=\"font-mono text-sm table\">\n                    {highlightCode(node.content || '', node.language || 'text')}\n                  </code>\n                </pre>\n              </div>\n            );\n\n          case 'unorderedlist':\n            return (\n              <ul key={idx} className=\"mb-4 ml-6 space-y-2 list-disc marker:text-blue-400\">\n                {node.children?.map((child, childIdx) => (\n                  <li key={childIdx} className=\"text-gray-300 pl-2\">\n                    {renderInlineMarkdown(child.content || '')}\n                  </li>\n                ))}\n              </ul>\n            );\n\n          case 'orderedlist':\n            return (\n              <ol key={idx} className=\"mb-4 ml-6 space-y-2 list-decimal marker:text-purple-400 marker:font-semibold\">\n                {node.children?.map((child, childIdx) => (\n                  <li key={childIdx} className=\"text-gray-300 pl-2\">\n                    {renderInlineMarkdown(child.content || '')}\n                  </li>\n                ))}\n              </ol>\n            );\n\n          case 'blockquote':\n            return (\n              <blockquote key={idx} className=\"mb-4 pl-4 border-l-4 border-blue-500 bg-[#161b22] py-3 pr-4 rounded-r-lg\">\n                <p className=\"text-gray-300 italic\">\n                  {renderInlineMarkdown(node.content || '')}\n                </p>\n              </blockquote>\n            );\n\n          case 'hr':\n            return <hr key={idx} className=\"my-6 border-[#30363d]\" />;\n\n          default:\n            return null;\n        }\n      })}\n    </div>\n  );\n};\n\ninterface ToolbarButton {\n  id: string;\n  icon: any;\n  label: string;\n  action: string;\n}\n\nconst toolbarButtons: ToolbarButton[] = [\n  { id: 'bold', icon: Bold, label: 'Bold', action: '**text**' },\n  { id: 'italic', icon: Italic, label: 'Italic', action: '*text*' },\n  { id: 'code', icon: Code, label: 'Code', action: '`code`' },\n  { id: 'list', icon: List, label: 'Bullet List', action: '- item' },\n  { id: 'ordered', icon: ListOrdered, label: 'Numbered List', action: '1. item' },\n  { id: 'link', icon: Link, label: 'Link', action: '[text](url)' },\n  { id: 'image', icon: Image, label: 'Image', action: '![alt](url)' }\n];\n\n\nconst mockMarkdownContent = `# Welcome to Premium Markdown Editor\n\n## Features\n\nThis is a **bold** statement and this is *italic* text.\n\n### Code Blocks\n\n\\`\\`\\`javascript\nfunction greet(name) {\n  console.log(\\`Hello, \\${name}!\\`);\n  return true;\n}\n\\`\\`\\`\n\n\\`\\`\\`python\ndef calculate(x, y):\n    result = x + y\n    return result\n\\`\\`\\`\n\n### Lists\n\n- First item\n- Second item\n- Third item\n\n1. Numbered one\n2. Numbered two\n3. Numbered three\n\n### Inline Code\n\nUse \\`const variable = 'value'\\` for inline code.\n\n### Links and Images\n\n[Visit Example](https://example.com)\n\n> This is a blockquote with important information.\n\n---\n\n**End of document**\n`;\n\nexport default function MarkdownEditor() {\n  const [markdown, setMarkdown] = useState(mockMarkdownContent);\n  const [showPreview, setShowPreview] = useState(true);\n  const [cursorPosition, setCursorPosition] = useState(0);\n  // Calculate stats\n  const wordCount = markdown.trim() ? markdown.trim().split(/\\s+/).length : 0;\n  const charCount = markdown.length;\n  const readingTime = Math.ceil(wordCount / 200); // Average reading speed: 200 words per minute\n  const textareaRef = useRef<HTMLTextAreaElement>(null);\n\n  const handleMarkdownChange = useCallback((e: React.ChangeEvent<HTMLTextAreaElement>) => {\n    setMarkdown(e.target.value);\n    setCursorPosition(e.target.selectionStart);\n  }, []);\n\n  const togglePreview = useCallback(() => {\n    setShowPreview(prev => !prev);\n  }, []);\n\n  const handleToolbarAction = useCallback((action: string) => {\n    const textarea = textareaRef.current;\n    if (!textarea) return;\n\n    const start = textarea.selectionStart;\n    const end = textarea.selectionEnd;\n    const selectedText = markdown.substring(start, end);\n    const beforeText = markdown.substring(0, start);\n    const afterText = markdown.substring(end);\n\n    let newText = '';\n    let newCursorPos = start;\n\n    // Handle different markdown syntax patterns\n    if (action.includes('**text**')) {\n      // Bold\n      if (selectedText) {\n        newText = `${beforeText}**${selectedText}**${afterText}`;\n        newCursorPos = end + 4;\n      } else {\n        newText = `${beforeText}**text**${afterText}`;\n        newCursorPos = start + 2;\n      }\n    } else if (action.includes('*text*')) {\n      // Italic\n      if (selectedText) {\n        newText = `${beforeText}*${selectedText}*${afterText}`;\n        newCursorPos = end + 2;\n      } else {\n        newText = `${beforeText}*text*${afterText}`;\n        newCursorPos = start + 1;\n      }\n    } else if (action.includes('`code`')) {\n      // Inline code\n      if (selectedText) {\n        newText = `${beforeText}\\`${selectedText}\\`${afterText}`;\n        newCursorPos = end + 2;\n      } else {\n        newText = `${beforeText}\\`code\\`${afterText}`;\n        newCursorPos = start + 1;\n      }\n    } else if (action.includes('[text](url)')) {\n      // Link\n      if (selectedText) {\n        newText = `${beforeText}[${selectedText}](url)${afterText}`;\n        newCursorPos = end + selectedText.length + 3;\n      } else {\n        newText = `${beforeText}[text](url)${afterText}`;\n        newCursorPos = start + 1;\n      }\n    } else if (action.includes('![alt](url)')) {\n      // Image\n      if (selectedText) {\n        newText = `${beforeText}![${selectedText}](url)${afterText}`;\n        newCursorPos = end + selectedText.length + 4;\n      } else {\n        newText = `${beforeText}![alt](url)${afterText}`;\n        newCursorPos = start + 2;\n      }\n    } else if (action.includes('- item')) {\n      // Bullet list\n      const lineStart = markdown.lastIndexOf('\\n', start - 1) + 1;\n      newText = `${beforeText.substring(0, lineStart === 0 ? 0 : beforeText.length)}${lineStart === start ? '' : '\\n'}${action}${afterText}`;\n      newCursorPos = start + (lineStart === start ? 0 : 1) + action.length;\n    } else if (action.includes('1. item')) {\n      // Numbered list\n      const lineStart = markdown.lastIndexOf('\\n', start - 1) + 1;\n      newText = `${beforeText.substring(0, lineStart === 0 ? 0 : beforeText.length)}${lineStart === start ? '' : '\\n'}${action}${afterText}`;\n      newCursorPos = start + (lineStart === start ? 0 : 1) + action.length;\n    } else {\n      // Default: insert action as-is\n      newText = `${beforeText}${action}${afterText}`;\n      newCursorPos = start + action.length;\n    }\n\n    setMarkdown(newText);\n    \n    // Update cursor position and focus textarea\n    setTimeout(() => {\n      if (textarea) {\n        textarea.focus();\n        textarea.setSelectionRange(newCursorPos, newCursorPos);\n        setCursorPosition(newCursorPos);\n      }\n    }, 0);\n  }, [markdown, cursorPosition]);\n\n  return (\n    <div className=\"min-h-screen bg-[#0d1117] text-gray-100\">\n      <div className=\"container mx-auto px-4 py-6\">\n        {/* Header */}\n        <div className=\"mb-6 flex items-center justify-between\">\n          <h1 className=\"text-3xl font-bold bg-gradient-to-r from-blue-400 to-purple-500 bg-clip-text text-transparent\">\n            Premium Markdown Editor\n          </h1>\n          <Button\n            onClick={togglePreview}\n            variant=\"outline\"\n            className=\"bg-[#161b22] border-[#30363d] hover:bg-[#1f2937] text-gray-300\"\n          >\n            {showPreview ? <EyeOff className=\"w-4 h-4 mr-2\" /> : <Eye className=\"w-4 h-4 mr-2\" />}\n            {showPreview ? 'Hide Preview' : 'Show Preview'}\n          </Button>\n        </div>\n\n        {/* Floating Toolbar */}\n        <motion.div\n          initial={{ opacity: 0, y: -20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.3 }}\n          className=\"mb-6 bg-[#161b22] border border-[#30363d] rounded-lg p-3 shadow-xl\"\n        >\n          <div className=\"flex flex-wrap gap-2\">\n            {toolbarButtons.map((button, index) => (\n              <motion.div\n                key={button.id}\n                initial={{ opacity: 0, scale: 0.8 }}\n                animate={{ opacity: 1, scale: 1 }}\n                transition={{ delay: index * 0.05, duration: 0.2 }}\n                whileHover={{ scale: 1.1, y: -2 }}\n                whileTap={{ scale: 0.95 }}\n              >\n                <Button\n                  onClick={() => handleToolbarAction(button.action)}\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  className=\"bg-[#0d1117] border border-[#30363d] hover:bg-gradient-to-r hover:from-blue-500/20 hover:to-purple-500/20 hover:border-blue-400/50 text-gray-300 hover:text-white transition-all duration-200 group relative\"\n                  title={button.label}\n                >\n                  <button.icon className=\"w-4 h-4 group-hover:text-blue-400 transition-colors duration-200\" />\n                  <motion.span\n                    initial={{ opacity: 0, y: 10 }}\n                    whileHover={{ opacity: 1, y: 0 }}\n                    className=\"absolute -bottom-8 left-1/2 transform -translate-x-1/2 text-xs bg-[#1f2937] px-2 py-1 rounded border border-[#30363d] whitespace-nowrap pointer-events-none opacity-0 group-hover:opacity-100 transition-opacity duration-200\"\n                  >\n                    {button.label}\n                  </motion.span>\n                </Button>\n              </motion.div>\n            ))}\n          </div>\n        </motion.div>\n\n        {/* Editor Layout */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n          {/* Editor Panel */}\n          <motion.div\n            layout\n            className=\"relative\"\n          >\n            <div className=\"bg-[#0d1117] border border-[#30363d] rounded-lg overflow-hidden shadow-2xl\">\n              <div className=\"bg-[#161b22] px-4 py-3 border-b border-[#30363d] flex items-center justify-between\">\n                <span className=\"text-sm font-medium text-gray-400\">Editor</span>\n                <div className=\"flex gap-2\">\n                  <div className=\"w-3 h-3 rounded-full bg-red-500\"></div>\n                  <div className=\"w-3 h-3 rounded-full bg-yellow-500\"></div>\n                  <div className=\"w-3 h-3 rounded-full bg-green-500\"></div>\n                </div>\n              </div>\n              <textarea\n                value={markdown}\n                onChange={handleMarkdownChange}\n                className=\"w-full h-[600px] bg-[#0d1117] text-gray-100 p-6 font-mono text-sm resize-none focus:outline-none\"\n                placeholder=\"Start writing your markdown...\"\n                spellCheck={false}\n              />\n            </div>\n          </motion.div>\n\n          {/* Preview Panel */}\n          <AnimatePresence mode=\"wait\">\n            {showPreview && (\n              <motion.div\n                initial={{ opacity: 0, x: 20 }}\n                animate={{ opacity: 1, x: 0 }}\n                exit={{ opacity: 0, x: 20 }}\n                transition={{ duration: 0.3 }}\n                className=\"relative\"\n              >\n                <div className=\"bg-[#0d1117] border border-[#30363d] rounded-lg overflow-hidden shadow-2xl\">\n                  <div className=\"bg-[#161b22] px-4 py-3 border-b border-[#30363d]\">\n                    <span className=\"text-sm font-medium text-gray-400\">Preview</span>\n                  </div>\n                  <div className=\"p-6 h-[600px] overflow-y-auto\">\n                    <MarkdownRenderer markdown={markdown} />\n                  </div>\n                </div>\n              </motion.div>\n            )}\n          </AnimatePresence>\n        </div>\n\n        {/* Stats Bar */}\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ delay: 0.2, duration: 0.4 }}\n          className=\"mt-6 bg-[#161b22] border border-[#30363d] rounded-lg p-4\"\n        >\n          <div className=\"flex items-center justify-center gap-8 text-sm\">\n            <div className=\"flex items-center gap-2\">\n              <span className=\"text-gray-400\">Words:</span>\n              <span className=\"font-semibold text-blue-400\">{wordCount}</span>\n            </div>\n            <div className=\"w-px h-4 bg-[#30363d]\"></div>\n            <div className=\"flex items-center gap-2\">\n              <span className=\"text-gray-400\">Characters:</span>\n              <span className=\"font-semibold text-purple-400\">{charCount}</span>\n            </div>\n            <div className=\"w-px h-4 bg-[#30363d]\"></div>\n            <div className=\"flex items-center gap-2\">\n              <span className=\"text-gray-400\">Reading Time:</span>\n              <span className=\"font-semibold text-green-400\">\n                {readingTime} {readingTime === 1 ? 'min' : 'mins'}\n              </span>\n            </div>\n          </div>\n        </motion.div>\n      </div>\n    </div>\n  );\n}",
  "error": null,
  "overall_score": 61,
  "code_quality_score": 18,
  "architecture_score": 16,
  "performance_score": 15,
  "accessibility_score": 12,
  "metadata": {
    "document_id": "eval_room_e1b40fa2c59e",
    "prompt_category": "productivity",
    "prompt_complexity": 8.0
  },
  "raw_response": {
    "document_id": "eval_room_e1b40fa2c59e",
    "mode": "parallel",
    "prompt": "Create a premium markdown editor with dark theme, syntax highlighting with vibrant colors, smooth live preview transitions, floating toolbar with hover effects, and code block styling like VS Code",
    "content": "import { useState, useCallback } from 'react';\nimport { useMemo } from 'react';\nimport { useRef } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Bold, Italic, Code, List, ListOrdered, Link, Image, Eye, EyeOff } from 'lucide-react';\nimport { motion, AnimatePresence } from 'framer-motion';\n\n// Markdown parser and renderer\ninterface MarkdownNode {\n  type: string;\n  content?: string;\n  children?: MarkdownNode[];\n  language?: string;\n  level?: number;\n  href?: string;\n  alt?: string;\n}\n\nconst parseMarkdown = (text: string): MarkdownNode[] => {\n  const lines = text.split('\\n');\n  const nodes: MarkdownNode[] = [];\n  let i = 0;\n\n  while (i < lines.length) {\n    const line = lines[i];\n\n    // Code blocks\n    if (line.startsWith('```')) {\n      const language = line.slice(3).trim() || 'text';\n      const codeLines: string[] = [];\n      i++;\n      while (i < lines.length && !lines[i].startsWith('```')) {\n        codeLines.push(lines[i]);\n        i++;\n      }\n      nodes.push({ type: 'codeblock', content: codeLines.join('\\n'), language });\n      i++;\n      continue;\n    }\n\n    // Headers\n    if (line.startsWith('#')) {\n      const level = line.match(/^#+/)?.[0].length || 1;\n      const content = line.replace(/^#+\\s*/, '');\n      nodes.push({ type: 'heading', level, content: parseInline(content) });\n      i++;\n      continue;\n    }\n\n    // Horizontal rule\n    if (line.match(/^---+$/)) {\n      nodes.push({ type: 'hr' });\n      i++;\n      continue;\n    }\n\n    // Blockquote\n    if (line.startsWith('>')) {\n      const content = line.replace(/^>\\s*/, '');\n      nodes.push({ type: 'blockquote', content: parseInline(content) });\n      i++;\n      continue;\n    }\n\n    // Ordered list\n    if (line.match(/^\\d+\\.\\s/)) {\n      const items: string[] = [];\n      while (i < lines.length && lines[i].match(/^\\d+\\.\\s/)) {\n        items.push(lines[i].replace(/^\\d+\\.\\s*/, ''));\n        i++;\n      }\n      nodes.push({ type: 'orderedlist', children: items.map(item => ({ type: 'listitem', content: parseInline(item) })) });\n      continue;\n    }\n\n    // Unordered list\n    if (line.match(/^[-*]\\s/)) {\n      const items: string[] = [];\n      while (i < lines.length && lines[i].match(/^[-*]\\s/)) {\n        items.push(lines[i].replace(/^[-*]\\s*/, ''));\n        i++;\n      }\n      nodes.push({ type: 'unorderedlist', children: items.map(item => ({ type: 'listitem', content: parseInline(item) })) });\n      continue;\n    }\n\n    // Empty line\n    if (line.trim() === '') {\n      i++;\n      continue;\n    }\n\n    // Paragraph\n    nodes.push({ type: 'paragraph', content: parseInline(line) });\n    i++;\n  }\n\n  return nodes;\n};\n\nconst parseInline = (text: string): string => {\n  return text;\n};\n\nconst highlightCode = (code: string, language: string): JSX.Element[] => {\n  const lines = code.split('\\n');\n  \n  const tokenize = (line: string, lang: string): JSX.Element[] => {\n    const tokens: JSX.Element[] = [];\n    let remaining = line;\n    let key = 0;\n\n    const patterns: { [key: string]: RegExp[] } = {\n      javascript: [\n        /^(function|const|let|var|return|if|else|for|while|class|import|export|from|default|async|await|new|this|typeof|instanceof)\\b/,\n        /^(true|false|null|undefined)\\b/,\n        /^\"([^\"\\\\]|\\\\.)*\"/,\n        /^'([^'\\\\]|\\\\.)*'/,\n        /^`([^`\\\\]|\\\\.)*`/,\n        /^\\/\\/.*$/,\n        /^\\/\\*[\\s\\S]*?\\*\\//,\n        /^\\d+/,\n        /^[a-zA-Z_$][a-zA-Z0-9_$]*/,\n        /^[+\\-*/%=<>!&|^~?:]+/,\n        /^[{}[\\]();,.]/,\n      ],\n      python: [\n        /^(def|class|return|if|elif|else|for|while|import|from|as|with|try|except|finally|raise|pass|break|continue|lambda|yield|async|await)\\b/,\n        /^(True|False|None)\\b/,\n        /^\"([^\"\\\\]|\\\\.)*\"/,\n        /^'([^'\\\\]|\\\\.)*'/,\n        /^#.*$/,\n        /^\\d+/,\n        /^[a-zA-Z_][a-zA-Z0-9_]*/,\n        /^[+\\-*/%=<>!&|^~]+/,\n        /^[{}[\\]();:,.]/,\n      ],\n    };\n\n    const langPatterns = patterns[lang] || patterns.javascript;\n\n    while (remaining.length > 0) {\n      let matched = false;\n\n      for (let i = 0; i < langPatterns.length; i++) {\n        const match = remaining.match(langPatterns[i]);\n        if (match) {\n          const token = match[0];\n          let className = 'text-gray-300';\n\n          if (i === 0) className = 'text-[#C586C0]'; // keywords\n          else if (i === 1) className = 'text-[#569CD6]'; // constants\n          else if (i >= 2 && i <= 4) className = 'text-[#CE9178]'; // strings\n          else if (i === 5 || i === 6) className = 'text-[#6A9955]'; // comments\n          else if (i === 7) className = 'text-[#B5CEA8]'; // numbers\n          else if (i === 8) className = 'text-[#DCDCAA]'; // functions/identifiers\n          else if (i === 9) className = 'text-[#D4D4D4]'; // operators\n          else if (i === 10) className = 'text-[#D4D4D4]'; // punctuation\n\n          tokens.push(<span key={key++} className={className}>{token}</span>);\n          remaining = remaining.slice(token.length);\n          matched = true;\n          break;\n        }\n      }\n\n      if (!matched) {\n        tokens.push(<span key={key++}>{remaining[0]}</span>);\n        remaining = remaining.slice(1);\n      }\n    }\n\n    return tokens;\n  };\n\n  return lines.map((line, idx) => (\n    <div key={idx} className=\"table-row\">\n      <span className=\"table-cell pr-4 text-right select-none text-gray-600 border-r border-[#30363d]\" style={{ minWidth: '3em' }}>\n        {idx + 1}\n      </span>\n      <span className=\"table-cell pl-4\">\n        {line.trim() === '' ? <span>&nbsp;</span> : tokenize(line, language)}\n      </span>\n    </div>\n  ));\n};\n\nconst renderInlineMarkdown = (text: string): JSX.Element[] => {\n  const elements: JSX.Element[] = [];\n  let remaining = text;\n  let key = 0;\n\n  while (remaining.length > 0) {\n    // Bold\n    const boldMatch = remaining.match(/^\\*\\*(.+?)\\*\\*/);\n    if (boldMatch) {\n      elements.push(<strong key={key++} className=\"font-bold text-blue-400\">{boldMatch[1]}</strong>);\n      remaining = remaining.slice(boldMatch[0].length);\n      continue;\n    }\n\n    // Italic\n    const italicMatch = remaining.match(/^\\*(.+?)\\*/);\n    if (italicMatch) {\n      elements.push(<em key={key++} className=\"italic text-purple-400\">{italicMatch[1]}</em>);\n      remaining = remaining.slice(italicMatch[0].length);\n      continue;\n    }\n\n    // Inline code\n    const codeMatch = remaining.match(/^`(.+?)`/);\n    if (codeMatch) {\n      elements.push(\n        <code key={key++} className=\"bg-[#161b22] text-[#79c0ff] px-1.5 py-0.5 rounded text-sm font-mono border border-[#30363d]\">\n          {codeMatch[1]}\n        </code>\n      );\n      remaining = remaining.slice(codeMatch[0].length);\n      continue;\n    }\n\n    // Links\n    const linkMatch = remaining.match(/^\\[(.+?)\\]\\((.+?)\\)/);\n    if (linkMatch) {\n      elements.push(\n        <a key={key++} href={linkMatch[2]} className=\"text-[#58a6ff] hover:underline\" target=\"_blank\" rel=\"noopener noreferrer\">\n          {linkMatch[1]}\n        </a>\n      );\n      remaining = remaining.slice(linkMatch[0].length);\n      continue;\n    }\n\n    // Images\n    const imageMatch = remaining.match(/^!\\[(.+?)\\]\\((.+?)\\)/);\n    if (imageMatch) {\n      elements.push(\n        <img key={key++} src={imageMatch[2]} alt={imageMatch[1]} className=\"max-w-full h-auto rounded-lg border border-[#30363d] my-2\" />\n      );\n      remaining = remaining.slice(imageMatch[0].length);\n      continue;\n    }\n\n    // Regular text\n    elements.push(<span key={key++}>{remaining[0]}</span>);\n    remaining = remaining.slice(1);\n  }\n\n  return elements;\n};\n\nconst MarkdownRenderer = ({ markdown }: { markdown: string }) => {\n  const nodes = useMemo(() => parseMarkdown(markdown), [markdown]);\n\n  return (\n    <div className=\"prose prose-invert max-w-none\">\n      {nodes.map((node, idx) => {\n        switch (node.type) {\n          case 'heading':\n            const HeadingTag = `h${node.level}` as keyof JSX.IntrinsicElements;\n            const headingClasses = [\n              'text-4xl font-bold mb-4 mt-6 text-transparent bg-clip-text bg-gradient-to-r from-blue-400 to-purple-500',\n              'text-3xl font-bold mb-3 mt-5 text-gray-100 border-b border-[#30363d] pb-2',\n              'text-2xl font-semibold mb-3 mt-4 text-gray-200',\n              'text-xl font-semibold mb-2 mt-3 text-gray-300',\n              'text-lg font-medium mb-2 mt-2 text-gray-300',\n              'text-base font-medium mb-2 mt-2 text-gray-400',\n            ];\n            return (\n              <HeadingTag key={idx} className={headingClasses[(node.level || 1) - 1]}>\n                {renderInlineMarkdown(node.content || '')}\n              </HeadingTag>\n            );\n\n          case 'paragraph':\n            return (\n              <p key={idx} className=\"mb-4 text-gray-300 leading-relaxed\">\n                {renderInlineMarkdown(node.content || '')}\n              </p>\n            );\n\n          case 'codeblock':\n            return (\n              <div key={idx} className=\"mb-4 rounded-lg overflow-hidden bg-[#161b22] border border-[#30363d]\">\n                <div className=\"bg-[#1f2937] px-4 py-2 text-xs text-gray-400 font-mono border-b border-[#30363d] flex items-center justify-between\">\n                  <span>{node.language}</span>\n                  <div className=\"flex gap-2\">\n                    <div className=\"w-3 h-3 rounded-full bg-red-500\"></div>\n                    <div className=\"w-3 h-3 rounded-full bg-yellow-500\"></div>\n                    <div className=\"w-3 h-3 rounded-full bg-green-500\"></div>\n                  </div>\n                </div>\n                <pre className=\"p-4 overflow-x-auto\">\n                  <code className=\"font-mono text-sm table\">\n                    {highlightCode(node.content || '', node.language || 'text')}\n                  </code>\n                </pre>\n              </div>\n            );\n\n          case 'unorderedlist':\n            return (\n              <ul key={idx} className=\"mb-4 ml-6 space-y-2 list-disc marker:text-blue-400\">\n                {node.children?.map((child, childIdx) => (\n                  <li key={childIdx} className=\"text-gray-300 pl-2\">\n                    {renderInlineMarkdown(child.content || '')}\n                  </li>\n                ))}\n              </ul>\n            );\n\n          case 'orderedlist':\n            return (\n              <ol key={idx} className=\"mb-4 ml-6 space-y-2 list-decimal marker:text-purple-400 marker:font-semibold\">\n                {node.children?.map((child, childIdx) => (\n                  <li key={childIdx} className=\"text-gray-300 pl-2\">\n                    {renderInlineMarkdown(child.content || '')}\n                  </li>\n                ))}\n              </ol>\n            );\n\n          case 'blockquote':\n            return (\n              <blockquote key={idx} className=\"mb-4 pl-4 border-l-4 border-blue-500 bg-[#161b22] py-3 pr-4 rounded-r-lg\">\n                <p className=\"text-gray-300 italic\">\n                  {renderInlineMarkdown(node.content || '')}\n                </p>\n              </blockquote>\n            );\n\n          case 'hr':\n            return <hr key={idx} className=\"my-6 border-[#30363d]\" />;\n\n          default:\n            return null;\n        }\n      })}\n    </div>\n  );\n};\n\ninterface ToolbarButton {\n  id: string;\n  icon: any;\n  label: string;\n  action: string;\n}\n\nconst toolbarButtons: ToolbarButton[] = [\n  { id: 'bold', icon: Bold, label: 'Bold', action: '**text**' },\n  { id: 'italic', icon: Italic, label: 'Italic', action: '*text*' },\n  { id: 'code', icon: Code, label: 'Code', action: '`code`' },\n  { id: 'list', icon: List, label: 'Bullet List', action: '- item' },\n  { id: 'ordered', icon: ListOrdered, label: 'Numbered List', action: '1. item' },\n  { id: 'link', icon: Link, label: 'Link', action: '[text](url)' },\n  { id: 'image', icon: Image, label: 'Image', action: '![alt](url)' }\n];\n\n\nconst mockMarkdownContent = `# Welcome to Premium Markdown Editor\n\n## Features\n\nThis is a **bold** statement and this is *italic* text.\n\n### Code Blocks\n\n\\`\\`\\`javascript\nfunction greet(name) {\n  console.log(\\`Hello, \\${name}!\\`);\n  return true;\n}\n\\`\\`\\`\n\n\\`\\`\\`python\ndef calculate(x, y):\n    result = x + y\n    return result\n\\`\\`\\`\n\n### Lists\n\n- First item\n- Second item\n- Third item\n\n1. Numbered one\n2. Numbered two\n3. Numbered three\n\n### Inline Code\n\nUse \\`const variable = 'value'\\` for inline code.\n\n### Links and Images\n\n[Visit Example](https://example.com)\n\n> This is a blockquote with important information.\n\n---\n\n**End of document**\n`;\n\nexport default function MarkdownEditor() {\n  const [markdown, setMarkdown] = useState(mockMarkdownContent);\n  const [showPreview, setShowPreview] = useState(true);\n  const [cursorPosition, setCursorPosition] = useState(0);\n  // Calculate stats\n  const wordCount = markdown.trim() ? markdown.trim().split(/\\s+/).length : 0;\n  const charCount = markdown.length;\n  const readingTime = Math.ceil(wordCount / 200); // Average reading speed: 200 words per minute\n  const textareaRef = useRef<HTMLTextAreaElement>(null);\n\n  const handleMarkdownChange = useCallback((e: React.ChangeEvent<HTMLTextAreaElement>) => {\n    setMarkdown(e.target.value);\n    setCursorPosition(e.target.selectionStart);\n  }, []);\n\n  const togglePreview = useCallback(() => {\n    setShowPreview(prev => !prev);\n  }, []);\n\n  const handleToolbarAction = useCallback((action: string) => {\n    const textarea = textareaRef.current;\n    if (!textarea) return;\n\n    const start = textarea.selectionStart;\n    const end = textarea.selectionEnd;\n    const selectedText = markdown.substring(start, end);\n    const beforeText = markdown.substring(0, start);\n    const afterText = markdown.substring(end);\n\n    let newText = '';\n    let newCursorPos = start;\n\n    // Handle different markdown syntax patterns\n    if (action.includes('**text**')) {\n      // Bold\n      if (selectedText) {\n        newText = `${beforeText}**${selectedText}**${afterText}`;\n        newCursorPos = end + 4;\n      } else {\n        newText = `${beforeText}**text**${afterText}`;\n        newCursorPos = start + 2;\n      }\n    } else if (action.includes('*text*')) {\n      // Italic\n      if (selectedText) {\n        newText = `${beforeText}*${selectedText}*${afterText}`;\n        newCursorPos = end + 2;\n      } else {\n        newText = `${beforeText}*text*${afterText}`;\n        newCursorPos = start + 1;\n      }\n    } else if (action.includes('`code`')) {\n      // Inline code\n      if (selectedText) {\n        newText = `${beforeText}\\`${selectedText}\\`${afterText}`;\n        newCursorPos = end + 2;\n      } else {\n        newText = `${beforeText}\\`code\\`${afterText}`;\n        newCursorPos = start + 1;\n      }\n    } else if (action.includes('[text](url)')) {\n      // Link\n      if (selectedText) {\n        newText = `${beforeText}[${selectedText}](url)${afterText}`;\n        newCursorPos = end + selectedText.length + 3;\n      } else {\n        newText = `${beforeText}[text](url)${afterText}`;\n        newCursorPos = start + 1;\n      }\n    } else if (action.includes('![alt](url)')) {\n      // Image\n      if (selectedText) {\n        newText = `${beforeText}![${selectedText}](url)${afterText}`;\n        newCursorPos = end + selectedText.length + 4;\n      } else {\n        newText = `${beforeText}![alt](url)${afterText}`;\n        newCursorPos = start + 2;\n      }\n    } else if (action.includes('- item')) {\n      // Bullet list\n      const lineStart = markdown.lastIndexOf('\\n', start - 1) + 1;\n      newText = `${beforeText.substring(0, lineStart === 0 ? 0 : beforeText.length)}${lineStart === start ? '' : '\\n'}${action}${afterText}`;\n      newCursorPos = start + (lineStart === start ? 0 : 1) + action.length;\n    } else if (action.includes('1. item')) {\n      // Numbered list\n      const lineStart = markdown.lastIndexOf('\\n', start - 1) + 1;\n      newText = `${beforeText.substring(0, lineStart === 0 ? 0 : beforeText.length)}${lineStart === start ? '' : '\\n'}${action}${afterText}`;\n      newCursorPos = start + (lineStart === start ? 0 : 1) + action.length;\n    } else {\n      // Default: insert action as-is\n      newText = `${beforeText}${action}${afterText}`;\n      newCursorPos = start + action.length;\n    }\n\n    setMarkdown(newText);\n    \n    // Update cursor position and focus textarea\n    setTimeout(() => {\n      if (textarea) {\n        textarea.focus();\n        textarea.setSelectionRange(newCursorPos, newCursorPos);\n        setCursorPosition(newCursorPos);\n      }\n    }, 0);\n  }, [markdown, cursorPosition]);\n\n  return (\n    <div className=\"min-h-screen bg-[#0d1117] text-gray-100\">\n      <div className=\"container mx-auto px-4 py-6\">\n        {/* Header */}\n        <div className=\"mb-6 flex items-center justify-between\">\n          <h1 className=\"text-3xl font-bold bg-gradient-to-r from-blue-400 to-purple-500 bg-clip-text text-transparent\">\n            Premium Markdown Editor\n          </h1>\n          <Button\n            onClick={togglePreview}\n            variant=\"outline\"\n            className=\"bg-[#161b22] border-[#30363d] hover:bg-[#1f2937] text-gray-300\"\n          >\n            {showPreview ? <EyeOff className=\"w-4 h-4 mr-2\" /> : <Eye className=\"w-4 h-4 mr-2\" />}\n            {showPreview ? 'Hide Preview' : 'Show Preview'}\n          </Button>\n        </div>\n\n        {/* Floating Toolbar */}\n        <motion.div\n          initial={{ opacity: 0, y: -20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.3 }}\n          className=\"mb-6 bg-[#161b22] border border-[#30363d] rounded-lg p-3 shadow-xl\"\n        >\n          <div className=\"flex flex-wrap gap-2\">\n            {toolbarButtons.map((button, index) => (\n              <motion.div\n                key={button.id}\n                initial={{ opacity: 0, scale: 0.8 }}\n                animate={{ opacity: 1, scale: 1 }}\n                transition={{ delay: index * 0.05, duration: 0.2 }}\n                whileHover={{ scale: 1.1, y: -2 }}\n                whileTap={{ scale: 0.95 }}\n              >\n                <Button\n                  onClick={() => handleToolbarAction(button.action)}\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  className=\"bg-[#0d1117] border border-[#30363d] hover:bg-gradient-to-r hover:from-blue-500/20 hover:to-purple-500/20 hover:border-blue-400/50 text-gray-300 hover:text-white transition-all duration-200 group relative\"\n                  title={button.label}\n                >\n                  <button.icon className=\"w-4 h-4 group-hover:text-blue-400 transition-colors duration-200\" />\n                  <motion.span\n                    initial={{ opacity: 0, y: 10 }}\n                    whileHover={{ opacity: 1, y: 0 }}\n                    className=\"absolute -bottom-8 left-1/2 transform -translate-x-1/2 text-xs bg-[#1f2937] px-2 py-1 rounded border border-[#30363d] whitespace-nowrap pointer-events-none opacity-0 group-hover:opacity-100 transition-opacity duration-200\"\n                  >\n                    {button.label}\n                  </motion.span>\n                </Button>\n              </motion.div>\n            ))}\n          </div>\n        </motion.div>\n\n        {/* Editor Layout */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n          {/* Editor Panel */}\n          <motion.div\n            layout\n            className=\"relative\"\n          >\n            <div className=\"bg-[#0d1117] border border-[#30363d] rounded-lg overflow-hidden shadow-2xl\">\n              <div className=\"bg-[#161b22] px-4 py-3 border-b border-[#30363d] flex items-center justify-between\">\n                <span className=\"text-sm font-medium text-gray-400\">Editor</span>\n                <div className=\"flex gap-2\">\n                  <div className=\"w-3 h-3 rounded-full bg-red-500\"></div>\n                  <div className=\"w-3 h-3 rounded-full bg-yellow-500\"></div>\n                  <div className=\"w-3 h-3 rounded-full bg-green-500\"></div>\n                </div>\n              </div>\n              <textarea\n                value={markdown}\n                onChange={handleMarkdownChange}\n                className=\"w-full h-[600px] bg-[#0d1117] text-gray-100 p-6 font-mono text-sm resize-none focus:outline-none\"\n                placeholder=\"Start writing your markdown...\"\n                spellCheck={false}\n              />\n            </div>\n          </motion.div>\n\n          {/* Preview Panel */}\n          <AnimatePresence mode=\"wait\">\n            {showPreview && (\n              <motion.div\n                initial={{ opacity: 0, x: 20 }}\n                animate={{ opacity: 1, x: 0 }}\n                exit={{ opacity: 0, x: 20 }}\n                transition={{ duration: 0.3 }}\n                className=\"relative\"\n              >\n                <div className=\"bg-[#0d1117] border border-[#30363d] rounded-lg overflow-hidden shadow-2xl\">\n                  <div className=\"bg-[#161b22] px-4 py-3 border-b border-[#30363d]\">\n                    <span className=\"text-sm font-medium text-gray-400\">Preview</span>\n                  </div>\n                  <div className=\"p-6 h-[600px] overflow-y-auto\">\n                    <MarkdownRenderer markdown={markdown} />\n                  </div>\n                </div>\n              </motion.div>\n            )}\n          </AnimatePresence>\n        </div>\n\n        {/* Stats Bar */}\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ delay: 0.2, duration: 0.4 }}\n          className=\"mt-6 bg-[#161b22] border border-[#30363d] rounded-lg p-4\"\n        >\n          <div className=\"flex items-center justify-center gap-8 text-sm\">\n            <div className=\"flex items-center gap-2\">\n              <span className=\"text-gray-400\">Words:</span>\n              <span className=\"font-semibold text-blue-400\">{wordCount}</span>\n            </div>\n            <div className=\"w-px h-4 bg-[#30363d]\"></div>\n            <div className=\"flex items-center gap-2\">\n              <span className=\"text-gray-400\">Characters:</span>\n              <span className=\"font-semibold text-purple-400\">{charCount}</span>\n            </div>\n            <div className=\"w-px h-4 bg-[#30363d]\"></div>\n            <div className=\"flex items-center gap-2\">\n              <span className=\"text-gray-400\">Reading Time:</span>\n              <span className=\"font-semibold text-green-400\">\n                {readingTime} {readingTime === 1 ? 'min' : 'mins'}\n              </span>\n            </div>\n          </div>\n        </motion.div>\n      </div>\n    </div>\n  );\n}",
    "error": null,
    "elapsed_time": 89.3581337928772,
    "success": true
  }
}