{
  "prompt_id": "algorithm_visualizer",
  "prompt_name": "Algorithm Visualizer",
  "mode": "parallel",
  "run_number": 17,
  "timestamp": "2025-10-14T01:36:04.960999",
  "response_time": 109.4065580368042,
  "total_tokens": null,
  "response_content": "import { useState, useCallback } from 'react';\nimport { useEffect } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Slider } from '@/components/ui/slider';\nimport { Play, Pause, RotateCcw, Zap, BarChart3 } from 'lucide-react';\nimport { motion } from 'framer-motion';\n\ninterface ArrayElement {\n  value: number;\n  id: string;\n  isComparing?: boolean;\n  isSwapping?: boolean;\n  isSorted?: boolean;\n}\n\ninterface AlgorithmStep {\n  array: ArrayElement[];\n  comparingIndices: number[];\n  swappingIndices: number[];\n  sortedIndices: number[];\n}\n\ntype AlgorithmType = 'bubble' | 'quick' | 'merge' | 'insertion';\n\nconst NEON_COLORS = [\n  '#00ffff',\n  '#ff00ff', \n  '#00ff00',\n  '#ffff00',\n  '#ff0066',\n  '#00ffaa'\n];\n\nconst mockAlgorithms = [\n  { id: 'bubble', name: 'Bubble Sort', complexity: 'O(n\u00b2)' },\n  { id: 'quick', name: 'Quick Sort', complexity: 'O(n log n)' },\n  { id: 'merge', name: 'Merge Sort', complexity: 'O(n log n)' },\n  { id: 'insertion', name: 'Insertion Sort', complexity: 'O(n\u00b2)' }\n];\n\nexport default function AlgorithmVisualizer() {\n  const [array, setArray] = useState<ArrayElement[]>([]);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [speed, setSpeed] = useState([50]);\n  const [arraySize, setArraySize] = useState([20]);\n  const [selectedAlgorithm, setSelectedAlgorithm] = useState<AlgorithmType>('bubble');\n  const [currentStep, setCurrentStep] = useState(0);\n  const [steps, setSteps] = useState<AlgorithmStep[]>([]);\n  const [comparisons, setComparisons] = useState(0);\n  const [swaps, setSwaps] = useState(0);\n  const [progress, setProgress] = useState(0);\n\n  const generateRandomArray = useCallback(() => {\n    const newArray: ArrayElement[] = Array.from({ length: arraySize[0] }, (_, index) => ({\n      value: Math.floor(Math.random() * 100) + 5,\n      id: `element-${index}-${Date.now()}`,\n      isComparing: false,\n      isSwapping: false,\n      isSorted: false\n    }));\n    setArray(newArray);\n    setSteps([]);\n    setCurrentStep(0);\n    setIsPlaying(false);\n  }, [arraySize]);\n\n  const resetVisualization = useCallback(() => {\n\n    setIsPlaying(false);\n    setCurrentStep(0);\n    setSteps([]);\n    generateRandomArray();  }, [generateRandomArray]);\n\n  const animateSteps = useCallback(() => {\n    if (currentStep >= steps.length) {\n      setIsPlaying(false);\n      return;\n    }\n\n    const step = steps[currentStep];\n    setArray(step.array);\n    setCurrentStep(prev => prev + 1);\n  }, [currentStep, steps]);\n\n  const startVisualization = useCallback(() => {    if (steps.length === 0) return;\n    if (currentStep >= steps.length) {\n      setCurrentStep(0);\n    }\n    setIsPlaying(true);\n    \n  }, [steps, speed, currentStep]);\n  useEffect(() => {\n    if (!isPlaying) return;\n\n    const delay = 1000 - (speed[0] * 9.5);\n    const timer = setTimeout(() => {\n      animateSteps();\n    }, delay);\n\n    return () => clearTimeout(timer);\n  }, [isPlaying, speed, animateSteps]);\n\n  const pauseVisualization = useCallback(() => {\n\n    setIsPlaying(false);\n  }, []);\n\n  const generateSortingSteps = useCallback((algorithm: AlgorithmType) => {\n    const algorithmArray = [...array];\n    const generatedSteps: AlgorithmStep[] = [];\n\n    const addStep = (arr: ArrayElement[], comparing: number[] = [], swapping: number[] = [], sorted: number[] = []) => {\n      generatedSteps.push({\n        array: arr.map(el => ({ ...el })),\n        comparingIndices: [...comparing],\n        swappingIndices: [...swapping],\n        sortedIndices: [...sorted]\n      });\n    };\n\n    // Initial state\n    addStep(algorithmArray);\n\n    switch (algorithm) {\n      case 'bubble': {\n        const arr = [...algorithmArray];\n        const n = arr.length;\n        const sortedSet = new Set<number>();\n\n        for (let i = 0; i < n - 1; i++) {\n          for (let j = 0; j < n - i - 1; j++) {\n            // Comparing\n            addStep(arr, [j, j + 1], [], Array.from(sortedSet));\n\n            if (arr[j].value > arr[j + 1].value) {\n              // Swapping\n              addStep(arr, [], [j, j + 1], Array.from(sortedSet));\n              [arr[j], arr[j + 1]] = [arr[j + 1], arr[j]];\n              addStep(arr, [], [], Array.from(sortedSet));\n            }\n          }\n          sortedSet.add(n - i - 1);\n          addStep(arr, [], [], Array.from(sortedSet));\n        }\n        sortedSet.add(0);\n        addStep(arr, [], [], Array.from(sortedSet));\n        break;\n      }\n\n      case 'insertion': {\n        const arr = [...algorithmArray];\n        const n = arr.length;\n        const sortedSet = new Set<number>([0]);\n        addStep(arr, [], [], [0]);\n\n        for (let i = 1; i < n; i++) {\n          const key = arr[i];\n          let j = i - 1;\n\n          addStep(arr, [i], [], Array.from(sortedSet));\n\n          while (j >= 0 && arr[j].value > key.value) {\n            addStep(arr, [j, j + 1], [], Array.from(sortedSet));\n            addStep(arr, [], [j, j + 1], Array.from(sortedSet));\n            arr[j + 1] = arr[j];\n            addStep(arr, [], [], Array.from(sortedSet));\n            j--;\n          }\n          arr[j + 1] = key;\n          sortedSet.add(i);\n          addStep(arr, [], [], Array.from(sortedSet));\n        }\n        break;\n      }\n\n      case 'quick': {\n        const arr = [...algorithmArray];\n        const sortedSet = new Set<number>();\n\n        const partition = (low: number, high: number): number => {\n          const pivot = arr[high].value;\n          addStep(arr, [high], [], Array.from(sortedSet));\n          let i = low - 1;\n\n          for (let j = low; j < high; j++) {\n            addStep(arr, [j, high], [], Array.from(sortedSet));\n            if (arr[j].value < pivot) {\n              i++;\n              if (i !== j) {\n                addStep(arr, [], [i, j], Array.from(sortedSet));\n                [arr[i], arr[j]] = [arr[j], arr[i]];\n                addStep(arr, [], [], Array.from(sortedSet));\n              }\n            }\n          }\n\n          addStep(arr, [], [i + 1, high], Array.from(sortedSet));\n          [arr[i + 1], arr[high]] = [arr[high], arr[i + 1]];\n          sortedSet.add(i + 1);\n          addStep(arr, [], [], Array.from(sortedSet));\n          return i + 1;\n        };\n\n        const quickSort = (low: number, high: number) => {\n          if (low < high) {\n            const pi = partition(low, high);\n            quickSort(low, pi - 1);\n            quickSort(pi + 1, high);\n          } else if (low === high) {\n            sortedSet.add(low);\n            addStep(arr, [], [], Array.from(sortedSet));\n          }\n        };\n\n        quickSort(0, arr.length - 1);\n        break;\n      }\n\n      case 'merge': {\n        const arr = [...algorithmArray];\n        const sortedSet = new Set<number>();\n\n        const merge = (left: number, mid: number, right: number) => {\n          const leftArr = arr.slice(left, mid + 1);\n          const rightArr = arr.slice(mid + 1, right + 1);\n          let i = 0, j = 0, k = left;\n\n          while (i < leftArr.length && j < rightArr.length) {\n            addStep(arr, [left + i, mid + 1 + j], [], Array.from(sortedSet));\n\n            if (leftArr[i].value <= rightArr[j].value) {\n              arr[k] = leftArr[i];\n              i++;\n            } else {\n              arr[k] = rightArr[j];\n              j++;\n            }\n            addStep(arr, [], [k], Array.from(sortedSet));\n            k++;\n          }\n\n          while (i < leftArr.length) {\n            arr[k] = leftArr[i];\n            addStep(arr, [], [k], Array.from(sortedSet));\n            i++;\n            k++;\n          }\n\n          while (j < rightArr.length) {\n            arr[k] = rightArr[j];\n            addStep(arr, [], [k], Array.from(sortedSet));\n            j++;\n            k++;\n          }\n\n          if (right - left + 1 === arr.length) {\n            for (let idx = left; idx <= right; idx++) {\n              sortedSet.add(idx);\n            }\n          }\n          addStep(arr, [], [], Array.from(sortedSet));\n        };\n\n        const mergeSort = (left: number, right: number) => {\n          if (left < right) {\n            const mid = Math.floor((left + right) / 2);\n            mergeSort(left, mid);\n            mergeSort(mid + 1, right);\n            merge(left, mid, right);\n          }\n        };\n\n        mergeSort(0, arr.length - 1);\n        \n        // Mark all as sorted at the end\n        for (let i = 0; i < arr.length; i++) {\n          sortedSet.add(i);\n        }\n        addStep(arr, [], [], Array.from(sortedSet));\n        break;\n      }\n    }\n\n    setSteps(generatedSteps);\n    setCurrentStep(0);\n  }, [array]);\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-gray-900 via-purple-900 to-gray-900 p-8\">\n      <div className=\"max-w-7xl mx-auto space-y-8\">\n        <motion.div\n          initial={{ opacity: 0, y: -20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.8 }}\n          className=\"text-center space-y-4\"\n        >\n          <motion.h1\n            className=\"text-6xl font-bold bg-gradient-to-r from-cyan-400 via-purple-400 to-pink-400 bg-clip-text text-transparent\"\n            animate={{\n              textShadow: [\n                '0 0 20px rgba(0, 255, 255, 0.5)',\n                '0 0 40px rgba(255, 0, 255, 0.5)',\n                '0 0 20px rgba(0, 255, 255, 0.5)'\n              ]\n            }}\n            transition={{ duration: 2, repeat: Infinity }}\n          >\n            Algorithm Visualizer\n          </motion.h1>\n          \n          <div className=\"flex items-center justify-center gap-4\">\n            <motion.div\n              initial={{ scale: 0 }}\n              animate={{ scale: 1 }}\n              transition={{ delay: 0.3, type: \"spring\" }}\n              className=\"flex items-center gap-2 px-6 py-3 bg-gray-800/50 backdrop-blur-sm rounded-full border border-cyan-500/30\"\n            >\n              <Zap className=\"w-5 h-5 text-cyan-400\" />\n              <span className=\"text-xl font-semibold text-cyan-300\">\n                {mockAlgorithms.find(a => a.id === selectedAlgorithm)?.name}\n              </span>\n            </motion.div>\n            \n            <motion.div\n              initial={{ scale: 0 }}\n              animate={{ scale: 1 }}\n              transition={{ delay: 0.5, type: \"spring\" }}\n              className=\"px-4 py-2 bg-purple-500/20 backdrop-blur-sm rounded-full border border-purple-400/50\"\n              style={{\n                boxShadow: '0 0 20px rgba(168, 85, 247, 0.4)'\n              }}\n            >\n              <div className=\"flex items-center gap-2\">\n                <BarChart3 className=\"w-4 h-4 text-purple-300\" />\n                <span className=\"text-sm font-mono text-purple-200\">\n                  {mockAlgorithms.find(a => a.id === selectedAlgorithm)?.complexity}\n                </span>\n              </div>\n            </motion.div>\n          </div>\n        </motion.div></parameter>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-6\">\n          <div className=\"lg:col-span-1 space-y-6\">\n            <motion.div\n              initial={{ opacity: 0, x: -50 }}\n              animate={{ opacity: 1, x: 0 }}\n              className=\"bg-gray-900/50 backdrop-blur-lg border border-cyan-500/30 rounded-xl p-6 shadow-[0_0_30px_rgba(0,255,255,0.3)] hover:shadow-[0_0_50px_rgba(0,255,255,0.5)] transition-all duration-300\"\n            >\n              <div className=\"space-y-6\">\n                {/* Algorithm Selection */}\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center gap-2 text-cyan-400\">\n                    <Zap className=\"w-4 h-4\" />\n                    <h3 className=\"text-sm font-semibold uppercase tracking-wider\">Algorithm</h3>\n                  </div>\n                  <div className=\"grid grid-cols-1 gap-2\">\n                    {mockAlgorithms.map((algo) => (\n                      <motion.button\n                        key={algo.id}\n                        whileHover={{ scale: 1.02 }}\n                        whileTap={{ scale: 0.98 }}\n                        onClick={() => setSelectedAlgorithm(algo.id as AlgorithmType)}\n                        className={`p-3 rounded-lg border transition-all duration-300 text-left ${\n                          selectedAlgorithm === algo.id\n                            ? 'bg-cyan-500/20 border-cyan-400 shadow-[0_0_20px_rgba(0,255,255,0.4)]'\n                            : 'bg-gray-800/50 border-gray-700 hover:border-cyan-500/50'\n                        }`}\n                      >\n                        <div className=\"text-sm font-medium text-white\">{algo.name}</div>\n                        <div className=\"text-xs text-gray-400 mt-1\">{algo.complexity}</div>\n                      </motion.button>\n                    ))}\n                  </div>\n                </div>\n\n                {/* Speed Control */}\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center gap-2 text-purple-400\">\n                      <Zap className=\"w-4 h-4\" />\n                      <h3 className=\"text-sm font-semibold uppercase tracking-wider\">Speed</h3>\n                    </div>\n                    <span className=\"text-xs text-purple-300 font-mono bg-purple-500/20 px-2 py-1 rounded\">\n                      {speed[0]}ms\n                    </span>\n                  </div>\n                  <Slider\n                    value={speed}\n                    onValueChange={setSpeed}\n                    min={10}\n                    max={200}\n                    step={10}\n                    className=\"[&_[role=slider]]:bg-purple-500 [&_[role=slider]]:border-purple-400 [&_[role=slider]]:shadow-[0_0_15px_rgba(168,85,247,0.6)]\"\n                  />\n                </div>\n\n                {/* Array Size Control */}\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center gap-2 text-pink-400\">\n                      <BarChart3 className=\"w-4 h-4\" />\n                      <h3 className=\"text-sm font-semibold uppercase tracking-wider\">Array Size</h3>\n                    </div>\n                    <span className=\"text-xs text-pink-300 font-mono bg-pink-500/20 px-2 py-1 rounded\">\n                      {arraySize[0]}\n                    </span>\n                  </div>\n                  <Slider\n                    value={arraySize}\n                    onValueChange={setArraySize}\n                    min={5}\n                    max={100}\n                    step={5}\n                    disabled={isPlaying}\n                    className=\"[&_[role=slider]]:bg-pink-500 [&_[role=slider]]:border-pink-400 [&_[role=slider]]:shadow-[0_0_15px_rgba(236,72,153,0.6)]\"\n                  />\n                </div>\n\n                {/* Control Buttons */}\n                <div className=\"space-y-2 pt-4 border-t border-gray-700/50\">\n                  <Button\n                    onClick={isPlaying ? pauseVisualization : startVisualization}\n                    disabled={steps.length === 0}\n                    className=\"w-full bg-gradient-to-r from-cyan-500 to-blue-500 hover:from-cyan-400 hover:to-blue-400 text-white shadow-[0_0_20px_rgba(0,255,255,0.5)] hover:shadow-[0_0_30px_rgba(0,255,255,0.7)] transition-all duration-300\"\n                  >\n                    {isPlaying ? (\n                      <>\n                        <Pause className=\"w-4 h-4 mr-2\" />\n                        Pause\n                      </>\n                    ) : (\n                      <>\n                        <Play className=\"w-4 h-4 mr-2\" />\n                        {currentStep > 0 ? 'Resume' : 'Start'}\n                      </>\n                    )}\n                  </Button>\n\n                  <Button\n                    onClick={resetVisualization}\n                    variant=\"outline\"\n                    className=\"w-full border-purple-500/50 text-purple-300 hover:bg-purple-500/20 hover:border-purple-400 hover:shadow-[0_0_20px_rgba(168,85,247,0.4)] transition-all duration-300\"\n                  >\n                    <RotateCcw className=\"w-4 h-4 mr-2\" />\n                    Reset\n                  </Button>\n\n                  <Button\n                    onClick={() => generateSortingSteps(selectedAlgorithm)}\n                    disabled={isPlaying || array.length === 0}\n                    variant=\"outline\"\n                    className=\"w-full border-pink-500/50 text-pink-300 hover:bg-pink-500/20 hover:border-pink-400 hover:shadow-[0_0_20px_rgba(236,72,153,0.4)] transition-all duration-300\"\n                  >\n                    <Zap className=\"w-4 h-4 mr-2\" />\n                    Generate Steps\n                  </Button>\n                </div>\n\n                {/* Stats Display */}\n                <div className=\"pt-4 border-t border-gray-700/50 space-y-2\">\n                  <div className=\"flex justify-between items-center text-xs\">\n                    <span className=\"text-gray-400\">Current Step</span>\n                    <span className=\"text-cyan-300 font-mono bg-cyan-500/10 px-2 py-1 rounded\">\n                      {currentStep} / {steps.length}\n                    </span>\n                  </div>\n                  <div className=\"flex justify-between items-center text-xs\">\n                    <span className=\"text-gray-400\">Array Length</span>\n                    <span className=\"text-purple-300 font-mono bg-purple-500/10 px-2 py-1 rounded\">\n                      {array.length}\n                    </span>\n                  </div>\n                </div>\n              </div>\n            </motion.div>\n            \n            <div className=\"bg-gray-900/50 backdrop-blur-lg border border-cyan-500/30 rounded-xl p-6 shadow-2xl shadow-cyan-500/20\">\n              <div className=\"space-y-6\">\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center gap-2 text-cyan-400\">\n                    <Zap className=\"w-4 h-4\" />\n                    <span className=\"text-sm font-semibold tracking-wider\">ALGORITHM</span>\n                  </div>\n                  <div className=\"grid grid-cols-1 gap-3\">\n                    {mockAlgorithms.map((algo) => (\n                      <motion.button\n                        key={algo.id}\n                        onClick={() => setSelectedAlgorithm(algo.id as AlgorithmType)}\n                        className={`relative p-4 rounded-lg border-2 transition-all duration-300 text-left ${\n                          selectedAlgorithm === algo.id\n                            ? 'border-cyan-400 bg-cyan-500/20 shadow-lg shadow-cyan-500/50'\n                            : 'border-gray-700 bg-gray-800/50 hover:border-cyan-500/50 hover:bg-cyan-500/10'\n                        }`}\n                        whileHover={{ scale: 1.02 }}\n                        whileTap={{ scale: 0.98 }}\n                      >\n                        <div className=\"space-y-1\">\n                          <div className=\"font-semibold text-white\">{algo.name}</div>\n                          <div className={`text-xs ${\n                            selectedAlgorithm === algo.id ? 'text-cyan-300' : 'text-gray-400'\n                          }`}>\n                            {algo.complexity}\n                          </div>\n                        </div>\n                        {selectedAlgorithm === algo.id && (\n                          <motion.div\n                            className=\"absolute inset-0 rounded-lg border-2 border-cyan-400\"\n                            initial={{ opacity: 0 }}\n                            animate={{ opacity: [0.5, 1, 0.5] }}\n                            transition={{ duration: 2, repeat: Infinity }}\n                          />\n                        )}\n                      </motion.button>\n                    ))}\n                  </div>\n                </div></parameter>\n\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <label className=\"text-cyan-400 text-sm font-medium flex items-center gap-2\">\n                      <Zap className=\"w-4 h-4\" />\n                      Speed\n                    </label>\n                    <span className=\"text-cyan-300 text-xs\">{speed[0]}ms</span>\n                  </div>\n                  <Slider\n                    value={speed}\n                    onValueChange={setSpeed}\n                    min={10}\n                    max={200}\n                    step={10}\n                    className=\"[&_[role=slider]]:bg-cyan-400 [&_[role=slider]]:border-cyan-300 [&_[role=slider]]:shadow-[0_0_15px_rgba(34,211,238,0.8)] [&_[role=slider]]:hover:shadow-[0_0_25px_rgba(34,211,238,1)] [&_[role=slider]]:transition-shadow [&_.relative]:bg-gray-700/50 [&_.relative]:border [&_.relative]:border-cyan-500/30 [&_.bg-primary]:bg-gradient-to-r [&_.bg-primary]:from-cyan-500 [&_.bg-primary]:to-purple-500 [&_.bg-primary]:shadow-[0_0_10px_rgba(34,211,238,0.5)]\"\n                  />\n                </div>\n\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <label className=\"text-cyan-400 text-sm font-medium flex items-center gap-2\">\n                      <BarChart3 className=\"w-4 h-4\" />\n                      Array Size\n                    </label>\n                    <span className=\"text-cyan-300 text-xs\">{arraySize[0]}</span>\n                  </div>\n                  <Slider\n                    value={arraySize}\n                    onValueChange={setArraySize}\n                    min={5}\n                    max={50}\n                    step={1}\n                    className=\"[&_[role=slider]]:bg-gradient-to-r [&_[role=slider]]:from-purple-500 [&_[role=slider]]:to-pink-500 [&_[role=slider]]:border-2 [&_[role=slider]]:border-purple-300 [&_[role=slider]]:shadow-lg [&_[role=slider]]:shadow-purple-500/50 [&_[role=slider]]:transition-all [&_[role=slider]]:hover:shadow-purple-500/80 [&_[role=slider]]:hover:scale-110 [&>span]:bg-gradient-to-r [&>span]:from-purple-500/30 [&>span]:to-pink-500/30 [&>span]:h-2 [&>span]:rounded-full\"\n                  />\n                </div>\n\n                <div className=\"flex gap-3 pt-4\">\n                  <motion.div className=\"flex-1\">\n                    <Button\n                      onClick={isPlaying ? pauseVisualization : startVisualization}\n                      disabled={array.length === 0 || (steps.length === 0 && !isPlaying)}\n                      className=\"w-full bg-gradient-to-r from-cyan-500 to-purple-500 hover:from-cyan-400 hover:to-purple-400 text-white font-semibold py-6 rounded-lg transition-all duration-300 disabled:opacity-50 disabled:cursor-not-allowed relative overflow-hidden group\"\n                      whileHover={{ scale: 1.05 }}\n                      whileTap={{ scale: 0.95 }}\n                    >\n                      <motion.div\n                        className=\"absolute inset-0 bg-gradient-to-r from-cyan-400 to-purple-400 opacity-0 group-hover:opacity-100 blur-xl transition-opacity duration-300\"\n                        animate={{\n                          opacity: isPlaying ? [0.5, 0.8, 0.5] : 0\n                        }}\n                        transition={{\n                          duration: 2,\n                          repeat: isPlaying ? Infinity : 0\n                        }}\n                      />\n                      <motion.div\n                        className=\"relative flex items-center justify-center gap-2\"\n                        initial={false}\n                        animate={{\n                          scale: isPlaying ? [1, 1.1, 1] : 1\n                        }}\n                        transition={{\n                          duration: 1,\n                          repeat: isPlaying ? Infinity : 0\n                        }}\n                      >\n                        <motion.div\n                          initial={false}\n                          animate={{\n                            rotate: isPlaying ? 0 : 0,\n                            scale: isPlaying ? 1 : 1\n                          }}\n                          transition={{ duration: 0.3 }}\n                        >\n                          {isPlaying ? (\n                            <Pause className=\"w-5 h-5\" />\n                          ) : (\n                            <Play className=\"w-5 h-5\" />\n                          )}\n                        </motion.div>\n                        <span>{isPlaying ? 'Pause' : 'Play'}</span>\n                      </motion.div>\n                    </Button>\n                  </motion.div>\n                  <motion.div whileTap={{ rotate: 360 }} transition={{ duration: 0.6 }}>\n                    <Button\n                      onClick={resetVisualization}\n                      disabled={isPlaying}\n                      variant=\"outline\"\n                      className=\"w-full bg-purple-500/20 border-purple-400/50 hover:bg-purple-500/30 hover:border-purple-400 text-purple-300 hover:text-purple-200 shadow-[0_0_15px_rgba(168,85,247,0.3)] hover:shadow-[0_0_25px_rgba(168,85,247,0.5)] transition-all duration-300 disabled:opacity-50 disabled:cursor-not-allowed\"\n                    >\n                      <RotateCcw className=\"w-4 h-4 mr-2\" />\n                      Reset\n                    </Button>\n                  </motion.div>\n                </div>\n              </div>\n            </div>\n\n                        <motion.div\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ delay: 0.2 }}\n              className=\"bg-gray-900/50 backdrop-blur-lg border border-purple-500/30 rounded-xl p-6 shadow-[0_0_30px_rgba(168,85,247,0.3)] hover:shadow-[0_0_50px_rgba(168,85,247,0.5)] transition-all duration-300\"\n            >\n              <div className=\"space-y-4\">\n                <div className=\"flex items-center gap-2 text-purple-400 mb-4\">\n                  <BarChart3 className=\"w-5 h-5\" />\n                  <h3 className=\"text-sm font-semibold uppercase tracking-wider\">Statistics</h3>\n                </div>\n\n                <div className=\"grid grid-cols-1 gap-4\">\n                  {/* Comparisons */}\n                  <motion.div\n                    className=\"relative p-4 rounded-lg bg-gradient-to-br from-cyan-500/10 to-cyan-500/5 border border-cyan-500/30 overflow-hidden\"\n                    whileHover={{ scale: 1.02 }}\n                    transition={{ type: \"spring\", stiffness: 300 }}\n                  >\n                    <div className=\"absolute inset-0 bg-gradient-to-r from-cyan-500/0 via-cyan-500/10 to-cyan-500/0 animate-pulse\" />\n                    <div className=\"relative z-10\">\n                      <div className=\"text-xs text-cyan-400 uppercase tracking-wider mb-1\">Comparisons</div>\n                      <motion.div\n                        className=\"text-3xl font-bold text-cyan-300\"\n                        key={comparisons}\n                        initial={{ scale: 1.2, color: '#00ffff' }}\n                        animate={{ scale: 1, color: '#67e8f9' }}\n                        transition={{ duration: 0.3 }}\n                      >\n                        {comparisons.toLocaleString()}\n                      </motion.div>\n                    </div>\n                    <div className=\"absolute top-2 right-2\">\n                      <motion.div\n                        className=\"w-2 h-2 rounded-full bg-cyan-400\"\n                        animate={{\n                          boxShadow: [\n                            '0 0 10px rgba(0, 255, 255, 0.8)',\n                            '0 0 20px rgba(0, 255, 255, 0.8)',\n                            '0 0 10px rgba(0, 255, 255, 0.8)'\n                          ]\n                        }}\n                        transition={{ duration: 1.5, repeat: Infinity }}\n                      />\n                    </div>\n                  </motion.div>\n\n                  {/* Swaps */}\n                  <motion.div\n                    className=\"relative p-4 rounded-lg bg-gradient-to-br from-pink-500/10 to-pink-500/5 border border-pink-500/30 overflow-hidden\"\n                    whileHover={{ scale: 1.02 }}\n                    transition={{ type: \"spring\", stiffness: 300 }}\n                  >\n                    <div className=\"absolute inset-0 bg-gradient-to-r from-pink-500/0 via-pink-500/10 to-pink-500/0 animate-pulse\" />\n                    <div className=\"relative z-10\">\n                      <div className=\"text-xs text-pink-400 uppercase tracking-wider mb-1\">Swaps</div>\n                      <motion.div\n                        className=\"text-3xl font-bold text-pink-300\"\n                        key={swaps}\n                        initial={{ scale: 1.2, color: '#ff0066' }}\n                        animate={{ scale: 1, color: '#f9a8d4' }}\n                        transition={{ duration: 0.3 }}\n                      >\n                        {swaps.toLocaleString()}\n                      </motion.div>\n                    </div>\n                    <div className=\"absolute top-2 right-2\">\n                      <motion.div\n                        className=\"w-2 h-2 rounded-full bg-pink-400\"\n                        animate={{\n                          boxShadow: [\n                            '0 0 10px rgba(255, 0, 102, 0.8)',\n                            '0 0 20px rgba(255, 0, 102, 0.8)',\n                            '0 0 10px rgba(255, 0, 102, 0.8)'\n                          ]\n                        }}\n                        transition={{ duration: 1.5, repeat: Infinity, delay: 0.5 }}\n                      />\n                    </div>\n                  </motion.div>\n\n                  {/* Progress */}\n                  <motion.div\n                    className=\"relative p-4 rounded-lg bg-gradient-to-br from-purple-500/10 to-purple-500/5 border border-purple-500/30 overflow-hidden\"\n                    whileHover={{ scale: 1.02 }}\n                    transition={{ type: \"spring\", stiffness: 300 }}\n                  >\n                    <div className=\"absolute inset-0 bg-gradient-to-r from-purple-500/0 via-purple-500/10 to-purple-500/0 animate-pulse\" />\n                    <div className=\"relative z-10\">\n                      <div className=\"text-xs text-purple-400 uppercase tracking-wider mb-1\">Progress</div>\n                      <motion.div\n                        className=\"text-3xl font-bold text-purple-300\"\n                        key={progress}\n                        initial={{ scale: 1.2 }}\n                        animate={{ scale: 1 }}\n                        transition={{ duration: 0.3 }}\n                      >\n                        {progress}%\n                      </motion.div>\n                      <div className=\"mt-3 h-2 bg-gray-800/50 rounded-full overflow-hidden border border-purple-500/20\">\n                        <motion.div\n                          className=\"h-full bg-gradient-to-r from-purple-500 via-pink-500 to-cyan-500 rounded-full\"\n                          initial={{ width: 0 }}\n                          animate={{ width: `${progress}%` }}\n                          transition={{ duration: 0.5, ease: \"easeOut\" }}\n                          style={{\n                            boxShadow: '0 0 15px rgba(168, 85, 247, 0.8)'\n                          }}\n                        />\n                      </div>\n                    </div>\n                    <div className=\"absolute top-2 right-2\">\n                      <motion.div\n                        className=\"w-2 h-2 rounded-full bg-purple-400\"\n                        animate={{\n                          boxShadow: [\n                            '0 0 10px rgba(168, 85, 247, 0.8)',\n                            '0 0 20px rgba(168, 85, 247, 0.8)',\n                            '0 0 10px rgba(168, 85, 247, 0.8)'\n                          ]\n                        }}\n                        transition={{ duration: 1.5, repeat: Infinity, delay: 1 }}\n                      />\n                    </div>\n                  </motion.div>\n\n                  {/* Array Size Info */}\n                  <motion.div\n                    className=\"relative p-4 rounded-lg bg-gradient-to-br from-green-500/10 to-green-500/5 border border-green-500/30\"\n                    whileHover={{ scale: 1.02 }}\n                    transition={{ type: \"spring\", stiffness: 300 }}\n                  >\n                    <div className=\"text-xs text-green-400 uppercase tracking-wider mb-1\">Array Size</div>\n                    <div className=\"text-3xl font-bold text-green-300\">\n                      {array.length}\n                    </div>\n                  </motion.div>\n                </div>\n\n                {/* Status Indicator */}\n                <div className=\"pt-4 border-t border-gray-700/50\">\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-xs text-gray-400 uppercase tracking-wider\">Status</span>\n                    <motion.div\n                      className=\"flex items-center gap-2\"\n                      animate={{\n                        opacity: isPlaying ? [1, 0.6, 1] : 1\n                      }}\n                      transition={{ duration: 1.5, repeat: isPlaying ? Infinity : 0 }}\n                    >\n                      <motion.div\n                        className={`w-2 h-2 rounded-full ${\n                          isPlaying ? 'bg-green-400' : progress === 100 ? 'bg-cyan-400' : 'bg-gray-500'\n                        }`}\n                        animate={{\n                          boxShadow: isPlaying\n                            ? [\n                                '0 0 10px rgba(34, 197, 94, 0.8)',\n                                '0 0 20px rgba(34, 197, 94, 0.8)',\n                                '0 0 10px rgba(34, 197, 94, 0.8)'\n                              ]\n                            : progress === 100\n                            ? '0 0 15px rgba(0, 255, 255, 0.8)'\n                            : 'none'\n                        }}\n                        transition={{ duration: 1, repeat: isPlaying ? Infinity : 0 }}\n                      />\n                      <span className={`text-xs font-medium ${\n                        isPlaying ? 'text-green-400' : progress === 100 ? 'text-cyan-400' : 'text-gray-400'\n                      }`}>\n                        {isPlaying ? 'Sorting...' : progress === 100 ? 'Complete' : 'Ready'}\n                      </span>\n                    </motion.div>\n                  </div>\n                </div>\n              </div>\n            </motion.div>\n          </div>\n\n          <div className=\"lg:col-span-3\">\n            <div className=\"bg-gray-900/50 backdrop-blur-lg border border-purple-500/30 rounded-xl p-8 shadow-2xl shadow-purple-500/20 min-h-[600px]\">\n              {array.length === 0 ? (\n                <motion.div\n                  initial={{ opacity: 0, scale: 0.8 }}\n                  animate={{ opacity: 1, scale: 1 }}\n                  className=\"flex flex-col items-center justify-center h-full space-y-6\"\n                >\n                  <motion.div\n                    animate={{\n                      rotate: [0, 360],\n                      scale: [1, 1.2, 1]\n                    }}\n                    transition={{\n                      duration: 3,\n                      repeat: Infinity,\n                      ease: \"easeInOut\"\n                    }}\n                  >\n                    <BarChart3 className=\"w-24 h-24 text-purple-400/50\" />\n                  </motion.div>\n                  <div className=\"text-center space-y-2\">\n                    <h3 className=\"text-2xl font-semibold text-purple-300\">\n                      Generate an Array to Begin\n                    </h3>\n                    <p className=\"text-gray-400\">\n                      Click the reset button to create a random array\n                    </p>\n                  </div>\n                </motion.div>\n              ) : (\n                <div className=\"relative w-full h-full\">\n                  {/* Comparison Indicators */}\n                  {array.map((element, index) => {\n                    const isComparing = element.isComparing;\n                    const isSwapping = element.isSwapping;\n                    const isSorted = element.isSorted;\n                    \n                    if (isComparing || isSwapping) {\n                      return (\n                        <motion.div\n                          key={`indicator-${element.id}`}\n                          className=\"absolute pointer-events-none\"\n                          style={{\n                            left: `${(index / array.length) * 100}%`,\n                            width: `${100 / array.length}%`,\n                            top: 0,\n                            height: '100%'\n                          }}\n                          initial={{ opacity: 0 }}\n                          animate={{ opacity: 1 }}\n                          exit={{ opacity: 0 }}\n                        >\n                          {isComparing && (\n                            <motion.div\n                              className=\"absolute inset-0 bg-cyan-400/10 border-2 border-cyan-400 rounded-lg\"\n                              animate={{\n                                boxShadow: [\n                                  '0 0 20px rgba(34, 211, 238, 0.6)',\n                                  '0 0 40px rgba(34, 211, 238, 0.9)',\n                                  '0 0 20px rgba(34, 211, 238, 0.6)'\n                                ]\n                              }}\n                              transition={{ duration: 0.5, repeat: Infinity }}\n                            />\n                          )}\n                          {isSwapping && (\n                            <>\n                              <motion.div\n                                className=\"absolute inset-0 bg-pink-500/20 border-2 border-pink-400 rounded-lg\"\n                                animate={{\n                                  boxShadow: [\n                                    '0 0 30px rgba(236, 72, 153, 0.8)',\n                                    '0 0 50px rgba(236, 72, 153, 1)',\n                                    '0 0 30px rgba(236, 72, 153, 0.8)'\n                                  ]\n                                }}\n                                transition={{ duration: 0.3, repeat: Infinity }}\n                              />\n                              {/* Swap Trail Effect */}\n                              <motion.div\n                                className=\"absolute inset-0\"\n                                initial={{ opacity: 0, scale: 0.8 }}\n                                animate={{ \n                                  opacity: [0, 1, 0],\n                                  scale: [0.8, 1.2, 1.5]\n                                }}\n                                transition={{ duration: 0.6, repeat: Infinity }}\n                              >\n                                <div className=\"w-full h-full rounded-lg bg-gradient-to-t from-pink-500/40 via-purple-500/30 to-transparent blur-sm\" />\n                              </motion.div>\n                            </>\n                          )}\n                        </motion.div>\n                      );\n                    }\n                    return null;\n                  })}\n\n                  {/* Array Bars */}\n                  <div className=\"flex items-end justify-center gap-1 h-full relative z-10\">\n                    {array.map((element, index) => {\n                      const heightPercentage = (element.value / 105) * 100;\n                      const colorIndex = index % NEON_COLORS.length;\n                      const barColor = element.isSorted \n                        ? '#00ff00' \n                        : element.isSwapping \n                        ? '#ff0066' \n                        : element.isComparing \n                        ? '#00ffff' \n                        : NEON_COLORS[colorIndex];\n\n                      return (\n                        <motion.div\n                          key={element.id}\n                          className=\"relative flex-1 min-w-[4px] max-w-[60px] rounded-t-lg\"\n                          style={{\n                            height: `${heightPercentage}%`,\n                            backgroundColor: barColor,\n                            boxShadow: `0 0 20px ${barColor}80, 0 0 40px ${barColor}40`\n                          }}\n                          initial={{ height: 0, opacity: 0 }}\n                          animate={{ \n                            height: `${heightPercentage}%`,\n                            opacity: 1,\n                            boxShadow: element.isSwapping\n                              ? [\n                                  `0 0 20px ${barColor}80, 0 0 40px ${barColor}40`,\n                                  `0 0 40px ${barColor}FF, 0 0 80px ${barColor}80`,\n                                  `0 0 20px ${barColor}80, 0 0 40px ${barColor}40`\n                                ]\n                              : `0 0 20px ${barColor}80, 0 0 40px ${barColor}40`\n                          }}\n                          transition={{\n                            height: { duration: 0.3, ease: \"easeOut\" },\n                            opacity: { duration: 0.2 },\n                            boxShadow: { duration: 0.3, repeat: element.isSwapping ? Infinity : 0 }\n                          }}\n                          whileHover={{\n                            scale: 1.05,\n                            boxShadow: `0 0 30px ${barColor}FF, 0 0 60px ${barColor}80`,\n                            transition: { duration: 0.2 }\n                          }}\n                        >\n                          {/* Swap Trail Particles */}\n                          {element.isSwapping && (\n                            <>\n                              <motion.div\n                                className=\"absolute inset-0 rounded-t-lg\"\n                                style={{\n                                  background: `linear-gradient(to top, ${barColor}40, transparent)`\n                                }}\n                                animate={{\n                                  opacity: [0.5, 1, 0.5],\n                                  scale: [1, 1.1, 1]\n                                }}\n                                transition={{ duration: 0.4, repeat: Infinity }}\n                              />\n                              {[...Array(3)].map((_, i) => (\n                                <motion.div\n                                  key={`particle-${i}`}\n                                  className=\"absolute w-2 h-2 rounded-full\"\n                                  style={{\n                                    backgroundColor: barColor,\n                                    left: '50%',\n                                    top: '50%',\n                                    marginLeft: '-4px',\n                                    marginTop: '-4px'\n                                  }}\n                                  animate={{\n                                    y: [-20, -40, -60],\n                                    x: [(i - 1) * 10, (i - 1) * 20, (i - 1) * 30],\n                                    opacity: [1, 0.5, 0],\n                                    scale: [1, 0.5, 0]\n                                  }}\n                                  transition={{\n                                    duration: 0.8,\n                                    repeat: Infinity,\n                                    delay: i * 0.1\n                                  }}\n                                />\n                              ))}\n                            </>\n                          )}\n\n                          {/* Value Label */}\n                          {array.length <= 30 && (\n                            <motion.div\n                              className=\"absolute -bottom-6 left-1/2 transform -translate-x-1/2 text-xs font-mono font-semibold whitespace-nowrap\"\n                              style={{ color: barColor }}\n                              initial={{ opacity: 0 }}\n                              animate={{ opacity: 0.8 }}\n                            >\n                              {element.value}\n                            </motion.div>\n                          )}\n\n                          {/* Sorted Checkmark */}\n                          {element.isSorted && (\n                            <motion.div\n                              className=\"absolute -top-8 left-1/2 transform -translate-x-1/2\"\n                              initial={{ scale: 0, rotate: -180 }}\n                              animate={{ scale: 1, rotate: 0 }}\n                              transition={{ type: \"spring\", stiffness: 200, damping: 10 }}\n                            >\n                              <div className=\"w-6 h-6 rounded-full bg-green-500 flex items-center justify-center shadow-[0_0_20px_rgba(0,255,0,0.8)]\">\n                                <svg\n                                  className=\"w-4 h-4 text-white\"\n                                  fill=\"none\"\n                                  strokeLinecap=\"round\"\n                                  strokeLinejoin=\"round\"\n                                  strokeWidth=\"3\"\n                                  viewBox=\"0 0 24 24\"\n                                  stroke=\"currentColor\"\n                                >\n                                  <path d=\"M5 13l4 4L19 7\" />\n                                </svg>\n                              </div>\n                            </motion.div>\n                          )}\n                        </motion.div>\n                      );\n                    })}\n                  </div>\n                </div>\n              )}\n              \n              <div className=\"flex items-end justify-center gap-1 h-[500px]\">\n                {array.length === 0 ? (\n                  <div className=\"flex items-center justify-center h-full\">\n                    <motion.div\n                      initial={{ opacity: 0, scale: 0.8 }}\n                      animate={{ opacity: 1, scale: 1 }}\n                      className=\"text-center space-y-4\"\n                    >\n                      <BarChart3 className=\"w-16 h-16 text-cyan-400/50 mx-auto\" />\n                      <p className=\"text-cyan-300/70 text-lg\">Generate an array to start visualizing</p>\n                    </motion.div>\n                  </div>\n                ) : (\n                  array.map((element, index) => {\n                    const heightPercentage = (element.value / 100) * 100;\n                    const colorIndex = index % NEON_COLORS.length;\n                    const neonColor = NEON_COLORS[colorIndex];\n                    \n                    let barState = 'default';\n                    if (element.isSorted) barState = 'sorted';\n                    else if (element.isSwapping) barState = 'swapping';\n                    else if (element.isComparing) barState = 'comparing';\n\n                    return (\n                      <motion.div\n                        key={element.id}\n                        className=\"relative flex-1 min-w-[4px] max-w-[60px]\"\n                        initial={{ height: 0, opacity: 0 }}\n                        animate={{\n                          height: `${heightPercentage}%`,\n                          opacity: 1,\n                          scale: element.isSwapping ? [1, 1.1, 1] : element.isComparing ? 1.05 : 1,\n                        }}\n                        transition={{\n                          height: { duration: 0.5, ease: \"easeOut\" },\n                          opacity: { duration: 0.3 },\n                          scale: { duration: 0.3 }\n                        }}\n                        style={{\n                          backgroundColor: element.isSorted \n                            ? '#00ff00' \n                            : element.isSwapping \n                            ? '#ff00ff' \n                            : element.isComparing \n                            ? '#ffff00' \n                            : neonColor,\n                          boxShadow: element.isSorted\n                            ? '0 0 20px rgba(0, 255, 0, 0.8), 0 0 40px rgba(0, 255, 0, 0.5), inset 0 0 20px rgba(0, 255, 0, 0.3)'\n                            : element.isSwapping\n                            ? '0 0 30px rgba(255, 0, 255, 1), 0 0 60px rgba(255, 0, 255, 0.7), inset 0 0 30px rgba(255, 0, 255, 0.4)'\n                            : element.isComparing\n                            ? '0 0 25px rgba(255, 255, 0, 0.9), 0 0 50px rgba(255, 255, 0, 0.6), inset 0 0 25px rgba(255, 255, 0, 0.3)'\n                            : `0 0 15px ${neonColor}80, 0 0 30px ${neonColor}40, inset 0 0 15px ${neonColor}30`,\n                          borderRadius: '4px 4px 0 0',\n                          position: 'relative',\n                          overflow: 'visible'\n                        }}\n                      >\n                        {/* Glow effect overlay */}\n                        <motion.div\n                          className=\"absolute inset-0 rounded-t\"\n                          animate={{\n                            opacity: element.isSwapping ? [0.3, 0.8, 0.3] : element.isComparing ? [0.4, 0.7, 0.4] : 0.5\n                          }}\n                          transition={{\n                            duration: element.isSwapping ? 0.4 : element.isComparing ? 0.6 : 1,\n                            repeat: element.isSwapping || element.isComparing ? Infinity : 0\n                          }}\n                          style={{\n                            background: `linear-gradient(to top, transparent, ${element.isSorted ? '#00ff00' : element.isSwapping ? '#ff00ff' : element.isComparing ? '#ffff00' : neonColor}40)`,\n                          }}\n                        />\n\n                        {/* Trail effect during swaps */}\n                        {element.isSwapping && (\n                          <>\n                            <motion.div\n                              className=\"absolute inset-0 rounded-t\"\n                              initial={{ opacity: 0, scale: 1 }}\n                              animate={{ \n                                opacity: [0.8, 0],\n                                scale: [1, 1.3],\n                              }}\n                              transition={{\n                                duration: 0.6,\n                                repeat: Infinity,\n                                ease: \"easeOut\"\n                              }}\n                              style={{\n                                backgroundColor: '#ff00ff',\n                                filter: 'blur(8px)',\n                              }}\n                            />\n                            <motion.div\n                              className=\"absolute -top-2 left-1/2 transform -translate-x-1/2\"\n                              animate={{\n                                y: [-10, -30],\n                                opacity: [1, 0],\n                              }}\n                              transition={{\n                                duration: 0.8,\n                                repeat: Infinity,\n                                ease: \"easeOut\"\n                              }}\n                            >\n                              <div \n                                className=\"w-2 h-2 rounded-full\"\n                                style={{\n                                  backgroundColor: '#ff00ff',\n                                  boxShadow: '0 0 10px #ff00ff, 0 0 20px #ff00ff'\n                                }}\n                              />\n                            </motion.div>\n                          </>\n                        )}\n\n                        {/* Comparison pulse effect */}\n                        {element.isComparing && (\n                          <motion.div\n                            className=\"absolute -inset-1 rounded-t\"\n                            animate={{\n                              opacity: [0, 0.6, 0],\n                              scale: [0.95, 1.1, 0.95],\n                            }}\n                            transition={{\n                              duration: 0.8,\n                              repeat: Infinity,\n                              ease: \"easeInOut\"\n                            }}\n                            style={{\n                              border: '2px solid #ffff00',\n                              boxShadow: '0 0 20px rgba(255, 255, 0, 0.8)',\n                            }}\n                          />\n                        )}\n\n                        {/* Value label */}\n                        {arraySize[0] <= 30 && (\n                          <motion.div\n                            className=\"absolute -top-8 left-1/2 transform -translate-x-1/2 text-xs font-bold whitespace-nowrap\"\n                            initial={{ opacity: 0 }}\n                            animate={{ opacity: 1 }}\n                            style={{\n                              color: element.isSorted ? '#00ff00' : element.isSwapping ? '#ff00ff' : element.isComparing ? '#ffff00' : neonColor,\n                              textShadow: `0 0 10px ${element.isSorted ? '#00ff00' : element.isSwapping ? '#ff00ff' : element.isComparing ? '#ffff00' : neonColor}`,\n                            }}\n                          >\n                            {element.value}\n                          </motion.div>\n                        )}\n\n                        {/* Sorted checkmark */}\n                        {element.isSorted && (\n                          <motion.div\n                            className=\"absolute -top-6 left-1/2 transform -translate-x-1/2\"\n                            initial={{ scale: 0, rotate: -180 }}\n                            animate={{ scale: 1, rotate: 0 }}\n                            transition={{ type: \"spring\", stiffness: 200, damping: 10 }}\n                          >\n                            <div \n                              className=\"w-4 h-4 rounded-full flex items-center justify-center text-xs\"\n                              style={{\n                                backgroundColor: '#00ff00',\n                                boxShadow: '0 0 15px rgba(0, 255, 0, 0.8)',\n                                color: '#000'\n                              }}\n                            >\n                              \u2713\n                            </div>\n                          </motion.div>\n                        )}\n                      </motion.div>\n                    );\n                  })\n                )</parameter>\n              </div>\n\n              <div className=\"mt-6 space-y-3\">\n                <div className=\"flex items-center justify-between text-sm\">\n                  <span className=\"text-cyan-400 font-semibold flex items-center gap-2\">\n                    <BarChart3 className=\"w-4 h-4\" />\n                    Sorting Progress\n                  </span>\n                  <motion.span \n                    className=\"text-cyan-300 font-mono text-lg\"\n                    key={currentStep}\n                    initial={{ scale: 1.2, color: '#00ffff' }}\n                    animate={{ scale: 1, color: '#67e8f9' }}\n                    transition={{ duration: 0.3 }}\n                  >\n                    {steps.length > 0 ? Math.round((currentStep / steps.length) * 100) : 0}%\n                  </motion.span>\n                </div>\n                \n                <div className=\"relative h-4 bg-gray-800/50 rounded-full overflow-hidden border border-cyan-500/30 shadow-inner\">\n                  <motion.div\n                    className=\"absolute inset-y-0 left-0 bg-gradient-to-r from-cyan-500 via-purple-500 to-pink-500 rounded-full\"\n                    initial={{ width: '0%' }}\n                    animate={{ \n                      width: steps.length > 0 ? `${(currentStep / steps.length) * 100}%` : '0%'\n                    }}\n                    transition={{ \n                      duration: 0.5,\n                      ease: \"easeOut\"\n                    }}\n                    style={{\n                      boxShadow: '0 0 20px rgba(0, 255, 255, 0.6), 0 0 40px rgba(168, 85, 247, 0.4)'\n                    }}\n                  />\n                  \n                  <motion.div\n                    className=\"absolute inset-0 bg-gradient-to-r from-transparent via-white/30 to-transparent\"\n                    animate={{\n                      x: ['-100%', '200%']\n                    }}\n                    transition={{\n                      duration: 2,\n                      repeat: isPlaying ? Infinity : 0,\n                      ease: \"linear\"\n                    }}\n                    style={{\n                      width: '50%'\n                    }}\n                  />\n                  \n                  {steps.length > 0 && currentStep === steps.length && (\n                    <motion.div\n                      className=\"absolute inset-0 bg-gradient-to-r from-cyan-400 via-purple-400 to-pink-400\"\n                      initial={{ opacity: 0 }}\n                      animate={{ \n                        opacity: [0, 0.8, 0],\n                        scale: [1, 1.05, 1]\n                      }}\n                      transition={{\n                        duration: 1.5,\n                        repeat: Infinity,\n                        ease: \"easeInOut\"\n                      }}\n                    />\n                  )}\n                </div>\n                \n                {steps.length > 0 && currentStep === steps.length && (\n                  <motion.div\n                    initial={{ opacity: 0, y: -10 }}\n                    animate={{ opacity: 1, y: 0 }}\n                    className=\"text-center\"\n                  >\n                    <span className=\"text-sm font-semibold text-transparent bg-gradient-to-r from-cyan-400 via-purple-400 to-pink-400 bg-clip-text\">\n                      \u2728 Sorting Complete!\n                    </span>\n                  </motion.div>\n                )}\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.8, delay: 0.4 }}\n          className=\"bg-gray-900/50 backdrop-blur-lg border border-cyan-500/30 rounded-xl p-6 shadow-2xl shadow-cyan-500/20\"\n        >\n          <div className=\"flex items-center gap-2 mb-6\">\n            <BarChart3 className=\"w-5 h-5 text-cyan-400\" />\n            <h3 className=\"text-lg font-semibold text-cyan-300 uppercase tracking-wider\">Legend</h3>\n          </div>\n          \n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n            <motion.div\n              className=\"flex items-center gap-3 p-4 bg-gray-800/50 rounded-lg border border-gray-700/50 hover:border-cyan-500/50 transition-all duration-300\"\n              whileHover={{ scale: 1.05 }}\n            >\n              <motion.div\n                className=\"w-6 h-6 rounded-md bg-gradient-to-br from-cyan-400 to-cyan-600 shadow-lg\"\n                style={{\n                  boxShadow: '0 0 20px rgba(0, 255, 255, 0.6)'\n                }}\n                animate={{\n                  boxShadow: [\n                    '0 0 20px rgba(0, 255, 255, 0.6)',\n                    '0 0 30px rgba(0, 255, 255, 0.8)',\n                    '0 0 20px rgba(0, 255, 255, 0.6)'\n                  ]\n                }}\n                transition={{ duration: 2, repeat: Infinity }}\n              />\n              <div>\n                <div className=\"text-sm font-semibold text-white\">Comparing</div>\n                <div className=\"text-xs text-gray-400\">Active comparison</div>\n              </div>\n            </motion.div>\n\n            <motion.div\n              className=\"flex items-center gap-3 p-4 bg-gray-800/50 rounded-lg border border-gray-700/50 hover:border-purple-500/50 transition-all duration-300\"\n              whileHover={{ scale: 1.05 }}\n            >\n              <motion.div\n                className=\"w-6 h-6 rounded-md bg-gradient-to-br from-purple-400 to-purple-600 shadow-lg\"\n                style={{\n                  boxShadow: '0 0 20px rgba(168, 85, 247, 0.6)'\n                }}\n                animate={{\n                  scale: [1, 1.2, 1],\n                  boxShadow: [\n                    '0 0 20px rgba(168, 85, 247, 0.6)',\n                    '0 0 30px rgba(168, 85, 247, 0.8)',\n                    '0 0 20px rgba(168, 85, 247, 0.6)'\n                  ]\n                }}\n                transition={{ duration: 1.5, repeat: Infinity }}\n              />\n              <div>\n                <div className=\"text-sm font-semibold text-white\">Swapping</div>\n                <div className=\"text-xs text-gray-400\">Elements moving</div>\n              </div>\n            </motion.div>\n\n            <motion.div\n              className=\"flex items-center gap-3 p-4 bg-gray-800/50 rounded-lg border border-gray-700/50 hover:border-green-500/50 transition-all duration-300\"\n              whileHover={{ scale: 1.05 }}\n            >\n              <motion.div\n                className=\"w-6 h-6 rounded-md bg-gradient-to-br from-green-400 to-green-600 shadow-lg\"\n                style={{\n                  boxShadow: '0 0 20px rgba(34, 197, 94, 0.6)'\n                }}\n                animate={{\n                  opacity: [1, 0.7, 1]\n                }}\n                transition={{ duration: 2, repeat: Infinity }}\n              />\n              <div>\n                <div className=\"text-sm font-semibold text-white\">Sorted</div>\n                <div className=\"text-xs text-gray-400\">In final position</div>\n              </div>\n            </motion.div>\n\n            <motion.div\n              className=\"flex items-center gap-3 p-4 bg-gray-800/50 rounded-lg border border-gray-700/50 hover:border-pink-500/50 transition-all duration-300\"\n              whileHover={{ scale: 1.05 }}\n            >\n              <motion.div\n                className=\"w-6 h-6 rounded-md bg-gradient-to-br from-pink-400 to-pink-600 shadow-lg\"\n                style={{\n                  boxShadow: '0 0 15px rgba(236, 72, 153, 0.5)'\n                }}\n              />\n              <div>\n                <div className=\"text-sm font-semibold text-white\">Unsorted</div>\n                <div className=\"text-xs text-gray-400\">Awaiting sort</div>\n              </div>\n            </motion.div>\n          </div>\n\n          <motion.div\n            className=\"mt-6 p-4 bg-gradient-to-r from-cyan-500/10 to-purple-500/10 rounded-lg border border-cyan-500/30\"\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            transition={{ delay: 0.6 }}\n          >\n            <div className=\"flex items-start gap-3\">\n              <Zap className=\"w-5 h-5 text-cyan-400 mt-0.5 flex-shrink-0\" />\n              <div className=\"text-sm text-gray-300\">\n                <span className=\"font-semibold text-cyan-300\">Pro Tip:</span> Watch the neon glow effects to track algorithm progress. Brighter glows indicate active operations, while steady colors show completed sections.\n              </div>\n            </div>\n          </motion.div>\n        </motion.div>\n      </div>\n    </div>\n  );\n}",
  "error": null,
  "overall_score": 43,
  "code_quality_score": 14,
  "architecture_score": 11,
  "performance_score": 10,
  "accessibility_score": 8,
  "metadata": {
    "document_id": "eval_room_0658d85e72f0",
    "prompt_category": "creative",
    "prompt_complexity": 9.0
  },
  "raw_response": {
    "document_id": "eval_room_0658d85e72f0",
    "mode": "parallel",
    "prompt": "Build a captivating algorithm visualizer with neon colored bars, smooth height transitions, glowing comparison indicators, trail effects during swaps, and a futuristic dashboard design with animated controls",
    "content": "import { useState, useCallback } from 'react';\nimport { useEffect } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Slider } from '@/components/ui/slider';\nimport { Play, Pause, RotateCcw, Zap, BarChart3 } from 'lucide-react';\nimport { motion } from 'framer-motion';\n\ninterface ArrayElement {\n  value: number;\n  id: string;\n  isComparing?: boolean;\n  isSwapping?: boolean;\n  isSorted?: boolean;\n}\n\ninterface AlgorithmStep {\n  array: ArrayElement[];\n  comparingIndices: number[];\n  swappingIndices: number[];\n  sortedIndices: number[];\n}\n\ntype AlgorithmType = 'bubble' | 'quick' | 'merge' | 'insertion';\n\nconst NEON_COLORS = [\n  '#00ffff',\n  '#ff00ff', \n  '#00ff00',\n  '#ffff00',\n  '#ff0066',\n  '#00ffaa'\n];\n\nconst mockAlgorithms = [\n  { id: 'bubble', name: 'Bubble Sort', complexity: 'O(n\u00b2)' },\n  { id: 'quick', name: 'Quick Sort', complexity: 'O(n log n)' },\n  { id: 'merge', name: 'Merge Sort', complexity: 'O(n log n)' },\n  { id: 'insertion', name: 'Insertion Sort', complexity: 'O(n\u00b2)' }\n];\n\nexport default function AlgorithmVisualizer() {\n  const [array, setArray] = useState<ArrayElement[]>([]);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [speed, setSpeed] = useState([50]);\n  const [arraySize, setArraySize] = useState([20]);\n  const [selectedAlgorithm, setSelectedAlgorithm] = useState<AlgorithmType>('bubble');\n  const [currentStep, setCurrentStep] = useState(0);\n  const [steps, setSteps] = useState<AlgorithmStep[]>([]);\n  const [comparisons, setComparisons] = useState(0);\n  const [swaps, setSwaps] = useState(0);\n  const [progress, setProgress] = useState(0);\n\n  const generateRandomArray = useCallback(() => {\n    const newArray: ArrayElement[] = Array.from({ length: arraySize[0] }, (_, index) => ({\n      value: Math.floor(Math.random() * 100) + 5,\n      id: `element-${index}-${Date.now()}`,\n      isComparing: false,\n      isSwapping: false,\n      isSorted: false\n    }));\n    setArray(newArray);\n    setSteps([]);\n    setCurrentStep(0);\n    setIsPlaying(false);\n  }, [arraySize]);\n\n  const resetVisualization = useCallback(() => {\n\n    setIsPlaying(false);\n    setCurrentStep(0);\n    setSteps([]);\n    generateRandomArray();  }, [generateRandomArray]);\n\n  const animateSteps = useCallback(() => {\n    if (currentStep >= steps.length) {\n      setIsPlaying(false);\n      return;\n    }\n\n    const step = steps[currentStep];\n    setArray(step.array);\n    setCurrentStep(prev => prev + 1);\n  }, [currentStep, steps]);\n\n  const startVisualization = useCallback(() => {    if (steps.length === 0) return;\n    if (currentStep >= steps.length) {\n      setCurrentStep(0);\n    }\n    setIsPlaying(true);\n    \n  }, [steps, speed, currentStep]);\n  useEffect(() => {\n    if (!isPlaying) return;\n\n    const delay = 1000 - (speed[0] * 9.5);\n    const timer = setTimeout(() => {\n      animateSteps();\n    }, delay);\n\n    return () => clearTimeout(timer);\n  }, [isPlaying, speed, animateSteps]);\n\n  const pauseVisualization = useCallback(() => {\n\n    setIsPlaying(false);\n  }, []);\n\n  const generateSortingSteps = useCallback((algorithm: AlgorithmType) => {\n    const algorithmArray = [...array];\n    const generatedSteps: AlgorithmStep[] = [];\n\n    const addStep = (arr: ArrayElement[], comparing: number[] = [], swapping: number[] = [], sorted: number[] = []) => {\n      generatedSteps.push({\n        array: arr.map(el => ({ ...el })),\n        comparingIndices: [...comparing],\n        swappingIndices: [...swapping],\n        sortedIndices: [...sorted]\n      });\n    };\n\n    // Initial state\n    addStep(algorithmArray);\n\n    switch (algorithm) {\n      case 'bubble': {\n        const arr = [...algorithmArray];\n        const n = arr.length;\n        const sortedSet = new Set<number>();\n\n        for (let i = 0; i < n - 1; i++) {\n          for (let j = 0; j < n - i - 1; j++) {\n            // Comparing\n            addStep(arr, [j, j + 1], [], Array.from(sortedSet));\n\n            if (arr[j].value > arr[j + 1].value) {\n              // Swapping\n              addStep(arr, [], [j, j + 1], Array.from(sortedSet));\n              [arr[j], arr[j + 1]] = [arr[j + 1], arr[j]];\n              addStep(arr, [], [], Array.from(sortedSet));\n            }\n          }\n          sortedSet.add(n - i - 1);\n          addStep(arr, [], [], Array.from(sortedSet));\n        }\n        sortedSet.add(0);\n        addStep(arr, [], [], Array.from(sortedSet));\n        break;\n      }\n\n      case 'insertion': {\n        const arr = [...algorithmArray];\n        const n = arr.length;\n        const sortedSet = new Set<number>([0]);\n        addStep(arr, [], [], [0]);\n\n        for (let i = 1; i < n; i++) {\n          const key = arr[i];\n          let j = i - 1;\n\n          addStep(arr, [i], [], Array.from(sortedSet));\n\n          while (j >= 0 && arr[j].value > key.value) {\n            addStep(arr, [j, j + 1], [], Array.from(sortedSet));\n            addStep(arr, [], [j, j + 1], Array.from(sortedSet));\n            arr[j + 1] = arr[j];\n            addStep(arr, [], [], Array.from(sortedSet));\n            j--;\n          }\n          arr[j + 1] = key;\n          sortedSet.add(i);\n          addStep(arr, [], [], Array.from(sortedSet));\n        }\n        break;\n      }\n\n      case 'quick': {\n        const arr = [...algorithmArray];\n        const sortedSet = new Set<number>();\n\n        const partition = (low: number, high: number): number => {\n          const pivot = arr[high].value;\n          addStep(arr, [high], [], Array.from(sortedSet));\n          let i = low - 1;\n\n          for (let j = low; j < high; j++) {\n            addStep(arr, [j, high], [], Array.from(sortedSet));\n            if (arr[j].value < pivot) {\n              i++;\n              if (i !== j) {\n                addStep(arr, [], [i, j], Array.from(sortedSet));\n                [arr[i], arr[j]] = [arr[j], arr[i]];\n                addStep(arr, [], [], Array.from(sortedSet));\n              }\n            }\n          }\n\n          addStep(arr, [], [i + 1, high], Array.from(sortedSet));\n          [arr[i + 1], arr[high]] = [arr[high], arr[i + 1]];\n          sortedSet.add(i + 1);\n          addStep(arr, [], [], Array.from(sortedSet));\n          return i + 1;\n        };\n\n        const quickSort = (low: number, high: number) => {\n          if (low < high) {\n            const pi = partition(low, high);\n            quickSort(low, pi - 1);\n            quickSort(pi + 1, high);\n          } else if (low === high) {\n            sortedSet.add(low);\n            addStep(arr, [], [], Array.from(sortedSet));\n          }\n        };\n\n        quickSort(0, arr.length - 1);\n        break;\n      }\n\n      case 'merge': {\n        const arr = [...algorithmArray];\n        const sortedSet = new Set<number>();\n\n        const merge = (left: number, mid: number, right: number) => {\n          const leftArr = arr.slice(left, mid + 1);\n          const rightArr = arr.slice(mid + 1, right + 1);\n          let i = 0, j = 0, k = left;\n\n          while (i < leftArr.length && j < rightArr.length) {\n            addStep(arr, [left + i, mid + 1 + j], [], Array.from(sortedSet));\n\n            if (leftArr[i].value <= rightArr[j].value) {\n              arr[k] = leftArr[i];\n              i++;\n            } else {\n              arr[k] = rightArr[j];\n              j++;\n            }\n            addStep(arr, [], [k], Array.from(sortedSet));\n            k++;\n          }\n\n          while (i < leftArr.length) {\n            arr[k] = leftArr[i];\n            addStep(arr, [], [k], Array.from(sortedSet));\n            i++;\n            k++;\n          }\n\n          while (j < rightArr.length) {\n            arr[k] = rightArr[j];\n            addStep(arr, [], [k], Array.from(sortedSet));\n            j++;\n            k++;\n          }\n\n          if (right - left + 1 === arr.length) {\n            for (let idx = left; idx <= right; idx++) {\n              sortedSet.add(idx);\n            }\n          }\n          addStep(arr, [], [], Array.from(sortedSet));\n        };\n\n        const mergeSort = (left: number, right: number) => {\n          if (left < right) {\n            const mid = Math.floor((left + right) / 2);\n            mergeSort(left, mid);\n            mergeSort(mid + 1, right);\n            merge(left, mid, right);\n          }\n        };\n\n        mergeSort(0, arr.length - 1);\n        \n        // Mark all as sorted at the end\n        for (let i = 0; i < arr.length; i++) {\n          sortedSet.add(i);\n        }\n        addStep(arr, [], [], Array.from(sortedSet));\n        break;\n      }\n    }\n\n    setSteps(generatedSteps);\n    setCurrentStep(0);\n  }, [array]);\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-gray-900 via-purple-900 to-gray-900 p-8\">\n      <div className=\"max-w-7xl mx-auto space-y-8\">\n        <motion.div\n          initial={{ opacity: 0, y: -20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.8 }}\n          className=\"text-center space-y-4\"\n        >\n          <motion.h1\n            className=\"text-6xl font-bold bg-gradient-to-r from-cyan-400 via-purple-400 to-pink-400 bg-clip-text text-transparent\"\n            animate={{\n              textShadow: [\n                '0 0 20px rgba(0, 255, 255, 0.5)',\n                '0 0 40px rgba(255, 0, 255, 0.5)',\n                '0 0 20px rgba(0, 255, 255, 0.5)'\n              ]\n            }}\n            transition={{ duration: 2, repeat: Infinity }}\n          >\n            Algorithm Visualizer\n          </motion.h1>\n          \n          <div className=\"flex items-center justify-center gap-4\">\n            <motion.div\n              initial={{ scale: 0 }}\n              animate={{ scale: 1 }}\n              transition={{ delay: 0.3, type: \"spring\" }}\n              className=\"flex items-center gap-2 px-6 py-3 bg-gray-800/50 backdrop-blur-sm rounded-full border border-cyan-500/30\"\n            >\n              <Zap className=\"w-5 h-5 text-cyan-400\" />\n              <span className=\"text-xl font-semibold text-cyan-300\">\n                {mockAlgorithms.find(a => a.id === selectedAlgorithm)?.name}\n              </span>\n            </motion.div>\n            \n            <motion.div\n              initial={{ scale: 0 }}\n              animate={{ scale: 1 }}\n              transition={{ delay: 0.5, type: \"spring\" }}\n              className=\"px-4 py-2 bg-purple-500/20 backdrop-blur-sm rounded-full border border-purple-400/50\"\n              style={{\n                boxShadow: '0 0 20px rgba(168, 85, 247, 0.4)'\n              }}\n            >\n              <div className=\"flex items-center gap-2\">\n                <BarChart3 className=\"w-4 h-4 text-purple-300\" />\n                <span className=\"text-sm font-mono text-purple-200\">\n                  {mockAlgorithms.find(a => a.id === selectedAlgorithm)?.complexity}\n                </span>\n              </div>\n            </motion.div>\n          </div>\n        </motion.div></parameter>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-6\">\n          <div className=\"lg:col-span-1 space-y-6\">\n            <motion.div\n              initial={{ opacity: 0, x: -50 }}\n              animate={{ opacity: 1, x: 0 }}\n              className=\"bg-gray-900/50 backdrop-blur-lg border border-cyan-500/30 rounded-xl p-6 shadow-[0_0_30px_rgba(0,255,255,0.3)] hover:shadow-[0_0_50px_rgba(0,255,255,0.5)] transition-all duration-300\"\n            >\n              <div className=\"space-y-6\">\n                {/* Algorithm Selection */}\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center gap-2 text-cyan-400\">\n                    <Zap className=\"w-4 h-4\" />\n                    <h3 className=\"text-sm font-semibold uppercase tracking-wider\">Algorithm</h3>\n                  </div>\n                  <div className=\"grid grid-cols-1 gap-2\">\n                    {mockAlgorithms.map((algo) => (\n                      <motion.button\n                        key={algo.id}\n                        whileHover={{ scale: 1.02 }}\n                        whileTap={{ scale: 0.98 }}\n                        onClick={() => setSelectedAlgorithm(algo.id as AlgorithmType)}\n                        className={`p-3 rounded-lg border transition-all duration-300 text-left ${\n                          selectedAlgorithm === algo.id\n                            ? 'bg-cyan-500/20 border-cyan-400 shadow-[0_0_20px_rgba(0,255,255,0.4)]'\n                            : 'bg-gray-800/50 border-gray-700 hover:border-cyan-500/50'\n                        }`}\n                      >\n                        <div className=\"text-sm font-medium text-white\">{algo.name}</div>\n                        <div className=\"text-xs text-gray-400 mt-1\">{algo.complexity}</div>\n                      </motion.button>\n                    ))}\n                  </div>\n                </div>\n\n                {/* Speed Control */}\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center gap-2 text-purple-400\">\n                      <Zap className=\"w-4 h-4\" />\n                      <h3 className=\"text-sm font-semibold uppercase tracking-wider\">Speed</h3>\n                    </div>\n                    <span className=\"text-xs text-purple-300 font-mono bg-purple-500/20 px-2 py-1 rounded\">\n                      {speed[0]}ms\n                    </span>\n                  </div>\n                  <Slider\n                    value={speed}\n                    onValueChange={setSpeed}\n                    min={10}\n                    max={200}\n                    step={10}\n                    className=\"[&_[role=slider]]:bg-purple-500 [&_[role=slider]]:border-purple-400 [&_[role=slider]]:shadow-[0_0_15px_rgba(168,85,247,0.6)]\"\n                  />\n                </div>\n\n                {/* Array Size Control */}\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center gap-2 text-pink-400\">\n                      <BarChart3 className=\"w-4 h-4\" />\n                      <h3 className=\"text-sm font-semibold uppercase tracking-wider\">Array Size</h3>\n                    </div>\n                    <span className=\"text-xs text-pink-300 font-mono bg-pink-500/20 px-2 py-1 rounded\">\n                      {arraySize[0]}\n                    </span>\n                  </div>\n                  <Slider\n                    value={arraySize}\n                    onValueChange={setArraySize}\n                    min={5}\n                    max={100}\n                    step={5}\n                    disabled={isPlaying}\n                    className=\"[&_[role=slider]]:bg-pink-500 [&_[role=slider]]:border-pink-400 [&_[role=slider]]:shadow-[0_0_15px_rgba(236,72,153,0.6)]\"\n                  />\n                </div>\n\n                {/* Control Buttons */}\n                <div className=\"space-y-2 pt-4 border-t border-gray-700/50\">\n                  <Button\n                    onClick={isPlaying ? pauseVisualization : startVisualization}\n                    disabled={steps.length === 0}\n                    className=\"w-full bg-gradient-to-r from-cyan-500 to-blue-500 hover:from-cyan-400 hover:to-blue-400 text-white shadow-[0_0_20px_rgba(0,255,255,0.5)] hover:shadow-[0_0_30px_rgba(0,255,255,0.7)] transition-all duration-300\"\n                  >\n                    {isPlaying ? (\n                      <>\n                        <Pause className=\"w-4 h-4 mr-2\" />\n                        Pause\n                      </>\n                    ) : (\n                      <>\n                        <Play className=\"w-4 h-4 mr-2\" />\n                        {currentStep > 0 ? 'Resume' : 'Start'}\n                      </>\n                    )}\n                  </Button>\n\n                  <Button\n                    onClick={resetVisualization}\n                    variant=\"outline\"\n                    className=\"w-full border-purple-500/50 text-purple-300 hover:bg-purple-500/20 hover:border-purple-400 hover:shadow-[0_0_20px_rgba(168,85,247,0.4)] transition-all duration-300\"\n                  >\n                    <RotateCcw className=\"w-4 h-4 mr-2\" />\n                    Reset\n                  </Button>\n\n                  <Button\n                    onClick={() => generateSortingSteps(selectedAlgorithm)}\n                    disabled={isPlaying || array.length === 0}\n                    variant=\"outline\"\n                    className=\"w-full border-pink-500/50 text-pink-300 hover:bg-pink-500/20 hover:border-pink-400 hover:shadow-[0_0_20px_rgba(236,72,153,0.4)] transition-all duration-300\"\n                  >\n                    <Zap className=\"w-4 h-4 mr-2\" />\n                    Generate Steps\n                  </Button>\n                </div>\n\n                {/* Stats Display */}\n                <div className=\"pt-4 border-t border-gray-700/50 space-y-2\">\n                  <div className=\"flex justify-between items-center text-xs\">\n                    <span className=\"text-gray-400\">Current Step</span>\n                    <span className=\"text-cyan-300 font-mono bg-cyan-500/10 px-2 py-1 rounded\">\n                      {currentStep} / {steps.length}\n                    </span>\n                  </div>\n                  <div className=\"flex justify-between items-center text-xs\">\n                    <span className=\"text-gray-400\">Array Length</span>\n                    <span className=\"text-purple-300 font-mono bg-purple-500/10 px-2 py-1 rounded\">\n                      {array.length}\n                    </span>\n                  </div>\n                </div>\n              </div>\n            </motion.div>\n            \n            <div className=\"bg-gray-900/50 backdrop-blur-lg border border-cyan-500/30 rounded-xl p-6 shadow-2xl shadow-cyan-500/20\">\n              <div className=\"space-y-6\">\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center gap-2 text-cyan-400\">\n                    <Zap className=\"w-4 h-4\" />\n                    <span className=\"text-sm font-semibold tracking-wider\">ALGORITHM</span>\n                  </div>\n                  <div className=\"grid grid-cols-1 gap-3\">\n                    {mockAlgorithms.map((algo) => (\n                      <motion.button\n                        key={algo.id}\n                        onClick={() => setSelectedAlgorithm(algo.id as AlgorithmType)}\n                        className={`relative p-4 rounded-lg border-2 transition-all duration-300 text-left ${\n                          selectedAlgorithm === algo.id\n                            ? 'border-cyan-400 bg-cyan-500/20 shadow-lg shadow-cyan-500/50'\n                            : 'border-gray-700 bg-gray-800/50 hover:border-cyan-500/50 hover:bg-cyan-500/10'\n                        }`}\n                        whileHover={{ scale: 1.02 }}\n                        whileTap={{ scale: 0.98 }}\n                      >\n                        <div className=\"space-y-1\">\n                          <div className=\"font-semibold text-white\">{algo.name}</div>\n                          <div className={`text-xs ${\n                            selectedAlgorithm === algo.id ? 'text-cyan-300' : 'text-gray-400'\n                          }`}>\n                            {algo.complexity}\n                          </div>\n                        </div>\n                        {selectedAlgorithm === algo.id && (\n                          <motion.div\n                            className=\"absolute inset-0 rounded-lg border-2 border-cyan-400\"\n                            initial={{ opacity: 0 }}\n                            animate={{ opacity: [0.5, 1, 0.5] }}\n                            transition={{ duration: 2, repeat: Infinity }}\n                          />\n                        )}\n                      </motion.button>\n                    ))}\n                  </div>\n                </div></parameter>\n\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <label className=\"text-cyan-400 text-sm font-medium flex items-center gap-2\">\n                      <Zap className=\"w-4 h-4\" />\n                      Speed\n                    </label>\n                    <span className=\"text-cyan-300 text-xs\">{speed[0]}ms</span>\n                  </div>\n                  <Slider\n                    value={speed}\n                    onValueChange={setSpeed}\n                    min={10}\n                    max={200}\n                    step={10}\n                    className=\"[&_[role=slider]]:bg-cyan-400 [&_[role=slider]]:border-cyan-300 [&_[role=slider]]:shadow-[0_0_15px_rgba(34,211,238,0.8)] [&_[role=slider]]:hover:shadow-[0_0_25px_rgba(34,211,238,1)] [&_[role=slider]]:transition-shadow [&_.relative]:bg-gray-700/50 [&_.relative]:border [&_.relative]:border-cyan-500/30 [&_.bg-primary]:bg-gradient-to-r [&_.bg-primary]:from-cyan-500 [&_.bg-primary]:to-purple-500 [&_.bg-primary]:shadow-[0_0_10px_rgba(34,211,238,0.5)]\"\n                  />\n                </div>\n\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <label className=\"text-cyan-400 text-sm font-medium flex items-center gap-2\">\n                      <BarChart3 className=\"w-4 h-4\" />\n                      Array Size\n                    </label>\n                    <span className=\"text-cyan-300 text-xs\">{arraySize[0]}</span>\n                  </div>\n                  <Slider\n                    value={arraySize}\n                    onValueChange={setArraySize}\n                    min={5}\n                    max={50}\n                    step={1}\n                    className=\"[&_[role=slider]]:bg-gradient-to-r [&_[role=slider]]:from-purple-500 [&_[role=slider]]:to-pink-500 [&_[role=slider]]:border-2 [&_[role=slider]]:border-purple-300 [&_[role=slider]]:shadow-lg [&_[role=slider]]:shadow-purple-500/50 [&_[role=slider]]:transition-all [&_[role=slider]]:hover:shadow-purple-500/80 [&_[role=slider]]:hover:scale-110 [&>span]:bg-gradient-to-r [&>span]:from-purple-500/30 [&>span]:to-pink-500/30 [&>span]:h-2 [&>span]:rounded-full\"\n                  />\n                </div>\n\n                <div className=\"flex gap-3 pt-4\">\n                  <motion.div className=\"flex-1\">\n                    <Button\n                      onClick={isPlaying ? pauseVisualization : startVisualization}\n                      disabled={array.length === 0 || (steps.length === 0 && !isPlaying)}\n                      className=\"w-full bg-gradient-to-r from-cyan-500 to-purple-500 hover:from-cyan-400 hover:to-purple-400 text-white font-semibold py-6 rounded-lg transition-all duration-300 disabled:opacity-50 disabled:cursor-not-allowed relative overflow-hidden group\"\n                      whileHover={{ scale: 1.05 }}\n                      whileTap={{ scale: 0.95 }}\n                    >\n                      <motion.div\n                        className=\"absolute inset-0 bg-gradient-to-r from-cyan-400 to-purple-400 opacity-0 group-hover:opacity-100 blur-xl transition-opacity duration-300\"\n                        animate={{\n                          opacity: isPlaying ? [0.5, 0.8, 0.5] : 0\n                        }}\n                        transition={{\n                          duration: 2,\n                          repeat: isPlaying ? Infinity : 0\n                        }}\n                      />\n                      <motion.div\n                        className=\"relative flex items-center justify-center gap-2\"\n                        initial={false}\n                        animate={{\n                          scale: isPlaying ? [1, 1.1, 1] : 1\n                        }}\n                        transition={{\n                          duration: 1,\n                          repeat: isPlaying ? Infinity : 0\n                        }}\n                      >\n                        <motion.div\n                          initial={false}\n                          animate={{\n                            rotate: isPlaying ? 0 : 0,\n                            scale: isPlaying ? 1 : 1\n                          }}\n                          transition={{ duration: 0.3 }}\n                        >\n                          {isPlaying ? (\n                            <Pause className=\"w-5 h-5\" />\n                          ) : (\n                            <Play className=\"w-5 h-5\" />\n                          )}\n                        </motion.div>\n                        <span>{isPlaying ? 'Pause' : 'Play'}</span>\n                      </motion.div>\n                    </Button>\n                  </motion.div>\n                  <motion.div whileTap={{ rotate: 360 }} transition={{ duration: 0.6 }}>\n                    <Button\n                      onClick={resetVisualization}\n                      disabled={isPlaying}\n                      variant=\"outline\"\n                      className=\"w-full bg-purple-500/20 border-purple-400/50 hover:bg-purple-500/30 hover:border-purple-400 text-purple-300 hover:text-purple-200 shadow-[0_0_15px_rgba(168,85,247,0.3)] hover:shadow-[0_0_25px_rgba(168,85,247,0.5)] transition-all duration-300 disabled:opacity-50 disabled:cursor-not-allowed\"\n                    >\n                      <RotateCcw className=\"w-4 h-4 mr-2\" />\n                      Reset\n                    </Button>\n                  </motion.div>\n                </div>\n              </div>\n            </div>\n\n                        <motion.div\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ delay: 0.2 }}\n              className=\"bg-gray-900/50 backdrop-blur-lg border border-purple-500/30 rounded-xl p-6 shadow-[0_0_30px_rgba(168,85,247,0.3)] hover:shadow-[0_0_50px_rgba(168,85,247,0.5)] transition-all duration-300\"\n            >\n              <div className=\"space-y-4\">\n                <div className=\"flex items-center gap-2 text-purple-400 mb-4\">\n                  <BarChart3 className=\"w-5 h-5\" />\n                  <h3 className=\"text-sm font-semibold uppercase tracking-wider\">Statistics</h3>\n                </div>\n\n                <div className=\"grid grid-cols-1 gap-4\">\n                  {/* Comparisons */}\n                  <motion.div\n                    className=\"relative p-4 rounded-lg bg-gradient-to-br from-cyan-500/10 to-cyan-500/5 border border-cyan-500/30 overflow-hidden\"\n                    whileHover={{ scale: 1.02 }}\n                    transition={{ type: \"spring\", stiffness: 300 }}\n                  >\n                    <div className=\"absolute inset-0 bg-gradient-to-r from-cyan-500/0 via-cyan-500/10 to-cyan-500/0 animate-pulse\" />\n                    <div className=\"relative z-10\">\n                      <div className=\"text-xs text-cyan-400 uppercase tracking-wider mb-1\">Comparisons</div>\n                      <motion.div\n                        className=\"text-3xl font-bold text-cyan-300\"\n                        key={comparisons}\n                        initial={{ scale: 1.2, color: '#00ffff' }}\n                        animate={{ scale: 1, color: '#67e8f9' }}\n                        transition={{ duration: 0.3 }}\n                      >\n                        {comparisons.toLocaleString()}\n                      </motion.div>\n                    </div>\n                    <div className=\"absolute top-2 right-2\">\n                      <motion.div\n                        className=\"w-2 h-2 rounded-full bg-cyan-400\"\n                        animate={{\n                          boxShadow: [\n                            '0 0 10px rgba(0, 255, 255, 0.8)',\n                            '0 0 20px rgba(0, 255, 255, 0.8)',\n                            '0 0 10px rgba(0, 255, 255, 0.8)'\n                          ]\n                        }}\n                        transition={{ duration: 1.5, repeat: Infinity }}\n                      />\n                    </div>\n                  </motion.div>\n\n                  {/* Swaps */}\n                  <motion.div\n                    className=\"relative p-4 rounded-lg bg-gradient-to-br from-pink-500/10 to-pink-500/5 border border-pink-500/30 overflow-hidden\"\n                    whileHover={{ scale: 1.02 }}\n                    transition={{ type: \"spring\", stiffness: 300 }}\n                  >\n                    <div className=\"absolute inset-0 bg-gradient-to-r from-pink-500/0 via-pink-500/10 to-pink-500/0 animate-pulse\" />\n                    <div className=\"relative z-10\">\n                      <div className=\"text-xs text-pink-400 uppercase tracking-wider mb-1\">Swaps</div>\n                      <motion.div\n                        className=\"text-3xl font-bold text-pink-300\"\n                        key={swaps}\n                        initial={{ scale: 1.2, color: '#ff0066' }}\n                        animate={{ scale: 1, color: '#f9a8d4' }}\n                        transition={{ duration: 0.3 }}\n                      >\n                        {swaps.toLocaleString()}\n                      </motion.div>\n                    </div>\n                    <div className=\"absolute top-2 right-2\">\n                      <motion.div\n                        className=\"w-2 h-2 rounded-full bg-pink-400\"\n                        animate={{\n                          boxShadow: [\n                            '0 0 10px rgba(255, 0, 102, 0.8)',\n                            '0 0 20px rgba(255, 0, 102, 0.8)',\n                            '0 0 10px rgba(255, 0, 102, 0.8)'\n                          ]\n                        }}\n                        transition={{ duration: 1.5, repeat: Infinity, delay: 0.5 }}\n                      />\n                    </div>\n                  </motion.div>\n\n                  {/* Progress */}\n                  <motion.div\n                    className=\"relative p-4 rounded-lg bg-gradient-to-br from-purple-500/10 to-purple-500/5 border border-purple-500/30 overflow-hidden\"\n                    whileHover={{ scale: 1.02 }}\n                    transition={{ type: \"spring\", stiffness: 300 }}\n                  >\n                    <div className=\"absolute inset-0 bg-gradient-to-r from-purple-500/0 via-purple-500/10 to-purple-500/0 animate-pulse\" />\n                    <div className=\"relative z-10\">\n                      <div className=\"text-xs text-purple-400 uppercase tracking-wider mb-1\">Progress</div>\n                      <motion.div\n                        className=\"text-3xl font-bold text-purple-300\"\n                        key={progress}\n                        initial={{ scale: 1.2 }}\n                        animate={{ scale: 1 }}\n                        transition={{ duration: 0.3 }}\n                      >\n                        {progress}%\n                      </motion.div>\n                      <div className=\"mt-3 h-2 bg-gray-800/50 rounded-full overflow-hidden border border-purple-500/20\">\n                        <motion.div\n                          className=\"h-full bg-gradient-to-r from-purple-500 via-pink-500 to-cyan-500 rounded-full\"\n                          initial={{ width: 0 }}\n                          animate={{ width: `${progress}%` }}\n                          transition={{ duration: 0.5, ease: \"easeOut\" }}\n                          style={{\n                            boxShadow: '0 0 15px rgba(168, 85, 247, 0.8)'\n                          }}\n                        />\n                      </div>\n                    </div>\n                    <div className=\"absolute top-2 right-2\">\n                      <motion.div\n                        className=\"w-2 h-2 rounded-full bg-purple-400\"\n                        animate={{\n                          boxShadow: [\n                            '0 0 10px rgba(168, 85, 247, 0.8)',\n                            '0 0 20px rgba(168, 85, 247, 0.8)',\n                            '0 0 10px rgba(168, 85, 247, 0.8)'\n                          ]\n                        }}\n                        transition={{ duration: 1.5, repeat: Infinity, delay: 1 }}\n                      />\n                    </div>\n                  </motion.div>\n\n                  {/* Array Size Info */}\n                  <motion.div\n                    className=\"relative p-4 rounded-lg bg-gradient-to-br from-green-500/10 to-green-500/5 border border-green-500/30\"\n                    whileHover={{ scale: 1.02 }}\n                    transition={{ type: \"spring\", stiffness: 300 }}\n                  >\n                    <div className=\"text-xs text-green-400 uppercase tracking-wider mb-1\">Array Size</div>\n                    <div className=\"text-3xl font-bold text-green-300\">\n                      {array.length}\n                    </div>\n                  </motion.div>\n                </div>\n\n                {/* Status Indicator */}\n                <div className=\"pt-4 border-t border-gray-700/50\">\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-xs text-gray-400 uppercase tracking-wider\">Status</span>\n                    <motion.div\n                      className=\"flex items-center gap-2\"\n                      animate={{\n                        opacity: isPlaying ? [1, 0.6, 1] : 1\n                      }}\n                      transition={{ duration: 1.5, repeat: isPlaying ? Infinity : 0 }}\n                    >\n                      <motion.div\n                        className={`w-2 h-2 rounded-full ${\n                          isPlaying ? 'bg-green-400' : progress === 100 ? 'bg-cyan-400' : 'bg-gray-500'\n                        }`}\n                        animate={{\n                          boxShadow: isPlaying\n                            ? [\n                                '0 0 10px rgba(34, 197, 94, 0.8)',\n                                '0 0 20px rgba(34, 197, 94, 0.8)',\n                                '0 0 10px rgba(34, 197, 94, 0.8)'\n                              ]\n                            : progress === 100\n                            ? '0 0 15px rgba(0, 255, 255, 0.8)'\n                            : 'none'\n                        }}\n                        transition={{ duration: 1, repeat: isPlaying ? Infinity : 0 }}\n                      />\n                      <span className={`text-xs font-medium ${\n                        isPlaying ? 'text-green-400' : progress === 100 ? 'text-cyan-400' : 'text-gray-400'\n                      }`}>\n                        {isPlaying ? 'Sorting...' : progress === 100 ? 'Complete' : 'Ready'}\n                      </span>\n                    </motion.div>\n                  </div>\n                </div>\n              </div>\n            </motion.div>\n          </div>\n\n          <div className=\"lg:col-span-3\">\n            <div className=\"bg-gray-900/50 backdrop-blur-lg border border-purple-500/30 rounded-xl p-8 shadow-2xl shadow-purple-500/20 min-h-[600px]\">\n              {array.length === 0 ? (\n                <motion.div\n                  initial={{ opacity: 0, scale: 0.8 }}\n                  animate={{ opacity: 1, scale: 1 }}\n                  className=\"flex flex-col items-center justify-center h-full space-y-6\"\n                >\n                  <motion.div\n                    animate={{\n                      rotate: [0, 360],\n                      scale: [1, 1.2, 1]\n                    }}\n                    transition={{\n                      duration: 3,\n                      repeat: Infinity,\n                      ease: \"easeInOut\"\n                    }}\n                  >\n                    <BarChart3 className=\"w-24 h-24 text-purple-400/50\" />\n                  </motion.div>\n                  <div className=\"text-center space-y-2\">\n                    <h3 className=\"text-2xl font-semibold text-purple-300\">\n                      Generate an Array to Begin\n                    </h3>\n                    <p className=\"text-gray-400\">\n                      Click the reset button to create a random array\n                    </p>\n                  </div>\n                </motion.div>\n              ) : (\n                <div className=\"relative w-full h-full\">\n                  {/* Comparison Indicators */}\n                  {array.map((element, index) => {\n                    const isComparing = element.isComparing;\n                    const isSwapping = element.isSwapping;\n                    const isSorted = element.isSorted;\n                    \n                    if (isComparing || isSwapping) {\n                      return (\n                        <motion.div\n                          key={`indicator-${element.id}`}\n                          className=\"absolute pointer-events-none\"\n                          style={{\n                            left: `${(index / array.length) * 100}%`,\n                            width: `${100 / array.length}%`,\n                            top: 0,\n                            height: '100%'\n                          }}\n                          initial={{ opacity: 0 }}\n                          animate={{ opacity: 1 }}\n                          exit={{ opacity: 0 }}\n                        >\n                          {isComparing && (\n                            <motion.div\n                              className=\"absolute inset-0 bg-cyan-400/10 border-2 border-cyan-400 rounded-lg\"\n                              animate={{\n                                boxShadow: [\n                                  '0 0 20px rgba(34, 211, 238, 0.6)',\n                                  '0 0 40px rgba(34, 211, 238, 0.9)',\n                                  '0 0 20px rgba(34, 211, 238, 0.6)'\n                                ]\n                              }}\n                              transition={{ duration: 0.5, repeat: Infinity }}\n                            />\n                          )}\n                          {isSwapping && (\n                            <>\n                              <motion.div\n                                className=\"absolute inset-0 bg-pink-500/20 border-2 border-pink-400 rounded-lg\"\n                                animate={{\n                                  boxShadow: [\n                                    '0 0 30px rgba(236, 72, 153, 0.8)',\n                                    '0 0 50px rgba(236, 72, 153, 1)',\n                                    '0 0 30px rgba(236, 72, 153, 0.8)'\n                                  ]\n                                }}\n                                transition={{ duration: 0.3, repeat: Infinity }}\n                              />\n                              {/* Swap Trail Effect */}\n                              <motion.div\n                                className=\"absolute inset-0\"\n                                initial={{ opacity: 0, scale: 0.8 }}\n                                animate={{ \n                                  opacity: [0, 1, 0],\n                                  scale: [0.8, 1.2, 1.5]\n                                }}\n                                transition={{ duration: 0.6, repeat: Infinity }}\n                              >\n                                <div className=\"w-full h-full rounded-lg bg-gradient-to-t from-pink-500/40 via-purple-500/30 to-transparent blur-sm\" />\n                              </motion.div>\n                            </>\n                          )}\n                        </motion.div>\n                      );\n                    }\n                    return null;\n                  })}\n\n                  {/* Array Bars */}\n                  <div className=\"flex items-end justify-center gap-1 h-full relative z-10\">\n                    {array.map((element, index) => {\n                      const heightPercentage = (element.value / 105) * 100;\n                      const colorIndex = index % NEON_COLORS.length;\n                      const barColor = element.isSorted \n                        ? '#00ff00' \n                        : element.isSwapping \n                        ? '#ff0066' \n                        : element.isComparing \n                        ? '#00ffff' \n                        : NEON_COLORS[colorIndex];\n\n                      return (\n                        <motion.div\n                          key={element.id}\n                          className=\"relative flex-1 min-w-[4px] max-w-[60px] rounded-t-lg\"\n                          style={{\n                            height: `${heightPercentage}%`,\n                            backgroundColor: barColor,\n                            boxShadow: `0 0 20px ${barColor}80, 0 0 40px ${barColor}40`\n                          }}\n                          initial={{ height: 0, opacity: 0 }}\n                          animate={{ \n                            height: `${heightPercentage}%`,\n                            opacity: 1,\n                            boxShadow: element.isSwapping\n                              ? [\n                                  `0 0 20px ${barColor}80, 0 0 40px ${barColor}40`,\n                                  `0 0 40px ${barColor}FF, 0 0 80px ${barColor}80`,\n                                  `0 0 20px ${barColor}80, 0 0 40px ${barColor}40`\n                                ]\n                              : `0 0 20px ${barColor}80, 0 0 40px ${barColor}40`\n                          }}\n                          transition={{\n                            height: { duration: 0.3, ease: \"easeOut\" },\n                            opacity: { duration: 0.2 },\n                            boxShadow: { duration: 0.3, repeat: element.isSwapping ? Infinity : 0 }\n                          }}\n                          whileHover={{\n                            scale: 1.05,\n                            boxShadow: `0 0 30px ${barColor}FF, 0 0 60px ${barColor}80`,\n                            transition: { duration: 0.2 }\n                          }}\n                        >\n                          {/* Swap Trail Particles */}\n                          {element.isSwapping && (\n                            <>\n                              <motion.div\n                                className=\"absolute inset-0 rounded-t-lg\"\n                                style={{\n                                  background: `linear-gradient(to top, ${barColor}40, transparent)`\n                                }}\n                                animate={{\n                                  opacity: [0.5, 1, 0.5],\n                                  scale: [1, 1.1, 1]\n                                }}\n                                transition={{ duration: 0.4, repeat: Infinity }}\n                              />\n                              {[...Array(3)].map((_, i) => (\n                                <motion.div\n                                  key={`particle-${i}`}\n                                  className=\"absolute w-2 h-2 rounded-full\"\n                                  style={{\n                                    backgroundColor: barColor,\n                                    left: '50%',\n                                    top: '50%',\n                                    marginLeft: '-4px',\n                                    marginTop: '-4px'\n                                  }}\n                                  animate={{\n                                    y: [-20, -40, -60],\n                                    x: [(i - 1) * 10, (i - 1) * 20, (i - 1) * 30],\n                                    opacity: [1, 0.5, 0],\n                                    scale: [1, 0.5, 0]\n                                  }}\n                                  transition={{\n                                    duration: 0.8,\n                                    repeat: Infinity,\n                                    delay: i * 0.1\n                                  }}\n                                />\n                              ))}\n                            </>\n                          )}\n\n                          {/* Value Label */}\n                          {array.length <= 30 && (\n                            <motion.div\n                              className=\"absolute -bottom-6 left-1/2 transform -translate-x-1/2 text-xs font-mono font-semibold whitespace-nowrap\"\n                              style={{ color: barColor }}\n                              initial={{ opacity: 0 }}\n                              animate={{ opacity: 0.8 }}\n                            >\n                              {element.value}\n                            </motion.div>\n                          )}\n\n                          {/* Sorted Checkmark */}\n                          {element.isSorted && (\n                            <motion.div\n                              className=\"absolute -top-8 left-1/2 transform -translate-x-1/2\"\n                              initial={{ scale: 0, rotate: -180 }}\n                              animate={{ scale: 1, rotate: 0 }}\n                              transition={{ type: \"spring\", stiffness: 200, damping: 10 }}\n                            >\n                              <div className=\"w-6 h-6 rounded-full bg-green-500 flex items-center justify-center shadow-[0_0_20px_rgba(0,255,0,0.8)]\">\n                                <svg\n                                  className=\"w-4 h-4 text-white\"\n                                  fill=\"none\"\n                                  strokeLinecap=\"round\"\n                                  strokeLinejoin=\"round\"\n                                  strokeWidth=\"3\"\n                                  viewBox=\"0 0 24 24\"\n                                  stroke=\"currentColor\"\n                                >\n                                  <path d=\"M5 13l4 4L19 7\" />\n                                </svg>\n                              </div>\n                            </motion.div>\n                          )}\n                        </motion.div>\n                      );\n                    })}\n                  </div>\n                </div>\n              )}\n              \n              <div className=\"flex items-end justify-center gap-1 h-[500px]\">\n                {array.length === 0 ? (\n                  <div className=\"flex items-center justify-center h-full\">\n                    <motion.div\n                      initial={{ opacity: 0, scale: 0.8 }}\n                      animate={{ opacity: 1, scale: 1 }}\n                      className=\"text-center space-y-4\"\n                    >\n                      <BarChart3 className=\"w-16 h-16 text-cyan-400/50 mx-auto\" />\n                      <p className=\"text-cyan-300/70 text-lg\">Generate an array to start visualizing</p>\n                    </motion.div>\n                  </div>\n                ) : (\n                  array.map((element, index) => {\n                    const heightPercentage = (element.value / 100) * 100;\n                    const colorIndex = index % NEON_COLORS.length;\n                    const neonColor = NEON_COLORS[colorIndex];\n                    \n                    let barState = 'default';\n                    if (element.isSorted) barState = 'sorted';\n                    else if (element.isSwapping) barState = 'swapping';\n                    else if (element.isComparing) barState = 'comparing';\n\n                    return (\n                      <motion.div\n                        key={element.id}\n                        className=\"relative flex-1 min-w-[4px] max-w-[60px]\"\n                        initial={{ height: 0, opacity: 0 }}\n                        animate={{\n                          height: `${heightPercentage}%`,\n                          opacity: 1,\n                          scale: element.isSwapping ? [1, 1.1, 1] : element.isComparing ? 1.05 : 1,\n                        }}\n                        transition={{\n                          height: { duration: 0.5, ease: \"easeOut\" },\n                          opacity: { duration: 0.3 },\n                          scale: { duration: 0.3 }\n                        }}\n                        style={{\n                          backgroundColor: element.isSorted \n                            ? '#00ff00' \n                            : element.isSwapping \n                            ? '#ff00ff' \n                            : element.isComparing \n                            ? '#ffff00' \n                            : neonColor,\n                          boxShadow: element.isSorted\n                            ? '0 0 20px rgba(0, 255, 0, 0.8), 0 0 40px rgba(0, 255, 0, 0.5), inset 0 0 20px rgba(0, 255, 0, 0.3)'\n                            : element.isSwapping\n                            ? '0 0 30px rgba(255, 0, 255, 1), 0 0 60px rgba(255, 0, 255, 0.7), inset 0 0 30px rgba(255, 0, 255, 0.4)'\n                            : element.isComparing\n                            ? '0 0 25px rgba(255, 255, 0, 0.9), 0 0 50px rgba(255, 255, 0, 0.6), inset 0 0 25px rgba(255, 255, 0, 0.3)'\n                            : `0 0 15px ${neonColor}80, 0 0 30px ${neonColor}40, inset 0 0 15px ${neonColor}30`,\n                          borderRadius: '4px 4px 0 0',\n                          position: 'relative',\n                          overflow: 'visible'\n                        }}\n                      >\n                        {/* Glow effect overlay */}\n                        <motion.div\n                          className=\"absolute inset-0 rounded-t\"\n                          animate={{\n                            opacity: element.isSwapping ? [0.3, 0.8, 0.3] : element.isComparing ? [0.4, 0.7, 0.4] : 0.5\n                          }}\n                          transition={{\n                            duration: element.isSwapping ? 0.4 : element.isComparing ? 0.6 : 1,\n                            repeat: element.isSwapping || element.isComparing ? Infinity : 0\n                          }}\n                          style={{\n                            background: `linear-gradient(to top, transparent, ${element.isSorted ? '#00ff00' : element.isSwapping ? '#ff00ff' : element.isComparing ? '#ffff00' : neonColor}40)`,\n                          }}\n                        />\n\n                        {/* Trail effect during swaps */}\n                        {element.isSwapping && (\n                          <>\n                            <motion.div\n                              className=\"absolute inset-0 rounded-t\"\n                              initial={{ opacity: 0, scale: 1 }}\n                              animate={{ \n                                opacity: [0.8, 0],\n                                scale: [1, 1.3],\n                              }}\n                              transition={{\n                                duration: 0.6,\n                                repeat: Infinity,\n                                ease: \"easeOut\"\n                              }}\n                              style={{\n                                backgroundColor: '#ff00ff',\n                                filter: 'blur(8px)',\n                              }}\n                            />\n                            <motion.div\n                              className=\"absolute -top-2 left-1/2 transform -translate-x-1/2\"\n                              animate={{\n                                y: [-10, -30],\n                                opacity: [1, 0],\n                              }}\n                              transition={{\n                                duration: 0.8,\n                                repeat: Infinity,\n                                ease: \"easeOut\"\n                              }}\n                            >\n                              <div \n                                className=\"w-2 h-2 rounded-full\"\n                                style={{\n                                  backgroundColor: '#ff00ff',\n                                  boxShadow: '0 0 10px #ff00ff, 0 0 20px #ff00ff'\n                                }}\n                              />\n                            </motion.div>\n                          </>\n                        )}\n\n                        {/* Comparison pulse effect */}\n                        {element.isComparing && (\n                          <motion.div\n                            className=\"absolute -inset-1 rounded-t\"\n                            animate={{\n                              opacity: [0, 0.6, 0],\n                              scale: [0.95, 1.1, 0.95],\n                            }}\n                            transition={{\n                              duration: 0.8,\n                              repeat: Infinity,\n                              ease: \"easeInOut\"\n                            }}\n                            style={{\n                              border: '2px solid #ffff00',\n                              boxShadow: '0 0 20px rgba(255, 255, 0, 0.8)',\n                            }}\n                          />\n                        )}\n\n                        {/* Value label */}\n                        {arraySize[0] <= 30 && (\n                          <motion.div\n                            className=\"absolute -top-8 left-1/2 transform -translate-x-1/2 text-xs font-bold whitespace-nowrap\"\n                            initial={{ opacity: 0 }}\n                            animate={{ opacity: 1 }}\n                            style={{\n                              color: element.isSorted ? '#00ff00' : element.isSwapping ? '#ff00ff' : element.isComparing ? '#ffff00' : neonColor,\n                              textShadow: `0 0 10px ${element.isSorted ? '#00ff00' : element.isSwapping ? '#ff00ff' : element.isComparing ? '#ffff00' : neonColor}`,\n                            }}\n                          >\n                            {element.value}\n                          </motion.div>\n                        )}\n\n                        {/* Sorted checkmark */}\n                        {element.isSorted && (\n                          <motion.div\n                            className=\"absolute -top-6 left-1/2 transform -translate-x-1/2\"\n                            initial={{ scale: 0, rotate: -180 }}\n                            animate={{ scale: 1, rotate: 0 }}\n                            transition={{ type: \"spring\", stiffness: 200, damping: 10 }}\n                          >\n                            <div \n                              className=\"w-4 h-4 rounded-full flex items-center justify-center text-xs\"\n                              style={{\n                                backgroundColor: '#00ff00',\n                                boxShadow: '0 0 15px rgba(0, 255, 0, 0.8)',\n                                color: '#000'\n                              }}\n                            >\n                              \u2713\n                            </div>\n                          </motion.div>\n                        )}\n                      </motion.div>\n                    );\n                  })\n                )</parameter>\n              </div>\n\n              <div className=\"mt-6 space-y-3\">\n                <div className=\"flex items-center justify-between text-sm\">\n                  <span className=\"text-cyan-400 font-semibold flex items-center gap-2\">\n                    <BarChart3 className=\"w-4 h-4\" />\n                    Sorting Progress\n                  </span>\n                  <motion.span \n                    className=\"text-cyan-300 font-mono text-lg\"\n                    key={currentStep}\n                    initial={{ scale: 1.2, color: '#00ffff' }}\n                    animate={{ scale: 1, color: '#67e8f9' }}\n                    transition={{ duration: 0.3 }}\n                  >\n                    {steps.length > 0 ? Math.round((currentStep / steps.length) * 100) : 0}%\n                  </motion.span>\n                </div>\n                \n                <div className=\"relative h-4 bg-gray-800/50 rounded-full overflow-hidden border border-cyan-500/30 shadow-inner\">\n                  <motion.div\n                    className=\"absolute inset-y-0 left-0 bg-gradient-to-r from-cyan-500 via-purple-500 to-pink-500 rounded-full\"\n                    initial={{ width: '0%' }}\n                    animate={{ \n                      width: steps.length > 0 ? `${(currentStep / steps.length) * 100}%` : '0%'\n                    }}\n                    transition={{ \n                      duration: 0.5,\n                      ease: \"easeOut\"\n                    }}\n                    style={{\n                      boxShadow: '0 0 20px rgba(0, 255, 255, 0.6), 0 0 40px rgba(168, 85, 247, 0.4)'\n                    }}\n                  />\n                  \n                  <motion.div\n                    className=\"absolute inset-0 bg-gradient-to-r from-transparent via-white/30 to-transparent\"\n                    animate={{\n                      x: ['-100%', '200%']\n                    }}\n                    transition={{\n                      duration: 2,\n                      repeat: isPlaying ? Infinity : 0,\n                      ease: \"linear\"\n                    }}\n                    style={{\n                      width: '50%'\n                    }}\n                  />\n                  \n                  {steps.length > 0 && currentStep === steps.length && (\n                    <motion.div\n                      className=\"absolute inset-0 bg-gradient-to-r from-cyan-400 via-purple-400 to-pink-400\"\n                      initial={{ opacity: 0 }}\n                      animate={{ \n                        opacity: [0, 0.8, 0],\n                        scale: [1, 1.05, 1]\n                      }}\n                      transition={{\n                        duration: 1.5,\n                        repeat: Infinity,\n                        ease: \"easeInOut\"\n                      }}\n                    />\n                  )}\n                </div>\n                \n                {steps.length > 0 && currentStep === steps.length && (\n                  <motion.div\n                    initial={{ opacity: 0, y: -10 }}\n                    animate={{ opacity: 1, y: 0 }}\n                    className=\"text-center\"\n                  >\n                    <span className=\"text-sm font-semibold text-transparent bg-gradient-to-r from-cyan-400 via-purple-400 to-pink-400 bg-clip-text\">\n                      \u2728 Sorting Complete!\n                    </span>\n                  </motion.div>\n                )}\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.8, delay: 0.4 }}\n          className=\"bg-gray-900/50 backdrop-blur-lg border border-cyan-500/30 rounded-xl p-6 shadow-2xl shadow-cyan-500/20\"\n        >\n          <div className=\"flex items-center gap-2 mb-6\">\n            <BarChart3 className=\"w-5 h-5 text-cyan-400\" />\n            <h3 className=\"text-lg font-semibold text-cyan-300 uppercase tracking-wider\">Legend</h3>\n          </div>\n          \n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n            <motion.div\n              className=\"flex items-center gap-3 p-4 bg-gray-800/50 rounded-lg border border-gray-700/50 hover:border-cyan-500/50 transition-all duration-300\"\n              whileHover={{ scale: 1.05 }}\n            >\n              <motion.div\n                className=\"w-6 h-6 rounded-md bg-gradient-to-br from-cyan-400 to-cyan-600 shadow-lg\"\n                style={{\n                  boxShadow: '0 0 20px rgba(0, 255, 255, 0.6)'\n                }}\n                animate={{\n                  boxShadow: [\n                    '0 0 20px rgba(0, 255, 255, 0.6)',\n                    '0 0 30px rgba(0, 255, 255, 0.8)',\n                    '0 0 20px rgba(0, 255, 255, 0.6)'\n                  ]\n                }}\n                transition={{ duration: 2, repeat: Infinity }}\n              />\n              <div>\n                <div className=\"text-sm font-semibold text-white\">Comparing</div>\n                <div className=\"text-xs text-gray-400\">Active comparison</div>\n              </div>\n            </motion.div>\n\n            <motion.div\n              className=\"flex items-center gap-3 p-4 bg-gray-800/50 rounded-lg border border-gray-700/50 hover:border-purple-500/50 transition-all duration-300\"\n              whileHover={{ scale: 1.05 }}\n            >\n              <motion.div\n                className=\"w-6 h-6 rounded-md bg-gradient-to-br from-purple-400 to-purple-600 shadow-lg\"\n                style={{\n                  boxShadow: '0 0 20px rgba(168, 85, 247, 0.6)'\n                }}\n                animate={{\n                  scale: [1, 1.2, 1],\n                  boxShadow: [\n                    '0 0 20px rgba(168, 85, 247, 0.6)',\n                    '0 0 30px rgba(168, 85, 247, 0.8)',\n                    '0 0 20px rgba(168, 85, 247, 0.6)'\n                  ]\n                }}\n                transition={{ duration: 1.5, repeat: Infinity }}\n              />\n              <div>\n                <div className=\"text-sm font-semibold text-white\">Swapping</div>\n                <div className=\"text-xs text-gray-400\">Elements moving</div>\n              </div>\n            </motion.div>\n\n            <motion.div\n              className=\"flex items-center gap-3 p-4 bg-gray-800/50 rounded-lg border border-gray-700/50 hover:border-green-500/50 transition-all duration-300\"\n              whileHover={{ scale: 1.05 }}\n            >\n              <motion.div\n                className=\"w-6 h-6 rounded-md bg-gradient-to-br from-green-400 to-green-600 shadow-lg\"\n                style={{\n                  boxShadow: '0 0 20px rgba(34, 197, 94, 0.6)'\n                }}\n                animate={{\n                  opacity: [1, 0.7, 1]\n                }}\n                transition={{ duration: 2, repeat: Infinity }}\n              />\n              <div>\n                <div className=\"text-sm font-semibold text-white\">Sorted</div>\n                <div className=\"text-xs text-gray-400\">In final position</div>\n              </div>\n            </motion.div>\n\n            <motion.div\n              className=\"flex items-center gap-3 p-4 bg-gray-800/50 rounded-lg border border-gray-700/50 hover:border-pink-500/50 transition-all duration-300\"\n              whileHover={{ scale: 1.05 }}\n            >\n              <motion.div\n                className=\"w-6 h-6 rounded-md bg-gradient-to-br from-pink-400 to-pink-600 shadow-lg\"\n                style={{\n                  boxShadow: '0 0 15px rgba(236, 72, 153, 0.5)'\n                }}\n              />\n              <div>\n                <div className=\"text-sm font-semibold text-white\">Unsorted</div>\n                <div className=\"text-xs text-gray-400\">Awaiting sort</div>\n              </div>\n            </motion.div>\n          </div>\n\n          <motion.div\n            className=\"mt-6 p-4 bg-gradient-to-r from-cyan-500/10 to-purple-500/10 rounded-lg border border-cyan-500/30\"\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            transition={{ delay: 0.6 }}\n          >\n            <div className=\"flex items-start gap-3\">\n              <Zap className=\"w-5 h-5 text-cyan-400 mt-0.5 flex-shrink-0\" />\n              <div className=\"text-sm text-gray-300\">\n                <span className=\"font-semibold text-cyan-300\">Pro Tip:</span> Watch the neon glow effects to track algorithm progress. Brighter glows indicate active operations, while steady colors show completed sections.\n              </div>\n            </div>\n          </motion.div>\n        </motion.div>\n      </div>\n    </div>\n  );\n}",
    "error": null,
    "elapsed_time": 109.4065580368042,
    "success": true
  }
}