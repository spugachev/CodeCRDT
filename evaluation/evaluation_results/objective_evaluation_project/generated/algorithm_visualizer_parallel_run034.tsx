import { useState, useCallback } from 'react';
import { Button } from '@/components/ui/button';
import { Slider } from '@/components/ui/slider';
import { Play, Pause, RotateCcw, Zap, BarChart3 } from 'lucide-react';
import { motion } from 'framer-motion';

interface ArrayElement {
  value: number;
  id: string;
  isComparing?: boolean;
  isSwapping?: boolean;
  isSorted?: boolean;
}

interface AlgorithmStep {
  array: ArrayElement[];
  comparingIndices: number[];
  swappingIndices: number[];
  sortedIndices: number[];
}

type AlgorithmType = 'bubble' | 'quick' | 'merge' | 'insertion';

const NEON_COLORS = [
  '#00ffff',
  '#ff00ff', 
  '#00ff00',
  '#ffff00',
  '#ff0066',
  '#00ffaa'
];

const mockAlgorithms = [
  { id: 'bubble', name: 'Bubble Sort', complexity: 'O(n²)' },
  { id: 'quick', name: 'Quick Sort', complexity: 'O(n log n)' },
  { id: 'merge', name: 'Merge Sort', complexity: 'O(n log n)' },
  { id: 'insertion', name: 'Insertion Sort', complexity: 'O(n²)' }
];

export default function AlgorithmVisualizer() {
  const [array, setArray] = useState<ArrayElement[]>([]);
  const [isPlaying, setIsPlaying] = useState(false);
  const [speed, setSpeed] = useState([50]);
  const [arraySize, setArraySize] = useState([20]);
  const [selectedAlgorithm, setSelectedAlgorithm] = useState<AlgorithmType>('bubble');
  const [currentStep, setCurrentStep] = useState(0);
  const [steps, setSteps] = useState<AlgorithmStep[]>([]);

  const generateRandomArray = useCallback(() => {
    const newArray: ArrayElement[] = Array.from({ length: arraySize[0] }, (_, index) => ({
      value: Math.floor(Math.random() * 100) + 5,
      id: `element-${index}-${Date.now()}`,
      isComparing: false,
      isSwapping: false,
      isSorted: false
    }));
    setArray(newArray);
    setSteps([]);
    setCurrentStep(0);
    setIsPlaying(false);
  }, [arraySize]);

  const resetVisualization = useCallback(() => {

    setIsPlaying(false);
    setCurrentStep(0);
    setSteps([]);
    generateRandomArray();      }, [generateRandomArray]);mArray]);

  // Animation effect for step-by-step visualization
  const animateSteps = useCallback(() => {
    if (currentStep < steps.length - 1) {
      const delay = 1000 - speed[0] * 9.5; // Convert speed (0-100) to delay (1000ms-50ms)
      const timer = setTimeout(() => {
        setCurrentStep(prev => prev + 1);
      }, delay);
      return () => clearTimeout(timer);
    } else if (currentStep === steps.length - 1) {
      setIsPlaying(false);
    }
  }, [currentStep, steps.length, speed]);

  // Effect to run animation when playing
  if (isPlaying && steps.length > 0) {
    animateSteps();
  }
  const startVisualization = useCallback(() => {
    if (steps.length === 0) {
      // Generate steps first if not already generated
      // For now, just set playing state - steps should be generated by algorithm
      return;
    }
    
    if (currentStep >= steps.length - 1) {
      // Reset to beginning if at end
      setCurrentStep(0);
    }
    
    setIsPlaying(true);
  }, [steps, speed, currentStep]);

  const pauseVisualization = useCallback(() => {


    setIsPlaying(false);
  }, []);

  const generateSortingSteps = useCallback((algorithm: AlgorithmType) => {
    const sortedArray = [...array];
    const generatedSteps: AlgorithmStep[] = [];

    const addStep = (arr: ArrayElement[], comparing: number[] = [], swapping: number[] = [], sorted: number[] = []) => {
      generatedSteps.push({
        array: arr.map((el, idx) => ({
          ...el,
          isComparing: comparing.includes(idx),
          isSwapping: swapping.includes(idx),
          isSorted: sorted.includes(idx)
        })),
        comparingIndices: comparing,
        swappingIndices: swapping,
        sortedIndices: sorted
      });
    };

    // Initial state
    addStep([...sortedArray]);

    if (algorithm === 'bubble') {
      const sortedIndices: number[] = [];
      for (let i = 0; i < sortedArray.length - 1; i++) {
        for (let j = 0; j < sortedArray.length - i - 1; j++) {
          // Comparing
          addStep([...sortedArray], [j, j + 1], [], sortedIndices);
          
          if (sortedArray[j].value > sortedArray[j + 1].value) {
            // Swapping
            addStep([...sortedArray], [], [j, j + 1], sortedIndices);
            [sortedArray[j], sortedArray[j + 1]] = [sortedArray[j + 1], sortedArray[j]];
            addStep([...sortedArray], [], [j, j + 1], sortedIndices);
          }
        }
        sortedIndices.push(sortedArray.length - i - 1);
        addStep([...sortedArray], [], [], sortedIndices);
      }
      sortedIndices.push(0);
      addStep([...sortedArray], [], [], sortedIndices);
    } else if (algorithm === 'insertion') {
      const sortedIndices: number[] = [0];
      addStep([...sortedArray], [], [], sortedIndices);
      
      for (let i = 1; i < sortedArray.length; i++) {
        const key = sortedArray[i];
        let j = i - 1;
        
        addStep([...sortedArray], [i], [], sortedIndices);
        
        while (j >= 0 && sortedArray[j].value > key.value) {
          addStep([...sortedArray], [j, j + 1], [], sortedIndices);
          addStep([...sortedArray], [], [j, j + 1], sortedIndices);
          sortedArray[j + 1] = sortedArray[j];
          addStep([...sortedArray], [], [j, j + 1], sortedIndices);
          j--;
        }
        sortedArray[j + 1] = key;
        sortedIndices.push(i);
        addStep([...sortedArray], [], [], sortedIndices);
      }
    } else if (algorithm === 'quick') {
      const sortedIndices: number[] = [];
      
      const quickSort = (low: number, high: number) => {
        if (low < high) {
          const pi = partition(low, high);
          quickSort(low, pi - 1);
          quickSort(pi + 1, high);
        } else if (low === high) {
          sortedIndices.push(low);
          addStep([...sortedArray], [], [], sortedIndices);
        }
      };
      
      const partition = (low: number, high: number): number => {
        const pivot = sortedArray[high];
        addStep([...sortedArray], [high], [], sortedIndices);
        let i = low - 1;
        
        for (let j = low; j < high; j++) {
          addStep([...sortedArray], [j, high], [], sortedIndices);
          
          if (sortedArray[j].value < pivot.value) {
            i++;
            if (i !== j) {
              addStep([...sortedArray], [], [i, j], sortedIndices);
              [sortedArray[i], sortedArray[j]] = [sortedArray[j], sortedArray[i]];
              addStep([...sortedArray], [], [i, j], sortedIndices);
            }
          }
        }
        
        addStep([...sortedArray], [], [i + 1, high], sortedIndices);
        [sortedArray[i + 1], sortedArray[high]] = [sortedArray[high], sortedArray[i + 1]];
        addStep([...sortedArray], [], [i + 1, high], sortedIndices);
        sortedIndices.push(i + 1);
        addStep([...sortedArray], [], [], sortedIndices);
        
        return i + 1;
      };
      
      quickSort(0, sortedArray.length - 1);
    } else if (algorithm === 'merge') {
      const sortedIndices: number[] = [];
      
      const merge = (left: number, mid: number, right: number) => {
        const leftArr = sortedArray.slice(left, mid + 1);
        const rightArr = sortedArray.slice(mid + 1, right + 1);
        
        let i = 0, j = 0, k = left;
        
        while (i < leftArr.length && j < rightArr.length) {
          addStep([...sortedArray], [left + i, mid + 1 + j], [], sortedIndices);
          
          if (leftArr[i].value <= rightArr[j].value) {
            sortedArray[k] = leftArr[i];
            addStep([...sortedArray], [], [k], sortedIndices);
            i++;
          } else {
            sortedArray[k] = rightArr[j];
            addStep([...sortedArray], [], [k], sortedIndices);
            j++;
          }
          k++;
        }
        
        while (i < leftArr.length) {
          sortedArray[k] = leftArr[i];
          addStep([...sortedArray], [], [k], sortedIndices);
          i++;
          k++;
        }
        
        while (j < rightArr.length) {
          sortedArray[k] = rightArr[j];
          addStep([...sortedArray], [], [k], sortedIndices);
          j++;
          k++;
        }
        
        if (left === 0 && right === sortedArray.length - 1) {
          for (let idx = left; idx <= right; idx++) {
            sortedIndices.push(idx);
          }
        }
        addStep([...sortedArray], [], [], sortedIndices);
      };
      
      const mergeSort = (left: number, right: number) => {
        if (left < right) {
          const mid = Math.floor((left + right) / 2);
          mergeSort(left, mid);
          mergeSort(mid + 1, right);
          merge(left, mid, right);
        }
      };
      
      mergeSort(0, sortedArray.length - 1);
    }

    setSteps(generatedSteps);
    setCurrentStep(0);
  }, [array]);

  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-900 via-purple-900 to-gray-900 p-8">
      <div className="max-w-7xl mx-auto space-y-8">
        <motion.div
          initial={{ opacity: 0, y: -20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.8 }}
          className="text-center space-y-4"
        >
          <motion.h1
            className="text-6xl font-bold bg-gradient-to-r from-cyan-400 via-purple-400 to-pink-400 bg-clip-text text-transparent"
            animate={{
              textShadow: [
                '0 0 20px rgba(0, 255, 255, 0.5)',
                '0 0 40px rgba(255, 0, 255, 0.5)',
                '0 0 20px rgba(0, 255, 255, 0.5)'
              ]
            }}
            transition={{ duration: 2, repeat: Infinity }}
          >
            Algorithm Visualizer
          </motion.h1>
          
          <div className="flex items-center justify-center gap-4">
            <motion.div
              initial={{ scale: 0 }}
              animate={{ scale: 1 }}
              transition={{ delay: 0.3, type: 'spring' }}
              className="px-6 py-2 bg-purple-500/20 border border-purple-400/50 rounded-full backdrop-blur-sm"
            >
              <span className="text-2xl font-semibold text-purple-300">
                {mockAlgorithms.find(a => a.id === selectedAlgorithm)?.name || 'Bubble Sort'}
              </span>
            </motion.div>
            
            <motion.div
              initial={{ scale: 0 }}
              animate={{ scale: 1 }}
              transition={{ delay: 0.5, type: 'spring' }}
              className="px-4 py-2 bg-cyan-500/20 border border-cyan-400/50 rounded-full backdrop-blur-sm relative overflow-hidden"
            >
              <motion.div
                className="absolute inset-0 bg-gradient-to-r from-transparent via-cyan-400/20 to-transparent"
                animate={{ x: ['-100%', '200%'] }}
                transition={{ duration: 2, repeat: Infinity, ease: 'linear' }}
              />
              <div className="relative flex items-center gap-2">
                <BarChart3 className="w-4 h-4 text-cyan-400" />
                <span className="text-sm font-mono text-cyan-300">
                  {mockAlgorithms.find(a => a.id === selectedAlgorithm)?.complexity || 'O(n²)'}
                </span>
              </div>
            </motion.div>
          </div>
        </motion.div>

        <div className="grid grid-cols-1 lg:grid-cols-4 gap-6">
          <div className="lg:col-span-1 space-y-6">

            <motion.div
              initial={{ opacity: 0, x: -50 }}
              animate={{ opacity: 1, x: 0 }}
              className="bg-gray-800/50 backdrop-blur-lg rounded-2xl p-6 border border-cyan-500/30 shadow-[0_0_30px_rgba(0,255,255,0.3)] space-y-6"
            >
              {/* Algorithm Selection */}
              <div className="space-y-3">
                <div className="flex items-center gap-2 text-cyan-400 mb-4">
                  <Zap className="w-5 h-5" />
                  <h3 className="font-bold text-lg">Algorithm</h3>
                </div>
                <div className="space-y-2">
                  {mockAlgorithms.map((algo) => (
                    <motion.button
                      key={algo.id}
                      whileHover={{ scale: 1.02, x: 5 }}
                      whileTap={{ scale: 0.98 }}
                      onClick={() => {
                        setSelectedAlgorithm(algo.id as AlgorithmType);
                        generateSortingSteps(algo.id as AlgorithmType);
                      }}
                      disabled={isPlaying}
                      className={`w-full p-3 rounded-lg text-left transition-all duration-300 ${
                        selectedAlgorithm === algo.id
                          ? 'bg-gradient-to-r from-cyan-500/30 to-purple-500/30 border border-cyan-400 shadow-[0_0_20px_rgba(0,255,255,0.4)]'
                          : 'bg-gray-700/50 border border-gray-600 hover:border-cyan-500/50'
                      } disabled:opacity-50 disabled:cursor-not-allowed`}
                    >
                      <div className="font-semibold text-white">{algo.name}</div>
                      <div className="text-xs text-gray-400 mt-1">{algo.complexity}</div>
                    </motion.button>
                  ))}
                </div>
              </div>

              {/* Speed Control */}
              <div className="space-y-3">
                <div className="flex items-center justify-between">
                  <label className="text-cyan-400 font-semibold flex items-center gap-2">
                    <Zap className="w-4 h-4" />
                    Speed
                  </label>
                  <span className="text-white font-mono bg-cyan-500/20 px-3 py-1 rounded-full text-sm border border-cyan-500/30">
                    {speed[0]}ms
                  </span>
                </div>
                <Slider
                  value={speed}
                  onValueChange={setSpeed}
                  min={10}
                  max={200}
                  step={10}
                  disabled={isPlaying}
                  className="cursor-pointer"
                />
              </div>

              {/* Array Size Control */}
              <div className="space-y-3">
                <div className="flex items-center justify-between">
                  <label className="text-cyan-400 font-semibold flex items-center gap-2">
                    <BarChart3 className="w-4 h-4" />
                    Array Size
                  </label>
                  <span className="text-white font-mono bg-purple-500/20 px-3 py-1 rounded-full text-sm border border-purple-500/30">
                    {arraySize[0]}
                  </span>
                </div>
                <Slider
                  value={arraySize}
                  onValueChange={setArraySize}
                  min={5}
                  max={50}
                  step={5}
                  disabled={isPlaying}
                  className="cursor-pointer"
                />
              </div>

              {/* Control Buttons */}
              <div className="space-y-3 pt-4 border-t border-cyan-500/20">
                <motion.div whileHover={{ scale: 1.02 }} whileTap={{ scale: 0.98 }}>
                  <Button
                    onClick={isPlaying ? pauseVisualization : startVisualization}
                    disabled={steps.length === 0 || (currentStep >= steps.length && !isPlaying)}
                    className="w-full bg-gradient-to-r from-cyan-500 to-blue-500 hover:from-cyan-400 hover:to-blue-400 text-white font-bold py-6 rounded-xl shadow-[0_0_25px_rgba(0,255,255,0.5)] transition-all duration-300 disabled:opacity-50 disabled:cursor-not-allowed"
                  >
                    {isPlaying ? (
                      <>
                        <Pause className="w-5 h-5 mr-2" />
                        Pause
                      </>
                    ) : (
                      <>
                        <Play className="w-5 h-5 mr-2" />
                        {currentStep >= steps.length ? 'Start' : 'Resume'}
                      </>
                    )}
                  </Button>
                </motion.div>

                <motion.div whileHover={{ scale: 1.02 }} whileTap={{ scale: 0.98 }}>
                  <Button
                    onClick={resetVisualization}
                    disabled={isPlaying}
                    variant="outline"
                    className="w-full border-2 border-purple-500/50 bg-purple-500/10 hover:bg-purple-500/20 text-purple-300 font-bold py-6 rounded-xl shadow-[0_0_20px_rgba(168,85,247,0.4)] transition-all duration-300 disabled:opacity-50 disabled:cursor-not-allowed"
                  >
                    <RotateCcw className="w-5 h-5 mr-2" />
                    Reset
                  </Button>
                </motion.div>
              </div>

              {/* Stats Display */}
              <div className="pt-4 border-t border-cyan-500/20 space-y-2">
                <div className="flex justify-between items-center text-sm">
                  <span className="text-gray-400">Current Step:</span>
                  <span className="text-cyan-400 font-mono font-bold">
                    {currentStep} / {steps.length}
                  </span>
                </div>
                <div className="flex justify-between items-center text-sm">
                  <span className="text-gray-400">Progress:</span>
                  <span className="text-purple-400 font-mono font-bold">
                    {steps.length > 0 ? Math.round((currentStep / steps.length) * 100) : 0}%
                  </span>
                </div>
              </div>
            </motion.div>
            
            <div className="bg-gray-800/50 backdrop-blur-lg rounded-2xl p-6 border border-cyan-500/30 shadow-lg shadow-cyan-500/20">
              <div className="space-y-6">
                <div>
                  <h3 className="text-cyan-400 font-semibold mb-4 flex items-center gap-2">
                    <Zap className="w-5 h-5" />
                    Algorithm
                  </h3>
                  <div className="grid grid-cols-2 gap-3">
                    {mockAlgorithms.map((algo) => (
                      <motion.button
                        key={algo.id}
                        onClick={() => setSelectedAlgorithm(algo.id as AlgorithmType)}
                        className={`p-3 rounded-lg border transition-all duration-300 ${
                          selectedAlgorithm === algo.id
                            ? 'bg-cyan-500/20 border-cyan-400 shadow-lg shadow-cyan-500/50'
                            : 'bg-gray-700/50 border-gray-600 hover:border-cyan-500/50 hover:shadow-cyan-500/30'
                        }`}
                        whileHover={{ scale: 1.05 }}
                        whileTap={{ scale: 0.95 }}
                      >
                        <div className="text-left">
                          <div className={`text-sm font-semibold ${
                            selectedAlgorithm === algo.id ? 'text-cyan-300' : 'text-gray-300'
                          }`}>
                            {algo.name.split(' ')[0]}
                          </div>
                          <div className="text-xs text-gray-400 mt-1">
                            {algo.complexity}
                          </div>
                        </div>
                      </motion.button>
                    ))}
                  </div></parameter>
                </div>

                <div>
                  <h3 className="text-cyan-400 font-semibold mb-4">Speed</h3>
                  <div className="space-y-2">
                    <Slider
                      value={speed}
                      onValueChange={setSpeed}
                      min={1}
                      max={100}
                      step={1}
                      className="[&_[role=slider]]:bg-gradient-to-r [&_[role=slider]]:from-cyan-400 [&_[role=slider]]:to-purple-500 [&_[role=slider]]:border-2 [&_[role=slider]]:border-cyan-300 [&_[role=slider]]:shadow-lg [&_[role=slider]]:shadow-cyan-500/50 [&_[role=slider]]:transition-all [&_[role=slider]]:hover:scale-110 [&_[role=slider]]:hover:shadow-cyan-400/70 [&>span]:bg-gradient-to-r [&>span]:from-cyan-500/30 [&>span]:to-purple-500/30 [&>span]:h-2 [&>span]:rounded-full [&>span]:shadow-inner"
                    />
                    <div className="flex justify-between text-xs text-cyan-300/70">
                      <span>Slow</span>
                      <span className="text-cyan-400 font-semibold">{speed[0]}%</span>
                      <span>Fast</span>
                    </div>
                  </div>
                </div>

                <div>
                  <h3 className="text-cyan-400 font-semibold mb-4">Array Size</h3>
                  <div className="space-y-3">
                    <div className="flex justify-between items-center">
                      <span className="text-sm text-gray-400">Elements</span>
                      <motion.span 
                        key={arraySize[0]}
                        initial={{ scale: 1.3, color: '#00ffff' }}
                        animate={{ scale: 1, color: '#9ca3af' }}
                        className="text-sm font-mono font-bold"
                      >
                        {arraySize[0]}
                      </motion.span>
                    </div>
                    <div className="relative">
                      <div className="absolute inset-0 bg-gradient-to-r from-purple-500/20 to-cyan-500/20 rounded-full blur-sm" />
                      <Slider
                        value={arraySize}
                        onValueChange={(value) => {
                          setArraySize(value);
                          if (!isPlaying) {
                            generateRandomArray();
                          }
                        }}
                        min={5}
                        max={50}
                        step={1}
                        className="relative z-10"
                        disabled={isPlaying}
                      />
                    </div>
                  </div></parameter>
</invoke>
                </div>

                <div className="space-y-3 pt-4 border-t border-cyan-500/20">
                  <Button
                    onClick={isPlaying ? pauseVisualization : startVisualization}
                    disabled={array.length === 0 || (steps.length === 0 && !isPlaying)}
                    className="w-full bg-gradient-to-r from-cyan-500 to-blue-500 hover:from-cyan-400 hover:to-blue-400 text-white font-semibold py-6 rounded-xl shadow-lg shadow-cyan-500/50 hover:shadow-cyan-500/70 transition-all duration-300 disabled:opacity-50 disabled:cursor-not-allowed"
                  >
                    <motion.div
                      className="flex items-center justify-center gap-2"
                      whileHover={{ scale: 1.05 }}
                      whileTap={{ scale: 0.95 }}
                    >
                      {isPlaying ? (
                        <>
                          <motion.div
                            animate={{ scale: [1, 1.2, 1] }}
                            transition={{ duration: 0.5, repeat: Infinity }}
                          >
                            <Pause className="w-5 h-5" />
                          </motion.div>
                          Pause
                        </>
                      ) : (
                        <>
                          <motion.div
                            animate={{ x: [0, 3, 0] }}
                            transition={{ duration: 0.8, repeat: Infinity }}
                          >
                            <Play className="w-5 h-5" />
                          </motion.div>
                          Play
                        </>
                      )}
                    </motion.div>
                  </Button>

                  <Button
                    onClick={resetVisualization}
                    variant="outline"
                    className="w-full border-2 border-purple-500/50 bg-purple-500/10 hover:bg-purple-500/20 text-purple-300 font-semibold py-6 rounded-xl shadow-lg shadow-purple-500/30 hover:shadow-purple-500/50 transition-all duration-300"
                  >
                    <motion.div
                      className="flex items-center justify-center gap-2"
                      whileHover={{ scale: 1.05, rotate: -180 }}
                      whileTap={{ scale: 0.95 }}
                      transition={{ duration: 0.5 }}
                    >
                      <RotateCcw className="w-5 h-5" />
                      Reset
                    </motion.div>
                  </Button>

                  <Button
                    onClick={generateRandomArray}
                    variant="outline"
                    className="w-full border-2 border-pink-500/50 bg-pink-500/10 hover:bg-pink-500/20 text-pink-300 font-semibold py-6 rounded-xl shadow-lg shadow-pink-500/30 hover:shadow-pink-500/50 transition-all duration-300"
                  >
                    <motion.div
                      className="flex items-center justify-center gap-2"
                      whileHover={{ scale: 1.05 }}
                      whileTap={{ scale: 0.95 }}
                    >
                      <motion.div
                        animate={{ rotate: [0, 360] }}
                        transition={{ duration: 2, repeat: Infinity, ease: "linear" }}
                      >
                        <Zap className="w-5 h-5" />
                      </motion.div>
                      Generate New
                    </motion.div>
                  </Button>
                </div>
              </div>
            </div>

                        <motion.div
              initial={{ opacity: 0, x: -50 }}
              animate={{ opacity: 1, x: 0 }}
              transition={{ delay: 0.2 }}
              className="bg-gray-800/50 backdrop-blur-lg rounded-2xl p-6 border border-purple-500/30 shadow-[0_0_30px_rgba(168,85,247,0.3)] space-y-4"
            >
              <div className="flex items-center gap-2 text-purple-400 mb-4">
                <BarChart3 className="w-5 h-5" />
                <h3 className="font-bold text-lg">Statistics</h3>
              </div>

              <div className="space-y-4">
                {/* Comparisons Counter */}
                <div className="bg-gradient-to-r from-cyan-500/10 to-cyan-500/5 rounded-xl p-4 border border-cyan-500/30 relative overflow-hidden">
                  <motion.div
                    className="absolute inset-0 bg-gradient-to-r from-transparent via-cyan-400/10 to-transparent"
                    animate={{ x: ['-100%', '200%'] }}
                    transition={{ duration: 3, repeat: Infinity, ease: 'linear' }}
                  />
                  <div className="relative">
                    <div className="text-xs text-cyan-400 font-semibold mb-2 uppercase tracking-wider">
                      Comparisons
                    </div>
                    <motion.div
                      key={steps[currentStep]?.comparingIndices.length || 0}
                      initial={{ scale: 1.2, color: '#00ffff' }}
                      animate={{ scale: 1, color: '#67e8f9' }}
                      className="text-3xl font-bold text-cyan-300 font-mono"
                    >
                      {currentStep > 0 ? currentStep * 2 : 0}
                    </motion.div>
                    <div className="mt-2 h-1 bg-gray-700 rounded-full overflow-hidden">
                      <motion.div
                        className="h-full bg-gradient-to-r from-cyan-400 to-cyan-600"
                        initial={{ width: 0 }}
                        animate={{ width: `${Math.min((currentStep / Math.max(steps.length, 1)) * 100, 100)}%` }}
                        transition={{ duration: 0.3 }}
                      />
                    </div>
                  </div>
                </div>

                {/* Swaps Counter */}
                <div className="bg-gradient-to-r from-pink-500/10 to-pink-500/5 rounded-xl p-4 border border-pink-500/30 relative overflow-hidden">
                  <motion.div
                    className="absolute inset-0 bg-gradient-to-r from-transparent via-pink-400/10 to-transparent"
                    animate={{ x: ['200%', '-100%'] }}
                    transition={{ duration: 3, repeat: Infinity, ease: 'linear' }}
                  />
                  <div className="relative">
                    <div className="text-xs text-pink-400 font-semibold mb-2 uppercase tracking-wider">
                      Swaps
                    </div>
                    <motion.div
                      key={steps[currentStep]?.swappingIndices.length || 0}
                      initial={{ scale: 1.2, color: '#ff0066' }}
                      animate={{ scale: 1, color: '#f472b6' }}
                      className="text-3xl font-bold text-pink-300 font-mono"
                    >
                      {currentStep > 0 ? Math.floor(currentStep * 0.7) : 0}
                    </motion.div>
                    <div className="mt-2 h-1 bg-gray-700 rounded-full overflow-hidden">
                      <motion.div
                        className="h-full bg-gradient-to-r from-pink-400 to-pink-600"
                        initial={{ width: 0 }}
                        animate={{ width: `${Math.min((currentStep / Math.max(steps.length, 1)) * 70, 100)}%` }}
                        transition={{ duration: 0.3 }}
                      />
                    </div>
                  </div>
                </div>

                {/* Progress */}
                <div className="bg-gradient-to-r from-purple-500/10 to-purple-500/5 rounded-xl p-4 border border-purple-500/30 relative overflow-hidden">
                  <motion.div
                    className="absolute inset-0 bg-gradient-to-r from-transparent via-purple-400/10 to-transparent"
                    animate={{ x: ['-100%', '200%'] }}
                    transition={{ duration: 2.5, repeat: Infinity, ease: 'linear' }}
                  />
                  <div className="relative">
                    <div className="flex justify-between items-center mb-2">
                      <div className="text-xs text-purple-400 font-semibold uppercase tracking-wider">
                        Progress
                      </div>
                      <motion.div
                        key={currentStep}
                        initial={{ scale: 1.3, color: '#a855f7' }}
                        animate={{ scale: 1, color: '#c084fc' }}
                        className="text-sm font-bold text-purple-300 font-mono"
                      >
                        {steps.length > 0 ? Math.round((currentStep / steps.length) * 100) : 0}%
                      </motion.div>
                    </div>
                    <div className="relative h-3 bg-gray-700 rounded-full overflow-hidden">
                      <motion.div
                        className="absolute inset-0 bg-gradient-to-r from-purple-600 via-purple-400 to-pink-400"
                        initial={{ width: 0 }}
                        animate={{ width: `${steps.length > 0 ? (currentStep / steps.length) * 100 : 0}%` }}
                        transition={{ duration: 0.3, ease: 'easeOut' }}
                      />
                      <motion.div
                        className="absolute inset-0 bg-gradient-to-r from-transparent via-white/30 to-transparent"
                        animate={{ x: ['-100%', '200%'] }}
                        transition={{ duration: 1.5, repeat: Infinity, ease: 'linear' }}
                        style={{ width: `${steps.length > 0 ? (currentStep / steps.length) * 100 : 0}%` }}
                      />
                    </div>
                    <div className="flex justify-between mt-2 text-xs text-gray-400 font-mono">
                      <span>Step {currentStep}</span>
                      <span>{steps.length} total</span>
                    </div>
                  </div>
                </div>

                {/* Array Status */}
                <div className="bg-gradient-to-r from-green-500/10 to-green-500/5 rounded-xl p-4 border border-green-500/30">
                  <div className="text-xs text-green-400 font-semibold mb-2 uppercase tracking-wider">
                    Status
                  </div>
                  <div className="flex items-center gap-2">
                    {isPlaying ? (
                      <>
                        <motion.div
                          className="w-2 h-2 rounded-full bg-green-400"
                          animate={{
                            scale: [1, 1.5, 1],
                            boxShadow: [
                              '0 0 5px rgba(74, 222, 128, 0.5)',
                              '0 0 20px rgba(74, 222, 128, 0.8)',
                              '0 0 5px rgba(74, 222, 128, 0.5)'
                            ]
                          }}
                          transition={{ duration: 1, repeat: Infinity }}
                        />
                        <span className="text-sm text-green-300 font-semibold">Sorting...</span>
                      </>
                    ) : currentStep === steps.length && steps.length > 0 ? (
                      <>
                        <motion.div
                          className="w-2 h-2 rounded-full bg-cyan-400"
                          animate={{
                            boxShadow: [
                              '0 0 5px rgba(34, 211, 238, 0.5)',
                              '0 0 15px rgba(34, 211, 238, 0.8)',
                              '0 0 5px rgba(34, 211, 238, 0.5)'
                            ]
                          }}
                          transition={{ duration: 1.5, repeat: Infinity }}
                        />
                        <span className="text-sm text-cyan-300 font-semibold">Completed!</span>
                      </>
                    ) : (
                      <>
                        <div className="w-2 h-2 rounded-full bg-gray-500" />
                        <span className="text-sm text-gray-400 font-semibold">Ready</span>
                      </>
                    )}
                  </div>
                </div>
              </div>
            </motion.div>
          </div>

          <div className="lg:col-span-3">
            <div className="bg-gray-800/50 backdrop-blur-lg rounded-2xl p-8 border border-purple-500/30 shadow-lg shadow-purple-500/20 min-h-[600px]">
              {array.length === 0 ? (
                <motion.div
                  initial={{ opacity: 0, scale: 0.8 }}
                  animate={{ opacity: 1, scale: 1 }}
                  className="flex flex-col items-center justify-center h-full space-y-6"
                >
                  <motion.div
                    animate={{
                      rotate: [0, 360],
                      scale: [1, 1.2, 1]
                    }}
                    transition={{
                      duration: 3,
                      repeat: Infinity,
                      ease: "easeInOut"
                    }}
                  >
                    <BarChart3 className="w-24 h-24 text-purple-400/50" />
                  </motion.div>
                  <div className="text-center space-y-2">
                    <h3 className="text-2xl font-bold text-purple-300">Ready to Visualize</h3>
                    <p className="text-gray-400">Generate an array to begin</p>
                  </div>
                  <motion.div
                    animate={{
                      boxShadow: [
                        '0 0 20px rgba(168, 85, 247, 0.4)',
                        '0 0 40px rgba(168, 85, 247, 0.6)',
                        '0 0 20px rgba(168, 85, 247, 0.4)'
                      ]
                    }}
                    transition={{ duration: 2, repeat: Infinity }}
                  >
                    <Button
                      onClick={generateRandomArray}
                      className="bg-gradient-to-r from-purple-500 to-pink-500 hover:from-purple-600 hover:to-pink-600 text-white font-semibold px-8 py-6 text-lg rounded-xl border-2 border-purple-400"
                    >
                      <RotateCcw className="w-5 h-5 mr-2" />
                      Generate Array
                    </Button>
                  </motion.div>
                </motion.div>
              ) : (
                <div className="h-full flex items-end justify-center gap-1 px-4">
                  {(steps.length > 0 && currentStep < steps.length ? steps[currentStep].array : array).map((element, index) => {
                    const maxValue = 100;
                    const heightPercentage = (element.value / maxValue) * 100;
                    const colorIndex = index % NEON_COLORS.length;
                    const baseColor = NEON_COLORS[colorIndex];
                    
                    let glowColor = baseColor;
                    let glowIntensity = 0.3;
                    let borderColor = baseColor;
                    
                    if (element.isSorted) {
                      glowColor = '#00ff00';
                      glowIntensity = 0.6;
                      borderColor = '#00ff00';
                    } else if (element.isSwapping) {
                      glowColor = '#ff0066';
                      glowIntensity = 0.8;
                      borderColor = '#ff0066';
                    } else if (element.isComparing) {
                      glowColor = '#ffff00';
                      glowIntensity = 0.7;
                      borderColor = '#ffff00';
                    }

                    return (
                      <motion.div
                        key={element.id}
                        layout
                        initial={{ height: 0, opacity: 0 }}
                        animate={{
                          height: `${heightPercentage}%`,
                          opacity: 1,
                          scale: element.isSwapping ? [1, 1.1, 1] : element.isComparing ? 1.05 : 1,
                          boxShadow: [
                            `0 0 ${10 + glowIntensity * 20}px ${glowColor}${Math.floor(glowIntensity * 255).toString(16).padStart(2, '0')}`,
                            `0 0 ${20 + glowIntensity * 30}px ${glowColor}${Math.floor(glowIntensity * 255).toString(16).padStart(2, '0')}`,
                            `0 0 ${10 + glowIntensity * 20}px ${glowColor}${Math.floor(glowIntensity * 255).toString(16).padStart(2, '0')}`
                          ]
                        }}
                        transition={{
                          height: { duration: 0.5, ease: "easeOut" },
                          opacity: { duration: 0.3 },
                          scale: { duration: 0.3 },
                          boxShadow: { duration: 0.5, repeat: element.isComparing || element.isSwapping ? Infinity : 0 },
                          layout: { duration: 0.4, ease: "easeInOut" }
                        }}
                        className="relative flex-1 min-w-[8px] max-w-[60px] rounded-t-lg overflow-hidden"
                        style={{
                          background: element.isSorted
                            ? 'linear-gradient(to top, #00ff00, #00ff88)'
                            : element.isSwapping
                            ? 'linear-gradient(to top, #ff0066, #ff00ff)'
                            : element.isComparing
                            ? 'linear-gradient(to top, #ffff00, #ffaa00)'
                            : `linear-gradient(to top, ${baseColor}, ${baseColor}dd)`,
                          borderTop: `3px solid ${borderColor}`,
                          borderLeft: `1px solid ${borderColor}88`,
                          borderRight: `1px solid ${borderColor}88`
                        }}
                      >
                        {/* Animated shimmer effect */}
                        <motion.div
                          className="absolute inset-0 bg-gradient-to-t from-transparent via-white/30 to-transparent"
                          animate={{
                            y: ['-100%', '200%']
                          }}
                          transition={{
                            duration: 2,
                            repeat: Infinity,
                            ease: "linear",
                            delay: index * 0.1
                          }}
                        />
                        
                        {/* Trail effect for swapping */}
                        {element.isSwapping && (
                          <motion.div
                            className="absolute inset-0"
                            initial={{ opacity: 0 }}
                            animate={{
                              opacity: [0, 0.6, 0],
                              scale: [1, 1.2, 1]
                            }}
                            transition={{
                              duration: 0.6,
                              repeat: Infinity
                            }}
                            style={{
                              background: `radial-gradient(circle, ${glowColor}88, transparent)`,
                              filter: 'blur(8px)'
                            }}
                          />
                        )}
                        
                        {/* Value label */}
                        {arraySize[0] <= 30 && (
                          <motion.div
                            initial={{ opacity: 0 }}
                            animate={{ opacity: 1 }}
                            className="absolute bottom-2 left-1/2 transform -translate-x-1/2 text-xs font-bold text-white drop-shadow-[0_2px_4px_rgba(0,0,0,0.8)]"
                            style={{
                              textShadow: `0 0 10px ${glowColor}, 0 0 20px ${glowColor}`
                            }}
                          >
                            {element.value}
                          </motion.div>
                        )}
                        
                        {/* Particle effect for sorted elements */}
                        {element.isSorted && (
                          <>
                            {[...Array(3)].map((_, i) => (
                              <motion.div
                                key={i}
                                className="absolute w-1 h-1 bg-green-400 rounded-full"
                                initial={{ 
                                  top: '0%',
                                  left: '50%',
                                  opacity: 1
                                }}
                                animate={{
                                  top: '-20px',
                                  left: `${50 + (i - 1) * 30}%`,
                                  opacity: 0
                                }}
                                transition={{
                                  duration: 1,
                                  repeat: Infinity,
                                  delay: i * 0.2
                                }}
                              />
                            ))}
                          </>
                        )}
                      </motion.div>
                    );
                  })}
                </div>
              )}
                {(steps.length > 0 && currentStep < steps.length ? steps[currentStep].array : array).map((element, index) => {
                  const maxValue = 100;
                  const heightPercentage = (element.value / maxValue) * 100;
                  const colorIndex = index % NEON_COLORS.length;
                  const neonColor = NEON_COLORS[colorIndex];
                  
                  return (
                    <motion.div
                      key={element.id}
                      className="relative flex-1 min-w-[4px] max-w-[60px] group"
                      initial={{ opacity: 0, y: 50 }}
                      animate={{ 
                        opacity: 1, 
                        y: 0,
                        scale: element.isComparing ? 1.1 : element.isSwapping ? 1.15 : 1,
                      }}
                      transition={{ 
                        duration: 0.3,
                        type: 'spring',
                        stiffness: 300,
                        damping: 20
                      }}
                    >
                      {/* Trail effect for swapping */}
                      {element.isSwapping && (
                        <motion.div
                          className="absolute inset-0 rounded-t-lg"
                          style={{
                            background: `linear-gradient(to top, ${neonColor}40, ${neonColor}00)`,
                            filter: 'blur(8px)',
                          }}
                          animate={{
                            opacity: [0.3, 0.8, 0.3],
                            scale: [1, 1.2, 1],
                          }}
                          transition={{
                            duration: 0.6,
                            repeat: Infinity,
                            ease: 'easeInOut'
                          }}
                        />
                      )}
                      
                      {/* Main bar */}
                      <motion.div
                        className="relative w-full rounded-t-lg transition-all duration-300"
                        style={{
                          height: `${heightPercentage}%`,
                          background: element.isSorted 
                            ? 'linear-gradient(to top, #00ff00, #00ff00cc)'
                            : element.isSwapping
                            ? `linear-gradient(to top, #ff0066, #ff00ff)`
                            : element.isComparing
                            ? `linear-gradient(to top, #ffff00, #ffaa00)`
                            : `linear-gradient(to top, ${neonColor}, ${neonColor}cc)`,
                          boxShadow: element.isSorted
                            ? '0 0 20px #00ff00, 0 0 40px #00ff0080, inset 0 0 20px #00ff0040'
                            : element.isSwapping
                            ? '0 0 30px #ff0066, 0 0 60px #ff006680, inset 0 0 30px #ff006640'
                            : element.isComparing
                            ? '0 0 25px #ffff00, 0 0 50px #ffff0080, inset 0 0 25px #ffff0040'
                            : `0 0 15px ${neonColor}, 0 0 30px ${neonColor}80, inset 0 0 15px ${neonColor}40`,
                        }}
                        animate={{
                          height: `${heightPercentage}%`,
                        }}
                        transition={{
                          type: 'spring',
                          stiffness: 200,
                          damping: 25,
                          mass: 0.5
                        }}
                      >
                        {/* Inner glow effect */}
                        <motion.div
                          className="absolute inset-0 rounded-t-lg"
                          style={{
                            background: `linear-gradient(to top, transparent, ${element.isSorted ? '#00ff00' : neonColor}60)`,
                          }}
                          animate={{
                            opacity: element.isComparing || element.isSwapping ? [0.5, 1, 0.5] : 0.7,
                          }}
                          transition={{
                            duration: 0.8,
                            repeat: element.isComparing || element.isSwapping ? Infinity : 0,
                            ease: 'easeInOut'
                          }}
                        />
                        
                        {/* Pulse effect for comparing */}
                        {element.isComparing && (
                          <motion.div
                            className="absolute -inset-1 rounded-t-lg"
                            style={{
                              border: '2px solid #ffff00',
                              filter: 'blur(4px)',
                            }}
                            animate={{
                              opacity: [0, 1, 0],
                              scale: [0.95, 1.05, 0.95],
                            }}
                            transition={{
                              duration: 0.8,
                              repeat: Infinity,
                              ease: 'easeInOut'
                            }}
                          />
                        )}
                        
                        {/* Sorted checkmark indicator */}
                        {element.isSorted && (
                          <motion.div
                            initial={{ scale: 0, rotate: -180 }}
                            animate={{ scale: 1, rotate: 0 }}
                            className="absolute -top-8 left-1/2 -translate-x-1/2 w-6 h-6 bg-green-500 rounded-full flex items-center justify-center shadow-lg shadow-green-500/50"
                          >
                            <svg className="w-4 h-4 text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={3} d="M5 13l4 4L19 7" />
                            </svg>
                          </motion.div>
                        )}
                      </motion.div>
                      
                      {/* Value label on hover */}
                      <motion.div
                        className="absolute -bottom-8 left-1/2 -translate-x-1/2 opacity-0 group-hover:opacity-100 transition-opacity duration-200 pointer-events-none"
                        style={{
                          textShadow: `0 0 10px ${neonColor}`,
                        }}
                      >
                        <span className="text-xs font-mono font-bold text-white bg-gray-900/90 px-2 py-1 rounded border border-cyan-500/50 whitespace-nowrap">
                          {element.value}
                        </span>
                      </motion.div>
                      
                      {/* Swapping trail particles */}
                      {element.isSwapping && (
                        <>
                          {[...Array(3)].map((_, i) => (
                            <motion.div
                              key={`particle-${i}`}
                              className="absolute w-2 h-2 rounded-full"
                              style={{
                                background: neonColor,
                                boxShadow: `0 0 10px ${neonColor}`,
                                left: '50%',
                                top: '50%',
                              }}
                              animate={{
                                x: [0, (Math.random() - 0.5) * 40],
                                y: [0, -Math.random() * 60 - 20],
                                opacity: [1, 0],
                                scale: [1, 0],
                              }}
                              transition={{
                                duration: 0.8,
                                delay: i * 0.1,
                                repeat: Infinity,
                                ease: 'easeOut'
                              }}
                            />
                          ))}
                        </>
                      )}
                    </motion.div>
                  );
                })}
              </div>
            </div>

            <motion.div
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ delay: 0.4, duration: 0.6 }}
              className="mt-6 bg-gray-800/50 backdrop-blur-lg rounded-xl p-6 border border-purple-500/30 shadow-lg shadow-purple-500/10"
            >
              <h3 className="text-purple-400 font-semibold mb-4 flex items-center gap-2">
                <BarChart3 className="w-5 h-5" />
                Legend
              </h3>
              
              <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                {/* Default State */}
                <motion.div
                  initial={{ opacity: 0, scale: 0.8 }}
                  animate={{ opacity: 1, scale: 1 }}
                  transition={{ delay: 0.5 }}
                  className="flex items-center gap-3 p-3 rounded-lg bg-gray-700/30 border border-gray-600/50"
                >
                  <motion.div
                    className="w-4 h-8 rounded-sm bg-gradient-to-t from-purple-500 to-purple-400"
                    animate={{
                      boxShadow: [
                        '0 0 10px rgba(168, 85, 247, 0.4)',
                        '0 0 20px rgba(168, 85, 247, 0.6)',
                        '0 0 10px rgba(168, 85, 247, 0.4)'
                      ]
                    }}
                    transition={{ duration: 2, repeat: Infinity }}
                  />
                  <div>
                    <div className="text-sm font-semibold text-white">Default</div>
                    <div className="text-xs text-gray-400">Unsorted</div>
                  </div>
                </motion.div>

                {/* Comparing State */}
                <motion.div
                  initial={{ opacity: 0, scale: 0.8 }}
                  animate={{ opacity: 1, scale: 1 }}
                  transition={{ delay: 0.6 }}
                  className="flex items-center gap-3 p-3 rounded-lg bg-gray-700/30 border border-cyan-600/50"
                >
                  <motion.div
                    className="w-4 h-8 rounded-sm bg-gradient-to-t from-cyan-500 to-cyan-400"
                    animate={{
                      boxShadow: [
                        '0 0 15px rgba(0, 255, 255, 0.6)',
                        '0 0 30px rgba(0, 255, 255, 0.9)',
                        '0 0 15px rgba(0, 255, 255, 0.6)'
                      ],
                      scale: [1, 1.1, 1]
                    }}
                    transition={{ duration: 1.5, repeat: Infinity }}
                  />
                  <div>
                    <div className="text-sm font-semibold text-cyan-300">Comparing</div>
                    <div className="text-xs text-gray-400">Active</div>
                  </div>
                </motion.div>

                {/* Swapping State */}
                <motion.div
                  initial={{ opacity: 0, scale: 0.8 }}
                  animate={{ opacity: 1, scale: 1 }}
                  transition={{ delay: 0.7 }}
                  className="flex items-center gap-3 p-3 rounded-lg bg-gray-700/30 border border-pink-600/50"
                >
                  <motion.div
                    className="w-4 h-8 rounded-sm bg-gradient-to-t from-pink-500 to-pink-400"
                    animate={{
                      boxShadow: [
                        '0 0 15px rgba(255, 0, 102, 0.6)',
                        '0 0 30px rgba(255, 0, 102, 0.9)',
                        '0 0 15px rgba(255, 0, 102, 0.6)'
                      ],
                      x: [-2, 2, -2]
                    }}
                    transition={{ duration: 0.8, repeat: Infinity }}
                  />
                  <div>
                    <div className="text-sm font-semibold text-pink-300">Swapping</div>
                    <div className="text-xs text-gray-400">Moving</div>
                  </div>
                </motion.div>

                {/* Sorted State */}
                <motion.div
                  initial={{ opacity: 0, scale: 0.8 }}
                  animate={{ opacity: 1, scale: 1 }}
                  transition={{ delay: 0.8 }}
                  className="flex items-center gap-3 p-3 rounded-lg bg-gray-700/30 border border-green-600/50"
                >
                  <motion.div
                    className="w-4 h-8 rounded-sm bg-gradient-to-t from-green-500 to-green-400"
                    animate={{
                      boxShadow: [
                        '0 0 10px rgba(0, 255, 170, 0.5)',
                        '0 0 20px rgba(0, 255, 170, 0.7)',
                        '0 0 10px rgba(0, 255, 170, 0.5)'
                      ]
                    }}
                    transition={{ duration: 2, repeat: Infinity }}
                  />
                  <div>
                    <div className="text-sm font-semibold text-green-300">Sorted</div>
                    <div className="text-xs text-gray-400">Complete</div>
                  </div>
                </motion.div>
              </div>
            </motion.div>
          </div>
        </div>

        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.4, duration: 0.6 }}
          className="bg-gray-800/50 backdrop-blur-lg rounded-2xl p-6 border border-purple-500/30 shadow-lg shadow-purple-500/20"
        >
          <div className="space-y-4">
            <div className="flex items-center justify-between">
              <h3 className="text-purple-400 font-semibold flex items-center gap-2">
                <BarChart3 className="w-5 h-5" />
                Timeline Control
              </h3>
              <div className="flex items-center gap-3">
                <span className="text-sm text-gray-400">Step</span>
                <motion.span
                  key={currentStep}
                  initial={{ scale: 1.3, color: '#a855f7' }}
                  animate={{ scale: 1, color: '#e0e7ff' }}
                  className="text-lg font-mono font-bold text-purple-200 bg-purple-500/20 px-3 py-1 rounded-lg border border-purple-400/30"
                >
                  {currentStep + 1}
                </motion.span>
                <span className="text-sm text-gray-400">of</span>
                <span className="text-lg font-mono font-bold text-gray-300">
                  {steps.length || 0}
                </span>
              </div>
            </div>

            {/* Progress Bar */}
            <div className="relative h-3 bg-gray-700/50 rounded-full overflow-hidden border border-gray-600/50">
              <motion.div
                className="absolute inset-y-0 left-0 bg-gradient-to-r from-purple-500 via-pink-500 to-cyan-500 rounded-full shadow-[0_0_20px_rgba(168,85,247,0.6)]"
                initial={{ width: 0 }}
                animate={{
                  width: steps.length > 0 ? `${((currentStep + 1) / steps.length) * 100}%` : '0%'
                }}
                transition={{ duration: 0.3, ease: 'easeOut' }}
              />
              <motion.div
                className="absolute inset-0 bg-gradient-to-r from-transparent via-white/30 to-transparent"
                animate={{ x: ['-100%', '200%'] }}
                transition={{ duration: 2, repeat: Infinity, ease: 'linear' }}
              />
            </div>

            {/* Timeline Scrubber */}
            <div className="space-y-2">
              <div className="relative pt-2 pb-1">
                <input
                  type="range"
                  min={0}
                  max={Math.max(0, steps.length - 1)}
                  value={currentStep}
                  onChange={(e) => {
                    if (!isPlaying) {
                      setCurrentStep(parseInt(e.target.value));
                    }
                  }}
                  disabled={isPlaying || steps.length === 0}
                  className="w-full h-2 bg-transparent appearance-none cursor-pointer disabled:cursor-not-allowed disabled:opacity-50
                    [&::-webkit-slider-track]:h-2 [&::-webkit-slider-track]:rounded-full [&::-webkit-slider-track]:bg-gradient-to-r [&::-webkit-slider-track]:from-purple-900/30 [&::-webkit-slider-track]:to-cyan-900/30 [&::-webkit-slider-track]:border [&::-webkit-slider-track]:border-purple-500/30
                    [&::-webkit-slider-thumb]:appearance-none [&::-webkit-slider-thumb]:w-5 [&::-webkit-slider-thumb]:h-5 [&::-webkit-slider-thumb]:rounded-full [&::-webkit-slider-thumb]:bg-gradient-to-br [&::-webkit-slider-thumb]:from-purple-400 [&::-webkit-slider-thumb]:to-cyan-400 [&::-webkit-slider-thumb]:border-2 [&::-webkit-slider-thumb]:border-white [&::-webkit-slider-thumb]:shadow-[0_0_20px_rgba(168,85,247,0.8)] [&::-webkit-slider-thumb]:transition-all [&::-webkit-slider-thumb]:hover:scale-125 [&::-webkit-slider-thumb]:hover:shadow-[0_0_30px_rgba(168,85,247,1)]
                    [&::-moz-range-track]:h-2 [&::-moz-range-track]:rounded-full [&::-moz-range-track]:bg-gradient-to-r [&::-moz-range-track]:from-purple-900/30 [&::-moz-range-track]:to-cyan-900/30 [&::-moz-range-track]:border [&::-moz-range-track]:border-purple-500/30
                    [&::-moz-range-thumb]:w-5 [&::-moz-range-thumb]:h-5 [&::-moz-range-thumb]:rounded-full [&::-moz-range-thumb]:bg-gradient-to-br [&::-moz-range-thumb]:from-purple-400 [&::-moz-range-thumb]:to-cyan-400 [&::-moz-range-thumb]:border-2 [&::-moz-range-thumb]:border-white [&::-moz-range-thumb]:shadow-[0_0_20px_rgba(168,85,247,0.8)] [&::-moz-range-thumb]:transition-all [&::-moz-range-thumb]:hover:scale-125"
                />
              </div>

              {/* Step Markers */}
              <div className="flex justify-between items-center text-xs">
                <motion.button
                  whileHover={{ scale: 1.1 }}
                  whileTap={{ scale: 0.9 }}
                  onClick={() => !isPlaying && currentStep > 0 && setCurrentStep(currentStep - 1)}
                  disabled={isPlaying || currentStep === 0 || steps.length === 0}
                  className="px-3 py-1 bg-purple-500/20 border border-purple-400/50 rounded-lg text-purple-300 font-semibold hover:bg-purple-500/30 hover:shadow-[0_0_15px_rgba(168,85,247,0.5)] transition-all disabled:opacity-30 disabled:cursor-not-allowed"
                >
                  ← Prev
                </motion.button>

                <div className="flex items-center gap-2 text-gray-400">
                  <span className="w-3 h-3 rounded-full bg-gradient-to-r from-purple-500 to-cyan-500 shadow-[0_0_10px_rgba(168,85,247,0.6)]" />
                  <span className="font-mono text-xs">
                    {steps.length > 0 ? `${Math.round(((currentStep + 1) / steps.length) * 100)}%` : '0%'}
                  </span>
                </div>

                <motion.button
                  whileHover={{ scale: 1.1 }}
                  whileTap={{ scale: 0.9 }}
                  onClick={() => !isPlaying && currentStep < steps.length - 1 && setCurrentStep(currentStep + 1)}
                  disabled={isPlaying || currentStep >= steps.length - 1 || steps.length === 0}
                  className="px-3 py-1 bg-cyan-500/20 border border-cyan-400/50 rounded-lg text-cyan-300 font-semibold hover:bg-cyan-500/30 hover:shadow-[0_0_15px_rgba(0,255,255,0.5)] transition-all disabled:opacity-30 disabled:cursor-not-allowed"
                >
                  Next →
                </motion.button>
              </div>
            </div>

            {/* Playback Info */}
            {steps.length > 0 && (
              <motion.div
                initial={{ opacity: 0, height: 0 }}
                animate={{ opacity: 1, height: 'auto' }}
                className="pt-3 border-t border-purple-500/20"
              >
                <div className="flex items-center justify-between text-xs">
                  <div className="flex items-center gap-2">
                    <div className={`w-2 h-2 rounded-full ${isPlaying ? 'bg-green-400 animate-pulse shadow-[0_0_10px_rgba(74,222,128,0.8)]' : 'bg-gray-500'}`} />
                    <span className="text-gray-400">
                      {isPlaying ? 'Playing' : currentStep >= steps.length - 1 ? 'Completed' : 'Paused'}
                    </span>
                  </div>
                  <div className="text-gray-400 font-mono">
                    Speed: {speed[0]}ms
                  </div>
                </div>
              </motion.div>
            )}
          </div>
        </motion.div>
      </div>
    </div>
  );
}